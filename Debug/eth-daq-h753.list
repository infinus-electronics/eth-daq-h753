
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002243c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000384c  080226dc  080226dc  000236dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08025f28  08025f28  00026f28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08025f30  08025f30  00026f30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08025f34  08025f34  00026f34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  08025f38  00027000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000024a8  20000088  08025fc0  00027088  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20002530  08025fc0  00027530  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002b30  08025fc0  00027b30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00040000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    00024000  30000000  30000000  00099000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008004  38000000  38000000  000bd000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000c5004  2**0
                  CONTENTS, READONLY
 14 .debug_info   0005f669  00000000  00000000  000c5032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000bbd5  00000000  00000000  0012469b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00002e58  00000000  00000000  00130270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002516  00000000  00000000  001330c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004ef0d  00000000  00000000  001355de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005773c  00000000  00000000  001844eb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00190a0c  00000000  00000000  001dbc27  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  0036c633  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000c914  00000000  00000000  0036c678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  00378f8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080226c4 	.word	0x080226c4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	080226c4 	.word	0x080226c4

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f000 ff2b 	bl	8001500 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	60ba      	str	r2, [r7, #8]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f018 fc31 	bl	8018fdc <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(usADCDataMock0, 0x41, sizeof(usADCDataMock0));
 800077a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800077e:	2141      	movs	r1, #65	@ 0x41
 8000780:	4891      	ldr	r0, [pc, #580]	@ (80009c8 <main+0x328>)
 8000782:	f020 fa2c 	bl	8020bde <memset>
  memset(usADCDataMock1, 0x42, sizeof(usADCDataMock1));
 8000786:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800078a:	2142      	movs	r1, #66	@ 0x42
 800078c:	488f      	ldr	r0, [pc, #572]	@ (80009cc <main+0x32c>)
 800078e:	f020 fa26 	bl	8020bde <memset>
  memset(usAuxADCDataMock0, 0x43, sizeof(usAuxADCDataMock0));
 8000792:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000796:	2143      	movs	r1, #67	@ 0x43
 8000798:	488d      	ldr	r0, [pc, #564]	@ (80009d0 <main+0x330>)
 800079a:	f020 fa20 	bl	8020bde <memset>
  memset(usAuxADCDataMock1, 0x44, sizeof(usAuxADCDataMock1));
 800079e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007a2:	2144      	movs	r1, #68	@ 0x44
 80007a4:	488b      	ldr	r0, [pc, #556]	@ (80009d4 <main+0x334>)
 80007a6:	f020 fa1a 	bl	8020bde <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007aa:	f3bf 8f4f 	dsb	sy
}
 80007ae:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 f946 	bl	8000a40 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007b4:	f000 f9f2 	bl	8000b9c <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007b8:	f000 fc9c 	bl	80010f4 <vHeapInit>
  vStartHighResolutionTimer();
 80007bc:	f020 f82e 	bl	802081c <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 fc42 	bl	8001048 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c4:	f000 fc08 	bl	8000fd8 <MX_DMA_Init>
//  MX_ETH_Init();s
  MX_USART3_UART_Init();
 80007c8:	f000 fbba 	bl	8000f40 <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007cc:	f000 fa16 	bl	8000bfc <MX_SPI1_Init>
  MX_SPI2_Init();
 80007d0:	f000 fa6a 	bl	8000ca8 <MX_SPI2_Init>
  MX_SPI3_Init();
 80007d4:	f000 fabe 	bl	8000d54 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007d8:	f000 fb12 	bl	8000e00 <MX_TIM1_Init>
  MX_TIM3_Init();
 80007dc:	f000 fb62 	bl	8000ea4 <MX_TIM3_Init>
//  MX_TIM2_Init();
  /* USER CODE BEGIN 2 */

  //SPI1 RX Stream
  DMA1_Stream0->M0AR = usADCDataMock0;
 80007e0:	4b7d      	ldr	r3, [pc, #500]	@ (80009d8 <main+0x338>)
 80007e2:	4a79      	ldr	r2, [pc, #484]	@ (80009c8 <main+0x328>)
 80007e4:	60da      	str	r2, [r3, #12]
  DMA1_Stream0->M1AR = usADCDataMock1;
 80007e6:	4b7c      	ldr	r3, [pc, #496]	@ (80009d8 <main+0x338>)
 80007e8:	4a78      	ldr	r2, [pc, #480]	@ (80009cc <main+0x32c>)
 80007ea:	611a      	str	r2, [r3, #16]
  DMA1_Stream0->PAR = &(SPI1->RXDR);
 80007ec:	4b7a      	ldr	r3, [pc, #488]	@ (80009d8 <main+0x338>)
 80007ee:	4a7b      	ldr	r2, [pc, #492]	@ (80009dc <main+0x33c>)
 80007f0:	609a      	str	r2, [r3, #8]
  DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 80007f2:	4b79      	ldr	r3, [pc, #484]	@ (80009d8 <main+0x338>)
 80007f4:	681b      	ldr	r3, [r3, #0]
 80007f6:	4a78      	ldr	r2, [pc, #480]	@ (80009d8 <main+0x338>)
 80007f8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80007fc:	6013      	str	r3, [r2, #0]
  DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 80007fe:	4b76      	ldr	r3, [pc, #472]	@ (80009d8 <main+0x338>)
 8000800:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8000804:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 8000806:	4b74      	ldr	r3, [pc, #464]	@ (80009d8 <main+0x338>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	4a73      	ldr	r2, [pc, #460]	@ (80009d8 <main+0x338>)
 800080c:	f043 0310 	orr.w	r3, r3, #16
 8000810:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000812:	f3bf 8f4f 	dsb	sy
}
 8000816:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream0->CR |= DMA_SxCR_EN;
 8000818:	4b6f      	ldr	r3, [pc, #444]	@ (80009d8 <main+0x338>)
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4a6e      	ldr	r2, [pc, #440]	@ (80009d8 <main+0x338>)
 800081e:	f043 0301 	orr.w	r3, r3, #1
 8000822:	6013      	str	r3, [r2, #0]

  //SPI2 RX Stream
  DMA1_Stream1->M0AR = usAuxADCDataMock0;
 8000824:	4b6e      	ldr	r3, [pc, #440]	@ (80009e0 <main+0x340>)
 8000826:	4a6a      	ldr	r2, [pc, #424]	@ (80009d0 <main+0x330>)
 8000828:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usAuxADCDataMock1;
 800082a:	4b6d      	ldr	r3, [pc, #436]	@ (80009e0 <main+0x340>)
 800082c:	4a69      	ldr	r2, [pc, #420]	@ (80009d4 <main+0x334>)
 800082e:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 8000830:	4b6b      	ldr	r3, [pc, #428]	@ (80009e0 <main+0x340>)
 8000832:	4a6c      	ldr	r2, [pc, #432]	@ (80009e4 <main+0x344>)
 8000834:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 8000836:	4b6a      	ldr	r3, [pc, #424]	@ (80009e0 <main+0x340>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	4a69      	ldr	r2, [pc, #420]	@ (80009e0 <main+0x340>)
 800083c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000840:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 8000842:	4b67      	ldr	r3, [pc, #412]	@ (80009e0 <main+0x340>)
 8000844:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000848:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 800084a:	4b65      	ldr	r3, [pc, #404]	@ (80009e0 <main+0x340>)
 800084c:	681b      	ldr	r3, [r3, #0]
 800084e:	4a64      	ldr	r2, [pc, #400]	@ (80009e0 <main+0x340>)
 8000850:	f043 0310 	orr.w	r3, r3, #16
 8000854:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8000856:	f3bf 8f4f 	dsb	sy
}
 800085a:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 800085c:	4b60      	ldr	r3, [pc, #384]	@ (80009e0 <main+0x340>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	4a5f      	ldr	r2, [pc, #380]	@ (80009e0 <main+0x340>)
 8000862:	f043 0301 	orr.w	r3, r3, #1
 8000866:	6013      	str	r3, [r2, #0]

  //TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 8000868:	4b5f      	ldr	r3, [pc, #380]	@ (80009e8 <main+0x348>)
 800086a:	4a60      	ldr	r2, [pc, #384]	@ (80009ec <main+0x34c>)
 800086c:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 800086e:	4b5e      	ldr	r3, [pc, #376]	@ (80009e8 <main+0x348>)
 8000870:	4a5f      	ldr	r2, [pc, #380]	@ (80009f0 <main+0x350>)
 8000872:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 8000874:	4b5c      	ldr	r3, [pc, #368]	@ (80009e8 <main+0x348>)
 8000876:	2201      	movs	r2, #1
 8000878:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800087a:	f3bf 8f4f 	dsb	sy
}
 800087e:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 8000880:	4b59      	ldr	r3, [pc, #356]	@ (80009e8 <main+0x348>)
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4a58      	ldr	r2, [pc, #352]	@ (80009e8 <main+0x348>)
 8000886:	f043 0301 	orr.w	r3, r3, #1
 800088a:	6013      	str	r3, [r2, #0]

  //TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 800088c:	4b59      	ldr	r3, [pc, #356]	@ (80009f4 <main+0x354>)
 800088e:	4a57      	ldr	r2, [pc, #348]	@ (80009ec <main+0x34c>)
 8000890:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 8000892:	4b58      	ldr	r3, [pc, #352]	@ (80009f4 <main+0x354>)
 8000894:	4a58      	ldr	r2, [pc, #352]	@ (80009f8 <main+0x358>)
 8000896:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 8000898:	4b56      	ldr	r3, [pc, #344]	@ (80009f4 <main+0x354>)
 800089a:	2201      	movs	r2, #1
 800089c:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800089e:	f3bf 8f4f 	dsb	sy
}
 80008a2:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 80008a4:	4b53      	ldr	r3, [pc, #332]	@ (80009f4 <main+0x354>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	4a52      	ldr	r2, [pc, #328]	@ (80009f4 <main+0x354>)
 80008aa:	f043 0301 	orr.w	r3, r3, #1
 80008ae:	6013      	str	r3, [r2, #0]

  //Enable SPI1
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 80008b0:	4b52      	ldr	r3, [pc, #328]	@ (80009fc <main+0x35c>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	4a51      	ldr	r2, [pc, #324]	@ (80009fc <main+0x35c>)
 80008b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008ba:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 80008bc:	4b4f      	ldr	r3, [pc, #316]	@ (80009fc <main+0x35c>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	4a4e      	ldr	r2, [pc, #312]	@ (80009fc <main+0x35c>)
 80008c2:	f043 0301 	orr.w	r3, r3, #1
 80008c6:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 80008c8:	4b4c      	ldr	r3, [pc, #304]	@ (80009fc <main+0x35c>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	4a4b      	ldr	r2, [pc, #300]	@ (80009fc <main+0x35c>)
 80008ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008d2:	6013      	str	r3, [r2, #0]

  //Enable SPI2
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 80008d4:	4b4a      	ldr	r3, [pc, #296]	@ (8000a00 <main+0x360>)
 80008d6:	689b      	ldr	r3, [r3, #8]
 80008d8:	4a49      	ldr	r2, [pc, #292]	@ (8000a00 <main+0x360>)
 80008da:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008de:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 80008e0:	4b47      	ldr	r3, [pc, #284]	@ (8000a00 <main+0x360>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	4a46      	ldr	r2, [pc, #280]	@ (8000a00 <main+0x360>)
 80008e6:	f043 0301 	orr.w	r3, r3, #1
 80008ea:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 80008ec:	4b44      	ldr	r3, [pc, #272]	@ (8000a00 <main+0x360>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a43      	ldr	r2, [pc, #268]	@ (8000a00 <main+0x360>)
 80008f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80008f6:	6013      	str	r3, [r2, #0]

  //Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 80008f8:	4b42      	ldr	r3, [pc, #264]	@ (8000a04 <main+0x364>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a41      	ldr	r2, [pc, #260]	@ (8000a04 <main+0x364>)
 80008fe:	f043 0304 	orr.w	r3, r3, #4
 8000902:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000904:	4b3f      	ldr	r3, [pc, #252]	@ (8000a04 <main+0x364>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	4a3e      	ldr	r2, [pc, #248]	@ (8000a04 <main+0x364>)
 800090a:	f023 0302 	bic.w	r3, r3, #2
 800090e:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000910:	4b3c      	ldr	r3, [pc, #240]	@ (8000a04 <main+0x364>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	4a3b      	ldr	r2, [pc, #236]	@ (8000a04 <main+0x364>)
 8000916:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800091a:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 800091c:	4b39      	ldr	r3, [pc, #228]	@ (8000a04 <main+0x364>)
 800091e:	695b      	ldr	r3, [r3, #20]
 8000920:	4a38      	ldr	r2, [pc, #224]	@ (8000a04 <main+0x364>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6153      	str	r3, [r2, #20]
  TIM1->CR1 |= TIM_CR1_CEN;
 8000928:	4b36      	ldr	r3, [pc, #216]	@ (8000a04 <main+0x364>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	4a35      	ldr	r2, [pc, #212]	@ (8000a04 <main+0x364>)
 800092e:	f043 0301 	orr.w	r3, r3, #1
 8000932:	6013      	str	r3, [r2, #0]

  //Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000934:	4b34      	ldr	r3, [pc, #208]	@ (8000a08 <main+0x368>)
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a33      	ldr	r2, [pc, #204]	@ (8000a08 <main+0x368>)
 800093a:	f043 0304 	orr.w	r3, r3, #4
 800093e:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000940:	4b31      	ldr	r3, [pc, #196]	@ (8000a08 <main+0x368>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a30      	ldr	r2, [pc, #192]	@ (8000a08 <main+0x368>)
 8000946:	f023 0302 	bic.w	r3, r3, #2
 800094a:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 800094c:	4b2e      	ldr	r3, [pc, #184]	@ (8000a08 <main+0x368>)
 800094e:	68db      	ldr	r3, [r3, #12]
 8000950:	4a2d      	ldr	r2, [pc, #180]	@ (8000a08 <main+0x368>)
 8000952:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000956:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 8000958:	4b2b      	ldr	r3, [pc, #172]	@ (8000a08 <main+0x368>)
 800095a:	695b      	ldr	r3, [r3, #20]
 800095c:	4a2a      	ldr	r2, [pc, #168]	@ (8000a08 <main+0x368>)
 800095e:	f043 0301 	orr.w	r3, r3, #1
 8000962:	6153      	str	r3, [r2, #20]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000964:	4b28      	ldr	r3, [pc, #160]	@ (8000a08 <main+0x368>)
 8000966:	681b      	ldr	r3, [r3, #0]
 8000968:	4a27      	ldr	r2, [pc, #156]	@ (8000a08 <main+0x368>)
 800096a:	f043 0301 	orr.w	r3, r3, #1
 800096e:	6013      	str	r3, [r2, #0]

  /* Initialise the interface descriptor for WinPCap for example. */
     pxSTM32H_FillInterfaceDescriptor( 0, &( xInterfaces[ 0 ] ) );
 8000970:	4926      	ldr	r1, [pc, #152]	@ (8000a0c <main+0x36c>)
 8000972:	2000      	movs	r0, #0
 8000974:	f016 fc66 	bl	8017244 <pxSTM32H_FillInterfaceDescriptor>

     FreeRTOS_FillEndPoint( &( xInterfaces[ 0 ] ), &( xEndPoints[ 0 ] ), ucIPAddress,
 8000978:	4b25      	ldr	r3, [pc, #148]	@ (8000a10 <main+0x370>)
 800097a:	9302      	str	r3, [sp, #8]
 800097c:	4b25      	ldr	r3, [pc, #148]	@ (8000a14 <main+0x374>)
 800097e:	9301      	str	r3, [sp, #4]
 8000980:	4b25      	ldr	r3, [pc, #148]	@ (8000a18 <main+0x378>)
 8000982:	9300      	str	r3, [sp, #0]
 8000984:	4b25      	ldr	r3, [pc, #148]	@ (8000a1c <main+0x37c>)
 8000986:	4a26      	ldr	r2, [pc, #152]	@ (8000a20 <main+0x380>)
 8000988:	4926      	ldr	r1, [pc, #152]	@ (8000a24 <main+0x384>)
 800098a:	4820      	ldr	r0, [pc, #128]	@ (8000a0c <main+0x36c>)
 800098c:	f00b fd38 	bl	800c400 <FreeRTOS_FillEndPoint>
     #endif /* ( ipconfigUSE_DHCP != 0 ) */

     /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
        are created in the vApplicationIPNetworkEventHook() hook function
        below.  The hook function is called when the network connects. */
      FreeRTOS_IPInit_Multi();
 8000990:	f007 fe86 	bl	80086a0 <FreeRTOS_IPInit_Multi>


      xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle );
 8000994:	4b24      	ldr	r3, [pc, #144]	@ (8000a28 <main+0x388>)
 8000996:	9301      	str	r3, [sp, #4]
 8000998:	2300      	movs	r3, #0
 800099a:	9300      	str	r3, [sp, #0]
 800099c:	2300      	movs	r3, #0
 800099e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80009a2:	4922      	ldr	r1, [pc, #136]	@ (8000a2c <main+0x38c>)
 80009a4:	4822      	ldr	r0, [pc, #136]	@ (8000a30 <main+0x390>)
 80009a6:	f002 fc53 	bl	8003250 <xTaskCreate>
//      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
      xTaskCreate ( vADCTCPTask, "ADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 80009aa:	4b22      	ldr	r3, [pc, #136]	@ (8000a34 <main+0x394>)
 80009ac:	9301      	str	r3, [sp, #4]
 80009ae:	2301      	movs	r3, #1
 80009b0:	9300      	str	r3, [sp, #0]
 80009b2:	2300      	movs	r3, #0
 80009b4:	f44f 7220 	mov.w	r2, #640	@ 0x280
 80009b8:	491f      	ldr	r1, [pc, #124]	@ (8000a38 <main+0x398>)
 80009ba:	4820      	ldr	r0, [pc, #128]	@ (8000a3c <main+0x39c>)
 80009bc:	f002 fc48 	bl	8003250 <xTaskCreate>
//      xTaskCreate ( vAuxADCTCPTask, "AuxADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
      vTaskStartScheduler();
 80009c0:	f002 fe02 	bl	80035c8 <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80009c4:	bf00      	nop
 80009c6:	e7fd      	b.n	80009c4 <main+0x324>
 80009c8:	30000000 	.word	0x30000000
 80009cc:	30010000 	.word	0x30010000
 80009d0:	30020000 	.word	0x30020000
 80009d4:	30022000 	.word	0x30022000
 80009d8:	40020010 	.word	0x40020010
 80009dc:	40013030 	.word	0x40013030
 80009e0:	40020028 	.word	0x40020028
 80009e4:	40003830 	.word	0x40003830
 80009e8:	40020040 	.word	0x40020040
 80009ec:	38000000 	.word	0x38000000
 80009f0:	40013020 	.word	0x40013020
 80009f4:	40020058 	.word	0x40020058
 80009f8:	40003820 	.word	0x40003820
 80009fc:	40013000 	.word	0x40013000
 8000a00:	40003800 	.word	0x40003800
 8000a04:	40010000 	.word	0x40010000
 8000a08:	40000400 	.word	0x40000400
 8000a0c:	20000594 	.word	0x20000594
 8000a10:	08025bd0 	.word	0x08025bd0
 8000a14:	08025bcc 	.word	0x08025bcc
 8000a18:	08025bc8 	.word	0x08025bc8
 8000a1c:	08025bc4 	.word	0x08025bc4
 8000a20:	08025bc0 	.word	0x08025bc0
 8000a24:	200005bc 	.word	0x200005bc
 8000a28:	20000a64 	.word	0x20000a64
 8000a2c:	080226dc 	.word	0x080226dc
 8000a30:	08001321 	.word	0x08001321
 8000a34:	20000a68 	.word	0x20000a68
 8000a38:	080226e4 	.word	0x080226e4
 8000a3c:	08001349 	.word	0x08001349

08000a40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b09e      	sub	sp, #120	@ 0x78
 8000a44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000a4a:	224c      	movs	r2, #76	@ 0x4c
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f020 f8c5 	bl	8020bde <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a54:	f107 030c 	add.w	r3, r7, #12
 8000a58:	2220      	movs	r2, #32
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	4618      	mov	r0, r3
 8000a5e:	f020 f8be 	bl	8020bde <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000a62:	2002      	movs	r0, #2
 8000a64:	f01a fdac 	bl	801b5c0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a68:	2300      	movs	r3, #0
 8000a6a:	60bb      	str	r3, [r7, #8]
 8000a6c:	4b48      	ldr	r3, [pc, #288]	@ (8000b90 <SystemClock_Config+0x150>)
 8000a6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a70:	4a47      	ldr	r2, [pc, #284]	@ (8000b90 <SystemClock_Config+0x150>)
 8000a72:	f023 0301 	bic.w	r3, r3, #1
 8000a76:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000a78:	4b45      	ldr	r3, [pc, #276]	@ (8000b90 <SystemClock_Config+0x150>)
 8000a7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a7c:	f003 0301 	and.w	r3, r3, #1
 8000a80:	60bb      	str	r3, [r7, #8]
 8000a82:	4b44      	ldr	r3, [pc, #272]	@ (8000b94 <SystemClock_Config+0x154>)
 8000a84:	699b      	ldr	r3, [r3, #24]
 8000a86:	4a43      	ldr	r2, [pc, #268]	@ (8000b94 <SystemClock_Config+0x154>)
 8000a88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000a8c:	6193      	str	r3, [r2, #24]
 8000a8e:	4b41      	ldr	r3, [pc, #260]	@ (8000b94 <SystemClock_Config+0x154>)
 8000a90:	699b      	ldr	r3, [r3, #24]
 8000a92:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000a96:	60bb      	str	r3, [r7, #8]
 8000a98:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a9a:	bf00      	nop
 8000a9c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b94 <SystemClock_Config+0x154>)
 8000a9e:	699b      	ldr	r3, [r3, #24]
 8000aa0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000aa4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000aa8:	d1f8      	bne.n	8000a9c <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	@ (8000b98 <SystemClock_Config+0x158>)
 8000aac:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ab0:	4a39      	ldr	r2, [pc, #228]	@ (8000b98 <SystemClock_Config+0x158>)
 8000ab2:	f043 0302 	orr.w	r3, r3, #2
 8000ab6:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000aba:	4b37      	ldr	r3, [pc, #220]	@ (8000b98 <SystemClock_Config+0x158>)
 8000abc:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000ac0:	f003 0302 	and.w	r3, r3, #2
 8000ac4:	607b      	str	r3, [r7, #4]
 8000ac6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000ac8:	2300      	movs	r3, #0
 8000aca:	603b      	str	r3, [r7, #0]
 8000acc:	4b31      	ldr	r3, [pc, #196]	@ (8000b94 <SystemClock_Config+0x154>)
 8000ace:	699b      	ldr	r3, [r3, #24]
 8000ad0:	4a30      	ldr	r2, [pc, #192]	@ (8000b94 <SystemClock_Config+0x154>)
 8000ad2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000ad6:	6193      	str	r3, [r2, #24]
 8000ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8000b94 <SystemClock_Config+0x154>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ae0:	603b      	str	r3, [r7, #0]
 8000ae2:	4b2b      	ldr	r3, [pc, #172]	@ (8000b90 <SystemClock_Config+0x150>)
 8000ae4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ae6:	4a2a      	ldr	r2, [pc, #168]	@ (8000b90 <SystemClock_Config+0x150>)
 8000ae8:	f043 0301 	orr.w	r3, r3, #1
 8000aec:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000aee:	4b28      	ldr	r3, [pc, #160]	@ (8000b90 <SystemClock_Config+0x150>)
 8000af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000af2:	f003 0301 	and.w	r3, r3, #1
 8000af6:	603b      	str	r3, [r7, #0]
 8000af8:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000afa:	bf00      	nop
 8000afc:	4b25      	ldr	r3, [pc, #148]	@ (8000b94 <SystemClock_Config+0x154>)
 8000afe:	699b      	ldr	r3, [r3, #24]
 8000b00:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000b04:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000b08:	d1f8      	bne.n	8000afc <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b0a:	2301      	movs	r3, #1
 8000b0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000b0e:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000b12:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b14:	2302      	movs	r3, #2
 8000b16:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000b20:	2340      	movs	r3, #64	@ 0x40
 8000b22:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000b24:	2302      	movs	r3, #2
 8000b26:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b28:	2302      	movs	r3, #2
 8000b2a:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b2c:	2302      	movs	r3, #2
 8000b2e:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000b30:	230c      	movs	r3, #12
 8000b32:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b34:	2300      	movs	r3, #0
 8000b36:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b3c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000b40:	4618      	mov	r0, r3
 8000b42:	f01a fd77 	bl	801b634 <HAL_RCC_OscConfig>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000b4c:	f000 fd05 	bl	800155a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b50:	233f      	movs	r3, #63	@ 0x3f
 8000b52:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b54:	2303      	movs	r3, #3
 8000b56:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b5c:	2308      	movs	r3, #8
 8000b5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000b60:	2340      	movs	r3, #64	@ 0x40
 8000b62:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b64:	2340      	movs	r3, #64	@ 0x40
 8000b66:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b68:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b6e:	2340      	movs	r3, #64	@ 0x40
 8000b70:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b72:	f107 030c 	add.w	r3, r7, #12
 8000b76:	2102      	movs	r1, #2
 8000b78:	4618      	mov	r0, r3
 8000b7a:	f01b f9b5 	bl	801bee8 <HAL_RCC_ClockConfig>
 8000b7e:	4603      	mov	r3, r0
 8000b80:	2b00      	cmp	r3, #0
 8000b82:	d001      	beq.n	8000b88 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000b84:	f000 fce9 	bl	800155a <Error_Handler>
  }
}
 8000b88:	bf00      	nop
 8000b8a:	3778      	adds	r7, #120	@ 0x78
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bd80      	pop	{r7, pc}
 8000b90:	58000400 	.word	0x58000400
 8000b94:	58024800 	.word	0x58024800
 8000b98:	58024400 	.word	0x58024400

08000b9c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b0b0      	sub	sp, #192	@ 0xc0
 8000ba0:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ba2:	463b      	mov	r3, r7
 8000ba4:	22c0      	movs	r2, #192	@ 0xc0
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	4618      	mov	r0, r3
 8000baa:	f020 f818 	bl	8020bde <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 8000bae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000bb2:	f04f 0300 	mov.w	r3, #0
 8000bb6:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8000bba:	2308      	movs	r3, #8
 8000bbc:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 8000bbe:	2340      	movs	r3, #64	@ 0x40
 8000bc0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000bca:	2302      	movs	r3, #2
 8000bcc:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000bce:	2340      	movs	r3, #64	@ 0x40
 8000bd0:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000bd2:	2300      	movs	r3, #0
 8000bd4:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000bda:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bde:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000be0:	463b      	mov	r3, r7
 8000be2:	4618      	mov	r0, r3
 8000be4:	f01b fd0c 	bl	801c600 <HAL_RCCEx_PeriphCLKConfig>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000bee:	f000 fcb4 	bl	800155a <Error_Handler>
  }
}
 8000bf2:	bf00      	nop
 8000bf4:	37c0      	adds	r7, #192	@ 0xc0
 8000bf6:	46bd      	mov	sp, r7
 8000bf8:	bd80      	pop	{r7, pc}
	...

08000bfc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c00:	4b27      	ldr	r3, [pc, #156]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c02:	4a28      	ldr	r2, [pc, #160]	@ (8000ca4 <MX_SPI1_Init+0xa8>)
 8000c04:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c06:	4b26      	ldr	r3, [pc, #152]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c08:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000c0c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c0e:	4b24      	ldr	r3, [pc, #144]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c10:	2200      	movs	r2, #0
 8000c12:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000c14:	4b22      	ldr	r3, [pc, #136]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c16:	220f      	movs	r2, #15
 8000c18:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c1a:	4b21      	ldr	r3, [pc, #132]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c20:	4b1f      	ldr	r3, [pc, #124]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000c26:	4b1e      	ldr	r3, [pc, #120]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c28:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000c2c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c2e:	4b1c      	ldr	r3, [pc, #112]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c30:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000c34:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c36:	4b1a      	ldr	r3, [pc, #104]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c38:	2200      	movs	r2, #0
 8000c3a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c3c:	4b18      	ldr	r3, [pc, #96]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c42:	4b17      	ldr	r3, [pc, #92]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000c48:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c4e:	4b14      	ldr	r3, [pc, #80]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c50:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000c54:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000c56:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c58:	2200      	movs	r2, #0
 8000c5a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000c5c:	4b10      	ldr	r3, [pc, #64]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c5e:	2200      	movs	r2, #0
 8000c60:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c62:	4b0f      	ldr	r3, [pc, #60]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c64:	2200      	movs	r2, #0
 8000c66:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000c68:	4b0d      	ldr	r3, [pc, #52]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8000c6e:	4b0c      	ldr	r3, [pc, #48]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c70:	2203      	movs	r2, #3
 8000c72:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8000c74:	4b0a      	ldr	r3, [pc, #40]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c76:	2230      	movs	r2, #48	@ 0x30
 8000c78:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000c7a:	4b09      	ldr	r3, [pc, #36]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000c80:	4b07      	ldr	r3, [pc, #28]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c8c:	4804      	ldr	r0, [pc, #16]	@ (8000ca0 <MX_SPI1_Init+0xa4>)
 8000c8e:	f01d fae3 	bl	801e258 <HAL_SPI_Init>
 8000c92:	4603      	mov	r3, r0
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d001      	beq.n	8000c9c <MX_SPI1_Init+0xa0>
  {
    Error_Handler();
 8000c98:	f000 fc5f 	bl	800155a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c9c:	bf00      	nop
 8000c9e:	bd80      	pop	{r7, pc}
 8000ca0:	200000a4 	.word	0x200000a4
 8000ca4:	40013000 	.word	0x40013000

08000ca8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cac:	4b27      	ldr	r3, [pc, #156]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cae:	4a28      	ldr	r2, [pc, #160]	@ (8000d50 <MX_SPI2_Init+0xa8>)
 8000cb0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cb2:	4b26      	ldr	r3, [pc, #152]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cb4:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000cb8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cba:	4b24      	ldr	r3, [pc, #144]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000cc0:	4b22      	ldr	r3, [pc, #136]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cc2:	220f      	movs	r2, #15
 8000cc4:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000cc6:	4b21      	ldr	r3, [pc, #132]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ccc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cce:	2200      	movs	r2, #0
 8000cd0:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000cd2:	4b1e      	ldr	r3, [pc, #120]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cd4:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000cd8:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000cda:	4b1c      	ldr	r3, [pc, #112]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cdc:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000ce0:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ce2:	4b1a      	ldr	r3, [pc, #104]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ce8:	4b18      	ldr	r3, [pc, #96]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000cee:	4b17      	ldr	r3, [pc, #92]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000cf4:	4b15      	ldr	r3, [pc, #84]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cf6:	2200      	movs	r2, #0
 8000cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000cfa:	4b14      	ldr	r3, [pc, #80]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000cfc:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000d00:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000d02:	4b12      	ldr	r3, [pc, #72]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000d08:	4b10      	ldr	r3, [pc, #64]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000d14:	4b0d      	ldr	r3, [pc, #52]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d16:	2200      	movs	r2, #0
 8000d18:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8000d1a:	4b0c      	ldr	r3, [pc, #48]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d1c:	2203      	movs	r2, #3
 8000d1e:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8000d20:	4b0a      	ldr	r3, [pc, #40]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d22:	2230      	movs	r2, #48	@ 0x30
 8000d24:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000d26:	4b09      	ldr	r3, [pc, #36]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000d2c:	4b07      	ldr	r3, [pc, #28]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d2e:	2200      	movs	r2, #0
 8000d30:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000d32:	4b06      	ldr	r3, [pc, #24]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d38:	4804      	ldr	r0, [pc, #16]	@ (8000d4c <MX_SPI2_Init+0xa4>)
 8000d3a:	f01d fa8d 	bl	801e258 <HAL_SPI_Init>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d001      	beq.n	8000d48 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000d44:	f000 fc09 	bl	800155a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d48:	bf00      	nop
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	2000012c 	.word	0x2000012c
 8000d50:	40003800 	.word	0x40003800

08000d54 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000d58:	4b27      	ldr	r3, [pc, #156]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d5a:	4a28      	ldr	r2, [pc, #160]	@ (8000dfc <MX_SPI3_Init+0xa8>)
 8000d5c:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000d5e:	4b26      	ldr	r3, [pc, #152]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d60:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000d64:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000d66:	4b24      	ldr	r3, [pc, #144]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000d6c:	4b22      	ldr	r3, [pc, #136]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d6e:	2203      	movs	r2, #3
 8000d70:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d72:	4b21      	ldr	r3, [pc, #132]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d78:	4b1f      	ldr	r3, [pc, #124]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000d7e:	4b1e      	ldr	r3, [pc, #120]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d80:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000d84:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000d86:	4b1c      	ldr	r3, [pc, #112]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d8c:	4b1a      	ldr	r3, [pc, #104]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d8e:	2200      	movs	r2, #0
 8000d90:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d92:	4b19      	ldr	r3, [pc, #100]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d98:	4b17      	ldr	r3, [pc, #92]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000d9e:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000da4:	4b14      	ldr	r3, [pc, #80]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000da6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000daa:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000dac:	4b12      	ldr	r3, [pc, #72]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000db2:	4b11      	ldr	r3, [pc, #68]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000db4:	2200      	movs	r2, #0
 8000db6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000db8:	4b0f      	ldr	r3, [pc, #60]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000dbe:	4b0e      	ldr	r3, [pc, #56]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8000dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8000dca:	4b0b      	ldr	r3, [pc, #44]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000dd0:	4b09      	ldr	r3, [pc, #36]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000dd6:	4b08      	ldr	r3, [pc, #32]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ddc:	4b06      	ldr	r3, [pc, #24]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8000de2:	4805      	ldr	r0, [pc, #20]	@ (8000df8 <MX_SPI3_Init+0xa4>)
 8000de4:	f01d fa38 	bl	801e258 <HAL_SPI_Init>
 8000de8:	4603      	mov	r3, r0
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d001      	beq.n	8000df2 <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 8000dee:	f000 fbb4 	bl	800155a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8000df2:	bf00      	nop
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	200001b4 	.word	0x200001b4
 8000dfc:	40003c00 	.word	0x40003c00

08000e00 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e06:	f107 0310 	add.w	r3, r7, #16
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	601a      	str	r2, [r3, #0]
 8000e0e:	605a      	str	r2, [r3, #4]
 8000e10:	609a      	str	r2, [r3, #8]
 8000e12:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e14:	1d3b      	adds	r3, r7, #4
 8000e16:	2200      	movs	r2, #0
 8000e18:	601a      	str	r2, [r3, #0]
 8000e1a:	605a      	str	r2, [r3, #4]
 8000e1c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <MX_TIM1_Init+0x9c>)
 8000e20:	4a1f      	ldr	r2, [pc, #124]	@ (8000ea0 <MX_TIM1_Init+0xa0>)
 8000e22:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <MX_TIM1_Init+0x9c>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e2a:	4b1c      	ldr	r3, [pc, #112]	@ (8000e9c <MX_TIM1_Init+0x9c>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 8000e30:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <MX_TIM1_Init+0x9c>)
 8000e32:	22ff      	movs	r2, #255	@ 0xff
 8000e34:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e36:	4b19      	ldr	r3, [pc, #100]	@ (8000e9c <MX_TIM1_Init+0x9c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000e3c:	4b17      	ldr	r3, [pc, #92]	@ (8000e9c <MX_TIM1_Init+0x9c>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e42:	4b16      	ldr	r3, [pc, #88]	@ (8000e9c <MX_TIM1_Init+0x9c>)
 8000e44:	2200      	movs	r2, #0
 8000e46:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e48:	4814      	ldr	r0, [pc, #80]	@ (8000e9c <MX_TIM1_Init+0x9c>)
 8000e4a:	f01d fdfe 	bl	801ea4a <HAL_TIM_Base_Init>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8000e54:	f000 fb81 	bl	800155a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e58:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e5c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e5e:	f107 0310 	add.w	r3, r7, #16
 8000e62:	4619      	mov	r1, r3
 8000e64:	480d      	ldr	r0, [pc, #52]	@ (8000e9c <MX_TIM1_Init+0x9c>)
 8000e66:	f01d febf 	bl	801ebe8 <HAL_TIM_ConfigClockSource>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8000e70:	f000 fb73 	bl	800155a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000e74:	2320      	movs	r3, #32
 8000e76:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <MX_TIM1_Init+0x9c>)
 8000e86:	f01e f8eb 	bl	801f060 <HAL_TIMEx_MasterConfigSynchronization>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 8000e90:	f000 fb63 	bl	800155a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3720      	adds	r7, #32
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	2000032c 	.word	0x2000032c
 8000ea0:	40010000 	.word	0x40010000

08000ea4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b088      	sub	sp, #32
 8000ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eaa:	f107 0310 	add.w	r3, r7, #16
 8000eae:	2200      	movs	r2, #0
 8000eb0:	601a      	str	r2, [r3, #0]
 8000eb2:	605a      	str	r2, [r3, #4]
 8000eb4:	609a      	str	r2, [r3, #8]
 8000eb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000eb8:	1d3b      	adds	r3, r7, #4
 8000eba:	2200      	movs	r2, #0
 8000ebc:	601a      	str	r2, [r3, #0]
 8000ebe:	605a      	str	r2, [r3, #4]
 8000ec0:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ec2:	4b1d      	ldr	r3, [pc, #116]	@ (8000f38 <MX_TIM3_Init+0x94>)
 8000ec4:	4a1d      	ldr	r2, [pc, #116]	@ (8000f3c <MX_TIM3_Init+0x98>)
 8000ec6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 8000ec8:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <MX_TIM3_Init+0x94>)
 8000eca:	22c7      	movs	r2, #199	@ 0xc7
 8000ecc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ece:	4b1a      	ldr	r3, [pc, #104]	@ (8000f38 <MX_TIM3_Init+0x94>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8000ed4:	4b18      	ldr	r3, [pc, #96]	@ (8000f38 <MX_TIM3_Init+0x94>)
 8000ed6:	2209      	movs	r2, #9
 8000ed8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eda:	4b17      	ldr	r3, [pc, #92]	@ (8000f38 <MX_TIM3_Init+0x94>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee0:	4b15      	ldr	r3, [pc, #84]	@ (8000f38 <MX_TIM3_Init+0x94>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ee6:	4814      	ldr	r0, [pc, #80]	@ (8000f38 <MX_TIM3_Init+0x94>)
 8000ee8:	f01d fdaf 	bl	801ea4a <HAL_TIM_Base_Init>
 8000eec:	4603      	mov	r3, r0
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d001      	beq.n	8000ef6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000ef2:	f000 fb32 	bl	800155a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ef6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000efa:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000efc:	f107 0310 	add.w	r3, r7, #16
 8000f00:	4619      	mov	r1, r3
 8000f02:	480d      	ldr	r0, [pc, #52]	@ (8000f38 <MX_TIM3_Init+0x94>)
 8000f04:	f01d fe70 	bl	801ebe8 <HAL_TIM_ConfigClockSource>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8000f0e:	f000 fb24 	bl	800155a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f12:	2300      	movs	r3, #0
 8000f14:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f1a:	1d3b      	adds	r3, r7, #4
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	4806      	ldr	r0, [pc, #24]	@ (8000f38 <MX_TIM3_Init+0x94>)
 8000f20:	f01e f89e 	bl	801f060 <HAL_TIMEx_MasterConfigSynchronization>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8000f2a:	f000 fb16 	bl	800155a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	3720      	adds	r7, #32
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	200003c4 	.word	0x200003c4
 8000f3c:	40000400 	.word	0x40000400

08000f40 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000f44:	4b22      	ldr	r3, [pc, #136]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000f46:	4a23      	ldr	r2, [pc, #140]	@ (8000fd4 <MX_USART3_UART_Init+0x94>)
 8000f48:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000f4a:	4b21      	ldr	r3, [pc, #132]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000f4c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000f50:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000f52:	4b1f      	ldr	r3, [pc, #124]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000f58:	4b1d      	ldr	r3, [pc, #116]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000f5e:	4b1c      	ldr	r3, [pc, #112]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000f64:	4b1a      	ldr	r3, [pc, #104]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000f66:	220c      	movs	r2, #12
 8000f68:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f6a:	4b19      	ldr	r3, [pc, #100]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f70:	4b17      	ldr	r3, [pc, #92]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f76:	4b16      	ldr	r3, [pc, #88]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000f7c:	4b14      	ldr	r3, [pc, #80]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f82:	4b13      	ldr	r3, [pc, #76]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000f84:	2200      	movs	r2, #0
 8000f86:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000f88:	4811      	ldr	r0, [pc, #68]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000f8a:	f01e f8f7 	bl	801f17c <HAL_UART_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000f94:	f000 fae1 	bl	800155a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f98:	2100      	movs	r1, #0
 8000f9a:	480d      	ldr	r0, [pc, #52]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000f9c:	f01f f8ff 	bl	802019e <HAL_UARTEx_SetTxFifoThreshold>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000fa6:	f000 fad8 	bl	800155a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000faa:	2100      	movs	r1, #0
 8000fac:	4808      	ldr	r0, [pc, #32]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000fae:	f01f f934 	bl	802021a <HAL_UARTEx_SetRxFifoThreshold>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000fb8:	f000 facf 	bl	800155a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000fbc:	4804      	ldr	r0, [pc, #16]	@ (8000fd0 <MX_USART3_UART_Init+0x90>)
 8000fbe:	f01f f8b5 	bl	802012c <HAL_UARTEx_DisableFifoMode>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000fc8:	f000 fac7 	bl	800155a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000fcc:	bf00      	nop
 8000fce:	bd80      	pop	{r7, pc}
 8000fd0:	20000500 	.word	0x20000500
 8000fd4:	40004800 	.word	0x40004800

08000fd8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b082      	sub	sp, #8
 8000fdc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fde:	4b19      	ldr	r3, [pc, #100]	@ (8001044 <MX_DMA_Init+0x6c>)
 8000fe0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000fe4:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <MX_DMA_Init+0x6c>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <MX_DMA_Init+0x6c>)
 8000ff0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8000ff4:	f003 0301 	and.w	r3, r3, #1
 8000ff8:	607b      	str	r3, [r7, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	2106      	movs	r1, #6
 8001000:	200b      	movs	r0, #11
 8001002:	f018 f978 	bl	80192f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001006:	200b      	movs	r0, #11
 8001008:	f018 f98f 	bl	801932a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 800100c:	2200      	movs	r2, #0
 800100e:	2106      	movs	r1, #6
 8001010:	200c      	movs	r0, #12
 8001012:	f018 f970 	bl	80192f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001016:	200c      	movs	r0, #12
 8001018:	f018 f987 	bl	801932a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 800101c:	2200      	movs	r2, #0
 800101e:	2107      	movs	r1, #7
 8001020:	200d      	movs	r0, #13
 8001022:	f018 f968 	bl	80192f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001026:	200d      	movs	r0, #13
 8001028:	f018 f97f 	bl	801932a <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2107      	movs	r1, #7
 8001030:	200e      	movs	r0, #14
 8001032:	f018 f960 	bl	80192f6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001036:	200e      	movs	r0, #14
 8001038:	f018 f977 	bl	801932a <HAL_NVIC_EnableIRQ>

}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	58024400 	.word	0x58024400

08001048 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001048:	b480      	push	{r7}
 800104a:	b087      	sub	sp, #28
 800104c:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800104e:	4b28      	ldr	r3, [pc, #160]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 8001050:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001054:	4a26      	ldr	r2, [pc, #152]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 8001056:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800105a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800105e:	4b24      	ldr	r3, [pc, #144]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 8001060:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001068:	617b      	str	r3, [r7, #20]
 800106a:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800106c:	4b20      	ldr	r3, [pc, #128]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 800106e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001072:	4a1f      	ldr	r2, [pc, #124]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 8001074:	f043 0304 	orr.w	r3, r3, #4
 8001078:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800107c:	4b1c      	ldr	r3, [pc, #112]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 800107e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001082:	f003 0304 	and.w	r3, r3, #4
 8001086:	613b      	str	r3, [r7, #16]
 8001088:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800108a:	4b19      	ldr	r3, [pc, #100]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 800108c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001090:	4a17      	ldr	r2, [pc, #92]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800109a:	4b15      	ldr	r3, [pc, #84]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 800109c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010a0:	f003 0301 	and.w	r3, r3, #1
 80010a4:	60fb      	str	r3, [r7, #12]
 80010a6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a8:	4b11      	ldr	r3, [pc, #68]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 80010aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010ae:	4a10      	ldr	r2, [pc, #64]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010b8:	4b0d      	ldr	r3, [pc, #52]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 80010ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010be:	f003 0302 	and.w	r3, r3, #2
 80010c2:	60bb      	str	r3, [r7, #8]
 80010c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010c6:	4b0a      	ldr	r3, [pc, #40]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010cc:	4a08      	ldr	r2, [pc, #32]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 80010ce:	f043 0308 	orr.w	r3, r3, #8
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80010d6:	4b06      	ldr	r3, [pc, #24]	@ (80010f0 <MX_GPIO_Init+0xa8>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80010dc:	f003 0308 	and.w	r3, r3, #8
 80010e0:	607b      	str	r3, [r7, #4]
 80010e2:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80010e4:	bf00      	nop
 80010e6:	371c      	adds	r7, #28
 80010e8:	46bd      	mov	sp, r7
 80010ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ee:	4770      	bx	lr
 80010f0:	58024400 	.word	0x58024400

080010f4 <vHeapInit>:
static uint8_t ucRAM_3 [ 32 * 1024] __attribute__( ( section( ".ram3_data" ) ) );

#define mainMEM_REGION( REGION )   REGION, sizeof( REGION )

static void vHeapInit( )
{
 80010f4:	b5b0      	push	{r4, r5, r7, lr}
 80010f6:	b088      	sub	sp, #32
 80010f8:	af00      	add	r7, sp, #0
	/* Note: the memories must be sorted on their physical address. */
	HeapRegion_t xHeapRegions[] = {
 80010fa:	4b08      	ldr	r3, [pc, #32]	@ (800111c <vHeapInit+0x28>)
 80010fc:	463c      	mov	r4, r7
 80010fe:	461d      	mov	r5, r3
 8001100:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001102:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001104:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001108:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		{ mainMEM_REGION( ucRAM_2 ) },
		{ mainMEM_REGION( ucRAM_3 ) },
		{ NULL, 0 }
		};

	vPortDefineHeapRegions( xHeapRegions );
 800110c:	463b      	mov	r3, r7
 800110e:	4618      	mov	r0, r3
 8001110:	f004 fbb0 	bl	8005874 <vPortDefineHeapRegions>
}
 8001114:	bf00      	nop
 8001116:	3720      	adds	r7, #32
 8001118:	46bd      	mov	sp, r7
 800111a:	bdb0      	pop	{r4, r5, r7, pc}
 800111c:	080226ec 	.word	0x080226ec

08001120 <ulGetRunTimeCounterValue>:


// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
	return 0U;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	46bd      	mov	sp, r7
 800112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112e:	4770      	bx	lr

08001130 <vAssertCalled>:

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b084      	sub	sp, #16
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 800113a:	2300      	movs	r3, #0
 800113c:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 800113e:	f004 f8ff 	bl	8005340 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 8001142:	e000      	b.n	8001146 <vAssertCalled+0x16>
		{
			__NOP();
 8001144:	bf00      	nop
		while( ul == 0 )
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d0fb      	beq.n	8001144 <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 800114c:	f004 f924 	bl	8005398 <vPortExitCritical>
}
 8001150:	bf00      	nop
 8001152:	3710      	adds	r7, #16
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
 800115c:	f44f 7162 	mov.w	r1, #904	@ 0x388
 8001160:	4802      	ldr	r0, [pc, #8]	@ (800116c <vApplicationMallocFailedHook+0x14>)
 8001162:	f7ff ffe5 	bl	8001130 <vAssertCalled>
}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	0802270c 	.word	0x0802270c

08001170 <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort )
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	607a      	str	r2, [r7, #4]
 800117a:	461a      	mov	r2, r3
 800117c:	460b      	mov	r3, r1
 800117e:	817b      	strh	r3, [r7, #10]
 8001180:	4613      	mov	r3, r2
 8001182:	813b      	strh	r3, [r7, #8]
	uint32_t ulReturn;
	( void ) ulSourceAddress;
	( void ) usSourcePort;
	( void ) ulDestinationAddress;
	( void ) usDestinationPort;
	xApplicationGetRandomNumber( &ulReturn );
 8001184:	f107 0314 	add.w	r3, r7, #20
 8001188:	4618      	mov	r0, r3
 800118a:	f000 f89b 	bl	80012c4 <xApplicationGetRandomNumber>

	return ulReturn;
 800118e:	697b      	ldr	r3, [r7, #20]
}
 8001190:	4618      	mov	r0, r3
 8001192:	3718      	adds	r7, #24
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	@ 0x28
 800119c:	af00      	add	r7, sp, #0
 800119e:	4603      	mov	r3, r0
 80011a0:	71fb      	strb	r3, [r7, #7]
	/* If the network has just come up...*/
	if( eNetworkEvent == eNetworkUp )
 80011a2:	79fb      	ldrb	r3, [r7, #7]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d147      	bne.n	8001238 <vApplicationIPNetworkEventHook+0xa0>
	uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
	char cBuffer[ 16 ];

		/* Create the tasks that use the IP stack if they have not already been
		created. */
		if( xTasksAlreadyCreated == pdFALSE )
 80011a8:	4b25      	ldr	r3, [pc, #148]	@ (8001240 <vApplicationIPNetworkEventHook+0xa8>)
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d105      	bne.n	80011bc <vApplicationIPNetworkEventHook+0x24>
		{
			xTasksAlreadyCreated = pdTRUE;
 80011b0:	4b23      	ldr	r3, [pc, #140]	@ (8001240 <vApplicationIPNetworkEventHook+0xa8>)
 80011b2:	2201      	movs	r2, #1
 80011b4:	601a      	str	r2, [r3, #0]
			/* Sockets, and tasks that use the TCP/IP stack can be created here. */
//
			xDoCreateSockets = pdTRUE;
 80011b6:	4b23      	ldr	r3, [pc, #140]	@ (8001244 <vApplicationIPNetworkEventHook+0xac>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
		}
		/* Print out the network configuration, which may have come from a DHCP
		server. */
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 80011bc:	f107 0318 	add.w	r3, r7, #24
 80011c0:	f107 021c 	add.w	r2, r7, #28
 80011c4:	f107 0120 	add.w	r1, r7, #32
 80011c8:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80011cc:	f007 fb00 	bl	80087d0 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 80011d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011d2:	f107 0208 	add.w	r2, r7, #8
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f00d f8fd 	bl	800e3d8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 80011de:	f107 0308 	add.w	r3, r7, #8
 80011e2:	4619      	mov	r1, r3
 80011e4:	4818      	ldr	r0, [pc, #96]	@ (8001248 <vApplicationIPNetworkEventHook+0xb0>)
 80011e6:	f01f f9d1 	bl	802058c <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 80011ea:	6a3b      	ldr	r3, [r7, #32]
 80011ec:	f107 0208 	add.w	r2, r7, #8
 80011f0:	4611      	mov	r1, r2
 80011f2:	4618      	mov	r0, r3
 80011f4:	f00d f8f0 	bl	800e3d8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 80011f8:	f107 0308 	add.w	r3, r7, #8
 80011fc:	4619      	mov	r1, r3
 80011fe:	4813      	ldr	r0, [pc, #76]	@ (800124c <vApplicationIPNetworkEventHook+0xb4>)
 8001200:	f01f f9c4 	bl	802058c <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 8001204:	69fb      	ldr	r3, [r7, #28]
 8001206:	f107 0208 	add.w	r2, r7, #8
 800120a:	4611      	mov	r1, r2
 800120c:	4618      	mov	r0, r3
 800120e:	f00d f8e3 	bl	800e3d8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 8001212:	f107 0308 	add.w	r3, r7, #8
 8001216:	4619      	mov	r1, r3
 8001218:	480d      	ldr	r0, [pc, #52]	@ (8001250 <vApplicationIPNetworkEventHook+0xb8>)
 800121a:	f01f f9b7 	bl	802058c <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 800121e:	69bb      	ldr	r3, [r7, #24]
 8001220:	f107 0208 	add.w	r2, r7, #8
 8001224:	4611      	mov	r1, r2
 8001226:	4618      	mov	r0, r3
 8001228:	f00d f8d6 	bl	800e3d8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 800122c:	f107 0308 	add.w	r3, r7, #8
 8001230:	4619      	mov	r1, r3
 8001232:	4808      	ldr	r0, [pc, #32]	@ (8001254 <vApplicationIPNetworkEventHook+0xbc>)
 8001234:	f01f f9aa 	bl	802058c <lUDPLoggingPrintf>
	}
}
 8001238:	bf00      	nop
 800123a:	3728      	adds	r7, #40	@ 0x28
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	20000a5c 	.word	0x20000a5c
 8001244:	20000a60 	.word	0x20000a60
 8001248:	08022720 	.word	0x08022720
 800124c:	08022730 	.word	0x08022730
 8001250:	08022744 	.word	0x08022744
 8001254:	0802275c 	.word	0x0802275c

08001258 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b084      	sub	sp, #16
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFAIL;
 8001260:	2300      	movs	r3, #0
 8001262:	60fb      	str	r3, [r7, #12]

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 8001264:	f000 f810 	bl	8001288 <pcApplicationHostnameHook>
 8001268:	4603      	mov	r3, r0
 800126a:	4619      	mov	r1, r3
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f020 fb69 	bl	8021944 <strcasecmp>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d101      	bne.n	800127c <xApplicationDNSQueryHook+0x24>
	{
		xReturn = pdPASS;
 8001278:	2301      	movs	r3, #1
 800127a:	60fb      	str	r3, [r7, #12]
	}
	return xReturn;
 800127c:	68fb      	ldr	r3, [r7, #12]
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook( void )
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
	/* Assign the name "STM32H7" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return "STM32H7";
 800128c:	4b02      	ldr	r3, [pc, #8]	@ (8001298 <pcApplicationHostnameHook+0x10>)
}
 800128e:	4618      	mov	r0, r3
 8001290:	46bd      	mov	sp, r7
 8001292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001296:	4770      	bx	lr
 8001298:	08022774 	.word	0x08022774

0800129c <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
	void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
	{
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	460a      	mov	r2, r1
 80012a6:	71fb      	strb	r3, [r7, #7]
 80012a8:	4613      	mov	r3, r2
 80012aa:	80bb      	strh	r3, [r7, #4]
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 80012ac:	88bb      	ldrh	r3, [r7, #4]
 80012ae:	4619      	mov	r1, r3
 80012b0:	4803      	ldr	r0, [pc, #12]	@ (80012c0 <vApplicationPingReplyHook+0x24>)
 80012b2:	f01f f96b 	bl	802058c <lUDPLoggingPrintf>
	}
 80012b6:	bf00      	nop
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	0802277c 	.word	0x0802277c

080012c4 <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 80012cc:	f020 f9cc 	bl	8021668 <rand>
 80012d0:	4603      	mov	r3, r0
 80012d2:	461a      	mov	r2, r3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 80012d8:	2301      	movs	r3, #1
}
 80012da:	4618      	mov	r0, r3
 80012dc:	3708      	adds	r7, #8
 80012de:	46bd      	mov	sp, r7
 80012e0:	bd80      	pop	{r7, pc}
	...

080012e4 <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack( uint32_t * pulFaultStackAddress )
{
 80012e4:	b480      	push	{r7}
 80012e6:	b083      	sub	sp, #12
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	/* When the debuggger stops here, you can inspect the registeers of the
	application by looking at *pxRegisterStack. */
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	3b20      	subs	r3, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 80012f0:	4a01      	ldr	r2, [pc, #4]	@ (80012f8 <prvGetRegistersFromStack+0x14>)
 80012f2:	6013      	str	r3, [r2, #0]

	/* When the following line is hit, the variables contain the register values. */
	for( ;; );
 80012f4:	bf00      	nop
 80012f6:	e7fd      	b.n	80012f4 <prvGetRegistersFromStack+0x10>
 80012f8:	20000a6c 	.word	0x20000a6c

080012fc <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
	__asm volatile
 8001300:	f01e 0f04 	tst.w	lr, #4
 8001304:	bf0c      	ite	eq
 8001306:	f3ef 8008 	mrseq	r0, MSP
 800130a:	f3ef 8009 	mrsne	r0, PSP
 800130e:	6981      	ldr	r1, [r0, #24]
 8001310:	f7ff ffe8 	bl	80012e4 <prvGetRegistersFromStack>
		" mrseq r0, msp                                             \n"
		" mrsne r0, psp                                             \n"
		" ldr r1, [r0, #24]                                         \n"
		" bl prvGetRegistersFromStack                               \n"
	);
}
 8001314:	bf00      	nop
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
	...

08001320 <prvServerWorkTask>:



static void prvServerWorkTask( void *pvParameters )
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 8001328:	200a      	movs	r0, #10
 800132a:	f002 f8d1 	bl	80034d0 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 800132e:	4b05      	ldr	r3, [pc, #20]	@ (8001344 <prvServerWorkTask+0x24>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	2b00      	cmp	r3, #0
 8001334:	d0f8      	beq.n	8001328 <prvServerWorkTask+0x8>
		{
			xDoCreateSockets = pdFALSE;
 8001336:	4b03      	ldr	r3, [pc, #12]	@ (8001344 <prvServerWorkTask+0x24>)
 8001338:	2200      	movs	r2, #0
 800133a:	601a      	str	r2, [r3, #0]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 800133c:	f01f f942 	bl	80205c4 <vUDPLoggingTaskCreate>
		vTaskDelay( 10U );
 8001340:	e7f2      	b.n	8001328 <prvServerWorkTask+0x8>
 8001342:	bf00      	nop
 8001344:	20000a60 	.word	0x20000a60

08001348 <vADCTCPTask>:

}



static void vADCTCPTask(void *pvParameters) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b098      	sub	sp, #96	@ 0x60
 800134c:	af02      	add	r7, sp, #8
 800134e:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usADCDataMock0);
 8001350:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001354:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001356:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800135a:	2218      	movs	r2, #24
 800135c:	2100      	movs	r1, #0
 800135e:	4618      	mov	r0, r3
 8001360:	f01f fc3d 	bl	8020bde <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 8001364:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	b21a      	sxth	r2, r3
 800136c:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 8001370:	0a1b      	lsrs	r3, r3, #8
 8001372:	b29b      	uxth	r3, r3
 8001374:	b21b      	sxth	r3, r3
 8001376:	4313      	orrs	r3, r2
 8001378:	b21b      	sxth	r3, r3
 800137a:	b29b      	uxth	r3, r3
 800137c:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 800137e:	2303      	movs	r3, #3
 8001380:	061a      	lsls	r2, r3, #24
 8001382:	2301      	movs	r3, #1
 8001384:	041b      	lsls	r3, r3, #16
 8001386:	431a      	orrs	r2, r3
 8001388:	23a8      	movs	r3, #168	@ 0xa8
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	4313      	orrs	r3, r2
 800138e:	22c0      	movs	r2, #192	@ 0xc0
 8001390:	4313      	orrs	r3, r2
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 8001394:	2302      	movs	r3, #2
 8001396:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 800139a:	2206      	movs	r2, #6
 800139c:	2101      	movs	r1, #1
 800139e:	2002      	movs	r0, #2
 80013a0:	f00b ff0e 	bl	800d1c0 <FreeRTOS_socket>
 80013a4:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 80013a6:	f107 0310 	add.w	r3, r7, #16
 80013aa:	2210      	movs	r2, #16
 80013ac:	2100      	movs	r1, #0
 80013ae:	4618      	mov	r0, r3
 80013b0:	f01f fc15 	bl	8020bde <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 80013b4:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80013b8:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 80013ba:	230c      	movs	r3, #12
 80013bc:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 80013be:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80013c2:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 80013c4:	230c      	movs	r3, #12
 80013c6:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 80013c8:	2304      	movs	r3, #4
 80013ca:	9300      	str	r3, [sp, #0]
 80013cc:	4b48      	ldr	r3, [pc, #288]	@ (80014f0 <vADCTCPTask+0x1a8>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	2100      	movs	r1, #0
 80013d2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80013d4:	f00c feae 	bl	800e134 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 80013d8:	2304      	movs	r3, #4
 80013da:	9300      	str	r3, [sp, #0]
 80013dc:	4b44      	ldr	r3, [pc, #272]	@ (80014f0 <vADCTCPTask+0x1a8>)
 80013de:	2201      	movs	r2, #1
 80013e0:	2100      	movs	r1, #0
 80013e2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80013e4:	f00c fea6 	bl	800e134 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 80013e8:	f107 0310 	add.w	r3, r7, #16
 80013ec:	2210      	movs	r2, #16
 80013ee:	9200      	str	r2, [sp, #0]
 80013f0:	220d      	movs	r2, #13
 80013f2:	2100      	movs	r1, #0
 80013f4:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80013f6:	f00c fe9d 	bl	800e134 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 80013fa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d104      	bne.n	800140c <vADCTCPTask+0xc4>
 8001402:	f44f 6196 	mov.w	r1, #1200	@ 0x4b0
 8001406:	483b      	ldr	r0, [pc, #236]	@ (80014f4 <vADCTCPTask+0x1ac>)
 8001408:	f7ff fe92 	bl	8001130 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 800140c:	f107 0320 	add.w	r3, r7, #32
 8001410:	f04f 32ff 	mov.w	r2, #4294967295
 8001414:	9200      	str	r2, [sp, #0]
 8001416:	f04f 32ff 	mov.w	r2, #4294967295
 800141a:	2100      	movs	r1, #0
 800141c:	2000      	movs	r0, #0
 800141e:	f003 f9e1 	bl	80047e4 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001422:	6a3b      	ldr	r3, [r7, #32]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d002      	beq.n	8001432 <vADCTCPTask+0xea>
	    pcBufferToTransmit = usADCDataMock1;
 800142c:	4b32      	ldr	r3, [pc, #200]	@ (80014f8 <vADCTCPTask+0x1b0>)
 800142e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001430:	e001      	b.n	8001436 <vADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usADCDataMock0;
 8001432:	4b32      	ldr	r3, [pc, #200]	@ (80014fc <vADCTCPTask+0x1b4>)
 8001434:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
        xAlreadyTransmitted = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 800143a:	2300      	movs	r3, #0
 800143c:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 800143e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001442:	2218      	movs	r2, #24
 8001444:	4619      	mov	r1, r3
 8001446:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001448:	f00d fa12 	bl	800e870 <FreeRTOS_connect>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d139      	bne.n	80014c6 <vADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001452:	e030      	b.n	80014b6 <vADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001458:	2300      	movs	r3, #0
 800145a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 800145c:	f107 030c 	add.w	r3, r7, #12
 8001460:	4619      	mov	r1, r3
 8001462:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001464:	f00d fbed 	bl	800ec42 <FreeRTOS_get_tx_head>
 8001468:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 800146a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800146c:	2b00      	cmp	r3, #0
 800146e:	d027      	beq.n	80014c0 <vADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 8001470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001472:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	68fa      	ldr	r2, [r7, #12]
 8001478:	4293      	cmp	r3, r2
 800147a:	d902      	bls.n	8001482 <vADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001480:	e003      	b.n	800148a <vADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 8001482:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001484:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 800148a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800148c:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 800148e:	4413      	add	r3, r2
 8001490:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001492:	4619      	mov	r1, r3
 8001494:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8001496:	f01f fa95 	bl	80209c4 <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 800149a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800149c:	2300      	movs	r3, #0
 800149e:	2100      	movs	r1, #0
 80014a0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80014a2:	f00d fcd9 	bl	800ee58 <FreeRTOS_send>
 80014a6:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 80014a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	db0a      	blt.n	80014c4 <vADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 80014ae:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80014b0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80014b2:	4413      	add	r3, r2
 80014b4:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 80014b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80014b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014ba:	429a      	cmp	r2, r3
 80014bc:	d8ca      	bhi.n	8001454 <vADCTCPTask+0x10c>
 80014be:	e002      	b.n	80014c6 <vADCTCPTask+0x17e>
                        break;
 80014c0:	bf00      	nop
 80014c2:	e000      	b.n	80014c6 <vADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 80014c4:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 80014c6:	2102      	movs	r1, #2
 80014c8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80014ca:	f00d fd74 	bl	800efb6 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 80014ce:	e002      	b.n	80014d6 <vADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 80014d0:	2001      	movs	r0, #1
 80014d2:	f001 fffd 	bl	80034d0 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 80014d6:	2300      	movs	r3, #0
 80014d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80014da:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80014dc:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80014de:	f00d fb1b 	bl	800eb18 <FreeRTOS_recv>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	daf3      	bge.n	80014d0 <vADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 80014e8:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80014ea:	f00c fa2d 	bl	800d948 <FreeRTOS_closesocket>
    for(;;) {
 80014ee:	e754      	b.n	800139a <vADCTCPTask+0x52>
 80014f0:	08025bd8 	.word	0x08025bd8
 80014f4:	0802270c 	.word	0x0802270c
 80014f8:	30010000 	.word	0x30010000
 80014fc:	30000000 	.word	0x30000000

08001500 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001506:	463b      	mov	r3, r7
 8001508:	2200      	movs	r2, #0
 800150a:	601a      	str	r2, [r3, #0]
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	609a      	str	r2, [r3, #8]
 8001510:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001512:	f017 ff25 	bl	8019360 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001516:	2301      	movs	r3, #1
 8001518:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800151a:	2300      	movs	r3, #0
 800151c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800151e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001522:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001524:	2312      	movs	r3, #18
 8001526:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001528:	2300      	movs	r3, #0
 800152a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800152c:	2301      	movs	r3, #1
 800152e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001530:	2303      	movs	r3, #3
 8001532:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001534:	2300      	movs	r3, #0
 8001536:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001538:	2301      	movs	r3, #1
 800153a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800153c:	2300      	movs	r3, #0
 800153e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001540:	2300      	movs	r3, #0
 8001542:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001544:	463b      	mov	r3, r7
 8001546:	4618      	mov	r0, r3
 8001548:	f017 ff42 	bl	80193d0 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800154c:	2004      	movs	r0, #4
 800154e:	f017 ff1f 	bl	8019390 <HAL_MPU_Enable>

}
 8001552:	bf00      	nop
 8001554:	3710      	adds	r7, #16
 8001556:	46bd      	mov	sp, r7
 8001558:	bd80      	pop	{r7, pc}

0800155a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800155e:	b672      	cpsid	i
}
 8001560:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001562:	bf00      	nop
 8001564:	e7fd      	b.n	8001562 <Error_Handler+0x8>
	...

08001568 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800156e:	4b0a      	ldr	r3, [pc, #40]	@ (8001598 <HAL_MspInit+0x30>)
 8001570:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001574:	4a08      	ldr	r2, [pc, #32]	@ (8001598 <HAL_MspInit+0x30>)
 8001576:	f043 0302 	orr.w	r3, r3, #2
 800157a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800157e:	4b06      	ldr	r3, [pc, #24]	@ (8001598 <HAL_MspInit+0x30>)
 8001580:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001584:	f003 0302 	and.w	r3, r3, #2
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800158c:	bf00      	nop
 800158e:	370c      	adds	r7, #12
 8001590:	46bd      	mov	sp, r7
 8001592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001596:	4770      	bx	lr
 8001598:	58024400 	.word	0x58024400

0800159c <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08e      	sub	sp, #56	@ 0x38
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015a8:	2200      	movs	r2, #0
 80015aa:	601a      	str	r2, [r3, #0]
 80015ac:	605a      	str	r2, [r3, #4]
 80015ae:	609a      	str	r2, [r3, #8]
 80015b0:	60da      	str	r2, [r3, #12]
 80015b2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	4a61      	ldr	r2, [pc, #388]	@ (8001740 <HAL_ETH_MspInit+0x1a4>)
 80015ba:	4293      	cmp	r3, r2
 80015bc:	f040 80bb 	bne.w	8001736 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 80015c0:	4b60      	ldr	r3, [pc, #384]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 80015c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015c6:	4a5f      	ldr	r2, [pc, #380]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 80015c8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015cc:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015d0:	4b5c      	ldr	r3, [pc, #368]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 80015d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015d6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80015da:	623b      	str	r3, [r7, #32]
 80015dc:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80015de:	4b59      	ldr	r3, [pc, #356]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 80015e0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015e4:	4a57      	ldr	r2, [pc, #348]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 80015e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80015ea:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 80015ee:	4b55      	ldr	r3, [pc, #340]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 80015f0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 80015f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015f8:	61fb      	str	r3, [r7, #28]
 80015fa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80015fc:	4b51      	ldr	r3, [pc, #324]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 80015fe:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001602:	4a50      	ldr	r2, [pc, #320]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 8001604:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001608:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800160c:	4b4d      	ldr	r3, [pc, #308]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 800160e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001612:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001616:	61bb      	str	r3, [r7, #24]
 8001618:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800161a:	4b4a      	ldr	r3, [pc, #296]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 800161c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001620:	4a48      	ldr	r2, [pc, #288]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 8001622:	f043 0304 	orr.w	r3, r3, #4
 8001626:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800162a:	4b46      	ldr	r3, [pc, #280]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 800162c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	617b      	str	r3, [r7, #20]
 8001636:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001638:	4b42      	ldr	r3, [pc, #264]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 800163a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800163e:	4a41      	ldr	r2, [pc, #260]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001648:	4b3e      	ldr	r3, [pc, #248]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 800164a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	613b      	str	r3, [r7, #16]
 8001654:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001656:	4b3b      	ldr	r3, [pc, #236]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 8001658:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800165c:	4a39      	ldr	r2, [pc, #228]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 800165e:	f043 0302 	orr.w	r3, r3, #2
 8001662:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001666:	4b37      	ldr	r3, [pc, #220]	@ (8001744 <HAL_ETH_MspInit+0x1a8>)
 8001668:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800166c:	f003 0302 	and.w	r3, r3, #2
 8001670:	60fb      	str	r3, [r7, #12]
 8001672:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001674:	2302      	movs	r3, #2
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001680:	2303      	movs	r3, #3
 8001682:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001684:	230b      	movs	r3, #11
 8001686:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001688:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800168c:	4619      	mov	r1, r3
 800168e:	482e      	ldr	r0, [pc, #184]	@ (8001748 <HAL_ETH_MspInit+0x1ac>)
 8001690:	f019 fde6 	bl	801b260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8001694:	2306      	movs	r3, #6
 8001696:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001698:	2302      	movs	r3, #2
 800169a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800169c:	2300      	movs	r3, #0
 800169e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016a0:	2303      	movs	r3, #3
 80016a2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016a4:	230b      	movs	r3, #11
 80016a6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ac:	4619      	mov	r1, r3
 80016ae:	4827      	ldr	r0, [pc, #156]	@ (800174c <HAL_ETH_MspInit+0x1b0>)
 80016b0:	f019 fdd6 	bl	801b260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016b4:	2380      	movs	r3, #128	@ 0x80
 80016b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016b8:	2302      	movs	r3, #2
 80016ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016bc:	2300      	movs	r3, #0
 80016be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016c4:	230b      	movs	r3, #11
 80016c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016cc:	4619      	mov	r1, r3
 80016ce:	481f      	ldr	r0, [pc, #124]	@ (800174c <HAL_ETH_MspInit+0x1b0>)
 80016d0:	f019 fdc6 	bl	801b260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016d4:	2330      	movs	r3, #48	@ 0x30
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80016e4:	230b      	movs	r3, #11
 80016e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	4816      	ldr	r0, [pc, #88]	@ (8001748 <HAL_ETH_MspInit+0x1ac>)
 80016f0:	f019 fdb6 	bl	801b260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 80016f4:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fa:	2302      	movs	r3, #2
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001702:	2303      	movs	r3, #3
 8001704:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001706:	230b      	movs	r3, #11
 8001708:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800170a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800170e:	4619      	mov	r1, r3
 8001710:	480f      	ldr	r0, [pc, #60]	@ (8001750 <HAL_ETH_MspInit+0x1b4>)
 8001712:	f019 fda5 	bl	801b260 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8001716:	2200      	movs	r2, #0
 8001718:	2105      	movs	r1, #5
 800171a:	203d      	movs	r0, #61	@ 0x3d
 800171c:	f017 fdeb 	bl	80192f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001720:	203d      	movs	r0, #61	@ 0x3d
 8001722:	f017 fe02 	bl	801932a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8001726:	2200      	movs	r2, #0
 8001728:	2105      	movs	r1, #5
 800172a:	203e      	movs	r0, #62	@ 0x3e
 800172c:	f017 fde3 	bl	80192f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8001730:	203e      	movs	r0, #62	@ 0x3e
 8001732:	f017 fdfa 	bl	801932a <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001736:	bf00      	nop
 8001738:	3738      	adds	r7, #56	@ 0x38
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	40028000 	.word	0x40028000
 8001744:	58024400 	.word	0x58024400
 8001748:	58020800 	.word	0x58020800
 800174c:	58020000 	.word	0x58020000
 8001750:	58020400 	.word	0x58020400

08001754 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b090      	sub	sp, #64	@ 0x40
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001760:	2200      	movs	r2, #0
 8001762:	601a      	str	r2, [r3, #0]
 8001764:	605a      	str	r2, [r3, #4]
 8001766:	609a      	str	r2, [r3, #8]
 8001768:	60da      	str	r2, [r3, #12]
 800176a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	4a88      	ldr	r2, [pc, #544]	@ (8001994 <HAL_SPI_MspInit+0x240>)
 8001772:	4293      	cmp	r3, r2
 8001774:	f040 8083 	bne.w	800187e <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001778:	4b87      	ldr	r3, [pc, #540]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 800177a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800177e:	4a86      	ldr	r2, [pc, #536]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 8001780:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001784:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001788:	4b83      	ldr	r3, [pc, #524]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 800178a:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800178e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001792:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001794:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b80      	ldr	r3, [pc, #512]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 8001798:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800179c:	4a7e      	ldr	r2, [pc, #504]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017a6:	4b7c      	ldr	r3, [pc, #496]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 80017a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ac:	f003 0301 	and.w	r3, r3, #1
 80017b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80017b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017b4:	4b78      	ldr	r3, [pc, #480]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ba:	4a77      	ldr	r2, [pc, #476]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 80017bc:	f043 0302 	orr.w	r3, r3, #2
 80017c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80017c4:	4b74      	ldr	r3, [pc, #464]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 80017c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ca:	f003 0302 	and.w	r3, r3, #2
 80017ce:	623b      	str	r3, [r7, #32]
 80017d0:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 80017d2:	2370      	movs	r3, #112	@ 0x70
 80017d4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d6:	2302      	movs	r3, #2
 80017d8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017da:	2300      	movs	r3, #0
 80017dc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017de:	2300      	movs	r3, #0
 80017e0:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80017e2:	2305      	movs	r3, #5
 80017e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80017ea:	4619      	mov	r1, r3
 80017ec:	486b      	ldr	r0, [pc, #428]	@ (800199c <HAL_SPI_MspInit+0x248>)
 80017ee:	f019 fd37 	bl	801b260 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80017f2:	2320      	movs	r3, #32
 80017f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f6:	2302      	movs	r3, #2
 80017f8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	2300      	movs	r3, #0
 80017fc:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fe:	2300      	movs	r3, #0
 8001800:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001802:	2305      	movs	r3, #5
 8001804:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001806:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800180a:	4619      	mov	r1, r3
 800180c:	4864      	ldr	r0, [pc, #400]	@ (80019a0 <HAL_SPI_MspInit+0x24c>)
 800180e:	f019 fd27 	bl	801b260 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001812:	4b64      	ldr	r3, [pc, #400]	@ (80019a4 <HAL_SPI_MspInit+0x250>)
 8001814:	4a64      	ldr	r2, [pc, #400]	@ (80019a8 <HAL_SPI_MspInit+0x254>)
 8001816:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001818:	4b62      	ldr	r3, [pc, #392]	@ (80019a4 <HAL_SPI_MspInit+0x250>)
 800181a:	2225      	movs	r2, #37	@ 0x25
 800181c:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800181e:	4b61      	ldr	r3, [pc, #388]	@ (80019a4 <HAL_SPI_MspInit+0x250>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001824:	4b5f      	ldr	r3, [pc, #380]	@ (80019a4 <HAL_SPI_MspInit+0x250>)
 8001826:	2200      	movs	r2, #0
 8001828:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800182a:	4b5e      	ldr	r3, [pc, #376]	@ (80019a4 <HAL_SPI_MspInit+0x250>)
 800182c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001830:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001832:	4b5c      	ldr	r3, [pc, #368]	@ (80019a4 <HAL_SPI_MspInit+0x250>)
 8001834:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001838:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800183a:	4b5a      	ldr	r3, [pc, #360]	@ (80019a4 <HAL_SPI_MspInit+0x250>)
 800183c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001840:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001842:	4b58      	ldr	r3, [pc, #352]	@ (80019a4 <HAL_SPI_MspInit+0x250>)
 8001844:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001848:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800184a:	4b56      	ldr	r3, [pc, #344]	@ (80019a4 <HAL_SPI_MspInit+0x250>)
 800184c:	2200      	movs	r2, #0
 800184e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001850:	4b54      	ldr	r3, [pc, #336]	@ (80019a4 <HAL_SPI_MspInit+0x250>)
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001856:	4853      	ldr	r0, [pc, #332]	@ (80019a4 <HAL_SPI_MspInit+0x250>)
 8001858:	f017 fdfa 	bl	8019450 <HAL_DMA_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8001862:	f7ff fe7a 	bl	800155a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a4e      	ldr	r2, [pc, #312]	@ (80019a4 <HAL_SPI_MspInit+0x250>)
 800186a:	67da      	str	r2, [r3, #124]	@ 0x7c
 800186c:	4a4d      	ldr	r2, [pc, #308]	@ (80019a4 <HAL_SPI_MspInit+0x250>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2100      	movs	r1, #0
 8001876:	2023      	movs	r0, #35	@ 0x23
 8001878:	f017 fd3d 	bl	80192f6 <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 800187c:	e0f0      	b.n	8001a60 <HAL_SPI_MspInit+0x30c>
  else if(hspi->Instance==SPI2)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a4a      	ldr	r2, [pc, #296]	@ (80019ac <HAL_SPI_MspInit+0x258>)
 8001884:	4293      	cmp	r3, r2
 8001886:	f040 8097 	bne.w	80019b8 <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800188a:	4b43      	ldr	r3, [pc, #268]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 800188c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001890:	4a41      	ldr	r2, [pc, #260]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 8001892:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001896:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 800189a:	4b3f      	ldr	r3, [pc, #252]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 800189c:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80018a0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018a4:	61fb      	str	r3, [r7, #28]
 80018a6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018a8:	4b3b      	ldr	r3, [pc, #236]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 80018aa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018ae:	4a3a      	ldr	r2, [pc, #232]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 80018b0:	f043 0302 	orr.w	r3, r3, #2
 80018b4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018b8:	4b37      	ldr	r3, [pc, #220]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 80018ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018be:	f003 0302 	and.w	r3, r3, #2
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c6:	4b34      	ldr	r3, [pc, #208]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 80018c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018cc:	4a32      	ldr	r2, [pc, #200]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80018d6:	4b30      	ldr	r3, [pc, #192]	@ (8001998 <HAL_SPI_MspInit+0x244>)
 80018d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80018dc:	f003 0301 	and.w	r3, r3, #1
 80018e0:	617b      	str	r3, [r7, #20]
 80018e2:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 80018e4:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 80018e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ea:	2302      	movs	r3, #2
 80018ec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ee:	2300      	movs	r3, #0
 80018f0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018f2:	2300      	movs	r3, #0
 80018f4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018f6:	2305      	movs	r3, #5
 80018f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018fa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80018fe:	4619      	mov	r1, r3
 8001900:	4827      	ldr	r0, [pc, #156]	@ (80019a0 <HAL_SPI_MspInit+0x24c>)
 8001902:	f019 fcad 	bl	801b260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001906:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800190a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001918:	2305      	movs	r3, #5
 800191a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800191c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001920:	4619      	mov	r1, r3
 8001922:	481e      	ldr	r0, [pc, #120]	@ (800199c <HAL_SPI_MspInit+0x248>)
 8001924:	f019 fc9c 	bl	801b260 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8001928:	4b21      	ldr	r3, [pc, #132]	@ (80019b0 <HAL_SPI_MspInit+0x25c>)
 800192a:	4a22      	ldr	r2, [pc, #136]	@ (80019b4 <HAL_SPI_MspInit+0x260>)
 800192c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 800192e:	4b20      	ldr	r3, [pc, #128]	@ (80019b0 <HAL_SPI_MspInit+0x25c>)
 8001930:	2227      	movs	r2, #39	@ 0x27
 8001932:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001934:	4b1e      	ldr	r3, [pc, #120]	@ (80019b0 <HAL_SPI_MspInit+0x25c>)
 8001936:	2200      	movs	r2, #0
 8001938:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800193a:	4b1d      	ldr	r3, [pc, #116]	@ (80019b0 <HAL_SPI_MspInit+0x25c>)
 800193c:	2200      	movs	r2, #0
 800193e:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001940:	4b1b      	ldr	r3, [pc, #108]	@ (80019b0 <HAL_SPI_MspInit+0x25c>)
 8001942:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001946:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001948:	4b19      	ldr	r3, [pc, #100]	@ (80019b0 <HAL_SPI_MspInit+0x25c>)
 800194a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800194e:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001950:	4b17      	ldr	r3, [pc, #92]	@ (80019b0 <HAL_SPI_MspInit+0x25c>)
 8001952:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001956:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001958:	4b15      	ldr	r3, [pc, #84]	@ (80019b0 <HAL_SPI_MspInit+0x25c>)
 800195a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800195e:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001960:	4b13      	ldr	r3, [pc, #76]	@ (80019b0 <HAL_SPI_MspInit+0x25c>)
 8001962:	2200      	movs	r2, #0
 8001964:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001966:	4b12      	ldr	r3, [pc, #72]	@ (80019b0 <HAL_SPI_MspInit+0x25c>)
 8001968:	2200      	movs	r2, #0
 800196a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 800196c:	4810      	ldr	r0, [pc, #64]	@ (80019b0 <HAL_SPI_MspInit+0x25c>)
 800196e:	f017 fd6f 	bl	8019450 <HAL_DMA_Init>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <HAL_SPI_MspInit+0x228>
      Error_Handler();
 8001978:	f7ff fdef 	bl	800155a <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	4a0c      	ldr	r2, [pc, #48]	@ (80019b0 <HAL_SPI_MspInit+0x25c>)
 8001980:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001982:	4a0b      	ldr	r2, [pc, #44]	@ (80019b0 <HAL_SPI_MspInit+0x25c>)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001988:	2200      	movs	r2, #0
 800198a:	2100      	movs	r1, #0
 800198c:	2024      	movs	r0, #36	@ 0x24
 800198e:	f017 fcb2 	bl	80192f6 <HAL_NVIC_SetPriority>
}
 8001992:	e065      	b.n	8001a60 <HAL_SPI_MspInit+0x30c>
 8001994:	40013000 	.word	0x40013000
 8001998:	58024400 	.word	0x58024400
 800199c:	58020000 	.word	0x58020000
 80019a0:	58020400 	.word	0x58020400
 80019a4:	2000023c 	.word	0x2000023c
 80019a8:	40020010 	.word	0x40020010
 80019ac:	40003800 	.word	0x40003800
 80019b0:	200002b4 	.word	0x200002b4
 80019b4:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	4a2a      	ldr	r2, [pc, #168]	@ (8001a68 <HAL_SPI_MspInit+0x314>)
 80019be:	4293      	cmp	r3, r2
 80019c0:	d14e      	bne.n	8001a60 <HAL_SPI_MspInit+0x30c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80019c2:	4b2a      	ldr	r3, [pc, #168]	@ (8001a6c <HAL_SPI_MspInit+0x318>)
 80019c4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019c8:	4a28      	ldr	r2, [pc, #160]	@ (8001a6c <HAL_SPI_MspInit+0x318>)
 80019ca:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80019ce:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 80019d2:	4b26      	ldr	r3, [pc, #152]	@ (8001a6c <HAL_SPI_MspInit+0x318>)
 80019d4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019d8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80019dc:	613b      	str	r3, [r7, #16]
 80019de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e0:	4b22      	ldr	r3, [pc, #136]	@ (8001a6c <HAL_SPI_MspInit+0x318>)
 80019e2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019e6:	4a21      	ldr	r2, [pc, #132]	@ (8001a6c <HAL_SPI_MspInit+0x318>)
 80019e8:	f043 0301 	orr.w	r3, r3, #1
 80019ec:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019f0:	4b1e      	ldr	r3, [pc, #120]	@ (8001a6c <HAL_SPI_MspInit+0x318>)
 80019f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019fe:	4b1b      	ldr	r3, [pc, #108]	@ (8001a6c <HAL_SPI_MspInit+0x318>)
 8001a00:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a04:	4a19      	ldr	r2, [pc, #100]	@ (8001a6c <HAL_SPI_MspInit+0x318>)
 8001a06:	f043 0304 	orr.w	r3, r3, #4
 8001a0a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001a0e:	4b17      	ldr	r3, [pc, #92]	@ (8001a6c <HAL_SPI_MspInit+0x318>)
 8001a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001a14:	f003 0304 	and.w	r3, r3, #4
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a1c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001a20:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a22:	2302      	movs	r3, #2
 8001a24:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a26:	2300      	movs	r3, #0
 8001a28:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a2e:	2306      	movs	r3, #6
 8001a30:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a36:	4619      	mov	r1, r3
 8001a38:	480d      	ldr	r0, [pc, #52]	@ (8001a70 <HAL_SPI_MspInit+0x31c>)
 8001a3a:	f019 fc11 	bl	801b260 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001a3e:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001a42:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a44:	2302      	movs	r3, #2
 8001a46:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a48:	2300      	movs	r3, #0
 8001a4a:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a50:	2306      	movs	r3, #6
 8001a52:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a54:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a58:	4619      	mov	r1, r3
 8001a5a:	4806      	ldr	r0, [pc, #24]	@ (8001a74 <HAL_SPI_MspInit+0x320>)
 8001a5c:	f019 fc00 	bl	801b260 <HAL_GPIO_Init>
}
 8001a60:	bf00      	nop
 8001a62:	3740      	adds	r7, #64	@ 0x40
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40003c00 	.word	0x40003c00
 8001a6c:	58024400 	.word	0x58024400
 8001a70:	58020000 	.word	0x58020000
 8001a74:	58020800 	.word	0x58020800

08001a78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b086      	sub	sp, #24
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a4e      	ldr	r2, [pc, #312]	@ (8001bc0 <HAL_TIM_Base_MspInit+0x148>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d13e      	bne.n	8001b08 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001a8a:	4b4e      	ldr	r3, [pc, #312]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x14c>)
 8001a8c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001a90:	4a4c      	ldr	r2, [pc, #304]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x14c>)
 8001a92:	f043 0301 	orr.w	r3, r3, #1
 8001a96:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001a9a:	4b4a      	ldr	r3, [pc, #296]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x14c>)
 8001a9c:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001aa0:	f003 0301 	and.w	r3, r3, #1
 8001aa4:	617b      	str	r3, [r7, #20]
 8001aa6:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 8001aa8:	4b47      	ldr	r3, [pc, #284]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x150>)
 8001aaa:	4a48      	ldr	r2, [pc, #288]	@ (8001bcc <HAL_TIM_Base_MspInit+0x154>)
 8001aac:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 8001aae:	4b46      	ldr	r3, [pc, #280]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x150>)
 8001ab0:	220f      	movs	r2, #15
 8001ab2:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ab4:	4b44      	ldr	r3, [pc, #272]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x150>)
 8001ab6:	2240      	movs	r2, #64	@ 0x40
 8001ab8:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001aba:	4b43      	ldr	r3, [pc, #268]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x150>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 8001ac0:	4b41      	ldr	r3, [pc, #260]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x150>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001ac6:	4b40      	ldr	r3, [pc, #256]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x150>)
 8001ac8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001acc:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ace:	4b3e      	ldr	r3, [pc, #248]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x150>)
 8001ad0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ad4:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8001ad6:	4b3c      	ldr	r3, [pc, #240]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x150>)
 8001ad8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001adc:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8001ade:	4b3a      	ldr	r3, [pc, #232]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x150>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ae4:	4b38      	ldr	r3, [pc, #224]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x150>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001aea:	4837      	ldr	r0, [pc, #220]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x150>)
 8001aec:	f017 fcb0 	bl	8019450 <HAL_DMA_Init>
 8001af0:	4603      	mov	r3, r0
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d001      	beq.n	8001afa <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001af6:	f7ff fd30 	bl	800155a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a32      	ldr	r2, [pc, #200]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x150>)
 8001afe:	621a      	str	r2, [r3, #32]
 8001b00:	4a31      	ldr	r2, [pc, #196]	@ (8001bc8 <HAL_TIM_Base_MspInit+0x150>)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b06:	e057      	b.n	8001bb8 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM2)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b10:	d10f      	bne.n	8001b32 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b12:	4b2c      	ldr	r3, [pc, #176]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x14c>)
 8001b14:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b18:	4a2a      	ldr	r2, [pc, #168]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x14c>)
 8001b1a:	f043 0301 	orr.w	r3, r3, #1
 8001b1e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b22:	4b28      	ldr	r3, [pc, #160]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x14c>)
 8001b24:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	613b      	str	r3, [r7, #16]
 8001b2e:	693b      	ldr	r3, [r7, #16]
}
 8001b30:	e042      	b.n	8001bb8 <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM3)
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a26      	ldr	r2, [pc, #152]	@ (8001bd0 <HAL_TIM_Base_MspInit+0x158>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d13d      	bne.n	8001bb8 <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b3c:	4b21      	ldr	r3, [pc, #132]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x14c>)
 8001b3e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b42:	4a20      	ldr	r2, [pc, #128]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x14c>)
 8001b44:	f043 0302 	orr.w	r3, r3, #2
 8001b48:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001b4c:	4b1d      	ldr	r3, [pc, #116]	@ (8001bc4 <HAL_TIM_Base_MspInit+0x14c>)
 8001b4e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_up.Instance = DMA1_Stream3;
 8001b5a:	4b1e      	ldr	r3, [pc, #120]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x15c>)
 8001b5c:	4a1e      	ldr	r2, [pc, #120]	@ (8001bd8 <HAL_TIM_Base_MspInit+0x160>)
 8001b5e:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 8001b60:	4b1c      	ldr	r3, [pc, #112]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x15c>)
 8001b62:	221b      	movs	r2, #27
 8001b64:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001b66:	4b1b      	ldr	r3, [pc, #108]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x15c>)
 8001b68:	2240      	movs	r2, #64	@ 0x40
 8001b6a:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b6c:	4b19      	ldr	r3, [pc, #100]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x15c>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 8001b72:	4b18      	ldr	r3, [pc, #96]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x15c>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001b78:	4b16      	ldr	r3, [pc, #88]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x15c>)
 8001b7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001b7e:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001b80:	4b14      	ldr	r3, [pc, #80]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x15c>)
 8001b82:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b86:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 8001b88:	4b12      	ldr	r3, [pc, #72]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x15c>)
 8001b8a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b8e:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 8001b90:	4b10      	ldr	r3, [pc, #64]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x15c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b96:	4b0f      	ldr	r3, [pc, #60]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x15c>)
 8001b98:	2200      	movs	r2, #0
 8001b9a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 8001b9c:	480d      	ldr	r0, [pc, #52]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x15c>)
 8001b9e:	f017 fc57 	bl	8019450 <HAL_DMA_Init>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d001      	beq.n	8001bac <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 8001ba8:	f7ff fcd7 	bl	800155a <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a09      	ldr	r2, [pc, #36]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x15c>)
 8001bb0:	621a      	str	r2, [r3, #32]
 8001bb2:	4a08      	ldr	r2, [pc, #32]	@ (8001bd4 <HAL_TIM_Base_MspInit+0x15c>)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001bb8:	bf00      	nop
 8001bba:	3718      	adds	r7, #24
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	bd80      	pop	{r7, pc}
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	58024400 	.word	0x58024400
 8001bc8:	20000410 	.word	0x20000410
 8001bcc:	40020040 	.word	0x40020040
 8001bd0:	40000400 	.word	0x40000400
 8001bd4:	20000488 	.word	0x20000488
 8001bd8:	40020058 	.word	0x40020058

08001bdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b0ba      	sub	sp, #232	@ 0xe8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001be4:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001be8:	2200      	movs	r2, #0
 8001bea:	601a      	str	r2, [r3, #0]
 8001bec:	605a      	str	r2, [r3, #4]
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	60da      	str	r2, [r3, #12]
 8001bf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001bf4:	f107 0310 	add.w	r3, r7, #16
 8001bf8:	22c0      	movs	r2, #192	@ 0xc0
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	4618      	mov	r0, r3
 8001bfe:	f01e ffee 	bl	8020bde <memset>
  if(huart->Instance==USART3)
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a27      	ldr	r2, [pc, #156]	@ (8001ca4 <HAL_UART_MspInit+0xc8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d146      	bne.n	8001c9a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001c0c:	f04f 0202 	mov.w	r2, #2
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001c1e:	f107 0310 	add.w	r3, r7, #16
 8001c22:	4618      	mov	r0, r3
 8001c24:	f01a fcec 	bl	801c600 <HAL_RCCEx_PeriphCLKConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8001c2e:	f7ff fc94 	bl	800155a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001c32:	4b1d      	ldr	r3, [pc, #116]	@ (8001ca8 <HAL_UART_MspInit+0xcc>)
 8001c34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c38:	4a1b      	ldr	r2, [pc, #108]	@ (8001ca8 <HAL_UART_MspInit+0xcc>)
 8001c3a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001c3e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c42:	4b19      	ldr	r3, [pc, #100]	@ (8001ca8 <HAL_UART_MspInit+0xcc>)
 8001c44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001c48:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001c4c:	60fb      	str	r3, [r7, #12]
 8001c4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c50:	4b15      	ldr	r3, [pc, #84]	@ (8001ca8 <HAL_UART_MspInit+0xcc>)
 8001c52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c56:	4a14      	ldr	r2, [pc, #80]	@ (8001ca8 <HAL_UART_MspInit+0xcc>)
 8001c58:	f043 0308 	orr.w	r3, r3, #8
 8001c5c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001c60:	4b11      	ldr	r3, [pc, #68]	@ (8001ca8 <HAL_UART_MspInit+0xcc>)
 8001c62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	60bb      	str	r3, [r7, #8]
 8001c6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001c6e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001c72:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c76:	2302      	movs	r3, #2
 8001c78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c82:	2300      	movs	r3, #0
 8001c84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001c88:	2307      	movs	r3, #7
 8001c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c8e:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001c92:	4619      	mov	r1, r3
 8001c94:	4805      	ldr	r0, [pc, #20]	@ (8001cac <HAL_UART_MspInit+0xd0>)
 8001c96:	f019 fae3 	bl	801b260 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 8001c9a:	bf00      	nop
 8001c9c:	37e8      	adds	r7, #232	@ 0xe8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40004800 	.word	0x40004800
 8001ca8:	58024400 	.word	0x58024400
 8001cac:	58020c00 	.word	0x58020c00

08001cb0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001cb4:	bf00      	nop
 8001cb6:	e7fd      	b.n	8001cb4 <NMI_Handler+0x4>

08001cb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001cbc:	bf00      	nop
 8001cbe:	e7fd      	b.n	8001cbc <MemManage_Handler+0x4>

08001cc0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cc4:	bf00      	nop
 8001cc6:	e7fd      	b.n	8001cc4 <BusFault_Handler+0x4>

08001cc8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ccc:	bf00      	nop
 8001cce:	e7fd      	b.n	8001ccc <UsageFault_Handler+0x4>

08001cd0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cd0:	b480      	push	{r7}
 8001cd2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cd4:	bf00      	nop
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr

08001cde <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cde:	b580      	push	{r7, lr}
 8001ce0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ce2:	f017 f9ed 	bl	80190c0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8001ce6:	f002 fac9 	bl	800427c <xTaskGetSchedulerState>
 8001cea:	4603      	mov	r3, r0
 8001cec:	2b02      	cmp	r3, #2
 8001cee:	d101      	bne.n	8001cf4 <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 8001cf0:	f003 fbaa 	bl	8005448 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 8001cf4:	bf00      	nop
 8001cf6:	bd80      	pop	{r7, pc}

08001cf8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001cf8:	b580      	push	{r7, lr}
 8001cfa:	b086      	sub	sp, #24
 8001cfc:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 8001d02:	4b19      	ldr	r3, [pc, #100]	@ (8001d68 <DMA1_Stream0_IRQHandler+0x70>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f003 0320 	and.w	r3, r3, #32
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d00c      	beq.n	8001d28 <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 8001d0e:	4b17      	ldr	r3, [pc, #92]	@ (8001d6c <DMA1_Stream0_IRQHandler+0x74>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d002      	beq.n	8001d24 <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	60fb      	str	r3, [r7, #12]
 8001d22:	e001      	b.n	8001d28 <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 8001d24:	2301      	movs	r3, #1
 8001d26:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001d28:	4811      	ldr	r0, [pc, #68]	@ (8001d70 <DMA1_Stream0_IRQHandler+0x78>)
 8001d2a:	f018 f933 	bl	8019f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 8001d32:	4b10      	ldr	r3, [pc, #64]	@ (8001d74 <DMA1_Stream0_IRQHandler+0x7c>)
 8001d34:	6818      	ldr	r0, [r3, #0]
 8001d36:	1d3b      	adds	r3, r7, #4
 8001d38:	9301      	str	r3, [sp, #4]
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	9300      	str	r3, [sp, #0]
 8001d3e:	2301      	movs	r3, #1
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	2100      	movs	r1, #0
 8001d44:	f002 fef2 	bl	8004b2c <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d007      	beq.n	8001d5e <DMA1_Stream0_IRQHandler+0x66>
 8001d4e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d78 <DMA1_Stream0_IRQHandler+0x80>)
 8001d50:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	f3bf 8f4f 	dsb	sy
 8001d5a:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d5e:	bf00      	nop
 8001d60:	3710      	adds	r7, #16
 8001d62:	46bd      	mov	sp, r7
 8001d64:	bd80      	pop	{r7, pc}
 8001d66:	bf00      	nop
 8001d68:	40020000 	.word	0x40020000
 8001d6c:	40020010 	.word	0x40020010
 8001d70:	2000023c 	.word	0x2000023c
 8001d74:	20000a68 	.word	0x20000a68
 8001d78:	e000ed04 	.word	0xe000ed04

08001d7c <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001d80:	4802      	ldr	r0, [pc, #8]	@ (8001d8c <DMA1_Stream1_IRQHandler+0x10>)
 8001d82:	f018 f907 	bl	8019f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200002b4 	.word	0x200002b4

08001d90 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 8001d94:	4802      	ldr	r0, [pc, #8]	@ (8001da0 <DMA1_Stream2_IRQHandler+0x10>)
 8001d96:	f018 f8fd 	bl	8019f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d9a:	bf00      	nop
 8001d9c:	bd80      	pop	{r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000410 	.word	0x20000410

08001da4 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 8001da8:	4802      	ldr	r0, [pc, #8]	@ (8001db4 <DMA1_Stream3_IRQHandler+0x10>)
 8001daa:	f018 f8f3 	bl	8019f94 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001dae:	bf00      	nop
 8001db0:	bd80      	pop	{r7, pc}
 8001db2:	bf00      	nop
 8001db4:	20000488 	.word	0x20000488

08001db8 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001dbc:	4802      	ldr	r0, [pc, #8]	@ (8001dc8 <SPI1_IRQHandler+0x10>)
 8001dbe:	f01c fb6f 	bl	801e4a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001dc2:	bf00      	nop
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	200000a4 	.word	0x200000a4

08001dcc <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001dcc:	b580      	push	{r7, lr}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001dd0:	4802      	ldr	r0, [pc, #8]	@ (8001ddc <SPI2_IRQHandler+0x10>)
 8001dd2:	f01c fb65 	bl	801e4a0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001dd6:	bf00      	nop
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	2000012c 	.word	0x2000012c

08001de0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001de0:	b480      	push	{r7}
 8001de2:	af00      	add	r7, sp, #0
  return 1;
 8001de4:	2301      	movs	r3, #1
}
 8001de6:	4618      	mov	r0, r3
 8001de8:	46bd      	mov	sp, r7
 8001dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dee:	4770      	bx	lr

08001df0 <_kill>:

int _kill(int pid, int sig)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b082      	sub	sp, #8
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
 8001df8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001dfa:	f01f fe17 	bl	8021a2c <__errno>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2216      	movs	r2, #22
 8001e02:	601a      	str	r2, [r3, #0]
  return -1;
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}

08001e10 <_exit>:

void _exit (int status)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b082      	sub	sp, #8
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001e18:	f04f 31ff 	mov.w	r1, #4294967295
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ffe7 	bl	8001df0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001e22:	bf00      	nop
 8001e24:	e7fd      	b.n	8001e22 <_exit+0x12>

08001e26 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001e26:	b580      	push	{r7, lr}
 8001e28:	b086      	sub	sp, #24
 8001e2a:	af00      	add	r7, sp, #0
 8001e2c:	60f8      	str	r0, [r7, #12]
 8001e2e:	60b9      	str	r1, [r7, #8]
 8001e30:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e32:	2300      	movs	r3, #0
 8001e34:	617b      	str	r3, [r7, #20]
 8001e36:	e00a      	b.n	8001e4e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001e38:	f3af 8000 	nop.w
 8001e3c:	4601      	mov	r1, r0
 8001e3e:	68bb      	ldr	r3, [r7, #8]
 8001e40:	1c5a      	adds	r2, r3, #1
 8001e42:	60ba      	str	r2, [r7, #8]
 8001e44:	b2ca      	uxtb	r2, r1
 8001e46:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	617b      	str	r3, [r7, #20]
 8001e4e:	697a      	ldr	r2, [r7, #20]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	dbf0      	blt.n	8001e38 <_read+0x12>
  }

  return len;
 8001e56:	687b      	ldr	r3, [r7, #4]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	e009      	b.n	8001e86 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	1c5a      	adds	r2, r3, #1
 8001e76:	60ba      	str	r2, [r7, #8]
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	3301      	adds	r3, #1
 8001e84:	617b      	str	r3, [r7, #20]
 8001e86:	697a      	ldr	r2, [r7, #20]
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	429a      	cmp	r2, r3
 8001e8c:	dbf1      	blt.n	8001e72 <_write+0x12>
  }
  return len;
 8001e8e:	687b      	ldr	r3, [r7, #4]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3718      	adds	r7, #24
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <_close>:

int _close(int file)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b083      	sub	sp, #12
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
 8001eb8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001eba:	683b      	ldr	r3, [r7, #0]
 8001ebc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ec0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ec2:	2300      	movs	r3, #0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr

08001ed0 <_isatty>:

int _isatty(int file)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001ed8:	2301      	movs	r3, #1
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr

08001ee6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001ee6:	b480      	push	{r7}
 8001ee8:	b085      	sub	sp, #20
 8001eea:	af00      	add	r7, sp, #0
 8001eec:	60f8      	str	r0, [r7, #12]
 8001eee:	60b9      	str	r1, [r7, #8]
 8001ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001ef2:	2300      	movs	r3, #0
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b086      	sub	sp, #24
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f08:	4a14      	ldr	r2, [pc, #80]	@ (8001f5c <_sbrk+0x5c>)
 8001f0a:	4b15      	ldr	r3, [pc, #84]	@ (8001f60 <_sbrk+0x60>)
 8001f0c:	1ad3      	subs	r3, r2, r3
 8001f0e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f14:	4b13      	ldr	r3, [pc, #76]	@ (8001f64 <_sbrk+0x64>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d102      	bne.n	8001f22 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f1c:	4b11      	ldr	r3, [pc, #68]	@ (8001f64 <_sbrk+0x64>)
 8001f1e:	4a12      	ldr	r2, [pc, #72]	@ (8001f68 <_sbrk+0x68>)
 8001f20:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f22:	4b10      	ldr	r3, [pc, #64]	@ (8001f64 <_sbrk+0x64>)
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	4413      	add	r3, r2
 8001f2a:	693a      	ldr	r2, [r7, #16]
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d207      	bcs.n	8001f40 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001f30:	f01f fd7c 	bl	8021a2c <__errno>
 8001f34:	4603      	mov	r3, r0
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001f3a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f3e:	e009      	b.n	8001f54 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001f40:	4b08      	ldr	r3, [pc, #32]	@ (8001f64 <_sbrk+0x64>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001f46:	4b07      	ldr	r3, [pc, #28]	@ (8001f64 <_sbrk+0x64>)
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4a05      	ldr	r2, [pc, #20]	@ (8001f64 <_sbrk+0x64>)
 8001f50:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001f52:	68fb      	ldr	r3, [r7, #12]
}
 8001f54:	4618      	mov	r0, r3
 8001f56:	3718      	adds	r7, #24
 8001f58:	46bd      	mov	sp, r7
 8001f5a:	bd80      	pop	{r7, pc}
 8001f5c:	24080000 	.word	0x24080000
 8001f60:	00000400 	.word	0x00000400
 8001f64:	20000a70 	.word	0x20000a70
 8001f68:	20002530 	.word	0x20002530

08001f6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001f72:	4b3f      	ldr	r3, [pc, #252]	@ (8002070 <SystemInit+0x104>)
 8001f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001f78:	4a3d      	ldr	r2, [pc, #244]	@ (8002070 <SystemInit+0x104>)
 8001f7a:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001f7e:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001f82:	4b3c      	ldr	r3, [pc, #240]	@ (8002074 <SystemInit+0x108>)
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f003 030f 	and.w	r3, r3, #15
 8001f8a:	2b06      	cmp	r3, #6
 8001f8c:	d807      	bhi.n	8001f9e <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001f8e:	4b39      	ldr	r3, [pc, #228]	@ (8002074 <SystemInit+0x108>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f023 030f 	bic.w	r3, r3, #15
 8001f96:	4a37      	ldr	r2, [pc, #220]	@ (8002074 <SystemInit+0x108>)
 8001f98:	f043 0307 	orr.w	r3, r3, #7
 8001f9c:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8001f9e:	4b36      	ldr	r3, [pc, #216]	@ (8002078 <SystemInit+0x10c>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a35      	ldr	r2, [pc, #212]	@ (8002078 <SystemInit+0x10c>)
 8001fa4:	f043 0301 	orr.w	r3, r3, #1
 8001fa8:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001faa:	4b33      	ldr	r3, [pc, #204]	@ (8002078 <SystemInit+0x10c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8001fb0:	4b31      	ldr	r3, [pc, #196]	@ (8002078 <SystemInit+0x10c>)
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	4930      	ldr	r1, [pc, #192]	@ (8002078 <SystemInit+0x10c>)
 8001fb6:	4b31      	ldr	r3, [pc, #196]	@ (800207c <SystemInit+0x110>)
 8001fb8:	4013      	ands	r3, r2
 8001fba:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8001fbc:	4b2d      	ldr	r3, [pc, #180]	@ (8002074 <SystemInit+0x108>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d007      	beq.n	8001fd8 <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8001fc8:	4b2a      	ldr	r3, [pc, #168]	@ (8002074 <SystemInit+0x108>)
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f023 030f 	bic.w	r3, r3, #15
 8001fd0:	4a28      	ldr	r2, [pc, #160]	@ (8002074 <SystemInit+0x108>)
 8001fd2:	f043 0307 	orr.w	r3, r3, #7
 8001fd6:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8001fd8:	4b27      	ldr	r3, [pc, #156]	@ (8002078 <SystemInit+0x10c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8001fde:	4b26      	ldr	r3, [pc, #152]	@ (8002078 <SystemInit+0x10c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8001fe4:	4b24      	ldr	r3, [pc, #144]	@ (8002078 <SystemInit+0x10c>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8001fea:	4b23      	ldr	r3, [pc, #140]	@ (8002078 <SystemInit+0x10c>)
 8001fec:	4a24      	ldr	r2, [pc, #144]	@ (8002080 <SystemInit+0x114>)
 8001fee:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8001ff0:	4b21      	ldr	r3, [pc, #132]	@ (8002078 <SystemInit+0x10c>)
 8001ff2:	4a24      	ldr	r2, [pc, #144]	@ (8002084 <SystemInit+0x118>)
 8001ff4:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8001ff6:	4b20      	ldr	r3, [pc, #128]	@ (8002078 <SystemInit+0x10c>)
 8001ff8:	4a23      	ldr	r2, [pc, #140]	@ (8002088 <SystemInit+0x11c>)
 8001ffa:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8001ffc:	4b1e      	ldr	r3, [pc, #120]	@ (8002078 <SystemInit+0x10c>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002002:	4b1d      	ldr	r3, [pc, #116]	@ (8002078 <SystemInit+0x10c>)
 8002004:	4a20      	ldr	r2, [pc, #128]	@ (8002088 <SystemInit+0x11c>)
 8002006:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8002008:	4b1b      	ldr	r3, [pc, #108]	@ (8002078 <SystemInit+0x10c>)
 800200a:	2200      	movs	r2, #0
 800200c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 800200e:	4b1a      	ldr	r3, [pc, #104]	@ (8002078 <SystemInit+0x10c>)
 8002010:	4a1d      	ldr	r2, [pc, #116]	@ (8002088 <SystemInit+0x11c>)
 8002012:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002014:	4b18      	ldr	r3, [pc, #96]	@ (8002078 <SystemInit+0x10c>)
 8002016:	2200      	movs	r2, #0
 8002018:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800201a:	4b17      	ldr	r3, [pc, #92]	@ (8002078 <SystemInit+0x10c>)
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	4a16      	ldr	r2, [pc, #88]	@ (8002078 <SystemInit+0x10c>)
 8002020:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002024:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8002026:	4b14      	ldr	r3, [pc, #80]	@ (8002078 <SystemInit+0x10c>)
 8002028:	2200      	movs	r2, #0
 800202a:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800202c:	4b17      	ldr	r3, [pc, #92]	@ (800208c <SystemInit+0x120>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	4b17      	ldr	r3, [pc, #92]	@ (8002090 <SystemInit+0x124>)
 8002032:	4013      	ands	r3, r2
 8002034:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002038:	d202      	bcs.n	8002040 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800203a:	4b16      	ldr	r3, [pc, #88]	@ (8002094 <SystemInit+0x128>)
 800203c:	2201      	movs	r2, #1
 800203e:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8002040:	4b0d      	ldr	r3, [pc, #52]	@ (8002078 <SystemInit+0x10c>)
 8002042:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002046:	4a0c      	ldr	r2, [pc, #48]	@ (8002078 <SystemInit+0x10c>)
 8002048:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 800204c:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8002050:	4b09      	ldr	r3, [pc, #36]	@ (8002078 <SystemInit+0x10c>)
 8002052:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 8002056:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 8002058:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800205a:	4b0f      	ldr	r3, [pc, #60]	@ (8002098 <SystemInit+0x12c>)
 800205c:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002060:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002062:	bf00      	nop
 8002064:	370c      	adds	r7, #12
 8002066:	46bd      	mov	sp, r7
 8002068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206c:	4770      	bx	lr
 800206e:	bf00      	nop
 8002070:	e000ed00 	.word	0xe000ed00
 8002074:	52002000 	.word	0x52002000
 8002078:	58024400 	.word	0x58024400
 800207c:	eaf6ed7f 	.word	0xeaf6ed7f
 8002080:	02020200 	.word	0x02020200
 8002084:	01ff0000 	.word	0x01ff0000
 8002088:	01010280 	.word	0x01010280
 800208c:	5c001000 	.word	0x5c001000
 8002090:	ffff0000 	.word	0xffff0000
 8002094:	51008108 	.word	0x51008108
 8002098:	52004000 	.word	0x52004000

0800209c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800209c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80020d4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80020a0:	f7ff ff64 	bl	8001f6c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80020a4:	480c      	ldr	r0, [pc, #48]	@ (80020d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80020a6:	490d      	ldr	r1, [pc, #52]	@ (80020dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80020a8:	4a0d      	ldr	r2, [pc, #52]	@ (80020e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80020aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020ac:	e002      	b.n	80020b4 <LoopCopyDataInit>

080020ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020b2:	3304      	adds	r3, #4

080020b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020b8:	d3f9      	bcc.n	80020ae <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ba:	4a0a      	ldr	r2, [pc, #40]	@ (80020e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80020bc:	4c0a      	ldr	r4, [pc, #40]	@ (80020e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020c0:	e001      	b.n	80020c6 <LoopFillZerobss>

080020c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020c4:	3204      	adds	r2, #4

080020c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020c8:	d3fb      	bcc.n	80020c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80020ca:	f01f fcb5 	bl	8021a38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020ce:	f7fe fae7 	bl	80006a0 <main>
  bx  lr
 80020d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020d4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80020d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020dc:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80020e0:	08025f38 	.word	0x08025f38
  ldr r2, =_sbss
 80020e4:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80020e8:	20002530 	.word	0x20002530

080020ec <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020ec:	e7fe      	b.n	80020ec <ADC3_IRQHandler>

080020ee <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b082      	sub	sp, #8
 80020f2:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80020f4:	201c      	movs	r0, #28
 80020f6:	f003 fa25 	bl	8005544 <pvPortMalloc>
 80020fa:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d007      	beq.n	8002112 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	3304      	adds	r3, #4
 800210c:	4618      	mov	r0, r3
 800210e:	f000 f9c3 	bl	8002498 <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 8002112:	687b      	ldr	r3, [r7, #4]
        }
 8002114:	4618      	mov	r0, r3
 8002116:	3708      	adds	r7, #8
 8002118:	46bd      	mov	sp, r7
 800211a:	bd80      	pop	{r7, pc}

0800211c <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 800211c:	b580      	push	{r7, lr}
 800211e:	b08c      	sub	sp, #48	@ 0x30
 8002120:	af00      	add	r7, sp, #0
 8002122:	60f8      	str	r0, [r7, #12]
 8002124:	60b9      	str	r1, [r7, #8]
 8002126:	607a      	str	r2, [r7, #4]
 8002128:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 800212e:	2300      	movs	r3, #0
 8002130:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 8002132:	2300      	movs	r3, #0
 8002134:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d104      	bne.n	8002146 <xEventGroupWaitBits+0x2a>
 800213c:	f240 1147 	movw	r1, #327	@ 0x147
 8002140:	4850      	ldr	r0, [pc, #320]	@ (8002284 <xEventGroupWaitBits+0x168>)
 8002142:	f7fe fff5 	bl	8001130 <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002146:	68bb      	ldr	r3, [r7, #8]
 8002148:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800214c:	d304      	bcc.n	8002158 <xEventGroupWaitBits+0x3c>
 800214e:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8002152:	484c      	ldr	r0, [pc, #304]	@ (8002284 <xEventGroupWaitBits+0x168>)
 8002154:	f7fe ffec 	bl	8001130 <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	2b00      	cmp	r3, #0
 800215c:	d104      	bne.n	8002168 <xEventGroupWaitBits+0x4c>
 800215e:	f240 1149 	movw	r1, #329	@ 0x149
 8002162:	4848      	ldr	r0, [pc, #288]	@ (8002284 <xEventGroupWaitBits+0x168>)
 8002164:	f7fe ffe4 	bl	8001130 <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002168:	f002 f888 	bl	800427c <xTaskGetSchedulerState>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d102      	bne.n	8002178 <xEventGroupWaitBits+0x5c>
 8002172:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002174:	2b00      	cmp	r3, #0
 8002176:	d101      	bne.n	800217c <xEventGroupWaitBits+0x60>
 8002178:	2301      	movs	r3, #1
 800217a:	e000      	b.n	800217e <xEventGroupWaitBits+0x62>
 800217c:	2300      	movs	r3, #0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d104      	bne.n	800218c <xEventGroupWaitBits+0x70>
 8002182:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8002186:	483f      	ldr	r0, [pc, #252]	@ (8002284 <xEventGroupWaitBits+0x168>)
 8002188:	f7fe ffd2 	bl	8001130 <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 800218c:	f001 fa58 	bl	8003640 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	69f8      	ldr	r0, [r7, #28]
 800219c:	f000 f95a 	bl	8002454 <prvTestWaitCondition>
 80021a0:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 80021a2:	69bb      	ldr	r3, [r7, #24]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00e      	beq.n	80021c6 <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 80021a8:	69fb      	ldr	r3, [r7, #28]
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 80021ac:	2300      	movs	r3, #0
 80021ae:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d028      	beq.n	8002208 <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80021b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	43db      	mvns	r3, r3
 80021be:	401a      	ands	r2, r3
 80021c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021c2:	601a      	str	r2, [r3, #0]
 80021c4:	e020      	b.n	8002208 <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 80021c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d104      	bne.n	80021d6 <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 80021cc:	69fb      	ldr	r3, [r7, #28]
 80021ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 80021d0:	2301      	movs	r3, #1
 80021d2:	623b      	str	r3, [r7, #32]
 80021d4:	e018      	b.n	8002208 <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d003      	beq.n	80021e4 <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80021dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021de:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80021e2:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d003      	beq.n	80021f2 <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80021ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021ec:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80021f0:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 80021f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f4:	1d18      	adds	r0, r3, #4
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80021fa:	4313      	orrs	r3, r2
 80021fc:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80021fe:	4619      	mov	r1, r3
 8002200:	f001 fd06 	bl	8003c10 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 8002204:	2300      	movs	r3, #0
 8002206:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8002208:	f001 fa28 	bl	800365c <xTaskResumeAll>
 800220c:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 800220e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002210:	2b00      	cmp	r3, #0
 8002212:	d031      	beq.n	8002278 <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 8002214:	697b      	ldr	r3, [r7, #20]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d107      	bne.n	800222a <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 800221a:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <xEventGroupWaitBits+0x16c>)
 800221c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002220:	601a      	str	r2, [r3, #0]
 8002222:	f3bf 8f4f 	dsb	sy
 8002226:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 800222a:	f002 fa31 	bl	8004690 <uxTaskResetEventItemValue>
 800222e:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002230:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002232:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002236:	2b00      	cmp	r3, #0
 8002238:	d11a      	bne.n	8002270 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 800223a:	f003 f881 	bl	8005340 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 800223e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	68b9      	ldr	r1, [r7, #8]
 8002248:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800224a:	f000 f903 	bl	8002454 <prvTestWaitCondition>
 800224e:	4603      	mov	r3, r0
 8002250:	2b00      	cmp	r3, #0
 8002252:	d009      	beq.n	8002268 <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	2b00      	cmp	r3, #0
 8002258:	d006      	beq.n	8002268 <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800225a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800225c:	681a      	ldr	r2, [r3, #0]
 800225e:	68bb      	ldr	r3, [r7, #8]
 8002260:	43db      	mvns	r3, r3
 8002262:	401a      	ands	r2, r3
 8002264:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002266:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 8002268:	2301      	movs	r3, #1
 800226a:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 800226c:	f003 f894 	bl	8005398 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002270:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002272:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002276:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 8002278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800227a:	4618      	mov	r0, r3
 800227c:	3730      	adds	r7, #48	@ 0x30
 800227e:	46bd      	mov	sp, r7
 8002280:	bd80      	pop	{r7, pc}
 8002282:	bf00      	nop
 8002284:	08022794 	.word	0x08022794
 8002288:	e000ed04 	.word	0xe000ed04

0800228c <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 800228c:	b580      	push	{r7, lr}
 800228e:	b084      	sub	sp, #16
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
 8002294:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d104      	bne.n	80022aa <xEventGroupClearBits+0x1e>
 80022a0:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 80022a4:	480f      	ldr	r0, [pc, #60]	@ (80022e4 <xEventGroupClearBits+0x58>)
 80022a6:	f7fe ff43 	bl	8001130 <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80022b0:	d304      	bcc.n	80022bc <xEventGroupClearBits+0x30>
 80022b2:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80022b6:	480b      	ldr	r0, [pc, #44]	@ (80022e4 <xEventGroupClearBits+0x58>)
 80022b8:	f7fe ff3a 	bl	8001130 <vAssertCalled>

        taskENTER_CRITICAL();
 80022bc:	f003 f840 	bl	8005340 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	683b      	ldr	r3, [r7, #0]
 80022cc:	43db      	mvns	r3, r3
 80022ce:	401a      	ands	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80022d4:	f003 f860 	bl	8005398 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 80022d8:	68bb      	ldr	r3, [r7, #8]
    }
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	08022794 	.word	0x08022794

080022e8 <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 80022e8:	b580      	push	{r7, lr}
 80022ea:	b08c      	sub	sp, #48	@ 0x30
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80022f2:	2300      	movs	r3, #0
 80022f4:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 80022fa:	2300      	movs	r3, #0
 80022fc:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	2b00      	cmp	r3, #0
 8002302:	d104      	bne.n	800230e <xEventGroupSetBits+0x26>
 8002304:	f240 2132 	movw	r1, #562	@ 0x232
 8002308:	4836      	ldr	r0, [pc, #216]	@ (80023e4 <xEventGroupSetBits+0xfc>)
 800230a:	f7fe ff11 	bl	8001130 <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002314:	d304      	bcc.n	8002320 <xEventGroupSetBits+0x38>
 8002316:	f240 2133 	movw	r1, #563	@ 0x233
 800231a:	4832      	ldr	r0, [pc, #200]	@ (80023e4 <xEventGroupSetBits+0xfc>)
 800231c:	f7fe ff08 	bl	8001130 <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8002320:	6a3b      	ldr	r3, [r7, #32]
 8002322:	3304      	adds	r3, #4
 8002324:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3308      	adds	r3, #8
 800232a:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 800232c:	f001 f988 	bl	8003640 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	68db      	ldr	r3, [r3, #12]
 8002334:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 8002336:	6a3b      	ldr	r3, [r7, #32]
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	431a      	orrs	r2, r3
 800233e:	6a3b      	ldr	r3, [r7, #32]
 8002340:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 8002342:	e03c      	b.n	80023be <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 8002344:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800234a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 8002350:	2300      	movs	r3, #0
 8002352:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800235a:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800235c:	693b      	ldr	r3, [r7, #16]
 800235e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002362:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002364:	68fb      	ldr	r3, [r7, #12]
 8002366:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800236a:	2b00      	cmp	r3, #0
 800236c:	d108      	bne.n	8002380 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800236e:	6a3b      	ldr	r3, [r7, #32]
 8002370:	681a      	ldr	r2, [r3, #0]
 8002372:	693b      	ldr	r3, [r7, #16]
 8002374:	4013      	ands	r3, r2
 8002376:	2b00      	cmp	r3, #0
 8002378:	d00b      	beq.n	8002392 <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 800237a:	2301      	movs	r3, #1
 800237c:	627b      	str	r3, [r7, #36]	@ 0x24
 800237e:	e008      	b.n	8002392 <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002380:	6a3b      	ldr	r3, [r7, #32]
 8002382:	681a      	ldr	r2, [r3, #0]
 8002384:	693b      	ldr	r3, [r7, #16]
 8002386:	4013      	ands	r3, r2
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	429a      	cmp	r2, r3
 800238c:	d101      	bne.n	8002392 <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 800238e:	2301      	movs	r3, #1
 8002390:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 8002392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002394:	2b00      	cmp	r3, #0
 8002396:	d010      	beq.n	80023ba <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d003      	beq.n	80023aa <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 80023a2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80023aa:	6a3b      	ldr	r3, [r7, #32]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80023b2:	4619      	mov	r1, r3
 80023b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80023b6:	f001 fd49 	bl	8003e4c <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 80023be:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80023c0:	69bb      	ldr	r3, [r7, #24]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d1be      	bne.n	8002344 <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 80023c6:	6a3b      	ldr	r3, [r7, #32]
 80023c8:	681a      	ldr	r2, [r3, #0]
 80023ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80023cc:	43db      	mvns	r3, r3
 80023ce:	401a      	ands	r2, r3
 80023d0:	6a3b      	ldr	r3, [r7, #32]
 80023d2:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 80023d4:	f001 f942 	bl	800365c <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	681b      	ldr	r3, [r3, #0]
    }
 80023dc:	4618      	mov	r0, r3
 80023de:	3730      	adds	r7, #48	@ 0x30
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	08022794 	.word	0x08022794

080023e8 <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d104      	bne.n	8002404 <vEventGroupDelete+0x1c>
 80023fa:	f240 218e 	movw	r1, #654	@ 0x28e
 80023fe:	4814      	ldr	r0, [pc, #80]	@ (8002450 <vEventGroupDelete+0x68>)
 8002400:	f7fe fe96 	bl	8001130 <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	3304      	adds	r3, #4
 8002408:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 800240a:	f001 f919 	bl	8003640 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 800240e:	e011      	b.n	8002434 <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8002410:	68bb      	ldr	r3, [r7, #8]
 8002412:	68da      	ldr	r2, [r3, #12]
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	3308      	adds	r3, #8
 8002418:	429a      	cmp	r2, r3
 800241a:	d104      	bne.n	8002426 <vEventGroupDelete+0x3e>
 800241c:	f240 219a 	movw	r1, #666	@ 0x29a
 8002420:	480b      	ldr	r0, [pc, #44]	@ (8002450 <vEventGroupDelete+0x68>)
 8002422:	f7fe fe85 	bl	8001130 <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800242e:	4618      	mov	r0, r3
 8002430:	f001 fd0c 	bl	8003e4c <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d1e9      	bne.n	8002410 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 800243c:	f001 f90e 	bl	800365c <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 8002440:	68f8      	ldr	r0, [r7, #12]
 8002442:	f003 f953 	bl	80056ec <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 8002446:	bf00      	nop
 8002448:	3710      	adds	r7, #16
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	08022794 	.word	0x08022794

08002454 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 8002454:	b480      	push	{r7}
 8002456:	b087      	sub	sp, #28
 8002458:	af00      	add	r7, sp, #0
 800245a:	60f8      	str	r0, [r7, #12]
 800245c:	60b9      	str	r1, [r7, #8]
 800245e:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8002460:	2300      	movs	r3, #0
 8002462:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	2b00      	cmp	r3, #0
 8002468:	d107      	bne.n	800247a <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800246a:	68fa      	ldr	r2, [r7, #12]
 800246c:	68bb      	ldr	r3, [r7, #8]
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d00a      	beq.n	800248a <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8002474:	2301      	movs	r3, #1
 8002476:	617b      	str	r3, [r7, #20]
 8002478:	e007      	b.n	800248a <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800247a:	68fa      	ldr	r2, [r7, #12]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4013      	ands	r3, r2
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	d101      	bne.n	800248a <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8002486:	2301      	movs	r3, #1
 8002488:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 800248a:	697b      	ldr	r3, [r7, #20]
    }
 800248c:	4618      	mov	r0, r3
 800248e:	371c      	adds	r7, #28
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr

08002498 <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002498:	b480      	push	{r7}
 800249a:	b083      	sub	sp, #12
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	f103 0208 	add.w	r2, r3, #8
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f04f 32ff 	mov.w	r2, #4294967295
 80024b0:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f103 0208 	add.w	r2, r3, #8
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	f103 0208 	add.w	r2, r3, #8
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	2200      	movs	r2, #0
 80024ca:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80024cc:	bf00      	nop
 80024ce:	370c      	adds	r7, #12
 80024d0:	46bd      	mov	sp, r7
 80024d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d6:	4770      	bx	lr

080024d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80024d8:	b480      	push	{r7}
 80024da:	b083      	sub	sp, #12
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	2200      	movs	r2, #0
 80024e4:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80024e6:	bf00      	nop
 80024e8:	370c      	adds	r7, #12
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 80024f2:	b480      	push	{r7}
 80024f4:	b085      	sub	sp, #20
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	6078      	str	r0, [r7, #4]
 80024fa:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	689a      	ldr	r2, [r3, #8]
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	683a      	ldr	r2, [r7, #0]
 8002516:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	683a      	ldr	r2, [r7, #0]
 800251c:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	687a      	ldr	r2, [r7, #4]
 8002522:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	1c5a      	adds	r2, r3, #1
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 800252e:	bf00      	nop
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr

0800253a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800253a:	b480      	push	{r7}
 800253c:	b085      	sub	sp, #20
 800253e:	af00      	add	r7, sp, #0
 8002540:	6078      	str	r0, [r7, #4]
 8002542:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800254a:	68bb      	ldr	r3, [r7, #8]
 800254c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002550:	d103      	bne.n	800255a <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	60fb      	str	r3, [r7, #12]
 8002558:	e00c      	b.n	8002574 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	3308      	adds	r3, #8
 800255e:	60fb      	str	r3, [r7, #12]
 8002560:	e002      	b.n	8002568 <vListInsert+0x2e>
 8002562:	68fb      	ldr	r3, [r7, #12]
 8002564:	685b      	ldr	r3, [r3, #4]
 8002566:	60fb      	str	r3, [r7, #12]
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	68ba      	ldr	r2, [r7, #8]
 8002570:	429a      	cmp	r2, r3
 8002572:	d2f6      	bcs.n	8002562 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	685a      	ldr	r2, [r3, #4]
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	683a      	ldr	r2, [r7, #0]
 8002582:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	683a      	ldr	r2, [r7, #0]
 800258e:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	687a      	ldr	r2, [r7, #4]
 8002594:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	1c5a      	adds	r2, r3, #1
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80025a0:	bf00      	nop
 80025a2:	3714      	adds	r7, #20
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	685b      	ldr	r3, [r3, #4]
 80025be:	687a      	ldr	r2, [r7, #4]
 80025c0:	6892      	ldr	r2, [r2, #8]
 80025c2:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	689b      	ldr	r3, [r3, #8]
 80025c8:	687a      	ldr	r2, [r7, #4]
 80025ca:	6852      	ldr	r2, [r2, #4]
 80025cc:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	687a      	ldr	r2, [r7, #4]
 80025d4:	429a      	cmp	r2, r3
 80025d6:	d103      	bne.n	80025e0 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2200      	movs	r2, #0
 80025e4:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	1e5a      	subs	r2, r3, #1
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
}
 80025f4:	4618      	mov	r0, r3
 80025f6:	3714      	adds	r7, #20
 80025f8:	46bd      	mov	sp, r7
 80025fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025fe:	4770      	bx	lr

08002600 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
 8002608:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800260a:	2301      	movs	r3, #1
 800260c:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002612:	68bb      	ldr	r3, [r7, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d104      	bne.n	8002622 <xQueueGenericReset+0x22>
 8002618:	f240 1137 	movw	r1, #311	@ 0x137
 800261c:	4839      	ldr	r0, [pc, #228]	@ (8002704 <xQueueGenericReset+0x104>)
 800261e:	f7fe fd87 	bl	8001130 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	2b00      	cmp	r3, #0
 8002626:	d05d      	beq.n	80026e4 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 8002628:	68bb      	ldr	r3, [r7, #8]
 800262a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 800262c:	2b00      	cmp	r3, #0
 800262e:	d059      	beq.n	80026e4 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002634:	68bb      	ldr	r3, [r7, #8]
 8002636:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002638:	2100      	movs	r1, #0
 800263a:	fba3 2302 	umull	r2, r3, r3, r2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d000      	beq.n	8002644 <xQueueGenericReset+0x44>
 8002642:	2101      	movs	r1, #1
 8002644:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002646:	2b00      	cmp	r3, #0
 8002648:	d14c      	bne.n	80026e4 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 800264a:	f002 fe79 	bl	8005340 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 800264e:	68bb      	ldr	r3, [r7, #8]
 8002650:	681a      	ldr	r2, [r3, #0]
 8002652:	68bb      	ldr	r3, [r7, #8]
 8002654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002656:	68b9      	ldr	r1, [r7, #8]
 8002658:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800265a:	fb01 f303 	mul.w	r3, r1, r3
 800265e:	441a      	add	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	2200      	movs	r2, #0
 8002668:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 800266a:	68bb      	ldr	r3, [r7, #8]
 800266c:	681a      	ldr	r2, [r3, #0]
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68bb      	ldr	r3, [r7, #8]
 8002678:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800267a:	3b01      	subs	r3, #1
 800267c:	68b9      	ldr	r1, [r7, #8]
 800267e:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002680:	fb01 f303 	mul.w	r3, r1, r3
 8002684:	441a      	add	r2, r3
 8002686:	68bb      	ldr	r3, [r7, #8]
 8002688:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 800268a:	68bb      	ldr	r3, [r7, #8]
 800268c:	22ff      	movs	r2, #255	@ 0xff
 800268e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	22ff      	movs	r2, #255	@ 0xff
 8002696:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	2b00      	cmp	r3, #0
 800269e:	d114      	bne.n	80026ca <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80026a0:	68bb      	ldr	r3, [r7, #8]
 80026a2:	691b      	ldr	r3, [r3, #16]
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d01a      	beq.n	80026de <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80026a8:	68bb      	ldr	r3, [r7, #8]
 80026aa:	3310      	adds	r3, #16
 80026ac:	4618      	mov	r0, r3
 80026ae:	f001 fafb 	bl	8003ca8 <xTaskRemoveFromEventList>
 80026b2:	4603      	mov	r3, r0
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d012      	beq.n	80026de <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80026b8:	4b13      	ldr	r3, [pc, #76]	@ (8002708 <xQueueGenericReset+0x108>)
 80026ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	f3bf 8f4f 	dsb	sy
 80026c4:	f3bf 8f6f 	isb	sy
 80026c8:	e009      	b.n	80026de <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80026ca:	68bb      	ldr	r3, [r7, #8]
 80026cc:	3310      	adds	r3, #16
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff fee2 	bl	8002498 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	3324      	adds	r3, #36	@ 0x24
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff fedd 	bl	8002498 <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 80026de:	f002 fe5b 	bl	8005398 <vPortExitCritical>
 80026e2:	e001      	b.n	80026e8 <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 80026e4:	2300      	movs	r3, #0
 80026e6:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d104      	bne.n	80026f8 <xQueueGenericReset+0xf8>
 80026ee:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 80026f2:	4804      	ldr	r0, [pc, #16]	@ (8002704 <xQueueGenericReset+0x104>)
 80026f4:	f7fe fd1c 	bl	8001130 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 80026f8:	68fb      	ldr	r3, [r7, #12]
}
 80026fa:	4618      	mov	r0, r3
 80026fc:	3710      	adds	r7, #16
 80026fe:	46bd      	mov	sp, r7
 8002700:	bd80      	pop	{r7, pc}
 8002702:	bf00      	nop
 8002704:	080227c0 	.word	0x080227c0
 8002708:	e000ed04 	.word	0xe000ed04

0800270c <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 800270c:	b580      	push	{r7, lr}
 800270e:	b08a      	sub	sp, #40	@ 0x28
 8002710:	af02      	add	r7, sp, #8
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	4613      	mov	r3, r2
 8002718:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 800271a:	2300      	movs	r3, #0
 800271c:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d02e      	beq.n	8002782 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002724:	2100      	movs	r1, #0
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	fba3 2302 	umull	r2, r3, r3, r2
 800272e:	2b00      	cmp	r3, #0
 8002730:	d000      	beq.n	8002734 <xQueueGenericCreate+0x28>
 8002732:	2101      	movs	r1, #1
 8002734:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002736:	2b00      	cmp	r3, #0
 8002738:	d123      	bne.n	8002782 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	68ba      	ldr	r2, [r7, #8]
 800273e:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002742:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002746:	d81c      	bhi.n	8002782 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	68ba      	ldr	r2, [r7, #8]
 800274c:	fb02 f303 	mul.w	r3, r2, r3
 8002750:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002752:	69bb      	ldr	r3, [r7, #24]
 8002754:	3350      	adds	r3, #80	@ 0x50
 8002756:	4618      	mov	r0, r3
 8002758:	f002 fef4 	bl	8005544 <pvPortMalloc>
 800275c:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	2b00      	cmp	r3, #0
 8002762:	d016      	beq.n	8002792 <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002764:	69fb      	ldr	r3, [r7, #28]
 8002766:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	3350      	adds	r3, #80	@ 0x50
 800276c:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800276e:	79fa      	ldrb	r2, [r7, #7]
 8002770:	69fb      	ldr	r3, [r7, #28]
 8002772:	9300      	str	r3, [sp, #0]
 8002774:	4613      	mov	r3, r2
 8002776:	697a      	ldr	r2, [r7, #20]
 8002778:	68b9      	ldr	r1, [r7, #8]
 800277a:	68f8      	ldr	r0, [r7, #12]
 800277c:	f000 f810 	bl	80027a0 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002780:	e007      	b.n	8002792 <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002782:	69fb      	ldr	r3, [r7, #28]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d104      	bne.n	8002792 <xQueueGenericCreate+0x86>
 8002788:	f240 212a 	movw	r1, #554	@ 0x22a
 800278c:	4803      	ldr	r0, [pc, #12]	@ (800279c <xQueueGenericCreate+0x90>)
 800278e:	f7fe fccf 	bl	8001130 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8002792:	69fb      	ldr	r3, [r7, #28]
    }
 8002794:	4618      	mov	r0, r3
 8002796:	3720      	adds	r7, #32
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	080227c0 	.word	0x080227c0

080027a0 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b084      	sub	sp, #16
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 80027ae:	68bb      	ldr	r3, [r7, #8]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d103      	bne.n	80027bc <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	69ba      	ldr	r2, [r7, #24]
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	e002      	b.n	80027c2 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80027bc:	69bb      	ldr	r3, [r7, #24]
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 80027c2:	69bb      	ldr	r3, [r7, #24]
 80027c4:	68fa      	ldr	r2, [r7, #12]
 80027c6:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	68ba      	ldr	r2, [r7, #8]
 80027cc:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80027ce:	2101      	movs	r1, #1
 80027d0:	69b8      	ldr	r0, [r7, #24]
 80027d2:	f7ff ff15 	bl	8002600 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	78fa      	ldrb	r2, [r7, #3]
 80027da:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 80027de:	bf00      	nop
 80027e0:	3710      	adds	r7, #16
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd80      	pop	{r7, pc}

080027e6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 80027e6:	b580      	push	{r7, lr}
 80027e8:	b082      	sub	sp, #8
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d00e      	beq.n	8002812 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2200      	movs	r2, #0
 80027fe:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002806:	2300      	movs	r3, #0
 8002808:	2200      	movs	r2, #0
 800280a:	2100      	movs	r1, #0
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f847 	bl	80028a0 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8002812:	bf00      	nop
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 800281a:	b580      	push	{r7, lr}
 800281c:	b086      	sub	sp, #24
 800281e:	af00      	add	r7, sp, #0
 8002820:	4603      	mov	r3, r0
 8002822:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002824:	2301      	movs	r3, #1
 8002826:	617b      	str	r3, [r7, #20]
 8002828:	2300      	movs	r3, #0
 800282a:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800282c:	79fb      	ldrb	r3, [r7, #7]
 800282e:	461a      	mov	r2, r3
 8002830:	6939      	ldr	r1, [r7, #16]
 8002832:	6978      	ldr	r0, [r7, #20]
 8002834:	f7ff ff6a 	bl	800270c <xQueueGenericCreate>
 8002838:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800283a:	68f8      	ldr	r0, [r7, #12]
 800283c:	f7ff ffd3 	bl	80027e6 <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8002840:	68fb      	ldr	r3, [r7, #12]
    }
 8002842:	4618      	mov	r0, r3
 8002844:	3718      	adds	r7, #24
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}
	...

0800284c <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8002856:	2300      	movs	r3, #0
 8002858:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d010      	beq.n	8002882 <xQueueCreateCountingSemaphore+0x36>
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	429a      	cmp	r2, r3
 8002866:	d80c      	bhi.n	8002882 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002868:	2202      	movs	r2, #2
 800286a:	2100      	movs	r1, #0
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f7ff ff4d 	bl	800270c <xQueueGenericCreate>
 8002872:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2b00      	cmp	r3, #0
 8002878:	d00b      	beq.n	8002892 <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	683a      	ldr	r2, [r7, #0]
 800287e:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8002880:	e007      	b.n	8002892 <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d104      	bne.n	8002892 <xQueueCreateCountingSemaphore+0x46>
 8002888:	f240 319f 	movw	r1, #927	@ 0x39f
 800288c:	4803      	ldr	r0, [pc, #12]	@ (800289c <xQueueCreateCountingSemaphore+0x50>)
 800288e:	f7fe fc4f 	bl	8001130 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 8002892:	68fb      	ldr	r3, [r7, #12]
    }
 8002894:	4618      	mov	r0, r3
 8002896:	3710      	adds	r7, #16
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	080227c0 	.word	0x080227c0

080028a0 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b08a      	sub	sp, #40	@ 0x28
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	60f8      	str	r0, [r7, #12]
 80028a8:	60b9      	str	r1, [r7, #8]
 80028aa:	607a      	str	r2, [r7, #4]
 80028ac:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80028ae:	2300      	movs	r3, #0
 80028b0:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 80028b6:	6a3b      	ldr	r3, [r7, #32]
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d104      	bne.n	80028c6 <xQueueGenericSend+0x26>
 80028bc:	f240 31b6 	movw	r1, #950	@ 0x3b6
 80028c0:	4869      	ldr	r0, [pc, #420]	@ (8002a68 <xQueueGenericSend+0x1c8>)
 80028c2:	f7fe fc35 	bl	8001130 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028c6:	68bb      	ldr	r3, [r7, #8]
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	d103      	bne.n	80028d4 <xQueueGenericSend+0x34>
 80028cc:	6a3b      	ldr	r3, [r7, #32]
 80028ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d101      	bne.n	80028d8 <xQueueGenericSend+0x38>
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <xQueueGenericSend+0x3a>
 80028d8:	2300      	movs	r3, #0
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d104      	bne.n	80028e8 <xQueueGenericSend+0x48>
 80028de:	f240 31b7 	movw	r1, #951	@ 0x3b7
 80028e2:	4861      	ldr	r0, [pc, #388]	@ (8002a68 <xQueueGenericSend+0x1c8>)
 80028e4:	f7fe fc24 	bl	8001130 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	2b02      	cmp	r3, #2
 80028ec:	d103      	bne.n	80028f6 <xQueueGenericSend+0x56>
 80028ee:	6a3b      	ldr	r3, [r7, #32]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f2:	2b01      	cmp	r3, #1
 80028f4:	d101      	bne.n	80028fa <xQueueGenericSend+0x5a>
 80028f6:	2301      	movs	r3, #1
 80028f8:	e000      	b.n	80028fc <xQueueGenericSend+0x5c>
 80028fa:	2300      	movs	r3, #0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d104      	bne.n	800290a <xQueueGenericSend+0x6a>
 8002900:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8002904:	4858      	ldr	r0, [pc, #352]	@ (8002a68 <xQueueGenericSend+0x1c8>)
 8002906:	f7fe fc13 	bl	8001130 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800290a:	f001 fcb7 	bl	800427c <xTaskGetSchedulerState>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <xQueueGenericSend+0x7a>
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d101      	bne.n	800291e <xQueueGenericSend+0x7e>
 800291a:	2301      	movs	r3, #1
 800291c:	e000      	b.n	8002920 <xQueueGenericSend+0x80>
 800291e:	2300      	movs	r3, #0
 8002920:	2b00      	cmp	r3, #0
 8002922:	d104      	bne.n	800292e <xQueueGenericSend+0x8e>
 8002924:	f240 31bb 	movw	r1, #955	@ 0x3bb
 8002928:	484f      	ldr	r0, [pc, #316]	@ (8002a68 <xQueueGenericSend+0x1c8>)
 800292a:	f7fe fc01 	bl	8001130 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 800292e:	f002 fd07 	bl	8005340 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002932:	6a3b      	ldr	r3, [r7, #32]
 8002934:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002936:	6a3b      	ldr	r3, [r7, #32]
 8002938:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800293a:	429a      	cmp	r2, r3
 800293c:	d302      	bcc.n	8002944 <xQueueGenericSend+0xa4>
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	2b02      	cmp	r3, #2
 8002942:	d129      	bne.n	8002998 <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002944:	683a      	ldr	r2, [r7, #0]
 8002946:	68b9      	ldr	r1, [r7, #8]
 8002948:	6a38      	ldr	r0, [r7, #32]
 800294a:	f000 fabb 	bl	8002ec4 <prvCopyDataToQueue>
 800294e:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002950:	6a3b      	ldr	r3, [r7, #32]
 8002952:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002954:	2b00      	cmp	r3, #0
 8002956:	d010      	beq.n	800297a <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002958:	6a3b      	ldr	r3, [r7, #32]
 800295a:	3324      	adds	r3, #36	@ 0x24
 800295c:	4618      	mov	r0, r3
 800295e:	f001 f9a3 	bl	8003ca8 <xTaskRemoveFromEventList>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d013      	beq.n	8002990 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002968:	4b40      	ldr	r3, [pc, #256]	@ (8002a6c <xQueueGenericSend+0x1cc>)
 800296a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800296e:	601a      	str	r2, [r3, #0]
 8002970:	f3bf 8f4f 	dsb	sy
 8002974:	f3bf 8f6f 	isb	sy
 8002978:	e00a      	b.n	8002990 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d007      	beq.n	8002990 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002980:	4b3a      	ldr	r3, [pc, #232]	@ (8002a6c <xQueueGenericSend+0x1cc>)
 8002982:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002986:	601a      	str	r2, [r3, #0]
 8002988:	f3bf 8f4f 	dsb	sy
 800298c:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002990:	f002 fd02 	bl	8005398 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8002994:	2301      	movs	r3, #1
 8002996:	e063      	b.n	8002a60 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d103      	bne.n	80029a6 <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 800299e:	f002 fcfb 	bl	8005398 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e05c      	b.n	8002a60 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 80029a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d106      	bne.n	80029ba <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4618      	mov	r0, r3
 80029b2:	f001 fb23 	bl	8003ffc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80029b6:	2301      	movs	r3, #1
 80029b8:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80029ba:	f002 fced 	bl	8005398 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 80029be:	f000 fe3f 	bl	8003640 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 80029c2:	f002 fcbd 	bl	8005340 <vPortEnterCritical>
 80029c6:	6a3b      	ldr	r3, [r7, #32]
 80029c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80029cc:	b25b      	sxtb	r3, r3
 80029ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d2:	d103      	bne.n	80029dc <xQueueGenericSend+0x13c>
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	2200      	movs	r2, #0
 80029d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029dc:	6a3b      	ldr	r3, [r7, #32]
 80029de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e8:	d103      	bne.n	80029f2 <xQueueGenericSend+0x152>
 80029ea:	6a3b      	ldr	r3, [r7, #32]
 80029ec:	2200      	movs	r2, #0
 80029ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80029f2:	f002 fcd1 	bl	8005398 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80029f6:	1d3a      	adds	r2, r7, #4
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4611      	mov	r1, r2
 80029fe:	4618      	mov	r0, r3
 8002a00:	f001 fb12 	bl	8004028 <xTaskCheckForTimeOut>
 8002a04:	4603      	mov	r3, r0
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d124      	bne.n	8002a54 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002a0a:	6a38      	ldr	r0, [r7, #32]
 8002a0c:	f000 fb52 	bl	80030b4 <prvIsQueueFull>
 8002a10:	4603      	mov	r3, r0
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d018      	beq.n	8002a48 <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002a16:	6a3b      	ldr	r3, [r7, #32]
 8002a18:	3310      	adds	r3, #16
 8002a1a:	687a      	ldr	r2, [r7, #4]
 8002a1c:	4611      	mov	r1, r2
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f001 f8d6 	bl	8003bd0 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002a24:	6a38      	ldr	r0, [r7, #32]
 8002a26:	f000 fadd 	bl	8002fe4 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002a2a:	f000 fe17 	bl	800365c <xTaskResumeAll>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	f47f af7c 	bne.w	800292e <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 8002a36:	4b0d      	ldr	r3, [pc, #52]	@ (8002a6c <xQueueGenericSend+0x1cc>)
 8002a38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002a3c:	601a      	str	r2, [r3, #0]
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	f3bf 8f6f 	isb	sy
 8002a46:	e772      	b.n	800292e <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002a48:	6a38      	ldr	r0, [r7, #32]
 8002a4a:	f000 facb 	bl	8002fe4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002a4e:	f000 fe05 	bl	800365c <xTaskResumeAll>
 8002a52:	e76c      	b.n	800292e <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002a54:	6a38      	ldr	r0, [r7, #32]
 8002a56:	f000 fac5 	bl	8002fe4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002a5a:	f000 fdff 	bl	800365c <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8002a5e:	2300      	movs	r3, #0
        }
    }
}
 8002a60:	4618      	mov	r0, r3
 8002a62:	3728      	adds	r7, #40	@ 0x28
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	080227c0 	.word	0x080227c0
 8002a6c:	e000ed04 	.word	0xe000ed04

08002a70 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08a      	sub	sp, #40	@ 0x28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002a84:	6a3b      	ldr	r3, [r7, #32]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d104      	bne.n	8002a94 <xQueueReceive+0x24>
 8002a8a:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8002a8e:	485e      	ldr	r0, [pc, #376]	@ (8002c08 <xQueueReceive+0x198>)
 8002a90:	f7fe fb4e 	bl	8001130 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d103      	bne.n	8002aa2 <xQueueReceive+0x32>
 8002a9a:	6a3b      	ldr	r3, [r7, #32]
 8002a9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <xQueueReceive+0x36>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e000      	b.n	8002aa8 <xQueueReceive+0x38>
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d104      	bne.n	8002ab6 <xQueueReceive+0x46>
 8002aac:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8002ab0:	4855      	ldr	r0, [pc, #340]	@ (8002c08 <xQueueReceive+0x198>)
 8002ab2:	f7fe fb3d 	bl	8001130 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ab6:	f001 fbe1 	bl	800427c <xTaskGetSchedulerState>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <xQueueReceive+0x56>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <xQueueReceive+0x5a>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <xQueueReceive+0x5c>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d104      	bne.n	8002ada <xQueueReceive+0x6a>
 8002ad0:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8002ad4:	484c      	ldr	r0, [pc, #304]	@ (8002c08 <xQueueReceive+0x198>)
 8002ad6:	f7fe fb2b 	bl	8001130 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002ada:	f002 fc31 	bl	8005340 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ade:	6a3b      	ldr	r3, [r7, #32]
 8002ae0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ae2:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ae4:	69fb      	ldr	r3, [r7, #28]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d01f      	beq.n	8002b2a <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002aea:	68b9      	ldr	r1, [r7, #8]
 8002aec:	6a38      	ldr	r0, [r7, #32]
 8002aee:	f000 fa53 	bl	8002f98 <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002af2:	69fb      	ldr	r3, [r7, #28]
 8002af4:	1e5a      	subs	r2, r3, #1
 8002af6:	6a3b      	ldr	r3, [r7, #32]
 8002af8:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002afa:	6a3b      	ldr	r3, [r7, #32]
 8002afc:	691b      	ldr	r3, [r3, #16]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d00f      	beq.n	8002b22 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b02:	6a3b      	ldr	r3, [r7, #32]
 8002b04:	3310      	adds	r3, #16
 8002b06:	4618      	mov	r0, r3
 8002b08:	f001 f8ce 	bl	8003ca8 <xTaskRemoveFromEventList>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d007      	beq.n	8002b22 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002b12:	4b3e      	ldr	r3, [pc, #248]	@ (8002c0c <xQueueReceive+0x19c>)
 8002b14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002b18:	601a      	str	r2, [r3, #0]
 8002b1a:	f3bf 8f4f 	dsb	sy
 8002b1e:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002b22:	f002 fc39 	bl	8005398 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8002b26:	2301      	movs	r3, #1
 8002b28:	e069      	b.n	8002bfe <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d103      	bne.n	8002b38 <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002b30:	f002 fc32 	bl	8005398 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8002b34:	2300      	movs	r3, #0
 8002b36:	e062      	b.n	8002bfe <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002b38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d106      	bne.n	8002b4c <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002b3e:	f107 0314 	add.w	r3, r7, #20
 8002b42:	4618      	mov	r0, r3
 8002b44:	f001 fa5a 	bl	8003ffc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002b4c:	f002 fc24 	bl	8005398 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002b50:	f000 fd76 	bl	8003640 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002b54:	f002 fbf4 	bl	8005340 <vPortEnterCritical>
 8002b58:	6a3b      	ldr	r3, [r7, #32]
 8002b5a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002b5e:	b25b      	sxtb	r3, r3
 8002b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b64:	d103      	bne.n	8002b6e <xQueueReceive+0xfe>
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b6e:	6a3b      	ldr	r3, [r7, #32]
 8002b70:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002b74:	b25b      	sxtb	r3, r3
 8002b76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b7a:	d103      	bne.n	8002b84 <xQueueReceive+0x114>
 8002b7c:	6a3b      	ldr	r3, [r7, #32]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002b84:	f002 fc08 	bl	8005398 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002b88:	1d3a      	adds	r2, r7, #4
 8002b8a:	f107 0314 	add.w	r3, r7, #20
 8002b8e:	4611      	mov	r1, r2
 8002b90:	4618      	mov	r0, r3
 8002b92:	f001 fa49 	bl	8004028 <xTaskCheckForTimeOut>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d123      	bne.n	8002be4 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b9c:	6a38      	ldr	r0, [r7, #32]
 8002b9e:	f000 fa73 	bl	8003088 <prvIsQueueEmpty>
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d017      	beq.n	8002bd8 <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002ba8:	6a3b      	ldr	r3, [r7, #32]
 8002baa:	3324      	adds	r3, #36	@ 0x24
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	4611      	mov	r1, r2
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f001 f80d 	bl	8003bd0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002bb6:	6a38      	ldr	r0, [r7, #32]
 8002bb8:	f000 fa14 	bl	8002fe4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002bbc:	f000 fd4e 	bl	800365c <xTaskResumeAll>
 8002bc0:	4603      	mov	r3, r0
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d189      	bne.n	8002ada <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 8002bc6:	4b11      	ldr	r3, [pc, #68]	@ (8002c0c <xQueueReceive+0x19c>)
 8002bc8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	f3bf 8f4f 	dsb	sy
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	e780      	b.n	8002ada <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002bd8:	6a38      	ldr	r0, [r7, #32]
 8002bda:	f000 fa03 	bl	8002fe4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002bde:	f000 fd3d 	bl	800365c <xTaskResumeAll>
 8002be2:	e77a      	b.n	8002ada <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002be4:	6a38      	ldr	r0, [r7, #32]
 8002be6:	f000 f9fd 	bl	8002fe4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002bea:	f000 fd37 	bl	800365c <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002bee:	6a38      	ldr	r0, [r7, #32]
 8002bf0:	f000 fa4a 	bl	8003088 <prvIsQueueEmpty>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	f43f af6f 	beq.w	8002ada <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8002bfc:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002bfe:	4618      	mov	r0, r3
 8002c00:	3728      	adds	r7, #40	@ 0x28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}
 8002c06:	bf00      	nop
 8002c08:	080227c0 	.word	0x080227c0
 8002c0c:	e000ed04 	.word	0xe000ed04

08002c10 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08a      	sub	sp, #40	@ 0x28
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
 8002c18:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8002c22:	2300      	movs	r3, #0
 8002c24:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002c26:	69fb      	ldr	r3, [r7, #28]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d104      	bne.n	8002c36 <xQueueSemaphoreTake+0x26>
 8002c2c:	f240 6182 	movw	r1, #1666	@ 0x682
 8002c30:	486c      	ldr	r0, [pc, #432]	@ (8002de4 <xQueueSemaphoreTake+0x1d4>)
 8002c32:	f7fe fa7d 	bl	8001130 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 8002c36:	69fb      	ldr	r3, [r7, #28]
 8002c38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d004      	beq.n	8002c48 <xQueueSemaphoreTake+0x38>
 8002c3e:	f240 6186 	movw	r1, #1670	@ 0x686
 8002c42:	4868      	ldr	r0, [pc, #416]	@ (8002de4 <xQueueSemaphoreTake+0x1d4>)
 8002c44:	f7fe fa74 	bl	8001130 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002c48:	f001 fb18 	bl	800427c <xTaskGetSchedulerState>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d102      	bne.n	8002c58 <xQueueSemaphoreTake+0x48>
 8002c52:	683b      	ldr	r3, [r7, #0]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <xQueueSemaphoreTake+0x4c>
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e000      	b.n	8002c5e <xQueueSemaphoreTake+0x4e>
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d104      	bne.n	8002c6c <xQueueSemaphoreTake+0x5c>
 8002c62:	f240 618b 	movw	r1, #1675	@ 0x68b
 8002c66:	485f      	ldr	r0, [pc, #380]	@ (8002de4 <xQueueSemaphoreTake+0x1d4>)
 8002c68:	f7fe fa62 	bl	8001130 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002c6c:	f002 fb68 	bl	8005340 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002c74:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d024      	beq.n	8002cc6 <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	1e5a      	subs	r2, r3, #1
 8002c80:	69fb      	ldr	r3, [r7, #28]
 8002c82:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002c84:	69fb      	ldr	r3, [r7, #28]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d104      	bne.n	8002c96 <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002c8c:	f001 fd18 	bl	80046c0 <pvTaskIncrementMutexHeldCount>
 8002c90:	4602      	mov	r2, r0
 8002c92:	69fb      	ldr	r3, [r7, #28]
 8002c94:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002c96:	69fb      	ldr	r3, [r7, #28]
 8002c98:	691b      	ldr	r3, [r3, #16]
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d00f      	beq.n	8002cbe <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002c9e:	69fb      	ldr	r3, [r7, #28]
 8002ca0:	3310      	adds	r3, #16
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f001 f800 	bl	8003ca8 <xTaskRemoveFromEventList>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d007      	beq.n	8002cbe <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002cae:	4b4e      	ldr	r3, [pc, #312]	@ (8002de8 <xQueueSemaphoreTake+0x1d8>)
 8002cb0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002cb4:	601a      	str	r2, [r3, #0]
 8002cb6:	f3bf 8f4f 	dsb	sy
 8002cba:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002cbe:	f002 fb6b 	bl	8005398 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e089      	b.n	8002dda <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d103      	bne.n	8002cd4 <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 8002ccc:	f002 fb64 	bl	8005398 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	e082      	b.n	8002dda <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002cd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d106      	bne.n	8002ce8 <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002cda:	f107 030c 	add.w	r3, r7, #12
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f001 f98c 	bl	8003ffc <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002ce8:	f002 fb56 	bl	8005398 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002cec:	f000 fca8 	bl	8003640 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002cf0:	f002 fb26 	bl	8005340 <vPortEnterCritical>
 8002cf4:	69fb      	ldr	r3, [r7, #28]
 8002cf6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002cfa:	b25b      	sxtb	r3, r3
 8002cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d00:	d103      	bne.n	8002d0a <xQueueSemaphoreTake+0xfa>
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002d10:	b25b      	sxtb	r3, r3
 8002d12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d16:	d103      	bne.n	8002d20 <xQueueSemaphoreTake+0x110>
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002d20:	f002 fb3a 	bl	8005398 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002d24:	463a      	mov	r2, r7
 8002d26:	f107 030c 	add.w	r3, r7, #12
 8002d2a:	4611      	mov	r1, r2
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f001 f97b 	bl	8004028 <xTaskCheckForTimeOut>
 8002d32:	4603      	mov	r3, r0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d132      	bne.n	8002d9e <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002d38:	69f8      	ldr	r0, [r7, #28]
 8002d3a:	f000 f9a5 	bl	8003088 <prvIsQueueEmpty>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d026      	beq.n	8002d92 <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d109      	bne.n	8002d60 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 8002d4c:	f002 faf8 	bl	8005340 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	689b      	ldr	r3, [r3, #8]
 8002d54:	4618      	mov	r0, r3
 8002d56:	f001 faaf 	bl	80042b8 <xTaskPriorityInherit>
 8002d5a:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8002d5c:	f002 fb1c 	bl	8005398 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	3324      	adds	r3, #36	@ 0x24
 8002d64:	683a      	ldr	r2, [r7, #0]
 8002d66:	4611      	mov	r1, r2
 8002d68:	4618      	mov	r0, r3
 8002d6a:	f000 ff31 	bl	8003bd0 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002d6e:	69f8      	ldr	r0, [r7, #28]
 8002d70:	f000 f938 	bl	8002fe4 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002d74:	f000 fc72 	bl	800365c <xTaskResumeAll>
 8002d78:	4603      	mov	r3, r0
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	f47f af76 	bne.w	8002c6c <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 8002d80:	4b19      	ldr	r3, [pc, #100]	@ (8002de8 <xQueueSemaphoreTake+0x1d8>)
 8002d82:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d86:	601a      	str	r2, [r3, #0]
 8002d88:	f3bf 8f4f 	dsb	sy
 8002d8c:	f3bf 8f6f 	isb	sy
 8002d90:	e76c      	b.n	8002c6c <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 8002d92:	69f8      	ldr	r0, [r7, #28]
 8002d94:	f000 f926 	bl	8002fe4 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002d98:	f000 fc60 	bl	800365c <xTaskResumeAll>
 8002d9c:	e766      	b.n	8002c6c <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 8002d9e:	69f8      	ldr	r0, [r7, #28]
 8002da0:	f000 f920 	bl	8002fe4 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002da4:	f000 fc5a 	bl	800365c <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002da8:	69f8      	ldr	r0, [r7, #28]
 8002daa:	f000 f96d 	bl	8003088 <prvIsQueueEmpty>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	f43f af5b 	beq.w	8002c6c <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 8002db6:	6a3b      	ldr	r3, [r7, #32]
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d00d      	beq.n	8002dd8 <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 8002dbc:	f002 fac0 	bl	8005340 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002dc0:	69f8      	ldr	r0, [r7, #28]
 8002dc2:	f000 f867 	bl	8002e94 <prvGetDisinheritPriorityAfterTimeout>
 8002dc6:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002dc8:	69fb      	ldr	r3, [r7, #28]
 8002dca:	689b      	ldr	r3, [r3, #8]
 8002dcc:	6979      	ldr	r1, [r7, #20]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f001 fbae 	bl	8004530 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 8002dd4:	f002 fae0 	bl	8005398 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8002dd8:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3728      	adds	r7, #40	@ 0x28
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	080227c0 	.word	0x080227c0
 8002de8:	e000ed04 	.word	0xe000ed04

08002dec <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d104      	bne.n	8002e04 <uxQueueMessagesWaiting+0x18>
 8002dfa:	f640 019b 	movw	r1, #2203	@ 0x89b
 8002dfe:	4807      	ldr	r0, [pc, #28]	@ (8002e1c <uxQueueMessagesWaiting+0x30>)
 8002e00:	f7fe f996 	bl	8001130 <vAssertCalled>

    taskENTER_CRITICAL();
 8002e04:	f002 fa9c 	bl	8005340 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e0c:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8002e0e:	f002 fac3 	bl	8005398 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8002e12:	68fb      	ldr	r3, [r7, #12]
}
 8002e14:	4618      	mov	r0, r3
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	080227c0 	.word	0x080227c0

08002e20 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b084      	sub	sp, #16
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d104      	bne.n	8002e3c <uxQueueSpacesAvailable+0x1c>
 8002e32:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 8002e36:	4809      	ldr	r0, [pc, #36]	@ (8002e5c <uxQueueSpacesAvailable+0x3c>)
 8002e38:	f7fe f97a 	bl	8001130 <vAssertCalled>

    taskENTER_CRITICAL();
 8002e3c:	f002 fa80 	bl	8005340 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e48:	1ad3      	subs	r3, r2, r3
 8002e4a:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 8002e4c:	f002 faa4 	bl	8005398 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 8002e50:	68bb      	ldr	r3, [r7, #8]
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3710      	adds	r7, #16
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	080227c0 	.word	0x080227c0

08002e60 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d104      	bne.n	8002e7c <vQueueDelete+0x1c>
 8002e72:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 8002e76:	4806      	ldr	r0, [pc, #24]	@ (8002e90 <vQueueDelete+0x30>)
 8002e78:	f7fe f95a 	bl	8001130 <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8002e7c:	68f8      	ldr	r0, [r7, #12]
 8002e7e:	f000 f979 	bl	8003174 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 8002e82:	68f8      	ldr	r0, [r7, #12]
 8002e84:	f002 fc32 	bl	80056ec <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 8002e88:	bf00      	nop
 8002e8a:	3710      	adds	r7, #16
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bd80      	pop	{r7, pc}
 8002e90:	080227c0 	.word	0x080227c0

08002e94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 8002e94:	b480      	push	{r7}
 8002e96:	b085      	sub	sp, #20
 8002e98:	af00      	add	r7, sp, #0
 8002e9a:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d006      	beq.n	8002eb2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f1c3 0307 	rsb	r3, r3, #7
 8002eae:	60fb      	str	r3, [r7, #12]
 8002eb0:	e001      	b.n	8002eb6 <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 8002eb6:	68fb      	ldr	r3, [r7, #12]
    }
 8002eb8:	4618      	mov	r0, r3
 8002eba:	3714      	adds	r7, #20
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec2:	4770      	bx	lr

08002ec4 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 8002ec4:	b580      	push	{r7, lr}
 8002ec6:	b086      	sub	sp, #24
 8002ec8:	af00      	add	r7, sp, #0
 8002eca:	60f8      	str	r0, [r7, #12]
 8002ecc:	60b9      	str	r1, [r7, #8]
 8002ece:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8002ed0:	2300      	movs	r3, #0
 8002ed2:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ed8:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d10d      	bne.n	8002efe <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d14d      	bne.n	8002f86 <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	689b      	ldr	r3, [r3, #8]
 8002eee:	4618      	mov	r0, r3
 8002ef0:	f001 fa82 	bl	80043f8 <xTaskPriorityDisinherit>
 8002ef4:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	609a      	str	r2, [r3, #8]
 8002efc:	e043      	b.n	8002f86 <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d119      	bne.n	8002f38 <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6858      	ldr	r0, [r3, #4]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f0c:	461a      	mov	r2, r3
 8002f0e:	68b9      	ldr	r1, [r7, #8]
 8002f10:	f01d fd58 	bl	80209c4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685a      	ldr	r2, [r3, #4]
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f1c:	441a      	add	r2, r3
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	685a      	ldr	r2, [r3, #4]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	429a      	cmp	r2, r3
 8002f2c:	d32b      	bcc.n	8002f86 <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681a      	ldr	r2, [r3, #0]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	605a      	str	r2, [r3, #4]
 8002f36:	e026      	b.n	8002f86 <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	68d8      	ldr	r0, [r3, #12]
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f40:	461a      	mov	r2, r3
 8002f42:	68b9      	ldr	r1, [r7, #8]
 8002f44:	f01d fd3e 	bl	80209c4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	68da      	ldr	r2, [r3, #12]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f50:	425b      	negs	r3, r3
 8002f52:	441a      	add	r2, r3
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	68da      	ldr	r2, [r3, #12]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	429a      	cmp	r2, r3
 8002f62:	d207      	bcs.n	8002f74 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	689a      	ldr	r2, [r3, #8]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f6c:	425b      	negs	r3, r3
 8002f6e:	441a      	add	r2, r3
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d105      	bne.n	8002f86 <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f7a:	693b      	ldr	r3, [r7, #16]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d002      	beq.n	8002f86 <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 8002f86:	693b      	ldr	r3, [r7, #16]
 8002f88:	1c5a      	adds	r2, r3, #1
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 8002f8e:	697b      	ldr	r3, [r7, #20]
}
 8002f90:	4618      	mov	r0, r3
 8002f92:	3718      	adds	r7, #24
 8002f94:	46bd      	mov	sp, r7
 8002f96:	bd80      	pop	{r7, pc}

08002f98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 8002f98:	b580      	push	{r7, lr}
 8002f9a:	b082      	sub	sp, #8
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
 8002fa0:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d018      	beq.n	8002fdc <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	68da      	ldr	r2, [r3, #12]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fb2:	441a      	add	r2, r3
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	68da      	ldr	r2, [r3, #12]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	689b      	ldr	r3, [r3, #8]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d303      	bcc.n	8002fcc <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681a      	ldr	r2, [r3, #0]
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	68d9      	ldr	r1, [r3, #12]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fd4:	461a      	mov	r2, r3
 8002fd6:	6838      	ldr	r0, [r7, #0]
 8002fd8:	f01d fcf4 	bl	80209c4 <memcpy>
    }
}
 8002fdc:	bf00      	nop
 8002fde:	3708      	adds	r7, #8
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b084      	sub	sp, #16
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8002fec:	f002 f9a8 	bl	8005340 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002ff6:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8002ff8:	e011      	b.n	800301e <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d012      	beq.n	8003028 <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	3324      	adds	r3, #36	@ 0x24
 8003006:	4618      	mov	r0, r3
 8003008:	f000 fe4e 	bl	8003ca8 <xTaskRemoveFromEventList>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003012:	f001 f865 	bl	80040e0 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 8003016:	7bfb      	ldrb	r3, [r7, #15]
 8003018:	3b01      	subs	r3, #1
 800301a:	b2db      	uxtb	r3, r3
 800301c:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800301e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003022:	2b00      	cmp	r3, #0
 8003024:	dce9      	bgt.n	8002ffa <prvUnlockQueue+0x16>
 8003026:	e000      	b.n	800302a <prvUnlockQueue+0x46>
                    break;
 8003028:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	22ff      	movs	r2, #255	@ 0xff
 800302e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003032:	f002 f9b1 	bl	8005398 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 8003036:	f002 f983 	bl	8005340 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003040:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003042:	e011      	b.n	8003068 <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	691b      	ldr	r3, [r3, #16]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d012      	beq.n	8003072 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3310      	adds	r3, #16
 8003050:	4618      	mov	r0, r3
 8003052:	f000 fe29 	bl	8003ca8 <xTaskRemoveFromEventList>
 8003056:	4603      	mov	r3, r0
 8003058:	2b00      	cmp	r3, #0
 800305a:	d001      	beq.n	8003060 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 800305c:	f001 f840 	bl	80040e0 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003060:	7bbb      	ldrb	r3, [r7, #14]
 8003062:	3b01      	subs	r3, #1
 8003064:	b2db      	uxtb	r3, r3
 8003066:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003068:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800306c:	2b00      	cmp	r3, #0
 800306e:	dce9      	bgt.n	8003044 <prvUnlockQueue+0x60>
 8003070:	e000      	b.n	8003074 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003072:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	22ff      	movs	r2, #255	@ 0xff
 8003078:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 800307c:	f002 f98c 	bl	8005398 <vPortExitCritical>
}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}

08003088 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b084      	sub	sp, #16
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003090:	f002 f956 	bl	8005340 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003098:	2b00      	cmp	r3, #0
 800309a:	d102      	bne.n	80030a2 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 800309c:	2301      	movs	r3, #1
 800309e:	60fb      	str	r3, [r7, #12]
 80030a0:	e001      	b.n	80030a6 <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80030a6:	f002 f977 	bl	8005398 <vPortExitCritical>

    return xReturn;
 80030aa:	68fb      	ldr	r3, [r7, #12]
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b084      	sub	sp, #16
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80030bc:	f002 f940 	bl	8005340 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d102      	bne.n	80030d2 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80030cc:	2301      	movs	r3, #1
 80030ce:	60fb      	str	r3, [r7, #12]
 80030d0:	e001      	b.n	80030d6 <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80030d6:	f002 f95f 	bl	8005398 <vPortExitCritical>

    return xReturn;
 80030da:	68fb      	ldr	r3, [r7, #12]
}
 80030dc:	4618      	mov	r0, r3
 80030de:	3710      	adds	r7, #16
 80030e0:	46bd      	mov	sp, r7
 80030e2:	bd80      	pop	{r7, pc}

080030e4 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b084      	sub	sp, #16
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
 80030ec:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 80030ee:	2300      	movs	r3, #0
 80030f0:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d104      	bne.n	8003102 <vQueueAddToRegistry+0x1e>
 80030f8:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 80030fc:	481b      	ldr	r0, [pc, #108]	@ (800316c <vQueueAddToRegistry+0x88>)
 80030fe:	f7fe f817 	bl	8001130 <vAssertCalled>

        if( pcQueueName != NULL )
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d024      	beq.n	8003152 <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003108:	2300      	movs	r3, #0
 800310a:	60fb      	str	r3, [r7, #12]
 800310c:	e01e      	b.n	800314c <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 800310e:	4a18      	ldr	r2, [pc, #96]	@ (8003170 <vQueueAddToRegistry+0x8c>)
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	00db      	lsls	r3, r3, #3
 8003114:	4413      	add	r3, r2
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	687a      	ldr	r2, [r7, #4]
 800311a:	429a      	cmp	r2, r3
 800311c:	d105      	bne.n	800312a <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4a13      	ldr	r2, [pc, #76]	@ (8003170 <vQueueAddToRegistry+0x8c>)
 8003124:	4413      	add	r3, r2
 8003126:	60bb      	str	r3, [r7, #8]
                    break;
 8003128:	e013      	b.n	8003152 <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d10a      	bne.n	8003146 <vQueueAddToRegistry+0x62>
 8003130:	4a0f      	ldr	r2, [pc, #60]	@ (8003170 <vQueueAddToRegistry+0x8c>)
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d104      	bne.n	8003146 <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	00db      	lsls	r3, r3, #3
 8003140:	4a0b      	ldr	r2, [pc, #44]	@ (8003170 <vQueueAddToRegistry+0x8c>)
 8003142:	4413      	add	r3, r2
 8003144:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	3301      	adds	r3, #1
 800314a:	60fb      	str	r3, [r7, #12]
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	2b07      	cmp	r3, #7
 8003150:	d9dd      	bls.n	800310e <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d005      	beq.n	8003164 <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 8003158:	68bb      	ldr	r3, [r7, #8]
 800315a:	683a      	ldr	r2, [r7, #0]
 800315c:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 800315e:	68bb      	ldr	r3, [r7, #8]
 8003160:	687a      	ldr	r2, [r7, #4]
 8003162:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	080227c0 	.word	0x080227c0
 8003170:	20000a74 	.word	0x20000a74

08003174 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	2b00      	cmp	r3, #0
 8003180:	d104      	bne.n	800318c <vQueueUnregisterQueue+0x18>
 8003182:	f640 411d 	movw	r1, #3101	@ 0xc1d
 8003186:	4812      	ldr	r0, [pc, #72]	@ (80031d0 <vQueueUnregisterQueue+0x5c>)
 8003188:	f7fd ffd2 	bl	8001130 <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800318c:	2300      	movs	r3, #0
 800318e:	60fb      	str	r3, [r7, #12]
 8003190:	e016      	b.n	80031c0 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003192:	4a10      	ldr	r2, [pc, #64]	@ (80031d4 <vQueueUnregisterQueue+0x60>)
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	00db      	lsls	r3, r3, #3
 8003198:	4413      	add	r3, r2
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	687a      	ldr	r2, [r7, #4]
 800319e:	429a      	cmp	r2, r3
 80031a0:	d10b      	bne.n	80031ba <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 80031a2:	4a0c      	ldr	r2, [pc, #48]	@ (80031d4 <vQueueUnregisterQueue+0x60>)
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	2100      	movs	r1, #0
 80031a8:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80031ac:	4a09      	ldr	r2, [pc, #36]	@ (80031d4 <vQueueUnregisterQueue+0x60>)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	00db      	lsls	r3, r3, #3
 80031b2:	4413      	add	r3, r2
 80031b4:	2200      	movs	r2, #0
 80031b6:	605a      	str	r2, [r3, #4]
                break;
 80031b8:	e006      	b.n	80031c8 <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	3301      	adds	r3, #1
 80031be:	60fb      	str	r3, [r7, #12]
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2b07      	cmp	r3, #7
 80031c4:	d9e5      	bls.n	8003192 <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 80031c6:	bf00      	nop
 80031c8:	bf00      	nop
 80031ca:	3710      	adds	r7, #16
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}
 80031d0:	080227c0 	.word	0x080227c0
 80031d4:	20000a74 	.word	0x20000a74

080031d8 <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80031d8:	b580      	push	{r7, lr}
 80031da:	b08a      	sub	sp, #40	@ 0x28
 80031dc:	af04      	add	r7, sp, #16
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	607a      	str	r2, [r7, #4]
 80031e4:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	009b      	lsls	r3, r3, #2
 80031ea:	4618      	mov	r0, r3
 80031ec:	f002 f9aa 	bl	8005544 <pvPortMalloc>
 80031f0:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d013      	beq.n	8003220 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 80031f8:	206c      	movs	r0, #108	@ 0x6c
 80031fa:	f002 f9a3 	bl	8005544 <pvPortMalloc>
 80031fe:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003200:	697b      	ldr	r3, [r7, #20]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d008      	beq.n	8003218 <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 8003206:	226c      	movs	r2, #108	@ 0x6c
 8003208:	2100      	movs	r1, #0
 800320a:	6978      	ldr	r0, [r7, #20]
 800320c:	f01d fce7 	bl	8020bde <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003210:	697b      	ldr	r3, [r7, #20]
 8003212:	693a      	ldr	r2, [r7, #16]
 8003214:	631a      	str	r2, [r3, #48]	@ 0x30
 8003216:	e005      	b.n	8003224 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 8003218:	6938      	ldr	r0, [r7, #16]
 800321a:	f002 fa67 	bl	80056ec <vPortFree>
 800321e:	e001      	b.n	8003224 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003220:	2300      	movs	r3, #0
 8003222:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00d      	beq.n	8003246 <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800322a:	2300      	movs	r3, #0
 800322c:	9303      	str	r3, [sp, #12]
 800322e:	697b      	ldr	r3, [r7, #20]
 8003230:	9302      	str	r3, [sp, #8]
 8003232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003234:	9301      	str	r3, [sp, #4]
 8003236:	6a3b      	ldr	r3, [r7, #32]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	687a      	ldr	r2, [r7, #4]
 800323e:	68b9      	ldr	r1, [r7, #8]
 8003240:	68f8      	ldr	r0, [r7, #12]
 8003242:	f000 f829 	bl	8003298 <prvInitialiseNewTask>
        }

        return pxNewTCB;
 8003246:	697b      	ldr	r3, [r7, #20]
    }
 8003248:	4618      	mov	r0, r3
 800324a:	3718      	adds	r7, #24
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003250:	b580      	push	{r7, lr}
 8003252:	b088      	sub	sp, #32
 8003254:	af02      	add	r7, sp, #8
 8003256:	60f8      	str	r0, [r7, #12]
 8003258:	60b9      	str	r1, [r7, #8]
 800325a:	607a      	str	r2, [r7, #4]
 800325c:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 800325e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003260:	9301      	str	r3, [sp, #4]
 8003262:	6a3b      	ldr	r3, [r7, #32]
 8003264:	9300      	str	r3, [sp, #0]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	687a      	ldr	r2, [r7, #4]
 800326a:	68b9      	ldr	r1, [r7, #8]
 800326c:	68f8      	ldr	r0, [r7, #12]
 800326e:	f7ff ffb3 	bl	80031d8 <prvCreateTask>
 8003272:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	2b00      	cmp	r3, #0
 8003278:	d005      	beq.n	8003286 <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800327a:	6938      	ldr	r0, [r7, #16]
 800327c:	f000 f890 	bl	80033a0 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003280:	2301      	movs	r3, #1
 8003282:	617b      	str	r3, [r7, #20]
 8003284:	e002      	b.n	800328c <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003286:	f04f 33ff 	mov.w	r3, #4294967295
 800328a:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 800328c:	697b      	ldr	r3, [r7, #20]
    }
 800328e:	4618      	mov	r0, r3
 8003290:	3718      	adds	r7, #24
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}
	...

08003298 <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b086      	sub	sp, #24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
 80032a4:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80032a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032a8:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	009b      	lsls	r3, r3, #2
 80032ae:	461a      	mov	r2, r3
 80032b0:	21a5      	movs	r1, #165	@ 0xa5
 80032b2:	f01d fc94 	bl	8020bde <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80032b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80032b8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80032c0:	440b      	add	r3, r1
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	4413      	add	r3, r2
 80032c6:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80032c8:	693b      	ldr	r3, [r7, #16]
 80032ca:	f023 0307 	bic.w	r3, r3, #7
 80032ce:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80032d0:	693b      	ldr	r3, [r7, #16]
 80032d2:	f003 0307 	and.w	r3, r3, #7
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d004      	beq.n	80032e4 <prvInitialiseNewTask+0x4c>
 80032da:	f240 712e 	movw	r1, #1838	@ 0x72e
 80032de:	482f      	ldr	r0, [pc, #188]	@ (800339c <prvInitialiseNewTask+0x104>)
 80032e0:	f7fd ff26 	bl	8001130 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d01e      	beq.n	8003328 <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80032ea:	2300      	movs	r3, #0
 80032ec:	617b      	str	r3, [r7, #20]
 80032ee:	e012      	b.n	8003316 <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80032f0:	68ba      	ldr	r2, [r7, #8]
 80032f2:	697b      	ldr	r3, [r7, #20]
 80032f4:	4413      	add	r3, r2
 80032f6:	7819      	ldrb	r1, [r3, #0]
 80032f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	4413      	add	r3, r2
 80032fe:	3334      	adds	r3, #52	@ 0x34
 8003300:	460a      	mov	r2, r1
 8003302:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	4413      	add	r3, r2
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d006      	beq.n	800331e <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	3301      	adds	r3, #1
 8003314:	617b      	str	r3, [r7, #20]
 8003316:	697b      	ldr	r3, [r7, #20]
 8003318:	2b0f      	cmp	r3, #15
 800331a:	d9e9      	bls.n	80032f0 <prvInitialiseNewTask+0x58>
 800331c:	e000      	b.n	8003320 <prvInitialiseNewTask+0x88>
            {
                break;
 800331e:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003322:	2200      	movs	r2, #0
 8003324:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 8003328:	6a3b      	ldr	r3, [r7, #32]
 800332a:	2b06      	cmp	r3, #6
 800332c:	d904      	bls.n	8003338 <prvInitialiseNewTask+0xa0>
 800332e:	f240 7164 	movw	r1, #1892	@ 0x764
 8003332:	481a      	ldr	r0, [pc, #104]	@ (800339c <prvInitialiseNewTask+0x104>)
 8003334:	f7fd fefc 	bl	8001130 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	2b06      	cmp	r3, #6
 800333c:	d901      	bls.n	8003342 <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800333e:	2306      	movs	r3, #6
 8003340:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003342:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003344:	6a3a      	ldr	r2, [r7, #32]
 8003346:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 8003348:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800334a:	6a3a      	ldr	r2, [r7, #32]
 800334c:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800334e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003350:	3304      	adds	r3, #4
 8003352:	4618      	mov	r0, r3
 8003354:	f7ff f8c0 	bl	80024d8 <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003358:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800335a:	3318      	adds	r3, #24
 800335c:	4618      	mov	r0, r3
 800335e:	f7ff f8bb 	bl	80024d8 <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003364:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003366:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 8003368:	6a3b      	ldr	r3, [r7, #32]
 800336a:	f1c3 0207 	rsb	r2, r3, #7
 800336e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003370:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003372:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003374:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003376:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	68f9      	ldr	r1, [r7, #12]
 800337c:	6938      	ldr	r0, [r7, #16]
 800337e:	f001 fea5 	bl	80050cc <pxPortInitialiseStack>
 8003382:	4602      	mov	r2, r0
 8003384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003386:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 8003388:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800338a:	2b00      	cmp	r3, #0
 800338c:	d002      	beq.n	8003394 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800338e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003390:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8003392:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8003394:	bf00      	nop
 8003396:	3718      	adds	r7, #24
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	080227e4 	.word	0x080227e4

080033a0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80033a8:	f001 ffca 	bl	8005340 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80033ac:	4b41      	ldr	r3, [pc, #260]	@ (80034b4 <prvAddNewTaskToReadyList+0x114>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	3301      	adds	r3, #1
 80033b2:	4a40      	ldr	r2, [pc, #256]	@ (80034b4 <prvAddNewTaskToReadyList+0x114>)
 80033b4:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80033b6:	4b40      	ldr	r3, [pc, #256]	@ (80034b8 <prvAddNewTaskToReadyList+0x118>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d109      	bne.n	80033d2 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80033be:	4a3e      	ldr	r2, [pc, #248]	@ (80034b8 <prvAddNewTaskToReadyList+0x118>)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80033c4:	4b3b      	ldr	r3, [pc, #236]	@ (80034b4 <prvAddNewTaskToReadyList+0x114>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	2b01      	cmp	r3, #1
 80033ca:	d110      	bne.n	80033ee <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80033cc:	f000 feac 	bl	8004128 <prvInitialiseTaskLists>
 80033d0:	e00d      	b.n	80033ee <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80033d2:	4b3a      	ldr	r3, [pc, #232]	@ (80034bc <prvAddNewTaskToReadyList+0x11c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80033da:	4b37      	ldr	r3, [pc, #220]	@ (80034b8 <prvAddNewTaskToReadyList+0x118>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d802      	bhi.n	80033ee <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80033e8:	4a33      	ldr	r2, [pc, #204]	@ (80034b8 <prvAddNewTaskToReadyList+0x118>)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 80033ee:	4b34      	ldr	r3, [pc, #208]	@ (80034c0 <prvAddNewTaskToReadyList+0x120>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	3301      	adds	r3, #1
 80033f4:	4a32      	ldr	r2, [pc, #200]	@ (80034c0 <prvAddNewTaskToReadyList+0x120>)
 80033f6:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 80033f8:	4b31      	ldr	r3, [pc, #196]	@ (80034c0 <prvAddNewTaskToReadyList+0x120>)
 80033fa:	681a      	ldr	r2, [r3, #0]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003404:	2201      	movs	r2, #1
 8003406:	409a      	lsls	r2, r3
 8003408:	4b2e      	ldr	r3, [pc, #184]	@ (80034c4 <prvAddNewTaskToReadyList+0x124>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4313      	orrs	r3, r2
 800340e:	4a2d      	ldr	r2, [pc, #180]	@ (80034c4 <prvAddNewTaskToReadyList+0x124>)
 8003410:	6013      	str	r3, [r2, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003416:	492c      	ldr	r1, [pc, #176]	@ (80034c8 <prvAddNewTaskToReadyList+0x128>)
 8003418:	4613      	mov	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	4413      	add	r3, r2
 800341e:	009b      	lsls	r3, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	3304      	adds	r3, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	60fb      	str	r3, [r7, #12]
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	68fa      	ldr	r2, [r7, #12]
 800342c:	609a      	str	r2, [r3, #8]
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	689a      	ldr	r2, [r3, #8]
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	60da      	str	r2, [r3, #12]
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	687a      	ldr	r2, [r7, #4]
 800343c:	3204      	adds	r2, #4
 800343e:	605a      	str	r2, [r3, #4]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	1d1a      	adds	r2, r3, #4
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800344c:	4613      	mov	r3, r2
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	4a1c      	ldr	r2, [pc, #112]	@ (80034c8 <prvAddNewTaskToReadyList+0x128>)
 8003456:	441a      	add	r2, r3
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	615a      	str	r2, [r3, #20]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003460:	4919      	ldr	r1, [pc, #100]	@ (80034c8 <prvAddNewTaskToReadyList+0x128>)
 8003462:	4613      	mov	r3, r2
 8003464:	009b      	lsls	r3, r3, #2
 8003466:	4413      	add	r3, r2
 8003468:	009b      	lsls	r3, r3, #2
 800346a:	440b      	add	r3, r1
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	687a      	ldr	r2, [r7, #4]
 8003470:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003472:	1c59      	adds	r1, r3, #1
 8003474:	4814      	ldr	r0, [pc, #80]	@ (80034c8 <prvAddNewTaskToReadyList+0x128>)
 8003476:	4613      	mov	r3, r2
 8003478:	009b      	lsls	r3, r3, #2
 800347a:	4413      	add	r3, r2
 800347c:	009b      	lsls	r3, r3, #2
 800347e:	4403      	add	r3, r0
 8003480:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003482:	f001 ff89 	bl	8005398 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 8003486:	4b0d      	ldr	r3, [pc, #52]	@ (80034bc <prvAddNewTaskToReadyList+0x11c>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00e      	beq.n	80034ac <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 800348e:	4b0a      	ldr	r3, [pc, #40]	@ (80034b8 <prvAddNewTaskToReadyList+0x118>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003498:	429a      	cmp	r2, r3
 800349a:	d207      	bcs.n	80034ac <prvAddNewTaskToReadyList+0x10c>
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <prvAddNewTaskToReadyList+0x12c>)
 800349e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80034a2:	601a      	str	r2, [r3, #0]
 80034a4:	f3bf 8f4f 	dsb	sy
 80034a8:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80034ac:	bf00      	nop
 80034ae:	3710      	adds	r7, #16
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bd80      	pop	{r7, pc}
 80034b4:	20000bb4 	.word	0x20000bb4
 80034b8:	20000ab4 	.word	0x20000ab4
 80034bc:	20000bc0 	.word	0x20000bc0
 80034c0:	20000bd0 	.word	0x20000bd0
 80034c4:	20000bbc 	.word	0x20000bbc
 80034c8:	20000ab8 	.word	0x20000ab8
 80034cc:	e000ed04 	.word	0xe000ed04

080034d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b084      	sub	sp, #16
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80034d8:	2300      	movs	r3, #0
 80034da:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d011      	beq.n	8003506 <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 80034e2:	f000 f8ad 	bl	8003640 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80034e6:	4b0f      	ldr	r3, [pc, #60]	@ (8003524 <vTaskDelay+0x54>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	2b01      	cmp	r3, #1
 80034ec:	d004      	beq.n	80034f8 <vTaskDelay+0x28>
 80034ee:	f640 118e 	movw	r1, #2446	@ 0x98e
 80034f2:	480d      	ldr	r0, [pc, #52]	@ (8003528 <vTaskDelay+0x58>)
 80034f4:	f7fd fe1c 	bl	8001130 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80034f8:	2100      	movs	r1, #0
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f001 fd64 	bl	8004fc8 <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003500:	f000 f8ac 	bl	800365c <xTaskResumeAll>
 8003504:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d107      	bne.n	800351c <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 800350c:	4b07      	ldr	r3, [pc, #28]	@ (800352c <vTaskDelay+0x5c>)
 800350e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003512:	601a      	str	r2, [r3, #0]
 8003514:	f3bf 8f4f 	dsb	sy
 8003518:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 800351c:	bf00      	nop
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	20000bdc 	.word	0x20000bdc
 8003528:	080227e4 	.word	0x080227e4
 800352c:	e000ed04 	.word	0xe000ed04

08003530 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	@ 0x28
 8003534:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 8003536:	2301      	movs	r3, #1
 8003538:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800353a:	2300      	movs	r3, #0
 800353c:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 800353e:	2300      	movs	r3, #0
 8003540:	617b      	str	r3, [r7, #20]
 8003542:	e011      	b.n	8003568 <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003544:	4a1d      	ldr	r2, [pc, #116]	@ (80035bc <prvCreateIdleTasks+0x8c>)
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	4413      	add	r3, r2
 800354a:	7819      	ldrb	r1, [r3, #0]
 800354c:	463a      	mov	r2, r7
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	4413      	add	r3, r2
 8003552:	460a      	mov	r2, r1
 8003554:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 8003556:	463a      	mov	r2, r7
 8003558:	697b      	ldr	r3, [r7, #20]
 800355a:	4413      	add	r3, r2
 800355c:	781b      	ldrb	r3, [r3, #0]
 800355e:	2b00      	cmp	r3, #0
 8003560:	d006      	beq.n	8003570 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	3301      	adds	r3, #1
 8003566:	617b      	str	r3, [r7, #20]
 8003568:	697b      	ldr	r3, [r7, #20]
 800356a:	2b0f      	cmp	r3, #15
 800356c:	ddea      	ble.n	8003544 <prvCreateIdleTasks+0x14>
 800356e:	e000      	b.n	8003572 <prvCreateIdleTasks+0x42>
        {
            break;
 8003570:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003572:	2300      	movs	r3, #0
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	e016      	b.n	80035a6 <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 8003578:	4b11      	ldr	r3, [pc, #68]	@ (80035c0 <prvCreateIdleTasks+0x90>)
 800357a:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	009b      	lsls	r3, r3, #2
 8003580:	4a10      	ldr	r2, [pc, #64]	@ (80035c4 <prvCreateIdleTasks+0x94>)
 8003582:	4413      	add	r3, r2
 8003584:	4639      	mov	r1, r7
 8003586:	9301      	str	r3, [sp, #4]
 8003588:	2300      	movs	r3, #0
 800358a:	9300      	str	r3, [sp, #0]
 800358c:	2300      	movs	r3, #0
 800358e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003592:	6938      	ldr	r0, [r7, #16]
 8003594:	f7ff fe5c 	bl	8003250 <xTaskCreate>
 8003598:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 800359a:	69fb      	ldr	r3, [r7, #28]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d006      	beq.n	80035ae <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80035a0:	69bb      	ldr	r3, [r7, #24]
 80035a2:	3301      	adds	r3, #1
 80035a4:	61bb      	str	r3, [r7, #24]
 80035a6:	69bb      	ldr	r3, [r7, #24]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	dde5      	ble.n	8003578 <prvCreateIdleTasks+0x48>
 80035ac:	e000      	b.n	80035b0 <prvCreateIdleTasks+0x80>
        {
            break;
 80035ae:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80035b0:	69fb      	ldr	r3, [r7, #28]
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3720      	adds	r7, #32
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	08022808 	.word	0x08022808
 80035c0:	080040f9 	.word	0x080040f9
 80035c4:	20000bd8 	.word	0x20000bd8

080035c8 <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80035ce:	f7ff ffaf 	bl	8003530 <prvCreateIdleTasks>
 80035d2:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d118      	bne.n	800360c <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80035da:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80035de:	b672      	cpsid	i
 80035e0:	f383 8811 	msr	BASEPRI, r3
 80035e4:	f3bf 8f6f 	isb	sy
 80035e8:	f3bf 8f4f 	dsb	sy
 80035ec:	b662      	cpsie	i
 80035ee:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 80035f0:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 80035f2:	4b0e      	ldr	r3, [pc, #56]	@ (800362c <vTaskStartScheduler+0x64>)
 80035f4:	f04f 32ff 	mov.w	r2, #4294967295
 80035f8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80035fa:	4b0d      	ldr	r3, [pc, #52]	@ (8003630 <vTaskStartScheduler+0x68>)
 80035fc:	2201      	movs	r2, #1
 80035fe:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003600:	4b0c      	ldr	r3, [pc, #48]	@ (8003634 <vTaskStartScheduler+0x6c>)
 8003602:	2200      	movs	r2, #0
 8003604:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003606:	f001 fded 	bl	80051e4 <xPortStartScheduler>
 800360a:	e008      	b.n	800361e <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003612:	d104      	bne.n	800361e <vTaskStartScheduler+0x56>
 8003614:	f640 61a9 	movw	r1, #3753	@ 0xea9
 8003618:	4807      	ldr	r0, [pc, #28]	@ (8003638 <vTaskStartScheduler+0x70>)
 800361a:	f7fd fd89 	bl	8001130 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 800361e:	4b07      	ldr	r3, [pc, #28]	@ (800363c <vTaskStartScheduler+0x74>)
 8003620:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8003622:	bf00      	nop
 8003624:	3708      	adds	r7, #8
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
 800362a:	bf00      	nop
 800362c:	20000bd4 	.word	0x20000bd4
 8003630:	20000bc0 	.word	0x20000bc0
 8003634:	20000bb8 	.word	0x20000bb8
 8003638:	080227e4 	.word	0x080227e4
 800363c:	20000008 	.word	0x20000008

08003640 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003640:	b480      	push	{r7}
 8003642:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003644:	4b04      	ldr	r3, [pc, #16]	@ (8003658 <vTaskSuspendAll+0x18>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	4a03      	ldr	r2, [pc, #12]	@ (8003658 <vTaskSuspendAll+0x18>)
 800364c:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 800364e:	bf00      	nop
 8003650:	46bd      	mov	sp, r7
 8003652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003656:	4770      	bx	lr
 8003658:	20000bdc 	.word	0x20000bdc

0800365c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800365c:	b580      	push	{r7, lr}
 800365e:	b088      	sub	sp, #32
 8003660:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003662:	2300      	movs	r3, #0
 8003664:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003666:	2300      	movs	r3, #0
 8003668:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 800366a:	f001 fe69 	bl	8005340 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 800366e:	2300      	movs	r3, #0
 8003670:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003672:	4b72      	ldr	r3, [pc, #456]	@ (800383c <xTaskResumeAll+0x1e0>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d104      	bne.n	8003684 <xTaskResumeAll+0x28>
 800367a:	f640 718b 	movw	r1, #3979	@ 0xf8b
 800367e:	4870      	ldr	r0, [pc, #448]	@ (8003840 <xTaskResumeAll+0x1e4>)
 8003680:	f7fd fd56 	bl	8001130 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003684:	4b6d      	ldr	r3, [pc, #436]	@ (800383c <xTaskResumeAll+0x1e0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3b01      	subs	r3, #1
 800368a:	4a6c      	ldr	r2, [pc, #432]	@ (800383c <xTaskResumeAll+0x1e0>)
 800368c:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800368e:	4b6b      	ldr	r3, [pc, #428]	@ (800383c <xTaskResumeAll+0x1e0>)
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	2b00      	cmp	r3, #0
 8003694:	f040 80ca 	bne.w	800382c <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003698:	4b6a      	ldr	r3, [pc, #424]	@ (8003844 <xTaskResumeAll+0x1e8>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b00      	cmp	r3, #0
 800369e:	f000 80c5 	beq.w	800382c <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80036a2:	e08e      	b.n	80037c2 <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 80036a4:	4b68      	ldr	r3, [pc, #416]	@ (8003848 <xTaskResumeAll+0x1ec>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	68db      	ldr	r3, [r3, #12]
 80036aa:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	69db      	ldr	r3, [r3, #28]
 80036b6:	69fa      	ldr	r2, [r7, #28]
 80036b8:	6a12      	ldr	r2, [r2, #32]
 80036ba:	609a      	str	r2, [r3, #8]
 80036bc:	69fb      	ldr	r3, [r7, #28]
 80036be:	6a1b      	ldr	r3, [r3, #32]
 80036c0:	69fa      	ldr	r2, [r7, #28]
 80036c2:	69d2      	ldr	r2, [r2, #28]
 80036c4:	605a      	str	r2, [r3, #4]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	69fb      	ldr	r3, [r7, #28]
 80036cc:	3318      	adds	r3, #24
 80036ce:	429a      	cmp	r2, r3
 80036d0:	d103      	bne.n	80036da <xTaskResumeAll+0x7e>
 80036d2:	69fb      	ldr	r3, [r7, #28]
 80036d4:	6a1a      	ldr	r2, [r3, #32]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	605a      	str	r2, [r3, #4]
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	2200      	movs	r2, #0
 80036de:	629a      	str	r2, [r3, #40]	@ 0x28
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	1e5a      	subs	r2, r3, #1
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	60bb      	str	r3, [r7, #8]
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	69fa      	ldr	r2, [r7, #28]
 80036f6:	68d2      	ldr	r2, [r2, #12]
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	68db      	ldr	r3, [r3, #12]
 80036fe:	69fa      	ldr	r2, [r7, #28]
 8003700:	6892      	ldr	r2, [r2, #8]
 8003702:	605a      	str	r2, [r3, #4]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	685a      	ldr	r2, [r3, #4]
 8003708:	69fb      	ldr	r3, [r7, #28]
 800370a:	3304      	adds	r3, #4
 800370c:	429a      	cmp	r2, r3
 800370e:	d103      	bne.n	8003718 <xTaskResumeAll+0xbc>
 8003710:	69fb      	ldr	r3, [r7, #28]
 8003712:	68da      	ldr	r2, [r3, #12]
 8003714:	68bb      	ldr	r3, [r7, #8]
 8003716:	605a      	str	r2, [r3, #4]
 8003718:	69fb      	ldr	r3, [r7, #28]
 800371a:	2200      	movs	r2, #0
 800371c:	615a      	str	r2, [r3, #20]
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	1e5a      	subs	r2, r3, #1
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003728:	69fb      	ldr	r3, [r7, #28]
 800372a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800372c:	2201      	movs	r2, #1
 800372e:	409a      	lsls	r2, r3
 8003730:	4b46      	ldr	r3, [pc, #280]	@ (800384c <xTaskResumeAll+0x1f0>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	4313      	orrs	r3, r2
 8003736:	4a45      	ldr	r2, [pc, #276]	@ (800384c <xTaskResumeAll+0x1f0>)
 8003738:	6013      	str	r3, [r2, #0]
 800373a:	69fb      	ldr	r3, [r7, #28]
 800373c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800373e:	4944      	ldr	r1, [pc, #272]	@ (8003850 <xTaskResumeAll+0x1f4>)
 8003740:	4613      	mov	r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	4413      	add	r3, r2
 8003746:	009b      	lsls	r3, r3, #2
 8003748:	440b      	add	r3, r1
 800374a:	3304      	adds	r3, #4
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	69fb      	ldr	r3, [r7, #28]
 8003752:	687a      	ldr	r2, [r7, #4]
 8003754:	609a      	str	r2, [r3, #8]
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	689a      	ldr	r2, [r3, #8]
 800375a:	69fb      	ldr	r3, [r7, #28]
 800375c:	60da      	str	r2, [r3, #12]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	689b      	ldr	r3, [r3, #8]
 8003762:	69fa      	ldr	r2, [r7, #28]
 8003764:	3204      	adds	r2, #4
 8003766:	605a      	str	r2, [r3, #4]
 8003768:	69fb      	ldr	r3, [r7, #28]
 800376a:	1d1a      	adds	r2, r3, #4
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	609a      	str	r2, [r3, #8]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003774:	4613      	mov	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	4413      	add	r3, r2
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4a34      	ldr	r2, [pc, #208]	@ (8003850 <xTaskResumeAll+0x1f4>)
 800377e:	441a      	add	r2, r3
 8003780:	69fb      	ldr	r3, [r7, #28]
 8003782:	615a      	str	r2, [r3, #20]
 8003784:	69fb      	ldr	r3, [r7, #28]
 8003786:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003788:	4931      	ldr	r1, [pc, #196]	@ (8003850 <xTaskResumeAll+0x1f4>)
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	009b      	lsls	r3, r3, #2
 8003792:	440b      	add	r3, r1
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	69fa      	ldr	r2, [r7, #28]
 8003798:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800379a:	1c59      	adds	r1, r3, #1
 800379c:	482c      	ldr	r0, [pc, #176]	@ (8003850 <xTaskResumeAll+0x1f4>)
 800379e:	4613      	mov	r3, r2
 80037a0:	009b      	lsls	r3, r3, #2
 80037a2:	4413      	add	r3, r2
 80037a4:	009b      	lsls	r3, r3, #2
 80037a6:	4403      	add	r3, r0
 80037a8:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037ae:	4b29      	ldr	r3, [pc, #164]	@ (8003854 <xTaskResumeAll+0x1f8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037b4:	429a      	cmp	r2, r3
 80037b6:	d904      	bls.n	80037c2 <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 80037b8:	4a27      	ldr	r2, [pc, #156]	@ (8003858 <xTaskResumeAll+0x1fc>)
 80037ba:	693b      	ldr	r3, [r7, #16]
 80037bc:	2101      	movs	r1, #1
 80037be:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80037c2:	4b21      	ldr	r3, [pc, #132]	@ (8003848 <xTaskResumeAll+0x1ec>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	f47f af6c 	bne.w	80036a4 <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 80037cc:	69fb      	ldr	r3, [r7, #28]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d001      	beq.n	80037d6 <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 80037d2:	f000 fd27 	bl	8004224 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80037d6:	4b21      	ldr	r3, [pc, #132]	@ (800385c <xTaskResumeAll+0x200>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d012      	beq.n	8003808 <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 80037e2:	f000 f86d 	bl	80038c0 <xTaskIncrementTick>
 80037e6:	4603      	mov	r3, r0
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d004      	beq.n	80037f6 <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 80037ec:	4a1a      	ldr	r2, [pc, #104]	@ (8003858 <xTaskResumeAll+0x1fc>)
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	2101      	movs	r1, #1
 80037f2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	3b01      	subs	r3, #1
 80037fa:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d1ef      	bne.n	80037e2 <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 8003802:	4b16      	ldr	r3, [pc, #88]	@ (800385c <xTaskResumeAll+0x200>)
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003808:	4a13      	ldr	r2, [pc, #76]	@ (8003858 <xTaskResumeAll+0x1fc>)
 800380a:	693b      	ldr	r3, [r7, #16]
 800380c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003810:	2b00      	cmp	r3, #0
 8003812:	d00b      	beq.n	800382c <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003814:	2301      	movs	r3, #1
 8003816:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003818:	4b0e      	ldr	r3, [pc, #56]	@ (8003854 <xTaskResumeAll+0x1f8>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4b10      	ldr	r3, [pc, #64]	@ (8003860 <xTaskResumeAll+0x204>)
 800381e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003822:	601a      	str	r2, [r3, #0]
 8003824:	f3bf 8f4f 	dsb	sy
 8003828:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 800382c:	f001 fdb4 	bl	8005398 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8003830:	69bb      	ldr	r3, [r7, #24]
}
 8003832:	4618      	mov	r0, r3
 8003834:	3720      	adds	r7, #32
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000bdc 	.word	0x20000bdc
 8003840:	080227e4 	.word	0x080227e4
 8003844:	20000bb4 	.word	0x20000bb4
 8003848:	20000b74 	.word	0x20000b74
 800384c:	20000bbc 	.word	0x20000bbc
 8003850:	20000ab8 	.word	0x20000ab8
 8003854:	20000ab4 	.word	0x20000ab4
 8003858:	20000bc8 	.word	0x20000bc8
 800385c:	20000bc4 	.word	0x20000bc4
 8003860:	e000ed04 	.word	0xe000ed04

08003864 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 800386a:	4b05      	ldr	r3, [pc, #20]	@ (8003880 <xTaskGetTickCount+0x1c>)
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8003870:	687b      	ldr	r3, [r7, #4]
}
 8003872:	4618      	mov	r0, r3
 8003874:	370c      	adds	r7, #12
 8003876:	46bd      	mov	sp, r7
 8003878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387c:	4770      	bx	lr
 800387e:	bf00      	nop
 8003880:	20000bb8 	.word	0x20000bb8

08003884 <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b084      	sub	sp, #16
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d102      	bne.n	8003898 <pcTaskGetName+0x14>
 8003892:	4b09      	ldr	r3, [pc, #36]	@ (80038b8 <pcTaskGetName+0x34>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	e000      	b.n	800389a <pcTaskGetName+0x16>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d104      	bne.n	80038ac <pcTaskGetName+0x28>
 80038a2:	f241 0155 	movw	r1, #4181	@ 0x1055
 80038a6:	4805      	ldr	r0, [pc, #20]	@ (80038bc <pcTaskGetName+0x38>)
 80038a8:	f7fd fc42 	bl	8001130 <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	3334      	adds	r3, #52	@ 0x34
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20000ab4 	.word	0x20000ab4
 80038bc:	080227e4 	.word	0x080227e4

080038c0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80038c0:	b580      	push	{r7, lr}
 80038c2:	b088      	sub	sp, #32
 80038c4:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80038ca:	4b7b      	ldr	r3, [pc, #492]	@ (8003ab8 <xTaskIncrementTick+0x1f8>)
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	f040 80e8 	bne.w	8003aa4 <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80038d4:	4b79      	ldr	r3, [pc, #484]	@ (8003abc <xTaskIncrementTick+0x1fc>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	3301      	adds	r3, #1
 80038da:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 80038dc:	4a77      	ldr	r2, [pc, #476]	@ (8003abc <xTaskIncrementTick+0x1fc>)
 80038de:	69bb      	ldr	r3, [r7, #24]
 80038e0:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d11a      	bne.n	800391e <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 80038e8:	4b75      	ldr	r3, [pc, #468]	@ (8003ac0 <xTaskIncrementTick+0x200>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d004      	beq.n	80038fc <xTaskIncrementTick+0x3c>
 80038f2:	f241 215f 	movw	r1, #4703	@ 0x125f
 80038f6:	4873      	ldr	r0, [pc, #460]	@ (8003ac4 <xTaskIncrementTick+0x204>)
 80038f8:	f7fd fc1a 	bl	8001130 <vAssertCalled>
 80038fc:	4b70      	ldr	r3, [pc, #448]	@ (8003ac0 <xTaskIncrementTick+0x200>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	617b      	str	r3, [r7, #20]
 8003902:	4b71      	ldr	r3, [pc, #452]	@ (8003ac8 <xTaskIncrementTick+0x208>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a6e      	ldr	r2, [pc, #440]	@ (8003ac0 <xTaskIncrementTick+0x200>)
 8003908:	6013      	str	r3, [r2, #0]
 800390a:	4a6f      	ldr	r2, [pc, #444]	@ (8003ac8 <xTaskIncrementTick+0x208>)
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	6013      	str	r3, [r2, #0]
 8003910:	4b6e      	ldr	r3, [pc, #440]	@ (8003acc <xTaskIncrementTick+0x20c>)
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	3301      	adds	r3, #1
 8003916:	4a6d      	ldr	r2, [pc, #436]	@ (8003acc <xTaskIncrementTick+0x20c>)
 8003918:	6013      	str	r3, [r2, #0]
 800391a:	f000 fc83 	bl	8004224 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 800391e:	4b6c      	ldr	r3, [pc, #432]	@ (8003ad0 <xTaskIncrementTick+0x210>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	69ba      	ldr	r2, [r7, #24]
 8003924:	429a      	cmp	r2, r3
 8003926:	f0c0 80a8 	bcc.w	8003a7a <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800392a:	4b65      	ldr	r3, [pc, #404]	@ (8003ac0 <xTaskIncrementTick+0x200>)
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	2b00      	cmp	r3, #0
 8003932:	d104      	bne.n	800393e <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003934:	4b66      	ldr	r3, [pc, #408]	@ (8003ad0 <xTaskIncrementTick+0x210>)
 8003936:	f04f 32ff 	mov.w	r2, #4294967295
 800393a:	601a      	str	r2, [r3, #0]
                    break;
 800393c:	e09d      	b.n	8003a7a <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 800393e:	4b60      	ldr	r3, [pc, #384]	@ (8003ac0 <xTaskIncrementTick+0x200>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003948:	693b      	ldr	r3, [r7, #16]
 800394a:	685b      	ldr	r3, [r3, #4]
 800394c:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 800394e:	69ba      	ldr	r2, [r7, #24]
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	429a      	cmp	r2, r3
 8003954:	d203      	bcs.n	800395e <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003956:	4a5e      	ldr	r2, [pc, #376]	@ (8003ad0 <xTaskIncrementTick+0x210>)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	6013      	str	r3, [r2, #0]
                        break;
 800395c:	e08d      	b.n	8003a7a <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 800395e:	693b      	ldr	r3, [r7, #16]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	60bb      	str	r3, [r7, #8]
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	689b      	ldr	r3, [r3, #8]
 8003968:	693a      	ldr	r2, [r7, #16]
 800396a:	68d2      	ldr	r2, [r2, #12]
 800396c:	609a      	str	r2, [r3, #8]
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	6892      	ldr	r2, [r2, #8]
 8003976:	605a      	str	r2, [r3, #4]
 8003978:	68bb      	ldr	r3, [r7, #8]
 800397a:	685a      	ldr	r2, [r3, #4]
 800397c:	693b      	ldr	r3, [r7, #16]
 800397e:	3304      	adds	r3, #4
 8003980:	429a      	cmp	r2, r3
 8003982:	d103      	bne.n	800398c <xTaskIncrementTick+0xcc>
 8003984:	693b      	ldr	r3, [r7, #16]
 8003986:	68da      	ldr	r2, [r3, #12]
 8003988:	68bb      	ldr	r3, [r7, #8]
 800398a:	605a      	str	r2, [r3, #4]
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2200      	movs	r2, #0
 8003990:	615a      	str	r2, [r3, #20]
 8003992:	68bb      	ldr	r3, [r7, #8]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	1e5a      	subs	r2, r3, #1
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800399c:	693b      	ldr	r3, [r7, #16]
 800399e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d01e      	beq.n	80039e2 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80039a4:	693b      	ldr	r3, [r7, #16]
 80039a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039a8:	607b      	str	r3, [r7, #4]
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	69db      	ldr	r3, [r3, #28]
 80039ae:	693a      	ldr	r2, [r7, #16]
 80039b0:	6a12      	ldr	r2, [r2, #32]
 80039b2:	609a      	str	r2, [r3, #8]
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	6a1b      	ldr	r3, [r3, #32]
 80039b8:	693a      	ldr	r2, [r7, #16]
 80039ba:	69d2      	ldr	r2, [r2, #28]
 80039bc:	605a      	str	r2, [r3, #4]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	3318      	adds	r3, #24
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d103      	bne.n	80039d2 <xTaskIncrementTick+0x112>
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	6a1a      	ldr	r2, [r3, #32]
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	2200      	movs	r2, #0
 80039d6:	629a      	str	r2, [r3, #40]	@ 0x28
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	1e5a      	subs	r2, r3, #1
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 80039e2:	693b      	ldr	r3, [r7, #16]
 80039e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039e6:	2201      	movs	r2, #1
 80039e8:	409a      	lsls	r2, r3
 80039ea:	4b3a      	ldr	r3, [pc, #232]	@ (8003ad4 <xTaskIncrementTick+0x214>)
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	4313      	orrs	r3, r2
 80039f0:	4a38      	ldr	r2, [pc, #224]	@ (8003ad4 <xTaskIncrementTick+0x214>)
 80039f2:	6013      	str	r3, [r2, #0]
 80039f4:	693b      	ldr	r3, [r7, #16]
 80039f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80039f8:	4937      	ldr	r1, [pc, #220]	@ (8003ad8 <xTaskIncrementTick+0x218>)
 80039fa:	4613      	mov	r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	4413      	add	r3, r2
 8003a00:	009b      	lsls	r3, r3, #2
 8003a02:	440b      	add	r3, r1
 8003a04:	3304      	adds	r3, #4
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	603b      	str	r3, [r7, #0]
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	609a      	str	r2, [r3, #8]
 8003a10:	683b      	ldr	r3, [r7, #0]
 8003a12:	689a      	ldr	r2, [r3, #8]
 8003a14:	693b      	ldr	r3, [r7, #16]
 8003a16:	60da      	str	r2, [r3, #12]
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689b      	ldr	r3, [r3, #8]
 8003a1c:	693a      	ldr	r2, [r7, #16]
 8003a1e:	3204      	adds	r2, #4
 8003a20:	605a      	str	r2, [r3, #4]
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	1d1a      	adds	r2, r3, #4
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	609a      	str	r2, [r3, #8]
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a2e:	4613      	mov	r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	4413      	add	r3, r2
 8003a34:	009b      	lsls	r3, r3, #2
 8003a36:	4a28      	ldr	r2, [pc, #160]	@ (8003ad8 <xTaskIncrementTick+0x218>)
 8003a38:	441a      	add	r2, r3
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	615a      	str	r2, [r3, #20]
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a42:	4925      	ldr	r1, [pc, #148]	@ (8003ad8 <xTaskIncrementTick+0x218>)
 8003a44:	4613      	mov	r3, r2
 8003a46:	009b      	lsls	r3, r3, #2
 8003a48:	4413      	add	r3, r2
 8003a4a:	009b      	lsls	r3, r3, #2
 8003a4c:	440b      	add	r3, r1
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003a54:	1c59      	adds	r1, r3, #1
 8003a56:	4820      	ldr	r0, [pc, #128]	@ (8003ad8 <xTaskIncrementTick+0x218>)
 8003a58:	4613      	mov	r3, r2
 8003a5a:	009b      	lsls	r3, r3, #2
 8003a5c:	4413      	add	r3, r2
 8003a5e:	009b      	lsls	r3, r3, #2
 8003a60:	4403      	add	r3, r0
 8003a62:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a68:	4b1c      	ldr	r3, [pc, #112]	@ (8003adc <xTaskIncrementTick+0x21c>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a6e:	429a      	cmp	r2, r3
 8003a70:	f67f af5b 	bls.w	800392a <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 8003a74:	2301      	movs	r3, #1
 8003a76:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003a78:	e757      	b.n	800392a <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003a7a:	4b18      	ldr	r3, [pc, #96]	@ (8003adc <xTaskIncrementTick+0x21c>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003a80:	4915      	ldr	r1, [pc, #84]	@ (8003ad8 <xTaskIncrementTick+0x218>)
 8003a82:	4613      	mov	r3, r2
 8003a84:	009b      	lsls	r3, r3, #2
 8003a86:	4413      	add	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	440b      	add	r3, r1
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2b01      	cmp	r3, #1
 8003a90:	d901      	bls.n	8003a96 <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8003a92:	2301      	movs	r3, #1
 8003a94:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003a96:	4b12      	ldr	r3, [pc, #72]	@ (8003ae0 <xTaskIncrementTick+0x220>)
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d007      	beq.n	8003aae <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	e004      	b.n	8003aae <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003aa4:	4b0f      	ldr	r3, [pc, #60]	@ (8003ae4 <xTaskIncrementTick+0x224>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	3301      	adds	r3, #1
 8003aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8003ae4 <xTaskIncrementTick+0x224>)
 8003aac:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8003aae:	69fb      	ldr	r3, [r7, #28]
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3720      	adds	r7, #32
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}
 8003ab8:	20000bdc 	.word	0x20000bdc
 8003abc:	20000bb8 	.word	0x20000bb8
 8003ac0:	20000b6c 	.word	0x20000b6c
 8003ac4:	080227e4 	.word	0x080227e4
 8003ac8:	20000b70 	.word	0x20000b70
 8003acc:	20000bcc 	.word	0x20000bcc
 8003ad0:	20000bd4 	.word	0x20000bd4
 8003ad4:	20000bbc 	.word	0x20000bbc
 8003ad8:	20000ab8 	.word	0x20000ab8
 8003adc:	20000ab4 	.word	0x20000ab4
 8003ae0:	20000bc8 	.word	0x20000bc8
 8003ae4:	20000bc4 	.word	0x20000bc4

08003ae8 <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	b084      	sub	sp, #16
 8003aec:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003aee:	4b30      	ldr	r3, [pc, #192]	@ (8003bb0 <vTaskSwitchContext+0xc8>)
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003af6:	4b2f      	ldr	r3, [pc, #188]	@ (8003bb4 <vTaskSwitchContext+0xcc>)
 8003af8:	2201      	movs	r2, #1
 8003afa:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003afc:	e053      	b.n	8003ba6 <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 8003afe:	4b2d      	ldr	r3, [pc, #180]	@ (8003bb4 <vTaskSwitchContext+0xcc>)
 8003b00:	2200      	movs	r2, #0
 8003b02:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8003b04:	f7fd fb0c 	bl	8001120 <ulGetRunTimeCounterValue>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4a2b      	ldr	r2, [pc, #172]	@ (8003bb8 <vTaskSwitchContext+0xd0>)
 8003b0c:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 8003b0e:	4b2a      	ldr	r3, [pc, #168]	@ (8003bb8 <vTaskSwitchContext+0xd0>)
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	4b2a      	ldr	r3, [pc, #168]	@ (8003bbc <vTaskSwitchContext+0xd4>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d909      	bls.n	8003b2e <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 8003b1a:	4b27      	ldr	r3, [pc, #156]	@ (8003bb8 <vTaskSwitchContext+0xd0>)
 8003b1c:	681a      	ldr	r2, [r3, #0]
 8003b1e:	4b27      	ldr	r3, [pc, #156]	@ (8003bbc <vTaskSwitchContext+0xd4>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	1ad1      	subs	r1, r2, r3
 8003b24:	4b26      	ldr	r3, [pc, #152]	@ (8003bc0 <vTaskSwitchContext+0xd8>)
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003b2a:	440a      	add	r2, r1
 8003b2c:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 8003b2e:	4b22      	ldr	r3, [pc, #136]	@ (8003bb8 <vTaskSwitchContext+0xd0>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a22      	ldr	r2, [pc, #136]	@ (8003bbc <vTaskSwitchContext+0xd4>)
 8003b34:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003b36:	4b23      	ldr	r3, [pc, #140]	@ (8003bc4 <vTaskSwitchContext+0xdc>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	fab3 f383 	clz	r3, r3
 8003b42:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8003b44:	78fb      	ldrb	r3, [r7, #3]
 8003b46:	f1c3 031f 	rsb	r3, r3, #31
 8003b4a:	60fb      	str	r3, [r7, #12]
 8003b4c:	491e      	ldr	r1, [pc, #120]	@ (8003bc8 <vTaskSwitchContext+0xe0>)
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	4613      	mov	r3, r2
 8003b52:	009b      	lsls	r3, r3, #2
 8003b54:	4413      	add	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	440b      	add	r3, r1
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d104      	bne.n	8003b6a <vTaskSwitchContext+0x82>
 8003b60:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 8003b64:	4819      	ldr	r0, [pc, #100]	@ (8003bcc <vTaskSwitchContext+0xe4>)
 8003b66:	f7fd fae3 	bl	8001130 <vAssertCalled>
 8003b6a:	68fa      	ldr	r2, [r7, #12]
 8003b6c:	4613      	mov	r3, r2
 8003b6e:	009b      	lsls	r3, r3, #2
 8003b70:	4413      	add	r3, r2
 8003b72:	009b      	lsls	r3, r3, #2
 8003b74:	4a14      	ldr	r2, [pc, #80]	@ (8003bc8 <vTaskSwitchContext+0xe0>)
 8003b76:	4413      	add	r3, r2
 8003b78:	60bb      	str	r3, [r7, #8]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	685a      	ldr	r2, [r3, #4]
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	685a      	ldr	r2, [r3, #4]
 8003b88:	68bb      	ldr	r3, [r7, #8]
 8003b8a:	3308      	adds	r3, #8
 8003b8c:	429a      	cmp	r2, r3
 8003b8e:	d103      	bne.n	8003b98 <vTaskSwitchContext+0xb0>
 8003b90:	68bb      	ldr	r3, [r7, #8]
 8003b92:	68da      	ldr	r2, [r3, #12]
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	605a      	str	r2, [r3, #4]
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	68db      	ldr	r3, [r3, #12]
 8003b9e:	4a08      	ldr	r2, [pc, #32]	@ (8003bc0 <vTaskSwitchContext+0xd8>)
 8003ba0:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003ba2:	4b07      	ldr	r3, [pc, #28]	@ (8003bc0 <vTaskSwitchContext+0xd8>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
    }
 8003ba6:	bf00      	nop
 8003ba8:	3710      	adds	r7, #16
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bd80      	pop	{r7, pc}
 8003bae:	bf00      	nop
 8003bb0:	20000bdc 	.word	0x20000bdc
 8003bb4:	20000bc8 	.word	0x20000bc8
 8003bb8:	20000be4 	.word	0x20000be4
 8003bbc:	20000be0 	.word	0x20000be0
 8003bc0:	20000ab4 	.word	0x20000ab4
 8003bc4:	20000bbc 	.word	0x20000bbc
 8003bc8:	20000ab8 	.word	0x20000ab8
 8003bcc:	080227e4 	.word	0x080227e4

08003bd0 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b082      	sub	sp, #8
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
 8003bd8:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d104      	bne.n	8003bea <vTaskPlaceOnEventList+0x1a>
 8003be0:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8003be4:	4808      	ldr	r0, [pc, #32]	@ (8003c08 <vTaskPlaceOnEventList+0x38>)
 8003be6:	f7fd faa3 	bl	8001130 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003bea:	4b08      	ldr	r3, [pc, #32]	@ (8003c0c <vTaskPlaceOnEventList+0x3c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3318      	adds	r3, #24
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7fe fca1 	bl	800253a <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	6838      	ldr	r0, [r7, #0]
 8003bfc:	f001 f9e4 	bl	8004fc8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8003c00:	bf00      	nop
 8003c02:	3708      	adds	r7, #8
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	080227e4 	.word	0x080227e4
 8003c0c:	20000ab4 	.word	0x20000ab4

08003c10 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8003c10:	b580      	push	{r7, lr}
 8003c12:	b086      	sub	sp, #24
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	60f8      	str	r0, [r7, #12]
 8003c18:	60b9      	str	r1, [r7, #8]
 8003c1a:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d104      	bne.n	8003c2c <vTaskPlaceOnUnorderedEventList+0x1c>
 8003c22:	f241 419e 	movw	r1, #5278	@ 0x149e
 8003c26:	481d      	ldr	r0, [pc, #116]	@ (8003c9c <vTaskPlaceOnUnorderedEventList+0x8c>)
 8003c28:	f7fd fa82 	bl	8001130 <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8003c2c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ca0 <vTaskPlaceOnUnorderedEventList+0x90>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d104      	bne.n	8003c3e <vTaskPlaceOnUnorderedEventList+0x2e>
 8003c34:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 8003c38:	4818      	ldr	r0, [pc, #96]	@ (8003c9c <vTaskPlaceOnUnorderedEventList+0x8c>)
 8003c3a:	f7fd fa79 	bl	8001130 <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003c3e:	4b19      	ldr	r3, [pc, #100]	@ (8003ca4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	68ba      	ldr	r2, [r7, #8]
 8003c44:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8003c48:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	617b      	str	r3, [r7, #20]
 8003c50:	4b14      	ldr	r3, [pc, #80]	@ (8003ca4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	697a      	ldr	r2, [r7, #20]
 8003c56:	61da      	str	r2, [r3, #28]
 8003c58:	4b12      	ldr	r3, [pc, #72]	@ (8003ca4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	697a      	ldr	r2, [r7, #20]
 8003c5e:	6892      	ldr	r2, [r2, #8]
 8003c60:	621a      	str	r2, [r3, #32]
 8003c62:	4b10      	ldr	r3, [pc, #64]	@ (8003ca4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8003c64:	681a      	ldr	r2, [r3, #0]
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	3218      	adds	r2, #24
 8003c6c:	605a      	str	r2, [r3, #4]
 8003c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8003ca4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f103 0218 	add.w	r2, r3, #24
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	609a      	str	r2, [r3, #8]
 8003c7a:	4b0a      	ldr	r3, [pc, #40]	@ (8003ca4 <vTaskPlaceOnUnorderedEventList+0x94>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	629a      	str	r2, [r3, #40]	@ 0x28
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f001 f99a 	bl	8004fc8 <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 8003c94:	bf00      	nop
 8003c96:	3718      	adds	r7, #24
 8003c98:	46bd      	mov	sp, r7
 8003c9a:	bd80      	pop	{r7, pc}
 8003c9c:	080227e4 	.word	0x080227e4
 8003ca0:	20000bdc 	.word	0x20000bdc
 8003ca4:	20000ab4 	.word	0x20000ab4

08003ca8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b088      	sub	sp, #32
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	68db      	ldr	r3, [r3, #12]
 8003cb6:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 8003cb8:	69bb      	ldr	r3, [r7, #24]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d104      	bne.n	8003cc8 <xTaskRemoveFromEventList+0x20>
 8003cbe:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 8003cc2:	485b      	ldr	r0, [pc, #364]	@ (8003e30 <xTaskRemoveFromEventList+0x188>)
 8003cc4:	f7fd fa34 	bl	8001130 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003cc8:	69bb      	ldr	r3, [r7, #24]
 8003cca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ccc:	617b      	str	r3, [r7, #20]
 8003cce:	69bb      	ldr	r3, [r7, #24]
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	69ba      	ldr	r2, [r7, #24]
 8003cd4:	6a12      	ldr	r2, [r2, #32]
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	69ba      	ldr	r2, [r7, #24]
 8003cde:	69d2      	ldr	r2, [r2, #28]
 8003ce0:	605a      	str	r2, [r3, #4]
 8003ce2:	697b      	ldr	r3, [r7, #20]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	69bb      	ldr	r3, [r7, #24]
 8003ce8:	3318      	adds	r3, #24
 8003cea:	429a      	cmp	r2, r3
 8003cec:	d103      	bne.n	8003cf6 <xTaskRemoveFromEventList+0x4e>
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	6a1a      	ldr	r2, [r3, #32]
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	605a      	str	r2, [r3, #4]
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	629a      	str	r2, [r3, #40]	@ 0x28
 8003cfc:	697b      	ldr	r3, [r7, #20]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	1e5a      	subs	r2, r3, #1
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003d06:	4b4b      	ldr	r3, [pc, #300]	@ (8003e34 <xTaskRemoveFromEventList+0x18c>)
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d160      	bne.n	8003dd0 <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	695b      	ldr	r3, [r3, #20]
 8003d12:	60fb      	str	r3, [r7, #12]
 8003d14:	69bb      	ldr	r3, [r7, #24]
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	69ba      	ldr	r2, [r7, #24]
 8003d1a:	68d2      	ldr	r2, [r2, #12]
 8003d1c:	609a      	str	r2, [r3, #8]
 8003d1e:	69bb      	ldr	r3, [r7, #24]
 8003d20:	68db      	ldr	r3, [r3, #12]
 8003d22:	69ba      	ldr	r2, [r7, #24]
 8003d24:	6892      	ldr	r2, [r2, #8]
 8003d26:	605a      	str	r2, [r3, #4]
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	685a      	ldr	r2, [r3, #4]
 8003d2c:	69bb      	ldr	r3, [r7, #24]
 8003d2e:	3304      	adds	r3, #4
 8003d30:	429a      	cmp	r2, r3
 8003d32:	d103      	bne.n	8003d3c <xTaskRemoveFromEventList+0x94>
 8003d34:	69bb      	ldr	r3, [r7, #24]
 8003d36:	68da      	ldr	r2, [r3, #12]
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	605a      	str	r2, [r3, #4]
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	615a      	str	r2, [r3, #20]
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	1e5a      	subs	r2, r3, #1
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8003d4c:	69bb      	ldr	r3, [r7, #24]
 8003d4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d50:	2201      	movs	r2, #1
 8003d52:	409a      	lsls	r2, r3
 8003d54:	4b38      	ldr	r3, [pc, #224]	@ (8003e38 <xTaskRemoveFromEventList+0x190>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	4313      	orrs	r3, r2
 8003d5a:	4a37      	ldr	r2, [pc, #220]	@ (8003e38 <xTaskRemoveFromEventList+0x190>)
 8003d5c:	6013      	str	r3, [r2, #0]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d62:	4936      	ldr	r1, [pc, #216]	@ (8003e3c <xTaskRemoveFromEventList+0x194>)
 8003d64:	4613      	mov	r3, r2
 8003d66:	009b      	lsls	r3, r3, #2
 8003d68:	4413      	add	r3, r2
 8003d6a:	009b      	lsls	r3, r3, #2
 8003d6c:	440b      	add	r3, r1
 8003d6e:	3304      	adds	r3, #4
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60bb      	str	r3, [r7, #8]
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	68ba      	ldr	r2, [r7, #8]
 8003d78:	609a      	str	r2, [r3, #8]
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	689a      	ldr	r2, [r3, #8]
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	689b      	ldr	r3, [r3, #8]
 8003d86:	69ba      	ldr	r2, [r7, #24]
 8003d88:	3204      	adds	r2, #4
 8003d8a:	605a      	str	r2, [r3, #4]
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	1d1a      	adds	r2, r3, #4
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	609a      	str	r2, [r3, #8]
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	009b      	lsls	r3, r3, #2
 8003da0:	4a26      	ldr	r2, [pc, #152]	@ (8003e3c <xTaskRemoveFromEventList+0x194>)
 8003da2:	441a      	add	r2, r3
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	615a      	str	r2, [r3, #20]
 8003da8:	69bb      	ldr	r3, [r7, #24]
 8003daa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dac:	4923      	ldr	r1, [pc, #140]	@ (8003e3c <xTaskRemoveFromEventList+0x194>)
 8003dae:	4613      	mov	r3, r2
 8003db0:	009b      	lsls	r3, r3, #2
 8003db2:	4413      	add	r3, r2
 8003db4:	009b      	lsls	r3, r3, #2
 8003db6:	440b      	add	r3, r1
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69ba      	ldr	r2, [r7, #24]
 8003dbc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003dbe:	1c59      	adds	r1, r3, #1
 8003dc0:	481e      	ldr	r0, [pc, #120]	@ (8003e3c <xTaskRemoveFromEventList+0x194>)
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	009b      	lsls	r3, r3, #2
 8003dc6:	4413      	add	r3, r2
 8003dc8:	009b      	lsls	r3, r3, #2
 8003dca:	4403      	add	r3, r0
 8003dcc:	6019      	str	r1, [r3, #0]
 8003dce:	e01b      	b.n	8003e08 <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003e40 <xTaskRemoveFromEventList+0x198>)
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	613b      	str	r3, [r7, #16]
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	61da      	str	r2, [r3, #28]
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	689a      	ldr	r2, [r3, #8]
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	621a      	str	r2, [r3, #32]
 8003de4:	693b      	ldr	r3, [r7, #16]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	69ba      	ldr	r2, [r7, #24]
 8003dea:	3218      	adds	r2, #24
 8003dec:	605a      	str	r2, [r3, #4]
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	f103 0218 	add.w	r2, r3, #24
 8003df4:	693b      	ldr	r3, [r7, #16]
 8003df6:	609a      	str	r2, [r3, #8]
 8003df8:	69bb      	ldr	r3, [r7, #24]
 8003dfa:	4a11      	ldr	r2, [pc, #68]	@ (8003e40 <xTaskRemoveFromEventList+0x198>)
 8003dfc:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dfe:	4b10      	ldr	r3, [pc, #64]	@ (8003e40 <xTaskRemoveFromEventList+0x198>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	3301      	adds	r3, #1
 8003e04:	4a0e      	ldr	r2, [pc, #56]	@ (8003e40 <xTaskRemoveFromEventList+0x198>)
 8003e06:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e08:	69bb      	ldr	r3, [r7, #24]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e0c:	4b0d      	ldr	r3, [pc, #52]	@ (8003e44 <xTaskRemoveFromEventList+0x19c>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e12:	429a      	cmp	r2, r3
 8003e14:	d905      	bls.n	8003e22 <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003e1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003e48 <xTaskRemoveFromEventList+0x1a0>)
 8003e1c:	2201      	movs	r2, #1
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	e001      	b.n	8003e26 <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 8003e22:	2300      	movs	r3, #0
 8003e24:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 8003e26:	69fb      	ldr	r3, [r7, #28]
}
 8003e28:	4618      	mov	r0, r3
 8003e2a:	3720      	adds	r7, #32
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}
 8003e30:	080227e4 	.word	0x080227e4
 8003e34:	20000bdc 	.word	0x20000bdc
 8003e38:	20000bbc 	.word	0x20000bbc
 8003e3c:	20000ab8 	.word	0x20000ab8
 8003e40:	20000b74 	.word	0x20000b74
 8003e44:	20000ab4 	.word	0x20000ab4
 8003e48:	20000bc8 	.word	0x20000bc8

08003e4c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
 8003e54:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8003e56:	4b52      	ldr	r3, [pc, #328]	@ (8003fa0 <vTaskRemoveFromUnorderedEventList+0x154>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d104      	bne.n	8003e68 <vTaskRemoveFromUnorderedEventList+0x1c>
 8003e5e:	f241 5143 	movw	r1, #5443	@ 0x1543
 8003e62:	4850      	ldr	r0, [pc, #320]	@ (8003fa4 <vTaskRemoveFromUnorderedEventList+0x158>)
 8003e64:	f7fd f964 	bl	8001130 <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	68db      	ldr	r3, [r3, #12]
 8003e76:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d104      	bne.n	8003e88 <vTaskRemoveFromUnorderedEventList+0x3c>
 8003e7e:	f241 514e 	movw	r1, #5454	@ 0x154e
 8003e82:	4848      	ldr	r0, [pc, #288]	@ (8003fa4 <vTaskRemoveFromUnorderedEventList+0x158>)
 8003e84:	f7fd f954 	bl	8001130 <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	691b      	ldr	r3, [r3, #16]
 8003e8c:	613b      	str	r3, [r7, #16]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	687a      	ldr	r2, [r7, #4]
 8003e94:	6892      	ldr	r2, [r2, #8]
 8003e96:	609a      	str	r2, [r3, #8]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	689b      	ldr	r3, [r3, #8]
 8003e9c:	687a      	ldr	r2, [r7, #4]
 8003e9e:	6852      	ldr	r2, [r2, #4]
 8003ea0:	605a      	str	r2, [r3, #4]
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	687a      	ldr	r2, [r7, #4]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d103      	bne.n	8003eb4 <vTaskRemoveFromUnorderedEventList+0x68>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	689a      	ldr	r2, [r3, #8]
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	605a      	str	r2, [r3, #4]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	611a      	str	r2, [r3, #16]
 8003eba:	693b      	ldr	r3, [r7, #16]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	1e5a      	subs	r2, r3, #1
 8003ec0:	693b      	ldr	r3, [r7, #16]
 8003ec2:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8003ec4:	697b      	ldr	r3, [r7, #20]
 8003ec6:	695b      	ldr	r3, [r3, #20]
 8003ec8:	60fb      	str	r3, [r7, #12]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	697a      	ldr	r2, [r7, #20]
 8003ed0:	68d2      	ldr	r2, [r2, #12]
 8003ed2:	609a      	str	r2, [r3, #8]
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	68db      	ldr	r3, [r3, #12]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	6892      	ldr	r2, [r2, #8]
 8003edc:	605a      	str	r2, [r3, #4]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	685a      	ldr	r2, [r3, #4]
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	3304      	adds	r3, #4
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d103      	bne.n	8003ef2 <vTaskRemoveFromUnorderedEventList+0xa6>
 8003eea:	697b      	ldr	r3, [r7, #20]
 8003eec:	68da      	ldr	r2, [r3, #12]
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	605a      	str	r2, [r3, #4]
 8003ef2:	697b      	ldr	r3, [r7, #20]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	615a      	str	r2, [r3, #20]
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	1e5a      	subs	r2, r3, #1
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f06:	2201      	movs	r2, #1
 8003f08:	409a      	lsls	r2, r3
 8003f0a:	4b27      	ldr	r3, [pc, #156]	@ (8003fa8 <vTaskRemoveFromUnorderedEventList+0x15c>)
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	4313      	orrs	r3, r2
 8003f10:	4a25      	ldr	r2, [pc, #148]	@ (8003fa8 <vTaskRemoveFromUnorderedEventList+0x15c>)
 8003f12:	6013      	str	r3, [r2, #0]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f18:	4924      	ldr	r1, [pc, #144]	@ (8003fac <vTaskRemoveFromUnorderedEventList+0x160>)
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	009b      	lsls	r3, r3, #2
 8003f1e:	4413      	add	r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	3304      	adds	r3, #4
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	60bb      	str	r3, [r7, #8]
 8003f2a:	697b      	ldr	r3, [r7, #20]
 8003f2c:	68ba      	ldr	r2, [r7, #8]
 8003f2e:	609a      	str	r2, [r3, #8]
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	689a      	ldr	r2, [r3, #8]
 8003f34:	697b      	ldr	r3, [r7, #20]
 8003f36:	60da      	str	r2, [r3, #12]
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	689b      	ldr	r3, [r3, #8]
 8003f3c:	697a      	ldr	r2, [r7, #20]
 8003f3e:	3204      	adds	r2, #4
 8003f40:	605a      	str	r2, [r3, #4]
 8003f42:	697b      	ldr	r3, [r7, #20]
 8003f44:	1d1a      	adds	r2, r3, #4
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	609a      	str	r2, [r3, #8]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f4e:	4613      	mov	r3, r2
 8003f50:	009b      	lsls	r3, r3, #2
 8003f52:	4413      	add	r3, r2
 8003f54:	009b      	lsls	r3, r3, #2
 8003f56:	4a15      	ldr	r2, [pc, #84]	@ (8003fac <vTaskRemoveFromUnorderedEventList+0x160>)
 8003f58:	441a      	add	r2, r3
 8003f5a:	697b      	ldr	r3, [r7, #20]
 8003f5c:	615a      	str	r2, [r3, #20]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f62:	4912      	ldr	r1, [pc, #72]	@ (8003fac <vTaskRemoveFromUnorderedEventList+0x160>)
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	697a      	ldr	r2, [r7, #20]
 8003f72:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003f74:	1c59      	adds	r1, r3, #1
 8003f76:	480d      	ldr	r0, [pc, #52]	@ (8003fac <vTaskRemoveFromUnorderedEventList+0x160>)
 8003f78:	4613      	mov	r3, r2
 8003f7a:	009b      	lsls	r3, r3, #2
 8003f7c:	4413      	add	r3, r2
 8003f7e:	009b      	lsls	r3, r3, #2
 8003f80:	4403      	add	r3, r0
 8003f82:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003f84:	697b      	ldr	r3, [r7, #20]
 8003f86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f88:	4b09      	ldr	r3, [pc, #36]	@ (8003fb0 <vTaskRemoveFromUnorderedEventList+0x164>)
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d902      	bls.n	8003f98 <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 8003f92:	4b08      	ldr	r3, [pc, #32]	@ (8003fb4 <vTaskRemoveFromUnorderedEventList+0x168>)
 8003f94:	2201      	movs	r2, #1
 8003f96:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 8003f98:	bf00      	nop
 8003f9a:	3718      	adds	r7, #24
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000bdc 	.word	0x20000bdc
 8003fa4:	080227e4 	.word	0x080227e4
 8003fa8:	20000bbc 	.word	0x20000bbc
 8003fac:	20000ab8 	.word	0x20000ab8
 8003fb0:	20000ab4 	.word	0x20000ab4
 8003fb4:	20000bc8 	.word	0x20000bc8

08003fb8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003fb8:	b580      	push	{r7, lr}
 8003fba:	b082      	sub	sp, #8
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d104      	bne.n	8003fd0 <vTaskSetTimeOutState+0x18>
 8003fc6:	f241 5186 	movw	r1, #5510	@ 0x1586
 8003fca:	4809      	ldr	r0, [pc, #36]	@ (8003ff0 <vTaskSetTimeOutState+0x38>)
 8003fcc:	f7fd f8b0 	bl	8001130 <vAssertCalled>
    taskENTER_CRITICAL();
 8003fd0:	f001 f9b6 	bl	8005340 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003fd4:	4b07      	ldr	r3, [pc, #28]	@ (8003ff4 <vTaskSetTimeOutState+0x3c>)
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 8003fdc:	4b06      	ldr	r3, [pc, #24]	@ (8003ff8 <vTaskSetTimeOutState+0x40>)
 8003fde:	681a      	ldr	r2, [r3, #0]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 8003fe4:	f001 f9d8 	bl	8005398 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 8003fe8:	bf00      	nop
 8003fea:	3708      	adds	r7, #8
 8003fec:	46bd      	mov	sp, r7
 8003fee:	bd80      	pop	{r7, pc}
 8003ff0:	080227e4 	.word	0x080227e4
 8003ff4:	20000bcc 	.word	0x20000bcc
 8003ff8:	20000bb8 	.word	0x20000bb8

08003ffc <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003ffc:	b480      	push	{r7}
 8003ffe:	b083      	sub	sp, #12
 8004000:	af00      	add	r7, sp, #0
 8004002:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004004:	4b06      	ldr	r3, [pc, #24]	@ (8004020 <vTaskInternalSetTimeOutState+0x24>)
 8004006:	681a      	ldr	r2, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 800400c:	4b05      	ldr	r3, [pc, #20]	@ (8004024 <vTaskInternalSetTimeOutState+0x28>)
 800400e:	681a      	ldr	r2, [r3, #0]
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8004014:	bf00      	nop
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	20000bcc 	.word	0x20000bcc
 8004024:	20000bb8 	.word	0x20000bb8

08004028 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b086      	sub	sp, #24
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d104      	bne.n	8004042 <xTaskCheckForTimeOut+0x1a>
 8004038:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 800403c:	4825      	ldr	r0, [pc, #148]	@ (80040d4 <xTaskCheckForTimeOut+0xac>)
 800403e:	f7fd f877 	bl	8001130 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <xTaskCheckForTimeOut+0x2a>
 8004048:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 800404c:	4821      	ldr	r0, [pc, #132]	@ (80040d4 <xTaskCheckForTimeOut+0xac>)
 800404e:	f7fd f86f 	bl	8001130 <vAssertCalled>

    taskENTER_CRITICAL();
 8004052:	f001 f975 	bl	8005340 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 8004056:	4b20      	ldr	r3, [pc, #128]	@ (80040d8 <xTaskCheckForTimeOut+0xb0>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	693a      	ldr	r2, [r7, #16]
 8004062:	1ad3      	subs	r3, r2, r3
 8004064:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 8004066:	683b      	ldr	r3, [r7, #0]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800406e:	d102      	bne.n	8004076 <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004070:	2300      	movs	r3, #0
 8004072:	617b      	str	r3, [r7, #20]
 8004074:	e026      	b.n	80040c4 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	4b18      	ldr	r3, [pc, #96]	@ (80040dc <xTaskCheckForTimeOut+0xb4>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	429a      	cmp	r2, r3
 8004080:	d00a      	beq.n	8004098 <xTaskCheckForTimeOut+0x70>
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	685b      	ldr	r3, [r3, #4]
 8004086:	693a      	ldr	r2, [r7, #16]
 8004088:	429a      	cmp	r2, r3
 800408a:	d305      	bcc.n	8004098 <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 800408c:	2301      	movs	r3, #1
 800408e:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	2200      	movs	r2, #0
 8004094:	601a      	str	r2, [r3, #0]
 8004096:	e015      	b.n	80040c4 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	68fa      	ldr	r2, [r7, #12]
 800409e:	429a      	cmp	r2, r3
 80040a0:	d20b      	bcs.n	80040ba <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	681a      	ldr	r2, [r3, #0]
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	1ad2      	subs	r2, r2, r3
 80040aa:	683b      	ldr	r3, [r7, #0]
 80040ac:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f7ff ffa4 	bl	8003ffc <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80040b4:	2300      	movs	r3, #0
 80040b6:	617b      	str	r3, [r7, #20]
 80040b8:	e004      	b.n	80040c4 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	2200      	movs	r2, #0
 80040be:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80040c0:	2301      	movs	r3, #1
 80040c2:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80040c4:	f001 f968 	bl	8005398 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 80040c8:	697b      	ldr	r3, [r7, #20]
}
 80040ca:	4618      	mov	r0, r3
 80040cc:	3718      	adds	r7, #24
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	080227e4 	.word	0x080227e4
 80040d8:	20000bb8 	.word	0x20000bb8
 80040dc:	20000bcc 	.word	0x20000bcc

080040e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80040e4:	4b03      	ldr	r3, [pc, #12]	@ (80040f4 <vTaskMissedYield+0x14>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80040ea:	bf00      	nop
 80040ec:	46bd      	mov	sp, r7
 80040ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f2:	4770      	bx	lr
 80040f4:	20000bc8 	.word	0x20000bc8

080040f8 <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b082      	sub	sp, #8
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004100:	f000 f852 	bl	80041a8 <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004104:	4b06      	ldr	r3, [pc, #24]	@ (8004120 <prvIdleTask+0x28>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	2b01      	cmp	r3, #1
 800410a:	d9f9      	bls.n	8004100 <prvIdleTask+0x8>
            {
                taskYIELD();
 800410c:	4b05      	ldr	r3, [pc, #20]	@ (8004124 <prvIdleTask+0x2c>)
 800410e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004112:	601a      	str	r2, [r3, #0]
 8004114:	f3bf 8f4f 	dsb	sy
 8004118:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 800411c:	e7f0      	b.n	8004100 <prvIdleTask+0x8>
 800411e:	bf00      	nop
 8004120:	20000ab8 	.word	0x20000ab8
 8004124:	e000ed04 	.word	0xe000ed04

08004128 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800412e:	2300      	movs	r3, #0
 8004130:	607b      	str	r3, [r7, #4]
 8004132:	e00c      	b.n	800414e <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004134:	687a      	ldr	r2, [r7, #4]
 8004136:	4613      	mov	r3, r2
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	4413      	add	r3, r2
 800413c:	009b      	lsls	r3, r3, #2
 800413e:	4a12      	ldr	r2, [pc, #72]	@ (8004188 <prvInitialiseTaskLists+0x60>)
 8004140:	4413      	add	r3, r2
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe f9a8 	bl	8002498 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3301      	adds	r3, #1
 800414c:	607b      	str	r3, [r7, #4]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	2b06      	cmp	r3, #6
 8004152:	d9ef      	bls.n	8004134 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004154:	480d      	ldr	r0, [pc, #52]	@ (800418c <prvInitialiseTaskLists+0x64>)
 8004156:	f7fe f99f 	bl	8002498 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800415a:	480d      	ldr	r0, [pc, #52]	@ (8004190 <prvInitialiseTaskLists+0x68>)
 800415c:	f7fe f99c 	bl	8002498 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004160:	480c      	ldr	r0, [pc, #48]	@ (8004194 <prvInitialiseTaskLists+0x6c>)
 8004162:	f7fe f999 	bl	8002498 <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 8004166:	480c      	ldr	r0, [pc, #48]	@ (8004198 <prvInitialiseTaskLists+0x70>)
 8004168:	f7fe f996 	bl	8002498 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 800416c:	480b      	ldr	r0, [pc, #44]	@ (800419c <prvInitialiseTaskLists+0x74>)
 800416e:	f7fe f993 	bl	8002498 <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004172:	4b0b      	ldr	r3, [pc, #44]	@ (80041a0 <prvInitialiseTaskLists+0x78>)
 8004174:	4a05      	ldr	r2, [pc, #20]	@ (800418c <prvInitialiseTaskLists+0x64>)
 8004176:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004178:	4b0a      	ldr	r3, [pc, #40]	@ (80041a4 <prvInitialiseTaskLists+0x7c>)
 800417a:	4a05      	ldr	r2, [pc, #20]	@ (8004190 <prvInitialiseTaskLists+0x68>)
 800417c:	601a      	str	r2, [r3, #0]
}
 800417e:	bf00      	nop
 8004180:	3708      	adds	r7, #8
 8004182:	46bd      	mov	sp, r7
 8004184:	bd80      	pop	{r7, pc}
 8004186:	bf00      	nop
 8004188:	20000ab8 	.word	0x20000ab8
 800418c:	20000b44 	.word	0x20000b44
 8004190:	20000b58 	.word	0x20000b58
 8004194:	20000b74 	.word	0x20000b74
 8004198:	20000b88 	.word	0x20000b88
 800419c:	20000ba0 	.word	0x20000ba0
 80041a0:	20000b6c 	.word	0x20000b6c
 80041a4:	20000b70 	.word	0x20000b70

080041a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b082      	sub	sp, #8
 80041ac:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041ae:	e019      	b.n	80041e4 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80041b0:	f001 f8c6 	bl	8005340 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80041b4:	4b10      	ldr	r3, [pc, #64]	@ (80041f8 <prvCheckTasksWaitingTermination+0x50>)
 80041b6:	68db      	ldr	r3, [r3, #12]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	3304      	adds	r3, #4
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7fe f9f3 	bl	80025ac <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80041c6:	4b0d      	ldr	r3, [pc, #52]	@ (80041fc <prvCheckTasksWaitingTermination+0x54>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	4a0b      	ldr	r2, [pc, #44]	@ (80041fc <prvCheckTasksWaitingTermination+0x54>)
 80041ce:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80041d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004200 <prvCheckTasksWaitingTermination+0x58>)
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	4a0a      	ldr	r2, [pc, #40]	@ (8004200 <prvCheckTasksWaitingTermination+0x58>)
 80041d8:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80041da:	f001 f8dd 	bl	8005398 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80041de:	6878      	ldr	r0, [r7, #4]
 80041e0:	f000 f810 	bl	8004204 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80041e4:	4b06      	ldr	r3, [pc, #24]	@ (8004200 <prvCheckTasksWaitingTermination+0x58>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d1e1      	bne.n	80041b0 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 80041ec:	bf00      	nop
 80041ee:	bf00      	nop
 80041f0:	3708      	adds	r7, #8
 80041f2:	46bd      	mov	sp, r7
 80041f4:	bd80      	pop	{r7, pc}
 80041f6:	bf00      	nop
 80041f8:	20000b88 	.word	0x20000b88
 80041fc:	20000bb4 	.word	0x20000bb4
 8004200:	20000b9c 	.word	0x20000b9c

08004204 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004204:	b580      	push	{r7, lr}
 8004206:	b082      	sub	sp, #8
 8004208:	af00      	add	r7, sp, #0
 800420a:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004210:	4618      	mov	r0, r3
 8004212:	f001 fa6b 	bl	80056ec <vPortFree>
            vPortFree( pxTCB );
 8004216:	6878      	ldr	r0, [r7, #4]
 8004218:	f001 fa68 	bl	80056ec <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 800421c:	bf00      	nop
 800421e:	3708      	adds	r7, #8
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}

08004224 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004224:	b480      	push	{r7}
 8004226:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004228:	4b0a      	ldr	r3, [pc, #40]	@ (8004254 <prvResetNextTaskUnblockTime+0x30>)
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d104      	bne.n	800423c <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004232:	4b09      	ldr	r3, [pc, #36]	@ (8004258 <prvResetNextTaskUnblockTime+0x34>)
 8004234:	f04f 32ff 	mov.w	r2, #4294967295
 8004238:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800423a:	e005      	b.n	8004248 <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800423c:	4b05      	ldr	r3, [pc, #20]	@ (8004254 <prvResetNextTaskUnblockTime+0x30>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68db      	ldr	r3, [r3, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	4a04      	ldr	r2, [pc, #16]	@ (8004258 <prvResetNextTaskUnblockTime+0x34>)
 8004246:	6013      	str	r3, [r2, #0]
}
 8004248:	bf00      	nop
 800424a:	46bd      	mov	sp, r7
 800424c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004250:	4770      	bx	lr
 8004252:	bf00      	nop
 8004254:	20000b6c 	.word	0x20000b6c
 8004258:	20000bd4 	.word	0x20000bd4

0800425c <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8004262:	4b05      	ldr	r3, [pc, #20]	@ (8004278 <xTaskGetCurrentTaskHandle+0x1c>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 8004268:	687b      	ldr	r3, [r7, #4]
        }
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr
 8004276:	bf00      	nop
 8004278:	20000ab4 	.word	0x20000ab4

0800427c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 800427c:	b480      	push	{r7}
 800427e:	b083      	sub	sp, #12
 8004280:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8004282:	4b0b      	ldr	r3, [pc, #44]	@ (80042b0 <xTaskGetSchedulerState+0x34>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	d102      	bne.n	8004290 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800428a:	2301      	movs	r3, #1
 800428c:	607b      	str	r3, [r7, #4]
 800428e:	e008      	b.n	80042a2 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004290:	4b08      	ldr	r3, [pc, #32]	@ (80042b4 <xTaskGetSchedulerState+0x38>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d102      	bne.n	800429e <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 8004298:	2302      	movs	r3, #2
 800429a:	607b      	str	r3, [r7, #4]
 800429c:	e001      	b.n	80042a2 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 800429e:	2300      	movs	r3, #0
 80042a0:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80042a2:	687b      	ldr	r3, [r7, #4]
    }
 80042a4:	4618      	mov	r0, r3
 80042a6:	370c      	adds	r7, #12
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr
 80042b0:	20000bc0 	.word	0x20000bc0
 80042b4:	20000bdc 	.word	0x20000bdc

080042b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b086      	sub	sp, #24
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80042c4:	2300      	movs	r3, #0
 80042c6:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	f000 8089 	beq.w	80043e2 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042d4:	4b45      	ldr	r3, [pc, #276]	@ (80043ec <xTaskPriorityInherit+0x134>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042da:	429a      	cmp	r2, r3
 80042dc:	d278      	bcs.n	80043d0 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	db06      	blt.n	80042f4 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 80042e6:	4b41      	ldr	r3, [pc, #260]	@ (80043ec <xTaskPriorityInherit+0x134>)
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042ec:	f1c3 0207 	rsb	r2, r3, #7
 80042f0:	693b      	ldr	r3, [r7, #16]
 80042f2:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80042f4:	693b      	ldr	r3, [r7, #16]
 80042f6:	6959      	ldr	r1, [r3, #20]
 80042f8:	693b      	ldr	r3, [r7, #16]
 80042fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80042fc:	4613      	mov	r3, r2
 80042fe:	009b      	lsls	r3, r3, #2
 8004300:	4413      	add	r3, r2
 8004302:	009b      	lsls	r3, r3, #2
 8004304:	4a3a      	ldr	r2, [pc, #232]	@ (80043f0 <xTaskPriorityInherit+0x138>)
 8004306:	4413      	add	r3, r2
 8004308:	4299      	cmp	r1, r3
 800430a:	d159      	bne.n	80043c0 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	3304      	adds	r3, #4
 8004310:	4618      	mov	r0, r3
 8004312:	f7fe f94b 	bl	80025ac <uxListRemove>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d10a      	bne.n	8004332 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004320:	2201      	movs	r2, #1
 8004322:	fa02 f303 	lsl.w	r3, r2, r3
 8004326:	43da      	mvns	r2, r3
 8004328:	4b32      	ldr	r3, [pc, #200]	@ (80043f4 <xTaskPriorityInherit+0x13c>)
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4013      	ands	r3, r2
 800432e:	4a31      	ldr	r2, [pc, #196]	@ (80043f4 <xTaskPriorityInherit+0x13c>)
 8004330:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004332:	4b2e      	ldr	r3, [pc, #184]	@ (80043ec <xTaskPriorityInherit+0x134>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004338:	693b      	ldr	r3, [r7, #16]
 800433a:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 800433c:	693b      	ldr	r3, [r7, #16]
 800433e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004340:	2201      	movs	r2, #1
 8004342:	409a      	lsls	r2, r3
 8004344:	4b2b      	ldr	r3, [pc, #172]	@ (80043f4 <xTaskPriorityInherit+0x13c>)
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	4313      	orrs	r3, r2
 800434a:	4a2a      	ldr	r2, [pc, #168]	@ (80043f4 <xTaskPriorityInherit+0x13c>)
 800434c:	6013      	str	r3, [r2, #0]
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004352:	4927      	ldr	r1, [pc, #156]	@ (80043f0 <xTaskPriorityInherit+0x138>)
 8004354:	4613      	mov	r3, r2
 8004356:	009b      	lsls	r3, r3, #2
 8004358:	4413      	add	r3, r2
 800435a:	009b      	lsls	r3, r3, #2
 800435c:	440b      	add	r3, r1
 800435e:	3304      	adds	r3, #4
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	60fb      	str	r3, [r7, #12]
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	68fa      	ldr	r2, [r7, #12]
 8004368:	609a      	str	r2, [r3, #8]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	689a      	ldr	r2, [r3, #8]
 800436e:	693b      	ldr	r3, [r7, #16]
 8004370:	60da      	str	r2, [r3, #12]
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	693a      	ldr	r2, [r7, #16]
 8004378:	3204      	adds	r2, #4
 800437a:	605a      	str	r2, [r3, #4]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	1d1a      	adds	r2, r3, #4
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	609a      	str	r2, [r3, #8]
 8004384:	693b      	ldr	r3, [r7, #16]
 8004386:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004388:	4613      	mov	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4413      	add	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4a17      	ldr	r2, [pc, #92]	@ (80043f0 <xTaskPriorityInherit+0x138>)
 8004392:	441a      	add	r2, r3
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	615a      	str	r2, [r3, #20]
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439c:	4914      	ldr	r1, [pc, #80]	@ (80043f0 <xTaskPriorityInherit+0x138>)
 800439e:	4613      	mov	r3, r2
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	4413      	add	r3, r2
 80043a4:	009b      	lsls	r3, r3, #2
 80043a6:	440b      	add	r3, r1
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	693a      	ldr	r2, [r7, #16]
 80043ac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80043ae:	1c59      	adds	r1, r3, #1
 80043b0:	480f      	ldr	r0, [pc, #60]	@ (80043f0 <xTaskPriorityInherit+0x138>)
 80043b2:	4613      	mov	r3, r2
 80043b4:	009b      	lsls	r3, r3, #2
 80043b6:	4413      	add	r3, r2
 80043b8:	009b      	lsls	r3, r3, #2
 80043ba:	4403      	add	r3, r0
 80043bc:	6019      	str	r1, [r3, #0]
 80043be:	e004      	b.n	80043ca <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80043c0:	4b0a      	ldr	r3, [pc, #40]	@ (80043ec <xTaskPriorityInherit+0x134>)
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80043c6:	693b      	ldr	r3, [r7, #16]
 80043c8:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80043ca:	2301      	movs	r3, #1
 80043cc:	617b      	str	r3, [r7, #20]
 80043ce:	e008      	b.n	80043e2 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80043d4:	4b05      	ldr	r3, [pc, #20]	@ (80043ec <xTaskPriorityInherit+0x134>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043da:	429a      	cmp	r2, r3
 80043dc:	d201      	bcs.n	80043e2 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80043de:	2301      	movs	r3, #1
 80043e0:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 80043e2:	697b      	ldr	r3, [r7, #20]
    }
 80043e4:	4618      	mov	r0, r3
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}
 80043ec:	20000ab4 	.word	0x20000ab4
 80043f0:	20000ab8 	.word	0x20000ab8
 80043f4:	20000bbc 	.word	0x20000bbc

080043f8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b086      	sub	sp, #24
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2b00      	cmp	r3, #0
 800440c:	f000 8082 	beq.w	8004514 <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004410:	4b43      	ldr	r3, [pc, #268]	@ (8004520 <xTaskPriorityDisinherit+0x128>)
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	693a      	ldr	r2, [r7, #16]
 8004416:	429a      	cmp	r2, r3
 8004418:	d004      	beq.n	8004424 <xTaskPriorityDisinherit+0x2c>
 800441a:	f641 2128 	movw	r1, #6696	@ 0x1a28
 800441e:	4841      	ldr	r0, [pc, #260]	@ (8004524 <xTaskPriorityDisinherit+0x12c>)
 8004420:	f7fc fe86 	bl	8001130 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8004424:	693b      	ldr	r3, [r7, #16]
 8004426:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004428:	2b00      	cmp	r3, #0
 800442a:	d104      	bne.n	8004436 <xTaskPriorityDisinherit+0x3e>
 800442c:	f641 2129 	movw	r1, #6697	@ 0x1a29
 8004430:	483c      	ldr	r0, [pc, #240]	@ (8004524 <xTaskPriorityDisinherit+0x12c>)
 8004432:	f7fc fe7d 	bl	8001130 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 8004436:	693b      	ldr	r3, [r7, #16]
 8004438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800443a:	1e5a      	subs	r2, r3, #1
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004440:	693b      	ldr	r3, [r7, #16]
 8004442:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004448:	429a      	cmp	r2, r3
 800444a:	d063      	beq.n	8004514 <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800444c:	693b      	ldr	r3, [r7, #16]
 800444e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004450:	2b00      	cmp	r3, #0
 8004452:	d15f      	bne.n	8004514 <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004454:	693b      	ldr	r3, [r7, #16]
 8004456:	3304      	adds	r3, #4
 8004458:	4618      	mov	r0, r3
 800445a:	f7fe f8a7 	bl	80025ac <uxListRemove>
 800445e:	4603      	mov	r3, r0
 8004460:	2b00      	cmp	r3, #0
 8004462:	d10a      	bne.n	800447a <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004464:	693b      	ldr	r3, [r7, #16]
 8004466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004468:	2201      	movs	r2, #1
 800446a:	fa02 f303 	lsl.w	r3, r2, r3
 800446e:	43da      	mvns	r2, r3
 8004470:	4b2d      	ldr	r3, [pc, #180]	@ (8004528 <xTaskPriorityDisinherit+0x130>)
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	4013      	ands	r3, r2
 8004476:	4a2c      	ldr	r2, [pc, #176]	@ (8004528 <xTaskPriorityDisinherit+0x130>)
 8004478:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004486:	f1c3 0207 	rsb	r2, r3, #7
 800448a:	693b      	ldr	r3, [r7, #16]
 800448c:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 800448e:	693b      	ldr	r3, [r7, #16]
 8004490:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004492:	2201      	movs	r2, #1
 8004494:	409a      	lsls	r2, r3
 8004496:	4b24      	ldr	r3, [pc, #144]	@ (8004528 <xTaskPriorityDisinherit+0x130>)
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4313      	orrs	r3, r2
 800449c:	4a22      	ldr	r2, [pc, #136]	@ (8004528 <xTaskPriorityDisinherit+0x130>)
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044a4:	4921      	ldr	r1, [pc, #132]	@ (800452c <xTaskPriorityDisinherit+0x134>)
 80044a6:	4613      	mov	r3, r2
 80044a8:	009b      	lsls	r3, r3, #2
 80044aa:	4413      	add	r3, r2
 80044ac:	009b      	lsls	r3, r3, #2
 80044ae:	440b      	add	r3, r1
 80044b0:	3304      	adds	r3, #4
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	68fa      	ldr	r2, [r7, #12]
 80044ba:	609a      	str	r2, [r3, #8]
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	689a      	ldr	r2, [r3, #8]
 80044c0:	693b      	ldr	r3, [r7, #16]
 80044c2:	60da      	str	r2, [r3, #12]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	3204      	adds	r2, #4
 80044cc:	605a      	str	r2, [r3, #4]
 80044ce:	693b      	ldr	r3, [r7, #16]
 80044d0:	1d1a      	adds	r2, r3, #4
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	609a      	str	r2, [r3, #8]
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044da:	4613      	mov	r3, r2
 80044dc:	009b      	lsls	r3, r3, #2
 80044de:	4413      	add	r3, r2
 80044e0:	009b      	lsls	r3, r3, #2
 80044e2:	4a12      	ldr	r2, [pc, #72]	@ (800452c <xTaskPriorityDisinherit+0x134>)
 80044e4:	441a      	add	r2, r3
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	615a      	str	r2, [r3, #20]
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044ee:	490f      	ldr	r1, [pc, #60]	@ (800452c <xTaskPriorityDisinherit+0x134>)
 80044f0:	4613      	mov	r3, r2
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	4413      	add	r3, r2
 80044f6:	009b      	lsls	r3, r3, #2
 80044f8:	440b      	add	r3, r1
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004500:	1c59      	adds	r1, r3, #1
 8004502:	480a      	ldr	r0, [pc, #40]	@ (800452c <xTaskPriorityDisinherit+0x134>)
 8004504:	4613      	mov	r3, r2
 8004506:	009b      	lsls	r3, r3, #2
 8004508:	4413      	add	r3, r2
 800450a:	009b      	lsls	r3, r3, #2
 800450c:	4403      	add	r3, r0
 800450e:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004510:	2301      	movs	r3, #1
 8004512:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8004514:	697b      	ldr	r3, [r7, #20]
    }
 8004516:	4618      	mov	r0, r3
 8004518:	3718      	adds	r7, #24
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}
 800451e:	bf00      	nop
 8004520:	20000ab4 	.word	0x20000ab4
 8004524:	080227e4 	.word	0x080227e4
 8004528:	20000bbc 	.word	0x20000bbc
 800452c:	20000ab8 	.word	0x20000ab8

08004530 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004530:	b580      	push	{r7, lr}
 8004532:	b088      	sub	sp, #32
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800453e:	2301      	movs	r3, #1
 8004540:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2b00      	cmp	r3, #0
 8004546:	f000 8096 	beq.w	8004676 <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800454a:	69bb      	ldr	r3, [r7, #24]
 800454c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800454e:	2b00      	cmp	r3, #0
 8004550:	d104      	bne.n	800455c <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8004552:	f641 2186 	movw	r1, #6790	@ 0x1a86
 8004556:	484a      	ldr	r0, [pc, #296]	@ (8004680 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004558:	f7fc fdea 	bl	8001130 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800455c:	69bb      	ldr	r3, [r7, #24]
 800455e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d902      	bls.n	800456c <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	61fb      	str	r3, [r7, #28]
 800456a:	e002      	b.n	8004572 <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 800456c:	69bb      	ldr	r3, [r7, #24]
 800456e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004570:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004572:	69bb      	ldr	r3, [r7, #24]
 8004574:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004576:	69fa      	ldr	r2, [r7, #28]
 8004578:	429a      	cmp	r2, r3
 800457a:	d07c      	beq.n	8004676 <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004580:	697a      	ldr	r2, [r7, #20]
 8004582:	429a      	cmp	r2, r3
 8004584:	d177      	bne.n	8004676 <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 8004586:	4b3f      	ldr	r3, [pc, #252]	@ (8004684 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	69ba      	ldr	r2, [r7, #24]
 800458c:	429a      	cmp	r2, r3
 800458e:	d104      	bne.n	800459a <vTaskPriorityDisinheritAfterTimeout+0x6a>
 8004590:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 8004594:	483a      	ldr	r0, [pc, #232]	@ (8004680 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 8004596:	f7fc fdcb 	bl	8001130 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800459a:	69bb      	ldr	r3, [r7, #24]
 800459c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800459e:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	69fa      	ldr	r2, [r7, #28]
 80045a4:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80045a6:	69bb      	ldr	r3, [r7, #24]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	db04      	blt.n	80045b8 <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	f1c3 0207 	rsb	r2, r3, #7
 80045b4:	69bb      	ldr	r3, [r7, #24]
 80045b6:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80045b8:	69bb      	ldr	r3, [r7, #24]
 80045ba:	6959      	ldr	r1, [r3, #20]
 80045bc:	693a      	ldr	r2, [r7, #16]
 80045be:	4613      	mov	r3, r2
 80045c0:	009b      	lsls	r3, r3, #2
 80045c2:	4413      	add	r3, r2
 80045c4:	009b      	lsls	r3, r3, #2
 80045c6:	4a30      	ldr	r2, [pc, #192]	@ (8004688 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80045c8:	4413      	add	r3, r2
 80045ca:	4299      	cmp	r1, r3
 80045cc:	d153      	bne.n	8004676 <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80045ce:	69bb      	ldr	r3, [r7, #24]
 80045d0:	3304      	adds	r3, #4
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fd ffea 	bl	80025ac <uxListRemove>
 80045d8:	4603      	mov	r3, r0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d10a      	bne.n	80045f4 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80045de:	69bb      	ldr	r3, [r7, #24]
 80045e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045e2:	2201      	movs	r2, #1
 80045e4:	fa02 f303 	lsl.w	r3, r2, r3
 80045e8:	43da      	mvns	r2, r3
 80045ea:	4b28      	ldr	r3, [pc, #160]	@ (800468c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	4013      	ands	r3, r2
 80045f0:	4a26      	ldr	r2, [pc, #152]	@ (800468c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80045f2:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 80045f4:	69bb      	ldr	r3, [r7, #24]
 80045f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80045f8:	2201      	movs	r2, #1
 80045fa:	409a      	lsls	r2, r3
 80045fc:	4b23      	ldr	r3, [pc, #140]	@ (800468c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4313      	orrs	r3, r2
 8004602:	4a22      	ldr	r2, [pc, #136]	@ (800468c <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004604:	6013      	str	r3, [r2, #0]
 8004606:	69bb      	ldr	r3, [r7, #24]
 8004608:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800460a:	491f      	ldr	r1, [pc, #124]	@ (8004688 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800460c:	4613      	mov	r3, r2
 800460e:	009b      	lsls	r3, r3, #2
 8004610:	4413      	add	r3, r2
 8004612:	009b      	lsls	r3, r3, #2
 8004614:	440b      	add	r3, r1
 8004616:	3304      	adds	r3, #4
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	60fb      	str	r3, [r7, #12]
 800461c:	69bb      	ldr	r3, [r7, #24]
 800461e:	68fa      	ldr	r2, [r7, #12]
 8004620:	609a      	str	r2, [r3, #8]
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	689a      	ldr	r2, [r3, #8]
 8004626:	69bb      	ldr	r3, [r7, #24]
 8004628:	60da      	str	r2, [r3, #12]
 800462a:	68fb      	ldr	r3, [r7, #12]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	69ba      	ldr	r2, [r7, #24]
 8004630:	3204      	adds	r2, #4
 8004632:	605a      	str	r2, [r3, #4]
 8004634:	69bb      	ldr	r3, [r7, #24]
 8004636:	1d1a      	adds	r2, r3, #4
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	609a      	str	r2, [r3, #8]
 800463c:	69bb      	ldr	r3, [r7, #24]
 800463e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004640:	4613      	mov	r3, r2
 8004642:	009b      	lsls	r3, r3, #2
 8004644:	4413      	add	r3, r2
 8004646:	009b      	lsls	r3, r3, #2
 8004648:	4a0f      	ldr	r2, [pc, #60]	@ (8004688 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800464a:	441a      	add	r2, r3
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	615a      	str	r2, [r3, #20]
 8004650:	69bb      	ldr	r3, [r7, #24]
 8004652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004654:	490c      	ldr	r1, [pc, #48]	@ (8004688 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004656:	4613      	mov	r3, r2
 8004658:	009b      	lsls	r3, r3, #2
 800465a:	4413      	add	r3, r2
 800465c:	009b      	lsls	r3, r3, #2
 800465e:	440b      	add	r3, r1
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004666:	1c59      	adds	r1, r3, #1
 8004668:	4807      	ldr	r0, [pc, #28]	@ (8004688 <vTaskPriorityDisinheritAfterTimeout+0x158>)
 800466a:	4613      	mov	r3, r2
 800466c:	009b      	lsls	r3, r3, #2
 800466e:	4413      	add	r3, r2
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	4403      	add	r3, r0
 8004674:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8004676:	bf00      	nop
 8004678:	3720      	adds	r7, #32
 800467a:	46bd      	mov	sp, r7
 800467c:	bd80      	pop	{r7, pc}
 800467e:	bf00      	nop
 8004680:	080227e4 	.word	0x080227e4
 8004684:	20000ab4 	.word	0x20000ab4
 8004688:	20000ab8 	.word	0x20000ab8
 800468c:	20000bbc 	.word	0x20000bbc

08004690 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004696:	4b09      	ldr	r3, [pc, #36]	@ (80046bc <uxTaskResetEventItemValue+0x2c>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 800469e:	4b07      	ldr	r3, [pc, #28]	@ (80046bc <uxTaskResetEventItemValue+0x2c>)
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046a4:	4b05      	ldr	r3, [pc, #20]	@ (80046bc <uxTaskResetEventItemValue+0x2c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f1c2 0207 	rsb	r2, r2, #7
 80046ac:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 80046ae:	687b      	ldr	r3, [r7, #4]
}
 80046b0:	4618      	mov	r0, r3
 80046b2:	370c      	adds	r7, #12
 80046b4:	46bd      	mov	sp, r7
 80046b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ba:	4770      	bx	lr
 80046bc:	20000ab4 	.word	0x20000ab4

080046c0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 80046c0:	b480      	push	{r7}
 80046c2:	b083      	sub	sp, #12
 80046c4:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 80046c6:	4b09      	ldr	r3, [pc, #36]	@ (80046ec <pvTaskIncrementMutexHeldCount+0x2c>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d004      	beq.n	80046dc <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80046d6:	1c5a      	adds	r2, r3, #1
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 80046dc:	687b      	ldr	r3, [r7, #4]
    }
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000ab4 	.word	0x20000ab4

080046f0 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b088      	sub	sp, #32
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	60f8      	str	r0, [r7, #12]
 80046f8:	60b9      	str	r1, [r7, #8]
 80046fa:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 80046fc:	2300      	movs	r3, #0
 80046fe:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d004      	beq.n	8004710 <ulTaskGenericNotifyTake+0x20>
 8004706:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 800470a:	4833      	ldr	r0, [pc, #204]	@ (80047d8 <ulTaskGenericNotifyTake+0xe8>)
 800470c:	f7fc fd10 	bl	8001130 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8004710:	f7fe ff96 	bl	8003640 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 8004714:	f000 fe14 	bl	8005340 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 8004718:	4b30      	ldr	r3, [pc, #192]	@ (80047dc <ulTaskGenericNotifyTake+0xec>)
 800471a:	681a      	ldr	r2, [r3, #0]
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3318      	adds	r3, #24
 8004720:	009b      	lsls	r3, r3, #2
 8004722:	4413      	add	r3, r2
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	2b00      	cmp	r3, #0
 8004728:	d10b      	bne.n	8004742 <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 800472a:	4b2c      	ldr	r3, [pc, #176]	@ (80047dc <ulTaskGenericNotifyTake+0xec>)
 800472c:	681a      	ldr	r2, [r3, #0]
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	3368      	adds	r3, #104	@ 0x68
 8004734:	2201      	movs	r2, #1
 8004736:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d001      	beq.n	8004742 <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 800473e:	2301      	movs	r3, #1
 8004740:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004742:	f000 fe29 	bl	8005398 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8004746:	69fb      	ldr	r3, [r7, #28]
 8004748:	2b01      	cmp	r3, #1
 800474a:	d103      	bne.n	8004754 <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800474c:	2101      	movs	r1, #1
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 fc3a 	bl	8004fc8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8004754:	f7fe ff82 	bl	800365c <xTaskResumeAll>
 8004758:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	2b01      	cmp	r3, #1
 800475e:	d10a      	bne.n	8004776 <ulTaskGenericNotifyTake+0x86>
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d107      	bne.n	8004776 <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 8004766:	4b1e      	ldr	r3, [pc, #120]	@ (80047e0 <ulTaskGenericNotifyTake+0xf0>)
 8004768:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800476c:	601a      	str	r2, [r3, #0]
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8004776:	f000 fde3 	bl	8005340 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 800477a:	4b18      	ldr	r3, [pc, #96]	@ (80047dc <ulTaskGenericNotifyTake+0xec>)
 800477c:	681a      	ldr	r2, [r3, #0]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	3318      	adds	r3, #24
 8004782:	009b      	lsls	r3, r3, #2
 8004784:	4413      	add	r3, r2
 8004786:	685b      	ldr	r3, [r3, #4]
 8004788:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 800478a:	697b      	ldr	r3, [r7, #20]
 800478c:	2b00      	cmp	r3, #0
 800478e:	d014      	beq.n	80047ba <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 8004790:	68bb      	ldr	r3, [r7, #8]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d008      	beq.n	80047a8 <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 8004796:	4b11      	ldr	r3, [pc, #68]	@ (80047dc <ulTaskGenericNotifyTake+0xec>)
 8004798:	681a      	ldr	r2, [r3, #0]
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	3318      	adds	r3, #24
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	2200      	movs	r2, #0
 80047a4:	605a      	str	r2, [r3, #4]
 80047a6:	e008      	b.n	80047ba <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 80047a8:	4b0c      	ldr	r3, [pc, #48]	@ (80047dc <ulTaskGenericNotifyTake+0xec>)
 80047aa:	6819      	ldr	r1, [r3, #0]
 80047ac:	697b      	ldr	r3, [r7, #20]
 80047ae:	1e5a      	subs	r2, r3, #1
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3318      	adds	r3, #24
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	440b      	add	r3, r1
 80047b8:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80047ba:	4b08      	ldr	r3, [pc, #32]	@ (80047dc <ulTaskGenericNotifyTake+0xec>)
 80047bc:	681a      	ldr	r2, [r3, #0]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4413      	add	r3, r2
 80047c2:	3368      	adds	r3, #104	@ 0x68
 80047c4:	2200      	movs	r2, #0
 80047c6:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80047c8:	f000 fde6 	bl	8005398 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 80047cc:	697b      	ldr	r3, [r7, #20]
    }
 80047ce:	4618      	mov	r0, r3
 80047d0:	3720      	adds	r7, #32
 80047d2:	46bd      	mov	sp, r7
 80047d4:	bd80      	pop	{r7, pc}
 80047d6:	bf00      	nop
 80047d8:	080227e4 	.word	0x080227e4
 80047dc:	20000ab4 	.word	0x20000ab4
 80047e0:	e000ed04 	.word	0xe000ed04

080047e4 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 80047e4:	b580      	push	{r7, lr}
 80047e6:	b088      	sub	sp, #32
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	60f8      	str	r0, [r7, #12]
 80047ec:	60b9      	str	r1, [r7, #8]
 80047ee:	607a      	str	r2, [r7, #4]
 80047f0:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 80047f2:	2300      	movs	r3, #0
 80047f4:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d004      	beq.n	8004806 <xTaskGenericNotifyWait+0x22>
 80047fc:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 8004800:	483e      	ldr	r0, [pc, #248]	@ (80048fc <xTaskGenericNotifyWait+0x118>)
 8004802:	f7fc fc95 	bl	8001130 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8004806:	f7fe ff1b 	bl	8003640 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 800480a:	f000 fd99 	bl	8005340 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 800480e:	4b3c      	ldr	r3, [pc, #240]	@ (8004900 <xTaskGenericNotifyWait+0x11c>)
 8004810:	681a      	ldr	r2, [r3, #0]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4413      	add	r3, r2
 8004816:	3368      	adds	r3, #104	@ 0x68
 8004818:	781b      	ldrb	r3, [r3, #0]
 800481a:	b2db      	uxtb	r3, r3
 800481c:	2b02      	cmp	r3, #2
 800481e:	d01a      	beq.n	8004856 <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8004820:	4b37      	ldr	r3, [pc, #220]	@ (8004900 <xTaskGenericNotifyWait+0x11c>)
 8004822:	681a      	ldr	r2, [r3, #0]
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3318      	adds	r3, #24
 8004828:	009b      	lsls	r3, r3, #2
 800482a:	4413      	add	r3, r2
 800482c:	6859      	ldr	r1, [r3, #4]
 800482e:	68bb      	ldr	r3, [r7, #8]
 8004830:	43db      	mvns	r3, r3
 8004832:	4019      	ands	r1, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	3318      	adds	r3, #24
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 800483e:	4b30      	ldr	r3, [pc, #192]	@ (8004900 <xTaskGenericNotifyWait+0x11c>)
 8004840:	681a      	ldr	r2, [r3, #0]
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	4413      	add	r3, r2
 8004846:	3368      	adds	r3, #104	@ 0x68
 8004848:	2201      	movs	r2, #1
 800484a:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 800484c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800484e:	2b00      	cmp	r3, #0
 8004850:	d001      	beq.n	8004856 <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 8004852:	2301      	movs	r3, #1
 8004854:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004856:	f000 fd9f 	bl	8005398 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 800485a:	69bb      	ldr	r3, [r7, #24]
 800485c:	2b01      	cmp	r3, #1
 800485e:	d103      	bne.n	8004868 <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004860:	2101      	movs	r1, #1
 8004862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004864:	f000 fbb0 	bl	8004fc8 <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8004868:	f7fe fef8 	bl	800365c <xTaskResumeAll>
 800486c:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 800486e:	69bb      	ldr	r3, [r7, #24]
 8004870:	2b01      	cmp	r3, #1
 8004872:	d10a      	bne.n	800488a <xTaskGenericNotifyWait+0xa6>
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d107      	bne.n	800488a <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 800487a:	4b22      	ldr	r3, [pc, #136]	@ (8004904 <xTaskGenericNotifyWait+0x120>)
 800487c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004880:	601a      	str	r2, [r3, #0]
 8004882:	f3bf 8f4f 	dsb	sy
 8004886:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 800488a:	f000 fd59 	bl	8005340 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 800488e:	683b      	ldr	r3, [r7, #0]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8004894:	4b1a      	ldr	r3, [pc, #104]	@ (8004900 <xTaskGenericNotifyWait+0x11c>)
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3318      	adds	r3, #24
 800489c:	009b      	lsls	r3, r3, #2
 800489e:	4413      	add	r3, r2
 80048a0:	685a      	ldr	r2, [r3, #4]
 80048a2:	683b      	ldr	r3, [r7, #0]
 80048a4:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 80048a6:	4b16      	ldr	r3, [pc, #88]	@ (8004900 <xTaskGenericNotifyWait+0x11c>)
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	4413      	add	r3, r2
 80048ae:	3368      	adds	r3, #104	@ 0x68
 80048b0:	781b      	ldrb	r3, [r3, #0]
 80048b2:	b2db      	uxtb	r3, r3
 80048b4:	2b02      	cmp	r3, #2
 80048b6:	d002      	beq.n	80048be <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 80048b8:	2300      	movs	r3, #0
 80048ba:	61fb      	str	r3, [r7, #28]
 80048bc:	e010      	b.n	80048e0 <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 80048be:	4b10      	ldr	r3, [pc, #64]	@ (8004900 <xTaskGenericNotifyWait+0x11c>)
 80048c0:	681a      	ldr	r2, [r3, #0]
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	3318      	adds	r3, #24
 80048c6:	009b      	lsls	r3, r3, #2
 80048c8:	4413      	add	r3, r2
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	43db      	mvns	r3, r3
 80048d0:	4019      	ands	r1, r3
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3318      	adds	r3, #24
 80048d6:	009b      	lsls	r3, r3, #2
 80048d8:	4413      	add	r3, r2
 80048da:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 80048dc:	2301      	movs	r3, #1
 80048de:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 80048e0:	4b07      	ldr	r3, [pc, #28]	@ (8004900 <xTaskGenericNotifyWait+0x11c>)
 80048e2:	681a      	ldr	r2, [r3, #0]
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	4413      	add	r3, r2
 80048e8:	3368      	adds	r3, #104	@ 0x68
 80048ea:	2200      	movs	r2, #0
 80048ec:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80048ee:	f000 fd53 	bl	8005398 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 80048f2:	69fb      	ldr	r3, [r7, #28]
    }
 80048f4:	4618      	mov	r0, r3
 80048f6:	3720      	adds	r7, #32
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	080227e4 	.word	0x080227e4
 8004900:	20000ab4 	.word	0x20000ab4
 8004904:	e000ed04 	.word	0xe000ed04

08004908 <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004908:	b580      	push	{r7, lr}
 800490a:	b08a      	sub	sp, #40	@ 0x28
 800490c:	af00      	add	r7, sp, #0
 800490e:	60f8      	str	r0, [r7, #12]
 8004910:	60b9      	str	r1, [r7, #8]
 8004912:	607a      	str	r2, [r7, #4]
 8004914:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8004916:	2301      	movs	r3, #1
 8004918:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d004      	beq.n	800492a <xTaskGenericNotify+0x22>
 8004920:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 8004924:	487b      	ldr	r0, [pc, #492]	@ (8004b14 <xTaskGenericNotify+0x20c>)
 8004926:	f7fc fc03 	bl	8001130 <vAssertCalled>
        configASSERT( xTaskToNotify );
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d104      	bne.n	800493a <xTaskGenericNotify+0x32>
 8004930:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 8004934:	4877      	ldr	r0, [pc, #476]	@ (8004b14 <xTaskGenericNotify+0x20c>)
 8004936:	f7fc fbfb 	bl	8001130 <vAssertCalled>
        pxTCB = xTaskToNotify;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 800493e:	f000 fcff 	bl	8005340 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8004942:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004944:	2b00      	cmp	r3, #0
 8004946:	d007      	beq.n	8004958 <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004948:	6a3a      	ldr	r2, [r7, #32]
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	3318      	adds	r3, #24
 800494e:	009b      	lsls	r3, r3, #2
 8004950:	4413      	add	r3, r2
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004956:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004958:	6a3a      	ldr	r2, [r7, #32]
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	4413      	add	r3, r2
 800495e:	3368      	adds	r3, #104	@ 0x68
 8004960:	781b      	ldrb	r3, [r3, #0]
 8004962:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004964:	6a3a      	ldr	r2, [r7, #32]
 8004966:	68bb      	ldr	r3, [r7, #8]
 8004968:	4413      	add	r3, r2
 800496a:	3368      	adds	r3, #104	@ 0x68
 800496c:	2202      	movs	r2, #2
 800496e:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004970:	78fb      	ldrb	r3, [r7, #3]
 8004972:	2b04      	cmp	r3, #4
 8004974:	d83f      	bhi.n	80049f6 <xTaskGenericNotify+0xee>
 8004976:	a201      	add	r2, pc, #4	@ (adr r2, 800497c <xTaskGenericNotify+0x74>)
 8004978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800497c:	08004a0b 	.word	0x08004a0b
 8004980:	08004991 	.word	0x08004991
 8004984:	080049af 	.word	0x080049af
 8004988:	080049cb 	.word	0x080049cb
 800498c:	080049db 	.word	0x080049db
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004990:	6a3a      	ldr	r2, [r7, #32]
 8004992:	68bb      	ldr	r3, [r7, #8]
 8004994:	3318      	adds	r3, #24
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	4413      	add	r3, r2
 800499a:	685a      	ldr	r2, [r3, #4]
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	431a      	orrs	r2, r3
 80049a0:	6a39      	ldr	r1, [r7, #32]
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	3318      	adds	r3, #24
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	605a      	str	r2, [r3, #4]
                    break;
 80049ac:	e030      	b.n	8004a10 <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 80049ae:	6a3a      	ldr	r2, [r7, #32]
 80049b0:	68bb      	ldr	r3, [r7, #8]
 80049b2:	3318      	adds	r3, #24
 80049b4:	009b      	lsls	r3, r3, #2
 80049b6:	4413      	add	r3, r2
 80049b8:	685b      	ldr	r3, [r3, #4]
 80049ba:	1c5a      	adds	r2, r3, #1
 80049bc:	6a39      	ldr	r1, [r7, #32]
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	3318      	adds	r3, #24
 80049c2:	009b      	lsls	r3, r3, #2
 80049c4:	440b      	add	r3, r1
 80049c6:	605a      	str	r2, [r3, #4]
                    break;
 80049c8:	e022      	b.n	8004a10 <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80049ca:	6a3a      	ldr	r2, [r7, #32]
 80049cc:	68bb      	ldr	r3, [r7, #8]
 80049ce:	3318      	adds	r3, #24
 80049d0:	009b      	lsls	r3, r3, #2
 80049d2:	4413      	add	r3, r2
 80049d4:	687a      	ldr	r2, [r7, #4]
 80049d6:	605a      	str	r2, [r3, #4]
                    break;
 80049d8:	e01a      	b.n	8004a10 <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80049da:	7ffb      	ldrb	r3, [r7, #31]
 80049dc:	2b02      	cmp	r3, #2
 80049de:	d007      	beq.n	80049f0 <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 80049e0:	6a3a      	ldr	r2, [r7, #32]
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	3318      	adds	r3, #24
 80049e6:	009b      	lsls	r3, r3, #2
 80049e8:	4413      	add	r3, r2
 80049ea:	687a      	ldr	r2, [r7, #4]
 80049ec:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 80049ee:	e00f      	b.n	8004a10 <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 80049f0:	2300      	movs	r3, #0
 80049f2:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 80049f4:	e00c      	b.n	8004a10 <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 80049f6:	4b48      	ldr	r3, [pc, #288]	@ (8004b18 <xTaskGenericNotify+0x210>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d007      	beq.n	8004a0e <xTaskGenericNotify+0x106>
 80049fe:	f641 61da 	movw	r1, #7898	@ 0x1eda
 8004a02:	4844      	ldr	r0, [pc, #272]	@ (8004b14 <xTaskGenericNotify+0x20c>)
 8004a04:	f7fc fb94 	bl	8001130 <vAssertCalled>

                    break;
 8004a08:	e001      	b.n	8004a0e <xTaskGenericNotify+0x106>
                    break;
 8004a0a:	bf00      	nop
 8004a0c:	e000      	b.n	8004a10 <xTaskGenericNotify+0x108>
                    break;
 8004a0e:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004a10:	7ffb      	ldrb	r3, [r7, #31]
 8004a12:	2b01      	cmp	r3, #1
 8004a14:	d177      	bne.n	8004b06 <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004a16:	6a3b      	ldr	r3, [r7, #32]
 8004a18:	695b      	ldr	r3, [r3, #20]
 8004a1a:	61bb      	str	r3, [r7, #24]
 8004a1c:	6a3b      	ldr	r3, [r7, #32]
 8004a1e:	689b      	ldr	r3, [r3, #8]
 8004a20:	6a3a      	ldr	r2, [r7, #32]
 8004a22:	68d2      	ldr	r2, [r2, #12]
 8004a24:	609a      	str	r2, [r3, #8]
 8004a26:	6a3b      	ldr	r3, [r7, #32]
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	6a3a      	ldr	r2, [r7, #32]
 8004a2c:	6892      	ldr	r2, [r2, #8]
 8004a2e:	605a      	str	r2, [r3, #4]
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	685a      	ldr	r2, [r3, #4]
 8004a34:	6a3b      	ldr	r3, [r7, #32]
 8004a36:	3304      	adds	r3, #4
 8004a38:	429a      	cmp	r2, r3
 8004a3a:	d103      	bne.n	8004a44 <xTaskGenericNotify+0x13c>
 8004a3c:	6a3b      	ldr	r3, [r7, #32]
 8004a3e:	68da      	ldr	r2, [r3, #12]
 8004a40:	69bb      	ldr	r3, [r7, #24]
 8004a42:	605a      	str	r2, [r3, #4]
 8004a44:	6a3b      	ldr	r3, [r7, #32]
 8004a46:	2200      	movs	r2, #0
 8004a48:	615a      	str	r2, [r3, #20]
 8004a4a:	69bb      	ldr	r3, [r7, #24]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	1e5a      	subs	r2, r3, #1
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8004a54:	6a3b      	ldr	r3, [r7, #32]
 8004a56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a58:	2201      	movs	r2, #1
 8004a5a:	409a      	lsls	r2, r3
 8004a5c:	4b2f      	ldr	r3, [pc, #188]	@ (8004b1c <xTaskGenericNotify+0x214>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	4a2e      	ldr	r2, [pc, #184]	@ (8004b1c <xTaskGenericNotify+0x214>)
 8004a64:	6013      	str	r3, [r2, #0]
 8004a66:	6a3b      	ldr	r3, [r7, #32]
 8004a68:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a6a:	492d      	ldr	r1, [pc, #180]	@ (8004b20 <xTaskGenericNotify+0x218>)
 8004a6c:	4613      	mov	r3, r2
 8004a6e:	009b      	lsls	r3, r3, #2
 8004a70:	4413      	add	r3, r2
 8004a72:	009b      	lsls	r3, r3, #2
 8004a74:	440b      	add	r3, r1
 8004a76:	3304      	adds	r3, #4
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	6a3b      	ldr	r3, [r7, #32]
 8004a7e:	697a      	ldr	r2, [r7, #20]
 8004a80:	609a      	str	r2, [r3, #8]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	6a3b      	ldr	r3, [r7, #32]
 8004a88:	60da      	str	r2, [r3, #12]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	6a3a      	ldr	r2, [r7, #32]
 8004a90:	3204      	adds	r2, #4
 8004a92:	605a      	str	r2, [r3, #4]
 8004a94:	6a3b      	ldr	r3, [r7, #32]
 8004a96:	1d1a      	adds	r2, r3, #4
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	6a3b      	ldr	r3, [r7, #32]
 8004a9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aa0:	4613      	mov	r3, r2
 8004aa2:	009b      	lsls	r3, r3, #2
 8004aa4:	4413      	add	r3, r2
 8004aa6:	009b      	lsls	r3, r3, #2
 8004aa8:	4a1d      	ldr	r2, [pc, #116]	@ (8004b20 <xTaskGenericNotify+0x218>)
 8004aaa:	441a      	add	r2, r3
 8004aac:	6a3b      	ldr	r3, [r7, #32]
 8004aae:	615a      	str	r2, [r3, #20]
 8004ab0:	6a3b      	ldr	r3, [r7, #32]
 8004ab2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab4:	491a      	ldr	r1, [pc, #104]	@ (8004b20 <xTaskGenericNotify+0x218>)
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	6a3a      	ldr	r2, [r7, #32]
 8004ac4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004ac6:	1c59      	adds	r1, r3, #1
 8004ac8:	4815      	ldr	r0, [pc, #84]	@ (8004b20 <xTaskGenericNotify+0x218>)
 8004aca:	4613      	mov	r3, r2
 8004acc:	009b      	lsls	r3, r3, #2
 8004ace:	4413      	add	r3, r2
 8004ad0:	009b      	lsls	r3, r3, #2
 8004ad2:	4403      	add	r3, r0
 8004ad4:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004ad6:	6a3b      	ldr	r3, [r7, #32]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d004      	beq.n	8004ae8 <xTaskGenericNotify+0x1e0>
 8004ade:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 8004ae2:	480c      	ldr	r0, [pc, #48]	@ (8004b14 <xTaskGenericNotify+0x20c>)
 8004ae4:	f7fc fb24 	bl	8001130 <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8004ae8:	4b0e      	ldr	r3, [pc, #56]	@ (8004b24 <xTaskGenericNotify+0x21c>)
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004aee:	6a3b      	ldr	r3, [r7, #32]
 8004af0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d207      	bcs.n	8004b06 <xTaskGenericNotify+0x1fe>
 8004af6:	4b0c      	ldr	r3, [pc, #48]	@ (8004b28 <xTaskGenericNotify+0x220>)
 8004af8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004afc:	601a      	str	r2, [r3, #0]
 8004afe:	f3bf 8f4f 	dsb	sy
 8004b02:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004b06:	f000 fc47 	bl	8005398 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8004b0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	3728      	adds	r7, #40	@ 0x28
 8004b10:	46bd      	mov	sp, r7
 8004b12:	bd80      	pop	{r7, pc}
 8004b14:	080227e4 	.word	0x080227e4
 8004b18:	20000bb8 	.word	0x20000bb8
 8004b1c:	20000bbc 	.word	0x20000bbc
 8004b20:	20000ab8 	.word	0x20000ab8
 8004b24:	20000ab4 	.word	0x20000ab4
 8004b28:	e000ed04 	.word	0xe000ed04

08004b2c <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08e      	sub	sp, #56	@ 0x38
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	607a      	str	r2, [r7, #4]
 8004b38:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004b3a:	2301      	movs	r3, #1
 8004b3c:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d104      	bne.n	8004b4e <xTaskGenericNotifyFromISR+0x22>
 8004b44:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 8004b48:	4899      	ldr	r0, [pc, #612]	@ (8004db0 <xTaskGenericNotifyFromISR+0x284>)
 8004b4a:	f7fc faf1 	bl	8001130 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004b4e:	68bb      	ldr	r3, [r7, #8]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d004      	beq.n	8004b5e <xTaskGenericNotifyFromISR+0x32>
 8004b54:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 8004b58:	4895      	ldr	r0, [pc, #596]	@ (8004db0 <xTaskGenericNotifyFromISR+0x284>)
 8004b5a:	f7fc fae9 	bl	8001130 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004b5e:	f000 fcbd 	bl	80054dc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8004b66:	f3ef 8211 	mrs	r2, BASEPRI
 8004b6a:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004b6e:	b672      	cpsid	i
 8004b70:	f383 8811 	msr	BASEPRI, r3
 8004b74:	f3bf 8f6f 	isb	sy
 8004b78:	f3bf 8f4f 	dsb	sy
 8004b7c:	b662      	cpsie	i
 8004b7e:	61ba      	str	r2, [r7, #24]
 8004b80:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8004b82:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8004b84:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 8004b86:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d007      	beq.n	8004b9c <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004b8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	3318      	adds	r3, #24
 8004b92:	009b      	lsls	r3, r3, #2
 8004b94:	4413      	add	r3, r2
 8004b96:	685a      	ldr	r2, [r3, #4]
 8004b98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004b9a:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004b9c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	4413      	add	r3, r2
 8004ba2:	3368      	adds	r3, #104	@ 0x68
 8004ba4:	781b      	ldrb	r3, [r3, #0]
 8004ba6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004baa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	4413      	add	r3, r2
 8004bb0:	3368      	adds	r3, #104	@ 0x68
 8004bb2:	2202      	movs	r2, #2
 8004bb4:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004bb6:	78fb      	ldrb	r3, [r7, #3]
 8004bb8:	2b04      	cmp	r3, #4
 8004bba:	d841      	bhi.n	8004c40 <xTaskGenericNotifyFromISR+0x114>
 8004bbc:	a201      	add	r2, pc, #4	@ (adr r2, 8004bc4 <xTaskGenericNotifyFromISR+0x98>)
 8004bbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004bc2:	bf00      	nop
 8004bc4:	08004c55 	.word	0x08004c55
 8004bc8:	08004bd9 	.word	0x08004bd9
 8004bcc:	08004bf7 	.word	0x08004bf7
 8004bd0:	08004c13 	.word	0x08004c13
 8004bd4:	08004c23 	.word	0x08004c23
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004bd8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	3318      	adds	r3, #24
 8004bde:	009b      	lsls	r3, r3, #2
 8004be0:	4413      	add	r3, r2
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	431a      	orrs	r2, r3
 8004be8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	3318      	adds	r3, #24
 8004bee:	009b      	lsls	r3, r3, #2
 8004bf0:	440b      	add	r3, r1
 8004bf2:	605a      	str	r2, [r3, #4]
                    break;
 8004bf4:	e031      	b.n	8004c5a <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	3318      	adds	r3, #24
 8004bfc:	009b      	lsls	r3, r3, #2
 8004bfe:	4413      	add	r3, r2
 8004c00:	685b      	ldr	r3, [r3, #4]
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	3318      	adds	r3, #24
 8004c0a:	009b      	lsls	r3, r3, #2
 8004c0c:	440b      	add	r3, r1
 8004c0e:	605a      	str	r2, [r3, #4]
                    break;
 8004c10:	e023      	b.n	8004c5a <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004c12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	3318      	adds	r3, #24
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	605a      	str	r2, [r3, #4]
                    break;
 8004c20:	e01b      	b.n	8004c5a <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004c22:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c26:	2b02      	cmp	r3, #2
 8004c28:	d007      	beq.n	8004c3a <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004c2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c2c:	68bb      	ldr	r3, [r7, #8]
 8004c2e:	3318      	adds	r3, #24
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	687a      	ldr	r2, [r7, #4]
 8004c36:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004c38:	e00f      	b.n	8004c5a <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8004c3e:	e00c      	b.n	8004c5a <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004c40:	4b5c      	ldr	r3, [pc, #368]	@ (8004db4 <xTaskGenericNotifyFromISR+0x288>)
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d007      	beq.n	8004c58 <xTaskGenericNotifyFromISR+0x12c>
 8004c48:	f641 7169 	movw	r1, #8041	@ 0x1f69
 8004c4c:	4858      	ldr	r0, [pc, #352]	@ (8004db0 <xTaskGenericNotifyFromISR+0x284>)
 8004c4e:	f7fc fa6f 	bl	8001130 <vAssertCalled>
                    break;
 8004c52:	e001      	b.n	8004c58 <xTaskGenericNotifyFromISR+0x12c>
                    break;
 8004c54:	bf00      	nop
 8004c56:	e000      	b.n	8004c5a <xTaskGenericNotifyFromISR+0x12e>
                    break;
 8004c58:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004c5a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8004c5e:	2b01      	cmp	r3, #1
 8004c60:	f040 809a 	bne.w	8004d98 <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004c64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d004      	beq.n	8004c76 <xTaskGenericNotifyFromISR+0x14a>
 8004c6c:	f641 7174 	movw	r1, #8052	@ 0x1f74
 8004c70:	484f      	ldr	r0, [pc, #316]	@ (8004db0 <xTaskGenericNotifyFromISR+0x284>)
 8004c72:	f7fc fa5d 	bl	8001130 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004c76:	4b50      	ldr	r3, [pc, #320]	@ (8004db8 <xTaskGenericNotifyFromISR+0x28c>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d160      	bne.n	8004d40 <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004c7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c80:	695b      	ldr	r3, [r3, #20]
 8004c82:	623b      	str	r3, [r7, #32]
 8004c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c8a:	68d2      	ldr	r2, [r2, #12]
 8004c8c:	609a      	str	r2, [r3, #8]
 8004c8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c90:	68db      	ldr	r3, [r3, #12]
 8004c92:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004c94:	6892      	ldr	r2, [r2, #8]
 8004c96:	605a      	str	r2, [r3, #4]
 8004c98:	6a3b      	ldr	r3, [r7, #32]
 8004c9a:	685a      	ldr	r2, [r3, #4]
 8004c9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c9e:	3304      	adds	r3, #4
 8004ca0:	429a      	cmp	r2, r3
 8004ca2:	d103      	bne.n	8004cac <xTaskGenericNotifyFromISR+0x180>
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca6:	68da      	ldr	r2, [r3, #12]
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	605a      	str	r2, [r3, #4]
 8004cac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cae:	2200      	movs	r2, #0
 8004cb0:	615a      	str	r2, [r3, #20]
 8004cb2:	6a3b      	ldr	r3, [r7, #32]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	1e5a      	subs	r2, r3, #1
 8004cb8:	6a3b      	ldr	r3, [r7, #32]
 8004cba:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004cbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	2201      	movs	r2, #1
 8004cc2:	409a      	lsls	r2, r3
 8004cc4:	4b3d      	ldr	r3, [pc, #244]	@ (8004dbc <xTaskGenericNotifyFromISR+0x290>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	4a3c      	ldr	r2, [pc, #240]	@ (8004dbc <xTaskGenericNotifyFromISR+0x290>)
 8004ccc:	6013      	str	r3, [r2, #0]
 8004cce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004cd2:	493b      	ldr	r1, [pc, #236]	@ (8004dc0 <xTaskGenericNotifyFromISR+0x294>)
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	4413      	add	r3, r2
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	440b      	add	r3, r1
 8004cde:	3304      	adds	r3, #4
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	61fb      	str	r3, [r7, #28]
 8004ce4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	609a      	str	r2, [r3, #8]
 8004cea:	69fb      	ldr	r3, [r7, #28]
 8004cec:	689a      	ldr	r2, [r3, #8]
 8004cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf0:	60da      	str	r2, [r3, #12]
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	689b      	ldr	r3, [r3, #8]
 8004cf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cf8:	3204      	adds	r2, #4
 8004cfa:	605a      	str	r2, [r3, #4]
 8004cfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cfe:	1d1a      	adds	r2, r3, #4
 8004d00:	69fb      	ldr	r3, [r7, #28]
 8004d02:	609a      	str	r2, [r3, #8]
 8004d04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d08:	4613      	mov	r3, r2
 8004d0a:	009b      	lsls	r3, r3, #2
 8004d0c:	4413      	add	r3, r2
 8004d0e:	009b      	lsls	r3, r3, #2
 8004d10:	4a2b      	ldr	r2, [pc, #172]	@ (8004dc0 <xTaskGenericNotifyFromISR+0x294>)
 8004d12:	441a      	add	r2, r3
 8004d14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d16:	615a      	str	r2, [r3, #20]
 8004d18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d1c:	4928      	ldr	r1, [pc, #160]	@ (8004dc0 <xTaskGenericNotifyFromISR+0x294>)
 8004d1e:	4613      	mov	r3, r2
 8004d20:	009b      	lsls	r3, r3, #2
 8004d22:	4413      	add	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	440b      	add	r3, r1
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d2c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004d2e:	1c59      	adds	r1, r3, #1
 8004d30:	4823      	ldr	r0, [pc, #140]	@ (8004dc0 <xTaskGenericNotifyFromISR+0x294>)
 8004d32:	4613      	mov	r3, r2
 8004d34:	009b      	lsls	r3, r3, #2
 8004d36:	4413      	add	r3, r2
 8004d38:	009b      	lsls	r3, r3, #2
 8004d3a:	4403      	add	r3, r0
 8004d3c:	6019      	str	r1, [r3, #0]
 8004d3e:	e01b      	b.n	8004d78 <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004d40:	4b20      	ldr	r3, [pc, #128]	@ (8004dc4 <xTaskGenericNotifyFromISR+0x298>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	627b      	str	r3, [r7, #36]	@ 0x24
 8004d46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004d4a:	61da      	str	r2, [r3, #28]
 8004d4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d4e:	689a      	ldr	r2, [r3, #8]
 8004d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d52:	621a      	str	r2, [r3, #32]
 8004d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d56:	689b      	ldr	r3, [r3, #8]
 8004d58:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d5a:	3218      	adds	r2, #24
 8004d5c:	605a      	str	r2, [r3, #4]
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d60:	f103 0218 	add.w	r2, r3, #24
 8004d64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d66:	609a      	str	r2, [r3, #8]
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	4a16      	ldr	r2, [pc, #88]	@ (8004dc4 <xTaskGenericNotifyFromISR+0x298>)
 8004d6c:	629a      	str	r2, [r3, #40]	@ 0x28
 8004d6e:	4b15      	ldr	r3, [pc, #84]	@ (8004dc4 <xTaskGenericNotifyFromISR+0x298>)
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3301      	adds	r3, #1
 8004d74:	4a13      	ldr	r2, [pc, #76]	@ (8004dc4 <xTaskGenericNotifyFromISR+0x298>)
 8004d76:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004d78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004d7c:	4b12      	ldr	r3, [pc, #72]	@ (8004dc8 <xTaskGenericNotifyFromISR+0x29c>)
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d908      	bls.n	8004d98 <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004d86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d002      	beq.n	8004d92 <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004d8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d8e:	2201      	movs	r2, #1
 8004d90:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8004d92:	4b0e      	ldr	r3, [pc, #56]	@ (8004dcc <xTaskGenericNotifyFromISR+0x2a0>)
 8004d94:	2201      	movs	r2, #1
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004d9a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 8004d9c:	693b      	ldr	r3, [r7, #16]
 8004d9e:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 8004da2:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 8004da4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8004da6:	4618      	mov	r0, r3
 8004da8:	3738      	adds	r7, #56	@ 0x38
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	080227e4 	.word	0x080227e4
 8004db4:	20000bb8 	.word	0x20000bb8
 8004db8:	20000bdc 	.word	0x20000bdc
 8004dbc:	20000bbc 	.word	0x20000bbc
 8004dc0:	20000ab8 	.word	0x20000ab8
 8004dc4:	20000b74 	.word	0x20000b74
 8004dc8:	20000ab4 	.word	0x20000ab4
 8004dcc:	20000bc8 	.word	0x20000bc8

08004dd0 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b08e      	sub	sp, #56	@ 0x38
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	60f8      	str	r0, [r7, #12]
 8004dd8:	60b9      	str	r1, [r7, #8]
 8004dda:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d104      	bne.n	8004dec <vTaskGenericNotifyGiveFromISR+0x1c>
 8004de2:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 8004de6:	4871      	ldr	r0, [pc, #452]	@ (8004fac <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8004de8:	f7fc f9a2 	bl	8001130 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d004      	beq.n	8004dfc <vTaskGenericNotifyGiveFromISR+0x2c>
 8004df2:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 8004df6:	486d      	ldr	r0, [pc, #436]	@ (8004fac <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8004df8:	f7fc f99a 	bl	8001130 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dfc:	f000 fb6e 	bl	80054dc <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8004e04:	f3ef 8211 	mrs	r2, BASEPRI
 8004e08:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004e0c:	b672      	cpsid	i
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	b662      	cpsie	i
 8004e1c:	61fa      	str	r2, [r7, #28]
 8004e1e:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8004e20:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8004e22:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004e24:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e26:	68bb      	ldr	r3, [r7, #8]
 8004e28:	4413      	add	r3, r2
 8004e2a:	3368      	adds	r3, #104	@ 0x68
 8004e2c:	781b      	ldrb	r3, [r3, #0]
 8004e2e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004e32:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e34:	68bb      	ldr	r3, [r7, #8]
 8004e36:	4413      	add	r3, r2
 8004e38:	3368      	adds	r3, #104	@ 0x68
 8004e3a:	2202      	movs	r2, #2
 8004e3c:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004e3e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	3318      	adds	r3, #24
 8004e44:	009b      	lsls	r3, r3, #2
 8004e46:	4413      	add	r3, r2
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	1c5a      	adds	r2, r3, #1
 8004e4c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8004e4e:	68bb      	ldr	r3, [r7, #8]
 8004e50:	3318      	adds	r3, #24
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	440b      	add	r3, r1
 8004e56:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004e58:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8004e5c:	2b01      	cmp	r3, #1
 8004e5e:	f040 809a 	bne.w	8004f96 <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004e62:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e64:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d004      	beq.n	8004e74 <vTaskGenericNotifyGiveFromISR+0xa4>
 8004e6a:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 8004e6e:	484f      	ldr	r0, [pc, #316]	@ (8004fac <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8004e70:	f7fc f95e 	bl	8001130 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8004e74:	4b4e      	ldr	r3, [pc, #312]	@ (8004fb0 <vTaskGenericNotifyGiveFromISR+0x1e0>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d160      	bne.n	8004f3e <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004e7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e88:	68d2      	ldr	r2, [r2, #12]
 8004e8a:	609a      	str	r2, [r3, #8]
 8004e8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004e92:	6892      	ldr	r2, [r2, #8]
 8004e94:	605a      	str	r2, [r3, #4]
 8004e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e9c:	3304      	adds	r3, #4
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d103      	bne.n	8004eaa <vTaskGenericNotifyGiveFromISR+0xda>
 8004ea2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ea4:	68da      	ldr	r2, [r3, #12]
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	605a      	str	r2, [r3, #4]
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eac:	2200      	movs	r2, #0
 8004eae:	615a      	str	r2, [r3, #20]
 8004eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	1e5a      	subs	r2, r3, #1
 8004eb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb8:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004eba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ebc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	409a      	lsls	r2, r3
 8004ec2:	4b3c      	ldr	r3, [pc, #240]	@ (8004fb4 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	4313      	orrs	r3, r2
 8004ec8:	4a3a      	ldr	r2, [pc, #232]	@ (8004fb4 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 8004eca:	6013      	str	r3, [r2, #0]
 8004ecc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ece:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ed0:	4939      	ldr	r1, [pc, #228]	@ (8004fb8 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	3304      	adds	r3, #4
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	623b      	str	r3, [r7, #32]
 8004ee2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ee4:	6a3a      	ldr	r2, [r7, #32]
 8004ee6:	609a      	str	r2, [r3, #8]
 8004ee8:	6a3b      	ldr	r3, [r7, #32]
 8004eea:	689a      	ldr	r2, [r3, #8]
 8004eec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004eee:	60da      	str	r2, [r3, #12]
 8004ef0:	6a3b      	ldr	r3, [r7, #32]
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004ef6:	3204      	adds	r2, #4
 8004ef8:	605a      	str	r2, [r3, #4]
 8004efa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004efc:	1d1a      	adds	r2, r3, #4
 8004efe:	6a3b      	ldr	r3, [r7, #32]
 8004f00:	609a      	str	r2, [r3, #8]
 8004f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f04:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f06:	4613      	mov	r3, r2
 8004f08:	009b      	lsls	r3, r3, #2
 8004f0a:	4413      	add	r3, r2
 8004f0c:	009b      	lsls	r3, r3, #2
 8004f0e:	4a2a      	ldr	r2, [pc, #168]	@ (8004fb8 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8004f10:	441a      	add	r2, r3
 8004f12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f14:	615a      	str	r2, [r3, #20]
 8004f16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f1a:	4927      	ldr	r1, [pc, #156]	@ (8004fb8 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8004f1c:	4613      	mov	r3, r2
 8004f1e:	009b      	lsls	r3, r3, #2
 8004f20:	4413      	add	r3, r2
 8004f22:	009b      	lsls	r3, r3, #2
 8004f24:	440b      	add	r3, r1
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f2a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004f2c:	1c59      	adds	r1, r3, #1
 8004f2e:	4822      	ldr	r0, [pc, #136]	@ (8004fb8 <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8004f30:	4613      	mov	r3, r2
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	009b      	lsls	r3, r3, #2
 8004f38:	4403      	add	r3, r0
 8004f3a:	6019      	str	r1, [r3, #0]
 8004f3c:	e01b      	b.n	8004f76 <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8004f3e:	4b1f      	ldr	r3, [pc, #124]	@ (8004fbc <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004f44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f46:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f48:	61da      	str	r2, [r3, #28]
 8004f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f4c:	689a      	ldr	r2, [r3, #8]
 8004f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f50:	621a      	str	r2, [r3, #32]
 8004f52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004f58:	3218      	adds	r2, #24
 8004f5a:	605a      	str	r2, [r3, #4]
 8004f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f5e:	f103 0218 	add.w	r2, r3, #24
 8004f62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f64:	609a      	str	r2, [r3, #8]
 8004f66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f68:	4a14      	ldr	r2, [pc, #80]	@ (8004fbc <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8004f6a:	629a      	str	r2, [r3, #40]	@ 0x28
 8004f6c:	4b13      	ldr	r3, [pc, #76]	@ (8004fbc <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	3301      	adds	r3, #1
 8004f72:	4a12      	ldr	r2, [pc, #72]	@ (8004fbc <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8004f74:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004f76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f7a:	4b11      	ldr	r3, [pc, #68]	@ (8004fc0 <vTaskGenericNotifyGiveFromISR+0x1f0>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d908      	bls.n	8004f96 <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d002      	beq.n	8004f90 <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 8004f8a:	687b      	ldr	r3, [r7, #4]
 8004f8c:	2201      	movs	r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 8004f90:	4b0c      	ldr	r3, [pc, #48]	@ (8004fc4 <vTaskGenericNotifyGiveFromISR+0x1f4>)
 8004f92:	2201      	movs	r2, #1
 8004f94:	601a      	str	r2, [r3, #0]
 8004f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f98:	617b      	str	r3, [r7, #20]
    __asm volatile
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	f383 8811 	msr	BASEPRI, r3
}
 8004fa0:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 8004fa2:	bf00      	nop
 8004fa4:	3738      	adds	r7, #56	@ 0x38
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	080227e4 	.word	0x080227e4
 8004fb0:	20000bdc 	.word	0x20000bdc
 8004fb4:	20000bbc 	.word	0x20000bbc
 8004fb8:	20000ab8 	.word	0x20000ab8
 8004fbc:	20000b74 	.word	0x20000b74
 8004fc0:	20000ab4 	.word	0x20000ab4
 8004fc4:	20000bc8 	.word	0x20000bc8

08004fc8 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b088      	sub	sp, #32
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004fd2:	4b37      	ldr	r3, [pc, #220]	@ (80050b0 <prvAddCurrentTaskToDelayedList+0xe8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 8004fd8:	4b36      	ldr	r3, [pc, #216]	@ (80050b4 <prvAddCurrentTaskToDelayedList+0xec>)
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 8004fde:	4b36      	ldr	r3, [pc, #216]	@ (80050b8 <prvAddCurrentTaskToDelayedList+0xf0>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe4:	4b35      	ldr	r3, [pc, #212]	@ (80050bc <prvAddCurrentTaskToDelayedList+0xf4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	3304      	adds	r3, #4
 8004fea:	4618      	mov	r0, r3
 8004fec:	f7fd fade 	bl	80025ac <uxListRemove>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d10b      	bne.n	800500e <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 8004ff6:	4b31      	ldr	r3, [pc, #196]	@ (80050bc <prvAddCurrentTaskToDelayedList+0xf4>)
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004ffc:	2201      	movs	r2, #1
 8004ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8005002:	43da      	mvns	r2, r3
 8005004:	4b2e      	ldr	r3, [pc, #184]	@ (80050c0 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4013      	ands	r3, r2
 800500a:	4a2d      	ldr	r2, [pc, #180]	@ (80050c0 <prvAddCurrentTaskToDelayedList+0xf8>)
 800500c:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005014:	d124      	bne.n	8005060 <prvAddCurrentTaskToDelayedList+0x98>
 8005016:	683b      	ldr	r3, [r7, #0]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d021      	beq.n	8005060 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800501c:	4b29      	ldr	r3, [pc, #164]	@ (80050c4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	613b      	str	r3, [r7, #16]
 8005022:	4b26      	ldr	r3, [pc, #152]	@ (80050bc <prvAddCurrentTaskToDelayedList+0xf4>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	693a      	ldr	r2, [r7, #16]
 8005028:	609a      	str	r2, [r3, #8]
 800502a:	4b24      	ldr	r3, [pc, #144]	@ (80050bc <prvAddCurrentTaskToDelayedList+0xf4>)
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	693a      	ldr	r2, [r7, #16]
 8005030:	6892      	ldr	r2, [r2, #8]
 8005032:	60da      	str	r2, [r3, #12]
 8005034:	4b21      	ldr	r3, [pc, #132]	@ (80050bc <prvAddCurrentTaskToDelayedList+0xf4>)
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	689b      	ldr	r3, [r3, #8]
 800503c:	3204      	adds	r2, #4
 800503e:	605a      	str	r2, [r3, #4]
 8005040:	4b1e      	ldr	r3, [pc, #120]	@ (80050bc <prvAddCurrentTaskToDelayedList+0xf4>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	1d1a      	adds	r2, r3, #4
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	609a      	str	r2, [r3, #8]
 800504a:	4b1c      	ldr	r3, [pc, #112]	@ (80050bc <prvAddCurrentTaskToDelayedList+0xf4>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	4a1d      	ldr	r2, [pc, #116]	@ (80050c4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005050:	615a      	str	r2, [r3, #20]
 8005052:	4b1c      	ldr	r3, [pc, #112]	@ (80050c4 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	3301      	adds	r3, #1
 8005058:	4a1a      	ldr	r2, [pc, #104]	@ (80050c4 <prvAddCurrentTaskToDelayedList+0xfc>)
 800505a:	6013      	str	r3, [r2, #0]
 800505c:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 800505e:	e022      	b.n	80050a6 <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005060:	69fa      	ldr	r2, [r7, #28]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4413      	add	r3, r2
 8005066:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005068:	4b14      	ldr	r3, [pc, #80]	@ (80050bc <prvAddCurrentTaskToDelayedList+0xf4>)
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	68fa      	ldr	r2, [r7, #12]
 800506e:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	429a      	cmp	r2, r3
 8005076:	d207      	bcs.n	8005088 <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005078:	4b10      	ldr	r3, [pc, #64]	@ (80050bc <prvAddCurrentTaskToDelayedList+0xf4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	3304      	adds	r3, #4
 800507e:	4619      	mov	r1, r3
 8005080:	6978      	ldr	r0, [r7, #20]
 8005082:	f7fd fa5a 	bl	800253a <vListInsert>
}
 8005086:	e00e      	b.n	80050a6 <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 8005088:	4b0c      	ldr	r3, [pc, #48]	@ (80050bc <prvAddCurrentTaskToDelayedList+0xf4>)
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	3304      	adds	r3, #4
 800508e:	4619      	mov	r1, r3
 8005090:	69b8      	ldr	r0, [r7, #24]
 8005092:	f7fd fa52 	bl	800253a <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 8005096:	4b0c      	ldr	r3, [pc, #48]	@ (80050c8 <prvAddCurrentTaskToDelayedList+0x100>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	68fa      	ldr	r2, [r7, #12]
 800509c:	429a      	cmp	r2, r3
 800509e:	d202      	bcs.n	80050a6 <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80050a0:	4a09      	ldr	r2, [pc, #36]	@ (80050c8 <prvAddCurrentTaskToDelayedList+0x100>)
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	6013      	str	r3, [r2, #0]
}
 80050a6:	bf00      	nop
 80050a8:	3720      	adds	r7, #32
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	20000bb8 	.word	0x20000bb8
 80050b4:	20000b6c 	.word	0x20000b6c
 80050b8:	20000b70 	.word	0x20000b70
 80050bc:	20000ab4 	.word	0x20000ab4
 80050c0:	20000bbc 	.word	0x20000bbc
 80050c4:	20000ba0 	.word	0x20000ba0
 80050c8:	20000bd4 	.word	0x20000bd4

080050cc <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	3b04      	subs	r3, #4
 80050dc:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80050e4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3b04      	subs	r3, #4
 80050ea:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80050ec:	68bb      	ldr	r3, [r7, #8]
 80050ee:	f023 0201 	bic.w	r2, r3, #1
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	3b04      	subs	r3, #4
 80050fa:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80050fc:	4a0c      	ldr	r2, [pc, #48]	@ (8005130 <pxPortInitialiseStack+0x64>)
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	3b14      	subs	r3, #20
 8005106:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 8005108:	687a      	ldr	r2, [r7, #4]
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	3b04      	subs	r3, #4
 8005112:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	f06f 0202 	mvn.w	r2, #2
 800511a:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	3b20      	subs	r3, #32
 8005120:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005122:	68fb      	ldr	r3, [r7, #12]
}
 8005124:	4618      	mov	r0, r3
 8005126:	3714      	adds	r7, #20
 8005128:	46bd      	mov	sp, r7
 800512a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512e:	4770      	bx	lr
 8005130:	08005135 	.word	0x08005135

08005134 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800513a:	2300      	movs	r3, #0
 800513c:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 800513e:	4b0f      	ldr	r3, [pc, #60]	@ (800517c <prvTaskExitError+0x48>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005146:	d003      	beq.n	8005150 <prvTaskExitError+0x1c>
 8005148:	21ee      	movs	r1, #238	@ 0xee
 800514a:	480d      	ldr	r0, [pc, #52]	@ (8005180 <prvTaskExitError+0x4c>)
 800514c:	f7fb fff0 	bl	8001130 <vAssertCalled>
    __asm volatile
 8005150:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005154:	b672      	cpsid	i
 8005156:	f383 8811 	msr	BASEPRI, r3
 800515a:	f3bf 8f6f 	isb	sy
 800515e:	f3bf 8f4f 	dsb	sy
 8005162:	b662      	cpsie	i
 8005164:	607b      	str	r3, [r7, #4]
}
 8005166:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8005168:	bf00      	nop
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2b00      	cmp	r3, #0
 800516e:	d0fc      	beq.n	800516a <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005170:	bf00      	nop
 8005172:	bf00      	nop
 8005174:	3708      	adds	r7, #8
 8005176:	46bd      	mov	sp, r7
 8005178:	bd80      	pop	{r7, pc}
 800517a:	bf00      	nop
 800517c:	2000000c 	.word	0x2000000c
 8005180:	08022810 	.word	0x08022810
	...

08005190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 8005190:	4b07      	ldr	r3, [pc, #28]	@ (80051b0 <pxCurrentTCBConst2>)
 8005192:	6819      	ldr	r1, [r3, #0]
 8005194:	6808      	ldr	r0, [r1, #0]
 8005196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800519a:	f380 8809 	msr	PSP, r0
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f04f 0000 	mov.w	r0, #0
 80051a6:	f380 8811 	msr	BASEPRI, r0
 80051aa:	4770      	bx	lr
 80051ac:	f3af 8000 	nop.w

080051b0 <pxCurrentTCBConst2>:
 80051b0:	20000ab4 	.word	0x20000ab4
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80051b4:	bf00      	nop
 80051b6:	bf00      	nop

080051b8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80051b8:	4808      	ldr	r0, [pc, #32]	@ (80051dc <prvPortStartFirstTask+0x24>)
 80051ba:	6800      	ldr	r0, [r0, #0]
 80051bc:	6800      	ldr	r0, [r0, #0]
 80051be:	f380 8808 	msr	MSP, r0
 80051c2:	f04f 0000 	mov.w	r0, #0
 80051c6:	f380 8814 	msr	CONTROL, r0
 80051ca:	b662      	cpsie	i
 80051cc:	b661      	cpsie	f
 80051ce:	f3bf 8f4f 	dsb	sy
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	df00      	svc	0
 80051d8:	bf00      	nop
 80051da:	0000      	.short	0x0000
 80051dc:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80051e0:	bf00      	nop
 80051e2:	bf00      	nop

080051e4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b086      	sub	sp, #24
 80051e8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80051ea:	4b4a      	ldr	r3, [pc, #296]	@ (8005314 <xPortStartScheduler+0x130>)
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	332c      	adds	r3, #44	@ 0x2c
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	4a48      	ldr	r2, [pc, #288]	@ (8005318 <xPortStartScheduler+0x134>)
 80051f8:	4293      	cmp	r3, r2
 80051fa:	d004      	beq.n	8005206 <xPortStartScheduler+0x22>
 80051fc:	f240 114b 	movw	r1, #331	@ 0x14b
 8005200:	4846      	ldr	r0, [pc, #280]	@ (800531c <xPortStartScheduler+0x138>)
 8005202:	f7fb ff95 	bl	8001130 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8005206:	697b      	ldr	r3, [r7, #20]
 8005208:	3338      	adds	r3, #56	@ 0x38
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	4a44      	ldr	r2, [pc, #272]	@ (8005320 <xPortStartScheduler+0x13c>)
 800520e:	4293      	cmp	r3, r2
 8005210:	d004      	beq.n	800521c <xPortStartScheduler+0x38>
 8005212:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8005216:	4841      	ldr	r0, [pc, #260]	@ (800531c <xPortStartScheduler+0x138>)
 8005218:	f7fb ff8a 	bl	8001130 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800521c:	2300      	movs	r3, #0
 800521e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005220:	4b40      	ldr	r3, [pc, #256]	@ (8005324 <xPortStartScheduler+0x140>)
 8005222:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8005224:	693b      	ldr	r3, [r7, #16]
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	b2db      	uxtb	r3, r3
 800522a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800522c:	693b      	ldr	r3, [r7, #16]
 800522e:	22ff      	movs	r2, #255	@ 0xff
 8005230:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800523a:	79fb      	ldrb	r3, [r7, #7]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005242:	b2da      	uxtb	r2, r3
 8005244:	4b38      	ldr	r3, [pc, #224]	@ (8005328 <xPortStartScheduler+0x144>)
 8005246:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8005248:	4b37      	ldr	r3, [pc, #220]	@ (8005328 <xPortStartScheduler+0x144>)
 800524a:	781b      	ldrb	r3, [r3, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <xPortStartScheduler+0x76>
 8005250:	f240 116f 	movw	r1, #367	@ 0x16f
 8005254:	4831      	ldr	r0, [pc, #196]	@ (800531c <xPortStartScheduler+0x138>)
 8005256:	f7fb ff6b 	bl	8001130 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800525a:	79fb      	ldrb	r3, [r7, #7]
 800525c:	b2db      	uxtb	r3, r3
 800525e:	43db      	mvns	r3, r3
 8005260:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005264:	2b00      	cmp	r3, #0
 8005266:	d00d      	beq.n	8005284 <xPortStartScheduler+0xa0>
 8005268:	f240 1173 	movw	r1, #371	@ 0x173
 800526c:	482b      	ldr	r0, [pc, #172]	@ (800531c <xPortStartScheduler+0x138>)
 800526e:	f7fb ff5f 	bl	8001130 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005272:	e007      	b.n	8005284 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	3301      	adds	r3, #1
 8005278:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800527a:	79fb      	ldrb	r3, [r7, #7]
 800527c:	b2db      	uxtb	r3, r3
 800527e:	005b      	lsls	r3, r3, #1
 8005280:	b2db      	uxtb	r3, r3
 8005282:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005284:	79fb      	ldrb	r3, [r7, #7]
 8005286:	b2db      	uxtb	r3, r3
 8005288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800528c:	2b80      	cmp	r3, #128	@ 0x80
 800528e:	d0f1      	beq.n	8005274 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 8005290:	68bb      	ldr	r3, [r7, #8]
 8005292:	2b08      	cmp	r3, #8
 8005294:	d103      	bne.n	800529e <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 8005296:	4b25      	ldr	r3, [pc, #148]	@ (800532c <xPortStartScheduler+0x148>)
 8005298:	2200      	movs	r2, #0
 800529a:	601a      	str	r2, [r3, #0]
 800529c:	e004      	b.n	80052a8 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	f1c3 0307 	rsb	r3, r3, #7
 80052a4:	4a21      	ldr	r2, [pc, #132]	@ (800532c <xPortStartScheduler+0x148>)
 80052a6:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80052a8:	4b20      	ldr	r3, [pc, #128]	@ (800532c <xPortStartScheduler+0x148>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	021b      	lsls	r3, r3, #8
 80052ae:	4a1f      	ldr	r2, [pc, #124]	@ (800532c <xPortStartScheduler+0x148>)
 80052b0:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80052b2:	4b1e      	ldr	r3, [pc, #120]	@ (800532c <xPortStartScheduler+0x148>)
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80052ba:	4a1c      	ldr	r2, [pc, #112]	@ (800532c <xPortStartScheduler+0x148>)
 80052bc:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80052be:	7bfb      	ldrb	r3, [r7, #15]
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80052c6:	4b1a      	ldr	r3, [pc, #104]	@ (8005330 <xPortStartScheduler+0x14c>)
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	4a19      	ldr	r2, [pc, #100]	@ (8005330 <xPortStartScheduler+0x14c>)
 80052cc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80052d0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80052d2:	4b17      	ldr	r3, [pc, #92]	@ (8005330 <xPortStartScheduler+0x14c>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	4a16      	ldr	r2, [pc, #88]	@ (8005330 <xPortStartScheduler+0x14c>)
 80052d8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80052dc:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80052de:	4b15      	ldr	r3, [pc, #84]	@ (8005334 <xPortStartScheduler+0x150>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80052e4:	f000 f8d4 	bl	8005490 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80052e8:	4b13      	ldr	r3, [pc, #76]	@ (8005338 <xPortStartScheduler+0x154>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80052ee:	f000 f8e9 	bl	80054c4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052f2:	4b12      	ldr	r3, [pc, #72]	@ (800533c <xPortStartScheduler+0x158>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	4a11      	ldr	r2, [pc, #68]	@ (800533c <xPortStartScheduler+0x158>)
 80052f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80052fc:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 80052fe:	f7ff ff5b 	bl	80051b8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005302:	f7fe fbf1 	bl	8003ae8 <vTaskSwitchContext>
    prvTaskExitError();
 8005306:	f7ff ff15 	bl	8005134 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800530a:	2300      	movs	r3, #0
}
 800530c:	4618      	mov	r0, r3
 800530e:	3718      	adds	r7, #24
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}
 8005314:	e000ed08 	.word	0xe000ed08
 8005318:	08005191 	.word	0x08005191
 800531c:	08022810 	.word	0x08022810
 8005320:	080053e1 	.word	0x080053e1
 8005324:	e000e400 	.word	0xe000e400
 8005328:	20000be8 	.word	0x20000be8
 800532c:	20000bec 	.word	0x20000bec
 8005330:	e000ed20 	.word	0xe000ed20
 8005334:	e000ed1c 	.word	0xe000ed1c
 8005338:	2000000c 	.word	0x2000000c
 800533c:	e000ef34 	.word	0xe000ef34

08005340 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b082      	sub	sp, #8
 8005344:	af00      	add	r7, sp, #0
    __asm volatile
 8005346:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800534a:	b672      	cpsid	i
 800534c:	f383 8811 	msr	BASEPRI, r3
 8005350:	f3bf 8f6f 	isb	sy
 8005354:	f3bf 8f4f 	dsb	sy
 8005358:	b662      	cpsie	i
 800535a:	607b      	str	r3, [r7, #4]
}
 800535c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800535e:	4b0b      	ldr	r3, [pc, #44]	@ (800538c <vPortEnterCritical+0x4c>)
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	3301      	adds	r3, #1
 8005364:	4a09      	ldr	r2, [pc, #36]	@ (800538c <vPortEnterCritical+0x4c>)
 8005366:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005368:	4b08      	ldr	r3, [pc, #32]	@ (800538c <vPortEnterCritical+0x4c>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	2b01      	cmp	r3, #1
 800536e:	d109      	bne.n	8005384 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005370:	4b07      	ldr	r3, [pc, #28]	@ (8005390 <vPortEnterCritical+0x50>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	b2db      	uxtb	r3, r3
 8005376:	2b00      	cmp	r3, #0
 8005378:	d004      	beq.n	8005384 <vPortEnterCritical+0x44>
 800537a:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800537e:	4805      	ldr	r0, [pc, #20]	@ (8005394 <vPortEnterCritical+0x54>)
 8005380:	f7fb fed6 	bl	8001130 <vAssertCalled>
    }
}
 8005384:	bf00      	nop
 8005386:	3708      	adds	r7, #8
 8005388:	46bd      	mov	sp, r7
 800538a:	bd80      	pop	{r7, pc}
 800538c:	2000000c 	.word	0x2000000c
 8005390:	e000ed04 	.word	0xe000ed04
 8005394:	08022810 	.word	0x08022810

08005398 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b082      	sub	sp, #8
 800539c:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 800539e:	4b0e      	ldr	r3, [pc, #56]	@ (80053d8 <vPortExitCritical+0x40>)
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d104      	bne.n	80053b0 <vPortExitCritical+0x18>
 80053a6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80053aa:	480c      	ldr	r0, [pc, #48]	@ (80053dc <vPortExitCritical+0x44>)
 80053ac:	f7fb fec0 	bl	8001130 <vAssertCalled>
    uxCriticalNesting--;
 80053b0:	4b09      	ldr	r3, [pc, #36]	@ (80053d8 <vPortExitCritical+0x40>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	3b01      	subs	r3, #1
 80053b6:	4a08      	ldr	r2, [pc, #32]	@ (80053d8 <vPortExitCritical+0x40>)
 80053b8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80053ba:	4b07      	ldr	r3, [pc, #28]	@ (80053d8 <vPortExitCritical+0x40>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d105      	bne.n	80053ce <vPortExitCritical+0x36>
 80053c2:	2300      	movs	r3, #0
 80053c4:	607b      	str	r3, [r7, #4]
    __asm volatile
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f383 8811 	msr	BASEPRI, r3
}
 80053cc:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80053ce:	bf00      	nop
 80053d0:	3708      	adds	r7, #8
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	2000000c 	.word	0x2000000c
 80053dc:	08022810 	.word	0x08022810

080053e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80053e0:	f3ef 8009 	mrs	r0, PSP
 80053e4:	f3bf 8f6f 	isb	sy
 80053e8:	4b15      	ldr	r3, [pc, #84]	@ (8005440 <pxCurrentTCBConst>)
 80053ea:	681a      	ldr	r2, [r3, #0]
 80053ec:	f01e 0f10 	tst.w	lr, #16
 80053f0:	bf08      	it	eq
 80053f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053fa:	6010      	str	r0, [r2, #0]
 80053fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005400:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8005404:	b672      	cpsid	i
 8005406:	f380 8811 	msr	BASEPRI, r0
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	f3bf 8f6f 	isb	sy
 8005412:	b662      	cpsie	i
 8005414:	f7fe fb68 	bl	8003ae8 <vTaskSwitchContext>
 8005418:	f04f 0000 	mov.w	r0, #0
 800541c:	f380 8811 	msr	BASEPRI, r0
 8005420:	bc09      	pop	{r0, r3}
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	6808      	ldr	r0, [r1, #0]
 8005426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800542a:	f01e 0f10 	tst.w	lr, #16
 800542e:	bf08      	it	eq
 8005430:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005434:	f380 8809 	msr	PSP, r0
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	4770      	bx	lr
 800543e:	bf00      	nop

08005440 <pxCurrentTCBConst>:
 8005440:	20000ab4 	.word	0x20000ab4
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005444:	bf00      	nop
 8005446:	bf00      	nop

08005448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b082      	sub	sp, #8
 800544c:	af00      	add	r7, sp, #0
    __asm volatile
 800544e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005452:	b672      	cpsid	i
 8005454:	f383 8811 	msr	BASEPRI, r3
 8005458:	f3bf 8f6f 	isb	sy
 800545c:	f3bf 8f4f 	dsb	sy
 8005460:	b662      	cpsie	i
 8005462:	607b      	str	r3, [r7, #4]
}
 8005464:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005466:	f7fe fa2b 	bl	80038c0 <xTaskIncrementTick>
 800546a:	4603      	mov	r3, r0
 800546c:	2b00      	cmp	r3, #0
 800546e:	d003      	beq.n	8005478 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005470:	4b06      	ldr	r3, [pc, #24]	@ (800548c <xPortSysTickHandler+0x44>)
 8005472:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005476:	601a      	str	r2, [r3, #0]
 8005478:	2300      	movs	r3, #0
 800547a:	603b      	str	r3, [r7, #0]
    __asm volatile
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	f383 8811 	msr	BASEPRI, r3
}
 8005482:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8005484:	bf00      	nop
 8005486:	3708      	adds	r7, #8
 8005488:	46bd      	mov	sp, r7
 800548a:	bd80      	pop	{r7, pc}
 800548c:	e000ed04 	.word	0xe000ed04

08005490 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 8005490:	b480      	push	{r7}
 8005492:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005494:	4b08      	ldr	r3, [pc, #32]	@ (80054b8 <vPortSetupTimerInterrupt+0x28>)
 8005496:	2200      	movs	r2, #0
 8005498:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800549a:	4b08      	ldr	r3, [pc, #32]	@ (80054bc <vPortSetupTimerInterrupt+0x2c>)
 800549c:	2200      	movs	r2, #0
 800549e:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80054a0:	4b07      	ldr	r3, [pc, #28]	@ (80054c0 <vPortSetupTimerInterrupt+0x30>)
 80054a2:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80054a6:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80054a8:	4b03      	ldr	r3, [pc, #12]	@ (80054b8 <vPortSetupTimerInterrupt+0x28>)
 80054aa:	2203      	movs	r2, #3
 80054ac:	601a      	str	r2, [r3, #0]
}
 80054ae:	bf00      	nop
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	e000e010 	.word	0xe000e010
 80054bc:	e000e018 	.word	0xe000e018
 80054c0:	e000e014 	.word	0xe000e014

080054c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80054c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80054d4 <vPortEnableVFP+0x10>
 80054c8:	6801      	ldr	r1, [r0, #0]
 80054ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80054ce:	6001      	str	r1, [r0, #0]
 80054d0:	4770      	bx	lr
 80054d2:	0000      	.short	0x0000
 80054d4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80054d8:	bf00      	nop
 80054da:	bf00      	nop

080054dc <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80054dc:	b580      	push	{r7, lr}
 80054de:	b082      	sub	sp, #8
 80054e0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80054e2:	f3ef 8305 	mrs	r3, IPSR
 80054e6:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	2b0f      	cmp	r3, #15
 80054ec:	d90e      	bls.n	800550c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054ee:	4a10      	ldr	r2, [pc, #64]	@ (8005530 <vPortValidateInterruptPriority+0x54>)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	4413      	add	r3, r2
 80054f4:	781b      	ldrb	r3, [r3, #0]
 80054f6:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054f8:	4b0e      	ldr	r3, [pc, #56]	@ (8005534 <vPortValidateInterruptPriority+0x58>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	78fa      	ldrb	r2, [r7, #3]
 80054fe:	429a      	cmp	r2, r3
 8005500:	d204      	bcs.n	800550c <vPortValidateInterruptPriority+0x30>
 8005502:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8005506:	480c      	ldr	r0, [pc, #48]	@ (8005538 <vPortValidateInterruptPriority+0x5c>)
 8005508:	f7fb fe12 	bl	8001130 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800550c:	4b0b      	ldr	r3, [pc, #44]	@ (800553c <vPortValidateInterruptPriority+0x60>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005514:	4b0a      	ldr	r3, [pc, #40]	@ (8005540 <vPortValidateInterruptPriority+0x64>)
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	429a      	cmp	r2, r3
 800551a:	d904      	bls.n	8005526 <vPortValidateInterruptPriority+0x4a>
 800551c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8005520:	4805      	ldr	r0, [pc, #20]	@ (8005538 <vPortValidateInterruptPriority+0x5c>)
 8005522:	f7fb fe05 	bl	8001130 <vAssertCalled>
    }
 8005526:	bf00      	nop
 8005528:	3708      	adds	r7, #8
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop
 8005530:	e000e3f0 	.word	0xe000e3f0
 8005534:	20000be8 	.word	0x20000be8
 8005538:	08022810 	.word	0x08022810
 800553c:	e000ed0c 	.word	0xe000ed0c
 8005540:	20000bec 	.word	0x20000bec

08005544 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b088      	sub	sp, #32
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800554c:	2300      	movs	r3, #0
 800554e:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 8005550:	4b60      	ldr	r3, [pc, #384]	@ (80056d4 <pvPortMalloc+0x190>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d103      	bne.n	8005560 <pvPortMalloc+0x1c>
 8005558:	21da      	movs	r1, #218	@ 0xda
 800555a:	485f      	ldr	r0, [pc, #380]	@ (80056d8 <pvPortMalloc+0x194>)
 800555c:	f7fb fde8 	bl	8001130 <vAssertCalled>

    if( xWantedSize > 0 )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d022      	beq.n	80055ac <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005566:	2308      	movs	r3, #8
 8005568:	43db      	mvns	r3, r3
 800556a:	687a      	ldr	r2, [r7, #4]
 800556c:	429a      	cmp	r2, r3
 800556e:	d81b      	bhi.n	80055a8 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 8005570:	2208      	movs	r2, #8
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	4413      	add	r3, r2
 8005576:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	f003 0307 	and.w	r3, r3, #7
 800557e:	2b00      	cmp	r3, #0
 8005580:	d014      	beq.n	80055ac <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f003 0307 	and.w	r3, r3, #7
 8005588:	f1c3 0308 	rsb	r3, r3, #8
 800558c:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800558e:	693b      	ldr	r3, [r7, #16]
 8005590:	43db      	mvns	r3, r3
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	429a      	cmp	r2, r3
 8005596:	d804      	bhi.n	80055a2 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	693b      	ldr	r3, [r7, #16]
 800559c:	4413      	add	r3, r2
 800559e:	607b      	str	r3, [r7, #4]
 80055a0:	e004      	b.n	80055ac <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 80055a2:	2300      	movs	r3, #0
 80055a4:	607b      	str	r3, [r7, #4]
 80055a6:	e001      	b.n	80055ac <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80055a8:	2300      	movs	r3, #0
 80055aa:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80055ac:	f7fe f848 	bl	8003640 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	db78      	blt.n	80056a8 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	2b00      	cmp	r3, #0
 80055ba:	d075      	beq.n	80056a8 <pvPortMalloc+0x164>
 80055bc:	4b47      	ldr	r3, [pc, #284]	@ (80056dc <pvPortMalloc+0x198>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	687a      	ldr	r2, [r7, #4]
 80055c2:	429a      	cmp	r2, r3
 80055c4:	d870      	bhi.n	80056a8 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80055c6:	4b46      	ldr	r3, [pc, #280]	@ (80056e0 <pvPortMalloc+0x19c>)
 80055c8:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80055ca:	4b45      	ldr	r3, [pc, #276]	@ (80056e0 <pvPortMalloc+0x19c>)
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80055d0:	e004      	b.n	80055dc <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 80055d2:	69fb      	ldr	r3, [r7, #28]
 80055d4:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80055d6:	69fb      	ldr	r3, [r7, #28]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	687a      	ldr	r2, [r7, #4]
 80055e2:	429a      	cmp	r2, r3
 80055e4:	d903      	bls.n	80055ee <pvPortMalloc+0xaa>
 80055e6:	69fb      	ldr	r3, [r7, #28]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d1f1      	bne.n	80055d2 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80055ee:	4b39      	ldr	r3, [pc, #228]	@ (80056d4 <pvPortMalloc+0x190>)
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	69fa      	ldr	r2, [r7, #28]
 80055f4:	429a      	cmp	r2, r3
 80055f6:	d057      	beq.n	80056a8 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	2208      	movs	r2, #8
 80055fe:	4413      	add	r3, r2
 8005600:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	681a      	ldr	r2, [r3, #0]
 8005606:	69bb      	ldr	r3, [r7, #24]
 8005608:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 800560a:	69fb      	ldr	r3, [r7, #28]
 800560c:	685b      	ldr	r3, [r3, #4]
 800560e:	687a      	ldr	r2, [r7, #4]
 8005610:	429a      	cmp	r2, r3
 8005612:	d904      	bls.n	800561e <pvPortMalloc+0xda>
 8005614:	f240 1129 	movw	r1, #297	@ 0x129
 8005618:	482f      	ldr	r0, [pc, #188]	@ (80056d8 <pvPortMalloc+0x194>)
 800561a:	f7fb fd89 	bl	8001130 <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800561e:	69fb      	ldr	r3, [r7, #28]
 8005620:	685a      	ldr	r2, [r3, #4]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	1ad2      	subs	r2, r2, r3
 8005626:	2308      	movs	r3, #8
 8005628:	005b      	lsls	r3, r3, #1
 800562a:	429a      	cmp	r2, r3
 800562c:	d91d      	bls.n	800566a <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800562e:	69fa      	ldr	r2, [r7, #28]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	4413      	add	r3, r2
 8005634:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	f003 0307 	and.w	r3, r3, #7
 800563c:	2b00      	cmp	r3, #0
 800563e:	d004      	beq.n	800564a <pvPortMalloc+0x106>
 8005640:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8005644:	4824      	ldr	r0, [pc, #144]	@ (80056d8 <pvPortMalloc+0x194>)
 8005646:	f7fb fd73 	bl	8001130 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800564a:	69fb      	ldr	r3, [r7, #28]
 800564c:	685a      	ldr	r2, [r3, #4]
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	1ad2      	subs	r2, r2, r3
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005656:	69fb      	ldr	r3, [r7, #28]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 800565c:	69bb      	ldr	r3, [r7, #24]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005664:	69bb      	ldr	r3, [r7, #24]
 8005666:	68fa      	ldr	r2, [r7, #12]
 8005668:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800566a:	4b1c      	ldr	r3, [pc, #112]	@ (80056dc <pvPortMalloc+0x198>)
 800566c:	681a      	ldr	r2, [r3, #0]
 800566e:	69fb      	ldr	r3, [r7, #28]
 8005670:	685b      	ldr	r3, [r3, #4]
 8005672:	1ad3      	subs	r3, r2, r3
 8005674:	4a19      	ldr	r2, [pc, #100]	@ (80056dc <pvPortMalloc+0x198>)
 8005676:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005678:	4b18      	ldr	r3, [pc, #96]	@ (80056dc <pvPortMalloc+0x198>)
 800567a:	681a      	ldr	r2, [r3, #0]
 800567c:	4b19      	ldr	r3, [pc, #100]	@ (80056e4 <pvPortMalloc+0x1a0>)
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d203      	bcs.n	800568c <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005684:	4b15      	ldr	r3, [pc, #84]	@ (80056dc <pvPortMalloc+0x198>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	4a16      	ldr	r2, [pc, #88]	@ (80056e4 <pvPortMalloc+0x1a0>)
 800568a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 800568c:	69fb      	ldr	r3, [r7, #28]
 800568e:	685b      	ldr	r3, [r3, #4]
 8005690:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005694:	69fb      	ldr	r3, [r7, #28]
 8005696:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005698:	69fb      	ldr	r3, [r7, #28]
 800569a:	2200      	movs	r2, #0
 800569c:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 800569e:	4b12      	ldr	r3, [pc, #72]	@ (80056e8 <pvPortMalloc+0x1a4>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	3301      	adds	r3, #1
 80056a4:	4a10      	ldr	r2, [pc, #64]	@ (80056e8 <pvPortMalloc+0x1a4>)
 80056a6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 80056a8:	f7fd ffd8 	bl	800365c <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 80056ac:	697b      	ldr	r3, [r7, #20]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d101      	bne.n	80056b6 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 80056b2:	f7fb fd51 	bl	8001158 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80056b6:	697b      	ldr	r3, [r7, #20]
 80056b8:	f003 0307 	and.w	r3, r3, #7
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d004      	beq.n	80056ca <pvPortMalloc+0x186>
 80056c0:	f240 1173 	movw	r1, #371	@ 0x173
 80056c4:	4804      	ldr	r0, [pc, #16]	@ (80056d8 <pvPortMalloc+0x194>)
 80056c6:	f7fb fd33 	bl	8001130 <vAssertCalled>
    return pvReturn;
 80056ca:	697b      	ldr	r3, [r7, #20]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3720      	adds	r7, #32
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}
 80056d4:	20000bf8 	.word	0x20000bf8
 80056d8:	0802284c 	.word	0x0802284c
 80056dc:	20000bfc 	.word	0x20000bfc
 80056e0:	20000bf0 	.word	0x20000bf0
 80056e4:	20000c00 	.word	0x20000c00
 80056e8:	20000c04 	.word	0x20000c04

080056ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d03d      	beq.n	800577a <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 80056fe:	2308      	movs	r3, #8
 8005700:	425b      	negs	r3, r3
 8005702:	68fa      	ldr	r2, [r7, #12]
 8005704:	4413      	add	r3, r2
 8005706:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	db04      	blt.n	800571e <vPortFree+0x32>
 8005714:	f240 1187 	movw	r1, #391	@ 0x187
 8005718:	481a      	ldr	r0, [pc, #104]	@ (8005784 <vPortFree+0x98>)
 800571a:	f7fb fd09 	bl	8001130 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d004      	beq.n	8005730 <vPortFree+0x44>
 8005726:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 800572a:	4816      	ldr	r0, [pc, #88]	@ (8005784 <vPortFree+0x98>)
 800572c:	f7fb fd00 	bl	8001130 <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	685b      	ldr	r3, [r3, #4]
 8005734:	0fdb      	lsrs	r3, r3, #31
 8005736:	f003 0301 	and.w	r3, r3, #1
 800573a:	b2db      	uxtb	r3, r3
 800573c:	2b00      	cmp	r3, #0
 800573e:	d01c      	beq.n	800577a <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005740:	68bb      	ldr	r3, [r7, #8]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d118      	bne.n	800577a <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005748:	68bb      	ldr	r3, [r7, #8]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005750:	68bb      	ldr	r3, [r7, #8]
 8005752:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8005754:	f7fd ff74 	bl	8003640 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	685a      	ldr	r2, [r3, #4]
 800575c:	4b0a      	ldr	r3, [pc, #40]	@ (8005788 <vPortFree+0x9c>)
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	4413      	add	r3, r2
 8005762:	4a09      	ldr	r2, [pc, #36]	@ (8005788 <vPortFree+0x9c>)
 8005764:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005766:	68b8      	ldr	r0, [r7, #8]
 8005768:	f000 f82a 	bl	80057c0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 800576c:	4b07      	ldr	r3, [pc, #28]	@ (800578c <vPortFree+0xa0>)
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	3301      	adds	r3, #1
 8005772:	4a06      	ldr	r2, [pc, #24]	@ (800578c <vPortFree+0xa0>)
 8005774:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005776:	f7fd ff71 	bl	800365c <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 800577a:	bf00      	nop
 800577c:	3710      	adds	r7, #16
 800577e:	46bd      	mov	sp, r7
 8005780:	bd80      	pop	{r7, pc}
 8005782:	bf00      	nop
 8005784:	0802284c 	.word	0x0802284c
 8005788:	20000bfc 	.word	0x20000bfc
 800578c:	20000c08 	.word	0x20000c08

08005790 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8005790:	b480      	push	{r7}
 8005792:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8005794:	4b03      	ldr	r3, [pc, #12]	@ (80057a4 <xPortGetFreeHeapSize+0x14>)
 8005796:	681b      	ldr	r3, [r3, #0]
}
 8005798:	4618      	mov	r0, r3
 800579a:	46bd      	mov	sp, r7
 800579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a0:	4770      	bx	lr
 80057a2:	bf00      	nop
 80057a4:	20000bfc 	.word	0x20000bfc

080057a8 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 80057a8:	b480      	push	{r7}
 80057aa:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 80057ac:	4b03      	ldr	r3, [pc, #12]	@ (80057bc <xPortGetMinimumEverFreeHeapSize+0x14>)
 80057ae:	681b      	ldr	r3, [r3, #0]
}
 80057b0:	4618      	mov	r0, r3
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	20000c00 	.word	0x20000c00

080057c0 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 80057c0:	b480      	push	{r7}
 80057c2:	b085      	sub	sp, #20
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 80057c8:	4b28      	ldr	r3, [pc, #160]	@ (800586c <prvInsertBlockIntoFreeList+0xac>)
 80057ca:	60fb      	str	r3, [r7, #12]
 80057cc:	e002      	b.n	80057d4 <prvInsertBlockIntoFreeList+0x14>
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	60fb      	str	r3, [r7, #12]
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	687a      	ldr	r2, [r7, #4]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d8f7      	bhi.n	80057ce <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	685b      	ldr	r3, [r3, #4]
 80057e6:	68ba      	ldr	r2, [r7, #8]
 80057e8:	4413      	add	r3, r2
 80057ea:	687a      	ldr	r2, [r7, #4]
 80057ec:	429a      	cmp	r2, r3
 80057ee:	d108      	bne.n	8005802 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	685a      	ldr	r2, [r3, #4]
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	685b      	ldr	r3, [r3, #4]
 80057f8:	441a      	add	r2, r3
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	68ba      	ldr	r2, [r7, #8]
 800580c:	441a      	add	r2, r3
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	429a      	cmp	r2, r3
 8005814:	d118      	bne.n	8005848 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005816:	68fb      	ldr	r3, [r7, #12]
 8005818:	681a      	ldr	r2, [r3, #0]
 800581a:	4b15      	ldr	r3, [pc, #84]	@ (8005870 <prvInsertBlockIntoFreeList+0xb0>)
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	429a      	cmp	r2, r3
 8005820:	d00d      	beq.n	800583e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	685a      	ldr	r2, [r3, #4]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	441a      	add	r2, r3
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	601a      	str	r2, [r3, #0]
 800583c:	e008      	b.n	8005850 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800583e:	4b0c      	ldr	r3, [pc, #48]	@ (8005870 <prvInsertBlockIntoFreeList+0xb0>)
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	601a      	str	r2, [r3, #0]
 8005846:	e003      	b.n	8005850 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	681a      	ldr	r2, [r3, #0]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005850:	68fa      	ldr	r2, [r7, #12]
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	429a      	cmp	r2, r3
 8005856:	d002      	beq.n	800585e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800585e:	bf00      	nop
 8005860:	3714      	adds	r7, #20
 8005862:	46bd      	mov	sp, r7
 8005864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005868:	4770      	bx	lr
 800586a:	bf00      	nop
 800586c:	20000bf0 	.word	0x20000bf0
 8005870:	20000bf8 	.word	0x20000bf8

08005874 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8005874:	b580      	push	{r7, lr}
 8005876:	b08a      	sub	sp, #40	@ 0x28
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 800587c:	2300      	movs	r3, #0
 800587e:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8005880:	2300      	movs	r3, #0
 8005882:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 8005884:	2300      	movs	r3, #0
 8005886:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8005888:	4b4b      	ldr	r3, [pc, #300]	@ (80059b8 <vPortDefineHeapRegions+0x144>)
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d004      	beq.n	800589a <vPortDefineHeapRegions+0x26>
 8005890:	f240 2121 	movw	r1, #545	@ 0x221
 8005894:	4849      	ldr	r0, [pc, #292]	@ (80059bc <vPortDefineHeapRegions+0x148>)
 8005896:	f7fb fc4b 	bl	8001130 <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	00db      	lsls	r3, r3, #3
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	4413      	add	r3, r2
 80058a2:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 80058a4:	e071      	b.n	800598a <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 80058a6:	697b      	ldr	r3, [r7, #20]
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 80058ac:	697b      	ldr	r3, [r7, #20]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80058b2:	69bb      	ldr	r3, [r7, #24]
 80058b4:	f003 0307 	and.w	r3, r3, #7
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d00e      	beq.n	80058da <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 80058bc:	69bb      	ldr	r3, [r7, #24]
 80058be:	3307      	adds	r3, #7
 80058c0:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 80058c2:	69bb      	ldr	r3, [r7, #24]
 80058c4:	f023 0307 	bic.w	r3, r3, #7
 80058c8:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	461a      	mov	r2, r3
 80058d0:	69bb      	ldr	r3, [r7, #24]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058d6:	4413      	add	r3, r2
 80058d8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 80058da:	69bb      	ldr	r3, [r7, #24]
 80058dc:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 80058de:	69fb      	ldr	r3, [r7, #28]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d106      	bne.n	80058f2 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	4a36      	ldr	r2, [pc, #216]	@ (80059c0 <vPortDefineHeapRegions+0x14c>)
 80058e8:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 80058ea:	4b35      	ldr	r3, [pc, #212]	@ (80059c0 <vPortDefineHeapRegions+0x14c>)
 80058ec:	2200      	movs	r2, #0
 80058ee:	605a      	str	r2, [r3, #4]
 80058f0:	e013      	b.n	800591a <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 80058f2:	4b31      	ldr	r3, [pc, #196]	@ (80059b8 <vPortDefineHeapRegions+0x144>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d104      	bne.n	8005904 <vPortDefineHeapRegions+0x90>
 80058fa:	f240 2149 	movw	r1, #585	@ 0x249
 80058fe:	482f      	ldr	r0, [pc, #188]	@ (80059bc <vPortDefineHeapRegions+0x148>)
 8005900:	f7fb fc16 	bl	8001130 <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 8005904:	4b2c      	ldr	r3, [pc, #176]	@ (80059b8 <vPortDefineHeapRegions+0x144>)
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	461a      	mov	r2, r3
 800590a:	69bb      	ldr	r3, [r7, #24]
 800590c:	4293      	cmp	r3, r2
 800590e:	d804      	bhi.n	800591a <vPortDefineHeapRegions+0xa6>
 8005910:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8005914:	4829      	ldr	r0, [pc, #164]	@ (80059bc <vPortDefineHeapRegions+0x148>)
 8005916:	f7fb fc0b 	bl	8001130 <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 800591a:	4b27      	ldr	r3, [pc, #156]	@ (80059b8 <vPortDefineHeapRegions+0x144>)
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 8005920:	68fa      	ldr	r2, [r7, #12]
 8005922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005924:	4413      	add	r3, r2
 8005926:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005928:	2208      	movs	r2, #8
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	1a9b      	subs	r3, r3, r2
 800592e:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005930:	69bb      	ldr	r3, [r7, #24]
 8005932:	f023 0307 	bic.w	r3, r3, #7
 8005936:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	4a1f      	ldr	r2, [pc, #124]	@ (80059b8 <vPortDefineHeapRegions+0x144>)
 800593c:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 800593e:	4b1e      	ldr	r3, [pc, #120]	@ (80059b8 <vPortDefineHeapRegions+0x144>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	2200      	movs	r2, #0
 8005944:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8005946:	4b1c      	ldr	r3, [pc, #112]	@ (80059b8 <vPortDefineHeapRegions+0x144>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2200      	movs	r2, #0
 800594c:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 8005952:	693b      	ldr	r3, [r7, #16]
 8005954:	69ba      	ldr	r2, [r7, #24]
 8005956:	1ad2      	subs	r2, r2, r3
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 800595c:	4b16      	ldr	r3, [pc, #88]	@ (80059b8 <vPortDefineHeapRegions+0x144>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 8005964:	68bb      	ldr	r3, [r7, #8]
 8005966:	2b00      	cmp	r3, #0
 8005968:	d002      	beq.n	8005970 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	6a3a      	ldr	r2, [r7, #32]
 8005976:	4413      	add	r3, r2
 8005978:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 800597a:	69fb      	ldr	r3, [r7, #28]
 800597c:	3301      	adds	r3, #1
 800597e:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8005980:	69fb      	ldr	r3, [r7, #28]
 8005982:	00db      	lsls	r3, r3, #3
 8005984:	687a      	ldr	r2, [r7, #4]
 8005986:	4413      	add	r3, r2
 8005988:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	685b      	ldr	r3, [r3, #4]
 800598e:	2b00      	cmp	r3, #0
 8005990:	d189      	bne.n	80058a6 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8005992:	4a0c      	ldr	r2, [pc, #48]	@ (80059c4 <vPortDefineHeapRegions+0x150>)
 8005994:	6a3b      	ldr	r3, [r7, #32]
 8005996:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8005998:	4a0b      	ldr	r2, [pc, #44]	@ (80059c8 <vPortDefineHeapRegions+0x154>)
 800599a:	6a3b      	ldr	r3, [r7, #32]
 800599c:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 800599e:	6a3b      	ldr	r3, [r7, #32]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d104      	bne.n	80059ae <vPortDefineHeapRegions+0x13a>
 80059a4:	f240 2189 	movw	r1, #649	@ 0x289
 80059a8:	4804      	ldr	r0, [pc, #16]	@ (80059bc <vPortDefineHeapRegions+0x148>)
 80059aa:	f7fb fbc1 	bl	8001130 <vAssertCalled>
}
 80059ae:	bf00      	nop
 80059b0:	3728      	adds	r7, #40	@ 0x28
 80059b2:	46bd      	mov	sp, r7
 80059b4:	bd80      	pop	{r7, pc}
 80059b6:	bf00      	nop
 80059b8:	20000bf8 	.word	0x20000bf8
 80059bc:	0802284c 	.word	0x0802284c
 80059c0:	20000bf0 	.word	0x20000bf0
 80059c4:	20000c00 	.word	0x20000c00
 80059c8:	20000bfc 	.word	0x20000bfc

080059cc <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b090      	sub	sp, #64	@ 0x40
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d8:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 80059da:	2300      	movs	r3, #0
 80059dc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059e4:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 80059e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059e8:	330e      	adds	r3, #14
 80059ea:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 80059ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059ee:	881b      	ldrh	r3, [r3, #0]
 80059f0:	b29b      	uxth	r3, r3
 80059f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059f6:	f040 81bb 	bne.w	8005d70 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 80059fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059fc:	885b      	ldrh	r3, [r3, #2]
 80059fe:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8005a00:	2b08      	cmp	r3, #8
 8005a02:	f040 81b5 	bne.w	8005d70 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8005a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a08:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8005a0a:	2b06      	cmp	r3, #6
 8005a0c:	f040 81b0 	bne.w	8005d70 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 8005a10:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a12:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8005a14:	2b04      	cmp	r3, #4
 8005a16:	f040 81ab 	bne.w	8005d70 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a1c:	330e      	adds	r3, #14
 8005a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 8005a20:	f107 0320 	add.w	r3, r7, #32
 8005a24:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 8005a26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	461a      	mov	r2, r3
 8005a2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a2e:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8005a30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 8005a36:	4b9c      	ldr	r3, [pc, #624]	@ (8005ca8 <eARPProcessPacket+0x2dc>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d009      	beq.n	8005a52 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 8005a3e:	499b      	ldr	r1, [pc, #620]	@ (8005cac <eARPProcessPacket+0x2e0>)
 8005a40:	489b      	ldr	r0, [pc, #620]	@ (8005cb0 <eARPProcessPacket+0x2e4>)
 8005a42:	f7fe faf1 	bl	8004028 <xTaskCheckForTimeOut>
 8005a46:	4603      	mov	r3, r0
 8005a48:	2b01      	cmp	r3, #1
 8005a4a:	d102      	bne.n	8005a52 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 8005a4c:	4b96      	ldr	r3, [pc, #600]	@ (8005ca8 <eARPProcessPacket+0x2dc>)
 8005a4e:	2200      	movs	r2, #0
 8005a50:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 8005a52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a54:	7a1b      	ldrb	r3, [r3, #8]
 8005a56:	f003 0301 	and.w	r3, r3, #1
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	f040 8188 	bne.w	8005d70 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	061a      	lsls	r2, r3, #24
 8005a64:	6a3b      	ldr	r3, [r7, #32]
 8005a66:	021b      	lsls	r3, r3, #8
 8005a68:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a6c:	431a      	orrs	r2, r3
 8005a6e:	6a3b      	ldr	r3, [r7, #32]
 8005a70:	0a1b      	lsrs	r3, r3, #8
 8005a72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a76:	431a      	orrs	r2, r3
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	0e1b      	lsrs	r3, r3, #24
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8005a82:	d311      	bcc.n	8005aa8 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8005a84:	6a3b      	ldr	r3, [r7, #32]
 8005a86:	061a      	lsls	r2, r3, #24
 8005a88:	6a3b      	ldr	r3, [r7, #32]
 8005a8a:	021b      	lsls	r3, r3, #8
 8005a8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005a90:	431a      	orrs	r2, r3
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	0a1b      	lsrs	r3, r3, #8
 8005a96:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005a9a:	431a      	orrs	r2, r3
 8005a9c:	6a3b      	ldr	r3, [r7, #32]
 8005a9e:	0e1b      	lsrs	r3, r3, #24
 8005aa0:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f280 8164 	bge.w	8005d70 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8005aa8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d021      	beq.n	8005af2 <eARPProcessPacket+0x126>
 8005aae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ab0:	681a      	ldr	r2, [r3, #0]
 8005ab2:	6a3b      	ldr	r3, [r7, #32]
 8005ab4:	429a      	cmp	r2, r3
 8005ab6:	d11c      	bne.n	8005af2 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8005ab8:	4b7b      	ldr	r3, [pc, #492]	@ (8005ca8 <eARPProcessPacket+0x2dc>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	2b00      	cmp	r3, #0
 8005abe:	f040 8157 	bne.w	8005d70 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 8005ac2:	4b79      	ldr	r3, [pc, #484]	@ (8005ca8 <eARPProcessPacket+0x2dc>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	3301      	adds	r3, #1
 8005ac8:	4a77      	ldr	r2, [pc, #476]	@ (8005ca8 <eARPProcessPacket+0x2dc>)
 8005aca:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8005acc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4619      	mov	r1, r3
 8005ad2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005ad4:	f000 fe32 	bl	800673c <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 8005ad8:	f7fd fec4 	bl	8003864 <xTaskGetTickCount>
 8005adc:	4603      	mov	r3, r0
 8005ade:	4a75      	ldr	r2, [pc, #468]	@ (8005cb4 <eARPProcessPacket+0x2e8>)
 8005ae0:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 8005ae2:	4873      	ldr	r0, [pc, #460]	@ (8005cb0 <eARPProcessPacket+0x2e4>)
 8005ae4:	f7fe fa68 	bl	8003fb8 <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 8005ae8:	4b70      	ldr	r3, [pc, #448]	@ (8005cac <eARPProcessPacket+0x2e0>)
 8005aea:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005aee:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8005af0:	e13e      	b.n	8005d70 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 8005af2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005af4:	88db      	ldrh	r3, [r3, #6]
 8005af6:	b29b      	uxth	r3, r3
 8005af8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005afc:	d14a      	bne.n	8005b94 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 8005afe:	6a3b      	ldr	r3, [r7, #32]
 8005b00:	061a      	lsls	r2, r3, #24
 8005b02:	6a3b      	ldr	r3, [r7, #32]
 8005b04:	021b      	lsls	r3, r3, #8
 8005b06:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b0a:	431a      	orrs	r2, r3
 8005b0c:	6a3b      	ldr	r3, [r7, #32]
 8005b0e:	0a1b      	lsrs	r3, r3, #8
 8005b10:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005b14:	431a      	orrs	r2, r3
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	0e1b      	lsrs	r3, r3, #24
 8005b1a:	ea42 0103 	orr.w	r1, r2, r3
 8005b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b20:	061a      	lsls	r2, r3, #24
 8005b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b24:	021b      	lsls	r3, r3, #8
 8005b26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b2a:	431a      	orrs	r2, r3
 8005b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b2e:	0a1b      	lsrs	r3, r3, #8
 8005b30:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005b34:	431a      	orrs	r2, r3
 8005b36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b38:	0e1b      	lsrs	r3, r3, #24
 8005b3a:	ea42 0003 	orr.w	r0, r2, r3
 8005b3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d003      	beq.n	8005b4c <eARPProcessPacket+0x180>
 8005b44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	061a      	lsls	r2, r3, #24
 8005b4a:	e000      	b.n	8005b4e <eARPProcessPacket+0x182>
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d005      	beq.n	8005b60 <eARPProcessPacket+0x194>
 8005b54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	021b      	lsls	r3, r3, #8
 8005b5a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005b5e:	e000      	b.n	8005b62 <eARPProcessPacket+0x196>
 8005b60:	2300      	movs	r3, #0
 8005b62:	431a      	orrs	r2, r3
 8005b64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d005      	beq.n	8005b76 <eARPProcessPacket+0x1aa>
 8005b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	0a1b      	lsrs	r3, r3, #8
 8005b70:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005b74:	e000      	b.n	8005b78 <eARPProcessPacket+0x1ac>
 8005b76:	2300      	movs	r3, #0
 8005b78:	431a      	orrs	r2, r3
 8005b7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d003      	beq.n	8005b88 <eARPProcessPacket+0x1bc>
 8005b80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	0e1b      	lsrs	r3, r3, #24
 8005b86:	e000      	b.n	8005b8a <eARPProcessPacket+0x1be>
 8005b88:	2300      	movs	r3, #0
 8005b8a:	4313      	orrs	r3, r2
 8005b8c:	4602      	mov	r2, r0
 8005b8e:	484a      	ldr	r0, [pc, #296]	@ (8005cb8 <eARPProcessPacket+0x2ec>)
 8005b90:	f01a fcfc 	bl	802058c <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8005b94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b96:	88db      	ldrh	r3, [r3, #6]
 8005b98:	b29b      	uxth	r3, r3
 8005b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b9e:	d151      	bne.n	8005c44 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8005ba0:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8005ba2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ba4:	429a      	cmp	r2, r3
 8005ba6:	d04d      	beq.n	8005c44 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8005ba8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d04a      	beq.n	8005c44 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	061a      	lsls	r2, r3, #24
 8005bb2:	6a3b      	ldr	r3, [r7, #32]
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005bba:	431a      	orrs	r2, r3
 8005bbc:	6a3b      	ldr	r3, [r7, #32]
 8005bbe:	0a1b      	lsrs	r3, r3, #8
 8005bc0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005bc4:	431a      	orrs	r2, r3
 8005bc6:	6a3b      	ldr	r3, [r7, #32]
 8005bc8:	0e1b      	lsrs	r3, r3, #24
 8005bca:	ea42 0103 	orr.w	r1, r2, r3
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	061a      	lsls	r2, r3, #24
 8005bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd4:	021b      	lsls	r3, r3, #8
 8005bd6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005bda:	431a      	orrs	r2, r3
 8005bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bde:	0a1b      	lsrs	r3, r3, #8
 8005be0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005be4:	431a      	orrs	r2, r3
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	0e1b      	lsrs	r3, r3, #24
 8005bea:	ea42 0003 	orr.w	r0, r2, r3
 8005bee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d003      	beq.n	8005bfc <eARPProcessPacket+0x230>
 8005bf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	061a      	lsls	r2, r3, #24
 8005bfa:	e000      	b.n	8005bfe <eARPProcessPacket+0x232>
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d005      	beq.n	8005c10 <eARPProcessPacket+0x244>
 8005c04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	021b      	lsls	r3, r3, #8
 8005c0a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005c0e:	e000      	b.n	8005c12 <eARPProcessPacket+0x246>
 8005c10:	2300      	movs	r3, #0
 8005c12:	431a      	orrs	r2, r3
 8005c14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d005      	beq.n	8005c26 <eARPProcessPacket+0x25a>
 8005c1a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	0a1b      	lsrs	r3, r3, #8
 8005c20:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005c24:	e000      	b.n	8005c28 <eARPProcessPacket+0x25c>
 8005c26:	2300      	movs	r3, #0
 8005c28:	431a      	orrs	r2, r3
 8005c2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <eARPProcessPacket+0x26c>
 8005c30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	0e1b      	lsrs	r3, r3, #24
 8005c36:	e000      	b.n	8005c3a <eARPProcessPacket+0x26e>
 8005c38:	2300      	movs	r3, #0
 8005c3a:	4313      	orrs	r3, r2
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	481f      	ldr	r0, [pc, #124]	@ (8005cbc <eARPProcessPacket+0x2f0>)
 8005c40:	f01a fca4 	bl	802058c <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 8005c44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	f000 8092 	beq.w	8005d70 <eARPProcessPacket+0x3a4>
 8005c4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c4e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	b2db      	uxtb	r3, r3
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	f000 8089 	beq.w	8005d70 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 8005c5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c60:	88db      	ldrh	r3, [r3, #6]
 8005c62:	b29b      	uxth	r3, r3
 8005c64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c68:	d003      	beq.n	8005c72 <eARPProcessPacket+0x2a6>
 8005c6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005c6e:	d077      	beq.n	8005d60 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 8005c70:	e07e      	b.n	8005d70 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 8005c72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c78:	429a      	cmp	r2, r3
 8005c7a:	d121      	bne.n	8005cc0 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8005c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c7e:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8005c82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c84:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8005c86:	2206      	movs	r2, #6
 8005c88:	4619      	mov	r1, r3
 8005c8a:	f01b fe30 	bl	80218ee <memcmp>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d06c      	beq.n	8005d6e <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8005c94:	6a3b      	ldr	r3, [r7, #32]
 8005c96:	461a      	mov	r2, r3
 8005c98:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005c9a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c9c:	f000 f872 	bl	8005d84 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 8005ca0:	2302      	movs	r3, #2
 8005ca2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 8005ca6:	e062      	b.n	8005d6e <eARPProcessPacket+0x3a2>
 8005ca8:	20000c70 	.word	0x20000c70
 8005cac:	20000010 	.word	0x20000010
 8005cb0:	20000c74 	.word	0x20000c74
 8005cb4:	20000c6c 	.word	0x20000c6c
 8005cb8:	08022884 	.word	0x08022884
 8005cbc:	080228b4 	.word	0x080228b4
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8005cc0:	6a3b      	ldr	r3, [r7, #32]
 8005cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d152      	bne.n	8005d6e <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 8005cc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	6a3b      	ldr	r3, [r7, #32]
 8005cce:	405a      	eors	r2, r3
 8005cd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cd2:	685b      	ldr	r3, [r3, #4]
 8005cd4:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d149      	bne.n	8005d6e <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 8005cda:	4a28      	ldr	r2, [pc, #160]	@ (8005d7c <eARPProcessPacket+0x3b0>)
 8005cdc:	f107 0318 	add.w	r3, r7, #24
 8005ce0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ce4:	6018      	str	r0, [r3, #0]
 8005ce6:	3304      	adds	r3, #4
 8005ce8:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8005cea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cec:	3312      	adds	r3, #18
 8005cee:	2206      	movs	r2, #6
 8005cf0:	4923      	ldr	r1, [pc, #140]	@ (8005d80 <eARPProcessPacket+0x3b4>)
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f01b fdfb 	bl	80218ee <memcmp>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d00a      	beq.n	8005d14 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8005cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d00:	3312      	adds	r3, #18
 8005d02:	f107 0118 	add.w	r1, r7, #24
 8005d06:	2206      	movs	r2, #6
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f01b fdf0 	bl	80218ee <memcmp>
 8005d0e:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d12c      	bne.n	8005d6e <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 8005d14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d16:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 8005d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d1c:	3308      	adds	r3, #8
 8005d1e:	2206      	movs	r2, #6
 8005d20:	4619      	mov	r1, r3
 8005d22:	f01b fde4 	bl	80218ee <memcmp>
 8005d26:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d020      	beq.n	8005d6e <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 8005d30:	f107 020c 	add.w	r2, r7, #12
 8005d34:	f107 0110 	add.w	r1, r7, #16
 8005d38:	f107 0320 	add.w	r3, r7, #32
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	f000 fb11 	bl	8006364 <eARPGetCacheEntry>
 8005d42:	4603      	mov	r3, r0
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d112      	bne.n	8005d6e <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d10e      	bne.n	8005d6e <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8005d50:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d52:	3308      	adds	r3, #8
 8005d54:	6a39      	ldr	r1, [r7, #32]
 8005d56:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f000 f9ef 	bl	800613c <vARPRefreshCacheEntry>
                            break;
 8005d5e:	e006      	b.n	8005d6e <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8005d60:	6a3b      	ldr	r3, [r7, #32]
 8005d62:	461a      	mov	r2, r3
 8005d64:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005d66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005d68:	f000 f84a 	bl	8005e00 <vARPProcessPacketReply>
                            break;
 8005d6c:	e000      	b.n	8005d70 <eARPProcessPacket+0x3a4>
                            break;
 8005d6e:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8005d70:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8005d74:	4618      	mov	r0, r3
 8005d76:	3740      	adds	r7, #64	@ 0x40
 8005d78:	46bd      	mov	sp, r7
 8005d7a:	bd80      	pop	{r7, pc}
 8005d7c:	080228e4 	.word	0x080228e4
 8005d80:	08025c24 	.word	0x08025c24

08005d84 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b088      	sub	sp, #32
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	60f8      	str	r0, [r7, #12]
 8005d8c:	60b9      	str	r1, [r7, #8]
 8005d8e:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	330e      	adds	r3, #14
 8005d94:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8005d96:	69fb      	ldr	r3, [r7, #28]
 8005d98:	3308      	adds	r3, #8
 8005d9a:	68ba      	ldr	r2, [r7, #8]
 8005d9c:	6879      	ldr	r1, [r7, #4]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f000 f9cc 	bl	800613c <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 8005da4:	69fb      	ldr	r3, [r7, #28]
 8005da6:	2200      	movs	r2, #0
 8005da8:	719a      	strb	r2, [r3, #6]
 8005daa:	2200      	movs	r2, #0
 8005dac:	f042 0202 	orr.w	r2, r2, #2
 8005db0:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	3308      	adds	r3, #8
 8005db6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 8005db8:	69fb      	ldr	r3, [r7, #28]
 8005dba:	3312      	adds	r3, #18
 8005dbc:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8005dbe:	2206      	movs	r2, #6
 8005dc0:	69b9      	ldr	r1, [r7, #24]
 8005dc2:	6978      	ldr	r0, [r7, #20]
 8005dc4:	f01a fdfe 	bl	80209c4 <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 8005dc8:	69fb      	ldr	r3, [r7, #28]
 8005dca:	687a      	ldr	r2, [r7, #4]
 8005dcc:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	33e8      	adds	r3, #232	@ 0xe8
 8005dd2:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 8005dd4:	69fb      	ldr	r3, [r7, #28]
 8005dd6:	3308      	adds	r3, #8
 8005dd8:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 8005dda:	2206      	movs	r2, #6
 8005ddc:	69b9      	ldr	r1, [r7, #24]
 8005dde:	6978      	ldr	r0, [r7, #20]
 8005de0:	f01a fdf0 	bl	80209c4 <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8005de4:	68bb      	ldr	r3, [r7, #8]
 8005de6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 8005de8:	69fb      	ldr	r3, [r7, #28]
 8005dea:	330e      	adds	r3, #14
 8005dec:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 8005dee:	69bb      	ldr	r3, [r7, #24]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	461a      	mov	r2, r3
 8005df4:	697b      	ldr	r3, [r7, #20]
 8005df6:	601a      	str	r2, [r3, #0]
    }
 8005df8:	bf00      	nop
 8005dfa:	3720      	adds	r7, #32
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}

08005e00 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8005e00:	b580      	push	{r7, lr}
 8005e02:	b08c      	sub	sp, #48	@ 0x30
 8005e04:	af00      	add	r7, sp, #0
 8005e06:	60f8      	str	r0, [r7, #12]
 8005e08:	60b9      	str	r1, [r7, #8]
 8005e0a:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	330e      	adds	r3, #14
 8005e10:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8005e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e14:	699b      	ldr	r3, [r3, #24]
 8005e16:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8005e18:	68bb      	ldr	r3, [r7, #8]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e1e:	429a      	cmp	r2, r3
 8005e20:	d005      	beq.n	8005e2e <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	f000 f844 	bl	8005eb0 <xIsIPInARPCache>
 8005e28:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8005e2a:	2b01      	cmp	r3, #1
 8005e2c:	d106      	bne.n	8005e3c <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8005e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e30:	3308      	adds	r3, #8
 8005e32:	68ba      	ldr	r2, [r7, #8]
 8005e34:	6879      	ldr	r1, [r7, #4]
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 f980 	bl	800613c <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8005e3c:	4b1b      	ldr	r3, [pc, #108]	@ (8005eac <vARPProcessPacketReply+0xac>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d02e      	beq.n	8005ea2 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 8005e44:	4b19      	ldr	r3, [pc, #100]	@ (8005eac <vARPProcessPacketReply+0xac>)
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	4618      	mov	r0, r3
 8005e4a:	f003 f8a5 	bl	8008f98 <uxIPHeaderSizePacket>
 8005e4e:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8005e50:	2b14      	cmp	r3, #20
 8005e52:	d126      	bne.n	8005ea2 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 8005e54:	4b15      	ldr	r3, [pc, #84]	@ (8005eac <vARPProcessPacketReply+0xac>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e5a:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 8005e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e5e:	330e      	adds	r3, #14
 8005e60:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 8005e62:	6a3b      	ldr	r3, [r7, #32]
 8005e64:	68db      	ldr	r3, [r3, #12]
 8005e66:	687a      	ldr	r2, [r7, #4]
 8005e68:	429a      	cmp	r2, r3
 8005e6a:	d11a      	bne.n	8005ea2 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8005e70:	2301      	movs	r3, #1
 8005e72:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8005e74:	4b0d      	ldr	r3, [pc, #52]	@ (8005eac <vARPProcessPacketReply+0xac>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 8005e7a:	f107 0314 	add.w	r3, r7, #20
 8005e7e:	69f9      	ldr	r1, [r7, #28]
 8005e80:	4618      	mov	r0, r3
 8005e82:	f002 fcd5 	bl	8008830 <xSendEventStructToIPTask>
 8005e86:	4603      	mov	r3, r0
 8005e88:	2b01      	cmp	r3, #1
 8005e8a:	d004      	beq.n	8005e96 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 8005e8c:	4b07      	ldr	r3, [pc, #28]	@ (8005eac <vARPProcessPacketReply+0xac>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	4618      	mov	r0, r3
 8005e92:	f010 fa91 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 8005e96:	4b05      	ldr	r3, [pc, #20]	@ (8005eac <vARPProcessPacketReply+0xac>)
 8005e98:	2200      	movs	r2, #0
 8005e9a:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 8005e9c:	2000      	movs	r0, #0
 8005e9e:	f003 fabd 	bl	800941c <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 8005ea2:	bf00      	nop
 8005ea4:	3730      	adds	r7, #48	@ 0x30
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000e44 	.word	0x20000e44

08005eb0 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 8005eb0:	b480      	push	{r7}
 8005eb2:	b085      	sub	sp, #20
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 8005eb8:	2300      	movs	r3, #0
 8005eba:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	60fb      	str	r3, [r7, #12]
 8005ec0:	e017      	b.n	8005ef2 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 8005ec2:	4a12      	ldr	r2, [pc, #72]	@ (8005f0c <xIsIPInARPCache+0x5c>)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	4413      	add	r3, r2
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	687a      	ldr	r2, [r7, #4]
 8005ece:	429a      	cmp	r2, r3
 8005ed0:	d10c      	bne.n	8005eec <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8005ed6:	4a0d      	ldr	r2, [pc, #52]	@ (8005f0c <xIsIPInARPCache+0x5c>)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	011b      	lsls	r3, r3, #4
 8005edc:	4413      	add	r3, r2
 8005ede:	330b      	adds	r3, #11
 8005ee0:	781b      	ldrb	r3, [r3, #0]
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d109      	bne.n	8005efa <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 8005ee6:	2300      	movs	r3, #0
 8005ee8:	60bb      	str	r3, [r7, #8]
            }

            break;
 8005eea:	e006      	b.n	8005efa <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	3301      	adds	r3, #1
 8005ef0:	60fb      	str	r3, [r7, #12]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b05      	cmp	r3, #5
 8005ef6:	dde4      	ble.n	8005ec2 <xIsIPInARPCache+0x12>
 8005ef8:	e000      	b.n	8005efc <xIsIPInARPCache+0x4c>
            break;
 8005efa:	bf00      	nop
        }
    }

    return xReturn;
 8005efc:	68bb      	ldr	r3, [r7, #8]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr
 8005f0a:	bf00      	nop
 8005f0c:	20000c0c 	.word	0x20000c0c

08005f10 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8005f10:	b590      	push	{r4, r7, lr}
 8005f12:	b0a5      	sub	sp, #148	@ 0x94
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f003 f83a 	bl	8008f98 <uxIPHeaderSizePacket>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b14      	cmp	r3, #20
 8005f28:	d002      	beq.n	8005f30 <xCheckRequiresARPResolution+0x20>
 8005f2a:	2b28      	cmp	r3, #40	@ 0x28
 8005f2c:	d029      	beq.n	8005f82 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 8005f2e:	e0b6      	b.n	800609e <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f34:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8005f36:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005f38:	330e      	adds	r3, #14
 8005f3a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f40:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 8005f42:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f44:	68da      	ldr	r2, [r3, #12]
 8005f46:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	405a      	eors	r2, r3
 8005f4c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005f4e:	685b      	ldr	r3, [r3, #4]
 8005f50:	4013      	ands	r3, r2
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	f040 80a0 	bne.w	8006098 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 8005f58:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	f7ff ffa7 	bl	8005eb0 <xIsIPInARPCache>
 8005f62:	4603      	mov	r3, r0
 8005f64:	2b00      	cmp	r3, #0
 8005f66:	f040 8097 	bne.w	8006098 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005f6e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f70:	68db      	ldr	r3, [r3, #12]
 8005f72:	4619      	mov	r1, r3
 8005f74:	4610      	mov	r0, r2
 8005f76:	f000 fbe1 	bl	800673c <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 8005f7a:	2301      	movs	r3, #1
 8005f7c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8005f80:	e08a      	b.n	8006098 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f86:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8005f8a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005f8e:	330e      	adds	r3, #14
 8005f90:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 8005f94:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005f98:	3308      	adds	r3, #8
 8005f9a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 8005f9e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005fa2:	799b      	ldrb	r3, [r3, #6]
 8005fa4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 8005fa8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005fac:	2b06      	cmp	r3, #6
 8005fae:	d003      	beq.n	8005fb8 <xCheckRequiresARPResolution+0xa8>
 8005fb0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 8005fb4:	2b11      	cmp	r3, #17
 8005fb6:	d171      	bne.n	800609c <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 8005fb8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 8005fbc:	f006 ff68 	bl	800ce90 <xIPv6_GetIPType>
 8005fc0:	4603      	mov	r3, r0
 8005fc2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 8005fc6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 8005fca:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d00d      	beq.n	8005fee <xCheckRequiresARPResolution+0xde>
 8005fd2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d007      	beq.n	8005fea <xCheckRequiresARPResolution+0xda>
 8005fda:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005fde:	2b04      	cmp	r3, #4
 8005fe0:	d101      	bne.n	8005fe6 <xCheckRequiresARPResolution+0xd6>
 8005fe2:	4b32      	ldr	r3, [pc, #200]	@ (80060ac <xCheckRequiresARPResolution+0x19c>)
 8005fe4:	e004      	b.n	8005ff0 <xCheckRequiresARPResolution+0xe0>
 8005fe6:	4b32      	ldr	r3, [pc, #200]	@ (80060b0 <xCheckRequiresARPResolution+0x1a0>)
 8005fe8:	e002      	b.n	8005ff0 <xCheckRequiresARPResolution+0xe0>
 8005fea:	4b32      	ldr	r3, [pc, #200]	@ (80060b4 <xCheckRequiresARPResolution+0x1a4>)
 8005fec:	e000      	b.n	8005ff0 <xCheckRequiresARPResolution+0xe0>
 8005fee:	4b32      	ldr	r3, [pc, #200]	@ (80060b8 <xCheckRequiresARPResolution+0x1a8>)
 8005ff0:	461a      	mov	r2, r3
 8005ff2:	4832      	ldr	r0, [pc, #200]	@ (80060bc <xCheckRequiresARPResolution+0x1ac>)
 8005ff4:	f01a faca 	bl	802058c <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 8005ff8:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 8005ffc:	2b01      	cmp	r3, #1
 8005ffe:	d14d      	bne.n	800609c <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 8006000:	f107 030c 	add.w	r3, r7, #12
 8006004:	2250      	movs	r2, #80	@ 0x50
 8006006:	2100      	movs	r1, #0
 8006008:	4618      	mov	r0, r3
 800600a:	f01a fde8 	bl	8020bde <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 800600e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8006012:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006016:	4619      	mov	r1, r3
 8006018:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800601c:	f004 fe0e 	bl	800ac3c <eNDGetCacheEntry>
 8006020:	4603      	mov	r3, r0
 8006022:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 8006026:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800602a:	2b00      	cmp	r3, #0
 800602c:	d007      	beq.n	800603e <xCheckRequiresARPResolution+0x12e>
 800602e:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8006032:	2b01      	cmp	r3, #1
 8006034:	d101      	bne.n	800603a <xCheckRequiresARPResolution+0x12a>
 8006036:	4c22      	ldr	r4, [pc, #136]	@ (80060c0 <xCheckRequiresARPResolution+0x1b0>)
 8006038:	e002      	b.n	8006040 <xCheckRequiresARPResolution+0x130>
 800603a:	4c22      	ldr	r4, [pc, #136]	@ (80060c4 <xCheckRequiresARPResolution+0x1b4>)
 800603c:	e000      	b.n	8006040 <xCheckRequiresARPResolution+0x130>
 800603e:	4c22      	ldr	r4, [pc, #136]	@ (80060c8 <xCheckRequiresARPResolution+0x1b8>)
 8006040:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006042:	f107 010c 	add.w	r1, r7, #12
 8006046:	2250      	movs	r2, #80	@ 0x50
 8006048:	4618      	mov	r0, r3
 800604a:	f006 ff79 	bl	800cf40 <pcEndpointName>
 800604e:	4603      	mov	r3, r0
 8006050:	461a      	mov	r2, r3
 8006052:	4621      	mov	r1, r4
 8006054:	481d      	ldr	r0, [pc, #116]	@ (80060cc <xCheckRequiresARPResolution+0x1bc>)
 8006056:	f01a fa99 	bl	802058c <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 800605a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800605e:	2b00      	cmp	r3, #0
 8006060:	d11c      	bne.n	800609c <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 8006062:	2356      	movs	r3, #86	@ 0x56
 8006064:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 8006066:	2100      	movs	r1, #0
 8006068:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800606a:	f010 f93d 	bl	80162e8 <pxGetNetworkBufferWithDescriptor>
 800606e:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 8006070:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006072:	2b00      	cmp	r3, #0
 8006074:	d00c      	beq.n	8006090 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800607a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800607c:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006082:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006084:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 8006086:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800608a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800608c:	f005 f842 	bl	800b114 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 8006090:	2301      	movs	r3, #1
 8006092:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006096:	e001      	b.n	800609c <xCheckRequiresARPResolution+0x18c>
                   break;
 8006098:	bf00      	nop
 800609a:	e000      	b.n	800609e <xCheckRequiresARPResolution+0x18e>
                   break;
 800609c:	bf00      	nop
    }

    return xNeedsARPResolution;
 800609e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3794      	adds	r7, #148	@ 0x94
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd90      	pop	{r4, r7, pc}
 80060aa:	bf00      	nop
 80060ac:	080228ec 	.word	0x080228ec
 80060b0:	080228f8 	.word	0x080228f8
 80060b4:	08022900 	.word	0x08022900
 80060b8:	0802290c 	.word	0x0802290c
 80060bc:	08022914 	.word	0x08022914
 80060c0:	08022940 	.word	0x08022940
 80060c4:	08022944 	.word	0x08022944
 80060c8:	0802294c 	.word	0x0802294c
 80060cc:	08022954 	.word	0x08022954

080060d0 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 80060d0:	b580      	push	{r7, lr}
 80060d2:	b084      	sub	sp, #16
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
 80060d8:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d026      	beq.n	800612e <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80060e0:	2300      	movs	r3, #0
 80060e2:	60fb      	str	r3, [r7, #12]
 80060e4:	e020      	b.n	8006128 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 80060e6:	4a14      	ldr	r2, [pc, #80]	@ (8006138 <vARPRefreshCacheEntryAge+0x68>)
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	011b      	lsls	r3, r3, #4
 80060ec:	4413      	add	r3, r2
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	683a      	ldr	r2, [r7, #0]
 80060f2:	429a      	cmp	r2, r3
 80060f4:	d115      	bne.n	8006122 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	011b      	lsls	r3, r3, #4
 80060fa:	4a0f      	ldr	r2, [pc, #60]	@ (8006138 <vARPRefreshCacheEntryAge+0x68>)
 80060fc:	4413      	add	r3, r2
 80060fe:	3304      	adds	r3, #4
 8006100:	6879      	ldr	r1, [r7, #4]
 8006102:	2206      	movs	r2, #6
 8006104:	4618      	mov	r0, r3
 8006106:	f01b fbf2 	bl	80218ee <memcmp>
 800610a:	4603      	mov	r3, r0
 800610c:	2b00      	cmp	r3, #0
 800610e:	d108      	bne.n	8006122 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006110:	4a09      	ldr	r2, [pc, #36]	@ (8006138 <vARPRefreshCacheEntryAge+0x68>)
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	011b      	lsls	r3, r3, #4
 8006116:	4413      	add	r3, r2
 8006118:	330a      	adds	r3, #10
 800611a:	2296      	movs	r2, #150	@ 0x96
 800611c:	701a      	strb	r2, [r3, #0]
                    break;
 800611e:	bf00      	nop
                }
            }
        }
    }
}
 8006120:	e005      	b.n	800612e <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	3301      	adds	r3, #1
 8006126:	60fb      	str	r3, [r7, #12]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	2b05      	cmp	r3, #5
 800612c:	dddb      	ble.n	80060e6 <vARPRefreshCacheEntryAge+0x16>
}
 800612e:	bf00      	nop
 8006130:	3710      	adds	r7, #16
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	20000c0c 	.word	0x20000c0c

0800613c <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 800613c:	b580      	push	{r7, lr}
 800613e:	b088      	sub	sp, #32
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 8006148:	f107 0310 	add.w	r3, r7, #16
 800614c:	687a      	ldr	r2, [r7, #4]
 800614e:	68b9      	ldr	r1, [r7, #8]
 8006150:	68f8      	ldr	r0, [r7, #12]
 8006152:	f000 f85b 	bl	800620c <prvFindCacheEntry>
 8006156:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 8006158:	69fb      	ldr	r3, [r7, #28]
 800615a:	2b00      	cmp	r3, #0
 800615c:	d150      	bne.n	8006200 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2b00      	cmp	r3, #0
 8006162:	db0e      	blt.n	8006182 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 8006168:	693b      	ldr	r3, [r7, #16]
 800616a:	2b00      	cmp	r3, #0
 800616c:	db0e      	blt.n	800618c <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	4a25      	ldr	r2, [pc, #148]	@ (8006208 <vARPRefreshCacheEntry+0xcc>)
 8006174:	4413      	add	r3, r2
 8006176:	2210      	movs	r2, #16
 8006178:	2100      	movs	r1, #0
 800617a:	4618      	mov	r0, r3
 800617c:	f01a fd2f 	bl	8020bde <memset>
 8006180:	e004      	b.n	800618c <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	2b00      	cmp	r3, #0
 8006186:	db01      	blt.n	800618c <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 8006188:	693b      	ldr	r3, [r7, #16]
 800618a:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 800618c:	69bb      	ldr	r3, [r7, #24]
 800618e:	4a1e      	ldr	r2, [pc, #120]	@ (8006208 <vARPRefreshCacheEntry+0xcc>)
 8006190:	011b      	lsls	r3, r3, #4
 8006192:	4413      	add	r3, r2
 8006194:	68ba      	ldr	r2, [r7, #8]
 8006196:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	2b00      	cmp	r3, #0
 800619c:	d01f      	beq.n	80061de <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 800619e:	69bb      	ldr	r3, [r7, #24]
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	4a19      	ldr	r2, [pc, #100]	@ (8006208 <vARPRefreshCacheEntry+0xcc>)
 80061a4:	4413      	add	r3, r2
 80061a6:	3304      	adds	r3, #4
 80061a8:	68f9      	ldr	r1, [r7, #12]
 80061aa:	2206      	movs	r2, #6
 80061ac:	4618      	mov	r0, r3
 80061ae:	f01a fc09 	bl	80209c4 <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80061b2:	69bb      	ldr	r3, [r7, #24]
 80061b4:	4a14      	ldr	r2, [pc, #80]	@ (8006208 <vARPRefreshCacheEntry+0xcc>)
 80061b6:	011b      	lsls	r3, r3, #4
 80061b8:	4413      	add	r3, r2
 80061ba:	330a      	adds	r3, #10
 80061bc:	2296      	movs	r2, #150	@ 0x96
 80061be:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 80061c0:	69bb      	ldr	r3, [r7, #24]
 80061c2:	4a11      	ldr	r2, [pc, #68]	@ (8006208 <vARPRefreshCacheEntry+0xcc>)
 80061c4:	011b      	lsls	r3, r3, #4
 80061c6:	4413      	add	r3, r2
 80061c8:	330b      	adds	r3, #11
 80061ca:	2201      	movs	r2, #1
 80061cc:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 80061ce:	69bb      	ldr	r3, [r7, #24]
 80061d0:	4a0d      	ldr	r2, [pc, #52]	@ (8006208 <vARPRefreshCacheEntry+0xcc>)
 80061d2:	011b      	lsls	r3, r3, #4
 80061d4:	4413      	add	r3, r2
 80061d6:	330c      	adds	r3, #12
 80061d8:	687a      	ldr	r2, [r7, #4]
 80061da:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 80061dc:	e010      	b.n	8006200 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 80061de:	693b      	ldr	r3, [r7, #16]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	da0d      	bge.n	8006200 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 80061e4:	69bb      	ldr	r3, [r7, #24]
 80061e6:	4a08      	ldr	r2, [pc, #32]	@ (8006208 <vARPRefreshCacheEntry+0xcc>)
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	4413      	add	r3, r2
 80061ec:	330a      	adds	r3, #10
 80061ee:	2205      	movs	r2, #5
 80061f0:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 80061f2:	69bb      	ldr	r3, [r7, #24]
 80061f4:	4a04      	ldr	r2, [pc, #16]	@ (8006208 <vARPRefreshCacheEntry+0xcc>)
 80061f6:	011b      	lsls	r3, r3, #4
 80061f8:	4413      	add	r3, r2
 80061fa:	330b      	adds	r3, #11
 80061fc:	2200      	movs	r2, #0
 80061fe:	701a      	strb	r2, [r3, #0]
}
 8006200:	bf00      	nop
 8006202:	3720      	adds	r7, #32
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}
 8006208:	20000c0c 	.word	0x20000c0c

0800620c <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b08a      	sub	sp, #40	@ 0x28
 8006210:	af00      	add	r7, sp, #0
 8006212:	60f8      	str	r0, [r7, #12]
 8006214:	60b9      	str	r1, [r7, #8]
 8006216:	607a      	str	r2, [r7, #4]
 8006218:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 800621a:	2300      	movs	r3, #0
 800621c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 800621e:	2300      	movs	r3, #0
 8006220:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 8006224:	2300      	movs	r3, #0
 8006226:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8006228:	2102      	movs	r1, #2
 800622a:	68b8      	ldr	r0, [r7, #8]
 800622c:	f006 fb24 	bl	800c878 <FreeRTOS_FindEndPointOnNetMask>
 8006230:	4603      	mov	r3, r0
 8006232:	2b00      	cmp	r3, #0
 8006234:	bf14      	ite	ne
 8006236:	2301      	movne	r3, #1
 8006238:	2300      	moveq	r3, #0
 800623a:	b2db      	uxtb	r3, r3
 800623c:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 800623e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006242:	3b01      	subs	r3, #1
 8006244:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	f04f 32ff 	mov.w	r2, #4294967295
 800624e:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 8006250:	683b      	ldr	r3, [r7, #0]
 8006252:	f04f 32ff 	mov.w	r2, #4294967295
 8006256:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 8006258:	683b      	ldr	r3, [r7, #0]
 800625a:	2200      	movs	r2, #0
 800625c:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800625e:	2300      	movs	r3, #0
 8006260:	627b      	str	r3, [r7, #36]	@ 0x24
 8006262:	e074      	b.n	800634e <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 8006264:	2300      	movs	r3, #0
 8006266:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d00e      	beq.n	800628c <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 800626e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006270:	011b      	lsls	r3, r3, #4
 8006272:	4a3b      	ldr	r2, [pc, #236]	@ (8006360 <prvFindCacheEntry+0x154>)
 8006274:	4413      	add	r3, r2
 8006276:	3304      	adds	r3, #4
 8006278:	68f9      	ldr	r1, [r7, #12]
 800627a:	2206      	movs	r2, #6
 800627c:	4618      	mov	r0, r3
 800627e:	f01b fb36 	bl	80218ee <memcmp>
 8006282:	4603      	mov	r3, r0
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 8006288:	2301      	movs	r3, #1
 800628a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800628c:	4a34      	ldr	r2, [pc, #208]	@ (8006360 <prvFindCacheEntry+0x154>)
 800628e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006290:	011b      	lsls	r3, r3, #4
 8006292:	4413      	add	r3, r2
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	68ba      	ldr	r2, [r7, #8]
 8006298:	429a      	cmp	r2, r3
 800629a:	d125      	bne.n	80062e8 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d103      	bne.n	80062aa <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062a6:	601a      	str	r2, [r3, #0]
                break;
 80062a8:	e054      	b.n	8006354 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 80062aa:	69bb      	ldr	r3, [r7, #24]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d017      	beq.n	80062e0 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80062b0:	4a2b      	ldr	r2, [pc, #172]	@ (8006360 <prvFindCacheEntry+0x154>)
 80062b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062b4:	011b      	lsls	r3, r3, #4
 80062b6:	4413      	add	r3, r2
 80062b8:	330a      	adds	r3, #10
 80062ba:	2296      	movs	r2, #150	@ 0x96
 80062bc:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 80062be:	4a28      	ldr	r2, [pc, #160]	@ (8006360 <prvFindCacheEntry+0x154>)
 80062c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062c2:	011b      	lsls	r3, r3, #4
 80062c4:	4413      	add	r3, r2
 80062c6:	330b      	adds	r3, #11
 80062c8:	2201      	movs	r2, #1
 80062ca:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 80062cc:	4a24      	ldr	r2, [pc, #144]	@ (8006360 <prvFindCacheEntry+0x154>)
 80062ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062d0:	011b      	lsls	r3, r3, #4
 80062d2:	4413      	add	r3, r2
 80062d4:	330c      	adds	r3, #12
 80062d6:	687a      	ldr	r2, [r7, #4]
 80062d8:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 80062da:	2301      	movs	r3, #1
 80062dc:	61fb      	str	r3, [r7, #28]
                break;
 80062de:	e039      	b.n	8006354 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 80062e0:	683b      	ldr	r3, [r7, #0]
 80062e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062e4:	601a      	str	r2, [r3, #0]
 80062e6:	e02f      	b.n	8006348 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 80062e8:	69bb      	ldr	r3, [r7, #24]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d017      	beq.n	800631e <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 80062ee:	4a1c      	ldr	r2, [pc, #112]	@ (8006360 <prvFindCacheEntry+0x154>)
 80062f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f2:	011b      	lsls	r3, r3, #4
 80062f4:	4413      	add	r3, r2
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2103      	movs	r1, #3
 80062fa:	4618      	mov	r0, r3
 80062fc:	f006 fabc 	bl	800c878 <FreeRTOS_FindEndPointOnNetMask>
 8006300:	4603      	mov	r3, r0
 8006302:	2b00      	cmp	r3, #0
 8006304:	bf14      	ite	ne
 8006306:	2301      	movne	r3, #1
 8006308:	2300      	moveq	r3, #0
 800630a:	b2db      	uxtb	r3, r3
 800630c:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 800630e:	697a      	ldr	r2, [r7, #20]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	429a      	cmp	r2, r3
 8006314:	d118      	bne.n	8006348 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800631a:	605a      	str	r2, [r3, #4]
 800631c:	e014      	b.n	8006348 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800631e:	4a10      	ldr	r2, [pc, #64]	@ (8006360 <prvFindCacheEntry+0x154>)
 8006320:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006322:	011b      	lsls	r3, r3, #4
 8006324:	4413      	add	r3, r2
 8006326:	330a      	adds	r3, #10
 8006328:	781b      	ldrb	r3, [r3, #0]
 800632a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800632e:	429a      	cmp	r2, r3
 8006330:	d90a      	bls.n	8006348 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 8006332:	4a0b      	ldr	r2, [pc, #44]	@ (8006360 <prvFindCacheEntry+0x154>)
 8006334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006336:	011b      	lsls	r3, r3, #4
 8006338:	4413      	add	r3, r2
 800633a:	330a      	adds	r3, #10
 800633c:	781b      	ldrb	r3, [r3, #0]
 800633e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006346:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634a:	3301      	adds	r3, #1
 800634c:	627b      	str	r3, [r7, #36]	@ 0x24
 800634e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006350:	2b05      	cmp	r3, #5
 8006352:	dd87      	ble.n	8006264 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 8006354:	69fb      	ldr	r3, [r7, #28]
}
 8006356:	4618      	mov	r0, r3
 8006358:	3728      	adds	r7, #40	@ 0x28
 800635a:	46bd      	mov	sp, r7
 800635c:	bd80      	pop	{r7, pc}
 800635e:	bf00      	nop
 8006360:	20000c0c 	.word	0x20000c0c

08006364 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006364:	b580      	push	{r7, lr}
 8006366:	b088      	sub	sp, #32
 8006368:	af00      	add	r7, sp, #0
 800636a:	60f8      	str	r0, [r7, #12]
 800636c:	60b9      	str	r1, [r7, #8]
 800636e:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8006370:	2300      	movs	r3, #0
 8006372:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d104      	bne.n	8006384 <eARPGetCacheEntry+0x20>
 800637a:	f240 31c9 	movw	r1, #969	@ 0x3c9
 800637e:	483c      	ldr	r0, [pc, #240]	@ (8006470 <eARPGetCacheEntry+0x10c>)
 8006380:	f7fa fed6 	bl	8001130 <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2b00      	cmp	r3, #0
 8006388:	d104      	bne.n	8006394 <eARPGetCacheEntry+0x30>
 800638a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 800638e:	4838      	ldr	r0, [pc, #224]	@ (8006470 <eARPGetCacheEntry+0x10c>)
 8006390:	f7fa fece 	bl	8001130 <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d104      	bne.n	80063a4 <eARPGetCacheEntry+0x40>
 800639a:	f240 31cb 	movw	r1, #971	@ 0x3cb
 800639e:	4834      	ldr	r0, [pc, #208]	@ (8006470 <eARPGetCacheEntry+0x10c>)
 80063a0:	f7fa fec6 	bl	8001130 <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 80063b0:	2100      	movs	r1, #0
 80063b2:	6978      	ldr	r0, [r7, #20]
 80063b4:	f006 f9d4 	bl	800c760 <FreeRTOS_FindEndPointOnIP_IPv4>
 80063b8:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 80063ba:	6978      	ldr	r0, [r7, #20]
 80063bc:	f003 fc3c 	bl	8009c38 <xIsIPv4Multicast>
 80063c0:	4603      	mov	r3, r0
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d021      	beq.n	800640a <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 80063c6:	68b9      	ldr	r1, [r7, #8]
 80063c8:	6978      	ldr	r0, [r7, #20]
 80063ca:	f003 fd63 	bl	8009e94 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 80063ce:	2302      	movs	r3, #2
 80063d0:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80063d2:	2000      	movs	r0, #0
 80063d4:	f006 f978 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 80063d8:	61b8      	str	r0, [r7, #24]

            for( ;
 80063da:	e012      	b.n	8006402 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 80063dc:	69bb      	ldr	r3, [r7, #24]
 80063de:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80063e2:	f003 0304 	and.w	r3, r3, #4
 80063e6:	b2db      	uxtb	r3, r3
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d105      	bne.n	80063f8 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	69ba      	ldr	r2, [r7, #24]
 80063f0:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 80063f2:	2301      	movs	r3, #1
 80063f4:	77fb      	strb	r3, [r7, #31]
                    break;
 80063f6:	e035      	b.n	8006464 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 80063f8:	69b9      	ldr	r1, [r7, #24]
 80063fa:	2000      	movs	r0, #0
 80063fc:	f006 f986 	bl	800c70c <FreeRTOS_NextEndPoint>
 8006400:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 8006402:	69bb      	ldr	r3, [r7, #24]
 8006404:	2b00      	cmp	r3, #0
 8006406:	d1e9      	bne.n	80063dc <eARPGetCacheEntry+0x78>
 8006408:	e02c      	b.n	8006464 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 800640a:	697b      	ldr	r3, [r7, #20]
 800640c:	061a      	lsls	r2, r3, #24
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	021b      	lsls	r3, r3, #8
 8006412:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006416:	431a      	orrs	r2, r3
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	0a1b      	lsrs	r3, r3, #8
 800641c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006420:	431a      	orrs	r2, r3
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	0e1b      	lsrs	r3, r3, #24
 8006426:	4313      	orrs	r3, r2
 8006428:	b2db      	uxtb	r3, r3
 800642a:	2bff      	cmp	r3, #255	@ 0xff
 800642c:	d113      	bne.n	8006456 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	4a10      	ldr	r2, [pc, #64]	@ (8006474 <eARPGetCacheEntry+0x110>)
 8006432:	6811      	ldr	r1, [r2, #0]
 8006434:	6019      	str	r1, [r3, #0]
 8006436:	8892      	ldrh	r2, [r2, #4]
 8006438:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 800643a:	2104      	movs	r1, #4
 800643c:	6978      	ldr	r0, [r7, #20]
 800643e:	f006 fa1b 	bl	800c878 <FreeRTOS_FindEndPointOnNetMask>
 8006442:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 8006444:	69bb      	ldr	r3, [r7, #24]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d002      	beq.n	8006450 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	69ba      	ldr	r2, [r7, #24]
 800644e:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 8006450:	2301      	movs	r3, #1
 8006452:	77fb      	strb	r3, [r7, #31]
 8006454:	e006      	b.n	8006464 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8006456:	687a      	ldr	r2, [r7, #4]
 8006458:	68b9      	ldr	r1, [r7, #8]
 800645a:	68f8      	ldr	r0, [r7, #12]
 800645c:	f000 f80c 	bl	8006478 <eARPGetCacheEntryGateWay>
 8006460:	4603      	mov	r3, r0
 8006462:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 8006464:	7ffb      	ldrb	r3, [r7, #31]
    }
 8006466:	4618      	mov	r0, r3
 8006468:	3720      	adds	r7, #32
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
 800646e:	bf00      	nop
 8006470:	08022988 	.word	0x08022988
 8006474:	08025c24 	.word	0x08025c24

08006478 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006478:	b580      	push	{r7, lr}
 800647a:	b088      	sub	sp, #32
 800647c:	af00      	add	r7, sp, #0
 800647e:	60f8      	str	r0, [r7, #12]
 8006480:	60b9      	str	r1, [r7, #8]
 8006482:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8006484:	2300      	movs	r3, #0
 8006486:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 8006494:	2104      	movs	r1, #4
 8006496:	69b8      	ldr	r0, [r7, #24]
 8006498:	f006 f9ee 	bl	800c878 <FreeRTOS_FindEndPointOnNetMask>
 800649c:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 800649e:	693b      	ldr	r3, [r7, #16]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d11b      	bne.n	80064dc <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 80064a4:	687a      	ldr	r2, [r7, #4]
 80064a6:	68b9      	ldr	r1, [r7, #8]
 80064a8:	69b8      	ldr	r0, [r7, #24]
 80064aa:	f000 f86b 	bl	8006584 <prvCacheLookup>
 80064ae:	4603      	mov	r3, r0
 80064b0:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 80064b2:	7ffb      	ldrb	r3, [r7, #31]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d017      	beq.n	80064e8 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 80064b8:	2040      	movs	r0, #64	@ 0x40
 80064ba:	f006 fca9 	bl	800ce10 <FreeRTOS_FindGateWay>
 80064be:	4602      	mov	r2, r0
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d004      	beq.n	80064d6 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	61bb      	str	r3, [r7, #24]
 80064d4:	e008      	b.n	80064e8 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 80064d6:	2300      	movs	r3, #0
 80064d8:	61bb      	str	r3, [r7, #24]
 80064da:	e005      	b.n	80064e8 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	693a      	ldr	r2, [r7, #16]
 80064e6:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 80064e8:	7ffb      	ldrb	r3, [r7, #31]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d13f      	bne.n	800656e <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 80064ee:	69bb      	ldr	r3, [r7, #24]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d102      	bne.n	80064fa <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 80064f4:	2302      	movs	r3, #2
 80064f6:	77fb      	strb	r3, [r7, #31]
 80064f8:	e039      	b.n	800656e <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 80064fa:	687a      	ldr	r2, [r7, #4]
 80064fc:	68b9      	ldr	r1, [r7, #8]
 80064fe:	69b8      	ldr	r0, [r7, #24]
 8006500:	f000 f840 	bl	8006584 <prvCacheLookup>
 8006504:	4603      	mov	r3, r0
 8006506:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 8006508:	7ffb      	ldrb	r3, [r7, #31]
 800650a:	2b01      	cmp	r3, #1
 800650c:	d103      	bne.n	8006516 <eARPGetCacheEntryGateWay+0x9e>
 800650e:	697a      	ldr	r2, [r7, #20]
 8006510:	69bb      	ldr	r3, [r7, #24]
 8006512:	429a      	cmp	r2, r3
 8006514:	d028      	beq.n	8006568 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	061a      	lsls	r2, r3, #24
 800651a:	697b      	ldr	r3, [r7, #20]
 800651c:	021b      	lsls	r3, r3, #8
 800651e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006522:	431a      	orrs	r2, r3
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	0a1b      	lsrs	r3, r3, #8
 8006528:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800652c:	431a      	orrs	r2, r3
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	0e1b      	lsrs	r3, r3, #24
 8006532:	ea42 0103 	orr.w	r1, r2, r3
 8006536:	7ffb      	ldrb	r3, [r7, #31]
 8006538:	2b01      	cmp	r3, #1
 800653a:	d101      	bne.n	8006540 <eARPGetCacheEntryGateWay+0xc8>
 800653c:	480e      	ldr	r0, [pc, #56]	@ (8006578 <eARPGetCacheEntryGateWay+0x100>)
 800653e:	e000      	b.n	8006542 <eARPGetCacheEntryGateWay+0xca>
 8006540:	480e      	ldr	r0, [pc, #56]	@ (800657c <eARPGetCacheEntryGateWay+0x104>)
 8006542:	69bb      	ldr	r3, [r7, #24]
 8006544:	061a      	lsls	r2, r3, #24
 8006546:	69bb      	ldr	r3, [r7, #24]
 8006548:	021b      	lsls	r3, r3, #8
 800654a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800654e:	431a      	orrs	r2, r3
 8006550:	69bb      	ldr	r3, [r7, #24]
 8006552:	0a1b      	lsrs	r3, r3, #8
 8006554:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006558:	431a      	orrs	r2, r3
 800655a:	69bb      	ldr	r3, [r7, #24]
 800655c:	0e1b      	lsrs	r3, r3, #24
 800655e:	4313      	orrs	r3, r2
 8006560:	4602      	mov	r2, r0
 8006562:	4807      	ldr	r0, [pc, #28]	@ (8006580 <eARPGetCacheEntryGateWay+0x108>)
 8006564:	f01a f812 	bl	802058c <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	69ba      	ldr	r2, [r7, #24]
 800656c:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800656e:	7ffb      	ldrb	r3, [r7, #31]
    }
 8006570:	4618      	mov	r0, r3
 8006572:	3720      	adds	r7, #32
 8006574:	46bd      	mov	sp, r7
 8006576:	bd80      	pop	{r7, pc}
 8006578:	080229b4 	.word	0x080229b4
 800657c:	080229b8 	.word	0x080229b8
 8006580:	080229c0 	.word	0x080229c0

08006584 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	60f8      	str	r0, [r7, #12]
 800658c:	60b9      	str	r1, [r7, #8]
 800658e:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8006590:	2300      	movs	r3, #0
 8006592:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]
 8006598:	e02a      	b.n	80065f0 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 800659a:	4a19      	ldr	r2, [pc, #100]	@ (8006600 <prvCacheLookup+0x7c>)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	011b      	lsls	r3, r3, #4
 80065a0:	4413      	add	r3, r2
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	68fa      	ldr	r2, [r7, #12]
 80065a6:	429a      	cmp	r2, r3
 80065a8:	d11f      	bne.n	80065ea <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80065aa:	4a15      	ldr	r2, [pc, #84]	@ (8006600 <prvCacheLookup+0x7c>)
 80065ac:	697b      	ldr	r3, [r7, #20]
 80065ae:	011b      	lsls	r3, r3, #4
 80065b0:	4413      	add	r3, r2
 80065b2:	330b      	adds	r3, #11
 80065b4:	781b      	ldrb	r3, [r3, #0]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d102      	bne.n	80065c0 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 80065ba:	2302      	movs	r3, #2
 80065bc:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 80065be:	e01a      	b.n	80065f6 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80065c0:	68b8      	ldr	r0, [r7, #8]
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	011b      	lsls	r3, r3, #4
 80065c6:	4a0e      	ldr	r2, [pc, #56]	@ (8006600 <prvCacheLookup+0x7c>)
 80065c8:	4413      	add	r3, r2
 80065ca:	3304      	adds	r3, #4
 80065cc:	2206      	movs	r2, #6
 80065ce:	4619      	mov	r1, r3
 80065d0:	f01a f9f8 	bl	80209c4 <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 80065d4:	4a0a      	ldr	r2, [pc, #40]	@ (8006600 <prvCacheLookup+0x7c>)
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	011b      	lsls	r3, r3, #4
 80065da:	4413      	add	r3, r2
 80065dc:	330c      	adds	r3, #12
 80065de:	681a      	ldr	r2, [r3, #0]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 80065e4:	2301      	movs	r3, #1
 80065e6:	74fb      	strb	r3, [r7, #19]
                break;
 80065e8:	e005      	b.n	80065f6 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80065ea:	697b      	ldr	r3, [r7, #20]
 80065ec:	3301      	adds	r3, #1
 80065ee:	617b      	str	r3, [r7, #20]
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	2b05      	cmp	r3, #5
 80065f4:	ddd1      	ble.n	800659a <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 80065f6:	7cfb      	ldrb	r3, [r7, #19]
    }
 80065f8:	4618      	mov	r0, r3
 80065fa:	3718      	adds	r7, #24
 80065fc:	46bd      	mov	sp, r7
 80065fe:	bd80      	pop	{r7, pc}
 8006600:	20000c0c 	.word	0x20000c0c

08006604 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 8006604:	b580      	push	{r7, lr}
 8006606:	b084      	sub	sp, #16
 8006608:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800660a:	2300      	movs	r3, #0
 800660c:	60fb      	str	r3, [r7, #12]
 800660e:	e048      	b.n	80066a2 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8006610:	4a47      	ldr	r2, [pc, #284]	@ (8006730 <vARPAgeCache+0x12c>)
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	011b      	lsls	r3, r3, #4
 8006616:	4413      	add	r3, r2
 8006618:	330a      	adds	r3, #10
 800661a:	781b      	ldrb	r3, [r3, #0]
 800661c:	2b00      	cmp	r3, #0
 800661e:	d03d      	beq.n	800669c <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8006620:	4a43      	ldr	r2, [pc, #268]	@ (8006730 <vARPAgeCache+0x12c>)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	011b      	lsls	r3, r3, #4
 8006626:	4413      	add	r3, r2
 8006628:	330a      	adds	r3, #10
 800662a:	781b      	ldrb	r3, [r3, #0]
 800662c:	3b01      	subs	r3, #1
 800662e:	b2d9      	uxtb	r1, r3
 8006630:	4a3f      	ldr	r2, [pc, #252]	@ (8006730 <vARPAgeCache+0x12c>)
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	011b      	lsls	r3, r3, #4
 8006636:	4413      	add	r3, r2
 8006638:	330a      	adds	r3, #10
 800663a:	460a      	mov	r2, r1
 800663c:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800663e:	4a3c      	ldr	r2, [pc, #240]	@ (8006730 <vARPAgeCache+0x12c>)
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	011b      	lsls	r3, r3, #4
 8006644:	4413      	add	r3, r2
 8006646:	330b      	adds	r3, #11
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d108      	bne.n	8006660 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 800664e:	4a38      	ldr	r2, [pc, #224]	@ (8006730 <vARPAgeCache+0x12c>)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	011b      	lsls	r3, r3, #4
 8006654:	4413      	add	r3, r2
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	4618      	mov	r0, r3
 800665a:	f000 f8d7 	bl	800680c <FreeRTOS_OutputARPRequest>
 800665e:	e00f      	b.n	8006680 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8006660:	4a33      	ldr	r2, [pc, #204]	@ (8006730 <vARPAgeCache+0x12c>)
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	011b      	lsls	r3, r3, #4
 8006666:	4413      	add	r3, r2
 8006668:	330a      	adds	r3, #10
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	2b03      	cmp	r3, #3
 800666e:	d807      	bhi.n	8006680 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8006670:	4a2f      	ldr	r2, [pc, #188]	@ (8006730 <vARPAgeCache+0x12c>)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	011b      	lsls	r3, r3, #4
 8006676:	4413      	add	r3, r2
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4618      	mov	r0, r3
 800667c:	f000 f8c6 	bl	800680c <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8006680:	4a2b      	ldr	r2, [pc, #172]	@ (8006730 <vARPAgeCache+0x12c>)
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	011b      	lsls	r3, r3, #4
 8006686:	4413      	add	r3, r2
 8006688:	330a      	adds	r3, #10
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	2b00      	cmp	r3, #0
 800668e:	d105      	bne.n	800669c <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8006690:	4a27      	ldr	r2, [pc, #156]	@ (8006730 <vARPAgeCache+0x12c>)
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	011b      	lsls	r3, r3, #4
 8006696:	4413      	add	r3, r2
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	3301      	adds	r3, #1
 80066a0:	60fb      	str	r3, [r7, #12]
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2b05      	cmp	r3, #5
 80066a6:	ddb3      	ble.n	8006610 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 80066a8:	f7fd f8dc 	bl	8003864 <xTaskGetTickCount>
 80066ac:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 80066ae:	4b21      	ldr	r3, [pc, #132]	@ (8006734 <vARPAgeCache+0x130>)
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d007      	beq.n	80066c6 <vARPAgeCache+0xc2>
 80066b6:	4b1f      	ldr	r3, [pc, #124]	@ (8006734 <vARPAgeCache+0x130>)
 80066b8:	681b      	ldr	r3, [r3, #0]
 80066ba:	687a      	ldr	r2, [r7, #4]
 80066bc:	1ad3      	subs	r3, r2, r3
 80066be:	f644 6220 	movw	r2, #20000	@ 0x4e20
 80066c2:	4293      	cmp	r3, r2
 80066c4:	d92f      	bls.n	8006726 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 80066c6:	4b1c      	ldr	r3, [pc, #112]	@ (8006738 <vARPAgeCache+0x134>)
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 80066cc:	e025      	b.n	800671a <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d019      	beq.n	8006712 <vARPAgeCache+0x10e>
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d015      	beq.n	8006712 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 80066e6:	68bb      	ldr	r3, [r7, #8]
 80066e8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80066ec:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80066f0:	b2db      	uxtb	r3, r3
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d002      	beq.n	80066fc <vARPAgeCache+0xf8>
 80066f6:	2b01      	cmp	r3, #1
 80066f8:	d007      	beq.n	800670a <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 80066fa:	e00a      	b.n	8006712 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 80066fc:	68bb      	ldr	r3, [r7, #8]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4619      	mov	r1, r3
 8006702:	68b8      	ldr	r0, [r7, #8]
 8006704:	f000 f81a 	bl	800673c <FreeRTOS_OutputARPRequest_Multi>
                                break;
 8006708:	e003      	b.n	8006712 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 800670a:	68b8      	ldr	r0, [r7, #8]
 800670c:	f005 f822 	bl	800b754 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 8006710:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 8006712:	68bb      	ldr	r3, [r7, #8]
 8006714:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006718:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 800671a:	68bb      	ldr	r3, [r7, #8]
 800671c:	2b00      	cmp	r3, #0
 800671e:	d1d6      	bne.n	80066ce <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 8006720:	4a04      	ldr	r2, [pc, #16]	@ (8006734 <vARPAgeCache+0x130>)
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	6013      	str	r3, [r2, #0]
        }
    }
 8006726:	bf00      	nop
 8006728:	3710      	adds	r7, #16
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000c0c 	.word	0x20000c0c
 8006734:	20000c6c 	.word	0x20000c6c
 8006738:	200011d0 	.word	0x200011d0

0800673c <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 800673c:	b580      	push	{r7, lr}
 800673e:	b086      	sub	sp, #24
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
 8006744:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800674c:	f003 0304 	and.w	r3, r3, #4
 8006750:	b2db      	uxtb	r3, r3
 8006752:	2b00      	cmp	r3, #0
 8006754:	d156      	bne.n	8006804 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8006756:	687b      	ldr	r3, [r7, #4]
 8006758:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 800675a:	2b00      	cmp	r3, #0
 800675c:	d052      	beq.n	8006804 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 800675e:	2100      	movs	r1, #0
 8006760:	202a      	movs	r0, #42	@ 0x2a
 8006762:	f00f fdc1 	bl	80162e8 <pxGetNetworkBufferWithDescriptor>
 8006766:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8006768:	693b      	ldr	r3, [r7, #16]
 800676a:	2b00      	cmp	r3, #0
 800676c:	d04a      	beq.n	8006804 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 800676e:	693b      	ldr	r3, [r7, #16]
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8006774:	693b      	ldr	r3, [r7, #16]
 8006776:	687a      	ldr	r2, [r7, #4]
 8006778:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8006784:	6938      	ldr	r0, [r7, #16]
 8006786:	f000 f855 	bl	8006834 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 800678a:	693b      	ldr	r3, [r7, #16]
 800678c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678e:	2b3b      	cmp	r3, #59	@ 0x3b
 8006790:	d812      	bhi.n	80067b8 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006796:	617b      	str	r3, [r7, #20]
 8006798:	e008      	b.n	80067ac <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 800679a:	693b      	ldr	r3, [r7, #16]
 800679c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	4413      	add	r3, r2
 80067a2:	2200      	movs	r2, #0
 80067a4:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80067a6:	697b      	ldr	r3, [r7, #20]
 80067a8:	3301      	adds	r3, #1
 80067aa:	617b      	str	r3, [r7, #20]
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2b3b      	cmp	r3, #59	@ 0x3b
 80067b0:	ddf3      	ble.n	800679a <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	223c      	movs	r2, #60	@ 0x3c
 80067b6:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 80067b8:	f002 ff7c 	bl	80096b4 <xIsCallingFromIPTask>
 80067bc:	4603      	mov	r3, r0
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00f      	beq.n	80067e2 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80067c8:	2b00      	cmp	r3, #0
 80067ca:	d01b      	beq.n	8006804 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80067d2:	68db      	ldr	r3, [r3, #12]
 80067d4:	687a      	ldr	r2, [r7, #4]
 80067d6:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 80067da:	2201      	movs	r2, #1
 80067dc:	6939      	ldr	r1, [r7, #16]
 80067de:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 80067e0:	e010      	b.n	8006804 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 80067e2:	2302      	movs	r3, #2
 80067e4:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 80067e6:	693b      	ldr	r3, [r7, #16]
 80067e8:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 80067ea:	f107 0308 	add.w	r3, r7, #8
 80067ee:	f04f 31ff 	mov.w	r1, #4294967295
 80067f2:	4618      	mov	r0, r3
 80067f4:	f002 f81c 	bl	8008830 <xSendEventStructToIPTask>
 80067f8:	4603      	mov	r3, r0
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d102      	bne.n	8006804 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80067fe:	6938      	ldr	r0, [r7, #16]
 8006800:	f00f fdda 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
    }
 8006804:	bf00      	nop
 8006806:	3718      	adds	r7, #24
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}

0800680c <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 800680c:	b580      	push	{r7, lr}
 800680e:	b084      	sub	sp, #16
 8006810:	af00      	add	r7, sp, #0
 8006812:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 8006814:	210c      	movs	r1, #12
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f006 f82e 	bl	800c878 <FreeRTOS_FindEndPointOnNetMask>
 800681c:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d003      	beq.n	800682c <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 8006824:	6879      	ldr	r1, [r7, #4]
 8006826:	68f8      	ldr	r0, [r7, #12]
 8006828:	f7ff ff88 	bl	800673c <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 800682c:	bf00      	nop
 800682e:	3710      	adds	r7, #16
 8006830:	46bd      	mov	sp, r7
 8006832:	bd80      	pop	{r7, pc}

08006834 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8006834:	b580      	push	{r7, lr}
 8006836:	b086      	sub	sp, #24
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d104      	bne.n	800684c <vARPGenerateRequestPacket+0x18>
 8006842:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8006846:	4828      	ldr	r0, [pc, #160]	@ (80068e8 <vARPGenerateRequestPacket+0xb4>)
 8006848:	f7fa fc72 	bl	8001130 <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006850:	2b29      	cmp	r3, #41	@ 0x29
 8006852:	d804      	bhi.n	800685e <vARPGenerateRequestPacket+0x2a>
 8006854:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8006858:	4823      	ldr	r0, [pc, #140]	@ (80068e8 <vARPGenerateRequestPacket+0xb4>)
 800685a:	f7fa fc69 	bl	8001130 <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006862:	2b00      	cmp	r3, #0
 8006864:	d104      	bne.n	8006870 <vARPGenerateRequestPacket+0x3c>
 8006866:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 800686a:	481f      	ldr	r0, [pc, #124]	@ (80068e8 <vARPGenerateRequestPacket+0xb4>)
 800686c:	f7fa fc60 	bl	8001130 <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006874:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8006876:	4b1d      	ldr	r3, [pc, #116]	@ (80068ec <vARPGenerateRequestPacket+0xb8>)
 8006878:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 800687e:	2226      	movs	r2, #38	@ 0x26
 8006880:	6939      	ldr	r1, [r7, #16]
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f01a f89e 	bl	80209c4 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800688c:	33e8      	adds	r3, #232	@ 0xe8
 800688e:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	3306      	adds	r3, #6
 8006894:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8006896:	2206      	movs	r2, #6
 8006898:	6939      	ldr	r1, [r7, #16]
 800689a:	68f8      	ldr	r0, [r7, #12]
 800689c:	f01a f892 	bl	80209c4 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068a4:	33e8      	adds	r3, #232	@ 0xe8
 80068a6:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 80068a8:	697b      	ldr	r3, [r7, #20]
 80068aa:	3316      	adds	r3, #22
 80068ac:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 80068ae:	2206      	movs	r2, #6
 80068b0:	6939      	ldr	r1, [r7, #16]
 80068b2:	68f8      	ldr	r0, [r7, #12]
 80068b4:	f01a f886 	bl	80209c4 <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068bc:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	331c      	adds	r3, #28
 80068c2:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	461a      	mov	r2, r3
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	695a      	ldr	r2, [r3, #20]
 80068d2:	697b      	ldr	r3, [r7, #20]
 80068d4:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	222a      	movs	r2, #42	@ 0x2a
 80068dc:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 80068de:	bf00      	nop
 80068e0:	3718      	adds	r7, #24
 80068e2:	46bd      	mov	sp, r7
 80068e4:	bd80      	pop	{r7, pc}
 80068e6:	bf00      	nop
 80068e8:	08022988 	.word	0x08022988
 80068ec:	08025bec 	.word	0x08025bec

080068f0 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 80068f0:	b580      	push	{r7, lr}
 80068f2:	b084      	sub	sp, #16
 80068f4:	af00      	add	r7, sp, #0
 80068f6:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d01b      	beq.n	8006936 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80068fe:	2300      	movs	r3, #0
 8006900:	60fb      	str	r3, [r7, #12]
 8006902:	e014      	b.n	800692e <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 8006904:	4a10      	ldr	r2, [pc, #64]	@ (8006948 <FreeRTOS_ClearARP+0x58>)
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	011b      	lsls	r3, r3, #4
 800690a:	4413      	add	r3, r2
 800690c:	330c      	adds	r3, #12
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	687a      	ldr	r2, [r7, #4]
 8006912:	429a      	cmp	r2, r3
 8006914:	d108      	bne.n	8006928 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	011b      	lsls	r3, r3, #4
 800691a:	4a0b      	ldr	r2, [pc, #44]	@ (8006948 <FreeRTOS_ClearARP+0x58>)
 800691c:	4413      	add	r3, r2
 800691e:	2210      	movs	r2, #16
 8006920:	2100      	movs	r1, #0
 8006922:	4618      	mov	r0, r3
 8006924:	f01a f95b 	bl	8020bde <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	3301      	adds	r3, #1
 800692c:	60fb      	str	r3, [r7, #12]
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	2b05      	cmp	r3, #5
 8006932:	dde7      	ble.n	8006904 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 8006934:	e004      	b.n	8006940 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8006936:	2260      	movs	r2, #96	@ 0x60
 8006938:	2100      	movs	r1, #0
 800693a:	4803      	ldr	r0, [pc, #12]	@ (8006948 <FreeRTOS_ClearARP+0x58>)
 800693c:	f01a f94f 	bl	8020bde <memset>
}
 8006940:	bf00      	nop
 8006942:	3710      	adds	r7, #16
 8006944:	46bd      	mov	sp, r7
 8006946:	bd80      	pop	{r7, pc}
 8006948:	20000c0c 	.word	0x20000c0c

0800694c <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 800694c:	b580      	push	{r7, lr}
 800694e:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 8006950:	f000 fc8a 	bl	8007268 <vDNSCallbackInitialise>
        }
 8006954:	bf00      	nop
 8006956:	bd80      	pop	{r7, pc}

08006958 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 8006958:	b580      	push	{r7, lr}
 800695a:	b088      	sub	sp, #32
 800695c:	af00      	add	r7, sp, #0
 800695e:	60f8      	str	r0, [r7, #12]
 8006960:	60b9      	str	r1, [r7, #8]
 8006962:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 8006964:	2300      	movs	r3, #0
 8006966:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 8006968:	2048      	movs	r0, #72	@ 0x48
 800696a:	f7fe fdeb 	bl	8005544 <pvPortMalloc>
 800696e:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8006970:	69bb      	ldr	r3, [r7, #24]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d057      	beq.n	8006a26 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8006976:	69bb      	ldr	r3, [r7, #24]
 8006978:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 800697a:	2248      	movs	r2, #72	@ 0x48
 800697c:	2100      	movs	r1, #0
 800697e:	69f8      	ldr	r0, [r7, #28]
 8006980:	f01a f92d 	bl	8020bde <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8006984:	69fb      	ldr	r3, [r7, #28]
 8006986:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800698a:	69fb      	ldr	r3, [r7, #28]
 800698c:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 800698e:	69fb      	ldr	r3, [r7, #28]
 8006990:	3338      	adds	r3, #56	@ 0x38
 8006992:	220f      	movs	r2, #15
 8006994:	68f9      	ldr	r1, [r7, #12]
 8006996:	4618      	mov	r0, r3
 8006998:	f01a ffee 	bl	8021978 <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 800699c:	69fb      	ldr	r3, [r7, #28]
 800699e:	2200      	movs	r2, #0
 80069a0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 80069a4:	69fb      	ldr	r3, [r7, #28]
 80069a6:	f103 0220 	add.w	r2, r3, #32
 80069aa:	69fb      	ldr	r3, [r7, #28]
 80069ac:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	d003      	beq.n	80069bc <pxNew_AddrInfo+0x64>
 80069b4:	68bb      	ldr	r3, [r7, #8]
 80069b6:	2b0a      	cmp	r3, #10
 80069b8:	d01e      	beq.n	80069f8 <pxNew_AddrInfo+0xa0>
 80069ba:	e02b      	b.n	8006a14 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 80069bc:	6878      	ldr	r0, [r7, #4]
 80069be:	f003 f87d 	bl	8009abc <ulChar2u32>
 80069c2:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	061a      	lsls	r2, r3, #24
 80069c8:	697b      	ldr	r3, [r7, #20]
 80069ca:	021b      	lsls	r3, r3, #8
 80069cc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80069d0:	431a      	orrs	r2, r3
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	0a1b      	lsrs	r3, r3, #8
 80069d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80069da:	ea42 0103 	orr.w	r1, r2, r3
 80069de:	697b      	ldr	r3, [r7, #20]
 80069e0:	0e1a      	lsrs	r2, r3, #24
 80069e2:	69fb      	ldr	r3, [r7, #28]
 80069e4:	695b      	ldr	r3, [r3, #20]
 80069e6:	430a      	orrs	r2, r1
 80069e8:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 80069ea:	69fb      	ldr	r3, [r7, #28]
 80069ec:	2202      	movs	r2, #2
 80069ee:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 80069f0:	69fb      	ldr	r3, [r7, #28]
 80069f2:	2204      	movs	r2, #4
 80069f4:	611a      	str	r2, [r3, #16]
                       }
                       break;
 80069f6:	e016      	b.n	8006a26 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 80069f8:	69fb      	ldr	r3, [r7, #28]
 80069fa:	220a      	movs	r2, #10
 80069fc:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 80069fe:	69fb      	ldr	r3, [r7, #28]
 8006a00:	2210      	movs	r2, #16
 8006a02:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 8006a04:	69fb      	ldr	r3, [r7, #28]
 8006a06:	3328      	adds	r3, #40	@ 0x28
 8006a08:	2210      	movs	r2, #16
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f019 ffd9 	bl	80209c4 <memcpy>
                        break;
 8006a12:	e008      	b.n	8006a26 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 8006a14:	4806      	ldr	r0, [pc, #24]	@ (8006a30 <pxNew_AddrInfo+0xd8>)
 8006a16:	f019 fdb9 	bl	802058c <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 8006a1a:	69b8      	ldr	r0, [r7, #24]
 8006a1c:	f7fe fe66 	bl	80056ec <vPortFree>
                    pxAddrInfo = NULL;
 8006a20:	2300      	movs	r3, #0
 8006a22:	61fb      	str	r3, [r7, #28]

                    break;
 8006a24:	bf00      	nop
            }
        }

        return pxAddrInfo;
 8006a26:	69fb      	ldr	r3, [r7, #28]
    }
 8006a28:	4618      	mov	r0, r3
 8006a2a:	3720      	adds	r7, #32
 8006a2c:	46bd      	mov	sp, r7
 8006a2e:	bd80      	pop	{r7, pc}
 8006a30:	08022a2c 	.word	0x08022a2c

08006a34 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b084      	sub	sp, #16
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d00b      	beq.n	8006a5e <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 8006a46:	e007      	b.n	8006a58 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	69db      	ldr	r3, [r3, #28]
 8006a4c:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 8006a4e:	68f8      	ldr	r0, [r7, #12]
 8006a50:	f7fe fe4c 	bl	80056ec <vPortFree>
                pxIterator = pxNext;
 8006a54:	68bb      	ldr	r3, [r7, #8]
 8006a56:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d1f4      	bne.n	8006a48 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 8006a5e:	bf00      	nop
 8006a60:	3710      	adds	r7, #16
 8006a62:	46bd      	mov	sp, r7
 8006a64:	bd80      	pop	{r7, pc}

08006a66 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8006a66:	b580      	push	{r7, lr}
 8006a68:	b088      	sub	sp, #32
 8006a6a:	af02      	add	r7, sp, #8
 8006a6c:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8006a6e:	6878      	ldr	r0, [r7, #4]
 8006a70:	f002 fa92 	bl	8008f98 <uxIPHeaderSizePacket>
 8006a74:	4603      	mov	r3, r0
 8006a76:	3316      	adds	r3, #22
 8006a78:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	429a      	cmp	r2, r3
 8006a82:	d829      	bhi.n	8006ad8 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	2b0b      	cmp	r3, #11
 8006a92:	d921      	bls.n	8006ad8 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8006a94:	2300      	movs	r3, #0
 8006a96:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	4413      	add	r3, r2
 8006aa0:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006aa6:	021b      	lsls	r3, r3, #8
 8006aa8:	b21a      	sxth	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006aae:	0a1b      	lsrs	r3, r3, #8
 8006ab0:	b29b      	uxth	r3, r3
 8006ab2:	b21b      	sxth	r3, r3
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 8006ab8:	b29b      	uxth	r3, r3
 8006aba:	f107 0208 	add.w	r2, r7, #8
 8006abe:	9300      	str	r3, [sp, #0]
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	6939      	ldr	r1, [r7, #16]
 8006ac4:	68f8      	ldr	r0, [r7, #12]
 8006ac6:	f000 fcb5 	bl	8007434 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 8006aca:	68bb      	ldr	r3, [r7, #8]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d003      	beq.n	8006ad8 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 8006ad0:	68bb      	ldr	r3, [r7, #8]
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	f7ff ffae 	bl	8006a34 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 8006ad8:	2300      	movs	r3, #0
    }
 8006ada:	4618      	mov	r0, r3
 8006adc:	3718      	adds	r7, #24
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	bd80      	pop	{r7, pc}

08006ae2 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 8006ae2:	b580      	push	{r7, lr}
 8006ae4:	b086      	sub	sp, #24
 8006ae6:	af02      	add	r7, sp, #8
 8006ae8:	60f8      	str	r0, [r7, #12]
 8006aea:	60b9      	str	r1, [r7, #8]
 8006aec:	607a      	str	r2, [r7, #4]
 8006aee:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8006af0:	69bb      	ldr	r3, [r7, #24]
 8006af2:	9300      	str	r3, [sp, #0]
 8006af4:	2300      	movs	r3, #0
 8006af6:	687a      	ldr	r2, [r7, #4]
 8006af8:	68b9      	ldr	r1, [r7, #8]
 8006afa:	68f8      	ldr	r0, [r7, #12]
 8006afc:	f000 f818 	bl	8006b30 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 8006b00:	2301      	movs	r3, #1
    }
 8006b02:	4618      	mov	r0, r3
 8006b04:	3710      	adds	r7, #16
 8006b06:	46bd      	mov	sp, r7
 8006b08:	bd80      	pop	{r7, pc}
	...

08006b0c <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 8006b0c:	b580      	push	{r7, lr}
 8006b0e:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 8006b10:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8006b14:	2100      	movs	r1, #0
 8006b16:	4804      	ldr	r0, [pc, #16]	@ (8006b28 <FreeRTOS_dnsclear+0x1c>)
 8006b18:	f01a f861 	bl	8020bde <memset>
        uxFreeEntry = 0U;
 8006b1c:	4b03      	ldr	r3, [pc, #12]	@ (8006b2c <FreeRTOS_dnsclear+0x20>)
 8006b1e:	2200      	movs	r2, #0
 8006b20:	601a      	str	r2, [r3, #0]
    }
 8006b22:	bf00      	nop
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	20000c7c 	.word	0x20000c7c
 8006b2c:	20000e2c 	.word	0x20000e2c

08006b30 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 8006b30:	b590      	push	{r4, r7, lr}
 8006b32:	b09b      	sub	sp, #108	@ 0x6c
 8006b34:	af02      	add	r7, sp, #8
 8006b36:	60f8      	str	r0, [r7, #12]
 8006b38:	60b9      	str	r1, [r7, #8]
 8006b3a:	607a      	str	r2, [r7, #4]
 8006b3c:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 8006b3e:	f7fc fe91 	bl	8003864 <xTaskGetTickCount>
 8006b42:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d103      	bne.n	8006b52 <FreeRTOS_ProcessDNSCache+0x22>
 8006b4a:	21d8      	movs	r1, #216	@ 0xd8
 8006b4c:	4841      	ldr	r0, [pc, #260]	@ (8006c54 <FreeRTOS_ProcessDNSCache+0x124>)
 8006b4e:	f7fa faef 	bl	8001130 <vAssertCalled>

        if( xLookUp != pdFALSE )
 8006b52:	683b      	ldr	r3, [r7, #0]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d002      	beq.n	8006b5e <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	2200      	movs	r2, #0
 8006b5c:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 8006b5e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006b60:	4a3d      	ldr	r2, [pc, #244]	@ (8006c58 <FreeRTOS_ProcessDNSCache+0x128>)
 8006b62:	fba2 2303 	umull	r2, r3, r2, r3
 8006b66:	099b      	lsrs	r3, r3, #6
 8006b68:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 8006b6a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006b6e:	461a      	mov	r2, r3
 8006b70:	68b9      	ldr	r1, [r7, #8]
 8006b72:	68f8      	ldr	r0, [r7, #12]
 8006b74:	f000 f87a 	bl	8006c6c <prvFindEntryIndex>
 8006b78:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 8006b7a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b7c:	2b01      	cmp	r3, #1
 8006b7e:	d110      	bne.n	8006ba2 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	d106      	bne.n	8006b94 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8006b86:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006b88:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006b8a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006b8c:	68b9      	ldr	r1, [r7, #8]
 8006b8e:	f000 f8b1 	bl	8006cf4 <prvGetCacheIPEntry>
 8006b92:	e013      	b.n	8006bbc <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8006b94:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b98:	68ba      	ldr	r2, [r7, #8]
 8006b9a:	6879      	ldr	r1, [r7, #4]
 8006b9c:	f000 f94a 	bl	8006e34 <prvUpdateCacheEntry>
 8006ba0:	e00c      	b.n	8006bbc <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	2b01      	cmp	r3, #1
 8006ba6:	d103      	bne.n	8006bb0 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2200      	movs	r2, #0
 8006bac:	601a      	str	r2, [r3, #0]
 8006bae:	e005      	b.n	8006bbc <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8006bb0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006bb2:	68ba      	ldr	r2, [r7, #8]
 8006bb4:	6879      	ldr	r1, [r7, #4]
 8006bb6:	68f8      	ldr	r0, [r7, #12]
 8006bb8:	f000 f994 	bl	8006ee4 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <FreeRTOS_ProcessDNSCache+0x9a>
 8006bc2:	68bb      	ldr	r3, [r7, #8]
 8006bc4:	681b      	ldr	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d03f      	beq.n	8006c4a <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 8006bca:	2302      	movs	r3, #2
 8006bcc:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 8006bce:	68bb      	ldr	r3, [r7, #8]
 8006bd0:	691b      	ldr	r3, [r3, #16]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d00c      	beq.n	8006bf0 <FreeRTOS_ProcessDNSCache+0xc0>
 8006bd6:	2b01      	cmp	r3, #1
 8006bd8:	d10e      	bne.n	8006bf8 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8006bda:	68bb      	ldr	r3, [r7, #8]
 8006bdc:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8006be0:	6818      	ldr	r0, [r3, #0]
 8006be2:	6859      	ldr	r1, [r3, #4]
 8006be4:	689a      	ldr	r2, [r3, #8]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 8006bea:	230a      	movs	r3, #10
 8006bec:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 8006bee:	e007      	b.n	8006c00 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 8006bf6:	e003      	b.n	8006c00 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 8006bf8:	4818      	ldr	r0, [pc, #96]	@ (8006c5c <FreeRTOS_ProcessDNSCache+0x12c>)
 8006bfa:	f019 fcc7 	bl	802058c <lUDPLoggingPrintf>
                        break;
 8006bfe:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8006c00:	f107 0214 	add.w	r2, r7, #20
 8006c04:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8006c08:	2328      	movs	r3, #40	@ 0x28
 8006c0a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8006c0c:	f007 fc62 	bl	800e4d4 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 8006c10:	683b      	ldr	r3, [r7, #0]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d001      	beq.n	8006c1a <FreeRTOS_ProcessDNSCache+0xea>
 8006c16:	4912      	ldr	r1, [pc, #72]	@ (8006c60 <FreeRTOS_ProcessDNSCache+0x130>)
 8006c18:	e000      	b.n	8006c1c <FreeRTOS_ProcessDNSCache+0xec>
 8006c1a:	4912      	ldr	r1, [pc, #72]	@ (8006c64 <FreeRTOS_ProcessDNSCache+0x134>)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	061a      	lsls	r2, r3, #24
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	021b      	lsls	r3, r3, #8
 8006c24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006c28:	431a      	orrs	r2, r3
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	0a1b      	lsrs	r3, r3, #8
 8006c2e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006c32:	431a      	orrs	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	0e1b      	lsrs	r3, r3, #24
 8006c38:	4313      	orrs	r3, r2
 8006c3a:	f107 0214 	add.w	r2, r7, #20
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	4613      	mov	r3, r2
 8006c42:	68fa      	ldr	r2, [r7, #12]
 8006c44:	4808      	ldr	r0, [pc, #32]	@ (8006c68 <FreeRTOS_ProcessDNSCache+0x138>)
 8006c46:	f019 fca1 	bl	802058c <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 8006c4a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	3764      	adds	r7, #100	@ 0x64
 8006c50:	46bd      	mov	sp, r7
 8006c52:	bd90      	pop	{r4, r7, pc}
 8006c54:	08022ca8 	.word	0x08022ca8
 8006c58:	10624dd3 	.word	0x10624dd3
 8006c5c:	08022cdc 	.word	0x08022cdc
 8006c60:	08022d0c 	.word	0x08022d0c
 8006c64:	08022d14 	.word	0x08022d14
 8006c68:	08022d18 	.word	0x08022d18

08006c6c <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b086      	sub	sp, #24
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	60f8      	str	r0, [r7, #12]
 8006c74:	60b9      	str	r1, [r7, #8]
 8006c76:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8006c78:	2300      	movs	r3, #0
 8006c7a:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	613b      	str	r3, [r7, #16]
 8006c80:	e02d      	b.n	8006cde <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 8006c82:	4a1b      	ldr	r2, [pc, #108]	@ (8006cf0 <prvFindEntryIndex+0x84>)
 8006c84:	693b      	ldr	r3, [r7, #16]
 8006c86:	216c      	movs	r1, #108	@ 0x6c
 8006c88:	fb01 f303 	mul.w	r3, r1, r3
 8006c8c:	4413      	add	r3, r2
 8006c8e:	3350      	adds	r3, #80	@ 0x50
 8006c90:	781b      	ldrb	r3, [r3, #0]
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d01f      	beq.n	8006cd6 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 8006c96:	693b      	ldr	r3, [r7, #16]
 8006c98:	226c      	movs	r2, #108	@ 0x6c
 8006c9a:	fb02 f303 	mul.w	r3, r2, r3
 8006c9e:	3350      	adds	r3, #80	@ 0x50
 8006ca0:	4a13      	ldr	r2, [pc, #76]	@ (8006cf0 <prvFindEntryIndex+0x84>)
 8006ca2:	4413      	add	r3, r2
 8006ca4:	68f9      	ldr	r1, [r7, #12]
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7f9 fb1a 	bl	80002e0 <strcmp>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d112      	bne.n	8006cd8 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 8006cb2:	68bb      	ldr	r3, [r7, #8]
 8006cb4:	691a      	ldr	r2, [r3, #16]
 8006cb6:	490e      	ldr	r1, [pc, #56]	@ (8006cf0 <prvFindEntryIndex+0x84>)
 8006cb8:	693b      	ldr	r3, [r7, #16]
 8006cba:	206c      	movs	r0, #108	@ 0x6c
 8006cbc:	fb00 f303 	mul.w	r3, r0, r3
 8006cc0:	440b      	add	r3, r1
 8006cc2:	3310      	adds	r3, #16
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d106      	bne.n	8006cd8 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	693a      	ldr	r2, [r7, #16]
 8006cd2:	601a      	str	r2, [r3, #0]
                    break;
 8006cd4:	e006      	b.n	8006ce4 <prvFindEntryIndex+0x78>
                continue;
 8006cd6:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 8006cd8:	693b      	ldr	r3, [r7, #16]
 8006cda:	3301      	adds	r3, #1
 8006cdc:	613b      	str	r3, [r7, #16]
 8006cde:	693b      	ldr	r3, [r7, #16]
 8006ce0:	2b03      	cmp	r3, #3
 8006ce2:	d9ce      	bls.n	8006c82 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 8006ce4:	697b      	ldr	r3, [r7, #20]
    }
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	3718      	adds	r7, #24
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000c7c 	.word	0x20000c7c

08006cf4 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b088      	sub	sp, #32
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	60f8      	str	r0, [r7, #12]
 8006cfc:	60b9      	str	r1, [r7, #8]
 8006cfe:	607a      	str	r2, [r7, #4]
 8006d00:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8006d02:	2300      	movs	r3, #0
 8006d04:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 8006d06:	4a4a      	ldr	r2, [pc, #296]	@ (8006e30 <prvGetCacheIPEntry+0x13c>)
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	216c      	movs	r1, #108	@ 0x6c
 8006d0c:	fb01 f303 	mul.w	r3, r1, r3
 8006d10:	4413      	add	r3, r2
 8006d12:	3364      	adds	r3, #100	@ 0x64
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	687a      	ldr	r2, [r7, #4]
 8006d18:	1ad3      	subs	r3, r2, r3
 8006d1a:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 8006d1c:	4a44      	ldr	r2, [pc, #272]	@ (8006e30 <prvGetCacheIPEntry+0x13c>)
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	216c      	movs	r1, #108	@ 0x6c
 8006d22:	fb01 f303 	mul.w	r3, r1, r3
 8006d26:	4413      	add	r3, r2
 8006d28:	3360      	adds	r3, #96	@ 0x60
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	061a      	lsls	r2, r3, #24
 8006d2e:	4940      	ldr	r1, [pc, #256]	@ (8006e30 <prvGetCacheIPEntry+0x13c>)
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	206c      	movs	r0, #108	@ 0x6c
 8006d34:	fb00 f303 	mul.w	r3, r0, r3
 8006d38:	440b      	add	r3, r1
 8006d3a:	3360      	adds	r3, #96	@ 0x60
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	021b      	lsls	r3, r3, #8
 8006d40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006d44:	431a      	orrs	r2, r3
 8006d46:	493a      	ldr	r1, [pc, #232]	@ (8006e30 <prvGetCacheIPEntry+0x13c>)
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	206c      	movs	r0, #108	@ 0x6c
 8006d4c:	fb00 f303 	mul.w	r3, r0, r3
 8006d50:	440b      	add	r3, r1
 8006d52:	3360      	adds	r3, #96	@ 0x60
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	0a1b      	lsrs	r3, r3, #8
 8006d58:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006d5c:	431a      	orrs	r2, r3
 8006d5e:	4934      	ldr	r1, [pc, #208]	@ (8006e30 <prvGetCacheIPEntry+0x13c>)
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	206c      	movs	r0, #108	@ 0x6c
 8006d64:	fb00 f303 	mul.w	r3, r0, r3
 8006d68:	440b      	add	r3, r1
 8006d6a:	3360      	adds	r3, #96	@ 0x60
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	0e1b      	lsrs	r3, r3, #24
 8006d70:	4313      	orrs	r3, r2
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	429a      	cmp	r2, r3
 8006d76:	d24a      	bcs.n	8006e0e <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 8006d78:	4a2d      	ldr	r2, [pc, #180]	@ (8006e30 <prvGetCacheIPEntry+0x13c>)
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	216c      	movs	r1, #108	@ 0x6c
 8006d7e:	fb01 f303 	mul.w	r3, r1, r3
 8006d82:	4413      	add	r3, r2
 8006d84:	3369      	adds	r3, #105	@ 0x69
 8006d86:	781b      	ldrb	r3, [r3, #0]
 8006d88:	4929      	ldr	r1, [pc, #164]	@ (8006e30 <prvGetCacheIPEntry+0x13c>)
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	206c      	movs	r0, #108	@ 0x6c
 8006d8e:	fb00 f202 	mul.w	r2, r0, r2
 8006d92:	440a      	add	r2, r1
 8006d94:	3268      	adds	r2, #104	@ 0x68
 8006d96:	7812      	ldrb	r2, [r2, #0]
 8006d98:	fbb3 f1f2 	udiv	r1, r3, r2
 8006d9c:	fb01 f202 	mul.w	r2, r1, r2
 8006da0:	1a9b      	subs	r3, r3, r2
 8006da2:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8006da4:	7cfb      	ldrb	r3, [r7, #19]
 8006da6:	f003 0303 	and.w	r3, r3, #3
 8006daa:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 8006dac:	7cfb      	ldrb	r3, [r7, #19]
 8006dae:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 8006db0:	4a1f      	ldr	r2, [pc, #124]	@ (8006e30 <prvGetCacheIPEntry+0x13c>)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	216c      	movs	r1, #108	@ 0x6c
 8006db6:	fb01 f303 	mul.w	r3, r1, r3
 8006dba:	4413      	add	r3, r2
 8006dbc:	3369      	adds	r3, #105	@ 0x69
 8006dbe:	781b      	ldrb	r3, [r3, #0]
 8006dc0:	3301      	adds	r3, #1
 8006dc2:	b2d8      	uxtb	r0, r3
 8006dc4:	4a1a      	ldr	r2, [pc, #104]	@ (8006e30 <prvGetCacheIPEntry+0x13c>)
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	216c      	movs	r1, #108	@ 0x6c
 8006dca:	fb01 f303 	mul.w	r3, r1, r3
 8006dce:	4413      	add	r3, r2
 8006dd0:	3369      	adds	r3, #105	@ 0x69
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 8006dd6:	69ba      	ldr	r2, [r7, #24]
 8006dd8:	4613      	mov	r3, r2
 8006dda:	009b      	lsls	r3, r3, #2
 8006ddc:	4413      	add	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	68fa      	ldr	r2, [r7, #12]
 8006de2:	216c      	movs	r1, #108	@ 0x6c
 8006de4:	fb01 f202 	mul.w	r2, r1, r2
 8006de8:	4413      	add	r3, r2
 8006dea:	4a11      	ldr	r2, [pc, #68]	@ (8006e30 <prvGetCacheIPEntry+0x13c>)
 8006dec:	4413      	add	r3, r2
 8006dee:	2214      	movs	r2, #20
 8006df0:	4619      	mov	r1, r3
 8006df2:	68b8      	ldr	r0, [r7, #8]
 8006df4:	f019 fde6 	bl	80209c4 <memcpy>
            isRead = pdTRUE;
 8006df8:	2301      	movs	r3, #1
 8006dfa:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d010      	beq.n	8006e24 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6839      	ldr	r1, [r7, #0]
 8006e06:	4618      	mov	r0, r3
 8006e08:	f000 f8dc 	bl	8006fc4 <prvReadDNSCache>
 8006e0c:	e00a      	b.n	8006e24 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 8006e0e:	4a08      	ldr	r2, [pc, #32]	@ (8006e30 <prvGetCacheIPEntry+0x13c>)
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	216c      	movs	r1, #108	@ 0x6c
 8006e14:	fb01 f303 	mul.w	r3, r1, r3
 8006e18:	4413      	add	r3, r2
 8006e1a:	3350      	adds	r3, #80	@ 0x50
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 8006e20:	2300      	movs	r3, #0
 8006e22:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 8006e24:	69fb      	ldr	r3, [r7, #28]
    }
 8006e26:	4618      	mov	r0, r3
 8006e28:	3720      	adds	r7, #32
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}
 8006e2e:	bf00      	nop
 8006e30:	20000c7c 	.word	0x20000c7c

08006e34 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b086      	sub	sp, #24
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	60f8      	str	r0, [r7, #12]
 8006e3c:	60b9      	str	r1, [r7, #8]
 8006e3e:	607a      	str	r2, [r7, #4]
 8006e40:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 8006e42:	2300      	movs	r3, #0
 8006e44:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 8006e46:	4a26      	ldr	r2, [pc, #152]	@ (8006ee0 <prvUpdateCacheEntry+0xac>)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	216c      	movs	r1, #108	@ 0x6c
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
 8006e50:	4413      	add	r3, r2
 8006e52:	3368      	adds	r3, #104	@ 0x68
 8006e54:	781b      	ldrb	r3, [r3, #0]
 8006e56:	2b03      	cmp	r3, #3
 8006e58:	d81b      	bhi.n	8006e92 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 8006e5a:	4a21      	ldr	r2, [pc, #132]	@ (8006ee0 <prvUpdateCacheEntry+0xac>)
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	216c      	movs	r1, #108	@ 0x6c
 8006e60:	fb01 f303 	mul.w	r3, r1, r3
 8006e64:	4413      	add	r3, r2
 8006e66:	3368      	adds	r3, #104	@ 0x68
 8006e68:	781b      	ldrb	r3, [r3, #0]
 8006e6a:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 8006e6c:	4a1c      	ldr	r2, [pc, #112]	@ (8006ee0 <prvUpdateCacheEntry+0xac>)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	216c      	movs	r1, #108	@ 0x6c
 8006e72:	fb01 f303 	mul.w	r3, r1, r3
 8006e76:	4413      	add	r3, r2
 8006e78:	3368      	adds	r3, #104	@ 0x68
 8006e7a:	781b      	ldrb	r3, [r3, #0]
 8006e7c:	3301      	adds	r3, #1
 8006e7e:	b2d8      	uxtb	r0, r3
 8006e80:	4a17      	ldr	r2, [pc, #92]	@ (8006ee0 <prvUpdateCacheEntry+0xac>)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	216c      	movs	r1, #108	@ 0x6c
 8006e86:	fb01 f303 	mul.w	r3, r1, r3
 8006e8a:	4413      	add	r3, r2
 8006e8c:	3368      	adds	r3, #104	@ 0x68
 8006e8e:	4602      	mov	r2, r0
 8006e90:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 8006e92:	697a      	ldr	r2, [r7, #20]
 8006e94:	4613      	mov	r3, r2
 8006e96:	009b      	lsls	r3, r3, #2
 8006e98:	4413      	add	r3, r2
 8006e9a:	009b      	lsls	r3, r3, #2
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	216c      	movs	r1, #108	@ 0x6c
 8006ea0:	fb01 f202 	mul.w	r2, r1, r2
 8006ea4:	4413      	add	r3, r2
 8006ea6:	4a0e      	ldr	r2, [pc, #56]	@ (8006ee0 <prvUpdateCacheEntry+0xac>)
 8006ea8:	4413      	add	r3, r2
 8006eaa:	2214      	movs	r2, #20
 8006eac:	6879      	ldr	r1, [r7, #4]
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f019 fd88 	bl	80209c4 <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 8006eb4:	4a0a      	ldr	r2, [pc, #40]	@ (8006ee0 <prvUpdateCacheEntry+0xac>)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	216c      	movs	r1, #108	@ 0x6c
 8006eba:	fb01 f303 	mul.w	r3, r1, r3
 8006ebe:	4413      	add	r3, r2
 8006ec0:	3360      	adds	r3, #96	@ 0x60
 8006ec2:	68ba      	ldr	r2, [r7, #8]
 8006ec4:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8006ec6:	4a06      	ldr	r2, [pc, #24]	@ (8006ee0 <prvUpdateCacheEntry+0xac>)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	216c      	movs	r1, #108	@ 0x6c
 8006ecc:	fb01 f303 	mul.w	r3, r1, r3
 8006ed0:	4413      	add	r3, r2
 8006ed2:	3364      	adds	r3, #100	@ 0x64
 8006ed4:	683a      	ldr	r2, [r7, #0]
 8006ed6:	601a      	str	r2, [r3, #0]
    }
 8006ed8:	bf00      	nop
 8006eda:	3718      	adds	r7, #24
 8006edc:	46bd      	mov	sp, r7
 8006ede:	bd80      	pop	{r7, pc}
 8006ee0:	20000c7c 	.word	0x20000c7c

08006ee4 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8006ee4:	b580      	push	{r7, lr}
 8006ee6:	b084      	sub	sp, #16
 8006ee8:	af00      	add	r7, sp, #0
 8006eea:	60f8      	str	r0, [r7, #12]
 8006eec:	60b9      	str	r1, [r7, #8]
 8006eee:	607a      	str	r2, [r7, #4]
 8006ef0:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8006ef2:	68f8      	ldr	r0, [r7, #12]
 8006ef4:	f7f9 f9fe 	bl	80002f4 <strlen>
 8006ef8:	4603      	mov	r3, r0
 8006efa:	2b0f      	cmp	r3, #15
 8006efc:	d859      	bhi.n	8006fb2 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 8006efe:	4b2f      	ldr	r3, [pc, #188]	@ (8006fbc <prvInsertCacheEntry+0xd8>)
 8006f00:	681b      	ldr	r3, [r3, #0]
 8006f02:	226c      	movs	r2, #108	@ 0x6c
 8006f04:	fb02 f303 	mul.w	r3, r2, r3
 8006f08:	3350      	adds	r3, #80	@ 0x50
 8006f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8006fc0 <prvInsertCacheEntry+0xdc>)
 8006f0c:	4413      	add	r3, r2
 8006f0e:	2210      	movs	r2, #16
 8006f10:	68f9      	ldr	r1, [r7, #12]
 8006f12:	4618      	mov	r0, r3
 8006f14:	f01a fd30 	bl	8021978 <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 8006f18:	4b28      	ldr	r3, [pc, #160]	@ (8006fbc <prvInsertCacheEntry+0xd8>)
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	226c      	movs	r2, #108	@ 0x6c
 8006f1e:	fb02 f303 	mul.w	r3, r2, r3
 8006f22:	4a27      	ldr	r2, [pc, #156]	@ (8006fc0 <prvInsertCacheEntry+0xdc>)
 8006f24:	4413      	add	r3, r2
 8006f26:	2214      	movs	r2, #20
 8006f28:	6879      	ldr	r1, [r7, #4]
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	f019 fd4a 	bl	80209c4 <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 8006f30:	4b22      	ldr	r3, [pc, #136]	@ (8006fbc <prvInsertCacheEntry+0xd8>)
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a22      	ldr	r2, [pc, #136]	@ (8006fc0 <prvInsertCacheEntry+0xdc>)
 8006f36:	216c      	movs	r1, #108	@ 0x6c
 8006f38:	fb01 f303 	mul.w	r3, r1, r3
 8006f3c:	4413      	add	r3, r2
 8006f3e:	3360      	adds	r3, #96	@ 0x60
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8006f44:	4b1d      	ldr	r3, [pc, #116]	@ (8006fbc <prvInsertCacheEntry+0xd8>)
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	4a1d      	ldr	r2, [pc, #116]	@ (8006fc0 <prvInsertCacheEntry+0xdc>)
 8006f4a:	216c      	movs	r1, #108	@ 0x6c
 8006f4c:	fb01 f303 	mul.w	r3, r1, r3
 8006f50:	4413      	add	r3, r2
 8006f52:	3364      	adds	r3, #100	@ 0x64
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 8006f58:	4b18      	ldr	r3, [pc, #96]	@ (8006fbc <prvInsertCacheEntry+0xd8>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a18      	ldr	r2, [pc, #96]	@ (8006fc0 <prvInsertCacheEntry+0xdc>)
 8006f5e:	216c      	movs	r1, #108	@ 0x6c
 8006f60:	fb01 f303 	mul.w	r3, r1, r3
 8006f64:	4413      	add	r3, r2
 8006f66:	3368      	adds	r3, #104	@ 0x68
 8006f68:	2201      	movs	r2, #1
 8006f6a:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 8006f6c:	4b13      	ldr	r3, [pc, #76]	@ (8006fbc <prvInsertCacheEntry+0xd8>)
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	4a13      	ldr	r2, [pc, #76]	@ (8006fc0 <prvInsertCacheEntry+0xdc>)
 8006f72:	216c      	movs	r1, #108	@ 0x6c
 8006f74:	fb01 f303 	mul.w	r3, r1, r3
 8006f78:	4413      	add	r3, r2
 8006f7a:	3369      	adds	r3, #105	@ 0x69
 8006f7c:	2200      	movs	r2, #0
 8006f7e:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 8006f80:	4b0e      	ldr	r3, [pc, #56]	@ (8006fbc <prvInsertCacheEntry+0xd8>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	226c      	movs	r2, #108	@ 0x6c
 8006f86:	fb02 f303 	mul.w	r3, r2, r3
 8006f8a:	3314      	adds	r3, #20
 8006f8c:	4a0c      	ldr	r2, [pc, #48]	@ (8006fc0 <prvInsertCacheEntry+0xdc>)
 8006f8e:	4413      	add	r3, r2
 8006f90:	223c      	movs	r2, #60	@ 0x3c
 8006f92:	2100      	movs	r1, #0
 8006f94:	4618      	mov	r0, r3
 8006f96:	f019 fe22 	bl	8020bde <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 8006f9a:	4b08      	ldr	r3, [pc, #32]	@ (8006fbc <prvInsertCacheEntry+0xd8>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	4a06      	ldr	r2, [pc, #24]	@ (8006fbc <prvInsertCacheEntry+0xd8>)
 8006fa2:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 8006fa4:	4b05      	ldr	r3, [pc, #20]	@ (8006fbc <prvInsertCacheEntry+0xd8>)
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	2b04      	cmp	r3, #4
 8006faa:	d102      	bne.n	8006fb2 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 8006fac:	4b03      	ldr	r3, [pc, #12]	@ (8006fbc <prvInsertCacheEntry+0xd8>)
 8006fae:	2200      	movs	r2, #0
 8006fb0:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8006fb2:	bf00      	nop
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}
 8006fba:	bf00      	nop
 8006fbc:	20000e2c 	.word	0x20000e2c
 8006fc0:	20000c7c 	.word	0x20000c7c

08006fc4 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b088      	sub	sp, #32
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	6078      	str	r0, [r7, #4]
 8006fcc:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 8006fd2:	2300      	movs	r3, #0
 8006fd4:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 8006fd6:	683b      	ldr	r3, [r7, #0]
 8006fd8:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 8006fda:	4a2e      	ldr	r2, [pc, #184]	@ (8007094 <prvReadDNSCache+0xd0>)
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	216c      	movs	r1, #108	@ 0x6c
 8006fe0:	fb01 f303 	mul.w	r3, r1, r3
 8006fe4:	4413      	add	r3, r2
 8006fe6:	3368      	adds	r3, #104	@ 0x68
 8006fe8:	781b      	ldrb	r3, [r3, #0]
 8006fea:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 8006fec:	69bb      	ldr	r3, [r7, #24]
 8006fee:	2b04      	cmp	r3, #4
 8006ff0:	d901      	bls.n	8006ff6 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8006ff2:	2304      	movs	r3, #4
 8006ff4:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	61fb      	str	r3, [r7, #28]
 8006ffa:	e041      	b.n	8007080 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 8006ffc:	69fa      	ldr	r2, [r7, #28]
 8006ffe:	4613      	mov	r3, r2
 8007000:	009b      	lsls	r3, r3, #2
 8007002:	4413      	add	r3, r2
 8007004:	009b      	lsls	r3, r3, #2
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	216c      	movs	r1, #108	@ 0x6c
 800700a:	fb01 f202 	mul.w	r2, r1, r2
 800700e:	4413      	add	r3, r2
 8007010:	4a20      	ldr	r2, [pc, #128]	@ (8007094 <prvReadDNSCache+0xd0>)
 8007012:	4413      	add	r3, r2
 8007014:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	691b      	ldr	r3, [r3, #16]
 800701a:	2b00      	cmp	r3, #0
 800701c:	d002      	beq.n	8007024 <prvReadDNSCache+0x60>
 800701e:	2b01      	cmp	r3, #1
 8007020:	d010      	beq.n	8007044 <prvReadDNSCache+0x80>
 8007022:	e01d      	b.n	8007060 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	226c      	movs	r2, #108	@ 0x6c
 800702c:	fb02 f303 	mul.w	r3, r2, r3
 8007030:	3350      	adds	r3, #80	@ 0x50
 8007032:	4a18      	ldr	r2, [pc, #96]	@ (8007094 <prvReadDNSCache+0xd0>)
 8007034:	4413      	add	r3, r2
 8007036:	68ba      	ldr	r2, [r7, #8]
 8007038:	2102      	movs	r1, #2
 800703a:	4618      	mov	r0, r3
 800703c:	f7ff fc8c 	bl	8006958 <pxNew_AddrInfo>
 8007040:	6178      	str	r0, [r7, #20]
                       }
                       break;
 8007042:	e011      	b.n	8007068 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	226c      	movs	r2, #108	@ 0x6c
 8007048:	fb02 f303 	mul.w	r3, r2, r3
 800704c:	3350      	adds	r3, #80	@ 0x50
 800704e:	4a11      	ldr	r2, [pc, #68]	@ (8007094 <prvReadDNSCache+0xd0>)
 8007050:	4413      	add	r3, r2
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	210a      	movs	r1, #10
 8007056:	4618      	mov	r0, r3
 8007058:	f7ff fc7e 	bl	8006958 <pxNew_AddrInfo>
 800705c:	6178      	str	r0, [r7, #20]
                        break;
 800705e:	e003      	b.n	8007068 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 8007060:	480d      	ldr	r0, [pc, #52]	@ (8007098 <prvReadDNSCache+0xd4>)
 8007062:	f019 fa93 	bl	802058c <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 8007066:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 8007068:	697b      	ldr	r3, [r7, #20]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d00d      	beq.n	800708a <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 800706e:	693b      	ldr	r3, [r7, #16]
 8007070:	697a      	ldr	r2, [r7, #20]
 8007072:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	331c      	adds	r3, #28
 8007078:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 800707a:	69fb      	ldr	r3, [r7, #28]
 800707c:	3301      	adds	r3, #1
 800707e:	61fb      	str	r3, [r7, #28]
 8007080:	69fa      	ldr	r2, [r7, #28]
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	429a      	cmp	r2, r3
 8007086:	d3b9      	bcc.n	8006ffc <prvReadDNSCache+0x38>
        }
    }
 8007088:	e000      	b.n	800708c <prvReadDNSCache+0xc8>
                break;
 800708a:	bf00      	nop
    }
 800708c:	bf00      	nop
 800708e:	3720      	adds	r7, #32
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}
 8007094:	20000c7c 	.word	0x20000c7c
 8007098:	08022d4c 	.word	0x08022d4c

0800709c <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 800709c:	b580      	push	{r7, lr}
 800709e:	b08a      	sub	sp, #40	@ 0x28
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
 80070a4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80070a6:	2300      	movs	r3, #0
 80070a8:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 80070aa:	4b28      	ldr	r3, [pc, #160]	@ (800714c <xDNSDoCallback+0xb0>)
 80070ac:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	681b      	ldr	r3, [r3, #0]
 80070b2:	881b      	ldrh	r3, [r3, #0]
 80070b4:	b29b      	uxth	r3, r3
 80070b6:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 80070bc:	2300      	movs	r3, #0
 80070be:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 80070c0:	f7fc fabe 	bl	8003640 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80070c4:	697b      	ldr	r3, [r7, #20]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	623b      	str	r3, [r7, #32]
 80070ca:	e029      	b.n	8007120 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80070cc:	6a3b      	ldr	r3, [r7, #32]
 80070ce:	68db      	ldr	r3, [r3, #12]
 80070d0:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 80070d2:	6a3b      	ldr	r3, [r7, #32]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	693a      	ldr	r2, [r7, #16]
 80070d8:	429a      	cmp	r2, r3
 80070da:	d101      	bne.n	80070e0 <xDNSDoCallback+0x44>
 80070dc:	2301      	movs	r3, #1
 80070de:	e000      	b.n	80070e2 <xDNSDoCallback+0x46>
 80070e0:	2300      	movs	r3, #0
 80070e2:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	2b01      	cmp	r3, #1
 80070e8:	d117      	bne.n	800711a <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	691b      	ldr	r3, [r3, #16]
 80070ee:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	3314      	adds	r3, #20
 80070fa:	4618      	mov	r0, r3
 80070fc:	f7fb fa56 	bl	80025ac <uxListRemove>
                    vPortFree( pxCallback );
 8007100:	68f8      	ldr	r0, [r7, #12]
 8007102:	f7fe faf3 	bl	80056ec <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8007106:	4b12      	ldr	r3, [pc, #72]	@ (8007150 <xDNSDoCallback+0xb4>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d102      	bne.n	8007114 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 800710e:	2000      	movs	r0, #0
 8007110:	f002 f9ca 	bl	80094a8 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 8007114:	2301      	movs	r3, #1
 8007116:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8007118:	e006      	b.n	8007128 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800711a:	6a3b      	ldr	r3, [r7, #32]
 800711c:	685b      	ldr	r3, [r3, #4]
 800711e:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 8007120:	6a3a      	ldr	r2, [r7, #32]
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	429a      	cmp	r2, r3
 8007126:	d1d1      	bne.n	80070cc <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 8007128:	f7fc fa98 	bl	800365c <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 800712c:	69fb      	ldr	r3, [r7, #28]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d006      	beq.n	8007140 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8007138:	69fb      	ldr	r3, [r7, #28]
 800713a:	683a      	ldr	r2, [r7, #0]
 800713c:	69b9      	ldr	r1, [r7, #24]
 800713e:	4798      	blx	r3
        }

        return xResult;
 8007140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8007142:	4618      	mov	r0, r3
 8007144:	3728      	adds	r7, #40	@ 0x28
 8007146:	46bd      	mov	sp, r7
 8007148:	bd80      	pop	{r7, pc}
 800714a:	bf00      	nop
 800714c:	20000e38 	.word	0x20000e38
 8007150:	20000e30 	.word	0x20000e30

08007154 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 8007154:	b580      	push	{r7, lr}
 8007156:	b08c      	sub	sp, #48	@ 0x30
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 800715c:	4b40      	ldr	r3, [pc, #256]	@ (8007260 <vDNSCheckCallBack+0x10c>)
 800715e:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 8007160:	f107 030c 	add.w	r3, r7, #12
 8007164:	4618      	mov	r0, r3
 8007166:	f7fb f997 	bl	8002498 <vListInitialise>

        vTaskSuspendAll();
 800716a:	f7fc fa69 	bl	8003640 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800716e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007170:	685b      	ldr	r3, [r3, #4]
 8007172:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007174:	e02e      	b.n	80071d4 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007176:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007178:	68db      	ldr	r3, [r3, #12]
 800717a:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800717c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800717e:	685b      	ldr	r3, [r3, #4]
 8007180:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d00d      	beq.n	80071a4 <vDNSCheckCallBack+0x50>
 8007188:	6a3b      	ldr	r3, [r7, #32]
 800718a:	691b      	ldr	r3, [r3, #16]
 800718c:	687a      	ldr	r2, [r7, #4]
 800718e:	429a      	cmp	r2, r3
 8007190:	d108      	bne.n	80071a4 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007192:	6a3b      	ldr	r3, [r7, #32]
 8007194:	3314      	adds	r3, #20
 8007196:	4618      	mov	r0, r3
 8007198:	f7fb fa08 	bl	80025ac <uxListRemove>
                    vPortFree( pxCallback );
 800719c:	6a38      	ldr	r0, [r7, #32]
 800719e:	f7fe faa5 	bl	80056ec <vPortFree>
 80071a2:	e017      	b.n	80071d4 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 80071a4:	6a3b      	ldr	r3, [r7, #32]
 80071a6:	3308      	adds	r3, #8
 80071a8:	6a3a      	ldr	r2, [r7, #32]
 80071aa:	4611      	mov	r1, r2
 80071ac:	4618      	mov	r0, r3
 80071ae:	f7fc ff3b 	bl	8004028 <xTaskCheckForTimeOut>
 80071b2:	4603      	mov	r3, r0
 80071b4:	2b00      	cmp	r3, #0
 80071b6:	d00d      	beq.n	80071d4 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80071b8:	6a3b      	ldr	r3, [r7, #32]
 80071ba:	3314      	adds	r3, #20
 80071bc:	4618      	mov	r0, r3
 80071be:	f7fb f9f5 	bl	80025ac <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 80071c2:	6a3b      	ldr	r3, [r7, #32]
 80071c4:	f103 0214 	add.w	r2, r3, #20
 80071c8:	f107 030c 	add.w	r3, r7, #12
 80071cc:	4611      	mov	r1, r2
 80071ce:	4618      	mov	r0, r3
 80071d0:	f7fb f98f 	bl	80024f2 <vListInsertEnd>
                 pxIterator != xEnd; )
 80071d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80071d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071d8:	429a      	cmp	r2, r3
 80071da:	d1cc      	bne.n	8007176 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 80071dc:	f7fc fa3e 	bl	800365c <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d030      	beq.n	8007248 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 80071e6:	f107 030c 	add.w	r3, r7, #12
 80071ea:	3308      	adds	r3, #8
 80071ec:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80071ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071f0:	685b      	ldr	r3, [r3, #4]
 80071f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80071f4:	e024      	b.n	8007240 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80071f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071f8:	68db      	ldr	r3, [r3, #12]
 80071fa:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80071fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071fe:	685b      	ldr	r3, [r3, #4]
 8007200:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8007202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007204:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007206:	2b00      	cmp	r3, #0
 8007208:	d009      	beq.n	800721e <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 800720a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007210:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8007214:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007216:	6911      	ldr	r1, [r2, #16]
 8007218:	2200      	movs	r2, #0
 800721a:	4798      	blx	r3
 800721c:	e008      	b.n	8007230 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 800721e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007220:	685b      	ldr	r3, [r3, #4]
 8007222:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007224:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8007228:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800722a:	6911      	ldr	r1, [r2, #16]
 800722c:	2200      	movs	r2, #0
 800722e:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007232:	3314      	adds	r3, #20
 8007234:	4618      	mov	r0, r3
 8007236:	f7fb f9b9 	bl	80025ac <uxListRemove>
                vPortFree( pxCallback );
 800723a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800723c:	f7fe fa56 	bl	80056ec <vPortFree>
                 pxIterator != xEnd;
 8007240:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007244:	429a      	cmp	r2, r3
 8007246:	d1d6      	bne.n	80071f6 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8007248:	4b06      	ldr	r3, [pc, #24]	@ (8007264 <vDNSCheckCallBack+0x110>)
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	2b00      	cmp	r3, #0
 800724e:	d102      	bne.n	8007256 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 8007250:	2000      	movs	r0, #0
 8007252:	f002 f929 	bl	80094a8 <vIPSetDNSTimerEnableState>
        }
    }
 8007256:	bf00      	nop
 8007258:	3730      	adds	r7, #48	@ 0x30
 800725a:	46bd      	mov	sp, r7
 800725c:	bd80      	pop	{r7, pc}
 800725e:	bf00      	nop
 8007260:	20000e38 	.word	0x20000e38
 8007264:	20000e30 	.word	0x20000e30

08007268 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 8007268:	b580      	push	{r7, lr}
 800726a:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 800726c:	4802      	ldr	r0, [pc, #8]	@ (8007278 <vDNSCallbackInitialise+0x10>)
 800726e:	f7fb f913 	bl	8002498 <vListInitialise>
    }
 8007272:	bf00      	nop
 8007274:	bd80      	pop	{r7, pc}
 8007276:	bf00      	nop
 8007278:	20000e30 	.word	0x20000e30

0800727c <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 800727c:	b480      	push	{r7}
 800727e:	b089      	sub	sp, #36	@ 0x24
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
 8007284:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 8007286:	2300      	movs	r3, #0
 8007288:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 800728a:	2300      	movs	r3, #0
 800728c:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	695b      	ldr	r3, [r3, #20]
 8007292:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68db      	ldr	r3, [r3, #12]
 8007298:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 800729a:	693b      	ldr	r3, [r7, #16]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d102      	bne.n	80072a6 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 80072a0:	2300      	movs	r3, #0
 80072a2:	61bb      	str	r3, [r7, #24]
 80072a4:	e069      	b.n	800737a <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80072a6:	68fa      	ldr	r2, [r7, #12]
 80072a8:	69bb      	ldr	r3, [r7, #24]
 80072aa:	4413      	add	r3, r2
 80072ac:	781b      	ldrb	r3, [r3, #0]
 80072ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80072b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80072b4:	d144      	bne.n	8007340 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 80072b6:	693b      	ldr	r3, [r7, #16]
 80072b8:	2b02      	cmp	r3, #2
 80072ba:	d903      	bls.n	80072c4 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 80072bc:	69bb      	ldr	r3, [r7, #24]
 80072be:	3302      	adds	r3, #2
 80072c0:	61bb      	str	r3, [r7, #24]
 80072c2:	e05a      	b.n	800737a <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 80072c4:	2300      	movs	r3, #0
 80072c6:	61bb      	str	r3, [r7, #24]
 80072c8:	e057      	b.n	800737a <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 80072ca:	69fb      	ldr	r3, [r7, #28]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d008      	beq.n	80072e2 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 80072d0:	687a      	ldr	r2, [r7, #4]
 80072d2:	69fb      	ldr	r3, [r7, #28]
 80072d4:	4413      	add	r3, r2
 80072d6:	3334      	adds	r3, #52	@ 0x34
 80072d8:	222e      	movs	r2, #46	@ 0x2e
 80072da:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 80072dc:	69fb      	ldr	r3, [r7, #28]
 80072de:	3301      	adds	r3, #1
 80072e0:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 80072e2:	68fa      	ldr	r2, [r7, #12]
 80072e4:	69bb      	ldr	r3, [r7, #24]
 80072e6:	4413      	add	r3, r2
 80072e8:	781b      	ldrb	r3, [r3, #0]
 80072ea:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 80072ec:	69bb      	ldr	r3, [r7, #24]
 80072ee:	3301      	adds	r3, #1
 80072f0:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 80072f2:	69ba      	ldr	r2, [r7, #24]
 80072f4:	697b      	ldr	r3, [r7, #20]
 80072f6:	4413      	add	r3, r2
 80072f8:	693a      	ldr	r2, [r7, #16]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d202      	bcs.n	8007304 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 80072fe:	2300      	movs	r3, #0
 8007300:	61bb      	str	r3, [r7, #24]
                    break;
 8007302:	e027      	b.n	8007354 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 8007304:	69fa      	ldr	r2, [r7, #28]
 8007306:	697b      	ldr	r3, [r7, #20]
 8007308:	4413      	add	r3, r2
 800730a:	683a      	ldr	r2, [r7, #0]
 800730c:	429a      	cmp	r2, r3
 800730e:	d812      	bhi.n	8007336 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 8007310:	2300      	movs	r3, #0
 8007312:	61bb      	str	r3, [r7, #24]
                    break;
 8007314:	e01e      	b.n	8007354 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	69bb      	ldr	r3, [r7, #24]
 800731a:	4413      	add	r3, r2
 800731c:	7819      	ldrb	r1, [r3, #0]
 800731e:	687a      	ldr	r2, [r7, #4]
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	4413      	add	r3, r2
 8007324:	3334      	adds	r3, #52	@ 0x34
 8007326:	460a      	mov	r2, r1
 8007328:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 800732a:	69fb      	ldr	r3, [r7, #28]
 800732c:	3301      	adds	r3, #1
 800732e:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 8007330:	69bb      	ldr	r3, [r7, #24]
 8007332:	3301      	adds	r3, #1
 8007334:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	1e5a      	subs	r2, r3, #1
 800733a:	617a      	str	r2, [r7, #20]
 800733c:	2b00      	cmp	r3, #0
 800733e:	d1ea      	bne.n	8007316 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8007340:	69ba      	ldr	r2, [r7, #24]
 8007342:	693b      	ldr	r3, [r7, #16]
 8007344:	429a      	cmp	r2, r3
 8007346:	d205      	bcs.n	8007354 <DNS_ReadNameField+0xd8>
 8007348:	68fa      	ldr	r2, [r7, #12]
 800734a:	69bb      	ldr	r3, [r7, #24]
 800734c:	4413      	add	r3, r2
 800734e:	781b      	ldrb	r3, [r3, #0]
 8007350:	2b00      	cmp	r3, #0
 8007352:	d1ba      	bne.n	80072ca <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d00f      	beq.n	800737a <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 800735a:	69ba      	ldr	r2, [r7, #24]
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	429a      	cmp	r2, r3
 8007360:	d209      	bcs.n	8007376 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	69fb      	ldr	r3, [r7, #28]
 8007366:	4413      	add	r3, r2
 8007368:	3334      	adds	r3, #52	@ 0x34
 800736a:	2200      	movs	r2, #0
 800736c:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 800736e:	69bb      	ldr	r3, [r7, #24]
 8007370:	3301      	adds	r3, #1
 8007372:	61bb      	str	r3, [r7, #24]
 8007374:	e001      	b.n	800737a <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8007376:	2300      	movs	r3, #0
 8007378:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 800737a:	69bb      	ldr	r3, [r7, #24]
    }
 800737c:	4618      	mov	r0, r3
 800737e:	3724      	adds	r7, #36	@ 0x24
 8007380:	46bd      	mov	sp, r7
 8007382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007386:	4770      	bx	lr

08007388 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8007388:	b480      	push	{r7}
 800738a:	b087      	sub	sp, #28
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
 8007390:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 8007392:	683b      	ldr	r3, [r7, #0]
 8007394:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 8007396:	2300      	movs	r3, #0
 8007398:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 800739a:	697b      	ldr	r3, [r7, #20]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d102      	bne.n	80073a6 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 80073a0:	2300      	movs	r3, #0
 80073a2:	613b      	str	r3, [r7, #16]
 80073a4:	e03f      	b.n	8007426 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80073a6:	687a      	ldr	r2, [r7, #4]
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	4413      	add	r3, r2
 80073ac:	781b      	ldrb	r3, [r3, #0]
 80073ae:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80073b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80073b4:	d11f      	bne.n	80073f6 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 80073b6:	697b      	ldr	r3, [r7, #20]
 80073b8:	2b02      	cmp	r3, #2
 80073ba:	d903      	bls.n	80073c4 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 80073bc:	693b      	ldr	r3, [r7, #16]
 80073be:	3302      	adds	r3, #2
 80073c0:	613b      	str	r3, [r7, #16]
 80073c2:	e030      	b.n	8007426 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 80073c4:	2300      	movs	r3, #0
 80073c6:	613b      	str	r3, [r7, #16]
 80073c8:	e02d      	b.n	8007426 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 80073ca:	687a      	ldr	r2, [r7, #4]
 80073cc:	693b      	ldr	r3, [r7, #16]
 80073ce:	4413      	add	r3, r2
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	3301      	adds	r3, #1
 80073d4:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 80073d6:	697a      	ldr	r2, [r7, #20]
 80073d8:	68fb      	ldr	r3, [r7, #12]
 80073da:	429a      	cmp	r2, r3
 80073dc:	d908      	bls.n	80073f0 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 80073de:	697a      	ldr	r2, [r7, #20]
 80073e0:	68fb      	ldr	r3, [r7, #12]
 80073e2:	1ad3      	subs	r3, r2, r3
 80073e4:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 80073e6:	693a      	ldr	r2, [r7, #16]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	4413      	add	r3, r2
 80073ec:	613b      	str	r3, [r7, #16]
 80073ee:	e002      	b.n	80073f6 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	613b      	str	r3, [r7, #16]
                    break;
 80073f4:	e008      	b.n	8007408 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 80073f6:	687a      	ldr	r2, [r7, #4]
 80073f8:	693b      	ldr	r3, [r7, #16]
 80073fa:	4413      	add	r3, r2
 80073fc:	781b      	ldrb	r3, [r3, #0]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d002      	beq.n	8007408 <DNS_SkipNameField+0x80>
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	2b01      	cmp	r3, #1
 8007406:	d8e0      	bhi.n	80073ca <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8007408:	693b      	ldr	r3, [r7, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d00b      	beq.n	8007426 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 800740e:	687a      	ldr	r2, [r7, #4]
 8007410:	693b      	ldr	r3, [r7, #16]
 8007412:	4413      	add	r3, r2
 8007414:	781b      	ldrb	r3, [r3, #0]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d103      	bne.n	8007422 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	3301      	adds	r3, #1
 800741e:	613b      	str	r3, [r7, #16]
 8007420:	e001      	b.n	8007426 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8007426:	693b      	ldr	r3, [r7, #16]
    }
 8007428:	4618      	mov	r0, r3
 800742a:	371c      	adds	r7, #28
 800742c:	46bd      	mov	sp, r7
 800742e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007432:	4770      	bx	lr

08007434 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8007434:	b5b0      	push	{r4, r5, r7, lr}
 8007436:	b0f6      	sub	sp, #472	@ 0x1d8
 8007438:	af00      	add	r7, sp, #0
 800743a:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 800743e:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 8007442:	6020      	str	r0, [r4, #0]
 8007444:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8007448:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 800744c:	6001      	str	r1, [r0, #0]
 800744e:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8007452:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 8007456:	600a      	str	r2, [r1, #0]
 8007458:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 800745c:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 8007460:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8007462:	2301      	movs	r3, #1
 8007464:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 8007468:	2300      	movs	r3, #0
 800746a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800746e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007472:	224c      	movs	r2, #76	@ 0x4c
 8007474:	2100      	movs	r1, #0
 8007476:	4618      	mov	r0, r3
 8007478:	f019 fbb1 	bl	8020bde <memset>
        xSet.usPortNumber = usPort;
 800747c:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8007480:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8007484:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007488:	3344      	adds	r3, #68	@ 0x44
 800748a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 800748e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007492:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 800749c:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80074a0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	2b0b      	cmp	r3, #11
 80074a8:	d803      	bhi.n	80074b2 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 80074aa:	2300      	movs	r3, #0
 80074ac:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80074b0:	e35a      	b.n	8007b68 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 80074b2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80074b6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 80074c0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80074c4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 80074ce:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80074d2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 80074dc:	2300      	movs	r3, #0
 80074de:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 80074e2:	2300      	movs	r3, #0
 80074e4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 80074e8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80074ec:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 80074f6:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80074fa:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	330c      	adds	r3, #12
 8007502:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8007506:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800750a:	3b0c      	subs	r3, #12
 800750c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8007510:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007514:	889b      	ldrh	r3, [r3, #4]
 8007516:	b29b      	uxth	r3, r3
 8007518:	021b      	lsls	r3, r3, #8
 800751a:	b21a      	sxth	r2, r3
 800751c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007520:	889b      	ldrh	r3, [r3, #4]
 8007522:	b29b      	uxth	r3, r3
 8007524:	0a1b      	lsrs	r3, r3, #8
 8007526:	b29b      	uxth	r3, r3
 8007528:	b21b      	sxth	r3, r3
 800752a:	4313      	orrs	r3, r2
 800752c:	b21b      	sxth	r3, r3
 800752e:	b29b      	uxth	r3, r3
 8007530:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8007534:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007538:	88db      	ldrh	r3, [r3, #6]
 800753a:	b29b      	uxth	r3, r3
 800753c:	021b      	lsls	r3, r3, #8
 800753e:	b21a      	sxth	r2, r3
 8007540:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007544:	88db      	ldrh	r3, [r3, #6]
 8007546:	b29b      	uxth	r3, r3
 8007548:	0a1b      	lsrs	r3, r3, #8
 800754a:	b29b      	uxth	r3, r3
 800754c:	b21b      	sxth	r3, r3
 800754e:	4313      	orrs	r3, r2
 8007550:	b21b      	sxth	r3, r3
 8007552:	b29b      	uxth	r3, r3
 8007554:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8007558:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800755c:	885b      	ldrh	r3, [r3, #2]
 800755e:	b29b      	uxth	r3, r3
 8007560:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8007564:	2b80      	cmp	r3, #128	@ 0x80
 8007566:	d11b      	bne.n	80075a0 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 8007568:	2301      	movs	r3, #1
 800756a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 800756e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8007572:	2b00      	cmp	r3, #0
 8007574:	d103      	bne.n	800757e <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8007576:	2300      	movs	r3, #0
 8007578:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 800757c:	e2f4      	b.n	8007b68 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 800757e:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007582:	2b00      	cmp	r3, #0
 8007584:	d114      	bne.n	80075b0 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8007586:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800758a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 800758e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007592:	2110      	movs	r1, #16
 8007594:	4618      	mov	r0, r3
 8007596:	f7ff fe71 	bl	800727c <DNS_ReadNameField>
 800759a:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 800759e:	e007      	b.n	80075b0 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 80075a0:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d103      	bne.n	80075b0 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 80075a8:	2300      	movs	r3, #0
 80075aa:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 80075ae:	e2db      	b.n	8007b68 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 80075b0:	2300      	movs	r3, #0
 80075b2:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 80075b6:	e064      	b.n	8007682 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 80075b8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d103      	bne.n	80075c8 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 80075c0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075c4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 80075c8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d108      	bne.n	80075e2 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 80075d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80075d4:	2110      	movs	r1, #16
 80075d6:	4618      	mov	r0, r3
 80075d8:	f7ff fe50 	bl	800727c <DNS_ReadNameField>
 80075dc:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 80075e0:	e009      	b.n	80075f6 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 80075e2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80075e6:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80075ea:	4611      	mov	r1, r2
 80075ec:	4618      	mov	r0, r3
 80075ee:	f7ff fecb 	bl	8007388 <DNS_SkipNameField>
 80075f2:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 80075f6:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d103      	bne.n	8007606 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 80075fe:	2300      	movs	r3, #0
 8007600:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007604:	e043      	b.n	800768e <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 8007606:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 800760a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800760e:	4413      	add	r3, r2
 8007610:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8007614:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007618:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800761c:	4413      	add	r3, r2
 800761e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 8007622:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8007626:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800762a:	1ad3      	subs	r3, r2, r3
 800762c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8007630:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007634:	2b03      	cmp	r3, #3
 8007636:	d91b      	bls.n	8007670 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 8007638:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800763c:	4618      	mov	r0, r3
 800763e:	f002 fa58 	bl	8009af2 <usChar2u16>
 8007642:	4603      	mov	r3, r0
 8007644:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 8007648:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800764c:	3302      	adds	r3, #2
 800764e:	4618      	mov	r0, r3
 8007650:	f002 fa4f 	bl	8009af2 <usChar2u16>
 8007654:	4603      	mov	r3, r0
 8007656:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 800765a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800765e:	3304      	adds	r3, #4
 8007660:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8007664:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007668:	3b04      	subs	r3, #4
 800766a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800766e:	e003      	b.n	8007678 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8007670:	2300      	movs	r3, #0
 8007672:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007676:	e00a      	b.n	800768e <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8007678:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 800767c:	3301      	adds	r3, #1
 800767e:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8007682:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007686:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 800768a:	429a      	cmp	r2, r3
 800768c:	d394      	bcc.n	80075b8 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 800768e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8007692:	2b00      	cmp	r3, #0
 8007694:	f000 8265 	beq.w	8007b62 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8007698:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 800769c:	2b01      	cmp	r3, #1
 800769e:	d10d      	bne.n	80076bc <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 80076a0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 80076a4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80076a8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 80076ac:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 80076b0:	6819      	ldr	r1, [r3, #0]
 80076b2:	f000 fa73 	bl	8007b9c <parseDNSAnswer>
 80076b6:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 80076ba:	e255      	b.n	8007b68 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 80076bc:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80076c0:	2b01      	cmp	r3, #1
 80076c2:	d004      	beq.n	80076ce <DNS_ParseDNSReply+0x29a>
 80076c4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80076c8:	2b1c      	cmp	r3, #28
 80076ca:	f040 824d 	bne.w	8007b68 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 80076ce:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 80076d2:	2b01      	cmp	r3, #1
 80076d4:	f040 8248 	bne.w	8007b68 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 80076d8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80076dc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80076e0:	6818      	ldr	r0, [r3, #0]
 80076e2:	f001 ff9f 	bl	8009624 <pxUDPPayloadBuffer_to_NetworkBuffer>
 80076e6:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 80076ea:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d103      	bne.n	80076fa <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 80076f2:	48c4      	ldr	r0, [pc, #784]	@ (8007a04 <DNS_ParseDNSReply+0x5d0>)
 80076f4:	f018 ff4a 	bl	802058c <lUDPLoggingPrintf>
                            break;
 80076f8:	e236      	b.n	8007b68 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 80076fa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80076fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007700:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007704:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8007708:	6812      	ldr	r2, [r2, #0]
 800770a:	1ad3      	subs	r3, r2, r3
 800770c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 8007710:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007714:	2b2a      	cmp	r3, #42	@ 0x2a
 8007716:	d003      	beq.n	8007720 <DNS_ParseDNSReply+0x2ec>
 8007718:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 800771c:	2b3e      	cmp	r3, #62	@ 0x3e
 800771e:	d101      	bne.n	8007724 <DNS_ParseDNSReply+0x2f0>
 8007720:	2301      	movs	r3, #1
 8007722:	e000      	b.n	8007726 <DNS_ParseDNSReply+0x2f2>
 8007724:	2300      	movs	r3, #0
 8007726:	2b00      	cmp	r3, #0
 8007728:	d104      	bne.n	8007734 <DNS_ParseDNSReply+0x300>
 800772a:	f240 11bb 	movw	r1, #443	@ 0x1bb
 800772e:	48b6      	ldr	r0, [pc, #728]	@ (8007a08 <DNS_ParseDNSReply+0x5d4>)
 8007730:	f7f9 fcfe 	bl	8001130 <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8007734:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800773a:	2b00      	cmp	r3, #0
 800773c:	f000 8213 	beq.w	8007b66 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8007740:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007746:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 800774a:	f107 0314 	add.w	r3, r7, #20
 800774e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007752:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8007756:	4618      	mov	r0, r3
 8007758:	f019 f934 	bl	80209c4 <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 800775c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007760:	461a      	mov	r2, r3
 8007762:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007766:	3334      	adds	r3, #52	@ 0x34
 8007768:	4619      	mov	r1, r3
 800776a:	48a8      	ldr	r0, [pc, #672]	@ (8007a0c <DNS_ParseDNSReply+0x5d8>)
 800776c:	f018 ff0e 	bl	802058c <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 8007770:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007774:	b2da      	uxtb	r2, r3
 8007776:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800777a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800777e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 8007782:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007786:	3334      	adds	r3, #52	@ 0x34
 8007788:	4618      	mov	r0, r3
 800778a:	f7f9 fd65 	bl	8001258 <xApplicationDNSQueryHook>
 800778e:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 8007792:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8007796:	2b00      	cmp	r3, #0
 8007798:	d014      	beq.n	80077c4 <DNS_ParseDNSReply+0x390>
 800779a:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800779e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80077a2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80077a6:	f003 0304 	and.w	r3, r3, #4
 80077aa:	b2db      	uxtb	r3, r3
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d109      	bne.n	80077c4 <DNS_ParseDNSReply+0x390>
 80077b0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80077b4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d102      	bne.n	80077c4 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 80077be:	2300      	movs	r3, #0
 80077c0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 80077c4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 80077c8:	2b00      	cmp	r3, #0
 80077ca:	f000 81cd 	beq.w	8007b68 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 80077ce:	2300      	movs	r3, #0
 80077d0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 80077d4:	2300      	movs	r3, #0
 80077d6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 80077da:	4b8d      	ldr	r3, [pc, #564]	@ (8007a10 <DNS_ParseDNSReply+0x5dc>)
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2b00      	cmp	r3, #0
 80077e0:	d164      	bne.n	80078ac <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 80077e2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 80077e6:	f001 fbd7 	bl	8008f98 <uxIPHeaderSizePacket>
 80077ea:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 80077ec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80077f0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 80077f8:	3316      	adds	r3, #22
 80077fa:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 80077fe:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007802:	2b1c      	cmp	r3, #28
 8007804:	d103      	bne.n	800780e <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 8007806:	231c      	movs	r3, #28
 8007808:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 800780c:	e002      	b.n	8007814 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 800780e:	2310      	movs	r3, #16
 8007810:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 8007814:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007818:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 800781c:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 800781e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8007822:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8007826:	4413      	add	r3, r2
 8007828:	4619      	mov	r1, r3
 800782a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 800782e:	f001 fe65 	bl	80094fc <pxDuplicateNetworkBufferWithDescriptor>
 8007832:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 8007836:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800783a:	2b00      	cmp	r3, #0
 800783c:	d032      	beq.n	80078a4 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 800783e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007842:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007846:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	1ad3      	subs	r3, r2, r3
 800784e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 8007852:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8007856:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800785a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	1ad3      	subs	r3, r2, r3
 8007862:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 8007866:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800786a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 800786e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007872:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007874:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007878:	4413      	add	r3, r2
 800787a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 800787e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8007882:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8007886:	4413      	add	r3, r2
 8007888:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 800788c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8007890:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8007894:	4413      	add	r3, r2
 8007896:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 800789a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800789e:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 80078a2:	e00b      	b.n	80078bc <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 80078a4:	2300      	movs	r3, #0
 80078a6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 80078aa:	e007      	b.n	80078bc <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 80078ac:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80078b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80078b2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 80078b6:	4413      	add	r3, r2
 80078b8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 80078bc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	f000 8151 	beq.w	8007b68 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 80078c6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80078ca:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 80078ce:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80078d2:	3302      	adds	r3, #2
 80078d4:	2280      	movs	r2, #128	@ 0x80
 80078d6:	701a      	strb	r2, [r3, #0]
 80078d8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80078dc:	3303      	adds	r3, #3
 80078de:	2200      	movs	r2, #0
 80078e0:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 80078e2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80078e6:	3306      	adds	r3, #6
 80078e8:	2200      	movs	r2, #0
 80078ea:	701a      	strb	r2, [r3, #0]
 80078ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80078f0:	3307      	adds	r3, #7
 80078f2:	2201      	movs	r2, #1
 80078f4:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 80078f6:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 80078fa:	3308      	adds	r3, #8
 80078fc:	2200      	movs	r2, #0
 80078fe:	701a      	strb	r2, [r3, #0]
 8007900:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007904:	3309      	adds	r3, #9
 8007906:	2200      	movs	r2, #0
 8007908:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 800790a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800790e:	330a      	adds	r3, #10
 8007910:	2200      	movs	r2, #0
 8007912:	701a      	strb	r2, [r3, #0]
 8007914:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007918:	330b      	adds	r3, #11
 800791a:	2200      	movs	r2, #0
 800791c:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 800791e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007922:	22c0      	movs	r2, #192	@ 0xc0
 8007924:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 8007926:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 800792a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800792e:	1ad3      	subs	r3, r2, r3
 8007930:	b2da      	uxtb	r2, r3
 8007932:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007936:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 8007938:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 800793c:	0a1b      	lsrs	r3, r3, #8
 800793e:	b29a      	uxth	r2, r3
 8007940:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007944:	3302      	adds	r3, #2
 8007946:	b2d2      	uxtb	r2, r2
 8007948:	701a      	strb	r2, [r3, #0]
 800794a:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 800794e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007952:	3303      	adds	r3, #3
 8007954:	b2d2      	uxtb	r2, r2
 8007956:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 8007958:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800795c:	3304      	adds	r3, #4
 800795e:	2200      	movs	r2, #0
 8007960:	701a      	strb	r2, [r3, #0]
 8007962:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007966:	3305      	adds	r3, #5
 8007968:	2201      	movs	r2, #1
 800796a:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 800796c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007970:	3306      	adds	r3, #6
 8007972:	2200      	movs	r2, #0
 8007974:	701a      	strb	r2, [r3, #0]
 8007976:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800797a:	3307      	adds	r3, #7
 800797c:	2200      	movs	r2, #0
 800797e:	701a      	strb	r2, [r3, #0]
 8007980:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007984:	3308      	adds	r3, #8
 8007986:	2201      	movs	r2, #1
 8007988:	701a      	strb	r2, [r3, #0]
 800798a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 800798e:	3309      	adds	r3, #9
 8007990:	222c      	movs	r2, #44	@ 0x2c
 8007992:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 8007994:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007998:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 800799c:	1ad3      	subs	r3, r2, r3
 800799e:	b29b      	uxth	r3, r3
 80079a0:	3310      	adds	r3, #16
 80079a2:	b29b      	uxth	r3, r3
 80079a4:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 80079a8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 80079ac:	2b1c      	cmp	r3, #28
 80079ae:	d131      	bne.n	8007a14 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 80079b0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80079b4:	330a      	adds	r3, #10
 80079b6:	2200      	movs	r2, #0
 80079b8:	701a      	strb	r2, [r3, #0]
 80079ba:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80079be:	330b      	adds	r3, #11
 80079c0:	2210      	movs	r2, #16
 80079c2:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80079c4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80079c8:	f103 020c 	add.w	r2, r3, #12
 80079cc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80079d0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80079d4:	4615      	mov	r5, r2
 80079d6:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 80079da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80079dc:	6028      	str	r0, [r5, #0]
 80079de:	6069      	str	r1, [r5, #4]
 80079e0:	60aa      	str	r2, [r5, #8]
 80079e2:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 80079e4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80079e8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 80079ec:	1ad3      	subs	r3, r2, r3
 80079ee:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 80079f2:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80079f6:	b29b      	uxth	r3, r3
 80079f8:	331c      	adds	r3, #28
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 8007a00:	e09a      	b.n	8007b38 <DNS_ParseDNSReply+0x704>
 8007a02:	bf00      	nop
 8007a04:	08022df4 	.word	0x08022df4
 8007a08:	08022e28 	.word	0x08022e28
 8007a0c:	08022e5c 	.word	0x08022e5c
 8007a10:	08025d10 	.word	0x08025d10
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 8007a14:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007a18:	330a      	adds	r3, #10
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	701a      	strb	r2, [r3, #0]
 8007a1e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007a22:	330b      	adds	r3, #11
 8007a24:	2204      	movs	r2, #4
 8007a26:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 8007a28:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a2c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	061a      	lsls	r2, r3, #24
 8007a34:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a38:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	021b      	lsls	r3, r3, #8
 8007a40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a44:	431a      	orrs	r2, r3
 8007a46:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a4a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	0a1b      	lsrs	r3, r3, #8
 8007a52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007a56:	431a      	orrs	r2, r3
 8007a58:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a5c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	0e1b      	lsrs	r3, r3, #24
 8007a64:	4313      	orrs	r3, r2
 8007a66:	0e1a      	lsrs	r2, r3, #24
 8007a68:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007a6c:	330c      	adds	r3, #12
 8007a6e:	b2d2      	uxtb	r2, r2
 8007a70:	701a      	strb	r2, [r3, #0]
 8007a72:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a76:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	061a      	lsls	r2, r3, #24
 8007a7e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a82:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	021b      	lsls	r3, r3, #8
 8007a8a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007a8e:	431a      	orrs	r2, r3
 8007a90:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007a94:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	0a1b      	lsrs	r3, r3, #8
 8007a9c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007aa0:	431a      	orrs	r2, r3
 8007aa2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007aa6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	0e1b      	lsrs	r3, r3, #24
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	0c1a      	lsrs	r2, r3, #16
 8007ab2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007ab6:	330d      	adds	r3, #13
 8007ab8:	b2d2      	uxtb	r2, r2
 8007aba:	701a      	strb	r2, [r3, #0]
 8007abc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007ac0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	061a      	lsls	r2, r3, #24
 8007ac8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007acc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	021b      	lsls	r3, r3, #8
 8007ad4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ad8:	431a      	orrs	r2, r3
 8007ada:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007ade:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	0a1b      	lsrs	r3, r3, #8
 8007ae6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007aea:	431a      	orrs	r2, r3
 8007aec:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007af0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	0e1b      	lsrs	r3, r3, #24
 8007af8:	4313      	orrs	r3, r2
 8007afa:	0a1a      	lsrs	r2, r3, #8
 8007afc:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007b00:	330e      	adds	r3, #14
 8007b02:	b2d2      	uxtb	r2, r2
 8007b04:	701a      	strb	r2, [r3, #0]
 8007b06:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007b0a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	0e1a      	lsrs	r2, r3, #24
 8007b12:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007b16:	330f      	adds	r3, #15
 8007b18:	b2d2      	uxtb	r2, r2
 8007b1a:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8007b1c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007b20:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8007b24:	1ad3      	subs	r3, r2, r3
 8007b26:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 8007b2a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8007b2e:	b29b      	uxth	r3, r3
 8007b30:	3310      	adds	r3, #16
 8007b32:	b29b      	uxth	r3, r3
 8007b34:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 8007b38:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8007b42:	f000 fa21 	bl	8007f88 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8007b46:	2100      	movs	r1, #0
 8007b48:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8007b4c:	f001 f924 	bl	8008d98 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 8007b50:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d007      	beq.n	8007b68 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8007b58:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8007b5c:	f00e fc2c 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
 8007b60:	e002      	b.n	8007b68 <DNS_ParseDNSReply+0x734>
                    break;
 8007b62:	bf00      	nop
 8007b64:	e000      	b.n	8007b68 <DNS_ParseDNSReply+0x734>
                            break;
 8007b66:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8007b68:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d103      	bne.n	8007b78 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8007b70:	2300      	movs	r3, #0
 8007b72:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8007b76:	e009      	b.n	8007b8c <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8007b78:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007b7c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	2b00      	cmp	r3, #0
 8007b84:	d102      	bne.n	8007b8c <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8007b86:	2300      	movs	r3, #0
 8007b88:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 8007b8c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8007b90:	4618      	mov	r0, r3
 8007b92:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8007b96:	46bd      	mov	sp, r7
 8007b98:	bdb0      	pop	{r4, r5, r7, pc}
 8007b9a:	bf00      	nop

08007b9c <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 8007b9c:	b590      	push	{r4, r7, lr}
 8007b9e:	b0a7      	sub	sp, #156	@ 0x9c
 8007ba0:	af02      	add	r7, sp, #8
 8007ba2:	60f8      	str	r0, [r7, #12]
 8007ba4:	60b9      	str	r1, [r7, #8]
 8007ba6:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8007ba8:	2300      	movs	r3, #0
 8007baa:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007bae:	2304      	movs	r3, #4
 8007bb0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 8007bba:	2300      	movs	r3, #0
 8007bbc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8007bc0:	2300      	movs	r3, #0
 8007bc2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007bc6:	e1c1      	b.n	8007f4c <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 8007bc8:	2300      	movs	r3, #0
 8007bca:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007bd0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8007bd4:	429a      	cmp	r2, r3
 8007bd6:	f240 81c1 	bls.w	8007f5c <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	68da      	ldr	r2, [r3, #12]
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	695b      	ldr	r3, [r3, #20]
 8007be2:	4619      	mov	r1, r3
 8007be4:	4610      	mov	r0, r2
 8007be6:	f7ff fbcf 	bl	8007388 <DNS_SkipNameField>
 8007bea:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 8007bec:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d103      	bne.n	8007bfa <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8007bf2:	2300      	movs	r3, #0
 8007bf4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8007bf8:	e1b1      	b.n	8007f5e <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d005      	beq.n	8007c0c <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681a      	ldr	r2, [r3, #0]
 8007c04:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c06:	441a      	add	r2, r3
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	68da      	ldr	r2, [r3, #12]
 8007c10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c12:	441a      	add	r2, r3
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 8007c18:	68fb      	ldr	r3, [r7, #12]
 8007c1a:	695a      	ldr	r2, [r3, #20]
 8007c1c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007c1e:	1ad2      	subs	r2, r2, r3
 8007c20:	68fb      	ldr	r3, [r7, #12]
 8007c22:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 8007c24:	68fb      	ldr	r3, [r7, #12]
 8007c26:	695b      	ldr	r3, [r3, #20]
 8007c28:	2b01      	cmp	r3, #1
 8007c2a:	d803      	bhi.n	8007c34 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 8007c2c:	2300      	movs	r3, #0
 8007c2e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8007c32:	e194      	b.n	8007f5e <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 8007c34:	68fb      	ldr	r3, [r7, #12]
 8007c36:	68db      	ldr	r3, [r3, #12]
 8007c38:	4618      	mov	r0, r3
 8007c3a:	f001 ff5a 	bl	8009af2 <usChar2u16>
 8007c3e:	4603      	mov	r3, r0
 8007c40:	461a      	mov	r2, r3
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	8b1b      	ldrh	r3, [r3, #24]
 8007c4a:	2b1c      	cmp	r3, #28
 8007c4c:	d10c      	bne.n	8007c68 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 8007c4e:	68fb      	ldr	r3, [r7, #12]
 8007c50:	2210      	movs	r2, #16
 8007c52:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	695a      	ldr	r2, [r3, #20]
 8007c58:	68fb      	ldr	r3, [r7, #12]
 8007c5a:	6a1b      	ldr	r3, [r3, #32]
 8007c5c:	330a      	adds	r3, #10
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d323      	bcc.n	8007caa <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 8007c62:	2301      	movs	r3, #1
 8007c64:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007c66:	e020      	b.n	8007caa <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	8b1b      	ldrh	r3, [r3, #24]
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d11c      	bne.n	8007caa <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	2204      	movs	r2, #4
 8007c74:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8007c76:	68fb      	ldr	r3, [r7, #12]
 8007c78:	695a      	ldr	r2, [r3, #20]
 8007c7a:	68fb      	ldr	r3, [r7, #12]
 8007c7c:	6a1b      	ldr	r3, [r3, #32]
 8007c7e:	330a      	adds	r3, #10
 8007c80:	429a      	cmp	r2, r3
 8007c82:	d312      	bcc.n	8007caa <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	68db      	ldr	r3, [r3, #12]
 8007c88:	330a      	adds	r3, #10
 8007c8a:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 8007c8c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8007c90:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	461a      	mov	r2, r3
 8007c98:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8007c9a:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007c9c:	f018 fe92 	bl	80209c4 <memcpy>

                    if( ulTestAddress != 0U )
 8007ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d001      	beq.n	8007caa <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 8007caa:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 810d 	beq.w	8007ecc <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	68db      	ldr	r3, [r3, #12]
 8007cb6:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8007cb8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cba:	891b      	ldrh	r3, [r3, #8]
 8007cbc:	b29b      	uxth	r3, r3
 8007cbe:	021b      	lsls	r3, r3, #8
 8007cc0:	b21a      	sxth	r2, r3
 8007cc2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007cc4:	891b      	ldrh	r3, [r3, #8]
 8007cc6:	b29b      	uxth	r3, r3
 8007cc8:	0a1b      	lsrs	r3, r3, #8
 8007cca:	b29b      	uxth	r3, r3
 8007ccc:	b21b      	sxth	r3, r3
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 8007cd6:	b21b      	sxth	r3, r3
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	f040 80d0 	bne.w	8007e7e <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	6a1b      	ldr	r3, [r3, #32]
 8007ce2:	2b10      	cmp	r3, #16
 8007ce4:	d11c      	bne.n	8007d20 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 8007ce6:	68fb      	ldr	r3, [r7, #12]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 8007cec:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	6859      	ldr	r1, [r3, #4]
 8007cf4:	689a      	ldr	r2, [r3, #8]
 8007cf6:	68db      	ldr	r3, [r3, #12]
 8007cf8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 8007cfa:	68bb      	ldr	r3, [r7, #8]
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d009      	beq.n	8007d14 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8007d00:	68fb      	ldr	r3, [r7, #12]
 8007d02:	3334      	adds	r3, #52	@ 0x34
 8007d04:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8007d08:	210a      	movs	r1, #10
 8007d0a:	4618      	mov	r0, r3
 8007d0c:	f7fe fe24 	bl	8006958 <pxNew_AddrInfo>
 8007d10:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 8007d14:	2301      	movs	r3, #1
 8007d16:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	2201      	movs	r2, #1
 8007d1c:	61da      	str	r2, [r3, #28]
 8007d1e:	e021      	b.n	8007d64 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	330a      	adds	r3, #10
 8007d26:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 8007d28:	68fb      	ldr	r3, [r7, #12]
 8007d2a:	331c      	adds	r3, #28
 8007d2c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	461a      	mov	r2, r3
 8007d34:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8007d36:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8007d38:	f018 fe44 	bl	80209c4 <memcpy>

                        if( ppxAddressInfo != NULL )
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d00b      	beq.n	8007d5a <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	331c      	adds	r3, #28
 8007d46:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	3334      	adds	r3, #52	@ 0x34
 8007d4c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007d4e:	2102      	movs	r1, #2
 8007d50:	4618      	mov	r0, r3
 8007d52:	f7fe fe01 	bl	8006958 <pxNew_AddrInfo>
 8007d56:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 8007d5a:	68fb      	ldr	r3, [r7, #12]
 8007d5c:	69db      	ldr	r3, [r3, #28]
 8007d5e:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 8007d60:	2300      	movs	r3, #0
 8007d62:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 8007d64:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d013      	beq.n	8007d94 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d104      	bne.n	8007d7e <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 8007d74:	68bb      	ldr	r3, [r7, #8]
 8007d76:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d7a:	601a      	str	r2, [r3, #0]
 8007d7c:	e004      	b.n	8007d88 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8007d82:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007d86:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8007d88:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007d8c:	f103 021c 	add.w	r2, r3, #28
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 8007d94:	68bb      	ldr	r3, [r7, #8]
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d002      	beq.n	8007da0 <parseDNSAnswer+0x204>
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	681b      	ldr	r3, [r3, #0]
 8007d9e:	e000      	b.n	8007da2 <parseDNSAnswer+0x206>
 8007da0:	2300      	movs	r3, #0
 8007da2:	4619      	mov	r1, r3
 8007da4:	68f8      	ldr	r0, [r7, #12]
 8007da6:	f7ff f979 	bl	800709c <xDNSDoCallback>
 8007daa:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 8007dac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d002      	beq.n	8007db8 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	2201      	movs	r2, #1
 8007db6:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007dbc:	2b00      	cmp	r3, #0
 8007dbe:	d011      	beq.n	8007de4 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 8007dc0:	68fb      	ldr	r3, [r7, #12]
 8007dc2:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 8007dc6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007dc8:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 8007dca:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8007dce:	2300      	movs	r3, #0
 8007dd0:	9300      	str	r3, [sp, #0]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f7fe fe85 	bl	8006ae2 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007ddc:	3301      	adds	r3, #1
 8007dde:	b29a      	uxth	r2, r3
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	8b1b      	ldrh	r3, [r3, #24]
 8007de8:	2b1c      	cmp	r3, #28
 8007dea:	d11f      	bne.n	8007e2c <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 8007dec:	f107 0214 	add.w	r2, r7, #20
 8007df0:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8007df4:	2328      	movs	r3, #40	@ 0x28
 8007df6:	200a      	movs	r0, #10
 8007df8:	f006 fb6c 	bl	800e4d4 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	881b      	ldrh	r3, [r3, #0]
 8007e02:	b29b      	uxth	r3, r3
 8007e04:	4618      	mov	r0, r3
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <parseDNSAnswer+0x27c>
 8007e14:	4b58      	ldr	r3, [pc, #352]	@ (8007f78 <parseDNSAnswer+0x3dc>)
 8007e16:	e000      	b.n	8007e1a <parseDNSAnswer+0x27e>
 8007e18:	4b58      	ldr	r3, [pc, #352]	@ (8007f7c <parseDNSAnswer+0x3e0>)
 8007e1a:	f107 0114 	add.w	r1, r7, #20
 8007e1e:	9300      	str	r3, [sp, #0]
 8007e20:	460b      	mov	r3, r1
 8007e22:	4601      	mov	r1, r0
 8007e24:	4856      	ldr	r0, [pc, #344]	@ (8007f80 <parseDNSAnswer+0x3e4>)
 8007e26:	f018 fbb1 	bl	802058c <lUDPLoggingPrintf>
 8007e2a:	e01f      	b.n	8007e6c <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 8007e32:	f107 0214 	add.w	r2, r7, #20
 8007e36:	2328      	movs	r3, #40	@ 0x28
 8007e38:	2002      	movs	r0, #2
 8007e3a:	f006 fb4b 	bl	800e4d4 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	881b      	ldrh	r3, [r3, #0]
 8007e44:	b29b      	uxth	r3, r3
 8007e46:	4618      	mov	r0, r3
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	d001      	beq.n	8007e5a <parseDNSAnswer+0x2be>
 8007e56:	4b48      	ldr	r3, [pc, #288]	@ (8007f78 <parseDNSAnswer+0x3dc>)
 8007e58:	e000      	b.n	8007e5c <parseDNSAnswer+0x2c0>
 8007e5a:	4b48      	ldr	r3, [pc, #288]	@ (8007f7c <parseDNSAnswer+0x3e0>)
 8007e5c:	f107 0114 	add.w	r1, r7, #20
 8007e60:	9300      	str	r3, [sp, #0]
 8007e62:	460b      	mov	r3, r1
 8007e64:	4601      	mov	r1, r0
 8007e66:	4846      	ldr	r0, [pc, #280]	@ (8007f80 <parseDNSAnswer+0x3e4>)
 8007e68:	f018 fb90 	bl	802058c <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 8007e6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d119      	bne.n	8007ea8 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007e7c:	e014      	b.n	8007ea8 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 8007e7e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e80:	891b      	ldrh	r3, [r3, #8]
 8007e82:	b29b      	uxth	r3, r3
 8007e84:	021b      	lsls	r3, r3, #8
 8007e86:	b21a      	sxth	r2, r3
 8007e88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007e8a:	891b      	ldrh	r3, [r3, #8]
 8007e8c:	b29b      	uxth	r3, r3
 8007e8e:	0a1b      	lsrs	r3, r3, #8
 8007e90:	b29b      	uxth	r3, r3
 8007e92:	b21b      	sxth	r3, r3
 8007e94:	4313      	orrs	r3, r2
 8007e96:	b21b      	sxth	r3, r3
 8007e98:	b29b      	uxth	r3, r3
 8007e9a:	4619      	mov	r1, r3
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6a1b      	ldr	r3, [r3, #32]
 8007ea0:	461a      	mov	r2, r3
 8007ea2:	4838      	ldr	r0, [pc, #224]	@ (8007f84 <parseDNSAnswer+0x3e8>)
 8007ea4:	f018 fb72 	bl	802058c <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	68da      	ldr	r2, [r3, #12]
 8007eac:	68fb      	ldr	r3, [r7, #12]
 8007eae:	6a1b      	ldr	r3, [r3, #32]
 8007eb0:	330a      	adds	r3, #10
 8007eb2:	441a      	add	r2, r3
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	695a      	ldr	r2, [r3, #20]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	6a1b      	ldr	r3, [r3, #32]
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	f1a3 020a 	sub.w	r2, r3, #10
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	615a      	str	r2, [r3, #20]
 8007eca:	e03a      	b.n	8007f42 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	2b09      	cmp	r3, #9
 8007ed2:	d936      	bls.n	8007f42 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	68db      	ldr	r3, [r3, #12]
 8007ede:	f103 020a 	add.w	r2, r3, #10
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	695b      	ldr	r3, [r3, #20]
 8007eea:	f1a3 020a 	sub.w	r2, r3, #10
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8007ef2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ef4:	891b      	ldrh	r3, [r3, #8]
 8007ef6:	b29b      	uxth	r3, r3
 8007ef8:	021b      	lsls	r3, r3, #8
 8007efa:	b21a      	sxth	r2, r3
 8007efc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007efe:	891b      	ldrh	r3, [r3, #8]
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	0a1b      	lsrs	r3, r3, #8
 8007f04:	b29b      	uxth	r3, r3
 8007f06:	b21b      	sxth	r3, r3
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	b21b      	sxth	r3, r3
 8007f0c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	695a      	ldr	r2, [r3, #20]
 8007f14:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d30e      	bcc.n	8007f3a <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	68da      	ldr	r2, [r3, #12]
 8007f20:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007f24:	441a      	add	r2, r3
 8007f26:	68fb      	ldr	r3, [r7, #12]
 8007f28:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	695a      	ldr	r2, [r3, #20]
 8007f2e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8007f32:	1ad2      	subs	r2, r2, r3
 8007f34:	68fb      	ldr	r3, [r7, #12]
 8007f36:	615a      	str	r2, [r3, #20]
 8007f38:	e003      	b.n	8007f42 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 8007f40:	e00d      	b.n	8007f5e <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 8007f42:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007f46:	3301      	adds	r3, #1
 8007f48:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007f4c:	68fb      	ldr	r3, [r7, #12]
 8007f4e:	88db      	ldrh	r3, [r3, #6]
 8007f50:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007f54:	429a      	cmp	r2, r3
 8007f56:	f4ff ae37 	bcc.w	8007bc8 <parseDNSAnswer+0x2c>
 8007f5a:	e000      	b.n	8007f5e <parseDNSAnswer+0x3c2>
                break;
 8007f5c:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 8007f5e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d002      	beq.n	8007f6c <parseDNSAnswer+0x3d0>
 8007f66:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007f6a:	e000      	b.n	8007f6e <parseDNSAnswer+0x3d2>
 8007f6c:	2300      	movs	r3, #0
    }
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3794      	adds	r7, #148	@ 0x94
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd90      	pop	{r4, r7, pc}
 8007f76:	bf00      	nop
 8007f78:	08022e8c 	.word	0x08022e8c
 8007f7c:	08022e90 	.word	0x08022e90
 8007f80:	08022e98 	.word	0x08022e98
 8007f84:	08022ed0 	.word	0x08022ed0

08007f88 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b08c      	sub	sp, #48	@ 0x30
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007f96:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8007f98:	6878      	ldr	r0, [r7, #4]
 8007f9a:	f000 fffd 	bl	8008f98 <uxIPHeaderSizePacket>
 8007f9e:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 8007fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d104      	bne.n	8007fb0 <prepareReplyDNSMessage+0x28>
 8007fa6:	f240 319f 	movw	r1, #927	@ 0x39f
 8007faa:	4865      	ldr	r0, [pc, #404]	@ (8008140 <prepareReplyDNSMessage+0x1b8>)
 8007fac:	f7f9 f8c0 	bl	8001130 <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fb4:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 8007fb6:	6a3b      	ldr	r3, [r7, #32]
 8007fb8:	330e      	adds	r3, #14
 8007fba:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 8007fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007fbe:	2b28      	cmp	r3, #40	@ 0x28
 8007fc0:	d150      	bne.n	8008064 <prepareReplyDNSMessage+0xdc>
 8007fc2:	69fb      	ldr	r3, [r7, #28]
 8007fc4:	781b      	ldrb	r3, [r3, #0]
 8007fc6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8007fca:	2b60      	cmp	r3, #96	@ 0x60
 8007fcc:	d14a      	bne.n	8008064 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007fd2:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 8007fd4:	69bb      	ldr	r3, [r7, #24]
 8007fd6:	330e      	adds	r3, #14
 8007fd8:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 8007fda:	69bb      	ldr	r3, [r7, #24]
 8007fdc:	3336      	adds	r3, #54	@ 0x36
 8007fde:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8007fe0:	683b      	ldr	r3, [r7, #0]
 8007fe2:	b29b      	uxth	r3, r3
 8007fe4:	3308      	adds	r3, #8
 8007fe6:	b29b      	uxth	r3, r3
 8007fe8:	021b      	lsls	r3, r3, #8
 8007fea:	b29a      	uxth	r2, r3
 8007fec:	683b      	ldr	r3, [r7, #0]
 8007fee:	b29b      	uxth	r3, r3
 8007ff0:	3308      	adds	r3, #8
 8007ff2:	0a1b      	lsrs	r3, r3, #8
 8007ff4:	b29b      	uxth	r3, r3
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	b29a      	uxth	r2, r3
 8007ffa:	697b      	ldr	r3, [r7, #20]
 8007ffc:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	f103 0018 	add.w	r0, r3, #24
 8008004:	697b      	ldr	r3, [r7, #20]
 8008006:	3308      	adds	r3, #8
 8008008:	2210      	movs	r2, #16
 800800a:	4619      	mov	r1, r3
 800800c:	f018 fcda 	bl	80209c4 <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008010:	697b      	ldr	r3, [r7, #20]
 8008012:	f103 0008 	add.w	r0, r3, #8
 8008016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008018:	3338      	adds	r3, #56	@ 0x38
 800801a:	2210      	movs	r2, #16
 800801c:	4619      	mov	r1, r3
 800801e:	f018 fcd1 	bl	80209c4 <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8008022:	683b      	ldr	r3, [r7, #0]
 8008024:	b29b      	uxth	r3, r3
 8008026:	3308      	adds	r3, #8
 8008028:	b29b      	uxth	r3, r3
 800802a:	021b      	lsls	r3, r3, #8
 800802c:	b29a      	uxth	r2, r3
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	b29b      	uxth	r3, r3
 8008032:	3308      	adds	r3, #8
 8008034:	0a1b      	lsrs	r3, r3, #8
 8008036:	b29b      	uxth	r3, r3
 8008038:	4313      	orrs	r3, r2
 800803a:	b29a      	uxth	r2, r3
 800803c:	69bb      	ldr	r3, [r7, #24]
 800803e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8008040:	693b      	ldr	r3, [r7, #16]
 8008042:	781a      	ldrb	r2, [r3, #0]
 8008044:	785b      	ldrb	r3, [r3, #1]
 8008046:	021b      	lsls	r3, r3, #8
 8008048:	4313      	orrs	r3, r2
 800804a:	81fb      	strh	r3, [r7, #14]
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	885b      	ldrh	r3, [r3, #2]
 8008050:	b29a      	uxth	r2, r3
 8008052:	693b      	ldr	r3, [r7, #16]
 8008054:	801a      	strh	r2, [r3, #0]
 8008056:	693b      	ldr	r3, [r7, #16]
 8008058:	89fa      	ldrh	r2, [r7, #14]
 800805a:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 800805c:	683b      	ldr	r3, [r7, #0]
 800805e:	333e      	adds	r3, #62	@ 0x3e
 8008060:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 8008062:	e066      	b.n	8008132 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8008064:	6a3b      	ldr	r3, [r7, #32]
 8008066:	3322      	adds	r3, #34	@ 0x22
 8008068:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 800806a:	683b      	ldr	r3, [r7, #0]
 800806c:	b29a      	uxth	r2, r3
 800806e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008070:	b29b      	uxth	r3, r3
 8008072:	4413      	add	r3, r2
 8008074:	b29b      	uxth	r3, r3
 8008076:	3308      	adds	r3, #8
 8008078:	b29b      	uxth	r3, r3
 800807a:	021b      	lsls	r3, r3, #8
 800807c:	b29a      	uxth	r2, r3
 800807e:	683b      	ldr	r3, [r7, #0]
 8008080:	b29b      	uxth	r3, r3
 8008082:	4619      	mov	r1, r3
 8008084:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008086:	440b      	add	r3, r1
 8008088:	3308      	adds	r3, #8
 800808a:	0a1b      	lsrs	r3, r3, #8
 800808c:	b29b      	uxth	r3, r3
 800808e:	4313      	orrs	r3, r2
 8008090:	b29a      	uxth	r2, r3
 8008092:	69fb      	ldr	r3, [r7, #28]
 8008094:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 8008096:	69fb      	ldr	r3, [r7, #28]
 8008098:	691b      	ldr	r3, [r3, #16]
 800809a:	4a2a      	ldr	r2, [pc, #168]	@ (8008144 <prepareReplyDNSMessage+0x1bc>)
 800809c:	4293      	cmp	r3, r2
 800809e:	d103      	bne.n	80080a8 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 80080a0:	69fb      	ldr	r3, [r7, #28]
 80080a2:	22ff      	movs	r2, #255	@ 0xff
 80080a4:	721a      	strb	r2, [r3, #8]
 80080a6:	e006      	b.n	80080b6 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80080a8:	69fb      	ldr	r3, [r7, #28]
 80080aa:	68da      	ldr	r2, [r3, #12]
 80080ac:	69fb      	ldr	r3, [r7, #28]
 80080ae:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 80080b0:	69fb      	ldr	r3, [r7, #28]
 80080b2:	2280      	movs	r2, #128	@ 0x80
 80080b4:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 80080b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080b8:	681a      	ldr	r2, [r3, #0]
 80080ba:	69fb      	ldr	r3, [r7, #28]
 80080bc:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 80080be:	4b22      	ldr	r3, [pc, #136]	@ (8008148 <prepareReplyDNSMessage+0x1c0>)
 80080c0:	881b      	ldrh	r3, [r3, #0]
 80080c2:	021b      	lsls	r3, r3, #8
 80080c4:	b21a      	sxth	r2, r3
 80080c6:	4b20      	ldr	r3, [pc, #128]	@ (8008148 <prepareReplyDNSMessage+0x1c0>)
 80080c8:	881b      	ldrh	r3, [r3, #0]
 80080ca:	0a1b      	lsrs	r3, r3, #8
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	b21b      	sxth	r3, r3
 80080d0:	4313      	orrs	r3, r2
 80080d2:	b21b      	sxth	r3, r3
 80080d4:	b29a      	uxth	r2, r3
 80080d6:	69fb      	ldr	r3, [r7, #28]
 80080d8:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 80080da:	69fb      	ldr	r3, [r7, #28]
 80080dc:	2200      	movs	r2, #0
 80080de:	719a      	strb	r2, [r3, #6]
 80080e0:	2200      	movs	r2, #0
 80080e2:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 80080e4:	4b18      	ldr	r3, [pc, #96]	@ (8008148 <prepareReplyDNSMessage+0x1c0>)
 80080e6:	881b      	ldrh	r3, [r3, #0]
 80080e8:	3301      	adds	r3, #1
 80080ea:	b29a      	uxth	r2, r3
 80080ec:	4b16      	ldr	r3, [pc, #88]	@ (8008148 <prepareReplyDNSMessage+0x1c0>)
 80080ee:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	b29b      	uxth	r3, r3
 80080f4:	3308      	adds	r3, #8
 80080f6:	b29b      	uxth	r3, r3
 80080f8:	021b      	lsls	r3, r3, #8
 80080fa:	b29a      	uxth	r2, r3
 80080fc:	683b      	ldr	r3, [r7, #0]
 80080fe:	3308      	adds	r3, #8
 8008100:	0a1b      	lsrs	r3, r3, #8
 8008102:	b29b      	uxth	r3, r3
 8008104:	4313      	orrs	r3, r2
 8008106:	b29a      	uxth	r2, r3
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 800810c:	693b      	ldr	r3, [r7, #16]
 800810e:	781a      	ldrb	r2, [r3, #0]
 8008110:	785b      	ldrb	r3, [r3, #1]
 8008112:	021b      	lsls	r3, r3, #8
 8008114:	4313      	orrs	r3, r2
 8008116:	81bb      	strh	r3, [r7, #12]
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	885b      	ldrh	r3, [r3, #2]
 800811c:	b29a      	uxth	r2, r3
 800811e:	693b      	ldr	r3, [r7, #16]
 8008120:	801a      	strh	r2, [r3, #0]
 8008122:	693b      	ldr	r3, [r7, #16]
 8008124:	89ba      	ldrh	r2, [r7, #12]
 8008126:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8008128:	683a      	ldr	r2, [r7, #0]
 800812a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800812c:	4413      	add	r3, r2
 800812e:	3316      	adds	r3, #22
 8008130:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008136:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 8008138:	bf00      	nop
 800813a:	3730      	adds	r7, #48	@ 0x30
 800813c:	46bd      	mov	sp, r7
 800813e:	bd80      	pop	{r7, pc}
 8008140:	08022e28 	.word	0x08022e28
 8008144:	fb0000e0 	.word	0xfb0000e0
 8008148:	20000e4c 	.word	0x20000e4c

0800814c <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800814c:	b580      	push	{r7, lr}
 800814e:	b084      	sub	sp, #16
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8008154:	2300      	movs	r3, #0
 8008156:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800815c:	2b29      	cmp	r3, #41	@ 0x29
 800815e:	d803      	bhi.n	8008168 <ProcessICMPPacket+0x1c>
 8008160:	2159      	movs	r1, #89	@ 0x59
 8008162:	4811      	ldr	r0, [pc, #68]	@ (80081a8 <ProcessICMPPacket+0x5c>)
 8008164:	f7f8 ffe4 	bl	8001130 <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800816c:	2b29      	cmp	r3, #41	@ 0x29
 800816e:	d915      	bls.n	800819c <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008174:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8008176:	68bb      	ldr	r3, [r7, #8]
 8008178:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800817c:	2b00      	cmp	r3, #0
 800817e:	d008      	beq.n	8008192 <ProcessICMPPacket+0x46>
 8008180:	2b08      	cmp	r3, #8
 8008182:	d10a      	bne.n	800819a <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8008184:	6879      	ldr	r1, [r7, #4]
 8008186:	68b8      	ldr	r0, [r7, #8]
 8008188:	f000 f810 	bl	80081ac <prvProcessICMPEchoRequest>
 800818c:	4603      	mov	r3, r0
 800818e:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 8008190:	e004      	b.n	800819c <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 8008192:	68b8      	ldr	r0, [r7, #8]
 8008194:	f000 f836 	bl	8008204 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 8008198:	e000      	b.n	800819c <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 800819a:	bf00      	nop
            }
        }

        return eReturn;
 800819c:	7bfb      	ldrb	r3, [r7, #15]
    }
 800819e:	4618      	mov	r0, r3
 80081a0:	3710      	adds	r7, #16
 80081a2:	46bd      	mov	sp, r7
 80081a4:	bd80      	pop	{r7, pc}
 80081a6:	bf00      	nop
 80081a8:	08022ef4 	.word	0x08022ef4

080081ac <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80081ac:	b480      	push	{r7}
 80081ae:	b087      	sub	sp, #28
 80081b0:	af00      	add	r7, sp, #0
 80081b2:	6078      	str	r0, [r7, #4]
 80081b4:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	3322      	adds	r3, #34	@ 0x22
 80081ba:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	330e      	adds	r3, #14
 80081c0:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	2200      	movs	r2, #0
 80081c6:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 80081c8:	693b      	ldr	r3, [r7, #16]
 80081ca:	691b      	ldr	r3, [r3, #16]
 80081cc:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	68da      	ldr	r2, [r3, #12]
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 80081d6:	693b      	ldr	r3, [r7, #16]
 80081d8:	68fa      	ldr	r2, [r7, #12]
 80081da:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	2240      	movs	r2, #64	@ 0x40
 80081e0:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	2200      	movs	r2, #0
 80081e6:	719a      	strb	r2, [r3, #6]
 80081e8:	2200      	movs	r2, #0
 80081ea:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 80081ec:	697b      	ldr	r3, [r7, #20]
 80081ee:	2200      	movs	r2, #0
 80081f0:	709a      	strb	r2, [r3, #2]
 80081f2:	2200      	movs	r2, #0
 80081f4:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 80081f6:	2302      	movs	r3, #2
    }
 80081f8:	4618      	mov	r0, r3
 80081fa:	371c      	adds	r7, #28
 80081fc:	46bd      	mov	sp, r7
 80081fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008202:	4770      	bx	lr

08008204 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 8008204:	b580      	push	{r7, lr}
 8008206:	b086      	sub	sp, #24
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 800820c:	2300      	movs	r3, #0
 800820e:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	7c1a      	ldrb	r2, [r3, #16]
 8008214:	7c5b      	ldrb	r3, [r3, #17]
 8008216:	021b      	lsls	r3, r3, #8
 8008218:	4313      	orrs	r3, r2
 800821a:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 800821c:	89fb      	ldrh	r3, [r7, #14]
 800821e:	021b      	lsls	r3, r3, #8
 8008220:	b21a      	sxth	r2, r3
 8008222:	89fb      	ldrh	r3, [r7, #14]
 8008224:	0a1b      	lsrs	r3, r3, #8
 8008226:	b29b      	uxth	r3, r3
 8008228:	b21b      	sxth	r3, r3
 800822a:	4313      	orrs	r3, r2
 800822c:	b21b      	sxth	r3, r3
 800822e:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 8008230:	89fb      	ldrh	r3, [r7, #14]
 8008232:	3b14      	subs	r3, #20
 8008234:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 8008236:	89fb      	ldrh	r3, [r7, #14]
 8008238:	3b08      	subs	r3, #8
 800823a:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 8008240:	693b      	ldr	r3, [r7, #16]
 8008242:	332a      	adds	r3, #42	@ 0x2a
 8008244:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8008246:	2300      	movs	r3, #0
 8008248:	82bb      	strh	r3, [r7, #20]
 800824a:	e00c      	b.n	8008266 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	781b      	ldrb	r3, [r3, #0]
 8008250:	2b78      	cmp	r3, #120	@ 0x78
 8008252:	d002      	beq.n	800825a <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 8008254:	2302      	movs	r3, #2
 8008256:	75fb      	strb	r3, [r7, #23]
                break;
 8008258:	e009      	b.n	800826e <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 800825a:	693b      	ldr	r3, [r7, #16]
 800825c:	3301      	adds	r3, #1
 800825e:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8008260:	8abb      	ldrh	r3, [r7, #20]
 8008262:	3301      	adds	r3, #1
 8008264:	82bb      	strh	r3, [r7, #20]
 8008266:	8aba      	ldrh	r2, [r7, #20]
 8008268:	89fb      	ldrh	r3, [r7, #14]
 800826a:	429a      	cmp	r2, r3
 800826c:	d3ee      	bcc.n	800824c <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 800826e:	687b      	ldr	r3, [r7, #4]
 8008270:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008272:	b29a      	uxth	r2, r3
 8008274:	7dfb      	ldrb	r3, [r7, #23]
 8008276:	4611      	mov	r1, r2
 8008278:	4618      	mov	r0, r3
 800827a:	f7f9 f80f 	bl	800129c <vApplicationPingReplyHook>
    }
 800827e:	bf00      	nop
 8008280:	3718      	adds	r7, #24
 8008282:	46bd      	mov	sp, r7
 8008284:	bd80      	pop	{r7, pc}
	...

08008288 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 8008290:	f000 f90e 	bl	80084b0 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 8008294:	4802      	ldr	r0, [pc, #8]	@ (80082a0 <prvIPTask+0x18>)
 8008296:	f018 f979 	bl	802058c <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 800829a:	f000 f803 	bl	80082a4 <prvProcessIPEventsAndTimers>
 800829e:	e7fc      	b.n	800829a <prvIPTask+0x12>
 80082a0:	08022f24 	.word	0x08022f24

080082a4 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 80082a4:	b590      	push	{r4, r7, lr}
 80082a6:	b08d      	sub	sp, #52	@ 0x34
 80082a8:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 80082aa:	f000 ff09 	bl	80090c0 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 80082ae:	f000 fea7 	bl	8009000 <xCalculateSleepTime>
 80082b2:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 80082b4:	4b7c      	ldr	r3, [pc, #496]	@ (80084a8 <prvProcessIPEventsAndTimers+0x204>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	f107 0118 	add.w	r1, r7, #24
 80082bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082be:	4618      	mov	r0, r3
 80082c0:	f7fa fbd6 	bl	8002a70 <xQueueReceive>
 80082c4:	4603      	mov	r3, r0
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d101      	bne.n	80082ce <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 80082ca:	23ff      	movs	r3, #255	@ 0xff
 80082cc:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 80082ce:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80082d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d6:	d00d      	beq.n	80082f4 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 80082d8:	4b73      	ldr	r3, [pc, #460]	@ (80084a8 <prvProcessIPEventsAndTimers+0x204>)
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4618      	mov	r0, r3
 80082de:	f7fa fd9f 	bl	8002e20 <uxQueueSpacesAvailable>
 80082e2:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 80082e4:	4b71      	ldr	r3, [pc, #452]	@ (80084ac <prvProcessIPEventsAndTimers+0x208>)
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80082ea:	429a      	cmp	r2, r3
 80082ec:	d202      	bcs.n	80082f4 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 80082ee:	4a6f      	ldr	r2, [pc, #444]	@ (80084ac <prvProcessIPEventsAndTimers+0x208>)
 80082f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80082f2:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 80082f4:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80082f8:	3301      	adds	r3, #1
 80082fa:	2b0e      	cmp	r3, #14
 80082fc:	f200 80ca 	bhi.w	8008494 <prvProcessIPEventsAndTimers+0x1f0>
 8008300:	a201      	add	r2, pc, #4	@ (adr r2, 8008308 <prvProcessIPEventsAndTimers+0x64>)
 8008302:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008306:	bf00      	nop
 8008308:	08008495 	.word	0x08008495
 800830c:	08008345 	.word	0x08008345
 8008310:	0800834f 	.word	0x0800834f
 8008314:	08008359 	.word	0x08008359
 8008318:	08008365 	.word	0x08008365
 800831c:	0800842f 	.word	0x0800842f
 8008320:	08008439 	.word	0x08008439
 8008324:	0800844d 	.word	0x0800844d
 8008328:	08008455 	.word	0x08008455
 800832c:	08008479 	.word	0x08008479
 8008330:	0800836f 	.word	0x0800836f
 8008334:	08008425 	.word	0x08008425
 8008338:	08008443 	.word	0x08008443
 800833c:	08008495 	.word	0x08008495
 8008340:	0800847f 	.word	0x0800847f
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 8008344:	69fb      	ldr	r3, [r7, #28]
 8008346:	4618      	mov	r0, r3
 8008348:	f001 f9cc 	bl	80096e4 <prvProcessNetworkDownEvent>
            break;
 800834c:	e0a5      	b.n	800849a <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800834e:	69fb      	ldr	r3, [r7, #28]
 8008350:	4618      	mov	r0, r3
 8008352:	f000 f955 	bl	8008600 <prvHandleEthernetPacket>
            break;
 8008356:	e0a0      	b.n	800849a <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 8008358:	69fb      	ldr	r3, [r7, #28]
 800835a:	2101      	movs	r1, #1
 800835c:	4618      	mov	r0, r3
 800835e:	f000 f95d 	bl	800861c <prvForwardTxPacket>
            break;
 8008362:	e09a      	b.n	800849a <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 8008364:	f7fe f94e 	bl	8006604 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 8008368:	f002 fdb6 	bl	800aed8 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 800836c:	e095      	b.n	800849a <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 800836e:	69fb      	ldr	r3, [r7, #28]
 8008370:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 8008372:	2318      	movs	r3, #24
 8008374:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8008376:	6a3b      	ldr	r3, [r7, #32]
 8008378:	7a1b      	ldrb	r3, [r3, #8]
 800837a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800837e:	b2db      	uxtb	r3, r3
 8008380:	2b00      	cmp	r3, #0
 8008382:	d002      	beq.n	800838a <prvProcessIPEventsAndTimers+0xe6>
 8008384:	2b01      	cmp	r3, #1
 8008386:	d01a      	beq.n	80083be <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8008388:	e02c      	b.n	80083e4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 800838a:	2302      	movs	r3, #2
 800838c:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800838e:	6a3b      	ldr	r3, [r7, #32]
 8008390:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008392:	061a      	lsls	r2, r3, #24
 8008394:	6a3b      	ldr	r3, [r7, #32]
 8008396:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008398:	021b      	lsls	r3, r3, #8
 800839a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800839e:	431a      	orrs	r2, r3
 80083a0:	6a3b      	ldr	r3, [r7, #32]
 80083a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083a4:	0a1b      	lsrs	r3, r3, #8
 80083a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80083aa:	431a      	orrs	r2, r3
 80083ac:	6a3b      	ldr	r3, [r7, #32]
 80083ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80083b0:	0e1b      	lsrs	r3, r3, #24
 80083b2:	4313      	orrs	r3, r2
 80083b4:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 80083b6:	6a3b      	ldr	r3, [r7, #32]
 80083b8:	2200      	movs	r2, #0
 80083ba:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 80083bc:	e012      	b.n	80083e4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 80083be:	230a      	movs	r3, #10
 80083c0:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 80083c2:	6a3b      	ldr	r3, [r7, #32]
 80083c4:	3328      	adds	r3, #40	@ 0x28
 80083c6:	f107 0408 	add.w	r4, r7, #8
 80083ca:	6818      	ldr	r0, [r3, #0]
 80083cc:	6859      	ldr	r1, [r3, #4]
 80083ce:	689a      	ldr	r2, [r3, #8]
 80083d0:	68db      	ldr	r3, [r3, #12]
 80083d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 80083d4:	6a3b      	ldr	r3, [r7, #32]
 80083d6:	3328      	adds	r3, #40	@ 0x28
 80083d8:	2210      	movs	r2, #16
 80083da:	2100      	movs	r1, #0
 80083dc:	4618      	mov	r0, r3
 80083de:	f018 fbfe 	bl	8020bde <memset>
                        break;
 80083e2:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 80083e4:	6a3b      	ldr	r3, [r7, #32]
 80083e6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80083e8:	021b      	lsls	r3, r3, #8
 80083ea:	b21a      	sxth	r2, r3
 80083ec:	6a3b      	ldr	r3, [r7, #32]
 80083ee:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80083f0:	0a1b      	lsrs	r3, r3, #8
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	b21b      	sxth	r3, r3
 80083f6:	4313      	orrs	r3, r2
 80083f8:	b21b      	sxth	r3, r3
 80083fa:	b29b      	uxth	r3, r3
 80083fc:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 80083fe:	6a3b      	ldr	r3, [r7, #32]
 8008400:	2200      	movs	r2, #0
 8008402:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8008404:	4639      	mov	r1, r7
 8008406:	2300      	movs	r3, #0
 8008408:	2218      	movs	r2, #24
 800840a:	6a38      	ldr	r0, [r7, #32]
 800840c:	f005 fa32 	bl	800d874 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8008410:	6a3b      	ldr	r3, [r7, #32]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	f043 0210 	orr.w	r2, r3, #16
 8008418:	6a3b      	ldr	r3, [r7, #32]
 800841a:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 800841c:	6a38      	ldr	r0, [r7, #32]
 800841e:	f006 f8d8 	bl	800e5d2 <vSocketWakeUpUser>
            break;
 8008422:	e03a      	b.n	800849a <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 8008424:	69fb      	ldr	r3, [r7, #28]
 8008426:	4618      	mov	r0, r3
 8008428:	f005 fad8 	bl	800d9dc <vSocketClose>
            break;
 800842c:	e035      	b.n	800849a <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800842e:	69fb      	ldr	r3, [r7, #28]
 8008430:	4618      	mov	r0, r3
 8008432:	f00d f9b1 	bl	8015798 <vProcessGeneratedUDPPacket>
            break;
 8008436:	e030      	b.n	800849a <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 8008438:	69fb      	ldr	r3, [r7, #28]
 800843a:	4618      	mov	r0, r3
 800843c:	f000 f88c 	bl	8008558 <prvCallDHCP_RA_Handler>
            break;
 8008440:	e02b      	b.n	800849a <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 8008442:	69fb      	ldr	r3, [r7, #28]
 8008444:	4618      	mov	r0, r3
 8008446:	f007 fab3 	bl	800f9b0 <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 800844a:	e026      	b.n	800849a <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 800844c:	2001      	movs	r0, #1
 800844e:	f000 ffab 	bl	80093a8 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 8008452:	e022      	b.n	800849a <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8008454:	69fb      	ldr	r3, [r7, #28]
 8008456:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8008458:	6a38      	ldr	r0, [r7, #32]
 800845a:	f008 fbed 	bl	8010c38 <xTCPCheckNewClient>
 800845e:	4603      	mov	r3, r0
 8008460:	2b00      	cmp	r3, #0
 8008462:	d019      	beq.n	8008498 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8008464:	6a3b      	ldr	r3, [r7, #32]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	f043 0204 	orr.w	r2, r3, #4
 800846c:	6a3b      	ldr	r3, [r7, #32]
 800846e:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 8008470:	6a38      	ldr	r0, [r7, #32]
 8008472:	f006 f8ae 	bl	800e5d2 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 8008476:	e00f      	b.n	8008498 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 8008478:	f007 f984 	bl	800f784 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 800847c:	e00d      	b.n	800849a <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 800847e:	69fb      	ldr	r3, [r7, #28]
 8008480:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 8008482:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	4618      	mov	r0, r3
 8008488:	f7f9 ffae 	bl	80023e8 <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 800848c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800848e:	f7fd f92d 	bl	80056ec <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 8008492:	e002      	b.n	800849a <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 8008494:	bf00      	nop
 8008496:	e000      	b.n	800849a <prvProcessIPEventsAndTimers+0x1f6>
            break;
 8008498:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 800849a:	f000 f833 	bl	8008504 <prvIPTask_CheckPendingEvents>
}
 800849e:	bf00      	nop
 80084a0:	3734      	adds	r7, #52	@ 0x34
 80084a2:	46bd      	mov	sp, r7
 80084a4:	bd90      	pop	{r4, r7, pc}
 80084a6:	bf00      	nop
 80084a8:	20000e48 	.word	0x20000e48
 80084ac:	20000014 	.word	0x20000014

080084b0 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 80084b0:	b580      	push	{r7, lr}
 80084b2:	b082      	sub	sp, #8
 80084b4:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 80084b6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80084ba:	f000 ff2b 	bl	8009314 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80084be:	4b0f      	ldr	r3, [pc, #60]	@ (80084fc <prvIPTask_Initialise+0x4c>)
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	607b      	str	r3, [r7, #4]
 80084c4:	e005      	b.n	80084d2 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 80084c6:	6878      	ldr	r0, [r7, #4]
 80084c8:	f000 f8be 	bl	8008648 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80084d0:	607b      	str	r3, [r7, #4]
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d1f6      	bne.n	80084c6 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 80084d8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80084dc:	f000 fee8 	bl	80092b0 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 80084e0:	2000      	movs	r0, #0
 80084e2:	f000 ff9b 	bl	800941c <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 80084e6:	f7fe fa31 	bl	800694c <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 80084ea:	f7fe fb0f 	bl	8006b0c <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 80084ee:	4b04      	ldr	r3, [pc, #16]	@ (8008500 <prvIPTask_Initialise+0x50>)
 80084f0:	2201      	movs	r2, #1
 80084f2:	601a      	str	r2, [r3, #0]
}
 80084f4:	bf00      	nop
 80084f6:	3708      	adds	r7, #8
 80084f8:	46bd      	mov	sp, r7
 80084fa:	bd80      	pop	{r7, pc}
 80084fc:	200011d4 	.word	0x200011d4
 8008500:	20000e58 	.word	0x20000e58

08008504 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 8008504:	b580      	push	{r7, lr}
 8008506:	b082      	sub	sp, #8
 8008508:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 800850a:	4b12      	ldr	r3, [pc, #72]	@ (8008554 <prvIPTask_CheckPendingEvents+0x50>)
 800850c:	681b      	ldr	r3, [r3, #0]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d01c      	beq.n	800854c <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8008512:	4b10      	ldr	r3, [pc, #64]	@ (8008554 <prvIPTask_CheckPendingEvents+0x50>)
 8008514:	2200      	movs	r2, #0
 8008516:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8008518:	f004 f836 	bl	800c588 <FreeRTOS_FirstNetworkInterface>
 800851c:	6078      	str	r0, [r7, #4]
 800851e:	e012      	b.n	8008546 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	7f1b      	ldrb	r3, [r3, #28]
 8008524:	f003 0302 	and.w	r3, r3, #2
 8008528:	b2db      	uxtb	r3, r3
 800852a:	2b00      	cmp	r3, #0
 800852c:	d007      	beq.n	800853e <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 800852e:	6878      	ldr	r0, [r7, #4]
 8008530:	f001 f8d8 	bl	80096e4 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	7f13      	ldrb	r3, [r2, #28]
 8008538:	f36f 0341 	bfc	r3, #1, #1
 800853c:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f004 f82e 	bl	800c5a0 <FreeRTOS_NextNetworkInterface>
 8008544:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d1e9      	bne.n	8008520 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 800854c:	bf00      	nop
 800854e:	3708      	adds	r7, #8
 8008550:	46bd      	mov	sp, r7
 8008552:	bd80      	pop	{r7, pc}
 8008554:	20000e50 	.word	0x20000e50

08008558 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 8008560:	2300      	movs	r3, #0
 8008562:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800856a:	f003 0304 	and.w	r3, r3, #4
 800856e:	b2db      	uxtb	r3, r3
 8008570:	2b00      	cmp	r3, #0
 8008572:	d001      	beq.n	8008578 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 8008574:	2301      	movs	r3, #1
 8008576:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2b01      	cmp	r3, #1
 800857c:	d10b      	bne.n	8008596 <prvCallDHCP_RA_Handler+0x3e>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008584:	f003 0302 	and.w	r3, r3, #2
 8008588:	b2db      	uxtb	r3, r3
 800858a:	2b00      	cmp	r3, #0
 800858c:	d003      	beq.n	8008596 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 800858e:	6879      	ldr	r1, [r7, #4]
 8008590:	2000      	movs	r0, #0
 8008592:	f003 fecd 	bl	800c330 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 8008596:	bf00      	nop
 8008598:	3710      	adds	r7, #16
 800859a:	46bd      	mov	sp, r7
 800859c:	bd80      	pop	{r7, pc}
	...

080085a0 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 80085a0:	b480      	push	{r7}
 80085a2:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 80085a4:	4b03      	ldr	r3, [pc, #12]	@ (80085b4 <FreeRTOS_GetIPTaskHandle+0x14>)
 80085a6:	681b      	ldr	r3, [r3, #0]
}
 80085a8:	4618      	mov	r0, r3
 80085aa:	46bd      	mov	sp, r7
 80085ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b0:	4770      	bx	lr
 80085b2:	bf00      	nop
 80085b4:	20000e54 	.word	0x20000e54

080085b8 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 80085b8:	b580      	push	{r7, lr}
 80085ba:	b082      	sub	sp, #8
 80085bc:	af00      	add	r7, sp, #0
 80085be:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80085c6:	f003 0304 	and.w	r3, r3, #4
 80085ca:	b2db      	uxtb	r3, r3
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d003      	beq.n	80085d8 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 80085d0:	2101      	movs	r1, #1
 80085d2:	6878      	ldr	r0, [r7, #4]
 80085d4:	f002 fa7e 	bl	800aad4 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 80085d8:	687a      	ldr	r2, [r7, #4]
 80085da:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 80085de:	f043 0310 	orr.w	r3, r3, #16
 80085e2:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 80085e6:	2000      	movs	r0, #0
 80085e8:	f7f8 fdd6 	bl	8001198 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 80085ec:	f7fe f9ae 	bl	800694c <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 80085f0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80085f4:	f000 fe6a 	bl	80092cc <vARPTimerReload>
}
 80085f8:	bf00      	nop
 80085fa:	3708      	adds	r7, #8
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8008600:	b580      	push	{r7, lr}
 8008602:	b082      	sub	sp, #8
 8008604:	af00      	add	r7, sp, #0
 8008606:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2b00      	cmp	r3, #0
 800860c:	d002      	beq.n	8008614 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f9c8 	bl	80089a4 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8008614:	bf00      	nop
 8008616:	3708      	adds	r7, #8
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}

0800861c <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b082      	sub	sp, #8
 8008620:	af00      	add	r7, sp, #0
 8008622:	6078      	str	r0, [r7, #4]
 8008624:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800862a:	2b00      	cmp	r3, #0
 800862c:	d007      	beq.n	800863e <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008632:	68db      	ldr	r3, [r3, #12]
 8008634:	687a      	ldr	r2, [r7, #4]
 8008636:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008638:	683a      	ldr	r2, [r7, #0]
 800863a:	6879      	ldr	r1, [r7, #4]
 800863c:	4798      	blx	r3
    }
}
 800863e:	bf00      	nop
 8008640:	3708      	adds	r7, #8
 8008642:	46bd      	mov	sp, r7
 8008644:	bd80      	pop	{r7, pc}
	...

08008648 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8008648:	b580      	push	{r7, lr}
 800864a:	b086      	sub	sp, #24
 800864c:	af00      	add	r7, sp, #0
 800864e:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8008650:	2300      	movs	r3, #0
 8008652:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 8008654:	687a      	ldr	r2, [r7, #4]
 8008656:	7f13      	ldrb	r3, [r2, #28]
 8008658:	f36f 0300 	bfc	r3, #0, #1
 800865c:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 800865e:	2300      	movs	r3, #0
 8008660:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8008666:	f107 030c 	add.w	r3, r7, #12
 800866a:	6979      	ldr	r1, [r7, #20]
 800866c:	4618      	mov	r0, r3
 800866e:	f000 f8df 	bl	8008830 <xSendEventStructToIPTask>
 8008672:	4603      	mov	r3, r0
 8008674:	2b01      	cmp	r3, #1
 8008676:	d008      	beq.n	800868a <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8008678:	687a      	ldr	r2, [r7, #4]
 800867a:	7f13      	ldrb	r3, [r2, #28]
 800867c:	f043 0302 	orr.w	r3, r3, #2
 8008680:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 8008682:	4b06      	ldr	r3, [pc, #24]	@ (800869c <FreeRTOS_NetworkDown+0x54>)
 8008684:	2201      	movs	r2, #1
 8008686:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8008688:	e004      	b.n	8008694 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 800868a:	687a      	ldr	r2, [r7, #4]
 800868c:	7f13      	ldrb	r3, [r2, #28]
 800868e:	f36f 0341 	bfc	r3, #1, #1
 8008692:	7713      	strb	r3, [r2, #28]
}
 8008694:	bf00      	nop
 8008696:	3718      	adds	r7, #24
 8008698:	46bd      	mov	sp, r7
 800869a:	bd80      	pop	{r7, pc}
 800869c:	20000e50 	.word	0x20000e50

080086a0 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b084      	sub	sp, #16
 80086a4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 80086a6:	2300      	movs	r3, #0
 80086a8:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 80086aa:	f003 ff6d 	bl	800c588 <FreeRTOS_FirstNetworkInterface>
 80086ae:	4603      	mov	r3, r0
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d104      	bne.n	80086be <FreeRTOS_IPInit_Multi+0x1e>
 80086b4:	f240 31b5 	movw	r1, #949	@ 0x3b5
 80086b8:	4823      	ldr	r0, [pc, #140]	@ (8008748 <FreeRTOS_IPInit_Multi+0xa8>)
 80086ba:	f7f8 fd39 	bl	8001130 <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 80086be:	f001 f8cb 	bl	8009858 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 80086c2:	2200      	movs	r2, #0
 80086c4:	2108      	movs	r1, #8
 80086c6:	2045      	movs	r0, #69	@ 0x45
 80086c8:	f7fa f820 	bl	800270c <xQueueGenericCreate>
 80086cc:	4603      	mov	r3, r0
 80086ce:	4a1f      	ldr	r2, [pc, #124]	@ (800874c <FreeRTOS_IPInit_Multi+0xac>)
 80086d0:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 80086d2:	4b1e      	ldr	r3, [pc, #120]	@ (800874c <FreeRTOS_IPInit_Multi+0xac>)
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d104      	bne.n	80086e4 <FreeRTOS_IPInit_Multi+0x44>
 80086da:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 80086de:	481a      	ldr	r0, [pc, #104]	@ (8008748 <FreeRTOS_IPInit_Multi+0xa8>)
 80086e0:	f7f8 fd26 	bl	8001130 <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 80086e4:	4b19      	ldr	r3, [pc, #100]	@ (800874c <FreeRTOS_IPInit_Multi+0xac>)
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	2b00      	cmp	r3, #0
 80086ea:	d025      	beq.n	8008738 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 80086ec:	4b17      	ldr	r3, [pc, #92]	@ (800874c <FreeRTOS_IPInit_Multi+0xac>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4917      	ldr	r1, [pc, #92]	@ (8008750 <FreeRTOS_IPInit_Multi+0xb0>)
 80086f2:	4618      	mov	r0, r3
 80086f4:	f7fa fcf6 	bl	80030e4 <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 80086f8:	f00d fd8c 	bl	8016214 <xNetworkBuffersInitialise>
 80086fc:	4603      	mov	r3, r0
 80086fe:	2b01      	cmp	r3, #1
 8008700:	d10e      	bne.n	8008720 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8008702:	f004 fc7f 	bl	800d004 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 8008706:	4b13      	ldr	r3, [pc, #76]	@ (8008754 <FreeRTOS_IPInit_Multi+0xb4>)
 8008708:	9301      	str	r3, [sp, #4]
 800870a:	2304      	movs	r3, #4
 800870c:	9300      	str	r3, [sp, #0]
 800870e:	2300      	movs	r3, #0
 8008710:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008714:	4910      	ldr	r1, [pc, #64]	@ (8008758 <FreeRTOS_IPInit_Multi+0xb8>)
 8008716:	4811      	ldr	r0, [pc, #68]	@ (800875c <FreeRTOS_IPInit_Multi+0xbc>)
 8008718:	f7fa fd9a 	bl	8003250 <xTaskCreate>
 800871c:	6078      	str	r0, [r7, #4]
 800871e:	e00e      	b.n	800873e <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 8008720:	480f      	ldr	r0, [pc, #60]	@ (8008760 <FreeRTOS_IPInit_Multi+0xc0>)
 8008722:	f017 ff33 	bl	802058c <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8008726:	4b09      	ldr	r3, [pc, #36]	@ (800874c <FreeRTOS_IPInit_Multi+0xac>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	4618      	mov	r0, r3
 800872c:	f7fa fb98 	bl	8002e60 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8008730:	4b06      	ldr	r3, [pc, #24]	@ (800874c <FreeRTOS_IPInit_Multi+0xac>)
 8008732:	2200      	movs	r2, #0
 8008734:	601a      	str	r2, [r3, #0]
 8008736:	e002      	b.n	800873e <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 8008738:	480a      	ldr	r0, [pc, #40]	@ (8008764 <FreeRTOS_IPInit_Multi+0xc4>)
 800873a:	f017 ff27 	bl	802058c <lUDPLoggingPrintf>
    }

    return xReturn;
 800873e:	687b      	ldr	r3, [r7, #4]
}
 8008740:	4618      	mov	r0, r3
 8008742:	3708      	adds	r7, #8
 8008744:	46bd      	mov	sp, r7
 8008746:	bd80      	pop	{r7, pc}
 8008748:	08022f38 	.word	0x08022f38
 800874c:	20000e48 	.word	0x20000e48
 8008750:	08022f64 	.word	0x08022f64
 8008754:	20000e54 	.word	0x20000e54
 8008758:	08022f6c 	.word	0x08022f6c
 800875c:	08008289 	.word	0x08008289
 8008760:	08022f74 	.word	0x08022f74
 8008764:	08022fb0 	.word	0x08022fb0

08008768 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 8008768:	b480      	push	{r7}
 800876a:	b085      	sub	sp, #20
 800876c:	af00      	add	r7, sp, #0
 800876e:	60f8      	str	r0, [r7, #12]
 8008770:	60b9      	str	r1, [r7, #8]
 8008772:	607a      	str	r2, [r7, #4]
 8008774:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8008776:	69bb      	ldr	r3, [r7, #24]
 8008778:	2b00      	cmp	r3, #0
 800877a:	d023      	beq.n	80087c4 <FreeRTOS_GetEndPointConfiguration+0x5c>
 800877c:	69bb      	ldr	r3, [r7, #24]
 800877e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008782:	f003 0304 	and.w	r3, r3, #4
 8008786:	b2db      	uxtb	r3, r3
 8008788:	2b00      	cmp	r3, #0
 800878a:	d11b      	bne.n	80087c4 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	2b00      	cmp	r3, #0
 8008790:	d003      	beq.n	800879a <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8008792:	69bb      	ldr	r3, [r7, #24]
 8008794:	681a      	ldr	r2, [r3, #0]
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 800879a:	68bb      	ldr	r3, [r7, #8]
 800879c:	2b00      	cmp	r3, #0
 800879e:	d003      	beq.n	80087a8 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 80087a0:	69bb      	ldr	r3, [r7, #24]
 80087a2:	685a      	ldr	r2, [r3, #4]
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d003      	beq.n	80087b6 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 80087ae:	69bb      	ldr	r3, [r7, #24]
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d003      	beq.n	80087c4 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 80087bc:	69bb      	ldr	r3, [r7, #24]
 80087be:	68da      	ldr	r2, [r3, #12]
 80087c0:	683b      	ldr	r3, [r7, #0]
 80087c2:	601a      	str	r2, [r3, #0]
            }
        }
    }
 80087c4:	bf00      	nop
 80087c6:	3714      	adds	r7, #20
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr

080087d0 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b088      	sub	sp, #32
 80087d4:	af02      	add	r7, sp, #8
 80087d6:	60f8      	str	r0, [r7, #12]
 80087d8:	60b9      	str	r1, [r7, #8]
 80087da:	607a      	str	r2, [r7, #4]
 80087dc:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80087de:	2000      	movs	r0, #0
 80087e0:	f003 ff72 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 80087e4:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 80087e6:	697b      	ldr	r3, [r7, #20]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d007      	beq.n	80087fc <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 80087ec:	697b      	ldr	r3, [r7, #20]
 80087ee:	9300      	str	r3, [sp, #0]
 80087f0:	683b      	ldr	r3, [r7, #0]
 80087f2:	687a      	ldr	r2, [r7, #4]
 80087f4:	68b9      	ldr	r1, [r7, #8]
 80087f6:	68f8      	ldr	r0, [r7, #12]
 80087f8:	f7ff ffb6 	bl	8008768 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 80087fc:	bf00      	nop
 80087fe:	3718      	adds	r7, #24
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}

08008804 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8008804:	b580      	push	{r7, lr}
 8008806:	b086      	sub	sp, #24
 8008808:	af00      	add	r7, sp, #0
 800880a:	4603      	mov	r3, r0
 800880c:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 800880e:	2300      	movs	r3, #0
 8008810:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 8008812:	79fb      	ldrb	r3, [r7, #7]
 8008814:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8008816:	2300      	movs	r3, #0
 8008818:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 800881a:	f107 030c 	add.w	r3, r7, #12
 800881e:	6979      	ldr	r1, [r7, #20]
 8008820:	4618      	mov	r0, r3
 8008822:	f000 f805 	bl	8008830 <xSendEventStructToIPTask>
 8008826:	4603      	mov	r3, r0
}
 8008828:	4618      	mov	r0, r3
 800882a:	3718      	adds	r7, #24
 800882c:	46bd      	mov	sp, r7
 800882e:	bd80      	pop	{r7, pc}

08008830 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b086      	sub	sp, #24
 8008834:	af00      	add	r7, sp, #0
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 800883a:	683b      	ldr	r3, [r7, #0]
 800883c:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 800883e:	f000 fb93 	bl	8008f68 <xIPIsNetworkTaskReady>
 8008842:	4603      	mov	r3, r0
 8008844:	2b00      	cmp	r3, #0
 8008846:	d107      	bne.n	8008858 <xSendEventStructToIPTask+0x28>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f993 3000 	ldrsb.w	r3, [r3]
 800884e:	2b00      	cmp	r3, #0
 8008850:	d002      	beq.n	8008858 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 8008852:	2300      	movs	r3, #0
 8008854:	617b      	str	r3, [r7, #20]
 8008856:	e035      	b.n	80088c4 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 8008858:	2301      	movs	r3, #1
 800885a:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	f993 3000 	ldrsb.w	r3, [r3]
 8008862:	2b06      	cmp	r3, #6
 8008864:	d10c      	bne.n	8008880 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8008866:	2001      	movs	r0, #1
 8008868:	f000 fd9e 	bl	80093a8 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 800886c:	4b18      	ldr	r3, [pc, #96]	@ (80088d0 <xSendEventStructToIPTask+0xa0>)
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	4618      	mov	r0, r3
 8008872:	f7fa fabb 	bl	8002dec <uxQueueMessagesWaiting>
 8008876:	4603      	mov	r3, r0
 8008878:	2b00      	cmp	r3, #0
 800887a:	d001      	beq.n	8008880 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 800887c:	2300      	movs	r3, #0
 800887e:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8008880:	693b      	ldr	r3, [r7, #16]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d01c      	beq.n	80088c0 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8008886:	f000 ff15 	bl	80096b4 <xIsCallingFromIPTask>
 800888a:	4603      	mov	r3, r0
 800888c:	2b01      	cmp	r3, #1
 800888e:	d104      	bne.n	800889a <xSendEventStructToIPTask+0x6a>
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	2b00      	cmp	r3, #0
 8008894:	d001      	beq.n	800889a <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8008896:	2300      	movs	r3, #0
 8008898:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 800889a:	4b0d      	ldr	r3, [pc, #52]	@ (80088d0 <xSendEventStructToIPTask+0xa0>)
 800889c:	6818      	ldr	r0, [r3, #0]
 800889e:	2300      	movs	r3, #0
 80088a0:	68fa      	ldr	r2, [r7, #12]
 80088a2:	6879      	ldr	r1, [r7, #4]
 80088a4:	f7f9 fffc 	bl	80028a0 <xQueueGenericSend>
 80088a8:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 80088aa:	697b      	ldr	r3, [r7, #20]
 80088ac:	2b00      	cmp	r3, #0
 80088ae:	d109      	bne.n	80088c4 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f993 3000 	ldrsb.w	r3, [r3]
 80088b6:	4619      	mov	r1, r3
 80088b8:	4806      	ldr	r0, [pc, #24]	@ (80088d4 <xSendEventStructToIPTask+0xa4>)
 80088ba:	f017 fe67 	bl	802058c <lUDPLoggingPrintf>
 80088be:	e001      	b.n	80088c4 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 80088c0:	2301      	movs	r3, #1
 80088c2:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 80088c4:	697b      	ldr	r3, [r7, #20]
}
 80088c6:	4618      	mov	r0, r3
 80088c8:	3718      	adds	r7, #24
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	20000e48 	.word	0x20000e48
 80088d4:	08022ff4 	.word	0x08022ff4

080088d8 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 80088d8:	b580      	push	{r7, lr}
 80088da:	b086      	sub	sp, #24
 80088dc:	af00      	add	r7, sp, #0
 80088de:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 80088e0:	2301      	movs	r3, #1
 80088e2:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 80088e4:	2300      	movs	r3, #0
 80088e6:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 80088e8:	2300      	movs	r3, #0
 80088ea:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d102      	bne.n	80088f8 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 80088f2:	2300      	movs	r3, #0
 80088f4:	75fb      	strb	r3, [r7, #23]
 80088f6:	e032      	b.n	800895e <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 80088fc:	693b      	ldr	r3, [r7, #16]
 80088fe:	2100      	movs	r1, #0
 8008900:	4618      	mov	r0, r3
 8008902:	f003 ff81 	bl	800c808 <FreeRTOS_FindEndPointOnMAC>
 8008906:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d002      	beq.n	8008914 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 800890e:	2301      	movs	r3, #1
 8008910:	75fb      	strb	r3, [r7, #23]
 8008912:	e024      	b.n	800895e <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8008914:	693b      	ldr	r3, [r7, #16]
 8008916:	2206      	movs	r2, #6
 8008918:	4619      	mov	r1, r3
 800891a:	4820      	ldr	r0, [pc, #128]	@ (800899c <eConsiderFrameForProcessing+0xc4>)
 800891c:	f018 ffe7 	bl	80218ee <memcmp>
 8008920:	4603      	mov	r3, r0
 8008922:	2b00      	cmp	r3, #0
 8008924:	d102      	bne.n	800892c <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 8008926:	2301      	movs	r3, #1
 8008928:	75fb      	strb	r3, [r7, #23]
 800892a:	e018      	b.n	800895e <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 800892c:	693b      	ldr	r3, [r7, #16]
 800892e:	2206      	movs	r2, #6
 8008930:	4619      	mov	r1, r3
 8008932:	481b      	ldr	r0, [pc, #108]	@ (80089a0 <eConsiderFrameForProcessing+0xc8>)
 8008934:	f018 ffdb 	bl	80218ee <memcmp>
 8008938:	4603      	mov	r3, r0
 800893a:	2b00      	cmp	r3, #0
 800893c:	d102      	bne.n	8008944 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 800893e:	2301      	movs	r3, #1
 8008940:	75fb      	strb	r3, [r7, #23]
 8008942:	e00c      	b.n	800895e <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8008944:	693b      	ldr	r3, [r7, #16]
 8008946:	781b      	ldrb	r3, [r3, #0]
 8008948:	2b33      	cmp	r3, #51	@ 0x33
 800894a:	d106      	bne.n	800895a <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 800894c:	693b      	ldr	r3, [r7, #16]
 800894e:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8008950:	2b33      	cmp	r3, #51	@ 0x33
 8008952:	d102      	bne.n	800895a <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 8008954:	2301      	movs	r3, #1
 8008956:	75fb      	strb	r3, [r7, #23]
 8008958:	e001      	b.n	800895e <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 800895a:	2300      	movs	r3, #0
 800895c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 800895e:	7dfb      	ldrb	r3, [r7, #23]
 8008960:	2b01      	cmp	r3, #1
 8008962:	d115      	bne.n	8008990 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 8008964:	693b      	ldr	r3, [r7, #16]
 8008966:	7b1a      	ldrb	r2, [r3, #12]
 8008968:	7b5b      	ldrb	r3, [r3, #13]
 800896a:	021b      	lsls	r3, r3, #8
 800896c:	4313      	orrs	r3, r2
 800896e:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 8008970:	897b      	ldrh	r3, [r7, #10]
 8008972:	021b      	lsls	r3, r3, #8
 8008974:	b21a      	sxth	r2, r3
 8008976:	897b      	ldrh	r3, [r7, #10]
 8008978:	0a1b      	lsrs	r3, r3, #8
 800897a:	b29b      	uxth	r3, r3
 800897c:	b21b      	sxth	r3, r3
 800897e:	4313      	orrs	r3, r2
 8008980:	b21b      	sxth	r3, r3
 8008982:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 8008984:	897b      	ldrh	r3, [r7, #10]
 8008986:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800898a:	d801      	bhi.n	8008990 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 800898c:	2300      	movs	r3, #0
 800898e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 8008990:	7dfb      	ldrb	r3, [r7, #23]
}
 8008992:	4618      	mov	r0, r3
 8008994:	3718      	adds	r7, #24
 8008996:	46bd      	mov	sp, r7
 8008998:	bd80      	pop	{r7, pc}
 800899a:	bf00      	nop
 800899c:	08025c24 	.word	0x08025c24
 80089a0:	08025c14 	.word	0x08025c14

080089a4 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80089a4:	b580      	push	{r7, lr}
 80089a6:	b084      	sub	sp, #16
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 80089ac:	2300      	movs	r3, #0
 80089ae:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80089b4:	2b00      	cmp	r3, #0
 80089b6:	d03d      	beq.n	8008a34 <prvProcessEthernetPacket+0x90>
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d039      	beq.n	8008a34 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089c4:	2b0d      	cmp	r3, #13
 80089c6:	d934      	bls.n	8008a32 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 80089c8:	2301      	movs	r3, #1
 80089ca:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80089d0:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 80089d2:	68bb      	ldr	r3, [r7, #8]
 80089d4:	899b      	ldrh	r3, [r3, #12]
 80089d6:	b29b      	uxth	r3, r3
 80089d8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80089dc:	4293      	cmp	r3, r2
 80089de:	d015      	beq.n	8008a0c <prvProcessEthernetPacket+0x68>
 80089e0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80089e4:	4293      	cmp	r3, r2
 80089e6:	dc21      	bgt.n	8008a2c <prvProcessEthernetPacket+0x88>
 80089e8:	2b08      	cmp	r3, #8
 80089ea:	d00f      	beq.n	8008a0c <prvProcessEthernetPacket+0x68>
 80089ec:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 80089f0:	d11c      	bne.n	8008a2c <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80089f6:	2b29      	cmp	r3, #41	@ 0x29
 80089f8:	d905      	bls.n	8008a06 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 80089fa:	6878      	ldr	r0, [r7, #4]
 80089fc:	f7fc ffe6 	bl	80059cc <eARPProcessPacket>
 8008a00:	4603      	mov	r3, r0
 8008a02:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 8008a04:	e016      	b.n	8008a34 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 8008a06:	2300      	movs	r3, #0
 8008a08:	73fb      	strb	r3, [r7, #15]
                        break;
 8008a0a:	e013      	b.n	8008a34 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008a10:	2b21      	cmp	r3, #33	@ 0x21
 8008a12:	d908      	bls.n	8008a26 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a18:	6879      	ldr	r1, [r7, #4]
 8008a1a:	4618      	mov	r0, r3
 8008a1c:	f000 f8c6 	bl	8008bac <prvProcessIPPacket>
 8008a20:	4603      	mov	r3, r0
 8008a22:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8008a24:	e006      	b.n	8008a34 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 8008a26:	2300      	movs	r3, #0
 8008a28:	73fb      	strb	r3, [r7, #15]
                    break;
 8008a2a:	e003      	b.n	8008a34 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 8008a30:	e000      	b.n	8008a34 <prvProcessEthernetPacket+0x90>
            break;
 8008a32:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 8008a34:	7bfb      	ldrb	r3, [r7, #15]
 8008a36:	2b04      	cmp	r3, #4
 8008a38:	d00b      	beq.n	8008a52 <prvProcessEthernetPacket+0xae>
 8008a3a:	2b04      	cmp	r3, #4
 8008a3c:	dc19      	bgt.n	8008a72 <prvProcessEthernetPacket+0xce>
 8008a3e:	2b02      	cmp	r3, #2
 8008a40:	d002      	beq.n	8008a48 <prvProcessEthernetPacket+0xa4>
 8008a42:	2b03      	cmp	r3, #3
 8008a44:	d019      	beq.n	8008a7a <prvProcessEthernetPacket+0xd6>
 8008a46:	e014      	b.n	8008a72 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8008a48:	2101      	movs	r1, #1
 8008a4a:	6878      	ldr	r0, [r7, #4]
 8008a4c:	f000 f9a4 	bl	8008d98 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 8008a50:	e014      	b.n	8008a7c <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 8008a52:	4b0c      	ldr	r3, [pc, #48]	@ (8008a84 <prvProcessEthernetPacket+0xe0>)
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	2b00      	cmp	r3, #0
 8008a58:	d107      	bne.n	8008a6a <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 8008a5a:	4a0a      	ldr	r2, [pc, #40]	@ (8008a84 <prvProcessEthernetPacket+0xe0>)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 8008a60:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8008a64:	f000 fc06 	bl	8009274 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 8008a68:	e008      	b.n	8008a7c <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f00d fca4 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
            break;
 8008a70:	e004      	b.n	8008a7c <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f00d fca0 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
            break;
 8008a78:	e000      	b.n	8008a7c <prvProcessEthernetPacket+0xd8>
            break;
 8008a7a:	bf00      	nop
    }
}
 8008a7c:	bf00      	nop
 8008a7e:	3710      	adds	r7, #16
 8008a80:	46bd      	mov	sp, r7
 8008a82:	bd80      	pop	{r7, pc}
 8008a84:	20000e44 	.word	0x20000e44

08008a88 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008a88:	b5b0      	push	{r4, r5, r7, lr}
 8008a8a:	b08c      	sub	sp, #48	@ 0x30
 8008a8c:	af00      	add	r7, sp, #0
 8008a8e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8008a90:	2300      	movs	r3, #0
 8008a92:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 8008a96:	2300      	movs	r3, #0
 8008a98:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a9e:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8008aa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aa2:	3322      	adds	r3, #34	@ 0x22
 8008aa4:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8008aa6:	6878      	ldr	r0, [r7, #4]
 8008aa8:	f000 fa76 	bl	8008f98 <uxIPHeaderSizePacket>
 8008aac:	4603      	mov	r3, r0
 8008aae:	3316      	adds	r3, #22
 8008ab0:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 8008ab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ab4:	899b      	ldrh	r3, [r3, #12]
 8008ab6:	b29b      	uxth	r3, r3
 8008ab8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008abc:	4293      	cmp	r3, r2
 8008abe:	d105      	bne.n	8008acc <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ac4:	3336      	adds	r3, #54	@ 0x36
 8008ac6:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 8008acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ace:	889b      	ldrh	r3, [r3, #4]
 8008ad0:	b29b      	uxth	r3, r3
 8008ad2:	021b      	lsls	r3, r3, #8
 8008ad4:	b21a      	sxth	r2, r3
 8008ad6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ad8:	889b      	ldrh	r3, [r3, #4]
 8008ada:	b29b      	uxth	r3, r3
 8008adc:	0a1b      	lsrs	r3, r3, #8
 8008ade:	b29b      	uxth	r3, r3
 8008ae0:	b21b      	sxth	r3, r3
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	b21b      	sxth	r3, r3
 8008ae6:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 8008ae8:	8b7b      	ldrh	r3, [r7, #26]
 8008aea:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8008aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008aee:	899b      	ldrh	r3, [r3, #12]
 8008af0:	b29b      	uxth	r3, r3
 8008af2:	2b08      	cmp	r3, #8
 8008af4:	d11a      	bne.n	8008b2c <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 8008af6:	8b7c      	ldrh	r4, [r7, #26]
 8008af8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008afa:	8a1b      	ldrh	r3, [r3, #16]
 8008afc:	b29b      	uxth	r3, r3
 8008afe:	021b      	lsls	r3, r3, #8
 8008b00:	b21a      	sxth	r2, r3
 8008b02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b04:	8a1b      	ldrh	r3, [r3, #16]
 8008b06:	b29b      	uxth	r3, r3
 8008b08:	0a1b      	lsrs	r3, r3, #8
 8008b0a:	b29b      	uxth	r3, r3
 8008b0c:	b21b      	sxth	r3, r3
 8008b0e:	4313      	orrs	r3, r2
 8008b10:	b21b      	sxth	r3, r3
 8008b12:	b29b      	uxth	r3, r3
 8008b14:	461d      	mov	r5, r3
 8008b16:	6878      	ldr	r0, [r7, #4]
 8008b18:	f000 fa3e 	bl	8008f98 <uxIPHeaderSizePacket>
 8008b1c:	4603      	mov	r3, r0
 8008b1e:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8008b20:	429c      	cmp	r4, r3
 8008b22:	d903      	bls.n	8008b2c <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 8008b24:	2300      	movs	r3, #0
 8008b26:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008b2a:	e038      	b.n	8008b9e <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008b30:	6a3a      	ldr	r2, [r7, #32]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d833      	bhi.n	8008b9e <prvProcessUDPPacket+0x116>
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	2b07      	cmp	r3, #7
 8008b3a:	d930      	bls.n	8008b9e <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008b40:	6a3b      	ldr	r3, [r7, #32]
 8008b42:	1ad3      	subs	r3, r2, r3
 8008b44:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	3b08      	subs	r3, #8
 8008b4a:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 8008b4c:	693a      	ldr	r2, [r7, #16]
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	429a      	cmp	r2, r3
 8008b52:	d904      	bls.n	8008b5e <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 8008b54:	68fa      	ldr	r2, [r7, #12]
 8008b56:	6a3b      	ldr	r3, [r7, #32]
 8008b58:	441a      	add	r2, r3
 8008b5a:	687b      	ldr	r3, [r7, #4]
 8008b5c:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 8008b5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b60:	881b      	ldrh	r3, [r3, #0]
 8008b62:	b29a      	uxth	r2, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8008b68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b6a:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8008b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b74:	885b      	ldrh	r3, [r3, #2]
 8008b76:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8008b78:	f107 0208 	add.w	r2, r7, #8
 8008b7c:	4619      	mov	r1, r3
 8008b7e:	6878      	ldr	r0, [r7, #4]
 8008b80:	f00c fe2a 	bl	80157d8 <xProcessReceivedUDPPacket>
 8008b84:	4603      	mov	r3, r0
 8008b86:	2b01      	cmp	r3, #1
 8008b88:	d103      	bne.n	8008b92 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 8008b8a:	2303      	movs	r3, #3
 8008b8c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008b90:	e005      	b.n	8008b9e <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 8008b92:	68bb      	ldr	r3, [r7, #8]
 8008b94:	2b01      	cmp	r3, #1
 8008b96:	d102      	bne.n	8008b9e <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 8008b98:	2304      	movs	r3, #4
 8008b9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 8008b9e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008ba2:	4618      	mov	r0, r3
 8008ba4:	3730      	adds	r7, #48	@ 0x30
 8008ba6:	46bd      	mov	sp, r7
 8008ba8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008bac <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008bac:	b580      	push	{r7, lr}
 8008bae:	b088      	sub	sp, #32
 8008bb0:	af00      	add	r7, sp, #0
 8008bb2:	6078      	str	r0, [r7, #4]
 8008bb4:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8008bb6:	2314      	movs	r3, #20
 8008bb8:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	330e      	adds	r3, #14
 8008bc6:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	899b      	ldrh	r3, [r3, #12]
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	2b08      	cmp	r3, #8
 8008bd0:	d023      	beq.n	8008c1a <prvProcessIPPacket+0x6e>
 8008bd2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008bd6:	4293      	cmp	r3, r2
 8008bd8:	d144      	bne.n	8008c64 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 8008bda:	683b      	ldr	r3, [r7, #0]
 8008bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008bde:	2b35      	cmp	r3, #53	@ 0x35
 8008be0:	d802      	bhi.n	8008be8 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 8008be2:	2300      	movs	r3, #0
 8008be4:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 8008be6:	e043      	b.n	8008c70 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008bec:	330e      	adds	r3, #14
 8008bee:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 8008bf0:	2328      	movs	r3, #40	@ 0x28
 8008bf2:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8008bf4:	693b      	ldr	r3, [r7, #16]
 8008bf6:	799b      	ldrb	r3, [r3, #6]
 8008bf8:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	330e      	adds	r3, #14
 8008bfe:	69ba      	ldr	r2, [r7, #24]
 8008c00:	6839      	ldr	r1, [r7, #0]
 8008c02:	4618      	mov	r0, r3
 8008c04:	f001 fb6c 	bl	800a2e0 <prvAllowIPPacketIPv6>
 8008c08:	4603      	mov	r3, r0
 8008c0a:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 8008c0c:	683b      	ldr	r3, [r7, #0]
 8008c0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c10:	3b06      	subs	r3, #6
 8008c12:	693a      	ldr	r2, [r7, #16]
 8008c14:	7812      	ldrb	r2, [r2, #0]
 8008c16:	701a      	strb	r2, [r3, #0]
                break;
 8008c18:	e02a      	b.n	8008c70 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	781b      	ldrb	r3, [r3, #0]
 8008c1e:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 8008c20:	68bb      	ldr	r3, [r7, #8]
 8008c22:	009b      	lsls	r3, r3, #2
 8008c24:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8008c28:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 8008c2a:	683b      	ldr	r3, [r7, #0]
 8008c2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c2e:	3b0e      	subs	r3, #14
 8008c30:	69ba      	ldr	r2, [r7, #24]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d802      	bhi.n	8008c3c <prvProcessIPPacket+0x90>
 8008c36:	69bb      	ldr	r3, [r7, #24]
 8008c38:	2b13      	cmp	r3, #19
 8008c3a:	d802      	bhi.n	8008c42 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 8008c40:	e016      	b.n	8008c70 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	7ddb      	ldrb	r3, [r3, #23]
 8008c46:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8008c48:	69ba      	ldr	r2, [r7, #24]
 8008c4a:	6839      	ldr	r1, [r7, #0]
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f001 f81b 	bl	8009c88 <prvAllowIPPacketIPv4>
 8008c52:	4603      	mov	r3, r0
 8008c54:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008c5a:	3b06      	subs	r3, #6
 8008c5c:	68fa      	ldr	r2, [r7, #12]
 8008c5e:	7812      	ldrb	r2, [r2, #0]
 8008c60:	701a      	strb	r2, [r3, #0]
                   break;
 8008c62:	e005      	b.n	8008c70 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 8008c64:	2300      	movs	r3, #0
 8008c66:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 8008c68:	484a      	ldr	r0, [pc, #296]	@ (8008d94 <prvProcessIPPacket+0x1e8>)
 8008c6a:	f017 fc8f 	bl	802058c <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 8008c6e:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 8008c70:	7ffb      	ldrb	r3, [r7, #31]
 8008c72:	2b01      	cmp	r3, #1
 8008c74:	f040 8088 	bne.w	8008d88 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	899b      	ldrh	r3, [r3, #12]
 8008c7c:	b29b      	uxth	r3, r3
 8008c7e:	2b08      	cmp	r3, #8
 8008c80:	d004      	beq.n	8008c8c <prvProcessIPPacket+0xe0>
 8008c82:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008c86:	4293      	cmp	r3, r2
 8008c88:	d009      	beq.n	8008c9e <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8008c8a:	e020      	b.n	8008cce <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 8008c8c:	69bb      	ldr	r3, [r7, #24]
 8008c8e:	2b14      	cmp	r3, #20
 8008c90:	d91a      	bls.n	8008cc8 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 8008c92:	6838      	ldr	r0, [r7, #0]
 8008c94:	f001 f852 	bl	8009d3c <prvCheckIP4HeaderOptions>
 8008c98:	4603      	mov	r3, r0
 8008c9a:	77fb      	strb	r3, [r7, #31]
                    break;
 8008c9c:	e014      	b.n	8008cc8 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 8008c9e:	7dfb      	ldrb	r3, [r7, #23]
 8008ca0:	2100      	movs	r1, #0
 8008ca2:	4618      	mov	r0, r3
 8008ca4:	f001 fb3a 	bl	800a31c <xGetExtensionOrder>
 8008ca8:	4603      	mov	r3, r0
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	dd0e      	ble.n	8008ccc <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 8008cae:	2101      	movs	r1, #1
 8008cb0:	6838      	ldr	r0, [r7, #0]
 8008cb2:	f001 fb99 	bl	800a3e8 <eHandleIPv6ExtensionHeaders>
 8008cb6:	4603      	mov	r3, r0
 8008cb8:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 8008cba:	7ffb      	ldrb	r3, [r7, #31]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d005      	beq.n	8008ccc <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8008cc0:	693b      	ldr	r3, [r7, #16]
 8008cc2:	799b      	ldrb	r3, [r3, #6]
 8008cc4:	75fb      	strb	r3, [r7, #23]
                    break;
 8008cc6:	e001      	b.n	8008ccc <prvProcessIPPacket+0x120>
                    break;
 8008cc8:	bf00      	nop
 8008cca:	e000      	b.n	8008cce <prvProcessIPPacket+0x122>
                    break;
 8008ccc:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 8008cce:	7ffb      	ldrb	r3, [r7, #31]
 8008cd0:	2b00      	cmp	r3, #0
 8008cd2:	d059      	beq.n	8008d88 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 8008cd4:	7dfb      	ldrb	r3, [r7, #23]
 8008cd6:	2b11      	cmp	r3, #17
 8008cd8:	d026      	beq.n	8008d28 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8008cda:	6838      	ldr	r0, [r7, #0]
 8008cdc:	f7fd f918 	bl	8005f10 <xCheckRequiresARPResolution>
 8008ce0:	4603      	mov	r3, r0
 8008ce2:	2b01      	cmp	r3, #1
 8008ce4:	d102      	bne.n	8008cec <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 8008ce6:	2304      	movs	r3, #4
 8008ce8:	77fb      	strb	r3, [r7, #31]
 8008cea:	e01d      	b.n	8008d28 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	899b      	ldrh	r3, [r3, #12]
 8008cf0:	b29b      	uxth	r3, r3
 8008cf2:	2b08      	cmp	r3, #8
 8008cf4:	d00e      	beq.n	8008d14 <prvProcessIPPacket+0x168>
 8008cf6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d113      	bne.n	8008d26 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	1d98      	adds	r0, r3, #6
 8008d02:	693b      	ldr	r3, [r7, #16]
 8008d04:	f103 0108 	add.w	r1, r3, #8
 8008d08:	683b      	ldr	r3, [r7, #0]
 8008d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008d0c:	461a      	mov	r2, r3
 8008d0e:	f002 f843 	bl	800ad98 <vNDRefreshCacheEntry>
                                break;
 8008d12:	e009      	b.n	8008d28 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	1d9a      	adds	r2, r3, #6
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	68db      	ldr	r3, [r3, #12]
 8008d1c:	4619      	mov	r1, r3
 8008d1e:	4610      	mov	r0, r2
 8008d20:	f7fd f9d6 	bl	80060d0 <vARPRefreshCacheEntryAge>
                                break;
 8008d24:	e000      	b.n	8008d28 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8008d26:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 8008d28:	7ffb      	ldrb	r3, [r7, #31]
 8008d2a:	2b04      	cmp	r3, #4
 8008d2c:	d02c      	beq.n	8008d88 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 8008d2e:	7dfb      	ldrb	r3, [r7, #23]
 8008d30:	2b3a      	cmp	r3, #58	@ 0x3a
 8008d32:	d010      	beq.n	8008d56 <prvProcessIPPacket+0x1aa>
 8008d34:	2b3a      	cmp	r3, #58	@ 0x3a
 8008d36:	dc23      	bgt.n	8008d80 <prvProcessIPPacket+0x1d4>
 8008d38:	2b11      	cmp	r3, #17
 8008d3a:	d012      	beq.n	8008d62 <prvProcessIPPacket+0x1b6>
 8008d3c:	2b11      	cmp	r3, #17
 8008d3e:	dc1f      	bgt.n	8008d80 <prvProcessIPPacket+0x1d4>
 8008d40:	2b01      	cmp	r3, #1
 8008d42:	d002      	beq.n	8008d4a <prvProcessIPPacket+0x19e>
 8008d44:	2b06      	cmp	r3, #6
 8008d46:	d012      	beq.n	8008d6e <prvProcessIPPacket+0x1c2>
 8008d48:	e01a      	b.n	8008d80 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 8008d4a:	6838      	ldr	r0, [r7, #0]
 8008d4c:	f7ff f9fe 	bl	800814c <ProcessICMPPacket>
 8008d50:	4603      	mov	r3, r0
 8008d52:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 8008d54:	e018      	b.n	8008d88 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 8008d56:	6838      	ldr	r0, [r7, #0]
 8008d58:	f002 fb6e 	bl	800b438 <prvProcessICMPMessage_IPv6>
 8008d5c:	4603      	mov	r3, r0
 8008d5e:	77fb      	strb	r3, [r7, #31]
                            break;
 8008d60:	e012      	b.n	8008d88 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 8008d62:	6838      	ldr	r0, [r7, #0]
 8008d64:	f7ff fe90 	bl	8008a88 <prvProcessUDPPacket>
 8008d68:	4603      	mov	r3, r0
 8008d6a:	77fb      	strb	r3, [r7, #31]
                        break;
 8008d6c:	e00c      	b.n	8008d88 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 8008d6e:	6838      	ldr	r0, [r7, #0]
 8008d70:	f007 fda0 	bl	80108b4 <xProcessReceivedTCPPacket>
 8008d74:	4603      	mov	r3, r0
 8008d76:	2b01      	cmp	r3, #1
 8008d78:	d105      	bne.n	8008d86 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 8008d7a:	2303      	movs	r3, #3
 8008d7c:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 8008d7e:	e002      	b.n	8008d86 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 8008d80:	2300      	movs	r3, #0
 8008d82:	77fb      	strb	r3, [r7, #31]
                        break;
 8008d84:	e000      	b.n	8008d88 <prvProcessIPPacket+0x1dc>
                                break;
 8008d86:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 8008d88:	7ffb      	ldrb	r3, [r7, #31]
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3720      	adds	r7, #32
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	bd80      	pop	{r7, pc}
 8008d92:	bf00      	nop
 8008d94:	08023020 	.word	0x08023020

08008d98 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b08e      	sub	sp, #56	@ 0x38
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
 8008da0:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008da6:	2b3b      	cmp	r3, #59	@ 0x3b
 8008da8:	d818      	bhi.n	8008ddc <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dae:	4619      	mov	r1, r3
 8008db0:	486a      	ldr	r0, [pc, #424]	@ (8008f5c <vReturnEthernetFrame+0x1c4>)
 8008db2:	f017 fbeb 	bl	802058c <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dba:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dbc:	e008      	b.n	8008dd0 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8008dc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dc4:	4413      	add	r3, r2
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8008dca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dcc:	3301      	adds	r3, #1
 8008dce:	637b      	str	r3, [r7, #52]	@ 0x34
 8008dd0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008dd2:	2b3b      	cmp	r3, #59	@ 0x3b
 8008dd4:	ddf3      	ble.n	8008dbe <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	223c      	movs	r2, #60	@ 0x3c
 8008dda:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 8008ddc:	683b      	ldr	r3, [r7, #0]
 8008dde:	2b00      	cmp	r3, #0
 8008de0:	d111      	bne.n	8008e06 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008de6:	4619      	mov	r1, r3
 8008de8:	6878      	ldr	r0, [r7, #4]
 8008dea:	f000 fb87 	bl	80094fc <pxDuplicateNetworkBufferWithDescriptor>
 8008dee:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 8008df0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d005      	beq.n	8008e02 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 8008df6:	2301      	movs	r3, #1
 8008df8:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008dfe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e00:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 8008e02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008e04:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	f000 80a3 	beq.w	8008f54 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e12:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 8008e14:	2300      	movs	r3, #0
 8008e16:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 8008e18:	2300      	movs	r3, #0
 8008e1a:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d12f      	bne.n	8008e84 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 8008e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e26:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8008e2a:	061a      	lsls	r2, r3, #24
 8008e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e2e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8008e32:	021b      	lsls	r3, r3, #8
 8008e34:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008e38:	431a      	orrs	r2, r3
 8008e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e3c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8008e40:	0a1b      	lsrs	r3, r3, #8
 8008e42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8008e46:	431a      	orrs	r2, r3
 8008e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e4a:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8008e4e:	0e1b      	lsrs	r3, r3, #24
 8008e50:	4313      	orrs	r3, r2
 8008e52:	4619      	mov	r1, r3
 8008e54:	4842      	ldr	r0, [pc, #264]	@ (8008f60 <vReturnEthernetFrame+0x1c8>)
 8008e56:	f017 fb99 	bl	802058c <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e5e:	899b      	ldrh	r3, [r3, #12]
 8008e60:	b29b      	uxth	r3, r3
 8008e62:	2b08      	cmp	r3, #8
 8008e64:	d003      	beq.n	8008e6e <vReturnEthernetFrame+0xd6>
 8008e66:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008e6a:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8008e6c:	e00a      	b.n	8008e84 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 8008e6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e70:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8008e74:	2107      	movs	r1, #7
 8008e76:	4618      	mov	r0, r3
 8008e78:	f003 fcfe 	bl	800c878 <FreeRTOS_FindEndPointOnNetMask>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	687b      	ldr	r3, [r7, #4]
 8008e80:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 8008e82:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d063      	beq.n	8008f54 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008e90:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8008e94:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 8008e96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008e98:	899b      	ldrh	r3, [r3, #12]
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	2b08      	cmp	r3, #8
 8008e9e:	d11c      	bne.n	8008eda <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 8008ea0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ea2:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8008ea6:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8008eae:	f107 0114 	add.w	r1, r7, #20
 8008eb2:	f107 0310 	add.w	r3, r7, #16
 8008eb6:	4618      	mov	r0, r3
 8008eb8:	f7fd fa54 	bl	8006364 <eARPGetCacheEntry>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 8008ec2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8008ec6:	2b01      	cmp	r3, #1
 8008ec8:	d103      	bne.n	8008ed2 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 8008eca:	f107 0314 	add.w	r3, r7, #20
 8008ece:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 8008ed0:	e007      	b.n	8008ee2 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8008ed2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ed4:	3306      	adds	r3, #6
 8008ed6:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 8008ed8:	e003      	b.n	8008ee2 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8008eda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008edc:	3306      	adds	r3, #6
 8008ede:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 8008ee0:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 8008ee2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee4:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 8008ee6:	2206      	movs	r2, #6
 8008ee8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008eea:	69f8      	ldr	r0, [r7, #28]
 8008eec:	f017 fd6a 	bl	80209c4 <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8008ef0:	687b      	ldr	r3, [r7, #4]
 8008ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008ef4:	33e8      	adds	r3, #232	@ 0xe8
 8008ef6:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8008ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008efa:	3306      	adds	r3, #6
 8008efc:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8008efe:	2206      	movs	r2, #6
 8008f00:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008f02:	69f8      	ldr	r0, [r7, #28]
 8008f04:	f017 fd5e 	bl	80209c4 <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 8008f08:	f000 fbd4 	bl	80096b4 <xIsCallingFromIPTask>
 8008f0c:	4603      	mov	r3, r0
 8008f0e:	2b01      	cmp	r3, #1
 8008f10:	d106      	bne.n	8008f20 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	68db      	ldr	r3, [r3, #12]
 8008f16:	683a      	ldr	r2, [r7, #0]
 8008f18:	6879      	ldr	r1, [r7, #4]
 8008f1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008f1c:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 8008f1e:	e019      	b.n	8008f54 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 8008f20:	683b      	ldr	r3, [r7, #0]
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d011      	beq.n	8008f4a <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 8008f26:	2302      	movs	r3, #2
 8008f28:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8008f2e:	f107 0308 	add.w	r3, r7, #8
 8008f32:	f04f 31ff 	mov.w	r1, #4294967295
 8008f36:	4618      	mov	r0, r3
 8008f38:	f7ff fc7a 	bl	8008830 <xSendEventStructToIPTask>
 8008f3c:	4603      	mov	r3, r0
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d108      	bne.n	8008f54 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8008f42:	6878      	ldr	r0, [r7, #4]
 8008f44:	f00d fa38 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
}
 8008f48:	e004      	b.n	8008f54 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 8008f4a:	f640 019f 	movw	r1, #2207	@ 0x89f
 8008f4e:	4805      	ldr	r0, [pc, #20]	@ (8008f64 <vReturnEthernetFrame+0x1cc>)
 8008f50:	f7f8 f8ee 	bl	8001130 <vAssertCalled>
}
 8008f54:	bf00      	nop
 8008f56:	3738      	adds	r7, #56	@ 0x38
 8008f58:	46bd      	mov	sp, r7
 8008f5a:	bd80      	pop	{r7, pc}
 8008f5c:	0802304c 	.word	0x0802304c
 8008f60:	08023070 	.word	0x08023070
 8008f64:	08022f38 	.word	0x08022f38

08008f68 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 8008f6c:	4b03      	ldr	r3, [pc, #12]	@ (8008f7c <xIPIsNetworkTaskReady+0x14>)
 8008f6e:	681b      	ldr	r3, [r3, #0]
}
 8008f70:	4618      	mov	r0, r3
 8008f72:	46bd      	mov	sp, r7
 8008f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f78:	4770      	bx	lr
 8008f7a:	bf00      	nop
 8008f7c:	20000e58 	.word	0x20000e58

08008f80 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 8008f80:	b480      	push	{r7}
 8008f82:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 8008f84:	4b03      	ldr	r3, [pc, #12]	@ (8008f94 <uxGetMinimumIPQueueSpace+0x14>)
 8008f86:	681b      	ldr	r3, [r3, #0]
    }
 8008f88:	4618      	mov	r0, r3
 8008f8a:	46bd      	mov	sp, r7
 8008f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f90:	4770      	bx	lr
 8008f92:	bf00      	nop
 8008f94:	20000014 	.word	0x20000014

08008f98 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8008f98:	b480      	push	{r7}
 8008f9a:	b085      	sub	sp, #20
 8008f9c:	af00      	add	r7, sp, #0
 8008f9e:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008fa4:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8008fa6:	68bb      	ldr	r3, [r7, #8]
 8008fa8:	899b      	ldrh	r3, [r3, #12]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008fb0:	4293      	cmp	r3, r2
 8008fb2:	d102      	bne.n	8008fba <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8008fb4:	2328      	movs	r3, #40	@ 0x28
 8008fb6:	60fb      	str	r3, [r7, #12]
 8008fb8:	e001      	b.n	8008fbe <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 8008fba:	2314      	movs	r3, #20
 8008fbc:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8008fbe:	68fb      	ldr	r3, [r7, #12]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	3714      	adds	r7, #20
 8008fc4:	46bd      	mov	sp, r7
 8008fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fca:	4770      	bx	lr

08008fcc <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 8008fcc:	b480      	push	{r7}
 8008fce:	b085      	sub	sp, #20
 8008fd0:	af00      	add	r7, sp, #0
 8008fd2:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d009      	beq.n	8008fee <uxIPHeaderSizeSocket+0x22>
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	7a1b      	ldrb	r3, [r3, #8]
 8008fde:	f003 0301 	and.w	r3, r3, #1
 8008fe2:	b2db      	uxtb	r3, r3
 8008fe4:	2b00      	cmp	r3, #0
 8008fe6:	d002      	beq.n	8008fee <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 8008fe8:	2328      	movs	r3, #40	@ 0x28
 8008fea:	60fb      	str	r3, [r7, #12]
 8008fec:	e001      	b.n	8008ff2 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 8008fee:	2314      	movs	r3, #20
 8008ff0:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8008ff2:	68fb      	ldr	r3, [r7, #12]
}
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	3714      	adds	r7, #20
 8008ff8:	46bd      	mov	sp, r7
 8008ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ffe:	4770      	bx	lr

08009000 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8009006:	f242 7310 	movw	r3, #10000	@ 0x2710
 800900a:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800900c:	4b28      	ldr	r3, [pc, #160]	@ (80090b0 <xCalculateSleepTime+0xb0>)
 800900e:	781b      	ldrb	r3, [r3, #0]
 8009010:	f003 0301 	and.w	r3, r3, #1
 8009014:	b2db      	uxtb	r3, r3
 8009016:	2b00      	cmp	r3, #0
 8009018:	d007      	beq.n	800902a <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 800901a:	4b25      	ldr	r3, [pc, #148]	@ (80090b0 <xCalculateSleepTime+0xb0>)
 800901c:	68db      	ldr	r3, [r3, #12]
 800901e:	687a      	ldr	r2, [r7, #4]
 8009020:	429a      	cmp	r2, r3
 8009022:	d902      	bls.n	800902a <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 8009024:	4b22      	ldr	r3, [pc, #136]	@ (80090b0 <xCalculateSleepTime+0xb0>)
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800902a:	4b22      	ldr	r3, [pc, #136]	@ (80090b4 <xCalculateSleepTime+0xb4>)
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 8009030:	e015      	b.n	800905e <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 8009032:	683b      	ldr	r3, [r7, #0]
 8009034:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8009038:	f003 0301 	and.w	r3, r3, #1
 800903c:	b2db      	uxtb	r3, r3
 800903e:	2b00      	cmp	r3, #0
 8009040:	d009      	beq.n	8009056 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 8009042:	683b      	ldr	r3, [r7, #0]
 8009044:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009048:	687a      	ldr	r2, [r7, #4]
 800904a:	429a      	cmp	r2, r3
 800904c:	d903      	bls.n	8009056 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 800904e:	683b      	ldr	r3, [r7, #0]
 8009050:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009054:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 8009056:	683b      	ldr	r3, [r7, #0]
 8009058:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800905c:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 800905e:	683b      	ldr	r3, [r7, #0]
 8009060:	2b00      	cmp	r3, #0
 8009062:	d1e6      	bne.n	8009032 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 8009064:	4b14      	ldr	r3, [pc, #80]	@ (80090b8 <xCalculateSleepTime+0xb8>)
 8009066:	781b      	ldrb	r3, [r3, #0]
 8009068:	f003 0301 	and.w	r3, r3, #1
 800906c:	b2db      	uxtb	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	d007      	beq.n	8009082 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 8009072:	4b11      	ldr	r3, [pc, #68]	@ (80090b8 <xCalculateSleepTime+0xb8>)
 8009074:	68db      	ldr	r3, [r3, #12]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	429a      	cmp	r2, r3
 800907a:	d902      	bls.n	8009082 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800907c:	4b0e      	ldr	r3, [pc, #56]	@ (80090b8 <xCalculateSleepTime+0xb8>)
 800907e:	68db      	ldr	r3, [r3, #12]
 8009080:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 8009082:	4b0e      	ldr	r3, [pc, #56]	@ (80090bc <xCalculateSleepTime+0xbc>)
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	f003 0301 	and.w	r3, r3, #1
 800908a:	b2db      	uxtb	r3, r3
 800908c:	2b00      	cmp	r3, #0
 800908e:	d007      	beq.n	80090a0 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 8009090:	4b0a      	ldr	r3, [pc, #40]	@ (80090bc <xCalculateSleepTime+0xbc>)
 8009092:	68db      	ldr	r3, [r3, #12]
 8009094:	687a      	ldr	r2, [r7, #4]
 8009096:	429a      	cmp	r2, r3
 8009098:	d902      	bls.n	80090a0 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 800909a:	4b08      	ldr	r3, [pc, #32]	@ (80090bc <xCalculateSleepTime+0xbc>)
 800909c:	68db      	ldr	r3, [r3, #12]
 800909e:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 80090a0:	687b      	ldr	r3, [r7, #4]
}
 80090a2:	4618      	mov	r0, r3
 80090a4:	370c      	adds	r7, #12
 80090a6:	46bd      	mov	sp, r7
 80090a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090ac:	4770      	bx	lr
 80090ae:	bf00      	nop
 80090b0:	20000e74 	.word	0x20000e74
 80090b4:	200011d0 	.word	0x200011d0
 80090b8:	20000e88 	.word	0x20000e88
 80090bc:	20000e9c 	.word	0x20000e9c

080090c0 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b086      	sub	sp, #24
 80090c4:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 80090c6:	484f      	ldr	r0, [pc, #316]	@ (8009204 <vCheckNetworkTimers+0x144>)
 80090c8:	f000 f932 	bl	8009330 <prvIPTimerCheck>
 80090cc:	4603      	mov	r3, r0
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d002      	beq.n	80090d8 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 80090d2:	2003      	movs	r0, #3
 80090d4:	f7ff fb96 	bl	8008804 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 80090d8:	484b      	ldr	r0, [pc, #300]	@ (8009208 <vCheckNetworkTimers+0x148>)
 80090da:	f000 f929 	bl	8009330 <prvIPTimerCheck>
 80090de:	4603      	mov	r3, r0
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d00e      	beq.n	8009102 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 80090e4:	4b49      	ldr	r3, [pc, #292]	@ (800920c <vCheckNetworkTimers+0x14c>)
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d00a      	beq.n	8009102 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 80090ec:	2000      	movs	r0, #0
 80090ee:	f000 f995 	bl	800941c <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 80090f2:	4b46      	ldr	r3, [pc, #280]	@ (800920c <vCheckNetworkTimers+0x14c>)
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	4618      	mov	r0, r3
 80090f8:	f00d f95e 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 80090fc:	4b43      	ldr	r3, [pc, #268]	@ (800920c <vCheckNetworkTimers+0x14c>)
 80090fe:	2200      	movs	r2, #0
 8009100:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8009102:	4b43      	ldr	r3, [pc, #268]	@ (8009210 <vCheckNetworkTimers+0x150>)
 8009104:	681b      	ldr	r3, [r3, #0]
 8009106:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 8009108:	e01f      	b.n	800914a <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	33f8      	adds	r3, #248	@ 0xf8
 800910e:	4618      	mov	r0, r3
 8009110:	f000 f90e 	bl	8009330 <prvIPTimerCheck>
 8009114:	4603      	mov	r3, r0
 8009116:	2b00      	cmp	r3, #0
 8009118:	d013      	beq.n	8009142 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 800911a:	693b      	ldr	r3, [r7, #16]
 800911c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009120:	f003 0304 	and.w	r3, r3, #4
 8009124:	b2db      	uxtb	r3, r3
 8009126:	2b00      	cmp	r3, #0
 8009128:	d00b      	beq.n	8009142 <vCheckNetworkTimers+0x82>
 800912a:	693b      	ldr	r3, [r7, #16]
 800912c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009130:	f003 0302 	and.w	r3, r3, #2
 8009134:	b2db      	uxtb	r3, r3
 8009136:	2b00      	cmp	r3, #0
 8009138:	d003      	beq.n	8009142 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 800913a:	6939      	ldr	r1, [r7, #16]
 800913c:	2000      	movs	r0, #0
 800913e:	f003 f8f7 	bl	800c330 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 8009142:	693b      	ldr	r3, [r7, #16]
 8009144:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8009148:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 800914a:	693b      	ldr	r3, [r7, #16]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d1dc      	bne.n	800910a <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 8009150:	4830      	ldr	r0, [pc, #192]	@ (8009214 <vCheckNetworkTimers+0x154>)
 8009152:	f000 f8ed 	bl	8009330 <prvIPTimerCheck>
 8009156:	4603      	mov	r3, r0
 8009158:	2b00      	cmp	r3, #0
 800915a:	d002      	beq.n	8009162 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 800915c:	2000      	movs	r0, #0
 800915e:	f7fd fff9 	bl	8007154 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 8009162:	4b2d      	ldr	r3, [pc, #180]	@ (8009218 <vCheckNetworkTimers+0x158>)
 8009164:	681b      	ldr	r3, [r3, #0]
 8009166:	4618      	mov	r0, r3
 8009168:	f7f9 fe40 	bl	8002dec <uxQueueMessagesWaiting>
 800916c:	4603      	mov	r3, r0
 800916e:	2b00      	cmp	r3, #0
 8009170:	d102      	bne.n	8009178 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 8009172:	2301      	movs	r3, #1
 8009174:	60fb      	str	r3, [r7, #12]
 8009176:	e001      	b.n	800917c <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 8009178:	2300      	movs	r3, #0
 800917a:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800917c:	4827      	ldr	r0, [pc, #156]	@ (800921c <vCheckNetworkTimers+0x15c>)
 800917e:	f000 f8d7 	bl	8009330 <prvIPTimerCheck>
 8009182:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 8009184:	68fb      	ldr	r3, [r7, #12]
 8009186:	2b00      	cmp	r3, #0
 8009188:	d001      	beq.n	800918e <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 800918a:	2301      	movs	r3, #1
 800918c:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800918e:	68bb      	ldr	r3, [r7, #8]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d007      	beq.n	80091a4 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 8009194:	68f8      	ldr	r0, [r7, #12]
 8009196:	f005 ff3f 	bl	800f018 <xTCPTimerCheck>
 800919a:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 800919c:	6839      	ldr	r1, [r7, #0]
 800919e:	481f      	ldr	r0, [pc, #124]	@ (800921c <vCheckNetworkTimers+0x15c>)
 80091a0:	f000 f844 	bl	800922c <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 80091a4:	2000      	movs	r0, #0
 80091a6:	f006 fe6f 	bl	800fe88 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 80091aa:	2000      	movs	r0, #0
 80091ac:	f006 fe88 	bl	800fec0 <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 80091b0:	4b1b      	ldr	r3, [pc, #108]	@ (8009220 <vCheckNetworkTimers+0x160>)
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d120      	bne.n	80091fa <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 80091b8:	481a      	ldr	r0, [pc, #104]	@ (8009224 <vCheckNetworkTimers+0x164>)
 80091ba:	f000 f8b9 	bl	8009330 <prvIPTimerCheck>
 80091be:	4603      	mov	r3, r0
 80091c0:	2b00      	cmp	r3, #0
 80091c2:	d01a      	beq.n	80091fa <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 80091c4:	2301      	movs	r3, #1
 80091c6:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80091c8:	4b17      	ldr	r3, [pc, #92]	@ (8009228 <vCheckNetworkTimers+0x168>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	617b      	str	r3, [r7, #20]
 80091ce:	e00e      	b.n	80091ee <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 80091d0:	697b      	ldr	r3, [r7, #20]
 80091d2:	7f1b      	ldrb	r3, [r3, #28]
 80091d4:	f003 0301 	and.w	r3, r3, #1
 80091d8:	b2db      	uxtb	r3, r3
 80091da:	2b00      	cmp	r3, #0
 80091dc:	d104      	bne.n	80091e8 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 80091de:	2300      	movs	r3, #0
 80091e0:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 80091e2:	6978      	ldr	r0, [r7, #20]
 80091e4:	f7ff fa30 	bl	8008648 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80091e8:	697b      	ldr	r3, [r7, #20]
 80091ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80091ec:	617b      	str	r3, [r7, #20]
 80091ee:	697b      	ldr	r3, [r7, #20]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d1ed      	bne.n	80091d0 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 80091f4:	6878      	ldr	r0, [r7, #4]
 80091f6:	f000 f971 	bl	80094dc <vSetAllNetworksUp>
        }
    }
}
 80091fa:	bf00      	nop
 80091fc:	3718      	adds	r7, #24
 80091fe:	46bd      	mov	sp, r7
 8009200:	bd80      	pop	{r7, pc}
 8009202:	bf00      	nop
 8009204:	20000e74 	.word	0x20000e74
 8009208:	20000e60 	.word	0x20000e60
 800920c:	20000e44 	.word	0x20000e44
 8009210:	200011d0 	.word	0x200011d0
 8009214:	20000e9c 	.word	0x20000e9c
 8009218:	20000e48 	.word	0x20000e48
 800921c:	20000e88 	.word	0x20000e88
 8009220:	20000e5c 	.word	0x20000e5c
 8009224:	20000eb0 	.word	0x20000eb0
 8009228:	200011d4 	.word	0x200011d4

0800922c <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b082      	sub	sp, #8
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	3304      	adds	r3, #4
 800923a:	4618      	mov	r0, r3
 800923c:	f7fa febc 	bl	8003fb8 <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	683a      	ldr	r2, [r7, #0]
 8009244:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 8009246:	683b      	ldr	r3, [r7, #0]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d105      	bne.n	8009258 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800924c:	687a      	ldr	r2, [r7, #4]
 800924e:	7813      	ldrb	r3, [r2, #0]
 8009250:	f043 0302 	orr.w	r3, r3, #2
 8009254:	7013      	strb	r3, [r2, #0]
 8009256:	e004      	b.n	8009262 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 8009258:	687a      	ldr	r2, [r7, #4]
 800925a:	7813      	ldrb	r3, [r2, #0]
 800925c:	f36f 0341 	bfc	r3, #1, #1
 8009260:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 8009262:	687a      	ldr	r2, [r7, #4]
 8009264:	7813      	ldrb	r3, [r2, #0]
 8009266:	f043 0301 	orr.w	r3, r3, #1
 800926a:	7013      	strb	r3, [r2, #0]
}
 800926c:	bf00      	nop
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b082      	sub	sp, #8
 8009278:	af00      	add	r7, sp, #0
 800927a:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 800927c:	6879      	ldr	r1, [r7, #4]
 800927e:	4803      	ldr	r0, [pc, #12]	@ (800928c <vIPTimerStartARPResolution+0x18>)
 8009280:	f7ff ffd4 	bl	800922c <prvIPTimerStart>
}
 8009284:	bf00      	nop
 8009286:	3708      	adds	r7, #8
 8009288:	46bd      	mov	sp, r7
 800928a:	bd80      	pop	{r7, pc}
 800928c:	20000e60 	.word	0x20000e60

08009290 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b082      	sub	sp, #8
 8009294:	af00      	add	r7, sp, #0
 8009296:	6078      	str	r0, [r7, #4]
 8009298:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	683a      	ldr	r2, [r7, #0]
 800929e:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 80092a0:	6839      	ldr	r1, [r7, #0]
 80092a2:	6878      	ldr	r0, [r7, #4]
 80092a4:	f7ff ffc2 	bl	800922c <prvIPTimerStart>
}
 80092a8:	bf00      	nop
 80092aa:	3708      	adds	r7, #8
 80092ac:	46bd      	mov	sp, r7
 80092ae:	bd80      	pop	{r7, pc}

080092b0 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 80092b0:	b580      	push	{r7, lr}
 80092b2:	b082      	sub	sp, #8
 80092b4:	af00      	add	r7, sp, #0
 80092b6:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 80092b8:	6879      	ldr	r1, [r7, #4]
 80092ba:	4803      	ldr	r0, [pc, #12]	@ (80092c8 <vTCPTimerReload+0x18>)
 80092bc:	f7ff ffe8 	bl	8009290 <prvIPTimerReload>
    }
 80092c0:	bf00      	nop
 80092c2:	3708      	adds	r7, #8
 80092c4:	46bd      	mov	sp, r7
 80092c6:	bd80      	pop	{r7, pc}
 80092c8:	20000e88 	.word	0x20000e88

080092cc <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 80092cc:	b580      	push	{r7, lr}
 80092ce:	b082      	sub	sp, #8
 80092d0:	af00      	add	r7, sp, #0
 80092d2:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 80092d4:	6879      	ldr	r1, [r7, #4]
 80092d6:	4803      	ldr	r0, [pc, #12]	@ (80092e4 <vARPTimerReload+0x18>)
 80092d8:	f7ff ffda 	bl	8009290 <prvIPTimerReload>
}
 80092dc:	bf00      	nop
 80092de:	3708      	adds	r7, #8
 80092e0:	46bd      	mov	sp, r7
 80092e2:	bd80      	pop	{r7, pc}
 80092e4:	20000e74 	.word	0x20000e74

080092e8 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 80092e8:	b580      	push	{r7, lr}
 80092ea:	b082      	sub	sp, #8
 80092ec:	af00      	add	r7, sp, #0
 80092ee:	6078      	str	r0, [r7, #4]
 80092f0:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 80092f2:	6839      	ldr	r1, [r7, #0]
 80092f4:	4806      	ldr	r0, [pc, #24]	@ (8009310 <vDHCP_RATimerReload+0x28>)
 80092f6:	f017 f949 	bl	802058c <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	33f8      	adds	r3, #248	@ 0xf8
 80092fe:	6839      	ldr	r1, [r7, #0]
 8009300:	4618      	mov	r0, r3
 8009302:	f7ff ffc5 	bl	8009290 <prvIPTimerReload>
    }
 8009306:	bf00      	nop
 8009308:	3708      	adds	r7, #8
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
 800930e:	bf00      	nop
 8009310:	080230a4 	.word	0x080230a4

08009314 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 8009314:	b580      	push	{r7, lr}
 8009316:	b082      	sub	sp, #8
 8009318:	af00      	add	r7, sp, #0
 800931a:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 800931c:	6879      	ldr	r1, [r7, #4]
 800931e:	4803      	ldr	r0, [pc, #12]	@ (800932c <vNetworkTimerReload+0x18>)
 8009320:	f7ff ffb6 	bl	8009290 <prvIPTimerReload>
}
 8009324:	bf00      	nop
 8009326:	3708      	adds	r7, #8
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	20000eb0 	.word	0x20000eb0

08009330 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 8009330:	b580      	push	{r7, lr}
 8009332:	b084      	sub	sp, #16
 8009334:	af00      	add	r7, sp, #0
 8009336:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	781b      	ldrb	r3, [r3, #0]
 800933c:	f003 0301 	and.w	r3, r3, #1
 8009340:	b2db      	uxtb	r3, r3
 8009342:	2b00      	cmp	r3, #0
 8009344:	d102      	bne.n	800934c <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 8009346:	2300      	movs	r3, #0
 8009348:	60fb      	str	r3, [r7, #12]
 800934a:	e028      	b.n	800939e <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	781b      	ldrb	r3, [r3, #0]
 8009350:	f003 0302 	and.w	r3, r3, #2
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10f      	bne.n	800937a <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	1d1a      	adds	r2, r3, #4
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	330c      	adds	r3, #12
 8009362:	4619      	mov	r1, r3
 8009364:	4610      	mov	r0, r2
 8009366:	f7fa fe5f 	bl	8004028 <xTaskCheckForTimeOut>
 800936a:	4603      	mov	r3, r0
 800936c:	2b00      	cmp	r3, #0
 800936e:	d004      	beq.n	800937a <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009370:	687a      	ldr	r2, [r7, #4]
 8009372:	7813      	ldrb	r3, [r2, #0]
 8009374:	f043 0302 	orr.w	r3, r3, #2
 8009378:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	781b      	ldrb	r3, [r3, #0]
 800937e:	f003 0302 	and.w	r3, r3, #2
 8009382:	b2db      	uxtb	r3, r3
 8009384:	2b00      	cmp	r3, #0
 8009386:	d008      	beq.n	800939a <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	691b      	ldr	r3, [r3, #16]
 800938c:	4619      	mov	r1, r3
 800938e:	6878      	ldr	r0, [r7, #4]
 8009390:	f7ff ff4c 	bl	800922c <prvIPTimerStart>
            xReturn = pdTRUE;
 8009394:	2301      	movs	r3, #1
 8009396:	60fb      	str	r3, [r7, #12]
 8009398:	e001      	b.n	800939e <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 800939a:	2300      	movs	r3, #0
 800939c:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800939e:	68fb      	ldr	r3, [r7, #12]
}
 80093a0:	4618      	mov	r0, r3
 80093a2:	3710      	adds	r7, #16
 80093a4:	46bd      	mov	sp, r7
 80093a6:	bd80      	pop	{r7, pc}

080093a8 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 80093a8:	b480      	push	{r7}
 80093aa:	b083      	sub	sp, #12
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 80093b0:	4a0c      	ldr	r2, [pc, #48]	@ (80093e4 <vIPSetTCPTimerExpiredState+0x3c>)
 80093b2:	7813      	ldrb	r3, [r2, #0]
 80093b4:	f043 0301 	orr.w	r3, r3, #1
 80093b8:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2b00      	cmp	r3, #0
 80093be:	d005      	beq.n	80093cc <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 80093c0:	4a08      	ldr	r2, [pc, #32]	@ (80093e4 <vIPSetTCPTimerExpiredState+0x3c>)
 80093c2:	7813      	ldrb	r3, [r2, #0]
 80093c4:	f043 0302 	orr.w	r3, r3, #2
 80093c8:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 80093ca:	e004      	b.n	80093d6 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 80093cc:	4a05      	ldr	r2, [pc, #20]	@ (80093e4 <vIPSetTCPTimerExpiredState+0x3c>)
 80093ce:	7813      	ldrb	r3, [r2, #0]
 80093d0:	f36f 0341 	bfc	r3, #1, #1
 80093d4:	7013      	strb	r3, [r2, #0]
    }
 80093d6:	bf00      	nop
 80093d8:	370c      	adds	r7, #12
 80093da:	46bd      	mov	sp, r7
 80093dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093e0:	4770      	bx	lr
 80093e2:	bf00      	nop
 80093e4:	20000e88 	.word	0x20000e88

080093e8 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 80093e8:	b480      	push	{r7}
 80093ea:	b083      	sub	sp, #12
 80093ec:	af00      	add	r7, sp, #0
 80093ee:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d005      	beq.n	8009402 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 80093f6:	4a08      	ldr	r2, [pc, #32]	@ (8009418 <vIPSetARPTimerEnableState+0x30>)
 80093f8:	7813      	ldrb	r3, [r2, #0]
 80093fa:	f043 0301 	orr.w	r3, r3, #1
 80093fe:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 8009400:	e004      	b.n	800940c <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 8009402:	4a05      	ldr	r2, [pc, #20]	@ (8009418 <vIPSetARPTimerEnableState+0x30>)
 8009404:	7813      	ldrb	r3, [r2, #0]
 8009406:	f36f 0300 	bfc	r3, #0, #1
 800940a:	7013      	strb	r3, [r2, #0]
}
 800940c:	bf00      	nop
 800940e:	370c      	adds	r7, #12
 8009410:	46bd      	mov	sp, r7
 8009412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009416:	4770      	bx	lr
 8009418:	20000e74 	.word	0x20000e74

0800941c <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 800941c:	b480      	push	{r7}
 800941e:	b083      	sub	sp, #12
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d005      	beq.n	8009436 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 800942a:	4a08      	ldr	r2, [pc, #32]	@ (800944c <vIPSetARPResolutionTimerEnableState+0x30>)
 800942c:	7813      	ldrb	r3, [r2, #0]
 800942e:	f043 0301 	orr.w	r3, r3, #1
 8009432:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 8009434:	e004      	b.n	8009440 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 8009436:	4a05      	ldr	r2, [pc, #20]	@ (800944c <vIPSetARPResolutionTimerEnableState+0x30>)
 8009438:	7813      	ldrb	r3, [r2, #0]
 800943a:	f36f 0300 	bfc	r3, #0, #1
 800943e:	7013      	strb	r3, [r2, #0]
}
 8009440:	bf00      	nop
 8009442:	370c      	adds	r7, #12
 8009444:	46bd      	mov	sp, r7
 8009446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944a:	4770      	bx	lr
 800944c:	20000e60 	.word	0x20000e60

08009450 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 8009450:	b580      	push	{r7, lr}
 8009452:	b082      	sub	sp, #8
 8009454:	af00      	add	r7, sp, #0
 8009456:	6078      	str	r0, [r7, #4]
 8009458:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 800945a:	683b      	ldr	r3, [r7, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d001      	beq.n	8009464 <vIPSetDHCP_RATimerEnableState+0x14>
 8009460:	4b0e      	ldr	r3, [pc, #56]	@ (800949c <vIPSetDHCP_RATimerEnableState+0x4c>)
 8009462:	e000      	b.n	8009466 <vIPSetDHCP_RATimerEnableState+0x16>
 8009464:	4b0e      	ldr	r3, [pc, #56]	@ (80094a0 <vIPSetDHCP_RATimerEnableState+0x50>)
 8009466:	4619      	mov	r1, r3
 8009468:	480e      	ldr	r0, [pc, #56]	@ (80094a4 <vIPSetDHCP_RATimerEnableState+0x54>)
 800946a:	f017 f88f 	bl	802058c <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d007      	beq.n	8009484 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 8009474:	687a      	ldr	r2, [r7, #4]
 8009476:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800947a:	f043 0301 	orr.w	r3, r3, #1
 800947e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 8009482:	e006      	b.n	8009492 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 8009484:	687a      	ldr	r2, [r7, #4]
 8009486:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800948a:	f36f 0300 	bfc	r3, #0, #1
 800948e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 8009492:	bf00      	nop
 8009494:	3708      	adds	r7, #8
 8009496:	46bd      	mov	sp, r7
 8009498:	bd80      	pop	{r7, pc}
 800949a:	bf00      	nop
 800949c:	080230c0 	.word	0x080230c0
 80094a0:	080230c4 	.word	0x080230c4
 80094a4:	080230c8 	.word	0x080230c8

080094a8 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 80094a8:	b480      	push	{r7}
 80094aa:	b083      	sub	sp, #12
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d005      	beq.n	80094c2 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 80094b6:	4a08      	ldr	r2, [pc, #32]	@ (80094d8 <vIPSetDNSTimerEnableState+0x30>)
 80094b8:	7813      	ldrb	r3, [r2, #0]
 80094ba:	f043 0301 	orr.w	r3, r3, #1
 80094be:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 80094c0:	e004      	b.n	80094cc <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 80094c2:	4a05      	ldr	r2, [pc, #20]	@ (80094d8 <vIPSetDNSTimerEnableState+0x30>)
 80094c4:	7813      	ldrb	r3, [r2, #0]
 80094c6:	f36f 0300 	bfc	r3, #0, #1
 80094ca:	7013      	strb	r3, [r2, #0]
    }
 80094cc:	bf00      	nop
 80094ce:	370c      	adds	r7, #12
 80094d0:	46bd      	mov	sp, r7
 80094d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d6:	4770      	bx	lr
 80094d8:	20000e9c 	.word	0x20000e9c

080094dc <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 80094dc:	b480      	push	{r7}
 80094de:	b083      	sub	sp, #12
 80094e0:	af00      	add	r7, sp, #0
 80094e2:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 80094e4:	4a04      	ldr	r2, [pc, #16]	@ (80094f8 <vSetAllNetworksUp+0x1c>)
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	6013      	str	r3, [r2, #0]
}
 80094ea:	bf00      	nop
 80094ec:	370c      	adds	r7, #12
 80094ee:	46bd      	mov	sp, r7
 80094f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094f4:	4770      	bx	lr
 80094f6:	bf00      	nop
 80094f8:	20000e5c 	.word	0x20000e5c

080094fc <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b084      	sub	sp, #16
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800950a:	2100      	movs	r1, #0
 800950c:	6838      	ldr	r0, [r7, #0]
 800950e:	f00c feeb 	bl	80162e8 <pxGetNetworkBufferWithDescriptor>
 8009512:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 8009514:	68bb      	ldr	r3, [r7, #8]
 8009516:	2b00      	cmp	r3, #0
 8009518:	d03e      	beq.n	8009598 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800951e:	2b00      	cmp	r3, #0
 8009520:	d104      	bne.n	800952c <pxDuplicateNetworkBufferWithDescriptor+0x30>
 8009522:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8009526:	481f      	ldr	r0, [pc, #124]	@ (80095a4 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 8009528:	f7f7 fe02 	bl	8001130 <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009530:	68fa      	ldr	r2, [r7, #12]
 8009532:	429a      	cmp	r2, r3
 8009534:	d902      	bls.n	800953c <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800953a:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800953c:	68bb      	ldr	r3, [r7, #8]
 800953e:	683a      	ldr	r2, [r7, #0]
 8009540:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	695a      	ldr	r2, [r3, #20]
 8009546:	68bb      	ldr	r3, [r7, #8]
 8009548:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800954e:	68bb      	ldr	r3, [r7, #8]
 8009550:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8009556:	68bb      	ldr	r3, [r7, #8]
 8009558:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800955e:	68bb      	ldr	r3, [r7, #8]
 8009560:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009566:	68bb      	ldr	r3, [r7, #8]
 8009568:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800956a:	68bb      	ldr	r3, [r7, #8]
 800956c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009572:	68fa      	ldr	r2, [r7, #12]
 8009574:	4619      	mov	r1, r3
 8009576:	f017 fa25 	bl	80209c4 <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 800957a:	68b8      	ldr	r0, [r7, #8]
 800957c:	f7ff fd0c 	bl	8008f98 <uxIPHeaderSizePacket>
 8009580:	4603      	mov	r3, r0
 8009582:	2b28      	cmp	r3, #40	@ 0x28
 8009584:	d108      	bne.n	8009598 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8009586:	68bb      	ldr	r3, [r7, #8]
 8009588:	f103 0014 	add.w	r0, r3, #20
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	3314      	adds	r3, #20
 8009590:	2210      	movs	r2, #16
 8009592:	4619      	mov	r1, r3
 8009594:	f017 fa16 	bl	80209c4 <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 8009598:	68bb      	ldr	r3, [r7, #8]
}
 800959a:	4618      	mov	r0, r3
 800959c:	3710      	adds	r7, #16
 800959e:	46bd      	mov	sp, r7
 80095a0:	bd80      	pop	{r7, pc}
 80095a2:	bf00      	nop
 80095a4:	080230ec 	.word	0x080230ec

080095a8 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 80095a8:	b580      	push	{r7, lr}
 80095aa:	b084      	sub	sp, #16
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	d102      	bne.n	80095be <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 80095b8:	2300      	movs	r3, #0
 80095ba:	60fb      	str	r3, [r7, #12]
 80095bc:	e013      	b.n	80095e6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 80095be:	6878      	ldr	r0, [r7, #4]
 80095c0:	f000 f816 	bl	80095f0 <void_ptr_to_uintptr>
 80095c4:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 80095c6:	68ba      	ldr	r2, [r7, #8]
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	1ad3      	subs	r3, r2, r3
 80095cc:	3b0a      	subs	r3, #10
 80095ce:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 80095d0:	68bb      	ldr	r3, [r7, #8]
 80095d2:	f003 0303 	and.w	r3, r3, #3
 80095d6:	2b00      	cmp	r3, #0
 80095d8:	d103      	bne.n	80095e2 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 80095da:	68bb      	ldr	r3, [r7, #8]
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	60fb      	str	r3, [r7, #12]
 80095e0:	e001      	b.n	80095e6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 80095e2:	2300      	movs	r3, #0
 80095e4:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 80095e6:	68fb      	ldr	r3, [r7, #12]
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3710      	adds	r7, #16
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 80095f8:	687b      	ldr	r3, [r7, #4]
 80095fa:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 80095fc:	68fb      	ldr	r3, [r7, #12]
}
 80095fe:	4618      	mov	r0, r3
 8009600:	3714      	adds	r7, #20
 8009602:	46bd      	mov	sp, r7
 8009604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009608:	4770      	bx	lr

0800960a <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 800960a:	b580      	push	{r7, lr}
 800960c:	b082      	sub	sp, #8
 800960e:	af00      	add	r7, sp, #0
 8009610:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 8009612:	2100      	movs	r1, #0
 8009614:	6878      	ldr	r0, [r7, #4]
 8009616:	f7ff ffc7 	bl	80095a8 <prvPacketBuffer_to_NetworkBuffer>
 800961a:	4603      	mov	r3, r0
    }
 800961c:	4618      	mov	r0, r3
 800961e:	3708      	adds	r7, #8
 8009620:	46bd      	mov	sp, r7
 8009622:	bd80      	pop	{r7, pc}

08009624 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 8009624:	b580      	push	{r7, lr}
 8009626:	b088      	sub	sp, #32
 8009628:	af00      	add	r7, sp, #0
 800962a:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 800962c:	687b      	ldr	r3, [r7, #4]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d102      	bne.n	8009638 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 8009632:	2300      	movs	r3, #0
 8009634:	61fb      	str	r3, [r7, #28]
 8009636:	e033      	b.n	80096a0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 8009638:	6878      	ldr	r0, [r7, #4]
 800963a:	f7ff ffd9 	bl	80095f0 <void_ptr_to_uintptr>
 800963e:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 8009640:	697b      	ldr	r3, [r7, #20]
 8009642:	3b30      	subs	r3, #48	@ 0x30
 8009644:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 8009646:	697b      	ldr	r3, [r7, #20]
 8009648:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 800964a:	693b      	ldr	r3, [r7, #16]
 800964c:	781b      	ldrb	r3, [r3, #0]
 800964e:	f023 030f 	bic.w	r3, r3, #15
 8009652:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 8009654:	7bfb      	ldrb	r3, [r7, #15]
 8009656:	2b40      	cmp	r3, #64	@ 0x40
 8009658:	d002      	beq.n	8009660 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 800965a:	7bfb      	ldrb	r3, [r7, #15]
 800965c:	2b60      	cmp	r3, #96	@ 0x60
 800965e:	d101      	bne.n	8009664 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 8009660:	2301      	movs	r3, #1
 8009662:	e000      	b.n	8009666 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 8009664:	2300      	movs	r3, #0
 8009666:	2b00      	cmp	r3, #0
 8009668:	d104      	bne.n	8009674 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 800966a:	f240 21f1 	movw	r1, #753	@ 0x2f1
 800966e:	480f      	ldr	r0, [pc, #60]	@ (80096ac <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 8009670:	f7f7 fd5e 	bl	8001130 <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 8009674:	7bfb      	ldrb	r3, [r7, #15]
 8009676:	2b40      	cmp	r3, #64	@ 0x40
 8009678:	d004      	beq.n	8009684 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 800967a:	2b60      	cmp	r3, #96	@ 0x60
 800967c:	d105      	bne.n	800968a <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 800967e:	233e      	movs	r3, #62	@ 0x3e
 8009680:	61bb      	str	r3, [r7, #24]
                    break;
 8009682:	e008      	b.n	8009696 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 8009684:	232a      	movs	r3, #42	@ 0x2a
 8009686:	61bb      	str	r3, [r7, #24]
                    break;
 8009688:	e005      	b.n	8009696 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 800968a:	4809      	ldr	r0, [pc, #36]	@ (80096b0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 800968c:	f016 ff7e 	bl	802058c <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 8009690:	232a      	movs	r3, #42	@ 0x2a
 8009692:	61bb      	str	r3, [r7, #24]
                break;
 8009694:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 8009696:	69b9      	ldr	r1, [r7, #24]
 8009698:	6878      	ldr	r0, [r7, #4]
 800969a:	f7ff ff85 	bl	80095a8 <prvPacketBuffer_to_NetworkBuffer>
 800969e:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 80096a0:	69fb      	ldr	r3, [r7, #28]
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3720      	adds	r7, #32
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}
 80096aa:	bf00      	nop
 80096ac:	080230ec 	.word	0x080230ec
 80096b0:	080231c4 	.word	0x080231c4

080096b4 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 80096ba:	f7fa fdcf 	bl	800425c <xTaskGetCurrentTaskHandle>
 80096be:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 80096c0:	f7fe ff6e 	bl	80085a0 <FreeRTOS_GetIPTaskHandle>
 80096c4:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 80096c6:	68ba      	ldr	r2, [r7, #8]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	429a      	cmp	r2, r3
 80096cc:	d102      	bne.n	80096d4 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 80096ce:	2301      	movs	r3, #1
 80096d0:	60fb      	str	r3, [r7, #12]
 80096d2:	e001      	b.n	80096d8 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 80096d4:	2300      	movs	r3, #0
 80096d6:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 80096d8:	68fb      	ldr	r3, [r7, #12]
}
 80096da:	4618      	mov	r0, r3
 80096dc:	3710      	adds	r7, #16
 80096de:	46bd      	mov	sp, r7
 80096e0:	bd80      	pop	{r7, pc}
	...

080096e4 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d104      	bne.n	80096fc <prvProcessNetworkDownEvent+0x18>
 80096f2:	f240 3137 	movw	r1, #823	@ 0x337
 80096f6:	4857      	ldr	r0, [pc, #348]	@ (8009854 <prvProcessNetworkDownEvent+0x170>)
 80096f8:	f7f7 fd1a 	bl	8001130 <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	689b      	ldr	r3, [r3, #8]
 8009700:	2b00      	cmp	r3, #0
 8009702:	d104      	bne.n	800970e <prvProcessNetworkDownEvent+0x2a>
 8009704:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8009708:	4852      	ldr	r0, [pc, #328]	@ (8009854 <prvProcessNetworkDownEvent+0x170>)
 800970a:	f7f7 fd11 	bl	8001130 <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 800970e:	2000      	movs	r0, #0
 8009710:	f7ff fe6a 	bl	80093e8 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8009714:	6878      	ldr	r0, [r7, #4]
 8009716:	f002 ffd7 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 800971a:	60f8      	str	r0, [r7, #12]
 800971c:	e041      	b.n	80097a2 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 800971e:	68fa      	ldr	r2, [r7, #12]
 8009720:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009724:	f36f 1304 	bfc	r3, #4, #1
 8009728:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009732:	f003 0304 	and.w	r3, r3, #4
 8009736:	b2db      	uxtb	r3, r3
 8009738:	2b00      	cmp	r3, #0
 800973a:	d003      	beq.n	8009744 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 800973c:	2100      	movs	r1, #0
 800973e:	68f8      	ldr	r0, [r7, #12]
 8009740:	f001 f9c8 	bl	800aad4 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800974a:	f003 0308 	and.w	r3, r3, #8
 800974e:	b2db      	uxtb	r3, r3
 8009750:	2b00      	cmp	r3, #0
 8009752:	d003      	beq.n	800975c <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 8009754:	2001      	movs	r0, #1
 8009756:	f7f7 fd1f 	bl	8001198 <vApplicationIPNetworkEventHook>
 800975a:	e006      	b.n	800976a <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 800975c:	68fa      	ldr	r2, [r7, #12]
 800975e:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009762:	f043 0308 	orr.w	r3, r3, #8
 8009766:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 800976a:	68f8      	ldr	r0, [r7, #12]
 800976c:	f7fd f8c0 	bl	80068f0 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 8009770:	68fb      	ldr	r3, [r7, #12]
 8009772:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009776:	f003 0304 	and.w	r3, r3, #4
 800977a:	b2db      	uxtb	r3, r3
 800977c:	2b00      	cmp	r3, #0
 800977e:	d00b      	beq.n	8009798 <prvProcessNetworkDownEvent+0xb4>
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009786:	f003 0302 	and.w	r3, r3, #2
 800978a:	b2db      	uxtb	r3, r3
 800978c:	2b00      	cmp	r3, #0
 800978e:	d003      	beq.n	8009798 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 8009790:	2100      	movs	r1, #0
 8009792:	68f8      	ldr	r0, [r7, #12]
 8009794:	f7ff fe5c 	bl	8009450 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 8009798:	68f9      	ldr	r1, [r7, #12]
 800979a:	6878      	ldr	r0, [r7, #4]
 800979c:	f002 ffb6 	bl	800c70c <FreeRTOS_NextEndPoint>
 80097a0:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1ba      	bne.n	800971e <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	689b      	ldr	r3, [r3, #8]
 80097ac:	6878      	ldr	r0, [r7, #4]
 80097ae:	4798      	blx	r3
 80097b0:	4603      	mov	r3, r0
 80097b2:	2b01      	cmp	r3, #1
 80097b4:	d147      	bne.n	8009846 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	7f13      	ldrb	r3, [r2, #28]
 80097ba:	f043 0301 	orr.w	r3, r3, #1
 80097be:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 80097c0:	6878      	ldr	r0, [r7, #4]
 80097c2:	f002 ff81 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 80097c6:	60f8      	str	r0, [r7, #12]
 80097c8:	e039      	b.n	800983e <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80097d0:	f003 0304 	and.w	r3, r3, #4
 80097d4:	b2db      	uxtb	r3, r3
 80097d6:	2b00      	cmp	r3, #0
 80097d8:	d00c      	beq.n	80097f4 <prvProcessNetworkDownEvent+0x110>
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80097e0:	f003 0302 	and.w	r3, r3, #2
 80097e4:	b2db      	uxtb	r3, r3
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d004      	beq.n	80097f4 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 80097ea:	68f9      	ldr	r1, [r7, #12]
 80097ec:	2001      	movs	r0, #1
 80097ee:	f002 fd9f 	bl	800c330 <vRAProcess>
 80097f2:	e01f      	b.n	8009834 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80097fa:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80097fe:	b2db      	uxtb	r3, r3
 8009800:	2b00      	cmp	r3, #0
 8009802:	d002      	beq.n	800980a <prvProcessNetworkDownEvent+0x126>
 8009804:	2b01      	cmp	r3, #1
 8009806:	d008      	beq.n	800981a <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 8009808:	e011      	b.n	800982e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 800980a:	68f8      	ldr	r0, [r7, #12]
 800980c:	68fb      	ldr	r3, [r7, #12]
 800980e:	331c      	adds	r3, #28
 8009810:	221c      	movs	r2, #28
 8009812:	4619      	mov	r1, r3
 8009814:	f017 f8d6 	bl	80209c4 <memcpy>
                            break;
 8009818:	e009      	b.n	800982e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	3390      	adds	r3, #144	@ 0x90
 8009824:	2258      	movs	r2, #88	@ 0x58
 8009826:	4619      	mov	r1, r3
 8009828:	f017 f8cc 	bl	80209c4 <memcpy>
                            break;
 800982c:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 800982e:	68f8      	ldr	r0, [r7, #12]
 8009830:	f7fe fec2 	bl	80085b8 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 8009834:	68f9      	ldr	r1, [r7, #12]
 8009836:	6878      	ldr	r0, [r7, #4]
 8009838:	f002 ff68 	bl	800c70c <FreeRTOS_NextEndPoint>
 800983c:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	2b00      	cmp	r3, #0
 8009842:	d1c2      	bne.n	80097ca <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 8009844:	e002      	b.n	800984c <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 8009846:	2000      	movs	r0, #0
 8009848:	f7ff fe48 	bl	80094dc <vSetAllNetworksUp>
}
 800984c:	bf00      	nop
 800984e:	3710      	adds	r7, #16
 8009850:	46bd      	mov	sp, r7
 8009852:	bd80      	pop	{r7, pc}
 8009854:	080230ec 	.word	0x080230ec

08009858 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 8009858:	b580      	push	{r7, lr}
 800985a:	b082      	sub	sp, #8
 800985c:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 800985e:	f7ff fb83 	bl	8008f68 <xIPIsNetworkTaskReady>
 8009862:	4603      	mov	r3, r0
 8009864:	2b00      	cmp	r3, #0
 8009866:	d004      	beq.n	8009872 <vPreCheckConfigs+0x1a>
 8009868:	f240 31db 	movw	r1, #987	@ 0x3db
 800986c:	4831      	ldr	r0, [pc, #196]	@ (8009934 <vPreCheckConfigs+0xdc>)
 800986e:	f7f7 fc5f 	bl	8001130 <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 8009872:	4b31      	ldr	r3, [pc, #196]	@ (8009938 <vPreCheckConfigs+0xe0>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	2b00      	cmp	r3, #0
 8009878:	d004      	beq.n	8009884 <vPreCheckConfigs+0x2c>
 800987a:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 800987e:	482d      	ldr	r0, [pc, #180]	@ (8009934 <vPreCheckConfigs+0xdc>)
 8009880:	f7f7 fc56 	bl	8001130 <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 8009884:	f7fe fe8c 	bl	80085a0 <FreeRTOS_GetIPTaskHandle>
 8009888:	4603      	mov	r3, r0
 800988a:	2b00      	cmp	r3, #0
 800988c:	d004      	beq.n	8009898 <vPreCheckConfigs+0x40>
 800988e:	f240 31dd 	movw	r1, #989	@ 0x3dd
 8009892:	4828      	ldr	r0, [pc, #160]	@ (8009934 <vPreCheckConfigs+0xdc>)
 8009894:	f7f7 fc4c 	bl	8001130 <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 8009898:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800989c:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	f240 52db 	movw	r2, #1499	@ 0x5db
 80098a4:	4293      	cmp	r3, r2
 80098a6:	d804      	bhi.n	80098b2 <vPreCheckConfigs+0x5a>
 80098a8:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 80098ac:	4821      	ldr	r0, [pc, #132]	@ (8009934 <vPreCheckConfigs+0xdc>)
 80098ae:	f7f7 fc3f 	bl	8001130 <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 80098b2:	230e      	movs	r3, #14
 80098b4:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	2b0e      	cmp	r3, #14
 80098ba:	d004      	beq.n	80098c6 <vPreCheckConfigs+0x6e>
 80098bc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 80098c0:	481c      	ldr	r0, [pc, #112]	@ (8009934 <vPreCheckConfigs+0xdc>)
 80098c2:	f7f7 fc35 	bl	8001130 <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 80098c6:	231c      	movs	r3, #28
 80098c8:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	2b1c      	cmp	r3, #28
 80098ce:	d004      	beq.n	80098da <vPreCheckConfigs+0x82>
 80098d0:	f240 4102 	movw	r1, #1026	@ 0x402
 80098d4:	4817      	ldr	r0, [pc, #92]	@ (8009934 <vPreCheckConfigs+0xdc>)
 80098d6:	f7f7 fc2b 	bl	8001130 <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 80098da:	2314      	movs	r3, #20
 80098dc:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	2b14      	cmp	r3, #20
 80098e2:	d004      	beq.n	80098ee <vPreCheckConfigs+0x96>
 80098e4:	f240 4105 	movw	r1, #1029	@ 0x405
 80098e8:	4812      	ldr	r0, [pc, #72]	@ (8009934 <vPreCheckConfigs+0xdc>)
 80098ea:	f7f7 fc21 	bl	8001130 <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 80098ee:	2308      	movs	r3, #8
 80098f0:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	2b08      	cmp	r3, #8
 80098f6:	d004      	beq.n	8009902 <vPreCheckConfigs+0xaa>
 80098f8:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 80098fc:	480d      	ldr	r0, [pc, #52]	@ (8009934 <vPreCheckConfigs+0xdc>)
 80098fe:	f7f7 fc17 	bl	8001130 <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 8009902:	2308      	movs	r3, #8
 8009904:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	2b08      	cmp	r3, #8
 800990a:	d004      	beq.n	8009916 <vPreCheckConfigs+0xbe>
 800990c:	f240 410b 	movw	r1, #1035	@ 0x40b
 8009910:	4808      	ldr	r0, [pc, #32]	@ (8009934 <vPreCheckConfigs+0xdc>)
 8009912:	f7f7 fc0d 	bl	8001130 <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 8009916:	2324      	movs	r3, #36	@ 0x24
 8009918:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	2b24      	cmp	r3, #36	@ 0x24
 800991e:	d004      	beq.n	800992a <vPreCheckConfigs+0xd2>
 8009920:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8009924:	4803      	ldr	r0, [pc, #12]	@ (8009934 <vPreCheckConfigs+0xdc>)
 8009926:	f7f7 fc03 	bl	8001130 <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 800992a:	bf00      	nop
 800992c:	3708      	adds	r7, #8
 800992e:	46bd      	mov	sp, r7
 8009930:	bd80      	pop	{r7, pc}
 8009932:	bf00      	nop
 8009934:	080230ec 	.word	0x080230ec
 8009938:	20000e48 	.word	0x20000e48

0800993c <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 800993c:	b580      	push	{r7, lr}
 800993e:	b084      	sub	sp, #16
 8009940:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 8009942:	f00c fd7f 	bl	8016444 <uxGetMinimumFreeNetworkBuffers>
 8009946:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 8009948:	4b24      	ldr	r3, [pc, #144]	@ (80099dc <vPrintResourceStats+0xa0>)
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	68fa      	ldr	r2, [r7, #12]
 800994e:	429a      	cmp	r2, r3
 8009950:	d20a      	bcs.n	8009968 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 8009952:	4a22      	ldr	r2, [pc, #136]	@ (80099dc <vPrintResourceStats+0xa0>)
 8009954:	68fb      	ldr	r3, [r7, #12]
 8009956:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 8009958:	f00c fd80 	bl	801645c <uxGetNumberOfFreeNetworkBuffers>
 800995c:	4603      	mov	r3, r0
 800995e:	68fa      	ldr	r2, [r7, #12]
 8009960:	4619      	mov	r1, r3
 8009962:	481f      	ldr	r0, [pc, #124]	@ (80099e0 <vPrintResourceStats+0xa4>)
 8009964:	f016 fe12 	bl	802058c <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 8009968:	f7fb ff1e 	bl	80057a8 <xPortGetMinimumEverFreeHeapSize>
 800996c:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 800996e:	4b1d      	ldr	r3, [pc, #116]	@ (80099e4 <vPrintResourceStats+0xa8>)
 8009970:	681b      	ldr	r3, [r3, #0]
 8009972:	2b00      	cmp	r3, #0
 8009974:	d103      	bne.n	800997e <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 8009976:	4a1b      	ldr	r2, [pc, #108]	@ (80099e4 <vPrintResourceStats+0xa8>)
 8009978:	68bb      	ldr	r3, [r7, #8]
 800997a:	6013      	str	r3, [r2, #0]
 800997c:	e019      	b.n	80099b2 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 800997e:	68bb      	ldr	r3, [r7, #8]
 8009980:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009984:	d215      	bcs.n	80099b2 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 8009986:	4b17      	ldr	r3, [pc, #92]	@ (80099e4 <vPrintResourceStats+0xa8>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	225a      	movs	r2, #90	@ 0x5a
 800998c:	fb03 f202 	mul.w	r2, r3, r2
 8009990:	68bb      	ldr	r3, [r7, #8]
 8009992:	2164      	movs	r1, #100	@ 0x64
 8009994:	fb01 f303 	mul.w	r3, r1, r3
 8009998:	429a      	cmp	r2, r3
 800999a:	d90a      	bls.n	80099b2 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 800999c:	4a11      	ldr	r2, [pc, #68]	@ (80099e4 <vPrintResourceStats+0xa8>)
 800999e:	68bb      	ldr	r3, [r7, #8]
 80099a0:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 80099a2:	f7fb fef5 	bl	8005790 <xPortGetFreeHeapSize>
 80099a6:	4603      	mov	r3, r0
 80099a8:	68ba      	ldr	r2, [r7, #8]
 80099aa:	4619      	mov	r1, r3
 80099ac:	480e      	ldr	r0, [pc, #56]	@ (80099e8 <vPrintResourceStats+0xac>)
 80099ae:	f016 fded 	bl	802058c <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 80099b2:	2300      	movs	r3, #0
 80099b4:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 80099b6:	f7ff fae3 	bl	8008f80 <uxGetMinimumIPQueueSpace>
 80099ba:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 80099bc:	4b0b      	ldr	r3, [pc, #44]	@ (80099ec <vPrintResourceStats+0xb0>)
 80099be:	681b      	ldr	r3, [r3, #0]
 80099c0:	687a      	ldr	r2, [r7, #4]
 80099c2:	429a      	cmp	r2, r3
 80099c4:	d006      	beq.n	80099d4 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 80099c6:	4a09      	ldr	r2, [pc, #36]	@ (80099ec <vPrintResourceStats+0xb0>)
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 80099cc:	6879      	ldr	r1, [r7, #4]
 80099ce:	4808      	ldr	r0, [pc, #32]	@ (80099f0 <vPrintResourceStats+0xb4>)
 80099d0:	f016 fddc 	bl	802058c <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 80099d4:	bf00      	nop
 80099d6:	3710      	adds	r7, #16
 80099d8:	46bd      	mov	sp, r7
 80099da:	bd80      	pop	{r7, pc}
 80099dc:	20000018 	.word	0x20000018
 80099e0:	0802325c 	.word	0x0802325c
 80099e4:	20000ec4 	.word	0x20000ec4
 80099e8:	08023280 	.word	0x08023280
 80099ec:	20000ec8 	.word	0x20000ec8
 80099f0:	0802329c 	.word	0x0802329c

080099f4 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 80099f4:	b480      	push	{r7}
 80099f6:	b083      	sub	sp, #12
 80099f8:	af00      	add	r7, sp, #0
 80099fa:	6078      	str	r0, [r7, #4]
 80099fc:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 80099fe:	687a      	ldr	r2, [r7, #4]
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	4293      	cmp	r3, r2
 8009a04:	bf38      	it	cc
 8009a06:	4613      	movcc	r3, r2
}
 8009a08:	4618      	mov	r0, r3
 8009a0a:	370c      	adds	r7, #12
 8009a0c:	46bd      	mov	sp, r7
 8009a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a12:	4770      	bx	lr

08009a14 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 8009a14:	b480      	push	{r7}
 8009a16:	b083      	sub	sp, #12
 8009a18:	af00      	add	r7, sp, #0
 8009a1a:	6078      	str	r0, [r7, #4]
 8009a1c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 8009a1e:	687a      	ldr	r2, [r7, #4]
 8009a20:	683b      	ldr	r3, [r7, #0]
 8009a22:	4293      	cmp	r3, r2
 8009a24:	bfa8      	it	ge
 8009a26:	4613      	movge	r3, r2
}
 8009a28:	4618      	mov	r0, r3
 8009a2a:	370c      	adds	r7, #12
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a32:	4770      	bx	lr

08009a34 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 8009a34:	b480      	push	{r7}
 8009a36:	b083      	sub	sp, #12
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
 8009a3c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	683b      	ldr	r3, [r7, #0]
 8009a42:	4293      	cmp	r3, r2
 8009a44:	bf28      	it	cs
 8009a46:	4613      	movcs	r3, r2
}
 8009a48:	4618      	mov	r0, r3
 8009a4a:	370c      	adds	r7, #12
 8009a4c:	46bd      	mov	sp, r7
 8009a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a52:	4770      	bx	lr

08009a54 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 8009a54:	b480      	push	{r7}
 8009a56:	b083      	sub	sp, #12
 8009a58:	af00      	add	r7, sp, #0
 8009a5a:	6078      	str	r0, [r7, #4]
 8009a5c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	683b      	ldr	r3, [r7, #0]
 8009a62:	4293      	cmp	r3, r2
 8009a64:	bf28      	it	cs
 8009a66:	4613      	movcs	r3, r2
}
 8009a68:	4618      	mov	r0, r3
 8009a6a:	370c      	adds	r7, #12
 8009a6c:	46bd      	mov	sp, r7
 8009a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a72:	4770      	bx	lr

08009a74 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 8009a74:	b580      	push	{r7, lr}
 8009a76:	b084      	sub	sp, #16
 8009a78:	af00      	add	r7, sp, #0
 8009a7a:	6078      	str	r0, [r7, #4]
 8009a7c:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 8009a82:	683b      	ldr	r3, [r7, #0]
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d104      	bne.n	8009a92 <FreeRTOS_round_up+0x1e>
 8009a88:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 8009a8c:	480a      	ldr	r0, [pc, #40]	@ (8009ab8 <FreeRTOS_round_up+0x44>)
 8009a8e:	f7f7 fb4f 	bl	8001130 <vAssertCalled>

    if( d != 0U )
 8009a92:	683b      	ldr	r3, [r7, #0]
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	d00a      	beq.n	8009aae <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	683b      	ldr	r3, [r7, #0]
 8009a9c:	4413      	add	r3, r2
 8009a9e:	1e5a      	subs	r2, r3, #1
 8009aa0:	683b      	ldr	r3, [r7, #0]
 8009aa2:	fbb2 f2f3 	udiv	r2, r2, r3
 8009aa6:	683b      	ldr	r3, [r7, #0]
 8009aa8:	fb02 f303 	mul.w	r3, r2, r3
 8009aac:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 8009aae:	68fb      	ldr	r3, [r7, #12]
}
 8009ab0:	4618      	mov	r0, r3
 8009ab2:	3710      	adds	r7, #16
 8009ab4:	46bd      	mov	sp, r7
 8009ab6:	bd80      	pop	{r7, pc}
 8009ab8:	080230ec 	.word	0x080230ec

08009abc <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 8009abc:	b480      	push	{r7}
 8009abe:	b083      	sub	sp, #12
 8009ac0:	af00      	add	r7, sp, #0
 8009ac2:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	3301      	adds	r3, #1
 8009ace:	781b      	ldrb	r3, [r3, #0]
 8009ad0:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 8009ad2:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	3302      	adds	r3, #2
 8009ad8:	781b      	ldrb	r3, [r3, #0]
 8009ada:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 8009adc:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 8009ade:	687a      	ldr	r2, [r7, #4]
 8009ae0:	3203      	adds	r2, #3
 8009ae2:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 8009ae4:	4313      	orrs	r3, r2
}
 8009ae6:	4618      	mov	r0, r3
 8009ae8:	370c      	adds	r7, #12
 8009aea:	46bd      	mov	sp, r7
 8009aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009af0:	4770      	bx	lr

08009af2 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 8009af2:	b480      	push	{r7}
 8009af4:	b083      	sub	sp, #12
 8009af6:	af00      	add	r7, sp, #0
 8009af8:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	781b      	ldrb	r3, [r3, #0]
 8009afe:	021b      	lsls	r3, r3, #8
 8009b00:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 8009b02:	687a      	ldr	r2, [r7, #4]
 8009b04:	3201      	adds	r2, #1
 8009b06:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 8009b08:	4313      	orrs	r3, r2
 8009b0a:	b29b      	uxth	r3, r3
}
 8009b0c:	4618      	mov	r0, r3
 8009b0e:	370c      	adds	r7, #12
 8009b10:	46bd      	mov	sp, r7
 8009b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b16:	4770      	bx	lr

08009b18 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 8009b18:	b580      	push	{r7, lr}
 8009b1a:	b08a      	sub	sp, #40	@ 0x28
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 8009b22:	2300      	movs	r3, #0
 8009b24:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 8009b2e:	683b      	ldr	r3, [r7, #0]
 8009b30:	2b21      	cmp	r3, #33	@ 0x21
 8009b32:	d802      	bhi.n	8009b3a <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 8009b34:	2301      	movs	r3, #1
 8009b36:	61fb      	str	r3, [r7, #28]
                break;
 8009b38:	e06f      	b.n	8009c1a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 8009b3a:	69bb      	ldr	r3, [r7, #24]
 8009b3c:	7b9b      	ldrb	r3, [r3, #14]
 8009b3e:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8009b40:	8afb      	ldrh	r3, [r7, #22]
 8009b42:	2b44      	cmp	r3, #68	@ 0x44
 8009b44:	d902      	bls.n	8009b4c <xCheckIPv4SizeFields+0x34>
 8009b46:	8afb      	ldrh	r3, [r7, #22]
 8009b48:	2b4f      	cmp	r3, #79	@ 0x4f
 8009b4a:	d902      	bls.n	8009b52 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 8009b4c:	2302      	movs	r3, #2
 8009b4e:	61fb      	str	r3, [r7, #28]
                break;
 8009b50:	e063      	b.n	8009c1a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 8009b52:	8afb      	ldrh	r3, [r7, #22]
 8009b54:	009b      	lsls	r3, r3, #2
 8009b56:	b29b      	uxth	r3, r3
 8009b58:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8009b5c:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 8009b5e:	8afb      	ldrh	r3, [r7, #22]
 8009b60:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 8009b62:	693b      	ldr	r3, [r7, #16]
 8009b64:	330e      	adds	r3, #14
 8009b66:	683a      	ldr	r2, [r7, #0]
 8009b68:	429a      	cmp	r2, r3
 8009b6a:	d202      	bcs.n	8009b72 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	61fb      	str	r3, [r7, #28]
                break;
 8009b70:	e053      	b.n	8009c1a <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 8009b72:	69bb      	ldr	r3, [r7, #24]
 8009b74:	7c1a      	ldrb	r2, [r3, #16]
 8009b76:	7c5b      	ldrb	r3, [r3, #17]
 8009b78:	021b      	lsls	r3, r3, #8
 8009b7a:	4313      	orrs	r3, r2
 8009b7c:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 8009b7e:	89fb      	ldrh	r3, [r7, #14]
 8009b80:	021b      	lsls	r3, r3, #8
 8009b82:	b21a      	sxth	r2, r3
 8009b84:	89fb      	ldrh	r3, [r7, #14]
 8009b86:	0a1b      	lsrs	r3, r3, #8
 8009b88:	b29b      	uxth	r3, r3
 8009b8a:	b21b      	sxth	r3, r3
 8009b8c:	4313      	orrs	r3, r2
 8009b8e:	b21b      	sxth	r3, r3
 8009b90:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 8009b92:	89fb      	ldrh	r3, [r7, #14]
 8009b94:	330e      	adds	r3, #14
 8009b96:	683a      	ldr	r2, [r7, #0]
 8009b98:	429a      	cmp	r2, r3
 8009b9a:	d202      	bcs.n	8009ba2 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 8009b9c:	2304      	movs	r3, #4
 8009b9e:	61fb      	str	r3, [r7, #28]
                break;
 8009ba0:	e03b      	b.n	8009c1a <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009ba2:	69bb      	ldr	r3, [r7, #24]
 8009ba4:	7ddb      	ldrb	r3, [r3, #23]
 8009ba6:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8009ba8:	7b7b      	ldrb	r3, [r7, #13]
 8009baa:	2b11      	cmp	r3, #17
 8009bac:	d103      	bne.n	8009bb6 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 8009bae:	693b      	ldr	r3, [r7, #16]
 8009bb0:	3316      	adds	r3, #22
 8009bb2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bb4:	e013      	b.n	8009bde <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 8009bb6:	7b7b      	ldrb	r3, [r7, #13]
 8009bb8:	2b06      	cmp	r3, #6
 8009bba:	d103      	bne.n	8009bc4 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 8009bbc:	693b      	ldr	r3, [r7, #16]
 8009bbe:	3322      	adds	r3, #34	@ 0x22
 8009bc0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bc2:	e00c      	b.n	8009bde <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 8009bc4:	7b7b      	ldrb	r3, [r7, #13]
 8009bc6:	2b01      	cmp	r3, #1
 8009bc8:	d002      	beq.n	8009bd0 <xCheckIPv4SizeFields+0xb8>
 8009bca:	7b7b      	ldrb	r3, [r7, #13]
 8009bcc:	2b02      	cmp	r3, #2
 8009bce:	d103      	bne.n	8009bd8 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 8009bd0:	693b      	ldr	r3, [r7, #16]
 8009bd2:	3316      	adds	r3, #22
 8009bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009bd6:	e002      	b.n	8009bde <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 8009bd8:	2305      	movs	r3, #5
 8009bda:	61fb      	str	r3, [r7, #28]
                break;
 8009bdc:	e01d      	b.n	8009c1a <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 8009bde:	683a      	ldr	r2, [r7, #0]
 8009be0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009be2:	429a      	cmp	r2, r3
 8009be4:	d202      	bcs.n	8009bec <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 8009be6:	2306      	movs	r3, #6
 8009be8:	61fb      	str	r3, [r7, #28]
                break;
 8009bea:	e016      	b.n	8009c1a <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 8009bec:	89fb      	ldrh	r3, [r7, #14]
 8009bee:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 8009bf0:	693b      	ldr	r3, [r7, #16]
 8009bf2:	b29b      	uxth	r3, r3
 8009bf4:	461a      	mov	r2, r3
 8009bf6:	68bb      	ldr	r3, [r7, #8]
 8009bf8:	1a9b      	subs	r3, r3, r2
 8009bfa:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	2b07      	cmp	r3, #7
 8009c00:	d906      	bls.n	8009c10 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 8009c02:	693a      	ldr	r2, [r7, #16]
 8009c04:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8009c08:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 8009c0a:	68ba      	ldr	r2, [r7, #8]
 8009c0c:	429a      	cmp	r2, r3
 8009c0e:	d902      	bls.n	8009c16 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 8009c10:	2307      	movs	r3, #7
 8009c12:	61fb      	str	r3, [r7, #28]
                break;
 8009c14:	e001      	b.n	8009c1a <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 8009c16:	2301      	movs	r3, #1
 8009c18:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 8009c1a:	6a3b      	ldr	r3, [r7, #32]
 8009c1c:	2b01      	cmp	r3, #1
 8009c1e:	d003      	beq.n	8009c28 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 8009c20:	69f9      	ldr	r1, [r7, #28]
 8009c22:	4804      	ldr	r0, [pc, #16]	@ (8009c34 <xCheckIPv4SizeFields+0x11c>)
 8009c24:	f016 fcb2 	bl	802058c <lUDPLoggingPrintf>
        }

        return xResult;
 8009c28:	6a3b      	ldr	r3, [r7, #32]
    }
 8009c2a:	4618      	mov	r0, r3
 8009c2c:	3728      	adds	r7, #40	@ 0x28
 8009c2e:	46bd      	mov	sp, r7
 8009c30:	bd80      	pop	{r7, pc}
 8009c32:	bf00      	nop
 8009c34:	08023368 	.word	0x08023368

08009c38 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 8009c38:	b480      	push	{r7}
 8009c3a:	b085      	sub	sp, #20
 8009c3c:	af00      	add	r7, sp, #0
 8009c3e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	061a      	lsls	r2, r3, #24
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	021b      	lsls	r3, r3, #8
 8009c48:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009c4c:	431a      	orrs	r2, r3
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	0a1b      	lsrs	r3, r3, #8
 8009c52:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009c56:	431a      	orrs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	0e1b      	lsrs	r3, r3, #24
 8009c5c:	4313      	orrs	r3, r2
 8009c5e:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 8009c60:	68bb      	ldr	r3, [r7, #8]
 8009c62:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 8009c66:	d306      	bcc.n	8009c76 <xIsIPv4Multicast+0x3e>
 8009c68:	68bb      	ldr	r3, [r7, #8]
 8009c6a:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 8009c6e:	d202      	bcs.n	8009c76 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 8009c70:	2301      	movs	r3, #1
 8009c72:	60fb      	str	r3, [r7, #12]
 8009c74:	e001      	b.n	8009c7a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 8009c76:	2300      	movs	r3, #0
 8009c78:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
}
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	3714      	adds	r7, #20
 8009c80:	46bd      	mov	sp, r7
 8009c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c86:	4770      	bx	lr

08009c88 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b086      	sub	sp, #24
 8009c8c:	af00      	add	r7, sp, #0
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009c94:	2301      	movs	r3, #1
 8009c96:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 8009c98:	7dfb      	ldrb	r3, [r7, #23]
 8009c9a:	2b01      	cmp	r3, #1
 8009c9c:	d10c      	bne.n	8009cb8 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 8009c9e:	68bb      	ldr	r3, [r7, #8]
 8009ca0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009ca2:	68bb      	ldr	r3, [r7, #8]
 8009ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009ca6:	4619      	mov	r1, r3
 8009ca8:	4610      	mov	r0, r2
 8009caa:	f7ff ff35 	bl	8009b18 <xCheckIPv4SizeFields>
 8009cae:	4603      	mov	r3, r0
 8009cb0:	2b01      	cmp	r3, #1
 8009cb2:	d001      	beq.n	8009cb8 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 8009cb8:	7dfb      	ldrb	r3, [r7, #23]
 8009cba:	2b01      	cmp	r3, #1
 8009cbc:	d134      	bne.n	8009d28 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	7ddb      	ldrb	r3, [r3, #23]
 8009cc2:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009cc8:	3322      	adds	r3, #34	@ 0x22
 8009cca:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8009ccc:	7dbb      	ldrb	r3, [r7, #22]
 8009cce:	2b11      	cmp	r3, #17
 8009cd0:	d12a      	bne.n	8009d28 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 8009cd2:	693b      	ldr	r3, [r7, #16]
 8009cd4:	88db      	ldrh	r3, [r3, #6]
 8009cd6:	b29b      	uxth	r3, r3
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d125      	bne.n	8009d28 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 8009cdc:	4b15      	ldr	r3, [pc, #84]	@ (8009d34 <prvAllowIPPacketIPv4+0xac>)
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	2b04      	cmp	r3, #4
 8009ce2:	dc1f      	bgt.n	8009d24 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009cea:	061a      	lsls	r2, r3, #24
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009cf2:	021b      	lsls	r3, r3, #8
 8009cf4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009cf8:	431a      	orrs	r2, r3
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009d00:	0a1b      	lsrs	r3, r3, #8
 8009d02:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009d06:	431a      	orrs	r2, r3
 8009d08:	68fb      	ldr	r3, [r7, #12]
 8009d0a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8009d0e:	0e1b      	lsrs	r3, r3, #24
 8009d10:	4313      	orrs	r3, r2
 8009d12:	4619      	mov	r1, r3
 8009d14:	4808      	ldr	r0, [pc, #32]	@ (8009d38 <prvAllowIPPacketIPv4+0xb0>)
 8009d16:	f016 fc39 	bl	802058c <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 8009d1a:	4b06      	ldr	r3, [pc, #24]	@ (8009d34 <prvAllowIPPacketIPv4+0xac>)
 8009d1c:	681b      	ldr	r3, [r3, #0]
 8009d1e:	3301      	adds	r3, #1
 8009d20:	4a04      	ldr	r2, [pc, #16]	@ (8009d34 <prvAllowIPPacketIPv4+0xac>)
 8009d22:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 8009d24:	2300      	movs	r3, #0
 8009d26:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 8009d28:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d2a:	4618      	mov	r0, r3
 8009d2c:	3718      	adds	r7, #24
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	bd80      	pop	{r7, pc}
 8009d32:	bf00      	nop
 8009d34:	20000ecc 	.word	0x20000ecc
 8009d38:	0802338c 	.word	0x0802338c

08009d3c <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 8009d3c:	b580      	push	{r7, lr}
 8009d3e:	b08a      	sub	sp, #40	@ 0x28
 8009d40:	af00      	add	r7, sp, #0
 8009d42:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8009d44:	2301      	movs	r3, #1
 8009d46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8009d4a:	687b      	ldr	r3, [r7, #4]
 8009d4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d4e:	330e      	adds	r3, #14
 8009d50:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 8009d52:	6a3b      	ldr	r3, [r7, #32]
 8009d54:	781b      	ldrb	r3, [r3, #0]
 8009d56:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 8009d58:	69fb      	ldr	r3, [r7, #28]
 8009d5a:	009b      	lsls	r3, r3, #2
 8009d5c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8009d60:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 8009d62:	69bb      	ldr	r3, [r7, #24]
 8009d64:	3b14      	subs	r3, #20
 8009d66:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 8009d68:	687b      	ldr	r3, [r7, #4]
 8009d6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8009d6c:	69bb      	ldr	r3, [r7, #24]
 8009d6e:	330e      	adds	r3, #14
 8009d70:	4413      	add	r3, r2
 8009d72:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 8009d74:	687b      	ldr	r3, [r7, #4]
 8009d76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009d78:	3322      	adds	r3, #34	@ 0x22
 8009d7a:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 8009d7c:	687b      	ldr	r3, [r7, #4]
 8009d7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d80:	697b      	ldr	r3, [r7, #20]
 8009d82:	1ad3      	subs	r3, r2, r3
 8009d84:	3b22      	subs	r3, #34	@ 0x22
 8009d86:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 8009d88:	68ba      	ldr	r2, [r7, #8]
 8009d8a:	6939      	ldr	r1, [r7, #16]
 8009d8c:	68f8      	ldr	r0, [r7, #12]
 8009d8e:	f017 fdbe 	bl	802190e <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	1ad2      	subs	r2, r2, r3
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 8009d9e:	6a3b      	ldr	r3, [r7, #32]
 8009da0:	885b      	ldrh	r3, [r3, #2]
 8009da2:	b29b      	uxth	r3, r3
 8009da4:	021b      	lsls	r3, r3, #8
 8009da6:	b21a      	sxth	r2, r3
 8009da8:	6a3b      	ldr	r3, [r7, #32]
 8009daa:	885b      	ldrh	r3, [r3, #2]
 8009dac:	b29b      	uxth	r3, r3
 8009dae:	0a1b      	lsrs	r3, r3, #8
 8009db0:	b29b      	uxth	r3, r3
 8009db2:	b21b      	sxth	r3, r3
 8009db4:	4313      	orrs	r3, r2
 8009db6:	b21b      	sxth	r3, r3
 8009db8:	b29a      	uxth	r2, r3
 8009dba:	697b      	ldr	r3, [r7, #20]
 8009dbc:	b29b      	uxth	r3, r3
 8009dbe:	1ad3      	subs	r3, r2, r3
 8009dc0:	b29b      	uxth	r3, r3
 8009dc2:	021b      	lsls	r3, r3, #8
 8009dc4:	b29a      	uxth	r2, r3
 8009dc6:	6a3b      	ldr	r3, [r7, #32]
 8009dc8:	885b      	ldrh	r3, [r3, #2]
 8009dca:	b29b      	uxth	r3, r3
 8009dcc:	021b      	lsls	r3, r3, #8
 8009dce:	b219      	sxth	r1, r3
 8009dd0:	6a3b      	ldr	r3, [r7, #32]
 8009dd2:	885b      	ldrh	r3, [r3, #2]
 8009dd4:	b29b      	uxth	r3, r3
 8009dd6:	0a1b      	lsrs	r3, r3, #8
 8009dd8:	b29b      	uxth	r3, r3
 8009dda:	b21b      	sxth	r3, r3
 8009ddc:	430b      	orrs	r3, r1
 8009dde:	b21b      	sxth	r3, r3
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	4619      	mov	r1, r3
 8009de4:	697b      	ldr	r3, [r7, #20]
 8009de6:	1acb      	subs	r3, r1, r3
 8009de8:	0a1b      	lsrs	r3, r3, #8
 8009dea:	b29b      	uxth	r3, r3
 8009dec:	4313      	orrs	r3, r2
 8009dee:	b29a      	uxth	r2, r3
 8009df0:	6a3b      	ldr	r3, [r7, #32]
 8009df2:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 8009df4:	6a3b      	ldr	r3, [r7, #32]
 8009df6:	781b      	ldrb	r3, [r3, #0]
 8009df8:	f023 030f 	bic.w	r3, r3, #15
 8009dfc:	b2db      	uxtb	r3, r3
 8009dfe:	f043 0305 	orr.w	r3, r3, #5
 8009e02:	b2da      	uxtb	r2, r3
 8009e04:	6a3b      	ldr	r3, [r7, #32]
 8009e06:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 8009e08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8009e0c:	4618      	mov	r0, r3
 8009e0e:	3728      	adds	r7, #40	@ 0x28
 8009e10:	46bd      	mov	sp, r7
 8009e12:	bd80      	pop	{r7, pc}

08009e14 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 8009e14:	b580      	push	{r7, lr}
 8009e16:	b088      	sub	sp, #32
 8009e18:	af00      	add	r7, sp, #0
 8009e1a:	60f8      	str	r0, [r7, #12]
 8009e1c:	60b9      	str	r1, [r7, #8]
 8009e1e:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2b0f      	cmp	r3, #15
 8009e24:	d802      	bhi.n	8009e2c <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 8009e26:	2300      	movs	r3, #0
 8009e28:	61fb      	str	r3, [r7, #28]
 8009e2a:	e00e      	b.n	8009e4a <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 8009e2c:	f107 0314 	add.w	r3, r7, #20
 8009e30:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	681b      	ldr	r3, [r3, #0]
 8009e36:	461a      	mov	r2, r3
 8009e38:	69bb      	ldr	r3, [r7, #24]
 8009e3a:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 8009e3c:	697b      	ldr	r3, [r7, #20]
 8009e3e:	68b9      	ldr	r1, [r7, #8]
 8009e40:	4618      	mov	r0, r3
 8009e42:	f004 fac9 	bl	800e3d8 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 8009e46:	68bb      	ldr	r3, [r7, #8]
 8009e48:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 8009e4a:	69fb      	ldr	r3, [r7, #28]
}
 8009e4c:	4618      	mov	r0, r3
 8009e4e:	3720      	adds	r7, #32
 8009e50:	46bd      	mov	sp, r7
 8009e52:	bd80      	pop	{r7, pc}

08009e54 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 8009e54:	b480      	push	{r7}
 8009e56:	b085      	sub	sp, #20
 8009e58:	af00      	add	r7, sp, #0
 8009e5a:	6078      	str	r0, [r7, #4]
 8009e5c:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d010      	beq.n	8009e86 <xSend_UDP_Update_IPv4+0x32>
 8009e64:	683b      	ldr	r3, [r7, #0]
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00d      	beq.n	8009e86 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009e6e:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	689a      	ldr	r2, [r3, #8]
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f042 0208 	orr.w	r2, r2, #8
 8009e80:	731a      	strb	r2, [r3, #12]
 8009e82:	2200      	movs	r2, #0
 8009e84:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 8009e86:	2300      	movs	r3, #0
}
 8009e88:	4618      	mov	r0, r3
 8009e8a:	3714      	adds	r7, #20
 8009e8c:	46bd      	mov	sp, r7
 8009e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e92:	4770      	bx	lr

08009e94 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 8009e94:	b480      	push	{r7}
 8009e96:	b085      	sub	sp, #20
 8009e98:	af00      	add	r7, sp, #0
 8009e9a:	6078      	str	r0, [r7, #4]
 8009e9c:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	061a      	lsls	r2, r3, #24
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	021b      	lsls	r3, r3, #8
 8009ea6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009eaa:	431a      	orrs	r2, r3
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	0a1b      	lsrs	r3, r3, #8
 8009eb0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009eb4:	431a      	orrs	r2, r3
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	0e1b      	lsrs	r3, r3, #24
 8009eba:	4313      	orrs	r3, r2
 8009ebc:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 8009ebe:	683b      	ldr	r3, [r7, #0]
 8009ec0:	2201      	movs	r2, #1
 8009ec2:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 8009eca:	683b      	ldr	r3, [r7, #0]
 8009ecc:	225e      	movs	r2, #94	@ 0x5e
 8009ece:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 8009ed0:	68fb      	ldr	r3, [r7, #12]
 8009ed2:	0c1b      	lsrs	r3, r3, #16
 8009ed4:	b2db      	uxtb	r3, r3
 8009ed6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8009eda:	b2da      	uxtb	r2, r3
 8009edc:	683b      	ldr	r3, [r7, #0]
 8009ede:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 8009ee0:	68fb      	ldr	r3, [r7, #12]
 8009ee2:	0a1b      	lsrs	r3, r3, #8
 8009ee4:	b2da      	uxtb	r2, r3
 8009ee6:	683b      	ldr	r3, [r7, #0]
 8009ee8:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 8009eea:	68fb      	ldr	r3, [r7, #12]
 8009eec:	b2da      	uxtb	r2, r3
 8009eee:	683b      	ldr	r3, [r7, #0]
 8009ef0:	715a      	strb	r2, [r3, #5]
}
 8009ef2:	bf00      	nop
 8009ef4:	3714      	adds	r7, #20
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009efc:	4770      	bx	lr
	...

08009f00 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b08c      	sub	sp, #48	@ 0x30
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
 8009f08:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 8009f0a:	2300      	movs	r3, #0
 8009f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 8009f0e:	2300      	movs	r3, #0
 8009f10:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 8009f12:	2300      	movs	r3, #0
 8009f14:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 8009f1e:	2300      	movs	r3, #0
 8009f20:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 8009f22:	683b      	ldr	r3, [r7, #0]
 8009f24:	2b27      	cmp	r3, #39	@ 0x27
 8009f26:	d802      	bhi.n	8009f2e <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 8009f28:	2301      	movs	r3, #1
 8009f2a:	61fb      	str	r3, [r7, #28]
                break;
 8009f2c:	e098      	b.n	800a060 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 8009f2e:	693b      	ldr	r3, [r7, #16]
 8009f30:	7b9b      	ldrb	r3, [r3, #14]
 8009f32:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 8009f34:	89fb      	ldrh	r3, [r7, #14]
 8009f36:	111b      	asrs	r3, r3, #4
 8009f38:	f003 030f 	and.w	r3, r3, #15
 8009f3c:	2b06      	cmp	r3, #6
 8009f3e:	d002      	beq.n	8009f46 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 8009f40:	2302      	movs	r3, #2
 8009f42:	61fb      	str	r3, [r7, #28]
                break;
 8009f44:	e08c      	b.n	800a060 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 8009f46:	683b      	ldr	r3, [r7, #0]
 8009f48:	2b35      	cmp	r3, #53	@ 0x35
 8009f4a:	d802      	bhi.n	8009f52 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 8009f4c:	2303      	movs	r3, #3
 8009f4e:	61fb      	str	r3, [r7, #28]
                break;
 8009f50:	e086      	b.n	800a060 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 8009f52:	693b      	ldr	r3, [r7, #16]
 8009f54:	8a5b      	ldrh	r3, [r3, #18]
 8009f56:	b29b      	uxth	r3, r3
 8009f58:	021b      	lsls	r3, r3, #8
 8009f5a:	b21a      	sxth	r2, r3
 8009f5c:	693b      	ldr	r3, [r7, #16]
 8009f5e:	8a5b      	ldrh	r3, [r3, #18]
 8009f60:	b29b      	uxth	r3, r3
 8009f62:	0a1b      	lsrs	r3, r3, #8
 8009f64:	b29b      	uxth	r3, r3
 8009f66:	b21b      	sxth	r3, r3
 8009f68:	4313      	orrs	r3, r2
 8009f6a:	b21b      	sxth	r3, r3
 8009f6c:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 8009f6e:	89bb      	ldrh	r3, [r7, #12]
 8009f70:	3336      	adds	r3, #54	@ 0x36
 8009f72:	683a      	ldr	r2, [r7, #0]
 8009f74:	429a      	cmp	r2, r3
 8009f76:	d002      	beq.n	8009f7e <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 8009f78:	2304      	movs	r3, #4
 8009f7a:	61fb      	str	r3, [r7, #28]
                break;
 8009f7c:	e070      	b.n	800a060 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 8009f7e:	693b      	ldr	r3, [r7, #16]
 8009f80:	7d1b      	ldrb	r3, [r3, #20]
 8009f82:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 8009f86:	e015      	b.n	8009fb4 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 8009f88:	6a3b      	ldr	r3, [r7, #32]
 8009f8a:	3336      	adds	r3, #54	@ 0x36
 8009f8c:	697a      	ldr	r2, [r7, #20]
 8009f8e:	4413      	add	r3, r2
 8009f90:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 8009f92:	69bb      	ldr	r3, [r7, #24]
 8009f94:	785b      	ldrb	r3, [r3, #1]
 8009f96:	3301      	adds	r3, #1
 8009f98:	00db      	lsls	r3, r3, #3
 8009f9a:	461a      	mov	r2, r3
 8009f9c:	6a3b      	ldr	r3, [r7, #32]
 8009f9e:	4413      	add	r3, r2
 8009fa0:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 8009fa2:	69bb      	ldr	r3, [r7, #24]
 8009fa4:	781b      	ldrb	r3, [r3, #0]
 8009fa6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 8009faa:	6a3b      	ldr	r3, [r7, #32]
 8009fac:	3336      	adds	r3, #54	@ 0x36
 8009fae:	683a      	ldr	r2, [r7, #0]
 8009fb0:	429a      	cmp	r2, r3
 8009fb2:	d908      	bls.n	8009fc6 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 8009fb4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fb8:	4618      	mov	r0, r3
 8009fba:	f000 f85f 	bl	800a07c <xIsExtHeader>
 8009fbe:	4603      	mov	r3, r0
 8009fc0:	2b00      	cmp	r3, #0
 8009fc2:	d1e1      	bne.n	8009f88 <xCheckIPv6SizeFields+0x88>
 8009fc4:	e000      	b.n	8009fc8 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 8009fc6:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 8009fc8:	6a3b      	ldr	r3, [r7, #32]
 8009fca:	3336      	adds	r3, #54	@ 0x36
 8009fcc:	683a      	ldr	r2, [r7, #0]
 8009fce:	429a      	cmp	r2, r3
 8009fd0:	d802      	bhi.n	8009fd8 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 8009fd2:	2307      	movs	r3, #7
 8009fd4:	61fb      	str	r3, [r7, #28]
                break;
 8009fd6:	e043      	b.n	800a060 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 8009fd8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fdc:	2b11      	cmp	r3, #17
 8009fde:	d103      	bne.n	8009fe8 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 8009fe0:	6a3b      	ldr	r3, [r7, #32]
 8009fe2:	333e      	adds	r3, #62	@ 0x3e
 8009fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fe6:	e032      	b.n	800a04e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 8009fe8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009fec:	2b06      	cmp	r3, #6
 8009fee:	d103      	bne.n	8009ff8 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 8009ff0:	6a3b      	ldr	r3, [r7, #32]
 8009ff2:	334a      	adds	r3, #74	@ 0x4a
 8009ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009ff6:	e02a      	b.n	800a04e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 8009ff8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8009ffc:	2b3a      	cmp	r3, #58	@ 0x3a
 8009ffe:	d123      	bne.n	800a048 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 800a000:	6a3b      	ldr	r3, [r7, #32]
 800a002:	3336      	adds	r3, #54	@ 0x36
 800a004:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 800a006:	697a      	ldr	r2, [r7, #20]
 800a008:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a00a:	4413      	add	r3, r2
 800a00c:	781b      	ldrb	r3, [r3, #0]
 800a00e:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 800a010:	7afb      	ldrb	r3, [r7, #11]
 800a012:	2b80      	cmp	r3, #128	@ 0x80
 800a014:	d002      	beq.n	800a01c <xCheckIPv6SizeFields+0x11c>
 800a016:	7afb      	ldrb	r3, [r7, #11]
 800a018:	2b81      	cmp	r3, #129	@ 0x81
 800a01a:	d103      	bne.n	800a024 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 800a01c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a01e:	3308      	adds	r3, #8
 800a020:	627b      	str	r3, [r7, #36]	@ 0x24
 800a022:	e014      	b.n	800a04e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 800a024:	7afb      	ldrb	r3, [r7, #11]
 800a026:	2b85      	cmp	r3, #133	@ 0x85
 800a028:	d103      	bne.n	800a032 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 800a02a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a02c:	3308      	adds	r3, #8
 800a02e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a030:	e00d      	b.n	800a04e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 800a032:	7afb      	ldrb	r3, [r7, #11]
 800a034:	2b86      	cmp	r3, #134	@ 0x86
 800a036:	d103      	bne.n	800a040 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 800a038:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a03a:	3310      	adds	r3, #16
 800a03c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a03e:	e006      	b.n	800a04e <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 800a040:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a042:	3318      	adds	r3, #24
 800a044:	627b      	str	r3, [r7, #36]	@ 0x24
 800a046:	e002      	b.n	800a04e <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800a048:	2305      	movs	r3, #5
 800a04a:	61fb      	str	r3, [r7, #28]
                break;
 800a04c:	e008      	b.n	800a060 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 800a04e:	683a      	ldr	r2, [r7, #0]
 800a050:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a052:	429a      	cmp	r2, r3
 800a054:	d202      	bcs.n	800a05c <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800a056:	2306      	movs	r3, #6
 800a058:	61fb      	str	r3, [r7, #28]
                break;
 800a05a:	e001      	b.n	800a060 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 800a05c:	2301      	movs	r3, #1
 800a05e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800a060:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a062:	2b01      	cmp	r3, #1
 800a064:	d003      	beq.n	800a06e <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800a066:	69f9      	ldr	r1, [r7, #28]
 800a068:	4803      	ldr	r0, [pc, #12]	@ (800a078 <xCheckIPv6SizeFields+0x178>)
 800a06a:	f016 fa8f 	bl	802058c <lUDPLoggingPrintf>
        }

        return xResult;
 800a06e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800a070:	4618      	mov	r0, r3
 800a072:	3730      	adds	r7, #48	@ 0x30
 800a074:	46bd      	mov	sp, r7
 800a076:	bd80      	pop	{r7, pc}
 800a078:	080233c8 	.word	0x080233c8

0800a07c <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800a07c:	b480      	push	{r7}
 800a07e:	b085      	sub	sp, #20
 800a080:	af00      	add	r7, sp, #0
 800a082:	4603      	mov	r3, r0
 800a084:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800a086:	2300      	movs	r3, #0
 800a088:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800a08a:	79fb      	ldrb	r3, [r7, #7]
 800a08c:	2b87      	cmp	r3, #135	@ 0x87
 800a08e:	d016      	beq.n	800a0be <xIsExtHeader+0x42>
 800a090:	2b87      	cmp	r3, #135	@ 0x87
 800a092:	dc16      	bgt.n	800a0c2 <xIsExtHeader+0x46>
 800a094:	2b00      	cmp	r3, #0
 800a096:	d012      	beq.n	800a0be <xIsExtHeader+0x42>
 800a098:	2b00      	cmp	r3, #0
 800a09a:	db12      	blt.n	800a0c2 <xIsExtHeader+0x46>
 800a09c:	2b3c      	cmp	r3, #60	@ 0x3c
 800a09e:	dc10      	bgt.n	800a0c2 <xIsExtHeader+0x46>
 800a0a0:	2b2b      	cmp	r3, #43	@ 0x2b
 800a0a2:	db0e      	blt.n	800a0c2 <xIsExtHeader+0x46>
 800a0a4:	3b2b      	subs	r3, #43	@ 0x2b
 800a0a6:	4a0a      	ldr	r2, [pc, #40]	@ (800a0d0 <xIsExtHeader+0x54>)
 800a0a8:	fa22 f303 	lsr.w	r3, r2, r3
 800a0ac:	f003 0301 	and.w	r3, r3, #1
 800a0b0:	2b00      	cmp	r3, #0
 800a0b2:	bf14      	ite	ne
 800a0b4:	2301      	movne	r3, #1
 800a0b6:	2300      	moveq	r3, #0
 800a0b8:	b2db      	uxtb	r3, r3
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d001      	beq.n	800a0c2 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800a0be:	2301      	movs	r3, #1
 800a0c0:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
    }
 800a0c4:	4618      	mov	r0, r3
 800a0c6:	3714      	adds	r7, #20
 800a0c8:	46bd      	mov	sp, r7
 800a0ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ce:	4770      	bx	lr
 800a0d0:	00020183 	.word	0x00020183

0800a0d4 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800a0d4:	b580      	push	{r7, lr}
 800a0d6:	b082      	sub	sp, #8
 800a0d8:	af00      	add	r7, sp, #0
 800a0da:	6078      	str	r0, [r7, #4]
 800a0dc:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	2b00      	cmp	r3, #0
 800a0e2:	d104      	bne.n	800a0ee <xGetIPv6MulticastGroupID+0x1a>
 800a0e4:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800a0e8:	480e      	ldr	r0, [pc, #56]	@ (800a124 <xGetIPv6MulticastGroupID+0x50>)
 800a0ea:	f7f7 f821 	bl	8001130 <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800a0ee:	683b      	ldr	r3, [r7, #0]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	d104      	bne.n	800a0fe <xGetIPv6MulticastGroupID+0x2a>
 800a0f4:	f240 1113 	movw	r1, #275	@ 0x113
 800a0f8:	480a      	ldr	r0, [pc, #40]	@ (800a124 <xGetIPv6MulticastGroupID+0x50>)
 800a0fa:	f7f7 f819 	bl	8001130 <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800a0fe:	683b      	ldr	r3, [r7, #0]
 800a100:	2200      	movs	r2, #0
 800a102:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800a104:	683b      	ldr	r3, [r7, #0]
 800a106:	2200      	movs	r2, #0
 800a108:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800a10a:	683b      	ldr	r3, [r7, #0]
 800a10c:	1c98      	adds	r0, r3, #2
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	3302      	adds	r3, #2
 800a112:	220e      	movs	r2, #14
 800a114:	4619      	mov	r1, r3
 800a116:	f016 fc55 	bl	80209c4 <memcpy>
}
 800a11a:	bf00      	nop
 800a11c:	3708      	adds	r7, #8
 800a11e:	46bd      	mov	sp, r7
 800a120:	bd80      	pop	{r7, pc}
 800a122:	bf00      	nop
 800a124:	080233ec 	.word	0x080233ec

0800a128 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800a128:	b580      	push	{r7, lr}
 800a12a:	b084      	sub	sp, #16
 800a12c:	af00      	add	r7, sp, #0
 800a12e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a130:	2300      	movs	r3, #0
 800a132:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	2210      	movs	r2, #16
 800a138:	4906      	ldr	r1, [pc, #24]	@ (800a154 <xIsIPv6Loopback+0x2c>)
 800a13a:	4618      	mov	r0, r3
 800a13c:	f017 fbd7 	bl	80218ee <memcmp>
 800a140:	4603      	mov	r3, r0
 800a142:	2b00      	cmp	r3, #0
 800a144:	d101      	bne.n	800a14a <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800a146:	2301      	movs	r3, #1
 800a148:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a14a:	68fb      	ldr	r3, [r7, #12]
}
 800a14c:	4618      	mov	r0, r3
 800a14e:	3710      	adds	r7, #16
 800a150:	46bd      	mov	sp, r7
 800a152:	bd80      	pop	{r7, pc}
 800a154:	08025c3c 	.word	0x08025c3c

0800a158 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800a158:	b580      	push	{r7, lr}
 800a15a:	b088      	sub	sp, #32
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a160:	2300      	movs	r3, #0
 800a162:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	781b      	ldrb	r3, [r3, #0]
 800a168:	2bff      	cmp	r3, #255	@ 0xff
 800a16a:	d123      	bne.n	800a1b4 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800a16c:	f107 030c 	add.w	r3, r7, #12
 800a170:	4619      	mov	r1, r3
 800a172:	6878      	ldr	r0, [r7, #4]
 800a174:	f7ff ffae 	bl	800a0d4 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	785b      	ldrb	r3, [r3, #1]
 800a17c:	f003 030f 	and.w	r3, r3, #15
 800a180:	2b00      	cmp	r3, #0
 800a182:	d102      	bne.n	800a18a <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800a184:	2300      	movs	r3, #0
 800a186:	61fb      	str	r3, [r7, #28]
 800a188:	e014      	b.n	800a1b4 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	785b      	ldrb	r3, [r3, #1]
 800a18e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a192:	2b00      	cmp	r3, #0
 800a194:	d10c      	bne.n	800a1b0 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800a196:	f107 030c 	add.w	r3, r7, #12
 800a19a:	2210      	movs	r2, #16
 800a19c:	4908      	ldr	r1, [pc, #32]	@ (800a1c0 <xIsIPv6AllowedMulticast+0x68>)
 800a19e:	4618      	mov	r0, r3
 800a1a0:	f017 fba5 	bl	80218ee <memcmp>
 800a1a4:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	d102      	bne.n	800a1b0 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800a1aa:	2300      	movs	r3, #0
 800a1ac:	61fb      	str	r3, [r7, #28]
 800a1ae:	e001      	b.n	800a1b4 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800a1b0:	2301      	movs	r3, #1
 800a1b2:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800a1b4:	69fb      	ldr	r3, [r7, #28]
}
 800a1b6:	4618      	mov	r0, r3
 800a1b8:	3720      	adds	r7, #32
 800a1ba:	46bd      	mov	sp, r7
 800a1bc:	bd80      	pop	{r7, pc}
 800a1be:	bf00      	nop
 800a1c0:	08025c2c 	.word	0x08025c2c

0800a1c4 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b08a      	sub	sp, #40	@ 0x28
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	60f8      	str	r0, [r7, #12]
 800a1cc:	60b9      	str	r1, [r7, #8]
 800a1ce:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800a1d0:	68bb      	ldr	r3, [r7, #8]
 800a1d2:	781b      	ldrb	r3, [r3, #0]
 800a1d4:	2bff      	cmp	r3, #255	@ 0xff
 800a1d6:	d112      	bne.n	800a1fe <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800a1d8:	68bb      	ldr	r3, [r7, #8]
 800a1da:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800a1dc:	2b02      	cmp	r3, #2
 800a1de:	d10e      	bne.n	800a1fe <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800a1e0:	68bb      	ldr	r3, [r7, #8]
 800a1e2:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800a1e4:	2bff      	cmp	r3, #255	@ 0xff
 800a1e6:	d10a      	bne.n	800a1fe <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f103 000d 	add.w	r0, r3, #13
 800a1ee:	68bb      	ldr	r3, [r7, #8]
 800a1f0:	330d      	adds	r3, #13
 800a1f2:	2203      	movs	r2, #3
 800a1f4:	4619      	mov	r1, r3
 800a1f6:	f017 fb7a 	bl	80218ee <memcmp>
 800a1fa:	6278      	str	r0, [r7, #36]	@ 0x24
 800a1fc:	e069      	b.n	800a2d2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	2210      	movs	r2, #16
 800a202:	4936      	ldr	r1, [pc, #216]	@ (800a2dc <xCompareIPv6_Address+0x118>)
 800a204:	4618      	mov	r0, r3
 800a206:	f017 fb72 	bl	80218ee <memcmp>
 800a20a:	4603      	mov	r3, r0
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d102      	bne.n	800a216 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800a210:	2300      	movs	r3, #0
 800a212:	627b      	str	r3, [r7, #36]	@ 0x24
 800a214:	e05d      	b.n	800a2d2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800a216:	68bb      	ldr	r3, [r7, #8]
 800a218:	781b      	ldrb	r3, [r3, #0]
 800a21a:	2bfe      	cmp	r3, #254	@ 0xfe
 800a21c:	d10e      	bne.n	800a23c <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800a21e:	68bb      	ldr	r3, [r7, #8]
 800a220:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800a222:	2b80      	cmp	r3, #128	@ 0x80
 800a224:	d10a      	bne.n	800a23c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800a22a:	2bfe      	cmp	r3, #254	@ 0xfe
 800a22c:	d106      	bne.n	800a23c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800a232:	2b80      	cmp	r3, #128	@ 0x80
 800a234:	d102      	bne.n	800a23c <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800a236:	2300      	movs	r3, #0
 800a238:	627b      	str	r3, [r7, #36]	@ 0x24
 800a23a:	e04a      	b.n	800a2d2 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	2b00      	cmp	r3, #0
 800a240:	d102      	bne.n	800a248 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800a242:	2300      	movs	r3, #0
 800a244:	627b      	str	r3, [r7, #36]	@ 0x24
 800a246:	e044      	b.n	800a2d2 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800a248:	687b      	ldr	r3, [r7, #4]
 800a24a:	2b80      	cmp	r3, #128	@ 0x80
 800a24c:	d107      	bne.n	800a25e <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	68b9      	ldr	r1, [r7, #8]
 800a252:	2210      	movs	r2, #16
 800a254:	4618      	mov	r0, r3
 800a256:	f017 fb4a 	bl	80218ee <memcmp>
 800a25a:	6278      	str	r0, [r7, #36]	@ 0x24
 800a25c:	e039      	b.n	800a2d2 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800a25e:	687b      	ldr	r3, [r7, #4]
 800a260:	08db      	lsrs	r3, r3, #3
 800a262:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800a264:	2300      	movs	r3, #0
 800a266:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	2b00      	cmp	r3, #0
 800a26c:	d006      	beq.n	800a27c <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	68b9      	ldr	r1, [r7, #8]
 800a272:	6a3a      	ldr	r2, [r7, #32]
 800a274:	4618      	mov	r0, r3
 800a276:	f017 fb3a 	bl	80218ee <memcmp>
 800a27a:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800a27c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a27e:	2b00      	cmp	r3, #0
 800a280:	d127      	bne.n	800a2d2 <xCompareIPv6_Address+0x10e>
 800a282:	687b      	ldr	r3, [r7, #4]
 800a284:	f003 0307 	and.w	r3, r3, #7
 800a288:	2b00      	cmp	r3, #0
 800a28a:	d022      	beq.n	800a2d2 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	f003 0307 	and.w	r3, r3, #7
 800a292:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800a294:	69fb      	ldr	r3, [r7, #28]
 800a296:	f1c3 0308 	rsb	r3, r3, #8
 800a29a:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800a29c:	2201      	movs	r2, #1
 800a29e:	69bb      	ldr	r3, [r7, #24]
 800a2a0:	fa02 f303 	lsl.w	r3, r2, r3
 800a2a4:	3b01      	subs	r3, #1
 800a2a6:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800a2a8:	697b      	ldr	r3, [r7, #20]
 800a2aa:	b2db      	uxtb	r3, r3
 800a2ac:	43db      	mvns	r3, r3
 800a2ae:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800a2b0:	68fa      	ldr	r2, [r7, #12]
 800a2b2:	6a3b      	ldr	r3, [r7, #32]
 800a2b4:	4413      	add	r3, r2
 800a2b6:	781a      	ldrb	r2, [r3, #0]
 800a2b8:	68b9      	ldr	r1, [r7, #8]
 800a2ba:	6a3b      	ldr	r3, [r7, #32]
 800a2bc:	440b      	add	r3, r1
 800a2be:	781b      	ldrb	r3, [r3, #0]
 800a2c0:	4053      	eors	r3, r2
 800a2c2:	b2da      	uxtb	r2, r3
 800a2c4:	7cfb      	ldrb	r3, [r7, #19]
 800a2c6:	4013      	ands	r3, r2
 800a2c8:	b2db      	uxtb	r3, r3
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d001      	beq.n	800a2d2 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800a2ce:	2301      	movs	r3, #1
 800a2d0:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800a2d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a2d4:	4618      	mov	r0, r3
 800a2d6:	3728      	adds	r7, #40	@ 0x28
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	bd80      	pop	{r7, pc}
 800a2dc:	08025c4c 	.word	0x08025c4c

0800a2e0 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b086      	sub	sp, #24
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	60f8      	str	r0, [r7, #12]
 800a2e8:	60b9      	str	r1, [r7, #8]
 800a2ea:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800a2ec:	2301      	movs	r3, #1
 800a2ee:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800a2f0:	7dfb      	ldrb	r3, [r7, #23]
 800a2f2:	2b01      	cmp	r3, #1
 800a2f4:	d10c      	bne.n	800a310 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800a2f6:	68bb      	ldr	r3, [r7, #8]
 800a2f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a2fa:	68bb      	ldr	r3, [r7, #8]
 800a2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a2fe:	4619      	mov	r1, r3
 800a300:	4610      	mov	r0, r2
 800a302:	f7ff fdfd 	bl	8009f00 <xCheckIPv6SizeFields>
 800a306:	4603      	mov	r3, r0
 800a308:	2b01      	cmp	r3, #1
 800a30a:	d001      	beq.n	800a310 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800a30c:	2300      	movs	r3, #0
 800a30e:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800a310:	7dfb      	ldrb	r3, [r7, #23]
}
 800a312:	4618      	mov	r0, r3
 800a314:	3718      	adds	r7, #24
 800a316:	46bd      	mov	sp, r7
 800a318:	bd80      	pop	{r7, pc}
	...

0800a31c <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800a31c:	b480      	push	{r7}
 800a31e:	b085      	sub	sp, #20
 800a320:	af00      	add	r7, sp, #0
 800a322:	4603      	mov	r3, r0
 800a324:	460a      	mov	r2, r1
 800a326:	71fb      	strb	r3, [r7, #7]
 800a328:	4613      	mov	r3, r2
 800a32a:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800a32c:	79fb      	ldrb	r3, [r7, #7]
 800a32e:	2b87      	cmp	r3, #135	@ 0x87
 800a330:	d04b      	beq.n	800a3ca <xGetExtensionOrder+0xae>
 800a332:	2b87      	cmp	r3, #135	@ 0x87
 800a334:	dc4c      	bgt.n	800a3d0 <xGetExtensionOrder+0xb4>
 800a336:	2b00      	cmp	r3, #0
 800a338:	d030      	beq.n	800a39c <xGetExtensionOrder+0x80>
 800a33a:	2b00      	cmp	r3, #0
 800a33c:	db48      	blt.n	800a3d0 <xGetExtensionOrder+0xb4>
 800a33e:	2b3c      	cmp	r3, #60	@ 0x3c
 800a340:	dc46      	bgt.n	800a3d0 <xGetExtensionOrder+0xb4>
 800a342:	2b2b      	cmp	r3, #43	@ 0x2b
 800a344:	db44      	blt.n	800a3d0 <xGetExtensionOrder+0xb4>
 800a346:	3b2b      	subs	r3, #43	@ 0x2b
 800a348:	2b11      	cmp	r3, #17
 800a34a:	d841      	bhi.n	800a3d0 <xGetExtensionOrder+0xb4>
 800a34c:	a201      	add	r2, pc, #4	@ (adr r2, 800a354 <xGetExtensionOrder+0x38>)
 800a34e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a352:	bf00      	nop
 800a354:	0800a3b3 	.word	0x0800a3b3
 800a358:	0800a3b9 	.word	0x0800a3b9
 800a35c:	0800a3d1 	.word	0x0800a3d1
 800a360:	0800a3d1 	.word	0x0800a3d1
 800a364:	0800a3d1 	.word	0x0800a3d1
 800a368:	0800a3d1 	.word	0x0800a3d1
 800a36c:	0800a3d1 	.word	0x0800a3d1
 800a370:	0800a3c5 	.word	0x0800a3c5
 800a374:	0800a3bf 	.word	0x0800a3bf
 800a378:	0800a3d1 	.word	0x0800a3d1
 800a37c:	0800a3d1 	.word	0x0800a3d1
 800a380:	0800a3d1 	.word	0x0800a3d1
 800a384:	0800a3d1 	.word	0x0800a3d1
 800a388:	0800a3d1 	.word	0x0800a3d1
 800a38c:	0800a3d1 	.word	0x0800a3d1
 800a390:	0800a3d1 	.word	0x0800a3d1
 800a394:	0800a3d1 	.word	0x0800a3d1
 800a398:	0800a3a3 	.word	0x0800a3a3
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800a39c:	2301      	movs	r3, #1
 800a39e:	60fb      	str	r3, [r7, #12]
            break;
 800a3a0:	e01b      	b.n	800a3da <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800a3a2:	2307      	movs	r3, #7
 800a3a4:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800a3a6:	79bb      	ldrb	r3, [r7, #6]
 800a3a8:	2b2b      	cmp	r3, #43	@ 0x2b
 800a3aa:	d115      	bne.n	800a3d8 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800a3ac:	2302      	movs	r3, #2
 800a3ae:	60fb      	str	r3, [r7, #12]
            }

            break;
 800a3b0:	e012      	b.n	800a3d8 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800a3b2:	2303      	movs	r3, #3
 800a3b4:	60fb      	str	r3, [r7, #12]
            break;
 800a3b6:	e010      	b.n	800a3da <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800a3b8:	2304      	movs	r3, #4
 800a3ba:	60fb      	str	r3, [r7, #12]
            break;
 800a3bc:	e00d      	b.n	800a3da <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800a3be:	2305      	movs	r3, #5
 800a3c0:	60fb      	str	r3, [r7, #12]
            break;
 800a3c2:	e00a      	b.n	800a3da <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800a3c4:	2306      	movs	r3, #6
 800a3c6:	60fb      	str	r3, [r7, #12]
            break;
 800a3c8:	e007      	b.n	800a3da <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800a3ca:	2308      	movs	r3, #8
 800a3cc:	60fb      	str	r3, [r7, #12]
            break;
 800a3ce:	e004      	b.n	800a3da <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800a3d0:	f04f 33ff 	mov.w	r3, #4294967295
 800a3d4:	60fb      	str	r3, [r7, #12]
            break;
 800a3d6:	e000      	b.n	800a3da <xGetExtensionOrder+0xbe>
            break;
 800a3d8:	bf00      	nop
    }

    return xReturn;
 800a3da:	68fb      	ldr	r3, [r7, #12]
}
 800a3dc:	4618      	mov	r0, r3
 800a3de:	3714      	adds	r7, #20
 800a3e0:	46bd      	mov	sp, r7
 800a3e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e6:	4770      	bx	lr

0800a3e8 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800a3e8:	b580      	push	{r7, lr}
 800a3ea:	b08e      	sub	sp, #56	@ 0x38
 800a3ec:	af02      	add	r7, sp, #8
 800a3ee:	6078      	str	r0, [r7, #4]
 800a3f0:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800a3f2:	2300      	movs	r3, #0
 800a3f4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a3fc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a402:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800a404:	2300      	movs	r3, #0
 800a406:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800a408:	2300      	movs	r3, #0
 800a40a:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800a40c:	2300      	movs	r3, #0
 800a40e:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800a410:	2300      	movs	r3, #0
 800a412:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800a414:	687b      	ldr	r3, [r7, #4]
 800a416:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a41c:	f107 020b 	add.w	r2, r7, #11
 800a420:	4619      	mov	r1, r3
 800a422:	f000 faa5 	bl	800a970 <usGetExtensionHeaderLength>
 800a426:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800a428:	69fb      	ldr	r3, [r7, #28]
 800a42a:	3336      	adds	r3, #54	@ 0x36
 800a42c:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800a42e:	69ba      	ldr	r2, [r7, #24]
 800a430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a432:	429a      	cmp	r2, r3
 800a434:	d243      	bcs.n	800a4be <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800a436:	6a3b      	ldr	r3, [r7, #32]
 800a438:	8a5b      	ldrh	r3, [r3, #18]
 800a43a:	b29b      	uxth	r3, r3
 800a43c:	021b      	lsls	r3, r3, #8
 800a43e:	b21a      	sxth	r2, r3
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	8a5b      	ldrh	r3, [r3, #18]
 800a444:	b29b      	uxth	r3, r3
 800a446:	0a1b      	lsrs	r3, r3, #8
 800a448:	b29b      	uxth	r3, r3
 800a44a:	b21b      	sxth	r3, r3
 800a44c:	4313      	orrs	r3, r2
 800a44e:	b21b      	sxth	r3, r3
 800a450:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800a452:	8afb      	ldrh	r3, [r7, #22]
 800a454:	69fa      	ldr	r2, [r7, #28]
 800a456:	429a      	cmp	r2, r3
 800a458:	d231      	bcs.n	800a4be <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800a45a:	683b      	ldr	r3, [r7, #0]
 800a45c:	2b01      	cmp	r3, #1
 800a45e:	d12e      	bne.n	800a4be <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800a460:	7afa      	ldrb	r2, [r7, #11]
 800a462:	6a3b      	ldr	r3, [r7, #32]
 800a464:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a46a:	3336      	adds	r3, #54	@ 0x36
 800a46c:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a472:	69bb      	ldr	r3, [r7, #24]
 800a474:	4413      	add	r3, r2
 800a476:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800a478:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a47a:	69bb      	ldr	r3, [r7, #24]
 800a47c:	1ad3      	subs	r3, r2, r3
 800a47e:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800a480:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a482:	68f9      	ldr	r1, [r7, #12]
 800a484:	6938      	ldr	r0, [r7, #16]
 800a486:	f017 fa42 	bl	802190e <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800a48a:	687b      	ldr	r3, [r7, #4]
 800a48c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a48e:	69fb      	ldr	r3, [r7, #28]
 800a490:	1ad2      	subs	r2, r2, r3
 800a492:	687b      	ldr	r3, [r7, #4]
 800a494:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	b29b      	uxth	r3, r3
 800a49a:	8afa      	ldrh	r2, [r7, #22]
 800a49c:	1ad3      	subs	r3, r2, r3
 800a49e:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800a4a0:	8afb      	ldrh	r3, [r7, #22]
 800a4a2:	021b      	lsls	r3, r3, #8
 800a4a4:	b21a      	sxth	r2, r3
 800a4a6:	8afb      	ldrh	r3, [r7, #22]
 800a4a8:	0a1b      	lsrs	r3, r3, #8
 800a4aa:	b29b      	uxth	r3, r3
 800a4ac:	b21b      	sxth	r3, r3
 800a4ae:	4313      	orrs	r3, r2
 800a4b0:	b21b      	sxth	r3, r3
 800a4b2:	b29a      	uxth	r2, r3
 800a4b4:	6a3b      	ldr	r3, [r7, #32]
 800a4b6:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800a4be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a4c2:	2b01      	cmp	r3, #1
 800a4c4:	d101      	bne.n	800a4ca <eHandleIPv6ExtensionHeaders+0xe2>
 800a4c6:	4910      	ldr	r1, [pc, #64]	@ (800a508 <eHandleIPv6ExtensionHeaders+0x120>)
 800a4c8:	e000      	b.n	800a4cc <eHandleIPv6ExtensionHeaders+0xe4>
 800a4ca:	4910      	ldr	r1, [pc, #64]	@ (800a50c <eHandleIPv6ExtensionHeaders+0x124>)
 800a4cc:	6a3b      	ldr	r3, [r7, #32]
 800a4ce:	8a5b      	ldrh	r3, [r3, #18]
 800a4d0:	b29b      	uxth	r3, r3
 800a4d2:	021b      	lsls	r3, r3, #8
 800a4d4:	b21a      	sxth	r2, r3
 800a4d6:	6a3b      	ldr	r3, [r7, #32]
 800a4d8:	8a5b      	ldrh	r3, [r3, #18]
 800a4da:	b29b      	uxth	r3, r3
 800a4dc:	0a1b      	lsrs	r3, r3, #8
 800a4de:	b29b      	uxth	r3, r3
 800a4e0:	b21b      	sxth	r3, r3
 800a4e2:	4313      	orrs	r3, r2
 800a4e4:	b21b      	sxth	r3, r3
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	461a      	mov	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4ee:	9301      	str	r3, [sp, #4]
 800a4f0:	9200      	str	r2, [sp, #0]
 800a4f2:	69fb      	ldr	r3, [r7, #28]
 800a4f4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a4f6:	4806      	ldr	r0, [pc, #24]	@ (800a510 <eHandleIPv6ExtensionHeaders+0x128>)
 800a4f8:	f016 f848 	bl	802058c <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800a4fc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a500:	4618      	mov	r0, r3
 800a502:	3730      	adds	r7, #48	@ 0x30
 800a504:	46bd      	mov	sp, r7
 800a506:	bd80      	pop	{r7, pc}
 800a508:	0802341c 	.word	0x0802341c
 800a50c:	08023424 	.word	0x08023424
 800a510:	08023428 	.word	0x08023428

0800a514 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800a514:	b580      	push	{r7, lr}
 800a516:	b084      	sub	sp, #16
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
 800a51c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800a51e:	2300      	movs	r3, #0
 800a520:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800a522:	687b      	ldr	r3, [r7, #4]
 800a524:	2b00      	cmp	r3, #0
 800a526:	d026      	beq.n	800a576 <pxTCPSocketLookup_IPv6+0x62>
 800a528:	683b      	ldr	r3, [r7, #0]
 800a52a:	2b00      	cmp	r3, #0
 800a52c:	d023      	beq.n	800a576 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	7a1b      	ldrb	r3, [r3, #8]
 800a532:	f003 0301 	and.w	r3, r3, #1
 800a536:	b2db      	uxtb	r3, r3
 800a538:	2b00      	cmp	r3, #0
 800a53a:	d010      	beq.n	800a55e <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800a53c:	683b      	ldr	r3, [r7, #0]
 800a53e:	691b      	ldr	r3, [r3, #16]
 800a540:	2b00      	cmp	r3, #0
 800a542:	d018      	beq.n	800a576 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	3354      	adds	r3, #84	@ 0x54
 800a548:	6839      	ldr	r1, [r7, #0]
 800a54a:	2210      	movs	r2, #16
 800a54c:	4618      	mov	r0, r3
 800a54e:	f017 f9ce 	bl	80218ee <memcmp>
 800a552:	4603      	mov	r3, r0
 800a554:	2b00      	cmp	r3, #0
 800a556:	d10e      	bne.n	800a576 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	60fb      	str	r3, [r7, #12]
 800a55c:	e00b      	b.n	800a576 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	691b      	ldr	r3, [r3, #16]
 800a562:	2b00      	cmp	r3, #0
 800a564:	d107      	bne.n	800a576 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a56a:	683b      	ldr	r3, [r7, #0]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	429a      	cmp	r2, r3
 800a570:	d101      	bne.n	800a576 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800a576:	68fb      	ldr	r3, [r7, #12]
    }
 800a578:	4618      	mov	r0, r3
 800a57a:	3710      	adds	r7, #16
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b084      	sub	sp, #16
 800a584:	af00      	add	r7, sp, #0
 800a586:	6078      	str	r0, [r7, #4]
 800a588:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a58e:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	2200      	movs	r2, #0
 800a594:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800a596:	683b      	ldr	r3, [r7, #0]
 800a598:	2b00      	cmp	r3, #0
 800a59a:	d103      	bne.n	800a5a4 <xSend_UDP_Update_IPv6+0x24>
 800a59c:	2173      	movs	r1, #115	@ 0x73
 800a59e:	4811      	ldr	r0, [pc, #68]	@ (800a5e4 <xSend_UDP_Update_IPv6+0x64>)
 800a5a0:	f7f6 fdc6 	bl	8001130 <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a5a4:	68fb      	ldr	r3, [r7, #12]
 800a5a6:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800a5aa:	683b      	ldr	r3, [r7, #0]
 800a5ac:	3308      	adds	r3, #8
 800a5ae:	2210      	movs	r2, #16
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	f016 fa07 	bl	80209c4 <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a5b6:	687b      	ldr	r3, [r7, #4]
 800a5b8:	f103 0014 	add.w	r0, r3, #20
 800a5bc:	683b      	ldr	r3, [r7, #0]
 800a5be:	3308      	adds	r3, #8
 800a5c0:	2210      	movs	r2, #16
 800a5c2:	4619      	mov	r1, r3
 800a5c4:	f016 f9fe 	bl	80209c4 <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	2200      	movs	r2, #0
 800a5cc:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800a5d0:	731a      	strb	r2, [r3, #12]
 800a5d2:	2200      	movs	r2, #0
 800a5d4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800a5d8:	735a      	strb	r2, [r3, #13]

    return NULL;
 800a5da:	2300      	movs	r3, #0
}
 800a5dc:	4618      	mov	r0, r3
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	08023480 	.word	0x08023480

0800a5e8 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800a5e8:	b580      	push	{r7, lr}
 800a5ea:	b084      	sub	sp, #16
 800a5ec:	af00      	add	r7, sp, #0
 800a5ee:	4603      	mov	r3, r0
 800a5f0:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800a5f2:	2330      	movs	r3, #48	@ 0x30
 800a5f4:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800a5f6:	88fb      	ldrh	r3, [r7, #6]
 800a5f8:	2b09      	cmp	r3, #9
 800a5fa:	d805      	bhi.n	800a608 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800a5fc:	88fb      	ldrh	r3, [r7, #6]
 800a5fe:	b2da      	uxtb	r2, r3
 800a600:	7bfb      	ldrb	r3, [r7, #15]
 800a602:	4413      	add	r3, r2
 800a604:	73fb      	strb	r3, [r7, #15]
 800a606:	e010      	b.n	800a62a <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800a608:	88fb      	ldrh	r3, [r7, #6]
 800a60a:	2b0f      	cmp	r3, #15
 800a60c:	d809      	bhi.n	800a622 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800a60e:	2361      	movs	r3, #97	@ 0x61
 800a610:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800a612:	88fb      	ldrh	r3, [r7, #6]
 800a614:	b2da      	uxtb	r2, r3
 800a616:	7bfb      	ldrb	r3, [r7, #15]
 800a618:	4413      	add	r3, r2
 800a61a:	b2db      	uxtb	r3, r3
 800a61c:	3b0a      	subs	r3, #10
 800a61e:	73fb      	strb	r3, [r7, #15]
 800a620:	e003      	b.n	800a62a <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800a622:	21b3      	movs	r1, #179	@ 0xb3
 800a624:	4803      	ldr	r0, [pc, #12]	@ (800a634 <cHexToChar+0x4c>)
 800a626:	f7f6 fd83 	bl	8001130 <vAssertCalled>
    }

    return cReturn;
 800a62a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a62c:	4618      	mov	r0, r3
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}
 800a634:	08023480 	.word	0x08023480

0800a638 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800a638:	b590      	push	{r4, r7, lr}
 800a63a:	b08b      	sub	sp, #44	@ 0x2c
 800a63c:	af00      	add	r7, sp, #0
 800a63e:	60f8      	str	r0, [r7, #12]
 800a640:	60b9      	str	r1, [r7, #8]
 800a642:	4613      	mov	r3, r2
 800a644:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800a646:	2304      	movs	r3, #4
 800a648:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800a64a:	2300      	movs	r3, #0
 800a64c:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800a64e:	88fb      	ldrh	r3, [r7, #6]
 800a650:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800a652:	2300      	movs	r3, #0
 800a654:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800a656:	2300      	movs	r3, #0
 800a658:	627b      	str	r3, [r7, #36]	@ 0x24
 800a65a:	e026      	b.n	800a6aa <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800a65c:	8bfb      	ldrh	r3, [r7, #30]
 800a65e:	0b1b      	lsrs	r3, r3, #12
 800a660:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800a662:	8a7b      	ldrh	r3, [r7, #18]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d001      	beq.n	800a66c <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800a668:	2301      	movs	r3, #1
 800a66a:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800a66c:	69bb      	ldr	r3, [r7, #24]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d104      	bne.n	800a67c <uxHexPrintShort+0x44>
 800a672:	697b      	ldr	r3, [r7, #20]
 800a674:	3b01      	subs	r3, #1
 800a676:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a678:	429a      	cmp	r2, r3
 800a67a:	d110      	bne.n	800a69e <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800a67c:	68bb      	ldr	r3, [r7, #8]
 800a67e:	3b01      	subs	r3, #1
 800a680:	6a3a      	ldr	r2, [r7, #32]
 800a682:	429a      	cmp	r2, r3
 800a684:	d216      	bcs.n	800a6b4 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800a686:	68fa      	ldr	r2, [r7, #12]
 800a688:	6a3b      	ldr	r3, [r7, #32]
 800a68a:	18d4      	adds	r4, r2, r3
 800a68c:	8a7b      	ldrh	r3, [r7, #18]
 800a68e:	4618      	mov	r0, r3
 800a690:	f7ff ffaa 	bl	800a5e8 <cHexToChar>
 800a694:	4603      	mov	r3, r0
 800a696:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800a698:	6a3b      	ldr	r3, [r7, #32]
 800a69a:	3301      	adds	r3, #1
 800a69c:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800a69e:	8bfb      	ldrh	r3, [r7, #30]
 800a6a0:	011b      	lsls	r3, r3, #4
 800a6a2:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800a6a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6a6:	3301      	adds	r3, #1
 800a6a8:	627b      	str	r3, [r7, #36]	@ 0x24
 800a6aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6ac:	697b      	ldr	r3, [r7, #20]
 800a6ae:	429a      	cmp	r2, r3
 800a6b0:	d3d4      	bcc.n	800a65c <uxHexPrintShort+0x24>
 800a6b2:	e000      	b.n	800a6b6 <uxHexPrintShort+0x7e>
                break;
 800a6b4:	bf00      	nop
    }

    return uxIndex;
 800a6b6:	6a3b      	ldr	r3, [r7, #32]
}
 800a6b8:	4618      	mov	r0, r3
 800a6ba:	372c      	adds	r7, #44	@ 0x2c
 800a6bc:	46bd      	mov	sp, r7
 800a6be:	bd90      	pop	{r4, r7, pc}

0800a6c0 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800a6c0:	b480      	push	{r7}
 800a6c2:	b089      	sub	sp, #36	@ 0x24
 800a6c4:	af00      	add	r7, sp, #0
 800a6c6:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800a6c8:	2300      	movs	r3, #0
 800a6ca:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800a6cc:	2300      	movs	r3, #0
 800a6ce:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800a6d4:	2308      	movs	r3, #8
 800a6d6:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	f04f 32ff 	mov.w	r2, #4294967295
 800a6de:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800a6e0:	e02c      	b.n	800a73c <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681a      	ldr	r2, [r3, #0]
 800a6e6:	69fb      	ldr	r3, [r7, #28]
 800a6e8:	005b      	lsls	r3, r3, #1
 800a6ea:	4413      	add	r3, r2
 800a6ec:	881b      	ldrh	r3, [r3, #0]
 800a6ee:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800a6f0:	89fb      	ldrh	r3, [r7, #14]
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d107      	bne.n	800a706 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800a6f6:	697b      	ldr	r3, [r7, #20]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d101      	bne.n	800a700 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800a6fc:	69fb      	ldr	r3, [r7, #28]
 800a6fe:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800a700:	697b      	ldr	r3, [r7, #20]
 800a702:	3301      	adds	r3, #1
 800a704:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800a706:	89fb      	ldrh	r3, [r7, #14]
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d104      	bne.n	800a716 <prv_ntop6_search_zeros+0x56>
 800a70c:	693b      	ldr	r3, [r7, #16]
 800a70e:	3b01      	subs	r3, #1
 800a710:	69fa      	ldr	r2, [r7, #28]
 800a712:	429a      	cmp	r2, r3
 800a714:	d10f      	bne.n	800a736 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800a716:	697b      	ldr	r3, [r7, #20]
 800a718:	2b01      	cmp	r3, #1
 800a71a:	dd0a      	ble.n	800a732 <prv_ntop6_search_zeros+0x72>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	689b      	ldr	r3, [r3, #8]
 800a720:	697a      	ldr	r2, [r7, #20]
 800a722:	429a      	cmp	r2, r3
 800a724:	dd05      	ble.n	800a732 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	697a      	ldr	r2, [r7, #20]
 800a72a:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800a72c:	687b      	ldr	r3, [r7, #4]
 800a72e:	69ba      	ldr	r2, [r7, #24]
 800a730:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800a732:	2300      	movs	r3, #0
 800a734:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800a736:	69fb      	ldr	r3, [r7, #28]
 800a738:	3301      	adds	r3, #1
 800a73a:	61fb      	str	r3, [r7, #28]
 800a73c:	69fa      	ldr	r2, [r7, #28]
 800a73e:	693b      	ldr	r3, [r7, #16]
 800a740:	429a      	cmp	r2, r3
 800a742:	dbce      	blt.n	800a6e2 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800a744:	bf00      	nop
 800a746:	bf00      	nop
 800a748:	3724      	adds	r7, #36	@ 0x24
 800a74a:	46bd      	mov	sp, r7
 800a74c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a750:	4770      	bx	lr

0800a752 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800a752:	b480      	push	{r7}
 800a754:	b087      	sub	sp, #28
 800a756:	af00      	add	r7, sp, #0
 800a758:	60f8      	str	r0, [r7, #12]
 800a75a:	60b9      	str	r1, [r7, #8]
 800a75c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800a75e:	2301      	movs	r3, #1
 800a760:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800a762:	2308      	movs	r3, #8
 800a764:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	691a      	ldr	r2, [r3, #16]
 800a76a:	68bb      	ldr	r3, [r7, #8]
 800a76c:	3b01      	subs	r3, #1
 800a76e:	429a      	cmp	r2, r3
 800a770:	d827      	bhi.n	800a7c2 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	691b      	ldr	r3, [r3, #16]
 800a776:	68fa      	ldr	r2, [r7, #12]
 800a778:	4413      	add	r3, r2
 800a77a:	223a      	movs	r2, #58	@ 0x3a
 800a77c:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800a77e:	687b      	ldr	r3, [r7, #4]
 800a780:	691b      	ldr	r3, [r3, #16]
 800a782:	1c5a      	adds	r2, r3, #1
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	68da      	ldr	r2, [r3, #12]
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	689b      	ldr	r3, [r3, #8]
 800a790:	4413      	add	r3, r2
 800a792:	693a      	ldr	r2, [r7, #16]
 800a794:	429a      	cmp	r2, r3
 800a796:	d116      	bne.n	800a7c6 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	691a      	ldr	r2, [r3, #16]
 800a79c:	68bb      	ldr	r3, [r7, #8]
 800a79e:	3b01      	subs	r3, #1
 800a7a0:	429a      	cmp	r2, r3
 800a7a2:	d80b      	bhi.n	800a7bc <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	691b      	ldr	r3, [r3, #16]
 800a7a8:	68fa      	ldr	r2, [r7, #12]
 800a7aa:	4413      	add	r3, r2
 800a7ac:	223a      	movs	r2, #58	@ 0x3a
 800a7ae:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	691b      	ldr	r3, [r3, #16]
 800a7b4:	1c5a      	adds	r2, r3, #1
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	611a      	str	r2, [r3, #16]
 800a7ba:	e004      	b.n	800a7c6 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800a7bc:	2300      	movs	r3, #0
 800a7be:	617b      	str	r3, [r7, #20]
 800a7c0:	e001      	b.n	800a7c6 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800a7c6:	697b      	ldr	r3, [r7, #20]
}
 800a7c8:	4618      	mov	r0, r3
 800a7ca:	371c      	adds	r7, #28
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7d2:	4770      	bx	lr

0800a7d4 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800a7d4:	b590      	push	{r4, r7, lr}
 800a7d6:	b089      	sub	sp, #36	@ 0x24
 800a7d8:	af00      	add	r7, sp, #0
 800a7da:	60f8      	str	r0, [r7, #12]
 800a7dc:	60b9      	str	r1, [r7, #8]
 800a7de:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800a7e4:	2304      	movs	r3, #4
 800a7e6:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	dd13      	ble.n	800a818 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	691a      	ldr	r2, [r3, #16]
 800a7f4:	68bb      	ldr	r3, [r7, #8]
 800a7f6:	3b01      	subs	r3, #1
 800a7f8:	429a      	cmp	r2, r3
 800a7fa:	d302      	bcc.n	800a802 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800a7fc:	2300      	movs	r3, #0
 800a7fe:	61fb      	str	r3, [r7, #28]
 800a800:	e00a      	b.n	800a818 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800a802:	687b      	ldr	r3, [r7, #4]
 800a804:	691b      	ldr	r3, [r3, #16]
 800a806:	68fa      	ldr	r2, [r7, #12]
 800a808:	4413      	add	r3, r2
 800a80a:	223a      	movs	r2, #58	@ 0x3a
 800a80c:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	691b      	ldr	r3, [r3, #16]
 800a812:	1c5a      	adds	r2, r3, #1
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800a818:	69fb      	ldr	r3, [r7, #28]
 800a81a:	2b01      	cmp	r3, #1
 800a81c:	d130      	bne.n	800a880 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	691a      	ldr	r2, [r3, #16]
 800a822:	68b9      	ldr	r1, [r7, #8]
 800a824:	69bb      	ldr	r3, [r7, #24]
 800a826:	1acb      	subs	r3, r1, r3
 800a828:	429a      	cmp	r2, r3
 800a82a:	d827      	bhi.n	800a87c <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	691b      	ldr	r3, [r3, #16]
 800a830:	68fa      	ldr	r2, [r7, #12]
 800a832:	18d0      	adds	r0, r2, r3
 800a834:	69bb      	ldr	r3, [r7, #24]
 800a836:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	681a      	ldr	r2, [r3, #0]
 800a83c:	687b      	ldr	r3, [r7, #4]
 800a83e:	68db      	ldr	r3, [r3, #12]
 800a840:	005b      	lsls	r3, r3, #1
 800a842:	4413      	add	r3, r2
 800a844:	881b      	ldrh	r3, [r3, #0]
 800a846:	021b      	lsls	r3, r3, #8
 800a848:	b21a      	sxth	r2, r3
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6819      	ldr	r1, [r3, #0]
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	68db      	ldr	r3, [r3, #12]
 800a852:	005b      	lsls	r3, r3, #1
 800a854:	440b      	add	r3, r1
 800a856:	881b      	ldrh	r3, [r3, #0]
 800a858:	0a1b      	lsrs	r3, r3, #8
 800a85a:	b29b      	uxth	r3, r3
 800a85c:	b21b      	sxth	r3, r3
 800a85e:	4313      	orrs	r3, r2
 800a860:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800a862:	b29b      	uxth	r3, r3
 800a864:	461a      	mov	r2, r3
 800a866:	4621      	mov	r1, r4
 800a868:	f7ff fee6 	bl	800a638 <uxHexPrintShort>
 800a86c:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800a86e:	687b      	ldr	r3, [r7, #4]
 800a870:	691a      	ldr	r2, [r3, #16]
 800a872:	697b      	ldr	r3, [r7, #20]
 800a874:	441a      	add	r2, r3
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	611a      	str	r2, [r3, #16]
 800a87a:	e001      	b.n	800a880 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800a87c:	2300      	movs	r3, #0
 800a87e:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800a880:	69fb      	ldr	r3, [r7, #28]
}
 800a882:	4618      	mov	r0, r3
 800a884:	3724      	adds	r7, #36	@ 0x24
 800a886:	46bd      	mov	sp, r7
 800a888:	bd90      	pop	{r4, r7, pc}

0800a88a <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b08a      	sub	sp, #40	@ 0x28
 800a88e:	af00      	add	r7, sp, #0
 800a890:	60f8      	str	r0, [r7, #12]
 800a892:	60b9      	str	r1, [r7, #8]
 800a894:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800a896:	f107 0310 	add.w	r3, r7, #16
 800a89a:	2214      	movs	r2, #20
 800a89c:	2100      	movs	r1, #0
 800a89e:	4618      	mov	r0, r3
 800a8a0:	f016 f99d 	bl	8020bde <memset>

    xSet.pusAddress = pvSource;
 800a8a4:	68fb      	ldr	r3, [r7, #12]
 800a8a6:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	2b02      	cmp	r3, #2
 800a8ac:	d92c      	bls.n	800a908 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800a8ae:	f107 0310 	add.w	r3, r7, #16
 800a8b2:	4618      	mov	r0, r3
 800a8b4:	f7ff ff04 	bl	800a6c0 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800a8b8:	e01f      	b.n	800a8fa <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800a8ba:	69fa      	ldr	r2, [r7, #28]
 800a8bc:	697b      	ldr	r3, [r7, #20]
 800a8be:	429a      	cmp	r2, r3
 800a8c0:	d10e      	bne.n	800a8e0 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800a8c2:	f107 0310 	add.w	r3, r7, #16
 800a8c6:	461a      	mov	r2, r3
 800a8c8:	6879      	ldr	r1, [r7, #4]
 800a8ca:	68b8      	ldr	r0, [r7, #8]
 800a8cc:	f7ff ff41 	bl	800a752 <prv_ntop6_write_zeros>
 800a8d0:	4603      	mov	r3, r0
 800a8d2:	2b00      	cmp	r3, #0
 800a8d4:	d015      	beq.n	800a902 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800a8d6:	69fa      	ldr	r2, [r7, #28]
 800a8d8:	69bb      	ldr	r3, [r7, #24]
 800a8da:	4413      	add	r3, r2
 800a8dc:	61fb      	str	r3, [r7, #28]
 800a8de:	e00c      	b.n	800a8fa <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800a8e0:	f107 0310 	add.w	r3, r7, #16
 800a8e4:	461a      	mov	r2, r3
 800a8e6:	6879      	ldr	r1, [r7, #4]
 800a8e8:	68b8      	ldr	r0, [r7, #8]
 800a8ea:	f7ff ff73 	bl	800a7d4 <prv_ntop6_write_short>
 800a8ee:	4603      	mov	r3, r0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d008      	beq.n	800a906 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800a8f4:	69fb      	ldr	r3, [r7, #28]
 800a8f6:	3301      	adds	r3, #1
 800a8f8:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	2b07      	cmp	r3, #7
 800a8fe:	dddc      	ble.n	800a8ba <FreeRTOS_inet_ntop6+0x30>
 800a900:	e002      	b.n	800a908 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800a902:	bf00      	nop
 800a904:	e000      	b.n	800a908 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800a906:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800a908:	69fb      	ldr	r3, [r7, #28]
 800a90a:	2b07      	cmp	r3, #7
 800a90c:	dc02      	bgt.n	800a914 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800a90e:	2300      	movs	r3, #0
 800a910:	627b      	str	r3, [r7, #36]	@ 0x24
 800a912:	e006      	b.n	800a922 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800a914:	6a3b      	ldr	r3, [r7, #32]
 800a916:	68ba      	ldr	r2, [r7, #8]
 800a918:	4413      	add	r3, r2
 800a91a:	2200      	movs	r2, #0
 800a91c:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800a91e:	68bb      	ldr	r3, [r7, #8]
 800a920:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800a922:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a924:	4618      	mov	r0, r3
 800a926:	3728      	adds	r7, #40	@ 0x28
 800a928:	46bd      	mov	sp, r7
 800a92a:	bd80      	pop	{r7, pc}

0800a92c <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800a92c:	b480      	push	{r7}
 800a92e:	b083      	sub	sp, #12
 800a930:	af00      	add	r7, sp, #0
 800a932:	6078      	str	r0, [r7, #4]
 800a934:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800a936:	683b      	ldr	r3, [r7, #0]
 800a938:	2233      	movs	r2, #51	@ 0x33
 800a93a:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800a93c:	683b      	ldr	r3, [r7, #0]
 800a93e:	2233      	movs	r2, #51	@ 0x33
 800a940:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800a942:	687b      	ldr	r3, [r7, #4]
 800a944:	7b1a      	ldrb	r2, [r3, #12]
 800a946:	683b      	ldr	r3, [r7, #0]
 800a948:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	7b5a      	ldrb	r2, [r3, #13]
 800a94e:	683b      	ldr	r3, [r7, #0]
 800a950:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800a952:	687b      	ldr	r3, [r7, #4]
 800a954:	7b9a      	ldrb	r2, [r3, #14]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800a95a:	687b      	ldr	r3, [r7, #4]
 800a95c:	7bda      	ldrb	r2, [r3, #15]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	715a      	strb	r2, [r3, #5]
}
 800a962:	bf00      	nop
 800a964:	370c      	adds	r7, #12
 800a966:	46bd      	mov	sp, r7
 800a968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a96c:	4770      	bx	lr
	...

0800a970 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800a970:	b580      	push	{r7, lr}
 800a972:	b08e      	sub	sp, #56	@ 0x38
 800a974:	af02      	add	r7, sp, #8
 800a976:	60f8      	str	r0, [r7, #12]
 800a978:	60b9      	str	r1, [r7, #8]
 800a97a:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800a97c:	2300      	movs	r3, #0
 800a97e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800a982:	2336      	movs	r3, #54	@ 0x36
 800a984:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800a986:	2300      	movs	r3, #0
 800a988:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800a98a:	2300      	movs	r3, #0
 800a98c:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800a98e:	2300      	movs	r3, #0
 800a990:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800a992:	68bb      	ldr	r3, [r7, #8]
 800a994:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	2b00      	cmp	r3, #0
 800a99a:	f000 808c 	beq.w	800aab6 <usGetExtensionHeaderLength+0x146>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	2b00      	cmp	r3, #0
 800a9a2:	f000 8088 	beq.w	800aab6 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800a9aa:	693b      	ldr	r3, [r7, #16]
 800a9ac:	7d1b      	ldrb	r3, [r3, #20]
 800a9ae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800a9b2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9b6:	2100      	movs	r1, #0
 800a9b8:	4618      	mov	r0, r3
 800a9ba:	f7ff fcaf 	bl	800a31c <xGetExtensionOrder>
 800a9be:	4603      	mov	r3, r0
 800a9c0:	2b00      	cmp	r3, #0
 800a9c2:	dd72      	ble.n	800aaaa <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800a9c4:	e06b      	b.n	800aa9e <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800a9c6:	68fa      	ldr	r2, [r7, #12]
 800a9c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9ca:	4413      	add	r3, r2
 800a9cc:	781b      	ldrb	r3, [r3, #0]
 800a9ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800a9d2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800a9d6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a9da:	4611      	mov	r1, r2
 800a9dc:	4618      	mov	r0, r3
 800a9de:	f7ff fc9d 	bl	800a31c <xGetExtensionOrder>
 800a9e2:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800a9e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a9e6:	3301      	adds	r3, #1
 800a9e8:	68fa      	ldr	r2, [r7, #12]
 800a9ea:	4413      	add	r3, r2
 800a9ec:	781b      	ldrb	r3, [r3, #0]
 800a9ee:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800a9f0:	69fb      	ldr	r3, [r7, #28]
 800a9f2:	3301      	adds	r3, #1
 800a9f4:	00db      	lsls	r3, r3, #3
 800a9f6:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800a9f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a9fa:	69fb      	ldr	r3, [r7, #28]
 800a9fc:	4413      	add	r3, r2
 800a9fe:	68ba      	ldr	r2, [r7, #8]
 800aa00:	429a      	cmp	r2, r3
 800aa02:	d806      	bhi.n	800aa12 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800aa04:	68bb      	ldr	r3, [r7, #8]
 800aa06:	69fa      	ldr	r2, [r7, #28]
 800aa08:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800aa0a:	482d      	ldr	r0, [pc, #180]	@ (800aac0 <usGetExtensionHeaderLength+0x150>)
 800aa0c:	f015 fdbe 	bl	802058c <lUDPLoggingPrintf>
                    break;
 800aa10:	e051      	b.n	800aab6 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800aa12:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	4413      	add	r3, r2
 800aa18:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800aa1a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa1e:	2b06      	cmp	r3, #6
 800aa20:	d007      	beq.n	800aa32 <usGetExtensionHeaderLength+0xc2>
 800aa22:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa26:	2b11      	cmp	r3, #17
 800aa28:	d003      	beq.n	800aa32 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800aa2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa2e:	2b3a      	cmp	r3, #58	@ 0x3a
 800aa30:	d10d      	bne.n	800aa4e <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800aa32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa36:	4619      	mov	r1, r3
 800aa38:	4822      	ldr	r0, [pc, #136]	@ (800aac4 <usGetExtensionHeaderLength+0x154>)
 800aa3a:	f015 fda7 	bl	802058c <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800aa3e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa40:	3b36      	subs	r3, #54	@ 0x36
 800aa42:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800aa4a:	701a      	strb	r2, [r3, #0]
                    break;
 800aa4c:	e033      	b.n	800aab6 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800aa4e:	68fa      	ldr	r2, [r7, #12]
 800aa50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aa52:	4413      	add	r3, r2
 800aa54:	781a      	ldrb	r2, [r3, #0]
 800aa56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa5a:	4611      	mov	r1, r2
 800aa5c:	4618      	mov	r0, r3
 800aa5e:	f7ff fc5d 	bl	800a31c <xGetExtensionOrder>
 800aa62:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800aa64:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800aa68:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800aa6c:	697b      	ldr	r3, [r7, #20]
 800aa6e:	9300      	str	r3, [sp, #0]
 800aa70:	4613      	mov	r3, r2
 800aa72:	69ba      	ldr	r2, [r7, #24]
 800aa74:	4814      	ldr	r0, [pc, #80]	@ (800aac8 <usGetExtensionHeaderLength+0x158>)
 800aa76:	f015 fd89 	bl	802058c <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800aa7a:	697b      	ldr	r3, [r7, #20]
 800aa7c:	2b01      	cmp	r3, #1
 800aa7e:	d103      	bne.n	800aa88 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800aa80:	4812      	ldr	r0, [pc, #72]	@ (800aacc <usGetExtensionHeaderLength+0x15c>)
 800aa82:	f015 fd83 	bl	802058c <lUDPLoggingPrintf>
                    break;
 800aa86:	e016      	b.n	800aab6 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	da03      	bge.n	800aa96 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800aa8e:	4810      	ldr	r0, [pc, #64]	@ (800aad0 <usGetExtensionHeaderLength+0x160>)
 800aa90:	f015 fd7c 	bl	802058c <lUDPLoggingPrintf>
                    break;
 800aa94:	e00f      	b.n	800aab6 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800aa96:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aa9a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800aa9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aaa0:	3308      	adds	r3, #8
 800aaa2:	68ba      	ldr	r2, [r7, #8]
 800aaa4:	429a      	cmp	r2, r3
 800aaa6:	d88e      	bhi.n	800a9c6 <usGetExtensionHeaderLength+0x56>
 800aaa8:	e005      	b.n	800aab6 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800aab0:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800aab2:	2300      	movs	r3, #0
 800aab4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800aab6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aab8:	4618      	mov	r0, r3
 800aaba:	3730      	adds	r7, #48	@ 0x30
 800aabc:	46bd      	mov	sp, r7
 800aabe:	bd80      	pop	{r7, pc}
 800aac0:	080234c8 	.word	0x080234c8
 800aac4:	08023510 	.word	0x08023510
 800aac8:	08023524 	.word	0x08023524
 800aacc:	0802354c 	.word	0x0802354c
 800aad0:	080235ac 	.word	0x080235ac

0800aad4 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	b084      	sub	sp, #16
 800aad8:	af00      	add	r7, sp, #0
 800aada:	6078      	str	r0, [r7, #4]
 800aadc:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	2b00      	cmp	r3, #0
 800aae2:	d104      	bne.n	800aaee <vManageSolicitedNodeAddress+0x1a>
 800aae4:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800aae8:	482d      	ldr	r0, [pc, #180]	@ (800aba0 <vManageSolicitedNodeAddress+0xcc>)
 800aaea:	f7f6 fb21 	bl	8001130 <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d104      	bne.n	800ab02 <vManageSolicitedNodeAddress+0x2e>
 800aaf8:	f240 1133 	movw	r1, #307	@ 0x133
 800aafc:	4828      	ldr	r0, [pc, #160]	@ (800aba0 <vManageSolicitedNodeAddress+0xcc>)
 800aafe:	f7f6 fb17 	bl	8001130 <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800ab02:	687b      	ldr	r3, [r7, #4]
 800ab04:	3338      	adds	r3, #56	@ 0x38
 800ab06:	4618      	mov	r0, r3
 800ab08:	f002 f9c2 	bl	800ce90 <xIPv6_GetIPType>
 800ab0c:	4603      	mov	r3, r0
 800ab0e:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800ab10:	7bfb      	ldrb	r3, [r7, #15]
 800ab12:	2b01      	cmp	r3, #1
 800ab14:	d005      	beq.n	800ab22 <vManageSolicitedNodeAddress+0x4e>
 800ab16:	7bfb      	ldrb	r3, [r7, #15]
 800ab18:	2b02      	cmp	r3, #2
 800ab1a:	d002      	beq.n	800ab22 <vManageSolicitedNodeAddress+0x4e>
 800ab1c:	7bfb      	ldrb	r3, [r7, #15]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d138      	bne.n	800ab94 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800ab22:	2333      	movs	r3, #51	@ 0x33
 800ab24:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800ab26:	2333      	movs	r3, #51	@ 0x33
 800ab28:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800ab2a:	23ff      	movs	r3, #255	@ 0xff
 800ab2c:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ab34:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800ab3c:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800ab3e:	687b      	ldr	r3, [r7, #4]
 800ab40:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800ab44:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800ab46:	683b      	ldr	r3, [r7, #0]
 800ab48:	2b01      	cmp	r3, #1
 800ab4a:	d111      	bne.n	800ab70 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ab52:	695b      	ldr	r3, [r3, #20]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	d01e      	beq.n	800ab96 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800ab58:	687b      	ldr	r3, [r7, #4]
 800ab5a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ab5e:	695b      	ldr	r3, [r3, #20]
 800ab60:	687a      	ldr	r2, [r7, #4]
 800ab62:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800ab66:	f107 0108 	add.w	r1, r7, #8
 800ab6a:	4610      	mov	r0, r2
 800ab6c:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800ab6e:	e012      	b.n	800ab96 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ab76:	699b      	ldr	r3, [r3, #24]
 800ab78:	2b00      	cmp	r3, #0
 800ab7a:	d00c      	beq.n	800ab96 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800ab7c:	687b      	ldr	r3, [r7, #4]
 800ab7e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ab82:	699b      	ldr	r3, [r3, #24]
 800ab84:	687a      	ldr	r2, [r7, #4]
 800ab86:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800ab8a:	f107 0108 	add.w	r1, r7, #8
 800ab8e:	4610      	mov	r0, r2
 800ab90:	4798      	blx	r3
}
 800ab92:	e000      	b.n	800ab96 <vManageSolicitedNodeAddress+0xc2>
            break;
 800ab94:	bf00      	nop
}
 800ab96:	bf00      	nop
 800ab98:	3710      	adds	r7, #16
 800ab9a:	46bd      	mov	sp, r7
 800ab9c:	bd80      	pop	{r7, pc}
 800ab9e:	bf00      	nop
 800aba0:	080235d0 	.word	0x080235d0

0800aba4 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800aba4:	b580      	push	{r7, lr}
 800aba6:	b082      	sub	sp, #8
 800aba8:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800abaa:	2000      	movs	r0, #0
 800abac:	f001 fd8c 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 800abb0:	6078      	str	r0, [r7, #4]
 800abb2:	e016      	b.n	800abe2 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800abba:	f003 0304 	and.w	r3, r3, #4
 800abbe:	b2db      	uxtb	r3, r3
 800abc0:	2b00      	cmp	r3, #0
 800abc2:	d009      	beq.n	800abd8 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	3338      	adds	r3, #56	@ 0x38
 800abc8:	4618      	mov	r0, r3
 800abca:	f002 f961 	bl	800ce90 <xIPv6_GetIPType>
 800abce:	4603      	mov	r3, r0
 800abd0:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800abd2:	78fb      	ldrb	r3, [r7, #3]
 800abd4:	2b01      	cmp	r3, #1
 800abd6:	d008      	beq.n	800abea <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800abd8:	6879      	ldr	r1, [r7, #4]
 800abda:	2000      	movs	r0, #0
 800abdc:	f001 fd96 	bl	800c70c <FreeRTOS_NextEndPoint>
 800abe0:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800abe2:	687b      	ldr	r3, [r7, #4]
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d1e5      	bne.n	800abb4 <pxFindLocalEndpoint+0x10>
 800abe8:	e000      	b.n	800abec <pxFindLocalEndpoint+0x48>
                {
                    break;
 800abea:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800abec:	687b      	ldr	r3, [r7, #4]
    }
 800abee:	4618      	mov	r0, r3
 800abf0:	3708      	adds	r7, #8
 800abf2:	46bd      	mov	sp, r7
 800abf4:	bd80      	pop	{r7, pc}

0800abf6 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800abf6:	b580      	push	{r7, lr}
 800abf8:	b086      	sub	sp, #24
 800abfa:	af00      	add	r7, sp, #0
 800abfc:	60f8      	str	r0, [r7, #12]
 800abfe:	60b9      	str	r1, [r7, #8]
 800ac00:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800ac02:	68f8      	ldr	r0, [r7, #12]
 800ac04:	f7ff faa8 	bl	800a158 <xIsIPv6AllowedMulticast>
 800ac08:	4603      	mov	r3, r0
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00e      	beq.n	800ac2c <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800ac0e:	68b9      	ldr	r1, [r7, #8]
 800ac10:	68f8      	ldr	r0, [r7, #12]
 800ac12:	f7ff fe8b 	bl	800a92c <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	2b00      	cmp	r3, #0
 800ac1a:	d004      	beq.n	800ac26 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800ac1c:	f7ff ffc2 	bl	800aba4 <pxFindLocalEndpoint>
 800ac20:	4602      	mov	r2, r0
 800ac22:	687b      	ldr	r3, [r7, #4]
 800ac24:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800ac26:	2301      	movs	r3, #1
 800ac28:	75fb      	strb	r3, [r7, #23]
 800ac2a:	e001      	b.n	800ac30 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800ac2c:	2300      	movs	r3, #0
 800ac2e:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800ac30:	7dfb      	ldrb	r3, [r7, #23]
    }
 800ac32:	4618      	mov	r0, r3
 800ac34:	3718      	adds	r7, #24
 800ac36:	46bd      	mov	sp, r7
 800ac38:	bd80      	pop	{r7, pc}
	...

0800ac3c <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800ac3c:	b580      	push	{r7, lr}
 800ac3e:	b088      	sub	sp, #32
 800ac40:	af00      	add	r7, sp, #0
 800ac42:	60f8      	str	r0, [r7, #12]
 800ac44:	60b9      	str	r1, [r7, #8]
 800ac46:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800ac48:	687a      	ldr	r2, [r7, #4]
 800ac4a:	68b9      	ldr	r1, [r7, #8]
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f7ff ffd2 	bl	800abf6 <prvMACResolve>
 800ac52:	4603      	mov	r3, r0
 800ac54:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800ac56:	7ffb      	ldrb	r3, [r7, #31]
 800ac58:	2b00      	cmp	r3, #0
 800ac5a:	d106      	bne.n	800ac6a <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800ac5c:	687a      	ldr	r2, [r7, #4]
 800ac5e:	68b9      	ldr	r1, [r7, #8]
 800ac60:	68f8      	ldr	r0, [r7, #12]
 800ac62:	f000 f9a9 	bl	800afb8 <prvNDCacheLookup>
 800ac66:	4603      	mov	r3, r0
 800ac68:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800ac6a:	7ffb      	ldrb	r3, [r7, #31]
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d104      	bne.n	800ac7a <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800ac70:	68fb      	ldr	r3, [r7, #12]
 800ac72:	4619      	mov	r1, r3
 800ac74:	4840      	ldr	r0, [pc, #256]	@ (800ad78 <eNDGetCacheEntry+0x13c>)
 800ac76:	f015 fc89 	bl	802058c <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800ac7a:	7ffb      	ldrb	r3, [r7, #31]
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d176      	bne.n	800ad6e <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800ac80:	68f8      	ldr	r0, [r7, #12]
 800ac82:	f002 f905 	bl	800ce90 <xIPv6_GetIPType>
 800ac86:	4603      	mov	r3, r0
 800ac88:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800ac8a:	68f8      	ldr	r0, [r7, #12]
 800ac8c:	f001 fdae 	bl	800c7ec <FreeRTOS_FindEndPointOnIP_IPv6>
 800ac90:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800ac92:	69bb      	ldr	r3, [r7, #24]
 800ac94:	2b00      	cmp	r3, #0
 800ac96:	d00d      	beq.n	800acb4 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	d002      	beq.n	800aca4 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	69ba      	ldr	r2, [r7, #24]
 800aca2:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800aca4:	68f9      	ldr	r1, [r7, #12]
 800aca6:	69bb      	ldr	r3, [r7, #24]
 800aca8:	3338      	adds	r3, #56	@ 0x38
 800acaa:	461a      	mov	r2, r3
 800acac:	4833      	ldr	r0, [pc, #204]	@ (800ad7c <eNDGetCacheEntry+0x140>)
 800acae:	f015 fc6d 	bl	802058c <lUDPLoggingPrintf>
 800acb2:	e05c      	b.n	800ad6e <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800acb4:	7dfb      	ldrb	r3, [r7, #23]
 800acb6:	2b01      	cmp	r3, #1
 800acb8:	d12b      	bne.n	800ad12 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800acba:	2000      	movs	r0, #0
 800acbc:	f001 fd04 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 800acc0:	61b8      	str	r0, [r7, #24]
 800acc2:	e017      	b.n	800acf4 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800acc4:	69bb      	ldr	r3, [r7, #24]
 800acc6:	3338      	adds	r3, #56	@ 0x38
 800acc8:	4618      	mov	r0, r3
 800acca:	f002 f8e1 	bl	800ce90 <xIPv6_GetIPType>
 800acce:	4603      	mov	r3, r0
 800acd0:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800acd2:	7dba      	ldrb	r2, [r7, #22]
 800acd4:	7dfb      	ldrb	r3, [r7, #23]
 800acd6:	429a      	cmp	r2, r3
 800acd8:	d107      	bne.n	800acea <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800acda:	687a      	ldr	r2, [r7, #4]
 800acdc:	68b9      	ldr	r1, [r7, #8]
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f000 f96a 	bl	800afb8 <prvNDCacheLookup>
 800ace4:	4603      	mov	r3, r0
 800ace6:	77fb      	strb	r3, [r7, #31]
                            break;
 800ace8:	e007      	b.n	800acfa <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800acea:	69b9      	ldr	r1, [r7, #24]
 800acec:	2000      	movs	r0, #0
 800acee:	f001 fd0d 	bl	800c70c <FreeRTOS_NextEndPoint>
 800acf2:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800acf4:	69bb      	ldr	r3, [r7, #24]
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d1e4      	bne.n	800acc4 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800acfa:	68f9      	ldr	r1, [r7, #12]
 800acfc:	7ffb      	ldrb	r3, [r7, #31]
 800acfe:	2b01      	cmp	r3, #1
 800ad00:	d101      	bne.n	800ad06 <eNDGetCacheEntry+0xca>
 800ad02:	4b1f      	ldr	r3, [pc, #124]	@ (800ad80 <eNDGetCacheEntry+0x144>)
 800ad04:	e000      	b.n	800ad08 <eNDGetCacheEntry+0xcc>
 800ad06:	4b1f      	ldr	r3, [pc, #124]	@ (800ad84 <eNDGetCacheEntry+0x148>)
 800ad08:	461a      	mov	r2, r3
 800ad0a:	481f      	ldr	r0, [pc, #124]	@ (800ad88 <eNDGetCacheEntry+0x14c>)
 800ad0c:	f015 fc3e 	bl	802058c <lUDPLoggingPrintf>
 800ad10:	e02d      	b.n	800ad6e <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800ad12:	2060      	movs	r0, #96	@ 0x60
 800ad14:	f002 f87c 	bl	800ce10 <FreeRTOS_FindGateWay>
 800ad18:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800ad1a:	69bb      	ldr	r3, [r7, #24]
 800ad1c:	2b00      	cmp	r3, #0
 800ad1e:	d026      	beq.n	800ad6e <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ad20:	68f8      	ldr	r0, [r7, #12]
 800ad22:	69bb      	ldr	r3, [r7, #24]
 800ad24:	335c      	adds	r3, #92	@ 0x5c
 800ad26:	2210      	movs	r2, #16
 800ad28:	4619      	mov	r1, r3
 800ad2a:	f015 fe4b 	bl	80209c4 <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	4619      	mov	r1, r3
 800ad32:	4816      	ldr	r0, [pc, #88]	@ (800ad8c <eNDGetCacheEntry+0x150>)
 800ad34:	f015 fc2a 	bl	802058c <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800ad38:	69bb      	ldr	r3, [r7, #24]
 800ad3a:	3338      	adds	r3, #56	@ 0x38
 800ad3c:	4619      	mov	r1, r3
 800ad3e:	4814      	ldr	r0, [pc, #80]	@ (800ad90 <eNDGetCacheEntry+0x154>)
 800ad40:	f015 fc24 	bl	802058c <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800ad44:	687a      	ldr	r2, [r7, #4]
 800ad46:	68b9      	ldr	r1, [r7, #8]
 800ad48:	68f8      	ldr	r0, [r7, #12]
 800ad4a:	f000 f935 	bl	800afb8 <prvNDCacheLookup>
 800ad4e:	4603      	mov	r3, r0
 800ad50:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	2b00      	cmp	r3, #0
 800ad58:	d006      	beq.n	800ad68 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	681b      	ldr	r3, [r3, #0]
 800ad5e:	3338      	adds	r3, #56	@ 0x38
 800ad60:	4619      	mov	r1, r3
 800ad62:	480c      	ldr	r0, [pc, #48]	@ (800ad94 <eNDGetCacheEntry+0x158>)
 800ad64:	f015 fc12 	bl	802058c <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800ad68:	687b      	ldr	r3, [r7, #4]
 800ad6a:	69ba      	ldr	r2, [r7, #24]
 800ad6c:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800ad6e:	7ffb      	ldrb	r3, [r7, #31]
    }
 800ad70:	4618      	mov	r0, r3
 800ad72:	3720      	adds	r7, #32
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}
 800ad78:	08023604 	.word	0x08023604
 800ad7c:	08023628 	.word	0x08023628
 800ad80:	0802366c 	.word	0x0802366c
 800ad84:	08023670 	.word	0x08023670
 800ad88:	08023678 	.word	0x08023678
 800ad8c:	080236a0 	.word	0x080236a0
 800ad90:	080236c4 	.word	0x080236c4
 800ad94:	080236e8 	.word	0x080236e8

0800ad98 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800ad98:	b5b0      	push	{r4, r5, r7, lr}
 800ad9a:	b08e      	sub	sp, #56	@ 0x38
 800ad9c:	af04      	add	r7, sp, #16
 800ad9e:	60f8      	str	r0, [r7, #12]
 800ada0:	60b9      	str	r1, [r7, #8]
 800ada2:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800ada4:	f04f 33ff 	mov.w	r3, #4294967295
 800ada8:	623b      	str	r3, [r7, #32]
 800adaa:	f04f 33ff 	mov.w	r3, #4294967295
 800adae:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800adb0:	2397      	movs	r3, #151	@ 0x97
 800adb2:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800adb4:	2300      	movs	r3, #0
 800adb6:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800adb8:	2300      	movs	r3, #0
 800adba:	627b      	str	r3, [r7, #36]	@ 0x24
 800adbc:	e033      	b.n	800ae26 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800adbe:	4a44      	ldr	r2, [pc, #272]	@ (800aed0 <vNDRefreshCacheEntry+0x138>)
 800adc0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adc2:	015b      	lsls	r3, r3, #5
 800adc4:	4413      	add	r3, r2
 800adc6:	331d      	adds	r3, #29
 800adc8:	781b      	ldrb	r3, [r3, #0]
 800adca:	2b00      	cmp	r3, #0
 800adcc:	d106      	bne.n	800addc <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800adce:	6a3b      	ldr	r3, [r7, #32]
 800add0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800add4:	d124      	bne.n	800ae20 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800add6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800add8:	623b      	str	r3, [r7, #32]
 800adda:	e021      	b.n	800ae20 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800addc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adde:	015b      	lsls	r3, r3, #5
 800ade0:	4a3b      	ldr	r2, [pc, #236]	@ (800aed0 <vNDRefreshCacheEntry+0x138>)
 800ade2:	4413      	add	r3, r2
 800ade4:	68b9      	ldr	r1, [r7, #8]
 800ade6:	2210      	movs	r2, #16
 800ade8:	4618      	mov	r0, r3
 800adea:	f016 fd80 	bl	80218ee <memcmp>
 800adee:	4603      	mov	r3, r0
 800adf0:	2b00      	cmp	r3, #0
 800adf2:	d102      	bne.n	800adfa <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800adf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adf6:	61fb      	str	r3, [r7, #28]
                break;
 800adf8:	e018      	b.n	800ae2c <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800adfa:	4a35      	ldr	r2, [pc, #212]	@ (800aed0 <vNDRefreshCacheEntry+0x138>)
 800adfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800adfe:	015b      	lsls	r3, r3, #5
 800ae00:	4413      	add	r3, r2
 800ae02:	331c      	adds	r3, #28
 800ae04:	781b      	ldrb	r3, [r3, #0]
 800ae06:	461a      	mov	r2, r3
 800ae08:	8b7b      	ldrh	r3, [r7, #26]
 800ae0a:	4293      	cmp	r3, r2
 800ae0c:	d908      	bls.n	800ae20 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800ae0e:	4a30      	ldr	r2, [pc, #192]	@ (800aed0 <vNDRefreshCacheEntry+0x138>)
 800ae10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae12:	015b      	lsls	r3, r3, #5
 800ae14:	4413      	add	r3, r2
 800ae16:	331c      	adds	r3, #28
 800ae18:	781b      	ldrb	r3, [r3, #0]
 800ae1a:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800ae1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae1e:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800ae20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae22:	3301      	adds	r3, #1
 800ae24:	627b      	str	r3, [r7, #36]	@ 0x24
 800ae26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae28:	2b17      	cmp	r3, #23
 800ae2a:	ddc8      	ble.n	800adbe <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	2b00      	cmp	r3, #0
 800ae30:	da22      	bge.n	800ae78 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800ae32:	6a3b      	ldr	r3, [r7, #32]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	db02      	blt.n	800ae3e <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800ae38:	6a3b      	ldr	r3, [r7, #32]
 800ae3a:	61fb      	str	r3, [r7, #28]
 800ae3c:	e01c      	b.n	800ae78 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800ae3e:	697b      	ldr	r3, [r7, #20]
 800ae40:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	781b      	ldrb	r3, [r3, #0]
 800ae46:	461c      	mov	r4, r3
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	785b      	ldrb	r3, [r3, #1]
 800ae4c:	461d      	mov	r5, r3
 800ae4e:	68fb      	ldr	r3, [r7, #12]
 800ae50:	789b      	ldrb	r3, [r3, #2]
 800ae52:	461a      	mov	r2, r3
 800ae54:	68fb      	ldr	r3, [r7, #12]
 800ae56:	78db      	ldrb	r3, [r3, #3]
 800ae58:	4619      	mov	r1, r3
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	791b      	ldrb	r3, [r3, #4]
 800ae5e:	4618      	mov	r0, r3
 800ae60:	68fb      	ldr	r3, [r7, #12]
 800ae62:	795b      	ldrb	r3, [r3, #5]
 800ae64:	9303      	str	r3, [sp, #12]
 800ae66:	9002      	str	r0, [sp, #8]
 800ae68:	9101      	str	r1, [sp, #4]
 800ae6a:	9200      	str	r2, [sp, #0]
 800ae6c:	462b      	mov	r3, r5
 800ae6e:	4622      	mov	r2, r4
 800ae70:	69f9      	ldr	r1, [r7, #28]
 800ae72:	4818      	ldr	r0, [pc, #96]	@ (800aed4 <vNDRefreshCacheEntry+0x13c>)
 800ae74:	f015 fb8a 	bl	802058c <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ae78:	69fb      	ldr	r3, [r7, #28]
 800ae7a:	015b      	lsls	r3, r3, #5
 800ae7c:	4a14      	ldr	r2, [pc, #80]	@ (800aed0 <vNDRefreshCacheEntry+0x138>)
 800ae7e:	4413      	add	r3, r2
 800ae80:	68b9      	ldr	r1, [r7, #8]
 800ae82:	2210      	movs	r2, #16
 800ae84:	4618      	mov	r0, r3
 800ae86:	f015 fd9d 	bl	80209c4 <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800ae8a:	69fb      	ldr	r3, [r7, #28]
 800ae8c:	015b      	lsls	r3, r3, #5
 800ae8e:	3310      	adds	r3, #16
 800ae90:	4a0f      	ldr	r2, [pc, #60]	@ (800aed0 <vNDRefreshCacheEntry+0x138>)
 800ae92:	4413      	add	r3, r2
 800ae94:	68f9      	ldr	r1, [r7, #12]
 800ae96:	2206      	movs	r2, #6
 800ae98:	4618      	mov	r0, r3
 800ae9a:	f015 fd93 	bl	80209c4 <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800ae9e:	4a0c      	ldr	r2, [pc, #48]	@ (800aed0 <vNDRefreshCacheEntry+0x138>)
 800aea0:	69fb      	ldr	r3, [r7, #28]
 800aea2:	015b      	lsls	r3, r3, #5
 800aea4:	4413      	add	r3, r2
 800aea6:	3318      	adds	r3, #24
 800aea8:	687a      	ldr	r2, [r7, #4]
 800aeaa:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800aeac:	4a08      	ldr	r2, [pc, #32]	@ (800aed0 <vNDRefreshCacheEntry+0x138>)
 800aeae:	69fb      	ldr	r3, [r7, #28]
 800aeb0:	015b      	lsls	r3, r3, #5
 800aeb2:	4413      	add	r3, r2
 800aeb4:	331c      	adds	r3, #28
 800aeb6:	2296      	movs	r2, #150	@ 0x96
 800aeb8:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800aeba:	4a05      	ldr	r2, [pc, #20]	@ (800aed0 <vNDRefreshCacheEntry+0x138>)
 800aebc:	69fb      	ldr	r3, [r7, #28]
 800aebe:	015b      	lsls	r3, r3, #5
 800aec0:	4413      	add	r3, r2
 800aec2:	331d      	adds	r3, #29
 800aec4:	2201      	movs	r2, #1
 800aec6:	701a      	strb	r2, [r3, #0]
    }
 800aec8:	bf00      	nop
 800aeca:	3728      	adds	r7, #40	@ 0x28
 800aecc:	46bd      	mov	sp, r7
 800aece:	bdb0      	pop	{r4, r5, r7, pc}
 800aed0:	20000ed0 	.word	0x20000ed0
 800aed4:	08023710 	.word	0x08023710

0800aed8 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800aed8:	b580      	push	{r7, lr}
 800aeda:	b084      	sub	sp, #16
 800aedc:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800aede:	2300      	movs	r3, #0
 800aee0:	60fb      	str	r3, [r7, #12]
 800aee2:	e05f      	b.n	800afa4 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800aee4:	2300      	movs	r3, #0
 800aee6:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800aee8:	4a32      	ldr	r2, [pc, #200]	@ (800afb4 <vNDAgeCache+0xdc>)
 800aeea:	68fb      	ldr	r3, [r7, #12]
 800aeec:	015b      	lsls	r3, r3, #5
 800aeee:	4413      	add	r3, r2
 800aef0:	331c      	adds	r3, #28
 800aef2:	781b      	ldrb	r3, [r3, #0]
 800aef4:	2b00      	cmp	r3, #0
 800aef6:	d052      	beq.n	800af9e <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800aef8:	4a2e      	ldr	r2, [pc, #184]	@ (800afb4 <vNDAgeCache+0xdc>)
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	015b      	lsls	r3, r3, #5
 800aefe:	4413      	add	r3, r2
 800af00:	331c      	adds	r3, #28
 800af02:	781b      	ldrb	r3, [r3, #0]
 800af04:	3b01      	subs	r3, #1
 800af06:	b2d9      	uxtb	r1, r3
 800af08:	4a2a      	ldr	r2, [pc, #168]	@ (800afb4 <vNDAgeCache+0xdc>)
 800af0a:	68fb      	ldr	r3, [r7, #12]
 800af0c:	015b      	lsls	r3, r3, #5
 800af0e:	4413      	add	r3, r2
 800af10:	331c      	adds	r3, #28
 800af12:	460a      	mov	r2, r1
 800af14:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800af16:	4a27      	ldr	r2, [pc, #156]	@ (800afb4 <vNDAgeCache+0xdc>)
 800af18:	68fb      	ldr	r3, [r7, #12]
 800af1a:	015b      	lsls	r3, r3, #5
 800af1c:	4413      	add	r3, r2
 800af1e:	331c      	adds	r3, #28
 800af20:	781b      	ldrb	r3, [r3, #0]
 800af22:	2b00      	cmp	r3, #0
 800af24:	d109      	bne.n	800af3a <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800af26:	68fb      	ldr	r3, [r7, #12]
 800af28:	015b      	lsls	r3, r3, #5
 800af2a:	4a22      	ldr	r2, [pc, #136]	@ (800afb4 <vNDAgeCache+0xdc>)
 800af2c:	4413      	add	r3, r2
 800af2e:	2220      	movs	r2, #32
 800af30:	2100      	movs	r1, #0
 800af32:	4618      	mov	r0, r3
 800af34:	f015 fe53 	bl	8020bde <memset>
 800af38:	e031      	b.n	800af9e <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800af3a:	4a1e      	ldr	r2, [pc, #120]	@ (800afb4 <vNDAgeCache+0xdc>)
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	015b      	lsls	r3, r3, #5
 800af40:	4413      	add	r3, r2
 800af42:	331d      	adds	r3, #29
 800af44:	781b      	ldrb	r3, [r3, #0]
 800af46:	2b00      	cmp	r3, #0
 800af48:	d102      	bne.n	800af50 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800af4a:	2301      	movs	r3, #1
 800af4c:	60bb      	str	r3, [r7, #8]
 800af4e:	e009      	b.n	800af64 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800af50:	4a18      	ldr	r2, [pc, #96]	@ (800afb4 <vNDAgeCache+0xdc>)
 800af52:	68fb      	ldr	r3, [r7, #12]
 800af54:	015b      	lsls	r3, r3, #5
 800af56:	4413      	add	r3, r2
 800af58:	331c      	adds	r3, #28
 800af5a:	781b      	ldrb	r3, [r3, #0]
 800af5c:	2b03      	cmp	r3, #3
 800af5e:	d801      	bhi.n	800af64 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800af60:	2301      	movs	r3, #1
 800af62:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800af64:	68bb      	ldr	r3, [r7, #8]
 800af66:	2b00      	cmp	r3, #0
 800af68:	d019      	beq.n	800af9e <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800af6a:	2356      	movs	r3, #86	@ 0x56
 800af6c:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800af6e:	2100      	movs	r1, #0
 800af70:	6878      	ldr	r0, [r7, #4]
 800af72:	f00b f9b9 	bl	80162e8 <pxGetNetworkBufferWithDescriptor>
 800af76:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800af78:	683b      	ldr	r3, [r7, #0]
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	d00f      	beq.n	800af9e <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800af7e:	4a0d      	ldr	r2, [pc, #52]	@ (800afb4 <vNDAgeCache+0xdc>)
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	015b      	lsls	r3, r3, #5
 800af84:	4413      	add	r3, r2
 800af86:	3318      	adds	r3, #24
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	683b      	ldr	r3, [r7, #0]
 800af8c:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	015b      	lsls	r3, r3, #5
 800af92:	4a08      	ldr	r2, [pc, #32]	@ (800afb4 <vNDAgeCache+0xdc>)
 800af94:	4413      	add	r3, r2
 800af96:	4619      	mov	r1, r3
 800af98:	6838      	ldr	r0, [r7, #0]
 800af9a:	f000 f8bb 	bl	800b114 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	3301      	adds	r3, #1
 800afa2:	60fb      	str	r3, [r7, #12]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	2b17      	cmp	r3, #23
 800afa8:	dd9c      	ble.n	800aee4 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800afaa:	bf00      	nop
 800afac:	bf00      	nop
 800afae:	3710      	adds	r7, #16
 800afb0:	46bd      	mov	sp, r7
 800afb2:	bd80      	pop	{r7, pc}
 800afb4:	20000ed0 	.word	0x20000ed0

0800afb8 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800afb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800afba:	b08d      	sub	sp, #52	@ 0x34
 800afbc:	af06      	add	r7, sp, #24
 800afbe:	60f8      	str	r0, [r7, #12]
 800afc0:	60b9      	str	r1, [r7, #8]
 800afc2:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800afc4:	2300      	movs	r3, #0
 800afc6:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800afc8:	2300      	movs	r3, #0
 800afca:	617b      	str	r3, [r7, #20]
 800afcc:	e04a      	b.n	800b064 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800afce:	4a30      	ldr	r2, [pc, #192]	@ (800b090 <prvNDCacheLookup+0xd8>)
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	015b      	lsls	r3, r3, #5
 800afd4:	4413      	add	r3, r2
 800afd6:	331d      	adds	r3, #29
 800afd8:	781b      	ldrb	r3, [r3, #0]
 800afda:	2b00      	cmp	r3, #0
 800afdc:	d03f      	beq.n	800b05e <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800afde:	697b      	ldr	r3, [r7, #20]
 800afe0:	015b      	lsls	r3, r3, #5
 800afe2:	4a2b      	ldr	r2, [pc, #172]	@ (800b090 <prvNDCacheLookup+0xd8>)
 800afe4:	4413      	add	r3, r2
 800afe6:	68f9      	ldr	r1, [r7, #12]
 800afe8:	2210      	movs	r2, #16
 800afea:	4618      	mov	r0, r3
 800afec:	f016 fc7f 	bl	80218ee <memcmp>
 800aff0:	4603      	mov	r3, r0
 800aff2:	2b00      	cmp	r3, #0
 800aff4:	d133      	bne.n	800b05e <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800aff6:	68b8      	ldr	r0, [r7, #8]
 800aff8:	697b      	ldr	r3, [r7, #20]
 800affa:	015b      	lsls	r3, r3, #5
 800affc:	3310      	adds	r3, #16
 800affe:	4a24      	ldr	r2, [pc, #144]	@ (800b090 <prvNDCacheLookup+0xd8>)
 800b000:	4413      	add	r3, r2
 800b002:	2206      	movs	r2, #6
 800b004:	4619      	mov	r1, r3
 800b006:	f015 fcdd 	bl	80209c4 <memcpy>
                eReturn = eARPCacheHit;
 800b00a:	2301      	movs	r3, #1
 800b00c:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800b00e:	687b      	ldr	r3, [r7, #4]
 800b010:	2b00      	cmp	r3, #0
 800b012:	d007      	beq.n	800b024 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800b014:	4a1e      	ldr	r2, [pc, #120]	@ (800b090 <prvNDCacheLookup+0xd8>)
 800b016:	697b      	ldr	r3, [r7, #20]
 800b018:	015b      	lsls	r3, r3, #5
 800b01a:	4413      	add	r3, r2
 800b01c:	3318      	adds	r3, #24
 800b01e:	681a      	ldr	r2, [r3, #0]
 800b020:	687b      	ldr	r3, [r7, #4]
 800b022:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800b024:	68fa      	ldr	r2, [r7, #12]
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	781b      	ldrb	r3, [r3, #0]
 800b02a:	461e      	mov	r6, r3
 800b02c:	68bb      	ldr	r3, [r7, #8]
 800b02e:	785b      	ldrb	r3, [r3, #1]
 800b030:	4619      	mov	r1, r3
 800b032:	68bb      	ldr	r3, [r7, #8]
 800b034:	789b      	ldrb	r3, [r3, #2]
 800b036:	4618      	mov	r0, r3
 800b038:	68bb      	ldr	r3, [r7, #8]
 800b03a:	78db      	ldrb	r3, [r3, #3]
 800b03c:	461c      	mov	r4, r3
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	791b      	ldrb	r3, [r3, #4]
 800b042:	461d      	mov	r5, r3
 800b044:	68bb      	ldr	r3, [r7, #8]
 800b046:	795b      	ldrb	r3, [r3, #5]
 800b048:	9304      	str	r3, [sp, #16]
 800b04a:	9503      	str	r5, [sp, #12]
 800b04c:	9402      	str	r4, [sp, #8]
 800b04e:	9001      	str	r0, [sp, #4]
 800b050:	9100      	str	r1, [sp, #0]
 800b052:	4633      	mov	r3, r6
 800b054:	6979      	ldr	r1, [r7, #20]
 800b056:	480f      	ldr	r0, [pc, #60]	@ (800b094 <prvNDCacheLookup+0xdc>)
 800b058:	f015 fa98 	bl	802058c <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800b05c:	e005      	b.n	800b06a <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b05e:	697b      	ldr	r3, [r7, #20]
 800b060:	3301      	adds	r3, #1
 800b062:	617b      	str	r3, [r7, #20]
 800b064:	697b      	ldr	r3, [r7, #20]
 800b066:	2b17      	cmp	r3, #23
 800b068:	ddb1      	ble.n	800afce <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800b06a:	7cfb      	ldrb	r3, [r7, #19]
 800b06c:	2b00      	cmp	r3, #0
 800b06e:	d10a      	bne.n	800b086 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	4619      	mov	r1, r3
 800b074:	4808      	ldr	r0, [pc, #32]	@ (800b098 <prvNDCacheLookup+0xe0>)
 800b076:	f015 fa89 	bl	802058c <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d002      	beq.n	800b086 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	2200      	movs	r2, #0
 800b084:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800b086:	7cfb      	ldrb	r3, [r7, #19]
    }
 800b088:	4618      	mov	r0, r3
 800b08a:	371c      	adds	r7, #28
 800b08c:	46bd      	mov	sp, r7
 800b08e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b090:	20000ed0 	.word	0x20000ed0
 800b094:	08023774 	.word	0x08023774
 800b098:	080237b4 	.word	0x080237b4

0800b09c <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800b09c:	b580      	push	{r7, lr}
 800b09e:	b084      	sub	sp, #16
 800b0a0:	af00      	add	r7, sp, #0
 800b0a2:	6078      	str	r0, [r7, #4]
 800b0a4:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b0aa:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b0b0:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b0b2:	68bb      	ldr	r3, [r7, #8]
 800b0b4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b0b8:	68bb      	ldr	r3, [r7, #8]
 800b0ba:	3316      	adds	r3, #22
 800b0bc:	2210      	movs	r2, #16
 800b0be:	4619      	mov	r1, r3
 800b0c0:	f015 fc80 	bl	80209c4 <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b0c4:	68bb      	ldr	r3, [r7, #8]
 800b0c6:	f103 0016 	add.w	r0, r3, #22
 800b0ca:	68fb      	ldr	r3, [r7, #12]
 800b0cc:	3338      	adds	r3, #56	@ 0x38
 800b0ce:	2210      	movs	r2, #16
 800b0d0:	4619      	mov	r1, r3
 800b0d2:	f015 fc77 	bl	80209c4 <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800b0d6:	683b      	ldr	r3, [r7, #0]
 800b0d8:	b29b      	uxth	r3, r3
 800b0da:	021b      	lsls	r3, r3, #8
 800b0dc:	b29a      	uxth	r2, r3
 800b0de:	683b      	ldr	r3, [r7, #0]
 800b0e0:	0a1b      	lsrs	r3, r3, #8
 800b0e2:	b29b      	uxth	r3, r3
 800b0e4:	4313      	orrs	r3, r2
 800b0e6:	b29a      	uxth	r2, r3
 800b0e8:	68bb      	ldr	r3, [r7, #8]
 800b0ea:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b0ec:	683b      	ldr	r3, [r7, #0]
 800b0ee:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800b0f6:	68bb      	ldr	r3, [r7, #8]
 800b0f8:	2200      	movs	r2, #0
 800b0fa:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800b0fe:	2200      	movs	r2, #0
 800b100:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800b104:	2100      	movs	r1, #0
 800b106:	6878      	ldr	r0, [r7, #4]
 800b108:	f7fd fe46 	bl	8008d98 <vReturnEthernetFrame>
    }
 800b10c:	bf00      	nop
 800b10e:	3710      	adds	r7, #16
 800b110:	46bd      	mov	sp, r7
 800b112:	bd80      	pop	{r7, pc}

0800b114 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800b114:	b5b0      	push	{r4, r5, r7, lr}
 800b116:	b090      	sub	sp, #64	@ 0x40
 800b118:	af00      	add	r7, sp, #0
 800b11a:	6078      	str	r0, [r7, #4]
 800b11c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b122:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800b124:	687b      	ldr	r3, [r7, #4]
 800b126:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800b128:	2300      	movs	r3, #0
 800b12a:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800b12c:	2300      	movs	r3, #0
 800b12e:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800b130:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b132:	2b00      	cmp	r3, #0
 800b134:	f000 80c1 	beq.w	800b2ba <vNDSendNeighbourSolicitation+0x1a6>
 800b138:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b13a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b13e:	f003 0304 	and.w	r3, r3, #4
 800b142:	b2db      	uxtb	r3, r3
 800b144:	2b00      	cmp	r3, #0
 800b146:	f000 80b8 	beq.w	800b2ba <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800b14a:	2356      	movs	r3, #86	@ 0x56
 800b14c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800b14e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b150:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b152:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b154:	429a      	cmp	r2, r3
 800b156:	d909      	bls.n	800b16c <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800b158:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b15a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b15c:	f7fe f9ce 	bl	80094fc <pxDuplicateNetworkBufferWithDescriptor>
 800b160:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800b162:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b164:	f00b f928 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800b168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b16a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800b16c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f000 80a3 	beq.w	800b2ba <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800b174:	2320      	movs	r3, #32
 800b176:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800b178:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b17a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b17c:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800b17e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b180:	3336      	adds	r3, #54	@ 0x36
 800b182:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800b184:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b186:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b188:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800b18a:	2333      	movs	r3, #51	@ 0x33
 800b18c:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800b18e:	2333      	movs	r3, #51	@ 0x33
 800b190:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800b192:	23ff      	movs	r3, #255	@ 0xff
 800b194:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800b196:	683b      	ldr	r3, [r7, #0]
 800b198:	7b5b      	ldrb	r3, [r3, #13]
 800b19a:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800b19c:	683b      	ldr	r3, [r7, #0]
 800b19e:	7b9b      	ldrb	r3, [r3, #14]
 800b1a0:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800b1a2:	683b      	ldr	r3, [r7, #0]
 800b1a4:	7bdb      	ldrb	r3, [r3, #15]
 800b1a6:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b1a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1aa:	3306      	adds	r3, #6
 800b1ac:	461a      	mov	r2, r3
 800b1ae:	f107 0308 	add.w	r3, r7, #8
 800b1b2:	6818      	ldr	r0, [r3, #0]
 800b1b4:	6010      	str	r0, [r2, #0]
 800b1b6:	889b      	ldrh	r3, [r3, #4]
 800b1b8:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b1ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b1bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b1be:	33e8      	adds	r3, #232	@ 0xe8
 800b1c0:	2206      	movs	r2, #6
 800b1c2:	4619      	mov	r1, r3
 800b1c4:	f015 fbfe 	bl	80209c4 <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800b1c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ca:	2200      	movs	r2, #0
 800b1cc:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800b1d0:	731a      	strb	r2, [r3, #12]
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800b1d8:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800b1da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1dc:	2260      	movs	r2, #96	@ 0x60
 800b1de:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800b1e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e2:	2200      	movs	r2, #0
 800b1e4:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e8:	2200      	movs	r2, #0
 800b1ea:	741a      	strb	r2, [r3, #16]
 800b1ec:	2200      	movs	r2, #0
 800b1ee:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800b1f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1f2:	b29b      	uxth	r3, r3
 800b1f4:	021b      	lsls	r3, r3, #8
 800b1f6:	b29a      	uxth	r2, r3
 800b1f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1fa:	0a1b      	lsrs	r3, r3, #8
 800b1fc:	b29b      	uxth	r3, r3
 800b1fe:	4313      	orrs	r3, r2
 800b200:	b29a      	uxth	r2, r3
 800b202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b204:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800b206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b208:	223a      	movs	r2, #58	@ 0x3a
 800b20a:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800b20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20e:	22ff      	movs	r2, #255	@ 0xff
 800b210:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b214:	f103 0016 	add.w	r0, r3, #22
 800b218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b21a:	3338      	adds	r3, #56	@ 0x38
 800b21c:	2210      	movs	r2, #16
 800b21e:	4619      	mov	r1, r3
 800b220:	f015 fbd0 	bl	80209c4 <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800b224:	f107 0310 	add.w	r3, r7, #16
 800b228:	2210      	movs	r2, #16
 800b22a:	2100      	movs	r1, #0
 800b22c:	4618      	mov	r0, r3
 800b22e:	f015 fcd6 	bl	8020bde <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800b232:	23ff      	movs	r3, #255	@ 0xff
 800b234:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800b236:	2302      	movs	r3, #2
 800b238:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800b23a:	2301      	movs	r3, #1
 800b23c:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800b23e:	23ff      	movs	r3, #255	@ 0xff
 800b240:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800b242:	683b      	ldr	r3, [r7, #0]
 800b244:	7b5b      	ldrb	r3, [r3, #13]
 800b246:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800b248:	683b      	ldr	r3, [r7, #0]
 800b24a:	7b9b      	ldrb	r3, [r3, #14]
 800b24c:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800b24e:	683b      	ldr	r3, [r7, #0]
 800b250:	7bdb      	ldrb	r3, [r3, #15]
 800b252:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b256:	3326      	adds	r3, #38	@ 0x26
 800b258:	461d      	mov	r5, r3
 800b25a:	f107 0410 	add.w	r4, r7, #16
 800b25e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b260:	6028      	str	r0, [r5, #0]
 800b262:	6069      	str	r1, [r5, #4]
 800b264:	60aa      	str	r2, [r5, #8]
 800b266:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800b268:	2220      	movs	r2, #32
 800b26a:	2100      	movs	r1, #0
 800b26c:	6a38      	ldr	r0, [r7, #32]
 800b26e:	f015 fcb6 	bl	8020bde <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800b272:	6a3b      	ldr	r3, [r7, #32]
 800b274:	2287      	movs	r2, #135	@ 0x87
 800b276:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b278:	6a3b      	ldr	r3, [r7, #32]
 800b27a:	3308      	adds	r3, #8
 800b27c:	6839      	ldr	r1, [r7, #0]
 800b27e:	2210      	movs	r2, #16
 800b280:	4618      	mov	r0, r3
 800b282:	f015 fb9f 	bl	80209c4 <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800b286:	6a3b      	ldr	r3, [r7, #32]
 800b288:	2201      	movs	r2, #1
 800b28a:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800b28c:	6a3b      	ldr	r3, [r7, #32]
 800b28e:	2201      	movs	r2, #1
 800b290:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b292:	6a3b      	ldr	r3, [r7, #32]
 800b294:	f103 001a 	add.w	r0, r3, #26
 800b298:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b29a:	33e8      	adds	r3, #232	@ 0xe8
 800b29c:	2206      	movs	r2, #6
 800b29e:	4619      	mov	r1, r3
 800b2a0:	f015 fb90 	bl	80209c4 <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800b2a4:	6a3b      	ldr	r3, [r7, #32]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	709a      	strb	r2, [r3, #2]
 800b2aa:	2200      	movs	r2, #0
 800b2ac:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800b2ae:	2101      	movs	r1, #1
 800b2b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b2b2:	f7fd fd71 	bl	8008d98 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800b2b6:	2301      	movs	r3, #1
 800b2b8:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800b2ba:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d005      	beq.n	800b2cc <vNDSendNeighbourSolicitation+0x1b8>
 800b2c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b2c2:	2b00      	cmp	r3, #0
 800b2c4:	d102      	bne.n	800b2cc <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800b2c6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b2c8:	f00b f876 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800b2cc:	bf00      	nop
 800b2ce:	3740      	adds	r7, #64	@ 0x40
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	bdb0      	pop	{r4, r5, r7, pc}

0800b2d4 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800b2d4:	b480      	push	{r7}
 800b2d6:	b085      	sub	sp, #20
 800b2d8:	af00      	add	r7, sp, #0
 800b2da:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	b2db      	uxtb	r3, r3
 800b2e0:	2b04      	cmp	r3, #4
 800b2e2:	dc29      	bgt.n	800b338 <pcMessageType+0x64>
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	dc19      	bgt.n	800b31c <pcMessageType+0x48>
 800b2e8:	e049      	b.n	800b37e <pcMessageType+0xaa>
 800b2ea:	3b80      	subs	r3, #128	@ 0x80
 800b2ec:	2b08      	cmp	r3, #8
 800b2ee:	d846      	bhi.n	800b37e <pcMessageType+0xaa>
 800b2f0:	a201      	add	r2, pc, #4	@ (adr r2, 800b2f8 <pcMessageType+0x24>)
 800b2f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b2f6:	bf00      	nop
 800b2f8:	0800b35b 	.word	0x0800b35b
 800b2fc:	0800b361 	.word	0x0800b361
 800b300:	0800b37f 	.word	0x0800b37f
 800b304:	0800b37f 	.word	0x0800b37f
 800b308:	0800b37f 	.word	0x0800b37f
 800b30c:	0800b367 	.word	0x0800b367
 800b310:	0800b36d 	.word	0x0800b36d
 800b314:	0800b373 	.word	0x0800b373
 800b318:	0800b379 	.word	0x0800b379
 800b31c:	3b01      	subs	r3, #1
 800b31e:	2b03      	cmp	r3, #3
 800b320:	d82d      	bhi.n	800b37e <pcMessageType+0xaa>
 800b322:	a201      	add	r2, pc, #4	@ (adr r2, 800b328 <pcMessageType+0x54>)
 800b324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b328:	0800b343 	.word	0x0800b343
 800b32c:	0800b349 	.word	0x0800b349
 800b330:	0800b34f 	.word	0x0800b34f
 800b334:	0800b355 	.word	0x0800b355
 800b338:	2b88      	cmp	r3, #136	@ 0x88
 800b33a:	dc20      	bgt.n	800b37e <pcMessageType+0xaa>
 800b33c:	2b80      	cmp	r3, #128	@ 0x80
 800b33e:	dad4      	bge.n	800b2ea <pcMessageType+0x16>
 800b340:	e01d      	b.n	800b37e <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800b342:	4b14      	ldr	r3, [pc, #80]	@ (800b394 <pcMessageType+0xc0>)
 800b344:	60fb      	str	r3, [r7, #12]
                    break;
 800b346:	e01d      	b.n	800b384 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800b348:	4b13      	ldr	r3, [pc, #76]	@ (800b398 <pcMessageType+0xc4>)
 800b34a:	60fb      	str	r3, [r7, #12]
                    break;
 800b34c:	e01a      	b.n	800b384 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800b34e:	4b13      	ldr	r3, [pc, #76]	@ (800b39c <pcMessageType+0xc8>)
 800b350:	60fb      	str	r3, [r7, #12]
                    break;
 800b352:	e017      	b.n	800b384 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800b354:	4b12      	ldr	r3, [pc, #72]	@ (800b3a0 <pcMessageType+0xcc>)
 800b356:	60fb      	str	r3, [r7, #12]
                    break;
 800b358:	e014      	b.n	800b384 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800b35a:	4b12      	ldr	r3, [pc, #72]	@ (800b3a4 <pcMessageType+0xd0>)
 800b35c:	60fb      	str	r3, [r7, #12]
                    break;
 800b35e:	e011      	b.n	800b384 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800b360:	4b11      	ldr	r3, [pc, #68]	@ (800b3a8 <pcMessageType+0xd4>)
 800b362:	60fb      	str	r3, [r7, #12]
                    break;
 800b364:	e00e      	b.n	800b384 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800b366:	4b11      	ldr	r3, [pc, #68]	@ (800b3ac <pcMessageType+0xd8>)
 800b368:	60fb      	str	r3, [r7, #12]
                    break;
 800b36a:	e00b      	b.n	800b384 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800b36c:	4b10      	ldr	r3, [pc, #64]	@ (800b3b0 <pcMessageType+0xdc>)
 800b36e:	60fb      	str	r3, [r7, #12]
                    break;
 800b370:	e008      	b.n	800b384 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800b372:	4b10      	ldr	r3, [pc, #64]	@ (800b3b4 <pcMessageType+0xe0>)
 800b374:	60fb      	str	r3, [r7, #12]
                    break;
 800b376:	e005      	b.n	800b384 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800b378:	4b0f      	ldr	r3, [pc, #60]	@ (800b3b8 <pcMessageType+0xe4>)
 800b37a:	60fb      	str	r3, [r7, #12]
                    break;
 800b37c:	e002      	b.n	800b384 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800b37e:	4b0f      	ldr	r3, [pc, #60]	@ (800b3bc <pcMessageType+0xe8>)
 800b380:	60fb      	str	r3, [r7, #12]
                    break;
 800b382:	bf00      	nop
            }

            return pcReturn;
 800b384:	68fb      	ldr	r3, [r7, #12]
        }
 800b386:	4618      	mov	r0, r3
 800b388:	3714      	adds	r7, #20
 800b38a:	46bd      	mov	sp, r7
 800b38c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b390:	4770      	bx	lr
 800b392:	bf00      	nop
 800b394:	0802387c 	.word	0x0802387c
 800b398:	08023890 	.word	0x08023890
 800b39c:	080238a0 	.word	0x080238a0
 800b3a0:	080238b0 	.word	0x080238b0
 800b3a4:	080238c4 	.word	0x080238c4
 800b3a8:	080238d4 	.word	0x080238d4
 800b3ac:	080238e0 	.word	0x080238e0
 800b3b0:	080238ec 	.word	0x080238ec
 800b3b4:	080238f8 	.word	0x080238f8
 800b3b8:	08023908 	.word	0x08023908
 800b3bc:	08023918 	.word	0x08023918

0800b3c0 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800b3c0:	b580      	push	{r7, lr}
 800b3c2:	b088      	sub	sp, #32
 800b3c4:	af00      	add	r7, sp, #0
 800b3c6:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800b3c8:	4b19      	ldr	r3, [pc, #100]	@ (800b430 <prvCheckWaitingBuffer+0x70>)
 800b3ca:	681b      	ldr	r3, [r3, #0]
 800b3cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b3ce:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800b3d0:	69fb      	ldr	r3, [r7, #28]
 800b3d2:	330e      	adds	r3, #14
 800b3d4:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	3308      	adds	r3, #8
 800b3dc:	2210      	movs	r2, #16
 800b3de:	4619      	mov	r1, r3
 800b3e0:	f016 fa85 	bl	80218ee <memcmp>
 800b3e4:	4603      	mov	r3, r0
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d11d      	bne.n	800b426 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800b3ea:	2300      	movs	r3, #0
 800b3ec:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800b3ee:	4811      	ldr	r0, [pc, #68]	@ (800b434 <prvCheckWaitingBuffer+0x74>)
 800b3f0:	f015 f8cc 	bl	802058c <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800b3f8:	4b0d      	ldr	r3, [pc, #52]	@ (800b430 <prvCheckWaitingBuffer+0x70>)
 800b3fa:	681b      	ldr	r3, [r3, #0]
 800b3fc:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800b3fe:	f107 030c 	add.w	r3, r7, #12
 800b402:	6979      	ldr	r1, [r7, #20]
 800b404:	4618      	mov	r0, r3
 800b406:	f7fd fa13 	bl	8008830 <xSendEventStructToIPTask>
 800b40a:	4603      	mov	r3, r0
 800b40c:	2b01      	cmp	r3, #1
 800b40e:	d004      	beq.n	800b41a <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800b410:	4b07      	ldr	r3, [pc, #28]	@ (800b430 <prvCheckWaitingBuffer+0x70>)
 800b412:	681b      	ldr	r3, [r3, #0]
 800b414:	4618      	mov	r0, r3
 800b416:	f00a ffcf 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800b41a:	4b05      	ldr	r3, [pc, #20]	@ (800b430 <prvCheckWaitingBuffer+0x70>)
 800b41c:	2200      	movs	r2, #0
 800b41e:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800b420:	2000      	movs	r0, #0
 800b422:	f7fd fffb 	bl	800941c <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800b426:	bf00      	nop
 800b428:	3720      	adds	r7, #32
 800b42a:	46bd      	mov	sp, r7
 800b42c:	bd80      	pop	{r7, pc}
 800b42e:	bf00      	nop
 800b430:	20000e44 	.word	0x20000e44
 800b434:	08023928 	.word	0x08023928

0800b438 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800b438:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b43c:	b09e      	sub	sp, #120	@ 0x78
 800b43e:	af02      	add	r7, sp, #8
 800b440:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b446:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800b448:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b44a:	3336      	adds	r3, #54	@ 0x36
 800b44c:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b452:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800b454:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b456:	781b      	ldrb	r3, [r3, #0]
 800b458:	2b80      	cmp	r3, #128	@ 0x80
 800b45a:	d01e      	beq.n	800b49a <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800b45c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b45e:	781b      	ldrb	r3, [r3, #0]
 800b460:	4698      	mov	r8, r3
 800b462:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b464:	781b      	ldrb	r3, [r3, #0]
 800b466:	4618      	mov	r0, r3
 800b468:	f7ff ff34 	bl	800b2d4 <pcMessageType>
 800b46c:	4606      	mov	r6, r0
 800b46e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b470:	f103 0516 	add.w	r5, r3, #22
 800b474:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b476:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800b47a:	f107 030c 	add.w	r3, r7, #12
 800b47e:	2228      	movs	r2, #40	@ 0x28
 800b480:	4619      	mov	r1, r3
 800b482:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b484:	f001 fd5c 	bl	800cf40 <pcEndpointName>
 800b488:	4603      	mov	r3, r0
 800b48a:	9301      	str	r3, [sp, #4]
 800b48c:	9400      	str	r4, [sp, #0]
 800b48e:	462b      	mov	r3, r5
 800b490:	4632      	mov	r2, r6
 800b492:	4641      	mov	r1, r8
 800b494:	48a7      	ldr	r0, [pc, #668]	@ (800b734 <prvProcessICMPMessage_IPv6+0x2fc>)
 800b496:	f015 f879 	bl	802058c <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800b49a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b49c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b4a0:	f003 0304 	and.w	r3, r3, #4
 800b4a4:	b2db      	uxtb	r3, r3
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	f000 813e 	beq.w	800b728 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800b4ac:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b4ae:	781b      	ldrb	r3, [r3, #0]
 800b4b0:	2b04      	cmp	r3, #4
 800b4b2:	dc1d      	bgt.n	800b4f0 <prvProcessICMPMessage_IPv6+0xb8>
 800b4b4:	2b00      	cmp	r3, #0
 800b4b6:	f300 8130 	bgt.w	800b71a <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800b4ba:	e130      	b.n	800b71e <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800b4bc:	3b80      	subs	r3, #128	@ 0x80
 800b4be:	2b08      	cmp	r3, #8
 800b4c0:	f200 812d 	bhi.w	800b71e <prvProcessICMPMessage_IPv6+0x2e6>
 800b4c4:	a201      	add	r2, pc, #4	@ (adr r2, 800b4cc <prvProcessICMPMessage_IPv6+0x94>)
 800b4c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4ca:	bf00      	nop
 800b4cc:	0800b4fd 	.word	0x0800b4fd
 800b4d0:	0800b545 	.word	0x0800b545
 800b4d4:	0800b71f 	.word	0x0800b71f
 800b4d8:	0800b71f 	.word	0x0800b71f
 800b4dc:	0800b71f 	.word	0x0800b71f
 800b4e0:	0800b71f 	.word	0x0800b71f
 800b4e4:	0800b713 	.word	0x0800b713
 800b4e8:	0800b5bb 	.word	0x0800b5bb
 800b4ec:	0800b6cb 	.word	0x0800b6cb
 800b4f0:	2b88      	cmp	r3, #136	@ 0x88
 800b4f2:	f300 8114 	bgt.w	800b71e <prvProcessICMPMessage_IPv6+0x2e6>
 800b4f6:	2b80      	cmp	r3, #128	@ 0x80
 800b4f8:	dae0      	bge.n	800b4bc <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800b4fa:	e110      	b.n	800b71e <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800b4fc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b4fe:	8a5b      	ldrh	r3, [r3, #18]
 800b500:	b29b      	uxth	r3, r3
 800b502:	021b      	lsls	r3, r3, #8
 800b504:	b21a      	sxth	r2, r3
 800b506:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b508:	8a5b      	ldrh	r3, [r3, #18]
 800b50a:	b29b      	uxth	r3, r3
 800b50c:	0a1b      	lsrs	r3, r3, #8
 800b50e:	b29b      	uxth	r3, r3
 800b510:	b21b      	sxth	r3, r3
 800b512:	4313      	orrs	r3, r2
 800b514:	b21b      	sxth	r3, r3
 800b516:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800b518:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b51a:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b51c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b51e:	3336      	adds	r3, #54	@ 0x36
 800b520:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800b522:	687b      	ldr	r3, [r7, #4]
 800b524:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b526:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b528:	429a      	cmp	r2, r3
 800b52a:	d903      	bls.n	800b534 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800b52c:	4882      	ldr	r0, [pc, #520]	@ (800b738 <prvProcessICMPMessage_IPv6+0x300>)
 800b52e:	f015 f82d 	bl	802058c <lUDPLoggingPrintf>
                           break;
 800b532:	e0f9      	b.n	800b728 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800b534:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b536:	2281      	movs	r2, #129	@ 0x81
 800b538:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800b53a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b53c:	6878      	ldr	r0, [r7, #4]
 800b53e:	f7ff fdad 	bl	800b09c <prvReturnICMP_IPv6>
                   break;
 800b542:	e0f1      	b.n	800b728 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800b544:	2300      	movs	r3, #0
 800b546:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800b54a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b54c:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800b54e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b550:	8a5b      	ldrh	r3, [r3, #18]
 800b552:	b29b      	uxth	r3, r3
 800b554:	021b      	lsls	r3, r3, #8
 800b556:	b21a      	sxth	r2, r3
 800b558:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b55a:	8a5b      	ldrh	r3, [r3, #18]
 800b55c:	b29b      	uxth	r3, r3
 800b55e:	0a1b      	lsrs	r3, r3, #8
 800b560:	b29b      	uxth	r3, r3
 800b562:	b21b      	sxth	r3, r3
 800b564:	4313      	orrs	r3, r2
 800b566:	b21b      	sxth	r3, r3
 800b568:	b29b      	uxth	r3, r3
 800b56a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800b56c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b56e:	3b08      	subs	r3, #8
 800b570:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800b572:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b574:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800b576:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b578:	3308      	adds	r3, #8
 800b57a:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800b57c:	2300      	movs	r3, #0
 800b57e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b580:	e00d      	b.n	800b59e <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800b582:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b584:	781b      	ldrb	r3, [r3, #0]
 800b586:	2b78      	cmp	r3, #120	@ 0x78
 800b588:	d003      	beq.n	800b592 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800b58a:	2302      	movs	r3, #2
 800b58c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800b590:	e009      	b.n	800b5a6 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800b592:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b594:	3301      	adds	r3, #1
 800b596:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800b598:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b59a:	3301      	adds	r3, #1
 800b59c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b59e:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b5a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b5a2:	429a      	cmp	r2, r3
 800b5a4:	d3ed      	bcc.n	800b582 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800b5a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b5a8:	889b      	ldrh	r3, [r3, #4]
 800b5aa:	b29a      	uxth	r2, r3
 800b5ac:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b5b0:	4611      	mov	r1, r2
 800b5b2:	4618      	mov	r0, r3
 800b5b4:	f7f5 fe72 	bl	800129c <vApplicationPingReplyHook>
                           break;
 800b5b8:	e0b6      	b.n	800b728 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800b5ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b5bc:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800b5be:	687b      	ldr	r3, [r7, #4]
 800b5c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5c4:	3308      	adds	r3, #8
 800b5c6:	4619      	mov	r1, r3
 800b5c8:	4610      	mov	r0, r2
 800b5ca:	f001 f9cd 	bl	800c968 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800b5ce:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800b5d0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5d2:	2b00      	cmp	r3, #0
 800b5d4:	d002      	beq.n	800b5dc <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800b5d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b5d8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b5da:	e005      	b.n	800b5e8 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800b5dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b5de:	3308      	adds	r3, #8
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4856      	ldr	r0, [pc, #344]	@ (800b73c <prvProcessICMPMessage_IPv6+0x304>)
 800b5e4:	f014 ffd2 	bl	802058c <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800b5e8:	2320      	movs	r3, #32
 800b5ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b5ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b5ee:	3336      	adds	r3, #54	@ 0x36
 800b5f0:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b5f6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b5f8:	429a      	cmp	r2, r3
 800b5fa:	d903      	bls.n	800b604 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800b5fc:	484e      	ldr	r0, [pc, #312]	@ (800b738 <prvProcessICMPMessage_IPv6+0x300>)
 800b5fe:	f014 ffc5 	bl	802058c <lUDPLoggingPrintf>
                           break;
 800b602:	e091      	b.n	800b728 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b604:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b606:	f103 0008 	add.w	r0, r3, #8
 800b60a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b60c:	3338      	adds	r3, #56	@ 0x38
 800b60e:	2210      	movs	r2, #16
 800b610:	4619      	mov	r1, r3
 800b612:	f016 f96c 	bl	80218ee <memcmp>
 800b616:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800b618:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b61a:	f103 0108 	add.w	r1, r3, #8
 800b61e:	687b      	ldr	r3, [r7, #4]
 800b620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b622:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800b626:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d101      	bne.n	800b630 <prvProcessICMPMessage_IPv6+0x1f8>
 800b62c:	4b44      	ldr	r3, [pc, #272]	@ (800b740 <prvProcessICMPMessage_IPv6+0x308>)
 800b62e:	e000      	b.n	800b632 <prvProcessICMPMessage_IPv6+0x1fa>
 800b630:	4b44      	ldr	r3, [pc, #272]	@ (800b744 <prvProcessICMPMessage_IPv6+0x30c>)
 800b632:	4845      	ldr	r0, [pc, #276]	@ (800b748 <prvProcessICMPMessage_IPv6+0x310>)
 800b634:	f014 ffaa 	bl	802058c <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800b638:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800b63a:	2b00      	cmp	r3, #0
 800b63c:	d171      	bne.n	800b722 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800b63e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b640:	2288      	movs	r2, #136	@ 0x88
 800b642:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800b644:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b646:	2200      	movs	r2, #0
 800b648:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800b64a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b64c:	2200      	movs	r2, #0
 800b64e:	711a      	strb	r2, [r3, #4]
 800b650:	2200      	movs	r2, #0
 800b652:	715a      	strb	r2, [r3, #5]
 800b654:	2200      	movs	r2, #0
 800b656:	719a      	strb	r2, [r3, #6]
 800b658:	2200      	movs	r2, #0
 800b65a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b65e:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800b660:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b662:	685b      	ldr	r3, [r3, #4]
 800b664:	061a      	lsls	r2, r3, #24
 800b666:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b668:	685b      	ldr	r3, [r3, #4]
 800b66a:	021b      	lsls	r3, r3, #8
 800b66c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b670:	431a      	orrs	r2, r3
 800b672:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b674:	685b      	ldr	r3, [r3, #4]
 800b676:	0a1b      	lsrs	r3, r3, #8
 800b678:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b67c:	431a      	orrs	r2, r3
 800b67e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b680:	685b      	ldr	r3, [r3, #4]
 800b682:	0e1b      	lsrs	r3, r3, #24
 800b684:	431a      	orrs	r2, r3
 800b686:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b688:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800b68a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b68c:	2202      	movs	r2, #2
 800b68e:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800b690:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b692:	2201      	movs	r2, #1
 800b694:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800b696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b698:	f103 001a 	add.w	r0, r3, #26
 800b69c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b69e:	33e8      	adds	r3, #232	@ 0xe8
 800b6a0:	2206      	movs	r2, #6
 800b6a2:	4619      	mov	r1, r3
 800b6a4:	f015 f98e 	bl	80209c4 <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800b6a8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b6aa:	22ff      	movs	r2, #255	@ 0xff
 800b6ac:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800b6ae:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6b0:	f103 0008 	add.w	r0, r3, #8
 800b6b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800b6b6:	3338      	adds	r3, #56	@ 0x38
 800b6b8:	2210      	movs	r2, #16
 800b6ba:	4619      	mov	r1, r3
 800b6bc:	f015 f982 	bl	80209c4 <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800b6c0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800b6c2:	6878      	ldr	r0, [r7, #4]
 800b6c4:	f7ff fcea 	bl	800b09c <prvReturnICMP_IPv6>
                   break;
 800b6c8:	e02b      	b.n	800b722 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800b6ca:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6cc:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800b6d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6d2:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800b6d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800b6d6:	4619      	mov	r1, r3
 800b6d8:	f7ff fb5e 	bl	800ad98 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800b6dc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b6de:	3308      	adds	r3, #8
 800b6e0:	4619      	mov	r1, r3
 800b6e2:	481a      	ldr	r0, [pc, #104]	@ (800b74c <prvProcessICMPMessage_IPv6+0x314>)
 800b6e4:	f014 ff52 	bl	802058c <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800b6e8:	6878      	ldr	r0, [r7, #4]
 800b6ea:	f000 fa89 	bl	800bc00 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800b6ee:	4b18      	ldr	r3, [pc, #96]	@ (800b750 <prvProcessICMPMessage_IPv6+0x318>)
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	2b00      	cmp	r3, #0
 800b6f4:	d017      	beq.n	800b726 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800b6f6:	4b16      	ldr	r3, [pc, #88]	@ (800b750 <prvProcessICMPMessage_IPv6+0x318>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	4618      	mov	r0, r3
 800b6fc:	f7fd fc4c 	bl	8008f98 <uxIPHeaderSizePacket>
 800b700:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800b702:	2b28      	cmp	r3, #40	@ 0x28
 800b704:	d10f      	bne.n	800b726 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800b706:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b708:	3308      	adds	r3, #8
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7ff fe58 	bl	800b3c0 <prvCheckWaitingBuffer>
                    break;
 800b710:	e009      	b.n	800b726 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800b712:	6878      	ldr	r0, [r7, #4]
 800b714:	f000 fb9a 	bl	800be4c <vReceiveRA>
                            break;
 800b718:	e006      	b.n	800b728 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800b71a:	bf00      	nop
 800b71c:	e004      	b.n	800b728 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800b71e:	bf00      	nop
 800b720:	e002      	b.n	800b728 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800b722:	bf00      	nop
 800b724:	e000      	b.n	800b728 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800b726:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800b728:	2300      	movs	r3, #0
    }
 800b72a:	4618      	mov	r0, r3
 800b72c:	3770      	adds	r7, #112	@ 0x70
 800b72e:	46bd      	mov	sp, r7
 800b730:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b734:	08023938 	.word	0x08023938
 800b738:	08023970 	.word	0x08023970
 800b73c:	0802397c 	.word	0x0802397c
 800b740:	080239ac 	.word	0x080239ac
 800b744:	080239b4 	.word	0x080239b4
 800b748:	080239bc 	.word	0x080239bc
 800b74c:	080239e0 	.word	0x080239e0
 800b750:	20000e44 	.word	0x20000e44

0800b754 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800b754:	b5b0      	push	{r4, r5, r7, lr}
 800b756:	b088      	sub	sp, #32
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800b75c:	2356      	movs	r3, #86	@ 0x56
 800b75e:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800b760:	2100      	movs	r1, #0
 800b762:	69f8      	ldr	r0, [r7, #28]
 800b764:	f00a fdc0 	bl	80162e8 <pxGetNetworkBufferWithDescriptor>
 800b768:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800b76a:	69bb      	ldr	r3, [r7, #24]
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	f000 80b1 	beq.w	800b8d4 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800b772:	69bb      	ldr	r3, [r7, #24]
 800b774:	3314      	adds	r3, #20
 800b776:	2210      	movs	r2, #16
 800b778:	2100      	movs	r1, #0
 800b77a:	4618      	mov	r0, r3
 800b77c:	f015 fa2f 	bl	8020bde <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800b780:	69bb      	ldr	r3, [r7, #24]
 800b782:	687a      	ldr	r2, [r7, #4]
 800b784:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800b78c:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800b78e:	697b      	ldr	r3, [r7, #20]
 800b790:	2b00      	cmp	r3, #0
 800b792:	d104      	bne.n	800b79e <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800b794:	f240 419e 	movw	r1, #1182	@ 0x49e
 800b798:	4850      	ldr	r0, [pc, #320]	@ (800b8dc <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800b79a:	f7f5 fcc9 	bl	8001130 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b79e:	69bb      	ldr	r3, [r7, #24]
 800b7a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7a2:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800b7a4:	693b      	ldr	r3, [r7, #16]
 800b7a6:	3336      	adds	r3, #54	@ 0x36
 800b7a8:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800b7aa:	693b      	ldr	r3, [r7, #16]
 800b7ac:	4a4c      	ldr	r2, [pc, #304]	@ (800b8e0 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800b7ae:	6810      	ldr	r0, [r2, #0]
 800b7b0:	6018      	str	r0, [r3, #0]
 800b7b2:	8892      	ldrh	r2, [r2, #4]
 800b7b4:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	1d98      	adds	r0, r3, #6
 800b7ba:	687b      	ldr	r3, [r7, #4]
 800b7bc:	33e8      	adds	r3, #232	@ 0xe8
 800b7be:	2206      	movs	r2, #6
 800b7c0:	4619      	mov	r1, r3
 800b7c2:	f015 f8ff 	bl	80209c4 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800b7c6:	693b      	ldr	r3, [r7, #16]
 800b7c8:	2200      	movs	r2, #0
 800b7ca:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800b7ce:	731a      	strb	r2, [r3, #12]
 800b7d0:	2200      	movs	r2, #0
 800b7d2:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800b7d6:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800b7d8:	693b      	ldr	r3, [r7, #16]
 800b7da:	2260      	movs	r2, #96	@ 0x60
 800b7dc:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800b7e4:	693b      	ldr	r3, [r7, #16]
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	741a      	strb	r2, [r3, #16]
 800b7ea:	2200      	movs	r2, #0
 800b7ec:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800b7ee:	693b      	ldr	r3, [r7, #16]
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	749a      	strb	r2, [r3, #18]
 800b7f4:	2200      	movs	r2, #0
 800b7f6:	f042 0220 	orr.w	r2, r2, #32
 800b7fa:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	223a      	movs	r2, #58	@ 0x3a
 800b800:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800b802:	693b      	ldr	r3, [r7, #16]
 800b804:	22ff      	movs	r2, #255	@ 0xff
 800b806:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b808:	693b      	ldr	r3, [r7, #16]
 800b80a:	f103 0016 	add.w	r0, r3, #22
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	3338      	adds	r3, #56	@ 0x38
 800b812:	2210      	movs	r2, #16
 800b814:	4619      	mov	r1, r3
 800b816:	f015 f8d5 	bl	80209c4 <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800b81a:	693b      	ldr	r3, [r7, #16]
 800b81c:	3326      	adds	r3, #38	@ 0x26
 800b81e:	4a31      	ldr	r2, [pc, #196]	@ (800b8e4 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800b820:	461c      	mov	r4, r3
 800b822:	4615      	mov	r5, r2
 800b824:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800b826:	6020      	str	r0, [r4, #0]
 800b828:	6061      	str	r1, [r4, #4]
 800b82a:	60a2      	str	r2, [r4, #8]
 800b82c:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800b82e:	2320      	movs	r3, #32
 800b830:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	2288      	movs	r2, #136	@ 0x88
 800b836:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	2200      	movs	r2, #0
 800b83c:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800b83e:	68fb      	ldr	r3, [r7, #12]
 800b840:	2200      	movs	r2, #0
 800b842:	711a      	strb	r2, [r3, #4]
 800b844:	2200      	movs	r2, #0
 800b846:	715a      	strb	r2, [r3, #5]
 800b848:	2200      	movs	r2, #0
 800b84a:	719a      	strb	r2, [r3, #6]
 800b84c:	2200      	movs	r2, #0
 800b84e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800b852:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	685b      	ldr	r3, [r3, #4]
 800b858:	061a      	lsls	r2, r3, #24
 800b85a:	68fb      	ldr	r3, [r7, #12]
 800b85c:	685b      	ldr	r3, [r3, #4]
 800b85e:	021b      	lsls	r3, r3, #8
 800b860:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800b864:	431a      	orrs	r2, r3
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	685b      	ldr	r3, [r3, #4]
 800b86a:	0a1b      	lsrs	r3, r3, #8
 800b86c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800b870:	431a      	orrs	r2, r3
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	685b      	ldr	r3, [r3, #4]
 800b876:	0e1b      	lsrs	r3, r3, #24
 800b878:	431a      	orrs	r2, r3
 800b87a:	68fb      	ldr	r3, [r7, #12]
 800b87c:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800b87e:	68fb      	ldr	r3, [r7, #12]
 800b880:	2202      	movs	r2, #2
 800b882:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800b884:	68fb      	ldr	r3, [r7, #12]
 800b886:	2201      	movs	r2, #1
 800b888:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800b88a:	68fb      	ldr	r3, [r7, #12]
 800b88c:	f103 001a 	add.w	r0, r3, #26
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	33e8      	adds	r3, #232	@ 0xe8
 800b894:	2206      	movs	r2, #6
 800b896:	4619      	mov	r1, r3
 800b898:	f015 f894 	bl	80209c4 <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800b89c:	693b      	ldr	r3, [r7, #16]
 800b89e:	22ff      	movs	r2, #255	@ 0xff
 800b8a0:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800b8a2:	68fb      	ldr	r3, [r7, #12]
 800b8a4:	f103 0008 	add.w	r0, r3, #8
 800b8a8:	687b      	ldr	r3, [r7, #4]
 800b8aa:	3338      	adds	r3, #56	@ 0x38
 800b8ac:	2210      	movs	r2, #16
 800b8ae:	4619      	mov	r1, r3
 800b8b0:	f015 f888 	bl	80209c4 <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b8b4:	68bb      	ldr	r3, [r7, #8]
 800b8b6:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800b8ba:	69bb      	ldr	r3, [r7, #24]
 800b8bc:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2200      	movs	r2, #0
 800b8c2:	709a      	strb	r2, [r3, #2]
 800b8c4:	2200      	movs	r2, #0
 800b8c6:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800b8c8:	697b      	ldr	r3, [r7, #20]
 800b8ca:	68db      	ldr	r3, [r3, #12]
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	69b9      	ldr	r1, [r7, #24]
 800b8d0:	6978      	ldr	r0, [r7, #20]
 800b8d2:	4798      	blx	r3
        }
    }
 800b8d4:	bf00      	nop
 800b8d6:	3720      	adds	r7, #32
 800b8d8:	46bd      	mov	sp, r7
 800b8da:	bdb0      	pop	{r4, r5, r7, pc}
 800b8dc:	080239f8 	.word	0x080239f8
 800b8e0:	08025c6c 	.word	0x08025c6c
 800b8e4:	08025c5c 	.word	0x08025c5c

0800b8e8 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800b8e8:	b580      	push	{r7, lr}
 800b8ea:	b090      	sub	sp, #64	@ 0x40
 800b8ec:	af00      	add	r7, sp, #0
 800b8ee:	60f8      	str	r0, [r7, #12]
 800b8f0:	60b9      	str	r1, [r7, #8]
 800b8f2:	607a      	str	r2, [r7, #4]
 800b8f4:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800b8fa:	683b      	ldr	r3, [r7, #0]
 800b8fc:	2b00      	cmp	r3, #0
 800b8fe:	d017      	beq.n	800b930 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800b900:	2300      	movs	r3, #0
 800b902:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b904:	e010      	b.n	800b928 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800b906:	f107 0214 	add.w	r2, r7, #20
 800b90a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b90c:	009b      	lsls	r3, r3, #2
 800b90e:	4413      	add	r3, r2
 800b910:	4618      	mov	r0, r3
 800b912:	f7f5 fcd7 	bl	80012c4 <xApplicationGetRandomNumber>
 800b916:	4603      	mov	r3, r0
 800b918:	2b00      	cmp	r3, #0
 800b91a:	d102      	bne.n	800b922 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800b91c:	2300      	movs	r3, #0
 800b91e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800b920:	e00d      	b.n	800b93e <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800b922:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b924:	3301      	adds	r3, #1
 800b926:	63bb      	str	r3, [r7, #56]	@ 0x38
 800b928:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b92a:	2b03      	cmp	r3, #3
 800b92c:	ddeb      	ble.n	800b906 <FreeRTOS_CreateIPv6Address+0x1e>
 800b92e:	e006      	b.n	800b93e <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800b930:	f107 0314 	add.w	r3, r7, #20
 800b934:	2210      	movs	r2, #16
 800b936:	2100      	movs	r1, #0
 800b938:	4618      	mov	r0, r3
 800b93a:	f015 f950 	bl	8020bde <memset>
        }

        if( xResult == pdPASS )
 800b93e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b940:	2b01      	cmp	r3, #1
 800b942:	d167      	bne.n	800ba14 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	2b00      	cmp	r3, #0
 800b948:	d004      	beq.n	800b954 <FreeRTOS_CreateIPv6Address+0x6c>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	2b80      	cmp	r3, #128	@ 0x80
 800b94e:	d801      	bhi.n	800b954 <FreeRTOS_CreateIPv6Address+0x6c>
 800b950:	2301      	movs	r3, #1
 800b952:	e000      	b.n	800b956 <FreeRTOS_CreateIPv6Address+0x6e>
 800b954:	2300      	movs	r3, #0
 800b956:	2b00      	cmp	r3, #0
 800b958:	d104      	bne.n	800b964 <FreeRTOS_CreateIPv6Address+0x7c>
 800b95a:	f240 5105 	movw	r1, #1285	@ 0x505
 800b95e:	4830      	ldr	r0, [pc, #192]	@ (800ba20 <FreeRTOS_CreateIPv6Address+0x138>)
 800b960:	f7f5 fbe6 	bl	8001130 <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	2b07      	cmp	r3, #7
 800b968:	d907      	bls.n	800b97a <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800b96a:	68f8      	ldr	r0, [r7, #12]
 800b96c:	68b9      	ldr	r1, [r7, #8]
 800b96e:	687b      	ldr	r3, [r7, #4]
 800b970:	3307      	adds	r3, #7
 800b972:	08db      	lsrs	r3, r3, #3
 800b974:	461a      	mov	r2, r3
 800b976:	f015 f825 	bl	80209c4 <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800b97a:	f107 0314 	add.w	r3, r7, #20
 800b97e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	08db      	lsrs	r3, r3, #3
 800b984:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	f003 0307 	and.w	r3, r3, #7
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d034      	beq.n	800b9fa <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	f003 0307 	and.w	r3, r3, #7
 800b996:	f1c3 0308 	rsb	r3, r3, #8
 800b99a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800b99c:	2201      	movs	r2, #1
 800b99e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b9a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b9a4:	3b01      	subs	r3, #1
 800b9a6:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800b9a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9aa:	b2db      	uxtb	r3, r3
 800b9ac:	43db      	mvns	r3, r3
 800b9ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800b9b2:	68fa      	ldr	r2, [r7, #12]
 800b9b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9b6:	4413      	add	r3, r2
 800b9b8:	781a      	ldrb	r2, [r3, #0]
 800b9ba:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9be:	4013      	ands	r3, r2
 800b9c0:	b2d9      	uxtb	r1, r3
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9c6:	4413      	add	r3, r2
 800b9c8:	460a      	mov	r2, r1
 800b9ca:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800b9cc:	68fa      	ldr	r2, [r7, #12]
 800b9ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9d0:	4413      	add	r3, r2
 800b9d2:	781a      	ldrb	r2, [r3, #0]
 800b9d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9d6:	7819      	ldrb	r1, [r3, #0]
 800b9d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b9da:	b2db      	uxtb	r3, r3
 800b9dc:	400b      	ands	r3, r1
 800b9de:	b2db      	uxtb	r3, r3
 800b9e0:	4313      	orrs	r3, r2
 800b9e2:	b2d9      	uxtb	r1, r3
 800b9e4:	68fa      	ldr	r2, [r7, #12]
 800b9e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9e8:	4413      	add	r3, r2
 800b9ea:	460a      	mov	r2, r1
 800b9ec:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800b9ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800b9f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9f6:	3301      	adds	r3, #1
 800b9f8:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800b9fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b9fc:	2b0f      	cmp	r3, #15
 800b9fe:	d809      	bhi.n	800ba14 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800ba00:	68fa      	ldr	r2, [r7, #12]
 800ba02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba04:	18d0      	adds	r0, r2, r3
 800ba06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ba08:	f1c3 0310 	rsb	r3, r3, #16
 800ba0c:	461a      	mov	r2, r3
 800ba0e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800ba10:	f014 ffd8 	bl	80209c4 <memcpy>
            }
        }

        return xResult;
 800ba14:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800ba16:	4618      	mov	r0, r3
 800ba18:	3740      	adds	r7, #64	@ 0x40
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}
 800ba1e:	bf00      	nop
 800ba20:	080239f8 	.word	0x080239f8

0800ba24 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b084      	sub	sp, #16
 800ba28:	af00      	add	r7, sp, #0
 800ba2a:	6078      	str	r0, [r7, #4]
 800ba2c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800ba32:	6878      	ldr	r0, [r7, #4]
 800ba34:	f000 fe48 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 800ba38:	60b8      	str	r0, [r7, #8]
 800ba3a:	e01a      	b.n	800ba72 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800ba3c:	68bb      	ldr	r3, [r7, #8]
 800ba3e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800ba42:	2bfe      	cmp	r3, #254	@ 0xfe
 800ba44:	d110      	bne.n	800ba68 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800ba46:	68bb      	ldr	r3, [r7, #8]
 800ba48:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800ba4c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800ba50:	2b80      	cmp	r3, #128	@ 0x80
 800ba52:	d109      	bne.n	800ba68 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ba54:	6838      	ldr	r0, [r7, #0]
 800ba56:	68bb      	ldr	r3, [r7, #8]
 800ba58:	3338      	adds	r3, #56	@ 0x38
 800ba5a:	2210      	movs	r2, #16
 800ba5c:	4619      	mov	r1, r3
 800ba5e:	f014 ffb1 	bl	80209c4 <memcpy>
                xResult = pdPASS;
 800ba62:	2301      	movs	r3, #1
 800ba64:	60fb      	str	r3, [r7, #12]
                break;
 800ba66:	e007      	b.n	800ba78 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800ba68:	68b9      	ldr	r1, [r7, #8]
 800ba6a:	6878      	ldr	r0, [r7, #4]
 800ba6c:	f000 fe4e 	bl	800c70c <FreeRTOS_NextEndPoint>
 800ba70:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800ba72:	68bb      	ldr	r3, [r7, #8]
 800ba74:	2b00      	cmp	r3, #0
 800ba76:	d1e1      	bne.n	800ba3c <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800ba78:	68fb      	ldr	r3, [r7, #12]
    }
 800ba7a:	4618      	mov	r0, r3
 800ba7c:	3710      	adds	r7, #16
 800ba7e:	46bd      	mov	sp, r7
 800ba80:	bd80      	pop	{r7, pc}
	...

0800ba84 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800ba84:	b5b0      	push	{r4, r5, r7, lr}
 800ba86:	b090      	sub	sp, #64	@ 0x40
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba92:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800ba94:	233e      	movs	r3, #62	@ 0x3e
 800ba96:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800ba98:	687b      	ldr	r3, [r7, #4]
 800ba9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800baa0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800baa2:	2b00      	cmp	r3, #0
 800baa4:	d103      	bne.n	800baae <vNDSendRouterSolicitation+0x2a>
 800baa6:	218f      	movs	r1, #143	@ 0x8f
 800baa8:	4852      	ldr	r0, [pc, #328]	@ (800bbf4 <vNDSendRouterSolicitation+0x170>)
 800baaa:	f7f5 fb41 	bl	8001130 <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800baae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bab0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bab4:	f003 0304 	and.w	r3, r3, #4
 800bab8:	b2db      	uxtb	r3, r3
 800baba:	2b00      	cmp	r3, #0
 800babc:	d103      	bne.n	800bac6 <vNDSendRouterSolicitation+0x42>
 800babe:	2190      	movs	r1, #144	@ 0x90
 800bac0:	484c      	ldr	r0, [pc, #304]	@ (800bbf4 <vNDSendRouterSolicitation+0x170>)
 800bac2:	f7f5 fb35 	bl	8001130 <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800bac6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bac8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bacc:	f107 020c 	add.w	r2, r7, #12
 800bad0:	4611      	mov	r1, r2
 800bad2:	4618      	mov	r0, r3
 800bad4:	f7ff ffa6 	bl	800ba24 <xGetLinkLocalAddress>
 800bad8:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800bada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800badc:	2b00      	cmp	r3, #0
 800bade:	d10a      	bne.n	800baf6 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800bae0:	4845      	ldr	r0, [pc, #276]	@ (800bbf8 <vNDSendRouterSolicitation+0x174>)
 800bae2:	f014 fd53 	bl	802058c <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800bae6:	f107 030c 	add.w	r3, r7, #12
 800baea:	2210      	movs	r2, #16
 800baec:	2100      	movs	r1, #0
 800baee:	4618      	mov	r0, r3
 800baf0:	f015 f875 	bl	8020bde <memset>
 800baf4:	e005      	b.n	800bb02 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800baf6:	f107 030c 	add.w	r3, r7, #12
 800bafa:	4619      	mov	r1, r3
 800bafc:	483f      	ldr	r0, [pc, #252]	@ (800bbfc <vNDSendRouterSolicitation+0x178>)
 800bafe:	f014 fd45 	bl	802058c <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800bb02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bb06:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb08:	429a      	cmp	r2, r3
 800bb0a:	d909      	bls.n	800bb20 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800bb0c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bb0e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bb10:	f7fd fcf4 	bl	80094fc <pxDuplicateNetworkBufferWithDescriptor>
 800bb14:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800bb16:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bb18:	f00a fc4e 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800bb1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bb1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800bb20:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	d062      	beq.n	800bbec <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800bb26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bb2a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bb2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb2e:	3336      	adds	r3, #54	@ 0x36
 800bb30:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800bb32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bb34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bb36:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800bb38:	f107 031c 	add.w	r3, r7, #28
 800bb3c:	2200      	movs	r2, #0
 800bb3e:	4619      	mov	r1, r3
 800bb40:	6838      	ldr	r0, [r7, #0]
 800bb42:	f7ff f87b 	bl	800ac3c <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bb46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb48:	3306      	adds	r3, #6
 800bb4a:	461a      	mov	r2, r3
 800bb4c:	f107 031c 	add.w	r3, r7, #28
 800bb50:	6818      	ldr	r0, [r3, #0]
 800bb52:	6010      	str	r0, [r2, #0]
 800bb54:	889b      	ldrh	r3, [r3, #4]
 800bb56:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bb58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bb5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bb5c:	33e8      	adds	r3, #232	@ 0xe8
 800bb5e:	2206      	movs	r2, #6
 800bb60:	4619      	mov	r1, r3
 800bb62:	f014 ff2f 	bl	80209c4 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800bb66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb68:	2200      	movs	r2, #0
 800bb6a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800bb6e:	731a      	strb	r2, [r3, #12]
 800bb70:	2200      	movs	r2, #0
 800bb72:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800bb76:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800bb78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb7a:	2260      	movs	r2, #96	@ 0x60
 800bb7c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800bb7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb80:	2200      	movs	r2, #0
 800bb82:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800bb84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb86:	2200      	movs	r2, #0
 800bb88:	741a      	strb	r2, [r3, #16]
 800bb8a:	2200      	movs	r2, #0
 800bb8c:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800bb8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb90:	2200      	movs	r2, #0
 800bb92:	749a      	strb	r2, [r3, #18]
 800bb94:	2200      	movs	r2, #0
 800bb96:	f042 0208 	orr.w	r2, r2, #8
 800bb9a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800bb9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bb9e:	223a      	movs	r2, #58	@ 0x3a
 800bba0:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800bba2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bba4:	22ff      	movs	r2, #255	@ 0xff
 800bba6:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbaa:	3316      	adds	r3, #22
 800bbac:	461d      	mov	r5, r3
 800bbae:	f107 040c 	add.w	r4, r7, #12
 800bbb2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bbb4:	6028      	str	r0, [r5, #0]
 800bbb6:	6069      	str	r1, [r5, #4]
 800bbb8:	60aa      	str	r2, [r5, #8]
 800bbba:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bbbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bbbe:	3326      	adds	r3, #38	@ 0x26
 800bbc0:	6839      	ldr	r1, [r7, #0]
 800bbc2:	2210      	movs	r2, #16
 800bbc4:	4618      	mov	r0, r3
 800bbc6:	f014 fefd 	bl	80209c4 <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800bbca:	2208      	movs	r2, #8
 800bbcc:	2100      	movs	r1, #0
 800bbce:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bbd0:	f015 f805 	bl	8020bde <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800bbd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbd6:	2285      	movs	r2, #133	@ 0x85
 800bbd8:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800bbda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bbdc:	2200      	movs	r2, #0
 800bbde:	709a      	strb	r2, [r3, #2]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800bbe4:	2101      	movs	r1, #1
 800bbe6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bbe8:	f7fd f8d6 	bl	8008d98 <vReturnEthernetFrame>
        }
    }
 800bbec:	bf00      	nop
 800bbee:	3740      	adds	r7, #64	@ 0x40
 800bbf0:	46bd      	mov	sp, r7
 800bbf2:	bdb0      	pop	{r4, r5, r7, pc}
 800bbf4:	08023a24 	.word	0x08023a24
 800bbf8:	08023a50 	.word	0x08023a50
 800bbfc:	08023a78 	.word	0x08023a78

0800bc00 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800bc00:	b580      	push	{r7, lr}
 800bc02:	b086      	sub	sp, #24
 800bc04:	af00      	add	r7, sp, #0
 800bc06:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800bc08:	687b      	ldr	r3, [r7, #4]
 800bc0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc0c:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bc12:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bc14:	68fb      	ldr	r3, [r7, #12]
 800bc16:	3336      	adds	r3, #54	@ 0x36
 800bc18:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800bc1a:	6938      	ldr	r0, [r7, #16]
 800bc1c:	f000 fd54 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 800bc20:	6178      	str	r0, [r7, #20]
 800bc22:	e028      	b.n	800bc76 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800bc24:	697b      	ldr	r3, [r7, #20]
 800bc26:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bc2a:	f003 0302 	and.w	r3, r3, #2
 800bc2e:	b2db      	uxtb	r3, r3
 800bc30:	2b00      	cmp	r3, #0
 800bc32:	d01b      	beq.n	800bc6c <vReceiveNA+0x6c>
 800bc34:	697b      	ldr	r3, [r7, #20]
 800bc36:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800bc3a:	2b03      	cmp	r3, #3
 800bc3c:	d116      	bne.n	800bc6c <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800bc3e:	697b      	ldr	r3, [r7, #20]
 800bc40:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800bc44:	68bb      	ldr	r3, [r7, #8]
 800bc46:	3308      	adds	r3, #8
 800bc48:	2210      	movs	r2, #16
 800bc4a:	4619      	mov	r1, r3
 800bc4c:	f015 fe4f 	bl	80218ee <memcmp>
 800bc50:	4603      	mov	r3, r0
 800bc52:	2b00      	cmp	r3, #0
 800bc54:	d10a      	bne.n	800bc6c <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800bc56:	697a      	ldr	r2, [r7, #20]
 800bc58:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800bc5c:	f043 0302 	orr.w	r3, r3, #2
 800bc60:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800bc64:	2164      	movs	r1, #100	@ 0x64
 800bc66:	6978      	ldr	r0, [r7, #20]
 800bc68:	f7fd fb3e 	bl	80092e8 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800bc6c:	6979      	ldr	r1, [r7, #20]
 800bc6e:	6938      	ldr	r0, [r7, #16]
 800bc70:	f000 fd4c 	bl	800c70c <FreeRTOS_NextEndPoint>
 800bc74:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800bc76:	697b      	ldr	r3, [r7, #20]
 800bc78:	2b00      	cmp	r3, #0
 800bc7a:	d1d3      	bne.n	800bc24 <vReceiveNA+0x24>
                }
            }
        }
    }
 800bc7c:	bf00      	nop
 800bc7e:	bf00      	nop
 800bc80:	3718      	adds	r7, #24
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
	...

0800bc88 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800bc88:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc8a:	b091      	sub	sp, #68	@ 0x44
 800bc8c:	af04      	add	r7, sp, #16
 800bc8e:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800bc90:	2300      	movs	r3, #0
 800bc92:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800bc94:	2310      	movs	r3, #16
 800bc96:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800bc98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bc9a:	3336      	adds	r3, #54	@ 0x36
 800bc9c:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800bc9e:	687b      	ldr	r3, [r7, #4]
 800bca0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bca2:	6a3b      	ldr	r3, [r7, #32]
 800bca4:	1ad3      	subs	r3, r2, r3
 800bca6:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bcac:	6a3b      	ldr	r3, [r7, #32]
 800bcae:	4413      	add	r3, r2
 800bcb0:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800bcb6:	e0b2      	b.n	800be1e <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800bcb8:	69ba      	ldr	r2, [r7, #24]
 800bcba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcbc:	4413      	add	r3, r2
 800bcbe:	781b      	ldrb	r3, [r3, #0]
 800bcc0:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800bcc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bcc4:	3301      	adds	r3, #1
 800bcc6:	69ba      	ldr	r2, [r7, #24]
 800bcc8:	4413      	add	r3, r2
 800bcca:	781b      	ldrb	r3, [r3, #0]
 800bccc:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800bcce:	693b      	ldr	r3, [r7, #16]
 800bcd0:	00db      	lsls	r3, r3, #3
 800bcd2:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800bcd4:	693b      	ldr	r3, [r7, #16]
 800bcd6:	2b00      	cmp	r3, #0
 800bcd8:	d103      	bne.n	800bce2 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800bcda:	4856      	ldr	r0, [pc, #344]	@ (800be34 <vReceiveRA_ReadReply+0x1ac>)
 800bcdc:	f014 fc56 	bl	802058c <lUDPLoggingPrintf>
                break;
 800bce0:	e0a3      	b.n	800be2a <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800bce2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bce4:	68fb      	ldr	r3, [r7, #12]
 800bce6:	4413      	add	r3, r2
 800bce8:	69fa      	ldr	r2, [r7, #28]
 800bcea:	429a      	cmp	r2, r3
 800bcec:	d208      	bcs.n	800bd00 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800bcee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	69fa      	ldr	r2, [r7, #28]
 800bcf6:	4619      	mov	r1, r3
 800bcf8:	484f      	ldr	r0, [pc, #316]	@ (800be38 <vReceiveRA_ReadReply+0x1b0>)
 800bcfa:	f014 fc47 	bl	802058c <lUDPLoggingPrintf>
                break;
 800bcfe:	e094      	b.n	800be2a <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800bd00:	7dfb      	ldrb	r3, [r7, #23]
 800bd02:	3b01      	subs	r3, #1
 800bd04:	2b04      	cmp	r3, #4
 800bd06:	d87f      	bhi.n	800be08 <vReceiveRA_ReadReply+0x180>
 800bd08:	a201      	add	r2, pc, #4	@ (adr r2, 800bd10 <vReceiveRA_ReadReply+0x88>)
 800bd0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bd0e:	bf00      	nop
 800bd10:	0800bd25 	.word	0x0800bd25
 800bd14:	0800be15 	.word	0x0800be15
 800bd18:	0800bd7f 	.word	0x0800bd7f
 800bd1c:	0800be15 	.word	0x0800be15
 800bd20:	0800bdef 	.word	0x0800bdef
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800bd24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd26:	3302      	adds	r3, #2
 800bd28:	69ba      	ldr	r2, [r7, #24]
 800bd2a:	4413      	add	r3, r2
 800bd2c:	781b      	ldrb	r3, [r3, #0]
 800bd2e:	461c      	mov	r4, r3
 800bd30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd32:	3303      	adds	r3, #3
 800bd34:	69ba      	ldr	r2, [r7, #24]
 800bd36:	4413      	add	r3, r2
 800bd38:	781b      	ldrb	r3, [r3, #0]
 800bd3a:	461d      	mov	r5, r3
 800bd3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd3e:	3304      	adds	r3, #4
 800bd40:	69ba      	ldr	r2, [r7, #24]
 800bd42:	4413      	add	r3, r2
 800bd44:	781b      	ldrb	r3, [r3, #0]
 800bd46:	461e      	mov	r6, r3
 800bd48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd4a:	3305      	adds	r3, #5
 800bd4c:	69ba      	ldr	r2, [r7, #24]
 800bd4e:	4413      	add	r3, r2
 800bd50:	781b      	ldrb	r3, [r3, #0]
 800bd52:	4619      	mov	r1, r3
 800bd54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd56:	3306      	adds	r3, #6
 800bd58:	69ba      	ldr	r2, [r7, #24]
 800bd5a:	4413      	add	r3, r2
 800bd5c:	781b      	ldrb	r3, [r3, #0]
 800bd5e:	4618      	mov	r0, r3
 800bd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd62:	3307      	adds	r3, #7
 800bd64:	69ba      	ldr	r2, [r7, #24]
 800bd66:	4413      	add	r3, r2
 800bd68:	781b      	ldrb	r3, [r3, #0]
 800bd6a:	9302      	str	r3, [sp, #8]
 800bd6c:	9001      	str	r0, [sp, #4]
 800bd6e:	9100      	str	r1, [sp, #0]
 800bd70:	4633      	mov	r3, r6
 800bd72:	462a      	mov	r2, r5
 800bd74:	4621      	mov	r1, r4
 800bd76:	4831      	ldr	r0, [pc, #196]	@ (800be3c <vReceiveRA_ReadReply+0x1b4>)
 800bd78:	f014 fc08 	bl	802058c <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800bd7c:	e04b      	b.n	800be16 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800bd7e:	69ba      	ldr	r2, [r7, #24]
 800bd80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bd82:	4413      	add	r3, r2
 800bd84:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800bd86:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd88:	789b      	ldrb	r3, [r3, #2]
 800bd8a:	4618      	mov	r0, r3
 800bd8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd8e:	685b      	ldr	r3, [r3, #4]
 800bd90:	061a      	lsls	r2, r3, #24
 800bd92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bd94:	685b      	ldr	r3, [r3, #4]
 800bd96:	021b      	lsls	r3, r3, #8
 800bd98:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bd9c:	431a      	orrs	r2, r3
 800bd9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bda0:	685b      	ldr	r3, [r3, #4]
 800bda2:	0a1b      	lsrs	r3, r3, #8
 800bda4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bda8:	431a      	orrs	r2, r3
 800bdaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdac:	685b      	ldr	r3, [r3, #4]
 800bdae:	0e1b      	lsrs	r3, r3, #24
 800bdb0:	ea42 0103 	orr.w	r1, r2, r3
 800bdb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdb6:	689b      	ldr	r3, [r3, #8]
 800bdb8:	061a      	lsls	r2, r3, #24
 800bdba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdbc:	689b      	ldr	r3, [r3, #8]
 800bdbe:	021b      	lsls	r3, r3, #8
 800bdc0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bdc4:	431a      	orrs	r2, r3
 800bdc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdc8:	689b      	ldr	r3, [r3, #8]
 800bdca:	0a1b      	lsrs	r3, r3, #8
 800bdcc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bdd0:	431a      	orrs	r2, r3
 800bdd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdd4:	689b      	ldr	r3, [r3, #8]
 800bdd6:	0e1b      	lsrs	r3, r3, #24
 800bdd8:	431a      	orrs	r2, r3
 800bdda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bddc:	3310      	adds	r3, #16
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	4613      	mov	r3, r2
 800bde2:	460a      	mov	r2, r1
 800bde4:	4601      	mov	r1, r0
 800bde6:	4816      	ldr	r0, [pc, #88]	@ (800be40 <vReceiveRA_ReadReply+0x1b8>)
 800bde8:	f014 fbd0 	bl	802058c <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800bdec:	e013      	b.n	800be16 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800bdee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdf0:	3304      	adds	r3, #4
 800bdf2:	69ba      	ldr	r2, [r7, #24]
 800bdf4:	4413      	add	r3, r2
 800bdf6:	4618      	mov	r0, r3
 800bdf8:	f7fd fe60 	bl	8009abc <ulChar2u32>
 800bdfc:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800bdfe:	68b9      	ldr	r1, [r7, #8]
 800be00:	4810      	ldr	r0, [pc, #64]	@ (800be44 <vReceiveRA_ReadReply+0x1bc>)
 800be02:	f014 fbc3 	bl	802058c <lUDPLoggingPrintf>
                   }
                   break;
 800be06:	e006      	b.n	800be16 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800be08:	7dfb      	ldrb	r3, [r7, #23]
 800be0a:	4619      	mov	r1, r3
 800be0c:	480e      	ldr	r0, [pc, #56]	@ (800be48 <vReceiveRA_ReadReply+0x1c0>)
 800be0e:	f014 fbbd 	bl	802058c <lUDPLoggingPrintf>
                    break;
 800be12:	e000      	b.n	800be16 <vReceiveRA_ReadReply+0x18e>
                    break;
 800be14:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800be16:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	4413      	add	r3, r2
 800be1c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800be1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800be20:	3301      	adds	r3, #1
 800be22:	69fa      	ldr	r2, [r7, #28]
 800be24:	429a      	cmp	r2, r3
 800be26:	f63f af47 	bhi.w	800bcb8 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800be2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800be2c:	4618      	mov	r0, r3
 800be2e:	3734      	adds	r7, #52	@ 0x34
 800be30:	46bd      	mov	sp, r7
 800be32:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800be34:	08023a8c 	.word	0x08023a8c
 800be38:	08023ac0 	.word	0x08023ac0
 800be3c:	08023ae4 	.word	0x08023ae4
 800be40:	08023b10 	.word	0x08023b10
 800be44:	08023b38 	.word	0x08023b38
 800be48:	08023b48 	.word	0x08023b48

0800be4c <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800be4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be4e:	b08d      	sub	sp, #52	@ 0x34
 800be50:	af04      	add	r7, sp, #16
 800be52:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800be54:	687b      	ldr	r3, [r7, #4]
 800be56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800be58:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800be5a:	2300      	movs	r3, #0
 800be5c:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800be5e:	2310      	movs	r3, #16
 800be60:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800be62:	693b      	ldr	r3, [r7, #16]
 800be64:	3336      	adds	r3, #54	@ 0x36
 800be66:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800be68:	687b      	ldr	r3, [r7, #4]
 800be6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800be6c:	68fa      	ldr	r2, [r7, #12]
 800be6e:	429a      	cmp	r2, r3
 800be70:	d903      	bls.n	800be7a <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800be72:	485b      	ldr	r0, [pc, #364]	@ (800bfe0 <vReceiveRA+0x194>)
 800be74:	f014 fb8a 	bl	802058c <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800be78:	e0ae      	b.n	800bfd8 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800be7a:	69bb      	ldr	r3, [r7, #24]
 800be7c:	3336      	adds	r3, #54	@ 0x36
 800be7e:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800be80:	68bb      	ldr	r3, [r7, #8]
 800be82:	781b      	ldrb	r3, [r3, #0]
 800be84:	461c      	mov	r4, r3
 800be86:	68bb      	ldr	r3, [r7, #8]
 800be88:	785b      	ldrb	r3, [r3, #1]
 800be8a:	461d      	mov	r5, r3
 800be8c:	68bb      	ldr	r3, [r7, #8]
 800be8e:	885b      	ldrh	r3, [r3, #2]
 800be90:	b29b      	uxth	r3, r3
 800be92:	021b      	lsls	r3, r3, #8
 800be94:	b21a      	sxth	r2, r3
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	885b      	ldrh	r3, [r3, #2]
 800be9a:	b29b      	uxth	r3, r3
 800be9c:	0a1b      	lsrs	r3, r3, #8
 800be9e:	b29b      	uxth	r3, r3
 800bea0:	b21b      	sxth	r3, r3
 800bea2:	4313      	orrs	r3, r2
 800bea4:	b21b      	sxth	r3, r3
 800bea6:	b29b      	uxth	r3, r3
 800bea8:	461e      	mov	r6, r3
 800beaa:	68bb      	ldr	r3, [r7, #8]
 800beac:	791b      	ldrb	r3, [r3, #4]
 800beae:	4619      	mov	r1, r3
 800beb0:	68bb      	ldr	r3, [r7, #8]
 800beb2:	795b      	ldrb	r3, [r3, #5]
 800beb4:	4618      	mov	r0, r3
 800beb6:	68bb      	ldr	r3, [r7, #8]
 800beb8:	88db      	ldrh	r3, [r3, #6]
 800beba:	b29b      	uxth	r3, r3
 800bebc:	021b      	lsls	r3, r3, #8
 800bebe:	b21a      	sxth	r2, r3
 800bec0:	68bb      	ldr	r3, [r7, #8]
 800bec2:	88db      	ldrh	r3, [r3, #6]
 800bec4:	b29b      	uxth	r3, r3
 800bec6:	0a1b      	lsrs	r3, r3, #8
 800bec8:	b29b      	uxth	r3, r3
 800beca:	b21b      	sxth	r3, r3
 800becc:	4313      	orrs	r3, r2
 800bece:	b21b      	sxth	r3, r3
 800bed0:	b29b      	uxth	r3, r3
 800bed2:	9302      	str	r3, [sp, #8]
 800bed4:	9001      	str	r0, [sp, #4]
 800bed6:	9100      	str	r1, [sp, #0]
 800bed8:	4633      	mov	r3, r6
 800beda:	462a      	mov	r2, r5
 800bedc:	4621      	mov	r1, r4
 800bede:	4841      	ldr	r0, [pc, #260]	@ (800bfe4 <vReceiveRA+0x198>)
 800bee0:	f014 fb54 	bl	802058c <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800bee4:	68bb      	ldr	r3, [r7, #8]
 800bee6:	88db      	ldrh	r3, [r3, #6]
 800bee8:	b29b      	uxth	r3, r3
 800beea:	2b00      	cmp	r3, #0
 800beec:	d074      	beq.n	800bfd8 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800beee:	6878      	ldr	r0, [r7, #4]
 800bef0:	f7ff feca 	bl	800bc88 <vReceiveRA_ReadReply>
 800bef4:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800befa:	2b00      	cmp	r3, #0
 800befc:	d104      	bne.n	800bf08 <vReceiveRA+0xbc>
 800befe:	f240 118b 	movw	r1, #395	@ 0x18b
 800bf02:	4839      	ldr	r0, [pc, #228]	@ (800bfe8 <vReceiveRA+0x19c>)
 800bf04:	f7f5 f914 	bl	8001130 <vAssertCalled>
                if( pxPrefixOption != NULL )
 800bf08:	697b      	ldr	r3, [r7, #20]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d064      	beq.n	800bfd8 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bf12:	4618      	mov	r0, r3
 800bf14:	f000 fbd8 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 800bf18:	61f8      	str	r0, [r7, #28]
 800bf1a:	e05a      	b.n	800bfd2 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800bf1c:	69fb      	ldr	r3, [r7, #28]
 800bf1e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bf22:	f003 0302 	and.w	r3, r3, #2
 800bf26:	b2db      	uxtb	r3, r3
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d04b      	beq.n	800bfc4 <vReceiveRA+0x178>
 800bf2c:	69fb      	ldr	r3, [r7, #28]
 800bf2e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800bf32:	2b01      	cmp	r3, #1
 800bf34:	d146      	bne.n	800bfc4 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800bf36:	697b      	ldr	r3, [r7, #20]
 800bf38:	789b      	ldrb	r3, [r3, #2]
 800bf3a:	461a      	mov	r2, r3
 800bf3c:	69fb      	ldr	r3, [r7, #28]
 800bf3e:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800bf40:	69fb      	ldr	r3, [r7, #28]
 800bf42:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800bf46:	697b      	ldr	r3, [r7, #20]
 800bf48:	3310      	adds	r3, #16
 800bf4a:	2210      	movs	r2, #16
 800bf4c:	4619      	mov	r1, r3
 800bf4e:	f014 fd39 	bl	80209c4 <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bf52:	69fb      	ldr	r3, [r7, #28]
 800bf54:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	3316      	adds	r3, #22
 800bf5c:	2210      	movs	r2, #16
 800bf5e:	4619      	mov	r1, r3
 800bf60:	f014 fd30 	bl	80209c4 <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800bf64:	69fa      	ldr	r2, [r7, #28]
 800bf66:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800bf6a:	f043 0301 	orr.w	r3, r3, #1
 800bf6e:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800bf72:	69fb      	ldr	r3, [r7, #28]
 800bf74:	2200      	movs	r2, #0
 800bf76:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800bf7a:	697b      	ldr	r3, [r7, #20]
 800bf7c:	689b      	ldr	r3, [r3, #8]
 800bf7e:	061a      	lsls	r2, r3, #24
 800bf80:	697b      	ldr	r3, [r7, #20]
 800bf82:	689b      	ldr	r3, [r3, #8]
 800bf84:	021b      	lsls	r3, r3, #8
 800bf86:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bf8a:	431a      	orrs	r2, r3
 800bf8c:	697b      	ldr	r3, [r7, #20]
 800bf8e:	689b      	ldr	r3, [r3, #8]
 800bf90:	0a1b      	lsrs	r3, r3, #8
 800bf92:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bf96:	431a      	orrs	r2, r3
 800bf98:	697b      	ldr	r3, [r7, #20]
 800bf9a:	689b      	ldr	r3, [r3, #8]
 800bf9c:	0e1b      	lsrs	r3, r3, #24
 800bf9e:	431a      	orrs	r2, r3
 800bfa0:	69fb      	ldr	r3, [r7, #28]
 800bfa2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800bfa6:	69fa      	ldr	r2, [r7, #28]
 800bfa8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800bfac:	f043 0302 	orr.w	r3, r3, #2
 800bfb0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800bfb4:	69fb      	ldr	r3, [r7, #28]
 800bfb6:	2202      	movs	r2, #2
 800bfb8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800bfbc:	69f9      	ldr	r1, [r7, #28]
 800bfbe:	2000      	movs	r0, #0
 800bfc0:	f000 f9b6 	bl	800c330 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bfc8:	69f9      	ldr	r1, [r7, #28]
 800bfca:	4618      	mov	r0, r3
 800bfcc:	f000 fb9e 	bl	800c70c <FreeRTOS_NextEndPoint>
 800bfd0:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800bfd2:	69fb      	ldr	r3, [r7, #28]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d1a1      	bne.n	800bf1c <vReceiveRA+0xd0>
    }
 800bfd8:	bf00      	nop
 800bfda:	3724      	adds	r7, #36	@ 0x24
 800bfdc:	46bd      	mov	sp, r7
 800bfde:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfe0:	08023b6c 	.word	0x08023b6c
 800bfe4:	08023b9c 	.word	0x08023b9c
 800bfe8:	08023a24 	.word	0x08023a24

0800bfec <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800bfec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800bff0:	b088      	sub	sp, #32
 800bff2:	af00      	add	r7, sp, #0
 800bff4:	6178      	str	r0, [r7, #20]
 800bff6:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800bff8:	6939      	ldr	r1, [r7, #16]
 800bffa:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800bffc:	6979      	ldr	r1, [r7, #20]
 800bffe:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800c002:	2901      	cmp	r1, #1
 800c004:	d133      	bne.n	800c06e <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800c006:	697b      	ldr	r3, [r7, #20]
 800c008:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c00c:	1c5a      	adds	r2, r3, #1
 800c00e:	697b      	ldr	r3, [r7, #20]
 800c010:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800c014:	697b      	ldr	r3, [r7, #20]
 800c016:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c01a:	2b02      	cmp	r3, #2
 800c01c:	d804      	bhi.n	800c028 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800c01e:	697b      	ldr	r3, [r7, #20]
 800c020:	2200      	movs	r2, #0
 800c022:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800c026:	e0bf      	b.n	800c1a8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800c028:	4862      	ldr	r0, [pc, #392]	@ (800c1b4 <xRAProcess_HandleWaitStates+0x1c8>)
 800c02a:	f014 faaf 	bl	802058c <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800c02e:	697b      	ldr	r3, [r7, #20]
 800c030:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	3390      	adds	r3, #144	@ 0x90
 800c038:	2258      	movs	r2, #88	@ 0x58
 800c03a:	4619      	mov	r1, r3
 800c03c:	f014 fcc2 	bl	80209c4 <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800c040:	697a      	ldr	r2, [r7, #20]
 800c042:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c046:	f36f 0300 	bfc	r3, #0, #1
 800c04a:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	2200      	movs	r2, #0
 800c052:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c056:	697a      	ldr	r2, [r7, #20]
 800c058:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c05c:	f043 0302 	orr.w	r3, r3, #2
 800c060:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c064:	697b      	ldr	r3, [r7, #20]
 800c066:	2202      	movs	r2, #2
 800c068:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800c06c:	e09c      	b.n	800c1a8 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800c06e:	6979      	ldr	r1, [r7, #20]
 800c070:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800c074:	2903      	cmp	r1, #3
 800c076:	f040 8097 	bne.w	800c1a8 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800c07a:	6979      	ldr	r1, [r7, #20]
 800c07c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800c080:	f001 0102 	and.w	r1, r1, #2
 800c084:	b2c9      	uxtb	r1, r1
 800c086:	2900      	cmp	r1, #0
 800c088:	d00b      	beq.n	800c0a2 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800c08a:	697b      	ldr	r3, [r7, #20]
 800c08c:	2200      	movs	r2, #0
 800c08e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c092:	697b      	ldr	r3, [r7, #20]
 800c094:	2202      	movs	r2, #2
 800c096:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800c09a:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800c09e:	61fb      	str	r3, [r7, #28]
 800c0a0:	e082      	b.n	800c1a8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800c0a2:	6979      	ldr	r1, [r7, #20]
 800c0a4:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800c0a8:	2902      	cmp	r1, #2
 800c0aa:	d80e      	bhi.n	800c0ca <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800c0ac:	697b      	ldr	r3, [r7, #20]
 800c0ae:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c0b2:	1c5a      	adds	r2, r3, #1
 800c0b4:	697b      	ldr	r3, [r7, #20]
 800c0b6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c0ba:	697b      	ldr	r3, [r7, #20]
 800c0bc:	2202      	movs	r2, #2
 800c0be:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800c0c2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800c0c6:	61fb      	str	r3, [r7, #28]
 800c0c8:	e06e      	b.n	800c1a8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800c0ca:	6979      	ldr	r1, [r7, #20]
 800c0cc:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800c0d0:	f001 0101 	and.w	r1, r1, #1
 800c0d4:	b2c9      	uxtb	r1, r1
 800c0d6:	2900      	cmp	r1, #0
 800c0d8:	d057      	beq.n	800c18a <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800c0da:	6979      	ldr	r1, [r7, #20]
 800c0dc:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800c0e0:	2000      	movs	r0, #0
 800c0e2:	4688      	mov	r8, r1
 800c0e4:	4681      	mov	r9, r0
 800c0e6:	4640      	mov	r0, r8
 800c0e8:	4649      	mov	r1, r9
 800c0ea:	f04f 0a00 	mov.w	sl, #0
 800c0ee:	f04f 0b00 	mov.w	fp, #0
 800c0f2:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800c0f6:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800c0fa:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800c0fe:	4650      	mov	r0, sl
 800c100:	4659      	mov	r1, fp
 800c102:	ebb0 0208 	subs.w	r2, r0, r8
 800c106:	eb61 0309 	sbc.w	r3, r1, r9
 800c10a:	f04f 0000 	mov.w	r0, #0
 800c10e:	f04f 0100 	mov.w	r1, #0
 800c112:	0259      	lsls	r1, r3, #9
 800c114:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c118:	0250      	lsls	r0, r2, #9
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	eb12 0408 	adds.w	r4, r2, r8
 800c122:	eb43 0509 	adc.w	r5, r3, r9
 800c126:	f04f 0200 	mov.w	r2, #0
 800c12a:	f04f 0300 	mov.w	r3, #0
 800c12e:	01ab      	lsls	r3, r5, #6
 800c130:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800c134:	01a2      	lsls	r2, r4, #6
 800c136:	1b11      	subs	r1, r2, r4
 800c138:	6039      	str	r1, [r7, #0]
 800c13a:	eb63 0305 	sbc.w	r3, r3, r5
 800c13e:	607b      	str	r3, [r7, #4]
 800c140:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c144:	460b      	mov	r3, r1
 800c146:	eb13 0308 	adds.w	r3, r3, r8
 800c14a:	60bb      	str	r3, [r7, #8]
 800c14c:	4613      	mov	r3, r2
 800c14e:	eb43 0309 	adc.w	r3, r3, r9
 800c152:	60fb      	str	r3, [r7, #12]
 800c154:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c158:	f04f 0300 	mov.w	r3, #0
 800c15c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c160:	f7f4 f926 	bl	80003b0 <__aeabi_uldivmod>
 800c164:	4602      	mov	r2, r0
 800c166:	460b      	mov	r3, r1
 800c168:	4613      	mov	r3, r2
 800c16a:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800c16c:	697b      	ldr	r3, [r7, #20]
 800c16e:	2204      	movs	r2, #4
 800c170:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800c174:	697b      	ldr	r3, [r7, #20]
 800c176:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c17a:	697b      	ldr	r3, [r7, #20]
 800c17c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c180:	461a      	mov	r2, r3
 800c182:	480d      	ldr	r0, [pc, #52]	@ (800c1b8 <xRAProcess_HandleWaitStates+0x1cc>)
 800c184:	f014 fa02 	bl	802058c <lUDPLoggingPrintf>
 800c188:	e00b      	b.n	800c1a2 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800c18a:	697b      	ldr	r3, [r7, #20]
 800c18c:	2206      	movs	r2, #6
 800c18e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800c192:	697b      	ldr	r3, [r7, #20]
 800c194:	3338      	adds	r3, #56	@ 0x38
 800c196:	4619      	mov	r1, r3
 800c198:	4808      	ldr	r0, [pc, #32]	@ (800c1bc <xRAProcess_HandleWaitStates+0x1d0>)
 800c19a:	f014 f9f7 	bl	802058c <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800c19e:	2300      	movs	r3, #0
 800c1a0:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800c1a2:	6978      	ldr	r0, [r7, #20]
 800c1a4:	f7fc fa08 	bl	80085b8 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800c1a8:	69fb      	ldr	r3, [r7, #28]
    }
 800c1aa:	4618      	mov	r0, r3
 800c1ac:	3720      	adds	r7, #32
 800c1ae:	46bd      	mov	sp, r7
 800c1b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c1b4:	08023be0 	.word	0x08023be0
 800c1b8:	08023c08 	.word	0x08023c08
 800c1bc:	08023c48 	.word	0x08023c48

0800c1c0 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800c1c0:	b580      	push	{r7, lr}
 800c1c2:	b08c      	sub	sp, #48	@ 0x30
 800c1c4:	af00      	add	r7, sp, #0
 800c1c6:	6078      	str	r0, [r7, #4]
 800c1c8:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800c1ca:	683b      	ldr	r3, [r7, #0]
 800c1cc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800c1ce:	687b      	ldr	r3, [r7, #4]
 800c1d0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c1d4:	2b06      	cmp	r3, #6
 800c1d6:	f200 808c 	bhi.w	800c2f2 <xRAProcess_HandleOtherStates+0x132>
 800c1da:	a201      	add	r2, pc, #4	@ (adr r2, 800c1e0 <xRAProcess_HandleOtherStates+0x20>)
 800c1dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c1e0:	0800c1fd 	.word	0x0800c1fd
 800c1e4:	0800c2f3 	.word	0x0800c2f3
 800c1e8:	0800c25f 	.word	0x0800c25f
 800c1ec:	0800c2f3 	.word	0x0800c2f3
 800c1f0:	0800c2db 	.word	0x0800c2db
 800c1f4:	0800c2e5 	.word	0x0800c2e5
 800c1f8:	0800c2f3 	.word	0x0800c2f3
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800c1fc:	f107 030c 	add.w	r3, r7, #12
 800c200:	2210      	movs	r2, #16
 800c202:	2100      	movs	r1, #0
 800c204:	4618      	mov	r0, r3
 800c206:	f014 fcea 	bl	8020bde <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800c20a:	23ff      	movs	r3, #255	@ 0xff
 800c20c:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800c20e:	2302      	movs	r3, #2
 800c210:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800c212:	2302      	movs	r3, #2
 800c214:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800c216:	233e      	movs	r3, #62	@ 0x3e
 800c218:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800c21a:	2100      	movs	r1, #0
 800c21c:	6a38      	ldr	r0, [r7, #32]
 800c21e:	f00a f863 	bl	80162e8 <pxGetNetworkBufferWithDescriptor>
 800c222:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800c224:	69fb      	ldr	r3, [r7, #28]
 800c226:	2b00      	cmp	r3, #0
 800c228:	d008      	beq.n	800c23c <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800c22a:	69fb      	ldr	r3, [r7, #28]
 800c22c:	687a      	ldr	r2, [r7, #4]
 800c22e:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800c230:	f107 030c 	add.w	r3, r7, #12
 800c234:	4619      	mov	r1, r3
 800c236:	69f8      	ldr	r0, [r7, #28]
 800c238:	f7ff fc24 	bl	800ba84 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c242:	3301      	adds	r3, #1
 800c244:	2203      	movs	r2, #3
 800c246:	4619      	mov	r1, r3
 800c248:	482d      	ldr	r0, [pc, #180]	@ (800c300 <xRAProcess_HandleOtherStates+0x140>)
 800c24a:	f014 f99f 	bl	802058c <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800c24e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800c252:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800c254:	687b      	ldr	r3, [r7, #4]
 800c256:	2201      	movs	r2, #1
 800c258:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800c25c:	e04a      	b.n	800c2f4 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800c25e:	687b      	ldr	r3, [r7, #4]
 800c260:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800c264:	f003 0302 	and.w	r3, r3, #2
 800c268:	b2db      	uxtb	r3, r3
 800c26a:	2b00      	cmp	r3, #0
 800c26c:	d014      	beq.n	800c298 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800c26e:	687a      	ldr	r2, [r7, #4]
 800c270:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c274:	f36f 0341 	bfc	r3, #1, #1
 800c278:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800c27c:	687b      	ldr	r3, [r7, #4]
 800c27e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c28c:	2301      	movs	r3, #1
 800c28e:	f7ff fb2b 	bl	800b8e8 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800c292:	481c      	ldr	r0, [pc, #112]	@ (800c304 <xRAProcess_HandleOtherStates+0x144>)
 800c294:	f014 f97a 	bl	802058c <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	3338      	adds	r3, #56	@ 0x38
 800c29c:	4619      	mov	r1, r3
 800c29e:	481a      	ldr	r0, [pc, #104]	@ (800c308 <xRAProcess_HandleOtherStates+0x148>)
 800c2a0:	f014 f974 	bl	802058c <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c2a4:	2356      	movs	r3, #86	@ 0x56
 800c2a6:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800c2a8:	2100      	movs	r1, #0
 800c2aa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2ac:	f00a f81c 	bl	80162e8 <pxGetNetworkBufferWithDescriptor>
 800c2b0:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800c2b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2b4:	2b00      	cmp	r3, #0
 800c2b6:	d008      	beq.n	800c2ca <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800c2b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2ba:	687a      	ldr	r2, [r7, #4]
 800c2bc:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800c2be:	687b      	ldr	r3, [r7, #4]
 800c2c0:	3338      	adds	r3, #56	@ 0x38
 800c2c2:	4619      	mov	r1, r3
 800c2c4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c2c6:	f7fe ff25 	bl	800b114 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800c2ca:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c2ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	2203      	movs	r2, #3
 800c2d4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800c2d8:	e00c      	b.n	800c2f4 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	2205      	movs	r2, #5
 800c2de:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800c2e2:	e007      	b.n	800c2f4 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800c2e4:	6878      	ldr	r0, [r7, #4]
 800c2e6:	f000 f811 	bl	800c30c <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800c2ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c2ee:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800c2f0:	e000      	b.n	800c2f4 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800c2f2:	bf00      	nop
        }

        return uxNewReloadTime;
 800c2f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3730      	adds	r7, #48	@ 0x30
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	08023c84 	.word	0x08023c84
 800c304:	08023cb8 	.word	0x08023cb8
 800c308:	08023cdc 	.word	0x08023cdc

0800c30c <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800c30c:	b480      	push	{r7}
 800c30e:	b083      	sub	sp, #12
 800c310:	af00      	add	r7, sp, #0
 800c312:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	2200      	movs	r2, #0
 800c318:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	2200      	movs	r2, #0
 800c320:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800c324:	bf00      	nop
 800c326:	370c      	adds	r7, #12
 800c328:	46bd      	mov	sp, r7
 800c32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c32e:	4770      	bx	lr

0800c330 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800c330:	b590      	push	{r4, r7, lr}
 800c332:	b089      	sub	sp, #36	@ 0x24
 800c334:	af04      	add	r7, sp, #16
 800c336:	6078      	str	r0, [r7, #4]
 800c338:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800c33a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c33e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800c340:	683b      	ldr	r3, [r7, #0]
 800c342:	2b00      	cmp	r3, #0
 800c344:	d104      	bne.n	800c350 <vRAProcess+0x20>
 800c346:	f240 2189 	movw	r1, #649	@ 0x289
 800c34a:	4828      	ldr	r0, [pc, #160]	@ (800c3ec <vRAProcess+0xbc>)
 800c34c:	f7f4 fef0 	bl	8001130 <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800c350:	683b      	ldr	r3, [r7, #0]
 800c352:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c356:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800c358:	687b      	ldr	r3, [r7, #4]
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	d002      	beq.n	800c364 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800c35e:	6838      	ldr	r0, [r7, #0]
 800c360:	f7ff ffd4 	bl	800c30c <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800c364:	68f9      	ldr	r1, [r7, #12]
 800c366:	6838      	ldr	r0, [r7, #0]
 800c368:	f7ff fe40 	bl	800bfec <xRAProcess_HandleWaitStates>
 800c36c:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800c36e:	68f9      	ldr	r1, [r7, #12]
 800c370:	6838      	ldr	r0, [r7, #0]
 800c372:	f7ff ff25 	bl	800c1c0 <xRAProcess_HandleOtherStates>
 800c376:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800c37e:	683b      	ldr	r3, [r7, #0]
 800c380:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800c384:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c388:	b2db      	uxtb	r3, r3
 800c38a:	461c      	mov	r4, r3
 800c38c:	683b      	ldr	r3, [r7, #0]
 800c38e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800c392:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c396:	b2db      	uxtb	r3, r3
 800c398:	4618      	mov	r0, r3
 800c39a:	7afb      	ldrb	r3, [r7, #11]
 800c39c:	683a      	ldr	r2, [r7, #0]
 800c39e:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800c3a2:	9202      	str	r2, [sp, #8]
 800c3a4:	9301      	str	r3, [sp, #4]
 800c3a6:	9000      	str	r0, [sp, #0]
 800c3a8:	4623      	mov	r3, r4
 800c3aa:	460a      	mov	r2, r1
 800c3ac:	6879      	ldr	r1, [r7, #4]
 800c3ae:	4810      	ldr	r0, [pc, #64]	@ (800c3f0 <vRAProcess+0xc0>)
 800c3b0:	f014 f8ec 	bl	802058c <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800c3b4:	68fb      	ldr	r3, [r7, #12]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d00d      	beq.n	800c3d6 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	4a0d      	ldr	r2, [pc, #52]	@ (800c3f4 <vRAProcess+0xc4>)
 800c3be:	fba2 2303 	umull	r2, r3, r2, r3
 800c3c2:	099b      	lsrs	r3, r3, #6
 800c3c4:	4619      	mov	r1, r3
 800c3c6:	480c      	ldr	r0, [pc, #48]	@ (800c3f8 <vRAProcess+0xc8>)
 800c3c8:	f014 f8e0 	bl	802058c <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800c3cc:	68f9      	ldr	r1, [r7, #12]
 800c3ce:	6838      	ldr	r0, [r7, #0]
 800c3d0:	f7fc ff8a 	bl	80092e8 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800c3d4:	e006      	b.n	800c3e4 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800c3d6:	4809      	ldr	r0, [pc, #36]	@ (800c3fc <vRAProcess+0xcc>)
 800c3d8:	f014 f8d8 	bl	802058c <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800c3dc:	2100      	movs	r1, #0
 800c3de:	6838      	ldr	r0, [r7, #0]
 800c3e0:	f7fd f836 	bl	8009450 <vIPSetDHCP_RATimerEnableState>
    }
 800c3e4:	bf00      	nop
 800c3e6:	3714      	adds	r7, #20
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd90      	pop	{r4, r7, pc}
 800c3ec:	08023a24 	.word	0x08023a24
 800c3f0:	08023d04 	.word	0x08023d04
 800c3f4:	10624dd3 	.word	0x10624dd3
 800c3f8:	08023d50 	.word	0x08023d50
 800c3fc:	08023d68 	.word	0x08023d68

0800c400 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800c400:	b580      	push	{r7, lr}
 800c402:	b086      	sub	sp, #24
 800c404:	af00      	add	r7, sp, #0
 800c406:	60f8      	str	r0, [r7, #12]
 800c408:	60b9      	str	r1, [r7, #8]
 800c40a:	607a      	str	r2, [r7, #4]
 800c40c:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d002      	beq.n	800c41a <FreeRTOS_FillEndPoint+0x1a>
 800c414:	68bb      	ldr	r3, [r7, #8]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d105      	bne.n	800c426 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800c41a:	68ba      	ldr	r2, [r7, #8]
 800c41c:	68f9      	ldr	r1, [r7, #12]
 800c41e:	483f      	ldr	r0, [pc, #252]	@ (800c51c <FreeRTOS_FillEndPoint+0x11c>)
 800c420:	f014 f8b4 	bl	802058c <lUDPLoggingPrintf>
 800c424:	e075      	b.n	800c512 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800c426:	68bb      	ldr	r3, [r7, #8]
 800c428:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c42c:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800c42e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c432:	2100      	movs	r1, #0
 800c434:	68b8      	ldr	r0, [r7, #8]
 800c436:	f014 fbd2 	bl	8020bde <memset>
            pxEndPoint->pxNext = pxNext;
 800c43a:	68bb      	ldr	r3, [r7, #8]
 800c43c:	697a      	ldr	r2, [r7, #20]
 800c43e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	3303      	adds	r3, #3
 800c446:	781b      	ldrb	r3, [r3, #0]
 800c448:	061a      	lsls	r2, r3, #24
 800c44a:	687b      	ldr	r3, [r7, #4]
 800c44c:	3302      	adds	r3, #2
 800c44e:	781b      	ldrb	r3, [r3, #0]
 800c450:	041b      	lsls	r3, r3, #16
 800c452:	431a      	orrs	r2, r3
 800c454:	687b      	ldr	r3, [r7, #4]
 800c456:	3301      	adds	r3, #1
 800c458:	781b      	ldrb	r3, [r3, #0]
 800c45a:	021b      	lsls	r3, r3, #8
 800c45c:	4313      	orrs	r3, r2
 800c45e:	687a      	ldr	r2, [r7, #4]
 800c460:	7812      	ldrb	r2, [r2, #0]
 800c462:	4313      	orrs	r3, r2
 800c464:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800c466:	683b      	ldr	r3, [r7, #0]
 800c468:	3303      	adds	r3, #3
 800c46a:	781b      	ldrb	r3, [r3, #0]
 800c46c:	061a      	lsls	r2, r3, #24
 800c46e:	683b      	ldr	r3, [r7, #0]
 800c470:	3302      	adds	r3, #2
 800c472:	781b      	ldrb	r3, [r3, #0]
 800c474:	041b      	lsls	r3, r3, #16
 800c476:	431a      	orrs	r2, r3
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	3301      	adds	r3, #1
 800c47c:	781b      	ldrb	r3, [r3, #0]
 800c47e:	021b      	lsls	r3, r3, #8
 800c480:	4313      	orrs	r3, r2
 800c482:	683a      	ldr	r2, [r7, #0]
 800c484:	7812      	ldrb	r2, [r2, #0]
 800c486:	431a      	orrs	r2, r3
 800c488:	68bb      	ldr	r3, [r7, #8]
 800c48a:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800c48c:	6a3b      	ldr	r3, [r7, #32]
 800c48e:	3303      	adds	r3, #3
 800c490:	781b      	ldrb	r3, [r3, #0]
 800c492:	061a      	lsls	r2, r3, #24
 800c494:	6a3b      	ldr	r3, [r7, #32]
 800c496:	3302      	adds	r3, #2
 800c498:	781b      	ldrb	r3, [r3, #0]
 800c49a:	041b      	lsls	r3, r3, #16
 800c49c:	431a      	orrs	r2, r3
 800c49e:	6a3b      	ldr	r3, [r7, #32]
 800c4a0:	3301      	adds	r3, #1
 800c4a2:	781b      	ldrb	r3, [r3, #0]
 800c4a4:	021b      	lsls	r3, r3, #8
 800c4a6:	4313      	orrs	r3, r2
 800c4a8:	6a3a      	ldr	r2, [r7, #32]
 800c4aa:	7812      	ldrb	r2, [r2, #0]
 800c4ac:	431a      	orrs	r2, r3
 800c4ae:	68bb      	ldr	r3, [r7, #8]
 800c4b0:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800c4b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4b4:	3303      	adds	r3, #3
 800c4b6:	781b      	ldrb	r3, [r3, #0]
 800c4b8:	061a      	lsls	r2, r3, #24
 800c4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4bc:	3302      	adds	r3, #2
 800c4be:	781b      	ldrb	r3, [r3, #0]
 800c4c0:	041b      	lsls	r3, r3, #16
 800c4c2:	431a      	orrs	r2, r3
 800c4c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4c6:	3301      	adds	r3, #1
 800c4c8:	781b      	ldrb	r3, [r3, #0]
 800c4ca:	021b      	lsls	r3, r3, #8
 800c4cc:	4313      	orrs	r3, r2
 800c4ce:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c4d0:	7812      	ldrb	r2, [r2, #0]
 800c4d2:	431a      	orrs	r2, r3
 800c4d4:	68bb      	ldr	r3, [r7, #8]
 800c4d6:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800c4d8:	68bb      	ldr	r3, [r7, #8]
 800c4da:	685b      	ldr	r3, [r3, #4]
 800c4dc:	43da      	mvns	r2, r3
 800c4de:	693b      	ldr	r3, [r7, #16]
 800c4e0:	431a      	orrs	r2, r3
 800c4e2:	68bb      	ldr	r3, [r7, #8]
 800c4e4:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	331c      	adds	r3, #28
 800c4ea:	68b9      	ldr	r1, [r7, #8]
 800c4ec:	221c      	movs	r2, #28
 800c4ee:	4618      	mov	r0, r3
 800c4f0:	f014 fa68 	bl	80209c4 <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800c4f4:	68bb      	ldr	r3, [r7, #8]
 800c4f6:	693a      	ldr	r2, [r7, #16]
 800c4f8:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800c4fa:	68bb      	ldr	r3, [r7, #8]
 800c4fc:	33e8      	adds	r3, #232	@ 0xe8
 800c4fe:	2206      	movs	r2, #6
 800c500:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c502:	4618      	mov	r0, r3
 800c504:	f014 fa5e 	bl	80209c4 <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800c508:	68b9      	ldr	r1, [r7, #8]
 800c50a:	68f8      	ldr	r0, [r7, #12]
 800c50c:	f000 f85c 	bl	800c5c8 <FreeRTOS_AddEndPoint>
        }
    }
 800c510:	bf00      	nop
 800c512:	bf00      	nop
 800c514:	3718      	adds	r7, #24
 800c516:	46bd      	mov	sp, r7
 800c518:	bd80      	pop	{r7, pc}
 800c51a:	bf00      	nop
 800c51c:	08023d80 	.word	0x08023d80

0800c520 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800c520:	b480      	push	{r7}
 800c522:	b085      	sub	sp, #20
 800c524:	af00      	add	r7, sp, #0
 800c526:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800c528:	2300      	movs	r3, #0
 800c52a:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d021      	beq.n	800c576 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800c532:	4b14      	ldr	r3, [pc, #80]	@ (800c584 <FreeRTOS_AddNetworkInterface+0x64>)
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	2b00      	cmp	r3, #0
 800c538:	d106      	bne.n	800c548 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800c53a:	4a12      	ldr	r2, [pc, #72]	@ (800c584 <FreeRTOS_AddNetworkInterface+0x64>)
 800c53c:	687b      	ldr	r3, [r7, #4]
 800c53e:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800c540:	687b      	ldr	r3, [r7, #4]
 800c542:	2200      	movs	r2, #0
 800c544:	625a      	str	r2, [r3, #36]	@ 0x24
 800c546:	e016      	b.n	800c576 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800c548:	4b0e      	ldr	r3, [pc, #56]	@ (800c584 <FreeRTOS_AddNetworkInterface+0x64>)
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800c54e:	68fa      	ldr	r2, [r7, #12]
 800c550:	687b      	ldr	r3, [r7, #4]
 800c552:	429a      	cmp	r2, r3
 800c554:	d00e      	beq.n	800c574 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d106      	bne.n	800c56c <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	687a      	ldr	r2, [r7, #4]
 800c562:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	2200      	movs	r2, #0
 800c568:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800c56a:	e004      	b.n	800c576 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800c56c:	68fb      	ldr	r3, [r7, #12]
 800c56e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c570:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800c572:	e7ec      	b.n	800c54e <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800c574:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800c576:	687b      	ldr	r3, [r7, #4]
    }
 800c578:	4618      	mov	r0, r3
 800c57a:	3714      	adds	r7, #20
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr
 800c584:	200011d4 	.word	0x200011d4

0800c588 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800c588:	b480      	push	{r7}
 800c58a:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800c58c:	4b03      	ldr	r3, [pc, #12]	@ (800c59c <FreeRTOS_FirstNetworkInterface+0x14>)
 800c58e:	681b      	ldr	r3, [r3, #0]
    }
 800c590:	4618      	mov	r0, r3
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	200011d4 	.word	0x200011d4

0800c5a0 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800c5a0:	b480      	push	{r7}
 800c5a2:	b085      	sub	sp, #20
 800c5a4:	af00      	add	r7, sp, #0
 800c5a6:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	2b00      	cmp	r3, #0
 800c5ac:	d003      	beq.n	800c5b6 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800c5ae:	687b      	ldr	r3, [r7, #4]
 800c5b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c5b2:	60fb      	str	r3, [r7, #12]
 800c5b4:	e001      	b.n	800c5ba <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800c5b6:	2300      	movs	r3, #0
 800c5b8:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800c5ba:	68fb      	ldr	r3, [r7, #12]
    }
 800c5bc:	4618      	mov	r0, r3
 800c5be:	3714      	adds	r7, #20
 800c5c0:	46bd      	mov	sp, r7
 800c5c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5c6:	4770      	bx	lr

0800c5c8 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800c5c8:	b580      	push	{r7, lr}
 800c5ca:	b084      	sub	sp, #16
 800c5cc:	af00      	add	r7, sp, #0
 800c5ce:	6078      	str	r0, [r7, #4]
 800c5d0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800c5d2:	2300      	movs	r3, #0
 800c5d4:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800c5d6:	683b      	ldr	r3, [r7, #0]
 800c5d8:	687a      	ldr	r2, [r7, #4]
 800c5da:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	6a1b      	ldr	r3, [r3, #32]
 800c5e2:	2b00      	cmp	r3, #0
 800c5e4:	d102      	bne.n	800c5ec <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800c5e6:	687b      	ldr	r3, [r7, #4]
 800c5e8:	683a      	ldr	r2, [r7, #0]
 800c5ea:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800c5ec:	4b33      	ldr	r3, [pc, #204]	@ (800c6bc <FreeRTOS_AddEndPoint+0xf4>)
 800c5ee:	681b      	ldr	r3, [r3, #0]
 800c5f0:	2b00      	cmp	r3, #0
 800c5f2:	d107      	bne.n	800c604 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800c5f4:	683b      	ldr	r3, [r7, #0]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800c5fc:	4a2f      	ldr	r2, [pc, #188]	@ (800c6bc <FreeRTOS_AddEndPoint+0xf4>)
 800c5fe:	683b      	ldr	r3, [r7, #0]
 800c600:	6013      	str	r3, [r2, #0]
 800c602:	e01a      	b.n	800c63a <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800c604:	4b2d      	ldr	r3, [pc, #180]	@ (800c6bc <FreeRTOS_AddEndPoint+0xf4>)
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800c60a:	68fa      	ldr	r2, [r7, #12]
 800c60c:	683b      	ldr	r3, [r7, #0]
 800c60e:	429a      	cmp	r2, r3
 800c610:	d012      	beq.n	800c638 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800c612:	68fb      	ldr	r3, [r7, #12]
 800c614:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d108      	bne.n	800c62e <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800c61c:	683b      	ldr	r3, [r7, #0]
 800c61e:	2200      	movs	r2, #0
 800c620:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	683a      	ldr	r2, [r7, #0]
 800c628:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800c62c:	e005      	b.n	800c63a <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800c62e:	68fb      	ldr	r3, [r7, #12]
 800c630:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c634:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800c636:	e7e8      	b.n	800c60a <FreeRTOS_AddEndPoint+0x42>
                    break;
 800c638:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800c63a:	683b      	ldr	r3, [r7, #0]
 800c63c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c640:	f003 0304 	and.w	r3, r3, #4
 800c644:	b2db      	uxtb	r3, r3
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00c      	beq.n	800c664 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800c650:	4619      	mov	r1, r3
 800c652:	683b      	ldr	r3, [r7, #0]
 800c654:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800c658:	461a      	mov	r2, r3
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	3390      	adds	r3, #144	@ 0x90
 800c65e:	4818      	ldr	r0, [pc, #96]	@ (800c6c0 <FreeRTOS_AddEndPoint+0xf8>)
 800c660:	f013 ff94 	bl	802058c <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800c664:	683b      	ldr	r3, [r7, #0]
 800c666:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c66a:	f003 0304 	and.w	r3, r3, #4
 800c66e:	b2db      	uxtb	r3, r3
 800c670:	2b00      	cmp	r3, #0
 800c672:	d11e      	bne.n	800c6b2 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800c674:	683b      	ldr	r3, [r7, #0]
 800c676:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800c67a:	4619      	mov	r1, r3
 800c67c:	683b      	ldr	r3, [r7, #0]
 800c67e:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800c682:	4618      	mov	r0, r3
 800c684:	683b      	ldr	r3, [r7, #0]
 800c686:	69db      	ldr	r3, [r3, #28]
 800c688:	061a      	lsls	r2, r3, #24
 800c68a:	683b      	ldr	r3, [r7, #0]
 800c68c:	69db      	ldr	r3, [r3, #28]
 800c68e:	021b      	lsls	r3, r3, #8
 800c690:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c694:	431a      	orrs	r2, r3
 800c696:	683b      	ldr	r3, [r7, #0]
 800c698:	69db      	ldr	r3, [r3, #28]
 800c69a:	0a1b      	lsrs	r3, r3, #8
 800c69c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c6a0:	431a      	orrs	r2, r3
 800c6a2:	683b      	ldr	r3, [r7, #0]
 800c6a4:	69db      	ldr	r3, [r3, #28]
 800c6a6:	0e1b      	lsrs	r3, r3, #24
 800c6a8:	4313      	orrs	r3, r2
 800c6aa:	4602      	mov	r2, r0
 800c6ac:	4805      	ldr	r0, [pc, #20]	@ (800c6c4 <FreeRTOS_AddEndPoint+0xfc>)
 800c6ae:	f013 ff6d 	bl	802058c <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800c6b2:	683b      	ldr	r3, [r7, #0]
    }
 800c6b4:	4618      	mov	r0, r3
 800c6b6:	3710      	adds	r7, #16
 800c6b8:	46bd      	mov	sp, r7
 800c6ba:	bd80      	pop	{r7, pc}
 800c6bc:	200011d0 	.word	0x200011d0
 800c6c0:	08023dc0 	.word	0x08023dc0
 800c6c4:	08023df4 	.word	0x08023df4

0800c6c8 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800c6c8:	b480      	push	{r7}
 800c6ca:	b085      	sub	sp, #20
 800c6cc:	af00      	add	r7, sp, #0
 800c6ce:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800c6d0:	4b0d      	ldr	r3, [pc, #52]	@ (800c708 <FreeRTOS_FirstEndPoint+0x40>)
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800c6d6:	e00c      	b.n	800c6f2 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800c6d8:	687b      	ldr	r3, [r7, #4]
 800c6da:	2b00      	cmp	r3, #0
 800c6dc:	d00c      	beq.n	800c6f8 <FreeRTOS_FirstEndPoint+0x30>
 800c6de:	68fb      	ldr	r3, [r7, #12]
 800c6e0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c6e4:	687a      	ldr	r2, [r7, #4]
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d006      	beq.n	800c6f8 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c6f0:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	2b00      	cmp	r3, #0
 800c6f6:	d1ef      	bne.n	800c6d8 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800c6f8:	68fb      	ldr	r3, [r7, #12]
    }
 800c6fa:	4618      	mov	r0, r3
 800c6fc:	3714      	adds	r7, #20
 800c6fe:	46bd      	mov	sp, r7
 800c700:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c704:	4770      	bx	lr
 800c706:	bf00      	nop
 800c708:	200011d0 	.word	0x200011d0

0800c70c <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b084      	sub	sp, #16
 800c710:	af00      	add	r7, sp, #0
 800c712:	6078      	str	r0, [r7, #4]
 800c714:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	2b00      	cmp	r3, #0
 800c71e:	d015      	beq.n	800c74c <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800c720:	68fb      	ldr	r3, [r7, #12]
 800c722:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c726:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800c728:	e00c      	b.n	800c744 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d011      	beq.n	800c754 <FreeRTOS_NextEndPoint+0x48>
 800c730:	68fb      	ldr	r3, [r7, #12]
 800c732:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	429a      	cmp	r2, r3
 800c73a:	d00b      	beq.n	800c754 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800c73c:	68fb      	ldr	r3, [r7, #12]
 800c73e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c742:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800c744:	68fb      	ldr	r3, [r7, #12]
 800c746:	2b00      	cmp	r3, #0
 800c748:	d1ef      	bne.n	800c72a <FreeRTOS_NextEndPoint+0x1e>
 800c74a:	e003      	b.n	800c754 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800c74c:	6878      	ldr	r0, [r7, #4]
 800c74e:	f7ff ffbb 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 800c752:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800c754:	68fb      	ldr	r3, [r7, #12]
    }
 800c756:	4618      	mov	r0, r3
 800c758:	3710      	adds	r7, #16
 800c75a:	46bd      	mov	sp, r7
 800c75c:	bd80      	pop	{r7, pc}
	...

0800c760 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800c760:	b480      	push	{r7}
 800c762:	b085      	sub	sp, #20
 800c764:	af00      	add	r7, sp, #0
 800c766:	6078      	str	r0, [r7, #4]
 800c768:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800c76a:	4b1e      	ldr	r3, [pc, #120]	@ (800c7e4 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800c76c:	681b      	ldr	r3, [r3, #0]
 800c76e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800c770:	2308      	movs	r3, #8
 800c772:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800c774:	4b1c      	ldr	r3, [pc, #112]	@ (800c7e8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800c776:	681b      	ldr	r3, [r3, #0]
 800c778:	3301      	adds	r3, #1
 800c77a:	4a1b      	ldr	r2, [pc, #108]	@ (800c7e8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800c77c:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800c77e:	683a      	ldr	r2, [r7, #0]
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	429a      	cmp	r2, r3
 800c784:	d223      	bcs.n	800c7ce <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800c786:	4a18      	ldr	r2, [pc, #96]	@ (800c7e8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	3312      	adds	r3, #18
 800c78c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c790:	1c5a      	adds	r2, r3, #1
 800c792:	4915      	ldr	r1, [pc, #84]	@ (800c7e8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800c794:	683b      	ldr	r3, [r7, #0]
 800c796:	3312      	adds	r3, #18
 800c798:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800c79c:	e017      	b.n	800c7ce <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800c79e:	68fb      	ldr	r3, [r7, #12]
 800c7a0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c7a4:	f003 0304 	and.w	r3, r3, #4
 800c7a8:	b2db      	uxtb	r3, r3
 800c7aa:	2b00      	cmp	r3, #0
 800c7ac:	d10b      	bne.n	800c7c6 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	d00f      	beq.n	800c7d4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800c7b8:	2b00      	cmp	r3, #0
 800c7ba:	d00b      	beq.n	800c7d4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800c7c0:	687a      	ldr	r2, [r7, #4]
 800c7c2:	429a      	cmp	r2, r3
 800c7c4:	d006      	beq.n	800c7d4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800c7c6:	68fb      	ldr	r3, [r7, #12]
 800c7c8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c7cc:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800c7ce:	68fb      	ldr	r3, [r7, #12]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d1e4      	bne.n	800c79e <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800c7d4:	68fb      	ldr	r3, [r7, #12]
    }
 800c7d6:	4618      	mov	r0, r3
 800c7d8:	3714      	adds	r7, #20
 800c7da:	46bd      	mov	sp, r7
 800c7dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7e0:	4770      	bx	lr
 800c7e2:	bf00      	nop
 800c7e4:	200011d0 	.word	0x200011d0
 800c7e8:	200011d8 	.word	0x200011d8

0800c7ec <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800c7ec:	b580      	push	{r7, lr}
 800c7ee:	b082      	sub	sp, #8
 800c7f0:	af00      	add	r7, sp, #0
 800c7f2:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800c7f4:	6879      	ldr	r1, [r7, #4]
 800c7f6:	2000      	movs	r0, #0
 800c7f8:	f000 f8b6 	bl	800c968 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800c7fc:	4603      	mov	r3, r0
        }
 800c7fe:	4618      	mov	r0, r3
 800c800:	3708      	adds	r7, #8
 800c802:	46bd      	mov	sp, r7
 800c804:	bd80      	pop	{r7, pc}
	...

0800c808 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800c808:	b580      	push	{r7, lr}
 800c80a:	b084      	sub	sp, #16
 800c80c:	af00      	add	r7, sp, #0
 800c80e:	6078      	str	r0, [r7, #4]
 800c810:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800c812:	4b17      	ldr	r3, [pc, #92]	@ (800c870 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800c818:	4b16      	ldr	r3, [pc, #88]	@ (800c874 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800c81a:	685b      	ldr	r3, [r3, #4]
 800c81c:	3301      	adds	r3, #1
 800c81e:	4a15      	ldr	r2, [pc, #84]	@ (800c874 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800c820:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800c822:	687b      	ldr	r3, [r7, #4]
 800c824:	2b00      	cmp	r3, #0
 800c826:	d119      	bne.n	800c85c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800c828:	2300      	movs	r3, #0
 800c82a:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800c82c:	e016      	b.n	800c85c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800c82e:	683b      	ldr	r3, [r7, #0]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d005      	beq.n	800c840 <FreeRTOS_FindEndPointOnMAC+0x38>
 800c834:	68fb      	ldr	r3, [r7, #12]
 800c836:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c83a:	683a      	ldr	r2, [r7, #0]
 800c83c:	429a      	cmp	r2, r3
 800c83e:	d109      	bne.n	800c854 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800c840:	68fb      	ldr	r3, [r7, #12]
 800c842:	33e8      	adds	r3, #232	@ 0xe8
 800c844:	6879      	ldr	r1, [r7, #4]
 800c846:	2206      	movs	r2, #6
 800c848:	4618      	mov	r0, r3
 800c84a:	f015 f850 	bl	80218ee <memcmp>
 800c84e:	4603      	mov	r3, r0
 800c850:	2b00      	cmp	r3, #0
 800c852:	d007      	beq.n	800c864 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800c854:	68fb      	ldr	r3, [r7, #12]
 800c856:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c85a:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800c85c:	68fb      	ldr	r3, [r7, #12]
 800c85e:	2b00      	cmp	r3, #0
 800c860:	d1e5      	bne.n	800c82e <FreeRTOS_FindEndPointOnMAC+0x26>
 800c862:	e000      	b.n	800c866 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800c864:	bf00      	nop
        }

        return pxEndPoint;
 800c866:	68fb      	ldr	r3, [r7, #12]
    }
 800c868:	4618      	mov	r0, r3
 800c86a:	3710      	adds	r7, #16
 800c86c:	46bd      	mov	sp, r7
 800c86e:	bd80      	pop	{r7, pc}
 800c870:	200011d0 	.word	0x200011d0
 800c874:	200011d8 	.word	0x200011d8

0800c878 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800c878:	b580      	push	{r7, lr}
 800c87a:	b082      	sub	sp, #8
 800c87c:	af00      	add	r7, sp, #0
 800c87e:	6078      	str	r0, [r7, #4]
 800c880:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800c882:	683a      	ldr	r2, [r7, #0]
 800c884:	6879      	ldr	r1, [r7, #4]
 800c886:	2000      	movs	r0, #0
 800c888:	f000 f806 	bl	800c898 <FreeRTOS_InterfaceEndPointOnNetMask>
 800c88c:	4603      	mov	r3, r0
    }
 800c88e:	4618      	mov	r0, r3
 800c890:	3708      	adds	r7, #8
 800c892:	46bd      	mov	sp, r7
 800c894:	bd80      	pop	{r7, pc}
	...

0800c898 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800c898:	b580      	push	{r7, lr}
 800c89a:	b086      	sub	sp, #24
 800c89c:	af00      	add	r7, sp, #0
 800c89e:	60f8      	str	r0, [r7, #12]
 800c8a0:	60b9      	str	r1, [r7, #8]
 800c8a2:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800c8a4:	4b2d      	ldr	r3, [pc, #180]	@ (800c95c <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800c8aa:	230e      	movs	r3, #14
 800c8ac:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800c8ae:	4b2c      	ldr	r3, [pc, #176]	@ (800c960 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800c8b0:	689b      	ldr	r3, [r3, #8]
 800c8b2:	3301      	adds	r3, #1
 800c8b4:	4a2a      	ldr	r2, [pc, #168]	@ (800c960 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800c8b6:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800c8b8:	687a      	ldr	r2, [r7, #4]
 800c8ba:	693b      	ldr	r3, [r7, #16]
 800c8bc:	429a      	cmp	r2, r3
 800c8be:	d22d      	bcs.n	800c91c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800c8c0:	4a27      	ldr	r2, [pc, #156]	@ (800c960 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800c8c2:	687b      	ldr	r3, [r7, #4]
 800c8c4:	3304      	adds	r3, #4
 800c8c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c8ca:	1c5a      	adds	r2, r3, #1
 800c8cc:	4924      	ldr	r1, [pc, #144]	@ (800c960 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	3304      	adds	r3, #4
 800c8d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800c8d6:	e021      	b.n	800c91c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800c8d8:	68fb      	ldr	r3, [r7, #12]
 800c8da:	2b00      	cmp	r3, #0
 800c8dc:	d005      	beq.n	800c8ea <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800c8de:	697b      	ldr	r3, [r7, #20]
 800c8e0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c8e4:	68fa      	ldr	r2, [r7, #12]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d114      	bne.n	800c914 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800c8ea:	697b      	ldr	r3, [r7, #20]
 800c8ec:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c8f0:	f003 0304 	and.w	r3, r3, #4
 800c8f4:	b2db      	uxtb	r3, r3
 800c8f6:	2b00      	cmp	r3, #0
 800c8f8:	d10c      	bne.n	800c914 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800c8fa:	68bb      	ldr	r3, [r7, #8]
 800c8fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c900:	d00f      	beq.n	800c922 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800c902:	697b      	ldr	r3, [r7, #20]
 800c904:	681a      	ldr	r2, [r3, #0]
 800c906:	68bb      	ldr	r3, [r7, #8]
 800c908:	405a      	eors	r2, r3
 800c90a:	697b      	ldr	r3, [r7, #20]
 800c90c:	685b      	ldr	r3, [r3, #4]
 800c90e:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800c910:	2b00      	cmp	r3, #0
 800c912:	d006      	beq.n	800c922 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800c914:	697b      	ldr	r3, [r7, #20]
 800c916:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c91a:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800c91c:	697b      	ldr	r3, [r7, #20]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d1da      	bne.n	800c8d8 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800c922:	697b      	ldr	r3, [r7, #20]
 800c924:	2b00      	cmp	r3, #0
 800c926:	d113      	bne.n	800c950 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	061a      	lsls	r2, r3, #24
 800c92c:	68bb      	ldr	r3, [r7, #8]
 800c92e:	021b      	lsls	r3, r3, #8
 800c930:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c934:	431a      	orrs	r2, r3
 800c936:	68bb      	ldr	r3, [r7, #8]
 800c938:	0a1b      	lsrs	r3, r3, #8
 800c93a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c93e:	431a      	orrs	r2, r3
 800c940:	68bb      	ldr	r3, [r7, #8]
 800c942:	0e1b      	lsrs	r3, r3, #24
 800c944:	4313      	orrs	r3, r2
 800c946:	461a      	mov	r2, r3
 800c948:	6879      	ldr	r1, [r7, #4]
 800c94a:	4806      	ldr	r0, [pc, #24]	@ (800c964 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800c94c:	f013 fe1e 	bl	802058c <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800c950:	697b      	ldr	r3, [r7, #20]
    }
 800c952:	4618      	mov	r0, r3
 800c954:	3718      	adds	r7, #24
 800c956:	46bd      	mov	sp, r7
 800c958:	bd80      	pop	{r7, pc}
 800c95a:	bf00      	nop
 800c95c:	200011d0 	.word	0x200011d0
 800c960:	200011d8 	.word	0x200011d8
 800c964:	08023e28 	.word	0x08023e28

0800c968 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800c968:	b580      	push	{r7, lr}
 800c96a:	b084      	sub	sp, #16
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800c972:	4b17      	ldr	r3, [pc, #92]	@ (800c9d0 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800c974:	681b      	ldr	r3, [r3, #0]
 800c976:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800c978:	e020      	b.n	800c9bc <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d005      	beq.n	800c98c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800c980:	68fb      	ldr	r3, [r7, #12]
 800c982:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800c986:	687a      	ldr	r2, [r7, #4]
 800c988:	429a      	cmp	r2, r3
 800c98a:	d113      	bne.n	800c9b4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800c98c:	68fb      	ldr	r3, [r7, #12]
 800c98e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c992:	f003 0304 	and.w	r3, r3, #4
 800c996:	b2db      	uxtb	r3, r3
 800c998:	2b00      	cmp	r3, #0
 800c99a:	d00b      	beq.n	800c9b4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800c99c:	68fb      	ldr	r3, [r7, #12]
 800c99e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c9a2:	68fb      	ldr	r3, [r7, #12]
 800c9a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c9a6:	461a      	mov	r2, r3
 800c9a8:	6839      	ldr	r1, [r7, #0]
 800c9aa:	f7fd fc0b 	bl	800a1c4 <xCompareIPv6_Address>
 800c9ae:	4603      	mov	r3, r0
 800c9b0:	2b00      	cmp	r3, #0
 800c9b2:	d007      	beq.n	800c9c4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800c9b4:	68fb      	ldr	r3, [r7, #12]
 800c9b6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c9ba:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800c9bc:	68fb      	ldr	r3, [r7, #12]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d1db      	bne.n	800c97a <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800c9c2:	e000      	b.n	800c9c6 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800c9c4:	bf00      	nop
            }

            return pxEndPoint;
 800c9c6:	68fb      	ldr	r3, [r7, #12]
        }
 800c9c8:	4618      	mov	r0, r3
 800c9ca:	3710      	adds	r7, #16
 800c9cc:	46bd      	mov	sp, r7
 800c9ce:	bd80      	pop	{r7, pc}
 800c9d0:	200011d0 	.word	0x200011d0

0800c9d4 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800c9d4:	b5b0      	push	{r4, r5, r7, lr}
 800c9d6:	b0b0      	sub	sp, #192	@ 0xc0
 800c9d8:	af04      	add	r7, sp, #16
 800c9da:	60f8      	str	r0, [r7, #12]
 800c9dc:	607a      	str	r2, [r7, #4]
 800c9de:	603b      	str	r3, [r7, #0]
 800c9e0:	460b      	mov	r3, r1
 800c9e2:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800c9e4:	2300      	movs	r3, #0
 800c9e6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800c9ea:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800c9ee:	2200      	movs	r2, #0
 800c9f0:	601a      	str	r2, [r3, #0]
 800c9f2:	605a      	str	r2, [r3, #4]
 800c9f4:	609a      	str	r2, [r3, #8]
 800c9f6:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800c9f8:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800c9fc:	2200      	movs	r2, #0
 800c9fe:	601a      	str	r2, [r3, #0]
 800ca00:	605a      	str	r2, [r3, #4]
 800ca02:	609a      	str	r2, [r3, #8]
 800ca04:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800ca06:	897b      	ldrh	r3, [r7, #10]
 800ca08:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800ca0c:	4293      	cmp	r3, r2
 800ca0e:	d101      	bne.n	800ca14 <pxEasyFit+0x40>
 800ca10:	2301      	movs	r3, #1
 800ca12:	e000      	b.n	800ca16 <pxEasyFit+0x42>
 800ca14:	2300      	movs	r3, #0
 800ca16:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800ca20:	2300      	movs	r3, #0
 800ca22:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800ca26:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ca2a:	2b01      	cmp	r3, #1
 800ca2c:	d123      	bne.n	800ca76 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800ca2e:	683b      	ldr	r3, [r7, #0]
 800ca30:	2210      	movs	r2, #16
 800ca32:	4619      	mov	r1, r3
 800ca34:	4888      	ldr	r0, [pc, #544]	@ (800cc58 <pxEasyFit+0x284>)
 800ca36:	f014 ff5a 	bl	80218ee <memcmp>
 800ca3a:	4603      	mov	r3, r0
 800ca3c:	2b00      	cmp	r3, #0
 800ca3e:	d101      	bne.n	800ca44 <pxEasyFit+0x70>
 800ca40:	2301      	movs	r3, #1
 800ca42:	e000      	b.n	800ca46 <pxEasyFit+0x72>
 800ca44:	2300      	movs	r3, #0
 800ca46:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800ca4a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ca4e:	2b01      	cmp	r3, #1
 800ca50:	d105      	bne.n	800ca5e <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800ca52:	687b      	ldr	r3, [r7, #4]
 800ca54:	683a      	ldr	r2, [r7, #0]
 800ca56:	4619      	mov	r1, r3
 800ca58:	4880      	ldr	r0, [pc, #512]	@ (800cc5c <pxEasyFit+0x288>)
 800ca5a:	f013 fd97 	bl	802058c <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	4618      	mov	r0, r3
 800ca62:	f000 fa15 	bl	800ce90 <xIPv6_GetIPType>
 800ca66:	4603      	mov	r3, r0
 800ca68:	2b00      	cmp	r3, #0
 800ca6a:	d101      	bne.n	800ca70 <pxEasyFit+0x9c>
 800ca6c:	2301      	movs	r3, #1
 800ca6e:	e000      	b.n	800ca72 <pxEasyFit+0x9e>
 800ca70:	2300      	movs	r3, #0
 800ca72:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800ca76:	68f8      	ldr	r0, [r7, #12]
 800ca78:	f7ff fe26 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 800ca7c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800ca80:	e07d      	b.n	800cb7e <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800ca82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ca86:	33e8      	adds	r3, #232	@ 0xe8
 800ca88:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800ca8c:	2206      	movs	r2, #6
 800ca8e:	4618      	mov	r0, r3
 800ca90:	f014 ff2d 	bl	80218ee <memcmp>
 800ca94:	4603      	mov	r3, r0
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d101      	bne.n	800ca9e <pxEasyFit+0xca>
 800ca9a:	2301      	movs	r3, #1
 800ca9c:	e000      	b.n	800caa0 <pxEasyFit+0xcc>
 800ca9e:	2300      	movs	r3, #0
 800caa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800caa4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800caa8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800caac:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800cab0:	b2db      	uxtb	r3, r3
 800cab2:	461a      	mov	r2, r3
 800cab4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cab8:	4293      	cmp	r3, r2
 800caba:	d159      	bne.n	800cb70 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800cabc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cac0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800cac2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800cac4:	3301      	adds	r3, #1
 800cac6:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800cac8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cacc:	2b01      	cmp	r3, #1
 800cace:	d134      	bne.n	800cb3a <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800cad0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cad4:	3338      	adds	r3, #56	@ 0x38
 800cad6:	4618      	mov	r0, r3
 800cad8:	f000 f9da 	bl	800ce90 <xIPv6_GetIPType>
 800cadc:	4603      	mov	r3, r0
 800cade:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800cae2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cae6:	2b05      	cmp	r3, #5
 800cae8:	d035      	beq.n	800cb56 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800caea:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800caee:	2b00      	cmp	r3, #0
 800caf0:	d101      	bne.n	800caf6 <pxEasyFit+0x122>
 800caf2:	2301      	movs	r3, #1
 800caf4:	e000      	b.n	800caf8 <pxEasyFit+0x124>
 800caf6:	2300      	movs	r3, #0
 800caf8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800cafc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb00:	3338      	adds	r3, #56	@ 0x38
 800cb02:	6839      	ldr	r1, [r7, #0]
 800cb04:	2210      	movs	r2, #16
 800cb06:	4618      	mov	r0, r3
 800cb08:	f014 fef1 	bl	80218ee <memcmp>
 800cb0c:	4603      	mov	r3, r0
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d106      	bne.n	800cb20 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800cb12:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb16:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800cb18:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb1a:	3301      	adds	r3, #1
 800cb1c:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800cb1e:	e01a      	b.n	800cb56 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800cb20:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800cb24:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cb28:	429a      	cmp	r2, r3
 800cb2a:	d114      	bne.n	800cb56 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800cb2c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb30:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800cb32:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cb34:	3301      	adds	r3, #1
 800cb36:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800cb38:	e00d      	b.n	800cb56 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800cb3a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb3e:	681a      	ldr	r2, [r3, #0]
 800cb40:	683b      	ldr	r3, [r7, #0]
 800cb42:	681b      	ldr	r3, [r3, #0]
 800cb44:	429a      	cmp	r2, r3
 800cb46:	d108      	bne.n	800cb5a <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800cb48:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb4c:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800cb4e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cb50:	3301      	adds	r3, #1
 800cb52:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800cb54:	e001      	b.n	800cb5a <pxEasyFit+0x186>
                           break;
 800cb56:	bf00      	nop
 800cb58:	e000      	b.n	800cb5c <pxEasyFit+0x188>
                        break;
 800cb5a:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800cb5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cb60:	2b01      	cmp	r3, #1
 800cb62:	d105      	bne.n	800cb70 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800cb64:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cb66:	3301      	adds	r3, #1
 800cb68:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800cb6a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb6e:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800cb70:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800cb74:	68f8      	ldr	r0, [r7, #12]
 800cb76:	f7ff fdc9 	bl	800c70c <FreeRTOS_NextEndPoint>
 800cb7a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800cb7e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cb82:	2b00      	cmp	r3, #0
 800cb84:	f47f af7d 	bne.w	800ca82 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800cb88:	2300      	movs	r3, #0
 800cb8a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cb8e:	e017      	b.n	800cbc0 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800cb90:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cb94:	009b      	lsls	r3, r3, #2
 800cb96:	33b0      	adds	r3, #176	@ 0xb0
 800cb98:	443b      	add	r3, r7
 800cb9a:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800cb9e:	2b00      	cmp	r3, #0
 800cba0:	dd09      	ble.n	800cbb6 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800cba2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cba6:	009b      	lsls	r3, r3, #2
 800cba8:	33b0      	adds	r3, #176	@ 0xb0
 800cbaa:	443b      	add	r3, r7
 800cbac:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800cbb0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800cbb4:	e008      	b.n	800cbc8 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800cbb6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cbba:	3301      	adds	r3, #1
 800cbbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cbc0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cbc4:	2b03      	cmp	r3, #3
 800cbc6:	dde3      	ble.n	800cb90 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800cbc8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cbcc:	2b00      	cmp	r3, #0
 800cbce:	d13c      	bne.n	800cc4a <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800cbd0:	897b      	ldrh	r3, [r7, #10]
 800cbd2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800cbd6:	4293      	cmp	r3, r2
 800cbd8:	d101      	bne.n	800cbde <pxEasyFit+0x20a>
 800cbda:	230a      	movs	r3, #10
 800cbdc:	e000      	b.n	800cbe0 <pxEasyFit+0x20c>
 800cbde:	2302      	movs	r3, #2
 800cbe0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800cbe4:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800cbe6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800cbea:	2328      	movs	r3, #40	@ 0x28
 800cbec:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800cbf0:	f001 fc70 	bl	800e4d4 <FreeRTOS_inet_ntop>
 800cbf4:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800cbf8:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800cbfa:	f107 0210 	add.w	r2, r7, #16
 800cbfe:	2328      	movs	r3, #40	@ 0x28
 800cc00:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800cc04:	f001 fc66 	bl	800e4d4 <FreeRTOS_inet_ntop>
 800cc08:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800cc0c:	8979      	ldrh	r1, [r7, #10]
 800cc0e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cc10:	461c      	mov	r4, r3
 800cc12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cc14:	461d      	mov	r5, r3
 800cc16:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cc18:	4618      	mov	r0, r3
 800cc1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d002      	beq.n	800cc28 <pxEasyFit+0x254>
 800cc22:	f107 0310 	add.w	r3, r7, #16
 800cc26:	e000      	b.n	800cc2a <pxEasyFit+0x256>
 800cc28:	4b0d      	ldr	r3, [pc, #52]	@ (800cc60 <pxEasyFit+0x28c>)
 800cc2a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800cc2e:	2a00      	cmp	r2, #0
 800cc30:	d002      	beq.n	800cc38 <pxEasyFit+0x264>
 800cc32:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800cc36:	e000      	b.n	800cc3a <pxEasyFit+0x266>
 800cc38:	4a09      	ldr	r2, [pc, #36]	@ (800cc60 <pxEasyFit+0x28c>)
 800cc3a:	9202      	str	r2, [sp, #8]
 800cc3c:	9301      	str	r3, [sp, #4]
 800cc3e:	9000      	str	r0, [sp, #0]
 800cc40:	462b      	mov	r3, r5
 800cc42:	4622      	mov	r2, r4
 800cc44:	4807      	ldr	r0, [pc, #28]	@ (800cc64 <pxEasyFit+0x290>)
 800cc46:	f013 fca1 	bl	802058c <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800cc4a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800cc4e:	4618      	mov	r0, r3
 800cc50:	37b0      	adds	r7, #176	@ 0xb0
 800cc52:	46bd      	mov	sp, r7
 800cc54:	bdb0      	pop	{r4, r5, r7, pc}
 800cc56:	bf00      	nop
 800cc58:	08025c74 	.word	0x08025c74
 800cc5c:	08023ec4 	.word	0x08023ec4
 800cc60:	08023ee0 	.word	0x08023ee0
 800cc64:	08023ee8 	.word	0x08023ee8

0800cc68 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800cc68:	b590      	push	{r4, r7, lr}
 800cc6a:	b097      	sub	sp, #92	@ 0x5c
 800cc6c:	af02      	add	r7, sp, #8
 800cc6e:	6078      	str	r0, [r7, #4]
 800cc70:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800cc72:	2300      	movs	r3, #0
 800cc74:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800cc76:	683b      	ldr	r3, [r7, #0]
 800cc78:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800cc7a:	683b      	ldr	r3, [r7, #0]
 800cc7c:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	d104      	bne.n	800cc8e <FreeRTOS_MatchingEndpoint+0x26>
 800cc84:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800cc88:	485e      	ldr	r0, [pc, #376]	@ (800ce04 <FreeRTOS_MatchingEndpoint+0x19c>)
 800cc8a:	f7f4 fa51 	bl	8001130 <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800cc8e:	683b      	ldr	r3, [r7, #0]
 800cc90:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800cc92:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc94:	3302      	adds	r3, #2
 800cc96:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800cc98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800cc9a:	f003 0303 	and.w	r3, r3, #3
 800cc9e:	2b00      	cmp	r3, #0
 800cca0:	d004      	beq.n	800ccac <FreeRTOS_MatchingEndpoint+0x44>
 800cca2:	f240 319b 	movw	r1, #923	@ 0x39b
 800cca6:	4857      	ldr	r0, [pc, #348]	@ (800ce04 <FreeRTOS_MatchingEndpoint+0x19c>)
 800cca8:	f7f4 fa42 	bl	8001130 <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800ccac:	4b56      	ldr	r3, [pc, #344]	@ (800ce08 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800ccae:	68db      	ldr	r3, [r3, #12]
 800ccb0:	3301      	adds	r3, #1
 800ccb2:	4a55      	ldr	r2, [pc, #340]	@ (800ce08 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800ccb4:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800ccb6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ccb8:	7b1a      	ldrb	r2, [r3, #12]
 800ccba:	7b5b      	ldrb	r3, [r3, #13]
 800ccbc:	021b      	lsls	r3, r3, #8
 800ccbe:	4313      	orrs	r3, r2
 800ccc0:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800ccc6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ccca:	2210      	movs	r2, #16
 800cccc:	2100      	movs	r1, #0
 800ccce:	4618      	mov	r0, r3
 800ccd0:	f013 ff85 	bl	8020bde <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800ccd4:	f107 0314 	add.w	r3, r7, #20
 800ccd8:	2210      	movs	r2, #16
 800ccda:	2100      	movs	r1, #0
 800ccdc:	4618      	mov	r0, r3
 800ccde:	f013 ff7e 	bl	8020bde <memset>

            switch( usFrameType )
 800cce2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800cce4:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800cce8:	4293      	cmp	r3, r2
 800ccea:	d009      	beq.n	800cd00 <FreeRTOS_MatchingEndpoint+0x98>
 800ccec:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800ccf0:	4293      	cmp	r3, r2
 800ccf2:	dc6a      	bgt.n	800cdca <FreeRTOS_MatchingEndpoint+0x162>
 800ccf4:	2b08      	cmp	r3, #8
 800ccf6:	d05d      	beq.n	800cdb4 <FreeRTOS_MatchingEndpoint+0x14c>
 800ccf8:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800ccfc:	d015      	beq.n	800cd2a <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800ccfe:	e064      	b.n	800cdca <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cd00:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd02:	3316      	adds	r3, #22
 800cd04:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800cd08:	6818      	ldr	r0, [r3, #0]
 800cd0a:	6859      	ldr	r1, [r3, #4]
 800cd0c:	689a      	ldr	r2, [r3, #8]
 800cd0e:	68db      	ldr	r3, [r3, #12]
 800cd10:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800cd12:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800cd14:	3326      	adds	r3, #38	@ 0x26
 800cd16:	f107 0414 	add.w	r4, r7, #20
 800cd1a:	6818      	ldr	r0, [r3, #0]
 800cd1c:	6859      	ldr	r1, [r3, #4]
 800cd1e:	689a      	ldr	r2, [r3, #8]
 800cd20:	68db      	ldr	r3, [r3, #12]
 800cd22:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800cd24:	2301      	movs	r3, #1
 800cd26:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800cd28:	e050      	b.n	800cdcc <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800cd2a:	683b      	ldr	r3, [r7, #0]
 800cd2c:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800cd2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd30:	8a9b      	ldrh	r3, [r3, #20]
 800cd32:	b29b      	uxth	r3, r3
 800cd34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cd38:	d108      	bne.n	800cd4c <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800cd3a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd3c:	331c      	adds	r3, #28
 800cd3e:	681b      	ldr	r3, [r3, #0]
 800cd40:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800cd42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd44:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800cd48:	617b      	str	r3, [r7, #20]
 800cd4a:	e00d      	b.n	800cd68 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800cd4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800cd4e:	8a9b      	ldrh	r3, [r3, #20]
 800cd50:	b29b      	uxth	r3, r3
 800cd52:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800cd56:	d107      	bne.n	800cd68 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800cd58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd5a:	331c      	adds	r3, #28
 800cd5c:	681b      	ldr	r3, [r3, #0]
 800cd5e:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800cd60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cd62:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800cd66:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800cd68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6a:	061a      	lsls	r2, r3, #24
 800cd6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd6e:	021b      	lsls	r3, r3, #8
 800cd70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cd74:	431a      	orrs	r2, r3
 800cd76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd78:	0a1b      	lsrs	r3, r3, #8
 800cd7a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cd7e:	431a      	orrs	r2, r3
 800cd80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd82:	0e1b      	lsrs	r3, r3, #24
 800cd84:	ea42 0103 	orr.w	r1, r2, r3
 800cd88:	697b      	ldr	r3, [r7, #20]
 800cd8a:	061a      	lsls	r2, r3, #24
 800cd8c:	697b      	ldr	r3, [r7, #20]
 800cd8e:	021b      	lsls	r3, r3, #8
 800cd90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cd94:	431a      	orrs	r2, r3
 800cd96:	697b      	ldr	r3, [r7, #20]
 800cd98:	0a1b      	lsrs	r3, r3, #8
 800cd9a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cd9e:	431a      	orrs	r2, r3
 800cda0:	697b      	ldr	r3, [r7, #20]
 800cda2:	0e1b      	lsrs	r3, r3, #24
 800cda4:	4313      	orrs	r3, r2
 800cda6:	461a      	mov	r2, r3
 800cda8:	4818      	ldr	r0, [pc, #96]	@ (800ce0c <FreeRTOS_MatchingEndpoint+0x1a4>)
 800cdaa:	f013 fbef 	bl	802058c <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800cdae:	2301      	movs	r3, #1
 800cdb0:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800cdb2:	e00b      	b.n	800cdcc <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800cdb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdb6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800cdba:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800cdbc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800cdbe:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800cdc2:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800cdc4:	2301      	movs	r3, #1
 800cdc6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800cdc8:	e000      	b.n	800cdcc <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800cdca:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800cdcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800cdce:	2b01      	cmp	r3, #1
 800cdd0:	d113      	bne.n	800cdfa <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800cdd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800cdd4:	f107 030c 	add.w	r3, r7, #12
 800cdd8:	6810      	ldr	r0, [r2, #0]
 800cdda:	6018      	str	r0, [r3, #0]
 800cddc:	8892      	ldrh	r2, [r2, #4]
 800cdde:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800cde0:	f107 0014 	add.w	r0, r7, #20
 800cde4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800cde8:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800cdea:	f107 030c 	add.w	r3, r7, #12
 800cdee:	9300      	str	r3, [sp, #0]
 800cdf0:	4603      	mov	r3, r0
 800cdf2:	6878      	ldr	r0, [r7, #4]
 800cdf4:	f7ff fdee 	bl	800c9d4 <pxEasyFit>
 800cdf8:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800cdfa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800cdfc:	4618      	mov	r0, r3
 800cdfe:	3754      	adds	r7, #84	@ 0x54
 800ce00:	46bd      	mov	sp, r7
 800ce02:	bd90      	pop	{r4, r7, pc}
 800ce04:	08023f10 	.word	0x08023f10
 800ce08:	200011d8 	.word	0x200011d8
 800ce0c:	08023f40 	.word	0x08023f40

0800ce10 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800ce10:	b580      	push	{r7, lr}
 800ce12:	b084      	sub	sp, #16
 800ce14:	af00      	add	r7, sp, #0
 800ce16:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800ce18:	4b1b      	ldr	r3, [pc, #108]	@ (800ce88 <FreeRTOS_FindGateWay+0x78>)
 800ce1a:	681b      	ldr	r3, [r3, #0]
 800ce1c:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800ce1e:	e028      	b.n	800ce72 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	2b60      	cmp	r3, #96	@ 0x60
 800ce24:	d112      	bne.n	800ce4c <FreeRTOS_FindGateWay+0x3c>
 800ce26:	68fb      	ldr	r3, [r7, #12]
 800ce28:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ce2c:	f003 0304 	and.w	r3, r3, #4
 800ce30:	b2db      	uxtb	r3, r3
 800ce32:	2b00      	cmp	r3, #0
 800ce34:	d00a      	beq.n	800ce4c <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800ce36:	68fb      	ldr	r3, [r7, #12]
 800ce38:	335c      	adds	r3, #92	@ 0x5c
 800ce3a:	2210      	movs	r2, #16
 800ce3c:	4619      	mov	r1, r3
 800ce3e:	4813      	ldr	r0, [pc, #76]	@ (800ce8c <FreeRTOS_FindGateWay+0x7c>)
 800ce40:	f014 fd55 	bl	80218ee <memcmp>
 800ce44:	4603      	mov	r3, r0
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	d00f      	beq.n	800ce6a <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800ce4a:	e017      	b.n	800ce7c <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	2b40      	cmp	r3, #64	@ 0x40
 800ce50:	d10b      	bne.n	800ce6a <FreeRTOS_FindGateWay+0x5a>
 800ce52:	68fb      	ldr	r3, [r7, #12]
 800ce54:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ce58:	f003 0304 	and.w	r3, r3, #4
 800ce5c:	b2db      	uxtb	r3, r3
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d103      	bne.n	800ce6a <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800ce62:	68fb      	ldr	r3, [r7, #12]
 800ce64:	689b      	ldr	r3, [r3, #8]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d107      	bne.n	800ce7a <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800ce6a:	68fb      	ldr	r3, [r7, #12]
 800ce6c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800ce70:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800ce72:	68fb      	ldr	r3, [r7, #12]
 800ce74:	2b00      	cmp	r3, #0
 800ce76:	d1d3      	bne.n	800ce20 <FreeRTOS_FindGateWay+0x10>
 800ce78:	e000      	b.n	800ce7c <FreeRTOS_FindGateWay+0x6c>
                            break;
 800ce7a:	bf00      	nop
        }

        return pxEndPoint;
 800ce7c:	68fb      	ldr	r3, [r7, #12]
    }
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3710      	adds	r7, #16
 800ce82:	46bd      	mov	sp, r7
 800ce84:	bd80      	pop	{r7, pc}
 800ce86:	bf00      	nop
 800ce88:	200011d0 	.word	0x200011d0
 800ce8c:	08025c2c 	.word	0x08025c2c

0800ce90 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b086      	sub	sp, #24
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800ce98:	2305      	movs	r3, #5
 800ce9a:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d046      	beq.n	800cf30 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800cea2:	2300      	movs	r3, #0
 800cea4:	613b      	str	r3, [r7, #16]
 800cea6:	e040      	b.n	800cf2a <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	781b      	ldrb	r3, [r3, #0]
 800ceac:	021b      	lsls	r3, r3, #8
 800ceae:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800ceb0:	687b      	ldr	r3, [r7, #4]
 800ceb2:	785b      	ldrb	r3, [r3, #1]
 800ceb4:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800ceb6:	4313      	orrs	r3, r2
 800ceb8:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800ceba:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800cebc:	491f      	ldr	r1, [pc, #124]	@ (800cf3c <xIPv6_GetIPType+0xac>)
 800cebe:	693a      	ldr	r2, [r7, #16]
 800cec0:	4613      	mov	r3, r2
 800cec2:	005b      	lsls	r3, r3, #1
 800cec4:	4413      	add	r3, r2
 800cec6:	005b      	lsls	r3, r3, #1
 800cec8:	440b      	add	r3, r1
 800ceca:	781b      	ldrb	r3, [r3, #0]
 800cecc:	2b04      	cmp	r3, #4
 800cece:	d108      	bne.n	800cee2 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800ced0:	6878      	ldr	r0, [r7, #4]
 800ced2:	f7fd f929 	bl	800a128 <xIsIPv6Loopback>
 800ced6:	4603      	mov	r3, r0
 800ced8:	2b00      	cmp	r3, #0
 800ceda:	d002      	beq.n	800cee2 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800cedc:	2304      	movs	r3, #4
 800cede:	75fb      	strb	r3, [r7, #23]
                        break;
 800cee0:	e026      	b.n	800cf30 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800cee2:	4916      	ldr	r1, [pc, #88]	@ (800cf3c <xIPv6_GetIPType+0xac>)
 800cee4:	693a      	ldr	r2, [r7, #16]
 800cee6:	4613      	mov	r3, r2
 800cee8:	005b      	lsls	r3, r3, #1
 800ceea:	4413      	add	r3, r2
 800ceec:	005b      	lsls	r3, r3, #1
 800ceee:	440b      	add	r3, r1
 800cef0:	3302      	adds	r3, #2
 800cef2:	881a      	ldrh	r2, [r3, #0]
 800cef4:	89fb      	ldrh	r3, [r7, #14]
 800cef6:	4013      	ands	r3, r2
 800cef8:	b299      	uxth	r1, r3
 800cefa:	4810      	ldr	r0, [pc, #64]	@ (800cf3c <xIPv6_GetIPType+0xac>)
 800cefc:	693a      	ldr	r2, [r7, #16]
 800cefe:	4613      	mov	r3, r2
 800cf00:	005b      	lsls	r3, r3, #1
 800cf02:	4413      	add	r3, r2
 800cf04:	005b      	lsls	r3, r3, #1
 800cf06:	4403      	add	r3, r0
 800cf08:	3304      	adds	r3, #4
 800cf0a:	881b      	ldrh	r3, [r3, #0]
 800cf0c:	4299      	cmp	r1, r3
 800cf0e:	d109      	bne.n	800cf24 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800cf10:	490a      	ldr	r1, [pc, #40]	@ (800cf3c <xIPv6_GetIPType+0xac>)
 800cf12:	693a      	ldr	r2, [r7, #16]
 800cf14:	4613      	mov	r3, r2
 800cf16:	005b      	lsls	r3, r3, #1
 800cf18:	4413      	add	r3, r2
 800cf1a:	005b      	lsls	r3, r3, #1
 800cf1c:	440b      	add	r3, r1
 800cf1e:	781b      	ldrb	r3, [r3, #0]
 800cf20:	75fb      	strb	r3, [r7, #23]
                    break;
 800cf22:	e005      	b.n	800cf30 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800cf24:	693b      	ldr	r3, [r7, #16]
 800cf26:	3301      	adds	r3, #1
 800cf28:	613b      	str	r3, [r7, #16]
 800cf2a:	693b      	ldr	r3, [r7, #16]
 800cf2c:	2b04      	cmp	r3, #4
 800cf2e:	ddbb      	ble.n	800cea8 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800cf30:	7dfb      	ldrb	r3, [r7, #23]
    }
 800cf32:	4618      	mov	r0, r3
 800cf34:	3718      	adds	r7, #24
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}
 800cf3a:	bf00      	nop
 800cf3c:	08025c84 	.word	0x08025c84

0800cf40 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800cf40:	b580      	push	{r7, lr}
 800cf42:	b084      	sub	sp, #16
 800cf44:	af00      	add	r7, sp, #0
 800cf46:	60f8      	str	r0, [r7, #12]
 800cf48:	60b9      	str	r1, [r7, #8]
 800cf4a:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800cf4c:	68fb      	ldr	r3, [r7, #12]
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	d105      	bne.n	800cf5e <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800cf52:	4a16      	ldr	r2, [pc, #88]	@ (800cfac <pcEndpointName+0x6c>)
 800cf54:	6879      	ldr	r1, [r7, #4]
 800cf56:	68b8      	ldr	r0, [r7, #8]
 800cf58:	f014 fb44 	bl	80215e4 <snprintf>
 800cf5c:	e020      	b.n	800cfa0 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cf64:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d002      	beq.n	800cf74 <pcEndpointName+0x34>
 800cf6e:	2b01      	cmp	r3, #1
 800cf70:	d007      	beq.n	800cf82 <pcEndpointName+0x42>
 800cf72:	e00f      	b.n	800cf94 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800cf74:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800cf76:	687b      	ldr	r3, [r7, #4]
 800cf78:	68ba      	ldr	r2, [r7, #8]
 800cf7a:	2002      	movs	r0, #2
 800cf7c:	f001 faaa 	bl	800e4d4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800cf80:	e00e      	b.n	800cfa0 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800cf82:	68fb      	ldr	r3, [r7, #12]
 800cf84:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800cf88:	687b      	ldr	r3, [r7, #4]
 800cf8a:	68ba      	ldr	r2, [r7, #8]
 800cf8c:	200a      	movs	r0, #10
 800cf8e:	f001 faa1 	bl	800e4d4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800cf92:	e005      	b.n	800cfa0 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800cf94:	4a05      	ldr	r2, [pc, #20]	@ (800cfac <pcEndpointName+0x6c>)
 800cf96:	6879      	ldr	r1, [r7, #4]
 800cf98:	68b8      	ldr	r0, [r7, #8]
 800cf9a:	f014 fb23 	bl	80215e4 <snprintf>
                    break;
 800cf9e:	bf00      	nop
            }
        }

        return pcBuffer;
 800cfa0:	68bb      	ldr	r3, [r7, #8]
    }
 800cfa2:	4618      	mov	r0, r3
 800cfa4:	3710      	adds	r7, #16
 800cfa6:	46bd      	mov	sp, r7
 800cfa8:	bd80      	pop	{r7, pc}
 800cfaa:	bf00      	nop
 800cfac:	08023f60 	.word	0x08023f60

0800cfb0 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800cfb0:	b580      	push	{r7, lr}
 800cfb2:	b086      	sub	sp, #24
 800cfb4:	af00      	add	r7, sp, #0
 800cfb6:	60f8      	str	r0, [r7, #12]
 800cfb8:	60b9      	str	r1, [r7, #8]
 800cfba:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800cfbc:	68f8      	ldr	r0, [r7, #12]
 800cfbe:	f002 fb21 	bl	800f604 <xSocketValid>
 800cfc2:	4603      	mov	r3, r0
 800cfc4:	2b00      	cmp	r3, #0
 800cfc6:	d102      	bne.n	800cfce <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800cfc8:	2300      	movs	r3, #0
 800cfca:	617b      	str	r3, [r7, #20]
 800cfcc:	e015      	b.n	800cffa <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d006      	beq.n	800cfe2 <prvValidSocket+0x32>
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	69db      	ldr	r3, [r3, #28]
 800cfd8:	2b00      	cmp	r3, #0
 800cfda:	d102      	bne.n	800cfe2 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800cfdc:	2300      	movs	r3, #0
 800cfde:	617b      	str	r3, [r7, #20]
 800cfe0:	e00b      	b.n	800cffa <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800cfe8:	68bb      	ldr	r3, [r7, #8]
 800cfea:	b2db      	uxtb	r3, r3
 800cfec:	429a      	cmp	r2, r3
 800cfee:	d002      	beq.n	800cff6 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800cff0:	2300      	movs	r3, #0
 800cff2:	617b      	str	r3, [r7, #20]
 800cff4:	e001      	b.n	800cffa <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800cff6:	2301      	movs	r3, #1
 800cff8:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800cffa:	697b      	ldr	r3, [r7, #20]
}
 800cffc:	4618      	mov	r0, r3
 800cffe:	3718      	adds	r7, #24
 800d000:	46bd      	mov	sp, r7
 800d002:	bd80      	pop	{r7, pc}

0800d004 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800d004:	b580      	push	{r7, lr}
 800d006:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800d008:	4803      	ldr	r0, [pc, #12]	@ (800d018 <vNetworkSocketsInit+0x14>)
 800d00a:	f7f5 fa45 	bl	8002498 <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800d00e:	4803      	ldr	r0, [pc, #12]	@ (800d01c <vNetworkSocketsInit+0x18>)
 800d010:	f7f5 fa42 	bl	8002498 <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800d014:	bf00      	nop
 800d016:	bd80      	pop	{r7, pc}
 800d018:	2000129c 	.word	0x2000129c
 800d01c:	200012b0 	.word	0x200012b0

0800d020 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800d020:	b580      	push	{r7, lr}
 800d022:	b086      	sub	sp, #24
 800d024:	af00      	add	r7, sp, #0
 800d026:	60f8      	str	r0, [r7, #12]
 800d028:	60b9      	str	r1, [r7, #8]
 800d02a:	607a      	str	r2, [r7, #4]
 800d02c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800d02e:	2301      	movs	r3, #1
 800d030:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800d032:	2300      	movs	r3, #0
 800d034:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800d036:	f7fb ff97 	bl	8008f68 <xIPIsNetworkTaskReady>
 800d03a:	4603      	mov	r3, r0
 800d03c:	2b00      	cmp	r3, #0
 800d03e:	d102      	bne.n	800d046 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800d040:	2300      	movs	r3, #0
 800d042:	617b      	str	r3, [r7, #20]
 800d044:	e05e      	b.n	800d104 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800d046:	68fb      	ldr	r3, [r7, #12]
 800d048:	2b02      	cmp	r3, #2
 800d04a:	d004      	beq.n	800d056 <prvDetermineSocketSize+0x36>
 800d04c:	68fb      	ldr	r3, [r7, #12]
 800d04e:	2b0a      	cmp	r3, #10
 800d050:	d001      	beq.n	800d056 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800d052:	2300      	movs	r3, #0
 800d054:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	2b02      	cmp	r3, #2
 800d05a:	d002      	beq.n	800d062 <prvDetermineSocketSize+0x42>
 800d05c:	68fb      	ldr	r3, [r7, #12]
 800d05e:	2b0a      	cmp	r3, #10
 800d060:	d101      	bne.n	800d066 <prvDetermineSocketSize+0x46>
 800d062:	2301      	movs	r3, #1
 800d064:	e000      	b.n	800d068 <prvDetermineSocketSize+0x48>
 800d066:	2300      	movs	r3, #0
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d104      	bne.n	800d076 <prvDetermineSocketSize+0x56>
 800d06c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800d070:	4827      	ldr	r0, [pc, #156]	@ (800d110 <prvDetermineSocketSize+0xf0>)
 800d072:	f7f4 f85d 	bl	8001130 <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800d076:	4b27      	ldr	r3, [pc, #156]	@ (800d114 <prvDetermineSocketSize+0xf4>)
 800d078:	689b      	ldr	r3, [r3, #8]
 800d07a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d07e:	d004      	beq.n	800d08a <prvDetermineSocketSize+0x6a>
 800d080:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800d084:	4822      	ldr	r0, [pc, #136]	@ (800d110 <prvDetermineSocketSize+0xf0>)
 800d086:	f7f4 f853 	bl	8001130 <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800d08a:	4b23      	ldr	r3, [pc, #140]	@ (800d118 <prvDetermineSocketSize+0xf8>)
 800d08c:	689b      	ldr	r3, [r3, #8]
 800d08e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d092:	d004      	beq.n	800d09e <prvDetermineSocketSize+0x7e>
 800d094:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800d098:	481d      	ldr	r0, [pc, #116]	@ (800d110 <prvDetermineSocketSize+0xf0>)
 800d09a:	f7f4 f849 	bl	8001130 <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800d09e:	687b      	ldr	r3, [r7, #4]
 800d0a0:	2b11      	cmp	r3, #17
 800d0a2:	d110      	bne.n	800d0c6 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800d0a4:	68bb      	ldr	r3, [r7, #8]
 800d0a6:	2b02      	cmp	r3, #2
 800d0a8:	d009      	beq.n	800d0be <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800d0aa:	2300      	movs	r3, #0
 800d0ac:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	2b01      	cmp	r3, #1
 800d0b2:	d004      	beq.n	800d0be <prvDetermineSocketSize+0x9e>
 800d0b4:	f240 2106 	movw	r1, #518	@ 0x206
 800d0b8:	4815      	ldr	r0, [pc, #84]	@ (800d110 <prvDetermineSocketSize+0xf0>)
 800d0ba:	f7f4 f839 	bl	8001130 <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800d0be:	683b      	ldr	r3, [r7, #0]
 800d0c0:	2270      	movs	r2, #112	@ 0x70
 800d0c2:	601a      	str	r2, [r3, #0]
 800d0c4:	e01e      	b.n	800d104 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800d0c6:	687b      	ldr	r3, [r7, #4]
 800d0c8:	2b06      	cmp	r3, #6
 800d0ca:	d111      	bne.n	800d0f0 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800d0cc:	68bb      	ldr	r3, [r7, #8]
 800d0ce:	2b01      	cmp	r3, #1
 800d0d0:	d009      	beq.n	800d0e6 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d0d6:	697b      	ldr	r3, [r7, #20]
 800d0d8:	2b01      	cmp	r3, #1
 800d0da:	d004      	beq.n	800d0e6 <prvDetermineSocketSize+0xc6>
 800d0dc:	f240 2113 	movw	r1, #531	@ 0x213
 800d0e0:	480b      	ldr	r0, [pc, #44]	@ (800d110 <prvDetermineSocketSize+0xf0>)
 800d0e2:	f7f4 f825 	bl	8001130 <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d0ec:	601a      	str	r2, [r3, #0]
 800d0ee:	e009      	b.n	800d104 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800d0f0:	2300      	movs	r3, #0
 800d0f2:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d0f4:	697b      	ldr	r3, [r7, #20]
 800d0f6:	2b01      	cmp	r3, #1
 800d0f8:	d004      	beq.n	800d104 <prvDetermineSocketSize+0xe4>
 800d0fa:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800d0fe:	4804      	ldr	r0, [pc, #16]	@ (800d110 <prvDetermineSocketSize+0xf0>)
 800d100:	f7f4 f816 	bl	8001130 <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800d104:	697b      	ldr	r3, [r7, #20]
}
 800d106:	4618      	mov	r0, r3
 800d108:	3718      	adds	r7, #24
 800d10a:	46bd      	mov	sp, r7
 800d10c:	bd80      	pop	{r7, pc}
 800d10e:	bf00      	nop
 800d110:	08023f68 	.word	0x08023f68
 800d114:	2000129c 	.word	0x2000129c
 800d118:	200012b0 	.word	0x200012b0

0800d11c <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800d11c:	b580      	push	{r7, lr}
 800d11e:	b084      	sub	sp, #16
 800d120:	af00      	add	r7, sp, #0
 800d122:	6078      	str	r0, [r7, #4]
 800d124:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800d12c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	7a1b      	ldrb	r3, [r3, #8]
 800d134:	f003 0301 	and.w	r3, r3, #1
 800d138:	b2db      	uxtb	r3, r3
 800d13a:	2b00      	cmp	r3, #0
 800d13c:	d00a      	beq.n	800d154 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800d13e:	2314      	movs	r3, #20
 800d140:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800d142:	687b      	ldr	r3, [r7, #4]
 800d144:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800d148:	89fb      	ldrh	r3, [r7, #14]
 800d14a:	1ad3      	subs	r3, r2, r3
 800d14c:	b29a      	uxth	r2, r3
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d15a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800d15e:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800d162:	f640 3068 	movw	r0, #2920	@ 0xb68
 800d166:	f7fc fc85 	bl	8009a74 <FreeRTOS_round_up>
 800d16a:	4602      	mov	r2, r0
 800d16c:	687b      	ldr	r3, [r7, #4]
 800d16e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800d172:	687b      	ldr	r3, [r7, #4]
 800d174:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d178:	08db      	lsrs	r3, r3, #3
 800d17a:	4a10      	ldr	r2, [pc, #64]	@ (800d1bc <prvInitialiseTCPFields+0xa0>)
 800d17c:	fba2 2303 	umull	r2, r3, r2, r3
 800d180:	099b      	lsrs	r3, r3, #6
 800d182:	4619      	mov	r1, r3
 800d184:	2001      	movs	r0, #1
 800d186:	f7fc fc35 	bl	80099f4 <FreeRTOS_max_size_t>
 800d18a:	4602      	mov	r2, r0
 800d18c:	687b      	ldr	r3, [r7, #4]
 800d18e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d198:	08db      	lsrs	r3, r3, #3
 800d19a:	4a08      	ldr	r2, [pc, #32]	@ (800d1bc <prvInitialiseTCPFields+0xa0>)
 800d19c:	fba2 2303 	umull	r2, r3, r2, r3
 800d1a0:	099b      	lsrs	r3, r3, #6
 800d1a2:	4619      	mov	r1, r3
 800d1a4:	2001      	movs	r0, #1
 800d1a6:	f7fc fc25 	bl	80099f4 <FreeRTOS_max_size_t>
 800d1aa:	4602      	mov	r2, r0
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800d1b2:	bf00      	nop
 800d1b4:	3710      	adds	r7, #16
 800d1b6:	46bd      	mov	sp, r7
 800d1b8:	bd80      	pop	{r7, pc}
 800d1ba:	bf00      	nop
 800d1bc:	2ce33e6d 	.word	0x2ce33e6d

0800d1c0 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800d1c0:	b580      	push	{r7, lr}
 800d1c2:	b08a      	sub	sp, #40	@ 0x28
 800d1c4:	af00      	add	r7, sp, #0
 800d1c6:	60f8      	str	r0, [r7, #12]
 800d1c8:	60b9      	str	r1, [r7, #8]
 800d1ca:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800d1cc:	2301      	movs	r3, #1
 800d1ce:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800d1d4:	68fb      	ldr	r3, [r7, #12]
 800d1d6:	2b0a      	cmp	r3, #10
 800d1d8:	d002      	beq.n	800d1e0 <FreeRTOS_socket+0x20>
 800d1da:	68fb      	ldr	r3, [r7, #12]
 800d1dc:	2b02      	cmp	r3, #2
 800d1de:	d101      	bne.n	800d1e4 <FreeRTOS_socket+0x24>
 800d1e0:	2301      	movs	r3, #1
 800d1e2:	e000      	b.n	800d1e6 <FreeRTOS_socket+0x26>
 800d1e4:	2300      	movs	r3, #0
 800d1e6:	2b00      	cmp	r3, #0
 800d1e8:	d104      	bne.n	800d1f4 <FreeRTOS_socket+0x34>
 800d1ea:	f240 2171 	movw	r1, #625	@ 0x271
 800d1ee:	4845      	ldr	r0, [pc, #276]	@ (800d304 <FreeRTOS_socket+0x144>)
 800d1f0:	f7f3 ff9e 	bl	8001130 <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	2b00      	cmp	r3, #0
 800d1f8:	d10c      	bne.n	800d214 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800d1fa:	68bb      	ldr	r3, [r7, #8]
 800d1fc:	2b01      	cmp	r3, #1
 800d1fe:	d005      	beq.n	800d20c <FreeRTOS_socket+0x4c>
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	2b02      	cmp	r3, #2
 800d204:	d105      	bne.n	800d212 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800d206:	2311      	movs	r3, #17
 800d208:	623b      	str	r3, [r7, #32]
                    break;
 800d20a:	e003      	b.n	800d214 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800d20c:	2306      	movs	r3, #6
 800d20e:	623b      	str	r3, [r7, #32]
                    break;
 800d210:	e000      	b.n	800d214 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800d212:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800d214:	f107 0314 	add.w	r3, r7, #20
 800d218:	6a3a      	ldr	r2, [r7, #32]
 800d21a:	68b9      	ldr	r1, [r7, #8]
 800d21c:	68f8      	ldr	r0, [r7, #12]
 800d21e:	f7ff feff 	bl	800d020 <prvDetermineSocketSize>
 800d222:	4603      	mov	r3, r0
 800d224:	2b00      	cmp	r3, #0
 800d226:	d103      	bne.n	800d230 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d228:	f04f 33ff 	mov.w	r3, #4294967295
 800d22c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d22e:	e063      	b.n	800d2f8 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800d230:	697b      	ldr	r3, [r7, #20]
 800d232:	4618      	mov	r0, r3
 800d234:	f7f8 f986 	bl	8005544 <pvPortMalloc>
 800d238:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800d23a:	69fb      	ldr	r3, [r7, #28]
 800d23c:	2b00      	cmp	r3, #0
 800d23e:	d103      	bne.n	800d248 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d240:	f04f 33ff 	mov.w	r3, #4294967295
 800d244:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800d246:	e057      	b.n	800d2f8 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800d248:	f7f4 ff51 	bl	80020ee <xEventGroupCreate>
 800d24c:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800d24e:	69bb      	ldr	r3, [r7, #24]
 800d250:	2b00      	cmp	r3, #0
 800d252:	d106      	bne.n	800d262 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800d254:	69f8      	ldr	r0, [r7, #28]
 800d256:	f7f8 fa49 	bl	80056ec <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d25a:	f04f 33ff 	mov.w	r3, #4294967295
 800d25e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d260:	e04a      	b.n	800d2f8 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800d262:	697b      	ldr	r3, [r7, #20]
 800d264:	461a      	mov	r2, r3
 800d266:	2100      	movs	r1, #0
 800d268:	69f8      	ldr	r0, [r7, #28]
 800d26a:	f013 fcb8 	bl	8020bde <memset>

            pxSocket->xEventGroup = xEventGroup;
 800d26e:	69fb      	ldr	r3, [r7, #28]
 800d270:	69ba      	ldr	r2, [r7, #24]
 800d272:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800d274:	68fb      	ldr	r3, [r7, #12]
 800d276:	2b02      	cmp	r3, #2
 800d278:	d008      	beq.n	800d28c <FreeRTOS_socket+0xcc>
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	2b0a      	cmp	r3, #10
 800d27e:	d10b      	bne.n	800d298 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800d280:	69fa      	ldr	r2, [r7, #28]
 800d282:	7a13      	ldrb	r3, [r2, #8]
 800d284:	f043 0301 	orr.w	r3, r3, #1
 800d288:	7213      	strb	r3, [r2, #8]
                        break;
 800d28a:	e009      	b.n	800d2a0 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800d28c:	69fa      	ldr	r2, [r7, #28]
 800d28e:	7a13      	ldrb	r3, [r2, #8]
 800d290:	f36f 0300 	bfc	r3, #0, #1
 800d294:	7213      	strb	r3, [r2, #8]
                        break;
 800d296:	e003      	b.n	800d2a0 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800d298:	481b      	ldr	r0, [pc, #108]	@ (800d308 <FreeRTOS_socket+0x148>)
 800d29a:	f013 f977 	bl	802058c <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800d29e:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800d2a0:	6a3b      	ldr	r3, [r7, #32]
 800d2a2:	2b11      	cmp	r3, #17
 800d2a4:	d105      	bne.n	800d2b2 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800d2a6:	69fb      	ldr	r3, [r7, #28]
 800d2a8:	3354      	adds	r3, #84	@ 0x54
 800d2aa:	4618      	mov	r0, r3
 800d2ac:	f7f5 f8f4 	bl	8002498 <vListInitialise>
 800d2b0:	e007      	b.n	800d2c2 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800d2b2:	6a3b      	ldr	r3, [r7, #32]
 800d2b4:	2b06      	cmp	r3, #6
 800d2b6:	d104      	bne.n	800d2c2 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800d2b8:	697b      	ldr	r3, [r7, #20]
 800d2ba:	4619      	mov	r1, r3
 800d2bc:	69f8      	ldr	r0, [r7, #28]
 800d2be:	f7ff ff2d 	bl	800d11c <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800d2c2:	69fb      	ldr	r3, [r7, #28]
 800d2c4:	330c      	adds	r3, #12
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f7f5 f906 	bl	80024d8 <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800d2cc:	69fb      	ldr	r3, [r7, #28]
 800d2ce:	69fa      	ldr	r2, [r7, #28]
 800d2d0:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800d2d2:	69fb      	ldr	r3, [r7, #28]
 800d2d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2d8:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800d2da:	69fb      	ldr	r3, [r7, #28]
 800d2dc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d2e0:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800d2e2:	69fb      	ldr	r3, [r7, #28]
 800d2e4:	2202      	movs	r2, #2
 800d2e6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800d2ea:	6a3b      	ldr	r3, [r7, #32]
 800d2ec:	b2da      	uxtb	r2, r3
 800d2ee:	69fb      	ldr	r3, [r7, #28]
 800d2f0:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800d2f4:	69fb      	ldr	r3, [r7, #28]
 800d2f6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800d2f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d2fa:	4618      	mov	r0, r3
 800d2fc:	3728      	adds	r7, #40	@ 0x28
 800d2fe:	46bd      	mov	sp, r7
 800d300:	bd80      	pop	{r7, pc}
 800d302:	bf00      	nop
 800d304:	08023f68 	.word	0x08023f68
 800d308:	08023f98 	.word	0x08023f98

0800d30c <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800d30c:	b580      	push	{r7, lr}
 800d30e:	b084      	sub	sp, #16
 800d310:	af00      	add	r7, sp, #0
 800d312:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800d314:	2200      	movs	r2, #0
 800d316:	2111      	movs	r1, #17
 800d318:	6878      	ldr	r0, [r7, #4]
 800d31a:	f7ff fe49 	bl	800cfb0 <prvValidSocket>
 800d31e:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	2b01      	cmp	r3, #1
 800d324:	d10d      	bne.n	800d342 <prvMakeSureSocketIsBound+0x36>
 800d326:	687b      	ldr	r3, [r7, #4]
 800d328:	69db      	ldr	r3, [r3, #28]
 800d32a:	2b00      	cmp	r3, #0
 800d32c:	d109      	bne.n	800d342 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800d32e:	2200      	movs	r2, #0
 800d330:	2100      	movs	r1, #0
 800d332:	6878      	ldr	r0, [r7, #4]
 800d334:	f000 f934 	bl	800d5a0 <FreeRTOS_bind>
 800d338:	4603      	mov	r3, r0
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d001      	beq.n	800d342 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800d33e:	2300      	movs	r3, #0
 800d340:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800d342:	68fb      	ldr	r3, [r7, #12]
}
 800d344:	4618      	mov	r0, r3
 800d346:	3710      	adds	r7, #16
 800d348:	46bd      	mov	sp, r7
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b088      	sub	sp, #32
 800d350:	af00      	add	r7, sp, #0
 800d352:	60f8      	str	r0, [r7, #12]
 800d354:	60b9      	str	r1, [r7, #8]
 800d356:	607a      	str	r2, [r7, #4]
 800d358:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800d35a:	2300      	movs	r3, #0
 800d35c:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800d35e:	2304      	movs	r3, #4
 800d360:	753b      	strb	r3, [r7, #20]
 800d362:	2300      	movs	r3, #0
 800d364:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800d366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d368:	785b      	ldrb	r3, [r3, #1]
 800d36a:	2b02      	cmp	r3, #2
 800d36c:	d006      	beq.n	800d37c <prvSendUDPPacket+0x30>
 800d36e:	2b0a      	cmp	r3, #10
 800d370:	d109      	bne.n	800d386 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800d372:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d374:	68b8      	ldr	r0, [r7, #8]
 800d376:	f7fd f903 	bl	800a580 <xSend_UDP_Update_IPv6>
                break;
 800d37a:	e005      	b.n	800d388 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800d37c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d37e:	68b8      	ldr	r0, [r7, #8]
 800d380:	f7fc fd68 	bl	8009e54 <xSend_UDP_Update_IPv4>
                break;
 800d384:	e000      	b.n	800d388 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800d386:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800d388:	687a      	ldr	r2, [r7, #4]
 800d38a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d38c:	441a      	add	r2, r3
 800d38e:	68bb      	ldr	r3, [r7, #8]
 800d390:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800d392:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d394:	885a      	ldrh	r2, [r3, #2]
 800d396:	68bb      	ldr	r3, [r7, #8]
 800d398:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800d39a:	68fb      	ldr	r3, [r7, #12]
 800d39c:	68db      	ldr	r3, [r3, #12]
 800d39e:	b29a      	uxth	r2, r3
 800d3a0:	68bb      	ldr	r3, [r7, #8]
 800d3a2:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800d3a4:	68bb      	ldr	r3, [r7, #8]
 800d3a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d3a8:	3306      	adds	r3, #6
 800d3aa:	68fa      	ldr	r2, [r7, #12]
 800d3ac:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800d3b0:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800d3b2:	68bb      	ldr	r3, [r7, #8]
 800d3b4:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800d3b6:	f107 0314 	add.w	r3, r7, #20
 800d3ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d3bc:	4618      	mov	r0, r3
 800d3be:	f7fb fa37 	bl	8008830 <xSendEventStructToIPTask>
 800d3c2:	4603      	mov	r3, r0
 800d3c4:	2b01      	cmp	r3, #1
 800d3c6:	d10b      	bne.n	800d3e0 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800d3c8:	687b      	ldr	r3, [r7, #4]
 800d3ca:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800d3cc:	68fb      	ldr	r3, [r7, #12]
 800d3ce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3d0:	2b00      	cmp	r3, #0
 800d3d2:	d00d      	beq.n	800d3f0 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d3d8:	6879      	ldr	r1, [r7, #4]
 800d3da:	68f8      	ldr	r0, [r7, #12]
 800d3dc:	4798      	blx	r3
 800d3de:	e007      	b.n	800d3f0 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800d3e0:	683b      	ldr	r3, [r7, #0]
 800d3e2:	f003 0301 	and.w	r3, r3, #1
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d102      	bne.n	800d3f0 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d3ea:	68b8      	ldr	r0, [r7, #8]
 800d3ec:	f008 ffe4 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800d3f0:	69fb      	ldr	r3, [r7, #28]
}
 800d3f2:	4618      	mov	r0, r3
 800d3f4:	3720      	adds	r7, #32
 800d3f6:	46bd      	mov	sp, r7
 800d3f8:	bd80      	pop	{r7, pc}

0800d3fa <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800d3fa:	b580      	push	{r7, lr}
 800d3fc:	b08e      	sub	sp, #56	@ 0x38
 800d3fe:	af04      	add	r7, sp, #16
 800d400:	60f8      	str	r0, [r7, #12]
 800d402:	60b9      	str	r1, [r7, #8]
 800d404:	607a      	str	r2, [r7, #4]
 800d406:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800d408:	2300      	movs	r3, #0
 800d40a:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800d40c:	68fb      	ldr	r3, [r7, #12]
 800d40e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d410:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800d412:	683b      	ldr	r3, [r7, #0]
 800d414:	f003 0310 	and.w	r3, r3, #16
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d104      	bne.n	800d426 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800d41c:	f7fc f94a 	bl	80096b4 <xIsCallingFromIPTask>
 800d420:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800d422:	2b00      	cmp	r3, #0
 800d424:	d001      	beq.n	800d42a <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800d426:	2300      	movs	r3, #0
 800d428:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800d42a:	683b      	ldr	r3, [r7, #0]
 800d42c:	f003 0301 	and.w	r3, r3, #1
 800d430:	2b00      	cmp	r3, #0
 800d432:	d128      	bne.n	800d486 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800d434:	f107 0310 	add.w	r3, r7, #16
 800d438:	4618      	mov	r0, r3
 800d43a:	f7f6 fdbd 	bl	8003fb8 <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800d43e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d440:	687b      	ldr	r3, [r7, #4]
 800d442:	4413      	add	r3, r2
 800d444:	69ba      	ldr	r2, [r7, #24]
 800d446:	4611      	mov	r1, r2
 800d448:	4618      	mov	r0, r3
 800d44a:	f008 ff4d 	bl	80162e8 <pxGetNetworkBufferWithDescriptor>
 800d44e:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800d450:	6a3b      	ldr	r3, [r7, #32]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d01b      	beq.n	800d48e <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800d456:	6a3b      	ldr	r3, [r7, #32]
 800d458:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d45a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d45c:	4413      	add	r3, r2
 800d45e:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800d460:	687a      	ldr	r2, [r7, #4]
 800d462:	68b9      	ldr	r1, [r7, #8]
 800d464:	69f8      	ldr	r0, [r7, #28]
 800d466:	f013 faad 	bl	80209c4 <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800d46a:	f107 0218 	add.w	r2, r7, #24
 800d46e:	f107 0310 	add.w	r3, r7, #16
 800d472:	4611      	mov	r1, r2
 800d474:	4618      	mov	r0, r3
 800d476:	f7f6 fdd7 	bl	8004028 <xTaskCheckForTimeOut>
 800d47a:	4603      	mov	r3, r0
 800d47c:	2b01      	cmp	r3, #1
 800d47e:	d106      	bne.n	800d48e <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800d480:	2300      	movs	r3, #0
 800d482:	61bb      	str	r3, [r7, #24]
 800d484:	e003      	b.n	800d48e <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800d486:	68b8      	ldr	r0, [r7, #8]
 800d488:	f7fc f8cc 	bl	8009624 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800d48c:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800d48e:	6a3b      	ldr	r3, [r7, #32]
 800d490:	2b00      	cmp	r3, #0
 800d492:	d010      	beq.n	800d4b6 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800d494:	68fb      	ldr	r3, [r7, #12]
 800d496:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d498:	6a3b      	ldr	r3, [r7, #32]
 800d49a:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800d49c:	69bb      	ldr	r3, [r7, #24]
 800d49e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d4a0:	9202      	str	r2, [sp, #8]
 800d4a2:	9301      	str	r3, [sp, #4]
 800d4a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d4a6:	9300      	str	r3, [sp, #0]
 800d4a8:	683b      	ldr	r3, [r7, #0]
 800d4aa:	687a      	ldr	r2, [r7, #4]
 800d4ac:	6a39      	ldr	r1, [r7, #32]
 800d4ae:	68f8      	ldr	r0, [r7, #12]
 800d4b0:	f7ff ff4c 	bl	800d34c <prvSendUDPPacket>
 800d4b4:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800d4b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d4b8:	4618      	mov	r0, r3
 800d4ba:	3728      	adds	r7, #40	@ 0x28
 800d4bc:	46bd      	mov	sp, r7
 800d4be:	bd80      	pop	{r7, pc}

0800d4c0 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800d4c0:	b580      	push	{r7, lr}
 800d4c2:	b090      	sub	sp, #64	@ 0x40
 800d4c4:	af02      	add	r7, sp, #8
 800d4c6:	60f8      	str	r0, [r7, #12]
 800d4c8:	60b9      	str	r1, [r7, #8]
 800d4ca:	607a      	str	r2, [r7, #4]
 800d4cc:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800d4da:	2300      	movs	r3, #0
 800d4dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800d4de:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d013      	beq.n	800d50c <FreeRTOS_sendto+0x4c>
 800d4e4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4e6:	785b      	ldrb	r3, [r3, #1]
 800d4e8:	2b0a      	cmp	r3, #10
 800d4ea:	d00f      	beq.n	800d50c <FreeRTOS_sendto+0x4c>
 800d4ec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d4ee:	785b      	ldrb	r3, [r3, #1]
 800d4f0:	2b02      	cmp	r3, #2
 800d4f2:	d00b      	beq.n	800d50c <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800d4f4:	f107 0310 	add.w	r3, r7, #16
 800d4f8:	2218      	movs	r2, #24
 800d4fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d4fc:	4618      	mov	r0, r3
 800d4fe:	f013 fa61 	bl	80209c4 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800d502:	2302      	movs	r3, #2
 800d504:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800d506:	f107 0310 	add.w	r3, r7, #16
 800d50a:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800d50c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d104      	bne.n	800d51c <FreeRTOS_sendto+0x5c>
 800d512:	f240 6143 	movw	r1, #1603	@ 0x643
 800d516:	4820      	ldr	r0, [pc, #128]	@ (800d598 <FreeRTOS_sendto+0xd8>)
 800d518:	f7f3 fe0a 	bl	8001130 <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800d51c:	68bb      	ldr	r3, [r7, #8]
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d104      	bne.n	800d52c <FreeRTOS_sendto+0x6c>
 800d522:	f240 6144 	movw	r1, #1604	@ 0x644
 800d526:	481c      	ldr	r0, [pc, #112]	@ (800d598 <FreeRTOS_sendto+0xd8>)
 800d528:	f7f3 fe02 	bl	8001130 <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800d52c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d52e:	785b      	ldrb	r3, [r3, #1]
 800d530:	2b02      	cmp	r3, #2
 800d532:	d007      	beq.n	800d544 <FreeRTOS_sendto+0x84>
 800d534:	2b0a      	cmp	r3, #10
 800d536:	d10b      	bne.n	800d550 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800d538:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800d53c:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800d53e:	233e      	movs	r3, #62	@ 0x3e
 800d540:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800d542:	e00c      	b.n	800d55e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800d544:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800d548:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800d54a:	232a      	movs	r3, #42	@ 0x2a
 800d54c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800d54e:	e006      	b.n	800d55e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800d550:	4812      	ldr	r0, [pc, #72]	@ (800d59c <FreeRTOS_sendto+0xdc>)
 800d552:	f013 f81b 	bl	802058c <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d556:	f06f 0315 	mvn.w	r3, #21
 800d55a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d55c:	bf00      	nop
    }

    if( lReturn == 0 )
 800d55e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d560:	2b00      	cmp	r3, #0
 800d562:	d114      	bne.n	800d58e <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800d564:	687a      	ldr	r2, [r7, #4]
 800d566:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d568:	429a      	cmp	r2, r3
 800d56a:	d810      	bhi.n	800d58e <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800d56c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d56e:	f7ff fecd 	bl	800d30c <prvMakeSureSocketIsBound>
 800d572:	4603      	mov	r3, r0
 800d574:	2b01      	cmp	r3, #1
 800d576:	d10a      	bne.n	800d58e <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800d578:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d57a:	9301      	str	r3, [sp, #4]
 800d57c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d57e:	9300      	str	r3, [sp, #0]
 800d580:	683b      	ldr	r3, [r7, #0]
 800d582:	687a      	ldr	r2, [r7, #4]
 800d584:	68b9      	ldr	r1, [r7, #8]
 800d586:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d588:	f7ff ff37 	bl	800d3fa <prvSendTo_ActualSend>
 800d58c:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800d58e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800d590:	4618      	mov	r0, r3
 800d592:	3738      	adds	r7, #56	@ 0x38
 800d594:	46bd      	mov	sp, r7
 800d596:	bd80      	pop	{r7, pc}
 800d598:	08023f68 	.word	0x08023f68
 800d59c:	0802401c 	.word	0x0802401c

0800d5a0 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800d5a0:	b580      	push	{r7, lr}
 800d5a2:	b090      	sub	sp, #64	@ 0x40
 800d5a4:	af02      	add	r7, sp, #8
 800d5a6:	60f8      	str	r0, [r7, #12]
 800d5a8:	60b9      	str	r1, [r7, #8]
 800d5aa:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800d5b0:	2300      	movs	r3, #0
 800d5b2:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800d5b4:	68bb      	ldr	r3, [r7, #8]
 800d5b6:	2b00      	cmp	r3, #0
 800d5b8:	d013      	beq.n	800d5e2 <FreeRTOS_bind+0x42>
 800d5ba:	68bb      	ldr	r3, [r7, #8]
 800d5bc:	785b      	ldrb	r3, [r3, #1]
 800d5be:	2b0a      	cmp	r3, #10
 800d5c0:	d00f      	beq.n	800d5e2 <FreeRTOS_bind+0x42>
 800d5c2:	68bb      	ldr	r3, [r7, #8]
 800d5c4:	785b      	ldrb	r3, [r3, #1]
 800d5c6:	2b02      	cmp	r3, #2
 800d5c8:	d00b      	beq.n	800d5e2 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800d5ca:	f107 0310 	add.w	r3, r7, #16
 800d5ce:	2218      	movs	r2, #24
 800d5d0:	68b9      	ldr	r1, [r7, #8]
 800d5d2:	4618      	mov	r0, r3
 800d5d4:	f013 f9f6 	bl	80209c4 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800d5d8:	2302      	movs	r3, #2
 800d5da:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800d5dc:	f107 0310 	add.w	r3, r7, #16
 800d5e0:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800d5e2:	f7fc f867 	bl	80096b4 <xIsCallingFromIPTask>
 800d5e6:	4603      	mov	r3, r0
 800d5e8:	2b00      	cmp	r3, #0
 800d5ea:	d004      	beq.n	800d5f6 <FreeRTOS_bind+0x56>
 800d5ec:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800d5f0:	484b      	ldr	r0, [pc, #300]	@ (800d720 <FreeRTOS_bind+0x180>)
 800d5f2:	f7f3 fd9d 	bl	8001130 <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800d5f6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800d5f8:	f002 f804 	bl	800f604 <xSocketValid>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d103      	bne.n	800d60a <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d602:	f06f 0315 	mvn.w	r3, #21
 800d606:	637b      	str	r3, [r7, #52]	@ 0x34
 800d608:	e084      	b.n	800d714 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800d60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d60c:	69db      	ldr	r3, [r3, #28]
 800d60e:	2b00      	cmp	r3, #0
 800d610:	d009      	beq.n	800d626 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800d612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d614:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800d616:	4619      	mov	r1, r3
 800d618:	4842      	ldr	r0, [pc, #264]	@ (800d724 <FreeRTOS_bind+0x184>)
 800d61a:	f012 ffb7 	bl	802058c <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d61e:	f06f 0315 	mvn.w	r3, #21
 800d622:	637b      	str	r3, [r7, #52]	@ 0x34
 800d624:	e076      	b.n	800d714 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800d626:	2309      	movs	r3, #9
 800d628:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800d630:	68bb      	ldr	r3, [r7, #8]
 800d632:	2b00      	cmp	r3, #0
 800d634:	d042      	beq.n	800d6bc <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	785b      	ldrb	r3, [r3, #1]
 800d63a:	2b02      	cmp	r3, #2
 800d63c:	d010      	beq.n	800d660 <FreeRTOS_bind+0xc0>
 800d63e:	2b0a      	cmp	r3, #10
 800d640:	d129      	bne.n	800d696 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800d642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d644:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800d648:	68bb      	ldr	r3, [r7, #8]
 800d64a:	3308      	adds	r3, #8
 800d64c:	2210      	movs	r2, #16
 800d64e:	4619      	mov	r1, r3
 800d650:	f013 f9b8 	bl	80209c4 <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800d654:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d656:	7a13      	ldrb	r3, [r2, #8]
 800d658:	f043 0301 	orr.w	r3, r3, #1
 800d65c:	7213      	strb	r3, [r2, #8]
                        break;
 800d65e:	e01e      	b.n	800d69e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800d660:	68bb      	ldr	r3, [r7, #8]
 800d662:	689b      	ldr	r3, [r3, #8]
 800d664:	061a      	lsls	r2, r3, #24
 800d666:	68bb      	ldr	r3, [r7, #8]
 800d668:	689b      	ldr	r3, [r3, #8]
 800d66a:	021b      	lsls	r3, r3, #8
 800d66c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d670:	431a      	orrs	r2, r3
 800d672:	68bb      	ldr	r3, [r7, #8]
 800d674:	689b      	ldr	r3, [r3, #8]
 800d676:	0a1b      	lsrs	r3, r3, #8
 800d678:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d67c:	431a      	orrs	r2, r3
 800d67e:	68bb      	ldr	r3, [r7, #8]
 800d680:	689b      	ldr	r3, [r3, #8]
 800d682:	0e1b      	lsrs	r3, r3, #24
 800d684:	431a      	orrs	r2, r3
 800d686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d688:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800d68a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d68c:	7a13      	ldrb	r3, [r2, #8]
 800d68e:	f36f 0300 	bfc	r3, #0, #1
 800d692:	7213      	strb	r3, [r2, #8]
                        break;
 800d694:	e003      	b.n	800d69e <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800d696:	4824      	ldr	r0, [pc, #144]	@ (800d728 <FreeRTOS_bind+0x188>)
 800d698:	f012 ff78 	bl	802058c <lUDPLoggingPrintf>
                    break;
 800d69c:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800d69e:	68bb      	ldr	r3, [r7, #8]
 800d6a0:	885b      	ldrh	r3, [r3, #2]
 800d6a2:	021b      	lsls	r3, r3, #8
 800d6a4:	b21a      	sxth	r2, r3
 800d6a6:	68bb      	ldr	r3, [r7, #8]
 800d6a8:	885b      	ldrh	r3, [r3, #2]
 800d6aa:	0a1b      	lsrs	r3, r3, #8
 800d6ac:	b29b      	uxth	r3, r3
 800d6ae:	b21b      	sxth	r3, r3
 800d6b0:	4313      	orrs	r3, r2
 800d6b2:	b21b      	sxth	r3, r3
 800d6b4:	b29a      	uxth	r2, r3
 800d6b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6b8:	871a      	strh	r2, [r3, #56]	@ 0x38
 800d6ba:	e009      	b.n	800d6d0 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800d6bc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6be:	2200      	movs	r2, #0
 800d6c0:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800d6c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6c4:	3328      	adds	r3, #40	@ 0x28
 800d6c6:	2210      	movs	r2, #16
 800d6c8:	2100      	movs	r1, #0
 800d6ca:	4618      	mov	r0, r3
 800d6cc:	f013 fa87 	bl	8020bde <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800d6d0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800d6d4:	f04f 31ff 	mov.w	r1, #4294967295
 800d6d8:	4618      	mov	r0, r3
 800d6da:	f7fb f8a9 	bl	8008830 <xSendEventStructToIPTask>
 800d6de:	4603      	mov	r3, r0
 800d6e0:	2b00      	cmp	r3, #0
 800d6e2:	d106      	bne.n	800d6f2 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800d6e4:	4811      	ldr	r0, [pc, #68]	@ (800d72c <FreeRTOS_bind+0x18c>)
 800d6e6:	f012 ff51 	bl	802058c <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800d6ea:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800d6ee:	637b      	str	r3, [r7, #52]	@ 0x34
 800d6f0:	e010      	b.n	800d714 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800d6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f4:	6858      	ldr	r0, [r3, #4]
 800d6f6:	f04f 33ff 	mov.w	r3, #4294967295
 800d6fa:	9300      	str	r3, [sp, #0]
 800d6fc:	2300      	movs	r3, #0
 800d6fe:	2201      	movs	r2, #1
 800d700:	2110      	movs	r1, #16
 800d702:	f7f4 fd0b 	bl	800211c <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800d706:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d708:	69db      	ldr	r3, [r3, #28]
 800d70a:	2b00      	cmp	r3, #0
 800d70c:	d102      	bne.n	800d714 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d70e:	f06f 0315 	mvn.w	r3, #21
 800d712:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800d714:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800d716:	4618      	mov	r0, r3
 800d718:	3738      	adds	r7, #56	@ 0x38
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	08023f68 	.word	0x08023f68
 800d724:	08024044 	.word	0x08024044
 800d728:	08024070 	.word	0x08024070
 800d72c:	08024098 	.word	0x08024098

0800d730 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800d730:	b580      	push	{r7, lr}
 800d732:	b086      	sub	sp, #24
 800d734:	af00      	add	r7, sp, #0
 800d736:	60f8      	str	r0, [r7, #12]
 800d738:	60b9      	str	r1, [r7, #8]
 800d73a:	607a      	str	r2, [r7, #4]
 800d73c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800d73e:	2300      	movs	r3, #0
 800d740:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800d742:	683b      	ldr	r3, [r7, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d004      	beq.n	800d752 <prvSocketBindAdd+0x22>
 800d748:	68fb      	ldr	r3, [r7, #12]
 800d74a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d74e:	2b06      	cmp	r3, #6
 800d750:	d024      	beq.n	800d79c <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800d752:	68bb      	ldr	r3, [r7, #8]
 800d754:	885b      	ldrh	r3, [r3, #2]
 800d756:	4619      	mov	r1, r3
 800d758:	6878      	ldr	r0, [r7, #4]
 800d75a:	f000 fdf1 	bl	800e340 <pxListFindListItemWithValue>
 800d75e:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800d760:	2b00      	cmp	r3, #0
 800d762:	d01b      	beq.n	800d79c <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800d764:	68fb      	ldr	r3, [r7, #12]
 800d766:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d76a:	2b06      	cmp	r3, #6
 800d76c:	d101      	bne.n	800d772 <prvSocketBindAdd+0x42>
 800d76e:	493e      	ldr	r1, [pc, #248]	@ (800d868 <prvSocketBindAdd+0x138>)
 800d770:	e000      	b.n	800d774 <prvSocketBindAdd+0x44>
 800d772:	493e      	ldr	r1, [pc, #248]	@ (800d86c <prvSocketBindAdd+0x13c>)
 800d774:	68bb      	ldr	r3, [r7, #8]
 800d776:	885b      	ldrh	r3, [r3, #2]
 800d778:	021b      	lsls	r3, r3, #8
 800d77a:	b21a      	sxth	r2, r3
 800d77c:	68bb      	ldr	r3, [r7, #8]
 800d77e:	885b      	ldrh	r3, [r3, #2]
 800d780:	0a1b      	lsrs	r3, r3, #8
 800d782:	b29b      	uxth	r3, r3
 800d784:	b21b      	sxth	r3, r3
 800d786:	4313      	orrs	r3, r2
 800d788:	b21b      	sxth	r3, r3
 800d78a:	b29b      	uxth	r3, r3
 800d78c:	461a      	mov	r2, r3
 800d78e:	4838      	ldr	r0, [pc, #224]	@ (800d870 <prvSocketBindAdd+0x140>)
 800d790:	f012 fefc 	bl	802058c <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800d794:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800d798:	617b      	str	r3, [r7, #20]
 800d79a:	e060      	b.n	800d85e <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800d79c:	68bb      	ldr	r3, [r7, #8]
 800d79e:	885b      	ldrh	r3, [r3, #2]
 800d7a0:	461a      	mov	r2, r3
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	885b      	ldrh	r3, [r3, #2]
 800d7aa:	021b      	lsls	r3, r3, #8
 800d7ac:	b21a      	sxth	r2, r3
 800d7ae:	68bb      	ldr	r3, [r7, #8]
 800d7b0:	885b      	ldrh	r3, [r3, #2]
 800d7b2:	0a1b      	lsrs	r3, r3, #8
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	b21b      	sxth	r3, r3
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	b21b      	sxth	r3, r3
 800d7bc:	b29a      	uxth	r2, r3
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	785b      	ldrb	r3, [r3, #1]
 800d7c6:	2b0a      	cmp	r3, #10
 800d7c8:	d109      	bne.n	800d7de <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800d7ca:	68fb      	ldr	r3, [r7, #12]
 800d7cc:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800d7d0:	68bb      	ldr	r3, [r7, #8]
 800d7d2:	3308      	adds	r3, #8
 800d7d4:	2210      	movs	r2, #16
 800d7d6:	4619      	mov	r1, r3
 800d7d8:	f013 f8f4 	bl	80209c4 <memcpy>
 800d7dc:	e00c      	b.n	800d7f8 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800d7de:	68bb      	ldr	r3, [r7, #8]
 800d7e0:	689b      	ldr	r3, [r3, #8]
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d008      	beq.n	800d7f8 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800d7e6:	68bb      	ldr	r3, [r7, #8]
 800d7e8:	689b      	ldr	r3, [r3, #8]
 800d7ea:	2107      	movs	r1, #7
 800d7ec:	4618      	mov	r0, r3
 800d7ee:	f7fe ffb7 	bl	800c760 <FreeRTOS_FindEndPointOnIP_IPv4>
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d019      	beq.n	800d834 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800d800:	68fb      	ldr	r3, [r7, #12]
 800d802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d804:	681b      	ldr	r3, [r3, #0]
 800d806:	061a      	lsls	r2, r3, #24
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d80c:	681b      	ldr	r3, [r3, #0]
 800d80e:	021b      	lsls	r3, r3, #8
 800d810:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d814:	431a      	orrs	r2, r3
 800d816:	68fb      	ldr	r3, [r7, #12]
 800d818:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d81a:	681b      	ldr	r3, [r3, #0]
 800d81c:	0a1b      	lsrs	r3, r3, #8
 800d81e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d822:	431a      	orrs	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d828:	681b      	ldr	r3, [r3, #0]
 800d82a:	0e1b      	lsrs	r3, r3, #24
 800d82c:	431a      	orrs	r2, r3
 800d82e:	68fb      	ldr	r3, [r7, #12]
 800d830:	629a      	str	r2, [r3, #40]	@ 0x28
 800d832:	e00a      	b.n	800d84a <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800d834:	68bb      	ldr	r3, [r7, #8]
 800d836:	785b      	ldrb	r3, [r3, #1]
 800d838:	2b0a      	cmp	r3, #10
 800d83a:	d006      	beq.n	800d84a <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800d83c:	68fb      	ldr	r3, [r7, #12]
 800d83e:	3328      	adds	r3, #40	@ 0x28
 800d840:	2210      	movs	r2, #16
 800d842:	2100      	movs	r1, #0
 800d844:	4618      	mov	r0, r3
 800d846:	f013 f9ca 	bl	8020bde <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800d84a:	f7f5 fef9 	bl	8003640 <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800d84e:	68fb      	ldr	r3, [r7, #12]
 800d850:	330c      	adds	r3, #12
 800d852:	4619      	mov	r1, r3
 800d854:	6878      	ldr	r0, [r7, #4]
 800d856:	f7f4 fe4c 	bl	80024f2 <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800d85a:	f7f5 feff 	bl	800365c <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800d85e:	697b      	ldr	r3, [r7, #20]
}
 800d860:	4618      	mov	r0, r3
 800d862:	3718      	adds	r7, #24
 800d864:	46bd      	mov	sp, r7
 800d866:	bd80      	pop	{r7, pc}
 800d868:	080240bc 	.word	0x080240bc
 800d86c:	080240c0 	.word	0x080240c0
 800d870:	080240c4 	.word	0x080240c4

0800d874 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b08e      	sub	sp, #56	@ 0x38
 800d878:	af00      	add	r7, sp, #0
 800d87a:	60f8      	str	r0, [r7, #12]
 800d87c:	60b9      	str	r1, [r7, #8]
 800d87e:	607a      	str	r2, [r7, #4]
 800d880:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800d882:	2300      	movs	r3, #0
 800d884:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800d88a:	68f8      	ldr	r0, [r7, #12]
 800d88c:	f001 feba 	bl	800f604 <xSocketValid>
 800d890:	4603      	mov	r3, r0
 800d892:	2b01      	cmp	r3, #1
 800d894:	d004      	beq.n	800d8a0 <vSocketBind+0x2c>
 800d896:	f240 716f 	movw	r1, #1903	@ 0x76f
 800d89a:	4828      	ldr	r0, [pc, #160]	@ (800d93c <vSocketBind+0xc8>)
 800d89c:	f7f3 fc48 	bl	8001130 <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d8a0:	68fb      	ldr	r3, [r7, #12]
 800d8a2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d8a6:	2b06      	cmp	r3, #6
 800d8a8:	d102      	bne.n	800d8b0 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800d8aa:	4b25      	ldr	r3, [pc, #148]	@ (800d940 <vSocketBind+0xcc>)
 800d8ac:	633b      	str	r3, [r7, #48]	@ 0x30
 800d8ae:	e001      	b.n	800d8b4 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800d8b0:	4b24      	ldr	r3, [pc, #144]	@ (800d944 <vSocketBind+0xd0>)
 800d8b2:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800d8b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d115      	bne.n	800d8e6 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800d8ba:	f107 0314 	add.w	r3, r7, #20
 800d8be:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800d8c0:	2218      	movs	r2, #24
 800d8c2:	2100      	movs	r1, #0
 800d8c4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800d8c6:	f013 f98a 	bl	8020bde <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800d8ca:	68fb      	ldr	r3, [r7, #12]
 800d8cc:	7a1b      	ldrb	r3, [r3, #8]
 800d8ce:	f003 0301 	and.w	r3, r3, #1
 800d8d2:	b2db      	uxtb	r3, r3
 800d8d4:	2b00      	cmp	r3, #0
 800d8d6:	d003      	beq.n	800d8e0 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800d8d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8da:	220a      	movs	r2, #10
 800d8dc:	705a      	strb	r2, [r3, #1]
 800d8de:	e002      	b.n	800d8e6 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800d8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e2:	2202      	movs	r2, #2
 800d8e4:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800d8e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	d104      	bne.n	800d8f6 <vSocketBind+0x82>
 800d8ec:	f240 719b 	movw	r1, #1947	@ 0x79b
 800d8f0:	4812      	ldr	r0, [pc, #72]	@ (800d93c <vSocketBind+0xc8>)
 800d8f2:	f7f3 fc1d 	bl	8001130 <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800d8f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d8f8:	885b      	ldrh	r3, [r3, #2]
 800d8fa:	2b00      	cmp	r3, #0
 800d8fc:	d111      	bne.n	800d922 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800d8fe:	68fb      	ldr	r3, [r7, #12]
 800d900:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d904:	4618      	mov	r0, r3
 800d906:	f000 fcc3 	bl	800e290 <prvGetPrivatePortNumber>
 800d90a:	4603      	mov	r3, r0
 800d90c:	461a      	mov	r2, r3
 800d90e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d910:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800d912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d914:	885b      	ldrh	r3, [r3, #2]
 800d916:	2b00      	cmp	r3, #0
 800d918:	d103      	bne.n	800d922 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800d91a:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800d91e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800d920:	e006      	b.n	800d930 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800d922:	683b      	ldr	r3, [r7, #0]
 800d924:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d926:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d928:	68f8      	ldr	r0, [r7, #12]
 800d92a:	f7ff ff01 	bl	800d730 <prvSocketBindAdd>
 800d92e:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800d930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800d932:	4618      	mov	r0, r3
 800d934:	3738      	adds	r7, #56	@ 0x38
 800d936:	46bd      	mov	sp, r7
 800d938:	bd80      	pop	{r7, pc}
 800d93a:	bf00      	nop
 800d93c:	08023f68 	.word	0x08023f68
 800d940:	200012b0 	.word	0x200012b0
 800d944:	2000129c 	.word	0x2000129c

0800d948 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800d948:	b580      	push	{r7, lr}
 800d94a:	b086      	sub	sp, #24
 800d94c:	af00      	add	r7, sp, #0
 800d94e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800d954:	230a      	movs	r3, #10
 800d956:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800d95c:	6878      	ldr	r0, [r7, #4]
 800d95e:	f001 fe51 	bl	800f604 <xSocketValid>
 800d962:	4603      	mov	r3, r0
 800d964:	2b00      	cmp	r3, #0
 800d966:	d102      	bne.n	800d96e <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800d968:	2300      	movs	r3, #0
 800d96a:	617b      	str	r3, [r7, #20]
 800d96c:	e02f      	b.n	800d9ce <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d96e:	693b      	ldr	r3, [r7, #16]
 800d970:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d974:	2b06      	cmp	r3, #6
 800d976:	d10c      	bne.n	800d992 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800d978:	693b      	ldr	r3, [r7, #16]
 800d97a:	2200      	movs	r2, #0
 800d97c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800d980:	693b      	ldr	r3, [r7, #16]
 800d982:	2200      	movs	r2, #0
 800d984:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800d988:	693b      	ldr	r3, [r7, #16]
 800d98a:	2200      	movs	r2, #0
 800d98c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800d990:	e00a      	b.n	800d9a8 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800d992:	693b      	ldr	r3, [r7, #16]
 800d994:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d998:	2b11      	cmp	r3, #17
 800d99a:	d105      	bne.n	800d9a8 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800d99c:	693b      	ldr	r3, [r7, #16]
 800d99e:	2200      	movs	r2, #0
 800d9a0:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800d9a2:	693b      	ldr	r3, [r7, #16]
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800d9a8:	f107 0308 	add.w	r3, r7, #8
 800d9ac:	f04f 31ff 	mov.w	r1, #4294967295
 800d9b0:	4618      	mov	r0, r3
 800d9b2:	f7fa ff3d 	bl	8008830 <xSendEventStructToIPTask>
 800d9b6:	4603      	mov	r3, r0
 800d9b8:	2b00      	cmp	r3, #0
 800d9ba:	d106      	bne.n	800d9ca <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800d9bc:	4806      	ldr	r0, [pc, #24]	@ (800d9d8 <FreeRTOS_closesocket+0x90>)
 800d9be:	f012 fde5 	bl	802058c <lUDPLoggingPrintf>
            xResult = -1;
 800d9c2:	f04f 33ff 	mov.w	r3, #4294967295
 800d9c6:	617b      	str	r3, [r7, #20]
 800d9c8:	e001      	b.n	800d9ce <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800d9ce:	697b      	ldr	r3, [r7, #20]
}
 800d9d0:	4618      	mov	r0, r3
 800d9d2:	3718      	adds	r7, #24
 800d9d4:	46bd      	mov	sp, r7
 800d9d6:	bd80      	pop	{r7, pc}
 800d9d8:	080240e8 	.word	0x080240e8

0800d9dc <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800d9dc:	b590      	push	{r4, r7, lr}
 800d9de:	b085      	sub	sp, #20
 800d9e0:	af00      	add	r7, sp, #0
 800d9e2:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800d9ea:	2b06      	cmp	r3, #6
 800d9ec:	d129      	bne.n	800da42 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800d9ee:	687b      	ldr	r3, [r7, #4]
 800d9f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d9f4:	2b00      	cmp	r3, #0
 800d9f6:	d005      	beq.n	800da04 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800d9fe:	4618      	mov	r0, r3
 800da00:	f008 fcda 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800da0a:	4618      	mov	r0, r3
 800da0c:	f006 fee6 	bl	80147dc <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800da10:	687b      	ldr	r3, [r7, #4]
 800da12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800da16:	2b00      	cmp	r3, #0
 800da18:	d005      	beq.n	800da26 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800da1a:	687b      	ldr	r3, [r7, #4]
 800da1c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800da20:	4618      	mov	r0, r3
 800da22:	f7f7 fe63 	bl	80056ec <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800da26:	687b      	ldr	r3, [r7, #4]
 800da28:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d005      	beq.n	800da3c <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800da30:	687b      	ldr	r3, [r7, #4]
 800da32:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800da36:	4618      	mov	r0, r3
 800da38:	f7f7 fe58 	bl	80056ec <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800da3c:	6878      	ldr	r0, [r7, #4]
 800da3e:	f000 f8bd 	bl	800dbbc <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	69db      	ldr	r3, [r3, #28]
 800da46:	2b00      	cmp	r3, #0
 800da48:	d008      	beq.n	800da5c <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800da4a:	f7f5 fdf9 	bl	8003640 <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800da4e:	687b      	ldr	r3, [r7, #4]
 800da50:	330c      	adds	r3, #12
 800da52:	4618      	mov	r0, r3
 800da54:	f7f4 fdaa 	bl	80025ac <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800da58:	f7f5 fe00 	bl	800365c <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800da5c:	687b      	ldr	r3, [r7, #4]
 800da5e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800da62:	2b11      	cmp	r3, #17
 800da64:	d10f      	bne.n	800da86 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800da66:	e00a      	b.n	800da7e <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800da68:	687b      	ldr	r3, [r7, #4]
 800da6a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800da6c:	68db      	ldr	r3, [r3, #12]
 800da6e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800da70:	68fb      	ldr	r3, [r7, #12]
 800da72:	4618      	mov	r0, r3
 800da74:	f7f4 fd9a 	bl	80025ac <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800da78:	68f8      	ldr	r0, [r7, #12]
 800da7a:	f008 fc9d 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800da7e:	687b      	ldr	r3, [r7, #4]
 800da80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800da82:	2b00      	cmp	r3, #0
 800da84:	d1f0      	bne.n	800da68 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	685b      	ldr	r3, [r3, #4]
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d004      	beq.n	800da98 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800da8e:	687b      	ldr	r3, [r7, #4]
 800da90:	685b      	ldr	r3, [r3, #4]
 800da92:	4618      	mov	r0, r3
 800da94:	f7f4 fca8 	bl	80023e8 <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800da98:	687b      	ldr	r3, [r7, #4]
 800da9a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800da9e:	2b06      	cmp	r3, #6
 800daa0:	d10c      	bne.n	800dabc <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800daa2:	6878      	ldr	r0, [r7, #4]
 800daa4:	f000 f816 	bl	800dad4 <prvSocketProps>
 800daa8:	4604      	mov	r4, r0
 800daaa:	f008 fcd7 	bl	801645c <uxGetNumberOfFreeNetworkBuffers>
 800daae:	4602      	mov	r2, r0
 800dab0:	4b06      	ldr	r3, [pc, #24]	@ (800dacc <vSocketClose+0xf0>)
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	4621      	mov	r1, r4
 800dab6:	4806      	ldr	r0, [pc, #24]	@ (800dad0 <vSocketClose+0xf4>)
 800dab8:	f012 fd68 	bl	802058c <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800dabc:	6878      	ldr	r0, [r7, #4]
 800dabe:	f7f7 fe15 	bl	80056ec <vPortFree>

    return NULL;
 800dac2:	2300      	movs	r3, #0
} /* Tested */
 800dac4:	4618      	mov	r0, r3
 800dac6:	3714      	adds	r7, #20
 800dac8:	46bd      	mov	sp, r7
 800daca:	bd90      	pop	{r4, r7, pc}
 800dacc:	200012b0 	.word	0x200012b0
 800dad0:	08024108 	.word	0x08024108

0800dad4 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800dad4:	b580      	push	{r7, lr}
 800dad6:	b086      	sub	sp, #24
 800dad8:	af04      	add	r7, sp, #16
 800dada:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dadc:	687b      	ldr	r3, [r7, #4]
 800dade:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800dae2:	2b06      	cmp	r3, #6
 800dae4:	d132      	bne.n	800db4c <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	7a1b      	ldrb	r3, [r3, #8]
 800daea:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800daee:	b2db      	uxtb	r3, r3
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d002      	beq.n	800dafa <prvSocketProps+0x26>
 800daf4:	2b01      	cmp	r3, #1
 800daf6:	d014      	beq.n	800db22 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800daf8:	e050      	b.n	800db9c <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800db02:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800db04:	687b      	ldr	r3, [r7, #4]
 800db06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800db08:	687a      	ldr	r2, [r7, #4]
 800db0a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800db0e:	9202      	str	r2, [sp, #8]
 800db10:	9301      	str	r3, [sp, #4]
 800db12:	9000      	str	r0, [sp, #0]
 800db14:	460b      	mov	r3, r1
 800db16:	4a24      	ldr	r2, [pc, #144]	@ (800dba8 <prvSocketProps+0xd4>)
 800db18:	215c      	movs	r1, #92	@ 0x5c
 800db1a:	4824      	ldr	r0, [pc, #144]	@ (800dbac <prvSocketProps+0xd8>)
 800db1c:	f013 fd62 	bl	80215e4 <snprintf>
                            break;
 800db20:	e03c      	b.n	800db9c <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800db2c:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800db32:	687a      	ldr	r2, [r7, #4]
 800db34:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800db38:	9202      	str	r2, [sp, #8]
 800db3a:	9301      	str	r3, [sp, #4]
 800db3c:	9000      	str	r0, [sp, #0]
 800db3e:	460b      	mov	r3, r1
 800db40:	4a1b      	ldr	r2, [pc, #108]	@ (800dbb0 <prvSocketProps+0xdc>)
 800db42:	215c      	movs	r1, #92	@ 0x5c
 800db44:	4819      	ldr	r0, [pc, #100]	@ (800dbac <prvSocketProps+0xd8>)
 800db46:	f013 fd4d 	bl	80215e4 <snprintf>
                            break;
 800db4a:	e027      	b.n	800db9c <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800db4c:	687b      	ldr	r3, [r7, #4]
 800db4e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800db52:	2b11      	cmp	r3, #17
 800db54:	d122      	bne.n	800db9c <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	7a1b      	ldrb	r3, [r3, #8]
 800db5a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800db5e:	b2db      	uxtb	r3, r3
 800db60:	2b00      	cmp	r3, #0
 800db62:	d002      	beq.n	800db6a <prvSocketProps+0x96>
 800db64:	2b01      	cmp	r3, #1
 800db66:	d00c      	beq.n	800db82 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800db68:	e018      	b.n	800db9c <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800db6a:	687b      	ldr	r3, [r7, #4]
 800db6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800db72:	9300      	str	r3, [sp, #0]
 800db74:	4613      	mov	r3, r2
 800db76:	4a0f      	ldr	r2, [pc, #60]	@ (800dbb4 <prvSocketProps+0xe0>)
 800db78:	215c      	movs	r1, #92	@ 0x5c
 800db7a:	480c      	ldr	r0, [pc, #48]	@ (800dbac <prvSocketProps+0xd8>)
 800db7c:	f013 fd32 	bl	80215e4 <snprintf>
                        break;
 800db80:	e00c      	b.n	800db9c <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800db88:	687b      	ldr	r3, [r7, #4]
 800db8a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800db8c:	9300      	str	r3, [sp, #0]
 800db8e:	4613      	mov	r3, r2
 800db90:	4a09      	ldr	r2, [pc, #36]	@ (800dbb8 <prvSocketProps+0xe4>)
 800db92:	215c      	movs	r1, #92	@ 0x5c
 800db94:	4805      	ldr	r0, [pc, #20]	@ (800dbac <prvSocketProps+0xd8>)
 800db96:	f013 fd25 	bl	80215e4 <snprintf>
                        break;
 800db9a:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800db9c:	4b03      	ldr	r3, [pc, #12]	@ (800dbac <prvSocketProps+0xd8>)
    }
 800db9e:	4618      	mov	r0, r3
 800dba0:	3708      	adds	r7, #8
 800dba2:	46bd      	mov	sp, r7
 800dba4:	bd80      	pop	{r7, pc}
 800dba6:	bf00      	nop
 800dba8:	0802413c 	.word	0x0802413c
 800dbac:	20001240 	.word	0x20001240
 800dbb0:	0802415c 	.word	0x0802415c
 800dbb4:	0802417c 	.word	0x0802417c
 800dbb8:	0802418c 	.word	0x0802418c

0800dbbc <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800dbbc:	b580      	push	{r7, lr}
 800dbbe:	b088      	sub	sp, #32
 800dbc0:	af02      	add	r7, sp, #8
 800dbc2:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800dbc4:	4b3c      	ldr	r3, [pc, #240]	@ (800dcb8 <prvTCPSetSocketCount+0xfc>)
 800dbc6:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800dbc8:	687b      	ldr	r3, [r7, #4]
 800dbca:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800dbcc:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800dbce:	687b      	ldr	r3, [r7, #4]
 800dbd0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800dbd4:	2b01      	cmp	r3, #1
 800dbd6:	d12b      	bne.n	800dc30 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800dbd8:	693b      	ldr	r3, [r7, #16]
 800dbda:	685b      	ldr	r3, [r3, #4]
 800dbdc:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800dbde:	e022      	b.n	800dc26 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800dbe0:	697b      	ldr	r3, [r7, #20]
 800dbe2:	68db      	ldr	r3, [r3, #12]
 800dbe4:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800dbe6:	697b      	ldr	r3, [r7, #20]
 800dbe8:	685b      	ldr	r3, [r3, #4]
 800dbea:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800dbf2:	2b01      	cmp	r3, #1
 800dbf4:	d017      	beq.n	800dc26 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800dbfa:	89fa      	ldrh	r2, [r7, #14]
 800dbfc:	429a      	cmp	r2, r3
 800dbfe:	d112      	bne.n	800dc26 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800dc00:	68bb      	ldr	r3, [r7, #8]
 800dc02:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800dc06:	f003 0304 	and.w	r3, r3, #4
 800dc0a:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d107      	bne.n	800dc20 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800dc10:	68bb      	ldr	r3, [r7, #8]
 800dc12:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800dc16:	f003 0302 	and.w	r3, r3, #2
 800dc1a:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800dc1c:	2b00      	cmp	r3, #0
 800dc1e:	d002      	beq.n	800dc26 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800dc20:	68b8      	ldr	r0, [r7, #8]
 800dc22:	f7ff fedb 	bl	800d9dc <vSocketClose>
            while( pxIterator != pxEnd )
 800dc26:	697a      	ldr	r2, [r7, #20]
 800dc28:	693b      	ldr	r3, [r7, #16]
 800dc2a:	429a      	cmp	r2, r3
 800dc2c:	d1d8      	bne.n	800dbe0 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800dc2e:	e03e      	b.n	800dcae <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800dc30:	693b      	ldr	r3, [r7, #16]
 800dc32:	685b      	ldr	r3, [r3, #4]
 800dc34:	617b      	str	r3, [r7, #20]
 800dc36:	e036      	b.n	800dca6 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800dc38:	697b      	ldr	r3, [r7, #20]
 800dc3a:	68db      	ldr	r3, [r3, #12]
 800dc3c:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800dc3e:	68bb      	ldr	r3, [r7, #8]
 800dc40:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800dc44:	2b01      	cmp	r3, #1
 800dc46:	d12b      	bne.n	800dca0 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800dc48:	68bb      	ldr	r3, [r7, #8]
 800dc4a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800dc4c:	89fa      	ldrh	r2, [r7, #14]
 800dc4e:	429a      	cmp	r2, r3
 800dc50:	d126      	bne.n	800dca0 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800dc52:	68bb      	ldr	r3, [r7, #8]
 800dc54:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800dc58:	2b00      	cmp	r3, #0
 800dc5a:	d021      	beq.n	800dca0 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800dc5c:	68bb      	ldr	r3, [r7, #8]
 800dc5e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800dc62:	3b01      	subs	r3, #1
 800dc64:	b29a      	uxth	r2, r3
 800dc66:	68bb      	ldr	r3, [r7, #8]
 800dc68:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800dc6c:	68bb      	ldr	r3, [r7, #8]
 800dc6e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800dc70:	4619      	mov	r1, r3
 800dc72:	68bb      	ldr	r3, [r7, #8]
 800dc74:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800dc78:	461a      	mov	r2, r3
 800dc7a:	68bb      	ldr	r3, [r7, #8]
 800dc7c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800dc80:	4618      	mov	r0, r3
 800dc82:	68bb      	ldr	r3, [r7, #8]
 800dc84:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800dc88:	2b01      	cmp	r3, #1
 800dc8a:	d101      	bne.n	800dc90 <prvTCPSetSocketCount+0xd4>
 800dc8c:	4b0b      	ldr	r3, [pc, #44]	@ (800dcbc <prvTCPSetSocketCount+0x100>)
 800dc8e:	e000      	b.n	800dc92 <prvTCPSetSocketCount+0xd6>
 800dc90:	4b0b      	ldr	r3, [pc, #44]	@ (800dcc0 <prvTCPSetSocketCount+0x104>)
 800dc92:	9300      	str	r3, [sp, #0]
 800dc94:	4603      	mov	r3, r0
 800dc96:	480b      	ldr	r0, [pc, #44]	@ (800dcc4 <prvTCPSetSocketCount+0x108>)
 800dc98:	f012 fc78 	bl	802058c <lUDPLoggingPrintf>
                    break;
 800dc9c:	bf00      	nop
    }
 800dc9e:	e006      	b.n	800dcae <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800dca0:	697b      	ldr	r3, [r7, #20]
 800dca2:	685b      	ldr	r3, [r3, #4]
 800dca4:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800dca6:	697a      	ldr	r2, [r7, #20]
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	429a      	cmp	r2, r3
 800dcac:	d1c4      	bne.n	800dc38 <prvTCPSetSocketCount+0x7c>
    }
 800dcae:	bf00      	nop
 800dcb0:	3718      	adds	r7, #24
 800dcb2:	46bd      	mov	sp, r7
 800dcb4:	bd80      	pop	{r7, pc}
 800dcb6:	bf00      	nop
 800dcb8:	200012b8 	.word	0x200012b8
 800dcbc:	0802419c 	.word	0x0802419c
 800dcc0:	080241a0 	.word	0x080241a0
 800dcc4:	080241a4 	.word	0x080241a4

0800dcc8 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800dcc8:	b580      	push	{r7, lr}
 800dcca:	b086      	sub	sp, #24
 800dccc:	af00      	add	r7, sp, #0
 800dcce:	60f8      	str	r0, [r7, #12]
 800dcd0:	60b9      	str	r1, [r7, #8]
 800dcd2:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800dcda:	2b06      	cmp	r3, #6
 800dcdc:	d00d      	beq.n	800dcfa <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800dcde:	68bb      	ldr	r3, [r7, #8]
 800dce0:	2b04      	cmp	r3, #4
 800dce2:	d101      	bne.n	800dce8 <prvSockopt_so_buffer+0x20>
 800dce4:	4b23      	ldr	r3, [pc, #140]	@ (800dd74 <prvSockopt_so_buffer+0xac>)
 800dce6:	e000      	b.n	800dcea <prvSockopt_so_buffer+0x22>
 800dce8:	4b23      	ldr	r3, [pc, #140]	@ (800dd78 <prvSockopt_so_buffer+0xb0>)
 800dcea:	4619      	mov	r1, r3
 800dcec:	4823      	ldr	r0, [pc, #140]	@ (800dd7c <prvSockopt_so_buffer+0xb4>)
 800dcee:	f012 fc4d 	bl	802058c <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800dcf2:	f06f 0315 	mvn.w	r3, #21
 800dcf6:	617b      	str	r3, [r7, #20]
 800dcf8:	e036      	b.n	800dd68 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800dcfa:	68bb      	ldr	r3, [r7, #8]
 800dcfc:	2b04      	cmp	r3, #4
 800dcfe:	d104      	bne.n	800dd0a <prvSockopt_so_buffer+0x42>
 800dd00:	68fb      	ldr	r3, [r7, #12]
 800dd02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800dd06:	2b00      	cmp	r3, #0
 800dd08:	d107      	bne.n	800dd1a <prvSockopt_so_buffer+0x52>
 800dd0a:	68bb      	ldr	r3, [r7, #8]
 800dd0c:	2b05      	cmp	r3, #5
 800dd0e:	d112      	bne.n	800dd36 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800dd10:	68fb      	ldr	r3, [r7, #12]
 800dd12:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d00d      	beq.n	800dd36 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800dd1a:	68bb      	ldr	r3, [r7, #8]
 800dd1c:	2b04      	cmp	r3, #4
 800dd1e:	d101      	bne.n	800dd24 <prvSockopt_so_buffer+0x5c>
 800dd20:	4b14      	ldr	r3, [pc, #80]	@ (800dd74 <prvSockopt_so_buffer+0xac>)
 800dd22:	e000      	b.n	800dd26 <prvSockopt_so_buffer+0x5e>
 800dd24:	4b14      	ldr	r3, [pc, #80]	@ (800dd78 <prvSockopt_so_buffer+0xb0>)
 800dd26:	4619      	mov	r1, r3
 800dd28:	4815      	ldr	r0, [pc, #84]	@ (800dd80 <prvSockopt_so_buffer+0xb8>)
 800dd2a:	f012 fc2f 	bl	802058c <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800dd2e:	f06f 0315 	mvn.w	r3, #21
 800dd32:	617b      	str	r3, [r7, #20]
 800dd34:	e018      	b.n	800dd68 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800dd3c:	68bb      	ldr	r3, [r7, #8]
 800dd3e:	2b04      	cmp	r3, #4
 800dd40:	d10c      	bne.n	800dd5c <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800dd48:	4619      	mov	r1, r3
 800dd4a:	6938      	ldr	r0, [r7, #16]
 800dd4c:	f7fb fe92 	bl	8009a74 <FreeRTOS_round_up>
 800dd50:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	693a      	ldr	r2, [r7, #16]
 800dd56:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800dd5a:	e003      	b.n	800dd64 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800dd5c:	68fb      	ldr	r3, [r7, #12]
 800dd5e:	693a      	ldr	r2, [r7, #16]
 800dd60:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800dd64:	2300      	movs	r3, #0
 800dd66:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800dd68:	697b      	ldr	r3, [r7, #20]
    }
 800dd6a:	4618      	mov	r0, r3
 800dd6c:	3718      	adds	r7, #24
 800dd6e:	46bd      	mov	sp, r7
 800dd70:	bd80      	pop	{r7, pc}
 800dd72:	bf00      	nop
 800dd74:	080241d0 	.word	0x080241d0
 800dd78:	080241d4 	.word	0x080241d4
 800dd7c:	080241d8 	.word	0x080241d8
 800dd80:	080241fc 	.word	0x080241fc

0800dd84 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800dd84:	b480      	push	{r7}
 800dd86:	b087      	sub	sp, #28
 800dd88:	af00      	add	r7, sp, #0
 800dd8a:	60f8      	str	r0, [r7, #12]
 800dd8c:	60b9      	str	r1, [r7, #8]
 800dd8e:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800dd90:	2300      	movs	r3, #0
 800dd92:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800dd94:	68bb      	ldr	r3, [r7, #8]
 800dd96:	2b09      	cmp	r3, #9
 800dd98:	d002      	beq.n	800dda0 <prvSetOptionCallback+0x1c>
 800dd9a:	68bb      	ldr	r3, [r7, #8]
 800dd9c:	2b0a      	cmp	r3, #10
 800dd9e:	d102      	bne.n	800dda6 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800dda0:	2311      	movs	r3, #17
 800dda2:	613b      	str	r3, [r7, #16]
 800dda4:	e001      	b.n	800ddaa <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800dda6:	2306      	movs	r3, #6
 800dda8:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800ddaa:	68fb      	ldr	r3, [r7, #12]
 800ddac:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800ddb0:	693b      	ldr	r3, [r7, #16]
 800ddb2:	b2db      	uxtb	r3, r3
 800ddb4:	429a      	cmp	r2, r3
 800ddb6:	d002      	beq.n	800ddbe <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800ddb8:	f06f 0315 	mvn.w	r3, #21
 800ddbc:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800ddbe:	697b      	ldr	r3, [r7, #20]
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d131      	bne.n	800de28 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800ddc4:	68bb      	ldr	r3, [r7, #8]
 800ddc6:	3b06      	subs	r3, #6
 800ddc8:	2b04      	cmp	r3, #4
 800ddca:	d829      	bhi.n	800de20 <prvSetOptionCallback+0x9c>
 800ddcc:	a201      	add	r2, pc, #4	@ (adr r2, 800ddd4 <prvSetOptionCallback+0x50>)
 800ddce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ddd2:	bf00      	nop
 800ddd4:	0800dde9 	.word	0x0800dde9
 800ddd8:	0800ddf5 	.word	0x0800ddf5
 800dddc:	0800de01 	.word	0x0800de01
 800dde0:	0800de0d 	.word	0x0800de0d
 800dde4:	0800de17 	.word	0x0800de17
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800dde8:	687b      	ldr	r3, [r7, #4]
 800ddea:	681a      	ldr	r2, [r3, #0]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800ddf2:	e019      	b.n	800de28 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	685a      	ldr	r2, [r3, #4]
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800ddfe:	e013      	b.n	800de28 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	689a      	ldr	r2, [r3, #8]
 800de04:	68fb      	ldr	r3, [r7, #12]
 800de06:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800de0a:	e00d      	b.n	800de28 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	68da      	ldr	r2, [r3, #12]
 800de10:	68fb      	ldr	r3, [r7, #12]
 800de12:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800de14:	e008      	b.n	800de28 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	691a      	ldr	r2, [r3, #16]
 800de1a:	68fb      	ldr	r3, [r7, #12]
 800de1c:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800de1e:	e003      	b.n	800de28 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800de20:	f06f 0315 	mvn.w	r3, #21
 800de24:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800de26:	bf00      	nop
            }
        }

        return xReturn;
 800de28:	697b      	ldr	r3, [r7, #20]
    }
 800de2a:	4618      	mov	r0, r3
 800de2c:	371c      	adds	r7, #28
 800de2e:	46bd      	mov	sp, r7
 800de30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de34:	4770      	bx	lr
 800de36:	bf00      	nop

0800de38 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800de38:	b580      	push	{r7, lr}
 800de3a:	b086      	sub	sp, #24
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]
 800de40:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800de42:	f06f 0315 	mvn.w	r3, #21
 800de46:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800de48:	687b      	ldr	r3, [r7, #4]
 800de4a:	3354      	adds	r3, #84	@ 0x54
 800de4c:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800de4e:	687b      	ldr	r3, [r7, #4]
 800de50:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800de54:	2b06      	cmp	r3, #6
 800de56:	d003      	beq.n	800de60 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800de58:	4825      	ldr	r0, [pc, #148]	@ (800def0 <prvSetOptionTCPWindows+0xb8>)
 800de5a:	f012 fb97 	bl	802058c <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800de5e:	e042      	b.n	800dee6 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800de60:	683b      	ldr	r3, [r7, #0]
 800de62:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	461a      	mov	r2, r3
 800de68:	2104      	movs	r1, #4
 800de6a:	6878      	ldr	r0, [r7, #4]
 800de6c:	f7ff ff2c 	bl	800dcc8 <prvSockopt_so_buffer>
 800de70:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800de72:	697b      	ldr	r3, [r7, #20]
 800de74:	2b00      	cmp	r3, #0
 800de76:	d133      	bne.n	800dee0 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	3308      	adds	r3, #8
 800de7c:	461a      	mov	r2, r3
 800de7e:	2105      	movs	r1, #5
 800de80:	6878      	ldr	r0, [r7, #4]
 800de82:	f7ff ff21 	bl	800dcc8 <prvSockopt_so_buffer>
 800de86:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800de88:	697b      	ldr	r3, [r7, #20]
 800de8a:	2b00      	cmp	r3, #0
 800de8c:	d12a      	bne.n	800dee4 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800de8e:	68fb      	ldr	r3, [r7, #12]
 800de90:	68db      	ldr	r3, [r3, #12]
 800de92:	461a      	mov	r2, r3
 800de94:	693b      	ldr	r3, [r7, #16]
 800de96:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800de9a:	68fb      	ldr	r3, [r7, #12]
 800de9c:	685b      	ldr	r3, [r3, #4]
 800de9e:	461a      	mov	r2, r3
 800dea0:	693b      	ldr	r3, [r7, #16]
 800dea2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800dea6:	693b      	ldr	r3, [r7, #16]
 800dea8:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800deac:	f003 0301 	and.w	r3, r3, #1
 800deb0:	b2db      	uxtb	r3, r3
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d017      	beq.n	800dee6 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800deb6:	693b      	ldr	r3, [r7, #16]
 800deb8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800debc:	693a      	ldr	r2, [r7, #16]
 800debe:	8bd2      	ldrh	r2, [r2, #30]
 800dec0:	fb03 f202 	mul.w	r2, r3, r2
 800dec4:	693b      	ldr	r3, [r7, #16]
 800dec6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800deca:	693b      	ldr	r3, [r7, #16]
 800decc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ded0:	693a      	ldr	r2, [r7, #16]
 800ded2:	8bd2      	ldrh	r2, [r2, #30]
 800ded4:	fb03 f202 	mul.w	r2, r3, r2
 800ded8:	693b      	ldr	r3, [r7, #16]
 800deda:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800dede:	e002      	b.n	800dee6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800dee0:	bf00      	nop
 800dee2:	e000      	b.n	800dee6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800dee4:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800dee6:	697b      	ldr	r3, [r7, #20]
    }
 800dee8:	4618      	mov	r0, r3
 800deea:	3718      	adds	r7, #24
 800deec:	46bd      	mov	sp, r7
 800deee:	bd80      	pop	{r7, pc}
 800def0:	08024224 	.word	0x08024224

0800def4 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800def4:	b580      	push	{r7, lr}
 800def6:	b084      	sub	sp, #16
 800def8:	af00      	add	r7, sp, #0
 800defa:	6078      	str	r0, [r7, #4]
 800defc:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800defe:	f06f 0315 	mvn.w	r3, #21
 800df02:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800df04:	683b      	ldr	r3, [r7, #0]
 800df06:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800df08:	687b      	ldr	r3, [r7, #4]
 800df0a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800df0e:	2b06      	cmp	r3, #6
 800df10:	d003      	beq.n	800df1a <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800df12:	4813      	ldr	r0, [pc, #76]	@ (800df60 <prvSetOptionLowHighWater+0x6c>)
 800df14:	f012 fb3a 	bl	802058c <lUDPLoggingPrintf>
 800df18:	e01c      	b.n	800df54 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800df1a:	68bb      	ldr	r3, [r7, #8]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	68bb      	ldr	r3, [r7, #8]
 800df20:	685b      	ldr	r3, [r3, #4]
 800df22:	429a      	cmp	r2, r3
 800df24:	d206      	bcs.n	800df34 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800df26:	68bb      	ldr	r3, [r7, #8]
 800df28:	685a      	ldr	r2, [r3, #4]
 800df2a:	687b      	ldr	r3, [r7, #4]
 800df2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800df30:	429a      	cmp	r2, r3
 800df32:	d903      	bls.n	800df3c <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800df34:	480b      	ldr	r0, [pc, #44]	@ (800df64 <prvSetOptionLowHighWater+0x70>)
 800df36:	f012 fb29 	bl	802058c <lUDPLoggingPrintf>
 800df3a:	e00b      	b.n	800df54 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800df3c:	68bb      	ldr	r3, [r7, #8]
 800df3e:	681a      	ldr	r2, [r3, #0]
 800df40:	687b      	ldr	r3, [r7, #4]
 800df42:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800df46:	68bb      	ldr	r3, [r7, #8]
 800df48:	685a      	ldr	r2, [r3, #4]
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800df50:	2300      	movs	r3, #0
 800df52:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800df54:	68fb      	ldr	r3, [r7, #12]
    }
 800df56:	4618      	mov	r0, r3
 800df58:	3710      	adds	r7, #16
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bd80      	pop	{r7, pc}
 800df5e:	bf00      	nop
 800df60:	08024248 	.word	0x08024248
 800df64:	0802427c 	.word	0x0802427c

0800df68 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800df68:	b580      	push	{r7, lr}
 800df6a:	b084      	sub	sp, #16
 800df6c:	af00      	add	r7, sp, #0
 800df6e:	6078      	str	r0, [r7, #4]
 800df70:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800df72:	f06f 0315 	mvn.w	r3, #21
 800df76:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800df7e:	2b06      	cmp	r3, #6
 800df80:	d126      	bne.n	800dfd0 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800df82:	683b      	ldr	r3, [r7, #0]
 800df84:	681b      	ldr	r3, [r3, #0]
 800df86:	2b00      	cmp	r3, #0
 800df88:	d007      	beq.n	800df9a <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800df8a:	687a      	ldr	r2, [r7, #4]
 800df8c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800df90:	f043 0302 	orr.w	r3, r3, #2
 800df94:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800df98:	e006      	b.n	800dfa8 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800df9a:	687a      	ldr	r2, [r7, #4]
 800df9c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800dfa0:	f36f 0341 	bfc	r3, #1, #1
 800dfa4:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800dfa8:	687b      	ldr	r3, [r7, #4]
 800dfaa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800dfae:	2b04      	cmp	r3, #4
 800dfb0:	d90c      	bls.n	800dfcc <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800dfb2:	6878      	ldr	r0, [r7, #4]
 800dfb4:	f001 faba 	bl	800f52c <FreeRTOS_tx_size>
 800dfb8:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d006      	beq.n	800dfcc <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800dfbe:	687b      	ldr	r3, [r7, #4]
 800dfc0:	2201      	movs	r2, #1
 800dfc2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800dfc6:	2006      	movs	r0, #6
 800dfc8:	f7fa fc1c 	bl	8008804 <xSendEventToIPTask>
            }

            xReturn = 0;
 800dfcc:	2300      	movs	r3, #0
 800dfce:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800dfd0:	68fb      	ldr	r3, [r7, #12]
    }
 800dfd2:	4618      	mov	r0, r3
 800dfd4:	3710      	adds	r7, #16
 800dfd6:	46bd      	mov	sp, r7
 800dfd8:	bd80      	pop	{r7, pc}

0800dfda <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800dfda:	b580      	push	{r7, lr}
 800dfdc:	b084      	sub	sp, #16
 800dfde:	af00      	add	r7, sp, #0
 800dfe0:	6078      	str	r0, [r7, #4]
 800dfe2:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800dfe4:	f06f 0315 	mvn.w	r3, #21
 800dfe8:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800dff0:	2b06      	cmp	r3, #6
 800dff2:	d122      	bne.n	800e03a <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800dff4:	683b      	ldr	r3, [r7, #0]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	2b00      	cmp	r3, #0
 800dffa:	d007      	beq.n	800e00c <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800dffc:	687a      	ldr	r2, [r7, #4]
 800dffe:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800e002:	f043 0304 	orr.w	r3, r3, #4
 800e006:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800e00a:	e006      	b.n	800e01a <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800e00c:	687a      	ldr	r2, [r7, #4]
 800e00e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800e012:	f36f 0382 	bfc	r3, #2, #1
 800e016:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e01a:	687a      	ldr	r2, [r7, #4]
 800e01c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800e020:	f043 0301 	orr.w	r3, r3, #1
 800e024:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800e028:	687b      	ldr	r3, [r7, #4]
 800e02a:	2201      	movs	r2, #1
 800e02c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800e030:	2006      	movs	r0, #6
 800e032:	f7fa fbe7 	bl	8008804 <xSendEventToIPTask>
            xReturn = 0;
 800e036:	2300      	movs	r3, #0
 800e038:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e03a:	68fb      	ldr	r3, [r7, #12]
    }
 800e03c:	4618      	mov	r0, r3
 800e03e:	3710      	adds	r7, #16
 800e040:	46bd      	mov	sp, r7
 800e042:	bd80      	pop	{r7, pc}

0800e044 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800e044:	b480      	push	{r7}
 800e046:	b087      	sub	sp, #28
 800e048:	af00      	add	r7, sp, #0
 800e04a:	60f8      	str	r0, [r7, #12]
 800e04c:	60b9      	str	r1, [r7, #8]
 800e04e:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800e050:	68bb      	ldr	r3, [r7, #8]
 800e052:	681b      	ldr	r3, [r3, #0]
 800e054:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800e056:	687b      	ldr	r3, [r7, #4]
 800e058:	2b01      	cmp	r3, #1
 800e05a:	d110      	bne.n	800e07e <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e062:	2b11      	cmp	r3, #17
 800e064:	d107      	bne.n	800e076 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800e066:	697b      	ldr	r3, [r7, #20]
 800e068:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e06c:	4293      	cmp	r3, r2
 800e06e:	d902      	bls.n	800e076 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800e070:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e074:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800e076:	68fb      	ldr	r3, [r7, #12]
 800e078:	697a      	ldr	r2, [r7, #20]
 800e07a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800e07c:	e002      	b.n	800e084 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800e07e:	68fb      	ldr	r3, [r7, #12]
 800e080:	697a      	ldr	r2, [r7, #20]
 800e082:	621a      	str	r2, [r3, #32]
}
 800e084:	bf00      	nop
 800e086:	371c      	adds	r7, #28
 800e088:	46bd      	mov	sp, r7
 800e08a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08e:	4770      	bx	lr

0800e090 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800e090:	b480      	push	{r7}
 800e092:	b085      	sub	sp, #20
 800e094:	af00      	add	r7, sp, #0
 800e096:	6078      	str	r0, [r7, #4]
 800e098:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e09a:	f06f 0315 	mvn.w	r3, #21
 800e09e:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e0a6:	2b06      	cmp	r3, #6
 800e0a8:	d114      	bne.n	800e0d4 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e0aa:	683b      	ldr	r3, [r7, #0]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2b00      	cmp	r3, #0
 800e0b0:	d007      	beq.n	800e0c2 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800e0b2:	687a      	ldr	r2, [r7, #4]
 800e0b4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e0b8:	f043 0308 	orr.w	r3, r3, #8
 800e0bc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800e0c0:	e006      	b.n	800e0d0 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800e0c2:	687a      	ldr	r2, [r7, #4]
 800e0c4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e0c8:	f36f 03c3 	bfc	r3, #3, #1
 800e0cc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800e0d0:	2300      	movs	r3, #0
 800e0d2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e0d4:	68fb      	ldr	r3, [r7, #12]
    }
 800e0d6:	4618      	mov	r0, r3
 800e0d8:	3714      	adds	r7, #20
 800e0da:	46bd      	mov	sp, r7
 800e0dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0e0:	4770      	bx	lr

0800e0e2 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800e0e2:	b480      	push	{r7}
 800e0e4:	b085      	sub	sp, #20
 800e0e6:	af00      	add	r7, sp, #0
 800e0e8:	6078      	str	r0, [r7, #4]
 800e0ea:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e0ec:	f06f 0315 	mvn.w	r3, #21
 800e0f0:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e0f2:	687b      	ldr	r3, [r7, #4]
 800e0f4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e0f8:	2b06      	cmp	r3, #6
 800e0fa:	d114      	bne.n	800e126 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e0fc:	683b      	ldr	r3, [r7, #0]
 800e0fe:	681b      	ldr	r3, [r3, #0]
 800e100:	2b00      	cmp	r3, #0
 800e102:	d007      	beq.n	800e114 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800e104:	687a      	ldr	r2, [r7, #4]
 800e106:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e10a:	f043 0310 	orr.w	r3, r3, #16
 800e10e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800e112:	e006      	b.n	800e122 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800e114:	687a      	ldr	r2, [r7, #4]
 800e116:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e11a:	f36f 1304 	bfc	r3, #4, #1
 800e11e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800e122:	2300      	movs	r3, #0
 800e124:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e126:	68fb      	ldr	r3, [r7, #12]
    }
 800e128:	4618      	mov	r0, r3
 800e12a:	3714      	adds	r7, #20
 800e12c:	46bd      	mov	sp, r7
 800e12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e132:	4770      	bx	lr

0800e134 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b086      	sub	sp, #24
 800e138:	af00      	add	r7, sp, #0
 800e13a:	60f8      	str	r0, [r7, #12]
 800e13c:	60b9      	str	r1, [r7, #8]
 800e13e:	607a      	str	r2, [r7, #4]
 800e140:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e142:	f06f 0315 	mvn.w	r3, #21
 800e146:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e148:	68fb      	ldr	r3, [r7, #12]
 800e14a:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800e14c:	6938      	ldr	r0, [r7, #16]
 800e14e:	f001 fa59 	bl	800f604 <xSocketValid>
 800e152:	4603      	mov	r3, r0
 800e154:	2b01      	cmp	r3, #1
 800e156:	f040 8093 	bne.w	800e280 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	2b12      	cmp	r3, #18
 800e15e:	f200 808b 	bhi.w	800e278 <FreeRTOS_setsockopt+0x144>
 800e162:	a201      	add	r2, pc, #4	@ (adr r2, 800e168 <FreeRTOS_setsockopt+0x34>)
 800e164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e168:	0800e1b5 	.word	0x0800e1b5
 800e16c:	0800e1c5 	.word	0x0800e1c5
 800e170:	0800e1d5 	.word	0x0800e1d5
 800e174:	0800e215 	.word	0x0800e215
 800e178:	0800e22f 	.word	0x0800e22f
 800e17c:	0800e22f 	.word	0x0800e22f
 800e180:	0800e207 	.word	0x0800e207
 800e184:	0800e207 	.word	0x0800e207
 800e188:	0800e207 	.word	0x0800e207
 800e18c:	0800e207 	.word	0x0800e207
 800e190:	0800e207 	.word	0x0800e207
 800e194:	0800e249 	.word	0x0800e249
 800e198:	0800e255 	.word	0x0800e255
 800e19c:	0800e23d 	.word	0x0800e23d
 800e1a0:	0800e261 	.word	0x0800e261
 800e1a4:	0800e26d 	.word	0x0800e26d
 800e1a8:	0800e279 	.word	0x0800e279
 800e1ac:	0800e279 	.word	0x0800e279
 800e1b0:	0800e223 	.word	0x0800e223
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	6839      	ldr	r1, [r7, #0]
 800e1b8:	6938      	ldr	r0, [r7, #16]
 800e1ba:	f7ff ff43 	bl	800e044 <prvSetOptionTimeout>
                xReturn = 0;
 800e1be:	2300      	movs	r3, #0
 800e1c0:	617b      	str	r3, [r7, #20]
                break;
 800e1c2:	e060      	b.n	800e286 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800e1c4:	2201      	movs	r2, #1
 800e1c6:	6839      	ldr	r1, [r7, #0]
 800e1c8:	6938      	ldr	r0, [r7, #16]
 800e1ca:	f7ff ff3b 	bl	800e044 <prvSetOptionTimeout>
                xReturn = 0;
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	617b      	str	r3, [r7, #20]
                break;
 800e1d2:	e058      	b.n	800e286 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800e1d4:	683b      	ldr	r3, [r7, #0]
 800e1d6:	2b00      	cmp	r3, #0
 800e1d8:	d109      	bne.n	800e1ee <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800e1da:	693b      	ldr	r3, [r7, #16]
 800e1dc:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e1e0:	f023 0302 	bic.w	r3, r3, #2
 800e1e4:	b2da      	uxtb	r2, r3
 800e1e6:	693b      	ldr	r3, [r7, #16]
 800e1e8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800e1ec:	e008      	b.n	800e200 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800e1ee:	693b      	ldr	r3, [r7, #16]
 800e1f0:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e1f4:	f043 0302 	orr.w	r3, r3, #2
 800e1f8:	b2da      	uxtb	r2, r3
 800e1fa:	693b      	ldr	r3, [r7, #16]
 800e1fc:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800e200:	2300      	movs	r3, #0
 800e202:	617b      	str	r3, [r7, #20]
                break;
 800e204:	e03f      	b.n	800e286 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800e206:	683a      	ldr	r2, [r7, #0]
 800e208:	6879      	ldr	r1, [r7, #4]
 800e20a:	6938      	ldr	r0, [r7, #16]
 800e20c:	f7ff fdba 	bl	800dd84 <prvSetOptionCallback>
 800e210:	6178      	str	r0, [r7, #20]
                        break;
 800e212:	e038      	b.n	800e286 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800e214:	683b      	ldr	r3, [r7, #0]
 800e216:	681a      	ldr	r2, [r3, #0]
 800e218:	693b      	ldr	r3, [r7, #16]
 800e21a:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800e21c:	2300      	movs	r3, #0
 800e21e:	617b      	str	r3, [r7, #20]
                        break;
 800e220:	e031      	b.n	800e286 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800e222:	6839      	ldr	r1, [r7, #0]
 800e224:	6938      	ldr	r0, [r7, #16]
 800e226:	f7ff fe65 	bl	800def4 <prvSetOptionLowHighWater>
 800e22a:	6178      	str	r0, [r7, #20]
                        break;
 800e22c:	e02b      	b.n	800e286 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800e22e:	683a      	ldr	r2, [r7, #0]
 800e230:	6879      	ldr	r1, [r7, #4]
 800e232:	6938      	ldr	r0, [r7, #16]
 800e234:	f7ff fd48 	bl	800dcc8 <prvSockopt_so_buffer>
 800e238:	6178      	str	r0, [r7, #20]
                        break;
 800e23a:	e024      	b.n	800e286 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800e23c:	6839      	ldr	r1, [r7, #0]
 800e23e:	6938      	ldr	r0, [r7, #16]
 800e240:	f7ff fdfa 	bl	800de38 <prvSetOptionTCPWindows>
 800e244:	6178      	str	r0, [r7, #20]
                        break;
 800e246:	e01e      	b.n	800e286 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800e248:	6839      	ldr	r1, [r7, #0]
 800e24a:	6938      	ldr	r0, [r7, #16]
 800e24c:	f7ff ff20 	bl	800e090 <prvSetOptionReuseListenSocket>
 800e250:	6178      	str	r0, [r7, #20]
                        break;
 800e252:	e018      	b.n	800e286 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800e254:	6839      	ldr	r1, [r7, #0]
 800e256:	6938      	ldr	r0, [r7, #16]
 800e258:	f7ff ff43 	bl	800e0e2 <prvSetOptionCloseAfterSend>
 800e25c:	6178      	str	r0, [r7, #20]
                        break;
 800e25e:	e012      	b.n	800e286 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800e260:	6839      	ldr	r1, [r7, #0]
 800e262:	6938      	ldr	r0, [r7, #16]
 800e264:	f7ff fe80 	bl	800df68 <prvSetOptionSetFullSize>
 800e268:	6178      	str	r0, [r7, #20]
                        break;
 800e26a:	e00c      	b.n	800e286 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800e26c:	6839      	ldr	r1, [r7, #0]
 800e26e:	6938      	ldr	r0, [r7, #16]
 800e270:	f7ff feb3 	bl	800dfda <prvSetOptionStopRX>
 800e274:	6178      	str	r0, [r7, #20]
                        break;
 800e276:	e006      	b.n	800e286 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800e278:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800e27c:	617b      	str	r3, [r7, #20]
                break;
 800e27e:	e002      	b.n	800e286 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e280:	f06f 0315 	mvn.w	r3, #21
 800e284:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e286:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800e288:	4618      	mov	r0, r3
 800e28a:	3718      	adds	r7, #24
 800e28c:	46bd      	mov	sp, r7
 800e28e:	bd80      	pop	{r7, pc}

0800e290 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800e290:	b580      	push	{r7, lr}
 800e292:	b086      	sub	sp, #24
 800e294:	af00      	add	r7, sp, #0
 800e296:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800e298:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800e29c:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800e29e:	89fb      	ldrh	r3, [r7, #14]
 800e2a0:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800e2a6:	2300      	movs	r3, #0
 800e2a8:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800e2aa:	687b      	ldr	r3, [r7, #4]
 800e2ac:	2b06      	cmp	r3, #6
 800e2ae:	d102      	bne.n	800e2b6 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800e2b0:	4b21      	ldr	r3, [pc, #132]	@ (800e338 <prvGetPrivatePortNumber+0xa8>)
 800e2b2:	613b      	str	r3, [r7, #16]
 800e2b4:	e001      	b.n	800e2ba <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800e2b6:	4b21      	ldr	r3, [pc, #132]	@ (800e33c <prvGetPrivatePortNumber+0xac>)
 800e2b8:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800e2ba:	f107 0308 	add.w	r3, r7, #8
 800e2be:	4618      	mov	r0, r3
 800e2c0:	f7f3 f800 	bl	80012c4 <xApplicationGetRandomNumber>
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	2b00      	cmp	r3, #0
 800e2c8:	d030      	beq.n	800e32c <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800e2ce:	89fa      	ldrh	r2, [r7, #14]
 800e2d0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e2d4:	fb01 f202 	mul.w	r2, r1, r2
 800e2d8:	1a9b      	subs	r3, r3, r2
 800e2da:	b29b      	uxth	r3, r3
 800e2dc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e2e0:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800e2e2:	8abb      	ldrh	r3, [r7, #20]
 800e2e4:	021b      	lsls	r3, r3, #8
 800e2e6:	b21a      	sxth	r2, r3
 800e2e8:	8abb      	ldrh	r3, [r7, #20]
 800e2ea:	0a1b      	lsrs	r3, r3, #8
 800e2ec:	b29b      	uxth	r3, r3
 800e2ee:	b21b      	sxth	r3, r3
 800e2f0:	4313      	orrs	r3, r2
 800e2f2:	b21b      	sxth	r3, r3
 800e2f4:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800e2f6:	4619      	mov	r1, r3
 800e2f8:	6938      	ldr	r0, [r7, #16]
 800e2fa:	f000 f821 	bl	800e340 <pxListFindListItemWithValue>
 800e2fe:	4603      	mov	r3, r0
 800e300:	2b00      	cmp	r3, #0
 800e302:	d10a      	bne.n	800e31a <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800e304:	8abb      	ldrh	r3, [r7, #20]
 800e306:	021b      	lsls	r3, r3, #8
 800e308:	b21a      	sxth	r2, r3
 800e30a:	8abb      	ldrh	r3, [r7, #20]
 800e30c:	0a1b      	lsrs	r3, r3, #8
 800e30e:	b29b      	uxth	r3, r3
 800e310:	b21b      	sxth	r3, r3
 800e312:	4313      	orrs	r3, r2
 800e314:	b21b      	sxth	r3, r3
 800e316:	82bb      	strh	r3, [r7, #20]
            break;
 800e318:	e009      	b.n	800e32e <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800e31a:	2300      	movs	r3, #0
 800e31c:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800e31e:	8afb      	ldrh	r3, [r7, #22]
 800e320:	3b01      	subs	r3, #1
 800e322:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800e324:	8afb      	ldrh	r3, [r7, #22]
 800e326:	2b00      	cmp	r3, #0
 800e328:	d1c7      	bne.n	800e2ba <prvGetPrivatePortNumber+0x2a>
 800e32a:	e000      	b.n	800e32e <prvGetPrivatePortNumber+0x9e>
            break;
 800e32c:	bf00      	nop

    return usResult;
 800e32e:	8abb      	ldrh	r3, [r7, #20]
}
 800e330:	4618      	mov	r0, r3
 800e332:	3718      	adds	r7, #24
 800e334:	46bd      	mov	sp, r7
 800e336:	bd80      	pop	{r7, pc}
 800e338:	200012b0 	.word	0x200012b0
 800e33c:	2000129c 	.word	0x2000129c

0800e340 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800e340:	b580      	push	{r7, lr}
 800e342:	b086      	sub	sp, #24
 800e344:	af00      	add	r7, sp, #0
 800e346:	6078      	str	r0, [r7, #4]
 800e348:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800e34a:	2300      	movs	r3, #0
 800e34c:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800e34e:	f7fa fe0b 	bl	8008f68 <xIPIsNetworkTaskReady>
 800e352:	4603      	mov	r3, r0
 800e354:	2b00      	cmp	r3, #0
 800e356:	d018      	beq.n	800e38a <pxListFindListItemWithValue+0x4a>
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d015      	beq.n	800e38a <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800e35e:	687b      	ldr	r3, [r7, #4]
 800e360:	3308      	adds	r3, #8
 800e362:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800e364:	68fb      	ldr	r3, [r7, #12]
 800e366:	685b      	ldr	r3, [r3, #4]
 800e368:	613b      	str	r3, [r7, #16]
 800e36a:	e00a      	b.n	800e382 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800e36c:	693b      	ldr	r3, [r7, #16]
 800e36e:	681b      	ldr	r3, [r3, #0]
 800e370:	683a      	ldr	r2, [r7, #0]
 800e372:	429a      	cmp	r2, r3
 800e374:	d102      	bne.n	800e37c <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800e376:	693b      	ldr	r3, [r7, #16]
 800e378:	617b      	str	r3, [r7, #20]
                break;
 800e37a:	e006      	b.n	800e38a <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800e37c:	693b      	ldr	r3, [r7, #16]
 800e37e:	685b      	ldr	r3, [r3, #4]
 800e380:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800e382:	693a      	ldr	r2, [r7, #16]
 800e384:	68fb      	ldr	r3, [r7, #12]
 800e386:	429a      	cmp	r2, r3
 800e388:	d1f0      	bne.n	800e36c <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800e38a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800e38c:	4618      	mov	r0, r3
 800e38e:	3718      	adds	r7, #24
 800e390:	46bd      	mov	sp, r7
 800e392:	bd80      	pop	{r7, pc}

0800e394 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800e394:	b580      	push	{r7, lr}
 800e396:	b084      	sub	sp, #16
 800e398:	af00      	add	r7, sp, #0
 800e39a:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800e39c:	2300      	movs	r3, #0
 800e39e:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800e3a0:	6879      	ldr	r1, [r7, #4]
 800e3a2:	480b      	ldr	r0, [pc, #44]	@ (800e3d0 <pxUDPSocketLookup+0x3c>)
 800e3a4:	f7ff ffcc 	bl	800e340 <pxListFindListItemWithValue>
 800e3a8:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800e3aa:	68bb      	ldr	r3, [r7, #8]
 800e3ac:	2b00      	cmp	r3, #0
 800e3ae:	d00a      	beq.n	800e3c6 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800e3b0:	68bb      	ldr	r3, [r7, #8]
 800e3b2:	68db      	ldr	r3, [r3, #12]
 800e3b4:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800e3b6:	68fb      	ldr	r3, [r7, #12]
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	d104      	bne.n	800e3c6 <pxUDPSocketLookup+0x32>
 800e3bc:	f640 4111 	movw	r1, #3089	@ 0xc11
 800e3c0:	4804      	ldr	r0, [pc, #16]	@ (800e3d4 <pxUDPSocketLookup+0x40>)
 800e3c2:	f7f2 feb5 	bl	8001130 <vAssertCalled>
    }

    return pxSocket;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
}
 800e3c8:	4618      	mov	r0, r3
 800e3ca:	3710      	adds	r7, #16
 800e3cc:	46bd      	mov	sp, r7
 800e3ce:	bd80      	pop	{r7, pc}
 800e3d0:	2000129c 	.word	0x2000129c
 800e3d4:	08023f68 	.word	0x08023f68

0800e3d8 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800e3d8:	b480      	push	{r7}
 800e3da:	b08b      	sub	sp, #44	@ 0x2c
 800e3dc:	af00      	add	r7, sp, #0
 800e3de:	6078      	str	r0, [r7, #4]
 800e3e0:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800e3e2:	2300      	movs	r3, #0
 800e3e4:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800e3e6:	1d3b      	adds	r3, r7, #4
 800e3e8:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800e3ea:	683b      	ldr	r3, [r7, #0]
 800e3ec:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800e3ee:	2300      	movs	r3, #0
 800e3f0:	627b      	str	r3, [r7, #36]	@ 0x24
 800e3f2:	e062      	b.n	800e4ba <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800e3f4:	697a      	ldr	r2, [r7, #20]
 800e3f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e3f8:	4413      	add	r3, r2
 800e3fa:	781b      	ldrb	r3, [r3, #0]
 800e3fc:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800e3fe:	2302      	movs	r3, #2
 800e400:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800e402:	7ffa      	ldrb	r2, [r7, #31]
 800e404:	4b32      	ldr	r3, [pc, #200]	@ (800e4d0 <FreeRTOS_inet_ntoa+0xf8>)
 800e406:	fba3 1302 	umull	r1, r3, r3, r2
 800e40a:	08d9      	lsrs	r1, r3, #3
 800e40c:	460b      	mov	r3, r1
 800e40e:	009b      	lsls	r3, r3, #2
 800e410:	440b      	add	r3, r1
 800e412:	005b      	lsls	r3, r3, #1
 800e414:	1ad3      	subs	r3, r2, r3
 800e416:	b2d9      	uxtb	r1, r3
 800e418:	f107 020c 	add.w	r2, r7, #12
 800e41c:	69bb      	ldr	r3, [r7, #24]
 800e41e:	4413      	add	r3, r2
 800e420:	460a      	mov	r2, r1
 800e422:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800e424:	7ffb      	ldrb	r3, [r7, #31]
 800e426:	4a2a      	ldr	r2, [pc, #168]	@ (800e4d0 <FreeRTOS_inet_ntoa+0xf8>)
 800e428:	fba2 2303 	umull	r2, r3, r2, r3
 800e42c:	08db      	lsrs	r3, r3, #3
 800e42e:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800e430:	69bb      	ldr	r3, [r7, #24]
 800e432:	2b01      	cmp	r3, #1
 800e434:	d003      	beq.n	800e43e <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800e436:	69bb      	ldr	r3, [r7, #24]
 800e438:	3b01      	subs	r3, #1
 800e43a:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800e43c:	e7e1      	b.n	800e402 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800e43e:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800e440:	7ffb      	ldrb	r3, [r7, #31]
 800e442:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800e444:	2300      	movs	r3, #0
 800e446:	61bb      	str	r3, [r7, #24]
 800e448:	e009      	b.n	800e45e <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800e44a:	f107 020c 	add.w	r2, r7, #12
 800e44e:	69bb      	ldr	r3, [r7, #24]
 800e450:	4413      	add	r3, r2
 800e452:	781b      	ldrb	r3, [r3, #0]
 800e454:	2b00      	cmp	r3, #0
 800e456:	d106      	bne.n	800e466 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800e458:	69bb      	ldr	r3, [r7, #24]
 800e45a:	3301      	adds	r3, #1
 800e45c:	61bb      	str	r3, [r7, #24]
 800e45e:	69bb      	ldr	r3, [r7, #24]
 800e460:	2b01      	cmp	r3, #1
 800e462:	d9f2      	bls.n	800e44a <FreeRTOS_inet_ntoa+0x72>
 800e464:	e012      	b.n	800e48c <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800e466:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800e468:	e010      	b.n	800e48c <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800e46a:	f107 020c 	add.w	r2, r7, #12
 800e46e:	69bb      	ldr	r3, [r7, #24]
 800e470:	4413      	add	r3, r2
 800e472:	781a      	ldrb	r2, [r3, #0]
 800e474:	6839      	ldr	r1, [r7, #0]
 800e476:	6a3b      	ldr	r3, [r7, #32]
 800e478:	440b      	add	r3, r1
 800e47a:	3230      	adds	r2, #48	@ 0x30
 800e47c:	b2d2      	uxtb	r2, r2
 800e47e:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800e480:	6a3b      	ldr	r3, [r7, #32]
 800e482:	3301      	adds	r3, #1
 800e484:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800e486:	69bb      	ldr	r3, [r7, #24]
 800e488:	3301      	adds	r3, #1
 800e48a:	61bb      	str	r3, [r7, #24]
 800e48c:	69bb      	ldr	r3, [r7, #24]
 800e48e:	2b02      	cmp	r3, #2
 800e490:	d9eb      	bls.n	800e46a <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800e492:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e494:	2b02      	cmp	r3, #2
 800e496:	d805      	bhi.n	800e4a4 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800e498:	683a      	ldr	r2, [r7, #0]
 800e49a:	6a3b      	ldr	r3, [r7, #32]
 800e49c:	4413      	add	r3, r2
 800e49e:	222e      	movs	r2, #46	@ 0x2e
 800e4a0:	701a      	strb	r2, [r3, #0]
 800e4a2:	e004      	b.n	800e4ae <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800e4a4:	683a      	ldr	r2, [r7, #0]
 800e4a6:	6a3b      	ldr	r3, [r7, #32]
 800e4a8:	4413      	add	r3, r2
 800e4aa:	2200      	movs	r2, #0
 800e4ac:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800e4ae:	6a3b      	ldr	r3, [r7, #32]
 800e4b0:	3301      	adds	r3, #1
 800e4b2:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800e4b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4b6:	3301      	adds	r3, #1
 800e4b8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e4ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e4bc:	2b03      	cmp	r3, #3
 800e4be:	d999      	bls.n	800e3f4 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800e4c0:	693b      	ldr	r3, [r7, #16]
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	372c      	adds	r7, #44	@ 0x2c
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4cc:	4770      	bx	lr
 800e4ce:	bf00      	nop
 800e4d0:	cccccccd 	.word	0xcccccccd

0800e4d4 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800e4d4:	b580      	push	{r7, lr}
 800e4d6:	b086      	sub	sp, #24
 800e4d8:	af00      	add	r7, sp, #0
 800e4da:	60f8      	str	r0, [r7, #12]
 800e4dc:	60b9      	str	r1, [r7, #8]
 800e4de:	607a      	str	r2, [r7, #4]
 800e4e0:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2b02      	cmp	r3, #2
 800e4e6:	d003      	beq.n	800e4f0 <FreeRTOS_inet_ntop+0x1c>
 800e4e8:	68fb      	ldr	r3, [r7, #12]
 800e4ea:	2b0a      	cmp	r3, #10
 800e4ec:	d007      	beq.n	800e4fe <FreeRTOS_inet_ntop+0x2a>
 800e4ee:	e00d      	b.n	800e50c <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800e4f0:	683a      	ldr	r2, [r7, #0]
 800e4f2:	6879      	ldr	r1, [r7, #4]
 800e4f4:	68b8      	ldr	r0, [r7, #8]
 800e4f6:	f7fb fc8d 	bl	8009e14 <FreeRTOS_inet_ntop4>
 800e4fa:	6178      	str	r0, [r7, #20]
                break;
 800e4fc:	e009      	b.n	800e512 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800e4fe:	683a      	ldr	r2, [r7, #0]
 800e500:	6879      	ldr	r1, [r7, #4]
 800e502:	68b8      	ldr	r0, [r7, #8]
 800e504:	f7fc f9c1 	bl	800a88a <FreeRTOS_inet_ntop6>
 800e508:	6178      	str	r0, [r7, #20]
                break;
 800e50a:	e002      	b.n	800e512 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800e50c:	2300      	movs	r3, #0
 800e50e:	617b      	str	r3, [r7, #20]
            break;
 800e510:	bf00      	nop
    }

    return pcResult;
 800e512:	697b      	ldr	r3, [r7, #20]
}
 800e514:	4618      	mov	r0, r3
 800e516:	3718      	adds	r7, #24
 800e518:	46bd      	mov	sp, r7
 800e51a:	bd80      	pop	{r7, pc}

0800e51c <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800e51c:	b580      	push	{r7, lr}
 800e51e:	b084      	sub	sp, #16
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
 800e524:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800e526:	687b      	ldr	r3, [r7, #4]
 800e528:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e52a:	68fb      	ldr	r3, [r7, #12]
 800e52c:	7a1b      	ldrb	r3, [r3, #8]
 800e52e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e532:	b2db      	uxtb	r3, r3
 800e534:	2b00      	cmp	r3, #0
 800e536:	d002      	beq.n	800e53e <FreeRTOS_GetLocalAddress+0x22>
 800e538:	2b01      	cmp	r3, #1
 800e53a:	d02a      	beq.n	800e592 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800e53c:	e044      	b.n	800e5c8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800e53e:	683b      	ldr	r3, [r7, #0]
 800e540:	2202      	movs	r2, #2
 800e542:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800e544:	683b      	ldr	r3, [r7, #0]
 800e546:	2218      	movs	r2, #24
 800e548:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800e54a:	68fb      	ldr	r3, [r7, #12]
 800e54c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e54e:	061a      	lsls	r2, r3, #24
 800e550:	68fb      	ldr	r3, [r7, #12]
 800e552:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e554:	021b      	lsls	r3, r3, #8
 800e556:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e55a:	431a      	orrs	r2, r3
 800e55c:	68fb      	ldr	r3, [r7, #12]
 800e55e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e560:	0a1b      	lsrs	r3, r3, #8
 800e562:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e566:	431a      	orrs	r2, r3
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e56c:	0e1b      	lsrs	r3, r3, #24
 800e56e:	431a      	orrs	r2, r3
 800e570:	683b      	ldr	r3, [r7, #0]
 800e572:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800e574:	68fb      	ldr	r3, [r7, #12]
 800e576:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e578:	021b      	lsls	r3, r3, #8
 800e57a:	b21a      	sxth	r2, r3
 800e57c:	68fb      	ldr	r3, [r7, #12]
 800e57e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e580:	0a1b      	lsrs	r3, r3, #8
 800e582:	b29b      	uxth	r3, r3
 800e584:	b21b      	sxth	r3, r3
 800e586:	4313      	orrs	r3, r2
 800e588:	b21b      	sxth	r3, r3
 800e58a:	b29a      	uxth	r2, r3
 800e58c:	683b      	ldr	r3, [r7, #0]
 800e58e:	805a      	strh	r2, [r3, #2]
                break;
 800e590:	e01a      	b.n	800e5c8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800e592:	683b      	ldr	r3, [r7, #0]
 800e594:	220a      	movs	r2, #10
 800e596:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	f103 0008 	add.w	r0, r3, #8
 800e59e:	68fb      	ldr	r3, [r7, #12]
 800e5a0:	3328      	adds	r3, #40	@ 0x28
 800e5a2:	2210      	movs	r2, #16
 800e5a4:	4619      	mov	r1, r3
 800e5a6:	f012 fa0d 	bl	80209c4 <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800e5aa:	68fb      	ldr	r3, [r7, #12]
 800e5ac:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e5ae:	021b      	lsls	r3, r3, #8
 800e5b0:	b21a      	sxth	r2, r3
 800e5b2:	68fb      	ldr	r3, [r7, #12]
 800e5b4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e5b6:	0a1b      	lsrs	r3, r3, #8
 800e5b8:	b29b      	uxth	r3, r3
 800e5ba:	b21b      	sxth	r3, r3
 800e5bc:	4313      	orrs	r3, r2
 800e5be:	b21b      	sxth	r3, r3
 800e5c0:	b29a      	uxth	r2, r3
 800e5c2:	683b      	ldr	r3, [r7, #0]
 800e5c4:	805a      	strh	r2, [r3, #2]
                break;
 800e5c6:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800e5c8:	2318      	movs	r3, #24
}
 800e5ca:	4618      	mov	r0, r3
 800e5cc:	3710      	adds	r7, #16
 800e5ce:	46bd      	mov	sp, r7
 800e5d0:	bd80      	pop	{r7, pc}

0800e5d2 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800e5d2:	b580      	push	{r7, lr}
 800e5d4:	b084      	sub	sp, #16
 800e5d6:	af00      	add	r7, sp, #0
 800e5d8:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800e5da:	687b      	ldr	r3, [r7, #4]
 800e5dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e5de:	2b00      	cmp	r3, #0
 800e5e0:	d006      	beq.n	800e5f0 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800e5e2:	687b      	ldr	r3, [r7, #4]
 800e5e4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800e5e6:	2300      	movs	r3, #0
 800e5e8:	2200      	movs	r2, #0
 800e5ea:	2100      	movs	r1, #0
 800e5ec:	f7f4 f958 	bl	80028a0 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e5f4:	2b00      	cmp	r3, #0
 800e5f6:	d015      	beq.n	800e624 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	681b      	ldr	r3, [r3, #0]
 800e5fc:	0a1b      	lsrs	r3, r3, #8
 800e5fe:	f003 030f 	and.w	r3, r3, #15
 800e602:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800e604:	68fb      	ldr	r3, [r7, #12]
 800e606:	2b00      	cmp	r3, #0
 800e608:	d00c      	beq.n	800e624 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800e60a:	687b      	ldr	r3, [r7, #4]
 800e60c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800e60e:	68fb      	ldr	r3, [r7, #12]
 800e610:	431a      	orrs	r2, r3
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	68f9      	ldr	r1, [r7, #12]
 800e61e:	4618      	mov	r0, r3
 800e620:	f7f3 fe62 	bl	80022e8 <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800e624:	687b      	ldr	r3, [r7, #4]
 800e626:	681b      	ldr	r3, [r3, #0]
 800e628:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800e62c:	687b      	ldr	r3, [r7, #4]
 800e62e:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	685b      	ldr	r3, [r3, #4]
 800e634:	2b00      	cmp	r3, #0
 800e636:	d00b      	beq.n	800e650 <vSocketWakeUpUser+0x7e>
 800e638:	687b      	ldr	r3, [r7, #4]
 800e63a:	681b      	ldr	r3, [r3, #0]
 800e63c:	2b00      	cmp	r3, #0
 800e63e:	d007      	beq.n	800e650 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800e640:	687b      	ldr	r3, [r7, #4]
 800e642:	685a      	ldr	r2, [r3, #4]
 800e644:	687b      	ldr	r3, [r7, #4]
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	4619      	mov	r1, r3
 800e64a:	4610      	mov	r0, r2
 800e64c:	f7f3 fe4c 	bl	80022e8 <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800e650:	687b      	ldr	r3, [r7, #4]
 800e652:	2200      	movs	r2, #0
 800e654:	601a      	str	r2, [r3, #0]
}
 800e656:	bf00      	nop
 800e658:	3710      	adds	r7, #16
 800e65a:	46bd      	mov	sp, r7
 800e65c:	bd80      	pop	{r7, pc}

0800e65e <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800e65e:	b480      	push	{r7}
 800e660:	b085      	sub	sp, #20
 800e662:	af00      	add	r7, sp, #0
 800e664:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e66c:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800e66e:	7afb      	ldrb	r3, [r7, #11]
 800e670:	2b08      	cmp	r3, #8
 800e672:	d006      	beq.n	800e682 <bMayConnect+0x24>
 800e674:	2b08      	cmp	r3, #8
 800e676:	dc0b      	bgt.n	800e690 <bMayConnect+0x32>
 800e678:	2b00      	cmp	r3, #0
 800e67a:	d002      	beq.n	800e682 <bMayConnect+0x24>
 800e67c:	2b02      	cmp	r3, #2
 800e67e:	d003      	beq.n	800e688 <bMayConnect+0x2a>
 800e680:	e006      	b.n	800e690 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800e682:	2300      	movs	r3, #0
 800e684:	60fb      	str	r3, [r7, #12]
                break;
 800e686:	e007      	b.n	800e698 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800e688:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800e68c:	60fb      	str	r3, [r7, #12]
                break;
 800e68e:	e003      	b.n	800e698 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800e690:	f06f 030a 	mvn.w	r3, #10
 800e694:	60fb      	str	r3, [r7, #12]
                break;
 800e696:	bf00      	nop
        }

        return xResult;
 800e698:	68fb      	ldr	r3, [r7, #12]
    }
 800e69a:	4618      	mov	r0, r3
 800e69c:	3714      	adds	r7, #20
 800e69e:	46bd      	mov	sp, r7
 800e6a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6a4:	4770      	bx	lr
	...

0800e6a8 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800e6a8:	b580      	push	{r7, lr}
 800e6aa:	b084      	sub	sp, #16
 800e6ac:	af00      	add	r7, sp, #0
 800e6ae:	6078      	str	r0, [r7, #4]
 800e6b0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800e6b6:	683b      	ldr	r3, [r7, #0]
 800e6b8:	2b00      	cmp	r3, #0
 800e6ba:	d103      	bne.n	800e6c4 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800e6bc:	f06f 0315 	mvn.w	r3, #21
 800e6c0:	60fb      	str	r3, [r7, #12]
 800e6c2:	e01f      	b.n	800e704 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	2106      	movs	r1, #6
 800e6c8:	6878      	ldr	r0, [r7, #4]
 800e6ca:	f7fe fc71 	bl	800cfb0 <prvValidSocket>
 800e6ce:	4603      	mov	r3, r0
 800e6d0:	2b00      	cmp	r3, #0
 800e6d2:	d103      	bne.n	800e6dc <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800e6d4:	f06f 0308 	mvn.w	r3, #8
 800e6d8:	60fb      	str	r3, [r7, #12]
 800e6da:	e013      	b.n	800e704 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800e6dc:	6878      	ldr	r0, [r7, #4]
 800e6de:	f000 ff49 	bl	800f574 <FreeRTOS_issocketconnected>
 800e6e2:	4603      	mov	r3, r0
 800e6e4:	2b00      	cmp	r3, #0
 800e6e6:	dd03      	ble.n	800e6f0 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800e6e8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800e6ec:	60fb      	str	r3, [r7, #12]
 800e6ee:	e009      	b.n	800e704 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800e6f0:	687b      	ldr	r3, [r7, #4]
 800e6f2:	69db      	ldr	r3, [r3, #28]
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d105      	bne.n	800e704 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800e6f8:	2200      	movs	r2, #0
 800e6fa:	2100      	movs	r1, #0
 800e6fc:	6878      	ldr	r0, [r7, #4]
 800e6fe:	f7fe ff4f 	bl	800d5a0 <FreeRTOS_bind>
 800e702:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800e704:	68fb      	ldr	r3, [r7, #12]
 800e706:	2b00      	cmp	r3, #0
 800e708:	f040 80a6 	bne.w	800e858 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	f7ff ffa6 	bl	800e65e <bMayConnect>
 800e712:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800e714:	68fb      	ldr	r3, [r7, #12]
 800e716:	2b00      	cmp	r3, #0
 800e718:	f040 809e 	bne.w	800e858 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800e71c:	687a      	ldr	r2, [r7, #4]
 800e71e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800e722:	f36f 03c3 	bfc	r3, #3, #1
 800e726:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800e72a:	687b      	ldr	r3, [r7, #4]
 800e72c:	2200      	movs	r2, #0
 800e72e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800e732:	683b      	ldr	r3, [r7, #0]
 800e734:	785b      	ldrb	r3, [r3, #1]
 800e736:	2b02      	cmp	r3, #2
 800e738:	d027      	beq.n	800e78a <prvTCPConnectStart+0xe2>
 800e73a:	2b0a      	cmp	r3, #10
 800e73c:	d168      	bne.n	800e810 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800e73e:	687a      	ldr	r2, [r7, #4]
 800e740:	7a13      	ldrb	r3, [r2, #8]
 800e742:	f043 0301 	orr.w	r3, r3, #1
 800e746:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800e748:	687b      	ldr	r3, [r7, #4]
 800e74a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e74c:	4618      	mov	r0, r3
 800e74e:	683b      	ldr	r3, [r7, #0]
 800e750:	f103 0108 	add.w	r1, r3, #8
 800e754:	683b      	ldr	r3, [r7, #0]
 800e756:	885b      	ldrh	r3, [r3, #2]
 800e758:	021b      	lsls	r3, r3, #8
 800e75a:	b21a      	sxth	r2, r3
 800e75c:	683b      	ldr	r3, [r7, #0]
 800e75e:	885b      	ldrh	r3, [r3, #2]
 800e760:	0a1b      	lsrs	r3, r3, #8
 800e762:	b29b      	uxth	r3, r3
 800e764:	b21b      	sxth	r3, r3
 800e766:	4313      	orrs	r3, r2
 800e768:	b21b      	sxth	r3, r3
 800e76a:	b29b      	uxth	r3, r3
 800e76c:	460a      	mov	r2, r1
 800e76e:	4601      	mov	r1, r0
 800e770:	483c      	ldr	r0, [pc, #240]	@ (800e864 <prvTCPConnectStart+0x1bc>)
 800e772:	f011 ff0b 	bl	802058c <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800e776:	687b      	ldr	r3, [r7, #4]
 800e778:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800e77c:	683b      	ldr	r3, [r7, #0]
 800e77e:	3308      	adds	r3, #8
 800e780:	2210      	movs	r2, #16
 800e782:	4619      	mov	r1, r3
 800e784:	f012 f91e 	bl	80209c4 <memcpy>
                            break;
 800e788:	e046      	b.n	800e818 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800e78a:	687a      	ldr	r2, [r7, #4]
 800e78c:	7a13      	ldrb	r3, [r2, #8]
 800e78e:	f36f 0300 	bfc	r3, #0, #1
 800e792:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e798:	4618      	mov	r0, r3
 800e79a:	683b      	ldr	r3, [r7, #0]
 800e79c:	689b      	ldr	r3, [r3, #8]
 800e79e:	061a      	lsls	r2, r3, #24
 800e7a0:	683b      	ldr	r3, [r7, #0]
 800e7a2:	689b      	ldr	r3, [r3, #8]
 800e7a4:	021b      	lsls	r3, r3, #8
 800e7a6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e7aa:	431a      	orrs	r2, r3
 800e7ac:	683b      	ldr	r3, [r7, #0]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	0a1b      	lsrs	r3, r3, #8
 800e7b2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e7b6:	431a      	orrs	r2, r3
 800e7b8:	683b      	ldr	r3, [r7, #0]
 800e7ba:	689b      	ldr	r3, [r3, #8]
 800e7bc:	0e1b      	lsrs	r3, r3, #24
 800e7be:	ea42 0103 	orr.w	r1, r2, r3
 800e7c2:	683b      	ldr	r3, [r7, #0]
 800e7c4:	885b      	ldrh	r3, [r3, #2]
 800e7c6:	021b      	lsls	r3, r3, #8
 800e7c8:	b21a      	sxth	r2, r3
 800e7ca:	683b      	ldr	r3, [r7, #0]
 800e7cc:	885b      	ldrh	r3, [r3, #2]
 800e7ce:	0a1b      	lsrs	r3, r3, #8
 800e7d0:	b29b      	uxth	r3, r3
 800e7d2:	b21b      	sxth	r3, r3
 800e7d4:	4313      	orrs	r3, r2
 800e7d6:	b21b      	sxth	r3, r3
 800e7d8:	b29b      	uxth	r3, r3
 800e7da:	460a      	mov	r2, r1
 800e7dc:	4601      	mov	r1, r0
 800e7de:	4822      	ldr	r0, [pc, #136]	@ (800e868 <prvTCPConnectStart+0x1c0>)
 800e7e0:	f011 fed4 	bl	802058c <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800e7e4:	683b      	ldr	r3, [r7, #0]
 800e7e6:	689b      	ldr	r3, [r3, #8]
 800e7e8:	061a      	lsls	r2, r3, #24
 800e7ea:	683b      	ldr	r3, [r7, #0]
 800e7ec:	689b      	ldr	r3, [r3, #8]
 800e7ee:	021b      	lsls	r3, r3, #8
 800e7f0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e7f4:	431a      	orrs	r2, r3
 800e7f6:	683b      	ldr	r3, [r7, #0]
 800e7f8:	689b      	ldr	r3, [r3, #8]
 800e7fa:	0a1b      	lsrs	r3, r3, #8
 800e7fc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e800:	431a      	orrs	r2, r3
 800e802:	683b      	ldr	r3, [r7, #0]
 800e804:	689b      	ldr	r3, [r3, #8]
 800e806:	0e1b      	lsrs	r3, r3, #24
 800e808:	431a      	orrs	r2, r3
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800e80e:	e003      	b.n	800e818 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800e810:	4816      	ldr	r0, [pc, #88]	@ (800e86c <prvTCPConnectStart+0x1c4>)
 800e812:	f011 febb 	bl	802058c <lUDPLoggingPrintf>
                        break;
 800e816:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800e818:	683b      	ldr	r3, [r7, #0]
 800e81a:	885b      	ldrh	r3, [r3, #2]
 800e81c:	021b      	lsls	r3, r3, #8
 800e81e:	b21a      	sxth	r2, r3
 800e820:	683b      	ldr	r3, [r7, #0]
 800e822:	885b      	ldrh	r3, [r3, #2]
 800e824:	0a1b      	lsrs	r3, r3, #8
 800e826:	b29b      	uxth	r3, r3
 800e828:	b21b      	sxth	r3, r3
 800e82a:	4313      	orrs	r3, r2
 800e82c:	b21b      	sxth	r3, r3
 800e82e:	b29a      	uxth	r2, r3
 800e830:	687b      	ldr	r3, [r7, #4]
 800e832:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800e836:	2102      	movs	r1, #2
 800e838:	6878      	ldr	r0, [r7, #4]
 800e83a:	f001 fc59 	bl	80100f0 <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2201      	movs	r2, #1
 800e842:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800e846:	2006      	movs	r0, #6
 800e848:	f7f9 ffdc 	bl	8008804 <xSendEventToIPTask>
 800e84c:	4603      	mov	r3, r0
 800e84e:	2b01      	cmp	r3, #1
 800e850:	d002      	beq.n	800e858 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800e852:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800e856:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800e858:	68fb      	ldr	r3, [r7, #12]
    }
 800e85a:	4618      	mov	r0, r3
 800e85c:	3710      	adds	r7, #16
 800e85e:	46bd      	mov	sp, r7
 800e860:	bd80      	pop	{r7, pc}
 800e862:	bf00      	nop
 800e864:	080242a8 	.word	0x080242a8
 800e868:	080242d0 	.word	0x080242d0
 800e86c:	080242f4 	.word	0x080242f4

0800e870 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800e870:	b580      	push	{r7, lr}
 800e872:	b094      	sub	sp, #80	@ 0x50
 800e874:	af02      	add	r7, sp, #8
 800e876:	60f8      	str	r0, [r7, #12]
 800e878:	60b9      	str	r1, [r7, #8]
 800e87a:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800e87c:	68fb      	ldr	r3, [r7, #12]
 800e87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800e880:	2300      	movs	r3, #0
 800e882:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800e884:	f06f 0315 	mvn.w	r3, #21
 800e888:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800e88a:	68bb      	ldr	r3, [r7, #8]
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d013      	beq.n	800e8b8 <FreeRTOS_connect+0x48>
 800e890:	68bb      	ldr	r3, [r7, #8]
 800e892:	785b      	ldrb	r3, [r3, #1]
 800e894:	2b0a      	cmp	r3, #10
 800e896:	d00f      	beq.n	800e8b8 <FreeRTOS_connect+0x48>
 800e898:	68bb      	ldr	r3, [r7, #8]
 800e89a:	785b      	ldrb	r3, [r3, #1]
 800e89c:	2b02      	cmp	r3, #2
 800e89e:	d00b      	beq.n	800e8b8 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800e8a0:	f107 0314 	add.w	r3, r7, #20
 800e8a4:	2218      	movs	r2, #24
 800e8a6:	68b9      	ldr	r1, [r7, #8]
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f012 f88b 	bl	80209c4 <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800e8ae:	2302      	movs	r3, #2
 800e8b0:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800e8b2:	f107 0314 	add.w	r3, r7, #20
 800e8b6:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800e8b8:	68b9      	ldr	r1, [r7, #8]
 800e8ba:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e8bc:	f7ff fef4 	bl	800e6a8 <prvTCPConnectStart>
 800e8c0:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800e8c2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d146      	bne.n	800e956 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800e8c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800e8ca:	2b00      	cmp	r3, #0
 800e8cc:	d110      	bne.n	800e8f0 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800e8ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e8d0:	6a1b      	ldr	r3, [r3, #32]
 800e8d2:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800e8d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8d6:	2b00      	cmp	r3, #0
 800e8d8:	d103      	bne.n	800e8e2 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800e8da:	f06f 030a 	mvn.w	r3, #10
 800e8de:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800e8e0:	e039      	b.n	800e956 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800e8e2:	2301      	movs	r3, #1
 800e8e4:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800e8e6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e8ea:	4618      	mov	r0, r3
 800e8ec:	f7f5 fb64 	bl	8003fb8 <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800e8f0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800e8f2:	f000 fe3f 	bl	800f574 <FreeRTOS_issocketconnected>
 800e8f6:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800e8f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	db2a      	blt.n	800e954 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800e8fe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800e900:	2b00      	cmp	r3, #0
 800e902:	dd02      	ble.n	800e90a <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800e904:	2300      	movs	r3, #0
 800e906:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800e908:	e025      	b.n	800e956 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800e90a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800e90e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800e912:	4611      	mov	r1, r2
 800e914:	4618      	mov	r0, r3
 800e916:	f7f5 fb87 	bl	8004028 <xTaskCheckForTimeOut>
 800e91a:	4603      	mov	r3, r0
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d003      	beq.n	800e928 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800e920:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800e924:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800e926:	e016      	b.n	800e956 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800e928:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800e92a:	6858      	ldr	r0, [r3, #4]
 800e92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e92e:	9300      	str	r3, [sp, #0]
 800e930:	2300      	movs	r3, #0
 800e932:	2201      	movs	r2, #1
 800e934:	2128      	movs	r1, #40	@ 0x28
 800e936:	f7f3 fbf1 	bl	800211c <xEventGroupWaitBits>
 800e93a:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800e93c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e93e:	f003 0320 	and.w	r3, r3, #32
 800e942:	2b00      	cmp	r3, #0
 800e944:	d0c0      	beq.n	800e8c8 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800e946:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800e94a:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800e94c:	4804      	ldr	r0, [pc, #16]	@ (800e960 <FreeRTOS_connect+0xf0>)
 800e94e:	f011 fe1d 	bl	802058c <lUDPLoggingPrintf>
                    break;
 800e952:	e000      	b.n	800e956 <FreeRTOS_connect+0xe6>
                    break;
 800e954:	bf00      	nop
                }
            }
        }

        return xResult;
 800e956:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800e958:	4618      	mov	r0, r3
 800e95a:	3748      	adds	r7, #72	@ 0x48
 800e95c:	46bd      	mov	sp, r7
 800e95e:	bd80      	pop	{r7, pc}
 800e960:	08024320 	.word	0x08024320

0800e964 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 800e964:	b580      	push	{r7, lr}
 800e966:	b08a      	sub	sp, #40	@ 0x28
 800e968:	af02      	add	r7, sp, #8
 800e96a:	60f8      	str	r0, [r7, #12]
 800e96c:	60b9      	str	r1, [r7, #8]
 800e96e:	607a      	str	r2, [r7, #4]
 800e970:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 800e972:	683b      	ldr	r3, [r7, #0]
 800e974:	f003 0301 	and.w	r3, r3, #1
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d13b      	bne.n	800e9f4 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 800e97c:	683b      	ldr	r3, [r7, #0]
 800e97e:	089b      	lsrs	r3, r3, #2
 800e980:	f003 0301 	and.w	r3, r3, #1
 800e984:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 800e986:	68fb      	ldr	r3, [r7, #12]
 800e988:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800e98c:	69bb      	ldr	r3, [r7, #24]
 800e98e:	9300      	str	r3, [sp, #0]
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	68ba      	ldr	r2, [r7, #8]
 800e994:	2100      	movs	r1, #0
 800e996:	f001 fa04 	bl	800fda2 <uxStreamBufferGet>
 800e99a:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 800e99c:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 800e99e:	68fb      	ldr	r3, [r7, #12]
 800e9a0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e9a4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800e9a8:	b2db      	uxtb	r3, r3
 800e9aa:	2b00      	cmp	r3, #0
 800e9ac:	d02b      	beq.n	800ea06 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e9b4:	4618      	mov	r0, r3
 800e9b6:	f001 f8c5 	bl	800fb44 <uxStreamBufferFrontSpace>
 800e9ba:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800e9c2:	697a      	ldr	r2, [r7, #20]
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d31e      	bcc.n	800ea06 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 800e9c8:	68fa      	ldr	r2, [r7, #12]
 800e9ca:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e9ce:	f36f 13c7 	bfc	r3, #7, #1
 800e9d2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e9d6:	68fa      	ldr	r2, [r7, #12]
 800e9d8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800e9dc:	f043 0301 	orr.w	r3, r3, #1
 800e9e0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 800e9e4:	68fb      	ldr	r3, [r7, #12]
 800e9e6:	2201      	movs	r2, #1
 800e9e8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800e9ec:	2006      	movs	r0, #6
 800e9ee:	f7f9 ff09 	bl	8008804 <xSendEventToIPTask>
 800e9f2:	e008      	b.n	800ea06 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 800e9f4:	68fb      	ldr	r3, [r7, #12]
 800e9f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e9fa:	68b9      	ldr	r1, [r7, #8]
 800e9fc:	4618      	mov	r0, r3
 800e9fe:	f001 f930 	bl	800fc62 <uxStreamBufferGetPtr>
 800ea02:	4603      	mov	r3, r0
 800ea04:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 800ea06:	69fb      	ldr	r3, [r7, #28]
    }
 800ea08:	4618      	mov	r0, r3
 800ea0a:	3720      	adds	r7, #32
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	bd80      	pop	{r7, pc}

0800ea10 <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 800ea10:	b580      	push	{r7, lr}
 800ea12:	b08e      	sub	sp, #56	@ 0x38
 800ea14:	af02      	add	r7, sp, #8
 800ea16:	60f8      	str	r0, [r7, #12]
 800ea18:	60b9      	str	r1, [r7, #8]
 800ea1a:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 800ea1c:	2300      	movs	r3, #0
 800ea1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800ea20:	2300      	movs	r3, #0
 800ea22:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800ea24:	2300      	movs	r3, #0
 800ea26:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 800ea28:	68fb      	ldr	r3, [r7, #12]
 800ea2a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ea2e:	2b00      	cmp	r3, #0
 800ea30:	d05f      	beq.n	800eaf2 <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ea38:	4618      	mov	r0, r3
 800ea3a:	f001 f894 	bl	800fb66 <uxStreamBufferGetSize>
 800ea3e:	4603      	mov	r3, r0
 800ea40:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 800ea42:	e056      	b.n	800eaf2 <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 800ea44:	68fb      	ldr	r3, [r7, #12]
 800ea46:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ea4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 800ea4e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ea52:	2b00      	cmp	r3, #0
 800ea54:	d007      	beq.n	800ea66 <prvRecvWait+0x56>
 800ea56:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ea5a:	2b08      	cmp	r3, #8
 800ea5c:	d003      	beq.n	800ea66 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 800ea5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ea62:	2b09      	cmp	r3, #9
 800ea64:	d10e      	bne.n	800ea84 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 800ea66:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ea6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800ea6c:	68fb      	ldr	r3, [r7, #12]
 800ea6e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800ea72:	f003 0308 	and.w	r3, r3, #8
 800ea76:	b2db      	uxtb	r3, r3
 800ea78:	2b00      	cmp	r3, #0
 800ea7a:	d03e      	beq.n	800eafa <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 800ea7c:	f06f 030b 	mvn.w	r3, #11
 800ea80:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 800ea82:	e03a      	b.n	800eafa <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 800ea84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ea86:	2b00      	cmp	r3, #0
 800ea88:	d111      	bne.n	800eaae <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	6a1b      	ldr	r3, [r3, #32]
 800ea8e:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 800ea90:	69fb      	ldr	r3, [r7, #28]
 800ea92:	2b00      	cmp	r3, #0
 800ea94:	d033      	beq.n	800eafe <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	f003 0310 	and.w	r3, r3, #16
 800ea9c:	2b00      	cmp	r3, #0
 800ea9e:	d130      	bne.n	800eb02 <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800eaa0:	2301      	movs	r3, #1
 800eaa2:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800eaa4:	f107 0314 	add.w	r3, r7, #20
 800eaa8:	4618      	mov	r0, r3
 800eaaa:	f7f5 fa85 	bl	8003fb8 <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800eaae:	f107 021c 	add.w	r2, r7, #28
 800eab2:	f107 0314 	add.w	r3, r7, #20
 800eab6:	4611      	mov	r1, r2
 800eab8:	4618      	mov	r0, r3
 800eaba:	f7f5 fab5 	bl	8004028 <xTaskCheckForTimeOut>
 800eabe:	4603      	mov	r3, r0
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d120      	bne.n	800eb06 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 800eac4:	68fb      	ldr	r3, [r7, #12]
 800eac6:	6858      	ldr	r0, [r3, #4]
 800eac8:	69fb      	ldr	r3, [r7, #28]
 800eaca:	9300      	str	r3, [sp, #0]
 800eacc:	2300      	movs	r3, #0
 800eace:	2201      	movs	r2, #1
 800ead0:	2161      	movs	r1, #97	@ 0x61
 800ead2:	f7f3 fb23 	bl	800211c <xEventGroupWaitBits>
 800ead6:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 800ead8:	68fb      	ldr	r3, [r7, #12]
 800eada:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eade:	2b00      	cmp	r3, #0
 800eae0:	d007      	beq.n	800eaf2 <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800eae2:	68fb      	ldr	r3, [r7, #12]
 800eae4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eae8:	4618      	mov	r0, r3
 800eaea:	f001 f83c 	bl	800fb66 <uxStreamBufferGetSize>
 800eaee:	4603      	mov	r3, r0
 800eaf0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 800eaf2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	d0a5      	beq.n	800ea44 <prvRecvWait+0x34>
 800eaf8:	e006      	b.n	800eb08 <prvRecvWait+0xf8>
                break;
 800eafa:	bf00      	nop
 800eafc:	e004      	b.n	800eb08 <prvRecvWait+0xf8>
                    break;
 800eafe:	bf00      	nop
 800eb00:	e002      	b.n	800eb08 <prvRecvWait+0xf8>
                    break;
 800eb02:	bf00      	nop
 800eb04:	e000      	b.n	800eb08 <prvRecvWait+0xf8>
                break;
 800eb06:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 800eb08:	68bb      	ldr	r3, [r7, #8]
 800eb0a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800eb0c:	601a      	str	r2, [r3, #0]

        return xByteCount;
 800eb0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800eb10:	4618      	mov	r0, r3
 800eb12:	3730      	adds	r7, #48	@ 0x30
 800eb14:	46bd      	mov	sp, r7
 800eb16:	bd80      	pop	{r7, pc}

0800eb18 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 800eb18:	b580      	push	{r7, lr}
 800eb1a:	b088      	sub	sp, #32
 800eb1c:	af00      	add	r7, sp, #0
 800eb1e:	60f8      	str	r0, [r7, #12]
 800eb20:	60b9      	str	r1, [r7, #8]
 800eb22:	607a      	str	r2, [r7, #4]
 800eb24:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 800eb26:	2300      	movs	r3, #0
 800eb28:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800eb2a:	68fb      	ldr	r3, [r7, #12]
 800eb2c:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800eb2e:	2300      	movs	r3, #0
 800eb30:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800eb32:	2201      	movs	r2, #1
 800eb34:	2106      	movs	r1, #6
 800eb36:	69b8      	ldr	r0, [r7, #24]
 800eb38:	f7fe fa3a 	bl	800cfb0 <prvValidSocket>
 800eb3c:	4603      	mov	r3, r0
 800eb3e:	2b00      	cmp	r3, #0
 800eb40:	d103      	bne.n	800eb4a <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800eb42:	f06f 0315 	mvn.w	r3, #21
 800eb46:	61fb      	str	r3, [r7, #28]
 800eb48:	e01d      	b.n	800eb86 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 800eb4a:	683b      	ldr	r3, [r7, #0]
 800eb4c:	f003 0301 	and.w	r3, r3, #1
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d006      	beq.n	800eb62 <FreeRTOS_recv+0x4a>
 800eb54:	68bb      	ldr	r3, [r7, #8]
 800eb56:	2b00      	cmp	r3, #0
 800eb58:	d103      	bne.n	800eb62 <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800eb5a:	f06f 0315 	mvn.w	r3, #21
 800eb5e:	61fb      	str	r3, [r7, #28]
 800eb60:	e011      	b.n	800eb86 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 800eb62:	f107 0314 	add.w	r3, r7, #20
 800eb66:	683a      	ldr	r2, [r7, #0]
 800eb68:	4619      	mov	r1, r3
 800eb6a:	69b8      	ldr	r0, [r7, #24]
 800eb6c:	f7ff ff50 	bl	800ea10 <prvRecvWait>
 800eb70:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 800eb72:	69fb      	ldr	r3, [r7, #28]
 800eb74:	2b00      	cmp	r3, #0
 800eb76:	dd06      	ble.n	800eb86 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 800eb78:	683b      	ldr	r3, [r7, #0]
 800eb7a:	687a      	ldr	r2, [r7, #4]
 800eb7c:	68b9      	ldr	r1, [r7, #8]
 800eb7e:	69b8      	ldr	r0, [r7, #24]
 800eb80:	f7ff fef0 	bl	800e964 <prvRecvData>
 800eb84:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 800eb86:	69fb      	ldr	r3, [r7, #28]
    }
 800eb88:	4618      	mov	r0, r3
 800eb8a:	3720      	adds	r7, #32
 800eb8c:	46bd      	mov	sp, r7
 800eb8e:	bd80      	pop	{r7, pc}

0800eb90 <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 800eb90:	b580      	push	{r7, lr}
 800eb92:	b084      	sub	sp, #16
 800eb94:	af00      	add	r7, sp, #0
 800eb96:	6078      	str	r0, [r7, #4]
 800eb98:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 800eb9a:	2301      	movs	r3, #1
 800eb9c:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800eb9e:	2201      	movs	r2, #1
 800eba0:	2106      	movs	r1, #6
 800eba2:	6878      	ldr	r0, [r7, #4]
 800eba4:	f7fe fa04 	bl	800cfb0 <prvValidSocket>
 800eba8:	4603      	mov	r3, r0
 800ebaa:	2b00      	cmp	r3, #0
 800ebac:	d103      	bne.n	800ebb6 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800ebae:	f06f 0315 	mvn.w	r3, #21
 800ebb2:	60fb      	str	r3, [r7, #12]
 800ebb4:	e040      	b.n	800ec38 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800ebbc:	f003 0308 	and.w	r3, r3, #8
 800ebc0:	b2db      	uxtb	r3, r3
 800ebc2:	2b00      	cmp	r3, #0
 800ebc4:	d003      	beq.n	800ebce <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800ebc6:	f06f 030b 	mvn.w	r3, #11
 800ebca:	60fb      	str	r3, [r7, #12]
 800ebcc:	e034      	b.n	800ec38 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800ebce:	687b      	ldr	r3, [r7, #4]
 800ebd0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ebd4:	2b00      	cmp	r3, #0
 800ebd6:	d009      	beq.n	800ebec <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800ebd8:	687b      	ldr	r3, [r7, #4]
 800ebda:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800ebde:	2b08      	cmp	r3, #8
 800ebe0:	d004      	beq.n	800ebec <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 800ebe2:	687b      	ldr	r3, [r7, #4]
 800ebe4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800ebe8:	2b09      	cmp	r3, #9
 800ebea:	d103      	bne.n	800ebf4 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800ebec:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ebf0:	60fb      	str	r3, [r7, #12]
 800ebf2:	e021      	b.n	800ec38 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800ebf4:	687b      	ldr	r3, [r7, #4]
 800ebf6:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800ebfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d002      	beq.n	800ec0a <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 800ec04:	2300      	movs	r3, #0
 800ec06:	60fb      	str	r3, [r7, #12]
 800ec08:	e016      	b.n	800ec38 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 800ec0a:	683b      	ldr	r3, [r7, #0]
 800ec0c:	2b00      	cmp	r3, #0
 800ec0e:	d102      	bne.n	800ec16 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 800ec10:	2300      	movs	r3, #0
 800ec12:	60fb      	str	r3, [r7, #12]
 800ec14:	e010      	b.n	800ec38 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d10b      	bne.n	800ec38 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800ec20:	2100      	movs	r1, #0
 800ec22:	6878      	ldr	r0, [r7, #4]
 800ec24:	f000 fac6 	bl	800f1b4 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ec2e:	2b00      	cmp	r3, #0
 800ec30:	d102      	bne.n	800ec38 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800ec32:	f06f 030b 	mvn.w	r3, #11
 800ec36:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 800ec38:	68fb      	ldr	r3, [r7, #12]
    }
 800ec3a:	4618      	mov	r0, r3
 800ec3c:	3710      	adds	r7, #16
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}

0800ec42 <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 800ec42:	b580      	push	{r7, lr}
 800ec44:	b088      	sub	sp, #32
 800ec46:	af00      	add	r7, sp, #0
 800ec48:	6078      	str	r0, [r7, #4]
 800ec4a:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 800ec4c:	2300      	movs	r3, #0
 800ec4e:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ec50:	687b      	ldr	r3, [r7, #4]
 800ec52:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 800ec54:	2300      	movs	r3, #0
 800ec56:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 800ec58:	683b      	ldr	r3, [r7, #0]
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 800ec5e:	2200      	movs	r2, #0
 800ec60:	2106      	movs	r1, #6
 800ec62:	6978      	ldr	r0, [r7, #20]
 800ec64:	f7fe f9a4 	bl	800cfb0 <prvValidSocket>
 800ec68:	4603      	mov	r3, r0
 800ec6a:	2b01      	cmp	r3, #1
 800ec6c:	d135      	bne.n	800ecda <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 800ec6e:	697b      	ldr	r3, [r7, #20]
 800ec70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ec74:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 800ec76:	69bb      	ldr	r3, [r7, #24]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d10f      	bne.n	800ec9c <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 800ec7c:	697b      	ldr	r3, [r7, #20]
 800ec7e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800ec82:	f003 0308 	and.w	r3, r3, #8
 800ec86:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d107      	bne.n	800ec9c <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800ec8c:	2100      	movs	r1, #0
 800ec8e:	6978      	ldr	r0, [r7, #20]
 800ec90:	f000 fa90 	bl	800f1b4 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 800ec94:	697b      	ldr	r3, [r7, #20]
 800ec96:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ec9a:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 800ec9c:	69bb      	ldr	r3, [r7, #24]
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	d01b      	beq.n	800ecda <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800eca2:	69b8      	ldr	r0, [r7, #24]
 800eca4:	f000 ff3d 	bl	800fb22 <uxStreamBufferGetSpace>
 800eca8:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 800ecaa:	69bb      	ldr	r3, [r7, #24]
 800ecac:	691a      	ldr	r2, [r3, #16]
 800ecae:	69bb      	ldr	r3, [r7, #24]
 800ecb0:	689b      	ldr	r3, [r3, #8]
 800ecb2:	1ad3      	subs	r3, r2, r3
 800ecb4:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 800ecb6:	68fa      	ldr	r2, [r7, #12]
 800ecb8:	693b      	ldr	r3, [r7, #16]
 800ecba:	429a      	cmp	r2, r3
 800ecbc:	d803      	bhi.n	800ecc6 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 800ecbe:	68fa      	ldr	r2, [r7, #12]
 800ecc0:	683b      	ldr	r3, [r7, #0]
 800ecc2:	601a      	str	r2, [r3, #0]
 800ecc4:	e002      	b.n	800eccc <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 800ecc6:	693a      	ldr	r2, [r7, #16]
 800ecc8:	683b      	ldr	r3, [r7, #0]
 800ecca:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 800eccc:	69bb      	ldr	r3, [r7, #24]
 800ecce:	689b      	ldr	r3, [r3, #8]
 800ecd0:	3310      	adds	r3, #16
 800ecd2:	69ba      	ldr	r2, [r7, #24]
 800ecd4:	4413      	add	r3, r2
 800ecd6:	3304      	adds	r3, #4
 800ecd8:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 800ecda:	69fb      	ldr	r3, [r7, #28]
    }
 800ecdc:	4618      	mov	r0, r3
 800ecde:	3720      	adds	r7, #32
 800ece0:	46bd      	mov	sp, r7
 800ece2:	bd80      	pop	{r7, pc}

0800ece4 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 800ece4:	b580      	push	{r7, lr}
 800ece6:	b090      	sub	sp, #64	@ 0x40
 800ece8:	af02      	add	r7, sp, #8
 800ecea:	60f8      	str	r0, [r7, #12]
 800ecec:	60b9      	str	r1, [r7, #8]
 800ecee:	607a      	str	r2, [r7, #4]
 800ecf0:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800ecfa:	68fb      	ldr	r3, [r7, #12]
 800ecfc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ed00:	4618      	mov	r0, r3
 800ed02:	f000 ff0e 	bl	800fb22 <uxStreamBufferGetSpace>
 800ed06:	4603      	mov	r3, r0
 800ed08:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 800ed0e:	68bb      	ldr	r3, [r7, #8]
 800ed10:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 800ed12:	e08f      	b.n	800ee34 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 800ed14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	dd4b      	ble.n	800edb2 <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 800ed1a:	2300      	movs	r3, #0
 800ed1c:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 800ed1e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed22:	429a      	cmp	r2, r3
 800ed24:	dd01      	ble.n	800ed2a <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 800ed26:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed28:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 800ed2a:	68fb      	ldr	r3, [r7, #12]
 800ed2c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ed30:	f003 0310 	and.w	r3, r3, #16
 800ed34:	b2db      	uxtb	r3, r3
 800ed36:	2b00      	cmp	r3, #0
 800ed38:	d00e      	beq.n	800ed58 <prvTCPSendLoop+0x74>
 800ed3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800ed3c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ed3e:	429a      	cmp	r2, r3
 800ed40:	d10a      	bne.n	800ed58 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 800ed42:	2301      	movs	r3, #1
 800ed44:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 800ed46:	f7f4 fc7b 	bl	8003640 <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 800ed4a:	68fa      	ldr	r2, [r7, #12]
 800ed4c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800ed50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ed54:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 800ed58:	68fb      	ldr	r3, [r7, #12]
 800ed5a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800ed5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed60:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ed62:	2100      	movs	r1, #0
 800ed64:	f000 ff9d 	bl	800fca2 <uxStreamBufferAdd>
 800ed68:	4603      	mov	r3, r0
 800ed6a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 800ed6c:	6a3b      	ldr	r3, [r7, #32]
 800ed6e:	2b01      	cmp	r3, #1
 800ed70:	d101      	bne.n	800ed76 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 800ed72:	f7f4 fc73 	bl	800365c <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800ed76:	68fb      	ldr	r3, [r7, #12]
 800ed78:	2201      	movs	r2, #1
 800ed7a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 800ed7e:	f7fa fc99 	bl	80096b4 <xIsCallingFromIPTask>
 800ed82:	4603      	mov	r3, r0
 800ed84:	2b00      	cmp	r3, #0
 800ed86:	d102      	bne.n	800ed8e <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800ed88:	2006      	movs	r0, #6
 800ed8a:	f7f9 fd3b 	bl	8008804 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 800ed8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ed90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed92:	1ad3      	subs	r3, r2, r3
 800ed94:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 800ed96:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ed98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed9a:	4413      	add	r3, r2
 800ed9c:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 800ed9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800eda0:	2b00      	cmp	r3, #0
 800eda2:	d053      	beq.n	800ee4c <prvTCPSendLoop+0x168>
 800eda4:	68bb      	ldr	r3, [r7, #8]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d050      	beq.n	800ee4c <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 800edaa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800edac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800edae:	4413      	add	r3, r2
 800edb0:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 800edb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	d119      	bne.n	800edec <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 800edb8:	68fb      	ldr	r3, [r7, #12]
 800edba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800edbc:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 800edbe:	f7fa fc79 	bl	80096b4 <xIsCallingFromIPTask>
 800edc2:	4603      	mov	r3, r0
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d001      	beq.n	800edcc <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 800edc8:	2300      	movs	r3, #0
 800edca:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 800edcc:	69fb      	ldr	r3, [r7, #28]
 800edce:	2b00      	cmp	r3, #0
 800edd0:	d035      	beq.n	800ee3e <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800edd2:	683b      	ldr	r3, [r7, #0]
 800edd4:	f003 0310 	and.w	r3, r3, #16
 800edd8:	2b00      	cmp	r3, #0
 800edda:	d132      	bne.n	800ee42 <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800eddc:	2301      	movs	r3, #1
 800edde:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800ede0:	f107 0314 	add.w	r3, r7, #20
 800ede4:	4618      	mov	r0, r3
 800ede6:	f7f5 f8e7 	bl	8003fb8 <vTaskSetTimeOutState>
 800edea:	e00a      	b.n	800ee02 <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800edec:	f107 021c 	add.w	r2, r7, #28
 800edf0:	f107 0314 	add.w	r3, r7, #20
 800edf4:	4611      	mov	r1, r2
 800edf6:	4618      	mov	r0, r3
 800edf8:	f7f5 f916 	bl	8004028 <xTaskCheckForTimeOut>
 800edfc:	4603      	mov	r3, r0
 800edfe:	2b00      	cmp	r3, #0
 800ee00:	d121      	bne.n	800ee46 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 800ee02:	68fb      	ldr	r3, [r7, #12]
 800ee04:	6858      	ldr	r0, [r3, #4]
 800ee06:	69fb      	ldr	r3, [r7, #28]
 800ee08:	9300      	str	r3, [sp, #0]
 800ee0a:	2300      	movs	r3, #0
 800ee0c:	2201      	movs	r2, #1
 800ee0e:	2122      	movs	r1, #34	@ 0x22
 800ee10:	f7f3 f984 	bl	800211c <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800ee14:	6879      	ldr	r1, [r7, #4]
 800ee16:	68f8      	ldr	r0, [r7, #12]
 800ee18:	f7ff feba 	bl	800eb90 <prvTCPSendCheck>
 800ee1c:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 800ee1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ee20:	2b00      	cmp	r3, #0
 800ee22:	db12      	blt.n	800ee4a <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ee2a:	4618      	mov	r0, r3
 800ee2c:	f000 fe79 	bl	800fb22 <uxStreamBufferGetSpace>
 800ee30:	4603      	mov	r3, r0
 800ee32:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 800ee34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	f73f af6c 	bgt.w	800ed14 <prvTCPSendLoop+0x30>
 800ee3c:	e006      	b.n	800ee4c <prvTCPSendLoop+0x168>
                    break;
 800ee3e:	bf00      	nop
 800ee40:	e004      	b.n	800ee4c <prvTCPSendLoop+0x168>
                    break;
 800ee42:	bf00      	nop
 800ee44:	e002      	b.n	800ee4c <prvTCPSendLoop+0x168>
                    break;
 800ee46:	bf00      	nop
 800ee48:	e000      	b.n	800ee4c <prvTCPSendLoop+0x168>
                break;
 800ee4a:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 800ee4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800ee4e:	4618      	mov	r0, r3
 800ee50:	3738      	adds	r7, #56	@ 0x38
 800ee52:	46bd      	mov	sp, r7
 800ee54:	bd80      	pop	{r7, pc}
	...

0800ee58 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 800ee58:	b580      	push	{r7, lr}
 800ee5a:	b086      	sub	sp, #24
 800ee5c:	af00      	add	r7, sp, #0
 800ee5e:	60f8      	str	r0, [r7, #12]
 800ee60:	60b9      	str	r1, [r7, #8]
 800ee62:	607a      	str	r2, [r7, #4]
 800ee64:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ee66:	68fb      	ldr	r3, [r7, #12]
 800ee68:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800ee6a:	6879      	ldr	r1, [r7, #4]
 800ee6c:	6938      	ldr	r0, [r7, #16]
 800ee6e:	f7ff fe8f 	bl	800eb90 <prvTCPSendCheck>
 800ee72:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 800ee74:	697b      	ldr	r3, [r7, #20]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	dd24      	ble.n	800eec4 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 800ee7a:	683b      	ldr	r3, [r7, #0]
 800ee7c:	687a      	ldr	r2, [r7, #4]
 800ee7e:	68b9      	ldr	r1, [r7, #8]
 800ee80:	6938      	ldr	r0, [r7, #16]
 800ee82:	f7ff ff2f 	bl	800ece4 <prvTCPSendLoop>
 800ee86:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 800ee88:	697b      	ldr	r3, [r7, #20]
 800ee8a:	2b00      	cmp	r3, #0
 800ee8c:	d11a      	bne.n	800eec4 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 800ee8e:	693b      	ldr	r3, [r7, #16]
 800ee90:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ee94:	2b05      	cmp	r3, #5
 800ee96:	d903      	bls.n	800eea0 <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 800ee98:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ee9c:	617b      	str	r3, [r7, #20]
 800ee9e:	e011      	b.n	800eec4 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800eea0:	693b      	ldr	r3, [r7, #16]
 800eea2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800eea4:	2b17      	cmp	r3, #23
 800eea6:	d00a      	beq.n	800eebe <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 800eea8:	693b      	ldr	r3, [r7, #16]
 800eeaa:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800eeac:	4619      	mov	r1, r3
 800eeae:	693b      	ldr	r3, [r7, #16]
 800eeb0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800eeb2:	693b      	ldr	r3, [r7, #16]
 800eeb4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800eeb8:	4805      	ldr	r0, [pc, #20]	@ (800eed0 <FreeRTOS_send+0x78>)
 800eeba:	f011 fb67 	bl	802058c <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 800eebe:	f06f 031b 	mvn.w	r3, #27
 800eec2:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 800eec4:	697b      	ldr	r3, [r7, #20]
    }
 800eec6:	4618      	mov	r0, r3
 800eec8:	3718      	adds	r7, #24
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	bf00      	nop
 800eed0:	08024378 	.word	0x08024378

0800eed4 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
 800eedc:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800eee6:	2201      	movs	r2, #1
 800eee8:	2106      	movs	r1, #6
 800eeea:	68b8      	ldr	r0, [r7, #8]
 800eeec:	f7fe f860 	bl	800cfb0 <prvValidSocket>
 800eef0:	4603      	mov	r3, r0
 800eef2:	2b00      	cmp	r3, #0
 800eef4:	d103      	bne.n	800eefe <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800eef6:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800eefa:	60fb      	str	r3, [r7, #12]
 800eefc:	e056      	b.n	800efac <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 800eefe:	68bb      	ldr	r3, [r7, #8]
 800ef00:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d008      	beq.n	800ef1a <FreeRTOS_listen+0x46>
 800ef08:	68bb      	ldr	r3, [r7, #8]
 800ef0a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ef0e:	2b08      	cmp	r3, #8
 800ef10:	d003      	beq.n	800ef1a <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800ef12:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800ef16:	60fb      	str	r3, [r7, #12]
 800ef18:	e048      	b.n	800efac <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800ef1a:	6839      	ldr	r1, [r7, #0]
 800ef1c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800ef20:	f7fa fd78 	bl	8009a14 <FreeRTOS_min_int32>
 800ef24:	4603      	mov	r3, r0
 800ef26:	b29a      	uxth	r2, r3
 800ef28:	68bb      	ldr	r3, [r7, #8]
 800ef2a:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800ef2e:	68bb      	ldr	r3, [r7, #8]
 800ef30:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ef34:	f003 0308 	and.w	r3, r3, #8
 800ef38:	b2db      	uxtb	r3, r3
 800ef3a:	2b00      	cmp	r3, #0
 800ef3c:	d032      	beq.n	800efa4 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 800ef3e:	68bb      	ldr	r3, [r7, #8]
 800ef40:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	d005      	beq.n	800ef54 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 800ef48:	68bb      	ldr	r3, [r7, #8]
 800ef4a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ef4e:	4618      	mov	r0, r3
 800ef50:	f000 fe2b 	bl	800fbaa <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800ef54:	68bb      	ldr	r3, [r7, #8]
 800ef56:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d005      	beq.n	800ef6a <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 800ef5e:	68bb      	ldr	r3, [r7, #8]
 800ef60:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ef64:	4618      	mov	r0, r3
 800ef66:	f000 fe20 	bl	800fbaa <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	33aa      	adds	r3, #170	@ 0xaa
 800ef6e:	225a      	movs	r2, #90	@ 0x5a
 800ef70:	2100      	movs	r1, #0
 800ef72:	4618      	mov	r0, r3
 800ef74:	f011 fe33 	bl	8020bde <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800ef78:	68bb      	ldr	r3, [r7, #8]
 800ef7a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800ef7e:	22c0      	movs	r2, #192	@ 0xc0
 800ef80:	2100      	movs	r1, #0
 800ef82:	4618      	mov	r0, r3
 800ef84:	f011 fe2b 	bl	8020bde <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800ef88:	68bb      	ldr	r3, [r7, #8]
 800ef8a:	3368      	adds	r3, #104	@ 0x68
 800ef8c:	2204      	movs	r2, #4
 800ef8e:	2100      	movs	r1, #0
 800ef90:	4618      	mov	r0, r3
 800ef92:	f011 fe24 	bl	8020bde <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800ef96:	68ba      	ldr	r2, [r7, #8]
 800ef98:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800ef9c:	f043 0308 	orr.w	r3, r3, #8
 800efa0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 800efa4:	2101      	movs	r1, #1
 800efa6:	68b8      	ldr	r0, [r7, #8]
 800efa8:	f001 f8a2 	bl	80100f0 <vTCPStateChange>
        }

        return xResult;
 800efac:	68fb      	ldr	r3, [r7, #12]
    }
 800efae:	4618      	mov	r0, r3
 800efb0:	3710      	adds	r7, #16
 800efb2:	46bd      	mov	sp, r7
 800efb4:	bd80      	pop	{r7, pc}

0800efb6 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 800efb6:	b580      	push	{r7, lr}
 800efb8:	b084      	sub	sp, #16
 800efba:	af00      	add	r7, sp, #0
 800efbc:	6078      	str	r0, [r7, #4]
 800efbe:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800efc0:	687b      	ldr	r3, [r7, #4]
 800efc2:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800efc4:	2201      	movs	r2, #1
 800efc6:	2106      	movs	r1, #6
 800efc8:	68b8      	ldr	r0, [r7, #8]
 800efca:	f7fd fff1 	bl	800cfb0 <prvValidSocket>
 800efce:	4603      	mov	r3, r0
 800efd0:	2b00      	cmp	r3, #0
 800efd2:	d103      	bne.n	800efdc <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800efd4:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800efd8:	60fb      	str	r3, [r7, #12]
 800efda:	e018      	b.n	800f00e <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 800efdc:	68bb      	ldr	r3, [r7, #8]
 800efde:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800efe2:	2b05      	cmp	r3, #5
 800efe4:	d003      	beq.n	800efee <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800efe6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800efea:	60fb      	str	r3, [r7, #12]
 800efec:	e00f      	b.n	800f00e <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 800efee:	68ba      	ldr	r2, [r7, #8]
 800eff0:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800eff4:	f043 0320 	orr.w	r3, r3, #32
 800eff8:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 800effc:	68bb      	ldr	r3, [r7, #8]
 800effe:	2201      	movs	r2, #1
 800f000:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f004:	2006      	movs	r0, #6
 800f006:	f7f9 fbfd 	bl	8008804 <xSendEventToIPTask>
            xResult = 0;
 800f00a:	2300      	movs	r3, #0
 800f00c:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 800f00e:	68fb      	ldr	r3, [r7, #12]
    }
 800f010:	4618      	mov	r0, r3
 800f012:	3710      	adds	r7, #16
 800f014:	46bd      	mov	sp, r7
 800f016:	bd80      	pop	{r7, pc}

0800f018 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800f018:	b580      	push	{r7, lr}
 800f01a:	b08a      	sub	sp, #40	@ 0x28
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800f020:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f024:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 800f026:	f7f4 fc1d 	bl	8003864 <xTaskGetTickCount>
 800f02a:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800f02c:	4b32      	ldr	r3, [pc, #200]	@ (800f0f8 <xTCPTimerCheck+0xe0>)
 800f02e:	681b      	ldr	r3, [r3, #0]
 800f030:	69ba      	ldr	r2, [r7, #24]
 800f032:	1ad3      	subs	r3, r2, r3
 800f034:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f036:	4b31      	ldr	r3, [pc, #196]	@ (800f0fc <xTCPTimerCheck+0xe4>)
 800f038:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800f03a:	4b31      	ldr	r3, [pc, #196]	@ (800f100 <xTCPTimerCheck+0xe8>)
 800f03c:	68db      	ldr	r3, [r3, #12]
 800f03e:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800f040:	4a2d      	ldr	r2, [pc, #180]	@ (800f0f8 <xTCPTimerCheck+0xe0>)
 800f042:	69bb      	ldr	r3, [r7, #24]
 800f044:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800f046:	6a3b      	ldr	r3, [r7, #32]
 800f048:	2b00      	cmp	r3, #0
 800f04a:	d14b      	bne.n	800f0e4 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 800f04c:	2301      	movs	r3, #1
 800f04e:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800f050:	e048      	b.n	800f0e4 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f052:	69fb      	ldr	r3, [r7, #28]
 800f054:	68db      	ldr	r3, [r3, #12]
 800f056:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800f058:	69fb      	ldr	r3, [r7, #28]
 800f05a:	685b      	ldr	r3, [r3, #4]
 800f05c:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800f05e:	693b      	ldr	r3, [r7, #16]
 800f060:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f064:	2b00      	cmp	r3, #0
 800f066:	d03a      	beq.n	800f0de <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800f068:	693b      	ldr	r3, [r7, #16]
 800f06a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f06e:	461a      	mov	r2, r3
 800f070:	6a3b      	ldr	r3, [r7, #32]
 800f072:	4293      	cmp	r3, r2
 800f074:	d20a      	bcs.n	800f08c <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800f076:	693b      	ldr	r3, [r7, #16]
 800f078:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 800f07c:	6a3b      	ldr	r3, [r7, #32]
 800f07e:	b29b      	uxth	r3, r3
 800f080:	1ad3      	subs	r3, r2, r3
 800f082:	b29a      	uxth	r2, r3
 800f084:	693b      	ldr	r3, [r7, #16]
 800f086:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 800f08a:	e00a      	b.n	800f0a2 <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800f08c:	693b      	ldr	r3, [r7, #16]
 800f08e:	2200      	movs	r2, #0
 800f090:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 800f094:	6938      	ldr	r0, [r7, #16]
 800f096:	f000 ff33 	bl	800ff00 <xTCPSocketCheck>
 800f09a:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800f09c:	68fb      	ldr	r3, [r7, #12]
 800f09e:	2b00      	cmp	r3, #0
 800f0a0:	db1f      	blt.n	800f0e2 <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800f0a2:	693b      	ldr	r3, [r7, #16]
 800f0a4:	681b      	ldr	r3, [r3, #0]
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d008      	beq.n	800f0bc <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d003      	beq.n	800f0b8 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800f0b0:	6938      	ldr	r0, [r7, #16]
 800f0b2:	f7ff fa8e 	bl	800e5d2 <vSocketWakeUpUser>
 800f0b6:	e001      	b.n	800f0bc <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800f0b8:	2300      	movs	r3, #0
 800f0ba:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800f0bc:	693b      	ldr	r3, [r7, #16]
 800f0be:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f0c2:	2b00      	cmp	r3, #0
 800f0c4:	d00e      	beq.n	800f0e4 <xTCPTimerCheck+0xcc>
 800f0c6:	693b      	ldr	r3, [r7, #16]
 800f0c8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f0cc:	461a      	mov	r2, r3
 800f0ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f0d0:	4293      	cmp	r3, r2
 800f0d2:	d907      	bls.n	800f0e4 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800f0d4:	693b      	ldr	r3, [r7, #16]
 800f0d6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f0da:	627b      	str	r3, [r7, #36]	@ 0x24
 800f0dc:	e002      	b.n	800f0e4 <xTCPTimerCheck+0xcc>
                continue;
 800f0de:	bf00      	nop
 800f0e0:	e000      	b.n	800f0e4 <xTCPTimerCheck+0xcc>
                    continue;
 800f0e2:	bf00      	nop
        while( pxIterator != pxEnd )
 800f0e4:	69fa      	ldr	r2, [r7, #28]
 800f0e6:	697b      	ldr	r3, [r7, #20]
 800f0e8:	429a      	cmp	r2, r3
 800f0ea:	d1b2      	bne.n	800f052 <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800f0ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	3728      	adds	r7, #40	@ 0x28
 800f0f2:	46bd      	mov	sp, r7
 800f0f4:	bd80      	pop	{r7, pc}
 800f0f6:	bf00      	nop
 800f0f8:	200012c4 	.word	0x200012c4
 800f0fc:	200012b8 	.word	0x200012b8
 800f100:	200012b0 	.word	0x200012b0

0800f104 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800f104:	b082      	sub	sp, #8
 800f106:	b580      	push	{r7, lr}
 800f108:	b088      	sub	sp, #32
 800f10a:	af00      	add	r7, sp, #0
 800f10c:	6078      	str	r0, [r7, #4]
 800f10e:	6039      	str	r1, [r7, #0]
 800f110:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f114:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800f118:	2300      	movs	r3, #0
 800f11a:	61bb      	str	r3, [r7, #24]
 800f11c:	2300      	movs	r3, #0
 800f11e:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f120:	4b23      	ldr	r3, [pc, #140]	@ (800f1b0 <pxTCPSocketLookup+0xac>)
 800f122:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800f124:	693b      	ldr	r3, [r7, #16]
 800f126:	685b      	ldr	r3, [r3, #4]
 800f128:	61fb      	str	r3, [r7, #28]
 800f12a:	e02e      	b.n	800f18a <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f12c:	69fb      	ldr	r3, [r7, #28]
 800f12e:	68db      	ldr	r3, [r3, #12]
 800f130:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800f132:	68fb      	ldr	r3, [r7, #12]
 800f134:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800f136:	683b      	ldr	r3, [r7, #0]
 800f138:	b29b      	uxth	r3, r3
 800f13a:	429a      	cmp	r2, r3
 800f13c:	d122      	bne.n	800f184 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800f13e:	68fb      	ldr	r3, [r7, #12]
 800f140:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f144:	2b01      	cmp	r3, #1
 800f146:	d102      	bne.n	800f14e <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	617b      	str	r3, [r7, #20]
 800f14c:	e01a      	b.n	800f184 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 800f14e:	68fb      	ldr	r3, [r7, #12]
 800f150:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f154:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f156:	b29b      	uxth	r3, r3
 800f158:	429a      	cmp	r2, r3
 800f15a:	d113      	bne.n	800f184 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 800f15c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f15e:	2b00      	cmp	r3, #0
 800f160:	d006      	beq.n	800f170 <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 800f162:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f166:	68f8      	ldr	r0, [r7, #12]
 800f168:	f7fb f9d4 	bl	800a514 <pxTCPSocketLookup_IPv6>
 800f16c:	61b8      	str	r0, [r7, #24]
 800f16e:	e006      	b.n	800f17e <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 800f170:	68fb      	ldr	r3, [r7, #12]
 800f172:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f174:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f176:	429a      	cmp	r2, r3
 800f178:	d101      	bne.n	800f17e <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 800f17a:	68fb      	ldr	r3, [r7, #12]
 800f17c:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 800f17e:	69bb      	ldr	r3, [r7, #24]
 800f180:	2b00      	cmp	r3, #0
 800f182:	d107      	bne.n	800f194 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 800f184:	69fb      	ldr	r3, [r7, #28]
 800f186:	685b      	ldr	r3, [r3, #4]
 800f188:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 800f18a:	69fa      	ldr	r2, [r7, #28]
 800f18c:	693b      	ldr	r3, [r7, #16]
 800f18e:	429a      	cmp	r2, r3
 800f190:	d1cc      	bne.n	800f12c <pxTCPSocketLookup+0x28>
 800f192:	e000      	b.n	800f196 <pxTCPSocketLookup+0x92>
                    {
                        break;
 800f194:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800f196:	69bb      	ldr	r3, [r7, #24]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	d101      	bne.n	800f1a0 <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800f19c:	697b      	ldr	r3, [r7, #20]
 800f19e:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 800f1a0:	69bb      	ldr	r3, [r7, #24]
    }
 800f1a2:	4618      	mov	r0, r3
 800f1a4:	3720      	adds	r7, #32
 800f1a6:	46bd      	mov	sp, r7
 800f1a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f1ac:	b002      	add	sp, #8
 800f1ae:	4770      	bx	lr
 800f1b0:	200012b8 	.word	0x200012b8

0800f1b4 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800f1b4:	b580      	push	{r7, lr}
 800f1b6:	b088      	sub	sp, #32
 800f1b8:	af00      	add	r7, sp, #0
 800f1ba:	6078      	str	r0, [r7, #4]
 800f1bc:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800f1be:	683b      	ldr	r3, [r7, #0]
 800f1c0:	2b00      	cmp	r3, #0
 800f1c2:	d048      	beq.n	800f256 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 800f1c4:	2314      	movs	r3, #20
 800f1c6:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 800f1c8:	2350      	movs	r3, #80	@ 0x50
 800f1ca:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f1d2:	687a      	ldr	r2, [r7, #4]
 800f1d4:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 800f1d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f1dc:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 800f1de:	693b      	ldr	r3, [r7, #16]
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d00f      	beq.n	800f204 <prvTCPCreateStream+0x50>
 800f1e4:	693b      	ldr	r3, [r7, #16]
 800f1e6:	2b04      	cmp	r3, #4
 800f1e8:	d80c      	bhi.n	800f204 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 800f1ea:	693b      	ldr	r3, [r7, #16]
 800f1ec:	3b01      	subs	r3, #1
 800f1ee:	4a40      	ldr	r2, [pc, #256]	@ (800f2f0 <prvTCPCreateStream+0x13c>)
 800f1f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f1f4:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 800f1f6:	693b      	ldr	r3, [r7, #16]
 800f1f8:	3b01      	subs	r3, #1
 800f1fa:	4a3d      	ldr	r2, [pc, #244]	@ (800f2f0 <prvTCPCreateStream+0x13c>)
 800f1fc:	00db      	lsls	r3, r3, #3
 800f1fe:	4413      	add	r3, r2
 800f200:	685b      	ldr	r3, [r3, #4]
 800f202:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f20a:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 800f20c:	687b      	ldr	r3, [r7, #4]
 800f20e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f212:	2b00      	cmp	r3, #0
 800f214:	d10c      	bne.n	800f230 <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f21c:	69ba      	ldr	r2, [r7, #24]
 800f21e:	fb02 f303 	mul.w	r3, r2, r3
 800f222:	4a34      	ldr	r2, [pc, #208]	@ (800f2f4 <prvTCPCreateStream+0x140>)
 800f224:	fba2 2303 	umull	r2, r3, r2, r3
 800f228:	095a      	lsrs	r2, r3, #5
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 800f230:	687b      	ldr	r3, [r7, #4]
 800f232:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f236:	2b00      	cmp	r3, #0
 800f238:	d111      	bne.n	800f25e <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800f23a:	687b      	ldr	r3, [r7, #4]
 800f23c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f240:	697a      	ldr	r2, [r7, #20]
 800f242:	fb02 f303 	mul.w	r3, r2, r3
 800f246:	4a2b      	ldr	r2, [pc, #172]	@ (800f2f4 <prvTCPCreateStream+0x140>)
 800f248:	fba2 2303 	umull	r2, r3, r2, r3
 800f24c:	095a      	lsrs	r2, r3, #5
 800f24e:	687b      	ldr	r3, [r7, #4]
 800f250:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800f254:	e003      	b.n	800f25e <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800f256:	687b      	ldr	r3, [r7, #4]
 800f258:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f25c:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800f25e:	69fb      	ldr	r3, [r7, #28]
 800f260:	3304      	adds	r3, #4
 800f262:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800f264:	69fb      	ldr	r3, [r7, #28]
 800f266:	f023 0303 	bic.w	r3, r3, #3
 800f26a:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800f26c:	69fb      	ldr	r3, [r7, #28]
 800f26e:	3314      	adds	r3, #20
 800f270:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 800f272:	68f8      	ldr	r0, [r7, #12]
 800f274:	f7f6 f966 	bl	8005544 <pvPortMalloc>
 800f278:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 800f27a:	68bb      	ldr	r3, [r7, #8]
 800f27c:	2b00      	cmp	r3, #0
 800f27e:	d10e      	bne.n	800f29e <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 800f280:	481d      	ldr	r0, [pc, #116]	@ (800f2f8 <prvTCPCreateStream+0x144>)
 800f282:	f011 f983 	bl	802058c <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800f286:	687a      	ldr	r2, [r7, #4]
 800f288:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f28c:	f043 0308 	orr.w	r3, r3, #8
 800f290:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800f294:	2108      	movs	r1, #8
 800f296:	6878      	ldr	r0, [r7, #4]
 800f298:	f000 ff2a 	bl	80100f0 <vTCPStateChange>
 800f29c:	e022      	b.n	800f2e4 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800f29e:	2214      	movs	r2, #20
 800f2a0:	2100      	movs	r1, #0
 800f2a2:	68b8      	ldr	r0, [r7, #8]
 800f2a4:	f011 fc9b 	bl	8020bde <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800f2a8:	68bb      	ldr	r3, [r7, #8]
 800f2aa:	69fa      	ldr	r2, [r7, #28]
 800f2ac:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 800f2ae:	4b13      	ldr	r3, [pc, #76]	@ (800f2fc <prvTCPCreateStream+0x148>)
 800f2b0:	681b      	ldr	r3, [r3, #0]
 800f2b2:	2b00      	cmp	r3, #0
 800f2b4:	d00a      	beq.n	800f2cc <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 800f2b6:	683b      	ldr	r3, [r7, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d001      	beq.n	800f2c0 <prvTCPCreateStream+0x10c>
 800f2bc:	2152      	movs	r1, #82	@ 0x52
 800f2be:	e000      	b.n	800f2c2 <prvTCPCreateStream+0x10e>
 800f2c0:	2154      	movs	r1, #84	@ 0x54
 800f2c2:	68fb      	ldr	r3, [r7, #12]
 800f2c4:	69fa      	ldr	r2, [r7, #28]
 800f2c6:	480e      	ldr	r0, [pc, #56]	@ (800f300 <prvTCPCreateStream+0x14c>)
 800f2c8:	f011 f960 	bl	802058c <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 800f2cc:	683b      	ldr	r3, [r7, #0]
 800f2ce:	2b00      	cmp	r3, #0
 800f2d0:	d004      	beq.n	800f2dc <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	68ba      	ldr	r2, [r7, #8]
 800f2d6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800f2da:	e003      	b.n	800f2e4 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800f2dc:	687b      	ldr	r3, [r7, #4]
 800f2de:	68ba      	ldr	r2, [r7, #8]
 800f2e0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 800f2e4:	68bb      	ldr	r3, [r7, #8]
    }
 800f2e6:	4618      	mov	r0, r3
 800f2e8:	3720      	adds	r7, #32
 800f2ea:	46bd      	mov	sp, r7
 800f2ec:	bd80      	pop	{r7, pc}
 800f2ee:	bf00      	nop
 800f2f0:	08025ca4 	.word	0x08025ca4
 800f2f4:	51eb851f 	.word	0x51eb851f
 800f2f8:	080243a0 	.word	0x080243a0
 800f2fc:	200012f4 	.word	0x200012f4
 800f300:	080243c4 	.word	0x080243c4

0800f304 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 800f304:	b580      	push	{r7, lr}
 800f306:	b08a      	sub	sp, #40	@ 0x28
 800f308:	af02      	add	r7, sp, #8
 800f30a:	60f8      	str	r0, [r7, #12]
 800f30c:	60b9      	str	r1, [r7, #8]
 800f30e:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 800f310:	68bb      	ldr	r3, [r7, #8]
 800f312:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 800f314:	2300      	movs	r3, #0
 800f316:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 800f318:	69fb      	ldr	r3, [r7, #28]
 800f31a:	2b00      	cmp	r3, #0
 800f31c:	d006      	beq.n	800f32c <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 800f31e:	69fb      	ldr	r3, [r7, #28]
 800f320:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 800f322:	687b      	ldr	r3, [r7, #4]
 800f324:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 800f326:	2300      	movs	r3, #0
 800f328:	61fb      	str	r3, [r7, #28]
 800f32a:	e009      	b.n	800f340 <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 800f32c:	68fb      	ldr	r3, [r7, #12]
 800f32e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f332:	f107 0214 	add.w	r2, r7, #20
 800f336:	4611      	mov	r1, r2
 800f338:	4618      	mov	r0, r3
 800f33a:	f000 fc92 	bl	800fc62 <uxStreamBufferGetPtr>
 800f33e:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 800f340:	69bb      	ldr	r3, [r7, #24]
 800f342:	2b00      	cmp	r3, #0
 800f344:	d011      	beq.n	800f36a <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f34c:	6979      	ldr	r1, [r7, #20]
 800f34e:	69ba      	ldr	r2, [r7, #24]
 800f350:	68f8      	ldr	r0, [r7, #12]
 800f352:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 800f354:	68fb      	ldr	r3, [r7, #12]
 800f356:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800f35a:	2300      	movs	r3, #0
 800f35c:	9300      	str	r3, [sp, #0]
 800f35e:	69bb      	ldr	r3, [r7, #24]
 800f360:	2200      	movs	r2, #0
 800f362:	2100      	movs	r1, #0
 800f364:	f000 fd1d 	bl	800fda2 <uxStreamBufferGet>
        {
 800f368:	e7d4      	b.n	800f314 <vTCPAddRxdata_Callback+0x10>
        }
    }
 800f36a:	bf00      	nop
 800f36c:	3720      	adds	r7, #32
 800f36e:	46bd      	mov	sp, r7
 800f370:	bd80      	pop	{r7, pc}

0800f372 <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 800f372:	b580      	push	{r7, lr}
 800f374:	b084      	sub	sp, #16
 800f376:	af00      	add	r7, sp, #0
 800f378:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f380:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f384:	b2db      	uxtb	r3, r3
 800f386:	2b00      	cmp	r3, #0
 800f388:	d121      	bne.n	800f3ce <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f390:	4618      	mov	r0, r3
 800f392:	f000 fbd7 	bl	800fb44 <uxStreamBufferFrontSpace>
 800f396:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f39e:	68fa      	ldr	r2, [r7, #12]
 800f3a0:	429a      	cmp	r2, r3
 800f3a2:	d814      	bhi.n	800f3ce <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800f3a4:	687a      	ldr	r2, [r7, #4]
 800f3a6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f3aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f3ae:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f3b2:	687a      	ldr	r2, [r7, #4]
 800f3b4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f3b8:	f043 0301 	orr.w	r3, r3, #1
 800f3bc:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	2201      	movs	r2, #1
 800f3c4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f3c8:	2006      	movs	r0, #6
 800f3ca:	f7f9 fa1b 	bl	8008804 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	f043 0201 	orr.w	r2, r3, #1
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800f3da:	687b      	ldr	r3, [r7, #4]
 800f3dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3de:	f003 0301 	and.w	r3, r3, #1
 800f3e2:	2b00      	cmp	r3, #0
 800f3e4:	d005      	beq.n	800f3f2 <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800f3e6:	687b      	ldr	r3, [r7, #4]
 800f3e8:	681b      	ldr	r3, [r3, #0]
 800f3ea:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f3ee:	687b      	ldr	r3, [r7, #4]
 800f3f0:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 800f3f2:	bf00      	nop
 800f3f4:	3710      	adds	r7, #16
 800f3f6:	46bd      	mov	sp, r7
 800f3f8:	bd80      	pop	{r7, pc}
	...

0800f3fc <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800f3fc:	b5b0      	push	{r4, r5, r7, lr}
 800f3fe:	b08c      	sub	sp, #48	@ 0x30
 800f400:	af04      	add	r7, sp, #16
 800f402:	60f8      	str	r0, [r7, #12]
 800f404:	60b9      	str	r1, [r7, #8]
 800f406:	607a      	str	r2, [r7, #4]
 800f408:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800f40a:	68fb      	ldr	r3, [r7, #12]
 800f40c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f410:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800f412:	2300      	movs	r3, #0
 800f414:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f41c:	2b00      	cmp	r3, #0
 800f41e:	d001      	beq.n	800f424 <lTCPAddRxdata+0x28>
 800f420:	2301      	movs	r3, #1
 800f422:	e000      	b.n	800f426 <lTCPAddRxdata+0x2a>
 800f424:	2300      	movs	r3, #0
 800f426:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 800f428:	2300      	movs	r3, #0
 800f42a:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800f42c:	69fb      	ldr	r3, [r7, #28]
 800f42e:	2b00      	cmp	r3, #0
 800f430:	d10a      	bne.n	800f448 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800f432:	2101      	movs	r1, #1
 800f434:	68f8      	ldr	r0, [r7, #12]
 800f436:	f7ff febd 	bl	800f1b4 <prvTCPCreateStream>
 800f43a:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800f43c:	69fb      	ldr	r3, [r7, #28]
 800f43e:	2b00      	cmp	r3, #0
 800f440:	d102      	bne.n	800f448 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 800f442:	f04f 33ff 	mov.w	r3, #4294967295
 800f446:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800f448:	69bb      	ldr	r3, [r7, #24]
 800f44a:	2b00      	cmp	r3, #0
 800f44c:	db41      	blt.n	800f4d2 <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 800f44e:	693b      	ldr	r3, [r7, #16]
 800f450:	2b00      	cmp	r3, #0
 800f452:	d00f      	beq.n	800f474 <lTCPAddRxdata+0x78>
 800f454:	69f8      	ldr	r0, [r7, #28]
 800f456:	f000 fb86 	bl	800fb66 <uxStreamBufferGetSize>
 800f45a:	4603      	mov	r3, r0
 800f45c:	2b00      	cmp	r3, #0
 800f45e:	d109      	bne.n	800f474 <lTCPAddRxdata+0x78>
 800f460:	68bb      	ldr	r3, [r7, #8]
 800f462:	2b00      	cmp	r3, #0
 800f464:	d106      	bne.n	800f474 <lTCPAddRxdata+0x78>
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d003      	beq.n	800f474 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 800f470:	2300      	movs	r3, #0
 800f472:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800f474:	683b      	ldr	r3, [r7, #0]
 800f476:	687a      	ldr	r2, [r7, #4]
 800f478:	68b9      	ldr	r1, [r7, #8]
 800f47a:	69f8      	ldr	r0, [r7, #28]
 800f47c:	f000 fc11 	bl	800fca2 <uxStreamBufferAdd>
 800f480:	4603      	mov	r3, r0
 800f482:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 800f484:	683b      	ldr	r3, [r7, #0]
 800f486:	69ba      	ldr	r2, [r7, #24]
 800f488:	429a      	cmp	r2, r3
 800f48a:	d013      	beq.n	800f4b4 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 800f48c:	69fb      	ldr	r3, [r7, #28]
 800f48e:	681c      	ldr	r4, [r3, #0]
 800f490:	69fb      	ldr	r3, [r7, #28]
 800f492:	689d      	ldr	r5, [r3, #8]
 800f494:	69f8      	ldr	r0, [r7, #28]
 800f496:	f000 fb55 	bl	800fb44 <uxStreamBufferFrontSpace>
 800f49a:	4602      	mov	r2, r0
 800f49c:	69fb      	ldr	r3, [r7, #28]
 800f49e:	68db      	ldr	r3, [r3, #12]
 800f4a0:	9303      	str	r3, [sp, #12]
 800f4a2:	9202      	str	r2, [sp, #8]
 800f4a4:	9501      	str	r5, [sp, #4]
 800f4a6:	9400      	str	r4, [sp, #0]
 800f4a8:	683b      	ldr	r3, [r7, #0]
 800f4aa:	69ba      	ldr	r2, [r7, #24]
 800f4ac:	68b9      	ldr	r1, [r7, #8]
 800f4ae:	480b      	ldr	r0, [pc, #44]	@ (800f4dc <lTCPAddRxdata+0xe0>)
 800f4b0:	f011 f86c 	bl	802058c <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800f4b4:	68bb      	ldr	r3, [r7, #8]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d10b      	bne.n	800f4d2 <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 800f4ba:	693b      	ldr	r3, [r7, #16]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d005      	beq.n	800f4cc <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 800f4c0:	683a      	ldr	r2, [r7, #0]
 800f4c2:	6979      	ldr	r1, [r7, #20]
 800f4c4:	68f8      	ldr	r0, [r7, #12]
 800f4c6:	f7ff ff1d 	bl	800f304 <vTCPAddRxdata_Callback>
 800f4ca:	e002      	b.n	800f4d2 <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 800f4cc:	68f8      	ldr	r0, [r7, #12]
 800f4ce:	f7ff ff50 	bl	800f372 <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 800f4d2:	69bb      	ldr	r3, [r7, #24]
    }
 800f4d4:	4618      	mov	r0, r3
 800f4d6:	3720      	adds	r7, #32
 800f4d8:	46bd      	mov	sp, r7
 800f4da:	bdb0      	pop	{r4, r5, r7, pc}
 800f4dc:	08024400 	.word	0x08024400

0800f4e0 <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800f4e0:	b580      	push	{r7, lr}
 800f4e2:	b084      	sub	sp, #16
 800f4e4:	af00      	add	r7, sp, #0
 800f4e6:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f4e8:	687b      	ldr	r3, [r7, #4]
 800f4ea:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f4ec:	68bb      	ldr	r3, [r7, #8]
 800f4ee:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f4f2:	2b06      	cmp	r3, #6
 800f4f4:	d003      	beq.n	800f4fe <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f4f6:	f06f 0315 	mvn.w	r3, #21
 800f4fa:	60fb      	str	r3, [r7, #12]
 800f4fc:	e011      	b.n	800f522 <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800f4fe:	68bb      	ldr	r3, [r7, #8]
 800f500:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f504:	2b00      	cmp	r3, #0
 800f506:	d008      	beq.n	800f51a <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800f508:	68bb      	ldr	r3, [r7, #8]
 800f50a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f50e:	4618      	mov	r0, r3
 800f510:	f000 fb07 	bl	800fb22 <uxStreamBufferGetSpace>
 800f514:	4603      	mov	r3, r0
 800f516:	60fb      	str	r3, [r7, #12]
 800f518:	e003      	b.n	800f522 <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800f51a:	68bb      	ldr	r3, [r7, #8]
 800f51c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f520:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800f522:	68fb      	ldr	r3, [r7, #12]
    }
 800f524:	4618      	mov	r0, r3
 800f526:	3710      	adds	r7, #16
 800f528:	46bd      	mov	sp, r7
 800f52a:	bd80      	pop	{r7, pc}

0800f52c <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 800f52c:	b580      	push	{r7, lr}
 800f52e:	b084      	sub	sp, #16
 800f530:	af00      	add	r7, sp, #0
 800f532:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f538:	68bb      	ldr	r3, [r7, #8]
 800f53a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f53e:	2b06      	cmp	r3, #6
 800f540:	d003      	beq.n	800f54a <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f542:	f06f 0315 	mvn.w	r3, #21
 800f546:	60fb      	str	r3, [r7, #12]
 800f548:	e00f      	b.n	800f56a <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800f54a:	68bb      	ldr	r3, [r7, #8]
 800f54c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f550:	2b00      	cmp	r3, #0
 800f552:	d008      	beq.n	800f566 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 800f554:	68bb      	ldr	r3, [r7, #8]
 800f556:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f55a:	4618      	mov	r0, r3
 800f55c:	f000 fb03 	bl	800fb66 <uxStreamBufferGetSize>
 800f560:	4603      	mov	r3, r0
 800f562:	60fb      	str	r3, [r7, #12]
 800f564:	e001      	b.n	800f56a <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 800f566:	2300      	movs	r3, #0
 800f568:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800f56a:	68fb      	ldr	r3, [r7, #12]
    }
 800f56c:	4618      	mov	r0, r3
 800f56e:	3710      	adds	r7, #16
 800f570:	46bd      	mov	sp, r7
 800f572:	bd80      	pop	{r7, pc}

0800f574 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 800f574:	b480      	push	{r7}
 800f576:	b085      	sub	sp, #20
 800f578:	af00      	add	r7, sp, #0
 800f57a:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f57c:	687b      	ldr	r3, [r7, #4]
 800f57e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800f580:	2300      	movs	r3, #0
 800f582:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f584:	68bb      	ldr	r3, [r7, #8]
 800f586:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f58a:	2b06      	cmp	r3, #6
 800f58c:	d003      	beq.n	800f596 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f58e:	f06f 0315 	mvn.w	r3, #21
 800f592:	60fb      	str	r3, [r7, #12]
 800f594:	e00b      	b.n	800f5ae <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 800f596:	68bb      	ldr	r3, [r7, #8]
 800f598:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f59c:	2b04      	cmp	r3, #4
 800f59e:	d906      	bls.n	800f5ae <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 800f5a0:	68bb      	ldr	r3, [r7, #8]
 800f5a2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f5a6:	2b07      	cmp	r3, #7
 800f5a8:	d801      	bhi.n	800f5ae <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 800f5aa:	2301      	movs	r3, #1
 800f5ac:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
    }
 800f5b0:	4618      	mov	r0, r3
 800f5b2:	3714      	adds	r7, #20
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr

0800f5bc <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b084      	sub	sp, #16
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f5c8:	68bb      	ldr	r3, [r7, #8]
 800f5ca:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f5ce:	2b06      	cmp	r3, #6
 800f5d0:	d003      	beq.n	800f5da <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f5d2:	f06f 0315 	mvn.w	r3, #21
 800f5d6:	60fb      	str	r3, [r7, #12]
 800f5d8:	e00f      	b.n	800f5fa <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800f5da:	68bb      	ldr	r3, [r7, #8]
 800f5dc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f5e0:	2b00      	cmp	r3, #0
 800f5e2:	d008      	beq.n	800f5f6 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800f5e4:	68bb      	ldr	r3, [r7, #8]
 800f5e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f5ea:	4618      	mov	r0, r3
 800f5ec:	f000 fabb 	bl	800fb66 <uxStreamBufferGetSize>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	60fb      	str	r3, [r7, #12]
 800f5f4:	e001      	b.n	800f5fa <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 800f5f6:	2300      	movs	r3, #0
 800f5f8:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800f5fa:	68fb      	ldr	r3, [r7, #12]
    }
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3710      	adds	r7, #16
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}

0800f604 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 800f604:	b480      	push	{r7}
 800f606:	b085      	sub	sp, #20
 800f608:	af00      	add	r7, sp, #0
 800f60a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 800f60c:	2300      	movs	r3, #0
 800f60e:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f616:	d004      	beq.n	800f622 <xSocketValid+0x1e>
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	2b00      	cmp	r3, #0
 800f61c:	d001      	beq.n	800f622 <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 800f61e:	2301      	movs	r3, #1
 800f620:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 800f622:	68fb      	ldr	r3, [r7, #12]
}
 800f624:	4618      	mov	r0, r3
 800f626:	3714      	adds	r7, #20
 800f628:	46bd      	mov	sp, r7
 800f62a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f62e:	4770      	bx	lr

0800f630 <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 800f630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f634:	b09c      	sub	sp, #112	@ 0x70
 800f636:	af08      	add	r7, sp, #32
 800f638:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 800f63a:	2320      	movs	r3, #32
 800f63c:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800f63e:	f7f4 f911 	bl	8003864 <xTaskGetTickCount>
 800f642:	4602      	mov	r2, r0
 800f644:	687b      	ldr	r3, [r7, #4]
 800f646:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800f64a:	1ad3      	subs	r3, r2, r3
 800f64c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 800f64e:	2300      	movs	r3, #0
 800f650:	60fb      	str	r3, [r7, #12]
 800f652:	f107 0310 	add.w	r3, r7, #16
 800f656:	2200      	movs	r2, #0
 800f658:	601a      	str	r2, [r3, #0]
 800f65a:	605a      	str	r2, [r3, #4]
 800f65c:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f664:	2b01      	cmp	r3, #1
 800f666:	d11f      	bne.n	800f6a8 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 800f668:	687b      	ldr	r3, [r7, #4]
 800f66a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800f66e:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 800f670:	687b      	ldr	r3, [r7, #4]
 800f672:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800f676:	f107 000c 	add.w	r0, r7, #12
 800f67a:	9300      	str	r3, [sp, #0]
 800f67c:	4613      	mov	r3, r2
 800f67e:	4a3b      	ldr	r2, [pc, #236]	@ (800f76c <vTCPNetStat_TCPSocket+0x13c>)
 800f680:	2110      	movs	r1, #16
 800f682:	f011 ffaf 	bl	80215e4 <snprintf>
 800f686:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800f688:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f68a:	2b00      	cmp	r3, #0
 800f68c:	da04      	bge.n	800f698 <vTCPNetStat_TCPSocket+0x68>
 800f68e:	f241 61df 	movw	r1, #5855	@ 0x16df
 800f692:	4837      	ldr	r0, [pc, #220]	@ (800f770 <vTCPNetStat_TCPSocket+0x140>)
 800f694:	f7f1 fd4c 	bl	8001130 <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800f698:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800f69a:	2b0f      	cmp	r3, #15
 800f69c:	dd04      	ble.n	800f6a8 <vTCPNetStat_TCPSocket+0x78>
 800f69e:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 800f6a2:	4833      	ldr	r0, [pc, #204]	@ (800f770 <vTCPNetStat_TCPSocket+0x140>)
 800f6a4:	f7f1 fd44 	bl	8001130 <vAssertCalled>
        }

        if( age > 999999U )
 800f6a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f6aa:	4a32      	ldr	r2, [pc, #200]	@ (800f774 <vTCPNetStat_TCPSocket+0x144>)
 800f6ac:	4293      	cmp	r3, r2
 800f6ae:	d901      	bls.n	800f6b4 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 800f6b0:	4b30      	ldr	r3, [pc, #192]	@ (800f774 <vTCPNetStat_TCPSocket+0x144>)
 800f6b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800f6b4:	687b      	ldr	r3, [r7, #4]
 800f6b6:	7a1b      	ldrb	r3, [r3, #8]
 800f6b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800f6bc:	b2db      	uxtb	r3, r3
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d002      	beq.n	800f6c8 <vTCPNetStat_TCPSocket+0x98>
 800f6c2:	2b01      	cmp	r3, #1
 800f6c4:	d009      	beq.n	800f6da <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 800f6c6:	e011      	b.n	800f6ec <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800f6c8:	687b      	ldr	r3, [r7, #4]
 800f6ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f6cc:	f107 001c 	add.w	r0, r7, #28
 800f6d0:	4a29      	ldr	r2, [pc, #164]	@ (800f778 <vTCPNetStat_TCPSocket+0x148>)
 800f6d2:	2128      	movs	r1, #40	@ 0x28
 800f6d4:	f011 ff86 	bl	80215e4 <snprintf>
                    break;
 800f6d8:	e008      	b.n	800f6ec <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 800f6da:	687b      	ldr	r3, [r7, #4]
 800f6dc:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 800f6de:	f107 001c 	add.w	r0, r7, #28
 800f6e2:	4a26      	ldr	r2, [pc, #152]	@ (800f77c <vTCPNetStat_TCPSocket+0x14c>)
 800f6e4:	2128      	movs	r1, #40	@ 0x28
 800f6e6:	f011 ff7d 	bl	80215e4 <snprintf>
                    break;
 800f6ea:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f6f0:	4698      	mov	r8, r3
 800f6f2:	687b      	ldr	r3, [r7, #4]
 800f6f4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f6f8:	461c      	mov	r4, r3
 800f6fa:	687b      	ldr	r3, [r7, #4]
 800f6fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f700:	2b00      	cmp	r3, #0
 800f702:	bf14      	ite	ne
 800f704:	2301      	movne	r3, #1
 800f706:	2300      	moveq	r3, #0
 800f708:	b2db      	uxtb	r3, r3
 800f70a:	461d      	mov	r5, r3
 800f70c:	687b      	ldr	r3, [r7, #4]
 800f70e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f712:	2b00      	cmp	r3, #0
 800f714:	bf14      	ite	ne
 800f716:	2301      	movne	r3, #1
 800f718:	2300      	moveq	r3, #0
 800f71a:	b2db      	uxtb	r3, r3
 800f71c:	461e      	mov	r6, r3
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f724:	4618      	mov	r0, r3
 800f726:	f002 fbf5 	bl	8011f14 <FreeRTOS_GetTCPStateName>
 800f72a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800f72c:	4a11      	ldr	r2, [pc, #68]	@ (800f774 <vTCPNetStat_TCPSocket+0x144>)
 800f72e:	4293      	cmp	r3, r2
 800f730:	bf28      	it	cs
 800f732:	4613      	movcs	r3, r2
 800f734:	687a      	ldr	r2, [r7, #4]
 800f736:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 800f73a:	603a      	str	r2, [r7, #0]
 800f73c:	f107 011c 	add.w	r1, r7, #28
 800f740:	f107 020c 	add.w	r2, r7, #12
 800f744:	9206      	str	r2, [sp, #24]
 800f746:	683a      	ldr	r2, [r7, #0]
 800f748:	9205      	str	r2, [sp, #20]
 800f74a:	9304      	str	r3, [sp, #16]
 800f74c:	9003      	str	r0, [sp, #12]
 800f74e:	9602      	str	r6, [sp, #8]
 800f750:	9501      	str	r5, [sp, #4]
 800f752:	9400      	str	r4, [sp, #0]
 800f754:	460b      	mov	r3, r1
 800f756:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800f758:	4641      	mov	r1, r8
 800f75a:	4809      	ldr	r0, [pc, #36]	@ (800f780 <vTCPNetStat_TCPSocket+0x150>)
 800f75c:	f010 ff16 	bl	802058c <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 800f760:	bf00      	nop
 800f762:	3750      	adds	r7, #80	@ 0x50
 800f764:	46bd      	mov	sp, r7
 800f766:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f76a:	bf00      	nop
 800f76c:	08024448 	.word	0x08024448
 800f770:	08023f68 	.word	0x08023f68
 800f774:	000f423f 	.word	0x000f423f
 800f778:	08024450 	.word	0x08024450
 800f77c:	08024458 	.word	0x08024458
 800f780:	08024460 	.word	0x08024460

0800f784 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800f784:	b580      	push	{r7, lr}
 800f786:	b08a      	sub	sp, #40	@ 0x28
 800f788:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800f78a:	2300      	movs	r3, #0
 800f78c:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800f78e:	f006 fe59 	bl	8016444 <uxGetMinimumFreeNetworkBuffers>
 800f792:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800f794:	f006 fe62 	bl	801645c <uxGetNumberOfFreeNetworkBuffers>
 800f798:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800f79a:	4b26      	ldr	r3, [pc, #152]	@ (800f834 <vTCPNetStat+0xb0>)
 800f79c:	689b      	ldr	r3, [r3, #8]
 800f79e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7a2:	d003      	beq.n	800f7ac <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 800f7a4:	4824      	ldr	r0, [pc, #144]	@ (800f838 <vTCPNetStat+0xb4>)
 800f7a6:	f010 fef1 	bl	802058c <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800f7aa:	e03f      	b.n	800f82c <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800f7ac:	4b23      	ldr	r3, [pc, #140]	@ (800f83c <vTCPNetStat+0xb8>)
 800f7ae:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800f7b0:	4b23      	ldr	r3, [pc, #140]	@ (800f840 <vTCPNetStat+0xbc>)
 800f7b2:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 800f7b4:	4823      	ldr	r0, [pc, #140]	@ (800f844 <vTCPNetStat+0xc0>)
 800f7b6:	f010 fee9 	bl	802058c <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800f7ba:	4b1e      	ldr	r3, [pc, #120]	@ (800f834 <vTCPNetStat+0xb0>)
 800f7bc:	68db      	ldr	r3, [r3, #12]
 800f7be:	61fb      	str	r3, [r7, #28]
 800f7c0:	e00b      	b.n	800f7da <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f7c2:	69fb      	ldr	r3, [r7, #28]
 800f7c4:	68db      	ldr	r3, [r3, #12]
 800f7c6:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 800f7c8:	6878      	ldr	r0, [r7, #4]
 800f7ca:	f7ff ff31 	bl	800f630 <vTCPNetStat_TCPSocket>
                count++;
 800f7ce:	69bb      	ldr	r3, [r7, #24]
 800f7d0:	3301      	adds	r3, #1
 800f7d2:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f7d4:	69fb      	ldr	r3, [r7, #28]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 800f7da:	69fa      	ldr	r2, [r7, #28]
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	429a      	cmp	r2, r3
 800f7e0:	d1ef      	bne.n	800f7c2 <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800f7e2:	4b19      	ldr	r3, [pc, #100]	@ (800f848 <vTCPNetStat+0xc4>)
 800f7e4:	68db      	ldr	r3, [r3, #12]
 800f7e6:	61fb      	str	r3, [r7, #28]
 800f7e8:	e014      	b.n	800f814 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 800f7ea:	69fb      	ldr	r3, [r7, #28]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	021b      	lsls	r3, r3, #8
 800f7f2:	b29a      	uxth	r2, r3
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	681b      	ldr	r3, [r3, #0]
 800f7f8:	0a1b      	lsrs	r3, r3, #8
 800f7fa:	b29b      	uxth	r3, r3
 800f7fc:	4313      	orrs	r3, r2
 800f7fe:	b29b      	uxth	r3, r3
 800f800:	4619      	mov	r1, r3
 800f802:	4812      	ldr	r0, [pc, #72]	@ (800f84c <vTCPNetStat+0xc8>)
 800f804:	f010 fec2 	bl	802058c <lUDPLoggingPrintf>
                count++;
 800f808:	69bb      	ldr	r3, [r7, #24]
 800f80a:	3301      	adds	r3, #1
 800f80c:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800f80e:	69fb      	ldr	r3, [r7, #28]
 800f810:	685b      	ldr	r3, [r3, #4]
 800f812:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 800f814:	69fa      	ldr	r2, [r7, #28]
 800f816:	68bb      	ldr	r3, [r7, #8]
 800f818:	429a      	cmp	r2, r3
 800f81a:	d1e6      	bne.n	800f7ea <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 800f81c:	2340      	movs	r3, #64	@ 0x40
 800f81e:	9300      	str	r3, [sp, #0]
 800f820:	693b      	ldr	r3, [r7, #16]
 800f822:	697a      	ldr	r2, [r7, #20]
 800f824:	69b9      	ldr	r1, [r7, #24]
 800f826:	480a      	ldr	r0, [pc, #40]	@ (800f850 <vTCPNetStat+0xcc>)
 800f828:	f010 feb0 	bl	802058c <lUDPLoggingPrintf>
    }
 800f82c:	bf00      	nop
 800f82e:	3720      	adds	r7, #32
 800f830:	46bd      	mov	sp, r7
 800f832:	bd80      	pop	{r7, pc}
 800f834:	200012b0 	.word	0x200012b0
 800f838:	0802448c 	.word	0x0802448c
 800f83c:	200012b8 	.word	0x200012b8
 800f840:	200012a4 	.word	0x200012a4
 800f844:	080244a8 	.word	0x080244a8
 800f848:	2000129c 	.word	0x2000129c
 800f84c:	080244f0 	.word	0x080244f0
 800f850:	08024500 	.word	0x08024500

0800f854 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 800f854:	b580      	push	{r7, lr}
 800f856:	b086      	sub	sp, #24
 800f858:	af00      	add	r7, sp, #0
 800f85a:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 800f85c:	2300      	movs	r3, #0
 800f85e:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 800f860:	2300      	movs	r3, #0
 800f862:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800f864:	687b      	ldr	r3, [r7, #4]
 800f866:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f86a:	f003 0304 	and.w	r3, r3, #4
 800f86e:	b2db      	uxtb	r3, r3
 800f870:	2b00      	cmp	r3, #0
 800f872:	d109      	bne.n	800f888 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f87a:	f003 0302 	and.w	r3, r3, #2
 800f87e:	b2db      	uxtb	r3, r3
 800f880:	2b00      	cmp	r3, #0
 800f882:	d101      	bne.n	800f888 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 800f884:	2301      	movs	r3, #1
 800f886:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 800f888:	687b      	ldr	r3, [r7, #4]
 800f88a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f88c:	f003 0301 	and.w	r3, r3, #1
 800f890:	2b00      	cmp	r3, #0
 800f892:	d038      	beq.n	800f906 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800f894:	687b      	ldr	r3, [r7, #4]
 800f896:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f89a:	2b01      	cmp	r3, #1
 800f89c:	d111      	bne.n	800f8c2 <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800f89e:	687b      	ldr	r3, [r7, #4]
 800f8a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f8a2:	2b00      	cmp	r3, #0
 800f8a4:	d02f      	beq.n	800f906 <vSocketSelectTCP+0xb2>
 800f8a6:	687b      	ldr	r3, [r7, #4]
 800f8a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800f8aa:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f8ae:	f003 0302 	and.w	r3, r3, #2
 800f8b2:	b2db      	uxtb	r3, r3
 800f8b4:	2b00      	cmp	r3, #0
 800f8b6:	d026      	beq.n	800f906 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800f8b8:	693b      	ldr	r3, [r7, #16]
 800f8ba:	f043 0301 	orr.w	r3, r3, #1
 800f8be:	613b      	str	r3, [r7, #16]
 800f8c0:	e021      	b.n	800f906 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800f8c2:	687b      	ldr	r3, [r7, #4]
 800f8c4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f8c8:	f003 0308 	and.w	r3, r3, #8
 800f8cc:	b2db      	uxtb	r3, r3
 800f8ce:	2b00      	cmp	r3, #0
 800f8d0:	d00c      	beq.n	800f8ec <vSocketSelectTCP+0x98>
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f8d8:	f003 0302 	and.w	r3, r3, #2
 800f8dc:	b2db      	uxtb	r3, r3
 800f8de:	2b00      	cmp	r3, #0
 800f8e0:	d004      	beq.n	800f8ec <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800f8e2:	693b      	ldr	r3, [r7, #16]
 800f8e4:	f043 0301 	orr.w	r3, r3, #1
 800f8e8:	613b      	str	r3, [r7, #16]
 800f8ea:	e00c      	b.n	800f906 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800f8ec:	697b      	ldr	r3, [r7, #20]
 800f8ee:	2b00      	cmp	r3, #0
 800f8f0:	d009      	beq.n	800f906 <vSocketSelectTCP+0xb2>
 800f8f2:	6878      	ldr	r0, [r7, #4]
 800f8f4:	f7ff fe62 	bl	800f5bc <FreeRTOS_rx_size>
 800f8f8:	4603      	mov	r3, r0
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	dd03      	ble.n	800f906 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800f8fe:	693b      	ldr	r3, [r7, #16]
 800f900:	f043 0301 	orr.w	r3, r3, #1
 800f904:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800f906:	687b      	ldr	r3, [r7, #4]
 800f908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f90a:	f003 0304 	and.w	r3, r3, #4
 800f90e:	2b00      	cmp	r3, #0
 800f910:	d00d      	beq.n	800f92e <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 800f912:	687b      	ldr	r3, [r7, #4]
 800f914:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f918:	2b08      	cmp	r3, #8
 800f91a:	d004      	beq.n	800f926 <vSocketSelectTCP+0xd2>
 800f91c:	687b      	ldr	r3, [r7, #4]
 800f91e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f922:	2b00      	cmp	r3, #0
 800f924:	d103      	bne.n	800f92e <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 800f926:	693b      	ldr	r3, [r7, #16]
 800f928:	f043 0304 	orr.w	r3, r3, #4
 800f92c:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800f92e:	687b      	ldr	r3, [r7, #4]
 800f930:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f932:	f003 0302 	and.w	r3, r3, #2
 800f936:	2b00      	cmp	r3, #0
 800f938:	d034      	beq.n	800f9a4 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 800f93a:	2300      	movs	r3, #0
 800f93c:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	2b00      	cmp	r3, #0
 800f942:	d007      	beq.n	800f954 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800f944:	6878      	ldr	r0, [r7, #4]
 800f946:	f7ff fdcb 	bl	800f4e0 <FreeRTOS_tx_space>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	dd01      	ble.n	800f954 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 800f950:	2301      	movs	r3, #1
 800f952:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 800f954:	68fb      	ldr	r3, [r7, #12]
 800f956:	2b00      	cmp	r3, #0
 800f958:	d11d      	bne.n	800f996 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800f95a:	687b      	ldr	r3, [r7, #4]
 800f95c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800f960:	f003 0308 	and.w	r3, r3, #8
 800f964:	b2db      	uxtb	r3, r3
 800f966:	2b00      	cmp	r3, #0
 800f968:	d015      	beq.n	800f996 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f96a:	687b      	ldr	r3, [r7, #4]
 800f96c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800f970:	2b04      	cmp	r3, #4
 800f972:	d910      	bls.n	800f996 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800f974:	687b      	ldr	r3, [r7, #4]
 800f976:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800f97a:	f003 0310 	and.w	r3, r3, #16
 800f97e:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800f980:	2b00      	cmp	r3, #0
 800f982:	d108      	bne.n	800f996 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800f984:	687a      	ldr	r2, [r7, #4]
 800f986:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f98a:	f043 0310 	orr.w	r3, r3, #16
 800f98e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 800f992:	2301      	movs	r3, #1
 800f994:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 800f996:	68fb      	ldr	r3, [r7, #12]
 800f998:	2b00      	cmp	r3, #0
 800f99a:	d003      	beq.n	800f9a4 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 800f99c:	693b      	ldr	r3, [r7, #16]
 800f99e:	f043 0302 	orr.w	r3, r3, #2
 800f9a2:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 800f9a4:	693b      	ldr	r3, [r7, #16]
        }
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3718      	adds	r7, #24
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
	...

0800f9b0 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 800f9b0:	b580      	push	{r7, lr}
 800f9b2:	b08a      	sub	sp, #40	@ 0x28
 800f9b4:	af00      	add	r7, sp, #0
 800f9b6:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 800f9b8:	2301      	movs	r3, #1
 800f9ba:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 800f9bc:	2300      	movs	r3, #0
 800f9be:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800f9c0:	2300      	movs	r3, #0
 800f9c2:	627b      	str	r3, [r7, #36]	@ 0x24
 800f9c4:	e043      	b.n	800fa4e <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 800f9c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9c8:	2b00      	cmp	r3, #0
 800f9ca:	d102      	bne.n	800f9d2 <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 800f9cc:	4b34      	ldr	r3, [pc, #208]	@ (800faa0 <vSocketSelect+0xf0>)
 800f9ce:	617b      	str	r3, [r7, #20]
 800f9d0:	e001      	b.n	800f9d6 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f9d2:	4b34      	ldr	r3, [pc, #208]	@ (800faa4 <vSocketSelect+0xf4>)
 800f9d4:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 800f9d6:	697b      	ldr	r3, [r7, #20]
 800f9d8:	685b      	ldr	r3, [r3, #4]
 800f9da:	61bb      	str	r3, [r7, #24]
 800f9dc:	e030      	b.n	800fa40 <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f9de:	69bb      	ldr	r3, [r7, #24]
 800f9e0:	68db      	ldr	r3, [r3, #12]
 800f9e2:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 800f9e4:	68bb      	ldr	r3, [r7, #8]
 800f9e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f9e8:	687a      	ldr	r2, [r7, #4]
 800f9ea:	429a      	cmp	r2, r3
 800f9ec:	d124      	bne.n	800fa38 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 800f9ee:	2300      	movs	r3, #0
 800f9f0:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f9f2:	68bb      	ldr	r3, [r7, #8]
 800f9f4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f9f8:	2b06      	cmp	r3, #6
 800f9fa:	d107      	bne.n	800fa0c <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 800f9fc:	68b8      	ldr	r0, [r7, #8]
 800f9fe:	f7ff ff29 	bl	800f854 <vSocketSelectTCP>
 800fa02:	4602      	mov	r2, r0
 800fa04:	6a3b      	ldr	r3, [r7, #32]
 800fa06:	4313      	orrs	r3, r2
 800fa08:	623b      	str	r3, [r7, #32]
 800fa0a:	e00d      	b.n	800fa28 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fa10:	f003 0301 	and.w	r3, r3, #1
 800fa14:	2b00      	cmp	r3, #0
 800fa16:	d007      	beq.n	800fa28 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800fa18:	68bb      	ldr	r3, [r7, #8]
 800fa1a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d003      	beq.n	800fa28 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800fa20:	6a3b      	ldr	r3, [r7, #32]
 800fa22:	f043 0301 	orr.w	r3, r3, #1
 800fa26:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 800fa28:	68bb      	ldr	r3, [r7, #8]
 800fa2a:	6a3a      	ldr	r2, [r7, #32]
 800fa2c:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 800fa2e:	69fa      	ldr	r2, [r7, #28]
 800fa30:	6a3b      	ldr	r3, [r7, #32]
 800fa32:	4313      	orrs	r3, r2
 800fa34:	61fb      	str	r3, [r7, #28]
 800fa36:	e000      	b.n	800fa3a <vSocketSelect+0x8a>
                    continue;
 800fa38:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 800fa3a:	69bb      	ldr	r3, [r7, #24]
 800fa3c:	685b      	ldr	r3, [r3, #4]
 800fa3e:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 800fa40:	69ba      	ldr	r2, [r7, #24]
 800fa42:	697b      	ldr	r3, [r7, #20]
 800fa44:	429a      	cmp	r2, r3
 800fa46:	d1ca      	bne.n	800f9de <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800fa48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa4a:	3301      	adds	r3, #1
 800fa4c:	627b      	str	r3, [r7, #36]	@ 0x24
 800fa4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fa50:	693b      	ldr	r3, [r7, #16]
 800fa52:	429a      	cmp	r2, r3
 800fa54:	ddb7      	ble.n	800f9c6 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800fa56:	687b      	ldr	r3, [r7, #4]
 800fa58:	681b      	ldr	r3, [r3, #0]
 800fa5a:	2100      	movs	r1, #0
 800fa5c:	4618      	mov	r0, r3
 800fa5e:	f7f2 fc15 	bl	800228c <xEventGroupClearBits>
 800fa62:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 800fa64:	69fb      	ldr	r3, [r7, #28]
 800fa66:	43da      	mvns	r2, r3
 800fa68:	68fb      	ldr	r3, [r7, #12]
 800fa6a:	4013      	ands	r3, r2
 800fa6c:	f003 030f 	and.w	r3, r3, #15
 800fa70:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 800fa72:	68fb      	ldr	r3, [r7, #12]
 800fa74:	2b00      	cmp	r3, #0
 800fa76:	d005      	beq.n	800fa84 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	68f9      	ldr	r1, [r7, #12]
 800fa7e:	4618      	mov	r0, r3
 800fa80:	f7f2 fc04 	bl	800228c <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 800fa84:	687b      	ldr	r3, [r7, #4]
 800fa86:	681a      	ldr	r2, [r3, #0]
 800fa88:	69fb      	ldr	r3, [r7, #28]
 800fa8a:	f043 0310 	orr.w	r3, r3, #16
 800fa8e:	4619      	mov	r1, r3
 800fa90:	4610      	mov	r0, r2
 800fa92:	f7f2 fc29 	bl	80022e8 <xEventGroupSetBits>
    }
 800fa96:	bf00      	nop
 800fa98:	3728      	adds	r7, #40	@ 0x28
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	bd80      	pop	{r7, pc}
 800fa9e:	bf00      	nop
 800faa0:	200012a4 	.word	0x200012a4
 800faa4:	200012b8 	.word	0x200012b8

0800faa8 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 800faa8:	b480      	push	{r7}
 800faaa:	b087      	sub	sp, #28
 800faac:	af00      	add	r7, sp, #0
 800faae:	60f8      	str	r0, [r7, #12]
 800fab0:	60b9      	str	r1, [r7, #8]
 800fab2:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 800fab4:	68fb      	ldr	r3, [r7, #12]
 800fab6:	691b      	ldr	r3, [r3, #16]
 800fab8:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 800faba:	693a      	ldr	r2, [r7, #16]
 800fabc:	687b      	ldr	r3, [r7, #4]
 800fabe:	441a      	add	r2, r3
 800fac0:	68bb      	ldr	r3, [r7, #8]
 800fac2:	1ad3      	subs	r3, r2, r3
 800fac4:	3b01      	subs	r3, #1
 800fac6:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 800fac8:	697a      	ldr	r2, [r7, #20]
 800faca:	693b      	ldr	r3, [r7, #16]
 800facc:	429a      	cmp	r2, r3
 800face:	d303      	bcc.n	800fad8 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 800fad0:	697a      	ldr	r2, [r7, #20]
 800fad2:	693b      	ldr	r3, [r7, #16]
 800fad4:	1ad3      	subs	r3, r2, r3
 800fad6:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800fad8:	697b      	ldr	r3, [r7, #20]
}
 800fada:	4618      	mov	r0, r3
 800fadc:	371c      	adds	r7, #28
 800fade:	46bd      	mov	sp, r7
 800fae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fae4:	4770      	bx	lr

0800fae6 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 800fae6:	b480      	push	{r7}
 800fae8:	b087      	sub	sp, #28
 800faea:	af00      	add	r7, sp, #0
 800faec:	60f8      	str	r0, [r7, #12]
 800faee:	60b9      	str	r1, [r7, #8]
 800faf0:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 800faf2:	68fb      	ldr	r3, [r7, #12]
 800faf4:	691b      	ldr	r3, [r3, #16]
 800faf6:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 800faf8:	693a      	ldr	r2, [r7, #16]
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	441a      	add	r2, r3
 800fafe:	68bb      	ldr	r3, [r7, #8]
 800fb00:	1ad3      	subs	r3, r2, r3
 800fb02:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 800fb04:	697a      	ldr	r2, [r7, #20]
 800fb06:	693b      	ldr	r3, [r7, #16]
 800fb08:	429a      	cmp	r2, r3
 800fb0a:	d303      	bcc.n	800fb14 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 800fb0c:	697a      	ldr	r2, [r7, #20]
 800fb0e:	693b      	ldr	r3, [r7, #16]
 800fb10:	1ad3      	subs	r3, r2, r3
 800fb12:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800fb14:	697b      	ldr	r3, [r7, #20]
}
 800fb16:	4618      	mov	r0, r3
 800fb18:	371c      	adds	r7, #28
 800fb1a:	46bd      	mov	sp, r7
 800fb1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb20:	4770      	bx	lr

0800fb22 <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 800fb22:	b580      	push	{r7, lr}
 800fb24:	b082      	sub	sp, #8
 800fb26:	af00      	add	r7, sp, #0
 800fb28:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	6899      	ldr	r1, [r3, #8]
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	681b      	ldr	r3, [r3, #0]
 800fb32:	461a      	mov	r2, r3
 800fb34:	6878      	ldr	r0, [r7, #4]
 800fb36:	f7ff ffb7 	bl	800faa8 <uxStreamBufferSpace>
 800fb3a:	4603      	mov	r3, r0
}
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	3708      	adds	r7, #8
 800fb40:	46bd      	mov	sp, r7
 800fb42:	bd80      	pop	{r7, pc}

0800fb44 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 800fb44:	b580      	push	{r7, lr}
 800fb46:	b082      	sub	sp, #8
 800fb48:	af00      	add	r7, sp, #0
 800fb4a:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 800fb4c:	687b      	ldr	r3, [r7, #4]
 800fb4e:	68d9      	ldr	r1, [r3, #12]
 800fb50:	687b      	ldr	r3, [r7, #4]
 800fb52:	681b      	ldr	r3, [r3, #0]
 800fb54:	461a      	mov	r2, r3
 800fb56:	6878      	ldr	r0, [r7, #4]
 800fb58:	f7ff ffa6 	bl	800faa8 <uxStreamBufferSpace>
 800fb5c:	4603      	mov	r3, r0
}
 800fb5e:	4618      	mov	r0, r3
 800fb60:	3708      	adds	r7, #8
 800fb62:	46bd      	mov	sp, r7
 800fb64:	bd80      	pop	{r7, pc}

0800fb66 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 800fb66:	b580      	push	{r7, lr}
 800fb68:	b082      	sub	sp, #8
 800fb6a:	af00      	add	r7, sp, #0
 800fb6c:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 800fb6e:	687b      	ldr	r3, [r7, #4]
 800fb70:	6819      	ldr	r1, [r3, #0]
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	461a      	mov	r2, r3
 800fb78:	6878      	ldr	r0, [r7, #4]
 800fb7a:	f7ff ffb4 	bl	800fae6 <uxStreamBufferDistance>
 800fb7e:	4603      	mov	r3, r0
}
 800fb80:	4618      	mov	r0, r3
 800fb82:	3708      	adds	r7, #8
 800fb84:	46bd      	mov	sp, r7
 800fb86:	bd80      	pop	{r7, pc}

0800fb88 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 800fb88:	b580      	push	{r7, lr}
 800fb8a:	b082      	sub	sp, #8
 800fb8c:	af00      	add	r7, sp, #0
 800fb8e:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 800fb90:	687b      	ldr	r3, [r7, #4]
 800fb92:	6859      	ldr	r1, [r3, #4]
 800fb94:	687b      	ldr	r3, [r7, #4]
 800fb96:	689b      	ldr	r3, [r3, #8]
 800fb98:	461a      	mov	r2, r3
 800fb9a:	6878      	ldr	r0, [r7, #4]
 800fb9c:	f7ff ffa3 	bl	800fae6 <uxStreamBufferDistance>
 800fba0:	4603      	mov	r3, r0
}
 800fba2:	4618      	mov	r0, r3
 800fba4:	3708      	adds	r7, #8
 800fba6:	46bd      	mov	sp, r7
 800fba8:	bd80      	pop	{r7, pc}

0800fbaa <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 800fbaa:	b480      	push	{r7}
 800fbac:	b083      	sub	sp, #12
 800fbae:	af00      	add	r7, sp, #0
 800fbb0:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	2200      	movs	r2, #0
 800fbb6:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 800fbb8:	687b      	ldr	r3, [r7, #4]
 800fbba:	2200      	movs	r2, #0
 800fbbc:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 800fbbe:	687b      	ldr	r3, [r7, #4]
 800fbc0:	2200      	movs	r2, #0
 800fbc2:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 800fbc4:	687b      	ldr	r3, [r7, #4]
 800fbc6:	2200      	movs	r2, #0
 800fbc8:	605a      	str	r2, [r3, #4]
}
 800fbca:	bf00      	nop
 800fbcc:	370c      	adds	r7, #12
 800fbce:	46bd      	mov	sp, r7
 800fbd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fbd4:	4770      	bx	lr

0800fbd6 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 800fbd6:	b580      	push	{r7, lr}
 800fbd8:	b086      	sub	sp, #24
 800fbda:	af00      	add	r7, sp, #0
 800fbdc:	6078      	str	r0, [r7, #4]
 800fbde:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 800fbe0:	687b      	ldr	r3, [r7, #4]
 800fbe2:	691b      	ldr	r3, [r3, #16]
 800fbe4:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800fbe6:	6878      	ldr	r0, [r7, #4]
 800fbe8:	f7ff ffce 	bl	800fb88 <uxStreamBufferMidSpace>
 800fbec:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 800fbee:	687b      	ldr	r3, [r7, #4]
 800fbf0:	685b      	ldr	r3, [r3, #4]
 800fbf2:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 800fbf8:	693a      	ldr	r2, [r7, #16]
 800fbfa:	68bb      	ldr	r3, [r7, #8]
 800fbfc:	429a      	cmp	r2, r3
 800fbfe:	d901      	bls.n	800fc04 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 800fc04:	697a      	ldr	r2, [r7, #20]
 800fc06:	693b      	ldr	r3, [r7, #16]
 800fc08:	4413      	add	r3, r2
 800fc0a:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 800fc0c:	697a      	ldr	r2, [r7, #20]
 800fc0e:	68fb      	ldr	r3, [r7, #12]
 800fc10:	429a      	cmp	r2, r3
 800fc12:	d303      	bcc.n	800fc1c <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 800fc14:	697a      	ldr	r2, [r7, #20]
 800fc16:	68fb      	ldr	r3, [r7, #12]
 800fc18:	1ad3      	subs	r3, r2, r3
 800fc1a:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 800fc1c:	687b      	ldr	r3, [r7, #4]
 800fc1e:	697a      	ldr	r2, [r7, #20]
 800fc20:	605a      	str	r2, [r3, #4]
}
 800fc22:	bf00      	nop
 800fc24:	3718      	adds	r7, #24
 800fc26:	46bd      	mov	sp, r7
 800fc28:	bd80      	pop	{r7, pc}

0800fc2a <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 800fc2a:	b480      	push	{r7}
 800fc2c:	b087      	sub	sp, #28
 800fc2e:	af00      	add	r7, sp, #0
 800fc30:	60f8      	str	r0, [r7, #12]
 800fc32:	60b9      	str	r1, [r7, #8]
 800fc34:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800fc36:	2300      	movs	r3, #0
 800fc38:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 800fc3a:	68fb      	ldr	r3, [r7, #12]
 800fc3c:	681b      	ldr	r3, [r3, #0]
 800fc3e:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 800fc40:	68ba      	ldr	r2, [r7, #8]
 800fc42:	693b      	ldr	r3, [r7, #16]
 800fc44:	1ad2      	subs	r2, r2, r3
 800fc46:	6879      	ldr	r1, [r7, #4]
 800fc48:	693b      	ldr	r3, [r7, #16]
 800fc4a:	1acb      	subs	r3, r1, r3
 800fc4c:	429a      	cmp	r2, r3
 800fc4e:	d801      	bhi.n	800fc54 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 800fc50:	2301      	movs	r3, #1
 800fc52:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800fc54:	697b      	ldr	r3, [r7, #20]
}
 800fc56:	4618      	mov	r0, r3
 800fc58:	371c      	adds	r7, #28
 800fc5a:	46bd      	mov	sp, r7
 800fc5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc60:	4770      	bx	lr

0800fc62 <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 800fc62:	b580      	push	{r7, lr}
 800fc64:	b084      	sub	sp, #16
 800fc66:	af00      	add	r7, sp, #0
 800fc68:	6078      	str	r0, [r7, #4]
 800fc6a:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 800fc6c:	687b      	ldr	r3, [r7, #4]
 800fc6e:	681b      	ldr	r3, [r3, #0]
 800fc70:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 800fc72:	6878      	ldr	r0, [r7, #4]
 800fc74:	f7ff ff77 	bl	800fb66 <uxStreamBufferGetSize>
 800fc78:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f103 0214 	add.w	r2, r3, #20
 800fc80:	68fb      	ldr	r3, [r7, #12]
 800fc82:	441a      	add	r2, r3
 800fc84:	683b      	ldr	r3, [r7, #0]
 800fc86:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 800fc88:	687b      	ldr	r3, [r7, #4]
 800fc8a:	691a      	ldr	r2, [r3, #16]
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	1ad3      	subs	r3, r2, r3
 800fc90:	4619      	mov	r1, r3
 800fc92:	68b8      	ldr	r0, [r7, #8]
 800fc94:	f7f9 fede 	bl	8009a54 <FreeRTOS_min_size_t>
 800fc98:	4603      	mov	r3, r0
}
 800fc9a:	4618      	mov	r0, r3
 800fc9c:	3710      	adds	r7, #16
 800fc9e:	46bd      	mov	sp, r7
 800fca0:	bd80      	pop	{r7, pc}

0800fca2 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 800fca2:	b580      	push	{r7, lr}
 800fca4:	b08a      	sub	sp, #40	@ 0x28
 800fca6:	af00      	add	r7, sp, #0
 800fca8:	60f8      	str	r0, [r7, #12]
 800fcaa:	60b9      	str	r1, [r7, #8]
 800fcac:	607a      	str	r2, [r7, #4]
 800fcae:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800fcb0:	68f8      	ldr	r0, [r7, #12]
 800fcb2:	f7ff ff36 	bl	800fb22 <uxStreamBufferGetSpace>
 800fcb6:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 800fcb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcba:	68bb      	ldr	r3, [r7, #8]
 800fcbc:	429a      	cmp	r2, r3
 800fcbe:	d904      	bls.n	800fcca <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 800fcc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fcc2:	68bb      	ldr	r3, [r7, #8]
 800fcc4:	1ad3      	subs	r3, r2, r3
 800fcc6:	627b      	str	r3, [r7, #36]	@ 0x24
 800fcc8:	e001      	b.n	800fcce <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 800fcca:	2300      	movs	r3, #0
 800fccc:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 800fcce:	6839      	ldr	r1, [r7, #0]
 800fcd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fcd2:	f7f9 febf 	bl	8009a54 <FreeRTOS_min_size_t>
 800fcd6:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 800fcd8:	69fb      	ldr	r3, [r7, #28]
 800fcda:	2b00      	cmp	r3, #0
 800fcdc:	d05c      	beq.n	800fd98 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 800fcde:	68fb      	ldr	r3, [r7, #12]
 800fce0:	691b      	ldr	r3, [r3, #16]
 800fce2:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 800fce4:	68fb      	ldr	r3, [r7, #12]
 800fce6:	689b      	ldr	r3, [r3, #8]
 800fce8:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 800fcea:	68bb      	ldr	r3, [r7, #8]
 800fcec:	2b00      	cmp	r3, #0
 800fcee:	d00b      	beq.n	800fd08 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 800fcf0:	6a3a      	ldr	r2, [r7, #32]
 800fcf2:	68bb      	ldr	r3, [r7, #8]
 800fcf4:	4413      	add	r3, r2
 800fcf6:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 800fcf8:	6a3a      	ldr	r2, [r7, #32]
 800fcfa:	69bb      	ldr	r3, [r7, #24]
 800fcfc:	429a      	cmp	r2, r3
 800fcfe:	d303      	bcc.n	800fd08 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 800fd00:	6a3a      	ldr	r2, [r7, #32]
 800fd02:	69bb      	ldr	r3, [r7, #24]
 800fd04:	1ad3      	subs	r3, r2, r3
 800fd06:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 800fd08:	687b      	ldr	r3, [r7, #4]
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	d021      	beq.n	800fd52 <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 800fd0e:	69ba      	ldr	r2, [r7, #24]
 800fd10:	6a3b      	ldr	r3, [r7, #32]
 800fd12:	1ad3      	subs	r3, r2, r3
 800fd14:	69f9      	ldr	r1, [r7, #28]
 800fd16:	4618      	mov	r0, r3
 800fd18:	f7f9 fe9c 	bl	8009a54 <FreeRTOS_min_size_t>
 800fd1c:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 800fd1e:	6a3b      	ldr	r3, [r7, #32]
 800fd20:	3310      	adds	r3, #16
 800fd22:	68fa      	ldr	r2, [r7, #12]
 800fd24:	4413      	add	r3, r2
 800fd26:	3304      	adds	r3, #4
 800fd28:	697a      	ldr	r2, [r7, #20]
 800fd2a:	6879      	ldr	r1, [r7, #4]
 800fd2c:	4618      	mov	r0, r3
 800fd2e:	f010 fe49 	bl	80209c4 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 800fd32:	69fa      	ldr	r2, [r7, #28]
 800fd34:	697b      	ldr	r3, [r7, #20]
 800fd36:	429a      	cmp	r2, r3
 800fd38:	d90b      	bls.n	800fd52 <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 800fd3a:	68fb      	ldr	r3, [r7, #12]
 800fd3c:	f103 0014 	add.w	r0, r3, #20
 800fd40:	687a      	ldr	r2, [r7, #4]
 800fd42:	697b      	ldr	r3, [r7, #20]
 800fd44:	18d1      	adds	r1, r2, r3
 800fd46:	69fa      	ldr	r2, [r7, #28]
 800fd48:	697b      	ldr	r3, [r7, #20]
 800fd4a:	1ad3      	subs	r3, r2, r3
 800fd4c:	461a      	mov	r2, r3
 800fd4e:	f010 fe39 	bl	80209c4 <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 800fd52:	f7f3 fc75 	bl	8003640 <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 800fd56:	68bb      	ldr	r3, [r7, #8]
 800fd58:	2b00      	cmp	r3, #0
 800fd5a:	d10e      	bne.n	800fd7a <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 800fd5c:	6a3a      	ldr	r2, [r7, #32]
 800fd5e:	69fb      	ldr	r3, [r7, #28]
 800fd60:	4413      	add	r3, r2
 800fd62:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 800fd64:	6a3a      	ldr	r2, [r7, #32]
 800fd66:	69bb      	ldr	r3, [r7, #24]
 800fd68:	429a      	cmp	r2, r3
 800fd6a:	d303      	bcc.n	800fd74 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 800fd6c:	6a3a      	ldr	r2, [r7, #32]
 800fd6e:	69bb      	ldr	r3, [r7, #24]
 800fd70:	1ad3      	subs	r3, r2, r3
 800fd72:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 800fd74:	68fb      	ldr	r3, [r7, #12]
 800fd76:	6a3a      	ldr	r2, [r7, #32]
 800fd78:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	68db      	ldr	r3, [r3, #12]
 800fd7e:	6a3a      	ldr	r2, [r7, #32]
 800fd80:	4619      	mov	r1, r3
 800fd82:	68f8      	ldr	r0, [r7, #12]
 800fd84:	f7ff ff51 	bl	800fc2a <xStreamBufferLessThenEqual>
 800fd88:	4603      	mov	r3, r0
 800fd8a:	2b00      	cmp	r3, #0
 800fd8c:	d002      	beq.n	800fd94 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	6a3a      	ldr	r2, [r7, #32]
 800fd92:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 800fd94:	f7f3 fc62 	bl	800365c <xTaskResumeAll>
    }

    return uxCount;
 800fd98:	69fb      	ldr	r3, [r7, #28]
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3728      	adds	r7, #40	@ 0x28
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}

0800fda2 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 800fda2:	b580      	push	{r7, lr}
 800fda4:	b08a      	sub	sp, #40	@ 0x28
 800fda6:	af00      	add	r7, sp, #0
 800fda8:	60f8      	str	r0, [r7, #12]
 800fdaa:	60b9      	str	r1, [r7, #8]
 800fdac:	607a      	str	r2, [r7, #4]
 800fdae:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 800fdb0:	68f8      	ldr	r0, [r7, #12]
 800fdb2:	f7ff fed8 	bl	800fb66 <uxStreamBufferGetSize>
 800fdb6:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 800fdb8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdba:	68bb      	ldr	r3, [r7, #8]
 800fdbc:	429a      	cmp	r2, r3
 800fdbe:	d904      	bls.n	800fdca <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 800fdc0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fdc2:	68bb      	ldr	r3, [r7, #8]
 800fdc4:	1ad3      	subs	r3, r2, r3
 800fdc6:	627b      	str	r3, [r7, #36]	@ 0x24
 800fdc8:	e001      	b.n	800fdce <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 800fdca:	2300      	movs	r3, #0
 800fdcc:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 800fdce:	6839      	ldr	r1, [r7, #0]
 800fdd0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800fdd2:	f7f9 fe3f 	bl	8009a54 <FreeRTOS_min_size_t>
 800fdd6:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 800fdd8:	69fb      	ldr	r3, [r7, #28]
 800fdda:	2b00      	cmp	r3, #0
 800fddc:	d04e      	beq.n	800fe7c <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	691b      	ldr	r3, [r3, #16]
 800fde2:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 800fde4:	68fb      	ldr	r3, [r7, #12]
 800fde6:	681b      	ldr	r3, [r3, #0]
 800fde8:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 800fdea:	68bb      	ldr	r3, [r7, #8]
 800fdec:	2b00      	cmp	r3, #0
 800fdee:	d00b      	beq.n	800fe08 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 800fdf0:	6a3a      	ldr	r2, [r7, #32]
 800fdf2:	68bb      	ldr	r3, [r7, #8]
 800fdf4:	4413      	add	r3, r2
 800fdf6:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 800fdf8:	6a3a      	ldr	r2, [r7, #32]
 800fdfa:	69bb      	ldr	r3, [r7, #24]
 800fdfc:	429a      	cmp	r2, r3
 800fdfe:	d303      	bcc.n	800fe08 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 800fe00:	6a3a      	ldr	r2, [r7, #32]
 800fe02:	69bb      	ldr	r3, [r7, #24]
 800fe04:	1ad3      	subs	r3, r2, r3
 800fe06:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	2b00      	cmp	r3, #0
 800fe0c:	d021      	beq.n	800fe52 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 800fe0e:	69ba      	ldr	r2, [r7, #24]
 800fe10:	6a3b      	ldr	r3, [r7, #32]
 800fe12:	1ad3      	subs	r3, r2, r3
 800fe14:	69f9      	ldr	r1, [r7, #28]
 800fe16:	4618      	mov	r0, r3
 800fe18:	f7f9 fe1c 	bl	8009a54 <FreeRTOS_min_size_t>
 800fe1c:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 800fe1e:	6a3b      	ldr	r3, [r7, #32]
 800fe20:	3310      	adds	r3, #16
 800fe22:	68fa      	ldr	r2, [r7, #12]
 800fe24:	4413      	add	r3, r2
 800fe26:	3304      	adds	r3, #4
 800fe28:	697a      	ldr	r2, [r7, #20]
 800fe2a:	4619      	mov	r1, r3
 800fe2c:	6878      	ldr	r0, [r7, #4]
 800fe2e:	f010 fdc9 	bl	80209c4 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 800fe32:	69fa      	ldr	r2, [r7, #28]
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	429a      	cmp	r2, r3
 800fe38:	d90b      	bls.n	800fe52 <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 800fe3a:	687a      	ldr	r2, [r7, #4]
 800fe3c:	697b      	ldr	r3, [r7, #20]
 800fe3e:	18d0      	adds	r0, r2, r3
 800fe40:	68fb      	ldr	r3, [r7, #12]
 800fe42:	f103 0114 	add.w	r1, r3, #20
 800fe46:	69fa      	ldr	r2, [r7, #28]
 800fe48:	697b      	ldr	r3, [r7, #20]
 800fe4a:	1ad3      	subs	r3, r2, r3
 800fe4c:	461a      	mov	r2, r3
 800fe4e:	f010 fdb9 	bl	80209c4 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 800fe52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800fe54:	2b00      	cmp	r3, #0
 800fe56:	d111      	bne.n	800fe7c <uxStreamBufferGet+0xda>
 800fe58:	68bb      	ldr	r3, [r7, #8]
 800fe5a:	2b00      	cmp	r3, #0
 800fe5c:	d10e      	bne.n	800fe7c <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 800fe5e:	6a3a      	ldr	r2, [r7, #32]
 800fe60:	69fb      	ldr	r3, [r7, #28]
 800fe62:	4413      	add	r3, r2
 800fe64:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 800fe66:	6a3a      	ldr	r2, [r7, #32]
 800fe68:	69bb      	ldr	r3, [r7, #24]
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	d303      	bcc.n	800fe76 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 800fe6e:	6a3a      	ldr	r2, [r7, #32]
 800fe70:	69bb      	ldr	r3, [r7, #24]
 800fe72:	1ad3      	subs	r3, r2, r3
 800fe74:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 800fe76:	68fb      	ldr	r3, [r7, #12]
 800fe78:	6a3a      	ldr	r2, [r7, #32]
 800fe7a:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 800fe7c:	69fb      	ldr	r3, [r7, #28]
}
 800fe7e:	4618      	mov	r0, r3
 800fe80:	3728      	adds	r7, #40	@ 0x28
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
	...

0800fe88 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 800fe88:	b580      	push	{r7, lr}
 800fe8a:	b082      	sub	sp, #8
 800fe8c:	af00      	add	r7, sp, #0
 800fe8e:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 800fe90:	4b0a      	ldr	r3, [pc, #40]	@ (800febc <vSocketCloseNextTime+0x34>)
 800fe92:	681b      	ldr	r3, [r3, #0]
 800fe94:	2b00      	cmp	r3, #0
 800fe96:	d009      	beq.n	800feac <vSocketCloseNextTime+0x24>
 800fe98:	4b08      	ldr	r3, [pc, #32]	@ (800febc <vSocketCloseNextTime+0x34>)
 800fe9a:	681b      	ldr	r3, [r3, #0]
 800fe9c:	687a      	ldr	r2, [r7, #4]
 800fe9e:	429a      	cmp	r2, r3
 800fea0:	d004      	beq.n	800feac <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 800fea2:	4b06      	ldr	r3, [pc, #24]	@ (800febc <vSocketCloseNextTime+0x34>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	4618      	mov	r0, r3
 800fea8:	f7fd fd98 	bl	800d9dc <vSocketClose>
        }

        xSocketToClose = pxSocket;
 800feac:	4a03      	ldr	r2, [pc, #12]	@ (800febc <vSocketCloseNextTime+0x34>)
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	6013      	str	r3, [r2, #0]
    }
 800feb2:	bf00      	nop
 800feb4:	3708      	adds	r7, #8
 800feb6:	46bd      	mov	sp, r7
 800feb8:	bd80      	pop	{r7, pc}
 800feba:	bf00      	nop
 800febc:	200012c8 	.word	0x200012c8

0800fec0 <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 800fec0:	b580      	push	{r7, lr}
 800fec2:	b082      	sub	sp, #8
 800fec4:	af00      	add	r7, sp, #0
 800fec6:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 800fec8:	4b0c      	ldr	r3, [pc, #48]	@ (800fefc <vSocketListenNextTime+0x3c>)
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	2b00      	cmp	r3, #0
 800fece:	d00e      	beq.n	800feee <vSocketListenNextTime+0x2e>
 800fed0:	4b0a      	ldr	r3, [pc, #40]	@ (800fefc <vSocketListenNextTime+0x3c>)
 800fed2:	681b      	ldr	r3, [r3, #0]
 800fed4:	687a      	ldr	r2, [r7, #4]
 800fed6:	429a      	cmp	r2, r3
 800fed8:	d009      	beq.n	800feee <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 800feda:	4b08      	ldr	r3, [pc, #32]	@ (800fefc <vSocketListenNextTime+0x3c>)
 800fedc:	681a      	ldr	r2, [r3, #0]
 800fede:	4b07      	ldr	r3, [pc, #28]	@ (800fefc <vSocketListenNextTime+0x3c>)
 800fee0:	681b      	ldr	r3, [r3, #0]
 800fee2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800fee6:	4619      	mov	r1, r3
 800fee8:	4610      	mov	r0, r2
 800feea:	f7fe fff3 	bl	800eed4 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 800feee:	4a03      	ldr	r2, [pc, #12]	@ (800fefc <vSocketListenNextTime+0x3c>)
 800fef0:	687b      	ldr	r3, [r7, #4]
 800fef2:	6013      	str	r3, [r2, #0]
    }
 800fef4:	bf00      	nop
 800fef6:	3708      	adds	r7, #8
 800fef8:	46bd      	mov	sp, r7
 800fefa:	bd80      	pop	{r7, pc}
 800fefc:	200012cc 	.word	0x200012cc

0800ff00 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 800ff00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ff04:	b086      	sub	sp, #24
 800ff06:	af02      	add	r7, sp, #8
 800ff08:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 800ff0a:	2300      	movs	r3, #0
 800ff0c:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 800ff0e:	2300      	movs	r3, #0
 800ff10:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 800ff12:	687b      	ldr	r3, [r7, #4]
 800ff14:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ff18:	2b04      	cmp	r3, #4
 800ff1a:	d907      	bls.n	800ff2c <xTCPSocketCheck+0x2c>
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800ff22:	2b00      	cmp	r3, #0
 800ff24:	d002      	beq.n	800ff2c <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 800ff26:	6878      	ldr	r0, [r7, #4]
 800ff28:	f003 f834 	bl	8012f94 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ff2c:	687b      	ldr	r3, [r7, #4]
 800ff2e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d05f      	beq.n	800fff6 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 800ff36:	687b      	ldr	r3, [r7, #4]
 800ff38:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800ff3c:	f003 0320 	and.w	r3, r3, #32
 800ff40:	b2db      	uxtb	r3, r3
 800ff42:	2b00      	cmp	r3, #0
 800ff44:	d148      	bne.n	800ffd8 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 800ff46:	687b      	ldr	r3, [r7, #4]
 800ff48:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ff4c:	2b00      	cmp	r3, #0
 800ff4e:	d03b      	beq.n	800ffc8 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800ff50:	4b37      	ldr	r3, [pc, #220]	@ (8010030 <xTCPSocketCheck+0x130>)
 800ff52:	681b      	ldr	r3, [r3, #0]
 800ff54:	2b01      	cmp	r3, #1
 800ff56:	dd25      	ble.n	800ffa4 <xTCPSocketCheck+0xa4>
 800ff58:	687b      	ldr	r3, [r7, #4]
 800ff5a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ff5c:	2b17      	cmp	r3, #23
 800ff5e:	d021      	beq.n	800ffa4 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800ff64:	461e      	mov	r6, r3
 800ff66:	687b      	ldr	r3, [r7, #4]
 800ff68:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800ff6c:	4698      	mov	r8, r3
 800ff6e:	687b      	ldr	r3, [r7, #4]
 800ff70:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 800ff74:	687b      	ldr	r3, [r7, #4]
 800ff76:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 800ff7a:	1ad5      	subs	r5, r2, r3
 800ff7c:	687b      	ldr	r3, [r7, #4]
 800ff7e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 800ff88:	1ad4      	subs	r4, r2, r3
 800ff8a:	6878      	ldr	r0, [r7, #4]
 800ff8c:	f7f9 f81e 	bl	8008fcc <uxIPHeaderSizeSocket>
 800ff90:	4603      	mov	r3, r0
 800ff92:	3314      	adds	r3, #20
 800ff94:	9301      	str	r3, [sp, #4]
 800ff96:	9400      	str	r4, [sp, #0]
 800ff98:	462b      	mov	r3, r5
 800ff9a:	4642      	mov	r2, r8
 800ff9c:	4631      	mov	r1, r6
 800ff9e:	4825      	ldr	r0, [pc, #148]	@ (8010034 <xTCPSocketCheck+0x134>)
 800ffa0:	f010 faf4 	bl	802058c <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f7f9 f80e 	bl	8008fcc <uxIPHeaderSizeSocket>
 800ffb0:	4603      	mov	r3, r0
 800ffb2:	f103 0214 	add.w	r2, r3, #20
 800ffb6:	2301      	movs	r3, #1
 800ffb8:	4621      	mov	r1, r4
 800ffba:	6878      	ldr	r0, [r7, #4]
 800ffbc:	f002 fac8 	bl	8012550 <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2200      	movs	r2, #0
 800ffc4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 800ffc8:	6878      	ldr	r0, [r7, #4]
 800ffca:	f000 faa1 	bl	8010510 <prvTCPNextTimeout>
 800ffce:	4603      	mov	r3, r0
 800ffd0:	2b01      	cmp	r3, #1
 800ffd2:	d901      	bls.n	800ffd8 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 800ffd4:	2301      	movs	r3, #1
 800ffd6:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ffd8:	687b      	ldr	r3, [r7, #4]
 800ffda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ffde:	2b00      	cmp	r3, #0
 800ffe0:	d009      	beq.n	800fff6 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800ffe2:	687b      	ldr	r3, [r7, #4]
 800ffe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ffe8:	4618      	mov	r0, r3
 800ffea:	f006 f9e5 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 800ffee:	687b      	ldr	r3, [r7, #4]
 800fff0:	2200      	movs	r2, #0
 800fff2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 800fff6:	68bb      	ldr	r3, [r7, #8]
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d113      	bne.n	8010024 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 800fffc:	687b      	ldr	r3, [r7, #4]
 800fffe:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010002:	2b04      	cmp	r3, #4
 8010004:	d804      	bhi.n	8010010 <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 8010006:	687b      	ldr	r3, [r7, #4]
 8010008:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 801000c:	2b02      	cmp	r3, #2
 801000e:	d102      	bne.n	8010016 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 8010010:	6878      	ldr	r0, [r7, #4]
 8010012:	f002 f9ff 	bl	8012414 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 8010016:	6878      	ldr	r0, [r7, #4]
 8010018:	f000 fa7a 	bl	8010510 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 801001c:	6878      	ldr	r0, [r7, #4]
 801001e:	f001 f973 	bl	8011308 <prvTCPStatusAgeCheck>
 8010022:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 8010024:	68fb      	ldr	r3, [r7, #12]
    }
 8010026:	4618      	mov	r0, r3
 8010028:	3710      	adds	r7, #16
 801002a:	46bd      	mov	sp, r7
 801002c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010030:	200012f4 	.word	0x200012f4
 8010034:	08024538 	.word	0x08024538

08010038 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 8010038:	b580      	push	{r7, lr}
 801003a:	b082      	sub	sp, #8
 801003c:	af00      	add	r7, sp, #0
 801003e:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8010040:	f7f3 fc10 	bl	8003864 <xTaskGetTickCount>
 8010044:	4602      	mov	r2, r0
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 801004c:	687a      	ldr	r2, [r7, #4]
 801004e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010052:	f36f 0382 	bfc	r3, #2, #1
 8010056:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 801005a:	687a      	ldr	r2, [r7, #4]
 801005c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010060:	f36f 0341 	bfc	r3, #1, #1
 8010064:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 8010068:	687b      	ldr	r3, [r7, #4]
 801006a:	2200      	movs	r2, #0
 801006c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8010070:	f7f3 fbf8 	bl	8003864 <xTaskGetTickCount>
 8010074:	4602      	mov	r2, r0
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 801007c:	bf00      	nop
 801007e:	3708      	adds	r7, #8
 8010080:	46bd      	mov	sp, r7
 8010082:	bd80      	pop	{r7, pc}

08010084 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 8010084:	b480      	push	{r7}
 8010086:	b087      	sub	sp, #28
 8010088:	af00      	add	r7, sp, #0
 801008a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 801008c:	2300      	movs	r3, #0
 801008e:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010090:	4b15      	ldr	r3, [pc, #84]	@ (80100e8 <vTCPRemoveTCPChild+0x64>)
 8010092:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010094:	4b15      	ldr	r3, [pc, #84]	@ (80100ec <vTCPRemoveTCPChild+0x68>)
 8010096:	68db      	ldr	r3, [r3, #12]
 8010098:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 801009a:	e01a      	b.n	80100d2 <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801009c:	693b      	ldr	r3, [r7, #16]
 801009e:	68db      	ldr	r3, [r3, #12]
 80100a0:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 80100a2:	693b      	ldr	r3, [r7, #16]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 80100a8:	68ba      	ldr	r2, [r7, #8]
 80100aa:	687b      	ldr	r3, [r7, #4]
 80100ac:	429a      	cmp	r2, r3
 80100ae:	d010      	beq.n	80100d2 <vTCPRemoveTCPChild+0x4e>
 80100b0:	68bb      	ldr	r3, [r7, #8]
 80100b2:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80100b4:	687b      	ldr	r3, [r7, #4]
 80100b6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80100b8:	429a      	cmp	r2, r3
 80100ba:	d10a      	bne.n	80100d2 <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 80100bc:	68bb      	ldr	r3, [r7, #8]
 80100be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80100c0:	687a      	ldr	r2, [r7, #4]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	d105      	bne.n	80100d2 <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	2200      	movs	r2, #0
 80100ca:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 80100cc:	2301      	movs	r3, #1
 80100ce:	617b      	str	r3, [r7, #20]
                    break;
 80100d0:	e003      	b.n	80100da <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 80100d2:	693a      	ldr	r2, [r7, #16]
 80100d4:	68fb      	ldr	r3, [r7, #12]
 80100d6:	429a      	cmp	r2, r3
 80100d8:	d1e0      	bne.n	801009c <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 80100da:	697b      	ldr	r3, [r7, #20]
    }
 80100dc:	4618      	mov	r0, r3
 80100de:	371c      	adds	r7, #28
 80100e0:	46bd      	mov	sp, r7
 80100e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80100e6:	4770      	bx	lr
 80100e8:	200012b8 	.word	0x200012b8
 80100ec:	200012b0 	.word	0x200012b0

080100f0 <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 80100f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80100f2:	b097      	sub	sp, #92	@ 0x5c
 80100f4:	af02      	add	r7, sp, #8
 80100f6:	6078      	str	r0, [r7, #4]
 80100f8:	460b      	mov	r3, r1
 80100fa:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 80100fc:	687b      	ldr	r3, [r7, #4]
 80100fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010106:	2b04      	cmp	r3, #4
 8010108:	d906      	bls.n	8010118 <vTCPStateChange+0x28>
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010110:	2b08      	cmp	r3, #8
 8010112:	d001      	beq.n	8010118 <vTCPStateChange+0x28>
 8010114:	2301      	movs	r3, #1
 8010116:	e000      	b.n	801011a <vTCPStateChange+0x2a>
 8010118:	2300      	movs	r3, #0
 801011a:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 801011c:	78fb      	ldrb	r3, [r7, #3]
 801011e:	2b04      	cmp	r3, #4
 8010120:	d904      	bls.n	801012c <vTCPStateChange+0x3c>
 8010122:	78fb      	ldrb	r3, [r7, #3]
 8010124:	2b08      	cmp	r3, #8
 8010126:	d001      	beq.n	801012c <vTCPStateChange+0x3c>
 8010128:	2301      	movs	r3, #1
 801012a:	e000      	b.n	801012e <vTCPStateChange+0x3e>
 801012c:	2300      	movs	r3, #0
 801012e:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 8010130:	687b      	ldr	r3, [r7, #4]
 8010132:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010136:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 801013a:	2300      	movs	r3, #0
 801013c:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 801013e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010142:	2b02      	cmp	r3, #2
 8010144:	d007      	beq.n	8010156 <vTCPStateChange+0x66>
 8010146:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801014a:	2b03      	cmp	r3, #3
 801014c:	d003      	beq.n	8010156 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 801014e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010152:	2b04      	cmp	r3, #4
 8010154:	d114      	bne.n	8010180 <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 8010156:	78fb      	ldrb	r3, [r7, #3]
 8010158:	2b08      	cmp	r3, #8
 801015a:	d111      	bne.n	8010180 <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 801015c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010160:	4618      	mov	r0, r3
 8010162:	f001 fed7 	bl	8011f14 <FreeRTOS_GetTCPStateName>
 8010166:	4604      	mov	r4, r0
 8010168:	78fb      	ldrb	r3, [r7, #3]
 801016a:	4618      	mov	r0, r3
 801016c:	f001 fed2 	bl	8011f14 <FreeRTOS_GetTCPStateName>
 8010170:	4603      	mov	r3, r0
 8010172:	461a      	mov	r2, r3
 8010174:	4621      	mov	r1, r4
 8010176:	4875      	ldr	r0, [pc, #468]	@ (801034c <vTCPStateChange+0x25c>)
 8010178:	f010 fa08 	bl	802058c <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 801017c:	2301      	movs	r3, #1
 801017e:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 8010180:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010184:	429a      	cmp	r2, r3
 8010186:	f000 809f 	beq.w	80102c8 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010190:	f003 0304 	and.w	r3, r3, #4
 8010194:	b2db      	uxtb	r3, r3
 8010196:	2b00      	cmp	r3, #0
 8010198:	d012      	beq.n	80101c0 <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 801019a:	687b      	ldr	r3, [r7, #4]
 801019c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80101a0:	f003 0308 	and.w	r3, r3, #8
 80101a4:	b2db      	uxtb	r3, r3
 80101a6:	2b00      	cmp	r3, #0
 80101a8:	d10a      	bne.n	80101c0 <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 80101aa:	687b      	ldr	r3, [r7, #4]
 80101ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80101ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 80101b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101b2:	2b00      	cmp	r3, #0
 80101b4:	d104      	bne.n	80101c0 <vTCPStateChange+0xd0>
 80101b6:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 80101ba:	4865      	ldr	r0, [pc, #404]	@ (8010350 <vTCPStateChange+0x260>)
 80101bc:	f7f0 ffb8 	bl	8001130 <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 80101c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80101c2:	2b00      	cmp	r3, #0
 80101c4:	d057      	beq.n	8010276 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80101cc:	f003 0304 	and.w	r3, r3, #4
 80101d0:	b2db      	uxtb	r3, r3
 80101d2:	2b00      	cmp	r3, #0
 80101d4:	d03c      	beq.n	8010250 <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 80101d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101d8:	2b00      	cmp	r3, #0
 80101da:	d027      	beq.n	801022c <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 80101dc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101de:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80101e0:	2b00      	cmp	r3, #0
 80101e2:	d102      	bne.n	80101ea <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 80101e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101e6:	687a      	ldr	r2, [r7, #4]
 80101e8:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80101ea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101ec:	681b      	ldr	r3, [r3, #0]
 80101ee:	f043 0204 	orr.w	r2, r3, #4
 80101f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101f4:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 80101f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80101f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101fa:	f003 0301 	and.w	r3, r3, #1
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d005      	beq.n	801020e <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 8010202:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801020a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801020c:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 801020e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010210:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010214:	2b00      	cmp	r3, #0
 8010216:	d009      	beq.n	801022c <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 8010218:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801021a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801021e:	f003 0308 	and.w	r3, r3, #8
 8010222:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8010224:	2b00      	cmp	r3, #0
 8010226:	d101      	bne.n	801022c <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 8010228:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801022a:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 801022c:	687b      	ldr	r3, [r7, #4]
 801022e:	2200      	movs	r2, #0
 8010230:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8010232:	687a      	ldr	r2, [r7, #4]
 8010234:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010238:	f36f 0382 	bfc	r3, #2, #1
 801023c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8010240:	687a      	ldr	r2, [r7, #4]
 8010242:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010246:	f043 0302 	orr.w	r3, r3, #2
 801024a:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 801024e:	e024      	b.n	801029a <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 8010250:	687b      	ldr	r3, [r7, #4]
 8010252:	681b      	ldr	r3, [r3, #0]
 8010254:	f043 0208 	orr.w	r2, r3, #8
 8010258:	687b      	ldr	r3, [r7, #4]
 801025a:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010260:	f003 0302 	and.w	r3, r3, #2
 8010264:	2b00      	cmp	r3, #0
 8010266:	d018      	beq.n	801029a <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010270:	687b      	ldr	r3, [r7, #4]
 8010272:	601a      	str	r2, [r3, #0]
 8010274:	e011      	b.n	801029a <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8010276:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010278:	681b      	ldr	r3, [r3, #0]
 801027a:	f043 0220 	orr.w	r2, r3, #32
 801027e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010280:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010282:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010286:	f003 0304 	and.w	r3, r3, #4
 801028a:	2b00      	cmp	r3, #0
 801028c:	d005      	beq.n	801029a <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 801028e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8010296:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010298:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 801029a:	687b      	ldr	r3, [r7, #4]
 801029c:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d004      	beq.n	80102ae <vTCPStateChange+0x1be>
 80102a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80102a6:	2b00      	cmp	r3, #0
 80102a8:	d101      	bne.n	80102ae <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 80102aa:	687b      	ldr	r3, [r7, #4]
 80102ac:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 80102ae:	687b      	ldr	r3, [r7, #4]
 80102b0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80102b4:	4618      	mov	r0, r3
 80102b6:	f000 ffff 	bl	80112b8 <prvTCPSocketIsActive>
 80102ba:	4603      	mov	r3, r0
 80102bc:	2b00      	cmp	r3, #0
 80102be:	d103      	bne.n	80102c8 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 80102c0:	687b      	ldr	r3, [r7, #4]
 80102c2:	2200      	movs	r2, #0
 80102c4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 80102c8:	687b      	ldr	r3, [r7, #4]
 80102ca:	78fa      	ldrb	r2, [r7, #3]
 80102cc:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 80102d0:	78fb      	ldrb	r3, [r7, #3]
 80102d2:	2b00      	cmp	r3, #0
 80102d4:	d003      	beq.n	80102de <vTCPStateChange+0x1ee>
 80102d6:	78fb      	ldrb	r3, [r7, #3]
 80102d8:	2b08      	cmp	r3, #8
 80102da:	f040 8084 	bne.w	80103e6 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 80102de:	2300      	movs	r3, #0
 80102e0:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 80102e2:	2300      	movs	r3, #0
 80102e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 80102e6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80102e8:	687b      	ldr	r3, [r7, #4]
 80102ea:	429a      	cmp	r2, r3
 80102ec:	d106      	bne.n	80102fc <vTCPStateChange+0x20c>
 80102ee:	687b      	ldr	r3, [r7, #4]
 80102f0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80102f2:	2b00      	cmp	r3, #0
 80102f4:	d002      	beq.n	80102fc <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 80102f6:	687b      	ldr	r3, [r7, #4]
 80102f8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80102fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 80102fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80102fe:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010300:	2b00      	cmp	r3, #0
 8010302:	d006      	beq.n	8010312 <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 8010304:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010306:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8010308:	687a      	ldr	r2, [r7, #4]
 801030a:	429a      	cmp	r2, r3
 801030c:	d101      	bne.n	8010312 <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 801030e:	2301      	movs	r3, #1
 8010310:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 8010312:	687b      	ldr	r3, [r7, #4]
 8010314:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010318:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801031c:	b2db      	uxtb	r3, r3
 801031e:	4619      	mov	r1, r3
 8010320:	687b      	ldr	r3, [r7, #4]
 8010322:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010326:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801032a:	b2db      	uxtb	r3, r3
 801032c:	461a      	mov	r2, r3
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010334:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010338:	b2db      	uxtb	r3, r3
 801033a:	4806      	ldr	r0, [pc, #24]	@ (8010354 <vTCPStateChange+0x264>)
 801033c:	f010 f926 	bl	802058c <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 8010340:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010342:	2b00      	cmp	r3, #0
 8010344:	d008      	beq.n	8010358 <vTCPStateChange+0x268>
 8010346:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010348:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801034a:	e006      	b.n	801035a <vTCPStateChange+0x26a>
 801034c:	08024564 	.word	0x08024564
 8010350:	08024578 	.word	0x08024578
 8010354:	080245a8 	.word	0x080245a8
 8010358:	2300      	movs	r3, #0
 801035a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801035c:	9200      	str	r2, [sp, #0]
 801035e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010360:	6879      	ldr	r1, [r7, #4]
 8010362:	4865      	ldr	r0, [pc, #404]	@ (80104f8 <vTCPStateChange+0x408>)
 8010364:	f010 f912 	bl	802058c <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 8010368:	f7f3 f96a 	bl	8003640 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 801036c:	687b      	ldr	r3, [r7, #4]
 801036e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010372:	f003 0304 	and.w	r3, r3, #4
 8010376:	b2db      	uxtb	r3, r3
 8010378:	2b00      	cmp	r3, #0
 801037a:	d107      	bne.n	801038c <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010382:	f003 0302 	and.w	r3, r3, #2
 8010386:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8010388:	2b00      	cmp	r3, #0
 801038a:	d026      	beq.n	80103da <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010392:	f003 0308 	and.w	r3, r3, #8
 8010396:	b2db      	uxtb	r3, r3
 8010398:	2b00      	cmp	r3, #0
 801039a:	d11e      	bne.n	80103da <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 801039c:	6878      	ldr	r0, [r7, #4]
 801039e:	f7ff fe71 	bl	8010084 <vTCPRemoveTCPChild>
 80103a2:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 80103a4:	687a      	ldr	r2, [r7, #4]
 80103a6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80103aa:	f36f 0382 	bfc	r3, #2, #1
 80103ae:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 80103b2:	687a      	ldr	r2, [r7, #4]
 80103b4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80103b8:	f36f 0341 	bfc	r3, #1, #1
 80103bc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 80103c0:	f7f9 f978 	bl	80096b4 <xIsCallingFromIPTask>
 80103c4:	4603      	mov	r3, r0
 80103c6:	2b00      	cmp	r3, #0
 80103c8:	d104      	bne.n	80103d4 <vTCPStateChange+0x2e4>
 80103ca:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80103ce:	484b      	ldr	r0, [pc, #300]	@ (80104fc <vTCPStateChange+0x40c>)
 80103d0:	f7f0 feae 	bl	8001130 <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 80103d4:	6878      	ldr	r0, [r7, #4]
 80103d6:	f7ff fd57 	bl	800fe88 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 80103da:	f7f3 f93f 	bl	800365c <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 80103de:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80103e0:	4847      	ldr	r0, [pc, #284]	@ (8010500 <vTCPStateChange+0x410>)
 80103e2:	f010 f8d3 	bl	802058c <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 80103e6:	78fb      	ldrb	r3, [r7, #3]
 80103e8:	2b08      	cmp	r3, #8
 80103ea:	d11b      	bne.n	8010424 <vTCPStateChange+0x334>
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80103f2:	f003 0308 	and.w	r3, r3, #8
 80103f6:	b2db      	uxtb	r3, r3
 80103f8:	2b00      	cmp	r3, #0
 80103fa:	d013      	beq.n	8010424 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 80103fc:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010400:	3b03      	subs	r3, #3
 8010402:	2b01      	cmp	r3, #1
 8010404:	d80d      	bhi.n	8010422 <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 8010406:	687b      	ldr	r3, [r7, #4]
 8010408:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801040a:	4619      	mov	r1, r3
 801040c:	483d      	ldr	r0, [pc, #244]	@ (8010504 <vTCPStateChange+0x414>)
 801040e:	f010 f8bd 	bl	802058c <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 8010412:	687b      	ldr	r3, [r7, #4]
 8010414:	2200      	movs	r2, #0
 8010416:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 801041a:	6878      	ldr	r0, [r7, #4]
 801041c:	f7ff fd50 	bl	800fec0 <vSocketListenNextTime>
                    break;
 8010420:	e000      	b.n	8010424 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 8010422:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 8010424:	6878      	ldr	r0, [r7, #4]
 8010426:	f7ff fe07 	bl	8010038 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801042a:	4b37      	ldr	r3, [pc, #220]	@ (8010508 <vTCPStateChange+0x418>)
 801042c:	681b      	ldr	r3, [r3, #0]
 801042e:	2b00      	cmp	r3, #0
 8010430:	db4f      	blt.n	80104d2 <vTCPStateChange+0x3e2>
 8010432:	687b      	ldr	r3, [r7, #4]
 8010434:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010436:	2b17      	cmp	r3, #23
 8010438:	d04b      	beq.n	80104d2 <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	7a1b      	ldrb	r3, [r3, #8]
 801043e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010442:	b2db      	uxtb	r3, r3
 8010444:	2b00      	cmp	r3, #0
 8010446:	d002      	beq.n	801044e <vTCPStateChange+0x35e>
 8010448:	2b01      	cmp	r3, #1
 801044a:	d01d      	beq.n	8010488 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 801044c:	e026      	b.n	801049c <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010452:	061a      	lsls	r2, r3, #24
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010458:	021b      	lsls	r3, r3, #8
 801045a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801045e:	431a      	orrs	r2, r3
 8010460:	687b      	ldr	r3, [r7, #4]
 8010462:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010464:	0a1b      	lsrs	r3, r3, #8
 8010466:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801046a:	431a      	orrs	r2, r3
 801046c:	687b      	ldr	r3, [r7, #4]
 801046e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010470:	0e1b      	lsrs	r3, r3, #24
 8010472:	4313      	orrs	r3, r2
 8010474:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 8010476:	f107 0208 	add.w	r2, r7, #8
 801047a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801047e:	2328      	movs	r3, #40	@ 0x28
 8010480:	2002      	movs	r0, #2
 8010482:	f7fe f827 	bl	800e4d4 <FreeRTOS_inet_ntop>
                           break;
 8010486:	e009      	b.n	801049c <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8010488:	687b      	ldr	r3, [r7, #4]
 801048a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 801048e:	f107 0208 	add.w	r2, r7, #8
 8010492:	2328      	movs	r3, #40	@ 0x28
 8010494:	200a      	movs	r0, #10
 8010496:	f7fe f81d 	bl	800e4d4 <FreeRTOS_inet_ntop>
                            break;
 801049a:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80104a0:	461d      	mov	r5, r3
 80104a2:	687b      	ldr	r3, [r7, #4]
 80104a4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80104a8:	461e      	mov	r6, r3
 80104aa:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80104ae:	4618      	mov	r0, r3
 80104b0:	f001 fd30 	bl	8011f14 <FreeRTOS_GetTCPStateName>
 80104b4:	4604      	mov	r4, r0
 80104b6:	78fb      	ldrb	r3, [r7, #3]
 80104b8:	4618      	mov	r0, r3
 80104ba:	f001 fd2b 	bl	8011f14 <FreeRTOS_GetTCPStateName>
 80104be:	4603      	mov	r3, r0
 80104c0:	f107 0208 	add.w	r2, r7, #8
 80104c4:	9301      	str	r3, [sp, #4]
 80104c6:	9400      	str	r4, [sp, #0]
 80104c8:	4633      	mov	r3, r6
 80104ca:	4629      	mov	r1, r5
 80104cc:	480f      	ldr	r0, [pc, #60]	@ (801050c <vTCPStateChange+0x41c>)
 80104ce:	f010 f85d 	bl	802058c <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 80104d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d005      	beq.n	80104e4 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 80104d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80104da:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80104de:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80104e0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80104e2:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 80104e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80104e6:	2b00      	cmp	r3, #0
 80104e8:	d002      	beq.n	80104f0 <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 80104ea:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80104ec:	f7fe f871 	bl	800e5d2 <vSocketWakeUpUser>
        }
    }
 80104f0:	bf00      	nop
 80104f2:	3754      	adds	r7, #84	@ 0x54
 80104f4:	46bd      	mov	sp, r7
 80104f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80104f8:	080245e4 	.word	0x080245e4
 80104fc:	08024578 	.word	0x08024578
 8010500:	08024618 	.word	0x08024618
 8010504:	0802463c 	.word	0x0802463c
 8010508:	200012f4 	.word	0x200012f4
 801050c:	08024660 	.word	0x08024660

08010510 <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 8010510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010514:	b098      	sub	sp, #96	@ 0x60
 8010516:	af02      	add	r7, sp, #8
 8010518:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 801051a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801051e:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8010520:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010522:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010526:	2b02      	cmp	r3, #2
 8010528:	f040 80cc 	bne.w	80106c4 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 801052c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801052e:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010532:	f003 0308 	and.w	r3, r3, #8
 8010536:	b2db      	uxtb	r3, r3
 8010538:	2b00      	cmp	r3, #0
 801053a:	d01a      	beq.n	8010572 <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 801053c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801053e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010542:	2b02      	cmp	r3, #2
 8010544:	d811      	bhi.n	801056a <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 8010546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010548:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801054c:	2b00      	cmp	r3, #0
 801054e:	d102      	bne.n	8010556 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 8010550:	2300      	movs	r3, #0
 8010552:	653b      	str	r3, [r7, #80]	@ 0x50
 8010554:	e010      	b.n	8010578 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 8010556:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010558:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801055c:	3b01      	subs	r3, #1
 801055e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010562:	fa02 f303 	lsl.w	r3, r2, r3
 8010566:	653b      	str	r3, [r7, #80]	@ 0x50
 8010568:	e006      	b.n	8010578 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 801056a:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 801056e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010570:	e002      	b.n	8010578 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 8010572:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8010576:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 8010578:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801057a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801057c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801057e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010582:	4618      	mov	r0, r3
 8010584:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010586:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801058a:	461a      	mov	r2, r3
 801058c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801058e:	9300      	str	r3, [sp, #0]
 8010590:	4613      	mov	r3, r2
 8010592:	4602      	mov	r2, r0
 8010594:	48a4      	ldr	r0, [pc, #656]	@ (8010828 <prvTCPNextTimeout+0x318>)
 8010596:	f00f fff9 	bl	802058c <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 801059a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801059c:	2200      	movs	r2, #0
 801059e:	643b      	str	r3, [r7, #64]	@ 0x40
 80105a0:	647a      	str	r2, [r7, #68]	@ 0x44
 80105a2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80105a6:	4622      	mov	r2, r4
 80105a8:	462b      	mov	r3, r5
 80105aa:	f04f 0000 	mov.w	r0, #0
 80105ae:	f04f 0100 	mov.w	r1, #0
 80105b2:	0159      	lsls	r1, r3, #5
 80105b4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80105b8:	0150      	lsls	r0, r2, #5
 80105ba:	4602      	mov	r2, r0
 80105bc:	460b      	mov	r3, r1
 80105be:	4621      	mov	r1, r4
 80105c0:	1a51      	subs	r1, r2, r1
 80105c2:	6239      	str	r1, [r7, #32]
 80105c4:	4629      	mov	r1, r5
 80105c6:	eb63 0301 	sbc.w	r3, r3, r1
 80105ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80105cc:	f04f 0200 	mov.w	r2, #0
 80105d0:	f04f 0300 	mov.w	r3, #0
 80105d4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80105d8:	4649      	mov	r1, r9
 80105da:	008b      	lsls	r3, r1, #2
 80105dc:	4641      	mov	r1, r8
 80105de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80105e2:	4641      	mov	r1, r8
 80105e4:	008a      	lsls	r2, r1, #2
 80105e6:	4610      	mov	r0, r2
 80105e8:	4619      	mov	r1, r3
 80105ea:	4603      	mov	r3, r0
 80105ec:	4622      	mov	r2, r4
 80105ee:	189b      	adds	r3, r3, r2
 80105f0:	61bb      	str	r3, [r7, #24]
 80105f2:	462b      	mov	r3, r5
 80105f4:	460a      	mov	r2, r1
 80105f6:	eb42 0303 	adc.w	r3, r2, r3
 80105fa:	61fb      	str	r3, [r7, #28]
 80105fc:	f04f 0200 	mov.w	r2, #0
 8010600:	f04f 0300 	mov.w	r3, #0
 8010604:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8010608:	4629      	mov	r1, r5
 801060a:	00cb      	lsls	r3, r1, #3
 801060c:	4621      	mov	r1, r4
 801060e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010612:	4621      	mov	r1, r4
 8010614:	00ca      	lsls	r2, r1, #3
 8010616:	4610      	mov	r0, r2
 8010618:	4619      	mov	r1, r3
 801061a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801061e:	f04f 0300 	mov.w	r3, #0
 8010622:	f7ef fec5 	bl	80003b0 <__aeabi_uldivmod>
 8010626:	4602      	mov	r2, r0
 8010628:	460b      	mov	r3, r1
 801062a:	4613      	mov	r3, r2
 801062c:	2b00      	cmp	r3, #0
 801062e:	d044      	beq.n	80106ba <prvTCPNextTimeout+0x1aa>
 8010630:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010632:	2200      	movs	r2, #0
 8010634:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010636:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8010638:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 801063c:	4622      	mov	r2, r4
 801063e:	462b      	mov	r3, r5
 8010640:	f04f 0000 	mov.w	r0, #0
 8010644:	f04f 0100 	mov.w	r1, #0
 8010648:	0159      	lsls	r1, r3, #5
 801064a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801064e:	0150      	lsls	r0, r2, #5
 8010650:	4602      	mov	r2, r0
 8010652:	460b      	mov	r3, r1
 8010654:	4621      	mov	r1, r4
 8010656:	ebb2 0a01 	subs.w	sl, r2, r1
 801065a:	4629      	mov	r1, r5
 801065c:	eb63 0b01 	sbc.w	fp, r3, r1
 8010660:	f04f 0200 	mov.w	r2, #0
 8010664:	f04f 0300 	mov.w	r3, #0
 8010668:	ea4f 038b 	mov.w	r3, fp, lsl #2
 801066c:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8010670:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8010674:	4692      	mov	sl, r2
 8010676:	469b      	mov	fp, r3
 8010678:	4623      	mov	r3, r4
 801067a:	eb1a 0303 	adds.w	r3, sl, r3
 801067e:	613b      	str	r3, [r7, #16]
 8010680:	462b      	mov	r3, r5
 8010682:	eb4b 0303 	adc.w	r3, fp, r3
 8010686:	617b      	str	r3, [r7, #20]
 8010688:	f04f 0200 	mov.w	r2, #0
 801068c:	f04f 0300 	mov.w	r3, #0
 8010690:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010694:	4629      	mov	r1, r5
 8010696:	00cb      	lsls	r3, r1, #3
 8010698:	4621      	mov	r1, r4
 801069a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801069e:	4621      	mov	r1, r4
 80106a0:	00ca      	lsls	r2, r1, #3
 80106a2:	4610      	mov	r0, r2
 80106a4:	4619      	mov	r1, r3
 80106a6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80106aa:	f04f 0300 	mov.w	r3, #0
 80106ae:	f7ef fe7f 	bl	80003b0 <__aeabi_uldivmod>
 80106b2:	4602      	mov	r2, r0
 80106b4:	460b      	mov	r3, r1
 80106b6:	b292      	uxth	r2, r2
 80106b8:	e000      	b.n	80106bc <prvTCPNextTimeout+0x1ac>
 80106ba:	2201      	movs	r2, #1
 80106bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106be:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 80106c2:	e0a8      	b.n	8010816 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 80106c4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106c6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 80106ca:	2b00      	cmp	r3, #0
 80106cc:	f040 80a3 	bne.w	8010816 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 80106d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106d2:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80106d6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106d8:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 80106dc:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 80106e0:	461a      	mov	r2, r3
 80106e2:	f004 fcbd 	bl	8015060 <xTCPWindowTxHasData>
 80106e6:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 80106e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80106ea:	2b00      	cmp	r3, #0
 80106ec:	d108      	bne.n	8010700 <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 80106ee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	d002      	beq.n	80106fa <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 80106f4:	2301      	movs	r3, #1
 80106f6:	653b      	str	r3, [r7, #80]	@ 0x50
 80106f8:	e002      	b.n	8010700 <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 80106fa:	f644 6320 	movw	r3, #20000	@ 0x4e20
 80106fe:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 8010700:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010702:	2200      	movs	r2, #0
 8010704:	633b      	str	r3, [r7, #48]	@ 0x30
 8010706:	637a      	str	r2, [r7, #52]	@ 0x34
 8010708:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 801070c:	4652      	mov	r2, sl
 801070e:	465b      	mov	r3, fp
 8010710:	f04f 0000 	mov.w	r0, #0
 8010714:	f04f 0100 	mov.w	r1, #0
 8010718:	0159      	lsls	r1, r3, #5
 801071a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 801071e:	0150      	lsls	r0, r2, #5
 8010720:	4602      	mov	r2, r0
 8010722:	460b      	mov	r3, r1
 8010724:	4651      	mov	r1, sl
 8010726:	ebb2 0801 	subs.w	r8, r2, r1
 801072a:	4659      	mov	r1, fp
 801072c:	eb63 0901 	sbc.w	r9, r3, r1
 8010730:	f04f 0200 	mov.w	r2, #0
 8010734:	f04f 0300 	mov.w	r3, #0
 8010738:	ea4f 0389 	mov.w	r3, r9, lsl #2
 801073c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8010740:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8010744:	4690      	mov	r8, r2
 8010746:	4699      	mov	r9, r3
 8010748:	4653      	mov	r3, sl
 801074a:	eb18 0303 	adds.w	r3, r8, r3
 801074e:	60bb      	str	r3, [r7, #8]
 8010750:	465b      	mov	r3, fp
 8010752:	eb49 0303 	adc.w	r3, r9, r3
 8010756:	60fb      	str	r3, [r7, #12]
 8010758:	f04f 0200 	mov.w	r2, #0
 801075c:	f04f 0300 	mov.w	r3, #0
 8010760:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8010764:	4649      	mov	r1, r9
 8010766:	00cb      	lsls	r3, r1, #3
 8010768:	4641      	mov	r1, r8
 801076a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801076e:	4641      	mov	r1, r8
 8010770:	00ca      	lsls	r2, r1, #3
 8010772:	4610      	mov	r0, r2
 8010774:	4619      	mov	r1, r3
 8010776:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 801077a:	f04f 0300 	mov.w	r3, #0
 801077e:	f7ef fe17 	bl	80003b0 <__aeabi_uldivmod>
 8010782:	4602      	mov	r2, r0
 8010784:	460b      	mov	r3, r1
 8010786:	4613      	mov	r3, r2
 8010788:	2b00      	cmp	r3, #0
 801078a:	d040      	beq.n	801080e <prvTCPNextTimeout+0x2fe>
 801078c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801078e:	2200      	movs	r2, #0
 8010790:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010792:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010794:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8010798:	4642      	mov	r2, r8
 801079a:	464b      	mov	r3, r9
 801079c:	f04f 0000 	mov.w	r0, #0
 80107a0:	f04f 0100 	mov.w	r1, #0
 80107a4:	0159      	lsls	r1, r3, #5
 80107a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80107aa:	0150      	lsls	r0, r2, #5
 80107ac:	4602      	mov	r2, r0
 80107ae:	460b      	mov	r3, r1
 80107b0:	4641      	mov	r1, r8
 80107b2:	1a54      	subs	r4, r2, r1
 80107b4:	4649      	mov	r1, r9
 80107b6:	eb63 0501 	sbc.w	r5, r3, r1
 80107ba:	f04f 0200 	mov.w	r2, #0
 80107be:	f04f 0300 	mov.w	r3, #0
 80107c2:	00ab      	lsls	r3, r5, #2
 80107c4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 80107c8:	00a2      	lsls	r2, r4, #2
 80107ca:	4614      	mov	r4, r2
 80107cc:	461d      	mov	r5, r3
 80107ce:	4643      	mov	r3, r8
 80107d0:	18e3      	adds	r3, r4, r3
 80107d2:	603b      	str	r3, [r7, #0]
 80107d4:	464b      	mov	r3, r9
 80107d6:	eb45 0303 	adc.w	r3, r5, r3
 80107da:	607b      	str	r3, [r7, #4]
 80107dc:	f04f 0200 	mov.w	r2, #0
 80107e0:	f04f 0300 	mov.w	r3, #0
 80107e4:	e9d7 4500 	ldrd	r4, r5, [r7]
 80107e8:	4629      	mov	r1, r5
 80107ea:	00cb      	lsls	r3, r1, #3
 80107ec:	4621      	mov	r1, r4
 80107ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80107f2:	4621      	mov	r1, r4
 80107f4:	00ca      	lsls	r2, r1, #3
 80107f6:	4610      	mov	r0, r2
 80107f8:	4619      	mov	r1, r3
 80107fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80107fe:	f04f 0300 	mov.w	r3, #0
 8010802:	f7ef fdd5 	bl	80003b0 <__aeabi_uldivmod>
 8010806:	4602      	mov	r2, r0
 8010808:	460b      	mov	r3, r1
 801080a:	b292      	uxth	r2, r2
 801080c:	e000      	b.n	8010810 <prvTCPNextTimeout+0x300>
 801080e:	2201      	movs	r2, #1
 8010810:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010812:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8010816:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010818:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 801081c:	4618      	mov	r0, r3
 801081e:	3758      	adds	r7, #88	@ 0x58
 8010820:	46bd      	mov	sp, r7
 8010822:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010826:	bf00      	nop
 8010828:	08024684 	.word	0x08024684

0801082c <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 801082c:	b4b0      	push	{r4, r5, r7}
 801082e:	b08b      	sub	sp, #44	@ 0x2c
 8010830:	af00      	add	r7, sp, #0
 8010832:	6078      	str	r0, [r7, #4]
 8010834:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8010836:	683b      	ldr	r3, [r7, #0]
 8010838:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 801083a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801083c:	899b      	ldrh	r3, [r3, #12]
 801083e:	b29b      	uxth	r3, r3
 8010840:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8010844:	4293      	cmp	r3, r2
 8010846:	d10e      	bne.n	8010866 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8010848:	683b      	ldr	r3, [r7, #0]
 801084a:	330e      	adds	r3, #14
 801084c:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 801084e:	2301      	movs	r3, #1
 8010850:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 8010852:	69fb      	ldr	r3, [r7, #28]
 8010854:	3308      	adds	r3, #8
 8010856:	f107 0408 	add.w	r4, r7, #8
 801085a:	6818      	ldr	r0, [r3, #0]
 801085c:	6859      	ldr	r1, [r3, #4]
 801085e:	689a      	ldr	r2, [r3, #8]
 8010860:	68db      	ldr	r3, [r3, #12]
 8010862:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010864:	e018      	b.n	8010898 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8010866:	683b      	ldr	r3, [r7, #0]
 8010868:	330e      	adds	r3, #14
 801086a:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 801086c:	2300      	movs	r3, #0
 801086e:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8010870:	6a3b      	ldr	r3, [r7, #32]
 8010872:	68db      	ldr	r3, [r3, #12]
 8010874:	061a      	lsls	r2, r3, #24
 8010876:	6a3b      	ldr	r3, [r7, #32]
 8010878:	68db      	ldr	r3, [r3, #12]
 801087a:	021b      	lsls	r3, r3, #8
 801087c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010880:	431a      	orrs	r2, r3
 8010882:	6a3b      	ldr	r3, [r7, #32]
 8010884:	68db      	ldr	r3, [r3, #12]
 8010886:	0a1b      	lsrs	r3, r3, #8
 8010888:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801088c:	431a      	orrs	r2, r3
 801088e:	6a3b      	ldr	r3, [r7, #32]
 8010890:	68db      	ldr	r3, [r3, #12]
 8010892:	0e1b      	lsrs	r3, r3, #24
 8010894:	4313      	orrs	r3, r2
 8010896:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	461d      	mov	r5, r3
 801089c:	f107 0408 	add.w	r4, r7, #8
 80108a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80108a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80108a4:	6823      	ldr	r3, [r4, #0]
 80108a6:	602b      	str	r3, [r5, #0]
    }
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	372c      	adds	r7, #44	@ 0x2c
 80108ac:	46bd      	mov	sp, r7
 80108ae:	bcb0      	pop	{r4, r5, r7}
 80108b0:	4770      	bx	lr
	...

080108b4 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 80108b4:	b5b0      	push	{r4, r5, r7, lr}
 80108b6:	b096      	sub	sp, #88	@ 0x58
 80108b8:	af04      	add	r7, sp, #16
 80108ba:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 80108bc:	2301      	movs	r3, #1
 80108be:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 80108c0:	687b      	ldr	r3, [r7, #4]
 80108c2:	2b00      	cmp	r3, #0
 80108c4:	d104      	bne.n	80108d0 <xProcessReceivedTCPPacket+0x1c>
 80108c6:	f240 21f7 	movw	r1, #759	@ 0x2f7
 80108ca:	4898      	ldr	r0, [pc, #608]	@ (8010b2c <xProcessReceivedTCPPacket+0x278>)
 80108cc:	f7f0 fc30 	bl	8001130 <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 80108d0:	687b      	ldr	r3, [r7, #4]
 80108d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80108d4:	2b00      	cmp	r3, #0
 80108d6:	d104      	bne.n	80108e2 <xProcessReceivedTCPPacket+0x2e>
 80108d8:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 80108dc:	4893      	ldr	r0, [pc, #588]	@ (8010b2c <xProcessReceivedTCPPacket+0x278>)
 80108de:	f7f0 fc27 	bl	8001130 <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 80108e2:	687b      	ldr	r3, [r7, #4]
 80108e4:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 80108e6:	69fb      	ldr	r3, [r7, #28]
 80108e8:	4618      	mov	r0, r3
 80108ea:	f7f8 fb55 	bl	8008f98 <uxIPHeaderSizePacket>
 80108ee:	4603      	mov	r3, r0
 80108f0:	330e      	adds	r3, #14
 80108f2:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 80108f4:	69fb      	ldr	r3, [r7, #28]
 80108f6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80108f8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80108fa:	3314      	adds	r3, #20
 80108fc:	429a      	cmp	r2, r3
 80108fe:	d202      	bcs.n	8010906 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 8010900:	2300      	movs	r3, #0
 8010902:	647b      	str	r3, [r7, #68]	@ 0x44
 8010904:	e191      	b.n	8010c2a <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 801090a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801090c:	4413      	add	r3, r2
 801090e:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8010910:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010912:	7b5b      	ldrb	r3, [r3, #13]
 8010914:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 8010916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010918:	885b      	ldrh	r3, [r3, #2]
 801091a:	b29b      	uxth	r3, r3
 801091c:	021b      	lsls	r3, r3, #8
 801091e:	b21a      	sxth	r2, r3
 8010920:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010922:	885b      	ldrh	r3, [r3, #2]
 8010924:	b29b      	uxth	r3, r3
 8010926:	0a1b      	lsrs	r3, r3, #8
 8010928:	b29b      	uxth	r3, r3
 801092a:	b21b      	sxth	r3, r3
 801092c:	4313      	orrs	r3, r2
 801092e:	b21b      	sxth	r3, r3
 8010930:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 8010932:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010934:	881b      	ldrh	r3, [r3, #0]
 8010936:	b29b      	uxth	r3, r3
 8010938:	021b      	lsls	r3, r3, #8
 801093a:	b21a      	sxth	r2, r3
 801093c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801093e:	881b      	ldrh	r3, [r3, #0]
 8010940:	b29b      	uxth	r3, r3
 8010942:	0a1b      	lsrs	r3, r3, #8
 8010944:	b29b      	uxth	r3, r3
 8010946:	b21b      	sxth	r3, r3
 8010948:	4313      	orrs	r3, r2
 801094a:	b21b      	sxth	r3, r3
 801094c:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 801094e:	69fb      	ldr	r3, [r7, #28]
 8010950:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010952:	f107 0308 	add.w	r3, r7, #8
 8010956:	4611      	mov	r1, r2
 8010958:	4618      	mov	r0, r3
 801095a:	f7ff ff67 	bl	801082c <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 801095e:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 8010960:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010962:	9303      	str	r3, [sp, #12]
 8010964:	466c      	mov	r4, sp
 8010966:	f107 0310 	add.w	r3, r7, #16
 801096a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 801096e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010972:	f107 0308 	add.w	r3, r7, #8
 8010976:	cb0c      	ldmia	r3, {r2, r3}
 8010978:	4629      	mov	r1, r5
 801097a:	2000      	movs	r0, #0
 801097c:	f7fe fbc2 	bl	800f104 <pxTCPSocketLookup>
 8010980:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 8010982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010984:	2b00      	cmp	r3, #0
 8010986:	d008      	beq.n	801099a <xProcessReceivedTCPPacket+0xe6>
 8010988:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801098a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801098e:	4618      	mov	r0, r3
 8010990:	f000 fc92 	bl	80112b8 <prvTCPSocketIsActive>
 8010994:	4603      	mov	r3, r0
 8010996:	2b00      	cmp	r3, #0
 8010998:	d116      	bne.n	80109c8 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 801099a:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 801099c:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 801099e:	4619      	mov	r1, r3
 80109a0:	4863      	ldr	r0, [pc, #396]	@ (8010b30 <xProcessReceivedTCPPacket+0x27c>)
 80109a2:	f00f fdf3 	bl	802058c <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 80109a6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80109a8:	f003 031f 	and.w	r3, r3, #31
 80109ac:	2b10      	cmp	r3, #16
 80109ae:	d008      	beq.n	80109c2 <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 80109b0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80109b2:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d103      	bne.n	80109c2 <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80109ba:	69fb      	ldr	r3, [r7, #28]
 80109bc:	4618      	mov	r0, r3
 80109be:	f002 fd0b 	bl	80133d8 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 80109c2:	2300      	movs	r3, #0
 80109c4:	647b      	str	r3, [r7, #68]	@ 0x44
 80109c6:	e0d6      	b.n	8010b76 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 80109c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109ca:	2200      	movs	r2, #0
 80109cc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 80109d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80109d2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80109d6:	2b01      	cmp	r3, #1
 80109d8:	d127      	bne.n	8010a2a <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 80109da:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80109dc:	f003 031f 	and.w	r3, r3, #31
 80109e0:	2b02      	cmp	r3, #2
 80109e2:	d015      	beq.n	8010a10 <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 80109e4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80109e6:	4618      	mov	r0, r3
 80109e8:	f003 fbbe 	bl	8014168 <prvTCPFlagMeaning>
 80109ec:	4601      	mov	r1, r0
 80109ee:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 80109f0:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 80109f2:	4850      	ldr	r0, [pc, #320]	@ (8010b34 <xProcessReceivedTCPPacket+0x280>)
 80109f4:	f00f fdca 	bl	802058c <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 80109f8:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 80109fa:	f003 0304 	and.w	r3, r3, #4
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d103      	bne.n	8010a0a <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 8010a02:	69fb      	ldr	r3, [r7, #28]
 8010a04:	4618      	mov	r0, r3
 8010a06:	f002 fce7 	bl	80133d8 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 8010a0a:	2300      	movs	r3, #0
 8010a0c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010a0e:	e0b2      	b.n	8010b76 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 8010a10:	69fb      	ldr	r3, [r7, #28]
 8010a12:	4619      	mov	r1, r3
 8010a14:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010a16:	f001 f999 	bl	8011d4c <prvHandleListen>
 8010a1a:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 8010a1c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a1e:	2b00      	cmp	r3, #0
 8010a20:	f040 80a9 	bne.w	8010b76 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 8010a24:	2300      	movs	r3, #0
 8010a26:	647b      	str	r3, [r7, #68]	@ 0x44
 8010a28:	e0a5      	b.n	8010b76 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 8010a2a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010a2c:	f003 0304 	and.w	r3, r3, #4
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d068      	beq.n	8010b06 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 8010a34:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010a36:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8010a38:	4619      	mov	r1, r3
 8010a3a:	483f      	ldr	r0, [pc, #252]	@ (8010b38 <xProcessReceivedTCPPacket+0x284>)
 8010a3c:	f00f fda6 	bl	802058c <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8010a40:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a42:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010a46:	2b02      	cmp	r3, #2
 8010a48:	d11f      	bne.n	8010a8a <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8010a4a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a4c:	689b      	ldr	r3, [r3, #8]
 8010a4e:	061a      	lsls	r2, r3, #24
 8010a50:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a52:	689b      	ldr	r3, [r3, #8]
 8010a54:	021b      	lsls	r3, r3, #8
 8010a56:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010a5a:	431a      	orrs	r2, r3
 8010a5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a5e:	689b      	ldr	r3, [r3, #8]
 8010a60:	0a1b      	lsrs	r3, r3, #8
 8010a62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010a66:	431a      	orrs	r2, r3
 8010a68:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a6a:	689b      	ldr	r3, [r3, #8]
 8010a6c:	0e1b      	lsrs	r3, r3, #24
 8010a6e:	4313      	orrs	r3, r2
 8010a70:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 8010a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010a74:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8010a78:	3301      	adds	r3, #1
 8010a7a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010a7c:	429a      	cmp	r2, r3
 8010a7e:	d13f      	bne.n	8010b00 <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8010a80:	2100      	movs	r1, #0
 8010a82:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010a84:	f7ff fb34 	bl	80100f0 <vTCPStateChange>
 8010a88:	e03a      	b.n	8010b00 <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8010a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a8c:	685b      	ldr	r3, [r3, #4]
 8010a8e:	061a      	lsls	r2, r3, #24
 8010a90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a92:	685b      	ldr	r3, [r3, #4]
 8010a94:	021b      	lsls	r3, r3, #8
 8010a96:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010a9a:	431a      	orrs	r2, r3
 8010a9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010a9e:	685b      	ldr	r3, [r3, #4]
 8010aa0:	0a1b      	lsrs	r3, r3, #8
 8010aa2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010aa6:	431a      	orrs	r2, r3
 8010aa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010aaa:	685b      	ldr	r3, [r3, #4]
 8010aac:	0e1b      	lsrs	r3, r3, #24
 8010aae:	4313      	orrs	r3, r2
 8010ab0:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 8010ab2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ab4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8010ab8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010aba:	429a      	cmp	r2, r3
 8010abc:	d104      	bne.n	8010ac8 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8010abe:	2100      	movs	r1, #0
 8010ac0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010ac2:	f7ff fb15 	bl	80100f0 <vTCPStateChange>
 8010ac6:	e01b      	b.n	8010b00 <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8010ac8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010aca:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8010ace:	4619      	mov	r1, r3
 8010ad0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ad2:	f003 fc82 	bl	80143da <xSequenceGreaterThan>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	2b00      	cmp	r3, #0
 8010ada:	d011      	beq.n	8010b00 <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8010adc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ade:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 8010ae2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ae4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8010ae8:	4413      	add	r3, r2
 8010aea:	4619      	mov	r1, r3
 8010aec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010aee:	f003 fc5e 	bl	80143ae <xSequenceLessThan>
 8010af2:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8010af4:	2b00      	cmp	r3, #0
 8010af6:	d003      	beq.n	8010b00 <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 8010af8:	69fb      	ldr	r3, [r7, #28]
 8010afa:	4618      	mov	r0, r3
 8010afc:	f002 fc5f 	bl	80133be <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 8010b00:	2300      	movs	r3, #0
 8010b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b04:	e037      	b.n	8010b76 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 8010b06:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010b08:	f003 031f 	and.w	r3, r3, #31
 8010b0c:	2b02      	cmp	r3, #2
 8010b0e:	d117      	bne.n	8010b40 <xProcessReceivedTCPPacket+0x28c>
 8010b10:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b12:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010b16:	2b04      	cmp	r3, #4
 8010b18:	d912      	bls.n	8010b40 <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 8010b1a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010b1c:	4619      	mov	r1, r3
 8010b1e:	4807      	ldr	r0, [pc, #28]	@ (8010b3c <xProcessReceivedTCPPacket+0x288>)
 8010b20:	f00f fd34 	bl	802058c <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 8010b24:	2300      	movs	r3, #0
 8010b26:	647b      	str	r3, [r7, #68]	@ 0x44
 8010b28:	e025      	b.n	8010b76 <xProcessReceivedTCPPacket+0x2c2>
 8010b2a:	bf00      	nop
 8010b2c:	08024578 	.word	0x08024578
 8010b30:	080246b0 	.word	0x080246b0
 8010b34:	080246d8 	.word	0x080246d8
 8010b38:	08024710 	.word	0x08024710
 8010b3c:	08024734 	.word	0x08024734
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 8010b40:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010b42:	f7f8 fa43 	bl	8008fcc <uxIPHeaderSizeSocket>
 8010b46:	4603      	mov	r3, r0
 8010b48:	330e      	adds	r3, #14
 8010b4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8010b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b4e:	33a0      	adds	r3, #160	@ 0xa0
 8010b50:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010b52:	4413      	add	r3, r2
 8010b54:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 8010b58:	69fb      	ldr	r3, [r7, #28]
 8010b5a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010b5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b5e:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8010b60:	2214      	movs	r2, #20
 8010b62:	4619      	mov	r1, r3
 8010b64:	f00f ff2e 	bl	80209c4 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 8010b68:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010b6a:	330d      	adds	r3, #13
 8010b6c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010b6e:	4413      	add	r3, r2
 8010b70:	2210      	movs	r2, #16
 8010b72:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 8010b76:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010b78:	2b00      	cmp	r3, #0
 8010b7a:	d056      	beq.n	8010c2a <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 8010b7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010b7e:	2b00      	cmp	r3, #0
 8010b80:	d104      	bne.n	8010b8c <xProcessReceivedTCPPacket+0x2d8>
 8010b82:	f240 319e 	movw	r1, #926	@ 0x39e
 8010b86:	482b      	ldr	r0, [pc, #172]	@ (8010c34 <xProcessReceivedTCPPacket+0x380>)
 8010b88:	f7f0 fad2 	bl	8001130 <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 8010b8c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010b8e:	f7ff fa53 	bl	8010038 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8010b92:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010b94:	7b1b      	ldrb	r3, [r3, #12]
 8010b96:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010b9a:	2b50      	cmp	r3, #80	@ 0x50
 8010b9c:	d905      	bls.n	8010baa <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 8010b9e:	69fb      	ldr	r3, [r7, #28]
 8010ba0:	4619      	mov	r1, r3
 8010ba2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010ba4:	f000 f894 	bl	8010cd0 <prvCheckOptions>
 8010ba8:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 8010baa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010bac:	2b00      	cmp	r3, #0
 8010bae:	d03c      	beq.n	8010c2a <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8010bb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bb2:	89db      	ldrh	r3, [r3, #14]
 8010bb4:	b29b      	uxth	r3, r3
 8010bb6:	021b      	lsls	r3, r3, #8
 8010bb8:	b21a      	sxth	r2, r3
 8010bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010bbc:	89db      	ldrh	r3, [r3, #14]
 8010bbe:	b29b      	uxth	r3, r3
 8010bc0:	0a1b      	lsrs	r3, r3, #8
 8010bc2:	b29b      	uxth	r3, r3
 8010bc4:	b21b      	sxth	r3, r3
 8010bc6:	4313      	orrs	r3, r2
 8010bc8:	b21b      	sxth	r3, r3
 8010bca:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8010bcc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010bce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010bd0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8010bd4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010bd6:	f003 0302 	and.w	r3, r3, #2
 8010bda:	2b00      	cmp	r3, #0
 8010bdc:	d10a      	bne.n	8010bf4 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8010bde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010be0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8010be4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010be6:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8010bea:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 8010bee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010bf0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 8010bf4:	f107 031c 	add.w	r3, r7, #28
 8010bf8:	4619      	mov	r1, r3
 8010bfa:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010bfc:	f000 ff78 	bl	8011af0 <prvTCPHandleState>
 8010c00:	4603      	mov	r3, r0
 8010c02:	2b00      	cmp	r3, #0
 8010c04:	dd05      	ble.n	8010c12 <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8010c06:	f107 031c 	add.w	r3, r7, #28
 8010c0a:	4619      	mov	r1, r3
 8010c0c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010c0e:	f001 fc6f 	bl	80124f0 <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 8010c12:	69fb      	ldr	r3, [r7, #28]
 8010c14:	2b00      	cmp	r3, #0
 8010c16:	d005      	beq.n	8010c24 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8010c18:	69fb      	ldr	r3, [r7, #28]
 8010c1a:	4618      	mov	r0, r3
 8010c1c:	f005 fbcc 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 8010c20:	2300      	movs	r3, #0
 8010c22:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 8010c24:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010c26:	f7ff fc73 	bl	8010510 <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 8010c2a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3748      	adds	r7, #72	@ 0x48
 8010c30:	46bd      	mov	sp, r7
 8010c32:	bdb0      	pop	{r4, r5, r7, pc}
 8010c34:	08024578 	.word	0x08024578

08010c38 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 8010c38:	b580      	push	{r7, lr}
 8010c3a:	b088      	sub	sp, #32
 8010c3c:	af00      	add	r7, sp, #0
 8010c3e:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 8010c40:	687b      	ldr	r3, [r7, #4]
 8010c42:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010c44:	021b      	lsls	r3, r3, #8
 8010c46:	b21a      	sxth	r2, r3
 8010c48:	687b      	ldr	r3, [r7, #4]
 8010c4a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010c4c:	0a1b      	lsrs	r3, r3, #8
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	b21b      	sxth	r3, r3
 8010c52:	4313      	orrs	r3, r2
 8010c54:	b21b      	sxth	r3, r3
 8010c56:	b29b      	uxth	r3, r3
 8010c58:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 8010c5a:	2300      	movs	r3, #0
 8010c5c:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 8010c5e:	4b19      	ldr	r3, [pc, #100]	@ (8010cc4 <xTCPCheckNewClient+0x8c>)
 8010c60:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8010c62:	4b19      	ldr	r3, [pc, #100]	@ (8010cc8 <xTCPCheckNewClient+0x90>)
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	61fb      	str	r3, [r7, #28]
 8010c68:	e023      	b.n	8010cb2 <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 8010c6a:	69fb      	ldr	r3, [r7, #28]
 8010c6c:	681b      	ldr	r3, [r3, #0]
 8010c6e:	697a      	ldr	r2, [r7, #20]
 8010c70:	429a      	cmp	r2, r3
 8010c72:	d11b      	bne.n	8010cac <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8010c74:	69fb      	ldr	r3, [r7, #28]
 8010c76:	68db      	ldr	r3, [r3, #12]
 8010c78:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 8010c7a:	68fb      	ldr	r3, [r7, #12]
 8010c7c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8010c80:	2b06      	cmp	r3, #6
 8010c82:	d113      	bne.n	8010cac <xTCPCheckNewClient+0x74>
 8010c84:	68fb      	ldr	r3, [r7, #12]
 8010c86:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010c8a:	f003 0302 	and.w	r3, r3, #2
 8010c8e:	b2db      	uxtb	r3, r3
 8010c90:	2b00      	cmp	r3, #0
 8010c92:	d00b      	beq.n	8010cac <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 8010c94:	687b      	ldr	r3, [r7, #4]
 8010c96:	68fa      	ldr	r2, [r7, #12]
 8010c98:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010c9e:	4619      	mov	r1, r3
 8010ca0:	480a      	ldr	r0, [pc, #40]	@ (8010ccc <xTCPCheckNewClient+0x94>)
 8010ca2:	f00f fc73 	bl	802058c <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 8010ca6:	2301      	movs	r3, #1
 8010ca8:	61bb      	str	r3, [r7, #24]
                    break;
 8010caa:	e006      	b.n	8010cba <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 8010cac:	69fb      	ldr	r3, [r7, #28]
 8010cae:	685b      	ldr	r3, [r3, #4]
 8010cb0:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 8010cb2:	69fa      	ldr	r2, [r7, #28]
 8010cb4:	693b      	ldr	r3, [r7, #16]
 8010cb6:	429a      	cmp	r2, r3
 8010cb8:	d1d7      	bne.n	8010c6a <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 8010cba:	69bb      	ldr	r3, [r7, #24]
    }
 8010cbc:	4618      	mov	r0, r3
 8010cbe:	3720      	adds	r7, #32
 8010cc0:	46bd      	mov	sp, r7
 8010cc2:	bd80      	pop	{r7, pc}
 8010cc4:	200012b8 	.word	0x200012b8
 8010cc8:	200012b0 	.word	0x200012b0
 8010ccc:	08024754 	.word	0x08024754

08010cd0 <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8010cd0:	b580      	push	{r7, lr}
 8010cd2:	b08c      	sub	sp, #48	@ 0x30
 8010cd4:	af00      	add	r7, sp, #0
 8010cd6:	6078      	str	r0, [r7, #4]
 8010cd8:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8010cda:	6838      	ldr	r0, [r7, #0]
 8010cdc:	f7f8 f95c 	bl	8008f98 <uxIPHeaderSizePacket>
 8010ce0:	4603      	mov	r3, r0
 8010ce2:	330e      	adds	r3, #14
 8010ce4:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 8010ce6:	683b      	ldr	r3, [r7, #0]
 8010ce8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8010cea:	69fb      	ldr	r3, [r7, #28]
 8010cec:	4413      	add	r3, r2
 8010cee:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 8010cf0:	2301      	movs	r3, #1
 8010cf2:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 8010cf4:	69fb      	ldr	r3, [r7, #28]
 8010cf6:	3314      	adds	r3, #20
 8010cf8:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8010cfa:	69bb      	ldr	r3, [r7, #24]
 8010cfc:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 8010cfe:	693b      	ldr	r3, [r7, #16]
 8010d00:	3314      	adds	r3, #20
 8010d02:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8010d04:	693b      	ldr	r3, [r7, #16]
 8010d06:	7b1b      	ldrb	r3, [r3, #12]
 8010d08:	2b50      	cmp	r3, #80	@ 0x50
 8010d0a:	d93f      	bls.n	8010d8c <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 8010d0c:	693b      	ldr	r3, [r7, #16]
 8010d0e:	7b1b      	ldrb	r3, [r3, #12]
 8010d10:	091b      	lsrs	r3, r3, #4
 8010d12:	b2db      	uxtb	r3, r3
 8010d14:	3b05      	subs	r3, #5
 8010d16:	b2db      	uxtb	r3, r3
 8010d18:	009b      	lsls	r3, r3, #2
 8010d1a:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 8010d1c:	7bfb      	ldrb	r3, [r7, #15]
 8010d1e:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 8010d20:	683b      	ldr	r3, [r7, #0]
 8010d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d24:	697a      	ldr	r2, [r7, #20]
 8010d26:	429a      	cmp	r2, r3
 8010d28:	d230      	bcs.n	8010d8c <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010d2e:	697b      	ldr	r3, [r7, #20]
 8010d30:	1ad3      	subs	r3, r2, r3
 8010d32:	6a3a      	ldr	r2, [r7, #32]
 8010d34:	429a      	cmp	r2, r3
 8010d36:	d829      	bhi.n	8010d8c <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 8010d38:	693b      	ldr	r3, [r7, #16]
 8010d3a:	7b5b      	ldrb	r3, [r3, #13]
 8010d3c:	f003 0302 	and.w	r3, r3, #2
 8010d40:	2b00      	cmp	r3, #0
 8010d42:	d002      	beq.n	8010d4a <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 8010d44:	2301      	movs	r3, #1
 8010d46:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010d48:	e001      	b.n	8010d4e <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 8010d4e:	6a3b      	ldr	r3, [r7, #32]
 8010d50:	2b00      	cmp	r3, #0
 8010d52:	d018      	beq.n	8010d86 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 8010d54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010d56:	687a      	ldr	r2, [r7, #4]
 8010d58:	6a39      	ldr	r1, [r7, #32]
 8010d5a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8010d5c:	f000 f81c 	bl	8010d98 <prvSingleStepTCPHeaderOptions>
 8010d60:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 8010d62:	68bb      	ldr	r3, [r7, #8]
 8010d64:	2b00      	cmp	r3, #0
 8010d66:	da02      	bge.n	8010d6e <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 8010d68:	2300      	movs	r3, #0
 8010d6a:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 8010d6c:	e00e      	b.n	8010d8c <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	2b00      	cmp	r3, #0
 8010d72:	d00a      	beq.n	8010d8a <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	6a3a      	ldr	r2, [r7, #32]
 8010d78:	1ad3      	subs	r3, r2, r3
 8010d7a:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 8010d7c:	68bb      	ldr	r3, [r7, #8]
 8010d7e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8010d80:	4413      	add	r3, r2
 8010d82:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 8010d84:	e7e3      	b.n	8010d4e <prvCheckOptions+0x7e>
                            break;
 8010d86:	bf00      	nop
 8010d88:	e000      	b.n	8010d8c <prvCheckOptions+0xbc>
                            break;
 8010d8a:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 8010d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8010d8e:	4618      	mov	r0, r3
 8010d90:	3730      	adds	r7, #48	@ 0x30
 8010d92:	46bd      	mov	sp, r7
 8010d94:	bd80      	pop	{r7, pc}
	...

08010d98 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 8010d98:	b580      	push	{r7, lr}
 8010d9a:	b08a      	sub	sp, #40	@ 0x28
 8010d9c:	af00      	add	r7, sp, #0
 8010d9e:	60f8      	str	r0, [r7, #12]
 8010da0:	60b9      	str	r1, [r7, #8]
 8010da2:	607a      	str	r2, [r7, #4]
 8010da4:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 8010da6:	68bb      	ldr	r3, [r7, #8]
 8010da8:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 8010daa:	2300      	movs	r3, #0
 8010dac:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8010db4:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8010db6:	2300      	movs	r3, #0
 8010db8:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 8010dba:	68fb      	ldr	r3, [r7, #12]
 8010dbc:	781b      	ldrb	r3, [r3, #0]
 8010dbe:	2b00      	cmp	r3, #0
 8010dc0:	d102      	bne.n	8010dc8 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	61fb      	str	r3, [r7, #28]
 8010dc6:	e0da      	b.n	8010f7e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 8010dc8:	68fb      	ldr	r3, [r7, #12]
 8010dca:	781b      	ldrb	r3, [r3, #0]
 8010dcc:	2b01      	cmp	r3, #1
 8010dce:	d102      	bne.n	8010dd6 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 8010dd0:	2301      	movs	r3, #1
 8010dd2:	61fb      	str	r3, [r7, #28]
 8010dd4:	e0d3      	b.n	8010f7e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 8010dd6:	697b      	ldr	r3, [r7, #20]
 8010dd8:	2b01      	cmp	r3, #1
 8010dda:	d803      	bhi.n	8010de4 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 8010ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8010de0:	61fb      	str	r3, [r7, #28]
 8010de2:	e0cc      	b.n	8010f7e <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 8010de4:	68fb      	ldr	r3, [r7, #12]
 8010de6:	781b      	ldrb	r3, [r3, #0]
 8010de8:	2b03      	cmp	r3, #3
 8010dea:	d11e      	bne.n	8010e2a <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 8010dec:	697b      	ldr	r3, [r7, #20]
 8010dee:	2b02      	cmp	r3, #2
 8010df0:	d904      	bls.n	8010dfc <prvSingleStepTCPHeaderOptions+0x64>
 8010df2:	68fb      	ldr	r3, [r7, #12]
 8010df4:	3301      	adds	r3, #1
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	2b03      	cmp	r3, #3
 8010dfa:	d003      	beq.n	8010e04 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 8010dfc:	f04f 33ff 	mov.w	r3, #4294967295
 8010e00:	61fb      	str	r3, [r7, #28]
 8010e02:	e0bc      	b.n	8010f7e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 8010e04:	683b      	ldr	r3, [r7, #0]
 8010e06:	2b00      	cmp	r3, #0
 8010e08:	d00c      	beq.n	8010e24 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	3302      	adds	r3, #2
 8010e0e:	781a      	ldrb	r2, [r3, #0]
 8010e10:	687b      	ldr	r3, [r7, #4]
 8010e12:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 8010e16:	687a      	ldr	r2, [r7, #4]
 8010e18:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8010e1c:	f043 0310 	orr.w	r3, r3, #16
 8010e20:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 8010e24:	2303      	movs	r3, #3
 8010e26:	61fb      	str	r3, [r7, #28]
 8010e28:	e0a9      	b.n	8010f7e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 8010e2a:	68fb      	ldr	r3, [r7, #12]
 8010e2c:	781b      	ldrb	r3, [r3, #0]
 8010e2e:	2b02      	cmp	r3, #2
 8010e30:	d16d      	bne.n	8010f0e <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 8010e32:	697b      	ldr	r3, [r7, #20]
 8010e34:	2b03      	cmp	r3, #3
 8010e36:	d904      	bls.n	8010e42 <prvSingleStepTCPHeaderOptions+0xaa>
 8010e38:	68fb      	ldr	r3, [r7, #12]
 8010e3a:	3301      	adds	r3, #1
 8010e3c:	781b      	ldrb	r3, [r3, #0]
 8010e3e:	2b04      	cmp	r3, #4
 8010e40:	d003      	beq.n	8010e4a <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 8010e42:	f04f 33ff 	mov.w	r3, #4294967295
 8010e46:	61fb      	str	r3, [r7, #28]
 8010e48:	e099      	b.n	8010f7e <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 8010e4a:	68fb      	ldr	r3, [r7, #12]
 8010e4c:	3302      	adds	r3, #2
 8010e4e:	4618      	mov	r0, r3
 8010e50:	f7f8 fe4f 	bl	8009af2 <usChar2u16>
 8010e54:	4603      	mov	r3, r0
 8010e56:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 8010e58:	687b      	ldr	r3, [r7, #4]
 8010e5a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010e5e:	461a      	mov	r2, r3
 8010e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e62:	4293      	cmp	r3, r2
 8010e64:	d010      	beq.n	8010e88 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 8010e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e68:	2b00      	cmp	r3, #0
 8010e6a:	d105      	bne.n	8010e78 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 8010e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8010e70:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 8010e72:	2301      	movs	r3, #1
 8010e74:	61bb      	str	r3, [r7, #24]
 8010e76:	e007      	b.n	8010e88 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8010e78:	687b      	ldr	r3, [r7, #4]
 8010e7a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010e7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e80:	4619      	mov	r1, r3
 8010e82:	4841      	ldr	r0, [pc, #260]	@ (8010f88 <prvSingleStepTCPHeaderOptions+0x1f0>)
 8010e84:	f00f fb82 	bl	802058c <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 8010e88:	69bb      	ldr	r3, [r7, #24]
 8010e8a:	2b00      	cmp	r3, #0
 8010e8c:	d177      	bne.n	8010f7e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 8010e8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e90:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8010e94:	d202      	bcs.n	8010e9c <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 8010e96:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8010e9a:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8010e9c:	687b      	ldr	r3, [r7, #4]
 8010e9e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010ea2:	461a      	mov	r2, r3
 8010ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ea6:	4293      	cmp	r3, r2
 8010ea8:	d22e      	bcs.n	8010f08 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 8010eaa:	687a      	ldr	r2, [r7, #4]
 8010eac:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010eb0:	f043 0301 	orr.w	r3, r3, #1
 8010eb4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 8010eb8:	687b      	ldr	r3, [r7, #4]
 8010eba:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010ebe:	461a      	mov	r2, r3
 8010ec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ec2:	4293      	cmp	r3, r2
 8010ec4:	d207      	bcs.n	8010ed6 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8010ec6:	687b      	ldr	r3, [r7, #4]
 8010ec8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8010ecc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ece:	4619      	mov	r1, r3
 8010ed0:	482e      	ldr	r0, [pc, #184]	@ (8010f8c <prvSingleStepTCPHeaderOptions+0x1f4>)
 8010ed2:	f00f fb5b 	bl	802058c <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 8010ed6:	693b      	ldr	r3, [r7, #16]
 8010ed8:	685a      	ldr	r2, [r3, #4]
 8010eda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010edc:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010ee2:	fb03 f202 	mul.w	r2, r3, r2
 8010ee6:	693b      	ldr	r3, [r7, #16]
 8010ee8:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 8010eea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010eec:	b29a      	uxth	r2, r3
 8010eee:	693b      	ldr	r3, [r7, #16]
 8010ef0:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8010ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010ef6:	b29a      	uxth	r2, r3
 8010ef8:	693b      	ldr	r3, [r7, #16]
 8010efa:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 8010efe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010f00:	b29a      	uxth	r2, r3
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 8010f08:	2304      	movs	r3, #4
 8010f0a:	61fb      	str	r3, [r7, #28]
 8010f0c:	e037      	b.n	8010f7e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 8010f0e:	68fb      	ldr	r3, [r7, #12]
 8010f10:	3301      	adds	r3, #1
 8010f12:	781b      	ldrb	r3, [r3, #0]
 8010f14:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 8010f18:	2300      	movs	r3, #0
 8010f1a:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 8010f1c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010f20:	2b01      	cmp	r3, #1
 8010f22:	d904      	bls.n	8010f2e <prvSingleStepTCPHeaderOptions+0x196>
 8010f24:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010f28:	697a      	ldr	r2, [r7, #20]
 8010f2a:	429a      	cmp	r2, r3
 8010f2c:	d203      	bcs.n	8010f36 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 8010f2e:	f04f 33ff 	mov.w	r3, #4294967295
 8010f32:	61fb      	str	r3, [r7, #28]
 8010f34:	e023      	b.n	8010f7e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 8010f36:	68fb      	ldr	r3, [r7, #12]
 8010f38:	781b      	ldrb	r3, [r3, #0]
 8010f3a:	2b05      	cmp	r3, #5
 8010f3c:	d11a      	bne.n	8010f74 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 8010f3e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010f42:	3b02      	subs	r3, #2
 8010f44:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 8010f48:	69fb      	ldr	r3, [r7, #28]
 8010f4a:	3302      	adds	r3, #2
 8010f4c:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 8010f4e:	e00d      	b.n	8010f6c <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 8010f50:	69fb      	ldr	r3, [r7, #28]
 8010f52:	687a      	ldr	r2, [r7, #4]
 8010f54:	4619      	mov	r1, r3
 8010f56:	68f8      	ldr	r0, [r7, #12]
 8010f58:	f000 f81a 	bl	8010f90 <prvReadSackOption>
                            lIndex += 8;
 8010f5c:	69fb      	ldr	r3, [r7, #28]
 8010f5e:	3308      	adds	r3, #8
 8010f60:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 8010f62:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010f66:	3b08      	subs	r3, #8
 8010f68:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 8010f6c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010f70:	2b07      	cmp	r3, #7
 8010f72:	d8ed      	bhi.n	8010f50 <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 8010f74:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8010f78:	69fa      	ldr	r2, [r7, #28]
 8010f7a:	4413      	add	r3, r2
 8010f7c:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 8010f7e:	69fb      	ldr	r3, [r7, #28]
    }
 8010f80:	4618      	mov	r0, r3
 8010f82:	3728      	adds	r7, #40	@ 0x28
 8010f84:	46bd      	mov	sp, r7
 8010f86:	bd80      	pop	{r7, pc}
 8010f88:	08024780 	.word	0x08024780
 8010f8c:	08024798 	.word	0x08024798

08010f90 <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 8010f90:	b580      	push	{r7, lr}
 8010f92:	b08a      	sub	sp, #40	@ 0x28
 8010f94:	af02      	add	r7, sp, #8
 8010f96:	60f8      	str	r0, [r7, #12]
 8010f98:	60b9      	str	r1, [r7, #8]
 8010f9a:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 8010f9c:	68fa      	ldr	r2, [r7, #12]
 8010f9e:	68bb      	ldr	r3, [r7, #8]
 8010fa0:	4413      	add	r3, r2
 8010fa2:	4618      	mov	r0, r3
 8010fa4:	f7f8 fd8a 	bl	8009abc <ulChar2u32>
 8010fa8:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	3304      	adds	r3, #4
 8010fae:	68fa      	ldr	r2, [r7, #12]
 8010fb0:	4413      	add	r3, r2
 8010fb2:	4618      	mov	r0, r3
 8010fb4:	f7f8 fd82 	bl	8009abc <ulChar2u32>
 8010fb8:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8010fc0:	69ba      	ldr	r2, [r7, #24]
 8010fc2:	69f9      	ldr	r1, [r7, #28]
 8010fc4:	4618      	mov	r0, r3
 8010fc6:	f004 fba3 	bl	8015710 <ulTCPWindowTxSack>
 8010fca:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8010fcc:	687b      	ldr	r3, [r7, #4]
 8010fce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010fd2:	2b00      	cmp	r3, #0
 8010fd4:	d029      	beq.n	801102a <prvReadSackOption+0x9a>
 8010fd6:	697b      	ldr	r3, [r7, #20]
 8010fd8:	2b00      	cmp	r3, #0
 8010fda:	d026      	beq.n	801102a <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 8010fdc:	687b      	ldr	r3, [r7, #4]
 8010fde:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8010fe2:	2300      	movs	r3, #0
 8010fe4:	9300      	str	r3, [sp, #0]
 8010fe6:	697b      	ldr	r3, [r7, #20]
 8010fe8:	2200      	movs	r2, #0
 8010fea:	2100      	movs	r1, #0
 8010fec:	f7fe fed9 	bl	800fda2 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8010ff0:	687b      	ldr	r3, [r7, #4]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	f043 0202 	orr.w	r2, r3, #2
 8010ff8:	687b      	ldr	r3, [r7, #4]
 8010ffa:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 8010ffc:	687b      	ldr	r3, [r7, #4]
 8010ffe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011000:	f003 0302 	and.w	r3, r3, #2
 8011004:	2b00      	cmp	r3, #0
 8011006:	d005      	beq.n	8011014 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8011008:	687b      	ldr	r3, [r7, #4]
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8011010:	687b      	ldr	r3, [r7, #4]
 8011012:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8011014:	687b      	ldr	r3, [r7, #4]
 8011016:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801101a:	2b00      	cmp	r3, #0
 801101c:	d005      	beq.n	801102a <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 801101e:	687b      	ldr	r3, [r7, #4]
 8011020:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8011024:	6979      	ldr	r1, [r7, #20]
 8011026:	6878      	ldr	r0, [r7, #4]
 8011028:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 801102a:	bf00      	nop
 801102c:	3720      	adds	r7, #32
 801102e:	46bd      	mov	sp, r7
 8011030:	bd80      	pop	{r7, pc}

08011032 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 8011032:	b590      	push	{r4, r7, lr}
 8011034:	b08f      	sub	sp, #60	@ 0x3c
 8011036:	af00      	add	r7, sp, #0
 8011038:	6078      	str	r0, [r7, #4]
 801103a:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 801103c:	687b      	ldr	r3, [r7, #4]
 801103e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011040:	6878      	ldr	r0, [r7, #4]
 8011042:	f7f7 ffa9 	bl	8008f98 <uxIPHeaderSizePacket>
 8011046:	4603      	mov	r3, r0
 8011048:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801104a:	4423      	add	r3, r4
 801104c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801104e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011050:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8011052:	6878      	ldr	r0, [r7, #4]
 8011054:	f7f7 ffa0 	bl	8008f98 <uxIPHeaderSizePacket>
 8011058:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 801105a:	2300      	movs	r3, #0
 801105c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 8011060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011062:	7b1b      	ldrb	r3, [r3, #12]
 8011064:	089b      	lsrs	r3, r3, #2
 8011066:	b2db      	uxtb	r3, r3
 8011068:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 801106c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 8011070:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011074:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8011076:	687b      	ldr	r3, [r7, #4]
 8011078:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801107a:	69f9      	ldr	r1, [r7, #28]
 801107c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801107e:	440b      	add	r3, r1
 8011080:	330e      	adds	r3, #14
 8011082:	441a      	add	r2, r3
 8011084:	683b      	ldr	r3, [r7, #0]
 8011086:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 8011088:	687b      	ldr	r3, [r7, #4]
 801108a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801108c:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 801108e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011090:	3b0e      	subs	r3, #14
 8011092:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 8011094:	687b      	ldr	r3, [r7, #4]
 8011096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011098:	899b      	ldrh	r3, [r3, #12]
 801109a:	b29b      	uxth	r3, r3
 801109c:	2b08      	cmp	r3, #8
 801109e:	d004      	beq.n	80110aa <prvCheckRxData+0x78>
 80110a0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80110a4:	4293      	cmp	r3, r2
 80110a6:	d015      	beq.n	80110d4 <prvCheckRxData+0xa2>
 80110a8:	e02c      	b.n	8011104 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110ae:	330e      	adds	r3, #14
 80110b0:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	885b      	ldrh	r3, [r3, #2]
 80110b6:	b29b      	uxth	r3, r3
 80110b8:	021b      	lsls	r3, r3, #8
 80110ba:	b21a      	sxth	r2, r3
 80110bc:	693b      	ldr	r3, [r7, #16]
 80110be:	885b      	ldrh	r3, [r3, #2]
 80110c0:	b29b      	uxth	r3, r3
 80110c2:	0a1b      	lsrs	r3, r3, #8
 80110c4:	b29b      	uxth	r3, r3
 80110c6:	b21b      	sxth	r3, r3
 80110c8:	4313      	orrs	r3, r2
 80110ca:	b21b      	sxth	r3, r3
 80110cc:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 80110ce:	8afb      	ldrh	r3, [r7, #22]
 80110d0:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 80110d2:	e01a      	b.n	801110a <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80110d4:	687b      	ldr	r3, [r7, #4]
 80110d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80110d8:	330e      	adds	r3, #14
 80110da:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 80110dc:	69bb      	ldr	r3, [r7, #24]
 80110de:	889b      	ldrh	r3, [r3, #4]
 80110e0:	b29b      	uxth	r3, r3
 80110e2:	021b      	lsls	r3, r3, #8
 80110e4:	b21a      	sxth	r2, r3
 80110e6:	69bb      	ldr	r3, [r7, #24]
 80110e8:	889b      	ldrh	r3, [r3, #4]
 80110ea:	b29b      	uxth	r3, r3
 80110ec:	0a1b      	lsrs	r3, r3, #8
 80110ee:	b29b      	uxth	r3, r3
 80110f0:	b21b      	sxth	r3, r3
 80110f2:	4313      	orrs	r3, r2
 80110f4:	b21b      	sxth	r3, r3
 80110f6:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 80110f8:	8afb      	ldrh	r3, [r7, #22]
 80110fa:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 80110fc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80110fe:	3328      	adds	r3, #40	@ 0x28
 8011100:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8011102:	e002      	b.n	801110a <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 8011104:	2300      	movs	r3, #0
 8011106:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8011108:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 801110a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801110c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801110e:	429a      	cmp	r2, r3
 8011110:	dd01      	ble.n	8011116 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 8011112:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011114:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8011116:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011118:	69fb      	ldr	r3, [r7, #28]
 801111a:	4413      	add	r3, r2
 801111c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801111e:	429a      	cmp	r2, r3
 8011120:	dd06      	ble.n	8011130 <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 8011122:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011124:	69fb      	ldr	r3, [r7, #28]
 8011126:	4413      	add	r3, r2
 8011128:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801112a:	1ad3      	subs	r3, r2, r3
 801112c:	633b      	str	r3, [r7, #48]	@ 0x30
 801112e:	e001      	b.n	8011134 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 8011130:	2300      	movs	r3, #0
 8011132:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 8011134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011136:	7b5b      	ldrb	r3, [r3, #13]
 8011138:	f003 0320 	and.w	r3, r3, #32
 801113c:	2b00      	cmp	r3, #0
 801113e:	d01c      	beq.n	801117a <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 8011140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011142:	8a5b      	ldrh	r3, [r3, #18]
 8011144:	b29b      	uxth	r3, r3
 8011146:	021b      	lsls	r3, r3, #8
 8011148:	b21a      	sxth	r2, r3
 801114a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801114c:	8a5b      	ldrh	r3, [r3, #18]
 801114e:	b29b      	uxth	r3, r3
 8011150:	0a1b      	lsrs	r3, r3, #8
 8011152:	b29b      	uxth	r3, r3
 8011154:	b21b      	sxth	r3, r3
 8011156:	4313      	orrs	r3, r2
 8011158:	b21b      	sxth	r3, r3
 801115a:	b29b      	uxth	r3, r3
 801115c:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 801115e:	683b      	ldr	r3, [r7, #0]
 8011160:	681a      	ldr	r2, [r3, #0]
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	441a      	add	r2, r3
 8011166:	683b      	ldr	r3, [r7, #0]
 8011168:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 801116a:	68f9      	ldr	r1, [r7, #12]
 801116c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801116e:	f7f8 fc51 	bl	8009a14 <FreeRTOS_min_int32>
 8011172:	4602      	mov	r2, r0
 8011174:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011176:	1a9b      	subs	r3, r3, r2
 8011178:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 801117a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 801117c:	4618      	mov	r0, r3
 801117e:	373c      	adds	r7, #60	@ 0x3c
 8011180:	46bd      	mov	sp, r7
 8011182:	bd90      	pop	{r4, r7, pc}

08011184 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 8011184:	b580      	push	{r7, lr}
 8011186:	b092      	sub	sp, #72	@ 0x48
 8011188:	af02      	add	r7, sp, #8
 801118a:	60f8      	str	r0, [r7, #12]
 801118c:	60b9      	str	r1, [r7, #8]
 801118e:	607a      	str	r2, [r7, #4]
 8011190:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 8011192:	6878      	ldr	r0, [r7, #4]
 8011194:	f7f7 ff00 	bl	8008f98 <uxIPHeaderSizePacket>
 8011198:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 801119a:	687b      	ldr	r3, [r7, #4]
 801119c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801119e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80111a0:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80111a2:	4413      	add	r3, r2
 80111a4:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80111a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80111a8:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80111b0:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 80111b2:	2300      	movs	r3, #0
 80111b4:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 80111b6:	683b      	ldr	r3, [r7, #0]
 80111b8:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 80111ba:	68bb      	ldr	r3, [r7, #8]
 80111bc:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80111be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c0:	685b      	ldr	r3, [r3, #4]
 80111c2:	061a      	lsls	r2, r3, #24
 80111c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111c6:	685b      	ldr	r3, [r3, #4]
 80111c8:	021b      	lsls	r3, r3, #8
 80111ca:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80111ce:	431a      	orrs	r2, r3
 80111d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111d2:	685b      	ldr	r3, [r3, #4]
 80111d4:	0a1b      	lsrs	r3, r3, #8
 80111d6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80111da:	431a      	orrs	r2, r3
 80111dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80111de:	685b      	ldr	r3, [r3, #4]
 80111e0:	0e1b      	lsrs	r3, r3, #24
 80111e2:	4313      	orrs	r3, r2
 80111e4:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 80111e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80111e8:	2b00      	cmp	r3, #0
 80111ea:	d057      	beq.n	801129c <prvStoreRxData+0x118>
 80111ec:	68fb      	ldr	r3, [r7, #12]
 80111ee:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80111f2:	2b03      	cmp	r3, #3
 80111f4:	d952      	bls.n	801129c <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 80111f6:	2300      	movs	r3, #0
 80111f8:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 80111fa:	68fb      	ldr	r3, [r7, #12]
 80111fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011200:	2b00      	cmp	r3, #0
 8011202:	d007      	beq.n	8011214 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 8011204:	68fb      	ldr	r3, [r7, #12]
 8011206:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801120a:	4618      	mov	r0, r3
 801120c:	f7fe fc89 	bl	800fb22 <uxStreamBufferGetSpace>
 8011210:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8011212:	e003      	b.n	801121c <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8011214:	68fb      	ldr	r3, [r7, #12]
 8011216:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801121a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 801121c:	f107 0310 	add.w	r3, r7, #16
 8011220:	9300      	str	r3, [sp, #0]
 8011222:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011224:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011226:	69f9      	ldr	r1, [r7, #28]
 8011228:	6a38      	ldr	r0, [r7, #32]
 801122a:	f003 fd45 	bl	8014cb8 <lTCPWindowRxCheck>
 801122e:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 8011230:	69bb      	ldr	r3, [r7, #24]
 8011232:	2b00      	cmp	r3, #0
 8011234:	db20      	blt.n	8011278 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 8011236:	693b      	ldr	r3, [r7, #16]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d007      	beq.n	801124c <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 801123c:	693b      	ldr	r3, [r7, #16]
 801123e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011240:	1ad3      	subs	r3, r2, r3
 8011242:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 8011244:	693b      	ldr	r3, [r7, #16]
 8011246:	68ba      	ldr	r2, [r7, #8]
 8011248:	4413      	add	r3, r2
 801124a:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 801124c:	69b9      	ldr	r1, [r7, #24]
 801124e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011250:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011252:	68f8      	ldr	r0, [r7, #12]
 8011254:	f7fe f8d2 	bl	800f3fc <lTCPAddRxdata>
 8011258:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 801125a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801125c:	697a      	ldr	r2, [r7, #20]
 801125e:	429a      	cmp	r2, r3
 8011260:	d00a      	beq.n	8011278 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 8011262:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011264:	6979      	ldr	r1, [r7, #20]
 8011266:	4813      	ldr	r0, [pc, #76]	@ (80112b4 <prvStoreRxData+0x130>)
 8011268:	f00f f990 	bl	802058c <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 801126c:	6878      	ldr	r0, [r7, #4]
 801126e:	f002 f8b3 	bl	80133d8 <prvTCPSendReset>
                    xResult = -1;
 8011272:	f04f 33ff 	mov.w	r3, #4294967295
 8011276:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 8011278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801127a:	2b00      	cmp	r3, #0
 801127c:	d113      	bne.n	80112a6 <prvStoreRxData+0x122>
 801127e:	6a3b      	ldr	r3, [r7, #32]
 8011280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011282:	2b00      	cmp	r3, #0
 8011284:	d00f      	beq.n	80112a6 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 8011286:	6a3b      	ldr	r3, [r7, #32]
 8011288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801128a:	2200      	movs	r2, #0
 801128c:	2100      	movs	r1, #0
 801128e:	68f8      	ldr	r0, [r7, #12]
 8011290:	f7fe f8b4 	bl	800f3fc <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 8011294:	6a3b      	ldr	r3, [r7, #32]
 8011296:	2200      	movs	r2, #0
 8011298:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 801129a:	e004      	b.n	80112a6 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 801129c:	6a3b      	ldr	r3, [r7, #32]
 801129e:	2200      	movs	r2, #0
 80112a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80112a4:	e000      	b.n	80112a8 <prvStoreRxData+0x124>
        {
 80112a6:	bf00      	nop
        }

        return xResult;
 80112a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 80112aa:	4618      	mov	r0, r3
 80112ac:	3740      	adds	r7, #64	@ 0x40
 80112ae:	46bd      	mov	sp, r7
 80112b0:	bd80      	pop	{r7, pc}
 80112b2:	bf00      	nop
 80112b4:	080247b0 	.word	0x080247b0

080112b8 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 80112b8:	b480      	push	{r7}
 80112ba:	b085      	sub	sp, #20
 80112bc:	af00      	add	r7, sp, #0
 80112be:	4603      	mov	r3, r0
 80112c0:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 80112c2:	79fb      	ldrb	r3, [r7, #7]
 80112c4:	2b0b      	cmp	r3, #11
 80112c6:	bf8c      	ite	hi
 80112c8:	2201      	movhi	r2, #1
 80112ca:	2200      	movls	r2, #0
 80112cc:	b2d2      	uxtb	r2, r2
 80112ce:	2a00      	cmp	r2, #0
 80112d0:	d10f      	bne.n	80112f2 <prvTCPSocketIsActive+0x3a>
 80112d2:	f640 3281 	movw	r2, #2945	@ 0xb81
 80112d6:	fa22 f303 	lsr.w	r3, r2, r3
 80112da:	f003 0301 	and.w	r3, r3, #1
 80112de:	2b00      	cmp	r3, #0
 80112e0:	bf14      	ite	ne
 80112e2:	2301      	movne	r3, #1
 80112e4:	2300      	moveq	r3, #0
 80112e6:	b2db      	uxtb	r3, r3
 80112e8:	2b00      	cmp	r3, #0
 80112ea:	d002      	beq.n	80112f2 <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 80112ec:	2300      	movs	r3, #0
 80112ee:	60fb      	str	r3, [r7, #12]
                break;
 80112f0:	e002      	b.n	80112f8 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 80112f2:	2301      	movs	r3, #1
 80112f4:	60fb      	str	r3, [r7, #12]
                break;
 80112f6:	bf00      	nop
        }

        return xResult;
 80112f8:	68fb      	ldr	r3, [r7, #12]
    }
 80112fa:	4618      	mov	r0, r3
 80112fc:	3714      	adds	r7, #20
 80112fe:	46bd      	mov	sp, r7
 8011300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011304:	4770      	bx	lr
	...

08011308 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 8011308:	b5f0      	push	{r4, r5, r6, r7, lr}
 801130a:	b089      	sub	sp, #36	@ 0x24
 801130c:	af02      	add	r7, sp, #8
 801130e:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 8011310:	687b      	ldr	r3, [r7, #4]
 8011312:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011316:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 8011318:	7cfb      	ldrb	r3, [r7, #19]
 801131a:	2b08      	cmp	r3, #8
 801131c:	d00b      	beq.n	8011336 <prvTCPStatusAgeCheck+0x2e>
 801131e:	2b08      	cmp	r3, #8
 8011320:	dc0c      	bgt.n	801133c <prvTCPStatusAgeCheck+0x34>
 8011322:	2b01      	cmp	r3, #1
 8011324:	dc02      	bgt.n	801132c <prvTCPStatusAgeCheck+0x24>
 8011326:	2b00      	cmp	r3, #0
 8011328:	da05      	bge.n	8011336 <prvTCPStatusAgeCheck+0x2e>
 801132a:	e007      	b.n	801133c <prvTCPStatusAgeCheck+0x34>
 801132c:	2b05      	cmp	r3, #5
 801132e:	d105      	bne.n	801133c <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 8011330:	2300      	movs	r3, #0
 8011332:	617b      	str	r3, [r7, #20]
                    break;
 8011334:	e005      	b.n	8011342 <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 8011336:	2300      	movs	r3, #0
 8011338:	617b      	str	r3, [r7, #20]
                    break;
 801133a:	e002      	b.n	8011342 <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 801133c:	2301      	movs	r3, #1
 801133e:	617b      	str	r3, [r7, #20]
                    break;
 8011340:	bf00      	nop
            }

            if( xResult != pdFALSE )
 8011342:	697b      	ldr	r3, [r7, #20]
 8011344:	2b00      	cmp	r3, #0
 8011346:	d032      	beq.n	80113ae <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8011348:	f7f2 fa8c 	bl	8003864 <xTaskGetTickCount>
 801134c:	4602      	mov	r2, r0
 801134e:	687b      	ldr	r3, [r7, #4]
 8011350:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011354:	1ad3      	subs	r3, r2, r3
 8011356:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 8011358:	68fb      	ldr	r3, [r7, #12]
 801135a:	f247 5230 	movw	r2, #30000	@ 0x7530
 801135e:	4293      	cmp	r3, r2
 8011360:	d925      	bls.n	80113ae <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 8011362:	687b      	ldr	r3, [r7, #4]
 8011364:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011366:	461d      	mov	r5, r3
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011372:	461e      	mov	r6, r3
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801137a:	4618      	mov	r0, r3
 801137c:	f000 fdca 	bl	8011f14 <FreeRTOS_GetTCPStateName>
 8011380:	4603      	mov	r3, r0
 8011382:	9300      	str	r3, [sp, #0]
 8011384:	4633      	mov	r3, r6
 8011386:	4622      	mov	r2, r4
 8011388:	4629      	mov	r1, r5
 801138a:	480b      	ldr	r0, [pc, #44]	@ (80113b8 <prvTCPStatusAgeCheck+0xb0>)
 801138c:	f00f f8fe 	bl	802058c <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011390:	2108      	movs	r1, #8
 8011392:	6878      	ldr	r0, [r7, #4]
 8011394:	f7fe feac 	bl	80100f0 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 8011398:	687b      	ldr	r3, [r7, #4]
 801139a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801139e:	f003 0304 	and.w	r3, r3, #4
 80113a2:	b2db      	uxtb	r3, r3
 80113a4:	2b00      	cmp	r3, #0
 80113a6:	d002      	beq.n	80113ae <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 80113a8:	f04f 33ff 	mov.w	r3, #4294967295
 80113ac:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 80113ae:	697b      	ldr	r3, [r7, #20]
        }
 80113b0:	4618      	mov	r0, r3
 80113b2:	371c      	adds	r7, #28
 80113b4:	46bd      	mov	sp, r7
 80113b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80113b8:	080247d8 	.word	0x080247d8

080113bc <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80113bc:	b5b0      	push	{r4, r5, r7, lr}
 80113be:	b08a      	sub	sp, #40	@ 0x28
 80113c0:	af02      	add	r7, sp, #8
 80113c2:	6078      	str	r0, [r7, #4]
 80113c4:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80113c6:	683b      	ldr	r3, [r7, #0]
 80113c8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80113ca:	6838      	ldr	r0, [r7, #0]
 80113cc:	f7f7 fde4 	bl	8008f98 <uxIPHeaderSizePacket>
 80113d0:	4603      	mov	r3, r0
 80113d2:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80113d4:	4423      	add	r3, r4
 80113d6:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80113d8:	69bb      	ldr	r3, [r7, #24]
 80113da:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80113dc:	2300      	movs	r3, #0
 80113de:	74fb      	strb	r3, [r7, #19]
 80113e0:	697b      	ldr	r3, [r7, #20]
 80113e2:	7b5b      	ldrb	r3, [r3, #13]
 80113e4:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80113e6:	687b      	ldr	r3, [r7, #4]
 80113e8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80113ec:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 80113ee:	2300      	movs	r3, #0
 80113f0:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 80113f2:	697b      	ldr	r3, [r7, #20]
 80113f4:	689b      	ldr	r3, [r3, #8]
 80113f6:	061a      	lsls	r2, r3, #24
 80113f8:	697b      	ldr	r3, [r7, #20]
 80113fa:	689b      	ldr	r3, [r3, #8]
 80113fc:	021b      	lsls	r3, r3, #8
 80113fe:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011402:	431a      	orrs	r2, r3
 8011404:	697b      	ldr	r3, [r7, #20]
 8011406:	689b      	ldr	r3, [r3, #8]
 8011408:	0a1b      	lsrs	r3, r3, #8
 801140a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801140e:	431a      	orrs	r2, r3
 8011410:	697b      	ldr	r3, [r7, #20]
 8011412:	689b      	ldr	r3, [r3, #8]
 8011414:	0e1b      	lsrs	r3, r3, #24
 8011416:	4313      	orrs	r3, r2
 8011418:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 801141a:	7cbb      	ldrb	r3, [r7, #18]
 801141c:	f003 0301 	and.w	r3, r3, #1
 8011420:	2b00      	cmp	r3, #0
 8011422:	d004      	beq.n	801142e <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8011424:	68fb      	ldr	r3, [r7, #12]
 8011426:	695b      	ldr	r3, [r3, #20]
 8011428:	1c5a      	adds	r2, r3, #1
 801142a:	68fb      	ldr	r3, [r7, #12]
 801142c:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011434:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011438:	b2db      	uxtb	r3, r3
 801143a:	2b00      	cmp	r3, #0
 801143c:	d10b      	bne.n	8011456 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	6a1a      	ldr	r2, [r3, #32]
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8011446:	687a      	ldr	r2, [r7, #4]
 8011448:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801144c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011450:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8011454:	e00c      	b.n	8011470 <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 8011456:	68fb      	ldr	r3, [r7, #12]
 8011458:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801145a:	3301      	adds	r3, #1
 801145c:	68ba      	ldr	r2, [r7, #8]
 801145e:	429a      	cmp	r2, r3
 8011460:	d106      	bne.n	8011470 <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8011462:	687a      	ldr	r2, [r7, #4]
 8011464:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8011468:	f043 0301 	orr.w	r3, r3, #1
 801146c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8011470:	687b      	ldr	r3, [r7, #4]
 8011472:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011476:	f003 0301 	and.w	r3, r3, #1
 801147a:	b2db      	uxtb	r3, r3
 801147c:	2b00      	cmp	r3, #0
 801147e:	d10b      	bne.n	8011498 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011484:	68fb      	ldr	r3, [r7, #12]
 8011486:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8011488:	697b      	ldr	r3, [r7, #20]
 801148a:	2211      	movs	r2, #17
 801148c:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 801148e:	210a      	movs	r1, #10
 8011490:	6878      	ldr	r0, [r7, #4]
 8011492:	f7fe fe2d 	bl	80100f0 <vTCPStateChange>
 8011496:	e023      	b.n	80114e0 <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 8011498:	68fb      	ldr	r3, [r7, #12]
 801149a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801149c:	1c5a      	adds	r2, r3, #1
 801149e:	68fb      	ldr	r3, [r7, #12]
 80114a0:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 80114a2:	687b      	ldr	r3, [r7, #4]
 80114a4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80114a8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80114ac:	b2db      	uxtb	r3, r3
 80114ae:	2b00      	cmp	r3, #0
 80114b0:	d103      	bne.n	80114ba <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 80114b2:	697b      	ldr	r3, [r7, #20]
 80114b4:	2200      	movs	r2, #0
 80114b6:	735a      	strb	r2, [r3, #13]
 80114b8:	e012      	b.n	80114e0 <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80114c0:	f003 0302 	and.w	r3, r3, #2
 80114c4:	b2db      	uxtb	r3, r3
 80114c6:	2b00      	cmp	r3, #0
 80114c8:	d103      	bne.n	80114d2 <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 80114ca:	697b      	ldr	r3, [r7, #20]
 80114cc:	2210      	movs	r2, #16
 80114ce:	735a      	strb	r2, [r3, #13]
 80114d0:	e002      	b.n	80114d8 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 80114d2:	697b      	ldr	r3, [r7, #20]
 80114d4:	2200      	movs	r2, #0
 80114d6:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80114d8:	2108      	movs	r1, #8
 80114da:	6878      	ldr	r0, [r7, #4]
 80114dc:	f7fe fe08 	bl	80100f0 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80114e0:	68fb      	ldr	r3, [r7, #12]
 80114e2:	6a1a      	ldr	r2, [r3, #32]
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 80114e8:	697b      	ldr	r3, [r7, #20]
 80114ea:	7b5b      	ldrb	r3, [r3, #13]
 80114ec:	2b00      	cmp	r3, #0
 80114ee:	d00d      	beq.n	801150c <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 80114f0:	6878      	ldr	r0, [r7, #4]
 80114f2:	f7f7 fd6b 	bl	8008fcc <uxIPHeaderSizeSocket>
 80114f6:	4603      	mov	r3, r0
 80114f8:	b2da      	uxtb	r2, r3
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011500:	4413      	add	r3, r2
 8011502:	b2db      	uxtb	r3, r3
 8011504:	3314      	adds	r3, #20
 8011506:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 8011508:	7cfb      	ldrb	r3, [r7, #19]
 801150a:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011512:	3314      	adds	r3, #20
 8011514:	b2db      	uxtb	r3, r3
 8011516:	009b      	lsls	r3, r3, #2
 8011518:	b2da      	uxtb	r2, r3
 801151a:	697b      	ldr	r3, [r7, #20]
 801151c:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 801151e:	4b14      	ldr	r3, [pc, #80]	@ (8011570 <prvTCPHandleFin+0x1b4>)
 8011520:	681b      	ldr	r3, [r3, #0]
 8011522:	2b00      	cmp	r3, #0
 8011524:	d01f      	beq.n	8011566 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	69db      	ldr	r3, [r3, #28]
 801152a:	68ba      	ldr	r2, [r7, #8]
 801152c:	1ad0      	subs	r0, r2, r3
 801152e:	68fb      	ldr	r3, [r7, #12]
 8011530:	6a1a      	ldr	r2, [r3, #32]
 8011532:	68fb      	ldr	r3, [r7, #12]
 8011534:	69db      	ldr	r3, [r3, #28]
 8011536:	1ad4      	subs	r4, r2, r3
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801153c:	68fb      	ldr	r3, [r7, #12]
 801153e:	69db      	ldr	r3, [r3, #28]
 8011540:	1ad5      	subs	r5, r2, r3
 8011542:	68fb      	ldr	r3, [r7, #12]
 8011544:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011546:	68fb      	ldr	r3, [r7, #12]
 8011548:	69db      	ldr	r3, [r3, #28]
 801154a:	1ad3      	subs	r3, r2, r3
 801154c:	68fa      	ldr	r2, [r7, #12]
 801154e:	6911      	ldr	r1, [r2, #16]
 8011550:	68fa      	ldr	r2, [r7, #12]
 8011552:	68d2      	ldr	r2, [r2, #12]
 8011554:	1a8a      	subs	r2, r1, r2
 8011556:	9201      	str	r2, [sp, #4]
 8011558:	9300      	str	r3, [sp, #0]
 801155a:	462b      	mov	r3, r5
 801155c:	4622      	mov	r2, r4
 801155e:	4601      	mov	r1, r0
 8011560:	4804      	ldr	r0, [pc, #16]	@ (8011574 <prvTCPHandleFin+0x1b8>)
 8011562:	f00f f813 	bl	802058c <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 8011566:	69fb      	ldr	r3, [r7, #28]
    }
 8011568:	4618      	mov	r0, r3
 801156a:	3720      	adds	r7, #32
 801156c:	46bd      	mov	sp, r7
 801156e:	bdb0      	pop	{r4, r5, r7, pc}
 8011570:	200012f4 	.word	0x200012f4
 8011574:	08024810 	.word	0x08024810

08011578 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8011578:	b590      	push	{r4, r7, lr}
 801157a:	b09b      	sub	sp, #108	@ 0x6c
 801157c:	af02      	add	r7, sp, #8
 801157e:	60f8      	str	r0, [r7, #12]
 8011580:	60b9      	str	r1, [r7, #8]
 8011582:	607a      	str	r2, [r7, #4]
 8011584:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011586:	68bb      	ldr	r3, [r7, #8]
 8011588:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801158a:	68f8      	ldr	r0, [r7, #12]
 801158c:	f7f7 fd1e 	bl	8008fcc <uxIPHeaderSizeSocket>
 8011590:	4603      	mov	r3, r0
 8011592:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011594:	4423      	add	r3, r4
 8011596:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011598:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801159a:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801159c:	68fb      	ldr	r3, [r7, #12]
 801159e:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80115a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80115a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115a6:	7b5b      	ldrb	r3, [r3, #13]
 80115a8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80115ac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115ae:	685b      	ldr	r3, [r3, #4]
 80115b0:	061a      	lsls	r2, r3, #24
 80115b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115b4:	685b      	ldr	r3, [r3, #4]
 80115b6:	021b      	lsls	r3, r3, #8
 80115b8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80115bc:	431a      	orrs	r2, r3
 80115be:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115c0:	685b      	ldr	r3, [r3, #4]
 80115c2:	0a1b      	lsrs	r3, r3, #8
 80115c4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80115c8:	431a      	orrs	r2, r3
 80115ca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80115cc:	685b      	ldr	r3, [r3, #4]
 80115ce:	0e1b      	lsrs	r3, r3, #24
 80115d0:	4313      	orrs	r3, r2
 80115d2:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 80115d4:	2300      	movs	r3, #0
 80115d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 80115d8:	2300      	movs	r3, #0
 80115da:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 80115dc:	2310      	movs	r3, #16
 80115de:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 80115e2:	2317      	movs	r3, #23
 80115e4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80115e8:	68fb      	ldr	r3, [r7, #12]
 80115ea:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80115ee:	2b02      	cmp	r3, #2
 80115f0:	d105      	bne.n	80115fe <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 80115f2:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 80115f6:	f043 0302 	orr.w	r3, r3, #2
 80115fa:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 80115fe:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8011602:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011606:	4013      	ands	r3, r2
 8011608:	b2db      	uxtb	r3, r3
 801160a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 801160e:	429a      	cmp	r2, r3
 8011610:	d044      	beq.n	801169c <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 8011612:	68fb      	ldr	r3, [r7, #12]
 8011614:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011618:	2b04      	cmp	r3, #4
 801161a:	d101      	bne.n	8011620 <prvHandleSynReceived+0xa8>
 801161c:	4977      	ldr	r1, [pc, #476]	@ (80117fc <prvHandleSynReceived+0x284>)
 801161e:	e000      	b.n	8011622 <prvHandleSynReceived+0xaa>
 8011620:	4977      	ldr	r1, [pc, #476]	@ (8011800 <prvHandleSynReceived+0x288>)
 8011622:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8011626:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 801162a:	4876      	ldr	r0, [pc, #472]	@ (8011804 <prvHandleSynReceived+0x28c>)
 801162c:	f00e ffae 	bl	802058c <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011630:	2108      	movs	r1, #8
 8011632:	68f8      	ldr	r0, [r7, #12]
 8011634:	f7fe fd5c 	bl	80100f0 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8011638:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801163a:	689b      	ldr	r3, [r3, #8]
 801163c:	061a      	lsls	r2, r3, #24
 801163e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011640:	689b      	ldr	r3, [r3, #8]
 8011642:	021b      	lsls	r3, r3, #8
 8011644:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011648:	431a      	orrs	r2, r3
 801164a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801164c:	689b      	ldr	r3, [r3, #8]
 801164e:	0a1b      	lsrs	r3, r3, #8
 8011650:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011654:	431a      	orrs	r2, r3
 8011656:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011658:	689b      	ldr	r3, [r3, #8]
 801165a:	0e1b      	lsrs	r3, r3, #24
 801165c:	431a      	orrs	r2, r3
 801165e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011660:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8011662:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011664:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011666:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8011668:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801166a:	7b5b      	ldrb	r3, [r3, #13]
 801166c:	f043 0304 	orr.w	r3, r3, #4
 8011670:	b2da      	uxtb	r2, r3
 8011672:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011674:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011676:	68f8      	ldr	r0, [r7, #12]
 8011678:	f7f7 fca8 	bl	8008fcc <uxIPHeaderSizeSocket>
 801167c:	4602      	mov	r2, r0
 801167e:	683b      	ldr	r3, [r7, #0]
 8011680:	4413      	add	r3, r2
 8011682:	3314      	adds	r3, #20
 8011684:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011686:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011688:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801168a:	683b      	ldr	r3, [r7, #0]
 801168c:	b2db      	uxtb	r3, r3
 801168e:	3314      	adds	r3, #20
 8011690:	b2db      	uxtb	r3, r3
 8011692:	009b      	lsls	r3, r3, #2
 8011694:	b2da      	uxtb	r2, r3
 8011696:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011698:	731a      	strb	r2, [r3, #12]
 801169a:	e0aa      	b.n	80117f2 <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 801169c:	68fb      	ldr	r3, [r7, #12]
 801169e:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 80116a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116a4:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 80116a8:	68fb      	ldr	r3, [r7, #12]
 80116aa:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80116ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116ae:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80116b2:	68fb      	ldr	r3, [r7, #12]
 80116b4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80116b8:	2b02      	cmp	r3, #2
 80116ba:	d12e      	bne.n	801171a <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80116bc:	68f8      	ldr	r0, [r7, #12]
 80116be:	f7f7 fc85 	bl	8008fcc <uxIPHeaderSizeSocket>
 80116c2:	4603      	mov	r3, r0
 80116c4:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 80116c6:	33a0      	adds	r3, #160	@ 0xa0
 80116c8:	68fa      	ldr	r2, [r7, #12]
 80116ca:	4413      	add	r3, r2
 80116cc:	330a      	adds	r3, #10
 80116ce:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 80116d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80116d2:	2210      	movs	r2, #16
 80116d4:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 80116d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80116d8:	2210      	movs	r2, #16
 80116da:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 80116dc:	68fb      	ldr	r3, [r7, #12]
 80116de:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80116e2:	68fb      	ldr	r3, [r7, #12]
 80116e4:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 80116e8:	68fb      	ldr	r3, [r7, #12]
 80116ea:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 80116ee:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80116f0:	f003 f8ec 	bl	80148cc <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 80116f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116f6:	1c5a      	adds	r2, r3, #1
 80116f8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80116fa:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 80116fc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80116fe:	1c5a      	adds	r2, r3, #1
 8011700:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011702:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8011704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011706:	6a1b      	ldr	r3, [r3, #32]
 8011708:	1c5a      	adds	r2, r3, #1
 801170a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801170c:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 801170e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011710:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011712:	1c5a      	adds	r2, r3, #1
 8011714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011716:	635a      	str	r2, [r3, #52]	@ 0x34
 8011718:	e005      	b.n	8011726 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 801171a:	687b      	ldr	r3, [r7, #4]
 801171c:	2b00      	cmp	r3, #0
 801171e:	d102      	bne.n	8011726 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8011720:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011722:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011724:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8011726:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011728:	69db      	ldr	r3, [r3, #28]
 801172a:	1c5a      	adds	r2, r3, #1
 801172c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801172e:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	7a1b      	ldrb	r3, [r3, #8]
 8011734:	f003 0301 	and.w	r3, r3, #1
 8011738:	b2db      	uxtb	r3, r3
 801173a:	2b00      	cmp	r3, #0
 801173c:	d001      	beq.n	8011742 <prvHandleSynReceived+0x1ca>
 801173e:	200a      	movs	r0, #10
 8011740:	e000      	b.n	8011744 <prvHandleSynReceived+0x1cc>
 8011742:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8011744:	68fb      	ldr	r3, [r7, #12]
 8011746:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 801174a:	f107 0210 	add.w	r2, r7, #16
 801174e:	2328      	movs	r3, #40	@ 0x28
 8011750:	f7fc fec0 	bl	800e4d4 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801175a:	2b02      	cmp	r3, #2
 801175c:	d101      	bne.n	8011762 <prvHandleSynReceived+0x1ea>
 801175e:	492a      	ldr	r1, [pc, #168]	@ (8011808 <prvHandleSynReceived+0x290>)
 8011760:	e000      	b.n	8011764 <prvHandleSynReceived+0x1ec>
 8011762:	492a      	ldr	r1, [pc, #168]	@ (801180c <prvHandleSynReceived+0x294>)
 8011764:	68fb      	ldr	r3, [r7, #12]
 8011766:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011768:	461c      	mov	r4, r3
 801176a:	68fb      	ldr	r3, [r7, #12]
 801176c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011770:	461a      	mov	r2, r3
 8011772:	68fb      	ldr	r3, [r7, #12]
 8011774:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011778:	f3c3 1300 	ubfx	r3, r3, #4, #1
 801177c:	b2db      	uxtb	r3, r3
 801177e:	4618      	mov	r0, r3
 8011780:	f107 0310 	add.w	r3, r7, #16
 8011784:	9001      	str	r0, [sp, #4]
 8011786:	9200      	str	r2, [sp, #0]
 8011788:	4622      	mov	r2, r4
 801178a:	4821      	ldr	r0, [pc, #132]	@ (8011810 <prvHandleSynReceived+0x298>)
 801178c:	f00e fefe 	bl	802058c <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 8011790:	68fb      	ldr	r3, [r7, #12]
 8011792:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011796:	2b02      	cmp	r3, #2
 8011798:	d002      	beq.n	80117a0 <prvHandleSynReceived+0x228>
 801179a:	687b      	ldr	r3, [r7, #4]
 801179c:	2b00      	cmp	r3, #0
 801179e:	d014      	beq.n	80117ca <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 80117a0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117a2:	2210      	movs	r2, #16
 80117a4:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80117a6:	68f8      	ldr	r0, [r7, #12]
 80117a8:	f7f7 fc10 	bl	8008fcc <uxIPHeaderSizeSocket>
 80117ac:	4602      	mov	r2, r0
 80117ae:	683b      	ldr	r3, [r7, #0]
 80117b0:	4413      	add	r3, r2
 80117b2:	3314      	adds	r3, #20
 80117b4:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 80117b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80117b8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	b2db      	uxtb	r3, r3
 80117be:	3314      	adds	r3, #20
 80117c0:	b2db      	uxtb	r3, r3
 80117c2:	009b      	lsls	r3, r3, #2
 80117c4:	b2da      	uxtb	r2, r3
 80117c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80117c8:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 80117ca:	68fb      	ldr	r3, [r7, #12]
 80117cc:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80117d0:	f003 0310 	and.w	r3, r3, #16
 80117d4:	b2db      	uxtb	r3, r3
 80117d6:	2b00      	cmp	r3, #0
 80117d8:	d107      	bne.n	80117ea <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 80117da:	68fb      	ldr	r3, [r7, #12]
 80117dc:	2200      	movs	r2, #0
 80117de:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 80117e2:	68fb      	ldr	r3, [r7, #12]
 80117e4:	2200      	movs	r2, #0
 80117e6:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 80117ea:	2105      	movs	r1, #5
 80117ec:	68f8      	ldr	r0, [r7, #12]
 80117ee:	f7fe fc7f 	bl	80100f0 <vTCPStateChange>
        }

        return xSendLength;
 80117f2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 80117f4:	4618      	mov	r0, r3
 80117f6:	3764      	adds	r7, #100	@ 0x64
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd90      	pop	{r4, r7, pc}
 80117fc:	08024850 	.word	0x08024850
 8011800:	08024860 	.word	0x08024860
 8011804:	08024870 	.word	0x08024870
 8011808:	08024894 	.word	0x08024894
 801180c:	0802489c 	.word	0x0802489c
 8011810:	080248a4 	.word	0x080248a4

08011814 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8011814:	b590      	push	{r4, r7, lr}
 8011816:	b097      	sub	sp, #92	@ 0x5c
 8011818:	af02      	add	r7, sp, #8
 801181a:	60f8      	str	r0, [r7, #12]
 801181c:	60b9      	str	r1, [r7, #8]
 801181e:	607a      	str	r2, [r7, #4]
 8011820:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011822:	68bb      	ldr	r3, [r7, #8]
 8011824:	681b      	ldr	r3, [r3, #0]
 8011826:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011828:	68f8      	ldr	r0, [r7, #12]
 801182a:	f7f7 fbcf 	bl	8008fcc <uxIPHeaderSizeSocket>
 801182e:	4603      	mov	r3, r0
 8011830:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011832:	4423      	add	r3, r4
 8011834:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011836:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011838:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011840:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011842:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011844:	7b5b      	ldrb	r3, [r3, #13]
 8011846:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 801184a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801184c:	685b      	ldr	r3, [r3, #4]
 801184e:	061a      	lsls	r2, r3, #24
 8011850:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011852:	685b      	ldr	r3, [r3, #4]
 8011854:	021b      	lsls	r3, r3, #8
 8011856:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801185a:	431a      	orrs	r2, r3
 801185c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801185e:	685b      	ldr	r3, [r3, #4]
 8011860:	0a1b      	lsrs	r3, r3, #8
 8011862:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011866:	431a      	orrs	r2, r3
 8011868:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801186a:	685b      	ldr	r3, [r3, #4]
 801186c:	0e1b      	lsrs	r3, r3, #24
 801186e:	4313      	orrs	r3, r2
 8011870:	637b      	str	r3, [r7, #52]	@ 0x34
 8011872:	2300      	movs	r3, #0
 8011874:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 8011876:	2300      	movs	r3, #0
 8011878:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801187a:	2300      	movs	r3, #0
 801187c:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 801187e:	2300      	movs	r3, #0
 8011880:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8011882:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011884:	89db      	ldrh	r3, [r3, #14]
 8011886:	b29b      	uxth	r3, r3
 8011888:	021b      	lsls	r3, r3, #8
 801188a:	b21a      	sxth	r2, r3
 801188c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801188e:	89db      	ldrh	r3, [r3, #14]
 8011890:	b29b      	uxth	r3, r3
 8011892:	0a1b      	lsrs	r3, r3, #8
 8011894:	b29b      	uxth	r3, r3
 8011896:	b21b      	sxth	r3, r3
 8011898:	4313      	orrs	r3, r2
 801189a:	b21b      	sxth	r3, r3
 801189c:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 801189e:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 80118a0:	68fb      	ldr	r3, [r7, #12]
 80118a2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 80118a6:	68fb      	ldr	r3, [r7, #12]
 80118a8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 80118ac:	68fa      	ldr	r2, [r7, #12]
 80118ae:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 80118b2:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 80118b6:	68fb      	ldr	r3, [r7, #12]
 80118b8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 80118bc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 80118c0:	f003 0310 	and.w	r3, r3, #16
 80118c4:	2b00      	cmp	r3, #0
 80118c6:	f000 8106 	beq.w	8011ad6 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 80118ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118cc:	689b      	ldr	r3, [r3, #8]
 80118ce:	061a      	lsls	r2, r3, #24
 80118d0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118d2:	689b      	ldr	r3, [r3, #8]
 80118d4:	021b      	lsls	r3, r3, #8
 80118d6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80118da:	431a      	orrs	r2, r3
 80118dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118de:	689b      	ldr	r3, [r3, #8]
 80118e0:	0a1b      	lsrs	r3, r3, #8
 80118e2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80118e6:	431a      	orrs	r2, r3
 80118e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80118ea:	689b      	ldr	r3, [r3, #8]
 80118ec:	0e1b      	lsrs	r3, r3, #24
 80118ee:	4313      	orrs	r3, r2
 80118f0:	4619      	mov	r1, r3
 80118f2:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80118f4:	f003 feee 	bl	80156d4 <ulTCPWindowTxAck>
 80118f8:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 80118fa:	68fb      	ldr	r3, [r7, #12]
 80118fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011900:	2b00      	cmp	r3, #0
 8011902:	d02c      	beq.n	801195e <prvHandleEstablished+0x14a>
 8011904:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011906:	2b00      	cmp	r3, #0
 8011908:	d029      	beq.n	801195e <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8011910:	2300      	movs	r3, #0
 8011912:	9300      	str	r3, [sp, #0]
 8011914:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011916:	2200      	movs	r2, #0
 8011918:	2100      	movs	r1, #0
 801191a:	f7fe fa42 	bl	800fda2 <uxStreamBufferGet>
 801191e:	4603      	mov	r3, r0
 8011920:	2b00      	cmp	r3, #0
 8011922:	d01c      	beq.n	801195e <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8011924:	68fb      	ldr	r3, [r7, #12]
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	f043 0202 	orr.w	r2, r3, #2
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011934:	f003 0302 	and.w	r3, r3, #2
 8011938:	2b00      	cmp	r3, #0
 801193a:	d005      	beq.n	8011948 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 801193c:	68fb      	ldr	r3, [r7, #12]
 801193e:	681b      	ldr	r3, [r3, #0]
 8011940:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801194e:	2b00      	cmp	r3, #0
 8011950:	d005      	beq.n	801195e <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8011958:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801195a:	68f8      	ldr	r0, [r7, #12]
 801195c:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011964:	2b00      	cmp	r3, #0
 8011966:	d002      	beq.n	801196e <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 8011968:	68f8      	ldr	r0, [r7, #12]
 801196a:	f001 fb13 	bl	8012f94 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801196e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011970:	6a1a      	ldr	r2, [r3, #32]
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8011978:	68fb      	ldr	r3, [r7, #12]
 801197a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801197e:	f003 0320 	and.w	r3, r3, #32
 8011982:	b2db      	uxtb	r3, r3
 8011984:	2b00      	cmp	r3, #0
 8011986:	d105      	bne.n	8011994 <prvHandleEstablished+0x180>
 8011988:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 801198c:	f003 0301 	and.w	r3, r3, #1
 8011990:	2b00      	cmp	r3, #0
 8011992:	d06b      	beq.n	8011a6c <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 8011994:	2301      	movs	r3, #1
 8011996:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8011998:	68fb      	ldr	r3, [r7, #12]
 801199a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 801199e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80119a2:	b2db      	uxtb	r3, r3
 80119a4:	2b00      	cmp	r3, #0
 80119a6:	d13a      	bne.n	8011a1e <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 80119a8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80119aa:	f002 fe87 	bl	80146bc <xTCPWindowRxEmpty>
 80119ae:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 80119b0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80119b2:	f003 fafd 	bl	8014fb0 <xTCPWindowTxDone>
 80119b6:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 80119b8:	6a3b      	ldr	r3, [r7, #32]
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d002      	beq.n	80119c4 <prvHandleEstablished+0x1b0>
 80119be:	69fb      	ldr	r3, [r7, #28]
 80119c0:	2b00      	cmp	r3, #0
 80119c2:	d10f      	bne.n	80119e4 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80119c8:	4619      	mov	r1, r3
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80119d0:	461a      	mov	r2, r3
 80119d2:	69fb      	ldr	r3, [r7, #28]
 80119d4:	9300      	str	r3, [sp, #0]
 80119d6:	6a3b      	ldr	r3, [r7, #32]
 80119d8:	4841      	ldr	r0, [pc, #260]	@ (8011ae0 <prvHandleEstablished+0x2cc>)
 80119da:	f00e fdd7 	bl	802058c <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 80119de:	2300      	movs	r3, #0
 80119e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80119e2:	e01c      	b.n	8011a1e <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 80119e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80119e6:	687b      	ldr	r3, [r7, #4]
 80119e8:	441a      	add	r2, r3
 80119ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119ec:	691b      	ldr	r3, [r3, #16]
 80119ee:	1ad3      	subs	r3, r2, r3
 80119f0:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 80119f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80119f4:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 80119f6:	69bb      	ldr	r3, [r7, #24]
 80119f8:	2b01      	cmp	r3, #1
 80119fa:	dd10      	ble.n	8011a1e <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 80119fc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80119fe:	691a      	ldr	r2, [r3, #16]
 8011a00:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a02:	68db      	ldr	r3, [r3, #12]
 8011a04:	1ad1      	subs	r1, r2, r3
 8011a06:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a08:	699a      	ldr	r2, [r3, #24]
 8011a0a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a0c:	68db      	ldr	r3, [r3, #12]
 8011a0e:	1ad3      	subs	r3, r2, r3
 8011a10:	460a      	mov	r2, r1
 8011a12:	69b9      	ldr	r1, [r7, #24]
 8011a14:	4833      	ldr	r0, [pc, #204]	@ (8011ae4 <prvHandleEstablished+0x2d0>)
 8011a16:	f00e fdb9 	bl	802058c <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 8011a1a:	2300      	movs	r3, #0
 8011a1c:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 8011a1e:	4b32      	ldr	r3, [pc, #200]	@ (8011ae8 <prvHandleEstablished+0x2d4>)
 8011a20:	681b      	ldr	r3, [r3, #0]
 8011a22:	2b00      	cmp	r3, #0
 8011a24:	dd11      	ble.n	8011a4a <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8011a2c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011a2e:	1ad1      	subs	r1, r2, r3
 8011a30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011a32:	6a1a      	ldr	r2, [r3, #32]
 8011a34:	68fb      	ldr	r3, [r7, #12]
 8011a36:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8011a3a:	1ad3      	subs	r3, r2, r3
 8011a3c:	9300      	str	r3, [sp, #0]
 8011a3e:	687b      	ldr	r3, [r7, #4]
 8011a40:	460a      	mov	r2, r1
 8011a42:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011a44:	4829      	ldr	r0, [pc, #164]	@ (8011aec <prvHandleEstablished+0x2d8>)
 8011a46:	f00e fda1 	bl	802058c <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 8011a4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a4c:	2b00      	cmp	r3, #0
 8011a4e:	d00d      	beq.n	8011a6c <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 8011a50:	68fa      	ldr	r2, [r7, #12]
 8011a52:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011a56:	f043 0320 	orr.w	r3, r3, #32
 8011a5a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8011a5e:	68bb      	ldr	r3, [r7, #8]
 8011a60:	681b      	ldr	r3, [r3, #0]
 8011a62:	4619      	mov	r1, r3
 8011a64:	68f8      	ldr	r0, [r7, #12]
 8011a66:	f7ff fca9 	bl	80113bc <prvTCPHandleFin>
 8011a6a:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 8011a6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011a6e:	2b00      	cmp	r3, #0
 8011a70:	d131      	bne.n	8011ad6 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8011a72:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a74:	2210      	movs	r2, #16
 8011a76:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 8011a78:	687b      	ldr	r3, [r7, #4]
 8011a7a:	2b00      	cmp	r3, #0
 8011a7c:	d01d      	beq.n	8011aba <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011a7e:	68f8      	ldr	r0, [r7, #12]
 8011a80:	f7f7 faa4 	bl	8008fcc <uxIPHeaderSizeSocket>
 8011a84:	4602      	mov	r2, r0
 8011a86:	683b      	ldr	r3, [r7, #0]
 8011a88:	4413      	add	r3, r2
 8011a8a:	3314      	adds	r3, #20
 8011a8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011a8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011a90:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8011a92:	683b      	ldr	r3, [r7, #0]
 8011a94:	b2db      	uxtb	r3, r3
 8011a96:	3314      	adds	r3, #20
 8011a98:	b2db      	uxtb	r3, r3
 8011a9a:	009b      	lsls	r3, r3, #2
 8011a9c:	b2da      	uxtb	r2, r3
 8011a9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011aa0:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8011aa2:	68fb      	ldr	r3, [r7, #12]
 8011aa4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011aa8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011aac:	b2db      	uxtb	r3, r3
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d003      	beq.n	8011aba <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8011ab2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ab4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ab6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ab8:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 8011aba:	683b      	ldr	r3, [r7, #0]
 8011abc:	2b00      	cmp	r3, #0
 8011abe:	d10a      	bne.n	8011ad6 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8011ac0:	683a      	ldr	r2, [r7, #0]
 8011ac2:	68b9      	ldr	r1, [r7, #8]
 8011ac4:	68f8      	ldr	r0, [r7, #12]
 8011ac6:	f001 f8a1 	bl	8012c0c <prvTCPPrepareSend>
 8011aca:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 8011acc:	697b      	ldr	r3, [r7, #20]
 8011ace:	2b00      	cmp	r3, #0
 8011ad0:	dd01      	ble.n	8011ad6 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 8011ad2:	697b      	ldr	r3, [r7, #20]
 8011ad4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 8011ad6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8011ad8:	4618      	mov	r0, r3
 8011ada:	3754      	adds	r7, #84	@ 0x54
 8011adc:	46bd      	mov	sp, r7
 8011ade:	bd90      	pop	{r4, r7, pc}
 8011ae0:	080248d8 	.word	0x080248d8
 8011ae4:	08024904 	.word	0x08024904
 8011ae8:	200012f4 	.word	0x200012f4
 8011aec:	08024938 	.word	0x08024938

08011af0 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8011af0:	b590      	push	{r4, r7, lr}
 8011af2:	b08f      	sub	sp, #60	@ 0x3c
 8011af4:	af00      	add	r7, sp, #0
 8011af6:	6078      	str	r0, [r7, #4]
 8011af8:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 8011afa:	683b      	ldr	r3, [r7, #0]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011b00:	683b      	ldr	r3, [r7, #0]
 8011b02:	681b      	ldr	r3, [r3, #0]
 8011b04:	4618      	mov	r0, r3
 8011b06:	f7f7 fa47 	bl	8008f98 <uxIPHeaderSizePacket>
 8011b0a:	4603      	mov	r3, r0
 8011b0c:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011b0e:	4423      	add	r3, r4
 8011b10:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8011b12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011b14:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 8011b16:	2300      	movs	r3, #0
 8011b18:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8011b1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b1c:	685b      	ldr	r3, [r3, #4]
 8011b1e:	061a      	lsls	r2, r3, #24
 8011b20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b22:	685b      	ldr	r3, [r3, #4]
 8011b24:	021b      	lsls	r3, r3, #8
 8011b26:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011b2a:	431a      	orrs	r2, r3
 8011b2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b2e:	685b      	ldr	r3, [r3, #4]
 8011b30:	0a1b      	lsrs	r3, r3, #8
 8011b32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011b36:	431a      	orrs	r2, r3
 8011b38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b3a:	685b      	ldr	r3, [r3, #4]
 8011b3c:	0e1b      	lsrs	r3, r3, #24
 8011b3e:	4313      	orrs	r3, r2
 8011b40:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 8011b42:	2300      	movs	r3, #0
 8011b44:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011b46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b48:	7b5b      	ldrb	r3, [r3, #13]
 8011b4a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8011b4e:	687b      	ldr	r3, [r7, #4]
 8011b50:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011b54:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 8011b56:	2300      	movs	r3, #0
 8011b58:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 8011b5a:	683b      	ldr	r3, [r7, #0]
 8011b5c:	681b      	ldr	r3, [r3, #0]
 8011b5e:	f107 0208 	add.w	r2, r7, #8
 8011b62:	4611      	mov	r1, r2
 8011b64:	4618      	mov	r0, r3
 8011b66:	f7ff fa64 	bl	8011032 <prvCheckRxData>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 8011b6e:	687b      	ldr	r3, [r7, #4]
 8011b70:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011b74:	2b04      	cmp	r3, #4
 8011b76:	d90c      	bls.n	8011b92 <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 8011b78:	69fb      	ldr	r3, [r7, #28]
 8011b7a:	691a      	ldr	r2, [r3, #16]
 8011b7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011b7e:	3301      	adds	r3, #1
 8011b80:	429a      	cmp	r2, r3
 8011b82:	d106      	bne.n	8011b92 <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8011b84:	687a      	ldr	r2, [r7, #4]
 8011b86:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011b8a:	f043 0301 	orr.w	r3, r3, #1
 8011b8e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 8011b92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011b94:	697b      	ldr	r3, [r7, #20]
 8011b96:	441a      	add	r2, r3
 8011b98:	69fb      	ldr	r3, [r7, #28]
 8011b9a:	699b      	ldr	r3, [r3, #24]
 8011b9c:	1ad3      	subs	r3, r2, r3
 8011b9e:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 8011ba0:	693b      	ldr	r3, [r7, #16]
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	dd04      	ble.n	8011bb0 <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8011ba6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011ba8:	697b      	ldr	r3, [r7, #20]
 8011baa:	441a      	add	r2, r3
 8011bac:	69fb      	ldr	r3, [r7, #28]
 8011bae:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 8011bb0:	68b9      	ldr	r1, [r7, #8]
 8011bb2:	683b      	ldr	r3, [r7, #0]
 8011bb4:	681a      	ldr	r2, [r3, #0]
 8011bb6:	697b      	ldr	r3, [r7, #20]
 8011bb8:	6878      	ldr	r0, [r7, #4]
 8011bba:	f7ff fae3 	bl	8011184 <prvStoreRxData>
 8011bbe:	4603      	mov	r3, r0
 8011bc0:	2b00      	cmp	r3, #0
 8011bc2:	da03      	bge.n	8011bcc <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 8011bc4:	f04f 33ff 	mov.w	r3, #4294967295
 8011bc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8011bca:	e0ae      	b.n	8011d2a <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 8011bcc:	683b      	ldr	r3, [r7, #0]
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	4619      	mov	r1, r3
 8011bd2:	6878      	ldr	r0, [r7, #4]
 8011bd4:	f001 fa0c 	bl	8012ff0 <prvSetOptions>
 8011bd8:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 8011bda:	687b      	ldr	r3, [r7, #4]
 8011bdc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011be0:	2b04      	cmp	r3, #4
 8011be2:	d10c      	bne.n	8011bfe <prvTCPHandleState+0x10e>
 8011be4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011be8:	f003 031f 	and.w	r3, r3, #31
 8011bec:	2b02      	cmp	r3, #2
 8011bee:	d106      	bne.n	8011bfe <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 8011bf0:	4855      	ldr	r0, [pc, #340]	@ (8011d48 <prvTCPHandleState+0x258>)
 8011bf2:	f00e fccb 	bl	802058c <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 8011bf6:	2103      	movs	r1, #3
 8011bf8:	6878      	ldr	r0, [r7, #4]
 8011bfa:	f7fe fa79 	bl	80100f0 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 8011bfe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011c02:	f003 0301 	and.w	r3, r3, #1
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d022      	beq.n	8011c50 <prvTCPHandleState+0x160>
 8011c0a:	687b      	ldr	r3, [r7, #4]
 8011c0c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011c10:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8011c14:	b2db      	uxtb	r3, r3
 8011c16:	2b00      	cmp	r3, #0
 8011c18:	d11a      	bne.n	8011c50 <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8011c1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011c1c:	697b      	ldr	r3, [r7, #20]
 8011c1e:	441a      	add	r2, r3
 8011c20:	69fb      	ldr	r3, [r7, #28]
 8011c22:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8011c24:	687a      	ldr	r2, [r7, #4]
 8011c26:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011c2a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8011c2e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8011c32:	687b      	ldr	r3, [r7, #4]
 8011c34:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011c38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011c3c:	b2db      	uxtb	r3, r3
 8011c3e:	2b00      	cmp	r3, #0
 8011c40:	d106      	bne.n	8011c50 <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 8011c42:	687a      	ldr	r2, [r7, #4]
 8011c44:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8011c48:	f043 0302 	orr.w	r3, r3, #2
 8011c4c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 8011c50:	687b      	ldr	r3, [r7, #4]
 8011c52:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011c56:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 8011c58:	7bfb      	ldrb	r3, [r7, #15]
 8011c5a:	2b0b      	cmp	r3, #11
 8011c5c:	d864      	bhi.n	8011d28 <prvTCPHandleState+0x238>
 8011c5e:	a201      	add	r2, pc, #4	@ (adr r2, 8011c64 <prvTCPHandleState+0x174>)
 8011c60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011c64:	08011d29 	.word	0x08011d29
 8011c68:	08011d29 	.word	0x08011d29
 8011c6c:	08011cf7 	.word	0x08011cf7
 8011c70:	08011c95 	.word	0x08011c95
 8011c74:	08011cf7 	.word	0x08011cf7
 8011c78:	08011d09 	.word	0x08011d09
 8011c7c:	08011d19 	.word	0x08011d19
 8011c80:	08011d19 	.word	0x08011d19
 8011c84:	08011d29 	.word	0x08011d29
 8011c88:	08011d29 	.word	0x08011d29
 8011c8c:	08011d19 	.word	0x08011d19
 8011c90:	08011d29 	.word	0x08011d29
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 8011c94:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011c96:	6878      	ldr	r0, [r7, #4]
 8011c98:	f000 fe4e 	bl	8012938 <prvSetSynAckOptions>
 8011c9c:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 8011c9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ca0:	2212      	movs	r2, #18
 8011ca2:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011ca4:	6878      	ldr	r0, [r7, #4]
 8011ca6:	f7f7 f991 	bl	8008fcc <uxIPHeaderSizeSocket>
 8011caa:	4602      	mov	r2, r0
 8011cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cae:	4413      	add	r3, r2
 8011cb0:	3314      	adds	r3, #20
 8011cb2:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011cb4:	69bb      	ldr	r3, [r7, #24]
 8011cb6:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8011cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cba:	b2db      	uxtb	r3, r3
 8011cbc:	3314      	adds	r3, #20
 8011cbe:	b2db      	uxtb	r3, r3
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	b2da      	uxtb	r2, r3
 8011cc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cc6:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 8011cc8:	2104      	movs	r1, #4
 8011cca:	6878      	ldr	r0, [r7, #4]
 8011ccc:	f7fe fa10 	bl	80100f0 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8011cd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cd2:	1c5a      	adds	r2, r3, #1
 8011cd4:	69fb      	ldr	r3, [r7, #28]
 8011cd6:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8011cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011cda:	1c5a      	adds	r2, r3, #1
 8011cdc:	69fb      	ldr	r3, [r7, #28]
 8011cde:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8011ce0:	69fb      	ldr	r3, [r7, #28]
 8011ce2:	69db      	ldr	r3, [r3, #28]
 8011ce4:	1c5a      	adds	r2, r3, #1
 8011ce6:	69fb      	ldr	r3, [r7, #28]
 8011ce8:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 8011cea:	69fb      	ldr	r3, [r7, #28]
 8011cec:	69db      	ldr	r3, [r3, #28]
 8011cee:	1c5a      	adds	r2, r3, #1
 8011cf0:	69fb      	ldr	r3, [r7, #28]
 8011cf2:	621a      	str	r2, [r3, #32]
                    break;
 8011cf4:	e019      	b.n	8011d2a <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8011cf6:	683b      	ldr	r3, [r7, #0]
 8011cf8:	6819      	ldr	r1, [r3, #0]
 8011cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011cfc:	697a      	ldr	r2, [r7, #20]
 8011cfe:	6878      	ldr	r0, [r7, #4]
 8011d00:	f7ff fc3a 	bl	8011578 <prvHandleSynReceived>
 8011d04:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8011d06:	e010      	b.n	8011d2a <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 8011d08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d0a:	697a      	ldr	r2, [r7, #20]
 8011d0c:	6839      	ldr	r1, [r7, #0]
 8011d0e:	6878      	ldr	r0, [r7, #4]
 8011d10:	f7ff fd80 	bl	8011814 <prvHandleEstablished>
 8011d14:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8011d16:	e008      	b.n	8011d2a <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8011d18:	683b      	ldr	r3, [r7, #0]
 8011d1a:	681b      	ldr	r3, [r3, #0]
 8011d1c:	4619      	mov	r1, r3
 8011d1e:	6878      	ldr	r0, [r7, #4]
 8011d20:	f7ff fb4c 	bl	80113bc <prvTCPHandleFin>
 8011d24:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8011d26:	e000      	b.n	8011d2a <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 8011d28:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 8011d2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d2c:	2b00      	cmp	r3, #0
 8011d2e:	dd06      	ble.n	8011d3e <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 8011d30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011d32:	697a      	ldr	r2, [r7, #20]
 8011d34:	6839      	ldr	r1, [r7, #0]
 8011d36:	6878      	ldr	r0, [r7, #4]
 8011d38:	f001 fa1a 	bl	8013170 <prvSendData>
 8011d3c:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 8011d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8011d40:	4618      	mov	r0, r3
 8011d42:	373c      	adds	r7, #60	@ 0x3c
 8011d44:	46bd      	mov	sp, r7
 8011d46:	bd90      	pop	{r4, r7, pc}
 8011d48:	08024970 	.word	0x08024970

08011d4c <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8011d4c:	b580      	push	{r7, lr}
 8011d4e:	b084      	sub	sp, #16
 8011d50:	af00      	add	r7, sp, #0
 8011d52:	6078      	str	r0, [r7, #4]
 8011d54:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 8011d56:	2300      	movs	r3, #0
 8011d58:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8011d5a:	6838      	ldr	r0, [r7, #0]
 8011d5c:	f7f7 f91c 	bl	8008f98 <uxIPHeaderSizePacket>
 8011d60:	4603      	mov	r3, r0
 8011d62:	2b14      	cmp	r3, #20
 8011d64:	d002      	beq.n	8011d6c <prvHandleListen+0x20>
 8011d66:	2b28      	cmp	r3, #40	@ 0x28
 8011d68:	d006      	beq.n	8011d78 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 8011d6a:	e00b      	b.n	8011d84 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 8011d6c:	6839      	ldr	r1, [r7, #0]
 8011d6e:	6878      	ldr	r0, [r7, #4]
 8011d70:	f000 f8ee 	bl	8011f50 <prvHandleListen_IPV4>
 8011d74:	60f8      	str	r0, [r7, #12]
                    break;
 8011d76:	e005      	b.n	8011d84 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 8011d78:	6839      	ldr	r1, [r7, #0]
 8011d7a:	6878      	ldr	r0, [r7, #4]
 8011d7c:	f000 fa10 	bl	80121a0 <prvHandleListen_IPV6>
 8011d80:	60f8      	str	r0, [r7, #12]
                    break;
 8011d82:	bf00      	nop
        }

        return pxNewSocket;
 8011d84:	68fb      	ldr	r3, [r7, #12]
    }
 8011d86:	4618      	mov	r0, r3
 8011d88:	3710      	adds	r7, #16
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	bd80      	pop	{r7, pc}
	...

08011d90 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 8011d90:	b590      	push	{r4, r7, lr}
 8011d92:	b08f      	sub	sp, #60	@ 0x3c
 8011d94:	af04      	add	r7, sp, #16
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 8011d9a:	683b      	ldr	r3, [r7, #0]
 8011d9c:	6a1a      	ldr	r2, [r3, #32]
 8011d9e:	687b      	ldr	r3, [r7, #4]
 8011da0:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 8011da2:	683b      	ldr	r3, [r7, #0]
 8011da4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011da6:	687b      	ldr	r3, [r7, #4]
 8011da8:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 8011daa:	683b      	ldr	r3, [r7, #0]
 8011dac:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 8011db0:	687b      	ldr	r3, [r7, #4]
 8011db2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 8011db6:	683b      	ldr	r3, [r7, #0]
 8011db8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8011dbc:	687b      	ldr	r3, [r7, #4]
 8011dbe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 8011dc2:	683b      	ldr	r3, [r7, #0]
 8011dc4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 8011dce:	683b      	ldr	r3, [r7, #0]
 8011dd0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 8011dda:	683b      	ldr	r3, [r7, #0]
 8011ddc:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 8011de0:	687b      	ldr	r3, [r7, #4]
 8011de2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 8011de6:	683b      	ldr	r3, [r7, #0]
 8011de8:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 8011dec:	687b      	ldr	r3, [r7, #4]
 8011dee:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 8011df2:	683b      	ldr	r3, [r7, #0]
 8011df4:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8011df8:	687b      	ldr	r3, [r7, #4]
 8011dfa:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 8011dfe:	683b      	ldr	r3, [r7, #0]
 8011e00:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 8011e06:	683b      	ldr	r3, [r7, #0]
 8011e08:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 8011e0c:	687b      	ldr	r3, [r7, #4]
 8011e0e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 8011e12:	683b      	ldr	r3, [r7, #0]
 8011e14:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8011e18:	687b      	ldr	r3, [r7, #4]
 8011e1a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 8011e1e:	683b      	ldr	r3, [r7, #0]
 8011e20:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8011e24:	687b      	ldr	r3, [r7, #4]
 8011e26:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 8011e2a:	683b      	ldr	r3, [r7, #0]
 8011e2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011e2e:	2b00      	cmp	r3, #0
 8011e30:	d009      	beq.n	8011e46 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 8011e32:	683b      	ldr	r3, [r7, #0]
 8011e34:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8011e36:	687b      	ldr	r3, [r7, #4]
 8011e38:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 8011e3a:	683b      	ldr	r3, [r7, #0]
 8011e3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011e3e:	f043 0205 	orr.w	r2, r3, #5
 8011e42:	687b      	ldr	r3, [r7, #4]
 8011e44:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 8011e46:	f107 030c 	add.w	r3, r7, #12
 8011e4a:	4619      	mov	r1, r3
 8011e4c:	6838      	ldr	r0, [r7, #0]
 8011e4e:	f7fc fb65 	bl	800e51c <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8011e52:	687a      	ldr	r2, [r7, #4]
 8011e54:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011e58:	f043 0304 	orr.w	r3, r3, #4
 8011e5c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	683a      	ldr	r2, [r7, #0]
 8011e64:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 8011e66:	683b      	ldr	r3, [r7, #0]
 8011e68:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8011e6c:	3301      	adds	r3, #1
 8011e6e:	b29a      	uxth	r2, r3
 8011e70:	683b      	ldr	r3, [r7, #0]
 8011e72:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 8011e76:	683b      	ldr	r3, [r7, #0]
 8011e78:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011e7a:	2b00      	cmp	r3, #0
 8011e7c:	d102      	bne.n	8011e84 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 8011e7e:	683b      	ldr	r3, [r7, #0]
 8011e80:	687a      	ldr	r2, [r7, #4]
 8011e82:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 8011e84:	683b      	ldr	r3, [r7, #0]
 8011e86:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011e88:	4619      	mov	r1, r3
 8011e8a:	683b      	ldr	r3, [r7, #0]
 8011e8c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8011e90:	4618      	mov	r0, r3
 8011e92:	683b      	ldr	r3, [r7, #0]
 8011e94:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8011e98:	461c      	mov	r4, r3
 8011e9a:	683b      	ldr	r3, [r7, #0]
 8011e9c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 8011ea0:	2b01      	cmp	r3, #1
 8011ea2:	d101      	bne.n	8011ea8 <prvTCPSocketCopy+0x118>
 8011ea4:	4a17      	ldr	r2, [pc, #92]	@ (8011f04 <prvTCPSocketCopy+0x174>)
 8011ea6:	e000      	b.n	8011eaa <prvTCPSocketCopy+0x11a>
 8011ea8:	4a17      	ldr	r2, [pc, #92]	@ (8011f08 <prvTCPSocketCopy+0x178>)
 8011eaa:	683b      	ldr	r3, [r7, #0]
 8011eac:	2b00      	cmp	r3, #0
 8011eae:	d002      	beq.n	8011eb6 <prvTCPSocketCopy+0x126>
 8011eb0:	683b      	ldr	r3, [r7, #0]
 8011eb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011eb4:	e000      	b.n	8011eb8 <prvTCPSocketCopy+0x128>
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	9303      	str	r3, [sp, #12]
 8011eba:	683b      	ldr	r3, [r7, #0]
 8011ebc:	9302      	str	r3, [sp, #8]
 8011ebe:	687b      	ldr	r3, [r7, #4]
 8011ec0:	9301      	str	r3, [sp, #4]
 8011ec2:	9200      	str	r2, [sp, #0]
 8011ec4:	4623      	mov	r3, r4
 8011ec6:	4602      	mov	r2, r0
 8011ec8:	4810      	ldr	r0, [pc, #64]	@ (8011f0c <prvTCPSocketCopy+0x17c>)
 8011eca:	f00e fb5f 	bl	802058c <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 8011ece:	f107 010c 	add.w	r1, r7, #12
 8011ed2:	2301      	movs	r3, #1
 8011ed4:	2218      	movs	r2, #24
 8011ed6:	6878      	ldr	r0, [r7, #4]
 8011ed8:	f7fb fccc 	bl	800d874 <vSocketBind>
 8011edc:	4603      	mov	r3, r0
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	d008      	beq.n	8011ef4 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 8011ee2:	480b      	ldr	r0, [pc, #44]	@ (8011f10 <prvTCPSocketCopy+0x180>)
 8011ee4:	f00e fb52 	bl	802058c <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 8011ee8:	6878      	ldr	r0, [r7, #4]
 8011eea:	f7fb fd77 	bl	800d9dc <vSocketClose>
            xResult = pdFALSE;
 8011eee:	2300      	movs	r3, #0
 8011ef0:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ef2:	e001      	b.n	8011ef8 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 8011ef4:	2301      	movs	r3, #1
 8011ef6:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 8011ef8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8011efa:	4618      	mov	r0, r3
 8011efc:	372c      	adds	r7, #44	@ 0x2c
 8011efe:	46bd      	mov	sp, r7
 8011f00:	bd90      	pop	{r4, r7, pc}
 8011f02:	bf00      	nop
 8011f04:	080249b0 	.word	0x080249b0
 8011f08:	080249b4 	.word	0x080249b4
 8011f0c:	080249b8 	.word	0x080249b8
 8011f10:	080249fc 	.word	0x080249fc

08011f14 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 8011f14:	b480      	push	{r7}
 8011f16:	b085      	sub	sp, #20
 8011f18:	af00      	add	r7, sp, #0
 8011f1a:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 8011f1c:	687b      	ldr	r3, [r7, #4]
 8011f1e:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8011f20:	68fb      	ldr	r3, [r7, #12]
 8011f22:	2b00      	cmp	r3, #0
 8011f24:	db02      	blt.n	8011f2c <FreeRTOS_GetTCPStateName+0x18>
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	2b0c      	cmp	r3, #12
 8011f2a:	dd04      	ble.n	8011f36 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 8011f2c:	230d      	movs	r3, #13
 8011f2e:	60fb      	str	r3, [r7, #12]
                xIndex--;
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	3b01      	subs	r3, #1
 8011f34:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 8011f36:	4a05      	ldr	r2, [pc, #20]	@ (8011f4c <FreeRTOS_GetTCPStateName+0x38>)
 8011f38:	68fb      	ldr	r3, [r7, #12]
 8011f3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 8011f3e:	4618      	mov	r0, r3
 8011f40:	3714      	adds	r7, #20
 8011f42:	46bd      	mov	sp, r7
 8011f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011f48:	4770      	bx	lr
 8011f4a:	bf00      	nop
 8011f4c:	08025cc4 	.word	0x08025cc4

08011f50 <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8011f50:	b590      	push	{r4, r7, lr}
 8011f52:	b08f      	sub	sp, #60	@ 0x3c
 8011f54:	af02      	add	r7, sp, #8
 8011f56:	6078      	str	r0, [r7, #4]
 8011f58:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 8011f5a:	2300      	movs	r3, #0
 8011f5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 8011f5e:	2300      	movs	r3, #0
 8011f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 8011f62:	2300      	movs	r3, #0
 8011f64:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 8011f66:	2300      	movs	r3, #0
 8011f68:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 8011f6a:	2300      	movs	r3, #0
 8011f6c:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 8011f6e:	687b      	ldr	r3, [r7, #4]
 8011f70:	2b00      	cmp	r3, #0
 8011f72:	d008      	beq.n	8011f86 <prvHandleListen_IPV4+0x36>
 8011f74:	683b      	ldr	r3, [r7, #0]
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d005      	beq.n	8011f86 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8011f7a:	683b      	ldr	r3, [r7, #0]
 8011f7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8011f7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8011f80:	683b      	ldr	r3, [r7, #0]
 8011f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011f84:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 8011f86:	6a3b      	ldr	r3, [r7, #32]
 8011f88:	2b00      	cmp	r3, #0
 8011f8a:	d015      	beq.n	8011fb8 <prvHandleListen_IPV4+0x68>
 8011f8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f8e:	f8d3 201e 	ldr.w	r2, [r3, #30]
 8011f92:	6a3b      	ldr	r3, [r7, #32]
 8011f94:	681b      	ldr	r3, [r3, #0]
 8011f96:	429a      	cmp	r2, r3
 8011f98:	d10e      	bne.n	8011fb8 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8011f9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f9c:	f8d3 001e 	ldr.w	r0, [r3, #30]
 8011fa0:	687b      	ldr	r3, [r7, #4]
 8011fa2:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 8011fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fa6:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 8011faa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011fac:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8011fae:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 8011fb0:	f7ef f8de 	bl	8001170 <ulApplicationGetNextSequenceNumber>
 8011fb4:	6278      	str	r0, [r7, #36]	@ 0x24
 8011fb6:	e001      	b.n	8011fbc <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 8011fb8:	2300      	movs	r3, #0
 8011fba:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 8011fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011fbe:	2b00      	cmp	r3, #0
 8011fc0:	d059      	beq.n	8012076 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8011fc2:	687b      	ldr	r3, [r7, #4]
 8011fc4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8011fc8:	f003 0308 	and.w	r3, r3, #8
 8011fcc:	b2db      	uxtb	r3, r3
 8011fce:	2b00      	cmp	r3, #0
 8011fd0:	d00c      	beq.n	8011fec <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8011fd2:	687b      	ldr	r3, [r7, #4]
 8011fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8011fd6:	687a      	ldr	r2, [r7, #4]
 8011fd8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8011fdc:	f043 0304 	orr.w	r3, r3, #4
 8011fe0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8011fe4:	687b      	ldr	r3, [r7, #4]
 8011fe6:	687a      	ldr	r2, [r7, #4]
 8011fe8:	67da      	str	r2, [r3, #124]	@ 0x7c
 8011fea:	e044      	b.n	8012076 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 8011fec:	2300      	movs	r3, #0
 8011fee:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8011ff0:	687b      	ldr	r3, [r7, #4]
 8011ff2:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8011ffc:	429a      	cmp	r2, r3
 8011ffe:	d31b      	bcc.n	8012038 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012004:	4619      	mov	r1, r3
 8012006:	687b      	ldr	r3, [r7, #4]
 8012008:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801200c:	461a      	mov	r2, r3
 801200e:	687b      	ldr	r3, [r7, #4]
 8012010:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012014:	4618      	mov	r0, r3
 8012016:	687b      	ldr	r3, [r7, #4]
 8012018:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801201c:	2b01      	cmp	r3, #1
 801201e:	d101      	bne.n	8012024 <prvHandleListen_IPV4+0xd4>
 8012020:	4b5b      	ldr	r3, [pc, #364]	@ (8012190 <prvHandleListen_IPV4+0x240>)
 8012022:	e000      	b.n	8012026 <prvHandleListen_IPV4+0xd6>
 8012024:	4b5b      	ldr	r3, [pc, #364]	@ (8012194 <prvHandleListen_IPV4+0x244>)
 8012026:	9300      	str	r3, [sp, #0]
 8012028:	4603      	mov	r3, r0
 801202a:	485b      	ldr	r0, [pc, #364]	@ (8012198 <prvHandleListen_IPV4+0x248>)
 801202c:	f00e faae 	bl	802058c <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012030:	6838      	ldr	r0, [r7, #0]
 8012032:	f001 f9d1 	bl	80133d8 <prvTCPSendReset>
 8012036:	e01e      	b.n	8012076 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8012038:	2206      	movs	r2, #6
 801203a:	2101      	movs	r1, #1
 801203c:	2002      	movs	r0, #2
 801203e:	f7fb f8bf 	bl	800d1c0 <FreeRTOS_socket>
 8012042:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8012044:	697b      	ldr	r3, [r7, #20]
 8012046:	2b00      	cmp	r3, #0
 8012048:	d003      	beq.n	8012052 <prvHandleListen_IPV4+0x102>
 801204a:	697b      	ldr	r3, [r7, #20]
 801204c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012050:	d106      	bne.n	8012060 <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8012052:	4852      	ldr	r0, [pc, #328]	@ (801219c <prvHandleListen_IPV4+0x24c>)
 8012054:	f00e fa9a 	bl	802058c <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012058:	6838      	ldr	r0, [r7, #0]
 801205a:	f001 f9bd 	bl	80133d8 <prvTCPSendReset>
 801205e:	e00a      	b.n	8012076 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8012060:	6879      	ldr	r1, [r7, #4]
 8012062:	6978      	ldr	r0, [r7, #20]
 8012064:	f7ff fe94 	bl	8011d90 <prvTCPSocketCopy>
 8012068:	4603      	mov	r3, r0
 801206a:	2b00      	cmp	r3, #0
 801206c:	d003      	beq.n	8012076 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 801206e:	697b      	ldr	r3, [r7, #20]
 8012070:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8012072:	2301      	movs	r3, #1
 8012074:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8012076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012078:	2b00      	cmp	r3, #0
 801207a:	f000 8083 	beq.w	8012184 <prvHandleListen_IPV4+0x234>
 801207e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012080:	2b00      	cmp	r3, #0
 8012082:	d07f      	beq.n	8012184 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012084:	683b      	ldr	r3, [r7, #0]
 8012086:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012088:	6838      	ldr	r0, [r7, #0]
 801208a:	f7f6 ff85 	bl	8008f98 <uxIPHeaderSizePacket>
 801208e:	4603      	mov	r3, r0
 8012090:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 8012092:	4423      	add	r3, r4
 8012094:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801209a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801209c:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 801209e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80120a0:	7a13      	ldrb	r3, [r2, #8]
 80120a2:	f36f 0300 	bfc	r3, #0, #1
 80120a6:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 80120a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120aa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80120ac:	b29b      	uxth	r3, r3
 80120ae:	021b      	lsls	r3, r3, #8
 80120b0:	b21a      	sxth	r2, r3
 80120b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120b4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80120b6:	b29b      	uxth	r3, r3
 80120b8:	0a1b      	lsrs	r3, r3, #8
 80120ba:	b29b      	uxth	r3, r3
 80120bc:	b21b      	sxth	r3, r3
 80120be:	4313      	orrs	r3, r2
 80120c0:	b21b      	sxth	r3, r3
 80120c2:	b29a      	uxth	r2, r3
 80120c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120c6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 80120ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120cc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80120d0:	061a      	lsls	r2, r3, #24
 80120d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120d4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80120d8:	021b      	lsls	r3, r3, #8
 80120da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80120de:	431a      	orrs	r2, r3
 80120e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120e2:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80120e6:	0a1b      	lsrs	r3, r3, #8
 80120e8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80120ec:	431a      	orrs	r2, r3
 80120ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120f0:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80120f4:	0e1b      	lsrs	r3, r3, #24
 80120f6:	431a      	orrs	r2, r3
 80120f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120fa:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 80120fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012100:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012104:	693b      	ldr	r3, [r7, #16]
 8012106:	685b      	ldr	r3, [r3, #4]
 8012108:	061a      	lsls	r2, r3, #24
 801210a:	693b      	ldr	r3, [r7, #16]
 801210c:	685b      	ldr	r3, [r3, #4]
 801210e:	021b      	lsls	r3, r3, #8
 8012110:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012114:	431a      	orrs	r2, r3
 8012116:	693b      	ldr	r3, [r7, #16]
 8012118:	685b      	ldr	r3, [r3, #4]
 801211a:	0a1b      	lsrs	r3, r3, #8
 801211c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012120:	431a      	orrs	r2, r3
 8012122:	693b      	ldr	r3, [r7, #16]
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	0e1b      	lsrs	r3, r3, #24
 8012128:	431a      	orrs	r2, r3
 801212a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801212c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8012130:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012132:	f002 f877 	bl	8014224 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8012136:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012138:	f000 fb66 	bl	8012808 <prvTCPCreateWindow>
 801213c:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 801213e:	68fb      	ldr	r3, [r7, #12]
 8012140:	2b01      	cmp	r3, #1
 8012142:	d008      	beq.n	8012156 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8012144:	69fb      	ldr	r3, [r7, #28]
 8012146:	2b01      	cmp	r3, #1
 8012148:	d102      	bne.n	8012150 <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 801214a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801214c:	f7fb fc46 	bl	800d9dc <vSocketClose>
                }

                pxReturn = NULL;
 8012150:	2300      	movs	r3, #0
 8012152:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8012154:	e016      	b.n	8012184 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8012156:	2103      	movs	r1, #3
 8012158:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801215a:	f7fd ffc9 	bl	80100f0 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 801215e:	683b      	ldr	r3, [r7, #0]
 8012160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012162:	2b5a      	cmp	r3, #90	@ 0x5a
 8012164:	d902      	bls.n	801216c <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8012166:	235a      	movs	r3, #90	@ 0x5a
 8012168:	61bb      	str	r3, [r7, #24]
 801216a:	e002      	b.n	8012172 <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 801216c:	683b      	ldr	r3, [r7, #0]
 801216e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012170:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012174:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8012178:	683b      	ldr	r3, [r7, #0]
 801217a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 801217c:	69ba      	ldr	r2, [r7, #24]
 801217e:	4619      	mov	r1, r3
 8012180:	f00e fc20 	bl	80209c4 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8012184:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8012186:	4618      	mov	r0, r3
 8012188:	3734      	adds	r7, #52	@ 0x34
 801218a:	46bd      	mov	sp, r7
 801218c:	bd90      	pop	{r4, r7, pc}
 801218e:	bf00      	nop
 8012190:	08024aa4 	.word	0x08024aa4
 8012194:	08024aa8 	.word	0x08024aa8
 8012198:	08024aac 	.word	0x08024aac
 801219c:	08024adc 	.word	0x08024adc

080121a0 <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80121a0:	b590      	push	{r4, r7, lr}
 80121a2:	b08f      	sub	sp, #60	@ 0x3c
 80121a4:	af02      	add	r7, sp, #8
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 80121aa:	2300      	movs	r3, #0
 80121ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 80121ae:	2300      	movs	r3, #0
 80121b0:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 80121b2:	2300      	movs	r3, #0
 80121b4:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 80121b6:	2300      	movs	r3, #0
 80121b8:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 80121ba:	2300      	movs	r3, #0
 80121bc:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 80121be:	687b      	ldr	r3, [r7, #4]
 80121c0:	2b00      	cmp	r3, #0
 80121c2:	d024      	beq.n	801220e <prvHandleListen_IPV6+0x6e>
 80121c4:	683b      	ldr	r3, [r7, #0]
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	d021      	beq.n	801220e <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80121ca:	683b      	ldr	r3, [r7, #0]
 80121cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80121ce:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 80121d0:	683b      	ldr	r3, [r7, #0]
 80121d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121d4:	2b00      	cmp	r3, #0
 80121d6:	d103      	bne.n	80121e0 <prvHandleListen_IPV6+0x40>
 80121d8:	215d      	movs	r1, #93	@ 0x5d
 80121da:	487b      	ldr	r0, [pc, #492]	@ (80123c8 <prvHandleListen_IPV6+0x228>)
 80121dc:	f7ee ffa8 	bl	8001130 <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 80121e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80121e2:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80121e6:	683b      	ldr	r3, [r7, #0]
 80121e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80121ea:	3338      	adds	r3, #56	@ 0x38
 80121ec:	2210      	movs	r2, #16
 80121ee:	4619      	mov	r1, r3
 80121f0:	f00f fb7d 	bl	80218ee <memcmp>
 80121f4:	4603      	mov	r3, r0
 80121f6:	2b00      	cmp	r3, #0
 80121f8:	d109      	bne.n	801220e <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 80121fa:	f107 0308 	add.w	r3, r7, #8
 80121fe:	4618      	mov	r0, r3
 8012200:	f7ef f860 	bl	80012c4 <xApplicationGetRandomNumber>
 8012204:	4603      	mov	r3, r0
 8012206:	2b01      	cmp	r3, #1
 8012208:	d101      	bne.n	801220e <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 801220a:	2301      	movs	r3, #1
 801220c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 801220e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012210:	2b00      	cmp	r3, #0
 8012212:	d059      	beq.n	80122c8 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8012214:	687b      	ldr	r3, [r7, #4]
 8012216:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801221a:	f003 0308 	and.w	r3, r3, #8
 801221e:	b2db      	uxtb	r3, r3
 8012220:	2b00      	cmp	r3, #0
 8012222:	d00c      	beq.n	801223e <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8012224:	687b      	ldr	r3, [r7, #4]
 8012226:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012228:	687a      	ldr	r2, [r7, #4]
 801222a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801222e:	f043 0304 	orr.w	r3, r3, #4
 8012232:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012236:	687b      	ldr	r3, [r7, #4]
 8012238:	687a      	ldr	r2, [r7, #4]
 801223a:	67da      	str	r2, [r3, #124]	@ 0x7c
 801223c:	e044      	b.n	80122c8 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 801223e:	2300      	movs	r3, #0
 8012240:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8012242:	687b      	ldr	r3, [r7, #4]
 8012244:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8012248:	687b      	ldr	r3, [r7, #4]
 801224a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 801224e:	429a      	cmp	r2, r3
 8012250:	d31b      	bcc.n	801228a <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012256:	4619      	mov	r1, r3
 8012258:	687b      	ldr	r3, [r7, #4]
 801225a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801225e:	461a      	mov	r2, r3
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012266:	4618      	mov	r0, r3
 8012268:	687b      	ldr	r3, [r7, #4]
 801226a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801226e:	2b01      	cmp	r3, #1
 8012270:	d101      	bne.n	8012276 <prvHandleListen_IPV6+0xd6>
 8012272:	4b56      	ldr	r3, [pc, #344]	@ (80123cc <prvHandleListen_IPV6+0x22c>)
 8012274:	e000      	b.n	8012278 <prvHandleListen_IPV6+0xd8>
 8012276:	4b56      	ldr	r3, [pc, #344]	@ (80123d0 <prvHandleListen_IPV6+0x230>)
 8012278:	9300      	str	r3, [sp, #0]
 801227a:	4603      	mov	r3, r0
 801227c:	4855      	ldr	r0, [pc, #340]	@ (80123d4 <prvHandleListen_IPV6+0x234>)
 801227e:	f00e f985 	bl	802058c <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012282:	6838      	ldr	r0, [r7, #0]
 8012284:	f001 f8a8 	bl	80133d8 <prvTCPSendReset>
 8012288:	e01e      	b.n	80122c8 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 801228a:	2206      	movs	r2, #6
 801228c:	2101      	movs	r1, #1
 801228e:	200a      	movs	r0, #10
 8012290:	f7fa ff96 	bl	800d1c0 <FreeRTOS_socket>
 8012294:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8012296:	69bb      	ldr	r3, [r7, #24]
 8012298:	2b00      	cmp	r3, #0
 801229a:	d003      	beq.n	80122a4 <prvHandleListen_IPV6+0x104>
 801229c:	69bb      	ldr	r3, [r7, #24]
 801229e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80122a2:	d106      	bne.n	80122b2 <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 80122a4:	484c      	ldr	r0, [pc, #304]	@ (80123d8 <prvHandleListen_IPV6+0x238>)
 80122a6:	f00e f971 	bl	802058c <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80122aa:	6838      	ldr	r0, [r7, #0]
 80122ac:	f001 f894 	bl	80133d8 <prvTCPSendReset>
 80122b0:	e00a      	b.n	80122c8 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 80122b2:	6879      	ldr	r1, [r7, #4]
 80122b4:	69b8      	ldr	r0, [r7, #24]
 80122b6:	f7ff fd6b 	bl	8011d90 <prvTCPSocketCopy>
 80122ba:	4603      	mov	r3, r0
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d003      	beq.n	80122c8 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 80122c0:	69bb      	ldr	r3, [r7, #24]
 80122c2:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 80122c4:	2301      	movs	r3, #1
 80122c6:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 80122c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	d076      	beq.n	80123bc <prvHandleListen_IPV6+0x21c>
 80122ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122d0:	2b00      	cmp	r3, #0
 80122d2:	d073      	beq.n	80123bc <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80122d4:	683b      	ldr	r3, [r7, #0]
 80122d6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80122d8:	6838      	ldr	r0, [r7, #0]
 80122da:	f7f6 fe5d 	bl	8008f98 <uxIPHeaderSizePacket>
 80122de:	4603      	mov	r3, r0
 80122e0:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80122e2:	4423      	add	r3, r4
 80122e4:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80122e6:	683b      	ldr	r3, [r7, #0]
 80122e8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80122ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80122ec:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 80122ee:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80122f0:	7a13      	ldrb	r3, [r2, #8]
 80122f2:	f043 0301 	orr.w	r3, r3, #1
 80122f6:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80122f8:	683b      	ldr	r3, [r7, #0]
 80122fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80122fc:	330e      	adds	r3, #14
 80122fe:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 8012300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012302:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012304:	b29b      	uxth	r3, r3
 8012306:	021b      	lsls	r3, r3, #8
 8012308:	b21a      	sxth	r2, r3
 801230a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801230c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801230e:	b29b      	uxth	r3, r3
 8012310:	0a1b      	lsrs	r3, r3, #8
 8012312:	b29b      	uxth	r3, r3
 8012314:	b21b      	sxth	r3, r3
 8012316:	4313      	orrs	r3, r2
 8012318:	b21b      	sxth	r3, r3
 801231a:	b29a      	uxth	r2, r3
 801231c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801231e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8012322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012324:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8012328:	693b      	ldr	r3, [r7, #16]
 801232a:	3308      	adds	r3, #8
 801232c:	2210      	movs	r2, #16
 801232e:	4619      	mov	r1, r3
 8012330:	f00e fb48 	bl	80209c4 <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8012334:	68ba      	ldr	r2, [r7, #8]
 8012336:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012338:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 801233c:	697b      	ldr	r3, [r7, #20]
 801233e:	685b      	ldr	r3, [r3, #4]
 8012340:	061a      	lsls	r2, r3, #24
 8012342:	697b      	ldr	r3, [r7, #20]
 8012344:	685b      	ldr	r3, [r3, #4]
 8012346:	021b      	lsls	r3, r3, #8
 8012348:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801234c:	431a      	orrs	r2, r3
 801234e:	697b      	ldr	r3, [r7, #20]
 8012350:	685b      	ldr	r3, [r3, #4]
 8012352:	0a1b      	lsrs	r3, r3, #8
 8012354:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012358:	431a      	orrs	r2, r3
 801235a:	697b      	ldr	r3, [r7, #20]
 801235c:	685b      	ldr	r3, [r3, #4]
 801235e:	0e1b      	lsrs	r3, r3, #24
 8012360:	431a      	orrs	r2, r3
 8012362:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012364:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8012368:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801236a:	f001 ff5b 	bl	8014224 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 801236e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012370:	f000 fa4a 	bl	8012808 <prvTCPCreateWindow>
 8012374:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 8012376:	68fb      	ldr	r3, [r7, #12]
 8012378:	2b01      	cmp	r3, #1
 801237a:	d008      	beq.n	801238e <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 801237c:	6a3b      	ldr	r3, [r7, #32]
 801237e:	2b01      	cmp	r3, #1
 8012380:	d102      	bne.n	8012388 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 8012382:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012384:	f7fb fb2a 	bl	800d9dc <vSocketClose>
                }

                pxReturn = NULL;
 8012388:	2300      	movs	r3, #0
 801238a:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 801238c:	e016      	b.n	80123bc <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 801238e:	2103      	movs	r1, #3
 8012390:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012392:	f7fd fead 	bl	80100f0 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 8012396:	683b      	ldr	r3, [r7, #0]
 8012398:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801239a:	2b5a      	cmp	r3, #90	@ 0x5a
 801239c:	d902      	bls.n	80123a4 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 801239e:	235a      	movs	r3, #90	@ 0x5a
 80123a0:	61fb      	str	r3, [r7, #28]
 80123a2:	e002      	b.n	80123aa <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 80123a4:	683b      	ldr	r3, [r7, #0]
 80123a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80123a8:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80123aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123ac:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 80123b0:	683b      	ldr	r3, [r7, #0]
 80123b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80123b4:	69fa      	ldr	r2, [r7, #28]
 80123b6:	4619      	mov	r1, r3
 80123b8:	f00e fb04 	bl	80209c4 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 80123bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80123be:	4618      	mov	r0, r3
 80123c0:	3734      	adds	r7, #52	@ 0x34
 80123c2:	46bd      	mov	sp, r7
 80123c4:	bd90      	pop	{r4, r7, pc}
 80123c6:	bf00      	nop
 80123c8:	08024afc 	.word	0x08024afc
 80123cc:	08024b3c 	.word	0x08024b3c
 80123d0:	08024b40 	.word	0x08024b40
 80123d4:	08024b44 	.word	0x08024b44
 80123d8:	08024b74 	.word	0x08024b74

080123dc <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 80123dc:	b580      	push	{r7, lr}
 80123de:	b084      	sub	sp, #16
 80123e0:	af00      	add	r7, sp, #0
 80123e2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 80123e4:	2301      	movs	r3, #1
 80123e6:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 80123e8:	687b      	ldr	r3, [r7, #4]
 80123ea:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80123ee:	f003 0308 	and.w	r3, r3, #8
 80123f2:	b2db      	uxtb	r3, r3
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d107      	bne.n	8012408 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 80123f8:	6878      	ldr	r0, [r7, #4]
 80123fa:	f000 fa51 	bl	80128a0 <prvTCPPrepareConnect>
 80123fe:	4603      	mov	r3, r0
 8012400:	2b01      	cmp	r3, #1
 8012402:	d001      	beq.n	8012408 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 8012404:	2300      	movs	r3, #0
 8012406:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8012408:	68fb      	ldr	r3, [r7, #12]
    }
 801240a:	4618      	mov	r0, r3
 801240c:	3710      	adds	r7, #16
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}
	...

08012414 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 8012414:	b580      	push	{r7, lr}
 8012416:	b088      	sub	sp, #32
 8012418:	af00      	add	r7, sp, #0
 801241a:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 801241c:	2300      	movs	r3, #0
 801241e:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 8012420:	2300      	movs	r3, #0
 8012422:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8012424:	687b      	ldr	r3, [r7, #4]
 8012426:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801242a:	2b02      	cmp	r3, #2
 801242c:	d010      	beq.n	8012450 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 801242e:	2300      	movs	r3, #0
 8012430:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8012432:	f107 030c 	add.w	r3, r7, #12
 8012436:	4619      	mov	r1, r3
 8012438:	6878      	ldr	r0, [r7, #4]
 801243a:	f000 f859 	bl	80124f0 <prvTCPSendRepeated>
 801243e:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 8012440:	68fb      	ldr	r3, [r7, #12]
 8012442:	2b00      	cmp	r3, #0
 8012444:	d04d      	beq.n	80124e2 <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012446:	68fb      	ldr	r3, [r7, #12]
 8012448:	4618      	mov	r0, r3
 801244a:	f003 ffb5 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
 801244e:	e048      	b.n	80124e2 <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8012456:	2b02      	cmp	r3, #2
 8012458:	d90d      	bls.n	8012476 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801245e:	687b      	ldr	r3, [r7, #4]
 8012460:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012464:	461a      	mov	r2, r3
 8012466:	4821      	ldr	r0, [pc, #132]	@ (80124ec <prvTCPSendPacket+0xd8>)
 8012468:	f00e f890 	bl	802058c <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 801246c:	2108      	movs	r1, #8
 801246e:	6878      	ldr	r0, [r7, #4]
 8012470:	f7fd fe3e 	bl	80100f0 <vTCPStateChange>
 8012474:	e035      	b.n	80124e2 <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 8012476:	6878      	ldr	r0, [r7, #4]
 8012478:	f7ff ffb0 	bl	80123dc <prvTCPMakeSurePrepared>
 801247c:	4603      	mov	r3, r0
 801247e:	2b01      	cmp	r3, #1
 8012480:	d12f      	bne.n	80124e2 <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012482:	6878      	ldr	r0, [r7, #4]
 8012484:	f7f6 fda2 	bl	8008fcc <uxIPHeaderSizeSocket>
 8012488:	4603      	mov	r3, r0
 801248a:	330e      	adds	r3, #14
 801248c:	33a0      	adds	r3, #160	@ 0xa0
 801248e:	687a      	ldr	r2, [r7, #4]
 8012490:	4413      	add	r3, r2
 8012492:	330a      	adds	r3, #10
 8012494:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 8012496:	697b      	ldr	r3, [r7, #20]
 8012498:	4619      	mov	r1, r3
 801249a:	6878      	ldr	r0, [r7, #4]
 801249c:	f000 fa4c 	bl	8012938 <prvSetSynAckOptions>
 80124a0:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80124a2:	6878      	ldr	r0, [r7, #4]
 80124a4:	f7f6 fd92 	bl	8008fcc <uxIPHeaderSizeSocket>
 80124a8:	4602      	mov	r2, r0
 80124aa:	693b      	ldr	r3, [r7, #16]
 80124ac:	4413      	add	r3, r2
 80124ae:	3314      	adds	r3, #20
 80124b0:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 80124b2:	69bb      	ldr	r3, [r7, #24]
 80124b4:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80124b6:	693b      	ldr	r3, [r7, #16]
 80124b8:	b2db      	uxtb	r3, r3
 80124ba:	3314      	adds	r3, #20
 80124bc:	b2db      	uxtb	r3, r3
 80124be:	009b      	lsls	r3, r3, #2
 80124c0:	b2da      	uxtb	r2, r3
 80124c2:	697b      	ldr	r3, [r7, #20]
 80124c4:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 80124c6:	687b      	ldr	r3, [r7, #4]
 80124c8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80124cc:	3301      	adds	r3, #1
 80124ce:	b2da      	uxtb	r2, r3
 80124d0:	687b      	ldr	r3, [r7, #4]
 80124d2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 80124d6:	69fa      	ldr	r2, [r7, #28]
 80124d8:	2300      	movs	r3, #0
 80124da:	2100      	movs	r1, #0
 80124dc:	6878      	ldr	r0, [r7, #4]
 80124de:	f000 f837 	bl	8012550 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 80124e2:	69fb      	ldr	r3, [r7, #28]
    }
 80124e4:	4618      	mov	r0, r3
 80124e6:	3720      	adds	r7, #32
 80124e8:	46bd      	mov	sp, r7
 80124ea:	bd80      	pop	{r7, pc}
 80124ec:	08024b94 	.word	0x08024b94

080124f0 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 80124f0:	b580      	push	{r7, lr}
 80124f2:	b086      	sub	sp, #24
 80124f4:	af00      	add	r7, sp, #0
 80124f6:	6078      	str	r0, [r7, #4]
 80124f8:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 80124fa:	2300      	movs	r3, #0
 80124fc:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 80124fe:	2300      	movs	r3, #0
 8012500:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8012502:	2300      	movs	r3, #0
 8012504:	617b      	str	r3, [r7, #20]
 8012506:	e019      	b.n	801253c <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8012508:	68fa      	ldr	r2, [r7, #12]
 801250a:	6839      	ldr	r1, [r7, #0]
 801250c:	6878      	ldr	r0, [r7, #4]
 801250e:	f000 fb7d 	bl	8012c0c <prvTCPPrepareSend>
 8012512:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 8012514:	68bb      	ldr	r3, [r7, #8]
 8012516:	2b00      	cmp	r3, #0
 8012518:	dd14      	ble.n	8012544 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 801251a:	683b      	ldr	r3, [r7, #0]
 801251c:	6819      	ldr	r1, [r3, #0]
 801251e:	68ba      	ldr	r2, [r7, #8]
 8012520:	2301      	movs	r3, #1
 8012522:	6878      	ldr	r0, [r7, #4]
 8012524:	f000 f814 	bl	8012550 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 8012528:	683b      	ldr	r3, [r7, #0]
 801252a:	2200      	movs	r2, #0
 801252c:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 801252e:	693a      	ldr	r2, [r7, #16]
 8012530:	68bb      	ldr	r3, [r7, #8]
 8012532:	4413      	add	r3, r2
 8012534:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8012536:	697b      	ldr	r3, [r7, #20]
 8012538:	3301      	adds	r3, #1
 801253a:	617b      	str	r3, [r7, #20]
 801253c:	697b      	ldr	r3, [r7, #20]
 801253e:	2b07      	cmp	r3, #7
 8012540:	d9e2      	bls.n	8012508 <prvTCPSendRepeated+0x18>
 8012542:	e000      	b.n	8012546 <prvTCPSendRepeated+0x56>
                break;
 8012544:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8012546:	693b      	ldr	r3, [r7, #16]
    }
 8012548:	4618      	mov	r0, r3
 801254a:	3718      	adds	r7, #24
 801254c:	46bd      	mov	sp, r7
 801254e:	bd80      	pop	{r7, pc}

08012550 <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8012550:	b580      	push	{r7, lr}
 8012552:	b086      	sub	sp, #24
 8012554:	af00      	add	r7, sp, #0
 8012556:	60f8      	str	r0, [r7, #12]
 8012558:	60b9      	str	r1, [r7, #8]
 801255a:	607a      	str	r2, [r7, #4]
 801255c:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 801255e:	68bb      	ldr	r3, [r7, #8]
 8012560:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 8012562:	2300      	movs	r3, #0
 8012564:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 8012566:	693b      	ldr	r3, [r7, #16]
 8012568:	2b00      	cmp	r3, #0
 801256a:	d008      	beq.n	801257e <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 801256c:	6938      	ldr	r0, [r7, #16]
 801256e:	f7f6 fd13 	bl	8008f98 <uxIPHeaderSizePacket>
 8012572:	4603      	mov	r3, r0
 8012574:	2b28      	cmp	r3, #40	@ 0x28
 8012576:	d113      	bne.n	80125a0 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8012578:	2301      	movs	r3, #1
 801257a:	617b      	str	r3, [r7, #20]
 801257c:	e010      	b.n	80125a0 <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 801257e:	68fb      	ldr	r3, [r7, #12]
 8012580:	2b00      	cmp	r3, #0
 8012582:	d008      	beq.n	8012596 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 8012584:	68f8      	ldr	r0, [r7, #12]
 8012586:	f7f6 fd21 	bl	8008fcc <uxIPHeaderSizeSocket>
 801258a:	4603      	mov	r3, r0
 801258c:	2b28      	cmp	r3, #40	@ 0x28
 801258e:	d107      	bne.n	80125a0 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8012590:	2301      	movs	r3, #1
 8012592:	617b      	str	r3, [r7, #20]
 8012594:	e004      	b.n	80125a0 <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 8012596:	f240 1119 	movw	r1, #281	@ 0x119
 801259a:	480c      	ldr	r0, [pc, #48]	@ (80125cc <prvTCPReturnPacket+0x7c>)
 801259c:	f7ee fdc8 	bl	8001130 <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 80125a0:	697b      	ldr	r3, [r7, #20]
 80125a2:	2b01      	cmp	r3, #1
 80125a4:	d105      	bne.n	80125b2 <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 80125a6:	683b      	ldr	r3, [r7, #0]
 80125a8:	687a      	ldr	r2, [r7, #4]
 80125aa:	68b9      	ldr	r1, [r7, #8]
 80125ac:	68f8      	ldr	r0, [r7, #12]
 80125ae:	f001 fa61 	bl	8013a74 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 80125b2:	697b      	ldr	r3, [r7, #20]
 80125b4:	2b00      	cmp	r3, #0
 80125b6:	d105      	bne.n	80125c4 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	687a      	ldr	r2, [r7, #4]
 80125bc:	68b9      	ldr	r1, [r7, #8]
 80125be:	68f8      	ldr	r0, [r7, #12]
 80125c0:	f000 ff18 	bl	80133f4 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 80125c4:	bf00      	nop
 80125c6:	3718      	adds	r7, #24
 80125c8:	46bd      	mov	sp, r7
 80125ca:	bd80      	pop	{r7, pc}
 80125cc:	08024bb0 	.word	0x08024bb0

080125d0 <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 80125d0:	b580      	push	{r7, lr}
 80125d2:	b08a      	sub	sp, #40	@ 0x28
 80125d4:	af00      	add	r7, sp, #0
 80125d6:	60f8      	str	r0, [r7, #12]
 80125d8:	60b9      	str	r1, [r7, #8]
 80125da:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80125dc:	68fb      	ldr	r3, [r7, #12]
 80125de:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80125e2:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 80125e4:	68bb      	ldr	r3, [r7, #8]
 80125e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80125ec:	4413      	add	r3, r2
 80125ee:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 80125f0:	68fb      	ldr	r3, [r7, #12]
 80125f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80125f6:	2b00      	cmp	r3, #0
 80125f8:	d007      	beq.n	801260a <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 80125fa:	68fb      	ldr	r3, [r7, #12]
 80125fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012600:	4618      	mov	r0, r3
 8012602:	f7fd fa9f 	bl	800fb44 <uxStreamBufferFrontSpace>
 8012606:	6278      	str	r0, [r7, #36]	@ 0x24
 8012608:	e003      	b.n	8012612 <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 801260a:	68fb      	ldr	r3, [r7, #12]
 801260c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012610:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8012612:	69bb      	ldr	r3, [r7, #24]
 8012614:	685b      	ldr	r3, [r3, #4]
 8012616:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012618:	4618      	mov	r0, r3
 801261a:	f7f7 fa0b 	bl	8009a34 <FreeRTOS_min_uint32>
 801261e:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8012620:	68fb      	ldr	r3, [r7, #12]
 8012622:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012626:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 801262a:	b2db      	uxtb	r3, r3
 801262c:	2b00      	cmp	r3, #0
 801262e:	d107      	bne.n	8012640 <prvTCPReturn_CheckTCPWindow+0x70>
 8012630:	68fb      	ldr	r3, [r7, #12]
 8012632:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012636:	f003 0304 	and.w	r3, r3, #4
 801263a:	b2db      	uxtb	r3, r3
 801263c:	2b00      	cmp	r3, #0
 801263e:	d001      	beq.n	8012644 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 8012640:	2300      	movs	r3, #0
 8012642:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 8012644:	68fb      	ldr	r3, [r7, #12]
 8012646:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801264a:	461a      	mov	r2, r3
 801264c:	6a3b      	ldr	r3, [r7, #32]
 801264e:	4293      	cmp	r3, r2
 8012650:	d20a      	bcs.n	8012668 <prvTCPReturn_CheckTCPWindow+0x98>
 8012652:	68fb      	ldr	r3, [r7, #12]
 8012654:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012658:	461a      	mov	r2, r3
 801265a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801265c:	4293      	cmp	r3, r2
 801265e:	d303      	bcc.n	8012668 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 8012660:	68fb      	ldr	r3, [r7, #12]
 8012662:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012666:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8012668:	68fb      	ldr	r3, [r7, #12]
 801266a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 801266e:	461a      	mov	r2, r3
 8012670:	6a3b      	ldr	r3, [r7, #32]
 8012672:	40d3      	lsrs	r3, r2
 8012674:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8012676:	69fb      	ldr	r3, [r7, #28]
 8012678:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 801267c:	4293      	cmp	r3, r2
 801267e:	d902      	bls.n	8012686 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 8012680:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8012684:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8012686:	69fb      	ldr	r3, [r7, #28]
 8012688:	b29b      	uxth	r3, r3
 801268a:	021b      	lsls	r3, r3, #8
 801268c:	b21a      	sxth	r2, r3
 801268e:	69fb      	ldr	r3, [r7, #28]
 8012690:	b29b      	uxth	r3, r3
 8012692:	0a1b      	lsrs	r3, r3, #8
 8012694:	b29b      	uxth	r3, r3
 8012696:	b21b      	sxth	r3, r3
 8012698:	4313      	orrs	r3, r2
 801269a:	b21b      	sxth	r3, r3
 801269c:	b29a      	uxth	r2, r3
 801269e:	697b      	ldr	r3, [r7, #20]
 80126a0:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 80126a2:	68fa      	ldr	r2, [r7, #12]
 80126a4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80126a8:	f36f 0300 	bfc	r3, #0, #1
 80126ac:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 80126b0:	69bb      	ldr	r3, [r7, #24]
 80126b2:	691a      	ldr	r2, [r3, #16]
 80126b4:	6a3b      	ldr	r3, [r7, #32]
 80126b6:	441a      	add	r2, r3
 80126b8:	68fb      	ldr	r3, [r7, #12]
 80126ba:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 80126bc:	bf00      	nop
 80126be:	3728      	adds	r7, #40	@ 0x28
 80126c0:	46bd      	mov	sp, r7
 80126c2:	bd80      	pop	{r7, pc}

080126c4 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 80126c4:	b580      	push	{r7, lr}
 80126c6:	b088      	sub	sp, #32
 80126c8:	af00      	add	r7, sp, #0
 80126ca:	60f8      	str	r0, [r7, #12]
 80126cc:	60b9      	str	r1, [r7, #8]
 80126ce:	607a      	str	r2, [r7, #4]
 80126d0:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80126d2:	68fb      	ldr	r3, [r7, #12]
 80126d4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80126d8:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 80126da:	68bb      	ldr	r3, [r7, #8]
 80126dc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80126de:	687b      	ldr	r3, [r7, #4]
 80126e0:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80126e2:	4413      	add	r3, r2
 80126e4:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 80126e6:	68fb      	ldr	r3, [r7, #12]
 80126e8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80126ec:	f003 0302 	and.w	r3, r3, #2
 80126f0:	b2db      	uxtb	r3, r3
 80126f2:	2b00      	cmp	r3, #0
 80126f4:	d029      	beq.n	801274a <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 80126f6:	68fa      	ldr	r2, [r7, #12]
 80126f8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80126fc:	f36f 0341 	bfc	r3, #1, #1
 8012700:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8012704:	68fa      	ldr	r2, [r7, #12]
 8012706:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801270a:	f043 0304 	orr.w	r3, r3, #4
 801270e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012718:	1e5a      	subs	r2, r3, #1
 801271a:	69bb      	ldr	r3, [r7, #24]
 801271c:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 801271e:	69bb      	ldr	r3, [r7, #24]
 8012720:	685b      	ldr	r3, [r3, #4]
 8012722:	061a      	lsls	r2, r3, #24
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	685b      	ldr	r3, [r3, #4]
 8012728:	021b      	lsls	r3, r3, #8
 801272a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801272e:	431a      	orrs	r2, r3
 8012730:	69bb      	ldr	r3, [r7, #24]
 8012732:	685b      	ldr	r3, [r3, #4]
 8012734:	0a1b      	lsrs	r3, r3, #8
 8012736:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801273a:	431a      	orrs	r2, r3
 801273c:	69bb      	ldr	r3, [r7, #24]
 801273e:	685b      	ldr	r3, [r3, #4]
 8012740:	0e1b      	lsrs	r3, r3, #24
 8012742:	431a      	orrs	r2, r3
 8012744:	69bb      	ldr	r3, [r7, #24]
 8012746:	605a      	str	r2, [r3, #4]
 8012748:	e043      	b.n	80127d2 <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012750:	061a      	lsls	r2, r3, #24
 8012752:	68fb      	ldr	r3, [r7, #12]
 8012754:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012758:	021b      	lsls	r3, r3, #8
 801275a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801275e:	431a      	orrs	r2, r3
 8012760:	68fb      	ldr	r3, [r7, #12]
 8012762:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012766:	0a1b      	lsrs	r3, r3, #8
 8012768:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801276c:	431a      	orrs	r2, r3
 801276e:	68fb      	ldr	r3, [r7, #12]
 8012770:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012774:	0e1b      	lsrs	r3, r3, #24
 8012776:	431a      	orrs	r2, r3
 8012778:	69bb      	ldr	r3, [r7, #24]
 801277a:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 801277c:	69bb      	ldr	r3, [r7, #24]
 801277e:	7b5b      	ldrb	r3, [r3, #13]
 8012780:	f003 0301 	and.w	r3, r3, #1
 8012784:	2b00      	cmp	r3, #0
 8012786:	d024      	beq.n	80127d2 <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 8012788:	68f8      	ldr	r0, [r7, #12]
 801278a:	f7f6 fc1f 	bl	8008fcc <uxIPHeaderSizeSocket>
 801278e:	4602      	mov	r2, r0
 8012790:	683b      	ldr	r3, [r7, #0]
 8012792:	1a9b      	subs	r3, r3, r2
 8012794:	3b14      	subs	r3, #20
 8012796:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8012798:	69fb      	ldr	r3, [r7, #28]
 801279a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801279c:	697b      	ldr	r3, [r7, #20]
 801279e:	441a      	add	r2, r3
 80127a0:	69fb      	ldr	r3, [r7, #28]
 80127a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80127a4:	429a      	cmp	r2, r3
 80127a6:	d014      	beq.n	80127d2 <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 80127a8:	69bb      	ldr	r3, [r7, #24]
 80127aa:	7b5b      	ldrb	r3, [r3, #13]
 80127ac:	f023 0301 	bic.w	r3, r3, #1
 80127b0:	b2da      	uxtb	r2, r3
 80127b2:	69bb      	ldr	r3, [r7, #24]
 80127b4:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 80127b6:	69fb      	ldr	r3, [r7, #28]
 80127b8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80127ba:	69fb      	ldr	r3, [r7, #28]
 80127bc:	69db      	ldr	r3, [r3, #28]
 80127be:	1ad1      	subs	r1, r2, r3
 80127c0:	69fb      	ldr	r3, [r7, #28]
 80127c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80127c4:	69fb      	ldr	r3, [r7, #28]
 80127c6:	69db      	ldr	r3, [r3, #28]
 80127c8:	1ad3      	subs	r3, r2, r3
 80127ca:	697a      	ldr	r2, [r7, #20]
 80127cc:	480d      	ldr	r0, [pc, #52]	@ (8012804 <prvTCPReturn_SetSequenceNumber+0x140>)
 80127ce:	f00d fedd 	bl	802058c <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 80127d2:	69fb      	ldr	r3, [r7, #28]
 80127d4:	691b      	ldr	r3, [r3, #16]
 80127d6:	061a      	lsls	r2, r3, #24
 80127d8:	69fb      	ldr	r3, [r7, #28]
 80127da:	691b      	ldr	r3, [r3, #16]
 80127dc:	021b      	lsls	r3, r3, #8
 80127de:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80127e2:	431a      	orrs	r2, r3
 80127e4:	69fb      	ldr	r3, [r7, #28]
 80127e6:	691b      	ldr	r3, [r3, #16]
 80127e8:	0a1b      	lsrs	r3, r3, #8
 80127ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80127ee:	431a      	orrs	r2, r3
 80127f0:	69fb      	ldr	r3, [r7, #28]
 80127f2:	691b      	ldr	r3, [r3, #16]
 80127f4:	0e1b      	lsrs	r3, r3, #24
 80127f6:	431a      	orrs	r2, r3
 80127f8:	69bb      	ldr	r3, [r7, #24]
 80127fa:	609a      	str	r2, [r3, #8]
    }
 80127fc:	bf00      	nop
 80127fe:	3720      	adds	r7, #32
 8012800:	46bd      	mov	sp, r7
 8012802:	bd80      	pop	{r7, pc}
 8012804:	08024bec 	.word	0x08024bec

08012808 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 8012808:	b5b0      	push	{r4, r5, r7, lr}
 801280a:	b088      	sub	sp, #32
 801280c:	af02      	add	r7, sp, #8
 801280e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8012816:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 8012818:	687b      	ldr	r3, [r7, #4]
 801281a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 801281e:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 8012820:	4b1d      	ldr	r3, [pc, #116]	@ (8012898 <prvTCPCreateWindow+0x90>)
 8012822:	681b      	ldr	r3, [r3, #0]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d014      	beq.n	8012852 <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8012828:	687b      	ldr	r3, [r7, #4]
 801282a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 801282e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8012832:	fb02 f103 	mul.w	r1, r2, r3
 8012836:	687b      	ldr	r3, [r7, #4]
 8012838:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 801283c:	687b      	ldr	r3, [r7, #4]
 801283e:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8012842:	687b      	ldr	r3, [r7, #4]
 8012844:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012848:	9300      	str	r3, [sp, #0]
 801284a:	4603      	mov	r3, r0
 801284c:	4813      	ldr	r0, [pc, #76]	@ (801289c <prvTCPCreateWindow+0x94>)
 801284e:	f00d fe9d 	bl	802058c <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8012858:	697b      	ldr	r3, [r7, #20]
 801285a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 801285e:	fb02 f103 	mul.w	r1, r2, r3
 8012862:	693b      	ldr	r3, [r7, #16]
 8012864:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8012868:	fb02 f403 	mul.w	r4, r2, r3
 801286c:	687b      	ldr	r3, [r7, #4]
 801286e:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8012878:	687a      	ldr	r2, [r7, #4]
 801287a:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 801287e:	9201      	str	r2, [sp, #4]
 8012880:	9300      	str	r3, [sp, #0]
 8012882:	462b      	mov	r3, r5
 8012884:	4622      	mov	r2, r4
 8012886:	f001 ffd7 	bl	8014838 <xTCPWindowCreate>
 801288a:	60f8      	str	r0, [r7, #12]

        return xReturn;
 801288c:	68fb      	ldr	r3, [r7, #12]
    }
 801288e:	4618      	mov	r0, r3
 8012890:	3718      	adds	r7, #24
 8012892:	46bd      	mov	sp, r7
 8012894:	bdb0      	pop	{r4, r5, r7, pc}
 8012896:	bf00      	nop
 8012898:	200012f4 	.word	0x200012f4
 801289c:	08024c0c 	.word	0x08024c0c

080128a0 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 80128a0:	b580      	push	{r7, lr}
 80128a2:	b084      	sub	sp, #16
 80128a4:	af00      	add	r7, sp, #0
 80128a6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 80128a8:	2301      	movs	r3, #1
 80128aa:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	7a1b      	ldrb	r3, [r3, #8]
 80128b0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80128b4:	b2db      	uxtb	r3, r3
 80128b6:	2b00      	cmp	r3, #0
 80128b8:	d002      	beq.n	80128c0 <prvTCPPrepareConnect+0x20>
 80128ba:	2b01      	cmp	r3, #1
 80128bc:	d005      	beq.n	80128ca <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 80128be:	e009      	b.n	80128d4 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 80128c0:	6878      	ldr	r0, [r7, #4]
 80128c2:	f000 ff69 	bl	8013798 <prvTCPPrepareConnect_IPV4>
 80128c6:	60f8      	str	r0, [r7, #12]
                    break;
 80128c8:	e004      	b.n	80128d4 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 80128ca:	6878      	ldr	r0, [r7, #4]
 80128cc:	f001 fab4 	bl	8013e38 <prvTCPPrepareConnect_IPV6>
 80128d0:	60f8      	str	r0, [r7, #12]
                    break;
 80128d2:	bf00      	nop
        }

        return xReturn;
 80128d4:	68fb      	ldr	r3, [r7, #12]
    }
 80128d6:	4618      	mov	r0, r3
 80128d8:	3710      	adds	r7, #16
 80128da:	46bd      	mov	sp, r7
 80128dc:	bd80      	pop	{r7, pc}
	...

080128e0 <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 80128e0:	b580      	push	{r7, lr}
 80128e2:	b084      	sub	sp, #16
 80128e4:	af00      	add	r7, sp, #0
 80128e6:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 80128e8:	687b      	ldr	r3, [r7, #4]
 80128ea:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 80128ee:	687a      	ldr	r2, [r7, #4]
 80128f0:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 80128f4:	fb02 f303 	mul.w	r3, r2, r3
 80128f8:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 80128fa:	2300      	movs	r3, #0
 80128fc:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 80128fe:	e005      	b.n	801290c <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 8012900:	68fb      	ldr	r3, [r7, #12]
 8012902:	085b      	lsrs	r3, r3, #1
 8012904:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 8012906:	7afb      	ldrb	r3, [r7, #11]
 8012908:	3301      	adds	r3, #1
 801290a:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 801290c:	68fb      	ldr	r3, [r7, #12]
 801290e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012912:	d2f5      	bcs.n	8012900 <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012920:	461a      	mov	r2, r3
 8012922:	7afb      	ldrb	r3, [r7, #11]
 8012924:	4803      	ldr	r0, [pc, #12]	@ (8012934 <prvWinScaleFactor+0x54>)
 8012926:	f00d fe31 	bl	802058c <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 801292a:	7afb      	ldrb	r3, [r7, #11]
        }
 801292c:	4618      	mov	r0, r3
 801292e:	3710      	adds	r7, #16
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}
 8012934:	08024c44 	.word	0x08024c44

08012938 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 8012938:	b580      	push	{r7, lr}
 801293a:	b084      	sub	sp, #16
 801293c:	af00      	add	r7, sp, #0
 801293e:	6078      	str	r0, [r7, #4]
 8012940:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 8012942:	687b      	ldr	r3, [r7, #4]
 8012944:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012948:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 801294a:	683b      	ldr	r3, [r7, #0]
 801294c:	2202      	movs	r2, #2
 801294e:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 8012950:	683b      	ldr	r3, [r7, #0]
 8012952:	2204      	movs	r2, #4
 8012954:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8012956:	89fb      	ldrh	r3, [r7, #14]
 8012958:	0a1b      	lsrs	r3, r3, #8
 801295a:	b29b      	uxth	r3, r3
 801295c:	b2da      	uxtb	r2, r3
 801295e:	683b      	ldr	r3, [r7, #0]
 8012960:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 8012962:	89fb      	ldrh	r3, [r7, #14]
 8012964:	b2da      	uxtb	r2, r3
 8012966:	683b      	ldr	r3, [r7, #0]
 8012968:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 801296a:	6878      	ldr	r0, [r7, #4]
 801296c:	f7ff ffb8 	bl	80128e0 <prvWinScaleFactor>
 8012970:	4603      	mov	r3, r0
 8012972:	461a      	mov	r2, r3
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 801297a:	683b      	ldr	r3, [r7, #0]
 801297c:	2201      	movs	r2, #1
 801297e:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 8012980:	683b      	ldr	r3, [r7, #0]
 8012982:	2203      	movs	r2, #3
 8012984:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8012986:	683b      	ldr	r3, [r7, #0]
 8012988:	2203      	movs	r2, #3
 801298a:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8012992:	683b      	ldr	r3, [r7, #0]
 8012994:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 8012996:	2308      	movs	r3, #8
 8012998:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 801299a:	683a      	ldr	r2, [r7, #0]
 801299c:	68bb      	ldr	r3, [r7, #8]
 801299e:	4413      	add	r3, r2
 80129a0:	3314      	adds	r3, #20
 80129a2:	2201      	movs	r2, #1
 80129a4:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 80129a6:	68bb      	ldr	r3, [r7, #8]
 80129a8:	3301      	adds	r3, #1
 80129aa:	683a      	ldr	r2, [r7, #0]
 80129ac:	4413      	add	r3, r2
 80129ae:	2201      	movs	r2, #1
 80129b0:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 80129b2:	68bb      	ldr	r3, [r7, #8]
 80129b4:	3302      	adds	r3, #2
 80129b6:	683a      	ldr	r2, [r7, #0]
 80129b8:	4413      	add	r3, r2
 80129ba:	2204      	movs	r2, #4
 80129bc:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	3303      	adds	r3, #3
 80129c2:	683a      	ldr	r2, [r7, #0]
 80129c4:	4413      	add	r3, r2
 80129c6:	2202      	movs	r2, #2
 80129c8:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 80129ca:	68bb      	ldr	r3, [r7, #8]
 80129cc:	3304      	adds	r3, #4
 80129ce:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 80129d0:	68bb      	ldr	r3, [r7, #8]
    }
 80129d2:	4618      	mov	r0, r3
 80129d4:	3710      	adds	r7, #16
 80129d6:	46bd      	mov	sp, r7
 80129d8:	bd80      	pop	{r7, pc}
	...

080129dc <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 80129dc:	b580      	push	{r7, lr}
 80129de:	b088      	sub	sp, #32
 80129e0:	af00      	add	r7, sp, #0
 80129e2:	60f8      	str	r0, [r7, #12]
 80129e4:	60b9      	str	r1, [r7, #8]
 80129e6:	607a      	str	r2, [r7, #4]
 80129e8:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 80129ea:	4b38      	ldr	r3, [pc, #224]	@ (8012acc <prvTCPBufferResize+0xf0>)
 80129ec:	681b      	ldr	r3, [r3, #0]
 80129ee:	2b00      	cmp	r3, #0
 80129f0:	d00b      	beq.n	8012a0a <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 80129f2:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 80129f6:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 80129f8:	68bb      	ldr	r3, [r7, #8]
 80129fa:	2b00      	cmp	r3, #0
 80129fc:	d102      	bne.n	8012a04 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 80129fe:	2301      	movs	r3, #1
 8012a00:	617b      	str	r3, [r7, #20]
 8012a02:	e020      	b.n	8012a46 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8012a04:	2300      	movs	r3, #0
 8012a06:	617b      	str	r3, [r7, #20]
 8012a08:	e01d      	b.n	8012a46 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012a0a:	68f8      	ldr	r0, [r7, #12]
 8012a0c:	f7f6 fade 	bl	8008fcc <uxIPHeaderSizeSocket>
 8012a10:	4602      	mov	r2, r0
 8012a12:	683b      	ldr	r3, [r7, #0]
 8012a14:	4413      	add	r3, r2
 8012a16:	3322      	adds	r3, #34	@ 0x22
 8012a18:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 8012a1a:	687b      	ldr	r3, [r7, #4]
 8012a1c:	69ba      	ldr	r2, [r7, #24]
 8012a1e:	4413      	add	r3, r2
 8012a20:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 8012a22:	69bb      	ldr	r3, [r7, #24]
 8012a24:	2b59      	cmp	r3, #89	@ 0x59
 8012a26:	d801      	bhi.n	8012a2c <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8012a28:	235a      	movs	r3, #90	@ 0x5a
 8012a2a:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 8012a2c:	68bb      	ldr	r3, [r7, #8]
 8012a2e:	2b00      	cmp	r3, #0
 8012a30:	d004      	beq.n	8012a3c <prvTCPBufferResize+0x60>
 8012a32:	68bb      	ldr	r3, [r7, #8]
 8012a34:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a36:	69ba      	ldr	r2, [r7, #24]
 8012a38:	429a      	cmp	r2, r3
 8012a3a:	d902      	bls.n	8012a42 <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 8012a3c:	2301      	movs	r3, #1
 8012a3e:	617b      	str	r3, [r7, #20]
 8012a40:	e001      	b.n	8012a46 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8012a42:	2300      	movs	r3, #0
 8012a44:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 8012a46:	697b      	ldr	r3, [r7, #20]
 8012a48:	2b00      	cmp	r3, #0
 8012a4a:	d023      	beq.n	8012a94 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 8012a4c:	2100      	movs	r1, #0
 8012a4e:	69b8      	ldr	r0, [r7, #24]
 8012a50:	f003 fc4a 	bl	80162e8 <pxGetNetworkBufferWithDescriptor>
 8012a54:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 8012a56:	69fb      	ldr	r3, [r7, #28]
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d031      	beq.n	8012ac0 <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 8012a5c:	69fb      	ldr	r3, [r7, #28]
 8012a5e:	69ba      	ldr	r2, [r7, #24]
 8012a60:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 8012a62:	68bb      	ldr	r3, [r7, #8]
 8012a64:	2b00      	cmp	r3, #0
 8012a66:	d00c      	beq.n	8012a82 <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8012a68:	69fb      	ldr	r3, [r7, #28]
 8012a6a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012a6c:	68bb      	ldr	r3, [r7, #8]
 8012a6e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012a70:	68bb      	ldr	r3, [r7, #8]
 8012a72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012a74:	461a      	mov	r2, r3
 8012a76:	f00d ffa5 	bl	80209c4 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012a7a:	68b8      	ldr	r0, [r7, #8]
 8012a7c:	f003 fc9c 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
 8012a80:	e01e      	b.n	8012ac0 <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8012a82:	69fb      	ldr	r3, [r7, #28]
 8012a84:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	33aa      	adds	r3, #170	@ 0xaa
 8012a8a:	225a      	movs	r2, #90	@ 0x5a
 8012a8c:	4619      	mov	r1, r3
 8012a8e:	f00d ff99 	bl	80209c4 <memcpy>
 8012a92:	e015      	b.n	8012ac0 <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 8012a94:	68bb      	ldr	r3, [r7, #8]
 8012a96:	2b00      	cmp	r3, #0
 8012a98:	d104      	bne.n	8012aa4 <prvTCPBufferResize+0xc8>
 8012a9a:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8012a9e:	480c      	ldr	r0, [pc, #48]	@ (8012ad0 <prvTCPBufferResize+0xf4>)
 8012aa0:	f7ee fb46 	bl	8001130 <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 8012aa4:	68bb      	ldr	r3, [r7, #8]
 8012aa6:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8012aa8:	68f8      	ldr	r0, [r7, #12]
 8012aaa:	f7f6 fa8f 	bl	8008fcc <uxIPHeaderSizeSocket>
 8012aae:	4602      	mov	r2, r0
 8012ab0:	683b      	ldr	r3, [r7, #0]
 8012ab2:	441a      	add	r2, r3
 8012ab4:	687b      	ldr	r3, [r7, #4]
 8012ab6:	4413      	add	r3, r2
 8012ab8:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8012abc:	68bb      	ldr	r3, [r7, #8]
 8012abe:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 8012ac0:	69fb      	ldr	r3, [r7, #28]
    }
 8012ac2:	4618      	mov	r0, r3
 8012ac4:	3720      	adds	r7, #32
 8012ac6:	46bd      	mov	sp, r7
 8012ac8:	bd80      	pop	{r7, pc}
 8012aca:	bf00      	nop
 8012acc:	08025d10 	.word	0x08025d10
 8012ad0:	08024bb0 	.word	0x08024bb0

08012ad4 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b086      	sub	sp, #24
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	60f8      	str	r0, [r7, #12]
 8012adc:	60b9      	str	r1, [r7, #8]
 8012ade:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 8012ae0:	2300      	movs	r3, #0
 8012ae2:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8012ae4:	2300      	movs	r3, #0
 8012ae6:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d008      	beq.n	8012b00 <prvTCPReturn_SetEndPoint+0x2c>
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d004      	beq.n	8012b00 <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012afa:	68bb      	ldr	r3, [r7, #8]
 8012afc:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 8012afe:	e078      	b.n	8012bf2 <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 8012b00:	483e      	ldr	r0, [pc, #248]	@ (8012bfc <prvTCPReturn_SetEndPoint+0x128>)
 8012b02:	f00d fd43 	bl	802058c <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 8012b06:	687b      	ldr	r3, [r7, #4]
 8012b08:	2b14      	cmp	r3, #20
 8012b0a:	d003      	beq.n	8012b14 <prvTCPReturn_SetEndPoint+0x40>
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	2b28      	cmp	r3, #40	@ 0x28
 8012b10:	d03d      	beq.n	8012b8e <prvTCPReturn_SetEndPoint+0xba>
 8012b12:	e056      	b.n	8012bc2 <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012b14:	68bb      	ldr	r3, [r7, #8]
 8012b16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b18:	330e      	adds	r3, #14
 8012b1a:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 8012b1c:	697b      	ldr	r3, [r7, #20]
 8012b1e:	691b      	ldr	r3, [r3, #16]
 8012b20:	2108      	movs	r1, #8
 8012b22:	4618      	mov	r0, r3
 8012b24:	f7f9 fea8 	bl	800c878 <FreeRTOS_FindEndPointOnNetMask>
 8012b28:	4602      	mov	r2, r0
 8012b2a:	68bb      	ldr	r3, [r7, #8]
 8012b2c:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8012b2e:	68bb      	ldr	r3, [r7, #8]
 8012b30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012b32:	2b00      	cmp	r3, #0
 8012b34:	d149      	bne.n	8012bca <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 8012b36:	697b      	ldr	r3, [r7, #20]
 8012b38:	68db      	ldr	r3, [r3, #12]
 8012b3a:	061a      	lsls	r2, r3, #24
 8012b3c:	697b      	ldr	r3, [r7, #20]
 8012b3e:	68db      	ldr	r3, [r3, #12]
 8012b40:	021b      	lsls	r3, r3, #8
 8012b42:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012b46:	431a      	orrs	r2, r3
 8012b48:	697b      	ldr	r3, [r7, #20]
 8012b4a:	68db      	ldr	r3, [r3, #12]
 8012b4c:	0a1b      	lsrs	r3, r3, #8
 8012b4e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012b52:	431a      	orrs	r2, r3
 8012b54:	697b      	ldr	r3, [r7, #20]
 8012b56:	68db      	ldr	r3, [r3, #12]
 8012b58:	0e1b      	lsrs	r3, r3, #24
 8012b5a:	ea42 0103 	orr.w	r1, r2, r3
 8012b5e:	697b      	ldr	r3, [r7, #20]
 8012b60:	691b      	ldr	r3, [r3, #16]
 8012b62:	061a      	lsls	r2, r3, #24
 8012b64:	697b      	ldr	r3, [r7, #20]
 8012b66:	691b      	ldr	r3, [r3, #16]
 8012b68:	021b      	lsls	r3, r3, #8
 8012b6a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012b6e:	431a      	orrs	r2, r3
 8012b70:	697b      	ldr	r3, [r7, #20]
 8012b72:	691b      	ldr	r3, [r3, #16]
 8012b74:	0a1b      	lsrs	r3, r3, #8
 8012b76:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012b7a:	431a      	orrs	r2, r3
 8012b7c:	697b      	ldr	r3, [r7, #20]
 8012b7e:	691b      	ldr	r3, [r3, #16]
 8012b80:	0e1b      	lsrs	r3, r3, #24
 8012b82:	4313      	orrs	r3, r2
 8012b84:	461a      	mov	r2, r3
 8012b86:	481e      	ldr	r0, [pc, #120]	@ (8012c00 <prvTCPReturn_SetEndPoint+0x12c>)
 8012b88:	f00d fd00 	bl	802058c <lUDPLoggingPrintf>
                        break;
 8012b8c:	e01d      	b.n	8012bca <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012b8e:	68bb      	ldr	r3, [r7, #8]
 8012b90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012b92:	330e      	adds	r3, #14
 8012b94:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 8012b96:	693b      	ldr	r3, [r7, #16]
 8012b98:	3318      	adds	r3, #24
 8012b9a:	4618      	mov	r0, r3
 8012b9c:	f7f9 fe26 	bl	800c7ec <FreeRTOS_FindEndPointOnIP_IPv6>
 8012ba0:	4602      	mov	r2, r0
 8012ba2:	68bb      	ldr	r3, [r7, #8]
 8012ba4:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8012ba6:	68bb      	ldr	r3, [r7, #8]
 8012ba8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012baa:	2b00      	cmp	r3, #0
 8012bac:	d10f      	bne.n	8012bce <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 8012bae:	693b      	ldr	r3, [r7, #16]
 8012bb0:	f103 0108 	add.w	r1, r3, #8
 8012bb4:	693b      	ldr	r3, [r7, #16]
 8012bb6:	3318      	adds	r3, #24
 8012bb8:	461a      	mov	r2, r3
 8012bba:	4812      	ldr	r0, [pc, #72]	@ (8012c04 <prvTCPReturn_SetEndPoint+0x130>)
 8012bbc:	f00d fce6 	bl	802058c <lUDPLoggingPrintf>
                        break;
 8012bc0:	e005      	b.n	8012bce <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 8012bc2:	68bb      	ldr	r3, [r7, #8]
 8012bc4:	2200      	movs	r2, #0
 8012bc6:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 8012bc8:	e002      	b.n	8012bd0 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 8012bca:	bf00      	nop
 8012bcc:	e000      	b.n	8012bd0 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 8012bce:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 8012bd0:	68bb      	ldr	r3, [r7, #8]
 8012bd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012bd4:	2b00      	cmp	r3, #0
 8012bd6:	d00c      	beq.n	8012bf2 <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 8012bd8:	68bb      	ldr	r3, [r7, #8]
 8012bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012bdc:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8012be0:	4619      	mov	r1, r3
 8012be2:	68bb      	ldr	r3, [r7, #8]
 8012be4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012be6:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 8012bea:	461a      	mov	r2, r3
 8012bec:	4806      	ldr	r0, [pc, #24]	@ (8012c08 <prvTCPReturn_SetEndPoint+0x134>)
 8012bee:	f00d fccd 	bl	802058c <lUDPLoggingPrintf>
    }
 8012bf2:	bf00      	nop
 8012bf4:	3718      	adds	r7, #24
 8012bf6:	46bd      	mov	sp, r7
 8012bf8:	bd80      	pop	{r7, pc}
 8012bfa:	bf00      	nop
 8012bfc:	08024c78 	.word	0x08024c78
 8012c00:	08024ca0 	.word	0x08024ca0
 8012c04:	08024cd4 	.word	0x08024cd4
 8012c08:	08024d08 	.word	0x08024d08

08012c0c <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 8012c0c:	b580      	push	{r7, lr}
 8012c0e:	b096      	sub	sp, #88	@ 0x58
 8012c10:	af02      	add	r7, sp, #8
 8012c12:	60f8      	str	r0, [r7, #12]
 8012c14:	60b9      	str	r1, [r7, #8]
 8012c16:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 8012c18:	2300      	movs	r3, #0
 8012c1a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 8012c1c:	68bb      	ldr	r3, [r7, #8]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d004      	beq.n	8012c2e <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8012c24:	68bb      	ldr	r3, [r7, #8]
 8012c26:	681b      	ldr	r3, [r3, #0]
 8012c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012c2a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8012c2c:	e002      	b.n	8012c34 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8012c2e:	68fb      	ldr	r3, [r7, #12]
 8012c30:	33aa      	adds	r3, #170	@ 0xaa
 8012c32:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012c34:	68f8      	ldr	r0, [r7, #12]
 8012c36:	f7f6 f9c9 	bl	8008fcc <uxIPHeaderSizeSocket>
 8012c3a:	4603      	mov	r3, r0
 8012c3c:	330e      	adds	r3, #14
 8012c3e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012c40:	4413      	add	r3, r2
 8012c42:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012c4a:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 8012c4c:	2300      	movs	r3, #0
 8012c4e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 8012c50:	2300      	movs	r3, #0
 8012c52:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 8012c54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c56:	7b5b      	ldrb	r3, [r3, #13]
 8012c58:	f043 0310 	orr.w	r3, r3, #16
 8012c5c:	b2da      	uxtb	r2, r3
 8012c5e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012c60:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 8012c62:	68fb      	ldr	r3, [r7, #12]
 8012c64:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	f000 80a5 	beq.w	8012db8 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 8012c6e:	68fb      	ldr	r3, [r7, #12]
 8012c70:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012c74:	2b01      	cmp	r3, #1
 8012c76:	d90a      	bls.n	8012c8e <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8012c78:	68fb      	ldr	r3, [r7, #12]
 8012c7a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8012c7e:	f107 0210 	add.w	r2, r7, #16
 8012c82:	4619      	mov	r1, r3
 8012c84:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012c86:	f002 fb13 	bl	80152b0 <ulTCPWindowTxGet>
 8012c8a:	4603      	mov	r3, r0
 8012c8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 8012c8e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012c90:	2b00      	cmp	r3, #0
 8012c92:	f340 8091 	ble.w	8012db8 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 8012c96:	68bb      	ldr	r3, [r7, #8]
 8012c98:	6819      	ldr	r1, [r3, #0]
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012c9e:	68f8      	ldr	r0, [r7, #12]
 8012ca0:	f7ff fe9c 	bl	80129dc <prvTCPBufferResize>
 8012ca4:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 8012ca6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012ca8:	2b00      	cmp	r3, #0
 8012caa:	f000 8082 	beq.w	8012db2 <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 8012cae:	68bb      	ldr	r3, [r7, #8]
 8012cb0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8012cb2:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 8012cb4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012cb8:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012cba:	68f8      	ldr	r0, [r7, #12]
 8012cbc:	f7f6 f986 	bl	8008fcc <uxIPHeaderSizeSocket>
 8012cc0:	4603      	mov	r3, r0
 8012cc2:	330e      	adds	r3, #14
 8012cc4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012cc6:	4413      	add	r3, r2
 8012cc8:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 8012cca:	68f8      	ldr	r0, [r7, #12]
 8012ccc:	f7f6 f97e 	bl	8008fcc <uxIPHeaderSizeSocket>
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	687b      	ldr	r3, [r7, #4]
 8012cd4:	4413      	add	r3, r2
 8012cd6:	3322      	adds	r3, #34	@ 0x22
 8012cd8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8012cda:	4413      	add	r3, r2
 8012cdc:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 8012cde:	68fb      	ldr	r3, [r7, #12]
 8012ce0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8012ce4:	68fb      	ldr	r3, [r7, #12]
 8012ce6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012cea:	681b      	ldr	r3, [r3, #0]
 8012cec:	693a      	ldr	r2, [r7, #16]
 8012cee:	4619      	mov	r1, r3
 8012cf0:	f7fc fef9 	bl	800fae6 <uxStreamBufferDistance>
 8012cf4:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8012cfc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012cfe:	2201      	movs	r2, #1
 8012d00:	9200      	str	r2, [sp, #0]
 8012d02:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8012d04:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8012d06:	f7fd f84c 	bl	800fda2 <uxStreamBufferGet>
 8012d0a:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 8012d0c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d0e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012d10:	429a      	cmp	r2, r3
 8012d12:	d007      	beq.n	8012d24 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 8012d14:	6939      	ldr	r1, [r7, #16]
 8012d16:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d18:	9300      	str	r3, [sp, #0]
 8012d1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d1c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012d1e:	4898      	ldr	r0, [pc, #608]	@ (8012f80 <prvTCPPrepareSend+0x374>)
 8012d20:	f00d fc34 	bl	802058c <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 8012d24:	68fb      	ldr	r3, [r7, #12]
 8012d26:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012d2a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8012d2e:	b2db      	uxtb	r3, r3
 8012d30:	2b00      	cmp	r3, #0
 8012d32:	d041      	beq.n	8012db8 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 8012d34:	68fb      	ldr	r3, [r7, #12]
 8012d36:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8012d3a:	693b      	ldr	r3, [r7, #16]
 8012d3c:	4619      	mov	r1, r3
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012d44:	689b      	ldr	r3, [r3, #8]
 8012d46:	461a      	mov	r2, r3
 8012d48:	f7fc fecd 	bl	800fae6 <uxStreamBufferDistance>
 8012d4c:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 8012d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012d52:	429a      	cmp	r2, r3
 8012d54:	d130      	bne.n	8012db8 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 8012d56:	68fb      	ldr	r3, [r7, #12]
 8012d58:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012d5c:	689b      	ldr	r3, [r3, #8]
 8012d5e:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 8012d60:	68fb      	ldr	r3, [r7, #12]
 8012d62:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012d66:	685b      	ldr	r3, [r3, #4]
 8012d68:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 8012d6a:	68fb      	ldr	r3, [r7, #12]
 8012d6c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012d70:	681b      	ldr	r3, [r3, #0]
 8012d72:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 8012d74:	6a3b      	ldr	r3, [r7, #32]
 8012d76:	9301      	str	r3, [sp, #4]
 8012d78:	69fb      	ldr	r3, [r7, #28]
 8012d7a:	9300      	str	r3, [sp, #0]
 8012d7c:	69bb      	ldr	r3, [r7, #24]
 8012d7e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012d80:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8012d82:	4880      	ldr	r0, [pc, #512]	@ (8012f84 <prvTCPPrepareSend+0x378>)
 8012d84:	f00d fc02 	bl	802058c <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8012d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d8a:	7b5b      	ldrb	r3, [r3, #13]
 8012d8c:	f043 0301 	orr.w	r3, r3, #1
 8012d90:	b2da      	uxtb	r2, r3
 8012d92:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012d94:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 8012d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012d98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012d9a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012d9c:	441a      	add	r2, r3
 8012d9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012da0:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8012da2:	68fa      	ldr	r2, [r7, #12]
 8012da4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012da8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012dac:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8012db0:	e002      	b.n	8012db8 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 8012db2:	f04f 33ff 	mov.w	r3, #4294967295
 8012db6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 8012db8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012dba:	2b00      	cmp	r3, #0
 8012dbc:	f2c0 8099 	blt.w	8012ef2 <prvTCPPrepareSend+0x2e6>
 8012dc0:	68fb      	ldr	r3, [r7, #12]
 8012dc2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012dc6:	2b05      	cmp	r3, #5
 8012dc8:	f040 8093 	bne.w	8012ef2 <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8012dcc:	68fb      	ldr	r3, [r7, #12]
 8012dce:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012dd2:	f003 0320 	and.w	r3, r3, #32
 8012dd6:	b2db      	uxtb	r3, r3
 8012dd8:	2b00      	cmp	r3, #0
 8012dda:	d029      	beq.n	8012e30 <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 8012ddc:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8012dde:	f002 f8e7 	bl	8014fb0 <xTCPWindowTxDone>
 8012de2:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 8012de4:	2b00      	cmp	r3, #0
 8012de6:	d023      	beq.n	8012e30 <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 8012de8:	68fa      	ldr	r2, [r7, #12]
 8012dea:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8012dee:	f36f 1345 	bfc	r3, #5, #1
 8012df2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8012df6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012df8:	7b5b      	ldrb	r3, [r3, #13]
 8012dfa:	f043 0301 	orr.w	r3, r3, #1
 8012dfe:	b2da      	uxtb	r2, r3
 8012e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012e02:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8012e04:	68fa      	ldr	r2, [r7, #12]
 8012e06:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012e0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8012e0e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8012e12:	68fa      	ldr	r2, [r7, #12]
 8012e14:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012e18:	f043 0301 	orr.w	r3, r3, #1
 8012e1c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8012e20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e22:	6a1a      	ldr	r2, [r3, #32]
 8012e24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012e26:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8012e28:	2106      	movs	r1, #6
 8012e2a:	68f8      	ldr	r0, [r7, #12]
 8012e2c:	f7fd f960 	bl	80100f0 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 8012e30:	68fb      	ldr	r3, [r7, #12]
 8012e32:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012e36:	2b03      	cmp	r3, #3
 8012e38:	d90f      	bls.n	8012e5a <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 8012e3a:	68fb      	ldr	r3, [r7, #12]
 8012e3c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012e3e:	68fb      	ldr	r3, [r7, #12]
 8012e40:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012e44:	461a      	mov	r2, r3
 8012e46:	4850      	ldr	r0, [pc, #320]	@ (8012f88 <prvTCPPrepareSend+0x37c>)
 8012e48:	f00d fba0 	bl	802058c <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8012e4c:	2108      	movs	r1, #8
 8012e4e:	68f8      	ldr	r0, [r7, #12]
 8012e50:	f7fd f94e 	bl	80100f0 <vTCPStateChange>
                    lDataLen = -1;
 8012e54:	f04f 33ff 	mov.w	r3, #4294967295
 8012e58:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 8012e5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012e5c:	2b00      	cmp	r3, #0
 8012e5e:	d148      	bne.n	8012ef2 <prvTCPPrepareSend+0x2e6>
 8012e60:	68fb      	ldr	r3, [r7, #12]
 8012e62:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012e66:	f003 0301 	and.w	r3, r3, #1
 8012e6a:	b2db      	uxtb	r3, r3
 8012e6c:	2b00      	cmp	r3, #0
 8012e6e:	d140      	bne.n	8012ef2 <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8012e70:	f7f0 fcf8 	bl	8003864 <xTaskGetTickCount>
 8012e74:	4602      	mov	r2, r0
 8012e76:	68fb      	ldr	r3, [r7, #12]
 8012e78:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8012e7c:	1ad3      	subs	r3, r2, r3
 8012e7e:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 8012e80:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8012e84:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 8012e86:	68fb      	ldr	r3, [r7, #12]
 8012e88:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012e8c:	2b00      	cmp	r3, #0
 8012e8e:	d002      	beq.n	8012e96 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 8012e90:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8012e94:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 8012e96:	697a      	ldr	r2, [r7, #20]
 8012e98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8012e9a:	429a      	cmp	r2, r3
 8012e9c:	d929      	bls.n	8012ef2 <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8012e9e:	f7f0 fce1 	bl	8003864 <xTaskGetTickCount>
 8012ea2:	4602      	mov	r2, r0
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 8012eaa:	4b38      	ldr	r3, [pc, #224]	@ (8012f8c <prvTCPPrepareSend+0x380>)
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	d00b      	beq.n	8012eca <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 8012eb2:	68fb      	ldr	r3, [r7, #12]
 8012eb4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8012eb6:	68fb      	ldr	r3, [r7, #12]
 8012eb8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012ebc:	461a      	mov	r2, r3
 8012ebe:	68fb      	ldr	r3, [r7, #12]
 8012ec0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012ec4:	4832      	ldr	r0, [pc, #200]	@ (8012f90 <prvTCPPrepareSend+0x384>)
 8012ec6:	f00d fb61 	bl	802058c <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 8012eca:	68fa      	ldr	r2, [r7, #12]
 8012ecc:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012ed0:	f043 0302 	orr.w	r3, r3, #2
 8012ed4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 8012ed8:	68fb      	ldr	r3, [r7, #12]
 8012eda:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 8012ede:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8012ee8:	3301      	adds	r3, #1
 8012eea:	b2da      	uxtb	r2, r3
 8012eec:	68fb      	ldr	r3, [r7, #12]
 8012eee:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 8012ef2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012ef4:	2b00      	cmp	r3, #0
 8012ef6:	db3e      	blt.n	8012f76 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 8012ef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	dc0f      	bgt.n	8012f1e <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012f04:	f003 0301 	and.w	r3, r3, #1
 8012f08:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 8012f0a:	2b00      	cmp	r3, #0
 8012f0c:	d107      	bne.n	8012f1e <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 8012f0e:	68fb      	ldr	r3, [r7, #12]
 8012f10:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012f14:	f003 0302 	and.w	r3, r3, #2
 8012f18:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 8012f1a:	2b00      	cmp	r3, #0
 8012f1c:	d02b      	beq.n	8012f76 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 8012f1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f20:	7b5b      	ldrb	r3, [r3, #13]
 8012f22:	f023 0308 	bic.w	r3, r3, #8
 8012f26:	b2da      	uxtb	r2, r3
 8012f28:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f2a:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	b2db      	uxtb	r3, r3
 8012f30:	3314      	adds	r3, #20
 8012f32:	b2db      	uxtb	r3, r3
 8012f34:	009b      	lsls	r3, r3, #2
 8012f36:	b2da      	uxtb	r2, r3
 8012f38:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f3a:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 8012f3c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f3e:	7b5b      	ldrb	r3, [r3, #13]
 8012f40:	f043 0310 	orr.w	r3, r3, #16
 8012f44:	b2da      	uxtb	r2, r3
 8012f46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f48:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 8012f4a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d006      	beq.n	8012f5e <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 8012f50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f52:	7b5b      	ldrb	r3, [r3, #13]
 8012f54:	f043 0308 	orr.w	r3, r3, #8
 8012f58:	b2da      	uxtb	r2, r3
 8012f5a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8012f5c:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012f5e:	68f8      	ldr	r0, [r7, #12]
 8012f60:	f7f6 f834 	bl	8008fcc <uxIPHeaderSizeSocket>
 8012f64:	4602      	mov	r2, r0
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	4413      	add	r3, r2
 8012f6a:	3314      	adds	r3, #20
 8012f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 8012f6e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8012f70:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8012f72:	4413      	add	r3, r2
 8012f74:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 8012f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8012f78:	4618      	mov	r0, r3
 8012f7a:	3750      	adds	r7, #80	@ 0x50
 8012f7c:	46bd      	mov	sp, r7
 8012f7e:	bd80      	pop	{r7, pc}
 8012f80:	08024d3c 	.word	0x08024d3c
 8012f84:	08024d70 	.word	0x08024d70
 8012f88:	08024d98 	.word	0x08024d98
 8012f8c:	200012f4 	.word	0x200012f4
 8012f90:	08024db8 	.word	0x08024db8

08012f94 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 8012f94:	b580      	push	{r7, lr}
 8012f96:	b084      	sub	sp, #16
 8012f98:	af00      	add	r7, sp, #0
 8012f9a:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012fa2:	4618      	mov	r0, r3
 8012fa4:	f7fc fdf0 	bl	800fb88 <uxStreamBufferMidSpace>
 8012fa8:	4603      	mov	r3, r0
 8012faa:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	2b00      	cmp	r3, #0
 8012fb0:	dd1a      	ble.n	8012fe8 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8012fb2:	687b      	ldr	r3, [r7, #4]
 8012fb4:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8012fb8:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012fc0:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8012fc2:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 8012fc4:	687b      	ldr	r3, [r7, #4]
 8012fc6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012fca:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 8012fcc:	f001 ff5c 	bl	8014e88 <lTCPWindowTxAdd>
 8012fd0:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	2b00      	cmp	r3, #0
 8012fd6:	dd07      	ble.n	8012fe8 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012fde:	68ba      	ldr	r2, [r7, #8]
 8012fe0:	4611      	mov	r1, r2
 8012fe2:	4618      	mov	r0, r3
 8012fe4:	f7fc fdf7 	bl	800fbd6 <vStreamBufferMoveMid>
            }
        }
    }
 8012fe8:	bf00      	nop
 8012fea:	3710      	adds	r7, #16
 8012fec:	46bd      	mov	sp, r7
 8012fee:	bd80      	pop	{r7, pc}

08012ff0 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8012ff0:	b590      	push	{r4, r7, lr}
 8012ff2:	b08b      	sub	sp, #44	@ 0x2c
 8012ff4:	af02      	add	r7, sp, #8
 8012ff6:	6078      	str	r0, [r7, #4]
 8012ff8:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012ffa:	683b      	ldr	r3, [r7, #0]
 8012ffc:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012ffe:	6838      	ldr	r0, [r7, #0]
 8013000:	f7f5 ffca 	bl	8008f98 <uxIPHeaderSizePacket>
 8013004:	4603      	mov	r3, r0
 8013006:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013008:	4423      	add	r3, r4
 801300a:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 801300c:	69bb      	ldr	r3, [r7, #24]
 801300e:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8013010:	687b      	ldr	r3, [r7, #4]
 8013012:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013016:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8013018:	693b      	ldr	r3, [r7, #16]
 801301a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801301e:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 8013020:	69fb      	ldr	r3, [r7, #28]
 8013022:	2b00      	cmp	r3, #0
 8013024:	d05c      	beq.n	80130e0 <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 8013026:	4b4f      	ldr	r3, [pc, #316]	@ (8013164 <prvSetOptions+0x174>)
 8013028:	681b      	ldr	r3, [r3, #0]
 801302a:	2b00      	cmp	r3, #0
 801302c:	db44      	blt.n	80130b8 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013032:	4618      	mov	r0, r3
 8013034:	687b      	ldr	r3, [r7, #4]
 8013036:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801303a:	461c      	mov	r4, r3
 801303c:	693b      	ldr	r3, [r7, #16]
 801303e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013042:	061a      	lsls	r2, r3, #24
 8013044:	693b      	ldr	r3, [r7, #16]
 8013046:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801304a:	021b      	lsls	r3, r3, #8
 801304c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013050:	431a      	orrs	r2, r3
 8013052:	693b      	ldr	r3, [r7, #16]
 8013054:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013058:	0a1b      	lsrs	r3, r3, #8
 801305a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801305e:	431a      	orrs	r2, r3
 8013060:	693b      	ldr	r3, [r7, #16]
 8013062:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013066:	0e1b      	lsrs	r3, r3, #24
 8013068:	431a      	orrs	r2, r3
 801306a:	687b      	ldr	r3, [r7, #4]
 801306c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8013070:	1ad3      	subs	r3, r2, r3
 8013072:	693a      	ldr	r2, [r7, #16]
 8013074:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013078:	0611      	lsls	r1, r2, #24
 801307a:	693a      	ldr	r2, [r7, #16]
 801307c:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013080:	0212      	lsls	r2, r2, #8
 8013082:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8013086:	4311      	orrs	r1, r2
 8013088:	693a      	ldr	r2, [r7, #16]
 801308a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801308e:	0a12      	lsrs	r2, r2, #8
 8013090:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8013094:	4311      	orrs	r1, r2
 8013096:	693a      	ldr	r2, [r7, #16]
 8013098:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801309c:	0e12      	lsrs	r2, r2, #24
 801309e:	4311      	orrs	r1, r2
 80130a0:	687a      	ldr	r2, [r7, #4]
 80130a2:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 80130a6:	1a8a      	subs	r2, r1, r2
 80130a8:	9201      	str	r2, [sp, #4]
 80130aa:	9300      	str	r3, [sp, #0]
 80130ac:	69fb      	ldr	r3, [r7, #28]
 80130ae:	4622      	mov	r2, r4
 80130b0:	4601      	mov	r1, r0
 80130b2:	482d      	ldr	r0, [pc, #180]	@ (8013168 <prvSetOptions+0x178>)
 80130b4:	f00d fa6a 	bl	802058c <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 80130b8:	693b      	ldr	r3, [r7, #16]
 80130ba:	3380      	adds	r3, #128	@ 0x80
 80130bc:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 80130be:	697b      	ldr	r3, [r7, #20]
 80130c0:	3314      	adds	r3, #20
 80130c2:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 80130c4:	69fa      	ldr	r2, [r7, #28]
 80130c6:	68f9      	ldr	r1, [r7, #12]
 80130c8:	68b8      	ldr	r0, [r7, #8]
 80130ca:	f00d fc7b 	bl	80209c4 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80130ce:	69fb      	ldr	r3, [r7, #28]
 80130d0:	b2db      	uxtb	r3, r3
 80130d2:	3314      	adds	r3, #20
 80130d4:	b2db      	uxtb	r3, r3
 80130d6:	009b      	lsls	r3, r3, #2
 80130d8:	b2da      	uxtb	r2, r3
 80130da:	697b      	ldr	r3, [r7, #20]
 80130dc:	731a      	strb	r2, [r3, #12]
 80130de:	e03c      	b.n	801315a <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80130e6:	2b04      	cmp	r3, #4
 80130e8:	d937      	bls.n	801315a <prvSetOptions+0x16a>
 80130ea:	687b      	ldr	r3, [r7, #4]
 80130ec:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80130f0:	f003 0301 	and.w	r3, r3, #1
 80130f4:	b2db      	uxtb	r3, r3
 80130f6:	2b00      	cmp	r3, #0
 80130f8:	d02f      	beq.n	801315a <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 80130fa:	687a      	ldr	r2, [r7, #4]
 80130fc:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013100:	f36f 0300 	bfc	r3, #0, #1
 8013104:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 8013108:	4b16      	ldr	r3, [pc, #88]	@ (8013164 <prvSetOptions+0x174>)
 801310a:	681b      	ldr	r3, [r3, #0]
 801310c:	2b00      	cmp	r3, #0
 801310e:	db06      	blt.n	801311e <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013116:	4619      	mov	r1, r3
 8013118:	4814      	ldr	r0, [pc, #80]	@ (801316c <prvSetOptions+0x17c>)
 801311a:	f00d fa37 	bl	802058c <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	2202      	movs	r2, #2
 8013122:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	2204      	movs	r2, #4
 8013128:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 801312a:	687b      	ldr	r3, [r7, #4]
 801312c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013130:	0a1b      	lsrs	r3, r3, #8
 8013132:	b29b      	uxth	r3, r3
 8013134:	b2da      	uxtb	r2, r3
 8013136:	697b      	ldr	r3, [r7, #20]
 8013138:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013140:	b2da      	uxtb	r2, r3
 8013142:	697b      	ldr	r3, [r7, #20]
 8013144:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 8013146:	2304      	movs	r3, #4
 8013148:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801314a:	69fb      	ldr	r3, [r7, #28]
 801314c:	b2db      	uxtb	r3, r3
 801314e:	3314      	adds	r3, #20
 8013150:	b2db      	uxtb	r3, r3
 8013152:	009b      	lsls	r3, r3, #2
 8013154:	b2da      	uxtb	r2, r3
 8013156:	697b      	ldr	r3, [r7, #20]
 8013158:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 801315a:	69fb      	ldr	r3, [r7, #28]
    }
 801315c:	4618      	mov	r0, r3
 801315e:	3724      	adds	r7, #36	@ 0x24
 8013160:	46bd      	mov	sp, r7
 8013162:	bd90      	pop	{r4, r7, pc}
 8013164:	200012f4 	.word	0x200012f4
 8013168:	08024dd8 	.word	0x08024dd8
 801316c:	08024e00 	.word	0x08024e00

08013170 <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 8013170:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013172:	b093      	sub	sp, #76	@ 0x4c
 8013174:	af04      	add	r7, sp, #16
 8013176:	60f8      	str	r0, [r7, #12]
 8013178:	60b9      	str	r1, [r7, #8]
 801317a:	607a      	str	r2, [r7, #4]
 801317c:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 801317e:	68bb      	ldr	r3, [r7, #8]
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013184:	68bb      	ldr	r3, [r7, #8]
 8013186:	681b      	ldr	r3, [r3, #0]
 8013188:	4618      	mov	r0, r3
 801318a:	f7f5 ff05 	bl	8008f98 <uxIPHeaderSizePacket>
 801318e:	4603      	mov	r3, r0
 8013190:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013192:	4423      	add	r3, r4
 8013194:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8013196:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8013198:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 801319a:	68fb      	ldr	r3, [r7, #12]
 801319c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80131a0:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 80131a2:	683b      	ldr	r3, [r7, #0]
 80131a4:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 80131a6:	68bb      	ldr	r3, [r7, #8]
 80131a8:	681b      	ldr	r3, [r3, #0]
 80131aa:	4618      	mov	r0, r3
 80131ac:	f7f5 fef4 	bl	8008f98 <uxIPHeaderSizePacket>
 80131b0:	4603      	mov	r3, r0
 80131b2:	3314      	adds	r3, #20
 80131b4:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 80131b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80131b8:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 80131ba:	68fb      	ldr	r3, [r7, #12]
 80131bc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80131be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80131c0:	691b      	ldr	r3, [r3, #16]
 80131c2:	1ad3      	subs	r3, r2, r3
 80131c4:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 80131c6:	69fb      	ldr	r3, [r7, #28]
 80131c8:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 80131ca:	68fb      	ldr	r3, [r7, #12]
 80131cc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80131d0:	005b      	lsls	r3, r3, #1
 80131d2:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d079      	beq.n	80132ce <prvSendData+0x15e>
 80131da:	69ba      	ldr	r2, [r7, #24]
 80131dc:	697b      	ldr	r3, [r7, #20]
 80131de:	429a      	cmp	r2, r3
 80131e0:	db75      	blt.n	80132ce <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 80131e2:	68fb      	ldr	r3, [r7, #12]
 80131e4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80131e8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80131ec:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 80131ee:	2b00      	cmp	r3, #0
 80131f0:	d16d      	bne.n	80132ce <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 80131f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80131f4:	6a3b      	ldr	r3, [r7, #32]
 80131f6:	429a      	cmp	r2, r3
 80131f8:	d169      	bne.n	80132ce <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 8013200:	2b05      	cmp	r3, #5
 8013202:	d164      	bne.n	80132ce <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 8013204:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013206:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8013208:	2b10      	cmp	r3, #16
 801320a:	d160      	bne.n	80132ce <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 801320c:	68fb      	ldr	r3, [r7, #12]
 801320e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013212:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 801321a:	68bb      	ldr	r3, [r7, #8]
 801321c:	681b      	ldr	r3, [r3, #0]
 801321e:	429a      	cmp	r2, r3
 8013220:	d00f      	beq.n	8013242 <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8013222:	68fb      	ldr	r3, [r7, #12]
 8013224:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013228:	2b00      	cmp	r3, #0
 801322a:	d005      	beq.n	8013238 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013232:	4618      	mov	r0, r3
 8013234:	f003 f8c0 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 8013238:	68bb      	ldr	r3, [r7, #8]
 801323a:	681a      	ldr	r2, [r3, #0]
 801323c:	68fb      	ldr	r3, [r7, #12]
 801323e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 8013242:	687a      	ldr	r2, [r7, #4]
 8013244:	693b      	ldr	r3, [r7, #16]
 8013246:	429a      	cmp	r2, r3
 8013248:	d204      	bcs.n	8013254 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	2202      	movs	r2, #2
 801324e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8013252:	e00c      	b.n	801326e <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 8013254:	68fb      	ldr	r3, [r7, #12]
 8013256:	2214      	movs	r2, #20
 8013258:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8013262:	2b00      	cmp	r3, #0
 8013264:	d103      	bne.n	801326e <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 8013266:	68fb      	ldr	r3, [r7, #12]
 8013268:	2201      	movs	r2, #1
 801326a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801326e:	4b3d      	ldr	r3, [pc, #244]	@ (8013364 <prvSendData+0x1f4>)
 8013270:	681b      	ldr	r3, [r3, #0]
 8013272:	2b01      	cmp	r3, #1
 8013274:	dd25      	ble.n	80132c2 <prvSendData+0x152>
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801327a:	2b17      	cmp	r3, #23
 801327c:	d021      	beq.n	80132c2 <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013282:	461d      	mov	r5, r3
 8013284:	68fb      	ldr	r3, [r7, #12]
 8013286:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801328a:	461e      	mov	r6, r3
 801328c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801328e:	691a      	ldr	r2, [r3, #16]
 8013290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013292:	68db      	ldr	r3, [r3, #12]
 8013294:	1ad0      	subs	r0, r2, r3
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 801329c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801329e:	69db      	ldr	r3, [r3, #28]
 80132a0:	1ad3      	subs	r3, r2, r3
 80132a2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80132a4:	68f9      	ldr	r1, [r7, #12]
 80132a6:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 80132aa:	460c      	mov	r4, r1
 80132ac:	69b9      	ldr	r1, [r7, #24]
 80132ae:	9103      	str	r1, [sp, #12]
 80132b0:	9402      	str	r4, [sp, #8]
 80132b2:	9201      	str	r2, [sp, #4]
 80132b4:	9300      	str	r3, [sp, #0]
 80132b6:	4603      	mov	r3, r0
 80132b8:	4632      	mov	r2, r6
 80132ba:	4629      	mov	r1, r5
 80132bc:	482a      	ldr	r0, [pc, #168]	@ (8013368 <prvSendData+0x1f8>)
 80132be:	f00d f965 	bl	802058c <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 80132c2:	68bb      	ldr	r3, [r7, #8]
 80132c4:	2200      	movs	r2, #0
 80132c6:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 80132c8:	2300      	movs	r3, #0
 80132ca:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 80132cc:	e015      	b.n	80132fa <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80132d4:	2b00      	cmp	r3, #0
 80132d6:	d010      	beq.n	80132fa <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 80132d8:	68fb      	ldr	r3, [r7, #12]
 80132da:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	429a      	cmp	r2, r3
 80132e4:	d005      	beq.n	80132f2 <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80132e6:	68fb      	ldr	r3, [r7, #12]
 80132e8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80132ec:	4618      	mov	r0, r3
 80132ee:	f003 f863 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	2200      	movs	r2, #0
 80132f6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 80132fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80132fc:	2b00      	cmp	r3, #0
 80132fe:	d02b      	beq.n	8013358 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8013300:	4b18      	ldr	r3, [pc, #96]	@ (8013364 <prvSendData+0x1f4>)
 8013302:	681b      	ldr	r3, [r3, #0]
 8013304:	2b01      	cmp	r3, #1
 8013306:	dd1d      	ble.n	8013344 <prvSendData+0x1d4>
 8013308:	68fb      	ldr	r3, [r7, #12]
 801330a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801330c:	2b17      	cmp	r3, #23
 801330e:	d019      	beq.n	8013344 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 8013310:	68fb      	ldr	r3, [r7, #12]
 8013312:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013314:	4618      	mov	r0, r3
 8013316:	68fb      	ldr	r3, [r7, #12]
 8013318:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801331c:	461c      	mov	r4, r3
 801331e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013320:	691a      	ldr	r2, [r3, #16]
 8013322:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013324:	68db      	ldr	r3, [r3, #12]
 8013326:	1ad1      	subs	r1, r2, r3
 8013328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801332a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801332c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801332e:	69db      	ldr	r3, [r3, #28]
 8013330:	1ad3      	subs	r3, r2, r3
 8013332:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013334:	9201      	str	r2, [sp, #4]
 8013336:	9300      	str	r3, [sp, #0]
 8013338:	460b      	mov	r3, r1
 801333a:	4622      	mov	r2, r4
 801333c:	4601      	mov	r1, r0
 801333e:	480b      	ldr	r0, [pc, #44]	@ (801336c <prvSendData+0x1fc>)
 8013340:	f00d f924 	bl	802058c <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8013344:	68bb      	ldr	r3, [r7, #8]
 8013346:	6819      	ldr	r1, [r3, #0]
 8013348:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801334a:	2301      	movs	r3, #1
 801334c:	68f8      	ldr	r0, [r7, #12]
 801334e:	f7ff f8ff 	bl	8012550 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 8013352:	68bb      	ldr	r3, [r7, #8]
 8013354:	2200      	movs	r2, #0
 8013356:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 8013358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 801335a:	4618      	mov	r0, r3
 801335c:	373c      	adds	r7, #60	@ 0x3c
 801335e:	46bd      	mov	sp, r7
 8013360:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013362:	bf00      	nop
 8013364:	200012f4 	.word	0x200012f4
 8013368:	08024e14 	.word	0x08024e14
 801336c:	08024e4c 	.word	0x08024e4c

08013370 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 8013370:	b580      	push	{r7, lr}
 8013372:	b084      	sub	sp, #16
 8013374:	af00      	add	r7, sp, #0
 8013376:	6078      	str	r0, [r7, #4]
 8013378:	460b      	mov	r3, r1
 801337a:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 801337c:	2301      	movs	r3, #1
 801337e:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8013380:	6878      	ldr	r0, [r7, #4]
 8013382:	f7f5 fe09 	bl	8008f98 <uxIPHeaderSizePacket>
 8013386:	4603      	mov	r3, r0
 8013388:	2b14      	cmp	r3, #20
 801338a:	d002      	beq.n	8013392 <prvTCPSendSpecialPacketHelper+0x22>
 801338c:	2b28      	cmp	r3, #40	@ 0x28
 801338e:	d007      	beq.n	80133a0 <prvTCPSendSpecialPacketHelper+0x30>
 8013390:	e00d      	b.n	80133ae <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 8013392:	78fb      	ldrb	r3, [r7, #3]
 8013394:	4619      	mov	r1, r3
 8013396:	6878      	ldr	r0, [r7, #4]
 8013398:	f000 fb18 	bl	80139cc <prvTCPSendSpecialPktHelper_IPV4>
 801339c:	60f8      	str	r0, [r7, #12]
                        break;
 801339e:	e009      	b.n	80133b4 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 80133a0:	78fb      	ldrb	r3, [r7, #3]
 80133a2:	4619      	mov	r1, r3
 80133a4:	6878      	ldr	r0, [r7, #4]
 80133a6:	f000 fe8b 	bl	80140c0 <prvTCPSendSpecialPktHelper_IPV6>
 80133aa:	60f8      	str	r0, [r7, #12]
                        break;
 80133ac:	e002      	b.n	80133b4 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 80133ae:	2300      	movs	r3, #0
 80133b0:	60fb      	str	r3, [r7, #12]
                    break;
 80133b2:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 80133b4:	68fb      	ldr	r3, [r7, #12]
    }
 80133b6:	4618      	mov	r0, r3
 80133b8:	3710      	adds	r7, #16
 80133ba:	46bd      	mov	sp, r7
 80133bc:	bd80      	pop	{r7, pc}

080133be <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80133be:	b580      	push	{r7, lr}
 80133c0:	b082      	sub	sp, #8
 80133c2:	af00      	add	r7, sp, #0
 80133c4:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 80133c6:	2110      	movs	r1, #16
 80133c8:	6878      	ldr	r0, [r7, #4]
 80133ca:	f7ff ffd1 	bl	8013370 <prvTCPSendSpecialPacketHelper>
 80133ce:	4603      	mov	r3, r0
    }
 80133d0:	4618      	mov	r0, r3
 80133d2:	3708      	adds	r7, #8
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bd80      	pop	{r7, pc}

080133d8 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80133d8:	b580      	push	{r7, lr}
 80133da:	b082      	sub	sp, #8
 80133dc:	af00      	add	r7, sp, #0
 80133de:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 80133e0:	2114      	movs	r1, #20
 80133e2:	6878      	ldr	r0, [r7, #4]
 80133e4:	f7ff ffc4 	bl	8013370 <prvTCPSendSpecialPacketHelper>
 80133e8:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 80133ea:	4618      	mov	r0, r3
 80133ec:	3708      	adds	r7, #8
 80133ee:	46bd      	mov	sp, r7
 80133f0:	bd80      	pop	{r7, pc}
	...

080133f4 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 80133f4:	b580      	push	{r7, lr}
 80133f6:	b0a6      	sub	sp, #152	@ 0x98
 80133f8:	af00      	add	r7, sp, #0
 80133fa:	60f8      	str	r0, [r7, #12]
 80133fc:	60b9      	str	r1, [r7, #8]
 80133fe:	607a      	str	r2, [r7, #4]
 8013400:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 8013402:	2300      	movs	r3, #0
 8013404:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8013408:	2300      	movs	r3, #0
 801340a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 801340e:	2300      	movs	r3, #0
 8013410:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8013412:	683b      	ldr	r3, [r7, #0]
 8013414:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 8013418:	2300      	movs	r3, #0
 801341a:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 801341c:	68bb      	ldr	r3, [r7, #8]
 801341e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8013422:	2300      	movs	r3, #0
 8013424:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 8013428:	2300      	movs	r3, #0
 801342a:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 801342c:	2314      	movs	r3, #20
 801342e:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 8013430:	2300      	movs	r3, #0
 8013432:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8013434:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013438:	2b00      	cmp	r3, #0
 801343a:	d117      	bne.n	801346c <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 801343c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013440:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8013444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013448:	2238      	movs	r2, #56	@ 0x38
 801344a:	2100      	movs	r1, #0
 801344c:	4618      	mov	r0, r3
 801344e:	f00d fbc6 	bl	8020bde <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8013458:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801345c:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801345e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013462:	225a      	movs	r2, #90	@ 0x5a
 8013464:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8013466:	2300      	movs	r3, #0
 8013468:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 801346c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013470:	2b00      	cmp	r3, #0
 8013472:	d114      	bne.n	801349e <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8013474:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013478:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801347a:	4619      	mov	r1, r3
 801347c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8013480:	f7f6 f83c 	bl	80094fc <pxDuplicateNetworkBufferWithDescriptor>
 8013484:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 8013488:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801348c:	2b00      	cmp	r3, #0
 801348e:	d003      	beq.n	8013498 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 8013490:	2301      	movs	r3, #1
 8013492:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013496:	e002      	b.n	801349e <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8013498:	48bc      	ldr	r0, [pc, #752]	@ (801378c <prvTCPReturnPacket_IPV4+0x398>)
 801349a:	f00d f877 	bl	802058c <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 801349e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	f000 8166 	beq.w	8013774 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80134a8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80134ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134ae:	330e      	adds	r3, #14
 80134b0:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 80134b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80134b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80134b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 80134bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80134c0:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 80134c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80134c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80134c8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80134ca:	330e      	adds	r3, #14
 80134cc:	4413      	add	r3, r2
 80134ce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 80134d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80134d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d10b      	bne.n	80134f4 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 80134dc:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80134de:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80134e2:	68f8      	ldr	r0, [r7, #12]
 80134e4:	f7ff faf6 	bl	8012ad4 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 80134e8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80134ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80134ee:	2b00      	cmp	r3, #0
 80134f0:	f000 813d 	beq.w	801376e <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 80134f4:	68fb      	ldr	r3, [r7, #12]
 80134f6:	2b00      	cmp	r3, #0
 80134f8:	d028      	beq.n	801354c <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 80134fa:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80134fc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013500:	68f8      	ldr	r0, [r7, #12]
 8013502:	f7ff f865 	bl	80125d0 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801350a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801350e:	68f8      	ldr	r0, [r7, #12]
 8013510:	f7ff f8d8 	bl	80126c4 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8013514:	68fb      	ldr	r3, [r7, #12]
 8013516:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013518:	061a      	lsls	r2, r3, #24
 801351a:	68fb      	ldr	r3, [r7, #12]
 801351c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801351e:	021b      	lsls	r3, r3, #8
 8013520:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013524:	431a      	orrs	r2, r3
 8013526:	68fb      	ldr	r3, [r7, #12]
 8013528:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801352a:	0a1b      	lsrs	r3, r3, #8
 801352c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013530:	431a      	orrs	r2, r3
 8013532:	68fb      	ldr	r3, [r7, #12]
 8013534:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013536:	0e1b      	lsrs	r3, r3, #24
 8013538:	431a      	orrs	r2, r3
 801353a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801353c:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 801353e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013544:	681a      	ldr	r2, [r3, #0]
 8013546:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013548:	60da      	str	r2, [r3, #12]
 801354a:	e017      	b.n	801357c <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 801354c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013550:	685b      	ldr	r3, [r3, #4]
 8013552:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013554:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013558:	689a      	ldr	r2, [r3, #8]
 801355a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801355e:	605a      	str	r2, [r3, #4]
 8013560:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013564:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013566:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8013568:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801356a:	691b      	ldr	r3, [r3, #16]
 801356c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801356e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013570:	68da      	ldr	r2, [r3, #12]
 8013572:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013574:	611a      	str	r2, [r3, #16]
 8013576:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013578:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801357a:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 801357c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801357e:	2280      	movs	r2, #128	@ 0x80
 8013580:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8013582:	687b      	ldr	r3, [r7, #4]
 8013584:	b29b      	uxth	r3, r3
 8013586:	021b      	lsls	r3, r3, #8
 8013588:	b29a      	uxth	r2, r3
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	0a1b      	lsrs	r3, r3, #8
 801358e:	b29b      	uxth	r3, r3
 8013590:	4313      	orrs	r3, r2
 8013592:	b29a      	uxth	r2, r3
 8013594:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013596:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 8013598:	4b7d      	ldr	r3, [pc, #500]	@ (8013790 <prvTCPReturnPacket_IPV4+0x39c>)
 801359a:	881b      	ldrh	r3, [r3, #0]
 801359c:	021b      	lsls	r3, r3, #8
 801359e:	b21a      	sxth	r2, r3
 80135a0:	4b7b      	ldr	r3, [pc, #492]	@ (8013790 <prvTCPReturnPacket_IPV4+0x39c>)
 80135a2:	881b      	ldrh	r3, [r3, #0]
 80135a4:	0a1b      	lsrs	r3, r3, #8
 80135a6:	b29b      	uxth	r3, r3
 80135a8:	b21b      	sxth	r3, r3
 80135aa:	4313      	orrs	r3, r2
 80135ac:	b21b      	sxth	r3, r3
 80135ae:	b29a      	uxth	r2, r3
 80135b0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80135b2:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 80135b4:	4b76      	ldr	r3, [pc, #472]	@ (8013790 <prvTCPReturnPacket_IPV4+0x39c>)
 80135b6:	881b      	ldrh	r3, [r3, #0]
 80135b8:	3301      	adds	r3, #1
 80135ba:	b29a      	uxth	r2, r3
 80135bc:	4b74      	ldr	r3, [pc, #464]	@ (8013790 <prvTCPReturnPacket_IPV4+0x39c>)
 80135be:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 80135c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80135c2:	2200      	movs	r2, #0
 80135c4:	719a      	strb	r2, [r3, #6]
 80135c6:	2200      	movs	r2, #0
 80135c8:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 80135ca:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80135ce:	781a      	ldrb	r2, [r3, #0]
 80135d0:	785b      	ldrb	r3, [r3, #1]
 80135d2:	021b      	lsls	r3, r3, #8
 80135d4:	4313      	orrs	r3, r2
 80135d6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80135da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80135de:	885b      	ldrh	r3, [r3, #2]
 80135e0:	b29a      	uxth	r2, r3
 80135e2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80135e6:	801a      	strh	r2, [r3, #0]
 80135e8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80135ec:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 80135f0:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 80135f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80135f6:	687a      	ldr	r2, [r7, #4]
 80135f8:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 80135fa:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80135fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013600:	f103 020e 	add.w	r2, r3, #14
 8013604:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013608:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 801360a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801360c:	3306      	adds	r3, #6
 801360e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8013612:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013614:	691b      	ldr	r3, [r3, #16]
 8013616:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 8013618:	f107 0214 	add.w	r2, r7, #20
 801361c:	f107 011c 	add.w	r1, r7, #28
 8013620:	f107 0318 	add.w	r3, r7, #24
 8013624:	4618      	mov	r0, r3
 8013626:	f7f2 fe9d 	bl	8006364 <eARPGetCacheEntry>
 801362a:	4603      	mov	r3, r0
 801362c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 8013630:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8013634:	2b01      	cmp	r3, #1
 8013636:	d108      	bne.n	801364a <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 8013638:	f107 031c 	add.w	r3, r7, #28
 801363c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8013640:	697a      	ldr	r2, [r7, #20]
 8013642:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013646:	631a      	str	r2, [r3, #48]	@ 0x30
 8013648:	e003      	b.n	8013652 <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 801364a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801364c:	3306      	adds	r3, #6
 801364e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8013652:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013656:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013658:	2b00      	cmp	r3, #0
 801365a:	f000 808a 	beq.w	8013772 <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 801365e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013660:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8013662:	2206      	movs	r2, #6
 8013664:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013668:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 801366a:	f00d f9ab 	bl	80209c4 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 801366e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013674:	33e8      	adds	r3, #232	@ 0xe8
 8013676:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 801367a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801367c:	3306      	adds	r3, #6
 801367e:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8013680:	2206      	movs	r2, #6
 8013682:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013686:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8013688:	f00d f99c 	bl	80209c4 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 801368c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013690:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013692:	2b3b      	cmp	r3, #59	@ 0x3b
 8013694:	d81a      	bhi.n	80136cc <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013696:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801369a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801369c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80136a0:	e00c      	b.n	80136bc <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80136a2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80136a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80136a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80136ac:	4413      	add	r3, r2
 80136ae:	2200      	movs	r2, #0
 80136b0:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80136b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80136b6:	3301      	adds	r3, #1
 80136b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80136bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80136c0:	2b3b      	cmp	r3, #59	@ 0x3b
 80136c2:	ddee      	ble.n	80136a2 <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80136c4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80136c8:	223c      	movs	r2, #60	@ 0x3c
 80136ca:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 80136cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80136d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136d2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80136d6:	2b00      	cmp	r3, #0
 80136d8:	d104      	bne.n	80136e4 <prvTCPReturnPacket_IPV4+0x2f0>
 80136da:	f240 111d 	movw	r1, #285	@ 0x11d
 80136de:	482d      	ldr	r0, [pc, #180]	@ (8013794 <prvTCPReturnPacket_IPV4+0x3a0>)
 80136e0:	f7ed fd26 	bl	8001130 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 80136e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80136e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80136ea:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80136ee:	68db      	ldr	r3, [r3, #12]
 80136f0:	2b00      	cmp	r3, #0
 80136f2:	d104      	bne.n	80136fe <prvTCPReturnPacket_IPV4+0x30a>
 80136f4:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 80136f8:	4826      	ldr	r0, [pc, #152]	@ (8013794 <prvTCPReturnPacket_IPV4+0x3a0>)
 80136fa:	f7ed fd19 	bl	8001130 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80136fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013702:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013704:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013708:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 801370a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801370c:	68db      	ldr	r3, [r3, #12]
 801370e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013712:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013716:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8013718:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 801371a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801371e:	2b00      	cmp	r3, #0
 8013720:	d121      	bne.n	8013766 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8013722:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013726:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 801372a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 801372e:	021b      	lsls	r3, r3, #8
 8013730:	4313      	orrs	r3, r2
 8013732:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8013736:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801373a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 801373c:	b29a      	uxth	r2, r3
 801373e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013742:	845a      	strh	r2, [r3, #34]	@ 0x22
 8013744:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013748:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 801374c:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 801374e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013750:	691a      	ldr	r2, [r3, #16]
 8013752:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013754:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8013756:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013758:	3306      	adds	r3, #6
 801375a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801375c:	2206      	movs	r2, #6
 801375e:	4618      	mov	r0, r3
 8013760:	f00d f930 	bl	80209c4 <memcpy>
 8013764:	e006      	b.n	8013774 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 8013766:	2300      	movs	r3, #0
 8013768:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801376c:	e002      	b.n	8013774 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 801376e:	bf00      	nop
 8013770:	e000      	b.n	8013774 <prvTCPReturnPacket_IPV4+0x380>
                break;
 8013772:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8013774:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013778:	2b01      	cmp	r3, #1
 801377a:	d103      	bne.n	8013784 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801377c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8013780:	f002 fe1a 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
    }
}
 8013784:	bf00      	nop
 8013786:	3798      	adds	r7, #152	@ 0x98
 8013788:	46bd      	mov	sp, r7
 801378a:	bd80      	pop	{r7, pc}
 801378c:	08024e78 	.word	0x08024e78
 8013790:	20000e4c 	.word	0x20000e4c
 8013794:	08024ea0 	.word	0x08024ea0

08013798 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8013798:	b5f0      	push	{r4, r5, r6, r7, lr}
 801379a:	b093      	sub	sp, #76	@ 0x4c
 801379c:	af06      	add	r7, sp, #24
 801379e:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 80137a0:	2301      	movs	r3, #1
 80137a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 80137a4:	2300      	movs	r3, #0
 80137a6:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 80137a8:	f107 030c 	add.w	r3, r7, #12
 80137ac:	2206      	movs	r2, #6
 80137ae:	2100      	movs	r1, #0
 80137b0:	4618      	mov	r0, r3
 80137b2:	f00d fa14 	bl	8020bde <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137ba:	061a      	lsls	r2, r3, #24
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137c0:	021b      	lsls	r3, r3, #8
 80137c2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80137c6:	431a      	orrs	r2, r3
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137cc:	0a1b      	lsrs	r3, r3, #8
 80137ce:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80137d2:	431a      	orrs	r2, r3
 80137d4:	687b      	ldr	r3, [r7, #4]
 80137d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80137d8:	0e1b      	lsrs	r3, r3, #24
 80137da:	4313      	orrs	r3, r2
 80137dc:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 80137e4:	f107 010c 	add.w	r1, r7, #12
 80137e8:	f107 0314 	add.w	r3, r7, #20
 80137ec:	4618      	mov	r0, r3
 80137ee:	f7f2 fdb9 	bl	8006364 <eARPGetCacheEntry>
 80137f2:	4603      	mov	r3, r0
 80137f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 80137f8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80137fc:	2b01      	cmp	r3, #1
 80137fe:	d037      	beq.n	8013870 <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8013800:	687b      	ldr	r3, [r7, #4]
 8013802:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013806:	3301      	adds	r3, #1
 8013808:	b2da      	uxtb	r2, r3
 801380a:	687b      	ldr	r3, [r7, #4]
 801380c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 8013810:	687b      	ldr	r3, [r7, #4]
 8013812:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013814:	697b      	ldr	r3, [r7, #20]
 8013816:	061a      	lsls	r2, r3, #24
 8013818:	697b      	ldr	r3, [r7, #20]
 801381a:	021b      	lsls	r3, r3, #8
 801381c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013820:	431a      	orrs	r2, r3
 8013822:	697b      	ldr	r3, [r7, #20]
 8013824:	0a1b      	lsrs	r3, r3, #8
 8013826:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801382a:	431a      	orrs	r2, r3
 801382c:	697b      	ldr	r3, [r7, #20]
 801382e:	0e1b      	lsrs	r3, r3, #24
 8013830:	431a      	orrs	r2, r3
 8013832:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 8013836:	7b38      	ldrb	r0, [r7, #12]
 8013838:	7b7c      	ldrb	r4, [r7, #13]
 801383a:	7bbd      	ldrb	r5, [r7, #14]
 801383c:	7bfe      	ldrb	r6, [r7, #15]
 801383e:	f897 c010 	ldrb.w	ip, [r7, #16]
 8013842:	f8c7 c000 	str.w	ip, [r7]
 8013846:	f897 c011 	ldrb.w	ip, [r7, #17]
 801384a:	4663      	mov	r3, ip
 801384c:	9305      	str	r3, [sp, #20]
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	9304      	str	r3, [sp, #16]
 8013852:	9603      	str	r6, [sp, #12]
 8013854:	9502      	str	r5, [sp, #8]
 8013856:	9401      	str	r4, [sp, #4]
 8013858:	9000      	str	r0, [sp, #0]
 801385a:	4673      	mov	r3, lr
 801385c:	485a      	ldr	r0, [pc, #360]	@ (80139c8 <prvTCPPrepareConnect_IPV4+0x230>)
 801385e:	f00c fe95 	bl	802058c <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	4618      	mov	r0, r3
 8013866:	f7f2 ffd1 	bl	800680c <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 801386a:	2300      	movs	r3, #0
 801386c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 801386e:	e000      	b.n	8013872 <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 8013870:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8013872:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013874:	2b00      	cmp	r3, #0
 8013876:	d010      	beq.n	801389a <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013884:	687b      	ldr	r3, [r7, #4]
 8013886:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801388a:	f7ed fc71 	bl	8001170 <ulApplicationGetNextSequenceNumber>
 801388e:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8013890:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013892:	2b00      	cmp	r3, #0
 8013894:	d101      	bne.n	801389a <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 8013896:	2300      	movs	r3, #0
 8013898:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 801389a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801389c:	2b00      	cmp	r3, #0
 801389e:	f000 808d 	beq.w	80139bc <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	33aa      	adds	r3, #170	@ 0xaa
 80138a6:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 80138a8:	6a3b      	ldr	r3, [r7, #32]
 80138aa:	330e      	adds	r3, #14
 80138ac:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 80138ae:	687b      	ldr	r3, [r7, #4]
 80138b0:	2200      	movs	r2, #0
 80138b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 80138b6:	687a      	ldr	r2, [r7, #4]
 80138b8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80138bc:	f043 0308 	orr.w	r3, r3, #8
 80138c0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 80138c4:	687b      	ldr	r3, [r7, #4]
 80138c6:	33aa      	adds	r3, #170	@ 0xaa
 80138c8:	225a      	movs	r2, #90	@ 0x5a
 80138ca:	2100      	movs	r1, #0
 80138cc:	4618      	mov	r0, r3
 80138ce:	f00d f986 	bl	8020bde <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 80138d2:	6a3b      	ldr	r3, [r7, #32]
 80138d4:	3306      	adds	r3, #6
 80138d6:	461a      	mov	r2, r3
 80138d8:	f107 030c 	add.w	r3, r7, #12
 80138dc:	6818      	ldr	r0, [r3, #0]
 80138de:	6010      	str	r0, [r2, #0]
 80138e0:	889b      	ldrh	r3, [r3, #4]
 80138e2:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 80138e4:	6a3b      	ldr	r3, [r7, #32]
 80138e6:	2200      	movs	r2, #0
 80138e8:	f042 0208 	orr.w	r2, r2, #8
 80138ec:	731a      	strb	r2, [r3, #12]
 80138ee:	2200      	movs	r2, #0
 80138f0:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 80138f2:	69fb      	ldr	r3, [r7, #28]
 80138f4:	2245      	movs	r2, #69	@ 0x45
 80138f6:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 80138f8:	2338      	movs	r3, #56	@ 0x38
 80138fa:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 80138fc:	8b7b      	ldrh	r3, [r7, #26]
 80138fe:	021b      	lsls	r3, r3, #8
 8013900:	b21a      	sxth	r2, r3
 8013902:	8b7b      	ldrh	r3, [r7, #26]
 8013904:	0a1b      	lsrs	r3, r3, #8
 8013906:	b29b      	uxth	r3, r3
 8013908:	b21b      	sxth	r3, r3
 801390a:	4313      	orrs	r3, r2
 801390c:	b21b      	sxth	r3, r3
 801390e:	b29a      	uxth	r2, r3
 8013910:	69fb      	ldr	r3, [r7, #28]
 8013912:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8013914:	69fb      	ldr	r3, [r7, #28]
 8013916:	2280      	movs	r2, #128	@ 0x80
 8013918:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 801391a:	69fb      	ldr	r3, [r7, #28]
 801391c:	2206      	movs	r2, #6
 801391e:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013924:	061a      	lsls	r2, r3, #24
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801392a:	021b      	lsls	r3, r3, #8
 801392c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013930:	431a      	orrs	r2, r3
 8013932:	687b      	ldr	r3, [r7, #4]
 8013934:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013936:	0a1b      	lsrs	r3, r3, #8
 8013938:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801393c:	431a      	orrs	r2, r3
 801393e:	687b      	ldr	r3, [r7, #4]
 8013940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013942:	0e1b      	lsrs	r3, r3, #24
 8013944:	431a      	orrs	r2, r3
 8013946:	69fb      	ldr	r3, [r7, #28]
 8013948:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013950:	021b      	lsls	r3, r3, #8
 8013952:	b21a      	sxth	r2, r3
 8013954:	687b      	ldr	r3, [r7, #4]
 8013956:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801395a:	0a1b      	lsrs	r3, r3, #8
 801395c:	b29b      	uxth	r3, r3
 801395e:	b21b      	sxth	r3, r3
 8013960:	4313      	orrs	r3, r2
 8013962:	b21b      	sxth	r3, r3
 8013964:	b29a      	uxth	r2, r3
 8013966:	6a3b      	ldr	r3, [r7, #32]
 8013968:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 801396a:	687b      	ldr	r3, [r7, #4]
 801396c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801396e:	021b      	lsls	r3, r3, #8
 8013970:	b21a      	sxth	r2, r3
 8013972:	687b      	ldr	r3, [r7, #4]
 8013974:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013976:	0a1b      	lsrs	r3, r3, #8
 8013978:	b29b      	uxth	r3, r3
 801397a:	b21b      	sxth	r3, r3
 801397c:	4313      	orrs	r3, r2
 801397e:	b21b      	sxth	r3, r3
 8013980:	b29a      	uxth	r2, r3
 8013982:	6a3b      	ldr	r3, [r7, #32]
 8013984:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8013986:	687b      	ldr	r3, [r7, #4]
 8013988:	2200      	movs	r2, #0
 801398a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013992:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8013996:	6a3b      	ldr	r3, [r7, #32]
 8013998:	2250      	movs	r2, #80	@ 0x50
 801399a:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 801399e:	6a3b      	ldr	r3, [r7, #32]
 80139a0:	2202      	movs	r2, #2
 80139a2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 80139a6:	6878      	ldr	r0, [r7, #4]
 80139a8:	f000 fc3c 	bl	8014224 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	f7fe ff2b 	bl	8012808 <prvTCPCreateWindow>
 80139b2:	4603      	mov	r3, r0
 80139b4:	2b01      	cmp	r3, #1
 80139b6:	d001      	beq.n	80139bc <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 80139b8:	2300      	movs	r3, #0
 80139ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 80139bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80139be:	4618      	mov	r0, r3
 80139c0:	3734      	adds	r7, #52	@ 0x34
 80139c2:	46bd      	mov	sp, r7
 80139c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80139c6:	bf00      	nop
 80139c8:	08024ee0 	.word	0x08024ee0

080139cc <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b086      	sub	sp, #24
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	460b      	mov	r3, r1
 80139d6:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80139dc:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 80139de:	2328      	movs	r3, #40	@ 0x28
 80139e0:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 80139e2:	697b      	ldr	r3, [r7, #20]
 80139e4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 80139e8:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 80139ea:	697b      	ldr	r3, [r7, #20]
 80139ec:	78fa      	ldrb	r2, [r7, #3]
 80139ee:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	2250      	movs	r2, #80	@ 0x50
 80139f6:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 80139fa:	7bfb      	ldrb	r3, [r7, #15]
 80139fc:	f003 0302 	and.w	r3, r3, #2
 8013a00:	2b00      	cmp	r3, #0
 8013a02:	d02c      	beq.n	8013a5e <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8013a04:	697b      	ldr	r3, [r7, #20]
 8013a06:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8013a0a:	061a      	lsls	r2, r3, #24
 8013a0c:	697b      	ldr	r3, [r7, #20]
 8013a0e:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8013a12:	021b      	lsls	r3, r3, #8
 8013a14:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013a18:	431a      	orrs	r2, r3
 8013a1a:	697b      	ldr	r3, [r7, #20]
 8013a1c:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8013a20:	0a1b      	lsrs	r3, r3, #8
 8013a22:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013a26:	431a      	orrs	r2, r3
 8013a28:	697b      	ldr	r3, [r7, #20]
 8013a2a:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8013a2e:	0e1b      	lsrs	r3, r3, #24
 8013a30:	4313      	orrs	r3, r2
 8013a32:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8013a34:	68bb      	ldr	r3, [r7, #8]
 8013a36:	3301      	adds	r3, #1
 8013a38:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 8013a3a:	68bb      	ldr	r3, [r7, #8]
 8013a3c:	061a      	lsls	r2, r3, #24
 8013a3e:	68bb      	ldr	r3, [r7, #8]
 8013a40:	021b      	lsls	r3, r3, #8
 8013a42:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013a46:	431a      	orrs	r2, r3
 8013a48:	68bb      	ldr	r3, [r7, #8]
 8013a4a:	0a1b      	lsrs	r3, r3, #8
 8013a4c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013a50:	431a      	orrs	r2, r3
 8013a52:	68bb      	ldr	r3, [r7, #8]
 8013a54:	0e1b      	lsrs	r3, r3, #24
 8013a56:	431a      	orrs	r2, r3
 8013a58:	697b      	ldr	r3, [r7, #20]
 8013a5a:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8013a5e:	2300      	movs	r3, #0
 8013a60:	693a      	ldr	r2, [r7, #16]
 8013a62:	6879      	ldr	r1, [r7, #4]
 8013a64:	2000      	movs	r0, #0
 8013a66:	f7fe fd73 	bl	8012550 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 8013a6a:	2300      	movs	r3, #0
}
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	3718      	adds	r7, #24
 8013a70:	46bd      	mov	sp, r7
 8013a72:	bd80      	pop	{r7, pc}

08013a74 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8013a74:	b5b0      	push	{r4, r5, r7, lr}
 8013a76:	b0aa      	sub	sp, #168	@ 0xa8
 8013a78:	af00      	add	r7, sp, #0
 8013a7a:	60f8      	str	r0, [r7, #12]
 8013a7c:	60b9      	str	r1, [r7, #8]
 8013a7e:	607a      	str	r2, [r7, #4]
 8013a80:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8013a82:	2300      	movs	r3, #0
 8013a84:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8013a88:	2300      	movs	r3, #0
 8013a8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8013a8e:	2300      	movs	r3, #0
 8013a90:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8013a94:	683b      	ldr	r3, [r7, #0]
 8013a96:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 8013a9a:	2300      	movs	r3, #0
 8013a9c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8013aa0:	68bb      	ldr	r3, [r7, #8]
 8013aa2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8013aa6:	2300      	movs	r3, #0
 8013aa8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 8013aac:	2300      	movs	r3, #0
 8013aae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 8013ab2:	2328      	movs	r3, #40	@ 0x28
 8013ab4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 8013ab8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013abc:	2b00      	cmp	r3, #0
 8013abe:	d103      	bne.n	8013ac8 <prvTCPReturnPacket_IPV6+0x54>
 8013ac0:	68fb      	ldr	r3, [r7, #12]
 8013ac2:	2b00      	cmp	r3, #0
 8013ac4:	f000 81ae 	beq.w	8013e24 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8013ac8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d117      	bne.n	8013b00 <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 8013ad0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013ad4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8013ad8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013adc:	2238      	movs	r2, #56	@ 0x38
 8013ade:	2100      	movs	r1, #0
 8013ae0:	4618      	mov	r0, r3
 8013ae2:	f00d f87c 	bl	8020bde <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8013aec:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013af0:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013af2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013af6:	225a      	movs	r2, #90	@ 0x5a
 8013af8:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8013afa:	2300      	movs	r3, #0
 8013afc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8013b00:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013b04:	2b00      	cmp	r3, #0
 8013b06:	d114      	bne.n	8013b32 <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8013b08:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013b0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b0e:	4619      	mov	r1, r3
 8013b10:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8013b14:	f7f5 fcf2 	bl	80094fc <pxDuplicateNetworkBufferWithDescriptor>
 8013b18:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 8013b1c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013b20:	2b00      	cmp	r3, #0
 8013b22:	d003      	beq.n	8013b2c <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 8013b24:	2301      	movs	r3, #1
 8013b26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013b2a:	e002      	b.n	8013b32 <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8013b2c:	48c0      	ldr	r0, [pc, #768]	@ (8013e30 <prvTCPReturnPacket_IPV6+0x3bc>)
 8013b2e:	f00c fd2d 	bl	802058c <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8013b32:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013b36:	2b00      	cmp	r3, #0
 8013b38:	f000 8175 	beq.w	8013e26 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8013b3c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013b40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b42:	2b00      	cmp	r3, #0
 8013b44:	d103      	bne.n	8013b4e <prvTCPReturnPacket_IPV6+0xda>
 8013b46:	219d      	movs	r1, #157	@ 0x9d
 8013b48:	48ba      	ldr	r0, [pc, #744]	@ (8013e34 <prvTCPReturnPacket_IPV6+0x3c0>)
 8013b4a:	f7ed faf1 	bl	8001130 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013b4e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013b52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b54:	330e      	adds	r3, #14
 8013b56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8013b5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013b60:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8013b64:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013b68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8013b6c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013b70:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013b72:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013b76:	330e      	adds	r3, #14
 8013b78:	4413      	add	r3, r2
 8013b7a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8013b7e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013b82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d117      	bne.n	8013bb8 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013b88:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013b8c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8013b90:	68f8      	ldr	r0, [r7, #12]
 8013b92:	f7fe ff9f 	bl	8012ad4 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8013b96:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013b9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b9c:	2b00      	cmp	r3, #0
 8013b9e:	d10b      	bne.n	8013bb8 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 8013ba0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d003      	beq.n	8013bb0 <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013ba8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8013bac:	f002 fc04 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 8013bb0:	2300      	movs	r3, #0
 8013bb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8013bb6:	e136      	b.n	8013e26 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 8013bb8:	68fb      	ldr	r3, [r7, #12]
 8013bba:	2b00      	cmp	r3, #0
 8013bbc:	d025      	beq.n	8013c0a <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013bbe:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013bc2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8013bc6:	68f8      	ldr	r0, [r7, #12]
 8013bc8:	f7fe fd02 	bl	80125d0 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013bd2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8013bd6:	68f8      	ldr	r0, [r7, #12]
 8013bd8:	f7fe fd74 	bl	80126c4 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013bdc:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013be0:	f103 0018 	add.w	r0, r3, #24
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	3354      	adds	r3, #84	@ 0x54
 8013be8:	2210      	movs	r2, #16
 8013bea:	4619      	mov	r1, r3
 8013bec:	f00c feea 	bl	80209c4 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013bf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013bf4:	f103 0008 	add.w	r0, r3, #8
 8013bf8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013bfe:	3338      	adds	r3, #56	@ 0x38
 8013c00:	2210      	movs	r2, #16
 8013c02:	4619      	mov	r1, r3
 8013c04:	f00c fede 	bl	80209c4 <memcpy>
 8013c08:	e02d      	b.n	8013c66 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 8013c0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c0e:	685b      	ldr	r3, [r3, #4]
 8013c10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8013c12:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c16:	689a      	ldr	r2, [r3, #8]
 8013c18:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c1c:	605a      	str	r2, [r3, #4]
 8013c1e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c22:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8013c24:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013c26:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c2a:	3318      	adds	r3, #24
 8013c2c:	f107 0410 	add.w	r4, r7, #16
 8013c30:	6818      	ldr	r0, [r3, #0]
 8013c32:	6859      	ldr	r1, [r3, #4]
 8013c34:	689a      	ldr	r2, [r3, #8]
 8013c36:	68db      	ldr	r3, [r3, #12]
 8013c38:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013c3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c3e:	f103 0018 	add.w	r0, r3, #24
 8013c42:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c46:	3308      	adds	r3, #8
 8013c48:	2210      	movs	r2, #16
 8013c4a:	4619      	mov	r1, r3
 8013c4c:	f00c feba 	bl	80209c4 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013c50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c54:	3308      	adds	r3, #8
 8013c56:	461d      	mov	r5, r3
 8013c58:	f107 0410 	add.w	r4, r7, #16
 8013c5c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8013c5e:	6028      	str	r0, [r5, #0]
 8013c60:	6069      	str	r1, [r5, #4]
 8013c62:	60aa      	str	r2, [r5, #8]
 8013c64:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 8013c66:	687b      	ldr	r3, [r7, #4]
 8013c68:	b29b      	uxth	r3, r3
 8013c6a:	3b28      	subs	r3, #40	@ 0x28
 8013c6c:	b29b      	uxth	r3, r3
 8013c6e:	021b      	lsls	r3, r3, #8
 8013c70:	b29a      	uxth	r2, r3
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	3b28      	subs	r3, #40	@ 0x28
 8013c76:	0a1b      	lsrs	r3, r3, #8
 8013c78:	b29b      	uxth	r3, r3
 8013c7a:	4313      	orrs	r3, r2
 8013c7c:	b29a      	uxth	r2, r3
 8013c7e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013c82:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8013c84:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c88:	781a      	ldrb	r2, [r3, #0]
 8013c8a:	785b      	ldrb	r3, [r3, #1]
 8013c8c:	021b      	lsls	r3, r3, #8
 8013c8e:	4313      	orrs	r3, r2
 8013c90:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 8013c94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013c98:	885b      	ldrh	r3, [r3, #2]
 8013c9a:	b29a      	uxth	r2, r3
 8013c9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013ca0:	801a      	strh	r2, [r3, #0]
 8013ca2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013ca6:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8013caa:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8013cac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cb0:	687a      	ldr	r2, [r7, #4]
 8013cb2:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8013cb4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cb8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013cba:	f103 020e 	add.w	r2, r3, #14
 8013cbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cc2:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013cc4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013cc8:	3318      	adds	r3, #24
 8013cca:	f107 0420 	add.w	r4, r7, #32
 8013cce:	6818      	ldr	r0, [r3, #0]
 8013cd0:	6859      	ldr	r1, [r3, #4]
 8013cd2:	689a      	ldr	r2, [r3, #8]
 8013cd4:	68db      	ldr	r3, [r3, #12]
 8013cd6:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 8013cd8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013cdc:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 8013ce0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8013ce4:	f107 0320 	add.w	r3, r7, #32
 8013ce8:	4618      	mov	r0, r3
 8013cea:	f7f6 ffa7 	bl	800ac3c <eNDGetCacheEntry>
 8013cee:	4603      	mov	r3, r0
 8013cf0:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 8013cf4:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8013cf8:	2b01      	cmp	r3, #1
 8013cfa:	d104      	bne.n	8013d06 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 8013cfc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8013d00:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8013d04:	e004      	b.n	8013d10 <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8013d06:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013d0a:	3306      	adds	r3, #6
 8013d0c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8013d10:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013d14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8013d18:	2206      	movs	r2, #6
 8013d1a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8013d1e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8013d22:	f00c fe4f 	bl	80209c4 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8013d26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d2c:	33e8      	adds	r3, #232	@ 0xe8
 8013d2e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8013d32:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013d36:	3306      	adds	r3, #6
 8013d38:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8013d3c:	2206      	movs	r2, #6
 8013d3e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8013d42:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8013d46:	f00c fe3d 	bl	80209c4 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8013d4a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d50:	2b3b      	cmp	r3, #59	@ 0x3b
 8013d52:	d81a      	bhi.n	8013d8a <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013d54:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d58:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013d5a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013d5e:	e00c      	b.n	8013d7a <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8013d60:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d64:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013d66:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013d6a:	4413      	add	r3, r2
 8013d6c:	2200      	movs	r2, #0
 8013d6e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013d70:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013d74:	3301      	adds	r3, #1
 8013d76:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8013d7a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8013d7e:	2b3b      	cmp	r3, #59	@ 0x3b
 8013d80:	ddee      	ble.n	8013d60 <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8013d82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d86:	223c      	movs	r2, #60	@ 0x3c
 8013d88:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8013d8a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013d8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013d90:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013d94:	2b00      	cmp	r3, #0
 8013d96:	d104      	bne.n	8013da2 <prvTCPReturnPacket_IPV6+0x32e>
 8013d98:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8013d9c:	4825      	ldr	r0, [pc, #148]	@ (8013e34 <prvTCPReturnPacket_IPV6+0x3c0>)
 8013d9e:	f7ed f9c7 	bl	8001130 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8013da2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013da6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013da8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013dac:	68db      	ldr	r3, [r3, #12]
 8013dae:	2b00      	cmp	r3, #0
 8013db0:	d104      	bne.n	8013dbc <prvTCPReturnPacket_IPV6+0x348>
 8013db2:	f240 1119 	movw	r1, #281	@ 0x119
 8013db6:	481f      	ldr	r0, [pc, #124]	@ (8013e34 <prvTCPReturnPacket_IPV6+0x3c0>)
 8013db8:	f7ed f9ba 	bl	8001130 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8013dbc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013dc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013dc2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013dc6:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8013dc8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013dca:	68db      	ldr	r3, [r3, #12]
 8013dcc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 8013dd0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8013dd4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8013dd6:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8013dd8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d122      	bne.n	8013e26 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8013de0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013de4:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 8013de8:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 8013dec:	021b      	lsls	r3, r3, #8
 8013dee:	4313      	orrs	r3, r2
 8013df0:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8013df4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013df8:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013dfa:	b29a      	uxth	r2, r3
 8013dfc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013e00:	86da      	strh	r2, [r3, #54]	@ 0x36
 8013e02:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013e06:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 8013e0a:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013e0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013e10:	f103 0008 	add.w	r0, r3, #8
 8013e14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013e18:	3318      	adds	r3, #24
 8013e1a:	2210      	movs	r2, #16
 8013e1c:	4619      	mov	r1, r3
 8013e1e:	f00c fdd1 	bl	80209c4 <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 8013e22:	e000      	b.n	8013e26 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 8013e24:	bf00      	nop
}
 8013e26:	bf00      	nop
 8013e28:	37a8      	adds	r7, #168	@ 0xa8
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bdb0      	pop	{r4, r5, r7, pc}
 8013e2e:	bf00      	nop
 8013e30:	08024f20 	.word	0x08024f20
 8013e34:	08024f48 	.word	0x08024f48

08013e38 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8013e38:	b590      	push	{r4, r7, lr}
 8013e3a:	b093      	sub	sp, #76	@ 0x4c
 8013e3c:	af00      	add	r7, sp, #0
 8013e3e:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8013e40:	2300      	movs	r3, #0
 8013e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8013e44:	2300      	movs	r3, #0
 8013e46:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8013e48:	2301      	movs	r3, #1
 8013e4a:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 8013e4c:	2300      	movs	r3, #0
 8013e4e:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8013e50:	2300      	movs	r3, #0
 8013e52:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 8013e54:	2300      	movs	r3, #0
 8013e56:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8013e58:	f107 0310 	add.w	r3, r7, #16
 8013e5c:	2206      	movs	r2, #6
 8013e5e:	2100      	movs	r1, #0
 8013e60:	4618      	mov	r0, r3
 8013e62:	f00c febc 	bl	8020bde <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 8013e66:	f107 0318 	add.w	r3, r7, #24
 8013e6a:	2210      	movs	r2, #16
 8013e6c:	2100      	movs	r1, #0
 8013e6e:	4618      	mov	r0, r3
 8013e70:	f00c feb5 	bl	8020bde <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013e74:	687b      	ldr	r3, [r7, #4]
 8013e76:	3354      	adds	r3, #84	@ 0x54
 8013e78:	f107 0418 	add.w	r4, r7, #24
 8013e7c:	6818      	ldr	r0, [r3, #0]
 8013e7e:	6859      	ldr	r1, [r3, #4]
 8013e80:	689a      	ldr	r2, [r3, #8]
 8013e82:	68db      	ldr	r3, [r3, #12]
 8013e84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 8013e86:	f107 020c 	add.w	r2, r7, #12
 8013e8a:	f107 0110 	add.w	r1, r7, #16
 8013e8e:	f107 0318 	add.w	r3, r7, #24
 8013e92:	4618      	mov	r0, r3
 8013e94:	f7f6 fed2 	bl	800ac3c <eNDGetCacheEntry>
 8013e98:	4603      	mov	r3, r0
 8013e9a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 8013e9e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013ea2:	68fa      	ldr	r2, [r7, #12]
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	4881      	ldr	r0, [pc, #516]	@ (80140ac <prvTCPPrepareConnect_IPV6+0x274>)
 8013ea8:	f00c fb70 	bl	802058c <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d002      	beq.n	8013eb8 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8013eb2:	68fa      	ldr	r2, [r7, #12]
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013eb8:	6878      	ldr	r0, [r7, #4]
 8013eba:	f7f5 f887 	bl	8008fcc <uxIPHeaderSizeSocket>
 8013ebe:	4603      	mov	r3, r0
 8013ec0:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013ec2:	33a0      	adds	r3, #160	@ 0xa0
 8013ec4:	687a      	ldr	r2, [r7, #4]
 8013ec6:	4413      	add	r3, r2
 8013ec8:	330a      	adds	r3, #10
 8013eca:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 8013ecc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8013ed0:	2b01      	cmp	r3, #1
 8013ed2:	d02c      	beq.n	8013f2e <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8013ed4:	687b      	ldr	r3, [r7, #4]
 8013ed6:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013eda:	3301      	adds	r3, #1
 8013edc:	b2da      	uxtb	r2, r3
 8013ede:	687b      	ldr	r3, [r7, #4]
 8013ee0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 8013ee4:	68fb      	ldr	r3, [r7, #12]
 8013ee6:	2b00      	cmp	r3, #0
 8013ee8:	d001      	beq.n	8013eee <prvTCPPrepareConnect_IPV6+0xb6>
 8013eea:	4a71      	ldr	r2, [pc, #452]	@ (80140b0 <prvTCPPrepareConnect_IPV6+0x278>)
 8013eec:	e000      	b.n	8013ef0 <prvTCPPrepareConnect_IPV6+0xb8>
 8013eee:	4a71      	ldr	r2, [pc, #452]	@ (80140b4 <prvTCPPrepareConnect_IPV6+0x27c>)
 8013ef0:	f107 0318 	add.w	r3, r7, #24
 8013ef4:	4619      	mov	r1, r3
 8013ef6:	4870      	ldr	r0, [pc, #448]	@ (80140b8 <prvTCPPrepareConnect_IPV6+0x280>)
 8013ef8:	f00c fb48 	bl	802058c <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 8013efc:	68fb      	ldr	r3, [r7, #12]
 8013efe:	2b00      	cmp	r3, #0
 8013f00:	d012      	beq.n	8013f28 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 8013f02:	2356      	movs	r3, #86	@ 0x56
 8013f04:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 8013f06:	2100      	movs	r1, #0
 8013f08:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8013f0a:	f002 f9ed 	bl	80162e8 <pxGetNetworkBufferWithDescriptor>
 8013f0e:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 8013f10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f12:	2b00      	cmp	r3, #0
 8013f14:	d008      	beq.n	8013f28 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8013f16:	68fa      	ldr	r2, [r7, #12]
 8013f18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f1a:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 8013f1c:	f107 0318 	add.w	r3, r7, #24
 8013f20:	4619      	mov	r1, r3
 8013f22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8013f24:	f7f7 f8f6 	bl	800b114 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 8013f28:	2300      	movs	r3, #0
 8013f2a:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 8013f2c:	e000      	b.n	8013f30 <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 8013f2e:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8013f30:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f32:	2b00      	cmp	r3, #0
 8013f34:	d010      	beq.n	8013f58 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8013f36:	687b      	ldr	r3, [r7, #4]
 8013f38:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013f42:	687b      	ldr	r3, [r7, #4]
 8013f44:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013f48:	f7ed f912 	bl	8001170 <ulApplicationGetNextSequenceNumber>
 8013f4c:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8013f4e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013f50:	2b00      	cmp	r3, #0
 8013f52:	d101      	bne.n	8013f58 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 8013f54:	2300      	movs	r3, #0
 8013f56:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 8013f58:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d05d      	beq.n	801401a <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	33aa      	adds	r3, #170	@ 0xaa
 8013f62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 8013f64:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f66:	330e      	adds	r3, #14
 8013f68:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 8013f6a:	687b      	ldr	r3, [r7, #4]
 8013f6c:	2200      	movs	r2, #0
 8013f6e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8013f72:	687a      	ldr	r2, [r7, #4]
 8013f74:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013f78:	f043 0308 	orr.w	r3, r3, #8
 8013f7c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	33aa      	adds	r3, #170	@ 0xaa
 8013f84:	225a      	movs	r2, #90	@ 0x5a
 8013f86:	2100      	movs	r1, #0
 8013f88:	4618      	mov	r0, r3
 8013f8a:	f00c fe28 	bl	8020bde <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8013f8e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013f90:	3306      	adds	r3, #6
 8013f92:	461a      	mov	r2, r3
 8013f94:	f107 0310 	add.w	r3, r7, #16
 8013f98:	6818      	ldr	r0, [r3, #0]
 8013f9a:	6010      	str	r0, [r2, #0]
 8013f9c:	889b      	ldrh	r3, [r3, #4]
 8013f9e:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 8013fa0:	687b      	ldr	r3, [r7, #4]
 8013fa2:	7a1b      	ldrb	r3, [r3, #8]
 8013fa4:	f003 0301 	and.w	r3, r3, #1
 8013fa8:	b2db      	uxtb	r3, r3
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d035      	beq.n	801401a <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 8013fae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013fb0:	2200      	movs	r2, #0
 8013fb2:	f062 0279 	orn	r2, r2, #121	@ 0x79
 8013fb6:	731a      	strb	r2, [r3, #12]
 8013fb8:	2200      	movs	r2, #0
 8013fba:	f062 0222 	orn	r2, r2, #34	@ 0x22
 8013fbe:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 8013fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fc2:	2260      	movs	r2, #96	@ 0x60
 8013fc4:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 8013fc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fc8:	2200      	movs	r2, #0
 8013fca:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 8013fcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fce:	2200      	movs	r2, #0
 8013fd0:	709a      	strb	r2, [r3, #2]
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 8013fd6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fd8:	2200      	movs	r2, #0
 8013fda:	711a      	strb	r2, [r3, #4]
 8013fdc:	2200      	movs	r2, #0
 8013fde:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 8013fe2:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 8013fe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fe6:	2206      	movs	r2, #6
 8013fe8:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 8013fea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013fec:	2280      	movs	r2, #128	@ 0x80
 8013fee:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 8013ff0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013ff2:	f103 0008 	add.w	r0, r3, #8
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	3354      	adds	r3, #84	@ 0x54
 8013ffa:	2210      	movs	r2, #16
 8013ffc:	4619      	mov	r1, r3
 8013ffe:	f00c fce1 	bl	80209c4 <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 8014002:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014004:	f103 0018 	add.w	r0, r3, #24
 8014008:	687b      	ldr	r3, [r7, #4]
 801400a:	3328      	adds	r3, #40	@ 0x28
 801400c:	2210      	movs	r2, #16
 801400e:	4619      	mov	r1, r3
 8014010:	f00c fcd8 	bl	80209c4 <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 8014014:	687b      	ldr	r3, [r7, #4]
 8014016:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014018:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 801401a:	68fb      	ldr	r3, [r7, #12]
 801401c:	2b00      	cmp	r3, #0
 801401e:	d03a      	beq.n	8014096 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8014020:	68fa      	ldr	r2, [r7, #12]
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801402c:	021b      	lsls	r3, r3, #8
 801402e:	b21a      	sxth	r2, r3
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014036:	0a1b      	lsrs	r3, r3, #8
 8014038:	b29b      	uxth	r3, r3
 801403a:	b21b      	sxth	r3, r3
 801403c:	4313      	orrs	r3, r2
 801403e:	b21b      	sxth	r3, r3
 8014040:	b29a      	uxth	r2, r3
 8014042:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014044:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801404a:	021b      	lsls	r3, r3, #8
 801404c:	b21a      	sxth	r2, r3
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014052:	0a1b      	lsrs	r3, r3, #8
 8014054:	b29b      	uxth	r3, r3
 8014056:	b21b      	sxth	r3, r3
 8014058:	4313      	orrs	r3, r2
 801405a:	b21b      	sxth	r3, r3
 801405c:	b29a      	uxth	r2, r3
 801405e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014060:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8014062:	687b      	ldr	r3, [r7, #4]
 8014064:	2200      	movs	r2, #0
 8014066:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801406a:	687b      	ldr	r3, [r7, #4]
 801406c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801406e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 8014072:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014074:	2250      	movs	r2, #80	@ 0x50
 8014076:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 8014078:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801407a:	2202      	movs	r2, #2
 801407c:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 801407e:	6878      	ldr	r0, [r7, #4]
 8014080:	f000 f8d0 	bl	8014224 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8014084:	6878      	ldr	r0, [r7, #4]
 8014086:	f7fe fbbf 	bl	8012808 <prvTCPCreateWindow>
 801408a:	4603      	mov	r3, r0
 801408c:	2b01      	cmp	r3, #1
 801408e:	d007      	beq.n	80140a0 <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 8014090:	2300      	movs	r3, #0
 8014092:	647b      	str	r3, [r7, #68]	@ 0x44
 8014094:	e004      	b.n	80140a0 <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 8014096:	4809      	ldr	r0, [pc, #36]	@ (80140bc <prvTCPPrepareConnect_IPV6+0x284>)
 8014098:	f00c fa78 	bl	802058c <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 801409c:	2300      	movs	r3, #0
 801409e:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 80140a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80140a2:	4618      	mov	r0, r3
 80140a4:	374c      	adds	r7, #76	@ 0x4c
 80140a6:	46bd      	mov	sp, r7
 80140a8:	bd90      	pop	{r4, r7, pc}
 80140aa:	bf00      	nop
 80140ac:	08024f88 	.word	0x08024f88
 80140b0:	08024fb0 	.word	0x08024fb0
 80140b4:	08024fb4 	.word	0x08024fb4
 80140b8:	08024fb8 	.word	0x08024fb8
 80140bc:	08024fdc 	.word	0x08024fdc

080140c0 <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 80140c0:	b580      	push	{r7, lr}
 80140c2:	b086      	sub	sp, #24
 80140c4:	af00      	add	r7, sp, #0
 80140c6:	6078      	str	r0, [r7, #4]
 80140c8:	460b      	mov	r3, r1
 80140ca:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80140cc:	687b      	ldr	r3, [r7, #4]
 80140ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80140d0:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 80140d2:	233c      	movs	r3, #60	@ 0x3c
 80140d4:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 80140d6:	697b      	ldr	r3, [r7, #20]
 80140d8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80140dc:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 80140de:	697b      	ldr	r3, [r7, #20]
 80140e0:	78fa      	ldrb	r2, [r7, #3]
 80140e2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80140e6:	697b      	ldr	r3, [r7, #20]
 80140e8:	2250      	movs	r2, #80	@ 0x50
 80140ea:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 80140ee:	7bfb      	ldrb	r3, [r7, #15]
 80140f0:	f003 0302 	and.w	r3, r3, #2
 80140f4:	2b00      	cmp	r3, #0
 80140f6:	d02c      	beq.n	8014152 <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 80140f8:	697b      	ldr	r3, [r7, #20]
 80140fa:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 80140fe:	061a      	lsls	r2, r3, #24
 8014100:	697b      	ldr	r3, [r7, #20]
 8014102:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014106:	021b      	lsls	r3, r3, #8
 8014108:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801410c:	431a      	orrs	r2, r3
 801410e:	697b      	ldr	r3, [r7, #20]
 8014110:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014114:	0a1b      	lsrs	r3, r3, #8
 8014116:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801411a:	431a      	orrs	r2, r3
 801411c:	697b      	ldr	r3, [r7, #20]
 801411e:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014122:	0e1b      	lsrs	r3, r3, #24
 8014124:	4313      	orrs	r3, r2
 8014126:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8014128:	68bb      	ldr	r3, [r7, #8]
 801412a:	3301      	adds	r3, #1
 801412c:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 801412e:	68bb      	ldr	r3, [r7, #8]
 8014130:	061a      	lsls	r2, r3, #24
 8014132:	68bb      	ldr	r3, [r7, #8]
 8014134:	021b      	lsls	r3, r3, #8
 8014136:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801413a:	431a      	orrs	r2, r3
 801413c:	68bb      	ldr	r3, [r7, #8]
 801413e:	0a1b      	lsrs	r3, r3, #8
 8014140:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014144:	431a      	orrs	r2, r3
 8014146:	68bb      	ldr	r3, [r7, #8]
 8014148:	0e1b      	lsrs	r3, r3, #24
 801414a:	431a      	orrs	r2, r3
 801414c:	697b      	ldr	r3, [r7, #20]
 801414e:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8014152:	2300      	movs	r3, #0
 8014154:	693a      	ldr	r2, [r7, #16]
 8014156:	6879      	ldr	r1, [r7, #4]
 8014158:	2000      	movs	r0, #0
 801415a:	f7fe f9f9 	bl	8012550 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 801415e:	2300      	movs	r3, #0
}
 8014160:	4618      	mov	r0, r3
 8014162:	3718      	adds	r7, #24
 8014164:	46bd      	mov	sp, r7
 8014166:	bd80      	pop	{r7, pc}

08014168 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 8014168:	b5f0      	push	{r4, r5, r6, r7, lr}
 801416a:	b08d      	sub	sp, #52	@ 0x34
 801416c:	af08      	add	r7, sp, #32
 801416e:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 8014170:	687b      	ldr	r3, [r7, #4]
 8014172:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 8014174:	68fb      	ldr	r3, [r7, #12]
 8014176:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 801417a:	2b00      	cmp	r3, #0
 801417c:	d002      	beq.n	8014184 <prvTCPFlagMeaning+0x1c>
 801417e:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 8014182:	e001      	b.n	8014188 <prvTCPFlagMeaning+0x20>
 8014184:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 801418e:	2b00      	cmp	r3, #0
 8014190:	d001      	beq.n	8014196 <prvTCPFlagMeaning+0x2e>
 8014192:	2353      	movs	r3, #83	@ 0x53
 8014194:	e000      	b.n	8014198 <prvTCPFlagMeaning+0x30>
 8014196:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 8014198:	68fa      	ldr	r2, [r7, #12]
 801419a:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 801419e:	2a00      	cmp	r2, #0
 80141a0:	d001      	beq.n	80141a6 <prvTCPFlagMeaning+0x3e>
 80141a2:	2252      	movs	r2, #82	@ 0x52
 80141a4:	e000      	b.n	80141a8 <prvTCPFlagMeaning+0x40>
 80141a6:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 80141a8:	68f9      	ldr	r1, [r7, #12]
 80141aa:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 80141ae:	2900      	cmp	r1, #0
 80141b0:	d001      	beq.n	80141b6 <prvTCPFlagMeaning+0x4e>
 80141b2:	2150      	movs	r1, #80	@ 0x50
 80141b4:	e000      	b.n	80141b8 <prvTCPFlagMeaning+0x50>
 80141b6:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 80141b8:	68f8      	ldr	r0, [r7, #12]
 80141ba:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 80141be:	2800      	cmp	r0, #0
 80141c0:	d001      	beq.n	80141c6 <prvTCPFlagMeaning+0x5e>
 80141c2:	2041      	movs	r0, #65	@ 0x41
 80141c4:	e000      	b.n	80141c8 <prvTCPFlagMeaning+0x60>
 80141c6:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 80141c8:	68fc      	ldr	r4, [r7, #12]
 80141ca:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 80141ce:	2c00      	cmp	r4, #0
 80141d0:	d001      	beq.n	80141d6 <prvTCPFlagMeaning+0x6e>
 80141d2:	2455      	movs	r4, #85	@ 0x55
 80141d4:	e000      	b.n	80141d8 <prvTCPFlagMeaning+0x70>
 80141d6:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 80141d8:	68fd      	ldr	r5, [r7, #12]
 80141da:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 80141de:	2d00      	cmp	r5, #0
 80141e0:	d001      	beq.n	80141e6 <prvTCPFlagMeaning+0x7e>
 80141e2:	2545      	movs	r5, #69	@ 0x45
 80141e4:	e000      	b.n	80141e8 <prvTCPFlagMeaning+0x80>
 80141e6:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 80141e8:	68fe      	ldr	r6, [r7, #12]
 80141ea:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 80141ee:	2e00      	cmp	r6, #0
 80141f0:	d001      	beq.n	80141f6 <prvTCPFlagMeaning+0x8e>
 80141f2:	2643      	movs	r6, #67	@ 0x43
 80141f4:	e000      	b.n	80141f8 <prvTCPFlagMeaning+0x90>
 80141f6:	262e      	movs	r6, #46	@ 0x2e
 80141f8:	9606      	str	r6, [sp, #24]
 80141fa:	9505      	str	r5, [sp, #20]
 80141fc:	9404      	str	r4, [sp, #16]
 80141fe:	9003      	str	r0, [sp, #12]
 8014200:	9102      	str	r1, [sp, #8]
 8014202:	9201      	str	r2, [sp, #4]
 8014204:	9300      	str	r3, [sp, #0]
 8014206:	4663      	mov	r3, ip
 8014208:	4a04      	ldr	r2, [pc, #16]	@ (801421c <prvTCPFlagMeaning+0xb4>)
 801420a:	210a      	movs	r1, #10
 801420c:	4804      	ldr	r0, [pc, #16]	@ (8014220 <prvTCPFlagMeaning+0xb8>)
 801420e:	f00d f9e9 	bl	80215e4 <snprintf>
            return retString;
 8014212:	4b03      	ldr	r3, [pc, #12]	@ (8014220 <prvTCPFlagMeaning+0xb8>)
        }
 8014214:	4618      	mov	r0, r3
 8014216:	3714      	adds	r7, #20
 8014218:	46bd      	mov	sp, r7
 801421a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801421c:	08025008 	.word	0x08025008
 8014220:	200012d0 	.word	0x200012d0

08014224 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 8014224:	b580      	push	{r7, lr}
 8014226:	b082      	sub	sp, #8
 8014228:	af00      	add	r7, sp, #0
 801422a:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801422c:	687b      	ldr	r3, [r7, #4]
 801422e:	7a1b      	ldrb	r3, [r3, #8]
 8014230:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014234:	b2db      	uxtb	r3, r3
 8014236:	2b00      	cmp	r3, #0
 8014238:	d002      	beq.n	8014240 <prvSocketSetMSS+0x1c>
 801423a:	2b01      	cmp	r3, #1
 801423c:	d004      	beq.n	8014248 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 801423e:	e007      	b.n	8014250 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 8014240:	6878      	ldr	r0, [r7, #4]
 8014242:	f000 f809 	bl	8014258 <prvSocketSetMSS_IPV4>
                    break;
 8014246:	e003      	b.n	8014250 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 8014248:	6878      	ldr	r0, [r7, #4]
 801424a:	f000 f84b 	bl	80142e4 <prvSocketSetMSS_IPV6>
                    break;
 801424e:	bf00      	nop
        }
    }
 8014250:	bf00      	nop
 8014252:	3708      	adds	r7, #8
 8014254:	46bd      	mov	sp, r7
 8014256:	bd80      	pop	{r7, pc}

08014258 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8014258:	b580      	push	{r7, lr}
 801425a:	b084      	sub	sp, #16
 801425c:	af00      	add	r7, sp, #0
 801425e:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8014260:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014264:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801426a:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 801426c:	68bb      	ldr	r3, [r7, #8]
 801426e:	2b00      	cmp	r3, #0
 8014270:	d023      	beq.n	80142ba <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 8014272:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014276:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801427c:	061a      	lsls	r2, r3, #24
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014282:	021b      	lsls	r3, r3, #8
 8014284:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014288:	431a      	orrs	r2, r3
 801428a:	687b      	ldr	r3, [r7, #4]
 801428c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801428e:	0a1b      	lsrs	r3, r3, #8
 8014290:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014294:	431a      	orrs	r2, r3
 8014296:	687b      	ldr	r3, [r7, #4]
 8014298:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801429a:	0e1b      	lsrs	r3, r3, #24
 801429c:	431a      	orrs	r2, r3
 801429e:	68bb      	ldr	r3, [r7, #8]
 80142a0:	681b      	ldr	r3, [r3, #0]
 80142a2:	405a      	eors	r2, r3
 80142a4:	68bb      	ldr	r3, [r7, #8]
 80142a6:	685b      	ldr	r3, [r3, #4]
 80142a8:	4013      	ands	r3, r2
 80142aa:	2b00      	cmp	r3, #0
 80142ac:	d005      	beq.n	80142ba <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 80142ae:	68f9      	ldr	r1, [r7, #12]
 80142b0:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80142b4:	f7f5 fbbe 	bl	8009a34 <FreeRTOS_min_uint32>
 80142b8:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 80142ba:	687b      	ldr	r3, [r7, #4]
 80142bc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80142be:	687b      	ldr	r3, [r7, #4]
 80142c0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80142c4:	68f9      	ldr	r1, [r7, #12]
 80142c6:	4806      	ldr	r0, [pc, #24]	@ (80142e0 <prvSocketSetMSS_IPV4+0x88>)
 80142c8:	f00c f960 	bl	802058c <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 80142cc:	68fb      	ldr	r3, [r7, #12]
 80142ce:	b29a      	uxth	r2, r3
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80142d6:	bf00      	nop
 80142d8:	3710      	adds	r7, #16
 80142da:	46bd      	mov	sp, r7
 80142dc:	bd80      	pop	{r7, pc}
 80142de:	bf00      	nop
 80142e0:	0802501c 	.word	0x0802501c

080142e4 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 80142e4:	b580      	push	{r7, lr}
 80142e6:	b090      	sub	sp, #64	@ 0x40
 80142e8:	af00      	add	r7, sp, #0
 80142ea:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 80142ec:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 80142f0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 80142f2:	2300      	movs	r3, #0
 80142f4:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 80142f6:	687b      	ldr	r3, [r7, #4]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d103      	bne.n	8014304 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 80142fc:	481f      	ldr	r0, [pc, #124]	@ (801437c <prvSocketSetMSS_IPV6+0x98>)
 80142fe:	f00c f945 	bl	802058c <lUDPLoggingPrintf>

            break;
 8014302:	e036      	b.n	8014372 <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 8014304:	687b      	ldr	r3, [r7, #4]
 8014306:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014308:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 801430a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801430c:	2b00      	cmp	r3, #0
 801430e:	d018      	beq.n	8014342 <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 8014310:	2314      	movs	r3, #20
 8014312:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 8014314:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014316:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 801431a:	1a9b      	subs	r3, r3, r2
 801431c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	3354      	adds	r3, #84	@ 0x54
 8014322:	4618      	mov	r0, r3
 8014324:	f7f8 fdb4 	bl	800ce90 <xIPv6_GetIPType>
 8014328:	4603      	mov	r3, r0
 801432a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 801432e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014332:	2b00      	cmp	r3, #0
 8014334:	d105      	bne.n	8014342 <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8014336:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014338:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 801433c:	f7f5 fb7a 	bl	8009a34 <FreeRTOS_min_uint32>
 8014340:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 8014342:	687b      	ldr	r3, [r7, #4]
 8014344:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014348:	f107 0208 	add.w	r2, r7, #8
 801434c:	2328      	movs	r3, #40	@ 0x28
 801434e:	200a      	movs	r0, #10
 8014350:	f7fa f8c0 	bl	800e4d4 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 8014354:	687b      	ldr	r3, [r7, #4]
 8014356:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801435a:	f107 0208 	add.w	r2, r7, #8
 801435e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014360:	4807      	ldr	r0, [pc, #28]	@ (8014380 <prvSocketSetMSS_IPV6+0x9c>)
 8014362:	f00c f913 	bl	802058c <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8014366:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014368:	b29a      	uxth	r2, r3
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 8014370:	bf00      	nop
 8014372:	bf00      	nop
 8014374:	3740      	adds	r7, #64	@ 0x40
 8014376:	46bd      	mov	sp, r7
 8014378:	bd80      	pop	{r7, pc}
 801437a:	bf00      	nop
 801437c:	08025048 	.word	0x08025048
 8014380:	08025074 	.word	0x08025074

08014384 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 8014384:	b480      	push	{r7}
 8014386:	b085      	sub	sp, #20
 8014388:	af00      	add	r7, sp, #0
 801438a:	6078      	str	r0, [r7, #4]
 801438c:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 801438e:	2300      	movs	r3, #0
 8014390:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 8014392:	683a      	ldr	r2, [r7, #0]
 8014394:	687b      	ldr	r3, [r7, #4]
 8014396:	1ad3      	subs	r3, r2, r3
 8014398:	2b00      	cmp	r3, #0
 801439a:	db01      	blt.n	80143a0 <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 801439c:	2301      	movs	r3, #1
 801439e:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 80143a0:	68fb      	ldr	r3, [r7, #12]
        }
 80143a2:	4618      	mov	r0, r3
 80143a4:	3714      	adds	r7, #20
 80143a6:	46bd      	mov	sp, r7
 80143a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143ac:	4770      	bx	lr

080143ae <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 80143ae:	b480      	push	{r7}
 80143b0:	b085      	sub	sp, #20
 80143b2:	af00      	add	r7, sp, #0
 80143b4:	6078      	str	r0, [r7, #4]
 80143b6:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80143b8:	2300      	movs	r3, #0
 80143ba:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 80143bc:	683a      	ldr	r2, [r7, #0]
 80143be:	687b      	ldr	r3, [r7, #4]
 80143c0:	1ad3      	subs	r3, r2, r3
 80143c2:	3b01      	subs	r3, #1
 80143c4:	2b00      	cmp	r3, #0
 80143c6:	db01      	blt.n	80143cc <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 80143c8:	2301      	movs	r3, #1
 80143ca:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 80143cc:	68fb      	ldr	r3, [r7, #12]
    }
 80143ce:	4618      	mov	r0, r3
 80143d0:	3714      	adds	r7, #20
 80143d2:	46bd      	mov	sp, r7
 80143d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80143d8:	4770      	bx	lr

080143da <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 80143da:	b480      	push	{r7}
 80143dc:	b085      	sub	sp, #20
 80143de:	af00      	add	r7, sp, #0
 80143e0:	6078      	str	r0, [r7, #4]
 80143e2:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80143e4:	2300      	movs	r3, #0
 80143e6:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 80143e8:	687a      	ldr	r2, [r7, #4]
 80143ea:	683b      	ldr	r3, [r7, #0]
 80143ec:	1ad3      	subs	r3, r2, r3
 80143ee:	3b01      	subs	r3, #1
 80143f0:	2b00      	cmp	r3, #0
 80143f2:	db01      	blt.n	80143f8 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 80143f4:	2301      	movs	r3, #1
 80143f6:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 80143f8:	68fb      	ldr	r3, [r7, #12]
    }
 80143fa:	4618      	mov	r0, r3
 80143fc:	3714      	adds	r7, #20
 80143fe:	46bd      	mov	sp, r7
 8014400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014404:	4770      	bx	lr

08014406 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 8014406:	b480      	push	{r7}
 8014408:	b085      	sub	sp, #20
 801440a:	af00      	add	r7, sp, #0
 801440c:	6078      	str	r0, [r7, #4]
 801440e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014410:	2300      	movs	r3, #0
 8014412:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 8014414:	687a      	ldr	r2, [r7, #4]
 8014416:	683b      	ldr	r3, [r7, #0]
 8014418:	1ad3      	subs	r3, r2, r3
 801441a:	2b00      	cmp	r3, #0
 801441c:	db01      	blt.n	8014422 <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 801441e:	2301      	movs	r3, #1
 8014420:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014422:	68fb      	ldr	r3, [r7, #12]
    }
 8014424:	4618      	mov	r0, r3
 8014426:	3714      	adds	r7, #20
 8014428:	46bd      	mov	sp, r7
 801442a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801442e:	4770      	bx	lr

08014430 <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8014430:	b580      	push	{r7, lr}
 8014432:	b082      	sub	sp, #8
 8014434:	af00      	add	r7, sp, #0
 8014436:	6078      	str	r0, [r7, #4]
 8014438:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 801443a:	687b      	ldr	r3, [r7, #4]
 801443c:	3308      	adds	r3, #8
 801443e:	461a      	mov	r2, r3
 8014440:	6839      	ldr	r1, [r7, #0]
 8014442:	6878      	ldr	r0, [r7, #4]
 8014444:	f000 f822 	bl	801448c <vListInsertGeneric>
        }
 8014448:	bf00      	nop
 801444a:	3708      	adds	r7, #8
 801444c:	46bd      	mov	sp, r7
 801444e:	bd80      	pop	{r7, pc}

08014450 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8014450:	b580      	push	{r7, lr}
 8014452:	b082      	sub	sp, #8
 8014454:	af00      	add	r7, sp, #0
 8014456:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8014458:	f7ef fa04 	bl	8003864 <xTaskGetTickCount>
 801445c:	4602      	mov	r2, r0
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	601a      	str	r2, [r3, #0]
    }
 8014462:	bf00      	nop
 8014464:	3708      	adds	r7, #8
 8014466:	46bd      	mov	sp, r7
 8014468:	bd80      	pop	{r7, pc}

0801446a <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 801446a:	b580      	push	{r7, lr}
 801446c:	b084      	sub	sp, #16
 801446e:	af00      	add	r7, sp, #0
 8014470:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 8014472:	f7ef f9f7 	bl	8003864 <xTaskGetTickCount>
 8014476:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	681b      	ldr	r3, [r3, #0]
 801447c:	68fa      	ldr	r2, [r7, #12]
 801447e:	1ad3      	subs	r3, r2, r3
 8014480:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 8014482:	68bb      	ldr	r3, [r7, #8]
    }
 8014484:	4618      	mov	r0, r3
 8014486:	3710      	adds	r7, #16
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}

0801448c <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 801448c:	b480      	push	{r7}
 801448e:	b085      	sub	sp, #20
 8014490:	af00      	add	r7, sp, #0
 8014492:	60f8      	str	r0, [r7, #12]
 8014494:	60b9      	str	r1, [r7, #8]
 8014496:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 8014498:	68bb      	ldr	r3, [r7, #8]
 801449a:	687a      	ldr	r2, [r7, #4]
 801449c:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 801449e:	687b      	ldr	r3, [r7, #4]
 80144a0:	689a      	ldr	r2, [r3, #8]
 80144a2:	68bb      	ldr	r3, [r7, #8]
 80144a4:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 80144a6:	687b      	ldr	r3, [r7, #4]
 80144a8:	689b      	ldr	r3, [r3, #8]
 80144aa:	68ba      	ldr	r2, [r7, #8]
 80144ac:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 80144ae:	687b      	ldr	r3, [r7, #4]
 80144b0:	68ba      	ldr	r2, [r7, #8]
 80144b2:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 80144b4:	68bb      	ldr	r3, [r7, #8]
 80144b6:	68fa      	ldr	r2, [r7, #12]
 80144b8:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 80144ba:	68fb      	ldr	r3, [r7, #12]
 80144bc:	681b      	ldr	r3, [r3, #0]
 80144be:	1c5a      	adds	r2, r3, #1
 80144c0:	68fb      	ldr	r3, [r7, #12]
 80144c2:	601a      	str	r2, [r3, #0]
        }
 80144c4:	bf00      	nop
 80144c6:	3714      	adds	r7, #20
 80144c8:	46bd      	mov	sp, r7
 80144ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144ce:	4770      	bx	lr

080144d0 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b082      	sub	sp, #8
 80144d4:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 80144d6:	4827      	ldr	r0, [pc, #156]	@ (8014574 <prvCreateSectors+0xa4>)
 80144d8:	f7ed ffde 	bl	8002498 <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 80144dc:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80144e0:	f7f1 f830 	bl	8005544 <pvPortMalloc>
 80144e4:	4603      	mov	r3, r0
 80144e6:	4a24      	ldr	r2, [pc, #144]	@ (8014578 <prvCreateSectors+0xa8>)
 80144e8:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 80144ea:	4b23      	ldr	r3, [pc, #140]	@ (8014578 <prvCreateSectors+0xa8>)
 80144ec:	681b      	ldr	r3, [r3, #0]
 80144ee:	2b00      	cmp	r3, #0
 80144f0:	d107      	bne.n	8014502 <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 80144f2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80144f6:	4821      	ldr	r0, [pc, #132]	@ (801457c <prvCreateSectors+0xac>)
 80144f8:	f00c f848 	bl	802058c <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 80144fc:	2300      	movs	r3, #0
 80144fe:	603b      	str	r3, [r7, #0]
 8014500:	e032      	b.n	8014568 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8014502:	4b1d      	ldr	r3, [pc, #116]	@ (8014578 <prvCreateSectors+0xa8>)
 8014504:	681b      	ldr	r3, [r3, #0]
 8014506:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801450a:	2100      	movs	r1, #0
 801450c:	4618      	mov	r0, r3
 801450e:	f00c fb66 	bl	8020bde <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8014512:	2300      	movs	r3, #0
 8014514:	607b      	str	r3, [r7, #4]
 8014516:	e022      	b.n	801455e <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8014518:	4b17      	ldr	r3, [pc, #92]	@ (8014578 <prvCreateSectors+0xa8>)
 801451a:	6819      	ldr	r1, [r3, #0]
 801451c:	687b      	ldr	r3, [r7, #4]
 801451e:	019a      	lsls	r2, r3, #6
 8014520:	4b15      	ldr	r3, [pc, #84]	@ (8014578 <prvCreateSectors+0xa8>)
 8014522:	6818      	ldr	r0, [r3, #0]
 8014524:	687b      	ldr	r3, [r7, #4]
 8014526:	019b      	lsls	r3, r3, #6
 8014528:	4403      	add	r3, r0
 801452a:	440a      	add	r2, r1
 801452c:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 801452e:	4b12      	ldr	r3, [pc, #72]	@ (8014578 <prvCreateSectors+0xa8>)
 8014530:	6819      	ldr	r1, [r3, #0]
 8014532:	687b      	ldr	r3, [r7, #4]
 8014534:	019a      	lsls	r2, r3, #6
 8014536:	4b10      	ldr	r3, [pc, #64]	@ (8014578 <prvCreateSectors+0xa8>)
 8014538:	6818      	ldr	r0, [r3, #0]
 801453a:	687b      	ldr	r3, [r7, #4]
 801453c:	019b      	lsls	r3, r3, #6
 801453e:	4403      	add	r3, r0
 8014540:	440a      	add	r2, r1
 8014542:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8014544:	4b0c      	ldr	r3, [pc, #48]	@ (8014578 <prvCreateSectors+0xa8>)
 8014546:	681a      	ldr	r2, [r3, #0]
 8014548:	687b      	ldr	r3, [r7, #4]
 801454a:	019b      	lsls	r3, r3, #6
 801454c:	4413      	add	r3, r2
 801454e:	332c      	adds	r3, #44	@ 0x2c
 8014550:	4619      	mov	r1, r3
 8014552:	4808      	ldr	r0, [pc, #32]	@ (8014574 <prvCreateSectors+0xa4>)
 8014554:	f7ff ff6c 	bl	8014430 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8014558:	687b      	ldr	r3, [r7, #4]
 801455a:	3301      	adds	r3, #1
 801455c:	607b      	str	r3, [r7, #4]
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	2b3f      	cmp	r3, #63	@ 0x3f
 8014562:	ddd9      	ble.n	8014518 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 8014564:	2301      	movs	r3, #1
 8014566:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8014568:	683b      	ldr	r3, [r7, #0]
        }
 801456a:	4618      	mov	r0, r3
 801456c:	3708      	adds	r7, #8
 801456e:	46bd      	mov	sp, r7
 8014570:	bd80      	pop	{r7, pc}
 8014572:	bf00      	nop
 8014574:	200012e0 	.word	0x200012e0
 8014578:	200012dc 	.word	0x200012dc
 801457c:	080250a4 	.word	0x080250a4

08014580 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8014580:	b480      	push	{r7}
 8014582:	b087      	sub	sp, #28
 8014584:	af00      	add	r7, sp, #0
 8014586:	6078      	str	r0, [r7, #4]
 8014588:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 801458a:	2300      	movs	r3, #0
 801458c:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	33ac      	adds	r3, #172	@ 0xac
 8014592:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 8014594:	68fb      	ldr	r3, [r7, #12]
 8014596:	685b      	ldr	r3, [r3, #4]
 8014598:	617b      	str	r3, [r7, #20]
 801459a:	e00d      	b.n	80145b8 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801459c:	697b      	ldr	r3, [r7, #20]
 801459e:	68db      	ldr	r3, [r3, #12]
 80145a0:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 80145a2:	68bb      	ldr	r3, [r7, #8]
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	683a      	ldr	r2, [r7, #0]
 80145a8:	429a      	cmp	r2, r3
 80145aa:	d102      	bne.n	80145b2 <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 80145ac:	68bb      	ldr	r3, [r7, #8]
 80145ae:	613b      	str	r3, [r7, #16]
                    break;
 80145b0:	e006      	b.n	80145c0 <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	685b      	ldr	r3, [r3, #4]
 80145b6:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 80145b8:	697a      	ldr	r2, [r7, #20]
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	429a      	cmp	r2, r3
 80145be:	d1ed      	bne.n	801459c <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 80145c0:	693b      	ldr	r3, [r7, #16]
        }
 80145c2:	4618      	mov	r0, r3
 80145c4:	371c      	adds	r7, #28
 80145c6:	46bd      	mov	sp, r7
 80145c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80145cc:	4770      	bx	lr
	...

080145d0 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 80145d0:	b580      	push	{r7, lr}
 80145d2:	b088      	sub	sp, #32
 80145d4:	af00      	add	r7, sp, #0
 80145d6:	60f8      	str	r0, [r7, #12]
 80145d8:	60b9      	str	r1, [r7, #8]
 80145da:	607a      	str	r2, [r7, #4]
 80145dc:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 80145de:	4b33      	ldr	r3, [pc, #204]	@ (80146ac <xTCPWindowNew+0xdc>)
 80145e0:	681b      	ldr	r3, [r3, #0]
 80145e2:	2b00      	cmp	r3, #0
 80145e4:	d10c      	bne.n	8014600 <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 80145e6:	683b      	ldr	r3, [r7, #0]
 80145e8:	2b00      	cmp	r3, #0
 80145ea:	d001      	beq.n	80145f0 <xTCPWindowNew+0x20>
 80145ec:	2352      	movs	r3, #82	@ 0x52
 80145ee:	e000      	b.n	80145f2 <xTCPWindowNew+0x22>
 80145f0:	2354      	movs	r3, #84	@ 0x54
 80145f2:	4619      	mov	r1, r3
 80145f4:	482e      	ldr	r0, [pc, #184]	@ (80146b0 <xTCPWindowNew+0xe0>)
 80145f6:	f00b ffc9 	bl	802058c <lUDPLoggingPrintf>
                pxSegment = NULL;
 80145fa:	2300      	movs	r3, #0
 80145fc:	61fb      	str	r3, [r7, #28]
 80145fe:	e04f      	b.n	80146a0 <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8014600:	4b2a      	ldr	r3, [pc, #168]	@ (80146ac <xTCPWindowNew+0xdc>)
 8014602:	68db      	ldr	r3, [r3, #12]
 8014604:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8014606:	69bb      	ldr	r3, [r7, #24]
 8014608:	68db      	ldr	r3, [r3, #12]
 801460a:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 801460c:	69bb      	ldr	r3, [r7, #24]
 801460e:	2b00      	cmp	r3, #0
 8014610:	d104      	bne.n	801461c <xTCPWindowNew+0x4c>
 8014612:	f240 2125 	movw	r1, #549	@ 0x225
 8014616:	4827      	ldr	r0, [pc, #156]	@ (80146b4 <xTCPWindowNew+0xe4>)
 8014618:	f7ec fd8a 	bl	8001130 <vAssertCalled>
                configASSERT( pxSegment != NULL );
 801461c:	69fb      	ldr	r3, [r7, #28]
 801461e:	2b00      	cmp	r3, #0
 8014620:	d104      	bne.n	801462c <xTCPWindowNew+0x5c>
 8014622:	f240 2126 	movw	r1, #550	@ 0x226
 8014626:	4823      	ldr	r0, [pc, #140]	@ (80146b4 <xTCPWindowNew+0xe4>)
 8014628:	f7ec fd82 	bl	8001130 <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 801462c:	69b8      	ldr	r0, [r7, #24]
 801462e:	f7ed ffbd 	bl	80025ac <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d006      	beq.n	8014646 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8014638:	68fb      	ldr	r3, [r7, #12]
 801463a:	33a4      	adds	r3, #164	@ 0xa4
 801463c:	69b9      	ldr	r1, [r7, #24]
 801463e:	4618      	mov	r0, r3
 8014640:	f7ff fef6 	bl	8014430 <vListInsertFifo>
 8014644:	e005      	b.n	8014652 <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8014646:	68fb      	ldr	r3, [r7, #12]
 8014648:	3390      	adds	r3, #144	@ 0x90
 801464a:	69b9      	ldr	r1, [r7, #24]
 801464c:	4618      	mov	r0, r3
 801464e:	f7ff feef 	bl	8014430 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8014652:	69fb      	ldr	r3, [r7, #28]
 8014654:	3310      	adds	r3, #16
 8014656:	4618      	mov	r0, r3
 8014658:	f7ff fefa 	bl	8014450 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 801465c:	69fb      	ldr	r3, [r7, #28]
 801465e:	2200      	movs	r2, #0
 8014660:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8014662:	683b      	ldr	r3, [r7, #0]
 8014664:	2b00      	cmp	r3, #0
 8014666:	d001      	beq.n	801466c <xTCPWindowNew+0x9c>
 8014668:	2101      	movs	r1, #1
 801466a:	e000      	b.n	801466e <xTCPWindowNew+0x9e>
 801466c:	2100      	movs	r1, #0
 801466e:	69fa      	ldr	r2, [r7, #28]
 8014670:	7d93      	ldrb	r3, [r2, #22]
 8014672:	f361 0382 	bfi	r3, r1, #2, #1
 8014676:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8014678:	69fb      	ldr	r3, [r7, #28]
 801467a:	687a      	ldr	r2, [r7, #4]
 801467c:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 801467e:	69fb      	ldr	r3, [r7, #28]
 8014680:	687a      	ldr	r2, [r7, #4]
 8014682:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8014684:	69fb      	ldr	r3, [r7, #28]
 8014686:	68ba      	ldr	r2, [r7, #8]
 8014688:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 801468a:	4b08      	ldr	r3, [pc, #32]	@ (80146ac <xTCPWindowNew+0xdc>)
 801468c:	681b      	ldr	r3, [r3, #0]
 801468e:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 8014690:	4b09      	ldr	r3, [pc, #36]	@ (80146b8 <xTCPWindowNew+0xe8>)
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	697a      	ldr	r2, [r7, #20]
 8014696:	429a      	cmp	r2, r3
 8014698:	d202      	bcs.n	80146a0 <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 801469a:	4a07      	ldr	r2, [pc, #28]	@ (80146b8 <xTCPWindowNew+0xe8>)
 801469c:	697b      	ldr	r3, [r7, #20]
 801469e:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 80146a0:	69fb      	ldr	r3, [r7, #28]
        }
 80146a2:	4618      	mov	r0, r3
 80146a4:	3720      	adds	r7, #32
 80146a6:	46bd      	mov	sp, r7
 80146a8:	bd80      	pop	{r7, pc}
 80146aa:	bf00      	nop
 80146ac:	200012e0 	.word	0x200012e0
 80146b0:	080250c8 	.word	0x080250c8
 80146b4:	080250f8 	.word	0x080250f8
 80146b8:	2000001c 	.word	0x2000001c

080146bc <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 80146bc:	b580      	push	{r7, lr}
 80146be:	b084      	sub	sp, #16
 80146c0:	af00      	add	r7, sp, #0
 80146c2:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80146ca:	2b00      	cmp	r3, #0
 80146cc:	d002      	beq.n	80146d4 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 80146ce:	2300      	movs	r3, #0
 80146d0:	60fb      	str	r3, [r7, #12]
 80146d2:	e01e      	b.n	8014712 <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	691b      	ldr	r3, [r3, #16]
 80146d8:	1c5a      	adds	r2, r3, #1
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	699b      	ldr	r3, [r3, #24]
 80146de:	4619      	mov	r1, r3
 80146e0:	4610      	mov	r0, r2
 80146e2:	f7ff fe90 	bl	8014406 <xSequenceGreaterThanOrEqual>
 80146e6:	4603      	mov	r3, r0
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	d002      	beq.n	80146f2 <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 80146ec:	2301      	movs	r3, #1
 80146ee:	60fb      	str	r3, [r7, #12]
 80146f0:	e00f      	b.n	8014712 <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	691a      	ldr	r2, [r3, #16]
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	68db      	ldr	r3, [r3, #12]
 80146fa:	1ad1      	subs	r1, r2, r3
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	699a      	ldr	r2, [r3, #24]
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	68db      	ldr	r3, [r3, #12]
 8014704:	1ad3      	subs	r3, r2, r3
 8014706:	461a      	mov	r2, r3
 8014708:	4804      	ldr	r0, [pc, #16]	@ (801471c <xTCPWindowRxEmpty+0x60>)
 801470a:	f00b ff3f 	bl	802058c <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 801470e:	2300      	movs	r3, #0
 8014710:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8014712:	68fb      	ldr	r3, [r7, #12]
        }
 8014714:	4618      	mov	r0, r3
 8014716:	3710      	adds	r7, #16
 8014718:	46bd      	mov	sp, r7
 801471a:	bd80      	pop	{r7, pc}
 801471c:	08025128 	.word	0x08025128

08014720 <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8014720:	b580      	push	{r7, lr}
 8014722:	b084      	sub	sp, #16
 8014724:	af00      	add	r7, sp, #0
 8014726:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	2b00      	cmp	r3, #0
 801472e:	d102      	bne.n	8014736 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8014730:	2300      	movs	r3, #0
 8014732:	60fb      	str	r3, [r7, #12]
 8014734:	e008      	b.n	8014748 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	68db      	ldr	r3, [r3, #12]
 801473a:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 801473c:	68bb      	ldr	r3, [r7, #8]
 801473e:	68db      	ldr	r3, [r3, #12]
 8014740:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8014742:	68b8      	ldr	r0, [r7, #8]
 8014744:	f7ed ff32 	bl	80025ac <uxListRemove>
            }

            return pxSegment;
 8014748:	68fb      	ldr	r3, [r7, #12]
        }
 801474a:	4618      	mov	r0, r3
 801474c:	3710      	adds	r7, #16
 801474e:	46bd      	mov	sp, r7
 8014750:	bd80      	pop	{r7, pc}

08014752 <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8014752:	b480      	push	{r7}
 8014754:	b085      	sub	sp, #20
 8014756:	af00      	add	r7, sp, #0
 8014758:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d102      	bne.n	8014768 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8014762:	2300      	movs	r3, #0
 8014764:	60fb      	str	r3, [r7, #12]
 8014766:	e005      	b.n	8014774 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8014768:	687b      	ldr	r3, [r7, #4]
 801476a:	68db      	ldr	r3, [r3, #12]
 801476c:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 801476e:	68bb      	ldr	r3, [r7, #8]
 8014770:	68db      	ldr	r3, [r3, #12]
 8014772:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8014774:	68fb      	ldr	r3, [r7, #12]
        }
 8014776:	4618      	mov	r0, r3
 8014778:	3714      	adds	r7, #20
 801477a:	46bd      	mov	sp, r7
 801477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014780:	4770      	bx	lr
	...

08014784 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8014784:	b580      	push	{r7, lr}
 8014786:	b082      	sub	sp, #8
 8014788:	af00      	add	r7, sp, #0
 801478a:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 801478c:	687b      	ldr	r3, [r7, #4]
 801478e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014790:	2b00      	cmp	r3, #0
 8014792:	d004      	beq.n	801479e <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	3318      	adds	r3, #24
 8014798:	4618      	mov	r0, r3
 801479a:	f7ed ff07 	bl	80025ac <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 801479e:	687b      	ldr	r3, [r7, #4]
 80147a0:	2200      	movs	r2, #0
 80147a2:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	2200      	movs	r2, #0
 80147a8:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	2200      	movs	r2, #0
 80147ae:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 80147b0:	687b      	ldr	r3, [r7, #4]
 80147b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80147b4:	2b00      	cmp	r3, #0
 80147b6:	d004      	beq.n	80147c2 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	332c      	adds	r3, #44	@ 0x2c
 80147bc:	4618      	mov	r0, r3
 80147be:	f7ed fef5 	bl	80025ac <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 80147c2:	687b      	ldr	r3, [r7, #4]
 80147c4:	332c      	adds	r3, #44	@ 0x2c
 80147c6:	4619      	mov	r1, r3
 80147c8:	4803      	ldr	r0, [pc, #12]	@ (80147d8 <vTCPWindowFree+0x54>)
 80147ca:	f7ff fe31 	bl	8014430 <vListInsertFifo>
        }
 80147ce:	bf00      	nop
 80147d0:	3708      	adds	r7, #8
 80147d2:	46bd      	mov	sp, r7
 80147d4:	bd80      	pop	{r7, pc}
 80147d6:	bf00      	nop
 80147d8:	200012e0 	.word	0x200012e0

080147dc <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 80147dc:	b580      	push	{r7, lr}
 80147de:	b086      	sub	sp, #24
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 80147e4:	2300      	movs	r3, #0
 80147e6:	613b      	str	r3, [r7, #16]
 80147e8:	e01d      	b.n	8014826 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 80147ea:	693b      	ldr	r3, [r7, #16]
 80147ec:	2b00      	cmp	r3, #0
 80147ee:	d003      	beq.n	80147f8 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	33a4      	adds	r3, #164	@ 0xa4
 80147f4:	617b      	str	r3, [r7, #20]
 80147f6:	e002      	b.n	80147fe <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 80147f8:	687b      	ldr	r3, [r7, #4]
 80147fa:	3390      	adds	r3, #144	@ 0x90
 80147fc:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 80147fe:	697b      	ldr	r3, [r7, #20]
 8014800:	689b      	ldr	r3, [r3, #8]
 8014802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014806:	d10b      	bne.n	8014820 <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8014808:	e006      	b.n	8014818 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 801480a:	697b      	ldr	r3, [r7, #20]
 801480c:	68db      	ldr	r3, [r3, #12]
 801480e:	68db      	ldr	r3, [r3, #12]
 8014810:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 8014812:	68f8      	ldr	r0, [r7, #12]
 8014814:	f7ff ffb6 	bl	8014784 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8014818:	697b      	ldr	r3, [r7, #20]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	2b00      	cmp	r3, #0
 801481e:	d1f4      	bne.n	801480a <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 8014820:	693b      	ldr	r3, [r7, #16]
 8014822:	3301      	adds	r3, #1
 8014824:	613b      	str	r3, [r7, #16]
 8014826:	693b      	ldr	r3, [r7, #16]
 8014828:	2b01      	cmp	r3, #1
 801482a:	ddde      	ble.n	80147ea <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 801482c:	bf00      	nop
 801482e:	bf00      	nop
 8014830:	3718      	adds	r7, #24
 8014832:	46bd      	mov	sp, r7
 8014834:	bd80      	pop	{r7, pc}
	...

08014838 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8014838:	b580      	push	{r7, lr}
 801483a:	b086      	sub	sp, #24
 801483c:	af00      	add	r7, sp, #0
 801483e:	60f8      	str	r0, [r7, #12]
 8014840:	60b9      	str	r1, [r7, #8]
 8014842:	607a      	str	r2, [r7, #4]
 8014844:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 8014846:	2301      	movs	r3, #1
 8014848:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 801484a:	4b1d      	ldr	r3, [pc, #116]	@ (80148c0 <xTCPWindowCreate+0x88>)
 801484c:	681b      	ldr	r3, [r3, #0]
 801484e:	2b00      	cmp	r3, #0
 8014850:	d102      	bne.n	8014858 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 8014852:	f7ff fe3d 	bl	80144d0 <prvCreateSectors>
 8014856:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 8014858:	68fb      	ldr	r3, [r7, #12]
 801485a:	3390      	adds	r3, #144	@ 0x90
 801485c:	4618      	mov	r0, r3
 801485e:	f7ed fe1b 	bl	8002498 <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 8014862:	68fb      	ldr	r3, [r7, #12]
 8014864:	33a4      	adds	r3, #164	@ 0xa4
 8014866:	4618      	mov	r0, r3
 8014868:	f7ed fe16 	bl	8002498 <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 801486c:	68fb      	ldr	r3, [r7, #12]
 801486e:	3340      	adds	r3, #64	@ 0x40
 8014870:	4618      	mov	r0, r3
 8014872:	f7ed fe11 	bl	8002498 <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8014876:	68fb      	ldr	r3, [r7, #12]
 8014878:	3354      	adds	r3, #84	@ 0x54
 801487a:	4618      	mov	r0, r3
 801487c:	f7ed fe0c 	bl	8002498 <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8014880:	68fb      	ldr	r3, [r7, #12]
 8014882:	3368      	adds	r3, #104	@ 0x68
 8014884:	4618      	mov	r0, r3
 8014886:	f7ed fe07 	bl	8002498 <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 801488a:	4b0e      	ldr	r3, [pc, #56]	@ (80148c4 <xTCPWindowCreate+0x8c>)
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	2b00      	cmp	r3, #0
 8014890:	d004      	beq.n	801489c <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 8014892:	687a      	ldr	r2, [r7, #4]
 8014894:	68b9      	ldr	r1, [r7, #8]
 8014896:	480c      	ldr	r0, [pc, #48]	@ (80148c8 <xTCPWindowCreate+0x90>)
 8014898:	f00b fe78 	bl	802058c <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 801489c:	68fb      	ldr	r3, [r7, #12]
 801489e:	68ba      	ldr	r2, [r7, #8]
 80148a0:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 80148a2:	68fb      	ldr	r3, [r7, #12]
 80148a4:	687a      	ldr	r2, [r7, #4]
 80148a6:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 80148a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80148aa:	6a3a      	ldr	r2, [r7, #32]
 80148ac:	6839      	ldr	r1, [r7, #0]
 80148ae:	68f8      	ldr	r0, [r7, #12]
 80148b0:	f000 f80c 	bl	80148cc <vTCPWindowInit>

        return xReturn;
 80148b4:	697b      	ldr	r3, [r7, #20]
    }
 80148b6:	4618      	mov	r0, r3
 80148b8:	3718      	adds	r7, #24
 80148ba:	46bd      	mov	sp, r7
 80148bc:	bd80      	pop	{r7, pc}
 80148be:	bf00      	nop
 80148c0:	200012dc 	.word	0x200012dc
 80148c4:	200012f4 	.word	0x200012f4
 80148c8:	08025158 	.word	0x08025158

080148cc <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 80148cc:	b480      	push	{r7}
 80148ce:	b087      	sub	sp, #28
 80148d0:	af00      	add	r7, sp, #0
 80148d2:	60f8      	str	r0, [r7, #12]
 80148d4:	60b9      	str	r1, [r7, #8]
 80148d6:	607a      	str	r2, [r7, #4]
 80148d8:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 80148da:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 80148de:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 80148e0:	68fb      	ldr	r3, [r7, #12]
 80148e2:	2200      	movs	r2, #0
 80148e4:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 80148e6:	68fa      	ldr	r2, [r7, #12]
 80148e8:	7813      	ldrb	r3, [r2, #0]
 80148ea:	f043 0301 	orr.w	r3, r3, #1
 80148ee:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 80148f0:	683b      	ldr	r3, [r7, #0]
 80148f2:	2b00      	cmp	r3, #0
 80148f4:	d024      	beq.n	8014940 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 80148f6:	68fb      	ldr	r3, [r7, #12]
 80148f8:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 80148fc:	2b00      	cmp	r3, #0
 80148fe:	d004      	beq.n	801490a <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8014900:	683b      	ldr	r3, [r7, #0]
 8014902:	b29a      	uxth	r2, r3
 8014904:	68fb      	ldr	r3, [r7, #12]
 8014906:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 801490a:	68fb      	ldr	r3, [r7, #12]
 801490c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8014910:	461a      	mov	r2, r3
 8014912:	683b      	ldr	r3, [r7, #0]
 8014914:	4293      	cmp	r3, r2
 8014916:	d304      	bcc.n	8014922 <vTCPWindowInit+0x56>
 8014918:	68fb      	ldr	r3, [r7, #12]
 801491a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801491e:	2b00      	cmp	r3, #0
 8014920:	d10e      	bne.n	8014940 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8014922:	68fb      	ldr	r3, [r7, #12]
 8014924:	685a      	ldr	r2, [r3, #4]
 8014926:	683b      	ldr	r3, [r7, #0]
 8014928:	fbb2 f3f3 	udiv	r3, r2, r3
 801492c:	683a      	ldr	r2, [r7, #0]
 801492e:	fb03 f202 	mul.w	r2, r3, r2
 8014932:	68fb      	ldr	r3, [r7, #12]
 8014934:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	b29a      	uxth	r2, r3
 801493a:	68fb      	ldr	r3, [r7, #12]
 801493c:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 8014940:	68fb      	ldr	r3, [r7, #12]
 8014942:	697a      	ldr	r2, [r7, #20]
 8014944:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8014946:	68fb      	ldr	r3, [r7, #12]
 8014948:	68ba      	ldr	r2, [r7, #8]
 801494a:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 801494c:	68fb      	ldr	r3, [r7, #12]
 801494e:	68ba      	ldr	r2, [r7, #8]
 8014950:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	68ba      	ldr	r2, [r7, #8]
 8014956:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	687a      	ldr	r2, [r7, #4]
 801495c:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 801495e:	68fb      	ldr	r3, [r7, #12]
 8014960:	687a      	ldr	r2, [r7, #4]
 8014962:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8014964:	68fb      	ldr	r3, [r7, #12]
 8014966:	687a      	ldr	r2, [r7, #4]
 8014968:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 801496a:	68fb      	ldr	r3, [r7, #12]
 801496c:	687a      	ldr	r2, [r7, #4]
 801496e:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8014970:	68fb      	ldr	r3, [r7, #12]
 8014972:	687a      	ldr	r2, [r7, #4]
 8014974:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8014976:	bf00      	nop
 8014978:	371c      	adds	r7, #28
 801497a:	46bd      	mov	sp, r7
 801497c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014980:	4770      	bx	lr
	...

08014984 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 8014984:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014986:	b08f      	sub	sp, #60	@ 0x3c
 8014988:	af04      	add	r7, sp, #16
 801498a:	60f8      	str	r0, [r7, #12]
 801498c:	60b9      	str	r1, [r7, #8]
 801498e:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 8014990:	2300      	movs	r3, #0
 8014992:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8014994:	68ba      	ldr	r2, [r7, #8]
 8014996:	687b      	ldr	r3, [r7, #4]
 8014998:	4413      	add	r3, r2
 801499a:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	33ac      	adds	r3, #172	@ 0xac
 80149a0:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 80149a2:	69bb      	ldr	r3, [r7, #24]
 80149a4:	685b      	ldr	r3, [r3, #4]
 80149a6:	623b      	str	r3, [r7, #32]
 80149a8:	e027      	b.n	80149fa <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80149aa:	6a3b      	ldr	r3, [r7, #32]
 80149ac:	68db      	ldr	r3, [r3, #12]
 80149ae:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 80149b0:	697b      	ldr	r3, [r7, #20]
 80149b2:	681b      	ldr	r3, [r3, #0]
 80149b4:	68b9      	ldr	r1, [r7, #8]
 80149b6:	4618      	mov	r0, r3
 80149b8:	f7ff fd25 	bl	8014406 <xSequenceGreaterThanOrEqual>
 80149bc:	4603      	mov	r3, r0
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d018      	beq.n	80149f4 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 80149c2:	697b      	ldr	r3, [r7, #20]
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	69f9      	ldr	r1, [r7, #28]
 80149c8:	4618      	mov	r0, r3
 80149ca:	f7ff fcf0 	bl	80143ae <xSequenceLessThan>
 80149ce:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 80149d0:	2b00      	cmp	r3, #0
 80149d2:	d00f      	beq.n	80149f4 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 80149d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d00a      	beq.n	80149f0 <xTCPWindowRxConfirm+0x6c>
 80149da:	697b      	ldr	r3, [r7, #20]
 80149dc:	681a      	ldr	r2, [r3, #0]
 80149de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80149e0:	681b      	ldr	r3, [r3, #0]
 80149e2:	4619      	mov	r1, r3
 80149e4:	4610      	mov	r0, r2
 80149e6:	f7ff fce2 	bl	80143ae <xSequenceLessThan>
 80149ea:	4603      	mov	r3, r0
 80149ec:	2b00      	cmp	r3, #0
 80149ee:	d001      	beq.n	80149f4 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 80149f0:	697b      	ldr	r3, [r7, #20]
 80149f2:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 80149f4:	6a3b      	ldr	r3, [r7, #32]
 80149f6:	685b      	ldr	r3, [r3, #4]
 80149f8:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 80149fa:	6a3a      	ldr	r2, [r7, #32]
 80149fc:	69bb      	ldr	r3, [r7, #24]
 80149fe:	429a      	cmp	r2, r3
 8014a00:	d1d3      	bne.n	80149aa <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 8014a02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a04:	2b00      	cmp	r3, #0
 8014a06:	d030      	beq.n	8014a6a <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8014a08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a0a:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 8014a0c:	68ba      	ldr	r2, [r7, #8]
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d104      	bne.n	8014a1c <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8014a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014a14:	689a      	ldr	r2, [r3, #8]
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	429a      	cmp	r2, r3
 8014a1a:	d026      	beq.n	8014a6a <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 8014a1c:	68fb      	ldr	r3, [r7, #12]
 8014a1e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8014a22:	461e      	mov	r6, r3
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	68db      	ldr	r3, [r3, #12]
 8014a28:	68ba      	ldr	r2, [r7, #8]
 8014a2a:	1ad5      	subs	r5, r2, r3
 8014a2c:	68ba      	ldr	r2, [r7, #8]
 8014a2e:	687b      	ldr	r3, [r7, #4]
 8014a30:	441a      	add	r2, r3
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	68db      	ldr	r3, [r3, #12]
 8014a36:	1ad3      	subs	r3, r2, r3
 8014a38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014a3a:	6811      	ldr	r1, [r2, #0]
 8014a3c:	68fa      	ldr	r2, [r7, #12]
 8014a3e:	68d2      	ldr	r2, [r2, #12]
 8014a40:	1a8a      	subs	r2, r1, r2
 8014a42:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014a44:	6889      	ldr	r1, [r1, #8]
 8014a46:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014a48:	6800      	ldr	r0, [r0, #0]
 8014a4a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8014a4c:	68a4      	ldr	r4, [r4, #8]
 8014a4e:	4404      	add	r4, r0
 8014a50:	68f8      	ldr	r0, [r7, #12]
 8014a52:	68c0      	ldr	r0, [r0, #12]
 8014a54:	1a20      	subs	r0, r4, r0
 8014a56:	9003      	str	r0, [sp, #12]
 8014a58:	9102      	str	r1, [sp, #8]
 8014a5a:	9201      	str	r2, [sp, #4]
 8014a5c:	9300      	str	r3, [sp, #0]
 8014a5e:	687b      	ldr	r3, [r7, #4]
 8014a60:	462a      	mov	r2, r5
 8014a62:	4631      	mov	r1, r6
 8014a64:	4803      	ldr	r0, [pc, #12]	@ (8014a74 <xTCPWindowRxConfirm+0xf0>)
 8014a66:	f00b fd91 	bl	802058c <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 8014a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8014a6c:	4618      	mov	r0, r3
 8014a6e:	372c      	adds	r7, #44	@ 0x2c
 8014a70:	46bd      	mov	sp, r7
 8014a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014a74:	08025188 	.word	0x08025188

08014a78 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8014a78:	b5b0      	push	{r4, r5, r7, lr}
 8014a7a:	b08a      	sub	sp, #40	@ 0x28
 8014a7c:	af04      	add	r7, sp, #16
 8014a7e:	6078      	str	r0, [r7, #4]
 8014a80:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	691b      	ldr	r3, [r3, #16]
 8014a86:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8014a88:	693a      	ldr	r2, [r7, #16]
 8014a8a:	683b      	ldr	r3, [r7, #0]
 8014a8c:	4413      	add	r3, r2
 8014a8e:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 8014a90:	687b      	ldr	r3, [r7, #4]
 8014a92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014a96:	2b00      	cmp	r3, #0
 8014a98:	d04e      	beq.n	8014b38 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 8014a9a:	697b      	ldr	r3, [r7, #20]
 8014a9c:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 8014a9e:	683a      	ldr	r2, [r7, #0]
 8014aa0:	6939      	ldr	r1, [r7, #16]
 8014aa2:	6878      	ldr	r0, [r7, #4]
 8014aa4:	f7ff ff6e 	bl	8014984 <xTCPWindowRxConfirm>
 8014aa8:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 8014aaa:	68bb      	ldr	r3, [r7, #8]
 8014aac:	2b00      	cmp	r3, #0
 8014aae:	d002      	beq.n	8014ab6 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 8014ab0:	68b8      	ldr	r0, [r7, #8]
 8014ab2:	f7ff fe67 	bl	8014784 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8014ab6:	68bb      	ldr	r3, [r7, #8]
 8014ab8:	2b00      	cmp	r3, #0
 8014aba:	d1f0      	bne.n	8014a9e <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8014abc:	6979      	ldr	r1, [r7, #20]
 8014abe:	6878      	ldr	r0, [r7, #4]
 8014ac0:	f7ff fd5e 	bl	8014580 <xTCPWindowRxFind>
 8014ac4:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8014ac6:	68bb      	ldr	r3, [r7, #8]
 8014ac8:	2b00      	cmp	r3, #0
 8014aca:	d009      	beq.n	8014ae0 <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8014acc:	68bb      	ldr	r3, [r7, #8]
 8014ace:	689b      	ldr	r3, [r3, #8]
 8014ad0:	461a      	mov	r2, r3
 8014ad2:	697b      	ldr	r3, [r7, #20]
 8014ad4:	4413      	add	r3, r2
 8014ad6:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8014ad8:	68b8      	ldr	r0, [r7, #8]
 8014ada:	f7ff fe53 	bl	8014784 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8014ade:	e7ed      	b.n	8014abc <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 8014ae0:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 8014ae2:	68fa      	ldr	r2, [r7, #12]
 8014ae4:	697b      	ldr	r3, [r7, #20]
 8014ae6:	429a      	cmp	r2, r3
 8014ae8:	d026      	beq.n	8014b38 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8014aea:	697a      	ldr	r2, [r7, #20]
 8014aec:	68fb      	ldr	r3, [r7, #12]
 8014aee:	1ad2      	subs	r2, r2, r3
 8014af0:	687b      	ldr	r3, [r7, #4]
 8014af2:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 8014af4:	4b14      	ldr	r3, [pc, #80]	@ (8014b48 <prvTCPWindowRx_ExpectedRX+0xd0>)
 8014af6:	681b      	ldr	r3, [r3, #0]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	dd1d      	ble.n	8014b38 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 8014afc:	687b      	ldr	r3, [r7, #4]
 8014afe:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8014b02:	461c      	mov	r4, r3
 8014b04:	687b      	ldr	r3, [r7, #4]
 8014b06:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8014b0a:	461d      	mov	r5, r3
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	68db      	ldr	r3, [r3, #12]
 8014b10:	693a      	ldr	r2, [r7, #16]
 8014b12:	1ad0      	subs	r0, r2, r3
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014b18:	687a      	ldr	r2, [r7, #4]
 8014b1a:	68d2      	ldr	r2, [r2, #12]
 8014b1c:	68f9      	ldr	r1, [r7, #12]
 8014b1e:	1a8a      	subs	r2, r1, r2
 8014b20:	6879      	ldr	r1, [r7, #4]
 8014b22:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 8014b26:	9102      	str	r1, [sp, #8]
 8014b28:	9201      	str	r2, [sp, #4]
 8014b2a:	9300      	str	r3, [sp, #0]
 8014b2c:	4603      	mov	r3, r0
 8014b2e:	462a      	mov	r2, r5
 8014b30:	4621      	mov	r1, r4
 8014b32:	4806      	ldr	r0, [pc, #24]	@ (8014b4c <prvTCPWindowRx_ExpectedRX+0xd4>)
 8014b34:	f00b fd2a 	bl	802058c <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	697a      	ldr	r2, [r7, #20]
 8014b3c:	611a      	str	r2, [r3, #16]
        }
 8014b3e:	bf00      	nop
 8014b40:	3718      	adds	r7, #24
 8014b42:	46bd      	mov	sp, r7
 8014b44:	bdb0      	pop	{r4, r5, r7, pc}
 8014b46:	bf00      	nop
 8014b48:	200012f4 	.word	0x200012f4
 8014b4c:	080251c8 	.word	0x080251c8

08014b50 <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 8014b50:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014b52:	b08f      	sub	sp, #60	@ 0x3c
 8014b54:	af04      	add	r7, sp, #16
 8014b56:	60f8      	str	r0, [r7, #12]
 8014b58:	60b9      	str	r1, [r7, #8]
 8014b5a:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 8014b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8014b60:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 8014b62:	68ba      	ldr	r2, [r7, #8]
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	4413      	add	r3, r2
 8014b68:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8014b6a:	68fb      	ldr	r3, [r7, #12]
 8014b6c:	691b      	ldr	r3, [r3, #16]
 8014b6e:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8014b70:	6a39      	ldr	r1, [r7, #32]
 8014b72:	68f8      	ldr	r0, [r7, #12]
 8014b74:	f7ff fd04 	bl	8014580 <xTCPWindowRxFind>
 8014b78:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8014b7a:	69bb      	ldr	r3, [r7, #24]
 8014b7c:	2b00      	cmp	r3, #0
 8014b7e:	d006      	beq.n	8014b8e <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 8014b80:	69bb      	ldr	r3, [r7, #24]
 8014b82:	689b      	ldr	r3, [r3, #8]
 8014b84:	461a      	mov	r2, r3
 8014b86:	6a3b      	ldr	r3, [r7, #32]
 8014b88:	4413      	add	r3, r2
 8014b8a:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8014b8c:	e7f0      	b.n	8014b70 <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 8014b8e:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 8014b90:	4b45      	ldr	r3, [pc, #276]	@ (8014ca8 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8014b92:	681b      	ldr	r3, [r3, #0]
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	dd20      	ble.n	8014bda <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 8014b98:	68fb      	ldr	r3, [r7, #12]
 8014b9a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8014b9e:	461d      	mov	r5, r3
 8014ba0:	68fb      	ldr	r3, [r7, #12]
 8014ba2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8014ba6:	461e      	mov	r6, r3
 8014ba8:	68fb      	ldr	r3, [r7, #12]
 8014baa:	68db      	ldr	r3, [r3, #12]
 8014bac:	68ba      	ldr	r2, [r7, #8]
 8014bae:	1ad0      	subs	r0, r2, r3
 8014bb0:	68fb      	ldr	r3, [r7, #12]
 8014bb2:	68db      	ldr	r3, [r3, #12]
 8014bb4:	69fa      	ldr	r2, [r7, #28]
 8014bb6:	1ad3      	subs	r3, r2, r3
 8014bb8:	68b9      	ldr	r1, [r7, #8]
 8014bba:	69fa      	ldr	r2, [r7, #28]
 8014bbc:	1a8a      	subs	r2, r1, r2
 8014bbe:	4614      	mov	r4, r2
 8014bc0:	68fa      	ldr	r2, [r7, #12]
 8014bc2:	68d2      	ldr	r2, [r2, #12]
 8014bc4:	6a39      	ldr	r1, [r7, #32]
 8014bc6:	1a8a      	subs	r2, r1, r2
 8014bc8:	9202      	str	r2, [sp, #8]
 8014bca:	9401      	str	r4, [sp, #4]
 8014bcc:	9300      	str	r3, [sp, #0]
 8014bce:	4603      	mov	r3, r0
 8014bd0:	4632      	mov	r2, r6
 8014bd2:	4629      	mov	r1, r5
 8014bd4:	4835      	ldr	r0, [pc, #212]	@ (8014cac <prvTCPWindowRx_UnexpectedRX+0x15c>)
 8014bd6:	f00b fcd9 	bl	802058c <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 8014bda:	68fb      	ldr	r3, [r7, #12]
 8014bdc:	4a34      	ldr	r2, [pc, #208]	@ (8014cb0 <prvTCPWindowRx_UnexpectedRX+0x160>)
 8014bde:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 8014be2:	68bb      	ldr	r3, [r7, #8]
 8014be4:	061a      	lsls	r2, r3, #24
 8014be6:	68bb      	ldr	r3, [r7, #8]
 8014be8:	021b      	lsls	r3, r3, #8
 8014bea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014bee:	431a      	orrs	r2, r3
 8014bf0:	68bb      	ldr	r3, [r7, #8]
 8014bf2:	0a1b      	lsrs	r3, r3, #8
 8014bf4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014bf8:	431a      	orrs	r2, r3
 8014bfa:	68bb      	ldr	r3, [r7, #8]
 8014bfc:	0e1b      	lsrs	r3, r3, #24
 8014bfe:	431a      	orrs	r2, r3
 8014c00:	68fb      	ldr	r3, [r7, #12]
 8014c02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 8014c06:	6a3b      	ldr	r3, [r7, #32]
 8014c08:	061a      	lsls	r2, r3, #24
 8014c0a:	6a3b      	ldr	r3, [r7, #32]
 8014c0c:	021b      	lsls	r3, r3, #8
 8014c0e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014c12:	431a      	orrs	r2, r3
 8014c14:	6a3b      	ldr	r3, [r7, #32]
 8014c16:	0a1b      	lsrs	r3, r3, #8
 8014c18:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014c1c:	431a      	orrs	r2, r3
 8014c1e:	6a3b      	ldr	r3, [r7, #32]
 8014c20:	0e1b      	lsrs	r3, r3, #24
 8014c22:	431a      	orrs	r2, r3
 8014c24:	68fb      	ldr	r3, [r7, #12]
 8014c26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 8014c2a:	68fb      	ldr	r3, [r7, #12]
 8014c2c:	220c      	movs	r2, #12
 8014c2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 8014c32:	68b9      	ldr	r1, [r7, #8]
 8014c34:	68f8      	ldr	r0, [r7, #12]
 8014c36:	f7ff fca3 	bl	8014580 <xTCPWindowRxFind>
 8014c3a:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 8014c3c:	69bb      	ldr	r3, [r7, #24]
 8014c3e:	2b00      	cmp	r3, #0
 8014c40:	d12d      	bne.n	8014c9e <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 8014c42:	687a      	ldr	r2, [r7, #4]
 8014c44:	2301      	movs	r3, #1
 8014c46:	68b9      	ldr	r1, [r7, #8]
 8014c48:	68f8      	ldr	r0, [r7, #12]
 8014c4a:	f7ff fcc1 	bl	80145d0 <xTCPWindowNew>
 8014c4e:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8014c50:	69bb      	ldr	r3, [r7, #24]
 8014c52:	2b00      	cmp	r3, #0
 8014c54:	d104      	bne.n	8014c60 <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 8014c56:	68fb      	ldr	r3, [r7, #12]
 8014c58:	2200      	movs	r2, #0
 8014c5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8014c5e:	e01e      	b.n	8014c9e <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 8014c60:	4b11      	ldr	r3, [pc, #68]	@ (8014ca8 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8014c62:	681b      	ldr	r3, [r3, #0]
 8014c64:	2b00      	cmp	r3, #0
 8014c66:	d014      	beq.n	8014c92 <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8014c6e:	4619      	mov	r1, r3
 8014c70:	68fb      	ldr	r3, [r7, #12]
 8014c72:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8014c76:	4618      	mov	r0, r3
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	68db      	ldr	r3, [r3, #12]
 8014c7c:	68ba      	ldr	r2, [r7, #8]
 8014c7e:	1ad2      	subs	r2, r2, r3
 8014c80:	68fb      	ldr	r3, [r7, #12]
 8014c82:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014c86:	9300      	str	r3, [sp, #0]
 8014c88:	4613      	mov	r3, r2
 8014c8a:	4602      	mov	r2, r0
 8014c8c:	4809      	ldr	r0, [pc, #36]	@ (8014cb4 <prvTCPWindowRx_UnexpectedRX+0x164>)
 8014c8e:	f00b fc7d 	bl	802058c <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 8014c92:	68ba      	ldr	r2, [r7, #8]
 8014c94:	69fb      	ldr	r3, [r7, #28]
 8014c96:	1ad3      	subs	r3, r2, r3
 8014c98:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 8014c9a:	697b      	ldr	r3, [r7, #20]
 8014c9c:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 8014c9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8014ca0:	4618      	mov	r0, r3
 8014ca2:	372c      	adds	r7, #44	@ 0x2c
 8014ca4:	46bd      	mov	sp, r7
 8014ca6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014ca8:	200012f4 	.word	0x200012f4
 8014cac:	0802520c 	.word	0x0802520c
 8014cb0:	0a050101 	.word	0x0a050101
 8014cb4:	0802524c 	.word	0x0802524c

08014cb8 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b08c      	sub	sp, #48	@ 0x30
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	60f8      	str	r0, [r7, #12]
 8014cc0:	60b9      	str	r1, [r7, #8]
 8014cc2:	607a      	str	r2, [r7, #4]
 8014cc4:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 8014cc6:	f04f 33ff 	mov.w	r3, #4294967295
 8014cca:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 8014ccc:	68bb      	ldr	r3, [r7, #8]
 8014cce:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 8014cd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014cd6:	2200      	movs	r2, #0
 8014cd8:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8014cda:	68fb      	ldr	r3, [r7, #12]
 8014cdc:	691b      	ldr	r3, [r3, #16]
 8014cde:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 8014ce0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014ce4:	4413      	add	r3, r2
 8014ce6:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 8014ce8:	69fa      	ldr	r2, [r7, #28]
 8014cea:	6a3b      	ldr	r3, [r7, #32]
 8014cec:	1ad3      	subs	r3, r2, r3
 8014cee:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 8014cf0:	69bb      	ldr	r3, [r7, #24]
 8014cf2:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8014cf4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014cf6:	6a3b      	ldr	r3, [r7, #32]
 8014cf8:	1ad3      	subs	r3, r2, r3
 8014cfa:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 8014cfc:	69bb      	ldr	r3, [r7, #24]
 8014cfe:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 8014d00:	693b      	ldr	r3, [r7, #16]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	da18      	bge.n	8014d38 <lTCPWindowRxCheck+0x80>
 8014d06:	697b      	ldr	r3, [r7, #20]
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	dd15      	ble.n	8014d38 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 8014d0c:	68fb      	ldr	r3, [r7, #12]
 8014d0e:	68db      	ldr	r3, [r3, #12]
 8014d10:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d12:	1ad2      	subs	r2, r2, r3
 8014d14:	697b      	ldr	r3, [r7, #20]
 8014d16:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014d18:	4824      	ldr	r0, [pc, #144]	@ (8014dac <lTCPWindowRxCheck+0xf4>)
 8014d1a:	f00b fc37 	bl	802058c <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014d22:	1ad3      	subs	r3, r2, r3
 8014d24:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 8014d26:	693b      	ldr	r3, [r7, #16]
 8014d28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d2a:	4413      	add	r3, r2
 8014d2c:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	425b      	negs	r3, r3
 8014d32:	461a      	mov	r2, r3
 8014d34:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014d36:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 8014d38:	68fb      	ldr	r3, [r7, #12]
 8014d3a:	2200      	movs	r2, #0
 8014d3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	2200      	movs	r2, #0
 8014d44:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 8014d46:	6a3a      	ldr	r2, [r7, #32]
 8014d48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d4a:	429a      	cmp	r2, r3
 8014d4c:	d110      	bne.n	8014d70 <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 8014d4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d50:	683b      	ldr	r3, [r7, #0]
 8014d52:	429a      	cmp	r2, r3
 8014d54:	d905      	bls.n	8014d62 <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 8014d56:	683a      	ldr	r2, [r7, #0]
 8014d58:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014d5a:	4815      	ldr	r0, [pc, #84]	@ (8014db0 <lTCPWindowRxCheck+0xf8>)
 8014d5c:	f00b fc16 	bl	802058c <lUDPLoggingPrintf>
 8014d60:	e01f      	b.n	8014da2 <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 8014d62:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014d64:	68f8      	ldr	r0, [r7, #12]
 8014d66:	f7ff fe87 	bl	8014a78 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 8014d6a:	2300      	movs	r3, #0
 8014d6c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014d6e:	e018      	b.n	8014da2 <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 8014d70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d72:	3301      	adds	r3, #1
 8014d74:	6a3a      	ldr	r2, [r7, #32]
 8014d76:	429a      	cmp	r2, r3
 8014d78:	d013      	beq.n	8014da2 <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 8014d7a:	697b      	ldr	r3, [r7, #20]
 8014d7c:	2b00      	cmp	r3, #0
 8014d7e:	dd10      	ble.n	8014da2 <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 8014d80:	683b      	ldr	r3, [r7, #0]
 8014d82:	697a      	ldr	r2, [r7, #20]
 8014d84:	429a      	cmp	r2, r3
 8014d86:	dd06      	ble.n	8014d96 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 8014d88:	683b      	ldr	r3, [r7, #0]
 8014d8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d8c:	6979      	ldr	r1, [r7, #20]
 8014d8e:	4809      	ldr	r0, [pc, #36]	@ (8014db4 <lTCPWindowRxCheck+0xfc>)
 8014d90:	f00b fbfc 	bl	802058c <lUDPLoggingPrintf>
 8014d94:	e005      	b.n	8014da2 <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 8014d96:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014d98:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8014d9a:	68f8      	ldr	r0, [r7, #12]
 8014d9c:	f7ff fed8 	bl	8014b50 <prvTCPWindowRx_UnexpectedRX>
 8014da0:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 8014da2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8014da4:	4618      	mov	r0, r3
 8014da6:	3730      	adds	r7, #48	@ 0x30
 8014da8:	46bd      	mov	sp, r7
 8014daa:	bd80      	pop	{r7, pc}
 8014dac:	0802527c 	.word	0x0802527c
 8014db0:	080252bc 	.word	0x080252bc
 8014db4:	080252fc 	.word	0x080252fc

08014db8 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 8014db8:	b480      	push	{r7}
 8014dba:	b087      	sub	sp, #28
 8014dbc:	af00      	add	r7, sp, #0
 8014dbe:	60f8      	str	r0, [r7, #12]
 8014dc0:	60b9      	str	r1, [r7, #8]
 8014dc2:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 8014dc4:	68fa      	ldr	r2, [r7, #12]
 8014dc6:	687b      	ldr	r3, [r7, #4]
 8014dc8:	4413      	add	r3, r2
 8014dca:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 8014dcc:	697a      	ldr	r2, [r7, #20]
 8014dce:	68bb      	ldr	r3, [r7, #8]
 8014dd0:	429a      	cmp	r2, r3
 8014dd2:	db03      	blt.n	8014ddc <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 8014dd4:	697a      	ldr	r2, [r7, #20]
 8014dd6:	68bb      	ldr	r3, [r7, #8]
 8014dd8:	1ad3      	subs	r3, r2, r3
 8014dda:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 8014ddc:	697b      	ldr	r3, [r7, #20]
        }
 8014dde:	4618      	mov	r0, r3
 8014de0:	371c      	adds	r7, #28
 8014de2:	46bd      	mov	sp, r7
 8014de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014de8:	4770      	bx	lr
	...

08014dec <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 8014dec:	b580      	push	{r7, lr}
 8014dee:	b088      	sub	sp, #32
 8014df0:	af02      	add	r7, sp, #8
 8014df2:	60f8      	str	r0, [r7, #12]
 8014df4:	60b9      	str	r1, [r7, #8]
 8014df6:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	685a      	ldr	r2, [r3, #4]
 8014dfc:	68bb      	ldr	r3, [r7, #8]
 8014dfe:	689b      	ldr	r3, [r3, #8]
 8014e00:	1ad3      	subs	r3, r2, r3
 8014e02:	4619      	mov	r1, r3
 8014e04:	6878      	ldr	r0, [r7, #4]
 8014e06:	f7f4 fe05 	bl	8009a14 <FreeRTOS_min_int32>
 8014e0a:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 8014e0c:	68bb      	ldr	r3, [r7, #8]
 8014e0e:	689a      	ldr	r2, [r3, #8]
 8014e10:	697b      	ldr	r3, [r7, #20]
 8014e12:	441a      	add	r2, r3
 8014e14:	68bb      	ldr	r3, [r7, #8]
 8014e16:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 8014e18:	68bb      	ldr	r3, [r7, #8]
 8014e1a:	689a      	ldr	r2, [r3, #8]
 8014e1c:	68bb      	ldr	r3, [r7, #8]
 8014e1e:	685b      	ldr	r3, [r3, #4]
 8014e20:	429a      	cmp	r2, r3
 8014e22:	db02      	blt.n	8014e2a <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 8014e24:	68fb      	ldr	r3, [r7, #12]
 8014e26:	2200      	movs	r2, #0
 8014e28:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014e2e:	697b      	ldr	r3, [r7, #20]
 8014e30:	441a      	add	r2, r3
 8014e32:	68fb      	ldr	r3, [r7, #12]
 8014e34:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 8014e36:	4b12      	ldr	r3, [pc, #72]	@ (8014e80 <prvTCPWindowTxAdd_FrontSegment+0x94>)
 8014e38:	681b      	ldr	r3, [r3, #0]
 8014e3a:	2b01      	cmp	r3, #1
 8014e3c:	dd1a      	ble.n	8014e74 <prvTCPWindowTxAdd_FrontSegment+0x88>
 8014e3e:	68fb      	ldr	r3, [r7, #12]
 8014e40:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8014e44:	2b17      	cmp	r3, #23
 8014e46:	d015      	beq.n	8014e74 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 8014e48:	68bb      	ldr	r3, [r7, #8]
 8014e4a:	681a      	ldr	r2, [r3, #0]
 8014e4c:	68fb      	ldr	r3, [r7, #12]
 8014e4e:	69db      	ldr	r3, [r3, #28]
 8014e50:	1ad1      	subs	r1, r2, r3
 8014e52:	68bb      	ldr	r3, [r7, #8]
 8014e54:	6898      	ldr	r0, [r3, #8]
 8014e56:	68fb      	ldr	r3, [r7, #12]
 8014e58:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014e5a:	68fb      	ldr	r3, [r7, #12]
 8014e5c:	69db      	ldr	r3, [r3, #28]
 8014e5e:	1ad3      	subs	r3, r2, r3
 8014e60:	68ba      	ldr	r2, [r7, #8]
 8014e62:	68d2      	ldr	r2, [r2, #12]
 8014e64:	9201      	str	r2, [sp, #4]
 8014e66:	9300      	str	r3, [sp, #0]
 8014e68:	4603      	mov	r3, r0
 8014e6a:	460a      	mov	r2, r1
 8014e6c:	6879      	ldr	r1, [r7, #4]
 8014e6e:	4805      	ldr	r0, [pc, #20]	@ (8014e84 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 8014e70:	f00b fb8c 	bl	802058c <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 8014e74:	697b      	ldr	r3, [r7, #20]
        }
 8014e76:	4618      	mov	r0, r3
 8014e78:	3718      	adds	r7, #24
 8014e7a:	46bd      	mov	sp, r7
 8014e7c:	bd80      	pop	{r7, pc}
 8014e7e:	bf00      	nop
 8014e80:	200012f4 	.word	0x200012f4
 8014e84:	08025340 	.word	0x08025340

08014e88 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8014e88:	b580      	push	{r7, lr}
 8014e8a:	b08a      	sub	sp, #40	@ 0x28
 8014e8c:	af00      	add	r7, sp, #0
 8014e8e:	60f8      	str	r0, [r7, #12]
 8014e90:	60b9      	str	r1, [r7, #8]
 8014e92:	607a      	str	r2, [r7, #4]
 8014e94:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 8014e96:	68bb      	ldr	r3, [r7, #8]
 8014e98:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 8014e9a:	2300      	movs	r3, #0
 8014e9c:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 8014ea2:	68fb      	ldr	r3, [r7, #12]
 8014ea4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8014ea6:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 8014ea8:	69bb      	ldr	r3, [r7, #24]
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d073      	beq.n	8014f96 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8014eae:	69bb      	ldr	r3, [r7, #24]
 8014eb0:	689a      	ldr	r2, [r3, #8]
 8014eb2:	69bb      	ldr	r3, [r7, #24]
 8014eb4:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	da6d      	bge.n	8014f96 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8014eba:	69bb      	ldr	r3, [r7, #24]
 8014ebc:	7d9b      	ldrb	r3, [r3, #22]
 8014ebe:	f003 0301 	and.w	r3, r3, #1
 8014ec2:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 8014ec4:	2b00      	cmp	r3, #0
 8014ec6:	d166      	bne.n	8014f96 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 8014ec8:	69bb      	ldr	r3, [r7, #24]
 8014eca:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d062      	beq.n	8014f96 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 8014ed0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ed2:	69b9      	ldr	r1, [r7, #24]
 8014ed4:	68f8      	ldr	r0, [r7, #12]
 8014ed6:	f7ff ff89 	bl	8014dec <prvTCPWindowTxAdd_FrontSegment>
 8014eda:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 8014edc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014ede:	697b      	ldr	r3, [r7, #20]
 8014ee0:	1ad3      	subs	r3, r2, r3
 8014ee2:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 8014ee4:	6a3a      	ldr	r2, [r7, #32]
 8014ee6:	697b      	ldr	r3, [r7, #20]
 8014ee8:	4413      	add	r3, r2
 8014eea:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8014eec:	697a      	ldr	r2, [r7, #20]
 8014eee:	6839      	ldr	r1, [r7, #0]
 8014ef0:	69f8      	ldr	r0, [r7, #28]
 8014ef2:	f7ff ff61 	bl	8014db8 <lTCPIncrementTxPosition>
 8014ef6:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 8014ef8:	e04d      	b.n	8014f96 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 8014efa:	68fb      	ldr	r3, [r7, #12]
 8014efc:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8014efe:	68fb      	ldr	r3, [r7, #12]
 8014f00:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8014f04:	461a      	mov	r2, r3
 8014f06:	2300      	movs	r3, #0
 8014f08:	68f8      	ldr	r0, [r7, #12]
 8014f0a:	f7ff fb61 	bl	80145d0 <xTCPWindowNew>
 8014f0e:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 8014f10:	69bb      	ldr	r3, [r7, #24]
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d037      	beq.n	8014f86 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 8014f16:	69bb      	ldr	r3, [r7, #24]
 8014f18:	685b      	ldr	r3, [r3, #4]
 8014f1a:	4619      	mov	r1, r3
 8014f1c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014f1e:	f7f4 fd79 	bl	8009a14 <FreeRTOS_min_int32>
 8014f22:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 8014f24:	69bb      	ldr	r3, [r7, #24]
 8014f26:	697a      	ldr	r2, [r7, #20]
 8014f28:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 8014f2a:	69bb      	ldr	r3, [r7, #24]
 8014f2c:	69fa      	ldr	r2, [r7, #28]
 8014f2e:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 8014f30:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014f32:	697b      	ldr	r3, [r7, #20]
 8014f34:	1ad3      	subs	r3, r2, r3
 8014f36:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8014f38:	697a      	ldr	r2, [r7, #20]
 8014f3a:	6839      	ldr	r1, [r7, #0]
 8014f3c:	69f8      	ldr	r0, [r7, #28]
 8014f3e:	f7ff ff3b 	bl	8014db8 <lTCPIncrementTxPosition>
 8014f42:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8014f44:	68fb      	ldr	r3, [r7, #12]
 8014f46:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014f48:	697b      	ldr	r3, [r7, #20]
 8014f4a:	441a      	add	r2, r3
 8014f4c:	68fb      	ldr	r3, [r7, #12]
 8014f4e:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 8014f50:	6a3a      	ldr	r2, [r7, #32]
 8014f52:	697b      	ldr	r3, [r7, #20]
 8014f54:	4413      	add	r3, r2
 8014f56:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 8014f58:	68fb      	ldr	r3, [r7, #12]
 8014f5a:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 8014f5e:	69bb      	ldr	r3, [r7, #24]
 8014f60:	3318      	adds	r3, #24
 8014f62:	4619      	mov	r1, r3
 8014f64:	4610      	mov	r0, r2
 8014f66:	f7ff fa63 	bl	8014430 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 8014f6a:	69bb      	ldr	r3, [r7, #24]
 8014f6c:	689a      	ldr	r2, [r3, #8]
 8014f6e:	69bb      	ldr	r3, [r7, #24]
 8014f70:	685b      	ldr	r3, [r3, #4]
 8014f72:	429a      	cmp	r2, r3
 8014f74:	da03      	bge.n	8014f7e <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8014f76:	68fb      	ldr	r3, [r7, #12]
 8014f78:	69ba      	ldr	r2, [r7, #24]
 8014f7a:	67da      	str	r2, [r3, #124]	@ 0x7c
 8014f7c:	e00b      	b.n	8014f96 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 8014f7e:	68fb      	ldr	r3, [r7, #12]
 8014f80:	2200      	movs	r2, #0
 8014f82:	67da      	str	r2, [r3, #124]	@ 0x7c
 8014f84:	e007      	b.n	8014f96 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 8014f86:	6a3b      	ldr	r3, [r7, #32]
 8014f88:	2b00      	cmp	r3, #0
 8014f8a:	d008      	beq.n	8014f9e <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 8014f8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014f8e:	4807      	ldr	r0, [pc, #28]	@ (8014fac <lTCPWindowTxAdd+0x124>)
 8014f90:	f00b fafc 	bl	802058c <lUDPLoggingPrintf>
                    }

                    break;
 8014f94:	e003      	b.n	8014f9e <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 8014f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	dcae      	bgt.n	8014efa <lTCPWindowTxAdd+0x72>
 8014f9c:	e000      	b.n	8014fa0 <lTCPWindowTxAdd+0x118>
                    break;
 8014f9e:	bf00      	nop
                }
            }

            return lDone;
 8014fa0:	6a3b      	ldr	r3, [r7, #32]
        }
 8014fa2:	4618      	mov	r0, r3
 8014fa4:	3728      	adds	r7, #40	@ 0x28
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	bd80      	pop	{r7, pc}
 8014faa:	bf00      	nop
 8014fac:	08025388 	.word	0x08025388

08014fb0 <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 8014fb0:	b480      	push	{r7}
 8014fb2:	b083      	sub	sp, #12
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d101      	bne.n	8014fc6 <xTCPWindowTxDone+0x16>
 8014fc2:	2301      	movs	r3, #1
 8014fc4:	e000      	b.n	8014fc8 <xTCPWindowTxDone+0x18>
 8014fc6:	2300      	movs	r3, #0
        }
 8014fc8:	4618      	mov	r0, r3
 8014fca:	370c      	adds	r7, #12
 8014fcc:	46bd      	mov	sp, r7
 8014fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014fd2:	4770      	bx	lr

08014fd4 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b086      	sub	sp, #24
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	6078      	str	r0, [r7, #4]
 8014fdc:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 8014fde:	687b      	ldr	r3, [r7, #4]
 8014fe0:	3354      	adds	r3, #84	@ 0x54
 8014fe2:	4618      	mov	r0, r3
 8014fe4:	f7ff fbb5 	bl	8014752 <xTCPWindowPeekHead>
 8014fe8:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2b00      	cmp	r3, #0
 8014fee:	d102      	bne.n	8014ff6 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 8014ff0:	2300      	movs	r3, #0
 8014ff2:	613b      	str	r3, [r7, #16]
 8014ff4:	e02f      	b.n	8015056 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8014ff6:	687b      	ldr	r3, [r7, #4]
 8014ff8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8014ffa:	687b      	ldr	r3, [r7, #4]
 8014ffc:	6a1b      	ldr	r3, [r3, #32]
 8014ffe:	429a      	cmp	r2, r3
 8015000:	d306      	bcc.n	8015010 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 8015002:	687b      	ldr	r3, [r7, #4]
 8015004:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015006:	687b      	ldr	r3, [r7, #4]
 8015008:	6a1b      	ldr	r3, [r3, #32]
 801500a:	1ad3      	subs	r3, r2, r3
 801500c:	617b      	str	r3, [r7, #20]
 801500e:	e001      	b.n	8015014 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 8015010:	2300      	movs	r3, #0
 8015012:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8015014:	6979      	ldr	r1, [r7, #20]
 8015016:	6838      	ldr	r0, [r7, #0]
 8015018:	f7f4 fd0c 	bl	8009a34 <FreeRTOS_min_uint32>
 801501c:	4602      	mov	r2, r0
 801501e:	683b      	ldr	r3, [r7, #0]
 8015020:	1a9b      	subs	r3, r3, r2
 8015022:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8015024:	68fb      	ldr	r3, [r7, #12]
 8015026:	689b      	ldr	r3, [r3, #8]
 8015028:	461a      	mov	r2, r3
 801502a:	68bb      	ldr	r3, [r7, #8]
 801502c:	4293      	cmp	r3, r2
 801502e:	d302      	bcc.n	8015036 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 8015030:	2301      	movs	r3, #1
 8015032:	613b      	str	r3, [r7, #16]
 8015034:	e001      	b.n	801503a <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 8015036:	2300      	movs	r3, #0
 8015038:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 801503a:	697b      	ldr	r3, [r7, #20]
 801503c:	2b00      	cmp	r3, #0
 801503e:	d00a      	beq.n	8015056 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 8015040:	687b      	ldr	r3, [r7, #4]
 8015042:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8015044:	68fb      	ldr	r3, [r7, #12]
 8015046:	689b      	ldr	r3, [r3, #8]
 8015048:	4619      	mov	r1, r3
 801504a:	697b      	ldr	r3, [r7, #20]
 801504c:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 801504e:	429a      	cmp	r2, r3
 8015050:	d201      	bcs.n	8015056 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 8015052:	2300      	movs	r3, #0
 8015054:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 8015056:	693b      	ldr	r3, [r7, #16]
        }
 8015058:	4618      	mov	r0, r3
 801505a:	3718      	adds	r7, #24
 801505c:	46bd      	mov	sp, r7
 801505e:	bd80      	pop	{r7, pc}

08015060 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 8015060:	b580      	push	{r7, lr}
 8015062:	b08a      	sub	sp, #40	@ 0x28
 8015064:	af00      	add	r7, sp, #0
 8015066:	60f8      	str	r0, [r7, #12]
 8015068:	60b9      	str	r1, [r7, #8]
 801506a:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 801506c:	687b      	ldr	r3, [r7, #4]
 801506e:	2200      	movs	r2, #0
 8015070:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8015072:	68fb      	ldr	r3, [r7, #12]
 8015074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015076:	2b00      	cmp	r3, #0
 8015078:	d002      	beq.n	8015080 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 801507a:	2301      	movs	r3, #1
 801507c:	627b      	str	r3, [r7, #36]	@ 0x24
 801507e:	e050      	b.n	8015122 <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	3368      	adds	r3, #104	@ 0x68
 8015084:	4618      	mov	r0, r3
 8015086:	f7ff fb64 	bl	8014752 <xTCPWindowPeekHead>
 801508a:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 801508c:	6a3b      	ldr	r3, [r7, #32]
 801508e:	2b00      	cmp	r3, #0
 8015090:	d01f      	beq.n	80150d2 <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 8015092:	68fb      	ldr	r3, [r7, #12]
 8015094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015096:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 8015098:	6a3b      	ldr	r3, [r7, #32]
 801509a:	3310      	adds	r3, #16
 801509c:	4618      	mov	r0, r3
 801509e:	f7ff f9e4 	bl	801446a <ulTimerGetAge>
 80150a2:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 80150a4:	6a3b      	ldr	r3, [r7, #32]
 80150a6:	7d1b      	ldrb	r3, [r3, #20]
 80150a8:	461a      	mov	r2, r3
 80150aa:	2301      	movs	r3, #1
 80150ac:	4093      	lsls	r3, r2
 80150ae:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 80150b0:	697b      	ldr	r3, [r7, #20]
 80150b2:	69fa      	ldr	r2, [r7, #28]
 80150b4:	fb02 f303 	mul.w	r3, r2, r3
 80150b8:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 80150ba:	697a      	ldr	r2, [r7, #20]
 80150bc:	69bb      	ldr	r3, [r7, #24]
 80150be:	429a      	cmp	r2, r3
 80150c0:	d904      	bls.n	80150cc <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 80150c2:	697a      	ldr	r2, [r7, #20]
 80150c4:	69bb      	ldr	r3, [r7, #24]
 80150c6:	1ad2      	subs	r2, r2, r3
 80150c8:	687b      	ldr	r3, [r7, #4]
 80150ca:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 80150cc:	2301      	movs	r3, #1
 80150ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80150d0:	e027      	b.n	8015122 <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 80150d2:	68fb      	ldr	r3, [r7, #12]
 80150d4:	3354      	adds	r3, #84	@ 0x54
 80150d6:	4618      	mov	r0, r3
 80150d8:	f7ff fb3b 	bl	8014752 <xTCPWindowPeekHead>
 80150dc:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 80150de:	6a3b      	ldr	r3, [r7, #32]
 80150e0:	2b00      	cmp	r3, #0
 80150e2:	d102      	bne.n	80150ea <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 80150e4:	2300      	movs	r3, #0
 80150e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80150e8:	e01b      	b.n	8015122 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 80150ea:	68b9      	ldr	r1, [r7, #8]
 80150ec:	68f8      	ldr	r0, [r7, #12]
 80150ee:	f7ff ff71 	bl	8014fd4 <prvTCPWindowTxHasSpace>
 80150f2:	4603      	mov	r3, r0
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d102      	bne.n	80150fe <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 80150f8:	2300      	movs	r3, #0
 80150fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80150fc:	e011      	b.n	8015122 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80150fe:	68fb      	ldr	r3, [r7, #12]
 8015100:	781b      	ldrb	r3, [r3, #0]
 8015102:	f003 0302 	and.w	r3, r3, #2
 8015106:	b2db      	uxtb	r3, r3
 8015108:	2b00      	cmp	r3, #0
 801510a:	d008      	beq.n	801511e <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 801510c:	6a3b      	ldr	r3, [r7, #32]
 801510e:	689a      	ldr	r2, [r3, #8]
 8015110:	6a3b      	ldr	r3, [r7, #32]
 8015112:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8015114:	429a      	cmp	r2, r3
 8015116:	da02      	bge.n	801511e <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 8015118:	2300      	movs	r3, #0
 801511a:	627b      	str	r3, [r7, #36]	@ 0x24
 801511c:	e001      	b.n	8015122 <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 801511e:	2301      	movs	r3, #1
 8015120:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 8015122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8015124:	4618      	mov	r0, r3
 8015126:	3728      	adds	r7, #40	@ 0x28
 8015128:	46bd      	mov	sp, r7
 801512a:	bd80      	pop	{r7, pc}

0801512c <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 801512c:	b590      	push	{r4, r7, lr}
 801512e:	b087      	sub	sp, #28
 8015130:	af02      	add	r7, sp, #8
 8015132:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015134:	687b      	ldr	r3, [r7, #4]
 8015136:	3368      	adds	r3, #104	@ 0x68
 8015138:	4618      	mov	r0, r3
 801513a:	f7ff fb0a 	bl	8014752 <xTCPWindowPeekHead>
 801513e:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 8015140:	68fb      	ldr	r3, [r7, #12]
 8015142:	2b00      	cmp	r3, #0
 8015144:	d043      	beq.n	80151ce <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 8015146:	68fb      	ldr	r3, [r7, #12]
 8015148:	7d1b      	ldrb	r3, [r3, #20]
 801514a:	461a      	mov	r2, r3
 801514c:	2301      	movs	r3, #1
 801514e:	4093      	lsls	r3, r2
 8015150:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 8015152:	687b      	ldr	r3, [r7, #4]
 8015154:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015156:	461a      	mov	r2, r3
 8015158:	68bb      	ldr	r3, [r7, #8]
 801515a:	fb02 f303 	mul.w	r3, r2, r3
 801515e:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8015160:	68fb      	ldr	r3, [r7, #12]
 8015162:	3310      	adds	r3, #16
 8015164:	4618      	mov	r0, r3
 8015166:	f7ff f980 	bl	801446a <ulTimerGetAge>
 801516a:	4602      	mov	r2, r0
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	4293      	cmp	r3, r2
 8015170:	d22b      	bcs.n	80151ca <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8015172:	687b      	ldr	r3, [r7, #4]
 8015174:	3368      	adds	r3, #104	@ 0x68
 8015176:	4618      	mov	r0, r3
 8015178:	f7ff fad2 	bl	8014720 <xTCPWindowGetHead>
 801517c:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 801517e:	68fb      	ldr	r3, [r7, #12]
 8015180:	2200      	movs	r2, #0
 8015182:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015184:	4b14      	ldr	r3, [pc, #80]	@ (80151d8 <pxTCPWindowTx_GetWaitQueue+0xac>)
 8015186:	681b      	ldr	r3, [r3, #0]
 8015188:	2b00      	cmp	r3, #0
 801518a:	d020      	beq.n	80151ce <pxTCPWindowTx_GetWaitQueue+0xa2>
 801518c:	687b      	ldr	r3, [r7, #4]
 801518e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015192:	2b17      	cmp	r3, #23
 8015194:	d01b      	beq.n	80151ce <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 8015196:	687b      	ldr	r3, [r7, #4]
 8015198:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801519c:	4618      	mov	r0, r3
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80151a4:	461c      	mov	r4, r3
 80151a6:	68fb      	ldr	r3, [r7, #12]
 80151a8:	6899      	ldr	r1, [r3, #8]
 80151aa:	68fb      	ldr	r3, [r7, #12]
 80151ac:	681a      	ldr	r2, [r3, #0]
 80151ae:	687b      	ldr	r3, [r7, #4]
 80151b0:	69db      	ldr	r3, [r3, #28]
 80151b2:	1ad3      	subs	r3, r2, r3
 80151b4:	68fa      	ldr	r2, [r7, #12]
 80151b6:	6812      	ldr	r2, [r2, #0]
 80151b8:	9201      	str	r2, [sp, #4]
 80151ba:	9300      	str	r3, [sp, #0]
 80151bc:	460b      	mov	r3, r1
 80151be:	4622      	mov	r2, r4
 80151c0:	4601      	mov	r1, r0
 80151c2:	4806      	ldr	r0, [pc, #24]	@ (80151dc <pxTCPWindowTx_GetWaitQueue+0xb0>)
 80151c4:	f00b f9e2 	bl	802058c <lUDPLoggingPrintf>
 80151c8:	e001      	b.n	80151ce <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 80151ca:	2300      	movs	r3, #0
 80151cc:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 80151ce:	68fb      	ldr	r3, [r7, #12]
        }
 80151d0:	4618      	mov	r0, r3
 80151d2:	3714      	adds	r7, #20
 80151d4:	46bd      	mov	sp, r7
 80151d6:	bd90      	pop	{r4, r7, pc}
 80151d8:	200012f4 	.word	0x200012f4
 80151dc:	080253c4 	.word	0x080253c4

080151e0 <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 80151e0:	b590      	push	{r4, r7, lr}
 80151e2:	b087      	sub	sp, #28
 80151e4:	af02      	add	r7, sp, #8
 80151e6:	6078      	str	r0, [r7, #4]
 80151e8:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	3354      	adds	r3, #84	@ 0x54
 80151ee:	4618      	mov	r0, r3
 80151f0:	f7ff faaf 	bl	8014752 <xTCPWindowPeekHead>
 80151f4:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 80151f6:	68fb      	ldr	r3, [r7, #12]
 80151f8:	2b00      	cmp	r3, #0
 80151fa:	d04f      	beq.n	801529c <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 80151fc:	687b      	ldr	r3, [r7, #4]
 80151fe:	781b      	ldrb	r3, [r3, #0]
 8015200:	f003 0302 	and.w	r3, r3, #2
 8015204:	b2db      	uxtb	r3, r3
 8015206:	2b00      	cmp	r3, #0
 8015208:	d008      	beq.n	801521c <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 801520a:	68fb      	ldr	r3, [r7, #12]
 801520c:	689a      	ldr	r2, [r3, #8]
 801520e:	68fb      	ldr	r3, [r7, #12]
 8015210:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8015212:	429a      	cmp	r2, r3
 8015214:	da02      	bge.n	801521c <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 8015216:	2300      	movs	r3, #0
 8015218:	60fb      	str	r3, [r7, #12]
 801521a:	e03f      	b.n	801529c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 801521c:	6839      	ldr	r1, [r7, #0]
 801521e:	6878      	ldr	r0, [r7, #4]
 8015220:	f7ff fed8 	bl	8014fd4 <prvTCPWindowTxHasSpace>
 8015224:	4603      	mov	r3, r0
 8015226:	2b00      	cmp	r3, #0
 8015228:	d102      	bne.n	8015230 <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 801522a:	2300      	movs	r3, #0
 801522c:	60fb      	str	r3, [r7, #12]
 801522e:	e035      	b.n	801529c <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	3354      	adds	r3, #84	@ 0x54
 8015234:	4618      	mov	r0, r3
 8015236:	f7ff fa73 	bl	8014720 <xTCPWindowGetHead>
 801523a:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 801523c:	687b      	ldr	r3, [r7, #4]
 801523e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015240:	68fa      	ldr	r2, [r7, #12]
 8015242:	429a      	cmp	r2, r3
 8015244:	d102      	bne.n	801524c <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	2200      	movs	r2, #0
 801524a:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	681b      	ldr	r3, [r3, #0]
 8015250:	68fa      	ldr	r2, [r7, #12]
 8015252:	6892      	ldr	r2, [r2, #8]
 8015254:	441a      	add	r2, r3
 8015256:	687b      	ldr	r3, [r7, #4]
 8015258:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801525a:	4b13      	ldr	r3, [pc, #76]	@ (80152a8 <pxTCPWindowTx_GetTXQueue+0xc8>)
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	2b01      	cmp	r3, #1
 8015260:	dd1c      	ble.n	801529c <pxTCPWindowTx_GetTXQueue+0xbc>
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015268:	2b17      	cmp	r3, #23
 801526a:	d017      	beq.n	801529c <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015272:	4618      	mov	r0, r3
 8015274:	687b      	ldr	r3, [r7, #4]
 8015276:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801527a:	461c      	mov	r4, r3
 801527c:	68fb      	ldr	r3, [r7, #12]
 801527e:	6899      	ldr	r1, [r3, #8]
 8015280:	68fb      	ldr	r3, [r7, #12]
 8015282:	681a      	ldr	r2, [r3, #0]
 8015284:	687b      	ldr	r3, [r7, #4]
 8015286:	69db      	ldr	r3, [r3, #28]
 8015288:	1ad3      	subs	r3, r2, r3
 801528a:	683a      	ldr	r2, [r7, #0]
 801528c:	9201      	str	r2, [sp, #4]
 801528e:	9300      	str	r3, [sp, #0]
 8015290:	460b      	mov	r3, r1
 8015292:	4622      	mov	r2, r4
 8015294:	4601      	mov	r1, r0
 8015296:	4805      	ldr	r0, [pc, #20]	@ (80152ac <pxTCPWindowTx_GetTXQueue+0xcc>)
 8015298:	f00b f978 	bl	802058c <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 801529c:	68fb      	ldr	r3, [r7, #12]
        }
 801529e:	4618      	mov	r0, r3
 80152a0:	3714      	adds	r7, #20
 80152a2:	46bd      	mov	sp, r7
 80152a4:	bd90      	pop	{r4, r7, pc}
 80152a6:	bf00      	nop
 80152a8:	200012f4 	.word	0x200012f4
 80152ac:	08025410 	.word	0x08025410

080152b0 <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 80152b0:	b590      	push	{r4, r7, lr}
 80152b2:	b08b      	sub	sp, #44	@ 0x2c
 80152b4:	af02      	add	r7, sp, #8
 80152b6:	60f8      	str	r0, [r7, #12]
 80152b8:	60b9      	str	r1, [r7, #8]
 80152ba:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 80152bc:	2300      	movs	r3, #0
 80152be:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	3340      	adds	r3, #64	@ 0x40
 80152c4:	4618      	mov	r0, r3
 80152c6:	f7ff fa2b 	bl	8014720 <xTCPWindowGetHead>
 80152ca:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 80152cc:	68fb      	ldr	r3, [r7, #12]
 80152ce:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80152d0:	68fb      	ldr	r3, [r7, #12]
 80152d2:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 80152d4:	69fb      	ldr	r3, [r7, #28]
 80152d6:	2b00      	cmp	r3, #0
 80152d8:	d01c      	beq.n	8015314 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 80152da:	4b41      	ldr	r3, [pc, #260]	@ (80153e0 <ulTCPWindowTxGet+0x130>)
 80152dc:	681b      	ldr	r3, [r3, #0]
 80152de:	2b00      	cmp	r3, #0
 80152e0:	d024      	beq.n	801532c <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 80152e2:	68fb      	ldr	r3, [r7, #12]
 80152e4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80152e8:	4618      	mov	r0, r3
 80152ea:	68fb      	ldr	r3, [r7, #12]
 80152ec:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80152f0:	461c      	mov	r4, r3
 80152f2:	69fb      	ldr	r3, [r7, #28]
 80152f4:	6899      	ldr	r1, [r3, #8]
 80152f6:	69fb      	ldr	r3, [r7, #28]
 80152f8:	681a      	ldr	r2, [r3, #0]
 80152fa:	68fb      	ldr	r3, [r7, #12]
 80152fc:	69db      	ldr	r3, [r3, #28]
 80152fe:	1ad3      	subs	r3, r2, r3
 8015300:	68ba      	ldr	r2, [r7, #8]
 8015302:	9201      	str	r2, [sp, #4]
 8015304:	9300      	str	r3, [sp, #0]
 8015306:	460b      	mov	r3, r1
 8015308:	4622      	mov	r2, r4
 801530a:	4601      	mov	r1, r0
 801530c:	4835      	ldr	r0, [pc, #212]	@ (80153e4 <ulTCPWindowTxGet+0x134>)
 801530e:	f00b f93d 	bl	802058c <lUDPLoggingPrintf>
 8015312:	e00b      	b.n	801532c <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 8015314:	68f8      	ldr	r0, [r7, #12]
 8015316:	f7ff ff09 	bl	801512c <pxTCPWindowTx_GetWaitQueue>
 801531a:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 801531c:	69fb      	ldr	r3, [r7, #28]
 801531e:	2b00      	cmp	r3, #0
 8015320:	d104      	bne.n	801532c <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 8015322:	68b9      	ldr	r1, [r7, #8]
 8015324:	68f8      	ldr	r0, [r7, #12]
 8015326:	f7ff ff5b 	bl	80151e0 <pxTCPWindowTx_GetTXQueue>
 801532a:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 801532c:	69fb      	ldr	r3, [r7, #28]
 801532e:	2b00      	cmp	r3, #0
 8015330:	d051      	beq.n	80153d6 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8015332:	69fb      	ldr	r3, [r7, #28]
 8015334:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015336:	2b00      	cmp	r3, #0
 8015338:	d004      	beq.n	8015344 <ulTCPWindowTxGet+0x94>
 801533a:	f240 7136 	movw	r1, #1846	@ 0x736
 801533e:	482a      	ldr	r0, [pc, #168]	@ (80153e8 <ulTCPWindowTxGet+0x138>)
 8015340:	f7eb fef6 	bl	8001130 <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8015344:	68fb      	ldr	r3, [r7, #12]
 8015346:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801534a:	69fb      	ldr	r3, [r7, #28]
 801534c:	3318      	adds	r3, #24
 801534e:	4619      	mov	r1, r3
 8015350:	4610      	mov	r0, r2
 8015352:	f7ff f86d 	bl	8014430 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8015356:	69fa      	ldr	r2, [r7, #28]
 8015358:	7d93      	ldrb	r3, [r2, #22]
 801535a:	f043 0301 	orr.w	r3, r3, #1
 801535e:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 8015360:	69fb      	ldr	r3, [r7, #28]
 8015362:	7d1b      	ldrb	r3, [r3, #20]
 8015364:	3301      	adds	r3, #1
 8015366:	b2da      	uxtb	r2, r3
 8015368:	69fb      	ldr	r3, [r7, #28]
 801536a:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 801536c:	69fb      	ldr	r3, [r7, #28]
 801536e:	7d1b      	ldrb	r3, [r3, #20]
 8015370:	2b04      	cmp	r3, #4
 8015372:	d120      	bne.n	80153b6 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 8015374:	68fb      	ldr	r3, [r7, #12]
 8015376:	689a      	ldr	r2, [r3, #8]
 8015378:	68fb      	ldr	r3, [r7, #12]
 801537a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801537e:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8015380:	429a      	cmp	r2, r3
 8015382:	d918      	bls.n	80153b6 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 8015384:	68fb      	ldr	r3, [r7, #12]
 8015386:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801538a:	005b      	lsls	r3, r3, #1
 801538c:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015394:	4619      	mov	r1, r3
 8015396:	68fb      	ldr	r3, [r7, #12]
 8015398:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801539c:	4618      	mov	r0, r3
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	689a      	ldr	r2, [r3, #8]
 80153a2:	8afb      	ldrh	r3, [r7, #22]
 80153a4:	9300      	str	r3, [sp, #0]
 80153a6:	4613      	mov	r3, r2
 80153a8:	4602      	mov	r2, r0
 80153aa:	4810      	ldr	r0, [pc, #64]	@ (80153ec <ulTCPWindowTxGet+0x13c>)
 80153ac:	f00b f8ee 	bl	802058c <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 80153b0:	8afa      	ldrh	r2, [r7, #22]
 80153b2:	68fb      	ldr	r3, [r7, #12]
 80153b4:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 80153b6:	69fb      	ldr	r3, [r7, #28]
 80153b8:	3310      	adds	r3, #16
 80153ba:	4618      	mov	r0, r3
 80153bc:	f7ff f848 	bl	8014450 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 80153c0:	69fb      	ldr	r3, [r7, #28]
 80153c2:	681a      	ldr	r2, [r3, #0]
 80153c4:	68fb      	ldr	r3, [r7, #12]
 80153c6:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 80153c8:	69fb      	ldr	r3, [r7, #28]
 80153ca:	68da      	ldr	r2, [r3, #12]
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 80153d0:	69fb      	ldr	r3, [r7, #28]
 80153d2:	689b      	ldr	r3, [r3, #8]
 80153d4:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 80153d6:	69bb      	ldr	r3, [r7, #24]
        }
 80153d8:	4618      	mov	r0, r3
 80153da:	3724      	adds	r7, #36	@ 0x24
 80153dc:	46bd      	mov	sp, r7
 80153de:	bd90      	pop	{r4, r7, pc}
 80153e0:	200012f4 	.word	0x200012f4
 80153e4:	0802545c 	.word	0x0802545c
 80153e8:	080250f8 	.word	0x080250f8
 80153ec:	080254a8 	.word	0x080254a8

080153f0 <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 80153f0:	b580      	push	{r7, lr}
 80153f2:	b084      	sub	sp, #16
 80153f4:	af00      	add	r7, sp, #0
 80153f6:	6078      	str	r0, [r7, #4]
 80153f8:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 80153fa:	683b      	ldr	r3, [r7, #0]
 80153fc:	3310      	adds	r3, #16
 80153fe:	4618      	mov	r0, r3
 8015400:	f7ff f833 	bl	801446a <ulTimerGetAge>
 8015404:	4603      	mov	r3, r0
 8015406:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 8015408:	687b      	ldr	r3, [r7, #4]
 801540a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801540c:	68fa      	ldr	r2, [r7, #12]
 801540e:	429a      	cmp	r2, r3
 8015410:	dc0e      	bgt.n	8015430 <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015416:	4613      	mov	r3, r2
 8015418:	00db      	lsls	r3, r3, #3
 801541a:	1a9a      	subs	r2, r3, r2
 801541c:	68fb      	ldr	r3, [r7, #12]
 801541e:	4413      	add	r3, r2
 8015420:	2b00      	cmp	r3, #0
 8015422:	da00      	bge.n	8015426 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 8015424:	3307      	adds	r3, #7
 8015426:	10db      	asrs	r3, r3, #3
 8015428:	461a      	mov	r2, r3
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	639a      	str	r2, [r3, #56]	@ 0x38
 801542e:	e00d      	b.n	801544c <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015434:	4613      	mov	r3, r2
 8015436:	005b      	lsls	r3, r3, #1
 8015438:	441a      	add	r2, r3
 801543a:	68fb      	ldr	r3, [r7, #12]
 801543c:	4413      	add	r3, r2
 801543e:	2b00      	cmp	r3, #0
 8015440:	da00      	bge.n	8015444 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 8015442:	3303      	adds	r3, #3
 8015444:	109b      	asrs	r3, r3, #2
 8015446:	461a      	mov	r2, r3
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015450:	2b31      	cmp	r3, #49	@ 0x31
 8015452:	dc02      	bgt.n	801545a <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	2232      	movs	r2, #50	@ 0x32
 8015458:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 801545a:	bf00      	nop
 801545c:	3710      	adds	r7, #16
 801545e:	46bd      	mov	sp, r7
 8015460:	bd80      	pop	{r7, pc}
	...

08015464 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8015464:	b5b0      	push	{r4, r5, r7, lr}
 8015466:	b090      	sub	sp, #64	@ 0x40
 8015468:	af04      	add	r7, sp, #16
 801546a:	60f8      	str	r0, [r7, #12]
 801546c:	60b9      	str	r1, [r7, #8]
 801546e:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8015470:	2300      	movs	r3, #0
 8015472:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8015474:	68bb      	ldr	r3, [r7, #8]
 8015476:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8015478:	68fb      	ldr	r3, [r7, #12]
 801547a:	3398      	adds	r3, #152	@ 0x98
 801547c:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 801547e:	69fb      	ldr	r3, [r7, #28]
 8015480:	685b      	ldr	r3, [r3, #4]
 8015482:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8015484:	e0a6      	b.n	80155d4 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 8015486:	2300      	movs	r3, #0
 8015488:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801548a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801548c:	68db      	ldr	r3, [r3, #12]
 801548e:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 8015490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015492:	685b      	ldr	r3, [r3, #4]
 8015494:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 8015496:	69bb      	ldr	r3, [r7, #24]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	4619      	mov	r1, r3
 801549c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801549e:	f7fe ff9c 	bl	80143da <xSequenceGreaterThan>
 80154a2:	4603      	mov	r3, r0
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	f040 8094 	bne.w	80155d2 <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 80154aa:	69bb      	ldr	r3, [r7, #24]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80154b0:	429a      	cmp	r2, r3
 80154b2:	f040 809c 	bne.w	80155ee <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 80154b6:	69bb      	ldr	r3, [r7, #24]
 80154b8:	689b      	ldr	r3, [r3, #8]
 80154ba:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 80154bc:	69bb      	ldr	r3, [r7, #24]
 80154be:	7d9b      	ldrb	r3, [r3, #22]
 80154c0:	f003 0302 	and.w	r3, r3, #2
 80154c4:	b2db      	uxtb	r3, r3
 80154c6:	2b00      	cmp	r3, #0
 80154c8:	d144      	bne.n	8015554 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 80154ca:	69bb      	ldr	r3, [r7, #24]
 80154cc:	681a      	ldr	r2, [r3, #0]
 80154ce:	697b      	ldr	r3, [r7, #20]
 80154d0:	4413      	add	r3, r2
 80154d2:	6879      	ldr	r1, [r7, #4]
 80154d4:	4618      	mov	r0, r3
 80154d6:	f7fe ff80 	bl	80143da <xSequenceGreaterThan>
 80154da:	4603      	mov	r3, r0
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d023      	beq.n	8015528 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 80154e0:	69bb      	ldr	r3, [r7, #24]
 80154e2:	681a      	ldr	r2, [r3, #0]
 80154e4:	68fb      	ldr	r3, [r7, #12]
 80154e6:	69db      	ldr	r3, [r3, #28]
 80154e8:	1ad3      	subs	r3, r2, r3
 80154ea:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 80154ec:	68fb      	ldr	r3, [r7, #12]
 80154ee:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80154f2:	461c      	mov	r4, r3
 80154f4:	68fb      	ldr	r3, [r7, #12]
 80154f6:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80154fa:	461d      	mov	r5, r3
 80154fc:	68fb      	ldr	r3, [r7, #12]
 80154fe:	69db      	ldr	r3, [r3, #28]
 8015500:	693a      	ldr	r2, [r7, #16]
 8015502:	1ad0      	subs	r0, r2, r3
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	69db      	ldr	r3, [r3, #28]
 8015508:	687a      	ldr	r2, [r7, #4]
 801550a:	1ad3      	subs	r3, r2, r3
 801550c:	6939      	ldr	r1, [r7, #16]
 801550e:	697a      	ldr	r2, [r7, #20]
 8015510:	440a      	add	r2, r1
 8015512:	9202      	str	r2, [sp, #8]
 8015514:	693a      	ldr	r2, [r7, #16]
 8015516:	9201      	str	r2, [sp, #4]
 8015518:	9300      	str	r3, [sp, #0]
 801551a:	4603      	mov	r3, r0
 801551c:	462a      	mov	r2, r5
 801551e:	4621      	mov	r1, r4
 8015520:	4836      	ldr	r0, [pc, #216]	@ (80155fc <prvTCPWindowTxCheckAck+0x198>)
 8015522:	f00b f833 	bl	802058c <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8015526:	e063      	b.n	80155f0 <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8015528:	69ba      	ldr	r2, [r7, #24]
 801552a:	7d93      	ldrb	r3, [r2, #22]
 801552c:	f043 0302 	orr.w	r3, r3, #2
 8015530:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8015532:	69bb      	ldr	r3, [r7, #24]
 8015534:	7d1b      	ldrb	r3, [r3, #20]
 8015536:	2b01      	cmp	r3, #1
 8015538:	d10a      	bne.n	8015550 <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 801553a:	69bb      	ldr	r3, [r7, #24]
 801553c:	681a      	ldr	r2, [r3, #0]
 801553e:	697b      	ldr	r3, [r7, #20]
 8015540:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8015542:	687a      	ldr	r2, [r7, #4]
 8015544:	429a      	cmp	r2, r3
 8015546:	d103      	bne.n	8015550 <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8015548:	69b9      	ldr	r1, [r7, #24]
 801554a:	68f8      	ldr	r0, [r7, #12]
 801554c:	f7ff ff50 	bl	80153f0 <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8015550:	2301      	movs	r3, #1
 8015552:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8015554:	68fb      	ldr	r3, [r7, #12]
 8015556:	6a1b      	ldr	r3, [r3, #32]
 8015558:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801555a:	429a      	cmp	r2, r3
 801555c:	d128      	bne.n	80155b0 <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801555e:	4b28      	ldr	r3, [pc, #160]	@ (8015600 <prvTCPWindowTxCheckAck+0x19c>)
 8015560:	681b      	ldr	r3, [r3, #0]
 8015562:	2b01      	cmp	r3, #1
 8015564:	dd15      	ble.n	8015592 <prvTCPWindowTxCheckAck+0x12e>
 8015566:	68fb      	ldr	r3, [r7, #12]
 8015568:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801556c:	2b17      	cmp	r3, #23
 801556e:	d010      	beq.n	8015592 <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	69db      	ldr	r3, [r3, #28]
 8015574:	68ba      	ldr	r2, [r7, #8]
 8015576:	1ad1      	subs	r1, r2, r3
 8015578:	68fb      	ldr	r3, [r7, #12]
 801557a:	69db      	ldr	r3, [r3, #28]
 801557c:	687a      	ldr	r2, [r7, #4]
 801557e:	1ad0      	subs	r0, r2, r3
 8015580:	69bb      	ldr	r3, [r7, #24]
 8015582:	681a      	ldr	r2, [r3, #0]
 8015584:	68fb      	ldr	r3, [r7, #12]
 8015586:	69db      	ldr	r3, [r3, #28]
 8015588:	1ad3      	subs	r3, r2, r3
 801558a:	4602      	mov	r2, r0
 801558c:	481d      	ldr	r0, [pc, #116]	@ (8015604 <prvTCPWindowTxCheckAck+0x1a0>)
 801558e:	f00a fffd 	bl	802058c <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	6a1a      	ldr	r2, [r3, #32]
 8015596:	697b      	ldr	r3, [r7, #20]
 8015598:	441a      	add	r2, r3
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 801559e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80155a0:	697b      	ldr	r3, [r7, #20]
 80155a2:	4413      	add	r3, r2
 80155a4:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 80155a6:	69b8      	ldr	r0, [r7, #24]
 80155a8:	f7ff f8ec 	bl	8014784 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 80155ac:	2300      	movs	r3, #0
 80155ae:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 80155b0:	6a3b      	ldr	r3, [r7, #32]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d008      	beq.n	80155c8 <prvTCPWindowTxCheckAck+0x164>
 80155b6:	69bb      	ldr	r3, [r7, #24]
 80155b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80155ba:	2b00      	cmp	r3, #0
 80155bc:	d004      	beq.n	80155c8 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 80155be:	69bb      	ldr	r3, [r7, #24]
 80155c0:	3318      	adds	r3, #24
 80155c2:	4618      	mov	r0, r3
 80155c4:	f7ec fff2 	bl	80025ac <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 80155c8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80155ca:	697b      	ldr	r3, [r7, #20]
 80155cc:	4413      	add	r3, r2
 80155ce:	62bb      	str	r3, [r7, #40]	@ 0x28
 80155d0:	e000      	b.n	80155d4 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 80155d2:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 80155d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80155d6:	69fb      	ldr	r3, [r7, #28]
 80155d8:	429a      	cmp	r2, r3
 80155da:	d009      	beq.n	80155f0 <prvTCPWindowTxCheckAck+0x18c>
 80155dc:	6879      	ldr	r1, [r7, #4]
 80155de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80155e0:	f7fe fee5 	bl	80143ae <xSequenceLessThan>
 80155e4:	4603      	mov	r3, r0
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	f47f af4d 	bne.w	8015486 <prvTCPWindowTxCheckAck+0x22>
 80155ec:	e000      	b.n	80155f0 <prvTCPWindowTxCheckAck+0x18c>
                    break;
 80155ee:	bf00      	nop
            }

            return ulBytesConfirmed;
 80155f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 80155f2:	4618      	mov	r0, r3
 80155f4:	3730      	adds	r7, #48	@ 0x30
 80155f6:	46bd      	mov	sp, r7
 80155f8:	bdb0      	pop	{r4, r5, r7, pc}
 80155fa:	bf00      	nop
 80155fc:	080254e0 	.word	0x080254e0
 8015600:	200012f4 	.word	0x200012f4
 8015604:	08025528 	.word	0x08025528

08015608 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8015608:	b580      	push	{r7, lr}
 801560a:	b086      	sub	sp, #24
 801560c:	af00      	add	r7, sp, #0
 801560e:	6078      	str	r0, [r7, #4]
 8015610:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8015612:	2300      	movs	r3, #0
 8015614:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8015616:	687b      	ldr	r3, [r7, #4]
 8015618:	3370      	adds	r3, #112	@ 0x70
 801561a:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	685b      	ldr	r3, [r3, #4]
 8015620:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8015622:	e049      	b.n	80156b8 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015624:	697b      	ldr	r3, [r7, #20]
 8015626:	68db      	ldr	r3, [r3, #12]
 8015628:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 801562a:	697b      	ldr	r3, [r7, #20]
 801562c:	685b      	ldr	r3, [r3, #4]
 801562e:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8015630:	68bb      	ldr	r3, [r7, #8]
 8015632:	7d9b      	ldrb	r3, [r3, #22]
 8015634:	f003 0302 	and.w	r3, r3, #2
 8015638:	b2db      	uxtb	r3, r3
 801563a:	2b00      	cmp	r3, #0
 801563c:	d13c      	bne.n	80156b8 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 801563e:	68bb      	ldr	r3, [r7, #8]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	6839      	ldr	r1, [r7, #0]
 8015644:	4618      	mov	r0, r3
 8015646:	f7fe feb2 	bl	80143ae <xSequenceLessThan>
 801564a:	4603      	mov	r3, r0
 801564c:	2b00      	cmp	r3, #0
 801564e:	d033      	beq.n	80156b8 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	7d5b      	ldrb	r3, [r3, #21]
 8015654:	3301      	adds	r3, #1
 8015656:	b2da      	uxtb	r2, r3
 8015658:	68bb      	ldr	r3, [r7, #8]
 801565a:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 801565c:	68bb      	ldr	r3, [r7, #8]
 801565e:	7d5b      	ldrb	r3, [r3, #21]
 8015660:	2b03      	cmp	r3, #3
 8015662:	d129      	bne.n	80156b8 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8015664:	68bb      	ldr	r3, [r7, #8]
 8015666:	2200      	movs	r2, #0
 8015668:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801566a:	4b18      	ldr	r3, [pc, #96]	@ (80156cc <prvTCPWindowFastRetransmit+0xc4>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	2b00      	cmp	r3, #0
 8015670:	db11      	blt.n	8015696 <prvTCPWindowFastRetransmit+0x8e>
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015678:	2b17      	cmp	r3, #23
 801567a:	d00c      	beq.n	8015696 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 801567c:	68bb      	ldr	r3, [r7, #8]
 801567e:	681a      	ldr	r2, [r3, #0]
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	69db      	ldr	r3, [r3, #28]
 8015684:	1ad1      	subs	r1, r2, r3
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	69db      	ldr	r3, [r3, #28]
 801568a:	683a      	ldr	r2, [r7, #0]
 801568c:	1ad3      	subs	r3, r2, r3
 801568e:	461a      	mov	r2, r3
 8015690:	480f      	ldr	r0, [pc, #60]	@ (80156d0 <prvTCPWindowFastRetransmit+0xc8>)
 8015692:	f00a ff7b 	bl	802058c <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8015696:	68bb      	ldr	r3, [r7, #8]
 8015698:	3318      	adds	r3, #24
 801569a:	4618      	mov	r0, r3
 801569c:	f7ec ff86 	bl	80025ac <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 80156a6:	68bb      	ldr	r3, [r7, #8]
 80156a8:	3318      	adds	r3, #24
 80156aa:	4619      	mov	r1, r3
 80156ac:	4610      	mov	r0, r2
 80156ae:	f7fe febf 	bl	8014430 <vListInsertFifo>
                            ulCount++;
 80156b2:	693b      	ldr	r3, [r7, #16]
 80156b4:	3301      	adds	r3, #1
 80156b6:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 80156b8:	697a      	ldr	r2, [r7, #20]
 80156ba:	68fb      	ldr	r3, [r7, #12]
 80156bc:	429a      	cmp	r2, r3
 80156be:	d1b1      	bne.n	8015624 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 80156c0:	693b      	ldr	r3, [r7, #16]
        }
 80156c2:	4618      	mov	r0, r3
 80156c4:	3718      	adds	r7, #24
 80156c6:	46bd      	mov	sp, r7
 80156c8:	bd80      	pop	{r7, pc}
 80156ca:	bf00      	nop
 80156cc:	200012f4 	.word	0x200012f4
 80156d0:	08025564 	.word	0x08025564

080156d4 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 80156d4:	b580      	push	{r7, lr}
 80156d6:	b084      	sub	sp, #16
 80156d8:	af00      	add	r7, sp, #0
 80156da:	6078      	str	r0, [r7, #4]
 80156dc:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 80156de:	687b      	ldr	r3, [r7, #4]
 80156e0:	6a1b      	ldr	r3, [r3, #32]
 80156e2:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 80156e4:	68b9      	ldr	r1, [r7, #8]
 80156e6:	6838      	ldr	r0, [r7, #0]
 80156e8:	f7fe fe4c 	bl	8014384 <xSequenceLessThanOrEqual>
 80156ec:	4603      	mov	r3, r0
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d002      	beq.n	80156f8 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 80156f2:	2300      	movs	r3, #0
 80156f4:	60fb      	str	r3, [r7, #12]
 80156f6:	e005      	b.n	8015704 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 80156f8:	683a      	ldr	r2, [r7, #0]
 80156fa:	68b9      	ldr	r1, [r7, #8]
 80156fc:	6878      	ldr	r0, [r7, #4]
 80156fe:	f7ff feb1 	bl	8015464 <prvTCPWindowTxCheckAck>
 8015702:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8015704:	68fb      	ldr	r3, [r7, #12]
        }
 8015706:	4618      	mov	r0, r3
 8015708:	3710      	adds	r7, #16
 801570a:	46bd      	mov	sp, r7
 801570c:	bd80      	pop	{r7, pc}
	...

08015710 <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8015710:	b5b0      	push	{r4, r5, r7, lr}
 8015712:	b088      	sub	sp, #32
 8015714:	af02      	add	r7, sp, #8
 8015716:	60f8      	str	r0, [r7, #12]
 8015718:	60b9      	str	r1, [r7, #8]
 801571a:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 801571c:	68fb      	ldr	r3, [r7, #12]
 801571e:	6a1b      	ldr	r3, [r3, #32]
 8015720:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8015722:	687a      	ldr	r2, [r7, #4]
 8015724:	68b9      	ldr	r1, [r7, #8]
 8015726:	68f8      	ldr	r0, [r7, #12]
 8015728:	f7ff fe9c 	bl	8015464 <prvTCPWindowTxCheckAck>
 801572c:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 801572e:	68b9      	ldr	r1, [r7, #8]
 8015730:	68f8      	ldr	r0, [r7, #12]
 8015732:	f7ff ff69 	bl	8015608 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8015736:	4b16      	ldr	r3, [pc, #88]	@ (8015790 <ulTCPWindowTxSack+0x80>)
 8015738:	681b      	ldr	r3, [r3, #0]
 801573a:	2b00      	cmp	r3, #0
 801573c:	dd23      	ble.n	8015786 <ulTCPWindowTxSack+0x76>
 801573e:	6979      	ldr	r1, [r7, #20]
 8015740:	68b8      	ldr	r0, [r7, #8]
 8015742:	f7fe fe4a 	bl	80143da <xSequenceGreaterThan>
 8015746:	4603      	mov	r3, r0
 8015748:	2b00      	cmp	r3, #0
 801574a:	d01c      	beq.n	8015786 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 801574c:	68fb      	ldr	r3, [r7, #12]
 801574e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015752:	461c      	mov	r4, r3
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801575a:	461d      	mov	r5, r3
 801575c:	68fb      	ldr	r3, [r7, #12]
 801575e:	69db      	ldr	r3, [r3, #28]
 8015760:	68ba      	ldr	r2, [r7, #8]
 8015762:	1ad0      	subs	r0, r2, r3
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	69db      	ldr	r3, [r3, #28]
 8015768:	687a      	ldr	r2, [r7, #4]
 801576a:	1ad3      	subs	r3, r2, r3
 801576c:	68fa      	ldr	r2, [r7, #12]
 801576e:	6a11      	ldr	r1, [r2, #32]
 8015770:	68fa      	ldr	r2, [r7, #12]
 8015772:	69d2      	ldr	r2, [r2, #28]
 8015774:	1a8a      	subs	r2, r1, r2
 8015776:	9201      	str	r2, [sp, #4]
 8015778:	9300      	str	r3, [sp, #0]
 801577a:	4603      	mov	r3, r0
 801577c:	462a      	mov	r2, r5
 801577e:	4621      	mov	r1, r4
 8015780:	4804      	ldr	r0, [pc, #16]	@ (8015794 <ulTCPWindowTxSack+0x84>)
 8015782:	f00a ff03 	bl	802058c <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8015786:	693b      	ldr	r3, [r7, #16]
        }
 8015788:	4618      	mov	r0, r3
 801578a:	3718      	adds	r7, #24
 801578c:	46bd      	mov	sp, r7
 801578e:	bdb0      	pop	{r4, r5, r7, pc}
 8015790:	200012f4 	.word	0x200012f4
 8015794:	080255a4 	.word	0x080255a4

08015798 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b084      	sub	sp, #16
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d014      	beq.n	80157d0 <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157aa:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	899b      	ldrh	r3, [r3, #12]
 80157b0:	b29b      	uxth	r3, r3
 80157b2:	2b08      	cmp	r3, #8
 80157b4:	d004      	beq.n	80157c0 <vProcessGeneratedUDPPacket+0x28>
 80157b6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80157ba:	4293      	cmp	r3, r2
 80157bc:	d004      	beq.n	80157c8 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 80157be:	e007      	b.n	80157d0 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 80157c0:	6878      	ldr	r0, [r7, #4]
 80157c2:	f000 f845 	bl	8015850 <vProcessGeneratedUDPPacket_IPv4>
                    break;
 80157c6:	e003      	b.n	80157d0 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f000 fae3 	bl	8015d94 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 80157ce:	bf00      	nop
        }
    }
}
 80157d0:	bf00      	nop
 80157d2:	3710      	adds	r7, #16
 80157d4:	46bd      	mov	sp, r7
 80157d6:	bd80      	pop	{r7, pc}

080157d8 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 80157d8:	b580      	push	{r7, lr}
 80157da:	b086      	sub	sp, #24
 80157dc:	af00      	add	r7, sp, #0
 80157de:	60f8      	str	r0, [r7, #12]
 80157e0:	460b      	mov	r3, r1
 80157e2:	607a      	str	r2, [r7, #4]
 80157e4:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 80157e6:	2300      	movs	r3, #0
 80157e8:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 80157ea:	68fb      	ldr	r3, [r7, #12]
 80157ec:	2b00      	cmp	r3, #0
 80157ee:	d103      	bne.n	80157f8 <xProcessReceivedUDPPacket+0x20>
 80157f0:	2178      	movs	r1, #120	@ 0x78
 80157f2:	4816      	ldr	r0, [pc, #88]	@ (801584c <xProcessReceivedUDPPacket+0x74>)
 80157f4:	f7eb fc9c 	bl	8001130 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 80157f8:	68fb      	ldr	r3, [r7, #12]
 80157fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80157fc:	2b00      	cmp	r3, #0
 80157fe:	d103      	bne.n	8015808 <xProcessReceivedUDPPacket+0x30>
 8015800:	2179      	movs	r1, #121	@ 0x79
 8015802:	4812      	ldr	r0, [pc, #72]	@ (801584c <xProcessReceivedUDPPacket+0x74>)
 8015804:	f7eb fc94 	bl	8001130 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015808:	68fb      	ldr	r3, [r7, #12]
 801580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801580c:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 801580e:	693b      	ldr	r3, [r7, #16]
 8015810:	899b      	ldrh	r3, [r3, #12]
 8015812:	b29b      	uxth	r3, r3
 8015814:	2b08      	cmp	r3, #8
 8015816:	d004      	beq.n	8015822 <xProcessReceivedUDPPacket+0x4a>
 8015818:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 801581c:	4293      	cmp	r3, r2
 801581e:	d008      	beq.n	8015832 <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 8015820:	e00f      	b.n	8015842 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 8015822:	897b      	ldrh	r3, [r7, #10]
 8015824:	687a      	ldr	r2, [r7, #4]
 8015826:	4619      	mov	r1, r3
 8015828:	68f8      	ldr	r0, [r7, #12]
 801582a:	f000 f92f 	bl	8015a8c <xProcessReceivedUDPPacket_IPv4>
 801582e:	6178      	str	r0, [r7, #20]
                break;
 8015830:	e007      	b.n	8015842 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 8015832:	897b      	ldrh	r3, [r7, #10]
 8015834:	687a      	ldr	r2, [r7, #4]
 8015836:	4619      	mov	r1, r3
 8015838:	68f8      	ldr	r0, [r7, #12]
 801583a:	f000 fbdd 	bl	8015ff8 <xProcessReceivedUDPPacket_IPv6>
 801583e:	6178      	str	r0, [r7, #20]
                break;
 8015840:	bf00      	nop
    }

    return xReturn;
 8015842:	697b      	ldr	r3, [r7, #20]
}
 8015844:	4618      	mov	r0, r3
 8015846:	3718      	adds	r7, #24
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}
 801584c:	080255d8 	.word	0x080255d8

08015850 <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8015850:	b580      	push	{r7, lr}
 8015852:	b08e      	sub	sp, #56	@ 0x38
 8015854:	af00      	add	r7, sp, #0
 8015856:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	695b      	ldr	r3, [r3, #20]
 801585c:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015862:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015868:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801586e:	2b00      	cmp	r3, #0
 8015870:	d104      	bne.n	801587c <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8015872:	687b      	ldr	r3, [r7, #4]
 8015874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015876:	3b2a      	subs	r3, #42	@ 0x2a
 8015878:	633b      	str	r3, [r7, #48]	@ 0x30
 801587a:	e003      	b.n	8015884 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 801587c:	687b      	ldr	r3, [r7, #4]
 801587e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015880:	3b2a      	subs	r3, #42	@ 0x2a
 8015882:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8015884:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015886:	f107 0208 	add.w	r2, r7, #8
 801588a:	f107 030c 	add.w	r3, r7, #12
 801588e:	4618      	mov	r0, r3
 8015890:	f7f0 fd68 	bl	8006364 <eARPGetCacheEntry>
 8015894:	4603      	mov	r3, r0
 8015896:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 801589a:	687b      	ldr	r3, [r7, #4]
 801589c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801589e:	2b00      	cmp	r3, #0
 80158a0:	d102      	bne.n	80158a8 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 80158a2:	68ba      	ldr	r2, [r7, #8]
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 80158a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80158ac:	2b02      	cmp	r3, #2
 80158ae:	f000 80a0 	beq.w	80159f2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 80158b2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80158b6:	2b01      	cmp	r3, #1
 80158b8:	d176      	bne.n	80159a8 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 80158ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158bc:	330e      	adds	r3, #14
 80158be:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80158c0:	687b      	ldr	r3, [r7, #4]
 80158c2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d025      	beq.n	8015914 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 80158c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80158ca:	3322      	adds	r3, #34	@ 0x22
 80158cc:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 80158ce:	687b      	ldr	r3, [r7, #4]
 80158d0:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80158d2:	6a3b      	ldr	r3, [r7, #32]
 80158d4:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 80158d6:	687b      	ldr	r3, [r7, #4]
 80158d8:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 80158da:	6a3b      	ldr	r3, [r7, #32]
 80158dc:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 80158de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80158e0:	b29b      	uxth	r3, r3
 80158e2:	3308      	adds	r3, #8
 80158e4:	b29a      	uxth	r2, r3
 80158e6:	6a3b      	ldr	r3, [r7, #32]
 80158e8:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 80158ea:	6a3b      	ldr	r3, [r7, #32]
 80158ec:	889b      	ldrh	r3, [r3, #4]
 80158ee:	b29b      	uxth	r3, r3
 80158f0:	021b      	lsls	r3, r3, #8
 80158f2:	b21a      	sxth	r2, r3
 80158f4:	6a3b      	ldr	r3, [r7, #32]
 80158f6:	889b      	ldrh	r3, [r3, #4]
 80158f8:	b29b      	uxth	r3, r3
 80158fa:	0a1b      	lsrs	r3, r3, #8
 80158fc:	b29b      	uxth	r3, r3
 80158fe:	b21b      	sxth	r3, r3
 8015900:	4313      	orrs	r3, r2
 8015902:	b21b      	sxth	r3, r3
 8015904:	b29a      	uxth	r2, r3
 8015906:	6a3b      	ldr	r3, [r7, #32]
 8015908:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 801590a:	6a3b      	ldr	r3, [r7, #32]
 801590c:	2200      	movs	r2, #0
 801590e:	719a      	strb	r2, [r3, #6]
 8015910:	2200      	movs	r2, #0
 8015912:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 8015914:	4b5b      	ldr	r3, [pc, #364]	@ (8015a84 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 8015916:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8015918:	687b      	ldr	r3, [r7, #4]
 801591a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801591c:	3306      	adds	r3, #6
 801591e:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 8015920:	2218      	movs	r2, #24
 8015922:	69f9      	ldr	r1, [r7, #28]
 8015924:	69b8      	ldr	r0, [r7, #24]
 8015926:	f00b f84d 	bl	80209c4 <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801592a:	687b      	ldr	r3, [r7, #4]
 801592c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801592e:	2b00      	cmp	r3, #0
 8015930:	d109      	bne.n	8015946 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 8015932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015934:	2201      	movs	r2, #1
 8015936:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8015938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801593a:	b29b      	uxth	r3, r3
 801593c:	331c      	adds	r3, #28
 801593e:	b29a      	uxth	r2, r3
 8015940:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015942:	805a      	strh	r2, [r3, #2]
 8015944:	e005      	b.n	8015952 <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8015946:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015948:	b29b      	uxth	r3, r3
 801594a:	331c      	adds	r3, #28
 801594c:	b29a      	uxth	r2, r3
 801594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015950:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8015952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015954:	885b      	ldrh	r3, [r3, #2]
 8015956:	b29b      	uxth	r3, r3
 8015958:	021b      	lsls	r3, r3, #8
 801595a:	b21a      	sxth	r2, r3
 801595c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801595e:	885b      	ldrh	r3, [r3, #2]
 8015960:	b29b      	uxth	r3, r3
 8015962:	0a1b      	lsrs	r3, r3, #8
 8015964:	b29b      	uxth	r3, r3
 8015966:	b21b      	sxth	r3, r3
 8015968:	4313      	orrs	r3, r2
 801596a:	b21b      	sxth	r3, r3
 801596c:	b29a      	uxth	r2, r3
 801596e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015970:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	695a      	ldr	r2, [r3, #20]
 8015976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015978:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801597e:	2b00      	cmp	r3, #0
 8015980:	d004      	beq.n	801598c <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8015982:	687b      	ldr	r3, [r7, #4]
 8015984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015986:	681a      	ldr	r2, [r3, #0]
 8015988:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801598a:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 801598c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801598e:	2200      	movs	r2, #0
 8015990:	719a      	strb	r2, [r3, #6]
 8015992:	2200      	movs	r2, #0
 8015994:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 8015996:	687b      	ldr	r3, [r7, #4]
 8015998:	695b      	ldr	r3, [r3, #20]
 801599a:	4a3b      	ldr	r2, [pc, #236]	@ (8015a88 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 801599c:	4293      	cmp	r3, r2
 801599e:	d128      	bne.n	80159f2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 80159a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80159a2:	2201      	movs	r2, #1
 80159a4:	721a      	strb	r2, [r3, #8]
 80159a6:	e024      	b.n	80159f2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 80159a8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80159ac:	2b00      	cmp	r3, #0
 80159ae:	d11d      	bne.n	80159ec <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	2200      	movs	r2, #0
 80159b4:	4619      	mov	r1, r3
 80159b6:	2000      	movs	r0, #0
 80159b8:	f7f0 fbc0 	bl	800613c <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	695b      	ldr	r3, [r3, #20]
 80159c0:	210b      	movs	r1, #11
 80159c2:	4618      	mov	r0, r3
 80159c4:	f7f6 ff58 	bl	800c878 <FreeRTOS_FindEndPointOnNetMask>
 80159c8:	4602      	mov	r2, r0
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 80159ce:	687b      	ldr	r3, [r7, #4]
 80159d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80159d2:	2b00      	cmp	r3, #0
 80159d4:	d103      	bne.n	80159de <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 80159d6:	2302      	movs	r3, #2
 80159d8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 80159dc:	e009      	b.n	80159f2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 80159de:	68fa      	ldr	r2, [r7, #12]
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 80159e4:	6878      	ldr	r0, [r7, #4]
 80159e6:	f7f0 ff25 	bl	8006834 <vARPGenerateRequestPacket>
 80159ea:	e002      	b.n	80159f2 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 80159ec:	2302      	movs	r3, #2
 80159ee:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 80159f2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80159f6:	2b02      	cmp	r3, #2
 80159f8:	d03d      	beq.n	8015a76 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80159fe:	2b00      	cmp	r3, #0
 8015a00:	d035      	beq.n	8015a6e <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a06:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015a0a:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015a10:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8015a12:	693b      	ldr	r3, [r7, #16]
 8015a14:	1d98      	adds	r0, r3, #6
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015a1a:	33e8      	adds	r3, #232	@ 0xe8
 8015a1c:	2206      	movs	r2, #6
 8015a1e:	4619      	mov	r1, r3
 8015a20:	f00a ffd0 	bl	80209c4 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a28:	2b3b      	cmp	r3, #59	@ 0x3b
 8015a2a:	d812      	bhi.n	8015a52 <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8015a2c:	687b      	ldr	r3, [r7, #4]
 8015a2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015a32:	e008      	b.n	8015a46 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8015a34:	687b      	ldr	r3, [r7, #4]
 8015a36:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015a38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a3a:	4413      	add	r3, r2
 8015a3c:	2200      	movs	r2, #0
 8015a3e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8015a40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a42:	3301      	adds	r3, #1
 8015a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015a48:	2b3b      	cmp	r3, #59	@ 0x3b
 8015a4a:	ddf3      	ble.n	8015a34 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8015a4c:	687b      	ldr	r3, [r7, #4]
 8015a4e:	223c      	movs	r2, #60	@ 0x3c
 8015a50:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 8015a52:	697b      	ldr	r3, [r7, #20]
 8015a54:	2b00      	cmp	r3, #0
 8015a56:	d011      	beq.n	8015a7c <vProcessGeneratedUDPPacket_IPv4+0x22c>
 8015a58:	697b      	ldr	r3, [r7, #20]
 8015a5a:	68db      	ldr	r3, [r3, #12]
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d00d      	beq.n	8015a7c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8015a60:	697b      	ldr	r3, [r7, #20]
 8015a62:	68db      	ldr	r3, [r3, #12]
 8015a64:	2201      	movs	r2, #1
 8015a66:	6879      	ldr	r1, [r7, #4]
 8015a68:	6978      	ldr	r0, [r7, #20]
 8015a6a:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8015a6c:	e006      	b.n	8015a7c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8015a6e:	6878      	ldr	r0, [r7, #4]
 8015a70:	f000 fca2 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
}
 8015a74:	e002      	b.n	8015a7c <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8015a76:	6878      	ldr	r0, [r7, #4]
 8015a78:	f000 fc9e 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
}
 8015a7c:	bf00      	nop
 8015a7e:	3738      	adds	r7, #56	@ 0x38
 8015a80:	46bd      	mov	sp, r7
 8015a82:	bd80      	pop	{r7, pc}
 8015a84:	08025cf8 	.word	0x08025cf8
 8015a88:	fc0000e0 	.word	0xfc0000e0

08015a8c <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8015a8c:	b590      	push	{r4, r7, lr}
 8015a8e:	b099      	sub	sp, #100	@ 0x64
 8015a90:	af02      	add	r7, sp, #8
 8015a92:	60f8      	str	r0, [r7, #12]
 8015a94:	460b      	mov	r3, r1
 8015a96:	607a      	str	r2, [r7, #4]
 8015a98:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 8015a9a:	2301      	movs	r3, #1
 8015a9c:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 8015a9e:	68fb      	ldr	r3, [r7, #12]
 8015aa0:	2b00      	cmp	r3, #0
 8015aa2:	d104      	bne.n	8015aae <xProcessReceivedUDPPacket_IPv4+0x22>
 8015aa4:	f240 116f 	movw	r1, #367	@ 0x16f
 8015aa8:	4872      	ldr	r0, [pc, #456]	@ (8015c74 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8015aaa:	f7eb fb41 	bl	8001130 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8015aae:	68fb      	ldr	r3, [r7, #12]
 8015ab0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ab2:	2b00      	cmp	r3, #0
 8015ab4:	d104      	bne.n	8015ac0 <xProcessReceivedUDPPacket_IPv4+0x34>
 8015ab6:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8015aba:	486e      	ldr	r0, [pc, #440]	@ (8015c74 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8015abc:	f7eb fb38 	bl	8001130 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015ac0:	68fb      	ldr	r3, [r7, #12]
 8015ac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ac4:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8015ac6:	68fb      	ldr	r3, [r7, #12]
 8015ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015aca:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8015acc:	897b      	ldrh	r3, [r7, #10]
 8015ace:	4618      	mov	r0, r3
 8015ad0:	f7f8 fc60 	bl	800e394 <pxUDPSocketLookup>
 8015ad4:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	2200      	movs	r2, #0
 8015ada:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 8015adc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015ade:	2b00      	cmp	r3, #0
 8015ae0:	f000 8085 	beq.w	8015bee <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 8015ae4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015ae6:	2b00      	cmp	r3, #0
 8015ae8:	d018      	beq.n	8015b1c <xProcessReceivedUDPPacket_IPv4+0x90>
 8015aea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015aec:	681b      	ldr	r3, [r3, #0]
 8015aee:	2b00      	cmp	r3, #0
 8015af0:	d014      	beq.n	8015b1c <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8015af2:	68f8      	ldr	r0, [r7, #12]
 8015af4:	f7f0 fa0c 	bl	8005f10 <xCheckRequiresARPResolution>
 8015af8:	4603      	mov	r3, r0
 8015afa:	2b01      	cmp	r3, #1
 8015afc:	d105      	bne.n	8015b0a <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 8015afe:	687b      	ldr	r3, [r7, #4]
 8015b00:	2201      	movs	r2, #1
 8015b02:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 8015b04:	2300      	movs	r3, #0
 8015b06:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 8015b08:	e0ae      	b.n	8015c68 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8015b0a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015b0c:	1d9a      	adds	r2, r3, #6
 8015b0e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015b10:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8015b14:	4619      	mov	r1, r3
 8015b16:	4610      	mov	r0, r2
 8015b18:	f7f0 fada 	bl	80060d0 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 8015b1c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b1e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b20:	2b00      	cmp	r3, #0
 8015b22:	d02f      	beq.n	8015b84 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8015b24:	68fb      	ldr	r3, [r7, #12]
 8015b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015b28:	332a      	adds	r3, #42	@ 0x2a
 8015b2a:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8015b2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015b30:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8015b32:	68fb      	ldr	r3, [r7, #12]
 8015b34:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015b36:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8015b38:	68fb      	ldr	r3, [r7, #12]
 8015b3a:	695b      	ldr	r3, [r3, #20]
 8015b3c:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8015b3e:	2302      	movs	r3, #2
 8015b40:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8015b44:	2318      	movs	r3, #24
 8015b46:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 8015b4a:	897b      	ldrh	r3, [r7, #10]
 8015b4c:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 8015b4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015b50:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8015b54:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8015b56:	2302      	movs	r3, #2
 8015b58:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8015b5a:	2318      	movs	r3, #24
 8015b5c:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 8015b5e:	68fb      	ldr	r3, [r7, #12]
 8015b60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b62:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 8015b66:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8015b6a:	f107 0310 	add.w	r3, r7, #16
 8015b6e:	9300      	str	r3, [sp, #0]
 8015b70:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8015b72:	460b      	mov	r3, r1
 8015b74:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015b76:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8015b78:	47a0      	blx	r4
 8015b7a:	4603      	mov	r3, r0
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d001      	beq.n	8015b84 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8015b80:	2300      	movs	r3, #0
 8015b82:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8015b84:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015b86:	2b01      	cmp	r3, #1
 8015b88:	d16e      	bne.n	8015c68 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8015b8a:	f7ed fd59 	bl	8003640 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8015b8e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015b90:	3354      	adds	r3, #84	@ 0x54
 8015b92:	68fa      	ldr	r2, [r7, #12]
 8015b94:	4611      	mov	r1, r2
 8015b96:	4618      	mov	r0, r3
 8015b98:	f7ec fcab 	bl	80024f2 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8015b9c:	f7ed fd5e 	bl	800365c <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8015ba0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015ba2:	685b      	ldr	r3, [r3, #4]
 8015ba4:	2b00      	cmp	r3, #0
 8015ba6:	d005      	beq.n	8015bb4 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8015ba8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015baa:	685b      	ldr	r3, [r3, #4]
 8015bac:	2101      	movs	r1, #1
 8015bae:	4618      	mov	r0, r3
 8015bb0:	f7ec fb9a 	bl	80022e8 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8015bb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015bb8:	2b00      	cmp	r3, #0
 8015bba:	d00c      	beq.n	8015bd6 <xProcessReceivedUDPPacket_IPv4+0x14a>
 8015bbc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015bbe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015bc0:	f003 0301 	and.w	r3, r3, #1
 8015bc4:	2b00      	cmp	r3, #0
 8015bc6:	d006      	beq.n	8015bd6 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8015bc8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015bcc:	681b      	ldr	r3, [r3, #0]
 8015bce:	2101      	movs	r1, #1
 8015bd0:	4618      	mov	r0, r3
 8015bd2:	f7ec fb89 	bl	80022e8 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8015bd6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015bd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015bda:	2b00      	cmp	r3, #0
 8015bdc:	d044      	beq.n	8015c68 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 8015bde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015be0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015be2:	2300      	movs	r3, #0
 8015be4:	2200      	movs	r2, #0
 8015be6:	2100      	movs	r1, #0
 8015be8:	f7ec fe5a 	bl	80028a0 <xQueueGenericSend>
 8015bec:	e03c      	b.n	8015c68 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 8015bee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015bf0:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8015bf2:	b29b      	uxth	r3, r3
 8015bf4:	021b      	lsls	r3, r3, #8
 8015bf6:	b21a      	sxth	r2, r3
 8015bf8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015bfa:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8015bfc:	b29b      	uxth	r3, r3
 8015bfe:	0a1b      	lsrs	r3, r3, #8
 8015c00:	b29b      	uxth	r3, r3
 8015c02:	b21b      	sxth	r3, r3
 8015c04:	4313      	orrs	r3, r2
 8015c06:	b21b      	sxth	r3, r3
 8015c08:	2b35      	cmp	r3, #53	@ 0x35
 8015c0a:	d10f      	bne.n	8015c2c <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8015c0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015c0e:	1d98      	adds	r0, r3, #6
 8015c10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015c12:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8015c16:	68fb      	ldr	r3, [r7, #12]
 8015c18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015c1a:	461a      	mov	r2, r3
 8015c1c:	f7f0 fa8e 	bl	800613c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8015c20:	68f8      	ldr	r0, [r7, #12]
 8015c22:	f7f0 ff20 	bl	8006a66 <ulDNSHandlePacket>
 8015c26:	4603      	mov	r3, r0
 8015c28:	657b      	str	r3, [r7, #84]	@ 0x54
 8015c2a:	e01d      	b.n	8015c68 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8015c2c:	897b      	ldrh	r3, [r7, #10]
 8015c2e:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8015c32:	4293      	cmp	r3, r2
 8015c34:	d006      	beq.n	8015c44 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 8015c36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015c38:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8015c3a:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 8015c3c:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8015c40:	4293      	cmp	r3, r2
 8015c42:	d10f      	bne.n	8015c64 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8015c44:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015c46:	1d98      	adds	r0, r3, #6
 8015c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015c4a:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8015c4e:	68fb      	ldr	r3, [r7, #12]
 8015c50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015c52:	461a      	mov	r2, r3
 8015c54:	f7f0 fa72 	bl	800613c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8015c58:	68f8      	ldr	r0, [r7, #12]
 8015c5a:	f7f0 ff04 	bl	8006a66 <ulDNSHandlePacket>
 8015c5e:	4603      	mov	r3, r0
 8015c60:	657b      	str	r3, [r7, #84]	@ 0x54
 8015c62:	e001      	b.n	8015c68 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8015c64:	2300      	movs	r3, #0
 8015c66:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8015c68:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8015c6a:	4618      	mov	r0, r3
 8015c6c:	375c      	adds	r7, #92	@ 0x5c
 8015c6e:	46bd      	mov	sp, r7
 8015c70:	bd90      	pop	{r4, r7, pc}
 8015c72:	bf00      	nop
 8015c74:	08025608 	.word	0x08025608

08015c78 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 8015c78:	b580      	push	{r7, lr}
 8015c7a:	b086      	sub	sp, #24
 8015c7c:	af00      	add	r7, sp, #0
 8015c7e:	6078      	str	r0, [r7, #4]
 8015c80:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8015c82:	2000      	movs	r0, #0
 8015c84:	f7f6 fd20 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 8015c88:	6178      	str	r0, [r7, #20]
 8015c8a:	e021      	b.n	8015cd0 <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	2b60      	cmp	r3, #96	@ 0x60
 8015c90:	d119      	bne.n	8015cc6 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 8015c92:	697b      	ldr	r3, [r7, #20]
 8015c94:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8015c98:	f003 0304 	and.w	r3, r3, #4
 8015c9c:	b2db      	uxtb	r3, r3
 8015c9e:	2b00      	cmp	r3, #0
 8015ca0:	d011      	beq.n	8015cc6 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 8015ca2:	697b      	ldr	r3, [r7, #20]
 8015ca4:	3338      	adds	r3, #56	@ 0x38
 8015ca6:	4618      	mov	r0, r3
 8015ca8:	f7f7 f8f2 	bl	800ce90 <xIPv6_GetIPType>
 8015cac:	4603      	mov	r3, r0
 8015cae:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8015cb0:	7cfb      	ldrb	r3, [r7, #19]
 8015cb2:	2b00      	cmp	r3, #0
 8015cb4:	d101      	bne.n	8015cba <pxGetEndpoint+0x42>
 8015cb6:	2301      	movs	r3, #1
 8015cb8:	e000      	b.n	8015cbc <pxGetEndpoint+0x44>
 8015cba:	2300      	movs	r3, #0
 8015cbc:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 8015cbe:	68fa      	ldr	r2, [r7, #12]
 8015cc0:	683b      	ldr	r3, [r7, #0]
 8015cc2:	429a      	cmp	r2, r3
 8015cc4:	d008      	beq.n	8015cd8 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8015cc6:	6979      	ldr	r1, [r7, #20]
 8015cc8:	2000      	movs	r0, #0
 8015cca:	f7f6 fd1f 	bl	800c70c <FreeRTOS_NextEndPoint>
 8015cce:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 8015cd0:	697b      	ldr	r3, [r7, #20]
 8015cd2:	2b00      	cmp	r3, #0
 8015cd4:	d1da      	bne.n	8015c8c <pxGetEndpoint+0x14>
 8015cd6:	e000      	b.n	8015cda <pxGetEndpoint+0x62>
                {
                    break;
 8015cd8:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 8015cda:	697b      	ldr	r3, [r7, #20]
}
 8015cdc:	4618      	mov	r0, r3
 8015cde:	3718      	adds	r7, #24
 8015ce0:	46bd      	mov	sp, r7
 8015ce2:	bd80      	pop	{r7, pc}

08015ce4 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b084      	sub	sp, #16
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 8015cee:	2300      	movs	r3, #0
 8015cf0:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	f103 0114 	add.w	r1, r3, #20
 8015cf8:	687b      	ldr	r3, [r7, #4]
 8015cfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d001      	beq.n	8015d04 <prvStartLookup+0x20>
 8015d00:	4b1e      	ldr	r3, [pc, #120]	@ (8015d7c <prvStartLookup+0x98>)
 8015d02:	e000      	b.n	8015d06 <prvStartLookup+0x22>
 8015d04:	4b1e      	ldr	r3, [pc, #120]	@ (8015d80 <prvStartLookup+0x9c>)
 8015d06:	461a      	mov	r2, r3
 8015d08:	481e      	ldr	r0, [pc, #120]	@ (8015d84 <prvStartLookup+0xa0>)
 8015d0a:	f00a fc3f 	bl	802058c <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015d12:	2b00      	cmp	r3, #0
 8015d14:	d11f      	bne.n	8015d56 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	3314      	adds	r3, #20
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	f7f7 f8b8 	bl	800ce90 <xIPv6_GetIPType>
 8015d20:	4603      	mov	r3, r0
 8015d22:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8015d24:	7bbb      	ldrb	r3, [r7, #14]
 8015d26:	2b00      	cmp	r3, #0
 8015d28:	d101      	bne.n	8015d2e <prvStartLookup+0x4a>
 8015d2a:	2301      	movs	r3, #1
 8015d2c:	e000      	b.n	8015d30 <prvStartLookup+0x4c>
 8015d2e:	2300      	movs	r3, #0
 8015d30:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 8015d32:	68b9      	ldr	r1, [r7, #8]
 8015d34:	2060      	movs	r0, #96	@ 0x60
 8015d36:	f7ff ff9f 	bl	8015c78 <pxGetEndpoint>
 8015d3a:	4602      	mov	r2, r0
 8015d3c:	687b      	ldr	r3, [r7, #4]
 8015d3e:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 8015d40:	687b      	ldr	r3, [r7, #4]
 8015d42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	d001      	beq.n	8015d4c <prvStartLookup+0x68>
 8015d48:	4b0f      	ldr	r3, [pc, #60]	@ (8015d88 <prvStartLookup+0xa4>)
 8015d4a:	e000      	b.n	8015d4e <prvStartLookup+0x6a>
 8015d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8015d8c <prvStartLookup+0xa8>)
 8015d4e:	4619      	mov	r1, r3
 8015d50:	480f      	ldr	r0, [pc, #60]	@ (8015d90 <prvStartLookup+0xac>)
 8015d52:	f00a fc1b 	bl	802058c <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d008      	beq.n	8015d70 <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 8015d5e:	687b      	ldr	r3, [r7, #4]
 8015d60:	3314      	adds	r3, #20
 8015d62:	4619      	mov	r1, r3
 8015d64:	6878      	ldr	r0, [r7, #4]
 8015d66:	f7f5 f9d5 	bl	800b114 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 8015d6a:	683b      	ldr	r3, [r7, #0]
 8015d6c:	2201      	movs	r2, #1
 8015d6e:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 8015d70:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d72:	4618      	mov	r0, r3
 8015d74:	3710      	adds	r7, #16
 8015d76:	46bd      	mov	sp, r7
 8015d78:	bd80      	pop	{r7, pc}
 8015d7a:	bf00      	nop
 8015d7c:	0802563c 	.word	0x0802563c
 8015d80:	08025640 	.word	0x08025640
 8015d84:	08025644 	.word	0x08025644
 8015d88:	08025668 	.word	0x08025668
 8015d8c:	0802566c 	.word	0x0802566c
 8015d90:	08025670 	.word	0x08025670

08015d94 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8015d94:	b590      	push	{r4, r7, lr}
 8015d96:	b093      	sub	sp, #76	@ 0x4c
 8015d98:	af00      	add	r7, sp, #0
 8015d9a:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 8015d9c:	2300      	movs	r3, #0
 8015d9e:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 8015da0:	2300      	movs	r3, #0
 8015da2:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 8015da4:	2300      	movs	r3, #0
 8015da6:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 8015da8:	2300      	movs	r3, #0
 8015daa:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015dac:	687b      	ldr	r3, [r7, #4]
 8015dae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015db0:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 8015db2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015db4:	330e      	adds	r3, #14
 8015db6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 8015db8:	687b      	ldr	r3, [r7, #4]
 8015dba:	3314      	adds	r3, #20
 8015dbc:	f107 040c 	add.w	r4, r7, #12
 8015dc0:	6818      	ldr	r0, [r3, #0]
 8015dc2:	6859      	ldr	r1, [r3, #4]
 8015dc4:	689a      	ldr	r2, [r3, #8]
 8015dc6:	68db      	ldr	r3, [r3, #12]
 8015dc8:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8015dca:	687b      	ldr	r3, [r7, #4]
 8015dcc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d107      	bne.n	8015de2 <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 8015dd2:	233e      	movs	r3, #62	@ 0x3e
 8015dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015dda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ddc:	1ad3      	subs	r3, r2, r3
 8015dde:	643b      	str	r3, [r7, #64]	@ 0x40
 8015de0:	e003      	b.n	8015dea <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 8015de2:	687b      	ldr	r3, [r7, #4]
 8015de4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015de6:	3b3e      	subs	r3, #62	@ 0x3e
 8015de8:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 8015dea:	687b      	ldr	r3, [r7, #4]
 8015dec:	3314      	adds	r3, #20
 8015dee:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8015df0:	f107 021c 	add.w	r2, r7, #28
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7f4 ff21 	bl	800ac3c <eNDGetCacheEntry>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 8015e00:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015e04:	2b02      	cmp	r3, #2
 8015e06:	f000 80b1 	beq.w	8015f6c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 8015e0a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015e0e:	2b01      	cmp	r3, #1
 8015e10:	f040 8095 	bne.w	8015f3e <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8015e14:	69fa      	ldr	r2, [r7, #28]
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015e1e:	2b00      	cmp	r3, #0
 8015e20:	d109      	bne.n	8015e36 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 8015e22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e24:	2260      	movs	r2, #96	@ 0x60
 8015e26:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 8015e28:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e2a:	223a      	movs	r2, #58	@ 0x3a
 8015e2c:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 8015e2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e30:	2280      	movs	r2, #128	@ 0x80
 8015e32:	71da      	strb	r2, [r3, #7]
 8015e34:	e05e      	b.n	8015ef4 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 8015e36:	2300      	movs	r3, #0
 8015e38:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 8015e3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015e3c:	3336      	adds	r3, #54	@ 0x36
 8015e3e:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 8015e40:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e42:	2260      	movs	r2, #96	@ 0x60
 8015e44:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 8015e46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e48:	2200      	movs	r2, #0
 8015e4a:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 8015e4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e4e:	2200      	movs	r2, #0
 8015e50:	709a      	strb	r2, [r3, #2]
 8015e52:	2200      	movs	r2, #0
 8015e54:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 8015e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e58:	22ff      	movs	r2, #255	@ 0xff
 8015e5a:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e60:	b29b      	uxth	r3, r3
 8015e62:	3b36      	subs	r3, #54	@ 0x36
 8015e64:	b29a      	uxth	r2, r3
 8015e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e68:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 8015e6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e6c:	2211      	movs	r2, #17
 8015e6e:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e74:	b29b      	uxth	r3, r3
 8015e76:	3b36      	subs	r3, #54	@ 0x36
 8015e78:	b29a      	uxth	r2, r3
 8015e7a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e7c:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 8015e7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e80:	889b      	ldrh	r3, [r3, #4]
 8015e82:	b29b      	uxth	r3, r3
 8015e84:	021b      	lsls	r3, r3, #8
 8015e86:	b21a      	sxth	r2, r3
 8015e88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e8a:	889b      	ldrh	r3, [r3, #4]
 8015e8c:	b29b      	uxth	r3, r3
 8015e8e:	0a1b      	lsrs	r3, r3, #8
 8015e90:	b29b      	uxth	r3, r3
 8015e92:	b21b      	sxth	r3, r3
 8015e94:	4313      	orrs	r3, r2
 8015e96:	b21b      	sxth	r3, r3
 8015e98:	b29a      	uxth	r2, r3
 8015e9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e9c:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8015ea2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ea4:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8015eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eac:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8015eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eb0:	889b      	ldrh	r3, [r3, #4]
 8015eb2:	b29b      	uxth	r3, r3
 8015eb4:	021b      	lsls	r3, r3, #8
 8015eb6:	b21a      	sxth	r2, r3
 8015eb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015eba:	889b      	ldrh	r3, [r3, #4]
 8015ebc:	b29b      	uxth	r3, r3
 8015ebe:	0a1b      	lsrs	r3, r3, #8
 8015ec0:	b29b      	uxth	r3, r3
 8015ec2:	b21b      	sxth	r3, r3
 8015ec4:	4313      	orrs	r3, r2
 8015ec6:	b21b      	sxth	r3, r3
 8015ec8:	b29a      	uxth	r2, r3
 8015eca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ecc:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 8015ece:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015ed0:	2200      	movs	r2, #0
 8015ed2:	719a      	strb	r2, [r3, #6]
 8015ed4:	2200      	movs	r2, #0
 8015ed6:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d009      	beq.n	8015ef4 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8015ee0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015ee2:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015eea:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 8015eec:	2210      	movs	r2, #16
 8015eee:	4619      	mov	r1, r3
 8015ef0:	f00a fd68 	bl	80209c4 <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	d10e      	bne.n	8015f1a <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 8015efc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015efe:	b29b      	uxth	r3, r3
 8015f00:	3308      	adds	r3, #8
 8015f02:	b29b      	uxth	r3, r3
 8015f04:	021b      	lsls	r3, r3, #8
 8015f06:	b29a      	uxth	r2, r3
 8015f08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015f0a:	3308      	adds	r3, #8
 8015f0c:	0a1b      	lsrs	r3, r3, #8
 8015f0e:	b29b      	uxth	r3, r3
 8015f10:	4313      	orrs	r3, r2
 8015f12:	b29a      	uxth	r2, r3
 8015f14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f16:	809a      	strh	r2, [r3, #4]
 8015f18:	e028      	b.n	8015f6c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 8015f1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f1c:	2211      	movs	r2, #17
 8015f1e:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 8015f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015f22:	b29b      	uxth	r3, r3
 8015f24:	3308      	adds	r3, #8
 8015f26:	b29b      	uxth	r3, r3
 8015f28:	021b      	lsls	r3, r3, #8
 8015f2a:	b29a      	uxth	r2, r3
 8015f2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015f2e:	3308      	adds	r3, #8
 8015f30:	0a1b      	lsrs	r3, r3, #8
 8015f32:	b29b      	uxth	r3, r3
 8015f34:	4313      	orrs	r3, r2
 8015f36:	b29a      	uxth	r2, r3
 8015f38:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015f3a:	809a      	strh	r2, [r3, #4]
 8015f3c:	e016      	b.n	8015f6c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8015f3e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015f42:	2b00      	cmp	r3, #0
 8015f44:	d10f      	bne.n	8015f66 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 8015f46:	69fb      	ldr	r3, [r7, #28]
 8015f48:	2b00      	cmp	r3, #0
 8015f4a:	d002      	beq.n	8015f52 <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8015f4c:	69fa      	ldr	r2, [r7, #28]
 8015f4e:	687b      	ldr	r3, [r7, #4]
 8015f50:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 8015f52:	f107 0320 	add.w	r3, r7, #32
 8015f56:	4619      	mov	r1, r3
 8015f58:	6878      	ldr	r0, [r7, #4]
 8015f5a:	f7ff fec3 	bl	8015ce4 <prvStartLookup>
 8015f5e:	4603      	mov	r3, r0
 8015f60:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8015f64:	e002      	b.n	8015f6c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8015f66:	2302      	movs	r3, #2
 8015f68:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 8015f6c:	6a3b      	ldr	r3, [r7, #32]
 8015f6e:	2b01      	cmp	r3, #1
 8015f70:	d03d      	beq.n	8015fee <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 8015f72:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8015f76:	2b02      	cmp	r3, #2
 8015f78:	d036      	beq.n	8015fe8 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8015f7a:	687b      	ldr	r3, [r7, #4]
 8015f7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d02e      	beq.n	8015fe0 <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f86:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015f8a:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015f8c:	687b      	ldr	r3, [r7, #4]
 8015f8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f90:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8015f92:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015f94:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015f9a:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 8015f9c:	2206      	movs	r2, #6
 8015f9e:	4619      	mov	r1, r3
 8015fa0:	f00a fd10 	bl	80209c4 <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8015fa4:	687b      	ldr	r3, [r7, #4]
 8015fa6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015fa8:	2b3b      	cmp	r3, #59	@ 0x3b
 8015faa:	d812      	bhi.n	8015fd2 <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8015fac:	687b      	ldr	r3, [r7, #4]
 8015fae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015fb2:	e008      	b.n	8015fc6 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015fba:	4413      	add	r3, r2
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8015fc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015fc2:	3301      	adds	r3, #1
 8015fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015fc6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015fc8:	2b3b      	cmp	r3, #59	@ 0x3b
 8015fca:	ddf3      	ble.n	8015fb4 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	223c      	movs	r2, #60	@ 0x3c
 8015fd0:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8015fd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015fd4:	68db      	ldr	r3, [r3, #12]
 8015fd6:	2201      	movs	r2, #1
 8015fd8:	6879      	ldr	r1, [r7, #4]
 8015fda:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8015fdc:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8015fde:	e006      	b.n	8015fee <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8015fe0:	6878      	ldr	r0, [r7, #4]
 8015fe2:	f000 f9e9 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
}
 8015fe6:	e002      	b.n	8015fee <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8015fe8:	6878      	ldr	r0, [r7, #4]
 8015fea:	f000 f9e5 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
}
 8015fee:	bf00      	nop
 8015ff0:	374c      	adds	r7, #76	@ 0x4c
 8015ff2:	46bd      	mov	sp, r7
 8015ff4:	bd90      	pop	{r4, r7, pc}
	...

08015ff8 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8015ff8:	b590      	push	{r4, r7, lr}
 8015ffa:	b09b      	sub	sp, #108	@ 0x6c
 8015ffc:	af02      	add	r7, sp, #8
 8015ffe:	60f8      	str	r0, [r7, #12]
 8016000:	460b      	mov	r3, r1
 8016002:	607a      	str	r2, [r7, #4]
 8016004:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 8016006:	2301      	movs	r3, #1
 8016008:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 801600a:	68fb      	ldr	r3, [r7, #12]
 801600c:	2b00      	cmp	r3, #0
 801600e:	d104      	bne.n	801601a <xProcessReceivedUDPPacket_IPv6+0x22>
 8016010:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8016014:	4874      	ldr	r0, [pc, #464]	@ (80161e8 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8016016:	f7eb f88b 	bl	8001130 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801601a:	68fb      	ldr	r3, [r7, #12]
 801601c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801601e:	2b00      	cmp	r3, #0
 8016020:	d104      	bne.n	801602c <xProcessReceivedUDPPacket_IPv6+0x34>
 8016022:	f240 1187 	movw	r1, #391	@ 0x187
 8016026:	4870      	ldr	r0, [pc, #448]	@ (80161e8 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8016028:	f7eb f882 	bl	8001130 <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801602c:	68fb      	ldr	r3, [r7, #12]
 801602e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016030:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8016032:	897b      	ldrh	r3, [r7, #10]
 8016034:	4618      	mov	r0, r3
 8016036:	f7f8 f9ad 	bl	800e394 <pxUDPSocketLookup>
 801603a:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 801603c:	687b      	ldr	r3, [r7, #4]
 801603e:	2200      	movs	r2, #0
 8016040:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 8016042:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016044:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8016046:	b29b      	uxth	r3, r3
 8016048:	2b00      	cmp	r3, #0
 801604a:	d109      	bne.n	8016060 <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 801604c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801604e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8016050:	b29b      	uxth	r3, r3
 8016052:	4619      	mov	r1, r3
 8016054:	4865      	ldr	r0, [pc, #404]	@ (80161ec <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 8016056:	f00a fa99 	bl	802058c <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 801605a:	2300      	movs	r3, #0
 801605c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801605e:	e0bd      	b.n	80161dc <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 8016060:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016062:	2b00      	cmp	r3, #0
 8016064:	f000 8091 	beq.w	801618a <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f7ef ff51 	bl	8005f10 <xCheckRequiresARPResolution>
 801606e:	4603      	mov	r3, r0
 8016070:	2b01      	cmp	r3, #1
 8016072:	d105      	bne.n	8016080 <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2201      	movs	r2, #1
 8016078:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 801607a:	2300      	movs	r3, #0
 801607c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 801607e:	e0ad      	b.n	80161dc <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 8016080:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016082:	1d98      	adds	r0, r3, #6
 8016084:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016086:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 801608a:	68fb      	ldr	r3, [r7, #12]
 801608c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 801608e:	461a      	mov	r2, r3
 8016090:	f7f4 fe82 	bl	800ad98 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8016094:	68f8      	ldr	r0, [r7, #12]
 8016096:	f7f2 ff7f 	bl	8008f98 <uxIPHeaderSizePacket>
 801609a:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 801609c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801609e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	d03d      	beq.n	8016120 <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 80160a4:	68fb      	ldr	r3, [r7, #12]
 80160a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80160a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80160aa:	3316      	adds	r3, #22
 80160ac:	4413      	add	r3, r2
 80160ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 80160b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80160b2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80160b4:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 80160b6:	68fb      	ldr	r3, [r7, #12]
 80160b8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80160ba:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 80160bc:	897b      	ldrh	r3, [r7, #10]
 80160be:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80160c0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80160c2:	3316      	adds	r3, #22
 80160c4:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80160c8:	6818      	ldr	r0, [r3, #0]
 80160ca:	6859      	ldr	r1, [r3, #4]
 80160cc:	689a      	ldr	r2, [r3, #8]
 80160ce:	68db      	ldr	r3, [r3, #12]
 80160d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80160d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80160d4:	3326      	adds	r3, #38	@ 0x26
 80160d6:	f107 041c 	add.w	r4, r7, #28
 80160da:	6818      	ldr	r0, [r3, #0]
 80160dc:	6859      	ldr	r1, [r3, #4]
 80160de:	689a      	ldr	r2, [r3, #8]
 80160e0:	68db      	ldr	r3, [r3, #12]
 80160e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 80160e4:	230a      	movs	r3, #10
 80160e6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 80160ea:	230a      	movs	r3, #10
 80160ec:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 80160ee:	2318      	movs	r3, #24
 80160f0:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 80160f4:	2318      	movs	r3, #24
 80160f6:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 80160f8:	68fb      	ldr	r3, [r7, #12]
 80160fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80160fc:	3b3e      	subs	r3, #62	@ 0x3e
 80160fe:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 8016100:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8016104:	f107 0314 	add.w	r3, r7, #20
 8016108:	9300      	str	r3, [sp, #0]
 801610a:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 801610c:	4613      	mov	r3, r2
 801610e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016110:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8016112:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016114:	47a0      	blx	r4
 8016116:	4603      	mov	r3, r0
 8016118:	2b00      	cmp	r3, #0
 801611a:	d001      	beq.n	8016120 <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 801611c:	2300      	movs	r3, #0
 801611e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8016120:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016122:	2b01      	cmp	r3, #1
 8016124:	d15a      	bne.n	80161dc <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8016126:	f7ed fa8b 	bl	8003640 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 801612a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801612c:	3354      	adds	r3, #84	@ 0x54
 801612e:	68fa      	ldr	r2, [r7, #12]
 8016130:	4611      	mov	r1, r2
 8016132:	4618      	mov	r0, r3
 8016134:	f7ec f9dd 	bl	80024f2 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8016138:	f7ed fa90 	bl	800365c <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 801613c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801613e:	685b      	ldr	r3, [r3, #4]
 8016140:	2b00      	cmp	r3, #0
 8016142:	d005      	beq.n	8016150 <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8016144:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016146:	685b      	ldr	r3, [r3, #4]
 8016148:	2101      	movs	r1, #1
 801614a:	4618      	mov	r0, r3
 801614c:	f7ec f8cc 	bl	80022e8 <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8016150:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016152:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016154:	2b00      	cmp	r3, #0
 8016156:	d00c      	beq.n	8016172 <xProcessReceivedUDPPacket_IPv6+0x17a>
 8016158:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801615a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801615c:	f003 0301 	and.w	r3, r3, #1
 8016160:	2b00      	cmp	r3, #0
 8016162:	d006      	beq.n	8016172 <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8016164:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016166:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016168:	681b      	ldr	r3, [r3, #0]
 801616a:	2101      	movs	r1, #1
 801616c:	4618      	mov	r0, r3
 801616e:	f7ec f8bb 	bl	80022e8 <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8016172:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016174:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016176:	2b00      	cmp	r3, #0
 8016178:	d030      	beq.n	80161dc <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 801617a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801617c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801617e:	2300      	movs	r3, #0
 8016180:	2200      	movs	r2, #0
 8016182:	2100      	movs	r1, #0
 8016184:	f7ec fb8c 	bl	80028a0 <xQueueGenericSend>
 8016188:	e028      	b.n	80161dc <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 801618a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801618c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801618e:	b29b      	uxth	r3, r3
 8016190:	021b      	lsls	r3, r3, #8
 8016192:	b21a      	sxth	r2, r3
 8016194:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016196:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8016198:	b29b      	uxth	r3, r3
 801619a:	0a1b      	lsrs	r3, r3, #8
 801619c:	b29b      	uxth	r3, r3
 801619e:	b21b      	sxth	r3, r3
 80161a0:	4313      	orrs	r3, r2
 80161a2:	b21b      	sxth	r3, r3
 80161a4:	2b35      	cmp	r3, #53	@ 0x35
 80161a6:	d105      	bne.n	80161b4 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80161a8:	68f8      	ldr	r0, [r7, #12]
 80161aa:	f7f0 fc5c 	bl	8006a66 <ulDNSHandlePacket>
 80161ae:	4603      	mov	r3, r0
 80161b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80161b2:	e013      	b.n	80161dc <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 80161b4:	897b      	ldrh	r3, [r7, #10]
 80161b6:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80161ba:	4293      	cmp	r3, r2
 80161bc:	d006      	beq.n	80161cc <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 80161be:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80161c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80161c2:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 80161c4:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80161c8:	4293      	cmp	r3, r2
 80161ca:	d105      	bne.n	80161d8 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80161cc:	68f8      	ldr	r0, [r7, #12]
 80161ce:	f7f0 fc4a 	bl	8006a66 <ulDNSHandlePacket>
 80161d2:	4603      	mov	r3, r0
 80161d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80161d6:	e001      	b.n	80161dc <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 80161d8:	2300      	movs	r3, #0
 80161da:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 80161dc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80161de:	4618      	mov	r0, r3
 80161e0:	3764      	adds	r7, #100	@ 0x64
 80161e2:	46bd      	mov	sp, r7
 80161e4:	bd90      	pop	{r4, r7, pc}
 80161e6:	bf00      	nop
 80161e8:	08025698 	.word	0x08025698
 80161ec:	080256cc 	.word	0x080256cc

080161f0 <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 80161f0:	b480      	push	{r7}
 80161f2:	b083      	sub	sp, #12
 80161f4:	af00      	add	r7, sp, #0
 80161f6:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 80161f8:	2301      	movs	r3, #1
    }
 80161fa:	4618      	mov	r0, r3
 80161fc:	370c      	adds	r7, #12
 80161fe:	46bd      	mov	sp, r7
 8016200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016204:	4770      	bx	lr

08016206 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 8016206:	b480      	push	{r7}
 8016208:	af00      	add	r7, sp, #0
    }
 801620a:	bf00      	nop
 801620c:	46bd      	mov	sp, r7
 801620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016212:	4770      	bx	lr

08016214 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 8016214:	b580      	push	{r7, lr}
 8016216:	b082      	sub	sp, #8
 8016218:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 801621a:	4b2e      	ldr	r3, [pc, #184]	@ (80162d4 <xNetworkBuffersInitialise+0xc0>)
 801621c:	681b      	ldr	r3, [r3, #0]
 801621e:	2b00      	cmp	r3, #0
 8016220:	d149      	bne.n	80162b6 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 8016222:	2140      	movs	r1, #64	@ 0x40
 8016224:	2040      	movs	r0, #64	@ 0x40
 8016226:	f7ec fb11 	bl	800284c <xQueueCreateCountingSemaphore>
 801622a:	4603      	mov	r3, r0
 801622c:	4a29      	ldr	r2, [pc, #164]	@ (80162d4 <xNetworkBuffersInitialise+0xc0>)
 801622e:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 8016230:	4b28      	ldr	r3, [pc, #160]	@ (80162d4 <xNetworkBuffersInitialise+0xc0>)
 8016232:	681b      	ldr	r3, [r3, #0]
 8016234:	2b00      	cmp	r3, #0
 8016236:	d103      	bne.n	8016240 <xNetworkBuffersInitialise+0x2c>
 8016238:	21c3      	movs	r1, #195	@ 0xc3
 801623a:	4827      	ldr	r0, [pc, #156]	@ (80162d8 <xNetworkBuffersInitialise+0xc4>)
 801623c:	f7ea ff78 	bl	8001130 <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 8016240:	4b24      	ldr	r3, [pc, #144]	@ (80162d4 <xNetworkBuffersInitialise+0xc0>)
 8016242:	681b      	ldr	r3, [r3, #0]
 8016244:	2b00      	cmp	r3, #0
 8016246:	d036      	beq.n	80162b6 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 8016248:	4824      	ldr	r0, [pc, #144]	@ (80162dc <xNetworkBuffersInitialise+0xc8>)
 801624a:	f7ec f925 	bl	8002498 <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 801624e:	4824      	ldr	r0, [pc, #144]	@ (80162e0 <xNetworkBuffersInitialise+0xcc>)
 8016250:	f001 fa24 	bl	801769c <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8016254:	2300      	movs	r3, #0
 8016256:	603b      	str	r3, [r7, #0]
 8016258:	e027      	b.n	80162aa <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 801625a:	683a      	ldr	r2, [r7, #0]
 801625c:	4613      	mov	r3, r2
 801625e:	00db      	lsls	r3, r3, #3
 8016260:	1a9b      	subs	r3, r3, r2
 8016262:	00db      	lsls	r3, r3, #3
 8016264:	4a1e      	ldr	r2, [pc, #120]	@ (80162e0 <xNetworkBuffersInitialise+0xcc>)
 8016266:	4413      	add	r3, r2
 8016268:	4618      	mov	r0, r3
 801626a:	f7ec f935 	bl	80024d8 <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 801626e:	683a      	ldr	r2, [r7, #0]
 8016270:	4613      	mov	r3, r2
 8016272:	00db      	lsls	r3, r3, #3
 8016274:	1a9b      	subs	r3, r3, r2
 8016276:	00db      	lsls	r3, r3, #3
 8016278:	4a19      	ldr	r2, [pc, #100]	@ (80162e0 <xNetworkBuffersInitialise+0xcc>)
 801627a:	1899      	adds	r1, r3, r2
 801627c:	4818      	ldr	r0, [pc, #96]	@ (80162e0 <xNetworkBuffersInitialise+0xcc>)
 801627e:	683a      	ldr	r2, [r7, #0]
 8016280:	4613      	mov	r3, r2
 8016282:	00db      	lsls	r3, r3, #3
 8016284:	1a9b      	subs	r3, r3, r2
 8016286:	00db      	lsls	r3, r3, #3
 8016288:	4403      	add	r3, r0
 801628a:	330c      	adds	r3, #12
 801628c:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 801628e:	683a      	ldr	r2, [r7, #0]
 8016290:	4613      	mov	r3, r2
 8016292:	00db      	lsls	r3, r3, #3
 8016294:	1a9b      	subs	r3, r3, r2
 8016296:	00db      	lsls	r3, r3, #3
 8016298:	4a11      	ldr	r2, [pc, #68]	@ (80162e0 <xNetworkBuffersInitialise+0xcc>)
 801629a:	4413      	add	r3, r2
 801629c:	4619      	mov	r1, r3
 801629e:	480f      	ldr	r0, [pc, #60]	@ (80162dc <xNetworkBuffersInitialise+0xc8>)
 80162a0:	f7ec f94b 	bl	800253a <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80162a4:	683b      	ldr	r3, [r7, #0]
 80162a6:	3301      	adds	r3, #1
 80162a8:	603b      	str	r3, [r7, #0]
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	2b3f      	cmp	r3, #63	@ 0x3f
 80162ae:	d9d4      	bls.n	801625a <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 80162b0:	4b0c      	ldr	r3, [pc, #48]	@ (80162e4 <xNetworkBuffersInitialise+0xd0>)
 80162b2:	2240      	movs	r2, #64	@ 0x40
 80162b4:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 80162b6:	4b07      	ldr	r3, [pc, #28]	@ (80162d4 <xNetworkBuffersInitialise+0xc0>)
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	2b00      	cmp	r3, #0
 80162bc:	d102      	bne.n	80162c4 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 80162be:	2300      	movs	r3, #0
 80162c0:	607b      	str	r3, [r7, #4]
 80162c2:	e001      	b.n	80162c8 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 80162c4:	2301      	movs	r3, #1
 80162c6:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 80162c8:	687b      	ldr	r3, [r7, #4]
}
 80162ca:	4618      	mov	r0, r3
 80162cc:	3708      	adds	r7, #8
 80162ce:	46bd      	mov	sp, r7
 80162d0:	bd80      	pop	{r7, pc}
 80162d2:	bf00      	nop
 80162d4:	20002110 	.word	0x20002110
 80162d8:	0802570c 	.word	0x0802570c
 80162dc:	200012f8 	.word	0x200012f8
 80162e0:	20001310 	.word	0x20001310
 80162e4:	2000130c 	.word	0x2000130c

080162e8 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 80162e8:	b580      	push	{r7, lr}
 80162ea:	b086      	sub	sp, #24
 80162ec:	af00      	add	r7, sp, #0
 80162ee:	6078      	str	r0, [r7, #4]
 80162f0:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 80162f2:	2300      	movs	r3, #0
 80162f4:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 80162f6:	2300      	movs	r3, #0
 80162f8:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 80162fa:	4b2a      	ldr	r3, [pc, #168]	@ (80163a4 <pxGetNetworkBufferWithDescriptor+0xbc>)
 80162fc:	681b      	ldr	r3, [r3, #0]
 80162fe:	2b00      	cmp	r3, #0
 8016300:	d04b      	beq.n	801639a <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8016302:	4b28      	ldr	r3, [pc, #160]	@ (80163a4 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	6839      	ldr	r1, [r7, #0]
 8016308:	4618      	mov	r0, r3
 801630a:	f7ec fc81 	bl	8002c10 <xQueueSemaphoreTake>
 801630e:	4603      	mov	r3, r0
 8016310:	2b01      	cmp	r3, #1
 8016312:	d13d      	bne.n	8016390 <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 8016314:	f7ef f814 	bl	8005340 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8016318:	4b23      	ldr	r3, [pc, #140]	@ (80163a8 <pxGetNetworkBufferWithDescriptor+0xc0>)
 801631a:	68db      	ldr	r3, [r3, #12]
 801631c:	68db      	ldr	r3, [r3, #12]
 801631e:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8016320:	6978      	ldr	r0, [r7, #20]
 8016322:	f7ff ff65 	bl	80161f0 <bIsValidNetworkDescriptor>
 8016326:	4603      	mov	r3, r0
 8016328:	2b00      	cmp	r3, #0
 801632a:	d009      	beq.n	8016340 <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 801632c:	697b      	ldr	r3, [r7, #20]
 801632e:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8016330:	4a1d      	ldr	r2, [pc, #116]	@ (80163a8 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016332:	4293      	cmp	r3, r2
 8016334:	d104      	bne.n	8016340 <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8016336:	697b      	ldr	r3, [r7, #20]
 8016338:	4618      	mov	r0, r3
 801633a:	f7ec f937 	bl	80025ac <uxListRemove>
 801633e:	e001      	b.n	8016344 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 8016340:	2301      	movs	r3, #1
 8016342:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 8016344:	f7ef f828 	bl	8005398 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 8016348:	693b      	ldr	r3, [r7, #16]
 801634a:	2b01      	cmp	r3, #1
 801634c:	d10b      	bne.n	8016366 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 801634e:	6978      	ldr	r0, [r7, #20]
 8016350:	f7ff ff4e 	bl	80161f0 <bIsValidNetworkDescriptor>
 8016354:	4603      	mov	r3, r0
 8016356:	461a      	mov	r2, r3
 8016358:	6979      	ldr	r1, [r7, #20]
 801635a:	4814      	ldr	r0, [pc, #80]	@ (80163ac <pxGetNetworkBufferWithDescriptor+0xc4>)
 801635c:	f00a f916 	bl	802058c <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 8016360:	2300      	movs	r3, #0
 8016362:	617b      	str	r3, [r7, #20]
 8016364:	e019      	b.n	801639a <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016366:	4b10      	ldr	r3, [pc, #64]	@ (80163a8 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 801636c:	4b10      	ldr	r3, [pc, #64]	@ (80163b0 <pxGetNetworkBufferWithDescriptor+0xc8>)
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	68fa      	ldr	r2, [r7, #12]
 8016372:	429a      	cmp	r2, r3
 8016374:	d202      	bcs.n	801637c <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 8016376:	4a0e      	ldr	r2, [pc, #56]	@ (80163b0 <pxGetNetworkBufferWithDescriptor+0xc8>)
 8016378:	68fb      	ldr	r3, [r7, #12]
 801637a:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 801637c:	697b      	ldr	r3, [r7, #20]
 801637e:	687a      	ldr	r2, [r7, #4]
 8016380:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 8016382:	697b      	ldr	r3, [r7, #20]
 8016384:	2200      	movs	r2, #0
 8016386:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 8016388:	697b      	ldr	r3, [r7, #20]
 801638a:	2200      	movs	r2, #0
 801638c:	631a      	str	r2, [r3, #48]	@ 0x30
 801638e:	e004      	b.n	801639a <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 8016390:	f240 113b 	movw	r1, #315	@ 0x13b
 8016394:	4807      	ldr	r0, [pc, #28]	@ (80163b4 <pxGetNetworkBufferWithDescriptor+0xcc>)
 8016396:	f7ea fecb 	bl	8001130 <vAssertCalled>
        }
    }

    return pxReturn;
 801639a:	697b      	ldr	r3, [r7, #20]
}
 801639c:	4618      	mov	r0, r3
 801639e:	3718      	adds	r7, #24
 80163a0:	46bd      	mov	sp, r7
 80163a2:	bd80      	pop	{r7, pc}
 80163a4:	20002110 	.word	0x20002110
 80163a8:	200012f8 	.word	0x200012f8
 80163ac:	08025758 	.word	0x08025758
 80163b0:	2000130c 	.word	0x2000130c
 80163b4:	0802570c 	.word	0x0802570c

080163b8 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80163b8:	b580      	push	{r7, lr}
 80163ba:	b084      	sub	sp, #16
 80163bc:	af00      	add	r7, sp, #0
 80163be:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 80163c0:	6878      	ldr	r0, [r7, #4]
 80163c2:	f7ff ff15 	bl	80161f0 <bIsValidNetworkDescriptor>
 80163c6:	4603      	mov	r3, r0
 80163c8:	2b00      	cmp	r3, #0
 80163ca:	d104      	bne.n	80163d6 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 80163cc:	6879      	ldr	r1, [r7, #4]
 80163ce:	4819      	ldr	r0, [pc, #100]	@ (8016434 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 80163d0:	f00a f8dc 	bl	802058c <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 80163d4:	e029      	b.n	801642a <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 80163d6:	f7ee ffb3 	bl	8005340 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80163da:	687b      	ldr	r3, [r7, #4]
 80163dc:	691b      	ldr	r3, [r3, #16]
 80163de:	4a16      	ldr	r2, [pc, #88]	@ (8016438 <vReleaseNetworkBufferAndDescriptor+0x80>)
 80163e0:	4293      	cmp	r3, r2
 80163e2:	d101      	bne.n	80163e8 <vReleaseNetworkBufferAndDescriptor+0x30>
 80163e4:	2301      	movs	r3, #1
 80163e6:	e000      	b.n	80163ea <vReleaseNetworkBufferAndDescriptor+0x32>
 80163e8:	2300      	movs	r3, #0
 80163ea:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	2b00      	cmp	r3, #0
 80163f0:	d104      	bne.n	80163fc <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80163f2:	687b      	ldr	r3, [r7, #4]
 80163f4:	4619      	mov	r1, r3
 80163f6:	4810      	ldr	r0, [pc, #64]	@ (8016438 <vReleaseNetworkBufferAndDescriptor+0x80>)
 80163f8:	f7ec f87b 	bl	80024f2 <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 80163fc:	f7ee ffcc 	bl	8005398 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 8016400:	68fb      	ldr	r3, [r7, #12]
 8016402:	2b00      	cmp	r3, #0
 8016404:	d008      	beq.n	8016418 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8016406:	f000 f829 	bl	801645c <uxGetNumberOfFreeNetworkBuffers>
 801640a:	4603      	mov	r3, r0
 801640c:	461a      	mov	r2, r3
 801640e:	6879      	ldr	r1, [r7, #4]
 8016410:	480a      	ldr	r0, [pc, #40]	@ (801643c <vReleaseNetworkBufferAndDescriptor+0x84>)
 8016412:	f00a f8bb 	bl	802058c <lUDPLoggingPrintf>
}
 8016416:	e008      	b.n	801642a <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8016418:	4b09      	ldr	r3, [pc, #36]	@ (8016440 <vReleaseNetworkBufferAndDescriptor+0x88>)
 801641a:	6818      	ldr	r0, [r3, #0]
 801641c:	2300      	movs	r3, #0
 801641e:	2200      	movs	r2, #0
 8016420:	2100      	movs	r1, #0
 8016422:	f7ec fa3d 	bl	80028a0 <xQueueGenericSend>
            prvShowWarnings();
 8016426:	f7ff feee 	bl	8016206 <prvShowWarnings>
}
 801642a:	bf00      	nop
 801642c:	3710      	adds	r7, #16
 801642e:	46bd      	mov	sp, r7
 8016430:	bd80      	pop	{r7, pc}
 8016432:	bf00      	nop
 8016434:	0802579c 	.word	0x0802579c
 8016438:	200012f8 	.word	0x200012f8
 801643c:	080257d4 	.word	0x080257d4
 8016440:	20002110 	.word	0x20002110

08016444 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8016444:	b480      	push	{r7}
 8016446:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8016448:	4b03      	ldr	r3, [pc, #12]	@ (8016458 <uxGetMinimumFreeNetworkBuffers+0x14>)
 801644a:	681b      	ldr	r3, [r3, #0]
}
 801644c:	4618      	mov	r0, r3
 801644e:	46bd      	mov	sp, r7
 8016450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016454:	4770      	bx	lr
 8016456:	bf00      	nop
 8016458:	2000130c 	.word	0x2000130c

0801645c <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 801645c:	b480      	push	{r7}
 801645e:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016460:	4b03      	ldr	r3, [pc, #12]	@ (8016470 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8016462:	681b      	ldr	r3, [r3, #0]
}
 8016464:	4618      	mov	r0, r3
 8016466:	46bd      	mov	sp, r7
 8016468:	f85d 7b04 	ldr.w	r7, [sp], #4
 801646c:	4770      	bx	lr
 801646e:	bf00      	nop
 8016470:	200012f8 	.word	0x200012f8

08016474 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8016474:	b480      	push	{r7}
 8016476:	b085      	sub	sp, #20
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 801647c:	2300      	movs	r3, #0
 801647e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8016480:	687b      	ldr	r3, [r7, #4]
 8016482:	4a11      	ldr	r2, [pc, #68]	@ (80164c8 <xHas_1F_PHYSPCS+0x54>)
 8016484:	4293      	cmp	r3, r2
 8016486:	d016      	beq.n	80164b6 <xHas_1F_PHYSPCS+0x42>
 8016488:	687b      	ldr	r3, [r7, #4]
 801648a:	4a0f      	ldr	r2, [pc, #60]	@ (80164c8 <xHas_1F_PHYSPCS+0x54>)
 801648c:	4293      	cmp	r3, r2
 801648e:	d80f      	bhi.n	80164b0 <xHas_1F_PHYSPCS+0x3c>
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	4a0e      	ldr	r2, [pc, #56]	@ (80164cc <xHas_1F_PHYSPCS+0x58>)
 8016494:	4293      	cmp	r3, r2
 8016496:	d00e      	beq.n	80164b6 <xHas_1F_PHYSPCS+0x42>
 8016498:	687b      	ldr	r3, [r7, #4]
 801649a:	4a0c      	ldr	r2, [pc, #48]	@ (80164cc <xHas_1F_PHYSPCS+0x58>)
 801649c:	4293      	cmp	r3, r2
 801649e:	d807      	bhi.n	80164b0 <xHas_1F_PHYSPCS+0x3c>
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	4a0b      	ldr	r2, [pc, #44]	@ (80164d0 <xHas_1F_PHYSPCS+0x5c>)
 80164a4:	4293      	cmp	r3, r2
 80164a6:	d006      	beq.n	80164b6 <xHas_1F_PHYSPCS+0x42>
 80164a8:	687b      	ldr	r3, [r7, #4]
 80164aa:	4a0a      	ldr	r2, [pc, #40]	@ (80164d4 <xHas_1F_PHYSPCS+0x60>)
 80164ac:	4293      	cmp	r3, r2
 80164ae:	d002      	beq.n	80164b6 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 80164b0:	2301      	movs	r3, #1
 80164b2:	60fb      	str	r3, [r7, #12]
            break;
 80164b4:	e000      	b.n	80164b8 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 80164b6:	bf00      	nop
    }

    return xResult;
 80164b8:	68fb      	ldr	r3, [r7, #12]
}
 80164ba:	4618      	mov	r0, r3
 80164bc:	3714      	adds	r7, #20
 80164be:	46bd      	mov	sp, r7
 80164c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164c4:	4770      	bx	lr
 80164c6:	bf00      	nop
 80164c8:	ff000710 	.word	0xff000710
 80164cc:	2000a250 	.word	0x2000a250
 80164d0:	20005c90 	.word	0x20005c90
 80164d4:	2000a221 	.word	0x2000a221

080164d8 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 80164d8:	b480      	push	{r7}
 80164da:	b085      	sub	sp, #20
 80164dc:	af00      	add	r7, sp, #0
 80164de:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 80164e0:	2300      	movs	r3, #0
 80164e2:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	4a0d      	ldr	r2, [pc, #52]	@ (801651c <xHas_19_PHYCR+0x44>)
 80164e8:	4293      	cmp	r3, r2
 80164ea:	d00b      	beq.n	8016504 <xHas_19_PHYCR+0x2c>
 80164ec:	687b      	ldr	r3, [r7, #4]
 80164ee:	4a0b      	ldr	r2, [pc, #44]	@ (801651c <xHas_19_PHYCR+0x44>)
 80164f0:	4293      	cmp	r3, r2
 80164f2:	d80a      	bhi.n	801650a <xHas_19_PHYCR+0x32>
 80164f4:	687b      	ldr	r3, [r7, #4]
 80164f6:	4a0a      	ldr	r2, [pc, #40]	@ (8016520 <xHas_19_PHYCR+0x48>)
 80164f8:	4293      	cmp	r3, r2
 80164fa:	d003      	beq.n	8016504 <xHas_19_PHYCR+0x2c>
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	4a09      	ldr	r2, [pc, #36]	@ (8016524 <xHas_19_PHYCR+0x4c>)
 8016500:	4293      	cmp	r3, r2
 8016502:	d102      	bne.n	801650a <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 8016504:	2301      	movs	r3, #1
 8016506:	60fb      	str	r3, [r7, #12]
            break;
 8016508:	e000      	b.n	801650c <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 801650a:	bf00      	nop
    }

    return xResult;
 801650c:	68fb      	ldr	r3, [r7, #12]
}
 801650e:	4618      	mov	r0, r3
 8016510:	3714      	adds	r7, #20
 8016512:	46bd      	mov	sp, r7
 8016514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016518:	4770      	bx	lr
 801651a:	bf00      	nop
 801651c:	2000a221 	.word	0x2000a221
 8016520:	0007c130 	.word	0x0007c130
 8016524:	20005c90 	.word	0x20005c90

08016528 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8016528:	b580      	push	{r7, lr}
 801652a:	b084      	sub	sp, #16
 801652c:	af00      	add	r7, sp, #0
 801652e:	60f8      	str	r0, [r7, #12]
 8016530:	60b9      	str	r1, [r7, #8]
 8016532:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8016534:	2240      	movs	r2, #64	@ 0x40
 8016536:	2100      	movs	r1, #0
 8016538:	68f8      	ldr	r0, [r7, #12]
 801653a:	f00a fb50 	bl	8020bde <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 801653e:	68fb      	ldr	r3, [r7, #12]
 8016540:	68ba      	ldr	r2, [r7, #8]
 8016542:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8016544:	68fb      	ldr	r3, [r7, #12]
 8016546:	687a      	ldr	r2, [r7, #4]
 8016548:	605a      	str	r2, [r3, #4]
}
 801654a:	bf00      	nop
 801654c:	3710      	adds	r7, #16
 801654e:	46bd      	mov	sp, r7
 8016550:	bd80      	pop	{r7, pc}
	...

08016554 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8016554:	b580      	push	{r7, lr}
 8016556:	b086      	sub	sp, #24
 8016558:	af00      	add	r7, sp, #0
 801655a:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	2200      	movs	r2, #0
 8016560:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8016562:	2300      	movs	r3, #0
 8016564:	617b      	str	r3, [r7, #20]
 8016566:	e03a      	b.n	80165de <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8016568:	2300      	movs	r3, #0
 801656a:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	681b      	ldr	r3, [r3, #0]
 8016570:	f107 020c 	add.w	r2, r7, #12
 8016574:	2103      	movs	r1, #3
 8016576:	6978      	ldr	r0, [r7, #20]
 8016578:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 801657a:	68fb      	ldr	r3, [r7, #12]
 801657c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016580:	4293      	cmp	r3, r2
 8016582:	d029      	beq.n	80165d8 <xPhyDiscover+0x84>
 8016584:	68fb      	ldr	r3, [r7, #12]
 8016586:	2b00      	cmp	r3, #0
 8016588:	d026      	beq.n	80165d8 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 801658a:	687b      	ldr	r3, [r7, #4]
 801658c:	681b      	ldr	r3, [r3, #0]
 801658e:	f107 0208 	add.w	r2, r7, #8
 8016592:	2102      	movs	r1, #2
 8016594:	6978      	ldr	r0, [r7, #20]
 8016596:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 8016598:	68bb      	ldr	r3, [r7, #8]
 801659a:	041a      	lsls	r2, r3, #16
 801659c:	68f9      	ldr	r1, [r7, #12]
 801659e:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80165a2:	400b      	ands	r3, r1
 80165a4:	4313      	orrs	r3, r2
 80165a6:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80165ac:	697a      	ldr	r2, [r7, #20]
 80165ae:	b2d1      	uxtb	r1, r2
 80165b0:	687a      	ldr	r2, [r7, #4]
 80165b2:	4413      	add	r3, r2
 80165b4:	460a      	mov	r2, r1
 80165b6:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 80165b8:	687b      	ldr	r3, [r7, #4]
 80165ba:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80165bc:	687b      	ldr	r3, [r7, #4]
 80165be:	3202      	adds	r2, #2
 80165c0:	6939      	ldr	r1, [r7, #16]
 80165c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 80165c6:	687b      	ldr	r3, [r7, #4]
 80165c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80165ca:	1c5a      	adds	r2, r3, #1
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 80165d0:	687b      	ldr	r3, [r7, #4]
 80165d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80165d4:	2b04      	cmp	r3, #4
 80165d6:	d005      	beq.n	80165e4 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 80165d8:	697b      	ldr	r3, [r7, #20]
 80165da:	3301      	adds	r3, #1
 80165dc:	617b      	str	r3, [r7, #20]
 80165de:	697b      	ldr	r3, [r7, #20]
 80165e0:	2b1f      	cmp	r3, #31
 80165e2:	ddc1      	ble.n	8016568 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80165e8:	2b00      	cmp	r3, #0
 80165ea:	dd05      	ble.n	80165f8 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 80165ec:	687b      	ldr	r3, [r7, #4]
 80165ee:	689b      	ldr	r3, [r3, #8]
 80165f0:	4619      	mov	r1, r3
 80165f2:	4804      	ldr	r0, [pc, #16]	@ (8016604 <xPhyDiscover+0xb0>)
 80165f4:	f009 ffca 	bl	802058c <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 80165fc:	4618      	mov	r0, r3
 80165fe:	3718      	adds	r7, #24
 8016600:	46bd      	mov	sp, r7
 8016602:	bd80      	pop	{r7, pc}
 8016604:	08025818 	.word	0x08025818

08016608 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8016608:	b580      	push	{r7, lr}
 801660a:	b08c      	sub	sp, #48	@ 0x30
 801660c:	af00      	add	r7, sp, #0
 801660e:	6078      	str	r0, [r7, #4]
 8016610:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 8016612:	2300      	movs	r3, #0
 8016614:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016616:	2300      	movs	r3, #0
 8016618:	62bb      	str	r3, [r7, #40]	@ 0x28
 801661a:	e017      	b.n	801664c <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801661c:	687a      	ldr	r2, [r7, #4]
 801661e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016620:	4413      	add	r3, r2
 8016622:	3318      	adds	r3, #24
 8016624:	781b      	ldrb	r3, [r3, #0]
 8016626:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016628:	687b      	ldr	r3, [r7, #4]
 801662a:	681b      	ldr	r3, [r3, #0]
 801662c:	f107 0218 	add.w	r2, r7, #24
 8016630:	2100      	movs	r1, #0
 8016632:	69f8      	ldr	r0, [r7, #28]
 8016634:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8016636:	687b      	ldr	r3, [r7, #4]
 8016638:	685b      	ldr	r3, [r3, #4]
 801663a:	69ba      	ldr	r2, [r7, #24]
 801663c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8016640:	2100      	movs	r1, #0
 8016642:	69f8      	ldr	r0, [r7, #28]
 8016644:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016646:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016648:	3301      	adds	r3, #1
 801664a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801664c:	687b      	ldr	r3, [r7, #4]
 801664e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016650:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016652:	429a      	cmp	r2, r3
 8016654:	dbe2      	blt.n	801661c <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8016656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801665a:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 801665c:	f107 030c 	add.w	r3, r7, #12
 8016660:	4618      	mov	r0, r3
 8016662:	f7ed fca9 	bl	8003fb8 <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016666:	2300      	movs	r3, #0
 8016668:	62bb      	str	r3, [r7, #40]	@ 0x28
 801666a:	e01f      	b.n	80166ac <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801666c:	687a      	ldr	r2, [r7, #4]
 801666e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016670:	4413      	add	r3, r2
 8016672:	3318      	adds	r3, #24
 8016674:	781b      	ldrb	r3, [r3, #0]
 8016676:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016678:	687b      	ldr	r3, [r7, #4]
 801667a:	681b      	ldr	r3, [r3, #0]
 801667c:	f107 0218 	add.w	r2, r7, #24
 8016680:	2100      	movs	r1, #0
 8016682:	6a38      	ldr	r0, [r7, #32]
 8016684:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8016686:	69bb      	ldr	r3, [r7, #24]
 8016688:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801668c:	2b00      	cmp	r3, #0
 801668e:	d10a      	bne.n	80166a6 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8016690:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016692:	482d      	ldr	r0, [pc, #180]	@ (8016748 <xPhyReset+0x140>)
 8016694:	f009 ff7a 	bl	802058c <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 8016698:	2201      	movs	r2, #1
 801669a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801669c:	fa02 f303 	lsl.w	r3, r2, r3
 80166a0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80166a2:	4313      	orrs	r3, r2
 80166a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80166a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166a8:	3301      	adds	r3, #1
 80166aa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80166b0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80166b2:	429a      	cmp	r2, r3
 80166b4:	dbda      	blt.n	801666c <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 80166b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80166b8:	683b      	ldr	r3, [r7, #0]
 80166ba:	429a      	cmp	r2, r3
 80166bc:	d013      	beq.n	80166e6 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 80166be:	f107 0214 	add.w	r2, r7, #20
 80166c2:	f107 030c 	add.w	r3, r7, #12
 80166c6:	4611      	mov	r1, r2
 80166c8:	4618      	mov	r0, r3
 80166ca:	f7ed fcad 	bl	8004028 <xTaskCheckForTimeOut>
 80166ce:	4603      	mov	r3, r0
 80166d0:	2b00      	cmp	r3, #0
 80166d2:	d004      	beq.n	80166de <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 80166d4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80166d6:	481d      	ldr	r0, [pc, #116]	@ (801674c <xPhyReset+0x144>)
 80166d8:	f009 ff58 	bl	802058c <lUDPLoggingPrintf>
            break;
 80166dc:	e004      	b.n	80166e8 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 80166de:	2032      	movs	r0, #50	@ 0x32
 80166e0:	f7ec fef6 	bl	80034d0 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80166e4:	e7bf      	b.n	8016666 <xPhyReset+0x5e>
            break;
 80166e6:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 80166e8:	2300      	movs	r3, #0
 80166ea:	62bb      	str	r3, [r7, #40]	@ 0x28
 80166ec:	e01e      	b.n	801672c <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 80166ee:	2201      	movs	r2, #1
 80166f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80166f2:	409a      	lsls	r2, r3
 80166f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166f6:	4013      	ands	r3, r2
 80166f8:	2b00      	cmp	r3, #0
 80166fa:	d114      	bne.n	8016726 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80166fc:	687a      	ldr	r2, [r7, #4]
 80166fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016700:	4413      	add	r3, r2
 8016702:	3318      	adds	r3, #24
 8016704:	781b      	ldrb	r3, [r3, #0]
 8016706:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016708:	687b      	ldr	r3, [r7, #4]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	f107 0218 	add.w	r2, r7, #24
 8016710:	2100      	movs	r1, #0
 8016712:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016714:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8016716:	687b      	ldr	r3, [r7, #4]
 8016718:	685b      	ldr	r3, [r3, #4]
 801671a:	69ba      	ldr	r2, [r7, #24]
 801671c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8016720:	2100      	movs	r1, #0
 8016722:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016724:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016728:	3301      	adds	r3, #1
 801672a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801672c:	687b      	ldr	r3, [r7, #4]
 801672e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016730:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016732:	429a      	cmp	r2, r3
 8016734:	dbdb      	blt.n	80166ee <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016736:	2032      	movs	r0, #50	@ 0x32
 8016738:	f7ec feca 	bl	80034d0 <vTaskDelay>

    return ulDoneMask;
 801673c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 801673e:	4618      	mov	r0, r3
 8016740:	3730      	adds	r7, #48	@ 0x30
 8016742:	46bd      	mov	sp, r7
 8016744:	bd80      	pop	{r7, pc}
 8016746:	bf00      	nop
 8016748:	08025824 	.word	0x08025824
 801674c:	08025848 	.word	0x08025848

08016750 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8016750:	b580      	push	{r7, lr}
 8016752:	b088      	sub	sp, #32
 8016754:	af00      	add	r7, sp, #0
 8016756:	6078      	str	r0, [r7, #4]
 8016758:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 801675a:	687b      	ldr	r3, [r7, #4]
 801675c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801675e:	2b00      	cmp	r3, #0
 8016760:	dc05      	bgt.n	801676e <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8016762:	487c      	ldr	r0, [pc, #496]	@ (8016954 <xPhyConfigure+0x204>)
 8016764:	f009 ff12 	bl	802058c <lUDPLoggingPrintf>
        return -1;
 8016768:	f04f 33ff 	mov.w	r3, #4294967295
 801676c:	e0ed      	b.n	801694a <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 801676e:	683b      	ldr	r3, [r7, #0]
 8016770:	781b      	ldrb	r3, [r3, #0]
 8016772:	2b03      	cmp	r3, #3
 8016774:	d107      	bne.n	8016786 <xPhyConfigure+0x36>
 8016776:	683b      	ldr	r3, [r7, #0]
 8016778:	789b      	ldrb	r3, [r3, #2]
 801677a:	2b03      	cmp	r3, #3
 801677c:	d103      	bne.n	8016786 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 801677e:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8016782:	61fb      	str	r3, [r7, #28]
 8016784:	e044      	b.n	8016810 <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8016786:	2301      	movs	r3, #1
 8016788:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 801678a:	683b      	ldr	r3, [r7, #0]
 801678c:	781b      	ldrb	r3, [r3, #0]
 801678e:	2b03      	cmp	r3, #3
 8016790:	d10d      	bne.n	80167ae <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8016792:	683b      	ldr	r3, [r7, #0]
 8016794:	789b      	ldrb	r3, [r3, #2]
 8016796:	2b02      	cmp	r3, #2
 8016798:	d104      	bne.n	80167a4 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 801679a:	69fb      	ldr	r3, [r7, #28]
 801679c:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80167a0:	61fb      	str	r3, [r7, #28]
 80167a2:	e035      	b.n	8016810 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 80167a4:	69fb      	ldr	r3, [r7, #28]
 80167a6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 80167aa:	61fb      	str	r3, [r7, #28]
 80167ac:	e030      	b.n	8016810 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 80167ae:	683b      	ldr	r3, [r7, #0]
 80167b0:	789b      	ldrb	r3, [r3, #2]
 80167b2:	2b03      	cmp	r3, #3
 80167b4:	d10d      	bne.n	80167d2 <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 80167b6:	683b      	ldr	r3, [r7, #0]
 80167b8:	781b      	ldrb	r3, [r3, #0]
 80167ba:	2b01      	cmp	r3, #1
 80167bc:	d104      	bne.n	80167c8 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 80167be:	69fb      	ldr	r3, [r7, #28]
 80167c0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80167c4:	61fb      	str	r3, [r7, #28]
 80167c6:	e023      	b.n	8016810 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 80167c8:	69fb      	ldr	r3, [r7, #28]
 80167ca:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 80167ce:	61fb      	str	r3, [r7, #28]
 80167d0:	e01e      	b.n	8016810 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 80167d2:	683b      	ldr	r3, [r7, #0]
 80167d4:	781b      	ldrb	r3, [r3, #0]
 80167d6:	2b02      	cmp	r3, #2
 80167d8:	d10d      	bne.n	80167f6 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 80167da:	683b      	ldr	r3, [r7, #0]
 80167dc:	789b      	ldrb	r3, [r3, #2]
 80167de:	2b02      	cmp	r3, #2
 80167e0:	d104      	bne.n	80167ec <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 80167e2:	69fb      	ldr	r3, [r7, #28]
 80167e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80167e8:	61fb      	str	r3, [r7, #28]
 80167ea:	e011      	b.n	8016810 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 80167ec:	69fb      	ldr	r3, [r7, #28]
 80167ee:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80167f2:	61fb      	str	r3, [r7, #28]
 80167f4:	e00c      	b.n	8016810 <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 80167f6:	683b      	ldr	r3, [r7, #0]
 80167f8:	789b      	ldrb	r3, [r3, #2]
 80167fa:	2b02      	cmp	r3, #2
 80167fc:	d104      	bne.n	8016808 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 80167fe:	69fb      	ldr	r3, [r7, #28]
 8016800:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016804:	61fb      	str	r3, [r7, #28]
 8016806:	e003      	b.n	8016810 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8016808:	69fb      	ldr	r3, [r7, #28]
 801680a:	f043 0320 	orr.w	r3, r3, #32
 801680e:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016814:	2201      	movs	r2, #1
 8016816:	fa02 f303 	lsl.w	r3, r2, r3
 801681a:	3b01      	subs	r3, #1
 801681c:	4619      	mov	r1, r3
 801681e:	6878      	ldr	r0, [r7, #4]
 8016820:	f7ff fef2 	bl	8016608 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016824:	2300      	movs	r3, #0
 8016826:	61bb      	str	r3, [r7, #24]
 8016828:	e080      	b.n	801692c <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 801682a:	687a      	ldr	r2, [r7, #4]
 801682c:	69bb      	ldr	r3, [r7, #24]
 801682e:	4413      	add	r3, r2
 8016830:	3318      	adds	r3, #24
 8016832:	781b      	ldrb	r3, [r3, #0]
 8016834:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8016836:	687b      	ldr	r3, [r7, #4]
 8016838:	69ba      	ldr	r2, [r7, #24]
 801683a:	3202      	adds	r2, #2
 801683c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016840:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8016842:	687b      	ldr	r3, [r7, #4]
 8016844:	685b      	ldr	r3, [r3, #4]
 8016846:	69fa      	ldr	r2, [r7, #28]
 8016848:	2104      	movs	r1, #4
 801684a:	6978      	ldr	r0, [r7, #20]
 801684c:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 801684e:	687b      	ldr	r3, [r7, #4]
 8016850:	681b      	ldr	r3, [r3, #0]
 8016852:	f107 020c 	add.w	r2, r7, #12
 8016856:	2100      	movs	r1, #0
 8016858:	6978      	ldr	r0, [r7, #20]
 801685a:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 801685c:	68fb      	ldr	r3, [r7, #12]
 801685e:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 8016862:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801686a:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 801686c:	683b      	ldr	r3, [r7, #0]
 801686e:	781b      	ldrb	r3, [r3, #0]
 8016870:	2b02      	cmp	r3, #2
 8016872:	d003      	beq.n	801687c <xPhyConfigure+0x12c>
 8016874:	683b      	ldr	r3, [r7, #0]
 8016876:	781b      	ldrb	r3, [r3, #0]
 8016878:	2b03      	cmp	r3, #3
 801687a:	d104      	bne.n	8016886 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 801687c:	68fb      	ldr	r3, [r7, #12]
 801687e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016882:	60fb      	str	r3, [r7, #12]
 8016884:	e007      	b.n	8016896 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8016886:	683b      	ldr	r3, [r7, #0]
 8016888:	781b      	ldrb	r3, [r3, #0]
 801688a:	2b01      	cmp	r3, #1
 801688c:	d103      	bne.n	8016896 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016894:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8016896:	683b      	ldr	r3, [r7, #0]
 8016898:	789b      	ldrb	r3, [r3, #2]
 801689a:	2b02      	cmp	r3, #2
 801689c:	d003      	beq.n	80168a6 <xPhyConfigure+0x156>
 801689e:	683b      	ldr	r3, [r7, #0]
 80168a0:	789b      	ldrb	r3, [r3, #2]
 80168a2:	2b03      	cmp	r3, #3
 80168a4:	d104      	bne.n	80168b0 <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 80168a6:	68fb      	ldr	r3, [r7, #12]
 80168a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80168ac:	60fb      	str	r3, [r7, #12]
 80168ae:	e007      	b.n	80168c0 <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 80168b0:	683b      	ldr	r3, [r7, #0]
 80168b2:	789b      	ldrb	r3, [r3, #2]
 80168b4:	2b01      	cmp	r3, #1
 80168b6:	d103      	bne.n	80168c0 <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80168be:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 80168c0:	6938      	ldr	r0, [r7, #16]
 80168c2:	f7ff fe09 	bl	80164d8 <xHas_19_PHYCR>
 80168c6:	4603      	mov	r3, r0
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d026      	beq.n	801691a <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 80168cc:	687b      	ldr	r3, [r7, #4]
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	f107 0208 	add.w	r2, r7, #8
 80168d4:	2119      	movs	r1, #25
 80168d6:	6978      	ldr	r0, [r7, #20]
 80168d8:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 80168da:	68bb      	ldr	r3, [r7, #8]
 80168dc:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80168e0:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 80168e2:	683b      	ldr	r3, [r7, #0]
 80168e4:	785b      	ldrb	r3, [r3, #1]
 80168e6:	2b03      	cmp	r3, #3
 80168e8:	d104      	bne.n	80168f4 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 80168ea:	68bb      	ldr	r3, [r7, #8]
 80168ec:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80168f0:	60bb      	str	r3, [r7, #8]
 80168f2:	e00c      	b.n	801690e <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 80168f4:	683b      	ldr	r3, [r7, #0]
 80168f6:	785b      	ldrb	r3, [r3, #1]
 80168f8:	2b02      	cmp	r3, #2
 80168fa:	d104      	bne.n	8016906 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 80168fc:	68bb      	ldr	r3, [r7, #8]
 80168fe:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8016902:	60bb      	str	r3, [r7, #8]
 8016904:	e003      	b.n	801690e <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8016906:	68bb      	ldr	r3, [r7, #8]
 8016908:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 801690c:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 801690e:	687b      	ldr	r3, [r7, #4]
 8016910:	685b      	ldr	r3, [r3, #4]
 8016912:	68ba      	ldr	r2, [r7, #8]
 8016914:	2119      	movs	r1, #25
 8016916:	6978      	ldr	r0, [r7, #20]
 8016918:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 801691a:	68fb      	ldr	r3, [r7, #12]
 801691c:	461a      	mov	r2, r3
 801691e:	69f9      	ldr	r1, [r7, #28]
 8016920:	480d      	ldr	r0, [pc, #52]	@ (8016958 <xPhyConfigure+0x208>)
 8016922:	f009 fe33 	bl	802058c <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016926:	69bb      	ldr	r3, [r7, #24]
 8016928:	3301      	adds	r3, #1
 801692a:	61bb      	str	r3, [r7, #24]
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016930:	69ba      	ldr	r2, [r7, #24]
 8016932:	429a      	cmp	r2, r3
 8016934:	f6ff af79 	blt.w	801682a <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8016938:	68fb      	ldr	r3, [r7, #12]
 801693a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	69fa      	ldr	r2, [r7, #28]
 8016946:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8016948:	2300      	movs	r3, #0
}
 801694a:	4618      	mov	r0, r3
 801694c:	3720      	adds	r7, #32
 801694e:	46bd      	mov	sp, r7
 8016950:	bd80      	pop	{r7, pc}
 8016952:	bf00      	nop
 8016954:	0802587c 	.word	0x0802587c
 8016958:	080258a0 	.word	0x080258a0

0801695c <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 801695c:	b590      	push	{r4, r7, lr}
 801695e:	b095      	sub	sp, #84	@ 0x54
 8016960:	af02      	add	r7, sp, #8
 8016962:	6078      	str	r0, [r7, #4]
 8016964:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8016966:	683b      	ldr	r3, [r7, #0]
 8016968:	2b00      	cmp	r3, #0
 801696a:	d101      	bne.n	8016970 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 801696c:	2300      	movs	r3, #0
 801696e:	e18d      	b.n	8016c8c <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8016970:	2300      	movs	r3, #0
 8016972:	647b      	str	r3, [r7, #68]	@ 0x44
 8016974:	e020      	b.n	80169b8 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8016976:	683a      	ldr	r2, [r7, #0]
 8016978:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801697a:	fa22 f303 	lsr.w	r3, r2, r3
 801697e:	f003 0301 	and.w	r3, r3, #1
 8016982:	2b00      	cmp	r3, #0
 8016984:	d015      	beq.n	80169b2 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016986:	687a      	ldr	r2, [r7, #4]
 8016988:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801698a:	4413      	add	r3, r2
 801698c:	3318      	adds	r3, #24
 801698e:	781b      	ldrb	r3, [r3, #0]
 8016990:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	685b      	ldr	r3, [r3, #4]
 8016996:	687a      	ldr	r2, [r7, #4]
 8016998:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801699a:	2104      	movs	r1, #4
 801699c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801699e:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	685b      	ldr	r3, [r3, #4]
 80169a4:	687a      	ldr	r2, [r7, #4]
 80169a6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80169a8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80169ac:	2100      	movs	r1, #0
 80169ae:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80169b0:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 80169b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80169b4:	3301      	adds	r3, #1
 80169b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169bc:	461a      	mov	r2, r3
 80169be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80169c0:	4293      	cmp	r3, r2
 80169c2:	d3d8      	bcc.n	8016976 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 80169c4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80169c8:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 80169ca:	f107 0318 	add.w	r3, r7, #24
 80169ce:	4618      	mov	r0, r3
 80169d0:	f7ed faf2 	bl	8003fb8 <vTaskSetTimeOutState>
    ulDoneMask = 0;
 80169d4:	2300      	movs	r3, #0
 80169d6:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 80169d8:	2301      	movs	r3, #1
 80169da:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80169dc:	2300      	movs	r3, #0
 80169de:	647b      	str	r3, [r7, #68]	@ 0x44
 80169e0:	e025      	b.n	8016a2e <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 80169e2:	683a      	ldr	r2, [r7, #0]
 80169e4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80169e6:	4013      	ands	r3, r2
 80169e8:	2b00      	cmp	r3, #0
 80169ea:	d01a      	beq.n	8016a22 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 80169ec:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80169ee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80169f0:	4013      	ands	r3, r2
 80169f2:	2b00      	cmp	r3, #0
 80169f4:	d115      	bne.n	8016a22 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 80169f6:	687a      	ldr	r2, [r7, #4]
 80169f8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80169fa:	4413      	add	r3, r2
 80169fc:	3318      	adds	r3, #24
 80169fe:	781b      	ldrb	r3, [r3, #0]
 8016a00:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8016a02:	687b      	ldr	r3, [r7, #4]
 8016a04:	681b      	ldr	r3, [r3, #0]
 8016a06:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8016a0a:	2101      	movs	r1, #1
 8016a0c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016a0e:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8016a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a12:	f003 0320 	and.w	r3, r3, #32
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d003      	beq.n	8016a22 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 8016a1a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016a1c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016a1e:	4313      	orrs	r3, r2
 8016a20:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016a22:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a24:	3301      	adds	r3, #1
 8016a26:	647b      	str	r3, [r7, #68]	@ 0x44
 8016a28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016a2a:	005b      	lsls	r3, r3, #1
 8016a2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016a2e:	687b      	ldr	r3, [r7, #4]
 8016a30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a32:	461a      	mov	r2, r3
 8016a34:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a36:	4293      	cmp	r3, r2
 8016a38:	d3d3      	bcc.n	80169e2 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 8016a3a:	683a      	ldr	r2, [r7, #0]
 8016a3c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016a3e:	429a      	cmp	r2, r3
 8016a40:	d013      	beq.n	8016a6a <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8016a42:	f107 0220 	add.w	r2, r7, #32
 8016a46:	f107 0318 	add.w	r3, r7, #24
 8016a4a:	4611      	mov	r1, r2
 8016a4c:	4618      	mov	r0, r3
 8016a4e:	f7ed faeb 	bl	8004028 <xTaskCheckForTimeOut>
 8016a52:	4603      	mov	r3, r0
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d004      	beq.n	8016a62 <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8016a58:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016a5a:	488e      	ldr	r0, [pc, #568]	@ (8016c94 <xPhyStartAutoNegotiation+0x338>)
 8016a5c:	f009 fd96 	bl	802058c <lUDPLoggingPrintf>
            break;
 8016a60:	e004      	b.n	8016a6c <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016a62:	2032      	movs	r0, #50	@ 0x32
 8016a64:	f7ec fd34 	bl	80034d0 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8016a68:	e7b6      	b.n	80169d8 <xPhyStartAutoNegotiation+0x7c>
            break;
 8016a6a:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 8016a6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	f000 810b 	beq.w	8016c8a <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 8016a74:	2301      	movs	r3, #1
 8016a76:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8016a78:	687b      	ldr	r3, [r7, #4]
 8016a7a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016a7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016a7e:	43db      	mvns	r3, r3
 8016a80:	401a      	ands	r2, r3
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016a86:	2300      	movs	r3, #0
 8016a88:	647b      	str	r3, [r7, #68]	@ 0x44
 8016a8a:	e0f7      	b.n	8016c7c <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016a8c:	687a      	ldr	r2, [r7, #4]
 8016a8e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016a90:	4413      	add	r3, r2
 8016a92:	3318      	adds	r3, #24
 8016a94:	781b      	ldrb	r3, [r3, #0]
 8016a96:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8016a98:	687b      	ldr	r3, [r7, #4]
 8016a9a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016a9c:	3202      	adds	r2, #2
 8016a9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016aa2:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8016aa4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016aa8:	4013      	ands	r3, r2
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	f000 80df 	beq.w	8016c6e <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8016ab0:	687b      	ldr	r3, [r7, #4]
 8016ab2:	685b      	ldr	r3, [r3, #4]
 8016ab4:	687a      	ldr	r2, [r7, #4]
 8016ab6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8016ab8:	2100      	movs	r1, #0
 8016aba:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016abc:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8016abe:	687b      	ldr	r3, [r7, #4]
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8016ac6:	2101      	movs	r1, #1
 8016ac8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016aca:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 8016acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ace:	f003 0304 	and.w	r3, r3, #4
 8016ad2:	2b00      	cmp	r3, #0
 8016ad4:	d005      	beq.n	8016ae2 <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8016ad6:	687b      	ldr	r3, [r7, #4]
 8016ad8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016ada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016adc:	431a      	orrs	r2, r3
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8016ae2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ae4:	4a6c      	ldr	r2, [pc, #432]	@ (8016c98 <xPhyStartAutoNegotiation+0x33c>)
 8016ae6:	4293      	cmp	r3, r2
 8016ae8:	d130      	bne.n	8016b4c <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	681b      	ldr	r3, [r3, #0]
 8016aee:	f107 0214 	add.w	r2, r7, #20
 8016af2:	211e      	movs	r1, #30
 8016af4:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016af6:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 8016af8:	697b      	ldr	r3, [r7, #20]
 8016afa:	f003 0307 	and.w	r3, r3, #7
 8016afe:	3b01      	subs	r3, #1
 8016b00:	2b05      	cmp	r3, #5
 8016b02:	d814      	bhi.n	8016b2e <xPhyStartAutoNegotiation+0x1d2>
 8016b04:	a201      	add	r2, pc, #4	@ (adr r2, 8016b0c <xPhyStartAutoNegotiation+0x1b0>)
 8016b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b0a:	bf00      	nop
 8016b0c:	08016b25 	.word	0x08016b25
 8016b10:	08016b2f 	.word	0x08016b2f
 8016b14:	08016b2f 	.word	0x08016b2f
 8016b18:	08016b2f 	.word	0x08016b2f
 8016b1c:	08016b25 	.word	0x08016b25
 8016b20:	08016b2f 	.word	0x08016b2f
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8016b24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b26:	f043 0302 	orr.w	r3, r3, #2
 8016b2a:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8016b2c:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 8016b2e:	697b      	ldr	r3, [r7, #20]
 8016b30:	f003 0307 	and.w	r3, r3, #7
 8016b34:	2b02      	cmp	r3, #2
 8016b36:	d801      	bhi.n	8016b3c <xPhyStartAutoNegotiation+0x1e0>
 8016b38:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 8016b3a:	e05b      	b.n	8016bf4 <xPhyStartAutoNegotiation+0x298>
 8016b3c:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 8016b3e:	2b01      	cmp	r3, #1
 8016b40:	d858      	bhi.n	8016bf4 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8016b42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b44:	f043 0304 	orr.w	r3, r3, #4
 8016b48:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8016b4a:	e053      	b.n	8016bf4 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 8016b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016b4e:	4a53      	ldr	r2, [pc, #332]	@ (8016c9c <xPhyStartAutoNegotiation+0x340>)
 8016b50:	4293      	cmp	r3, r2
 8016b52:	d126      	bne.n	8016ba2 <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 8016b54:	2300      	movs	r3, #0
 8016b56:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 8016b58:	2300      	movs	r3, #0
 8016b5a:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8016b5c:	687b      	ldr	r3, [r7, #4]
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	f107 0210 	add.w	r2, r7, #16
 8016b64:	211f      	movs	r1, #31
 8016b66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016b68:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 8016b6a:	693b      	ldr	r3, [r7, #16]
 8016b6c:	0a1b      	lsrs	r3, r3, #8
 8016b6e:	f003 0307 	and.w	r3, r3, #7
 8016b72:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8016b74:	2300      	movs	r3, #0
 8016b76:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8016b78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b7a:	2b02      	cmp	r3, #2
 8016b7c:	d002      	beq.n	8016b84 <xPhyStartAutoNegotiation+0x228>
 8016b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b80:	2b05      	cmp	r3, #5
 8016b82:	d103      	bne.n	8016b8c <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8016b84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b86:	f043 0302 	orr.w	r3, r3, #2
 8016b8a:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 8016b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b8e:	2b05      	cmp	r3, #5
 8016b90:	d002      	beq.n	8016b98 <xPhyStartAutoNegotiation+0x23c>
 8016b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016b94:	2b06      	cmp	r3, #6
 8016b96:	d12d      	bne.n	8016bf4 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8016b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b9a:	f043 0304 	orr.w	r3, r3, #4
 8016b9e:	627b      	str	r3, [r7, #36]	@ 0x24
 8016ba0:	e028      	b.n	8016bf4 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8016ba2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016ba4:	f7ff fc66 	bl	8016474 <xHas_1F_PHYSPCS>
 8016ba8:	4603      	mov	r3, r0
 8016baa:	2b00      	cmp	r3, #0
 8016bac:	d01b      	beq.n	8016be6 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8016bae:	687b      	ldr	r3, [r7, #4]
 8016bb0:	681b      	ldr	r3, [r3, #0]
 8016bb2:	f107 020c 	add.w	r2, r7, #12
 8016bb6:	211f      	movs	r1, #31
 8016bb8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016bba:	4798      	blx	r3
                ulRegValue = 0;
 8016bbc:	2300      	movs	r3, #0
 8016bbe:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8016bc0:	68fb      	ldr	r3, [r7, #12]
 8016bc2:	f003 0310 	and.w	r3, r3, #16
 8016bc6:	2b00      	cmp	r3, #0
 8016bc8:	d003      	beq.n	8016bd2 <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8016bca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bcc:	f043 0304 	orr.w	r3, r3, #4
 8016bd0:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8016bd2:	68fb      	ldr	r3, [r7, #12]
 8016bd4:	f003 030c 	and.w	r3, r3, #12
 8016bd8:	2b04      	cmp	r3, #4
 8016bda:	d10b      	bne.n	8016bf4 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8016bdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bde:	f043 0302 	orr.w	r3, r3, #2
 8016be2:	627b      	str	r3, [r7, #36]	@ 0x24
 8016be4:	e006      	b.n	8016bf4 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	681b      	ldr	r3, [r3, #0]
 8016bea:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8016bee:	2110      	movs	r1, #16
 8016bf0:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016bf2:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 8016bf4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8016bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bf8:	f003 0304 	and.w	r3, r3, #4
 8016bfc:	2b00      	cmp	r3, #0
 8016bfe:	d001      	beq.n	8016c04 <xPhyStartAutoNegotiation+0x2a8>
 8016c00:	4827      	ldr	r0, [pc, #156]	@ (8016ca0 <xPhyStartAutoNegotiation+0x344>)
 8016c02:	e000      	b.n	8016c06 <xPhyStartAutoNegotiation+0x2aa>
 8016c04:	4827      	ldr	r0, [pc, #156]	@ (8016ca4 <xPhyStartAutoNegotiation+0x348>)
 8016c06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c08:	f003 0302 	and.w	r3, r3, #2
 8016c0c:	2b00      	cmp	r3, #0
 8016c0e:	d001      	beq.n	8016c14 <xPhyStartAutoNegotiation+0x2b8>
 8016c10:	240a      	movs	r4, #10
 8016c12:	e000      	b.n	8016c16 <xPhyStartAutoNegotiation+0x2ba>
 8016c14:	2464      	movs	r4, #100	@ 0x64
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016c1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c1c:	4013      	ands	r3, r2
 8016c1e:	2b00      	cmp	r3, #0
 8016c20:	d001      	beq.n	8016c26 <xPhyStartAutoNegotiation+0x2ca>
 8016c22:	4b21      	ldr	r3, [pc, #132]	@ (8016ca8 <xPhyStartAutoNegotiation+0x34c>)
 8016c24:	e000      	b.n	8016c28 <xPhyStartAutoNegotiation+0x2cc>
 8016c26:	4b21      	ldr	r3, [pc, #132]	@ (8016cac <xPhyStartAutoNegotiation+0x350>)
 8016c28:	9300      	str	r3, [sp, #0]
 8016c2a:	4623      	mov	r3, r4
 8016c2c:	4602      	mov	r2, r0
 8016c2e:	4820      	ldr	r0, [pc, #128]	@ (8016cb0 <xPhyStartAutoNegotiation+0x354>)
 8016c30:	f009 fcac 	bl	802058c <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8016c34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c36:	f003 0304 	and.w	r3, r3, #4
 8016c3a:	2b00      	cmp	r3, #0
 8016c3c:	d004      	beq.n	8016c48 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 8016c3e:	687b      	ldr	r3, [r7, #4]
 8016c40:	2202      	movs	r2, #2
 8016c42:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8016c46:	e003      	b.n	8016c50 <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	2201      	movs	r2, #1
 8016c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8016c50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016c52:	f003 0302 	and.w	r3, r3, #2
 8016c56:	2b00      	cmp	r3, #0
 8016c58:	d004      	beq.n	8016c64 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 8016c5a:	687b      	ldr	r3, [r7, #4]
 8016c5c:	2201      	movs	r2, #1
 8016c5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016c62:	e005      	b.n	8016c70 <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	2202      	movs	r2, #2
 8016c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8016c6c:	e000      	b.n	8016c70 <xPhyStartAutoNegotiation+0x314>
                continue;
 8016c6e:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016c70:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c72:	3301      	adds	r3, #1
 8016c74:	647b      	str	r3, [r7, #68]	@ 0x44
 8016c76:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016c78:	005b      	lsls	r3, r3, #1
 8016c7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016c7c:	687b      	ldr	r3, [r7, #4]
 8016c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c80:	461a      	mov	r2, r3
 8016c82:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016c84:	4293      	cmp	r3, r2
 8016c86:	f4ff af01 	bcc.w	8016a8c <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 8016c8a:	2300      	movs	r3, #0
}
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	374c      	adds	r7, #76	@ 0x4c
 8016c90:	46bd      	mov	sp, r7
 8016c92:	bd90      	pop	{r4, r7, pc}
 8016c94:	080258c4 	.word	0x080258c4
 8016c98:	00221560 	.word	0x00221560
 8016c9c:	00221550 	.word	0x00221550
 8016ca0:	08025910 	.word	0x08025910
 8016ca4:	08025918 	.word	0x08025918
 8016ca8:	08025920 	.word	0x08025920
 8016cac:	08025928 	.word	0x08025928
 8016cb0:	0802592c 	.word	0x0802592c

08016cb4 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 8016cb4:	b580      	push	{r7, lr}
 8016cb6:	b088      	sub	sp, #32
 8016cb8:	af00      	add	r7, sp, #0
 8016cba:	6078      	str	r0, [r7, #4]
 8016cbc:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 8016cbe:	2301      	movs	r3, #1
 8016cc0:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 8016cc2:	2300      	movs	r3, #0
 8016cc4:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 8016cc6:	683b      	ldr	r3, [r7, #0]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	dd2b      	ble.n	8016d24 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8016ccc:	687b      	ldr	r3, [r7, #4]
 8016cce:	331c      	adds	r3, #28
 8016cd0:	4618      	mov	r0, r3
 8016cd2:	f7ed f971 	bl	8003fb8 <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8016cd6:	687b      	ldr	r3, [r7, #4]
 8016cd8:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8016cdc:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016cde:	2300      	movs	r3, #0
 8016ce0:	61bb      	str	r3, [r7, #24]
 8016ce2:	e019      	b.n	8016d18 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016ce8:	69fb      	ldr	r3, [r7, #28]
 8016cea:	4013      	ands	r3, r2
 8016cec:	2b00      	cmp	r3, #0
 8016cee:	d10d      	bne.n	8016d0c <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8016cf0:	687b      	ldr	r3, [r7, #4]
 8016cf2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016cf4:	69fb      	ldr	r3, [r7, #28]
 8016cf6:	431a      	orrs	r2, r3
 8016cf8:	687b      	ldr	r3, [r7, #4]
 8016cfa:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d00:	4619      	mov	r1, r3
 8016d02:	4842      	ldr	r0, [pc, #264]	@ (8016e0c <xPhyCheckLinkStatus+0x158>)
 8016d04:	f009 fc42 	bl	802058c <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 8016d08:	2301      	movs	r3, #1
 8016d0a:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016d0c:	69bb      	ldr	r3, [r7, #24]
 8016d0e:	3301      	adds	r3, #1
 8016d10:	61bb      	str	r3, [r7, #24]
 8016d12:	69fb      	ldr	r3, [r7, #28]
 8016d14:	005b      	lsls	r3, r3, #1
 8016d16:	61fb      	str	r3, [r7, #28]
 8016d18:	687b      	ldr	r3, [r7, #4]
 8016d1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d1c:	69ba      	ldr	r2, [r7, #24]
 8016d1e:	429a      	cmp	r2, r3
 8016d20:	dbe0      	blt.n	8016ce4 <xPhyCheckLinkStatus+0x30>
 8016d22:	e06e      	b.n	8016e02 <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8016d24:	687b      	ldr	r3, [r7, #4]
 8016d26:	f103 021c 	add.w	r2, r3, #28
 8016d2a:	687b      	ldr	r3, [r7, #4]
 8016d2c:	3324      	adds	r3, #36	@ 0x24
 8016d2e:	4619      	mov	r1, r3
 8016d30:	4610      	mov	r0, r2
 8016d32:	f7ed f979 	bl	8004028 <xTaskCheckForTimeOut>
 8016d36:	4603      	mov	r3, r0
 8016d38:	2b00      	cmp	r3, #0
 8016d3a:	d062      	beq.n	8016e02 <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016d3c:	2300      	movs	r3, #0
 8016d3e:	61bb      	str	r3, [r7, #24]
 8016d40:	e045      	b.n	8016dce <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016d42:	687a      	ldr	r2, [r7, #4]
 8016d44:	69bb      	ldr	r3, [r7, #24]
 8016d46:	4413      	add	r3, r2
 8016d48:	3318      	adds	r3, #24
 8016d4a:	781b      	ldrb	r3, [r3, #0]
 8016d4c:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	681b      	ldr	r3, [r3, #0]
 8016d52:	f107 020c 	add.w	r2, r7, #12
 8016d56:	2101      	movs	r1, #1
 8016d58:	6938      	ldr	r0, [r7, #16]
 8016d5a:	4798      	blx	r3
 8016d5c:	4603      	mov	r3, r0
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	d12f      	bne.n	8016dc2 <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8016d62:	687b      	ldr	r3, [r7, #4]
 8016d64:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016d66:	69fb      	ldr	r3, [r7, #28]
 8016d68:	4013      	ands	r3, r2
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	bf14      	ite	ne
 8016d6e:	2301      	movne	r3, #1
 8016d70:	2300      	moveq	r3, #0
 8016d72:	b2da      	uxtb	r2, r3
 8016d74:	68fb      	ldr	r3, [r7, #12]
 8016d76:	f003 0304 	and.w	r3, r3, #4
 8016d7a:	2b00      	cmp	r3, #0
 8016d7c:	bf14      	ite	ne
 8016d7e:	2301      	movne	r3, #1
 8016d80:	2300      	moveq	r3, #0
 8016d82:	b2db      	uxtb	r3, r3
 8016d84:	4053      	eors	r3, r2
 8016d86:	b2db      	uxtb	r3, r3
 8016d88:	2b00      	cmp	r3, #0
 8016d8a:	d01a      	beq.n	8016dc2 <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 8016d8c:	68fb      	ldr	r3, [r7, #12]
 8016d8e:	f003 0304 	and.w	r3, r3, #4
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d006      	beq.n	8016da4 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8016d96:	687b      	ldr	r3, [r7, #4]
 8016d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016d9a:	69fb      	ldr	r3, [r7, #28]
 8016d9c:	431a      	orrs	r2, r3
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	635a      	str	r2, [r3, #52]	@ 0x34
 8016da2:	e006      	b.n	8016db2 <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 8016da4:	687b      	ldr	r3, [r7, #4]
 8016da6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016da8:	69fb      	ldr	r3, [r7, #28]
 8016daa:	43db      	mvns	r3, r3
 8016dac:	401a      	ands	r2, r3
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 8016db2:	687b      	ldr	r3, [r7, #4]
 8016db4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016db6:	4619      	mov	r1, r3
 8016db8:	4814      	ldr	r0, [pc, #80]	@ (8016e0c <xPhyCheckLinkStatus+0x158>)
 8016dba:	f009 fbe7 	bl	802058c <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 8016dbe:	2301      	movs	r3, #1
 8016dc0:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016dc2:	69bb      	ldr	r3, [r7, #24]
 8016dc4:	3301      	adds	r3, #1
 8016dc6:	61bb      	str	r3, [r7, #24]
 8016dc8:	69fb      	ldr	r3, [r7, #28]
 8016dca:	005b      	lsls	r3, r3, #1
 8016dcc:	61fb      	str	r3, [r7, #28]
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016dd2:	69ba      	ldr	r2, [r7, #24]
 8016dd4:	429a      	cmp	r2, r3
 8016dd6:	dbb4      	blt.n	8016d42 <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 8016dd8:	687b      	ldr	r3, [r7, #4]
 8016dda:	331c      	adds	r3, #28
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f7ed f8eb 	bl	8003fb8 <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016de6:	69fb      	ldr	r3, [r7, #28]
 8016de8:	085b      	lsrs	r3, r3, #1
 8016dea:	4013      	ands	r3, r2
 8016dec:	2b00      	cmp	r3, #0
 8016dee:	d004      	beq.n	8016dfa <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8016df6:	625a      	str	r2, [r3, #36]	@ 0x24
 8016df8:	e003      	b.n	8016e02 <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8016e00:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 8016e02:	697b      	ldr	r3, [r7, #20]
}
 8016e04:	4618      	mov	r0, r3
 8016e06:	3720      	adds	r7, #32
 8016e08:	46bd      	mov	sp, r7
 8016e0a:	bd80      	pop	{r7, pc}
 8016e0c:	08025960 	.word	0x08025960

08016e10 <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 8016e10:	b480      	push	{r7}
 8016e12:	b085      	sub	sp, #20
 8016e14:	af00      	add	r7, sp, #0
 8016e16:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 8016e18:	2300      	movs	r3, #0
 8016e1a:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 8016e1c:	2300      	movs	r3, #0
 8016e1e:	60bb      	str	r3, [r7, #8]
 8016e20:	e013      	b.n	8016e4a <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 8016e22:	2201      	movs	r2, #1
 8016e24:	68bb      	ldr	r3, [r7, #8]
 8016e26:	fa02 f303 	lsl.w	r3, r2, r3
 8016e2a:	461a      	mov	r2, r3
 8016e2c:	687b      	ldr	r3, [r7, #4]
 8016e2e:	4013      	ands	r3, r2
 8016e30:	2b00      	cmp	r3, #0
 8016e32:	d007      	beq.n	8016e44 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 8016e34:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8016e38:	68bb      	ldr	r3, [r7, #8]
 8016e3a:	fa22 f303 	lsr.w	r3, r2, r3
 8016e3e:	68fa      	ldr	r2, [r7, #12]
 8016e40:	4313      	orrs	r3, r2
 8016e42:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 8016e44:	68bb      	ldr	r3, [r7, #8]
 8016e46:	3301      	adds	r3, #1
 8016e48:	60bb      	str	r3, [r7, #8]
 8016e4a:	68bb      	ldr	r3, [r7, #8]
 8016e4c:	2b1f      	cmp	r3, #31
 8016e4e:	dde8      	ble.n	8016e22 <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 8016e50:	68fb      	ldr	r3, [r7, #12]
}
 8016e52:	4618      	mov	r0, r3
 8016e54:	3714      	adds	r7, #20
 8016e56:	46bd      	mov	sp, r7
 8016e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e5c:	4770      	bx	lr
	...

08016e60 <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 8016e60:	b590      	push	{r4, r7, lr}
 8016e62:	b087      	sub	sp, #28
 8016e64:	af00      	add	r7, sp, #0
 8016e66:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 8016e68:	f04f 33ff 	mov.w	r3, #4294967295
 8016e6c:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8016e6e:	2300      	movs	r3, #0
 8016e70:	613b      	str	r3, [r7, #16]
 8016e72:	e024      	b.n	8016ebe <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 8016e74:	693b      	ldr	r3, [r7, #16]
 8016e76:	687a      	ldr	r2, [r7, #4]
 8016e78:	4413      	add	r3, r2
 8016e7a:	781b      	ldrb	r3, [r3, #0]
 8016e7c:	461a      	mov	r2, r3
 8016e7e:	68fb      	ldr	r3, [r7, #12]
 8016e80:	4053      	eors	r3, r2
 8016e82:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8016e84:	2300      	movs	r3, #0
 8016e86:	617b      	str	r3, [r7, #20]
 8016e88:	e013      	b.n	8016eb2 <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 8016e8a:	68fb      	ldr	r3, [r7, #12]
 8016e8c:	f003 0301 	and.w	r3, r3, #1
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d008      	beq.n	8016ea6 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 8016e94:	68fb      	ldr	r3, [r7, #12]
 8016e96:	085c      	lsrs	r4, r3, #1
 8016e98:	480e      	ldr	r0, [pc, #56]	@ (8016ed4 <prvComputeCRC32_MAC+0x74>)
 8016e9a:	f7ff ffb9 	bl	8016e10 <prvRevBits32>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	4063      	eors	r3, r4
 8016ea2:	60fb      	str	r3, [r7, #12]
 8016ea4:	e002      	b.n	8016eac <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 8016ea6:	68fb      	ldr	r3, [r7, #12]
 8016ea8:	085b      	lsrs	r3, r3, #1
 8016eaa:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8016eac:	697b      	ldr	r3, [r7, #20]
 8016eae:	3301      	adds	r3, #1
 8016eb0:	617b      	str	r3, [r7, #20]
 8016eb2:	697b      	ldr	r3, [r7, #20]
 8016eb4:	2b07      	cmp	r3, #7
 8016eb6:	dde8      	ble.n	8016e8a <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 8016eb8:	693b      	ldr	r3, [r7, #16]
 8016eba:	3301      	adds	r3, #1
 8016ebc:	613b      	str	r3, [r7, #16]
 8016ebe:	693b      	ldr	r3, [r7, #16]
 8016ec0:	2b05      	cmp	r3, #5
 8016ec2:	ddd7      	ble.n	8016e74 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 8016ec4:	68fb      	ldr	r3, [r7, #12]
 8016ec6:	43db      	mvns	r3, r3
 8016ec8:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 8016eca:	68fb      	ldr	r3, [r7, #12]
}
 8016ecc:	4618      	mov	r0, r3
 8016ece:	371c      	adds	r7, #28
 8016ed0:	46bd      	mov	sp, r7
 8016ed2:	bd90      	pop	{r4, r7, pc}
 8016ed4:	04c11db7 	.word	0x04c11db7

08016ed8 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 8016ed8:	b580      	push	{r7, lr}
 8016eda:	b084      	sub	sp, #16
 8016edc:	af00      	add	r7, sp, #0
 8016ede:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 8016ee0:	6878      	ldr	r0, [r7, #4]
 8016ee2:	f7ff ffbd 	bl	8016e60 <prvComputeCRC32_MAC>
 8016ee6:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 8016ee8:	68f8      	ldr	r0, [r7, #12]
 8016eea:	f7ff ff91 	bl	8016e10 <prvRevBits32>
 8016eee:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 8016ef0:	68bb      	ldr	r3, [r7, #8]
 8016ef2:	0e9b      	lsrs	r3, r3, #26
}
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	3710      	adds	r7, #16
 8016ef8:	46bd      	mov	sp, r7
 8016efa:	bd80      	pop	{r7, pc}

08016efc <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 8016efc:	b580      	push	{r7, lr}
 8016efe:	b084      	sub	sp, #16
 8016f00:	af00      	add	r7, sp, #0
 8016f02:	6078      	str	r0, [r7, #4]
 8016f04:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 8016f06:	6838      	ldr	r0, [r7, #0]
 8016f08:	f7ff ffe6 	bl	8016ed8 <prvComputeEthernet_MACHash>
 8016f0c:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 8016f0e:	68fb      	ldr	r3, [r7, #12]
 8016f10:	2b1f      	cmp	r3, #31
 8016f12:	d80c      	bhi.n	8016f2e <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	681b      	ldr	r3, [r3, #0]
 8016f18:	691a      	ldr	r2, [r3, #16]
 8016f1a:	2101      	movs	r1, #1
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	fa01 f303 	lsl.w	r3, r1, r3
 8016f22:	4619      	mov	r1, r3
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	681b      	ldr	r3, [r3, #0]
 8016f28:	430a      	orrs	r2, r1
 8016f2a:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 8016f2c:	e00d      	b.n	8016f4a <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 8016f2e:	687b      	ldr	r3, [r7, #4]
 8016f30:	681b      	ldr	r3, [r3, #0]
 8016f32:	695a      	ldr	r2, [r3, #20]
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	f003 031f 	and.w	r3, r3, #31
 8016f3a:	2101      	movs	r1, #1
 8016f3c:	fa01 f303 	lsl.w	r3, r1, r3
 8016f40:	4619      	mov	r1, r3
 8016f42:	687b      	ldr	r3, [r7, #4]
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	430a      	orrs	r2, r1
 8016f48:	615a      	str	r2, [r3, #20]
}
 8016f4a:	bf00      	nop
 8016f4c:	3710      	adds	r7, #16
 8016f4e:	46bd      	mov	sp, r7
 8016f50:	bd80      	pop	{r7, pc}

08016f52 <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 8016f52:	b580      	push	{r7, lr}
 8016f54:	b086      	sub	sp, #24
 8016f56:	af00      	add	r7, sp, #0
 8016f58:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 8016f5a:	230a      	movs	r3, #10
 8016f5c:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 8016f5e:	2300      	movs	r3, #0
 8016f60:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 8016f62:	6939      	ldr	r1, [r7, #16]
 8016f64:	6878      	ldr	r0, [r7, #4]
 8016f66:	f7ff f9bf 	bl	80162e8 <pxGetNetworkBufferWithDescriptor>
 8016f6a:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 8016f6c:	68fb      	ldr	r3, [r7, #12]
 8016f6e:	2b00      	cmp	r3, #0
 8016f70:	d002      	beq.n	8016f78 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 8016f72:	68fb      	ldr	r3, [r7, #12]
 8016f74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016f76:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 8016f78:	697b      	ldr	r3, [r7, #20]
}
 8016f7a:	4618      	mov	r0, r3
 8016f7c:	3718      	adds	r7, #24
 8016f7e:	46bd      	mov	sp, r7
 8016f80:	bd80      	pop	{r7, pc}
	...

08016f84 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 8016f84:	b580      	push	{r7, lr}
 8016f86:	b08e      	sub	sp, #56	@ 0x38
 8016f88:	af02      	add	r7, sp, #8
 8016f8a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 8016f8c:	2300      	movs	r3, #0
 8016f8e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 8016f90:	2300      	movs	r3, #0
 8016f92:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 8016f94:	4b8d      	ldr	r3, [pc, #564]	@ (80171cc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8016f96:	781b      	ldrb	r3, [r3, #0]
 8016f98:	2b00      	cmp	r3, #0
 8016f9a:	f040 8104 	bne.w	80171a6 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 8016f9e:	4a8c      	ldr	r2, [pc, #560]	@ (80171d0 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8016fa4:	6878      	ldr	r0, [r7, #4]
 8016fa6:	f7f5 fb8f 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 8016faa:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 8016fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	d104      	bne.n	8016fbc <xSTM32H_NetworkInterfaceInitialise+0x38>
 8016fb2:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 8016fb6:	4887      	ldr	r0, [pc, #540]	@ (80171d4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8016fb8:	f7ea f8ba 	bl	8001130 <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 8016fbc:	4b86      	ldr	r3, [pc, #536]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016fbe:	4a87      	ldr	r2, [pc, #540]	@ (80171dc <xSTM32H_NetworkInterfaceInitialise+0x258>)
 8016fc0:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 8016fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fc4:	33e8      	adds	r3, #232	@ 0xe8
 8016fc6:	4a84      	ldr	r2, [pc, #528]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016fc8:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8016fca:	4b83      	ldr	r3, [pc, #524]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016fcc:	2201      	movs	r2, #1
 8016fce:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 8016fd0:	4b81      	ldr	r3, [pc, #516]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016fd2:	4a83      	ldr	r2, [pc, #524]	@ (80171e0 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8016fd4:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 8016fd6:	4b80      	ldr	r3, [pc, #512]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016fd8:	4a82      	ldr	r2, [pc, #520]	@ (80171e4 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8016fda:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 8016fdc:	4b7e      	ldr	r3, [pc, #504]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016fde:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 8016fe2:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8016fe4:	2260      	movs	r2, #96	@ 0x60
 8016fe6:	2100      	movs	r1, #0
 8016fe8:	487d      	ldr	r0, [pc, #500]	@ (80171e0 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 8016fea:	f009 fdf8 	bl	8020bde <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 8016fee:	2260      	movs	r2, #96	@ 0x60
 8016ff0:	2100      	movs	r1, #0
 8016ff2:	487c      	ldr	r0, [pc, #496]	@ (80171e4 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8016ff4:	f009 fdf3 	bl	8020bde <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 8016ff8:	4877      	ldr	r0, [pc, #476]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8016ffa:	f000 fc71 	bl	80178e0 <HAL_ETH_Init>
 8016ffe:	4603      	mov	r3, r0
 8017000:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 8017004:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017008:	2b00      	cmp	r3, #0
 801700a:	f040 80c9 	bne.w	80171a0 <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 801700e:	4b72      	ldr	r3, [pc, #456]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017010:	681b      	ldr	r3, [r3, #0]
 8017012:	6899      	ldr	r1, [r3, #8]
 8017014:	4b70      	ldr	r3, [pc, #448]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017016:	681a      	ldr	r2, [r3, #0]
 8017018:	f240 4316 	movw	r3, #1046	@ 0x416
 801701c:	430b      	orrs	r3, r1
 801701e:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 8017020:	2234      	movs	r2, #52	@ 0x34
 8017022:	2100      	movs	r1, #0
 8017024:	4870      	ldr	r0, [pc, #448]	@ (80171e8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017026:	f009 fdda 	bl	8020bde <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 801702a:	4b6f      	ldr	r3, [pc, #444]	@ (80171e8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801702c:	2220      	movs	r2, #32
 801702e:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 8017030:	4b6d      	ldr	r3, [pc, #436]	@ (80171e8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017032:	681b      	ldr	r3, [r3, #0]
 8017034:	f043 0301 	orr.w	r3, r3, #1
 8017038:	4a6b      	ldr	r2, [pc, #428]	@ (80171e8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801703a:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801703c:	4b6a      	ldr	r3, [pc, #424]	@ (80171e8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801703e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8017042:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8017044:	4b68      	ldr	r3, [pc, #416]	@ (80171e8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017046:	2200      	movs	r2, #0
 8017048:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 801704a:	2104      	movs	r1, #4
 801704c:	2004      	movs	r0, #4
 801704e:	f7eb fbfd 	bl	800284c <xQueueCreateCountingSemaphore>
 8017052:	4603      	mov	r3, r0
 8017054:	4a65      	ldr	r2, [pc, #404]	@ (80171ec <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8017056:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 8017058:	4b64      	ldr	r3, [pc, #400]	@ (80171ec <xSTM32H_NetworkInterfaceInitialise+0x268>)
 801705a:	681b      	ldr	r3, [r3, #0]
 801705c:	2b00      	cmp	r3, #0
 801705e:	d104      	bne.n	801706a <xSTM32H_NetworkInterfaceInitialise+0xe6>
 8017060:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8017064:	485b      	ldr	r0, [pc, #364]	@ (80171d4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017066:	f7ea f863 	bl	8001130 <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 801706a:	2001      	movs	r0, #1
 801706c:	f7eb fbd5 	bl	800281a <xQueueCreateMutex>
 8017070:	4603      	mov	r3, r0
 8017072:	4a5f      	ldr	r2, [pc, #380]	@ (80171f0 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017074:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 8017076:	4b5e      	ldr	r3, [pc, #376]	@ (80171f0 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017078:	681b      	ldr	r3, [r3, #0]
 801707a:	2b00      	cmp	r3, #0
 801707c:	d104      	bne.n	8017088 <xSTM32H_NetworkInterfaceInitialise+0x104>
 801707e:	f240 117f 	movw	r1, #383	@ 0x17f
 8017082:	4854      	ldr	r0, [pc, #336]	@ (80171d4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017084:	f7ea f854 	bl	8001130 <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017088:	2300      	movs	r3, #0
 801708a:	627b      	str	r3, [r7, #36]	@ 0x24
 801708c:	e015      	b.n	80170ba <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 801708e:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 8017092:	f7ff ff5e 	bl	8016f52 <pucGetRXBuffer>
 8017096:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 8017098:	69fb      	ldr	r3, [r7, #28]
 801709a:	2b00      	cmp	r3, #0
 801709c:	d104      	bne.n	80170a8 <xSTM32H_NetworkInterfaceInitialise+0x124>
 801709e:	f240 1189 	movw	r1, #393	@ 0x189
 80170a2:	484c      	ldr	r0, [pc, #304]	@ (80171d4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80170a4:	f7ea f844 	bl	8001130 <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 80170a8:	2300      	movs	r3, #0
 80170aa:	69fa      	ldr	r2, [r7, #28]
 80170ac:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80170ae:	484a      	ldr	r0, [pc, #296]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80170b0:	f000 fd02 	bl	8017ab8 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 80170b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170b6:	3301      	adds	r3, #1
 80170b8:	627b      	str	r3, [r7, #36]	@ 0x24
 80170ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80170bc:	2b03      	cmp	r3, #3
 80170be:	d9e6      	bls.n	801708e <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 80170c0:	494c      	ldr	r1, [pc, #304]	@ (80171f4 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 80170c2:	4845      	ldr	r0, [pc, #276]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80170c4:	f7ff ff1a 	bl	8016efc <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 80170c8:	494b      	ldr	r1, [pc, #300]	@ (80171f8 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 80170ca:	4843      	ldr	r0, [pc, #268]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80170cc:	f7ff ff16 	bl	8016efc <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 80170d0:	e03a      	b.n	8017148 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 80170d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170d4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80170d8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80170dc:	b2db      	uxtb	r3, r3
 80170de:	2b00      	cmp	r3, #0
 80170e0:	d002      	beq.n	80170e8 <xSTM32H_NetworkInterfaceInitialise+0x164>
 80170e2:	2b01      	cmp	r3, #1
 80170e4:	d00d      	beq.n	8017102 <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 80170e6:	e028      	b.n	801713a <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 80170e8:	4b3b      	ldr	r3, [pc, #236]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80170ea:	685a      	ldr	r2, [r3, #4]
 80170ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170ee:	33e8      	adds	r3, #232	@ 0xe8
 80170f0:	429a      	cmp	r2, r3
 80170f2:	d021      	beq.n	8017138 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 80170f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80170f6:	33e8      	adds	r3, #232	@ 0xe8
 80170f8:	4619      	mov	r1, r3
 80170fa:	4837      	ldr	r0, [pc, #220]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80170fc:	f7ff fefe 	bl	8016efc <prvSetMAC_HashFilter>
                                break;
 8017100:	e01a      	b.n	8017138 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 8017102:	4a3e      	ldr	r2, [pc, #248]	@ (80171fc <xSTM32H_NetworkInterfaceInitialise+0x278>)
 8017104:	f107 0314 	add.w	r3, r7, #20
 8017108:	e892 0003 	ldmia.w	r2, {r0, r1}
 801710c:	6018      	str	r0, [r3, #0]
 801710e:	3304      	adds	r3, #4
 8017110:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 8017112:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017114:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017118:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 801711a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801711c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8017120:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 8017122:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017124:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8017128:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 801712a:	f107 0314 	add.w	r3, r7, #20
 801712e:	4619      	mov	r1, r3
 8017130:	4829      	ldr	r0, [pc, #164]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017132:	f7ff fee3 	bl	8016efc <prvSetMAC_HashFilter>
                               break;
 8017136:	e000      	b.n	801713a <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 8017138:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 801713a:	4b25      	ldr	r3, [pc, #148]	@ (80171d0 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 801713c:	681b      	ldr	r3, [r3, #0]
 801713e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017140:	4618      	mov	r0, r3
 8017142:	f7f5 fae3 	bl	800c70c <FreeRTOS_NextEndPoint>
 8017146:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 8017148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801714a:	2b00      	cmp	r3, #0
 801714c:	d1c1      	bne.n	80170d2 <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 801714e:	4a2c      	ldr	r2, [pc, #176]	@ (8017200 <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 8017150:	f107 030c 	add.w	r3, r7, #12
 8017154:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017158:	6018      	str	r0, [r3, #0]
 801715a:	3304      	adds	r3, #4
 801715c:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 801715e:	f107 030c 	add.w	r3, r7, #12
 8017162:	4619      	mov	r1, r3
 8017164:	481c      	ldr	r0, [pc, #112]	@ (80171d8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017166:	f7ff fec9 	bl	8016efc <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 801716a:	f000 f911 	bl	8017390 <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 801716e:	2001      	movs	r0, #1
 8017170:	f000 f926 	bl	80173c0 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 8017174:	4b23      	ldr	r3, [pc, #140]	@ (8017204 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 8017176:	9301      	str	r3, [sp, #4]
 8017178:	2305      	movs	r3, #5
 801717a:	9300      	str	r3, [sp, #0]
 801717c:	2300      	movs	r3, #0
 801717e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8017182:	4921      	ldr	r1, [pc, #132]	@ (8017208 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 8017184:	4821      	ldr	r0, [pc, #132]	@ (801720c <xSTM32H_NetworkInterfaceInitialise+0x288>)
 8017186:	f7ec f863 	bl	8003250 <xTaskCreate>
 801718a:	4603      	mov	r3, r0
 801718c:	2b01      	cmp	r3, #1
 801718e:	d103      	bne.n	8017198 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 8017190:	4b0e      	ldr	r3, [pc, #56]	@ (80171cc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 8017192:	2201      	movs	r2, #1
 8017194:	701a      	strb	r2, [r3, #0]
 8017196:	e006      	b.n	80171a6 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 8017198:	4b0c      	ldr	r3, [pc, #48]	@ (80171cc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 801719a:	2202      	movs	r2, #2
 801719c:	701a      	strb	r2, [r3, #0]
 801719e:	e002      	b.n	80171a6 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 80171a0:	4b0a      	ldr	r3, [pc, #40]	@ (80171cc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80171a2:	2202      	movs	r2, #2
 80171a4:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 80171a6:	4b09      	ldr	r3, [pc, #36]	@ (80171cc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80171a8:	781b      	ldrb	r3, [r3, #0]
 80171aa:	2b01      	cmp	r3, #1
 80171ac:	d108      	bne.n	80171c0 <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 80171ae:	4b18      	ldr	r3, [pc, #96]	@ (8017210 <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 80171b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80171b2:	2b00      	cmp	r3, #0
 80171b4:	d004      	beq.n	80171c0 <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 80171b6:	2301      	movs	r3, #1
 80171b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 80171ba:	4816      	ldr	r0, [pc, #88]	@ (8017214 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 80171bc:	f009 f9e6 	bl	802058c <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 80171c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80171c2:	4618      	mov	r0, r3
 80171c4:	3730      	adds	r7, #48	@ 0x30
 80171c6:	46bd      	mov	sp, r7
 80171c8:	bd80      	pop	{r7, pc}
 80171ca:	bf00      	nop
 80171cc:	20002118 	.word	0x20002118
 80171d0:	200021cc 	.word	0x200021cc
 80171d4:	08025988 	.word	0x08025988
 80171d8:	20002124 	.word	0x20002124
 80171dc:	40028000 	.word	0x40028000
 80171e0:	24040060 	.word	0x24040060
 80171e4:	24040000 	.word	0x24040000
 80171e8:	20002198 	.word	0x20002198
 80171ec:	2000211c 	.word	0x2000211c
 80171f0:	20002120 	.word	0x20002120
 80171f4:	08025c14 	.word	0x08025c14
 80171f8:	08025c1c 	.word	0x08025c1c
 80171fc:	08025a00 	.word	0x08025a00
 8017200:	08025a08 	.word	0x08025a08
 8017204:	200021d0 	.word	0x200021d0
 8017208:	080259dc 	.word	0x080259dc
 801720c:	08017775 	.word	0x08017775
 8017210:	200021d4 	.word	0x200021d4
 8017214:	080259e8 	.word	0x080259e8

08017218 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 8017218:	b480      	push	{r7}
 801721a:	b085      	sub	sp, #20
 801721c:	af00      	add	r7, sp, #0
 801721e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 8017220:	4b07      	ldr	r3, [pc, #28]	@ (8017240 <xSTM32H_GetPhyLinkStatus+0x28>)
 8017222:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017224:	2b00      	cmp	r3, #0
 8017226:	d002      	beq.n	801722e <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 8017228:	2301      	movs	r3, #1
 801722a:	60fb      	str	r3, [r7, #12]
 801722c:	e001      	b.n	8017232 <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 801722e:	2300      	movs	r3, #0
 8017230:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8017232:	68fb      	ldr	r3, [r7, #12]
}
 8017234:	4618      	mov	r0, r3
 8017236:	3714      	adds	r7, #20
 8017238:	46bd      	mov	sp, r7
 801723a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801723e:	4770      	bx	lr
 8017240:	200021d4 	.word	0x200021d4

08017244 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 8017244:	b580      	push	{r7, lr}
 8017246:	b082      	sub	sp, #8
 8017248:	af00      	add	r7, sp, #0
 801724a:	6078      	str	r0, [r7, #4]
 801724c:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	4a10      	ldr	r2, [pc, #64]	@ (8017294 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 8017252:	2111      	movs	r1, #17
 8017254:	4810      	ldr	r0, [pc, #64]	@ (8017298 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8017256:	f00a f9c5 	bl	80215e4 <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 801725a:	2228      	movs	r2, #40	@ 0x28
 801725c:	2100      	movs	r1, #0
 801725e:	6838      	ldr	r0, [r7, #0]
 8017260:	f009 fcbd 	bl	8020bde <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 8017264:	683b      	ldr	r3, [r7, #0]
 8017266:	4a0c      	ldr	r2, [pc, #48]	@ (8017298 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8017268:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 801726a:	687a      	ldr	r2, [r7, #4]
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 8017270:	683b      	ldr	r3, [r7, #0]
 8017272:	4a0a      	ldr	r2, [pc, #40]	@ (801729c <pxSTM32H_FillInterfaceDescriptor+0x58>)
 8017274:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 8017276:	683b      	ldr	r3, [r7, #0]
 8017278:	4a09      	ldr	r2, [pc, #36]	@ (80172a0 <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 801727a:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 801727c:	683b      	ldr	r3, [r7, #0]
 801727e:	4a09      	ldr	r2, [pc, #36]	@ (80172a4 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 8017280:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 8017282:	6838      	ldr	r0, [r7, #0]
 8017284:	f7f5 f94c 	bl	800c520 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 8017288:	683b      	ldr	r3, [r7, #0]
}
 801728a:	4618      	mov	r0, r3
 801728c:	3708      	adds	r7, #8
 801728e:	46bd      	mov	sp, r7
 8017290:	bd80      	pop	{r7, pc}
 8017292:	bf00      	nop
 8017294:	08025a10 	.word	0x08025a10
 8017298:	20002214 	.word	0x20002214
 801729c:	08016f85 	.word	0x08016f85
 80172a0:	080172a9 	.word	0x080172a9
 80172a4:	08017219 	.word	0x08017219

080172a8 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 80172a8:	b580      	push	{r7, lr}
 80172aa:	b08a      	sub	sp, #40	@ 0x28
 80172ac:	af00      	add	r7, sp, #0
 80172ae:	60f8      	str	r0, [r7, #12]
 80172b0:	60b9      	str	r1, [r7, #8]
 80172b2:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 80172b4:	2300      	movs	r3, #0
 80172b6:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 80172b8:	2364      	movs	r3, #100	@ 0x64
 80172ba:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 80172bc:	68f8      	ldr	r0, [r7, #12]
 80172be:	f7ff ffab 	bl	8017218 <xSTM32H_GetPhyLinkStatus>
 80172c2:	4603      	mov	r3, r0
 80172c4:	2b01      	cmp	r3, #1
 80172c6:	d14c      	bne.n	8017362 <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 80172c8:	68bb      	ldr	r3, [r7, #8]
 80172ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80172cc:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 80172ce:	687b      	ldr	r3, [r7, #4]
 80172d0:	2b00      	cmp	r3, #0
 80172d2:	d104      	bne.n	80172de <xSTM32H_NetworkInterfaceOutput+0x36>
 80172d4:	f44f 7114 	mov.w	r1, #592	@ 0x250
 80172d8:	4827      	ldr	r0, [pc, #156]	@ (8017378 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 80172da:	f7e9 ff29 	bl	8001130 <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 80172de:	69fb      	ldr	r3, [r7, #28]
 80172e0:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 80172e2:	68bb      	ldr	r3, [r7, #8]
 80172e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 80172e6:	617b      	str	r3, [r7, #20]
 80172e8:	2300      	movs	r3, #0
 80172ea:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 80172ec:	68bb      	ldr	r3, [r7, #8]
 80172ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172f0:	4a22      	ldr	r2, [pc, #136]	@ (801737c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 80172f2:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 80172f4:	4a21      	ldr	r2, [pc, #132]	@ (801737c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 80172f6:	f107 0310 	add.w	r3, r7, #16
 80172fa:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 80172fc:	4b20      	ldr	r3, [pc, #128]	@ (8017380 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 80172fe:	681b      	ldr	r3, [r3, #0]
 8017300:	6a39      	ldr	r1, [r7, #32]
 8017302:	4618      	mov	r0, r3
 8017304:	f7eb fc84 	bl	8002c10 <xQueueSemaphoreTake>
 8017308:	4603      	mov	r3, r0
 801730a:	2b01      	cmp	r3, #1
 801730c:	d003      	beq.n	8017316 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 801730e:	481d      	ldr	r0, [pc, #116]	@ (8017384 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 8017310:	f009 f93c 	bl	802058c <lUDPLoggingPrintf>
 8017314:	e025      	b.n	8017362 <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 8017316:	f3bf 8f4f 	dsb	sy
}
 801731a:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 801731c:	4b1a      	ldr	r3, [pc, #104]	@ (8017388 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	6a39      	ldr	r1, [r7, #32]
 8017322:	4618      	mov	r0, r3
 8017324:	f7eb fc74 	bl	8002c10 <xQueueSemaphoreTake>
 8017328:	4603      	mov	r3, r0
 801732a:	2b00      	cmp	r3, #0
 801732c:	d019      	beq.n	8017362 <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 801732e:	2300      	movs	r3, #0
 8017330:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 8017332:	4912      	ldr	r1, [pc, #72]	@ (801737c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017334:	4815      	ldr	r0, [pc, #84]	@ (801738c <xSTM32H_NetworkInterfaceOutput+0xe4>)
 8017336:	f000 fcef 	bl	8017d18 <HAL_ETH_Transmit_IT>
 801733a:	4603      	mov	r3, r0
 801733c:	2b00      	cmp	r3, #0
 801733e:	d102      	bne.n	8017346 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 8017340:	2301      	movs	r3, #1
 8017342:	627b      	str	r3, [r7, #36]	@ 0x24
 8017344:	e006      	b.n	8017354 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 8017346:	4b0e      	ldr	r3, [pc, #56]	@ (8017380 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8017348:	6818      	ldr	r0, [r3, #0]
 801734a:	2300      	movs	r3, #0
 801734c:	2200      	movs	r2, #0
 801734e:	2100      	movs	r1, #0
 8017350:	f7eb faa6 	bl	80028a0 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 8017354:	4b0c      	ldr	r3, [pc, #48]	@ (8017388 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8017356:	6818      	ldr	r0, [r3, #0]
 8017358:	2300      	movs	r3, #0
 801735a:	2200      	movs	r2, #0
 801735c:	2100      	movs	r1, #0
 801735e:	f7eb fa9f 	bl	80028a0 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d002      	beq.n	801736e <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 8017368:	68b8      	ldr	r0, [r7, #8]
 801736a:	f7ff f825 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 801736e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017370:	4618      	mov	r0, r3
 8017372:	3728      	adds	r7, #40	@ 0x28
 8017374:	46bd      	mov	sp, r7
 8017376:	bd80      	pop	{r7, pc}
 8017378:	08025988 	.word	0x08025988
 801737c:	20002198 	.word	0x20002198
 8017380:	2000211c 	.word	0x2000211c
 8017384:	08025a18 	.word	0x08025a18
 8017388:	20002120 	.word	0x20002120
 801738c:	20002124 	.word	0x20002124

08017390 <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 8017390:	b580      	push	{r7, lr}
 8017392:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 8017394:	4a06      	ldr	r2, [pc, #24]	@ (80173b0 <prvMACBProbePhy+0x20>)
 8017396:	4907      	ldr	r1, [pc, #28]	@ (80173b4 <prvMACBProbePhy+0x24>)
 8017398:	4807      	ldr	r0, [pc, #28]	@ (80173b8 <prvMACBProbePhy+0x28>)
 801739a:	f7ff f8c5 	bl	8016528 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 801739e:	4806      	ldr	r0, [pc, #24]	@ (80173b8 <prvMACBProbePhy+0x28>)
 80173a0:	f7ff f8d8 	bl	8016554 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 80173a4:	4905      	ldr	r1, [pc, #20]	@ (80173bc <prvMACBProbePhy+0x2c>)
 80173a6:	4804      	ldr	r0, [pc, #16]	@ (80173b8 <prvMACBProbePhy+0x28>)
 80173a8:	f7ff f9d2 	bl	8016750 <xPhyConfigure>
}
 80173ac:	bf00      	nop
 80173ae:	bd80      	pop	{r7, pc}
 80173b0:	080175b1 	.word	0x080175b1
 80173b4:	08017579 	.word	0x08017579
 80173b8:	200021d4 	.word	0x200021d4
 80173bc:	08025d14 	.word	0x08025d14

080173c0 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b09e      	sub	sp, #120	@ 0x78
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 80173c8:	2300      	movs	r3, #0
 80173ca:	677b      	str	r3, [r7, #116]	@ 0x74
 80173cc:	2300      	movs	r3, #0
 80173ce:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 80173d0:	4b25      	ldr	r3, [pc, #148]	@ (8017468 <prvEthernetUpdateConfig+0xa8>)
 80173d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80173d4:	687a      	ldr	r2, [r7, #4]
 80173d6:	4619      	mov	r1, r3
 80173d8:	4824      	ldr	r0, [pc, #144]	@ (801746c <prvEthernetUpdateConfig+0xac>)
 80173da:	f009 f8d7 	bl	802058c <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	d103      	bne.n	80173ec <prvEthernetUpdateConfig+0x2c>
 80173e4:	4b20      	ldr	r3, [pc, #128]	@ (8017468 <prvEthernetUpdateConfig+0xa8>)
 80173e6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80173e8:	2b00      	cmp	r3, #0
 80173ea:	d035      	beq.n	8017458 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 80173ec:	4b1e      	ldr	r3, [pc, #120]	@ (8017468 <prvEthernetUpdateConfig+0xa8>)
 80173ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80173f0:	2201      	movs	r2, #1
 80173f2:	fa02 f303 	lsl.w	r3, r2, r3
 80173f6:	3b01      	subs	r3, #1
 80173f8:	4619      	mov	r1, r3
 80173fa:	481b      	ldr	r0, [pc, #108]	@ (8017468 <prvEthernetUpdateConfig+0xa8>)
 80173fc:	f7ff faae 	bl	801695c <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8017400:	4b19      	ldr	r3, [pc, #100]	@ (8017468 <prvEthernetUpdateConfig+0xa8>)
 8017402:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8017406:	2b02      	cmp	r3, #2
 8017408:	d103      	bne.n	8017412 <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 801740a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801740e:	673b      	str	r3, [r7, #112]	@ 0x70
 8017410:	e001      	b.n	8017416 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 8017412:	2300      	movs	r3, #0
 8017414:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8017416:	4b14      	ldr	r3, [pc, #80]	@ (8017468 <prvEthernetUpdateConfig+0xa8>)
 8017418:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801741c:	2b01      	cmp	r3, #1
 801741e:	d102      	bne.n	8017426 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 8017420:	2300      	movs	r3, #0
 8017422:	677b      	str	r3, [r7, #116]	@ 0x74
 8017424:	e002      	b.n	801742c <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8017426:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801742a:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 801742c:	f107 030c 	add.w	r3, r7, #12
 8017430:	4619      	mov	r1, r3
 8017432:	480f      	ldr	r0, [pc, #60]	@ (8017470 <prvEthernetUpdateConfig+0xb0>)
 8017434:	f000 ffcc 	bl	80183d0 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8017438:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801743a:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 801743c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801743e:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8017440:	f107 030c 	add.w	r3, r7, #12
 8017444:	4619      	mov	r1, r3
 8017446:	480a      	ldr	r0, [pc, #40]	@ (8017470 <prvEthernetUpdateConfig+0xb0>)
 8017448:	f001 f996 	bl	8018778 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 801744c:	2301      	movs	r3, #1
 801744e:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 8017450:	4807      	ldr	r0, [pc, #28]	@ (8017470 <prvEthernetUpdateConfig+0xb0>)
 8017452:	f000 fb64 	bl	8017b1e <HAL_ETH_Start_IT>
 8017456:	e003      	b.n	8017460 <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8017458:	4805      	ldr	r0, [pc, #20]	@ (8017470 <prvEthernetUpdateConfig+0xb0>)
 801745a:	f000 fbe5 	bl	8017c28 <HAL_ETH_Stop_IT>
    }
}
 801745e:	bf00      	nop
 8017460:	bf00      	nop
 8017462:	3778      	adds	r7, #120	@ 0x78
 8017464:	46bd      	mov	sp, r7
 8017466:	bd80      	pop	{r7, pc}
 8017468:	200021d4 	.word	0x200021d4
 801746c:	08025a50 	.word	0x08025a50
 8017470:	20002124 	.word	0x20002124

08017474 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8017474:	b580      	push	{r7, lr}
 8017476:	b08c      	sub	sp, #48	@ 0x30
 8017478:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 801747a:	2300      	movs	r3, #0
 801747c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 801747e:	2300      	movs	r3, #0
 8017480:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8017482:	f107 0308 	add.w	r3, r7, #8
 8017486:	4619      	mov	r1, r3
 8017488:	4838      	ldr	r0, [pc, #224]	@ (801756c <prvNetworkInterfaceInput+0xf8>)
 801748a:	f000 fd19 	bl	8017ec0 <HAL_ETH_GetRxData>
 801748e:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 8017490:	69fb      	ldr	r3, [r7, #28]
 8017492:	2b00      	cmp	r3, #0
 8017494:	d101      	bne.n	801749a <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 8017496:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017498:	e064      	b.n	8017564 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 801749a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801749c:	3301      	adds	r3, #1
 801749e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 80174a0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80174a4:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 80174a6:	68bb      	ldr	r3, [r7, #8]
 80174a8:	2b00      	cmp	r3, #0
 80174aa:	d004      	beq.n	80174b6 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 80174ac:	68bb      	ldr	r3, [r7, #8]
 80174ae:	4618      	mov	r0, r3
 80174b0:	f7f2 f8ab 	bl	800960a <pxPacketBuffer_to_NetworkBuffer>
 80174b4:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 80174b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174b8:	2b00      	cmp	r3, #0
 80174ba:	d102      	bne.n	80174c2 <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 80174bc:	482c      	ldr	r0, [pc, #176]	@ (8017570 <prvNetworkInterfaceInput+0xfc>)
 80174be:	f009 f865 	bl	802058c <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 80174c2:	2100      	movs	r1, #0
 80174c4:	69b8      	ldr	r0, [r7, #24]
 80174c6:	f7fe ff0f 	bl	80162e8 <pxGetNetworkBufferWithDescriptor>
 80174ca:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 80174cc:	697b      	ldr	r3, [r7, #20]
 80174ce:	2b00      	cmp	r3, #0
 80174d0:	d102      	bne.n	80174d8 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 80174d2:	2300      	movs	r3, #0
 80174d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80174d6:	e005      	b.n	80174e4 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 80174d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174da:	2b00      	cmp	r3, #0
 80174dc:	d002      	beq.n	80174e4 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 80174de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174e0:	69fa      	ldr	r2, [r7, #28]
 80174e2:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 80174e4:	2300      	movs	r3, #0
 80174e6:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 80174e8:	697b      	ldr	r3, [r7, #20]
 80174ea:	2b00      	cmp	r3, #0
 80174ec:	d002      	beq.n	80174f4 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 80174ee:	697b      	ldr	r3, [r7, #20]
 80174f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174f2:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 80174f4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80174f6:	481d      	ldr	r0, [pc, #116]	@ (801756c <prvNetworkInterfaceInput+0xf8>)
 80174f8:	f000 fd2a 	bl	8017f50 <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 80174fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174fe:	2b00      	cmp	r3, #0
 8017500:	d0bd      	beq.n	801747e <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 8017502:	2300      	movs	r3, #0
 8017504:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 8017506:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801750a:	4618      	mov	r0, r3
 801750c:	f7f1 f9e4 	bl	80088d8 <eConsiderFrameForProcessing>
 8017510:	4603      	mov	r3, r0
 8017512:	2b01      	cmp	r3, #1
 8017514:	d002      	beq.n	801751c <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 8017516:	2301      	movs	r3, #1
 8017518:	623b      	str	r3, [r7, #32]
 801751a:	e01c      	b.n	8017556 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 801751c:	2301      	movs	r3, #1
 801751e:	703b      	strb	r3, [r7, #0]
 8017520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017522:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 8017524:	4b13      	ldr	r3, [pc, #76]	@ (8017574 <prvNetworkInterfaceInput+0x100>)
 8017526:	681a      	ldr	r2, [r3, #0]
 8017528:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801752a:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 801752c:	4b11      	ldr	r3, [pc, #68]	@ (8017574 <prvNetworkInterfaceInput+0x100>)
 801752e:	681a      	ldr	r2, [r3, #0]
 8017530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017532:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017534:	4619      	mov	r1, r3
 8017536:	4610      	mov	r0, r2
 8017538:	f7f5 fb96 	bl	800cc68 <FreeRTOS_MatchingEndpoint>
 801753c:	4602      	mov	r2, r0
 801753e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017540:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8017542:	463b      	mov	r3, r7
 8017544:	2100      	movs	r1, #0
 8017546:	4618      	mov	r0, r3
 8017548:	f7f1 f972 	bl	8008830 <xSendEventStructToIPTask>
 801754c:	4603      	mov	r3, r0
 801754e:	2b00      	cmp	r3, #0
 8017550:	d101      	bne.n	8017556 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 8017552:	2301      	movs	r3, #1
 8017554:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 8017556:	6a3b      	ldr	r3, [r7, #32]
 8017558:	2b00      	cmp	r3, #0
 801755a:	d090      	beq.n	801747e <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 801755c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801755e:	f7fe ff2b 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
    {
 8017562:	e78c      	b.n	801747e <prvNetworkInterfaceInput+0xa>
}
 8017564:	4618      	mov	r0, r3
 8017566:	3730      	adds	r7, #48	@ 0x30
 8017568:	46bd      	mov	sp, r7
 801756a:	bd80      	pop	{r7, pc}
 801756c:	20002124 	.word	0x20002124
 8017570:	08025a84 	.word	0x08025a84
 8017574:	200021cc 	.word	0x200021cc

08017578 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 8017578:	b580      	push	{r7, lr}
 801757a:	b086      	sub	sp, #24
 801757c:	af00      	add	r7, sp, #0
 801757e:	60f8      	str	r0, [r7, #12]
 8017580:	60b9      	str	r1, [r7, #8]
 8017582:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8017584:	f04f 33ff 	mov.w	r3, #4294967295
 8017588:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	68ba      	ldr	r2, [r7, #8]
 801758e:	68f9      	ldr	r1, [r7, #12]
 8017590:	4806      	ldr	r0, [pc, #24]	@ (80175ac <ETH_PHY_IO_ReadReg+0x34>)
 8017592:	f000 fe75 	bl	8018280 <HAL_ETH_ReadPHYRegister>
 8017596:	4603      	mov	r3, r0
 8017598:	2b00      	cmp	r3, #0
 801759a:	d101      	bne.n	80175a0 <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 801759c:	2300      	movs	r3, #0
 801759e:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 80175a0:	697b      	ldr	r3, [r7, #20]
}
 80175a2:	4618      	mov	r0, r3
 80175a4:	3718      	adds	r7, #24
 80175a6:	46bd      	mov	sp, r7
 80175a8:	bd80      	pop	{r7, pc}
 80175aa:	bf00      	nop
 80175ac:	20002124 	.word	0x20002124

080175b0 <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 80175b0:	b580      	push	{r7, lr}
 80175b2:	b086      	sub	sp, #24
 80175b4:	af00      	add	r7, sp, #0
 80175b6:	60f8      	str	r0, [r7, #12]
 80175b8:	60b9      	str	r1, [r7, #8]
 80175ba:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 80175bc:	f04f 33ff 	mov.w	r3, #4294967295
 80175c0:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 80175c2:	687b      	ldr	r3, [r7, #4]
 80175c4:	68ba      	ldr	r2, [r7, #8]
 80175c6:	68f9      	ldr	r1, [r7, #12]
 80175c8:	4806      	ldr	r0, [pc, #24]	@ (80175e4 <ETH_PHY_IO_WriteReg+0x34>)
 80175ca:	f000 fead 	bl	8018328 <HAL_ETH_WritePHYRegister>
 80175ce:	4603      	mov	r3, r0
 80175d0:	2b00      	cmp	r3, #0
 80175d2:	d101      	bne.n	80175d8 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 80175d4:	2300      	movs	r3, #0
 80175d6:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 80175d8:	697b      	ldr	r3, [r7, #20]
}
 80175da:	4618      	mov	r0, r3
 80175dc:	3718      	adds	r7, #24
 80175de:	46bd      	mov	sp, r7
 80175e0:	bd80      	pop	{r7, pc}
 80175e2:	bf00      	nop
 80175e4:	20002124 	.word	0x20002124

080175e8 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 80175e8:	b580      	push	{r7, lr}
 80175ea:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 80175ec:	4802      	ldr	r0, [pc, #8]	@ (80175f8 <ETH_IRQHandler+0x10>)
 80175ee:	f000 fd27 	bl	8018040 <HAL_ETH_IRQHandler>
}
 80175f2:	bf00      	nop
 80175f4:	bd80      	pop	{r7, pc}
 80175f6:	bf00      	nop
 80175f8:	20002124 	.word	0x20002124

080175fc <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 80175fc:	b580      	push	{r7, lr}
 80175fe:	b084      	sub	sp, #16
 8017600:	af00      	add	r7, sp, #0
 8017602:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8017604:	2300      	movs	r3, #0
 8017606:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 8017608:	4b10      	ldr	r3, [pc, #64]	@ (801764c <prvSetFlagsAndNotify+0x50>)
 801760a:	681a      	ldr	r2, [r3, #0]
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	4313      	orrs	r3, r2
 8017610:	4a0e      	ldr	r2, [pc, #56]	@ (801764c <prvSetFlagsAndNotify+0x50>)
 8017612:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8017614:	4b0e      	ldr	r3, [pc, #56]	@ (8017650 <prvSetFlagsAndNotify+0x54>)
 8017616:	681b      	ldr	r3, [r3, #0]
 8017618:	2b00      	cmp	r3, #0
 801761a:	d012      	beq.n	8017642 <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 801761c:	4b0c      	ldr	r3, [pc, #48]	@ (8017650 <prvSetFlagsAndNotify+0x54>)
 801761e:	681b      	ldr	r3, [r3, #0]
 8017620:	f107 020c 	add.w	r2, r7, #12
 8017624:	2100      	movs	r1, #0
 8017626:	4618      	mov	r0, r3
 8017628:	f7ed fbd2 	bl	8004dd0 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 801762c:	68fb      	ldr	r3, [r7, #12]
 801762e:	2b00      	cmp	r3, #0
 8017630:	d007      	beq.n	8017642 <prvSetFlagsAndNotify+0x46>
 8017632:	4b08      	ldr	r3, [pc, #32]	@ (8017654 <prvSetFlagsAndNotify+0x58>)
 8017634:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017638:	601a      	str	r2, [r3, #0]
 801763a:	f3bf 8f4f 	dsb	sy
 801763e:	f3bf 8f6f 	isb	sy
    }
}
 8017642:	bf00      	nop
 8017644:	3710      	adds	r7, #16
 8017646:	46bd      	mov	sp, r7
 8017648:	bd80      	pop	{r7, pc}
 801764a:	bf00      	nop
 801764c:	20002114 	.word	0x20002114
 8017650:	200021d0 	.word	0x200021d0
 8017654:	e000ed04 	.word	0xe000ed04

08017658 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8017658:	b580      	push	{r7, lr}
 801765a:	b082      	sub	sp, #8
 801765c:	af00      	add	r7, sp, #0
 801765e:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8017660:	2002      	movs	r0, #2
 8017662:	f7ff ffcb 	bl	80175fc <prvSetFlagsAndNotify>
}
 8017666:	bf00      	nop
 8017668:	3708      	adds	r7, #8
 801766a:	46bd      	mov	sp, r7
 801766c:	bd80      	pop	{r7, pc}

0801766e <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 801766e:	b580      	push	{r7, lr}
 8017670:	b082      	sub	sp, #8
 8017672:	af00      	add	r7, sp, #0
 8017674:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 8017676:	2001      	movs	r0, #1
 8017678:	f7ff ffc0 	bl	80175fc <prvSetFlagsAndNotify>
}
 801767c:	bf00      	nop
 801767e:	3708      	adds	r7, #8
 8017680:	46bd      	mov	sp, r7
 8017682:	bd80      	pop	{r7, pc}

08017684 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 8017684:	b580      	push	{r7, lr}
 8017686:	b082      	sub	sp, #8
 8017688:	af00      	add	r7, sp, #0
 801768a:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 801768c:	2004      	movs	r0, #4
 801768e:	f7ff ffb5 	bl	80175fc <prvSetFlagsAndNotify>
}
 8017692:	bf00      	nop
 8017694:	3708      	adds	r7, #8
 8017696:	46bd      	mov	sp, r7
 8017698:	bd80      	pop	{r7, pc}
	...

0801769c <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 801769c:	b480      	push	{r7}
 801769e:	b085      	sub	sp, #20
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 80176a4:	4b15      	ldr	r3, [pc, #84]	@ (80176fc <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 80176a6:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 80176a8:	2300      	movs	r3, #0
 80176aa:	60bb      	str	r3, [r7, #8]
 80176ac:	e01c      	b.n	80176e8 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 80176ae:	68ba      	ldr	r2, [r7, #8]
 80176b0:	4613      	mov	r3, r2
 80176b2:	00db      	lsls	r3, r3, #3
 80176b4:	1a9b      	subs	r3, r3, r2
 80176b6:	00db      	lsls	r3, r3, #3
 80176b8:	461a      	mov	r2, r3
 80176ba:	687b      	ldr	r3, [r7, #4]
 80176bc:	4413      	add	r3, r2
 80176be:	68fa      	ldr	r2, [r7, #12]
 80176c0:	320a      	adds	r2, #10
 80176c2:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 80176c4:	68ba      	ldr	r2, [r7, #8]
 80176c6:	4613      	mov	r3, r2
 80176c8:	00db      	lsls	r3, r3, #3
 80176ca:	1a9b      	subs	r3, r3, r2
 80176cc:	00db      	lsls	r3, r3, #3
 80176ce:	461a      	mov	r2, r3
 80176d0:	687b      	ldr	r3, [r7, #4]
 80176d2:	4413      	add	r3, r2
 80176d4:	461a      	mov	r2, r3
 80176d6:	68fb      	ldr	r3, [r7, #12]
 80176d8:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 80176da:	68fb      	ldr	r3, [r7, #12]
 80176dc:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 80176e0:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 80176e2:	68bb      	ldr	r3, [r7, #8]
 80176e4:	3301      	adds	r3, #1
 80176e6:	60bb      	str	r3, [r7, #8]
 80176e8:	68bb      	ldr	r3, [r7, #8]
 80176ea:	2b3f      	cmp	r3, #63	@ 0x3f
 80176ec:	d9df      	bls.n	80176ae <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 80176ee:	bf00      	nop
 80176f0:	bf00      	nop
 80176f2:	3714      	adds	r7, #20
 80176f4:	46bd      	mov	sp, r7
 80176f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176fa:	4770      	bx	lr
 80176fc:	240400c0 	.word	0x240400c0

08017700 <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 8017700:	b580      	push	{r7, lr}
 8017702:	b082      	sub	sp, #8
 8017704:	af00      	add	r7, sp, #0
 8017706:	6078      	str	r0, [r7, #4]
 8017708:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 801770a:	f7ed fe19 	bl	8005340 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	681a      	ldr	r2, [r3, #0]
 8017712:	683b      	ldr	r3, [r7, #0]
 8017714:	43db      	mvns	r3, r3
 8017716:	401a      	ands	r2, r3
 8017718:	687b      	ldr	r3, [r7, #4]
 801771a:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 801771c:	f7ed fe3c 	bl	8005398 <vPortExitCritical>
}
 8017720:	bf00      	nop
 8017722:	3708      	adds	r7, #8
 8017724:	46bd      	mov	sp, r7
 8017726:	bd80      	pop	{r7, pc}

08017728 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 8017728:	b480      	push	{r7}
 801772a:	b087      	sub	sp, #28
 801772c:	af00      	add	r7, sp, #0
 801772e:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 8017730:	2300      	movs	r3, #0
 8017732:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8017734:	687b      	ldr	r3, [r7, #4]
 8017736:	3330      	adds	r3, #48	@ 0x30
 8017738:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 801773a:	2300      	movs	r3, #0
 801773c:	617b      	str	r3, [r7, #20]
 801773e:	e00e      	b.n	801775e <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 8017740:	68fb      	ldr	r3, [r7, #12]
 8017742:	697a      	ldr	r2, [r7, #20]
 8017744:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 8017748:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 801774a:	68bb      	ldr	r3, [r7, #8]
 801774c:	68db      	ldr	r3, [r3, #12]
 801774e:	2b00      	cmp	r3, #0
 8017750:	da02      	bge.n	8017758 <uxGetOwnCount+0x30>
            {
                xCount++;
 8017752:	693b      	ldr	r3, [r7, #16]
 8017754:	3301      	adds	r3, #1
 8017756:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8017758:	697b      	ldr	r3, [r7, #20]
 801775a:	3301      	adds	r3, #1
 801775c:	617b      	str	r3, [r7, #20]
 801775e:	697b      	ldr	r3, [r7, #20]
 8017760:	2b03      	cmp	r3, #3
 8017762:	d9ed      	bls.n	8017740 <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 8017764:	693b      	ldr	r3, [r7, #16]
    }
 8017766:	4618      	mov	r0, r3
 8017768:	371c      	adds	r7, #28
 801776a:	46bd      	mov	sp, r7
 801776c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017770:	4770      	bx	lr
	...

08017774 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8017774:	b580      	push	{r7, lr}
 8017776:	b088      	sub	sp, #32
 8017778:	af00      	add	r7, sp, #0
 801777a:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 801777c:	2364      	movs	r3, #100	@ 0x64
 801777e:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 8017780:	2300      	movs	r3, #0
 8017782:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8017784:	2304      	movs	r3, #4
 8017786:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 8017788:	2300      	movs	r3, #0
 801778a:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 801778c:	f7f2 f8d6 	bl	800993c <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8017790:	4b43      	ldr	r3, [pc, #268]	@ (80178a0 <prvEMACHandlerTask+0x12c>)
 8017792:	681b      	ldr	r3, [r3, #0]
 8017794:	4618      	mov	r0, r3
 8017796:	f7eb fb29 	bl	8002dec <uxQueueMessagesWaiting>
 801779a:	4603      	mov	r3, r0
 801779c:	f1c3 0304 	rsb	r3, r3, #4
 80177a0:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 80177a2:	69fa      	ldr	r2, [r7, #28]
 80177a4:	68fb      	ldr	r3, [r7, #12]
 80177a6:	429a      	cmp	r2, r3
 80177a8:	d206      	bcs.n	80177b8 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 80177aa:	68fb      	ldr	r3, [r7, #12]
 80177ac:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 80177ae:	2204      	movs	r2, #4
 80177b0:	69f9      	ldr	r1, [r7, #28]
 80177b2:	483c      	ldr	r0, [pc, #240]	@ (80178a4 <prvEMACHandlerTask+0x130>)
 80177b4:	f008 feea 	bl	802058c <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 80177b8:	483b      	ldr	r0, [pc, #236]	@ (80178a8 <prvEMACHandlerTask+0x134>)
 80177ba:	f7ff ffb5 	bl	8017728 <uxGetOwnCount>
 80177be:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 80177c0:	69ba      	ldr	r2, [r7, #24]
 80177c2:	68bb      	ldr	r3, [r7, #8]
 80177c4:	429a      	cmp	r2, r3
 80177c6:	d906      	bls.n	80177d6 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 80177c8:	68bb      	ldr	r3, [r7, #8]
 80177ca:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 80177cc:	2204      	movs	r2, #4
 80177ce:	69b9      	ldr	r1, [r7, #24]
 80177d0:	4836      	ldr	r0, [pc, #216]	@ (80178ac <prvEMACHandlerTask+0x138>)
 80177d2:	f008 fedb 	bl	802058c <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 80177d6:	693a      	ldr	r2, [r7, #16]
 80177d8:	2100      	movs	r1, #0
 80177da:	2000      	movs	r0, #0
 80177dc:	f7ec ff88 	bl	80046f0 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 80177e0:	4b33      	ldr	r3, [pc, #204]	@ (80178b0 <prvEMACHandlerTask+0x13c>)
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	f003 0301 	and.w	r3, r3, #1
 80177e8:	2b00      	cmp	r3, #0
 80177ea:	d006      	beq.n	80177fa <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 80177ec:	2101      	movs	r1, #1
 80177ee:	4830      	ldr	r0, [pc, #192]	@ (80178b0 <prvEMACHandlerTask+0x13c>)
 80177f0:	f7ff ff86 	bl	8017700 <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 80177f4:	f7ff fe3e 	bl	8017474 <prvNetworkInterfaceInput>
 80177f8:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 80177fa:	4b2d      	ldr	r3, [pc, #180]	@ (80178b0 <prvEMACHandlerTask+0x13c>)
 80177fc:	681b      	ldr	r3, [r3, #0]
 80177fe:	f003 0302 	and.w	r3, r3, #2
 8017802:	2b00      	cmp	r3, #0
 8017804:	d017      	beq.n	8017836 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 8017806:	2102      	movs	r1, #2
 8017808:	4829      	ldr	r0, [pc, #164]	@ (80178b0 <prvEMACHandlerTask+0x13c>)
 801780a:	f7ff ff79 	bl	8017700 <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 801780e:	4b29      	ldr	r3, [pc, #164]	@ (80178b4 <prvEMACHandlerTask+0x140>)
 8017810:	681b      	ldr	r3, [r3, #0]
 8017812:	f242 7110 	movw	r1, #10000	@ 0x2710
 8017816:	4618      	mov	r0, r3
 8017818:	f7eb f9fa 	bl	8002c10 <xQueueSemaphoreTake>
 801781c:	4603      	mov	r3, r0
 801781e:	2b00      	cmp	r3, #0
 8017820:	d009      	beq.n	8017836 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8017822:	4821      	ldr	r0, [pc, #132]	@ (80178a8 <prvEMACHandlerTask+0x134>)
 8017824:	f001 fb04 	bl	8018e30 <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 8017828:	4b22      	ldr	r3, [pc, #136]	@ (80178b4 <prvEMACHandlerTask+0x140>)
 801782a:	6818      	ldr	r0, [r3, #0]
 801782c:	2300      	movs	r3, #0
 801782e:	2200      	movs	r2, #0
 8017830:	2100      	movs	r1, #0
 8017832:	f7eb f835 	bl	80028a0 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8017836:	4b1e      	ldr	r3, [pc, #120]	@ (80178b0 <prvEMACHandlerTask+0x13c>)
 8017838:	681b      	ldr	r3, [r3, #0]
 801783a:	f003 0304 	and.w	r3, r3, #4
 801783e:	2b00      	cmp	r3, #0
 8017840:	d00f      	beq.n	8017862 <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 8017842:	2104      	movs	r1, #4
 8017844:	481a      	ldr	r0, [pc, #104]	@ (80178b0 <prvEMACHandlerTask+0x13c>)
 8017846:	f7ff ff5b 	bl	8017700 <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 801784a:	4b17      	ldr	r3, [pc, #92]	@ (80178a8 <prvEMACHandlerTask+0x134>)
 801784c:	2210      	movs	r2, #16
 801784e:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 8017850:	4815      	ldr	r0, [pc, #84]	@ (80178a8 <prvEMACHandlerTask+0x134>)
 8017852:	f000 f964 	bl	8017b1e <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 8017856:	f7ff fe0d 	bl	8017474 <prvNetworkInterfaceInput>
 801785a:	4602      	mov	r2, r0
 801785c:	697b      	ldr	r3, [r7, #20]
 801785e:	4413      	add	r3, r2
 8017860:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 8017862:	6979      	ldr	r1, [r7, #20]
 8017864:	4814      	ldr	r0, [pc, #80]	@ (80178b8 <prvEMACHandlerTask+0x144>)
 8017866:	f7ff fa25 	bl	8016cb4 <xPhyCheckLinkStatus>
 801786a:	4603      	mov	r3, r0
 801786c:	2b00      	cmp	r3, #0
 801786e:	d08b      	beq.n	8017788 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 8017870:	4b12      	ldr	r3, [pc, #72]	@ (80178bc <prvEMACHandlerTask+0x148>)
 8017872:	681b      	ldr	r3, [r3, #0]
 8017874:	4618      	mov	r0, r3
 8017876:	f7ff fccf 	bl	8017218 <xSTM32H_GetPhyLinkStatus>
 801787a:	4603      	mov	r3, r0
 801787c:	2b00      	cmp	r3, #0
 801787e:	d10b      	bne.n	8017898 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 8017880:	4809      	ldr	r0, [pc, #36]	@ (80178a8 <prvEMACHandlerTask+0x134>)
 8017882:	f000 f9d1 	bl	8017c28 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8017886:	2260      	movs	r2, #96	@ 0x60
 8017888:	2100      	movs	r1, #0
 801788a:	480d      	ldr	r0, [pc, #52]	@ (80178c0 <prvEMACHandlerTask+0x14c>)
 801788c:	f009 f9a7 	bl	8020bde <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8017890:	4805      	ldr	r0, [pc, #20]	@ (80178a8 <prvEMACHandlerTask+0x134>)
 8017892:	f001 facd 	bl	8018e30 <ETH_Clear_Tx_Descriptors>
 8017896:	e777      	b.n	8017788 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 8017898:	2000      	movs	r0, #0
 801789a:	f7ff fd91 	bl	80173c0 <prvEthernetUpdateConfig>
    {
 801789e:	e773      	b.n	8017788 <prvEMACHandlerTask+0x14>
 80178a0:	2000211c 	.word	0x2000211c
 80178a4:	08025aa8 	.word	0x08025aa8
 80178a8:	20002124 	.word	0x20002124
 80178ac:	08025ac0 	.word	0x08025ac0
 80178b0:	20002114 	.word	0x20002114
 80178b4:	20002120 	.word	0x20002120
 80178b8:	200021d4 	.word	0x200021d4
 80178bc:	200021cc 	.word	0x200021cc
 80178c0:	24040060 	.word	0x24040060

080178c4 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 80178c4:	b480      	push	{r7}
 80178c6:	b083      	sub	sp, #12
 80178c8:	af00      	add	r7, sp, #0
 80178ca:	6078      	str	r0, [r7, #4]
 80178cc:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 80178ce:	687b      	ldr	r3, [r7, #4]
 80178d0:	683a      	ldr	r2, [r7, #0]
 80178d2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 80178d4:	bf00      	nop
 80178d6:	370c      	adds	r7, #12
 80178d8:	46bd      	mov	sp, r7
 80178da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178de:	4770      	bx	lr

080178e0 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 80178e0:	b580      	push	{r7, lr}
 80178e2:	b084      	sub	sp, #16
 80178e4:	af00      	add	r7, sp, #0
 80178e6:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 80178e8:	687b      	ldr	r3, [r7, #4]
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d101      	bne.n	80178f2 <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 80178ee:	2301      	movs	r3, #1
 80178f0:	e0d4      	b.n	8017a9c <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d102      	bne.n	8017900 <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 80178fa:	6878      	ldr	r0, [r7, #4]
 80178fc:	f7e9 fe4e 	bl	800159c <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 8017900:	687b      	ldr	r3, [r7, #4]
 8017902:	2223      	movs	r2, #35	@ 0x23
 8017904:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017906:	4b67      	ldr	r3, [pc, #412]	@ (8017aa4 <HAL_ETH_Init+0x1c4>)
 8017908:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801790c:	4a65      	ldr	r2, [pc, #404]	@ (8017aa4 <HAL_ETH_Init+0x1c4>)
 801790e:	f043 0302 	orr.w	r3, r3, #2
 8017912:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8017916:	4b63      	ldr	r3, [pc, #396]	@ (8017aa4 <HAL_ETH_Init+0x1c4>)
 8017918:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801791c:	f003 0302 	and.w	r3, r3, #2
 8017920:	60bb      	str	r3, [r7, #8]
 8017922:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8017924:	687b      	ldr	r3, [r7, #4]
 8017926:	7a1b      	ldrb	r3, [r3, #8]
 8017928:	2b00      	cmp	r3, #0
 801792a:	d103      	bne.n	8017934 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 801792c:	2000      	movs	r0, #0
 801792e:	f001 fbf3 	bl	8019118 <HAL_SYSCFG_ETHInterfaceSelect>
 8017932:	e003      	b.n	801793c <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 8017934:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8017938:	f001 fbee 	bl	8019118 <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	681b      	ldr	r3, [r3, #0]
 8017940:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017944:	681b      	ldr	r3, [r3, #0]
 8017946:	687a      	ldr	r2, [r7, #4]
 8017948:	6812      	ldr	r2, [r2, #0]
 801794a:	f043 0301 	orr.w	r3, r3, #1
 801794e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017952:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 8017954:	f001 fbc8 	bl	80190e8 <HAL_GetTick>
 8017958:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801795a:	e010      	b.n	801797e <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 801795c:	f001 fbc4 	bl	80190e8 <HAL_GetTick>
 8017960:	4602      	mov	r2, r0
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	1ad3      	subs	r3, r2, r3
 8017966:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 801796a:	d908      	bls.n	801797e <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	2204      	movs	r2, #4
 8017970:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 8017972:	21e0      	movs	r1, #224	@ 0xe0
 8017974:	6878      	ldr	r0, [r7, #4]
 8017976:	f7ff ffa5 	bl	80178c4 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 801797a:	2301      	movs	r3, #1
 801797c:	e08e      	b.n	8017a9c <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 801797e:	687b      	ldr	r3, [r7, #4]
 8017980:	681b      	ldr	r3, [r3, #0]
 8017982:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017986:	681b      	ldr	r3, [r3, #0]
 8017988:	f003 0301 	and.w	r3, r3, #1
 801798c:	2b00      	cmp	r3, #0
 801798e:	d1e5      	bne.n	801795c <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 8017990:	6878      	ldr	r0, [r7, #4]
 8017992:	f001 f94b 	bl	8018c2c <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8017996:	f004 fdd7 	bl	801c548 <HAL_RCC_GetHCLKFreq>
 801799a:	4603      	mov	r3, r0
 801799c:	4a42      	ldr	r2, [pc, #264]	@ (8017aa8 <HAL_ETH_Init+0x1c8>)
 801799e:	fba2 2303 	umull	r2, r3, r2, r3
 80179a2:	0c9a      	lsrs	r2, r3, #18
 80179a4:	687b      	ldr	r3, [r7, #4]
 80179a6:	681b      	ldr	r3, [r3, #0]
 80179a8:	3a01      	subs	r2, #1
 80179aa:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 80179ae:	6878      	ldr	r0, [r7, #4]
 80179b0:	f001 f89e 	bl	8018af0 <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 80179b4:	687b      	ldr	r3, [r7, #4]
 80179b6:	681b      	ldr	r3, [r3, #0]
 80179b8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80179bc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 80179c0:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 80179c4:	687a      	ldr	r2, [r7, #4]
 80179c6:	6812      	ldr	r2, [r2, #0]
 80179c8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80179cc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80179d0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 80179d4:	687b      	ldr	r3, [r7, #4]
 80179d6:	695b      	ldr	r3, [r3, #20]
 80179d8:	f003 0303 	and.w	r3, r3, #3
 80179dc:	2b00      	cmp	r3, #0
 80179de:	d008      	beq.n	80179f2 <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80179e0:	687b      	ldr	r3, [r7, #4]
 80179e2:	2201      	movs	r2, #1
 80179e4:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 80179e6:	21e0      	movs	r1, #224	@ 0xe0
 80179e8:	6878      	ldr	r0, [r7, #4]
 80179ea:	f7ff ff6b 	bl	80178c4 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 80179ee:	2301      	movs	r3, #1
 80179f0:	e054      	b.n	8017a9c <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 80179f2:	687b      	ldr	r3, [r7, #4]
 80179f4:	681b      	ldr	r3, [r3, #0]
 80179f6:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80179fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 80179fe:	4b2b      	ldr	r3, [pc, #172]	@ (8017aac <HAL_ETH_Init+0x1cc>)
 8017a00:	4013      	ands	r3, r2
 8017a02:	687a      	ldr	r2, [r7, #4]
 8017a04:	6952      	ldr	r2, [r2, #20]
 8017a06:	0051      	lsls	r1, r2, #1
 8017a08:	687a      	ldr	r2, [r7, #4]
 8017a0a:	6812      	ldr	r2, [r2, #0]
 8017a0c:	430b      	orrs	r3, r1
 8017a0e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017a12:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 8017a16:	6878      	ldr	r0, [r7, #4]
 8017a18:	f001 f960 	bl	8018cdc <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 8017a1c:	6878      	ldr	r0, [r7, #4]
 8017a1e:	f001 f9a9 	bl	8018d74 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 8017a22:	687b      	ldr	r3, [r7, #4]
 8017a24:	685b      	ldr	r3, [r3, #4]
 8017a26:	3305      	adds	r3, #5
 8017a28:	781b      	ldrb	r3, [r3, #0]
 8017a2a:	021a      	lsls	r2, r3, #8
 8017a2c:	687b      	ldr	r3, [r7, #4]
 8017a2e:	685b      	ldr	r3, [r3, #4]
 8017a30:	3304      	adds	r3, #4
 8017a32:	781b      	ldrb	r3, [r3, #0]
 8017a34:	4619      	mov	r1, r3
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	430a      	orrs	r2, r1
 8017a3c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8017a40:	687b      	ldr	r3, [r7, #4]
 8017a42:	685b      	ldr	r3, [r3, #4]
 8017a44:	3303      	adds	r3, #3
 8017a46:	781b      	ldrb	r3, [r3, #0]
 8017a48:	061a      	lsls	r2, r3, #24
 8017a4a:	687b      	ldr	r3, [r7, #4]
 8017a4c:	685b      	ldr	r3, [r3, #4]
 8017a4e:	3302      	adds	r3, #2
 8017a50:	781b      	ldrb	r3, [r3, #0]
 8017a52:	041b      	lsls	r3, r3, #16
 8017a54:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8017a56:	687b      	ldr	r3, [r7, #4]
 8017a58:	685b      	ldr	r3, [r3, #4]
 8017a5a:	3301      	adds	r3, #1
 8017a5c:	781b      	ldrb	r3, [r3, #0]
 8017a5e:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8017a60:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	685b      	ldr	r3, [r3, #4]
 8017a66:	781b      	ldrb	r3, [r3, #0]
 8017a68:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8017a6e:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8017a70:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	2200      	movs	r2, #0
 8017a78:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	2210      	movs	r2, #16
 8017a7e:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 8017a80:	687b      	ldr	r3, [r7, #4]
 8017a82:	2210      	movs	r2, #16
 8017a84:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	681b      	ldr	r3, [r3, #0]
 8017a8a:	4a09      	ldr	r2, [pc, #36]	@ (8017ab0 <HAL_ETH_Init+0x1d0>)
 8017a8c:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	681b      	ldr	r3, [r3, #0]
 8017a94:	4a07      	ldr	r2, [pc, #28]	@ (8017ab4 <HAL_ETH_Init+0x1d4>)
 8017a96:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 8017a9a:	2300      	movs	r3, #0
        }
 8017a9c:	4618      	mov	r0, r3
 8017a9e:	3710      	adds	r7, #16
 8017aa0:	46bd      	mov	sp, r7
 8017aa2:	bd80      	pop	{r7, pc}
 8017aa4:	58024400 	.word	0x58024400
 8017aa8:	431bde83 	.word	0x431bde83
 8017aac:	ffff8001 	.word	0xffff8001
 8017ab0:	0c020060 	.word	0x0c020060
 8017ab4:	0c20c000 	.word	0x0c20c000

08017ab8 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 8017ab8:	b480      	push	{r7}
 8017aba:	b087      	sub	sp, #28
 8017abc:	af00      	add	r7, sp, #0
 8017abe:	60f8      	str	r0, [r7, #12]
 8017ac0:	60b9      	str	r1, [r7, #8]
 8017ac2:	607a      	str	r2, [r7, #4]
 8017ac4:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8017ac6:	68fb      	ldr	r3, [r7, #12]
 8017ac8:	68ba      	ldr	r2, [r7, #8]
 8017aca:	320c      	adds	r2, #12
 8017acc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ad0:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	2b00      	cmp	r3, #0
 8017ad6:	d002      	beq.n	8017ade <HAL_ETH_DescAssignMemory+0x26>
 8017ad8:	68bb      	ldr	r3, [r7, #8]
 8017ada:	2b03      	cmp	r3, #3
 8017adc:	d904      	bls.n	8017ae8 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8017ade:	68fb      	ldr	r3, [r7, #12]
 8017ae0:	2201      	movs	r2, #1
 8017ae2:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 8017ae4:	2301      	movs	r3, #1
 8017ae6:	e014      	b.n	8017b12 <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 8017ae8:	687a      	ldr	r2, [r7, #4]
 8017aea:	697b      	ldr	r3, [r7, #20]
 8017aec:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 8017aee:	687a      	ldr	r2, [r7, #4]
 8017af0:	697b      	ldr	r3, [r7, #20]
 8017af2:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8017af4:	697b      	ldr	r3, [r7, #20]
 8017af6:	68db      	ldr	r3, [r3, #12]
 8017af8:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8017afc:	697b      	ldr	r3, [r7, #20]
 8017afe:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 8017b00:	697b      	ldr	r3, [r7, #20]
 8017b02:	68db      	ldr	r3, [r3, #12]
 8017b04:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8017b08:	697b      	ldr	r3, [r7, #20]
 8017b0a:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 8017b0c:	697b      	ldr	r3, [r7, #20]
 8017b0e:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 8017b10:	2300      	movs	r3, #0
        }
 8017b12:	4618      	mov	r0, r3
 8017b14:	371c      	adds	r7, #28
 8017b16:	46bd      	mov	sp, r7
 8017b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b1c:	4770      	bx	lr

08017b1e <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 8017b1e:	b480      	push	{r7}
 8017b20:	b085      	sub	sp, #20
 8017b22:	af00      	add	r7, sp, #0
 8017b24:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 8017b26:	687b      	ldr	r3, [r7, #4]
 8017b28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017b2a:	2b10      	cmp	r3, #16
 8017b2c:	d175      	bne.n	8017c1a <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 8017b2e:	687b      	ldr	r3, [r7, #4]
 8017b30:	2223      	movs	r2, #35	@ 0x23
 8017b32:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8017b34:	2300      	movs	r3, #0
 8017b36:	60fb      	str	r3, [r7, #12]
 8017b38:	e00e      	b.n	8017b58 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 8017b3a:	687b      	ldr	r3, [r7, #4]
 8017b3c:	68fa      	ldr	r2, [r7, #12]
 8017b3e:	320c      	adds	r2, #12
 8017b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017b44:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 8017b46:	68bb      	ldr	r3, [r7, #8]
 8017b48:	68db      	ldr	r3, [r3, #12]
 8017b4a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8017b4e:	68bb      	ldr	r3, [r7, #8]
 8017b50:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8017b52:	68fb      	ldr	r3, [r7, #12]
 8017b54:	3301      	adds	r3, #1
 8017b56:	60fb      	str	r3, [r7, #12]
 8017b58:	68fb      	ldr	r3, [r7, #12]
 8017b5a:	2b03      	cmp	r3, #3
 8017b5c:	d9ed      	bls.n	8017b3a <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 8017b5e:	687b      	ldr	r3, [r7, #4]
 8017b60:	2201      	movs	r2, #1
 8017b62:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8017b64:	687b      	ldr	r3, [r7, #4]
 8017b66:	681b      	ldr	r3, [r3, #0]
 8017b68:	681a      	ldr	r2, [r3, #0]
 8017b6a:	687b      	ldr	r3, [r7, #4]
 8017b6c:	681b      	ldr	r3, [r3, #0]
 8017b6e:	f042 0202 	orr.w	r2, r2, #2
 8017b72:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	681b      	ldr	r3, [r3, #0]
 8017b78:	681a      	ldr	r2, [r3, #0]
 8017b7a:	687b      	ldr	r3, [r7, #4]
 8017b7c:	681b      	ldr	r3, [r3, #0]
 8017b7e:	f042 0201 	orr.w	r2, r2, #1
 8017b82:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8017b84:	687b      	ldr	r3, [r7, #4]
 8017b86:	681b      	ldr	r3, [r3, #0]
 8017b88:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	681b      	ldr	r3, [r3, #0]
 8017b90:	f042 0201 	orr.w	r2, r2, #1
 8017b94:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8017b98:	687b      	ldr	r3, [r7, #4]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017ba0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8017ba4:	687a      	ldr	r2, [r7, #4]
 8017ba6:	6812      	ldr	r2, [r2, #0]
 8017ba8:	f043 0301 	orr.w	r3, r3, #1
 8017bac:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017bb0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8017bb4:	687b      	ldr	r3, [r7, #4]
 8017bb6:	681b      	ldr	r3, [r3, #0]
 8017bb8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017bbc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8017bc0:	687a      	ldr	r2, [r7, #4]
 8017bc2:	6812      	ldr	r2, [r2, #0]
 8017bc4:	f043 0301 	orr.w	r3, r3, #1
 8017bc8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017bcc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 8017bd0:	687b      	ldr	r3, [r7, #4]
 8017bd2:	681b      	ldr	r3, [r3, #0]
 8017bd4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017bd8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8017bdc:	687a      	ldr	r2, [r7, #4]
 8017bde:	6812      	ldr	r2, [r2, #0]
 8017be0:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8017be4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017be8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 8017bec:	687b      	ldr	r3, [r7, #4]
 8017bee:	681b      	ldr	r3, [r3, #0]
 8017bf0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017bf4:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8017bf8:	687b      	ldr	r3, [r7, #4]
 8017bfa:	681a      	ldr	r2, [r3, #0]
 8017bfc:	f24d 0341 	movw	r3, #53313	@ 0xd041
 8017c00:	430b      	orrs	r3, r1
 8017c02:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017c06:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 8017c0a:	687b      	ldr	r3, [r7, #4]
 8017c0c:	2210      	movs	r2, #16
 8017c0e:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	2222      	movs	r2, #34	@ 0x22
 8017c14:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 8017c16:	2300      	movs	r3, #0
 8017c18:	e000      	b.n	8017c1c <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 8017c1a:	2301      	movs	r3, #1
            }
        }
 8017c1c:	4618      	mov	r0, r3
 8017c1e:	3714      	adds	r7, #20
 8017c20:	46bd      	mov	sp, r7
 8017c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c26:	4770      	bx	lr

08017c28 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 8017c28:	b480      	push	{r7}
 8017c2a:	b085      	sub	sp, #20
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017c34:	2b00      	cmp	r3, #0
 8017c36:	d066      	beq.n	8017d06 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	2223      	movs	r2, #35	@ 0x23
 8017c3c:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 8017c3e:	687b      	ldr	r3, [r7, #4]
 8017c40:	681b      	ldr	r3, [r3, #0]
 8017c42:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017c46:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	681a      	ldr	r2, [r3, #0]
 8017c4e:	4b31      	ldr	r3, [pc, #196]	@ (8017d14 <HAL_ETH_Stop_IT+0xec>)
 8017c50:	400b      	ands	r3, r1
 8017c52:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017c56:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8017c5a:	687b      	ldr	r3, [r7, #4]
 8017c5c:	681b      	ldr	r3, [r3, #0]
 8017c5e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017c62:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8017c66:	687a      	ldr	r2, [r7, #4]
 8017c68:	6812      	ldr	r2, [r2, #0]
 8017c6a:	f023 0301 	bic.w	r3, r3, #1
 8017c6e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017c72:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8017c76:	687b      	ldr	r3, [r7, #4]
 8017c78:	681b      	ldr	r3, [r3, #0]
 8017c7a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017c7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8017c82:	687a      	ldr	r2, [r7, #4]
 8017c84:	6812      	ldr	r2, [r2, #0]
 8017c86:	f023 0301 	bic.w	r3, r3, #1
 8017c8a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017c8e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8017c92:	687b      	ldr	r3, [r7, #4]
 8017c94:	681b      	ldr	r3, [r3, #0]
 8017c96:	681a      	ldr	r2, [r3, #0]
 8017c98:	687b      	ldr	r3, [r7, #4]
 8017c9a:	681b      	ldr	r3, [r3, #0]
 8017c9c:	f022 0201 	bic.w	r2, r2, #1
 8017ca0:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8017ca2:	687b      	ldr	r3, [r7, #4]
 8017ca4:	681b      	ldr	r3, [r3, #0]
 8017ca6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8017caa:	687b      	ldr	r3, [r7, #4]
 8017cac:	681b      	ldr	r3, [r3, #0]
 8017cae:	f042 0201 	orr.w	r2, r2, #1
 8017cb2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8017cb6:	687b      	ldr	r3, [r7, #4]
 8017cb8:	681b      	ldr	r3, [r3, #0]
 8017cba:	681a      	ldr	r2, [r3, #0]
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	f022 0202 	bic.w	r2, r2, #2
 8017cc4:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8017cc6:	2300      	movs	r3, #0
 8017cc8:	60fb      	str	r3, [r7, #12]
 8017cca:	e00e      	b.n	8017cea <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	68fa      	ldr	r2, [r7, #12]
 8017cd0:	320c      	adds	r2, #12
 8017cd2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017cd6:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 8017cd8:	68bb      	ldr	r3, [r7, #8]
 8017cda:	68db      	ldr	r3, [r3, #12]
 8017cdc:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 8017ce0:	68bb      	ldr	r3, [r7, #8]
 8017ce2:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 8017ce4:	68fb      	ldr	r3, [r7, #12]
 8017ce6:	3301      	adds	r3, #1
 8017ce8:	60fb      	str	r3, [r7, #12]
 8017cea:	68fb      	ldr	r3, [r7, #12]
 8017cec:	2b03      	cmp	r3, #3
 8017cee:	d9ed      	bls.n	8017ccc <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 8017cf0:	687b      	ldr	r3, [r7, #4]
 8017cf2:	2200      	movs	r2, #0
 8017cf4:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 8017cf6:	687b      	ldr	r3, [r7, #4]
 8017cf8:	2210      	movs	r2, #16
 8017cfa:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	2210      	movs	r2, #16
 8017d00:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 8017d02:	2300      	movs	r3, #0
 8017d04:	e000      	b.n	8017d08 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 8017d06:	2301      	movs	r3, #1
            }
        }
 8017d08:	4618      	mov	r0, r3
 8017d0a:	3714      	adds	r7, #20
 8017d0c:	46bd      	mov	sp, r7
 8017d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017d12:	4770      	bx	lr
 8017d14:	ffff2fbe 	.word	0xffff2fbe

08017d18 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 8017d18:	b580      	push	{r7, lr}
 8017d1a:	b082      	sub	sp, #8
 8017d1c:	af00      	add	r7, sp, #0
 8017d1e:	6078      	str	r0, [r7, #4]
 8017d20:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 8017d22:	683b      	ldr	r3, [r7, #0]
 8017d24:	2b00      	cmp	r3, #0
 8017d26:	d107      	bne.n	8017d38 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017d2c:	f043 0201 	orr.w	r2, r3, #1
 8017d30:	687b      	ldr	r3, [r7, #4]
 8017d32:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 8017d34:	2301      	movs	r3, #1
 8017d36:	e039      	b.n	8017dac <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017d3c:	2b10      	cmp	r3, #16
 8017d3e:	d134      	bne.n	8017daa <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 8017d40:	2201      	movs	r2, #1
 8017d42:	6839      	ldr	r1, [r7, #0]
 8017d44:	6878      	ldr	r0, [r7, #4]
 8017d46:	f001 f8c1 	bl	8018ecc <ETH_Prepare_Tx_Descriptors>
 8017d4a:	4603      	mov	r3, r0
 8017d4c:	2b00      	cmp	r3, #0
 8017d4e:	d007      	beq.n	8017d60 <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8017d50:	687b      	ldr	r3, [r7, #4]
 8017d52:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8017d54:	f043 0202 	orr.w	r2, r3, #2
 8017d58:	687b      	ldr	r3, [r7, #4]
 8017d5a:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 8017d5c:	2301      	movs	r3, #1
 8017d5e:	e025      	b.n	8017dac <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 8017d60:	687b      	ldr	r3, [r7, #4]
 8017d62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d64:	1c5a      	adds	r2, r3, #1
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	629a      	str	r2, [r3, #40]	@ 0x28
 8017d6a:	687b      	ldr	r3, [r7, #4]
 8017d6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d6e:	2b03      	cmp	r3, #3
 8017d70:	d904      	bls.n	8017d7c <HAL_ETH_Transmit_IT+0x64>
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d76:	1f1a      	subs	r2, r3, #4
 8017d78:	687b      	ldr	r3, [r7, #4]
 8017d7a:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	681a      	ldr	r2, [r3, #0]
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	3106      	adds	r1, #6
 8017d88:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8017d8c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017d90:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 8017d94:	f3bf 8f4f 	dsb	sy
}
 8017d98:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 8017d9a:	687b      	ldr	r3, [r7, #4]
 8017d9c:	681b      	ldr	r3, [r3, #0]
 8017d9e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017da2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 8017da6:	2300      	movs	r3, #0
 8017da8:	e000      	b.n	8017dac <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 8017daa:	2301      	movs	r3, #1
            }
        }
 8017dac:	4618      	mov	r0, r3
 8017dae:	3708      	adds	r7, #8
 8017db0:	46bd      	mov	sp, r7
 8017db2:	bd80      	pop	{r7, pc}

08017db4 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 8017db4:	b580      	push	{r7, lr}
 8017db6:	b08a      	sub	sp, #40	@ 0x28
 8017db8:	af00      	add	r7, sp, #0
 8017dba:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	3330      	adds	r3, #48	@ 0x30
 8017dc0:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 8017dc2:	69bb      	ldr	r3, [r7, #24]
 8017dc4:	691b      	ldr	r3, [r3, #16]
 8017dc6:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8017dc8:	69bb      	ldr	r3, [r7, #24]
 8017dca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017dcc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017dd0:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 8017dd2:	2300      	movs	r3, #0
 8017dd4:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 8017dd6:	2300      	movs	r3, #0
 8017dd8:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 8017dda:	2300      	movs	r3, #0
 8017ddc:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8017dde:	e055      	b.n	8017e8c <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 8017de0:	697b      	ldr	r3, [r7, #20]
 8017de2:	68db      	ldr	r3, [r3, #12]
 8017de4:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 8017de6:	6a3b      	ldr	r3, [r7, #32]
 8017de8:	3301      	adds	r3, #1
 8017dea:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 8017dec:	68fb      	ldr	r3, [r7, #12]
 8017dee:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d006      	beq.n	8017e04 <HAL_ETH_IsRxDataAvailable+0x50>
 8017df6:	68fb      	ldr	r3, [r7, #12]
 8017df8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017dfc:	2b00      	cmp	r3, #0
 8017dfe:	d001      	beq.n	8017e04 <HAL_ETH_IsRxDataAvailable+0x50>
 8017e00:	2301      	movs	r3, #1
 8017e02:	e000      	b.n	8017e06 <HAL_ETH_IsRxDataAvailable+0x52>
 8017e04:	2300      	movs	r3, #0
 8017e06:	2b00      	cmp	r3, #0
 8017e08:	d104      	bne.n	8017e14 <HAL_ETH_IsRxDataAvailable+0x60>
 8017e0a:	f240 4195 	movw	r1, #1173	@ 0x495
 8017e0e:	482b      	ldr	r0, [pc, #172]	@ (8017ebc <HAL_ETH_IsRxDataAvailable+0x108>)
 8017e10:	f7e9 f98e 	bl	8001130 <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 8017e14:	68fb      	ldr	r3, [r7, #12]
 8017e16:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017e1a:	2b00      	cmp	r3, #0
 8017e1c:	d036      	beq.n	8017e8c <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 8017e1e:	693b      	ldr	r3, [r7, #16]
 8017e20:	3301      	adds	r3, #1
 8017e22:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 8017e24:	693b      	ldr	r3, [r7, #16]
 8017e26:	2b01      	cmp	r3, #1
 8017e28:	d101      	bne.n	8017e2e <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 8017e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e2c:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 8017e2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e30:	3301      	adds	r3, #1
 8017e32:	627b      	str	r3, [r7, #36]	@ 0x24
 8017e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e36:	2b03      	cmp	r3, #3
 8017e38:	d902      	bls.n	8017e40 <HAL_ETH_IsRxDataAvailable+0x8c>
 8017e3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e3c:	3b04      	subs	r3, #4
 8017e3e:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8017e40:	69bb      	ldr	r3, [r7, #24]
 8017e42:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017e48:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 8017e4a:	697b      	ldr	r3, [r7, #20]
 8017e4c:	68db      	ldr	r3, [r3, #12]
 8017e4e:	2b00      	cmp	r3, #0
 8017e50:	db11      	blt.n	8017e76 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 8017e52:	697b      	ldr	r3, [r7, #20]
 8017e54:	68db      	ldr	r3, [r3, #12]
 8017e56:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8017e5a:	2b00      	cmp	r3, #0
 8017e5c:	d00b      	beq.n	8017e76 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 8017e5e:	69bb      	ldr	r3, [r7, #24]
 8017e60:	2201      	movs	r2, #1
 8017e62:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8017e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e66:	3301      	adds	r3, #1
 8017e68:	627b      	str	r3, [r7, #36]	@ 0x24
 8017e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e6c:	2b03      	cmp	r3, #3
 8017e6e:	d902      	bls.n	8017e76 <HAL_ETH_IsRxDataAvailable+0xc2>
 8017e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e72:	3b04      	subs	r3, #4
 8017e74:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 8017e76:	69bb      	ldr	r3, [r7, #24]
 8017e78:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017e7a:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 8017e7c:	69bb      	ldr	r3, [r7, #24]
 8017e7e:	69fa      	ldr	r2, [r7, #28]
 8017e80:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8017e82:	69bb      	ldr	r3, [r7, #24]
 8017e84:	693a      	ldr	r2, [r7, #16]
 8017e86:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 8017e88:	2301      	movs	r3, #1
 8017e8a:	e012      	b.n	8017eb2 <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 8017e8c:	697b      	ldr	r3, [r7, #20]
 8017e8e:	68db      	ldr	r3, [r3, #12]
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	db02      	blt.n	8017e9a <HAL_ETH_IsRxDataAvailable+0xe6>
 8017e94:	6a3b      	ldr	r3, [r7, #32]
 8017e96:	2b03      	cmp	r3, #3
 8017e98:	d9a2      	bls.n	8017de0 <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 8017e9a:	693b      	ldr	r3, [r7, #16]
 8017e9c:	2b00      	cmp	r3, #0
 8017e9e:	d004      	beq.n	8017eaa <HAL_ETH_IsRxDataAvailable+0xf6>
 8017ea0:	f240 41db 	movw	r1, #1243	@ 0x4db
 8017ea4:	4805      	ldr	r0, [pc, #20]	@ (8017ebc <HAL_ETH_IsRxDataAvailable+0x108>)
 8017ea6:	f7e9 f943 	bl	8001130 <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 8017eaa:	69bb      	ldr	r3, [r7, #24]
 8017eac:	2200      	movs	r2, #0
 8017eae:	619a      	str	r2, [r3, #24]

            return 0;
 8017eb0:	2300      	movs	r3, #0
        }
 8017eb2:	4618      	mov	r0, r3
 8017eb4:	3728      	adds	r7, #40	@ 0x28
 8017eb6:	46bd      	mov	sp, r7
 8017eb8:	bd80      	pop	{r7, pc}
 8017eba:	bf00      	nop
 8017ebc:	08025ad8 	.word	0x08025ad8

08017ec0 <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b086      	sub	sp, #24
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	6078      	str	r0, [r7, #4]
 8017ec8:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 8017eca:	687b      	ldr	r3, [r7, #4]
 8017ecc:	3330      	adds	r3, #48	@ 0x30
 8017ece:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 8017ed0:	683b      	ldr	r3, [r7, #0]
 8017ed2:	2b00      	cmp	r3, #0
 8017ed4:	d104      	bne.n	8017ee0 <HAL_ETH_GetRxData+0x20>
 8017ed6:	f240 511f 	movw	r1, #1311	@ 0x51f
 8017eda:	481c      	ldr	r0, [pc, #112]	@ (8017f4c <HAL_ETH_GetRxData+0x8c>)
 8017edc:	f7e9 f928 	bl	8001130 <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 8017ee0:	6878      	ldr	r0, [r7, #4]
 8017ee2:	f7ff ff67 	bl	8017db4 <HAL_ETH_IsRxDataAvailable>
 8017ee6:	4603      	mov	r3, r0
 8017ee8:	2b00      	cmp	r3, #0
 8017eea:	d101      	bne.n	8017ef0 <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 8017eec:	2300      	movs	r3, #0
 8017eee:	e028      	b.n	8017f42 <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 8017ef0:	697b      	ldr	r3, [r7, #20]
 8017ef2:	695b      	ldr	r3, [r3, #20]
 8017ef4:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8017ef6:	697b      	ldr	r3, [r7, #20]
 8017ef8:	693a      	ldr	r2, [r7, #16]
 8017efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017efe:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8017f00:	697b      	ldr	r3, [r7, #20]
 8017f02:	699b      	ldr	r3, [r3, #24]
 8017f04:	2b01      	cmp	r3, #1
 8017f06:	d004      	beq.n	8017f12 <HAL_ETH_GetRxData+0x52>
 8017f08:	f240 512a 	movw	r1, #1322	@ 0x52a
 8017f0c:	480f      	ldr	r0, [pc, #60]	@ (8017f4c <HAL_ETH_GetRxData+0x8c>)
 8017f0e:	f7e9 f90f 	bl	8001130 <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 8017f12:	68fb      	ldr	r3, [r7, #12]
 8017f14:	68db      	ldr	r3, [r3, #12]
 8017f16:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8017f1a:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 8017f1c:	68fb      	ldr	r3, [r7, #12]
 8017f1e:	691b      	ldr	r3, [r3, #16]
 8017f20:	461a      	mov	r2, r3
 8017f22:	683b      	ldr	r3, [r7, #0]
 8017f24:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 8017f26:	683b      	ldr	r3, [r7, #0]
 8017f28:	68ba      	ldr	r2, [r7, #8]
 8017f2a:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 8017f2c:	687b      	ldr	r3, [r7, #4]
 8017f2e:	695b      	ldr	r3, [r3, #20]
 8017f30:	68ba      	ldr	r2, [r7, #8]
 8017f32:	429a      	cmp	r2, r3
 8017f34:	d904      	bls.n	8017f40 <HAL_ETH_GetRxData+0x80>
 8017f36:	f240 5133 	movw	r1, #1331	@ 0x533
 8017f3a:	4804      	ldr	r0, [pc, #16]	@ (8017f4c <HAL_ETH_GetRxData+0x8c>)
 8017f3c:	f7e9 f8f8 	bl	8001130 <vAssertCalled>

            return packet_length;
 8017f40:	68bb      	ldr	r3, [r7, #8]
        }
 8017f42:	4618      	mov	r0, r3
 8017f44:	3718      	adds	r7, #24
 8017f46:	46bd      	mov	sp, r7
 8017f48:	bd80      	pop	{r7, pc}
 8017f4a:	bf00      	nop
 8017f4c:	08025ad8 	.word	0x08025ad8

08017f50 <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 8017f50:	b480      	push	{r7}
 8017f52:	b08b      	sub	sp, #44	@ 0x2c
 8017f54:	af00      	add	r7, sp, #0
 8017f56:	6078      	str	r0, [r7, #4]
 8017f58:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8017f5a:	687b      	ldr	r3, [r7, #4]
 8017f5c:	3330      	adds	r3, #48	@ 0x30
 8017f5e:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 8017f60:	68fb      	ldr	r3, [r7, #12]
 8017f62:	695b      	ldr	r3, [r3, #20]
 8017f64:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8017f66:	68fb      	ldr	r3, [r7, #12]
 8017f68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8017f6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f6e:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8017f70:	68fb      	ldr	r3, [r7, #12]
 8017f72:	699b      	ldr	r3, [r3, #24]
 8017f74:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 8017f76:	68fb      	ldr	r3, [r7, #12]
 8017f78:	699b      	ldr	r3, [r3, #24]
 8017f7a:	2b00      	cmp	r3, #0
 8017f7c:	d101      	bne.n	8017f82 <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 8017f7e:	2301      	movs	r3, #1
 8017f80:	e057      	b.n	8018032 <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 8017f82:	68fb      	ldr	r3, [r7, #12]
 8017f84:	69db      	ldr	r3, [r3, #28]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d002      	beq.n	8017f90 <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 8017f8a:	69fb      	ldr	r3, [r7, #28]
 8017f8c:	3301      	adds	r3, #1
 8017f8e:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 8017f90:	2300      	movs	r3, #0
 8017f92:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 8017f94:	683b      	ldr	r3, [r7, #0]
 8017f96:	2b00      	cmp	r3, #0
 8017f98:	d005      	beq.n	8017fa6 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 8017f9a:	683b      	ldr	r3, [r7, #0]
 8017f9c:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 8017f9e:	683a      	ldr	r2, [r7, #0]
 8017fa0:	6a3b      	ldr	r3, [r7, #32]
 8017fa2:	611a      	str	r2, [r3, #16]
 8017fa4:	e002      	b.n	8017fac <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 8017fa6:	6a3b      	ldr	r3, [r7, #32]
 8017fa8:	691b      	ldr	r3, [r3, #16]
 8017faa:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 8017fac:	693a      	ldr	r2, [r7, #16]
 8017fae:	6a3b      	ldr	r3, [r7, #32]
 8017fb0:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 8017fb2:	6a3b      	ldr	r3, [r7, #32]
 8017fb4:	68db      	ldr	r3, [r3, #12]
 8017fb6:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 8017fb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8017fbc:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 8017fbe:	68fb      	ldr	r3, [r7, #12]
 8017fc0:	6a1b      	ldr	r3, [r3, #32]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d003      	beq.n	8017fce <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 8017fc6:	697b      	ldr	r3, [r7, #20]
 8017fc8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8017fcc:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 8017fce:	697b      	ldr	r3, [r7, #20]
 8017fd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8017fd4:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 8017fd6:	6a3b      	ldr	r3, [r7, #32]
 8017fd8:	697a      	ldr	r2, [r7, #20]
 8017fda:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8017fdc:	f3bf 8f4f 	dsb	sy
}
 8017fe0:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 8017fe2:	6a3b      	ldr	r3, [r7, #32]
 8017fe4:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 8017fe6:	69fb      	ldr	r3, [r7, #28]
 8017fe8:	3b01      	subs	r3, #1
 8017fea:	69ba      	ldr	r2, [r7, #24]
 8017fec:	429a      	cmp	r2, r3
 8017fee:	d211      	bcs.n	8018014 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8017ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ff2:	3301      	adds	r3, #1
 8017ff4:	627b      	str	r3, [r7, #36]	@ 0x24
 8017ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ff8:	2b03      	cmp	r3, #3
 8017ffa:	d902      	bls.n	8018002 <HAL_ETH_BuildRxDescriptors+0xb2>
 8017ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017ffe:	3b04      	subs	r3, #4
 8018000:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018002:	68fb      	ldr	r3, [r7, #12]
 8018004:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018006:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801800a:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 801800c:	69bb      	ldr	r3, [r7, #24]
 801800e:	3301      	adds	r3, #1
 8018010:	61bb      	str	r3, [r7, #24]
            {
 8018012:	e7bf      	b.n	8017f94 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 8018014:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	681a      	ldr	r2, [r3, #0]
 801801a:	6a3b      	ldr	r3, [r7, #32]
 801801c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018020:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 8018024:	68fb      	ldr	r3, [r7, #12]
 8018026:	2200      	movs	r2, #0
 8018028:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 801802a:	687b      	ldr	r3, [r7, #4]
 801802c:	2200      	movs	r2, #0
 801802e:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 8018030:	2300      	movs	r3, #0
        }
 8018032:	4618      	mov	r0, r3
 8018034:	372c      	adds	r7, #44	@ 0x2c
 8018036:	46bd      	mov	sp, r7
 8018038:	f85d 7b04 	ldr.w	r7, [sp], #4
 801803c:	4770      	bx	lr
	...

08018040 <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 8018040:	b580      	push	{r7, lr}
 8018042:	b082      	sub	sp, #8
 8018044:	af00      	add	r7, sp, #0
 8018046:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	681b      	ldr	r3, [r3, #0]
 801804c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018050:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018054:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018058:	2b40      	cmp	r3, #64	@ 0x40
 801805a:	d115      	bne.n	8018088 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 801805c:	687b      	ldr	r3, [r7, #4]
 801805e:	681b      	ldr	r3, [r3, #0]
 8018060:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018064:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018068:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801806c:	2b40      	cmp	r3, #64	@ 0x40
 801806e:	d10b      	bne.n	8018088 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 8018070:	6878      	ldr	r0, [r7, #4]
 8018072:	f7ff fafc 	bl	801766e <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 8018076:	687b      	ldr	r3, [r7, #4]
 8018078:	681b      	ldr	r3, [r3, #0]
 801807a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801807e:	461a      	mov	r2, r3
 8018080:	f248 0340 	movw	r3, #32832	@ 0x8040
 8018084:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 8018088:	687b      	ldr	r3, [r7, #4]
 801808a:	681b      	ldr	r3, [r3, #0]
 801808c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018090:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018094:	f003 0301 	and.w	r3, r3, #1
 8018098:	2b01      	cmp	r3, #1
 801809a:	d115      	bne.n	80180c8 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	681b      	ldr	r3, [r3, #0]
 80180a0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80180a4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80180a8:	f003 0301 	and.w	r3, r3, #1
 80180ac:	2b01      	cmp	r3, #1
 80180ae:	d10b      	bne.n	80180c8 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 80180b0:	6878      	ldr	r0, [r7, #4]
 80180b2:	f7ff fad1 	bl	8017658 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 80180b6:	687b      	ldr	r3, [r7, #4]
 80180b8:	681b      	ldr	r3, [r3, #0]
 80180ba:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80180be:	461a      	mov	r2, r3
 80180c0:	f248 0301 	movw	r3, #32769	@ 0x8001
 80180c4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 80180c8:	687b      	ldr	r3, [r7, #4]
 80180ca:	681b      	ldr	r3, [r3, #0]
 80180cc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80180d0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80180d4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80180d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80180dc:	d14f      	bne.n	801817e <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80180e6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80180ea:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80180ee:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80180f2:	d144      	bne.n	801817e <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80180f4:	687b      	ldr	r3, [r7, #4]
 80180f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80180f8:	f043 0208 	orr.w	r2, r3, #8
 80180fc:	687b      	ldr	r3, [r7, #4]
 80180fe:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	681b      	ldr	r3, [r3, #0]
 8018104:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018108:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801810c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8018110:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018114:	d11d      	bne.n	8018152 <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8018116:	687b      	ldr	r3, [r7, #4]
 8018118:	681b      	ldr	r3, [r3, #0]
 801811a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801811e:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8018122:	f241 1302 	movw	r3, #4354	@ 0x1102
 8018126:	4013      	ands	r3, r2
 8018128:	687a      	ldr	r2, [r7, #4]
 801812a:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018134:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018138:	687a      	ldr	r2, [r7, #4]
 801813a:	6812      	ldr	r2, [r2, #0]
 801813c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8018140:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018144:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018148:	21e0      	movs	r1, #224	@ 0xe0
 801814a:	6878      	ldr	r0, [r7, #4]
 801814c:	f7ff fbba 	bl	80178c4 <set_error_state>
 8018150:	e012      	b.n	8018178 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	681b      	ldr	r3, [r3, #0]
 8018156:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801815a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801815e:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8018162:	687b      	ldr	r3, [r7, #4]
 8018164:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	681b      	ldr	r3, [r3, #0]
 801816a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801816e:	461a      	mov	r2, r3
 8018170:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8018174:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 8018178:	6878      	ldr	r0, [r7, #4]
 801817a:	f7ff fa83 	bl	8017684 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 801817e:	687b      	ldr	r3, [r7, #4]
 8018180:	681b      	ldr	r3, [r3, #0]
 8018182:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018186:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801818a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801818e:	d10f      	bne.n	80181b0 <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	681b      	ldr	r3, [r3, #0]
 8018194:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 8018198:	687b      	ldr	r3, [r7, #4]
 801819a:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 801819c:	21e0      	movs	r1, #224	@ 0xe0
 801819e:	6878      	ldr	r0, [r7, #4]
 80181a0:	f7ff fb90 	bl	80178c4 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 80181a4:	6878      	ldr	r0, [r7, #4]
 80181a6:	f000 f843 	bl	8018230 <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	2200      	movs	r2, #0
 80181ae:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 80181b0:	687b      	ldr	r3, [r7, #4]
 80181b2:	681b      	ldr	r3, [r3, #0]
 80181b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80181b8:	f003 0310 	and.w	r3, r3, #16
 80181bc:	2b10      	cmp	r3, #16
 80181be:	d10d      	bne.n	80181dc <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	681b      	ldr	r3, [r3, #0]
 80181c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80181c8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 80181d0:	6878      	ldr	r0, [r7, #4]
 80181d2:	f000 f837 	bl	8018244 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	2200      	movs	r2, #0
 80181da:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	681b      	ldr	r3, [r3, #0]
 80181e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80181e4:	f003 0320 	and.w	r3, r3, #32
 80181e8:	2b20      	cmp	r3, #32
 80181ea:	d10d      	bne.n	8018208 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	681b      	ldr	r3, [r3, #0]
 80181f0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80181f4:	f003 020f 	and.w	r2, r3, #15
 80181f8:	687b      	ldr	r3, [r7, #4]
 80181fa:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 80181fc:	6878      	ldr	r0, [r7, #4]
 80181fe:	f000 f82b 	bl	8018258 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	2200      	movs	r2, #0
 8018206:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 8018208:	4b08      	ldr	r3, [pc, #32]	@ (801822c <HAL_ETH_IRQHandler+0x1ec>)
 801820a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801820c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018210:	2b00      	cmp	r3, #0
 8018212:	d006      	beq.n	8018222 <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8018214:	4b05      	ldr	r3, [pc, #20]	@ (801822c <HAL_ETH_IRQHandler+0x1ec>)
 8018216:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 801821a:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 801821c:	6878      	ldr	r0, [r7, #4]
 801821e:	f000 f825 	bl	801826c <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 8018222:	bf00      	nop
 8018224:	3708      	adds	r7, #8
 8018226:	46bd      	mov	sp, r7
 8018228:	bd80      	pop	{r7, pc}
 801822a:	bf00      	nop
 801822c:	58000080 	.word	0x58000080

08018230 <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 8018230:	b480      	push	{r7}
 8018232:	b083      	sub	sp, #12
 8018234:	af00      	add	r7, sp, #0
 8018236:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 8018238:	bf00      	nop
 801823a:	370c      	adds	r7, #12
 801823c:	46bd      	mov	sp, r7
 801823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018242:	4770      	bx	lr

08018244 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 8018244:	b480      	push	{r7}
 8018246:	b083      	sub	sp, #12
 8018248:	af00      	add	r7, sp, #0
 801824a:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 801824c:	bf00      	nop
 801824e:	370c      	adds	r7, #12
 8018250:	46bd      	mov	sp, r7
 8018252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018256:	4770      	bx	lr

08018258 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 8018258:	b480      	push	{r7}
 801825a:	b083      	sub	sp, #12
 801825c:	af00      	add	r7, sp, #0
 801825e:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 8018260:	bf00      	nop
 8018262:	370c      	adds	r7, #12
 8018264:	46bd      	mov	sp, r7
 8018266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801826a:	4770      	bx	lr

0801826c <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 801826c:	b480      	push	{r7}
 801826e:	b083      	sub	sp, #12
 8018270:	af00      	add	r7, sp, #0
 8018272:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 8018274:	bf00      	nop
 8018276:	370c      	adds	r7, #12
 8018278:	46bd      	mov	sp, r7
 801827a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801827e:	4770      	bx	lr

08018280 <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 8018280:	b580      	push	{r7, lr}
 8018282:	b086      	sub	sp, #24
 8018284:	af00      	add	r7, sp, #0
 8018286:	60f8      	str	r0, [r7, #12]
 8018288:	60b9      	str	r1, [r7, #8]
 801828a:	607a      	str	r2, [r7, #4]
 801828c:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 801828e:	68fb      	ldr	r3, [r7, #12]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018296:	f003 0301 	and.w	r3, r3, #1
 801829a:	2b00      	cmp	r3, #0
 801829c:	d001      	beq.n	80182a2 <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 801829e:	2301      	movs	r3, #1
 80182a0:	e03e      	b.n	8018320 <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	681b      	ldr	r3, [r3, #0]
 80182a6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80182aa:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 80182ac:	697b      	ldr	r3, [r7, #20]
 80182ae:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80182b2:	68bb      	ldr	r3, [r7, #8]
 80182b4:	055b      	lsls	r3, r3, #21
 80182b6:	4313      	orrs	r3, r2
 80182b8:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 80182ba:	697b      	ldr	r3, [r7, #20]
 80182bc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80182c0:	687b      	ldr	r3, [r7, #4]
 80182c2:	041b      	lsls	r3, r3, #16
 80182c4:	4313      	orrs	r3, r2
 80182c6:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 80182c8:	697b      	ldr	r3, [r7, #20]
 80182ca:	f043 030c 	orr.w	r3, r3, #12
 80182ce:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 80182d0:	697b      	ldr	r3, [r7, #20]
 80182d2:	f043 0301 	orr.w	r3, r3, #1
 80182d6:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 80182d8:	68fb      	ldr	r3, [r7, #12]
 80182da:	681b      	ldr	r3, [r3, #0]
 80182dc:	697a      	ldr	r2, [r7, #20]
 80182de:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 80182e2:	f000 ff01 	bl	80190e8 <HAL_GetTick>
 80182e6:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80182e8:	e009      	b.n	80182fe <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 80182ea:	f000 fefd 	bl	80190e8 <HAL_GetTick>
 80182ee:	4602      	mov	r2, r0
 80182f0:	693b      	ldr	r3, [r7, #16]
 80182f2:	1ad3      	subs	r3, r2, r3
 80182f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80182f8:	d901      	bls.n	80182fe <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 80182fa:	2301      	movs	r3, #1
 80182fc:	e010      	b.n	8018320 <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80182fe:	68fb      	ldr	r3, [r7, #12]
 8018300:	681b      	ldr	r3, [r3, #0]
 8018302:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018306:	f003 0301 	and.w	r3, r3, #1
 801830a:	2b00      	cmp	r3, #0
 801830c:	d1ed      	bne.n	80182ea <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 801830e:	68fb      	ldr	r3, [r7, #12]
 8018310:	681b      	ldr	r3, [r3, #0]
 8018312:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8018316:	b29b      	uxth	r3, r3
 8018318:	461a      	mov	r2, r3
 801831a:	683b      	ldr	r3, [r7, #0]
 801831c:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 801831e:	2300      	movs	r3, #0
        }
 8018320:	4618      	mov	r0, r3
 8018322:	3718      	adds	r7, #24
 8018324:	46bd      	mov	sp, r7
 8018326:	bd80      	pop	{r7, pc}

08018328 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 8018328:	b580      	push	{r7, lr}
 801832a:	b086      	sub	sp, #24
 801832c:	af00      	add	r7, sp, #0
 801832e:	60f8      	str	r0, [r7, #12]
 8018330:	60b9      	str	r1, [r7, #8]
 8018332:	607a      	str	r2, [r7, #4]
 8018334:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8018336:	68fb      	ldr	r3, [r7, #12]
 8018338:	681b      	ldr	r3, [r3, #0]
 801833a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801833e:	f003 0301 	and.w	r3, r3, #1
 8018342:	2b00      	cmp	r3, #0
 8018344:	d001      	beq.n	801834a <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 8018346:	2301      	movs	r3, #1
 8018348:	e03c      	b.n	80183c4 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	681b      	ldr	r3, [r3, #0]
 801834e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018352:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8018354:	697b      	ldr	r3, [r7, #20]
 8018356:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 801835a:	68bb      	ldr	r3, [r7, #8]
 801835c:	055b      	lsls	r3, r3, #21
 801835e:	4313      	orrs	r3, r2
 8018360:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8018362:	697b      	ldr	r3, [r7, #20]
 8018364:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8018368:	687b      	ldr	r3, [r7, #4]
 801836a:	041b      	lsls	r3, r3, #16
 801836c:	4313      	orrs	r3, r2
 801836e:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8018370:	697b      	ldr	r3, [r7, #20]
 8018372:	f023 030c 	bic.w	r3, r3, #12
 8018376:	f043 0304 	orr.w	r3, r3, #4
 801837a:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 801837c:	697b      	ldr	r3, [r7, #20]
 801837e:	f043 0301 	orr.w	r3, r3, #1
 8018382:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8018384:	683b      	ldr	r3, [r7, #0]
 8018386:	b29a      	uxth	r2, r3
 8018388:	4b10      	ldr	r3, [pc, #64]	@ (80183cc <HAL_ETH_WritePHYRegister+0xa4>)
 801838a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 801838e:	4a0f      	ldr	r2, [pc, #60]	@ (80183cc <HAL_ETH_WritePHYRegister+0xa4>)
 8018390:	697b      	ldr	r3, [r7, #20]
 8018392:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 8018396:	f000 fea7 	bl	80190e8 <HAL_GetTick>
 801839a:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 801839c:	e009      	b.n	80183b2 <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 801839e:	f000 fea3 	bl	80190e8 <HAL_GetTick>
 80183a2:	4602      	mov	r2, r0
 80183a4:	693b      	ldr	r3, [r7, #16]
 80183a6:	1ad3      	subs	r3, r2, r3
 80183a8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80183ac:	d901      	bls.n	80183b2 <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 80183ae:	2301      	movs	r3, #1
 80183b0:	e008      	b.n	80183c4 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80183b2:	68fb      	ldr	r3, [r7, #12]
 80183b4:	681b      	ldr	r3, [r3, #0]
 80183b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80183ba:	f003 0301 	and.w	r3, r3, #1
 80183be:	2b00      	cmp	r3, #0
 80183c0:	d1ed      	bne.n	801839e <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 80183c2:	2300      	movs	r3, #0
        }
 80183c4:	4618      	mov	r0, r3
 80183c6:	3718      	adds	r7, #24
 80183c8:	46bd      	mov	sp, r7
 80183ca:	bd80      	pop	{r7, pc}
 80183cc:	40028000 	.word	0x40028000

080183d0 <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 80183d0:	b480      	push	{r7}
 80183d2:	b083      	sub	sp, #12
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
 80183d8:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 80183da:	683b      	ldr	r3, [r7, #0]
 80183dc:	2b00      	cmp	r3, #0
 80183de:	d101      	bne.n	80183e4 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 80183e0:	2301      	movs	r3, #1
 80183e2:	e1c3      	b.n	801876c <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 80183e4:	687b      	ldr	r3, [r7, #4]
 80183e6:	681b      	ldr	r3, [r3, #0]
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	f003 020c 	and.w	r2, r3, #12
 80183ee:	683b      	ldr	r3, [r7, #0]
 80183f0:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 80183f2:	687b      	ldr	r3, [r7, #4]
 80183f4:	681b      	ldr	r3, [r3, #0]
 80183f6:	681b      	ldr	r3, [r3, #0]
 80183f8:	f003 0310 	and.w	r3, r3, #16
 80183fc:	2b00      	cmp	r3, #0
 80183fe:	bf14      	ite	ne
 8018400:	2301      	movne	r3, #1
 8018402:	2300      	moveq	r3, #0
 8018404:	b2db      	uxtb	r3, r3
 8018406:	461a      	mov	r2, r3
 8018408:	683b      	ldr	r3, [r7, #0]
 801840a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 801840e:	687b      	ldr	r3, [r7, #4]
 8018410:	681b      	ldr	r3, [r3, #0]
 8018412:	681b      	ldr	r3, [r3, #0]
 8018414:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8018418:	683b      	ldr	r3, [r7, #0]
 801841a:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018426:	2b00      	cmp	r3, #0
 8018428:	bf0c      	ite	eq
 801842a:	2301      	moveq	r3, #1
 801842c:	2300      	movne	r3, #0
 801842e:	b2db      	uxtb	r3, r3
 8018430:	461a      	mov	r2, r3
 8018432:	683b      	ldr	r3, [r7, #0]
 8018434:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8018438:	687b      	ldr	r3, [r7, #4]
 801843a:	681b      	ldr	r3, [r3, #0]
 801843c:	681b      	ldr	r3, [r3, #0]
 801843e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018442:	2b00      	cmp	r3, #0
 8018444:	bf14      	ite	ne
 8018446:	2301      	movne	r3, #1
 8018448:	2300      	moveq	r3, #0
 801844a:	b2db      	uxtb	r3, r3
 801844c:	461a      	mov	r2, r3
 801844e:	683b      	ldr	r3, [r7, #0]
 8018450:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8018452:	687b      	ldr	r3, [r7, #4]
 8018454:	681b      	ldr	r3, [r3, #0]
 8018456:	681b      	ldr	r3, [r3, #0]
 8018458:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801845c:	2b00      	cmp	r3, #0
 801845e:	bf0c      	ite	eq
 8018460:	2301      	moveq	r3, #1
 8018462:	2300      	movne	r3, #0
 8018464:	b2db      	uxtb	r3, r3
 8018466:	461a      	mov	r2, r3
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018476:	2b00      	cmp	r3, #0
 8018478:	bf14      	ite	ne
 801847a:	2301      	movne	r3, #1
 801847c:	2300      	moveq	r3, #0
 801847e:	b2db      	uxtb	r3, r3
 8018480:	461a      	mov	r2, r3
 8018482:	683b      	ldr	r3, [r7, #0]
 8018484:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	681b      	ldr	r3, [r3, #0]
 801848c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8018490:	2b00      	cmp	r3, #0
 8018492:	bf14      	ite	ne
 8018494:	2301      	movne	r3, #1
 8018496:	2300      	moveq	r3, #0
 8018498:	b2db      	uxtb	r3, r3
 801849a:	461a      	mov	r2, r3
 801849c:	683b      	ldr	r3, [r7, #0]
 801849e:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 80184a0:	687b      	ldr	r3, [r7, #4]
 80184a2:	681b      	ldr	r3, [r3, #0]
 80184a4:	681b      	ldr	r3, [r3, #0]
 80184a6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80184aa:	683b      	ldr	r3, [r7, #0]
 80184ac:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 80184ae:	687b      	ldr	r3, [r7, #4]
 80184b0:	681b      	ldr	r3, [r3, #0]
 80184b2:	681b      	ldr	r3, [r3, #0]
 80184b4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80184b8:	683b      	ldr	r3, [r7, #0]
 80184ba:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	681b      	ldr	r3, [r3, #0]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	bf14      	ite	ne
 80184ca:	2301      	movne	r3, #1
 80184cc:	2300      	moveq	r3, #0
 80184ce:	b2db      	uxtb	r3, r3
 80184d0:	461a      	mov	r2, r3
 80184d2:	683b      	ldr	r3, [r7, #0]
 80184d4:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	681b      	ldr	r3, [r3, #0]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80184e0:	2b00      	cmp	r3, #0
 80184e2:	bf0c      	ite	eq
 80184e4:	2301      	moveq	r3, #1
 80184e6:	2300      	movne	r3, #0
 80184e8:	b2db      	uxtb	r3, r3
 80184ea:	461a      	mov	r2, r3
 80184ec:	683b      	ldr	r3, [r7, #0]
 80184ee:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	681b      	ldr	r3, [r3, #0]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80184fa:	2b00      	cmp	r3, #0
 80184fc:	bf0c      	ite	eq
 80184fe:	2301      	moveq	r3, #1
 8018500:	2300      	movne	r3, #0
 8018502:	b2db      	uxtb	r3, r3
 8018504:	461a      	mov	r2, r3
 8018506:	683b      	ldr	r3, [r7, #0]
 8018508:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 801850a:	687b      	ldr	r3, [r7, #4]
 801850c:	681b      	ldr	r3, [r3, #0]
 801850e:	681b      	ldr	r3, [r3, #0]
 8018510:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8018514:	2b00      	cmp	r3, #0
 8018516:	bf14      	ite	ne
 8018518:	2301      	movne	r3, #1
 801851a:	2300      	moveq	r3, #0
 801851c:	b2db      	uxtb	r3, r3
 801851e:	461a      	mov	r2, r3
 8018520:	683b      	ldr	r3, [r7, #0]
 8018522:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	681b      	ldr	r3, [r3, #0]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801852e:	2b00      	cmp	r3, #0
 8018530:	bf14      	ite	ne
 8018532:	2301      	movne	r3, #1
 8018534:	2300      	moveq	r3, #0
 8018536:	b2db      	uxtb	r3, r3
 8018538:	461a      	mov	r2, r3
 801853a:	683b      	ldr	r3, [r7, #0]
 801853c:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	681b      	ldr	r3, [r3, #0]
 8018542:	681b      	ldr	r3, [r3, #0]
 8018544:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018548:	2b00      	cmp	r3, #0
 801854a:	bf14      	ite	ne
 801854c:	2301      	movne	r3, #1
 801854e:	2300      	moveq	r3, #0
 8018550:	b2db      	uxtb	r3, r3
 8018552:	461a      	mov	r2, r3
 8018554:	683b      	ldr	r3, [r7, #0]
 8018556:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8018558:	687b      	ldr	r3, [r7, #4]
 801855a:	681b      	ldr	r3, [r3, #0]
 801855c:	681b      	ldr	r3, [r3, #0]
 801855e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018562:	2b00      	cmp	r3, #0
 8018564:	bf14      	ite	ne
 8018566:	2301      	movne	r3, #1
 8018568:	2300      	moveq	r3, #0
 801856a:	b2db      	uxtb	r3, r3
 801856c:	461a      	mov	r2, r3
 801856e:	683b      	ldr	r3, [r7, #0]
 8018570:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	681b      	ldr	r3, [r3, #0]
 8018576:	681b      	ldr	r3, [r3, #0]
 8018578:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 801857c:	683b      	ldr	r3, [r7, #0]
 801857e:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8018580:	687b      	ldr	r3, [r7, #4]
 8018582:	681b      	ldr	r3, [r3, #0]
 8018584:	681b      	ldr	r3, [r3, #0]
 8018586:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801858a:	2b00      	cmp	r3, #0
 801858c:	bf14      	ite	ne
 801858e:	2301      	movne	r3, #1
 8018590:	2300      	moveq	r3, #0
 8018592:	b2db      	uxtb	r3, r3
 8018594:	461a      	mov	r2, r3
 8018596:	683b      	ldr	r3, [r7, #0]
 8018598:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 801859a:	687b      	ldr	r3, [r7, #4]
 801859c:	681b      	ldr	r3, [r3, #0]
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80185a4:	683b      	ldr	r3, [r7, #0]
 80185a6:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	681b      	ldr	r3, [r3, #0]
 80185ac:	685b      	ldr	r3, [r3, #4]
 80185ae:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80185b2:	683b      	ldr	r3, [r7, #0]
 80185b4:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	681b      	ldr	r3, [r3, #0]
 80185ba:	685b      	ldr	r3, [r3, #4]
 80185bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80185c0:	2b00      	cmp	r3, #0
 80185c2:	bf0c      	ite	eq
 80185c4:	2301      	moveq	r3, #1
 80185c6:	2300      	movne	r3, #0
 80185c8:	b2db      	uxtb	r3, r3
 80185ca:	461a      	mov	r2, r3
 80185cc:	683b      	ldr	r3, [r7, #0]
 80185ce:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 80185d2:	687b      	ldr	r3, [r7, #4]
 80185d4:	681b      	ldr	r3, [r3, #0]
 80185d6:	685b      	ldr	r3, [r3, #4]
 80185d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80185dc:	2b00      	cmp	r3, #0
 80185de:	bf14      	ite	ne
 80185e0:	2301      	movne	r3, #1
 80185e2:	2300      	moveq	r3, #0
 80185e4:	b2db      	uxtb	r3, r3
 80185e6:	461a      	mov	r2, r3
 80185e8:	683b      	ldr	r3, [r7, #0]
 80185ea:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 80185ee:	687b      	ldr	r3, [r7, #4]
 80185f0:	681b      	ldr	r3, [r3, #0]
 80185f2:	685b      	ldr	r3, [r3, #4]
 80185f4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80185f8:	2b00      	cmp	r3, #0
 80185fa:	bf14      	ite	ne
 80185fc:	2301      	movne	r3, #1
 80185fe:	2300      	moveq	r3, #0
 8018600:	b2db      	uxtb	r3, r3
 8018602:	461a      	mov	r2, r3
 8018604:	683b      	ldr	r3, [r7, #0]
 8018606:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	681b      	ldr	r3, [r3, #0]
 801860e:	685b      	ldr	r3, [r3, #4]
 8018610:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8018614:	2b00      	cmp	r3, #0
 8018616:	bf14      	ite	ne
 8018618:	2301      	movne	r3, #1
 801861a:	2300      	moveq	r3, #0
 801861c:	b2db      	uxtb	r3, r3
 801861e:	461a      	mov	r2, r3
 8018620:	683b      	ldr	r3, [r7, #0]
 8018622:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8018626:	687b      	ldr	r3, [r7, #4]
 8018628:	681b      	ldr	r3, [r3, #0]
 801862a:	685b      	ldr	r3, [r3, #4]
 801862c:	0e5b      	lsrs	r3, r3, #25
 801862e:	f003 021f 	and.w	r2, r3, #31
 8018632:	683b      	ldr	r3, [r7, #0]
 8018634:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8018636:	687b      	ldr	r3, [r7, #4]
 8018638:	681b      	ldr	r3, [r3, #0]
 801863a:	68db      	ldr	r3, [r3, #12]
 801863c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018640:	2b00      	cmp	r3, #0
 8018642:	bf14      	ite	ne
 8018644:	2301      	movne	r3, #1
 8018646:	2300      	moveq	r3, #0
 8018648:	b2db      	uxtb	r3, r3
 801864a:	461a      	mov	r2, r3
 801864c:	683b      	ldr	r3, [r7, #0]
 801864e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8018652:	687b      	ldr	r3, [r7, #4]
 8018654:	681b      	ldr	r3, [r3, #0]
 8018656:	68db      	ldr	r3, [r3, #12]
 8018658:	f003 020f 	and.w	r2, r3, #15
 801865c:	683b      	ldr	r3, [r7, #0]
 801865e:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8018660:	687b      	ldr	r3, [r7, #4]
 8018662:	681b      	ldr	r3, [r3, #0]
 8018664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018666:	f003 0302 	and.w	r3, r3, #2
 801866a:	2b00      	cmp	r3, #0
 801866c:	bf14      	ite	ne
 801866e:	2301      	movne	r3, #1
 8018670:	2300      	moveq	r3, #0
 8018672:	b2db      	uxtb	r3, r3
 8018674:	461a      	mov	r2, r3
 8018676:	683b      	ldr	r3, [r7, #0]
 8018678:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	681b      	ldr	r3, [r3, #0]
 8018680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018686:	2b00      	cmp	r3, #0
 8018688:	bf0c      	ite	eq
 801868a:	2301      	moveq	r3, #1
 801868c:	2300      	movne	r3, #0
 801868e:	b2db      	uxtb	r3, r3
 8018690:	461a      	mov	r2, r3
 8018692:	683b      	ldr	r3, [r7, #0]
 8018694:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8018698:	687b      	ldr	r3, [r7, #4]
 801869a:	681b      	ldr	r3, [r3, #0]
 801869c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801869e:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80186a2:	683b      	ldr	r3, [r7, #0]
 80186a4:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 80186a6:	687b      	ldr	r3, [r7, #4]
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80186ac:	0c1b      	lsrs	r3, r3, #16
 80186ae:	b29a      	uxth	r2, r3
 80186b0:	683b      	ldr	r3, [r7, #0]
 80186b2:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	681b      	ldr	r3, [r3, #0]
 80186b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80186bc:	f003 0301 	and.w	r3, r3, #1
 80186c0:	2b00      	cmp	r3, #0
 80186c2:	bf14      	ite	ne
 80186c4:	2301      	movne	r3, #1
 80186c6:	2300      	moveq	r3, #0
 80186c8:	b2db      	uxtb	r3, r3
 80186ca:	461a      	mov	r2, r3
 80186cc:	683b      	ldr	r3, [r7, #0]
 80186ce:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80186da:	f003 0302 	and.w	r3, r3, #2
 80186de:	2b00      	cmp	r3, #0
 80186e0:	bf14      	ite	ne
 80186e2:	2301      	movne	r3, #1
 80186e4:	2300      	moveq	r3, #0
 80186e6:	b2db      	uxtb	r3, r3
 80186e8:	461a      	mov	r2, r3
 80186ea:	683b      	ldr	r3, [r7, #0]
 80186ec:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 80186f0:	687b      	ldr	r3, [r7, #4]
 80186f2:	681b      	ldr	r3, [r3, #0]
 80186f4:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 80186f8:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 80186fc:	683b      	ldr	r3, [r7, #0]
 80186fe:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	681b      	ldr	r3, [r3, #0]
 8018704:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018708:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 801870c:	683b      	ldr	r3, [r7, #0]
 801870e:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018718:	f003 0308 	and.w	r3, r3, #8
 801871c:	2b00      	cmp	r3, #0
 801871e:	bf14      	ite	ne
 8018720:	2301      	movne	r3, #1
 8018722:	2300      	moveq	r3, #0
 8018724:	b2db      	uxtb	r3, r3
 8018726:	461a      	mov	r2, r3
 8018728:	683b      	ldr	r3, [r7, #0]
 801872a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 801872e:	687b      	ldr	r3, [r7, #4]
 8018730:	681b      	ldr	r3, [r3, #0]
 8018732:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018736:	f003 0310 	and.w	r3, r3, #16
 801873a:	2b00      	cmp	r3, #0
 801873c:	bf14      	ite	ne
 801873e:	2301      	movne	r3, #1
 8018740:	2300      	moveq	r3, #0
 8018742:	b2db      	uxtb	r3, r3
 8018744:	461a      	mov	r2, r3
 8018746:	683b      	ldr	r3, [r7, #0]
 8018748:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	681b      	ldr	r3, [r3, #0]
 8018750:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018754:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018758:	2b00      	cmp	r3, #0
 801875a:	bf0c      	ite	eq
 801875c:	2301      	moveq	r3, #1
 801875e:	2300      	movne	r3, #0
 8018760:	b2db      	uxtb	r3, r3
 8018762:	461a      	mov	r2, r3
 8018764:	683b      	ldr	r3, [r7, #0]
 8018766:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 801876a:	2300      	movs	r3, #0
        }
 801876c:	4618      	mov	r0, r3
 801876e:	370c      	adds	r7, #12
 8018770:	46bd      	mov	sp, r7
 8018772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018776:	4770      	bx	lr

08018778 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8018778:	b580      	push	{r7, lr}
 801877a:	b082      	sub	sp, #8
 801877c:	af00      	add	r7, sp, #0
 801877e:	6078      	str	r0, [r7, #4]
 8018780:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8018782:	683b      	ldr	r3, [r7, #0]
 8018784:	2b00      	cmp	r3, #0
 8018786:	d101      	bne.n	801878c <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8018788:	2301      	movs	r3, #1
 801878a:	e00a      	b.n	80187a2 <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 801878c:	687b      	ldr	r3, [r7, #4]
 801878e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018790:	2b10      	cmp	r3, #16
 8018792:	d105      	bne.n	80187a0 <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8018794:	6839      	ldr	r1, [r7, #0]
 8018796:	6878      	ldr	r0, [r7, #4]
 8018798:	f000 f808 	bl	80187ac <ETH_SetMACConfig>

                return HAL_OK;
 801879c:	2300      	movs	r3, #0
 801879e:	e000      	b.n	80187a2 <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 80187a0:	2301      	movs	r3, #1
            }
        }
 80187a2:	4618      	mov	r0, r3
 80187a4:	3708      	adds	r7, #8
 80187a6:	46bd      	mov	sp, r7
 80187a8:	bd80      	pop	{r7, pc}
	...

080187ac <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 80187ac:	b480      	push	{r7}
 80187ae:	b085      	sub	sp, #20
 80187b0:	af00      	add	r7, sp, #0
 80187b2:	6078      	str	r0, [r7, #4]
 80187b4:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 80187b6:	683b      	ldr	r3, [r7, #0]
 80187b8:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 80187ba:	683b      	ldr	r3, [r7, #0]
 80187bc:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 80187be:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 80187c0:	683b      	ldr	r3, [r7, #0]
 80187c2:	791b      	ldrb	r3, [r3, #4]
 80187c4:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 80187c6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 80187c8:	683b      	ldr	r3, [r7, #0]
 80187ca:	7b1b      	ldrb	r3, [r3, #12]
 80187cc:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 80187ce:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 80187d0:	683b      	ldr	r3, [r7, #0]
 80187d2:	7b5b      	ldrb	r3, [r3, #13]
 80187d4:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 80187d6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 80187d8:	683b      	ldr	r3, [r7, #0]
 80187da:	7b9b      	ldrb	r3, [r3, #14]
 80187dc:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 80187de:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 80187e0:	683b      	ldr	r3, [r7, #0]
 80187e2:	7bdb      	ldrb	r3, [r3, #15]
 80187e4:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 80187e6:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 80187e8:	683a      	ldr	r2, [r7, #0]
 80187ea:	7c12      	ldrb	r2, [r2, #16]
 80187ec:	2a00      	cmp	r2, #0
 80187ee:	d102      	bne.n	80187f6 <ETH_SetMACConfig+0x4a>
 80187f0:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 80187f4:	e000      	b.n	80187f8 <ETH_SetMACConfig+0x4c>
 80187f6:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 80187f8:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 80187fa:	683a      	ldr	r2, [r7, #0]
 80187fc:	7c52      	ldrb	r2, [r2, #17]
 80187fe:	2a00      	cmp	r2, #0
 8018800:	d102      	bne.n	8018808 <ETH_SetMACConfig+0x5c>
 8018802:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8018806:	e000      	b.n	801880a <ETH_SetMACConfig+0x5e>
 8018808:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 801880a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 801880c:	683b      	ldr	r3, [r7, #0]
 801880e:	7c9b      	ldrb	r3, [r3, #18]
 8018810:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8018812:	431a      	orrs	r2, r3
                          macconf->Speed |
 8018814:	683b      	ldr	r3, [r7, #0]
 8018816:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8018818:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 801881a:	683b      	ldr	r3, [r7, #0]
 801881c:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 801881e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8018820:	683b      	ldr	r3, [r7, #0]
 8018822:	7f1b      	ldrb	r3, [r3, #28]
 8018824:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 8018826:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8018828:	683b      	ldr	r3, [r7, #0]
 801882a:	7f5b      	ldrb	r3, [r3, #29]
 801882c:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 801882e:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8018830:	683a      	ldr	r2, [r7, #0]
 8018832:	7f92      	ldrb	r2, [r2, #30]
 8018834:	2a00      	cmp	r2, #0
 8018836:	d102      	bne.n	801883e <ETH_SetMACConfig+0x92>
 8018838:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801883c:	e000      	b.n	8018840 <ETH_SetMACConfig+0x94>
 801883e:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8018840:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8018842:	683b      	ldr	r3, [r7, #0]
 8018844:	7fdb      	ldrb	r3, [r3, #31]
 8018846:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8018848:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 801884a:	683a      	ldr	r2, [r7, #0]
 801884c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8018850:	2a00      	cmp	r2, #0
 8018852:	d102      	bne.n	801885a <ETH_SetMACConfig+0xae>
 8018854:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018858:	e000      	b.n	801885c <ETH_SetMACConfig+0xb0>
 801885a:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 801885c:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 801885e:	683b      	ldr	r3, [r7, #0]
 8018860:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8018862:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 8018864:	683b      	ldr	r3, [r7, #0]
 8018866:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 801886a:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 801886c:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 801886e:	683b      	ldr	r3, [r7, #0]
 8018870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 8018872:	4313      	orrs	r3, r2
 8018874:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8018876:	687b      	ldr	r3, [r7, #4]
 8018878:	681b      	ldr	r3, [r3, #0]
 801887a:	681a      	ldr	r2, [r3, #0]
 801887c:	4b56      	ldr	r3, [pc, #344]	@ (80189d8 <ETH_SetMACConfig+0x22c>)
 801887e:	4013      	ands	r3, r2
 8018880:	687a      	ldr	r2, [r7, #4]
 8018882:	6812      	ldr	r2, [r2, #0]
 8018884:	68f9      	ldr	r1, [r7, #12]
 8018886:	430b      	orrs	r3, r1
 8018888:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 801888a:	683b      	ldr	r3, [r7, #0]
 801888c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801888e:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8018890:	683b      	ldr	r3, [r7, #0]
 8018892:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8018896:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8018898:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 801889a:	683b      	ldr	r3, [r7, #0]
 801889c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80188a0:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 80188a2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 80188a4:	683b      	ldr	r3, [r7, #0]
 80188a6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 80188aa:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 80188ac:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 80188ae:	683a      	ldr	r2, [r7, #0]
 80188b0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 80188b4:	2a00      	cmp	r2, #0
 80188b6:	d102      	bne.n	80188be <ETH_SetMACConfig+0x112>
 80188b8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80188bc:	e000      	b.n	80188c0 <ETH_SetMACConfig+0x114>
 80188be:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 80188c0:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 80188c2:	683b      	ldr	r3, [r7, #0]
 80188c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 80188c6:	4313      	orrs	r3, r2
 80188c8:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 80188ca:	687b      	ldr	r3, [r7, #4]
 80188cc:	681b      	ldr	r3, [r3, #0]
 80188ce:	685a      	ldr	r2, [r3, #4]
 80188d0:	4b42      	ldr	r3, [pc, #264]	@ (80189dc <ETH_SetMACConfig+0x230>)
 80188d2:	4013      	ands	r3, r2
 80188d4:	687a      	ldr	r2, [r7, #4]
 80188d6:	6812      	ldr	r2, [r2, #0]
 80188d8:	68f9      	ldr	r1, [r7, #12]
 80188da:	430b      	orrs	r3, r1
 80188dc:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 80188de:	683b      	ldr	r3, [r7, #0]
 80188e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80188e4:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 80188e6:	683b      	ldr	r3, [r7, #0]
 80188e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 80188ea:	4313      	orrs	r3, r2
 80188ec:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 80188ee:	687b      	ldr	r3, [r7, #4]
 80188f0:	681b      	ldr	r3, [r3, #0]
 80188f2:	68da      	ldr	r2, [r3, #12]
 80188f4:	4b3a      	ldr	r3, [pc, #232]	@ (80189e0 <ETH_SetMACConfig+0x234>)
 80188f6:	4013      	ands	r3, r2
 80188f8:	687a      	ldr	r2, [r7, #4]
 80188fa:	6812      	ldr	r2, [r2, #0]
 80188fc:	68f9      	ldr	r1, [r7, #12]
 80188fe:	430b      	orrs	r3, r1
 8018900:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8018902:	683b      	ldr	r3, [r7, #0]
 8018904:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8018908:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 801890a:	683b      	ldr	r3, [r7, #0]
 801890c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 801890e:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 8018910:	683a      	ldr	r2, [r7, #0]
 8018912:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8018916:	2a00      	cmp	r2, #0
 8018918:	d101      	bne.n	801891e <ETH_SetMACConfig+0x172>
 801891a:	2280      	movs	r2, #128	@ 0x80
 801891c:	e000      	b.n	8018920 <ETH_SetMACConfig+0x174>
 801891e:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 8018920:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 8018922:	683b      	ldr	r3, [r7, #0]
 8018924:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018926:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8018928:	4313      	orrs	r3, r2
 801892a:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 801892c:	687b      	ldr	r3, [r7, #4]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8018932:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8018936:	4013      	ands	r3, r2
 8018938:	687a      	ldr	r2, [r7, #4]
 801893a:	6812      	ldr	r2, [r2, #0]
 801893c:	68f9      	ldr	r1, [r7, #12]
 801893e:	430b      	orrs	r3, r1
 8018940:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8018942:	683b      	ldr	r3, [r7, #0]
 8018944:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018948:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 801894a:	683b      	ldr	r3, [r7, #0]
 801894c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8018950:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8018952:	4313      	orrs	r3, r2
 8018954:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 8018956:	687b      	ldr	r3, [r7, #4]
 8018958:	681b      	ldr	r3, [r3, #0]
 801895a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801895e:	f023 0103 	bic.w	r1, r3, #3
 8018962:	687b      	ldr	r3, [r7, #4]
 8018964:	681b      	ldr	r3, [r3, #0]
 8018966:	68fa      	ldr	r2, [r7, #12]
 8018968:	430a      	orrs	r2, r1
 801896a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 801896e:	687b      	ldr	r3, [r7, #4]
 8018970:	681b      	ldr	r3, [r3, #0]
 8018972:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8018976:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 801897a:	683b      	ldr	r3, [r7, #0]
 801897c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801897e:	687b      	ldr	r3, [r7, #4]
 8018980:	681b      	ldr	r3, [r3, #0]
 8018982:	430a      	orrs	r2, r1
 8018984:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 8018988:	683b      	ldr	r3, [r7, #0]
 801898a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 801898c:	683a      	ldr	r2, [r7, #0]
 801898e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8018992:	2a00      	cmp	r2, #0
 8018994:	d101      	bne.n	801899a <ETH_SetMACConfig+0x1ee>
 8018996:	2240      	movs	r2, #64	@ 0x40
 8018998:	e000      	b.n	801899c <ETH_SetMACConfig+0x1f0>
 801899a:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 801899c:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 801899e:	683b      	ldr	r3, [r7, #0]
 80189a0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 80189a4:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 80189a6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 80189a8:	683b      	ldr	r3, [r7, #0]
 80189aa:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 80189ae:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 80189b0:	4313      	orrs	r3, r2
 80189b2:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 80189b4:	687b      	ldr	r3, [r7, #4]
 80189b6:	681b      	ldr	r3, [r3, #0]
 80189b8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 80189bc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 80189c0:	687b      	ldr	r3, [r7, #4]
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	68fa      	ldr	r2, [r7, #12]
 80189c6:	430a      	orrs	r2, r1
 80189c8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 80189cc:	bf00      	nop
 80189ce:	3714      	adds	r7, #20
 80189d0:	46bd      	mov	sp, r7
 80189d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d6:	4770      	bx	lr
 80189d8:	00048083 	.word	0x00048083
 80189dc:	c0f88000 	.word	0xc0f88000
 80189e0:	fffffef0 	.word	0xfffffef0

080189e4 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 80189e4:	b480      	push	{r7}
 80189e6:	b085      	sub	sp, #20
 80189e8:	af00      	add	r7, sp, #0
 80189ea:	6078      	str	r0, [r7, #4]
 80189ec:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 80189ee:	687b      	ldr	r3, [r7, #4]
 80189f0:	681b      	ldr	r3, [r3, #0]
 80189f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80189f6:	681a      	ldr	r2, [r3, #0]
 80189f8:	4b38      	ldr	r3, [pc, #224]	@ (8018adc <ETH_SetDMAConfig+0xf8>)
 80189fa:	4013      	ands	r3, r2
 80189fc:	683a      	ldr	r2, [r7, #0]
 80189fe:	6811      	ldr	r1, [r2, #0]
 8018a00:	687a      	ldr	r2, [r7, #4]
 8018a02:	6812      	ldr	r2, [r2, #0]
 8018a04:	430b      	orrs	r3, r1
 8018a06:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018a0a:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8018a0c:	683b      	ldr	r3, [r7, #0]
 8018a0e:	791b      	ldrb	r3, [r3, #4]
 8018a10:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 8018a12:	683b      	ldr	r3, [r7, #0]
 8018a14:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8018a16:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 8018a18:	683b      	ldr	r3, [r7, #0]
 8018a1a:	7b1b      	ldrb	r3, [r3, #12]
 8018a1c:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8018a1e:	4313      	orrs	r3, r2
 8018a20:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 8018a22:	687b      	ldr	r3, [r7, #4]
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018a2a:	685a      	ldr	r2, [r3, #4]
 8018a2c:	4b2c      	ldr	r3, [pc, #176]	@ (8018ae0 <ETH_SetDMAConfig+0xfc>)
 8018a2e:	4013      	ands	r3, r2
 8018a30:	687a      	ldr	r2, [r7, #4]
 8018a32:	6812      	ldr	r2, [r2, #0]
 8018a34:	68f9      	ldr	r1, [r7, #12]
 8018a36:	430b      	orrs	r3, r1
 8018a38:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018a3c:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8018a3e:	683b      	ldr	r3, [r7, #0]
 8018a40:	7b5b      	ldrb	r3, [r3, #13]
 8018a42:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 8018a44:	683b      	ldr	r3, [r7, #0]
 8018a46:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8018a48:	4313      	orrs	r3, r2
 8018a4a:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 8018a4c:	687b      	ldr	r3, [r7, #4]
 8018a4e:	681b      	ldr	r3, [r3, #0]
 8018a50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018a54:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8018a58:	4b22      	ldr	r3, [pc, #136]	@ (8018ae4 <ETH_SetDMAConfig+0x100>)
 8018a5a:	4013      	ands	r3, r2
 8018a5c:	687a      	ldr	r2, [r7, #4]
 8018a5e:	6812      	ldr	r2, [r2, #0]
 8018a60:	68f9      	ldr	r1, [r7, #12]
 8018a62:	430b      	orrs	r3, r1
 8018a64:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018a68:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 8018a6c:	683b      	ldr	r3, [r7, #0]
 8018a6e:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 8018a70:	683b      	ldr	r3, [r7, #0]
 8018a72:	7d1b      	ldrb	r3, [r3, #20]
 8018a74:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 8018a76:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 8018a78:	683b      	ldr	r3, [r7, #0]
 8018a7a:	7f5b      	ldrb	r3, [r3, #29]
 8018a7c:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 8018a7e:	4313      	orrs	r3, r2
 8018a80:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8018a82:	687b      	ldr	r3, [r7, #4]
 8018a84:	681b      	ldr	r3, [r3, #0]
 8018a86:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018a8a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8018a8e:	4b16      	ldr	r3, [pc, #88]	@ (8018ae8 <ETH_SetDMAConfig+0x104>)
 8018a90:	4013      	ands	r3, r2
 8018a92:	687a      	ldr	r2, [r7, #4]
 8018a94:	6812      	ldr	r2, [r2, #0]
 8018a96:	68f9      	ldr	r1, [r7, #12]
 8018a98:	430b      	orrs	r3, r1
 8018a9a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018a9e:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8018aa2:	683b      	ldr	r3, [r7, #0]
 8018aa4:	7f1b      	ldrb	r3, [r3, #28]
 8018aa6:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 8018aa8:	683b      	ldr	r3, [r7, #0]
 8018aaa:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8018aac:	4313      	orrs	r3, r2
 8018aae:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8018ab0:	687b      	ldr	r3, [r7, #4]
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018ab8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8018abc:	4b0b      	ldr	r3, [pc, #44]	@ (8018aec <ETH_SetDMAConfig+0x108>)
 8018abe:	4013      	ands	r3, r2
 8018ac0:	687a      	ldr	r2, [r7, #4]
 8018ac2:	6812      	ldr	r2, [r2, #0]
 8018ac4:	68f9      	ldr	r1, [r7, #12]
 8018ac6:	430b      	orrs	r3, r1
 8018ac8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018acc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 8018ad0:	bf00      	nop
 8018ad2:	3714      	adds	r7, #20
 8018ad4:	46bd      	mov	sp, r7
 8018ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ada:	4770      	bx	lr
 8018adc:	ffff87fd 	.word	0xffff87fd
 8018ae0:	ffff2ffe 	.word	0xffff2ffe
 8018ae4:	fffec000 	.word	0xfffec000
 8018ae8:	ffc0efef 	.word	0xffc0efef
 8018aec:	7fc0ffff 	.word	0x7fc0ffff

08018af0 <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 8018af0:	b580      	push	{r7, lr}
 8018af2:	b0a4      	sub	sp, #144	@ 0x90
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8018af8:	2301      	movs	r3, #1
 8018afa:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8018afe:	2300      	movs	r3, #0
 8018b00:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8018b02:	2300      	movs	r3, #0
 8018b04:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8018b08:	2300      	movs	r3, #0
 8018b0a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 8018b0e:	2301      	movs	r3, #1
 8018b10:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8018b14:	2301      	movs	r3, #1
 8018b16:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 8018b1a:	2301      	movs	r3, #1
 8018b1c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 8018b20:	2300      	movs	r3, #0
 8018b22:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8018b26:	2301      	movs	r3, #1
 8018b28:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8018b2c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8018b30:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8018b32:	2300      	movs	r3, #0
 8018b34:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8018b38:	2300      	movs	r3, #0
 8018b3a:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8018b3c:	2300      	movs	r3, #0
 8018b3e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8018b42:	2300      	movs	r3, #0
 8018b44:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 8018b48:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8018b4c:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8018b4e:	2300      	movs	r3, #0
 8018b50:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8018b54:	2300      	movs	r3, #0
 8018b56:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 8018b58:	2301      	movs	r3, #1
 8018b5a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 8018b5e:	2300      	movs	r3, #0
 8018b60:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 8018b64:	2300      	movs	r3, #0
 8018b66:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8018b6a:	2300      	movs	r3, #0
 8018b6c:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 8018b6e:	2300      	movs	r3, #0
 8018b70:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8018b72:	2300      	movs	r3, #0
 8018b74:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 8018b76:	2300      	movs	r3, #0
 8018b78:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 8018b7c:	2300      	movs	r3, #0
 8018b7e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 8018b82:	2301      	movs	r3, #1
 8018b84:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8018b88:	2320      	movs	r3, #32
 8018b8a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 8018b8e:	2301      	movs	r3, #1
 8018b90:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 8018b94:	2300      	movs	r3, #0
 8018b96:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8018b9a:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8018b9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8018ba0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8018ba4:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 8018ba6:	2300      	movs	r3, #0
 8018ba8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8018bac:	2302      	movs	r3, #2
 8018bae:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 8018bb2:	2300      	movs	r3, #0
 8018bb4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8018bb8:	2300      	movs	r3, #0
 8018bba:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8018bbe:	2300      	movs	r3, #0
 8018bc0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 8018bc4:	2301      	movs	r3, #1
 8018bc6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 8018bca:	2300      	movs	r3, #0
 8018bcc:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 8018bce:	2301      	movs	r3, #1
 8018bd0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 8018bd4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018bd8:	4619      	mov	r1, r3
 8018bda:	6878      	ldr	r0, [r7, #4]
 8018bdc:	f7ff fde6 	bl	80187ac <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8018be0:	2301      	movs	r3, #1
 8018be2:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8018be4:	2301      	movs	r3, #1
 8018be6:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8018be8:	2300      	movs	r3, #0
 8018bea:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 8018bec:	2300      	movs	r3, #0
 8018bee:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 8018bf2:	2300      	movs	r3, #0
 8018bf4:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8018bf6:	2300      	movs	r3, #0
 8018bf8:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8018bfa:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8018bfe:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 8018c00:	2300      	movs	r3, #0
 8018c02:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8018c04:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8018c08:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 8018c0a:	2300      	movs	r3, #0
 8018c0c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 8018c10:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8018c14:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 8018c16:	f107 0308 	add.w	r3, r7, #8
 8018c1a:	4619      	mov	r1, r3
 8018c1c:	6878      	ldr	r0, [r7, #4]
 8018c1e:	f7ff fee1 	bl	80189e4 <ETH_SetDMAConfig>
        }
 8018c22:	bf00      	nop
 8018c24:	3790      	adds	r7, #144	@ 0x90
 8018c26:	46bd      	mov	sp, r7
 8018c28:	bd80      	pop	{r7, pc}
	...

08018c2c <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 8018c2c:	b580      	push	{r7, lr}
 8018c2e:	b084      	sub	sp, #16
 8018c30:	af00      	add	r7, sp, #0
 8018c32:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	681b      	ldr	r3, [r3, #0]
 8018c38:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018c3c:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 8018c3e:	68fb      	ldr	r3, [r7, #12]
 8018c40:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8018c44:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 8018c46:	f003 fc7f 	bl	801c548 <HAL_RCC_GetHCLKFreq>
 8018c4a:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 8018c4c:	68bb      	ldr	r3, [r7, #8]
 8018c4e:	4a1e      	ldr	r2, [pc, #120]	@ (8018cc8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8018c50:	4293      	cmp	r3, r2
 8018c52:	d908      	bls.n	8018c66 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8018c54:	68bb      	ldr	r3, [r7, #8]
 8018c56:	4a1d      	ldr	r2, [pc, #116]	@ (8018ccc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8018c58:	4293      	cmp	r3, r2
 8018c5a:	d804      	bhi.n	8018c66 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 8018c5c:	68fb      	ldr	r3, [r7, #12]
 8018c5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8018c62:	60fb      	str	r3, [r7, #12]
 8018c64:	e027      	b.n	8018cb6 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 8018c66:	68bb      	ldr	r3, [r7, #8]
 8018c68:	4a18      	ldr	r2, [pc, #96]	@ (8018ccc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8018c6a:	4293      	cmp	r3, r2
 8018c6c:	d908      	bls.n	8018c80 <ETH_MAC_MDIO_ClkConfig+0x54>
 8018c6e:	68bb      	ldr	r3, [r7, #8]
 8018c70:	4a17      	ldr	r2, [pc, #92]	@ (8018cd0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8018c72:	4293      	cmp	r3, r2
 8018c74:	d204      	bcs.n	8018c80 <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8018c7c:	60fb      	str	r3, [r7, #12]
 8018c7e:	e01a      	b.n	8018cb6 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8018c80:	68bb      	ldr	r3, [r7, #8]
 8018c82:	4a13      	ldr	r2, [pc, #76]	@ (8018cd0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8018c84:	4293      	cmp	r3, r2
 8018c86:	d303      	bcc.n	8018c90 <ETH_MAC_MDIO_ClkConfig+0x64>
 8018c88:	68bb      	ldr	r3, [r7, #8]
 8018c8a:	4a12      	ldr	r2, [pc, #72]	@ (8018cd4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8018c8c:	4293      	cmp	r3, r2
 8018c8e:	d911      	bls.n	8018cb4 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 8018c90:	68bb      	ldr	r3, [r7, #8]
 8018c92:	4a10      	ldr	r2, [pc, #64]	@ (8018cd4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 8018c94:	4293      	cmp	r3, r2
 8018c96:	d908      	bls.n	8018caa <ETH_MAC_MDIO_ClkConfig+0x7e>
 8018c98:	68bb      	ldr	r3, [r7, #8]
 8018c9a:	4a0f      	ldr	r2, [pc, #60]	@ (8018cd8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 8018c9c:	4293      	cmp	r3, r2
 8018c9e:	d804      	bhi.n	8018caa <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 8018ca0:	68fb      	ldr	r3, [r7, #12]
 8018ca2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8018ca6:	60fb      	str	r3, [r7, #12]
 8018ca8:	e005      	b.n	8018cb6 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 8018caa:	68fb      	ldr	r3, [r7, #12]
 8018cac:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8018cb0:	60fb      	str	r3, [r7, #12]
 8018cb2:	e000      	b.n	8018cb6 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 8018cb4:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	68fa      	ldr	r2, [r7, #12]
 8018cbc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 8018cc0:	bf00      	nop
 8018cc2:	3710      	adds	r7, #16
 8018cc4:	46bd      	mov	sp, r7
 8018cc6:	bd80      	pop	{r7, pc}
 8018cc8:	01312cff 	.word	0x01312cff
 8018ccc:	02160ebf 	.word	0x02160ebf
 8018cd0:	03938700 	.word	0x03938700
 8018cd4:	05f5e0ff 	.word	0x05f5e0ff
 8018cd8:	08f0d17f 	.word	0x08f0d17f

08018cdc <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 8018cdc:	b480      	push	{r7}
 8018cde:	b085      	sub	sp, #20
 8018ce0:	af00      	add	r7, sp, #0
 8018ce2:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8018ce4:	2300      	movs	r3, #0
 8018ce6:	60fb      	str	r3, [r7, #12]
 8018ce8:	e01d      	b.n	8018d26 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	68d9      	ldr	r1, [r3, #12]
 8018cee:	68fa      	ldr	r2, [r7, #12]
 8018cf0:	4613      	mov	r3, r2
 8018cf2:	005b      	lsls	r3, r3, #1
 8018cf4:	4413      	add	r3, r2
 8018cf6:	00db      	lsls	r3, r3, #3
 8018cf8:	440b      	add	r3, r1
 8018cfa:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 8018cfc:	68bb      	ldr	r3, [r7, #8]
 8018cfe:	2200      	movs	r2, #0
 8018d00:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8018d02:	68bb      	ldr	r3, [r7, #8]
 8018d04:	2200      	movs	r2, #0
 8018d06:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 8018d08:	68bb      	ldr	r3, [r7, #8]
 8018d0a:	2200      	movs	r2, #0
 8018d0c:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 8018d0e:	68bb      	ldr	r3, [r7, #8]
 8018d10:	2200      	movs	r2, #0
 8018d12:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 8018d14:	68b9      	ldr	r1, [r7, #8]
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	68fa      	ldr	r2, [r7, #12]
 8018d1a:	3206      	adds	r2, #6
 8018d1c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8018d20:	68fb      	ldr	r3, [r7, #12]
 8018d22:	3301      	adds	r3, #1
 8018d24:	60fb      	str	r3, [r7, #12]
 8018d26:	68fb      	ldr	r3, [r7, #12]
 8018d28:	2b03      	cmp	r3, #3
 8018d2a:	d9de      	bls.n	8018cea <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	2200      	movs	r2, #0
 8018d30:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 8018d32:	687b      	ldr	r3, [r7, #4]
 8018d34:	2200      	movs	r2, #0
 8018d36:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 8018d38:	687b      	ldr	r3, [r7, #4]
 8018d3a:	681b      	ldr	r3, [r3, #0]
 8018d3c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018d40:	461a      	mov	r2, r3
 8018d42:	2303      	movs	r3, #3
 8018d44:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 8018d48:	687b      	ldr	r3, [r7, #4]
 8018d4a:	68da      	ldr	r2, [r3, #12]
 8018d4c:	687b      	ldr	r3, [r7, #4]
 8018d4e:	681b      	ldr	r3, [r3, #0]
 8018d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018d54:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 8018d58:	687b      	ldr	r3, [r7, #4]
 8018d5a:	68da      	ldr	r2, [r3, #12]
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	681b      	ldr	r3, [r3, #0]
 8018d60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018d64:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 8018d68:	bf00      	nop
 8018d6a:	3714      	adds	r7, #20
 8018d6c:	46bd      	mov	sp, r7
 8018d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d72:	4770      	bx	lr

08018d74 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 8018d74:	b480      	push	{r7}
 8018d76:	b085      	sub	sp, #20
 8018d78:	af00      	add	r7, sp, #0
 8018d7a:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8018d7c:	2300      	movs	r3, #0
 8018d7e:	60fb      	str	r3, [r7, #12]
 8018d80:	e023      	b.n	8018dca <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 8018d82:	687b      	ldr	r3, [r7, #4]
 8018d84:	6919      	ldr	r1, [r3, #16]
 8018d86:	68fa      	ldr	r2, [r7, #12]
 8018d88:	4613      	mov	r3, r2
 8018d8a:	005b      	lsls	r3, r3, #1
 8018d8c:	4413      	add	r3, r2
 8018d8e:	00db      	lsls	r3, r3, #3
 8018d90:	440b      	add	r3, r1
 8018d92:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 8018d94:	68bb      	ldr	r3, [r7, #8]
 8018d96:	2200      	movs	r2, #0
 8018d98:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 8018d9a:	68bb      	ldr	r3, [r7, #8]
 8018d9c:	2200      	movs	r2, #0
 8018d9e:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 8018da0:	68bb      	ldr	r3, [r7, #8]
 8018da2:	2200      	movs	r2, #0
 8018da4:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 8018da6:	68bb      	ldr	r3, [r7, #8]
 8018da8:	2200      	movs	r2, #0
 8018daa:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 8018dac:	68bb      	ldr	r3, [r7, #8]
 8018dae:	2200      	movs	r2, #0
 8018db0:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 8018db2:	68bb      	ldr	r3, [r7, #8]
 8018db4:	2200      	movs	r2, #0
 8018db6:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 8018db8:	68b9      	ldr	r1, [r7, #8]
 8018dba:	687b      	ldr	r3, [r7, #4]
 8018dbc:	68fa      	ldr	r2, [r7, #12]
 8018dbe:	320c      	adds	r2, #12
 8018dc0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 8018dc4:	68fb      	ldr	r3, [r7, #12]
 8018dc6:	3301      	adds	r3, #1
 8018dc8:	60fb      	str	r3, [r7, #12]
 8018dca:	68fb      	ldr	r3, [r7, #12]
 8018dcc:	2b03      	cmp	r3, #3
 8018dce:	d9d8      	bls.n	8018d82 <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	2200      	movs	r2, #0
 8018dd4:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 8018dd6:	687b      	ldr	r3, [r7, #4]
 8018dd8:	2200      	movs	r2, #0
 8018dda:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 8018ddc:	687b      	ldr	r3, [r7, #4]
 8018dde:	2200      	movs	r2, #0
 8018de0:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 8018de2:	687b      	ldr	r3, [r7, #4]
 8018de4:	2200      	movs	r2, #0
 8018de6:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 8018de8:	687b      	ldr	r3, [r7, #4]
 8018dea:	2200      	movs	r2, #0
 8018dec:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	681b      	ldr	r3, [r3, #0]
 8018df2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018df6:	461a      	mov	r2, r3
 8018df8:	2303      	movs	r3, #3
 8018dfa:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	691a      	ldr	r2, [r3, #16]
 8018e02:	687b      	ldr	r3, [r7, #4]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e0a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 8018e0e:	687b      	ldr	r3, [r7, #4]
 8018e10:	691b      	ldr	r3, [r3, #16]
 8018e12:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8018e16:	687b      	ldr	r3, [r7, #4]
 8018e18:	681b      	ldr	r3, [r3, #0]
 8018e1a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e1e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 8018e22:	bf00      	nop
 8018e24:	3714      	adds	r7, #20
 8018e26:	46bd      	mov	sp, r7
 8018e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e2c:	4770      	bx	lr
	...

08018e30 <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 8018e30:	b580      	push	{r7, lr}
 8018e32:	b086      	sub	sp, #24
 8018e34:	af00      	add	r7, sp, #0
 8018e36:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 8018e38:	687b      	ldr	r3, [r7, #4]
 8018e3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018e3c:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8018e3e:	e032      	b.n	8018ea6 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	697a      	ldr	r2, [r7, #20]
 8018e44:	3206      	adds	r2, #6
 8018e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018e4a:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 8018e4c:	693b      	ldr	r3, [r7, #16]
 8018e4e:	68db      	ldr	r3, [r3, #12]
 8018e50:	2b00      	cmp	r3, #0
 8018e52:	db31      	blt.n	8018eb8 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 8018e54:	693b      	ldr	r3, [r7, #16]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 8018e5a:	68fb      	ldr	r3, [r7, #12]
 8018e5c:	2b00      	cmp	r3, #0
 8018e5e:	d02d      	beq.n	8018ebc <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 8018e60:	68f8      	ldr	r0, [r7, #12]
 8018e62:	f7f0 fbd2 	bl	800960a <pxPacketBuffer_to_NetworkBuffer>
 8018e66:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 8018e68:	68bb      	ldr	r3, [r7, #8]
 8018e6a:	2b00      	cmp	r3, #0
 8018e6c:	d002      	beq.n	8018e74 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8018e6e:	68b8      	ldr	r0, [r7, #8]
 8018e70:	f7fd faa2 	bl	80163b8 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 8018e74:	693b      	ldr	r3, [r7, #16]
 8018e76:	2200      	movs	r2, #0
 8018e78:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 8018e7a:	697b      	ldr	r3, [r7, #20]
 8018e7c:	3301      	adds	r3, #1
 8018e7e:	617b      	str	r3, [r7, #20]
 8018e80:	697b      	ldr	r3, [r7, #20]
 8018e82:	2b03      	cmp	r3, #3
 8018e84:	d902      	bls.n	8018e8c <ETH_Clear_Tx_Descriptors+0x5c>
 8018e86:	697b      	ldr	r3, [r7, #20]
 8018e88:	3b04      	subs	r3, #4
 8018e8a:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	697a      	ldr	r2, [r7, #20]
 8018e90:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 8018e92:	f3bf 8f4f 	dsb	sy
}
 8018e96:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 8018e98:	4b0b      	ldr	r3, [pc, #44]	@ (8018ec8 <ETH_Clear_Tx_Descriptors+0x98>)
 8018e9a:	6818      	ldr	r0, [r3, #0]
 8018e9c:	2300      	movs	r3, #0
 8018e9e:	2200      	movs	r2, #0
 8018ea0:	2100      	movs	r1, #0
 8018ea2:	f7e9 fcfd 	bl	80028a0 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 8018ea6:	4b08      	ldr	r3, [pc, #32]	@ (8018ec8 <ETH_Clear_Tx_Descriptors+0x98>)
 8018ea8:	681b      	ldr	r3, [r3, #0]
 8018eaa:	4618      	mov	r0, r3
 8018eac:	f7e9 ff9e 	bl	8002dec <uxQueueMessagesWaiting>
 8018eb0:	4603      	mov	r3, r0
 8018eb2:	2b04      	cmp	r3, #4
 8018eb4:	d1c4      	bne.n	8018e40 <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 8018eb6:	e002      	b.n	8018ebe <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 8018eb8:	bf00      	nop
 8018eba:	e000      	b.n	8018ebe <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 8018ebc:	bf00      	nop
        }
 8018ebe:	bf00      	nop
 8018ec0:	3718      	adds	r7, #24
 8018ec2:	46bd      	mov	sp, r7
 8018ec4:	bd80      	pop	{r7, pc}
 8018ec6:	bf00      	nop
 8018ec8:	2000211c 	.word	0x2000211c

08018ecc <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 8018ecc:	b480      	push	{r7}
 8018ece:	b08b      	sub	sp, #44	@ 0x2c
 8018ed0:	af00      	add	r7, sp, #0
 8018ed2:	60f8      	str	r0, [r7, #12]
 8018ed4:	60b9      	str	r1, [r7, #8]
 8018ed6:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 8018ed8:	68fb      	ldr	r3, [r7, #12]
 8018eda:	3318      	adds	r3, #24
 8018edc:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8018ede:	6a3b      	ldr	r3, [r7, #32]
 8018ee0:	691b      	ldr	r3, [r3, #16]
 8018ee2:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 8018ee4:	6a3b      	ldr	r3, [r7, #32]
 8018ee6:	69fa      	ldr	r2, [r7, #28]
 8018ee8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018eec:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 8018eee:	68bb      	ldr	r3, [r7, #8]
 8018ef0:	689b      	ldr	r3, [r3, #8]
 8018ef2:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 8018ef4:	697b      	ldr	r3, [r7, #20]
 8018ef6:	2200      	movs	r2, #0
 8018ef8:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 8018efa:	69bb      	ldr	r3, [r7, #24]
 8018efc:	68db      	ldr	r3, [r3, #12]
 8018efe:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 8018f00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f02:	2b00      	cmp	r3, #0
 8018f04:	da01      	bge.n	8018f0a <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 8018f06:	2302      	movs	r3, #2
 8018f08:	e05c      	b.n	8018fc4 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 8018f0a:	697b      	ldr	r3, [r7, #20]
 8018f0c:	681b      	ldr	r3, [r3, #0]
 8018f0e:	461a      	mov	r2, r3
 8018f10:	69bb      	ldr	r3, [r7, #24]
 8018f12:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 8018f14:	69bb      	ldr	r3, [r7, #24]
 8018f16:	689a      	ldr	r2, [r3, #8]
 8018f18:	4b2d      	ldr	r3, [pc, #180]	@ (8018fd0 <ETH_Prepare_Tx_Descriptors+0x104>)
 8018f1a:	4013      	ands	r3, r2
 8018f1c:	697a      	ldr	r2, [r7, #20]
 8018f1e:	6852      	ldr	r2, [r2, #4]
 8018f20:	431a      	orrs	r2, r3
 8018f22:	69bb      	ldr	r3, [r7, #24]
 8018f24:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8018f26:	69bb      	ldr	r3, [r7, #24]
 8018f28:	2200      	movs	r2, #0
 8018f2a:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 8018f2c:	69bb      	ldr	r3, [r7, #24]
 8018f2e:	689a      	ldr	r2, [r3, #8]
 8018f30:	4b28      	ldr	r3, [pc, #160]	@ (8018fd4 <ETH_Prepare_Tx_Descriptors+0x108>)
 8018f32:	4013      	ands	r3, r2
 8018f34:	69ba      	ldr	r2, [r7, #24]
 8018f36:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 8018f38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018f3a:	4b27      	ldr	r3, [pc, #156]	@ (8018fd8 <ETH_Prepare_Tx_Descriptors+0x10c>)
 8018f3c:	4013      	ands	r3, r2
 8018f3e:	68ba      	ldr	r2, [r7, #8]
 8018f40:	6852      	ldr	r2, [r2, #4]
 8018f42:	4313      	orrs	r3, r2
 8018f44:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 8018f46:	68bb      	ldr	r3, [r7, #8]
 8018f48:	681b      	ldr	r3, [r3, #0]
 8018f4a:	f003 0301 	and.w	r3, r3, #1
 8018f4e:	2b00      	cmp	r3, #0
 8018f50:	d006      	beq.n	8018f60 <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 8018f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f54:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8018f58:	68bb      	ldr	r3, [r7, #8]
 8018f5a:	695b      	ldr	r3, [r3, #20]
 8018f5c:	4313      	orrs	r3, r2
 8018f5e:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 8018f60:	68bb      	ldr	r3, [r7, #8]
 8018f62:	681b      	ldr	r3, [r3, #0]
 8018f64:	f003 0320 	and.w	r3, r3, #32
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d006      	beq.n	8018f7a <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 8018f6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f6e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8018f72:	68bb      	ldr	r3, [r7, #8]
 8018f74:	691b      	ldr	r3, [r3, #16]
 8018f76:	4313      	orrs	r3, r2
 8018f78:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 8018f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f7c:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8018f80:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 8018f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f84:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8018f88:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 8018f8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018f8c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8018f90:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d006      	beq.n	8018fa6 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8018f98:	69bb      	ldr	r3, [r7, #24]
 8018f9a:	689b      	ldr	r3, [r3, #8]
 8018f9c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8018fa0:	69bb      	ldr	r3, [r7, #24]
 8018fa2:	609a      	str	r2, [r3, #8]
 8018fa4:	e005      	b.n	8018fb2 <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 8018fa6:	69bb      	ldr	r3, [r7, #24]
 8018fa8:	689b      	ldr	r3, [r3, #8]
 8018faa:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8018fae:	69bb      	ldr	r3, [r7, #24]
 8018fb0:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 8018fb2:	69bb      	ldr	r3, [r7, #24]
 8018fb4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018fb6:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 8018fb8:	69bb      	ldr	r3, [r7, #24]
 8018fba:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8018fbc:	f3bf 8f4f 	dsb	sy
}
 8018fc0:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 8018fc2:	2300      	movs	r3, #0
        }
 8018fc4:	4618      	mov	r0, r3
 8018fc6:	372c      	adds	r7, #44	@ 0x2c
 8018fc8:	46bd      	mov	sp, r7
 8018fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018fce:	4770      	bx	lr
 8018fd0:	ffffc000 	.word	0xffffc000
 8018fd4:	c000ffff 	.word	0xc000ffff
 8018fd8:	ffff8000 	.word	0xffff8000

08018fdc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8018fdc:	b580      	push	{r7, lr}
 8018fde:	b082      	sub	sp, #8
 8018fe0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8018fe2:	2003      	movs	r0, #3
 8018fe4:	f000 f97c 	bl	80192e0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8018fe8:	f003 f934 	bl	801c254 <HAL_RCC_GetSysClockFreq>
 8018fec:	4602      	mov	r2, r0
 8018fee:	4b15      	ldr	r3, [pc, #84]	@ (8019044 <HAL_Init+0x68>)
 8018ff0:	699b      	ldr	r3, [r3, #24]
 8018ff2:	0a1b      	lsrs	r3, r3, #8
 8018ff4:	f003 030f 	and.w	r3, r3, #15
 8018ff8:	4913      	ldr	r1, [pc, #76]	@ (8019048 <HAL_Init+0x6c>)
 8018ffa:	5ccb      	ldrb	r3, [r1, r3]
 8018ffc:	f003 031f 	and.w	r3, r3, #31
 8019000:	fa22 f303 	lsr.w	r3, r2, r3
 8019004:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8019006:	4b0f      	ldr	r3, [pc, #60]	@ (8019044 <HAL_Init+0x68>)
 8019008:	699b      	ldr	r3, [r3, #24]
 801900a:	f003 030f 	and.w	r3, r3, #15
 801900e:	4a0e      	ldr	r2, [pc, #56]	@ (8019048 <HAL_Init+0x6c>)
 8019010:	5cd3      	ldrb	r3, [r2, r3]
 8019012:	f003 031f 	and.w	r3, r3, #31
 8019016:	687a      	ldr	r2, [r7, #4]
 8019018:	fa22 f303 	lsr.w	r3, r2, r3
 801901c:	4a0b      	ldr	r2, [pc, #44]	@ (801904c <HAL_Init+0x70>)
 801901e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8019020:	4a0b      	ldr	r2, [pc, #44]	@ (8019050 <HAL_Init+0x74>)
 8019022:	687b      	ldr	r3, [r7, #4]
 8019024:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8019026:	200f      	movs	r0, #15
 8019028:	f000 f814 	bl	8019054 <HAL_InitTick>
 801902c:	4603      	mov	r3, r0
 801902e:	2b00      	cmp	r3, #0
 8019030:	d001      	beq.n	8019036 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8019032:	2301      	movs	r3, #1
 8019034:	e002      	b.n	801903c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8019036:	f7e8 fa97 	bl	8001568 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801903a:	2300      	movs	r3, #0
}
 801903c:	4618      	mov	r0, r3
 801903e:	3708      	adds	r7, #8
 8019040:	46bd      	mov	sp, r7
 8019042:	bd80      	pop	{r7, pc}
 8019044:	58024400 	.word	0x58024400
 8019048:	08025bdc 	.word	0x08025bdc
 801904c:	20000004 	.word	0x20000004
 8019050:	20000000 	.word	0x20000000

08019054 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8019054:	b580      	push	{r7, lr}
 8019056:	b082      	sub	sp, #8
 8019058:	af00      	add	r7, sp, #0
 801905a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801905c:	4b15      	ldr	r3, [pc, #84]	@ (80190b4 <HAL_InitTick+0x60>)
 801905e:	781b      	ldrb	r3, [r3, #0]
 8019060:	2b00      	cmp	r3, #0
 8019062:	d101      	bne.n	8019068 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8019064:	2301      	movs	r3, #1
 8019066:	e021      	b.n	80190ac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8019068:	4b13      	ldr	r3, [pc, #76]	@ (80190b8 <HAL_InitTick+0x64>)
 801906a:	681a      	ldr	r2, [r3, #0]
 801906c:	4b11      	ldr	r3, [pc, #68]	@ (80190b4 <HAL_InitTick+0x60>)
 801906e:	781b      	ldrb	r3, [r3, #0]
 8019070:	4619      	mov	r1, r3
 8019072:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019076:	fbb3 f3f1 	udiv	r3, r3, r1
 801907a:	fbb2 f3f3 	udiv	r3, r2, r3
 801907e:	4618      	mov	r0, r3
 8019080:	f000 f961 	bl	8019346 <HAL_SYSTICK_Config>
 8019084:	4603      	mov	r3, r0
 8019086:	2b00      	cmp	r3, #0
 8019088:	d001      	beq.n	801908e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801908a:	2301      	movs	r3, #1
 801908c:	e00e      	b.n	80190ac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801908e:	687b      	ldr	r3, [r7, #4]
 8019090:	2b0f      	cmp	r3, #15
 8019092:	d80a      	bhi.n	80190aa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8019094:	2200      	movs	r2, #0
 8019096:	6879      	ldr	r1, [r7, #4]
 8019098:	f04f 30ff 	mov.w	r0, #4294967295
 801909c:	f000 f92b 	bl	80192f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80190a0:	4a06      	ldr	r2, [pc, #24]	@ (80190bc <HAL_InitTick+0x68>)
 80190a2:	687b      	ldr	r3, [r7, #4]
 80190a4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80190a6:	2300      	movs	r3, #0
 80190a8:	e000      	b.n	80190ac <HAL_InitTick+0x58>
    return HAL_ERROR;
 80190aa:	2301      	movs	r3, #1
}
 80190ac:	4618      	mov	r0, r3
 80190ae:	3708      	adds	r7, #8
 80190b0:	46bd      	mov	sp, r7
 80190b2:	bd80      	pop	{r7, pc}
 80190b4:	20000024 	.word	0x20000024
 80190b8:	20000000 	.word	0x20000000
 80190bc:	20000020 	.word	0x20000020

080190c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80190c0:	b480      	push	{r7}
 80190c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80190c4:	4b06      	ldr	r3, [pc, #24]	@ (80190e0 <HAL_IncTick+0x20>)
 80190c6:	781b      	ldrb	r3, [r3, #0]
 80190c8:	461a      	mov	r2, r3
 80190ca:	4b06      	ldr	r3, [pc, #24]	@ (80190e4 <HAL_IncTick+0x24>)
 80190cc:	681b      	ldr	r3, [r3, #0]
 80190ce:	4413      	add	r3, r2
 80190d0:	4a04      	ldr	r2, [pc, #16]	@ (80190e4 <HAL_IncTick+0x24>)
 80190d2:	6013      	str	r3, [r2, #0]
}
 80190d4:	bf00      	nop
 80190d6:	46bd      	mov	sp, r7
 80190d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190dc:	4770      	bx	lr
 80190de:	bf00      	nop
 80190e0:	20000024 	.word	0x20000024
 80190e4:	20002228 	.word	0x20002228

080190e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80190e8:	b480      	push	{r7}
 80190ea:	af00      	add	r7, sp, #0
  return uwTick;
 80190ec:	4b03      	ldr	r3, [pc, #12]	@ (80190fc <HAL_GetTick+0x14>)
 80190ee:	681b      	ldr	r3, [r3, #0]
}
 80190f0:	4618      	mov	r0, r3
 80190f2:	46bd      	mov	sp, r7
 80190f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190f8:	4770      	bx	lr
 80190fa:	bf00      	nop
 80190fc:	20002228 	.word	0x20002228

08019100 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8019100:	b480      	push	{r7}
 8019102:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8019104:	4b03      	ldr	r3, [pc, #12]	@ (8019114 <HAL_GetREVID+0x14>)
 8019106:	681b      	ldr	r3, [r3, #0]
 8019108:	0c1b      	lsrs	r3, r3, #16
}
 801910a:	4618      	mov	r0, r3
 801910c:	46bd      	mov	sp, r7
 801910e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019112:	4770      	bx	lr
 8019114:	5c001000 	.word	0x5c001000

08019118 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8019118:	b480      	push	{r7}
 801911a:	b083      	sub	sp, #12
 801911c:	af00      	add	r7, sp, #0
 801911e:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8019120:	4b06      	ldr	r3, [pc, #24]	@ (801913c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8019122:	685b      	ldr	r3, [r3, #4]
 8019124:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8019128:	4904      	ldr	r1, [pc, #16]	@ (801913c <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801912a:	687b      	ldr	r3, [r7, #4]
 801912c:	4313      	orrs	r3, r2
 801912e:	604b      	str	r3, [r1, #4]
}
 8019130:	bf00      	nop
 8019132:	370c      	adds	r7, #12
 8019134:	46bd      	mov	sp, r7
 8019136:	f85d 7b04 	ldr.w	r7, [sp], #4
 801913a:	4770      	bx	lr
 801913c:	58000400 	.word	0x58000400

08019140 <__NVIC_SetPriorityGrouping>:
{
 8019140:	b480      	push	{r7}
 8019142:	b085      	sub	sp, #20
 8019144:	af00      	add	r7, sp, #0
 8019146:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	f003 0307 	and.w	r3, r3, #7
 801914e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8019150:	4b0b      	ldr	r3, [pc, #44]	@ (8019180 <__NVIC_SetPriorityGrouping+0x40>)
 8019152:	68db      	ldr	r3, [r3, #12]
 8019154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8019156:	68ba      	ldr	r2, [r7, #8]
 8019158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 801915c:	4013      	ands	r3, r2
 801915e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8019160:	68fb      	ldr	r3, [r7, #12]
 8019162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8019164:	68bb      	ldr	r3, [r7, #8]
 8019166:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8019168:	4b06      	ldr	r3, [pc, #24]	@ (8019184 <__NVIC_SetPriorityGrouping+0x44>)
 801916a:	4313      	orrs	r3, r2
 801916c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 801916e:	4a04      	ldr	r2, [pc, #16]	@ (8019180 <__NVIC_SetPriorityGrouping+0x40>)
 8019170:	68bb      	ldr	r3, [r7, #8]
 8019172:	60d3      	str	r3, [r2, #12]
}
 8019174:	bf00      	nop
 8019176:	3714      	adds	r7, #20
 8019178:	46bd      	mov	sp, r7
 801917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801917e:	4770      	bx	lr
 8019180:	e000ed00 	.word	0xe000ed00
 8019184:	05fa0000 	.word	0x05fa0000

08019188 <__NVIC_GetPriorityGrouping>:
{
 8019188:	b480      	push	{r7}
 801918a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 801918c:	4b04      	ldr	r3, [pc, #16]	@ (80191a0 <__NVIC_GetPriorityGrouping+0x18>)
 801918e:	68db      	ldr	r3, [r3, #12]
 8019190:	0a1b      	lsrs	r3, r3, #8
 8019192:	f003 0307 	and.w	r3, r3, #7
}
 8019196:	4618      	mov	r0, r3
 8019198:	46bd      	mov	sp, r7
 801919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801919e:	4770      	bx	lr
 80191a0:	e000ed00 	.word	0xe000ed00

080191a4 <__NVIC_EnableIRQ>:
{
 80191a4:	b480      	push	{r7}
 80191a6:	b083      	sub	sp, #12
 80191a8:	af00      	add	r7, sp, #0
 80191aa:	4603      	mov	r3, r0
 80191ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80191ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80191b2:	2b00      	cmp	r3, #0
 80191b4:	db0b      	blt.n	80191ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80191b6:	88fb      	ldrh	r3, [r7, #6]
 80191b8:	f003 021f 	and.w	r2, r3, #31
 80191bc:	4907      	ldr	r1, [pc, #28]	@ (80191dc <__NVIC_EnableIRQ+0x38>)
 80191be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80191c2:	095b      	lsrs	r3, r3, #5
 80191c4:	2001      	movs	r0, #1
 80191c6:	fa00 f202 	lsl.w	r2, r0, r2
 80191ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80191ce:	bf00      	nop
 80191d0:	370c      	adds	r7, #12
 80191d2:	46bd      	mov	sp, r7
 80191d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191d8:	4770      	bx	lr
 80191da:	bf00      	nop
 80191dc:	e000e100 	.word	0xe000e100

080191e0 <__NVIC_SetPriority>:
{
 80191e0:	b480      	push	{r7}
 80191e2:	b083      	sub	sp, #12
 80191e4:	af00      	add	r7, sp, #0
 80191e6:	4603      	mov	r3, r0
 80191e8:	6039      	str	r1, [r7, #0]
 80191ea:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80191ec:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80191f0:	2b00      	cmp	r3, #0
 80191f2:	db0a      	blt.n	801920a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80191f4:	683b      	ldr	r3, [r7, #0]
 80191f6:	b2da      	uxtb	r2, r3
 80191f8:	490c      	ldr	r1, [pc, #48]	@ (801922c <__NVIC_SetPriority+0x4c>)
 80191fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80191fe:	0112      	lsls	r2, r2, #4
 8019200:	b2d2      	uxtb	r2, r2
 8019202:	440b      	add	r3, r1
 8019204:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8019208:	e00a      	b.n	8019220 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801920a:	683b      	ldr	r3, [r7, #0]
 801920c:	b2da      	uxtb	r2, r3
 801920e:	4908      	ldr	r1, [pc, #32]	@ (8019230 <__NVIC_SetPriority+0x50>)
 8019210:	88fb      	ldrh	r3, [r7, #6]
 8019212:	f003 030f 	and.w	r3, r3, #15
 8019216:	3b04      	subs	r3, #4
 8019218:	0112      	lsls	r2, r2, #4
 801921a:	b2d2      	uxtb	r2, r2
 801921c:	440b      	add	r3, r1
 801921e:	761a      	strb	r2, [r3, #24]
}
 8019220:	bf00      	nop
 8019222:	370c      	adds	r7, #12
 8019224:	46bd      	mov	sp, r7
 8019226:	f85d 7b04 	ldr.w	r7, [sp], #4
 801922a:	4770      	bx	lr
 801922c:	e000e100 	.word	0xe000e100
 8019230:	e000ed00 	.word	0xe000ed00

08019234 <NVIC_EncodePriority>:
{
 8019234:	b480      	push	{r7}
 8019236:	b089      	sub	sp, #36	@ 0x24
 8019238:	af00      	add	r7, sp, #0
 801923a:	60f8      	str	r0, [r7, #12]
 801923c:	60b9      	str	r1, [r7, #8]
 801923e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019240:	68fb      	ldr	r3, [r7, #12]
 8019242:	f003 0307 	and.w	r3, r3, #7
 8019246:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8019248:	69fb      	ldr	r3, [r7, #28]
 801924a:	f1c3 0307 	rsb	r3, r3, #7
 801924e:	2b04      	cmp	r3, #4
 8019250:	bf28      	it	cs
 8019252:	2304      	movcs	r3, #4
 8019254:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8019256:	69fb      	ldr	r3, [r7, #28]
 8019258:	3304      	adds	r3, #4
 801925a:	2b06      	cmp	r3, #6
 801925c:	d902      	bls.n	8019264 <NVIC_EncodePriority+0x30>
 801925e:	69fb      	ldr	r3, [r7, #28]
 8019260:	3b03      	subs	r3, #3
 8019262:	e000      	b.n	8019266 <NVIC_EncodePriority+0x32>
 8019264:	2300      	movs	r3, #0
 8019266:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8019268:	f04f 32ff 	mov.w	r2, #4294967295
 801926c:	69bb      	ldr	r3, [r7, #24]
 801926e:	fa02 f303 	lsl.w	r3, r2, r3
 8019272:	43da      	mvns	r2, r3
 8019274:	68bb      	ldr	r3, [r7, #8]
 8019276:	401a      	ands	r2, r3
 8019278:	697b      	ldr	r3, [r7, #20]
 801927a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 801927c:	f04f 31ff 	mov.w	r1, #4294967295
 8019280:	697b      	ldr	r3, [r7, #20]
 8019282:	fa01 f303 	lsl.w	r3, r1, r3
 8019286:	43d9      	mvns	r1, r3
 8019288:	687b      	ldr	r3, [r7, #4]
 801928a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 801928c:	4313      	orrs	r3, r2
}
 801928e:	4618      	mov	r0, r3
 8019290:	3724      	adds	r7, #36	@ 0x24
 8019292:	46bd      	mov	sp, r7
 8019294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019298:	4770      	bx	lr
	...

0801929c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 801929c:	b580      	push	{r7, lr}
 801929e:	b082      	sub	sp, #8
 80192a0:	af00      	add	r7, sp, #0
 80192a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80192a4:	687b      	ldr	r3, [r7, #4]
 80192a6:	3b01      	subs	r3, #1
 80192a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80192ac:	d301      	bcc.n	80192b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80192ae:	2301      	movs	r3, #1
 80192b0:	e00f      	b.n	80192d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80192b2:	4a0a      	ldr	r2, [pc, #40]	@ (80192dc <SysTick_Config+0x40>)
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	3b01      	subs	r3, #1
 80192b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80192ba:	210f      	movs	r1, #15
 80192bc:	f04f 30ff 	mov.w	r0, #4294967295
 80192c0:	f7ff ff8e 	bl	80191e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80192c4:	4b05      	ldr	r3, [pc, #20]	@ (80192dc <SysTick_Config+0x40>)
 80192c6:	2200      	movs	r2, #0
 80192c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80192ca:	4b04      	ldr	r3, [pc, #16]	@ (80192dc <SysTick_Config+0x40>)
 80192cc:	2207      	movs	r2, #7
 80192ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80192d0:	2300      	movs	r3, #0
}
 80192d2:	4618      	mov	r0, r3
 80192d4:	3708      	adds	r7, #8
 80192d6:	46bd      	mov	sp, r7
 80192d8:	bd80      	pop	{r7, pc}
 80192da:	bf00      	nop
 80192dc:	e000e010 	.word	0xe000e010

080192e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80192e0:	b580      	push	{r7, lr}
 80192e2:	b082      	sub	sp, #8
 80192e4:	af00      	add	r7, sp, #0
 80192e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80192e8:	6878      	ldr	r0, [r7, #4]
 80192ea:	f7ff ff29 	bl	8019140 <__NVIC_SetPriorityGrouping>
}
 80192ee:	bf00      	nop
 80192f0:	3708      	adds	r7, #8
 80192f2:	46bd      	mov	sp, r7
 80192f4:	bd80      	pop	{r7, pc}

080192f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80192f6:	b580      	push	{r7, lr}
 80192f8:	b086      	sub	sp, #24
 80192fa:	af00      	add	r7, sp, #0
 80192fc:	4603      	mov	r3, r0
 80192fe:	60b9      	str	r1, [r7, #8]
 8019300:	607a      	str	r2, [r7, #4]
 8019302:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8019304:	f7ff ff40 	bl	8019188 <__NVIC_GetPriorityGrouping>
 8019308:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 801930a:	687a      	ldr	r2, [r7, #4]
 801930c:	68b9      	ldr	r1, [r7, #8]
 801930e:	6978      	ldr	r0, [r7, #20]
 8019310:	f7ff ff90 	bl	8019234 <NVIC_EncodePriority>
 8019314:	4602      	mov	r2, r0
 8019316:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801931a:	4611      	mov	r1, r2
 801931c:	4618      	mov	r0, r3
 801931e:	f7ff ff5f 	bl	80191e0 <__NVIC_SetPriority>
}
 8019322:	bf00      	nop
 8019324:	3718      	adds	r7, #24
 8019326:	46bd      	mov	sp, r7
 8019328:	bd80      	pop	{r7, pc}

0801932a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 801932a:	b580      	push	{r7, lr}
 801932c:	b082      	sub	sp, #8
 801932e:	af00      	add	r7, sp, #0
 8019330:	4603      	mov	r3, r0
 8019332:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8019334:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019338:	4618      	mov	r0, r3
 801933a:	f7ff ff33 	bl	80191a4 <__NVIC_EnableIRQ>
}
 801933e:	bf00      	nop
 8019340:	3708      	adds	r7, #8
 8019342:	46bd      	mov	sp, r7
 8019344:	bd80      	pop	{r7, pc}

08019346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8019346:	b580      	push	{r7, lr}
 8019348:	b082      	sub	sp, #8
 801934a:	af00      	add	r7, sp, #0
 801934c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 801934e:	6878      	ldr	r0, [r7, #4]
 8019350:	f7ff ffa4 	bl	801929c <SysTick_Config>
 8019354:	4603      	mov	r3, r0
}
 8019356:	4618      	mov	r0, r3
 8019358:	3708      	adds	r7, #8
 801935a:	46bd      	mov	sp, r7
 801935c:	bd80      	pop	{r7, pc}
	...

08019360 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8019360:	b480      	push	{r7}
 8019362:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8019364:	f3bf 8f5f 	dmb	sy
}
 8019368:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 801936a:	4b07      	ldr	r3, [pc, #28]	@ (8019388 <HAL_MPU_Disable+0x28>)
 801936c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801936e:	4a06      	ldr	r2, [pc, #24]	@ (8019388 <HAL_MPU_Disable+0x28>)
 8019370:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8019374:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 8019376:	4b05      	ldr	r3, [pc, #20]	@ (801938c <HAL_MPU_Disable+0x2c>)
 8019378:	2200      	movs	r2, #0
 801937a:	605a      	str	r2, [r3, #4]
}
 801937c:	bf00      	nop
 801937e:	46bd      	mov	sp, r7
 8019380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019384:	4770      	bx	lr
 8019386:	bf00      	nop
 8019388:	e000ed00 	.word	0xe000ed00
 801938c:	e000ed90 	.word	0xe000ed90

08019390 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8019390:	b480      	push	{r7}
 8019392:	b083      	sub	sp, #12
 8019394:	af00      	add	r7, sp, #0
 8019396:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8019398:	4a0b      	ldr	r2, [pc, #44]	@ (80193c8 <HAL_MPU_Enable+0x38>)
 801939a:	687b      	ldr	r3, [r7, #4]
 801939c:	f043 0301 	orr.w	r3, r3, #1
 80193a0:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80193a2:	4b0a      	ldr	r3, [pc, #40]	@ (80193cc <HAL_MPU_Enable+0x3c>)
 80193a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80193a6:	4a09      	ldr	r2, [pc, #36]	@ (80193cc <HAL_MPU_Enable+0x3c>)
 80193a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80193ac:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80193ae:	f3bf 8f4f 	dsb	sy
}
 80193b2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80193b4:	f3bf 8f6f 	isb	sy
}
 80193b8:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80193ba:	bf00      	nop
 80193bc:	370c      	adds	r7, #12
 80193be:	46bd      	mov	sp, r7
 80193c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193c4:	4770      	bx	lr
 80193c6:	bf00      	nop
 80193c8:	e000ed90 	.word	0xe000ed90
 80193cc:	e000ed00 	.word	0xe000ed00

080193d0 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 80193d0:	b480      	push	{r7}
 80193d2:	b083      	sub	sp, #12
 80193d4:	af00      	add	r7, sp, #0
 80193d6:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80193d8:	687b      	ldr	r3, [r7, #4]
 80193da:	785a      	ldrb	r2, [r3, #1]
 80193dc:	4b1b      	ldr	r3, [pc, #108]	@ (801944c <HAL_MPU_ConfigRegion+0x7c>)
 80193de:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80193e0:	4b1a      	ldr	r3, [pc, #104]	@ (801944c <HAL_MPU_ConfigRegion+0x7c>)
 80193e2:	691b      	ldr	r3, [r3, #16]
 80193e4:	4a19      	ldr	r2, [pc, #100]	@ (801944c <HAL_MPU_ConfigRegion+0x7c>)
 80193e6:	f023 0301 	bic.w	r3, r3, #1
 80193ea:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80193ec:	4a17      	ldr	r2, [pc, #92]	@ (801944c <HAL_MPU_ConfigRegion+0x7c>)
 80193ee:	687b      	ldr	r3, [r7, #4]
 80193f0:	685b      	ldr	r3, [r3, #4]
 80193f2:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80193f4:	687b      	ldr	r3, [r7, #4]
 80193f6:	7b1b      	ldrb	r3, [r3, #12]
 80193f8:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80193fa:	687b      	ldr	r3, [r7, #4]
 80193fc:	7adb      	ldrb	r3, [r3, #11]
 80193fe:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019400:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019402:	687b      	ldr	r3, [r7, #4]
 8019404:	7a9b      	ldrb	r3, [r3, #10]
 8019406:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019408:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	7b5b      	ldrb	r3, [r3, #13]
 801940e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019410:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	7b9b      	ldrb	r3, [r3, #14]
 8019416:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019418:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 801941a:	687b      	ldr	r3, [r7, #4]
 801941c:	7bdb      	ldrb	r3, [r3, #15]
 801941e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019420:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019422:	687b      	ldr	r3, [r7, #4]
 8019424:	7a5b      	ldrb	r3, [r3, #9]
 8019426:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019428:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801942a:	687b      	ldr	r3, [r7, #4]
 801942c:	7a1b      	ldrb	r3, [r3, #8]
 801942e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019430:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8019432:	687a      	ldr	r2, [r7, #4]
 8019434:	7812      	ldrb	r2, [r2, #0]
 8019436:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019438:	4a04      	ldr	r2, [pc, #16]	@ (801944c <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 801943a:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801943c:	6113      	str	r3, [r2, #16]
}
 801943e:	bf00      	nop
 8019440:	370c      	adds	r7, #12
 8019442:	46bd      	mov	sp, r7
 8019444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019448:	4770      	bx	lr
 801944a:	bf00      	nop
 801944c:	e000ed90 	.word	0xe000ed90

08019450 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8019450:	b580      	push	{r7, lr}
 8019452:	b086      	sub	sp, #24
 8019454:	af00      	add	r7, sp, #0
 8019456:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8019458:	f7ff fe46 	bl	80190e8 <HAL_GetTick>
 801945c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	2b00      	cmp	r3, #0
 8019462:	d101      	bne.n	8019468 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8019464:	2301      	movs	r3, #1
 8019466:	e316      	b.n	8019a96 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019468:	687b      	ldr	r3, [r7, #4]
 801946a:	681b      	ldr	r3, [r3, #0]
 801946c:	4a66      	ldr	r2, [pc, #408]	@ (8019608 <HAL_DMA_Init+0x1b8>)
 801946e:	4293      	cmp	r3, r2
 8019470:	d04a      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	681b      	ldr	r3, [r3, #0]
 8019476:	4a65      	ldr	r2, [pc, #404]	@ (801960c <HAL_DMA_Init+0x1bc>)
 8019478:	4293      	cmp	r3, r2
 801947a:	d045      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 801947c:	687b      	ldr	r3, [r7, #4]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	4a63      	ldr	r2, [pc, #396]	@ (8019610 <HAL_DMA_Init+0x1c0>)
 8019482:	4293      	cmp	r3, r2
 8019484:	d040      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 8019486:	687b      	ldr	r3, [r7, #4]
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	4a62      	ldr	r2, [pc, #392]	@ (8019614 <HAL_DMA_Init+0x1c4>)
 801948c:	4293      	cmp	r3, r2
 801948e:	d03b      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 8019490:	687b      	ldr	r3, [r7, #4]
 8019492:	681b      	ldr	r3, [r3, #0]
 8019494:	4a60      	ldr	r2, [pc, #384]	@ (8019618 <HAL_DMA_Init+0x1c8>)
 8019496:	4293      	cmp	r3, r2
 8019498:	d036      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 801949a:	687b      	ldr	r3, [r7, #4]
 801949c:	681b      	ldr	r3, [r3, #0]
 801949e:	4a5f      	ldr	r2, [pc, #380]	@ (801961c <HAL_DMA_Init+0x1cc>)
 80194a0:	4293      	cmp	r3, r2
 80194a2:	d031      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 80194a4:	687b      	ldr	r3, [r7, #4]
 80194a6:	681b      	ldr	r3, [r3, #0]
 80194a8:	4a5d      	ldr	r2, [pc, #372]	@ (8019620 <HAL_DMA_Init+0x1d0>)
 80194aa:	4293      	cmp	r3, r2
 80194ac:	d02c      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	4a5c      	ldr	r2, [pc, #368]	@ (8019624 <HAL_DMA_Init+0x1d4>)
 80194b4:	4293      	cmp	r3, r2
 80194b6:	d027      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 80194b8:	687b      	ldr	r3, [r7, #4]
 80194ba:	681b      	ldr	r3, [r3, #0]
 80194bc:	4a5a      	ldr	r2, [pc, #360]	@ (8019628 <HAL_DMA_Init+0x1d8>)
 80194be:	4293      	cmp	r3, r2
 80194c0:	d022      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 80194c2:	687b      	ldr	r3, [r7, #4]
 80194c4:	681b      	ldr	r3, [r3, #0]
 80194c6:	4a59      	ldr	r2, [pc, #356]	@ (801962c <HAL_DMA_Init+0x1dc>)
 80194c8:	4293      	cmp	r3, r2
 80194ca:	d01d      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 80194cc:	687b      	ldr	r3, [r7, #4]
 80194ce:	681b      	ldr	r3, [r3, #0]
 80194d0:	4a57      	ldr	r2, [pc, #348]	@ (8019630 <HAL_DMA_Init+0x1e0>)
 80194d2:	4293      	cmp	r3, r2
 80194d4:	d018      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 80194d6:	687b      	ldr	r3, [r7, #4]
 80194d8:	681b      	ldr	r3, [r3, #0]
 80194da:	4a56      	ldr	r2, [pc, #344]	@ (8019634 <HAL_DMA_Init+0x1e4>)
 80194dc:	4293      	cmp	r3, r2
 80194de:	d013      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 80194e0:	687b      	ldr	r3, [r7, #4]
 80194e2:	681b      	ldr	r3, [r3, #0]
 80194e4:	4a54      	ldr	r2, [pc, #336]	@ (8019638 <HAL_DMA_Init+0x1e8>)
 80194e6:	4293      	cmp	r3, r2
 80194e8:	d00e      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 80194ea:	687b      	ldr	r3, [r7, #4]
 80194ec:	681b      	ldr	r3, [r3, #0]
 80194ee:	4a53      	ldr	r2, [pc, #332]	@ (801963c <HAL_DMA_Init+0x1ec>)
 80194f0:	4293      	cmp	r3, r2
 80194f2:	d009      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 80194f4:	687b      	ldr	r3, [r7, #4]
 80194f6:	681b      	ldr	r3, [r3, #0]
 80194f8:	4a51      	ldr	r2, [pc, #324]	@ (8019640 <HAL_DMA_Init+0x1f0>)
 80194fa:	4293      	cmp	r3, r2
 80194fc:	d004      	beq.n	8019508 <HAL_DMA_Init+0xb8>
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	681b      	ldr	r3, [r3, #0]
 8019502:	4a50      	ldr	r2, [pc, #320]	@ (8019644 <HAL_DMA_Init+0x1f4>)
 8019504:	4293      	cmp	r3, r2
 8019506:	d101      	bne.n	801950c <HAL_DMA_Init+0xbc>
 8019508:	2301      	movs	r3, #1
 801950a:	e000      	b.n	801950e <HAL_DMA_Init+0xbe>
 801950c:	2300      	movs	r3, #0
 801950e:	2b00      	cmp	r3, #0
 8019510:	f000 813b 	beq.w	801978a <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8019514:	687b      	ldr	r3, [r7, #4]
 8019516:	2202      	movs	r2, #2
 8019518:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801951c:	687b      	ldr	r3, [r7, #4]
 801951e:	2200      	movs	r2, #0
 8019520:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8019524:	687b      	ldr	r3, [r7, #4]
 8019526:	681b      	ldr	r3, [r3, #0]
 8019528:	4a37      	ldr	r2, [pc, #220]	@ (8019608 <HAL_DMA_Init+0x1b8>)
 801952a:	4293      	cmp	r3, r2
 801952c:	d04a      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	681b      	ldr	r3, [r3, #0]
 8019532:	4a36      	ldr	r2, [pc, #216]	@ (801960c <HAL_DMA_Init+0x1bc>)
 8019534:	4293      	cmp	r3, r2
 8019536:	d045      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	681b      	ldr	r3, [r3, #0]
 801953c:	4a34      	ldr	r2, [pc, #208]	@ (8019610 <HAL_DMA_Init+0x1c0>)
 801953e:	4293      	cmp	r3, r2
 8019540:	d040      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 8019542:	687b      	ldr	r3, [r7, #4]
 8019544:	681b      	ldr	r3, [r3, #0]
 8019546:	4a33      	ldr	r2, [pc, #204]	@ (8019614 <HAL_DMA_Init+0x1c4>)
 8019548:	4293      	cmp	r3, r2
 801954a:	d03b      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 801954c:	687b      	ldr	r3, [r7, #4]
 801954e:	681b      	ldr	r3, [r3, #0]
 8019550:	4a31      	ldr	r2, [pc, #196]	@ (8019618 <HAL_DMA_Init+0x1c8>)
 8019552:	4293      	cmp	r3, r2
 8019554:	d036      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 8019556:	687b      	ldr	r3, [r7, #4]
 8019558:	681b      	ldr	r3, [r3, #0]
 801955a:	4a30      	ldr	r2, [pc, #192]	@ (801961c <HAL_DMA_Init+0x1cc>)
 801955c:	4293      	cmp	r3, r2
 801955e:	d031      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 8019560:	687b      	ldr	r3, [r7, #4]
 8019562:	681b      	ldr	r3, [r3, #0]
 8019564:	4a2e      	ldr	r2, [pc, #184]	@ (8019620 <HAL_DMA_Init+0x1d0>)
 8019566:	4293      	cmp	r3, r2
 8019568:	d02c      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 801956a:	687b      	ldr	r3, [r7, #4]
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	4a2d      	ldr	r2, [pc, #180]	@ (8019624 <HAL_DMA_Init+0x1d4>)
 8019570:	4293      	cmp	r3, r2
 8019572:	d027      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 8019574:	687b      	ldr	r3, [r7, #4]
 8019576:	681b      	ldr	r3, [r3, #0]
 8019578:	4a2b      	ldr	r2, [pc, #172]	@ (8019628 <HAL_DMA_Init+0x1d8>)
 801957a:	4293      	cmp	r3, r2
 801957c:	d022      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 801957e:	687b      	ldr	r3, [r7, #4]
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	4a2a      	ldr	r2, [pc, #168]	@ (801962c <HAL_DMA_Init+0x1dc>)
 8019584:	4293      	cmp	r3, r2
 8019586:	d01d      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 8019588:	687b      	ldr	r3, [r7, #4]
 801958a:	681b      	ldr	r3, [r3, #0]
 801958c:	4a28      	ldr	r2, [pc, #160]	@ (8019630 <HAL_DMA_Init+0x1e0>)
 801958e:	4293      	cmp	r3, r2
 8019590:	d018      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 8019592:	687b      	ldr	r3, [r7, #4]
 8019594:	681b      	ldr	r3, [r3, #0]
 8019596:	4a27      	ldr	r2, [pc, #156]	@ (8019634 <HAL_DMA_Init+0x1e4>)
 8019598:	4293      	cmp	r3, r2
 801959a:	d013      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 801959c:	687b      	ldr	r3, [r7, #4]
 801959e:	681b      	ldr	r3, [r3, #0]
 80195a0:	4a25      	ldr	r2, [pc, #148]	@ (8019638 <HAL_DMA_Init+0x1e8>)
 80195a2:	4293      	cmp	r3, r2
 80195a4:	d00e      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 80195a6:	687b      	ldr	r3, [r7, #4]
 80195a8:	681b      	ldr	r3, [r3, #0]
 80195aa:	4a24      	ldr	r2, [pc, #144]	@ (801963c <HAL_DMA_Init+0x1ec>)
 80195ac:	4293      	cmp	r3, r2
 80195ae:	d009      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 80195b0:	687b      	ldr	r3, [r7, #4]
 80195b2:	681b      	ldr	r3, [r3, #0]
 80195b4:	4a22      	ldr	r2, [pc, #136]	@ (8019640 <HAL_DMA_Init+0x1f0>)
 80195b6:	4293      	cmp	r3, r2
 80195b8:	d004      	beq.n	80195c4 <HAL_DMA_Init+0x174>
 80195ba:	687b      	ldr	r3, [r7, #4]
 80195bc:	681b      	ldr	r3, [r3, #0]
 80195be:	4a21      	ldr	r2, [pc, #132]	@ (8019644 <HAL_DMA_Init+0x1f4>)
 80195c0:	4293      	cmp	r3, r2
 80195c2:	d108      	bne.n	80195d6 <HAL_DMA_Init+0x186>
 80195c4:	687b      	ldr	r3, [r7, #4]
 80195c6:	681b      	ldr	r3, [r3, #0]
 80195c8:	681a      	ldr	r2, [r3, #0]
 80195ca:	687b      	ldr	r3, [r7, #4]
 80195cc:	681b      	ldr	r3, [r3, #0]
 80195ce:	f022 0201 	bic.w	r2, r2, #1
 80195d2:	601a      	str	r2, [r3, #0]
 80195d4:	e007      	b.n	80195e6 <HAL_DMA_Init+0x196>
 80195d6:	687b      	ldr	r3, [r7, #4]
 80195d8:	681b      	ldr	r3, [r3, #0]
 80195da:	681a      	ldr	r2, [r3, #0]
 80195dc:	687b      	ldr	r3, [r7, #4]
 80195de:	681b      	ldr	r3, [r3, #0]
 80195e0:	f022 0201 	bic.w	r2, r2, #1
 80195e4:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80195e6:	e02f      	b.n	8019648 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80195e8:	f7ff fd7e 	bl	80190e8 <HAL_GetTick>
 80195ec:	4602      	mov	r2, r0
 80195ee:	693b      	ldr	r3, [r7, #16]
 80195f0:	1ad3      	subs	r3, r2, r3
 80195f2:	2b05      	cmp	r3, #5
 80195f4:	d928      	bls.n	8019648 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80195f6:	687b      	ldr	r3, [r7, #4]
 80195f8:	2220      	movs	r2, #32
 80195fa:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80195fc:	687b      	ldr	r3, [r7, #4]
 80195fe:	2203      	movs	r2, #3
 8019600:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8019604:	2301      	movs	r3, #1
 8019606:	e246      	b.n	8019a96 <HAL_DMA_Init+0x646>
 8019608:	40020010 	.word	0x40020010
 801960c:	40020028 	.word	0x40020028
 8019610:	40020040 	.word	0x40020040
 8019614:	40020058 	.word	0x40020058
 8019618:	40020070 	.word	0x40020070
 801961c:	40020088 	.word	0x40020088
 8019620:	400200a0 	.word	0x400200a0
 8019624:	400200b8 	.word	0x400200b8
 8019628:	40020410 	.word	0x40020410
 801962c:	40020428 	.word	0x40020428
 8019630:	40020440 	.word	0x40020440
 8019634:	40020458 	.word	0x40020458
 8019638:	40020470 	.word	0x40020470
 801963c:	40020488 	.word	0x40020488
 8019640:	400204a0 	.word	0x400204a0
 8019644:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8019648:	687b      	ldr	r3, [r7, #4]
 801964a:	681b      	ldr	r3, [r3, #0]
 801964c:	681b      	ldr	r3, [r3, #0]
 801964e:	f003 0301 	and.w	r3, r3, #1
 8019652:	2b00      	cmp	r3, #0
 8019654:	d1c8      	bne.n	80195e8 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8019656:	687b      	ldr	r3, [r7, #4]
 8019658:	681b      	ldr	r3, [r3, #0]
 801965a:	681b      	ldr	r3, [r3, #0]
 801965c:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 801965e:	697a      	ldr	r2, [r7, #20]
 8019660:	4b83      	ldr	r3, [pc, #524]	@ (8019870 <HAL_DMA_Init+0x420>)
 8019662:	4013      	ands	r3, r2
 8019664:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8019666:	687b      	ldr	r3, [r7, #4]
 8019668:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801966a:	687b      	ldr	r3, [r7, #4]
 801966c:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 801966e:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019670:	687b      	ldr	r3, [r7, #4]
 8019672:	691b      	ldr	r3, [r3, #16]
 8019674:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019676:	687b      	ldr	r3, [r7, #4]
 8019678:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801967a:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801967c:	687b      	ldr	r3, [r7, #4]
 801967e:	699b      	ldr	r3, [r3, #24]
 8019680:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019682:	687b      	ldr	r3, [r7, #4]
 8019684:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019686:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	6a1b      	ldr	r3, [r3, #32]
 801968c:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 801968e:	697a      	ldr	r2, [r7, #20]
 8019690:	4313      	orrs	r3, r2
 8019692:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8019694:	687b      	ldr	r3, [r7, #4]
 8019696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019698:	2b04      	cmp	r3, #4
 801969a:	d107      	bne.n	80196ac <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 801969c:	687b      	ldr	r3, [r7, #4]
 801969e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80196a0:	687b      	ldr	r3, [r7, #4]
 80196a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80196a4:	4313      	orrs	r3, r2
 80196a6:	697a      	ldr	r2, [r7, #20]
 80196a8:	4313      	orrs	r3, r2
 80196aa:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 80196ac:	4b71      	ldr	r3, [pc, #452]	@ (8019874 <HAL_DMA_Init+0x424>)
 80196ae:	681a      	ldr	r2, [r3, #0]
 80196b0:	4b71      	ldr	r3, [pc, #452]	@ (8019878 <HAL_DMA_Init+0x428>)
 80196b2:	4013      	ands	r3, r2
 80196b4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80196b8:	d328      	bcc.n	801970c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 80196ba:	687b      	ldr	r3, [r7, #4]
 80196bc:	685b      	ldr	r3, [r3, #4]
 80196be:	2b28      	cmp	r3, #40	@ 0x28
 80196c0:	d903      	bls.n	80196ca <HAL_DMA_Init+0x27a>
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	685b      	ldr	r3, [r3, #4]
 80196c6:	2b2e      	cmp	r3, #46	@ 0x2e
 80196c8:	d917      	bls.n	80196fa <HAL_DMA_Init+0x2aa>
 80196ca:	687b      	ldr	r3, [r7, #4]
 80196cc:	685b      	ldr	r3, [r3, #4]
 80196ce:	2b3e      	cmp	r3, #62	@ 0x3e
 80196d0:	d903      	bls.n	80196da <HAL_DMA_Init+0x28a>
 80196d2:	687b      	ldr	r3, [r7, #4]
 80196d4:	685b      	ldr	r3, [r3, #4]
 80196d6:	2b42      	cmp	r3, #66	@ 0x42
 80196d8:	d90f      	bls.n	80196fa <HAL_DMA_Init+0x2aa>
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	685b      	ldr	r3, [r3, #4]
 80196de:	2b46      	cmp	r3, #70	@ 0x46
 80196e0:	d903      	bls.n	80196ea <HAL_DMA_Init+0x29a>
 80196e2:	687b      	ldr	r3, [r7, #4]
 80196e4:	685b      	ldr	r3, [r3, #4]
 80196e6:	2b48      	cmp	r3, #72	@ 0x48
 80196e8:	d907      	bls.n	80196fa <HAL_DMA_Init+0x2aa>
 80196ea:	687b      	ldr	r3, [r7, #4]
 80196ec:	685b      	ldr	r3, [r3, #4]
 80196ee:	2b4e      	cmp	r3, #78	@ 0x4e
 80196f0:	d905      	bls.n	80196fe <HAL_DMA_Init+0x2ae>
 80196f2:	687b      	ldr	r3, [r7, #4]
 80196f4:	685b      	ldr	r3, [r3, #4]
 80196f6:	2b52      	cmp	r3, #82	@ 0x52
 80196f8:	d801      	bhi.n	80196fe <HAL_DMA_Init+0x2ae>
 80196fa:	2301      	movs	r3, #1
 80196fc:	e000      	b.n	8019700 <HAL_DMA_Init+0x2b0>
 80196fe:	2300      	movs	r3, #0
 8019700:	2b00      	cmp	r3, #0
 8019702:	d003      	beq.n	801970c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8019704:	697b      	ldr	r3, [r7, #20]
 8019706:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801970a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	681b      	ldr	r3, [r3, #0]
 8019710:	697a      	ldr	r2, [r7, #20]
 8019712:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8019714:	687b      	ldr	r3, [r7, #4]
 8019716:	681b      	ldr	r3, [r3, #0]
 8019718:	695b      	ldr	r3, [r3, #20]
 801971a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 801971c:	697b      	ldr	r3, [r7, #20]
 801971e:	f023 0307 	bic.w	r3, r3, #7
 8019722:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8019724:	687b      	ldr	r3, [r7, #4]
 8019726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019728:	697a      	ldr	r2, [r7, #20]
 801972a:	4313      	orrs	r3, r2
 801972c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 801972e:	687b      	ldr	r3, [r7, #4]
 8019730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019732:	2b04      	cmp	r3, #4
 8019734:	d117      	bne.n	8019766 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8019736:	687b      	ldr	r3, [r7, #4]
 8019738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801973a:	697a      	ldr	r2, [r7, #20]
 801973c:	4313      	orrs	r3, r2
 801973e:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8019740:	687b      	ldr	r3, [r7, #4]
 8019742:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019744:	2b00      	cmp	r3, #0
 8019746:	d00e      	beq.n	8019766 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8019748:	6878      	ldr	r0, [r7, #4]
 801974a:	f001 fbff 	bl	801af4c <DMA_CheckFifoParam>
 801974e:	4603      	mov	r3, r0
 8019750:	2b00      	cmp	r3, #0
 8019752:	d008      	beq.n	8019766 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	2240      	movs	r2, #64	@ 0x40
 8019758:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801975a:	687b      	ldr	r3, [r7, #4]
 801975c:	2201      	movs	r2, #1
 801975e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8019762:	2301      	movs	r3, #1
 8019764:	e197      	b.n	8019a96 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8019766:	687b      	ldr	r3, [r7, #4]
 8019768:	681b      	ldr	r3, [r3, #0]
 801976a:	697a      	ldr	r2, [r7, #20]
 801976c:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801976e:	6878      	ldr	r0, [r7, #4]
 8019770:	f001 fb3a 	bl	801ade8 <DMA_CalcBaseAndBitshift>
 8019774:	4603      	mov	r3, r0
 8019776:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8019778:	687b      	ldr	r3, [r7, #4]
 801977a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801977c:	f003 031f 	and.w	r3, r3, #31
 8019780:	223f      	movs	r2, #63	@ 0x3f
 8019782:	409a      	lsls	r2, r3
 8019784:	68bb      	ldr	r3, [r7, #8]
 8019786:	609a      	str	r2, [r3, #8]
 8019788:	e0cd      	b.n	8019926 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801978a:	687b      	ldr	r3, [r7, #4]
 801978c:	681b      	ldr	r3, [r3, #0]
 801978e:	4a3b      	ldr	r2, [pc, #236]	@ (801987c <HAL_DMA_Init+0x42c>)
 8019790:	4293      	cmp	r3, r2
 8019792:	d022      	beq.n	80197da <HAL_DMA_Init+0x38a>
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	4a39      	ldr	r2, [pc, #228]	@ (8019880 <HAL_DMA_Init+0x430>)
 801979a:	4293      	cmp	r3, r2
 801979c:	d01d      	beq.n	80197da <HAL_DMA_Init+0x38a>
 801979e:	687b      	ldr	r3, [r7, #4]
 80197a0:	681b      	ldr	r3, [r3, #0]
 80197a2:	4a38      	ldr	r2, [pc, #224]	@ (8019884 <HAL_DMA_Init+0x434>)
 80197a4:	4293      	cmp	r3, r2
 80197a6:	d018      	beq.n	80197da <HAL_DMA_Init+0x38a>
 80197a8:	687b      	ldr	r3, [r7, #4]
 80197aa:	681b      	ldr	r3, [r3, #0]
 80197ac:	4a36      	ldr	r2, [pc, #216]	@ (8019888 <HAL_DMA_Init+0x438>)
 80197ae:	4293      	cmp	r3, r2
 80197b0:	d013      	beq.n	80197da <HAL_DMA_Init+0x38a>
 80197b2:	687b      	ldr	r3, [r7, #4]
 80197b4:	681b      	ldr	r3, [r3, #0]
 80197b6:	4a35      	ldr	r2, [pc, #212]	@ (801988c <HAL_DMA_Init+0x43c>)
 80197b8:	4293      	cmp	r3, r2
 80197ba:	d00e      	beq.n	80197da <HAL_DMA_Init+0x38a>
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	4a33      	ldr	r2, [pc, #204]	@ (8019890 <HAL_DMA_Init+0x440>)
 80197c2:	4293      	cmp	r3, r2
 80197c4:	d009      	beq.n	80197da <HAL_DMA_Init+0x38a>
 80197c6:	687b      	ldr	r3, [r7, #4]
 80197c8:	681b      	ldr	r3, [r3, #0]
 80197ca:	4a32      	ldr	r2, [pc, #200]	@ (8019894 <HAL_DMA_Init+0x444>)
 80197cc:	4293      	cmp	r3, r2
 80197ce:	d004      	beq.n	80197da <HAL_DMA_Init+0x38a>
 80197d0:	687b      	ldr	r3, [r7, #4]
 80197d2:	681b      	ldr	r3, [r3, #0]
 80197d4:	4a30      	ldr	r2, [pc, #192]	@ (8019898 <HAL_DMA_Init+0x448>)
 80197d6:	4293      	cmp	r3, r2
 80197d8:	d101      	bne.n	80197de <HAL_DMA_Init+0x38e>
 80197da:	2301      	movs	r3, #1
 80197dc:	e000      	b.n	80197e0 <HAL_DMA_Init+0x390>
 80197de:	2300      	movs	r3, #0
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	f000 8097 	beq.w	8019914 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 80197e6:	687b      	ldr	r3, [r7, #4]
 80197e8:	681b      	ldr	r3, [r3, #0]
 80197ea:	4a24      	ldr	r2, [pc, #144]	@ (801987c <HAL_DMA_Init+0x42c>)
 80197ec:	4293      	cmp	r3, r2
 80197ee:	d021      	beq.n	8019834 <HAL_DMA_Init+0x3e4>
 80197f0:	687b      	ldr	r3, [r7, #4]
 80197f2:	681b      	ldr	r3, [r3, #0]
 80197f4:	4a22      	ldr	r2, [pc, #136]	@ (8019880 <HAL_DMA_Init+0x430>)
 80197f6:	4293      	cmp	r3, r2
 80197f8:	d01c      	beq.n	8019834 <HAL_DMA_Init+0x3e4>
 80197fa:	687b      	ldr	r3, [r7, #4]
 80197fc:	681b      	ldr	r3, [r3, #0]
 80197fe:	4a21      	ldr	r2, [pc, #132]	@ (8019884 <HAL_DMA_Init+0x434>)
 8019800:	4293      	cmp	r3, r2
 8019802:	d017      	beq.n	8019834 <HAL_DMA_Init+0x3e4>
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	4a1f      	ldr	r2, [pc, #124]	@ (8019888 <HAL_DMA_Init+0x438>)
 801980a:	4293      	cmp	r3, r2
 801980c:	d012      	beq.n	8019834 <HAL_DMA_Init+0x3e4>
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	681b      	ldr	r3, [r3, #0]
 8019812:	4a1e      	ldr	r2, [pc, #120]	@ (801988c <HAL_DMA_Init+0x43c>)
 8019814:	4293      	cmp	r3, r2
 8019816:	d00d      	beq.n	8019834 <HAL_DMA_Init+0x3e4>
 8019818:	687b      	ldr	r3, [r7, #4]
 801981a:	681b      	ldr	r3, [r3, #0]
 801981c:	4a1c      	ldr	r2, [pc, #112]	@ (8019890 <HAL_DMA_Init+0x440>)
 801981e:	4293      	cmp	r3, r2
 8019820:	d008      	beq.n	8019834 <HAL_DMA_Init+0x3e4>
 8019822:	687b      	ldr	r3, [r7, #4]
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	4a1b      	ldr	r2, [pc, #108]	@ (8019894 <HAL_DMA_Init+0x444>)
 8019828:	4293      	cmp	r3, r2
 801982a:	d003      	beq.n	8019834 <HAL_DMA_Init+0x3e4>
 801982c:	687b      	ldr	r3, [r7, #4]
 801982e:	681b      	ldr	r3, [r3, #0]
 8019830:	4a19      	ldr	r2, [pc, #100]	@ (8019898 <HAL_DMA_Init+0x448>)
 8019832:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8019834:	687b      	ldr	r3, [r7, #4]
 8019836:	2202      	movs	r2, #2
 8019838:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 801983c:	687b      	ldr	r3, [r7, #4]
 801983e:	2200      	movs	r2, #0
 8019840:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8019844:	687b      	ldr	r3, [r7, #4]
 8019846:	681b      	ldr	r3, [r3, #0]
 8019848:	681b      	ldr	r3, [r3, #0]
 801984a:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 801984c:	697a      	ldr	r2, [r7, #20]
 801984e:	4b13      	ldr	r3, [pc, #76]	@ (801989c <HAL_DMA_Init+0x44c>)
 8019850:	4013      	ands	r3, r2
 8019852:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8019854:	687b      	ldr	r3, [r7, #4]
 8019856:	689b      	ldr	r3, [r3, #8]
 8019858:	2b40      	cmp	r3, #64	@ 0x40
 801985a:	d021      	beq.n	80198a0 <HAL_DMA_Init+0x450>
 801985c:	687b      	ldr	r3, [r7, #4]
 801985e:	689b      	ldr	r3, [r3, #8]
 8019860:	2b80      	cmp	r3, #128	@ 0x80
 8019862:	d102      	bne.n	801986a <HAL_DMA_Init+0x41a>
 8019864:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8019868:	e01b      	b.n	80198a2 <HAL_DMA_Init+0x452>
 801986a:	2300      	movs	r3, #0
 801986c:	e019      	b.n	80198a2 <HAL_DMA_Init+0x452>
 801986e:	bf00      	nop
 8019870:	fe10803f 	.word	0xfe10803f
 8019874:	5c001000 	.word	0x5c001000
 8019878:	ffff0000 	.word	0xffff0000
 801987c:	58025408 	.word	0x58025408
 8019880:	5802541c 	.word	0x5802541c
 8019884:	58025430 	.word	0x58025430
 8019888:	58025444 	.word	0x58025444
 801988c:	58025458 	.word	0x58025458
 8019890:	5802546c 	.word	0x5802546c
 8019894:	58025480 	.word	0x58025480
 8019898:	58025494 	.word	0x58025494
 801989c:	fffe000f 	.word	0xfffe000f
 80198a0:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80198a2:	687a      	ldr	r2, [r7, #4]
 80198a4:	68d2      	ldr	r2, [r2, #12]
 80198a6:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80198a8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	691b      	ldr	r3, [r3, #16]
 80198ae:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 80198b0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80198b2:	687b      	ldr	r3, [r7, #4]
 80198b4:	695b      	ldr	r3, [r3, #20]
 80198b6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 80198b8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80198ba:	687b      	ldr	r3, [r7, #4]
 80198bc:	699b      	ldr	r3, [r3, #24]
 80198be:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 80198c0:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80198c2:	687b      	ldr	r3, [r7, #4]
 80198c4:	69db      	ldr	r3, [r3, #28]
 80198c6:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 80198c8:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	6a1b      	ldr	r3, [r3, #32]
 80198ce:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 80198d0:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80198d2:	697a      	ldr	r2, [r7, #20]
 80198d4:	4313      	orrs	r3, r2
 80198d6:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 80198d8:	687b      	ldr	r3, [r7, #4]
 80198da:	681b      	ldr	r3, [r3, #0]
 80198dc:	697a      	ldr	r2, [r7, #20]
 80198de:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 80198e0:	687b      	ldr	r3, [r7, #4]
 80198e2:	681b      	ldr	r3, [r3, #0]
 80198e4:	461a      	mov	r2, r3
 80198e6:	4b6e      	ldr	r3, [pc, #440]	@ (8019aa0 <HAL_DMA_Init+0x650>)
 80198e8:	4413      	add	r3, r2
 80198ea:	4a6e      	ldr	r2, [pc, #440]	@ (8019aa4 <HAL_DMA_Init+0x654>)
 80198ec:	fba2 2303 	umull	r2, r3, r2, r3
 80198f0:	091b      	lsrs	r3, r3, #4
 80198f2:	009a      	lsls	r2, r3, #2
 80198f4:	687b      	ldr	r3, [r7, #4]
 80198f6:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80198f8:	6878      	ldr	r0, [r7, #4]
 80198fa:	f001 fa75 	bl	801ade8 <DMA_CalcBaseAndBitshift>
 80198fe:	4603      	mov	r3, r0
 8019900:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8019902:	687b      	ldr	r3, [r7, #4]
 8019904:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019906:	f003 031f 	and.w	r3, r3, #31
 801990a:	2201      	movs	r2, #1
 801990c:	409a      	lsls	r2, r3
 801990e:	68fb      	ldr	r3, [r7, #12]
 8019910:	605a      	str	r2, [r3, #4]
 8019912:	e008      	b.n	8019926 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8019914:	687b      	ldr	r3, [r7, #4]
 8019916:	2240      	movs	r2, #64	@ 0x40
 8019918:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	2203      	movs	r2, #3
 801991e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8019922:	2301      	movs	r3, #1
 8019924:	e0b7      	b.n	8019a96 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8019926:	687b      	ldr	r3, [r7, #4]
 8019928:	681b      	ldr	r3, [r3, #0]
 801992a:	4a5f      	ldr	r2, [pc, #380]	@ (8019aa8 <HAL_DMA_Init+0x658>)
 801992c:	4293      	cmp	r3, r2
 801992e:	d072      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 8019930:	687b      	ldr	r3, [r7, #4]
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	4a5d      	ldr	r2, [pc, #372]	@ (8019aac <HAL_DMA_Init+0x65c>)
 8019936:	4293      	cmp	r3, r2
 8019938:	d06d      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 801993a:	687b      	ldr	r3, [r7, #4]
 801993c:	681b      	ldr	r3, [r3, #0]
 801993e:	4a5c      	ldr	r2, [pc, #368]	@ (8019ab0 <HAL_DMA_Init+0x660>)
 8019940:	4293      	cmp	r3, r2
 8019942:	d068      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 8019944:	687b      	ldr	r3, [r7, #4]
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	4a5a      	ldr	r2, [pc, #360]	@ (8019ab4 <HAL_DMA_Init+0x664>)
 801994a:	4293      	cmp	r3, r2
 801994c:	d063      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 801994e:	687b      	ldr	r3, [r7, #4]
 8019950:	681b      	ldr	r3, [r3, #0]
 8019952:	4a59      	ldr	r2, [pc, #356]	@ (8019ab8 <HAL_DMA_Init+0x668>)
 8019954:	4293      	cmp	r3, r2
 8019956:	d05e      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 8019958:	687b      	ldr	r3, [r7, #4]
 801995a:	681b      	ldr	r3, [r3, #0]
 801995c:	4a57      	ldr	r2, [pc, #348]	@ (8019abc <HAL_DMA_Init+0x66c>)
 801995e:	4293      	cmp	r3, r2
 8019960:	d059      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 8019962:	687b      	ldr	r3, [r7, #4]
 8019964:	681b      	ldr	r3, [r3, #0]
 8019966:	4a56      	ldr	r2, [pc, #344]	@ (8019ac0 <HAL_DMA_Init+0x670>)
 8019968:	4293      	cmp	r3, r2
 801996a:	d054      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	681b      	ldr	r3, [r3, #0]
 8019970:	4a54      	ldr	r2, [pc, #336]	@ (8019ac4 <HAL_DMA_Init+0x674>)
 8019972:	4293      	cmp	r3, r2
 8019974:	d04f      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	681b      	ldr	r3, [r3, #0]
 801997a:	4a53      	ldr	r2, [pc, #332]	@ (8019ac8 <HAL_DMA_Init+0x678>)
 801997c:	4293      	cmp	r3, r2
 801997e:	d04a      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 8019980:	687b      	ldr	r3, [r7, #4]
 8019982:	681b      	ldr	r3, [r3, #0]
 8019984:	4a51      	ldr	r2, [pc, #324]	@ (8019acc <HAL_DMA_Init+0x67c>)
 8019986:	4293      	cmp	r3, r2
 8019988:	d045      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 801998a:	687b      	ldr	r3, [r7, #4]
 801998c:	681b      	ldr	r3, [r3, #0]
 801998e:	4a50      	ldr	r2, [pc, #320]	@ (8019ad0 <HAL_DMA_Init+0x680>)
 8019990:	4293      	cmp	r3, r2
 8019992:	d040      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 8019994:	687b      	ldr	r3, [r7, #4]
 8019996:	681b      	ldr	r3, [r3, #0]
 8019998:	4a4e      	ldr	r2, [pc, #312]	@ (8019ad4 <HAL_DMA_Init+0x684>)
 801999a:	4293      	cmp	r3, r2
 801999c:	d03b      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 801999e:	687b      	ldr	r3, [r7, #4]
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	4a4d      	ldr	r2, [pc, #308]	@ (8019ad8 <HAL_DMA_Init+0x688>)
 80199a4:	4293      	cmp	r3, r2
 80199a6:	d036      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 80199a8:	687b      	ldr	r3, [r7, #4]
 80199aa:	681b      	ldr	r3, [r3, #0]
 80199ac:	4a4b      	ldr	r2, [pc, #300]	@ (8019adc <HAL_DMA_Init+0x68c>)
 80199ae:	4293      	cmp	r3, r2
 80199b0:	d031      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 80199b2:	687b      	ldr	r3, [r7, #4]
 80199b4:	681b      	ldr	r3, [r3, #0]
 80199b6:	4a4a      	ldr	r2, [pc, #296]	@ (8019ae0 <HAL_DMA_Init+0x690>)
 80199b8:	4293      	cmp	r3, r2
 80199ba:	d02c      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 80199bc:	687b      	ldr	r3, [r7, #4]
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	4a48      	ldr	r2, [pc, #288]	@ (8019ae4 <HAL_DMA_Init+0x694>)
 80199c2:	4293      	cmp	r3, r2
 80199c4:	d027      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 80199c6:	687b      	ldr	r3, [r7, #4]
 80199c8:	681b      	ldr	r3, [r3, #0]
 80199ca:	4a47      	ldr	r2, [pc, #284]	@ (8019ae8 <HAL_DMA_Init+0x698>)
 80199cc:	4293      	cmp	r3, r2
 80199ce:	d022      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 80199d0:	687b      	ldr	r3, [r7, #4]
 80199d2:	681b      	ldr	r3, [r3, #0]
 80199d4:	4a45      	ldr	r2, [pc, #276]	@ (8019aec <HAL_DMA_Init+0x69c>)
 80199d6:	4293      	cmp	r3, r2
 80199d8:	d01d      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 80199da:	687b      	ldr	r3, [r7, #4]
 80199dc:	681b      	ldr	r3, [r3, #0]
 80199de:	4a44      	ldr	r2, [pc, #272]	@ (8019af0 <HAL_DMA_Init+0x6a0>)
 80199e0:	4293      	cmp	r3, r2
 80199e2:	d018      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 80199e4:	687b      	ldr	r3, [r7, #4]
 80199e6:	681b      	ldr	r3, [r3, #0]
 80199e8:	4a42      	ldr	r2, [pc, #264]	@ (8019af4 <HAL_DMA_Init+0x6a4>)
 80199ea:	4293      	cmp	r3, r2
 80199ec:	d013      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 80199ee:	687b      	ldr	r3, [r7, #4]
 80199f0:	681b      	ldr	r3, [r3, #0]
 80199f2:	4a41      	ldr	r2, [pc, #260]	@ (8019af8 <HAL_DMA_Init+0x6a8>)
 80199f4:	4293      	cmp	r3, r2
 80199f6:	d00e      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 80199f8:	687b      	ldr	r3, [r7, #4]
 80199fa:	681b      	ldr	r3, [r3, #0]
 80199fc:	4a3f      	ldr	r2, [pc, #252]	@ (8019afc <HAL_DMA_Init+0x6ac>)
 80199fe:	4293      	cmp	r3, r2
 8019a00:	d009      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 8019a02:	687b      	ldr	r3, [r7, #4]
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	4a3e      	ldr	r2, [pc, #248]	@ (8019b00 <HAL_DMA_Init+0x6b0>)
 8019a08:	4293      	cmp	r3, r2
 8019a0a:	d004      	beq.n	8019a16 <HAL_DMA_Init+0x5c6>
 8019a0c:	687b      	ldr	r3, [r7, #4]
 8019a0e:	681b      	ldr	r3, [r3, #0]
 8019a10:	4a3c      	ldr	r2, [pc, #240]	@ (8019b04 <HAL_DMA_Init+0x6b4>)
 8019a12:	4293      	cmp	r3, r2
 8019a14:	d101      	bne.n	8019a1a <HAL_DMA_Init+0x5ca>
 8019a16:	2301      	movs	r3, #1
 8019a18:	e000      	b.n	8019a1c <HAL_DMA_Init+0x5cc>
 8019a1a:	2300      	movs	r3, #0
 8019a1c:	2b00      	cmp	r3, #0
 8019a1e:	d032      	beq.n	8019a86 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8019a20:	6878      	ldr	r0, [r7, #4]
 8019a22:	f001 fb0f 	bl	801b044 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8019a26:	687b      	ldr	r3, [r7, #4]
 8019a28:	689b      	ldr	r3, [r3, #8]
 8019a2a:	2b80      	cmp	r3, #128	@ 0x80
 8019a2c:	d102      	bne.n	8019a34 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	2200      	movs	r2, #0
 8019a32:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	685a      	ldr	r2, [r3, #4]
 8019a38:	687b      	ldr	r3, [r7, #4]
 8019a3a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019a3c:	b2d2      	uxtb	r2, r2
 8019a3e:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019a40:	687b      	ldr	r3, [r7, #4]
 8019a42:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019a44:	687a      	ldr	r2, [r7, #4]
 8019a46:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8019a48:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8019a4a:	687b      	ldr	r3, [r7, #4]
 8019a4c:	685b      	ldr	r3, [r3, #4]
 8019a4e:	2b00      	cmp	r3, #0
 8019a50:	d010      	beq.n	8019a74 <HAL_DMA_Init+0x624>
 8019a52:	687b      	ldr	r3, [r7, #4]
 8019a54:	685b      	ldr	r3, [r3, #4]
 8019a56:	2b08      	cmp	r3, #8
 8019a58:	d80c      	bhi.n	8019a74 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8019a5a:	6878      	ldr	r0, [r7, #4]
 8019a5c:	f001 fb8c 	bl	801b178 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8019a60:	687b      	ldr	r3, [r7, #4]
 8019a62:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019a64:	2200      	movs	r2, #0
 8019a66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019a68:	687b      	ldr	r3, [r7, #4]
 8019a6a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019a6c:	687a      	ldr	r2, [r7, #4]
 8019a6e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8019a70:	605a      	str	r2, [r3, #4]
 8019a72:	e008      	b.n	8019a86 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8019a74:	687b      	ldr	r3, [r7, #4]
 8019a76:	2200      	movs	r2, #0
 8019a78:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8019a7a:	687b      	ldr	r3, [r7, #4]
 8019a7c:	2200      	movs	r2, #0
 8019a7e:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8019a80:	687b      	ldr	r3, [r7, #4]
 8019a82:	2200      	movs	r2, #0
 8019a84:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019a86:	687b      	ldr	r3, [r7, #4]
 8019a88:	2200      	movs	r2, #0
 8019a8a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8019a8c:	687b      	ldr	r3, [r7, #4]
 8019a8e:	2201      	movs	r2, #1
 8019a90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8019a94:	2300      	movs	r3, #0
}
 8019a96:	4618      	mov	r0, r3
 8019a98:	3718      	adds	r7, #24
 8019a9a:	46bd      	mov	sp, r7
 8019a9c:	bd80      	pop	{r7, pc}
 8019a9e:	bf00      	nop
 8019aa0:	a7fdabf8 	.word	0xa7fdabf8
 8019aa4:	cccccccd 	.word	0xcccccccd
 8019aa8:	40020010 	.word	0x40020010
 8019aac:	40020028 	.word	0x40020028
 8019ab0:	40020040 	.word	0x40020040
 8019ab4:	40020058 	.word	0x40020058
 8019ab8:	40020070 	.word	0x40020070
 8019abc:	40020088 	.word	0x40020088
 8019ac0:	400200a0 	.word	0x400200a0
 8019ac4:	400200b8 	.word	0x400200b8
 8019ac8:	40020410 	.word	0x40020410
 8019acc:	40020428 	.word	0x40020428
 8019ad0:	40020440 	.word	0x40020440
 8019ad4:	40020458 	.word	0x40020458
 8019ad8:	40020470 	.word	0x40020470
 8019adc:	40020488 	.word	0x40020488
 8019ae0:	400204a0 	.word	0x400204a0
 8019ae4:	400204b8 	.word	0x400204b8
 8019ae8:	58025408 	.word	0x58025408
 8019aec:	5802541c 	.word	0x5802541c
 8019af0:	58025430 	.word	0x58025430
 8019af4:	58025444 	.word	0x58025444
 8019af8:	58025458 	.word	0x58025458
 8019afc:	5802546c 	.word	0x5802546c
 8019b00:	58025480 	.word	0x58025480
 8019b04:	58025494 	.word	0x58025494

08019b08 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8019b08:	b580      	push	{r7, lr}
 8019b0a:	b084      	sub	sp, #16
 8019b0c:	af00      	add	r7, sp, #0
 8019b0e:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8019b10:	687b      	ldr	r3, [r7, #4]
 8019b12:	2b00      	cmp	r3, #0
 8019b14:	d101      	bne.n	8019b1a <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8019b16:	2301      	movs	r3, #1
 8019b18:	e237      	b.n	8019f8a <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8019b20:	b2db      	uxtb	r3, r3
 8019b22:	2b02      	cmp	r3, #2
 8019b24:	d004      	beq.n	8019b30 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019b26:	687b      	ldr	r3, [r7, #4]
 8019b28:	2280      	movs	r2, #128	@ 0x80
 8019b2a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8019b2c:	2301      	movs	r3, #1
 8019b2e:	e22c      	b.n	8019f8a <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019b30:	687b      	ldr	r3, [r7, #4]
 8019b32:	681b      	ldr	r3, [r3, #0]
 8019b34:	4a5c      	ldr	r2, [pc, #368]	@ (8019ca8 <HAL_DMA_Abort_IT+0x1a0>)
 8019b36:	4293      	cmp	r3, r2
 8019b38:	d04a      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	681b      	ldr	r3, [r3, #0]
 8019b3e:	4a5b      	ldr	r2, [pc, #364]	@ (8019cac <HAL_DMA_Abort_IT+0x1a4>)
 8019b40:	4293      	cmp	r3, r2
 8019b42:	d045      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019b44:	687b      	ldr	r3, [r7, #4]
 8019b46:	681b      	ldr	r3, [r3, #0]
 8019b48:	4a59      	ldr	r2, [pc, #356]	@ (8019cb0 <HAL_DMA_Abort_IT+0x1a8>)
 8019b4a:	4293      	cmp	r3, r2
 8019b4c:	d040      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019b4e:	687b      	ldr	r3, [r7, #4]
 8019b50:	681b      	ldr	r3, [r3, #0]
 8019b52:	4a58      	ldr	r2, [pc, #352]	@ (8019cb4 <HAL_DMA_Abort_IT+0x1ac>)
 8019b54:	4293      	cmp	r3, r2
 8019b56:	d03b      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019b58:	687b      	ldr	r3, [r7, #4]
 8019b5a:	681b      	ldr	r3, [r3, #0]
 8019b5c:	4a56      	ldr	r2, [pc, #344]	@ (8019cb8 <HAL_DMA_Abort_IT+0x1b0>)
 8019b5e:	4293      	cmp	r3, r2
 8019b60:	d036      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019b62:	687b      	ldr	r3, [r7, #4]
 8019b64:	681b      	ldr	r3, [r3, #0]
 8019b66:	4a55      	ldr	r2, [pc, #340]	@ (8019cbc <HAL_DMA_Abort_IT+0x1b4>)
 8019b68:	4293      	cmp	r3, r2
 8019b6a:	d031      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	4a53      	ldr	r2, [pc, #332]	@ (8019cc0 <HAL_DMA_Abort_IT+0x1b8>)
 8019b72:	4293      	cmp	r3, r2
 8019b74:	d02c      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019b76:	687b      	ldr	r3, [r7, #4]
 8019b78:	681b      	ldr	r3, [r3, #0]
 8019b7a:	4a52      	ldr	r2, [pc, #328]	@ (8019cc4 <HAL_DMA_Abort_IT+0x1bc>)
 8019b7c:	4293      	cmp	r3, r2
 8019b7e:	d027      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019b80:	687b      	ldr	r3, [r7, #4]
 8019b82:	681b      	ldr	r3, [r3, #0]
 8019b84:	4a50      	ldr	r2, [pc, #320]	@ (8019cc8 <HAL_DMA_Abort_IT+0x1c0>)
 8019b86:	4293      	cmp	r3, r2
 8019b88:	d022      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019b8a:	687b      	ldr	r3, [r7, #4]
 8019b8c:	681b      	ldr	r3, [r3, #0]
 8019b8e:	4a4f      	ldr	r2, [pc, #316]	@ (8019ccc <HAL_DMA_Abort_IT+0x1c4>)
 8019b90:	4293      	cmp	r3, r2
 8019b92:	d01d      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019b94:	687b      	ldr	r3, [r7, #4]
 8019b96:	681b      	ldr	r3, [r3, #0]
 8019b98:	4a4d      	ldr	r2, [pc, #308]	@ (8019cd0 <HAL_DMA_Abort_IT+0x1c8>)
 8019b9a:	4293      	cmp	r3, r2
 8019b9c:	d018      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	681b      	ldr	r3, [r3, #0]
 8019ba2:	4a4c      	ldr	r2, [pc, #304]	@ (8019cd4 <HAL_DMA_Abort_IT+0x1cc>)
 8019ba4:	4293      	cmp	r3, r2
 8019ba6:	d013      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019ba8:	687b      	ldr	r3, [r7, #4]
 8019baa:	681b      	ldr	r3, [r3, #0]
 8019bac:	4a4a      	ldr	r2, [pc, #296]	@ (8019cd8 <HAL_DMA_Abort_IT+0x1d0>)
 8019bae:	4293      	cmp	r3, r2
 8019bb0:	d00e      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	681b      	ldr	r3, [r3, #0]
 8019bb6:	4a49      	ldr	r2, [pc, #292]	@ (8019cdc <HAL_DMA_Abort_IT+0x1d4>)
 8019bb8:	4293      	cmp	r3, r2
 8019bba:	d009      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019bbc:	687b      	ldr	r3, [r7, #4]
 8019bbe:	681b      	ldr	r3, [r3, #0]
 8019bc0:	4a47      	ldr	r2, [pc, #284]	@ (8019ce0 <HAL_DMA_Abort_IT+0x1d8>)
 8019bc2:	4293      	cmp	r3, r2
 8019bc4:	d004      	beq.n	8019bd0 <HAL_DMA_Abort_IT+0xc8>
 8019bc6:	687b      	ldr	r3, [r7, #4]
 8019bc8:	681b      	ldr	r3, [r3, #0]
 8019bca:	4a46      	ldr	r2, [pc, #280]	@ (8019ce4 <HAL_DMA_Abort_IT+0x1dc>)
 8019bcc:	4293      	cmp	r3, r2
 8019bce:	d101      	bne.n	8019bd4 <HAL_DMA_Abort_IT+0xcc>
 8019bd0:	2301      	movs	r3, #1
 8019bd2:	e000      	b.n	8019bd6 <HAL_DMA_Abort_IT+0xce>
 8019bd4:	2300      	movs	r3, #0
 8019bd6:	2b00      	cmp	r3, #0
 8019bd8:	f000 8086 	beq.w	8019ce8 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8019bdc:	687b      	ldr	r3, [r7, #4]
 8019bde:	2204      	movs	r2, #4
 8019be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8019be4:	687b      	ldr	r3, [r7, #4]
 8019be6:	681b      	ldr	r3, [r3, #0]
 8019be8:	4a2f      	ldr	r2, [pc, #188]	@ (8019ca8 <HAL_DMA_Abort_IT+0x1a0>)
 8019bea:	4293      	cmp	r3, r2
 8019bec:	d04a      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019bee:	687b      	ldr	r3, [r7, #4]
 8019bf0:	681b      	ldr	r3, [r3, #0]
 8019bf2:	4a2e      	ldr	r2, [pc, #184]	@ (8019cac <HAL_DMA_Abort_IT+0x1a4>)
 8019bf4:	4293      	cmp	r3, r2
 8019bf6:	d045      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019bf8:	687b      	ldr	r3, [r7, #4]
 8019bfa:	681b      	ldr	r3, [r3, #0]
 8019bfc:	4a2c      	ldr	r2, [pc, #176]	@ (8019cb0 <HAL_DMA_Abort_IT+0x1a8>)
 8019bfe:	4293      	cmp	r3, r2
 8019c00:	d040      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019c02:	687b      	ldr	r3, [r7, #4]
 8019c04:	681b      	ldr	r3, [r3, #0]
 8019c06:	4a2b      	ldr	r2, [pc, #172]	@ (8019cb4 <HAL_DMA_Abort_IT+0x1ac>)
 8019c08:	4293      	cmp	r3, r2
 8019c0a:	d03b      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019c0c:	687b      	ldr	r3, [r7, #4]
 8019c0e:	681b      	ldr	r3, [r3, #0]
 8019c10:	4a29      	ldr	r2, [pc, #164]	@ (8019cb8 <HAL_DMA_Abort_IT+0x1b0>)
 8019c12:	4293      	cmp	r3, r2
 8019c14:	d036      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019c16:	687b      	ldr	r3, [r7, #4]
 8019c18:	681b      	ldr	r3, [r3, #0]
 8019c1a:	4a28      	ldr	r2, [pc, #160]	@ (8019cbc <HAL_DMA_Abort_IT+0x1b4>)
 8019c1c:	4293      	cmp	r3, r2
 8019c1e:	d031      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019c20:	687b      	ldr	r3, [r7, #4]
 8019c22:	681b      	ldr	r3, [r3, #0]
 8019c24:	4a26      	ldr	r2, [pc, #152]	@ (8019cc0 <HAL_DMA_Abort_IT+0x1b8>)
 8019c26:	4293      	cmp	r3, r2
 8019c28:	d02c      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019c2a:	687b      	ldr	r3, [r7, #4]
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	4a25      	ldr	r2, [pc, #148]	@ (8019cc4 <HAL_DMA_Abort_IT+0x1bc>)
 8019c30:	4293      	cmp	r3, r2
 8019c32:	d027      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019c34:	687b      	ldr	r3, [r7, #4]
 8019c36:	681b      	ldr	r3, [r3, #0]
 8019c38:	4a23      	ldr	r2, [pc, #140]	@ (8019cc8 <HAL_DMA_Abort_IT+0x1c0>)
 8019c3a:	4293      	cmp	r3, r2
 8019c3c:	d022      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	4a22      	ldr	r2, [pc, #136]	@ (8019ccc <HAL_DMA_Abort_IT+0x1c4>)
 8019c44:	4293      	cmp	r3, r2
 8019c46:	d01d      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	4a20      	ldr	r2, [pc, #128]	@ (8019cd0 <HAL_DMA_Abort_IT+0x1c8>)
 8019c4e:	4293      	cmp	r3, r2
 8019c50:	d018      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	4a1f      	ldr	r2, [pc, #124]	@ (8019cd4 <HAL_DMA_Abort_IT+0x1cc>)
 8019c58:	4293      	cmp	r3, r2
 8019c5a:	d013      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	4a1d      	ldr	r2, [pc, #116]	@ (8019cd8 <HAL_DMA_Abort_IT+0x1d0>)
 8019c62:	4293      	cmp	r3, r2
 8019c64:	d00e      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8019cdc <HAL_DMA_Abort_IT+0x1d4>)
 8019c6c:	4293      	cmp	r3, r2
 8019c6e:	d009      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	4a1a      	ldr	r2, [pc, #104]	@ (8019ce0 <HAL_DMA_Abort_IT+0x1d8>)
 8019c76:	4293      	cmp	r3, r2
 8019c78:	d004      	beq.n	8019c84 <HAL_DMA_Abort_IT+0x17c>
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	4a19      	ldr	r2, [pc, #100]	@ (8019ce4 <HAL_DMA_Abort_IT+0x1dc>)
 8019c80:	4293      	cmp	r3, r2
 8019c82:	d108      	bne.n	8019c96 <HAL_DMA_Abort_IT+0x18e>
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	681a      	ldr	r2, [r3, #0]
 8019c8a:	687b      	ldr	r3, [r7, #4]
 8019c8c:	681b      	ldr	r3, [r3, #0]
 8019c8e:	f022 0201 	bic.w	r2, r2, #1
 8019c92:	601a      	str	r2, [r3, #0]
 8019c94:	e178      	b.n	8019f88 <HAL_DMA_Abort_IT+0x480>
 8019c96:	687b      	ldr	r3, [r7, #4]
 8019c98:	681b      	ldr	r3, [r3, #0]
 8019c9a:	681a      	ldr	r2, [r3, #0]
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	f022 0201 	bic.w	r2, r2, #1
 8019ca4:	601a      	str	r2, [r3, #0]
 8019ca6:	e16f      	b.n	8019f88 <HAL_DMA_Abort_IT+0x480>
 8019ca8:	40020010 	.word	0x40020010
 8019cac:	40020028 	.word	0x40020028
 8019cb0:	40020040 	.word	0x40020040
 8019cb4:	40020058 	.word	0x40020058
 8019cb8:	40020070 	.word	0x40020070
 8019cbc:	40020088 	.word	0x40020088
 8019cc0:	400200a0 	.word	0x400200a0
 8019cc4:	400200b8 	.word	0x400200b8
 8019cc8:	40020410 	.word	0x40020410
 8019ccc:	40020428 	.word	0x40020428
 8019cd0:	40020440 	.word	0x40020440
 8019cd4:	40020458 	.word	0x40020458
 8019cd8:	40020470 	.word	0x40020470
 8019cdc:	40020488 	.word	0x40020488
 8019ce0:	400204a0 	.word	0x400204a0
 8019ce4:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8019ce8:	687b      	ldr	r3, [r7, #4]
 8019cea:	681b      	ldr	r3, [r3, #0]
 8019cec:	681a      	ldr	r2, [r3, #0]
 8019cee:	687b      	ldr	r3, [r7, #4]
 8019cf0:	681b      	ldr	r3, [r3, #0]
 8019cf2:	f022 020e 	bic.w	r2, r2, #14
 8019cf6:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8019cf8:	687b      	ldr	r3, [r7, #4]
 8019cfa:	681b      	ldr	r3, [r3, #0]
 8019cfc:	4a6c      	ldr	r2, [pc, #432]	@ (8019eb0 <HAL_DMA_Abort_IT+0x3a8>)
 8019cfe:	4293      	cmp	r3, r2
 8019d00:	d04a      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	681b      	ldr	r3, [r3, #0]
 8019d06:	4a6b      	ldr	r2, [pc, #428]	@ (8019eb4 <HAL_DMA_Abort_IT+0x3ac>)
 8019d08:	4293      	cmp	r3, r2
 8019d0a:	d045      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d0c:	687b      	ldr	r3, [r7, #4]
 8019d0e:	681b      	ldr	r3, [r3, #0]
 8019d10:	4a69      	ldr	r2, [pc, #420]	@ (8019eb8 <HAL_DMA_Abort_IT+0x3b0>)
 8019d12:	4293      	cmp	r3, r2
 8019d14:	d040      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	681b      	ldr	r3, [r3, #0]
 8019d1a:	4a68      	ldr	r2, [pc, #416]	@ (8019ebc <HAL_DMA_Abort_IT+0x3b4>)
 8019d1c:	4293      	cmp	r3, r2
 8019d1e:	d03b      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d20:	687b      	ldr	r3, [r7, #4]
 8019d22:	681b      	ldr	r3, [r3, #0]
 8019d24:	4a66      	ldr	r2, [pc, #408]	@ (8019ec0 <HAL_DMA_Abort_IT+0x3b8>)
 8019d26:	4293      	cmp	r3, r2
 8019d28:	d036      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	4a65      	ldr	r2, [pc, #404]	@ (8019ec4 <HAL_DMA_Abort_IT+0x3bc>)
 8019d30:	4293      	cmp	r3, r2
 8019d32:	d031      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	4a63      	ldr	r2, [pc, #396]	@ (8019ec8 <HAL_DMA_Abort_IT+0x3c0>)
 8019d3a:	4293      	cmp	r3, r2
 8019d3c:	d02c      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	4a62      	ldr	r2, [pc, #392]	@ (8019ecc <HAL_DMA_Abort_IT+0x3c4>)
 8019d44:	4293      	cmp	r3, r2
 8019d46:	d027      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d48:	687b      	ldr	r3, [r7, #4]
 8019d4a:	681b      	ldr	r3, [r3, #0]
 8019d4c:	4a60      	ldr	r2, [pc, #384]	@ (8019ed0 <HAL_DMA_Abort_IT+0x3c8>)
 8019d4e:	4293      	cmp	r3, r2
 8019d50:	d022      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d52:	687b      	ldr	r3, [r7, #4]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	4a5f      	ldr	r2, [pc, #380]	@ (8019ed4 <HAL_DMA_Abort_IT+0x3cc>)
 8019d58:	4293      	cmp	r3, r2
 8019d5a:	d01d      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d5c:	687b      	ldr	r3, [r7, #4]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	4a5d      	ldr	r2, [pc, #372]	@ (8019ed8 <HAL_DMA_Abort_IT+0x3d0>)
 8019d62:	4293      	cmp	r3, r2
 8019d64:	d018      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d66:	687b      	ldr	r3, [r7, #4]
 8019d68:	681b      	ldr	r3, [r3, #0]
 8019d6a:	4a5c      	ldr	r2, [pc, #368]	@ (8019edc <HAL_DMA_Abort_IT+0x3d4>)
 8019d6c:	4293      	cmp	r3, r2
 8019d6e:	d013      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d70:	687b      	ldr	r3, [r7, #4]
 8019d72:	681b      	ldr	r3, [r3, #0]
 8019d74:	4a5a      	ldr	r2, [pc, #360]	@ (8019ee0 <HAL_DMA_Abort_IT+0x3d8>)
 8019d76:	4293      	cmp	r3, r2
 8019d78:	d00e      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d7a:	687b      	ldr	r3, [r7, #4]
 8019d7c:	681b      	ldr	r3, [r3, #0]
 8019d7e:	4a59      	ldr	r2, [pc, #356]	@ (8019ee4 <HAL_DMA_Abort_IT+0x3dc>)
 8019d80:	4293      	cmp	r3, r2
 8019d82:	d009      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d84:	687b      	ldr	r3, [r7, #4]
 8019d86:	681b      	ldr	r3, [r3, #0]
 8019d88:	4a57      	ldr	r2, [pc, #348]	@ (8019ee8 <HAL_DMA_Abort_IT+0x3e0>)
 8019d8a:	4293      	cmp	r3, r2
 8019d8c:	d004      	beq.n	8019d98 <HAL_DMA_Abort_IT+0x290>
 8019d8e:	687b      	ldr	r3, [r7, #4]
 8019d90:	681b      	ldr	r3, [r3, #0]
 8019d92:	4a56      	ldr	r2, [pc, #344]	@ (8019eec <HAL_DMA_Abort_IT+0x3e4>)
 8019d94:	4293      	cmp	r3, r2
 8019d96:	d108      	bne.n	8019daa <HAL_DMA_Abort_IT+0x2a2>
 8019d98:	687b      	ldr	r3, [r7, #4]
 8019d9a:	681b      	ldr	r3, [r3, #0]
 8019d9c:	681a      	ldr	r2, [r3, #0]
 8019d9e:	687b      	ldr	r3, [r7, #4]
 8019da0:	681b      	ldr	r3, [r3, #0]
 8019da2:	f022 0201 	bic.w	r2, r2, #1
 8019da6:	601a      	str	r2, [r3, #0]
 8019da8:	e007      	b.n	8019dba <HAL_DMA_Abort_IT+0x2b2>
 8019daa:	687b      	ldr	r3, [r7, #4]
 8019dac:	681b      	ldr	r3, [r3, #0]
 8019dae:	681a      	ldr	r2, [r3, #0]
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	f022 0201 	bic.w	r2, r2, #1
 8019db8:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	4a3c      	ldr	r2, [pc, #240]	@ (8019eb0 <HAL_DMA_Abort_IT+0x3a8>)
 8019dc0:	4293      	cmp	r3, r2
 8019dc2:	d072      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	4a3a      	ldr	r2, [pc, #232]	@ (8019eb4 <HAL_DMA_Abort_IT+0x3ac>)
 8019dca:	4293      	cmp	r3, r2
 8019dcc:	d06d      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	4a39      	ldr	r2, [pc, #228]	@ (8019eb8 <HAL_DMA_Abort_IT+0x3b0>)
 8019dd4:	4293      	cmp	r3, r2
 8019dd6:	d068      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	4a37      	ldr	r2, [pc, #220]	@ (8019ebc <HAL_DMA_Abort_IT+0x3b4>)
 8019dde:	4293      	cmp	r3, r2
 8019de0:	d063      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	4a36      	ldr	r2, [pc, #216]	@ (8019ec0 <HAL_DMA_Abort_IT+0x3b8>)
 8019de8:	4293      	cmp	r3, r2
 8019dea:	d05e      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	4a34      	ldr	r2, [pc, #208]	@ (8019ec4 <HAL_DMA_Abort_IT+0x3bc>)
 8019df2:	4293      	cmp	r3, r2
 8019df4:	d059      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	4a33      	ldr	r2, [pc, #204]	@ (8019ec8 <HAL_DMA_Abort_IT+0x3c0>)
 8019dfc:	4293      	cmp	r3, r2
 8019dfe:	d054      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	4a31      	ldr	r2, [pc, #196]	@ (8019ecc <HAL_DMA_Abort_IT+0x3c4>)
 8019e06:	4293      	cmp	r3, r2
 8019e08:	d04f      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	4a30      	ldr	r2, [pc, #192]	@ (8019ed0 <HAL_DMA_Abort_IT+0x3c8>)
 8019e10:	4293      	cmp	r3, r2
 8019e12:	d04a      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	4a2e      	ldr	r2, [pc, #184]	@ (8019ed4 <HAL_DMA_Abort_IT+0x3cc>)
 8019e1a:	4293      	cmp	r3, r2
 8019e1c:	d045      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	4a2d      	ldr	r2, [pc, #180]	@ (8019ed8 <HAL_DMA_Abort_IT+0x3d0>)
 8019e24:	4293      	cmp	r3, r2
 8019e26:	d040      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	4a2b      	ldr	r2, [pc, #172]	@ (8019edc <HAL_DMA_Abort_IT+0x3d4>)
 8019e2e:	4293      	cmp	r3, r2
 8019e30:	d03b      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	4a2a      	ldr	r2, [pc, #168]	@ (8019ee0 <HAL_DMA_Abort_IT+0x3d8>)
 8019e38:	4293      	cmp	r3, r2
 8019e3a:	d036      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	4a28      	ldr	r2, [pc, #160]	@ (8019ee4 <HAL_DMA_Abort_IT+0x3dc>)
 8019e42:	4293      	cmp	r3, r2
 8019e44:	d031      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	4a27      	ldr	r2, [pc, #156]	@ (8019ee8 <HAL_DMA_Abort_IT+0x3e0>)
 8019e4c:	4293      	cmp	r3, r2
 8019e4e:	d02c      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	4a25      	ldr	r2, [pc, #148]	@ (8019eec <HAL_DMA_Abort_IT+0x3e4>)
 8019e56:	4293      	cmp	r3, r2
 8019e58:	d027      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	4a24      	ldr	r2, [pc, #144]	@ (8019ef0 <HAL_DMA_Abort_IT+0x3e8>)
 8019e60:	4293      	cmp	r3, r2
 8019e62:	d022      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	4a22      	ldr	r2, [pc, #136]	@ (8019ef4 <HAL_DMA_Abort_IT+0x3ec>)
 8019e6a:	4293      	cmp	r3, r2
 8019e6c:	d01d      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e6e:	687b      	ldr	r3, [r7, #4]
 8019e70:	681b      	ldr	r3, [r3, #0]
 8019e72:	4a21      	ldr	r2, [pc, #132]	@ (8019ef8 <HAL_DMA_Abort_IT+0x3f0>)
 8019e74:	4293      	cmp	r3, r2
 8019e76:	d018      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e78:	687b      	ldr	r3, [r7, #4]
 8019e7a:	681b      	ldr	r3, [r3, #0]
 8019e7c:	4a1f      	ldr	r2, [pc, #124]	@ (8019efc <HAL_DMA_Abort_IT+0x3f4>)
 8019e7e:	4293      	cmp	r3, r2
 8019e80:	d013      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e82:	687b      	ldr	r3, [r7, #4]
 8019e84:	681b      	ldr	r3, [r3, #0]
 8019e86:	4a1e      	ldr	r2, [pc, #120]	@ (8019f00 <HAL_DMA_Abort_IT+0x3f8>)
 8019e88:	4293      	cmp	r3, r2
 8019e8a:	d00e      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	681b      	ldr	r3, [r3, #0]
 8019e90:	4a1c      	ldr	r2, [pc, #112]	@ (8019f04 <HAL_DMA_Abort_IT+0x3fc>)
 8019e92:	4293      	cmp	r3, r2
 8019e94:	d009      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019e96:	687b      	ldr	r3, [r7, #4]
 8019e98:	681b      	ldr	r3, [r3, #0]
 8019e9a:	4a1b      	ldr	r2, [pc, #108]	@ (8019f08 <HAL_DMA_Abort_IT+0x400>)
 8019e9c:	4293      	cmp	r3, r2
 8019e9e:	d004      	beq.n	8019eaa <HAL_DMA_Abort_IT+0x3a2>
 8019ea0:	687b      	ldr	r3, [r7, #4]
 8019ea2:	681b      	ldr	r3, [r3, #0]
 8019ea4:	4a19      	ldr	r2, [pc, #100]	@ (8019f0c <HAL_DMA_Abort_IT+0x404>)
 8019ea6:	4293      	cmp	r3, r2
 8019ea8:	d132      	bne.n	8019f10 <HAL_DMA_Abort_IT+0x408>
 8019eaa:	2301      	movs	r3, #1
 8019eac:	e031      	b.n	8019f12 <HAL_DMA_Abort_IT+0x40a>
 8019eae:	bf00      	nop
 8019eb0:	40020010 	.word	0x40020010
 8019eb4:	40020028 	.word	0x40020028
 8019eb8:	40020040 	.word	0x40020040
 8019ebc:	40020058 	.word	0x40020058
 8019ec0:	40020070 	.word	0x40020070
 8019ec4:	40020088 	.word	0x40020088
 8019ec8:	400200a0 	.word	0x400200a0
 8019ecc:	400200b8 	.word	0x400200b8
 8019ed0:	40020410 	.word	0x40020410
 8019ed4:	40020428 	.word	0x40020428
 8019ed8:	40020440 	.word	0x40020440
 8019edc:	40020458 	.word	0x40020458
 8019ee0:	40020470 	.word	0x40020470
 8019ee4:	40020488 	.word	0x40020488
 8019ee8:	400204a0 	.word	0x400204a0
 8019eec:	400204b8 	.word	0x400204b8
 8019ef0:	58025408 	.word	0x58025408
 8019ef4:	5802541c 	.word	0x5802541c
 8019ef8:	58025430 	.word	0x58025430
 8019efc:	58025444 	.word	0x58025444
 8019f00:	58025458 	.word	0x58025458
 8019f04:	5802546c 	.word	0x5802546c
 8019f08:	58025480 	.word	0x58025480
 8019f0c:	58025494 	.word	0x58025494
 8019f10:	2300      	movs	r3, #0
 8019f12:	2b00      	cmp	r3, #0
 8019f14:	d028      	beq.n	8019f68 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8019f16:	687b      	ldr	r3, [r7, #4]
 8019f18:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019f1a:	681a      	ldr	r2, [r3, #0]
 8019f1c:	687b      	ldr	r3, [r7, #4]
 8019f1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019f20:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8019f24:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8019f26:	687b      	ldr	r3, [r7, #4]
 8019f28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019f2a:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8019f2c:	687b      	ldr	r3, [r7, #4]
 8019f2e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019f30:	f003 031f 	and.w	r3, r3, #31
 8019f34:	2201      	movs	r2, #1
 8019f36:	409a      	lsls	r2, r3
 8019f38:	68fb      	ldr	r3, [r7, #12]
 8019f3a:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019f3c:	687b      	ldr	r3, [r7, #4]
 8019f3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019f40:	687a      	ldr	r2, [r7, #4]
 8019f42:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8019f44:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8019f46:	687b      	ldr	r3, [r7, #4]
 8019f48:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f4a:	2b00      	cmp	r3, #0
 8019f4c:	d00c      	beq.n	8019f68 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8019f4e:	687b      	ldr	r3, [r7, #4]
 8019f50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f52:	681a      	ldr	r2, [r3, #0]
 8019f54:	687b      	ldr	r3, [r7, #4]
 8019f56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019f58:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8019f5c:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019f5e:	687b      	ldr	r3, [r7, #4]
 8019f60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019f62:	687a      	ldr	r2, [r7, #4]
 8019f64:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8019f66:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	2201      	movs	r2, #1
 8019f6c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	2200      	movs	r2, #0
 8019f74:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8019f78:	687b      	ldr	r3, [r7, #4]
 8019f7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f7c:	2b00      	cmp	r3, #0
 8019f7e:	d003      	beq.n	8019f88 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8019f80:	687b      	ldr	r3, [r7, #4]
 8019f82:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8019f84:	6878      	ldr	r0, [r7, #4]
 8019f86:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8019f88:	2300      	movs	r3, #0
}
 8019f8a:	4618      	mov	r0, r3
 8019f8c:	3710      	adds	r7, #16
 8019f8e:	46bd      	mov	sp, r7
 8019f90:	bd80      	pop	{r7, pc}
 8019f92:	bf00      	nop

08019f94 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8019f94:	b580      	push	{r7, lr}
 8019f96:	b08a      	sub	sp, #40	@ 0x28
 8019f98:	af00      	add	r7, sp, #0
 8019f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8019f9c:	2300      	movs	r3, #0
 8019f9e:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8019fa0:	4b67      	ldr	r3, [pc, #412]	@ (801a140 <HAL_DMA_IRQHandler+0x1ac>)
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	4a67      	ldr	r2, [pc, #412]	@ (801a144 <HAL_DMA_IRQHandler+0x1b0>)
 8019fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8019faa:	0a9b      	lsrs	r3, r3, #10
 8019fac:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8019fae:	687b      	ldr	r3, [r7, #4]
 8019fb0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019fb2:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8019fb4:	687b      	ldr	r3, [r7, #4]
 8019fb6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019fb8:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 8019fba:	6a3b      	ldr	r3, [r7, #32]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 8019fc0:	69fb      	ldr	r3, [r7, #28]
 8019fc2:	681b      	ldr	r3, [r3, #0]
 8019fc4:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 8019fc6:	687b      	ldr	r3, [r7, #4]
 8019fc8:	681b      	ldr	r3, [r3, #0]
 8019fca:	4a5f      	ldr	r2, [pc, #380]	@ (801a148 <HAL_DMA_IRQHandler+0x1b4>)
 8019fcc:	4293      	cmp	r3, r2
 8019fce:	d04a      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 8019fd0:	687b      	ldr	r3, [r7, #4]
 8019fd2:	681b      	ldr	r3, [r3, #0]
 8019fd4:	4a5d      	ldr	r2, [pc, #372]	@ (801a14c <HAL_DMA_IRQHandler+0x1b8>)
 8019fd6:	4293      	cmp	r3, r2
 8019fd8:	d045      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 8019fda:	687b      	ldr	r3, [r7, #4]
 8019fdc:	681b      	ldr	r3, [r3, #0]
 8019fde:	4a5c      	ldr	r2, [pc, #368]	@ (801a150 <HAL_DMA_IRQHandler+0x1bc>)
 8019fe0:	4293      	cmp	r3, r2
 8019fe2:	d040      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 8019fe4:	687b      	ldr	r3, [r7, #4]
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	4a5a      	ldr	r2, [pc, #360]	@ (801a154 <HAL_DMA_IRQHandler+0x1c0>)
 8019fea:	4293      	cmp	r3, r2
 8019fec:	d03b      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 8019fee:	687b      	ldr	r3, [r7, #4]
 8019ff0:	681b      	ldr	r3, [r3, #0]
 8019ff2:	4a59      	ldr	r2, [pc, #356]	@ (801a158 <HAL_DMA_IRQHandler+0x1c4>)
 8019ff4:	4293      	cmp	r3, r2
 8019ff6:	d036      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 8019ff8:	687b      	ldr	r3, [r7, #4]
 8019ffa:	681b      	ldr	r3, [r3, #0]
 8019ffc:	4a57      	ldr	r2, [pc, #348]	@ (801a15c <HAL_DMA_IRQHandler+0x1c8>)
 8019ffe:	4293      	cmp	r3, r2
 801a000:	d031      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 801a002:	687b      	ldr	r3, [r7, #4]
 801a004:	681b      	ldr	r3, [r3, #0]
 801a006:	4a56      	ldr	r2, [pc, #344]	@ (801a160 <HAL_DMA_IRQHandler+0x1cc>)
 801a008:	4293      	cmp	r3, r2
 801a00a:	d02c      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 801a00c:	687b      	ldr	r3, [r7, #4]
 801a00e:	681b      	ldr	r3, [r3, #0]
 801a010:	4a54      	ldr	r2, [pc, #336]	@ (801a164 <HAL_DMA_IRQHandler+0x1d0>)
 801a012:	4293      	cmp	r3, r2
 801a014:	d027      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 801a016:	687b      	ldr	r3, [r7, #4]
 801a018:	681b      	ldr	r3, [r3, #0]
 801a01a:	4a53      	ldr	r2, [pc, #332]	@ (801a168 <HAL_DMA_IRQHandler+0x1d4>)
 801a01c:	4293      	cmp	r3, r2
 801a01e:	d022      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	681b      	ldr	r3, [r3, #0]
 801a024:	4a51      	ldr	r2, [pc, #324]	@ (801a16c <HAL_DMA_IRQHandler+0x1d8>)
 801a026:	4293      	cmp	r3, r2
 801a028:	d01d      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 801a02a:	687b      	ldr	r3, [r7, #4]
 801a02c:	681b      	ldr	r3, [r3, #0]
 801a02e:	4a50      	ldr	r2, [pc, #320]	@ (801a170 <HAL_DMA_IRQHandler+0x1dc>)
 801a030:	4293      	cmp	r3, r2
 801a032:	d018      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	4a4e      	ldr	r2, [pc, #312]	@ (801a174 <HAL_DMA_IRQHandler+0x1e0>)
 801a03a:	4293      	cmp	r3, r2
 801a03c:	d013      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 801a03e:	687b      	ldr	r3, [r7, #4]
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	4a4d      	ldr	r2, [pc, #308]	@ (801a178 <HAL_DMA_IRQHandler+0x1e4>)
 801a044:	4293      	cmp	r3, r2
 801a046:	d00e      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 801a048:	687b      	ldr	r3, [r7, #4]
 801a04a:	681b      	ldr	r3, [r3, #0]
 801a04c:	4a4b      	ldr	r2, [pc, #300]	@ (801a17c <HAL_DMA_IRQHandler+0x1e8>)
 801a04e:	4293      	cmp	r3, r2
 801a050:	d009      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	681b      	ldr	r3, [r3, #0]
 801a056:	4a4a      	ldr	r2, [pc, #296]	@ (801a180 <HAL_DMA_IRQHandler+0x1ec>)
 801a058:	4293      	cmp	r3, r2
 801a05a:	d004      	beq.n	801a066 <HAL_DMA_IRQHandler+0xd2>
 801a05c:	687b      	ldr	r3, [r7, #4]
 801a05e:	681b      	ldr	r3, [r3, #0]
 801a060:	4a48      	ldr	r2, [pc, #288]	@ (801a184 <HAL_DMA_IRQHandler+0x1f0>)
 801a062:	4293      	cmp	r3, r2
 801a064:	d101      	bne.n	801a06a <HAL_DMA_IRQHandler+0xd6>
 801a066:	2301      	movs	r3, #1
 801a068:	e000      	b.n	801a06c <HAL_DMA_IRQHandler+0xd8>
 801a06a:	2300      	movs	r3, #0
 801a06c:	2b00      	cmp	r3, #0
 801a06e:	f000 842b 	beq.w	801a8c8 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a072:	687b      	ldr	r3, [r7, #4]
 801a074:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a076:	f003 031f 	and.w	r3, r3, #31
 801a07a:	2208      	movs	r2, #8
 801a07c:	409a      	lsls	r2, r3
 801a07e:	69bb      	ldr	r3, [r7, #24]
 801a080:	4013      	ands	r3, r2
 801a082:	2b00      	cmp	r3, #0
 801a084:	f000 80a2 	beq.w	801a1cc <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801a088:	687b      	ldr	r3, [r7, #4]
 801a08a:	681b      	ldr	r3, [r3, #0]
 801a08c:	4a2e      	ldr	r2, [pc, #184]	@ (801a148 <HAL_DMA_IRQHandler+0x1b4>)
 801a08e:	4293      	cmp	r3, r2
 801a090:	d04a      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a092:	687b      	ldr	r3, [r7, #4]
 801a094:	681b      	ldr	r3, [r3, #0]
 801a096:	4a2d      	ldr	r2, [pc, #180]	@ (801a14c <HAL_DMA_IRQHandler+0x1b8>)
 801a098:	4293      	cmp	r3, r2
 801a09a:	d045      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a09c:	687b      	ldr	r3, [r7, #4]
 801a09e:	681b      	ldr	r3, [r3, #0]
 801a0a0:	4a2b      	ldr	r2, [pc, #172]	@ (801a150 <HAL_DMA_IRQHandler+0x1bc>)
 801a0a2:	4293      	cmp	r3, r2
 801a0a4:	d040      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a0a6:	687b      	ldr	r3, [r7, #4]
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	4a2a      	ldr	r2, [pc, #168]	@ (801a154 <HAL_DMA_IRQHandler+0x1c0>)
 801a0ac:	4293      	cmp	r3, r2
 801a0ae:	d03b      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a0b0:	687b      	ldr	r3, [r7, #4]
 801a0b2:	681b      	ldr	r3, [r3, #0]
 801a0b4:	4a28      	ldr	r2, [pc, #160]	@ (801a158 <HAL_DMA_IRQHandler+0x1c4>)
 801a0b6:	4293      	cmp	r3, r2
 801a0b8:	d036      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	681b      	ldr	r3, [r3, #0]
 801a0be:	4a27      	ldr	r2, [pc, #156]	@ (801a15c <HAL_DMA_IRQHandler+0x1c8>)
 801a0c0:	4293      	cmp	r3, r2
 801a0c2:	d031      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a0c4:	687b      	ldr	r3, [r7, #4]
 801a0c6:	681b      	ldr	r3, [r3, #0]
 801a0c8:	4a25      	ldr	r2, [pc, #148]	@ (801a160 <HAL_DMA_IRQHandler+0x1cc>)
 801a0ca:	4293      	cmp	r3, r2
 801a0cc:	d02c      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a0ce:	687b      	ldr	r3, [r7, #4]
 801a0d0:	681b      	ldr	r3, [r3, #0]
 801a0d2:	4a24      	ldr	r2, [pc, #144]	@ (801a164 <HAL_DMA_IRQHandler+0x1d0>)
 801a0d4:	4293      	cmp	r3, r2
 801a0d6:	d027      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a0d8:	687b      	ldr	r3, [r7, #4]
 801a0da:	681b      	ldr	r3, [r3, #0]
 801a0dc:	4a22      	ldr	r2, [pc, #136]	@ (801a168 <HAL_DMA_IRQHandler+0x1d4>)
 801a0de:	4293      	cmp	r3, r2
 801a0e0:	d022      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	4a21      	ldr	r2, [pc, #132]	@ (801a16c <HAL_DMA_IRQHandler+0x1d8>)
 801a0e8:	4293      	cmp	r3, r2
 801a0ea:	d01d      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a0ec:	687b      	ldr	r3, [r7, #4]
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	4a1f      	ldr	r2, [pc, #124]	@ (801a170 <HAL_DMA_IRQHandler+0x1dc>)
 801a0f2:	4293      	cmp	r3, r2
 801a0f4:	d018      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a0f6:	687b      	ldr	r3, [r7, #4]
 801a0f8:	681b      	ldr	r3, [r3, #0]
 801a0fa:	4a1e      	ldr	r2, [pc, #120]	@ (801a174 <HAL_DMA_IRQHandler+0x1e0>)
 801a0fc:	4293      	cmp	r3, r2
 801a0fe:	d013      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a100:	687b      	ldr	r3, [r7, #4]
 801a102:	681b      	ldr	r3, [r3, #0]
 801a104:	4a1c      	ldr	r2, [pc, #112]	@ (801a178 <HAL_DMA_IRQHandler+0x1e4>)
 801a106:	4293      	cmp	r3, r2
 801a108:	d00e      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a10a:	687b      	ldr	r3, [r7, #4]
 801a10c:	681b      	ldr	r3, [r3, #0]
 801a10e:	4a1b      	ldr	r2, [pc, #108]	@ (801a17c <HAL_DMA_IRQHandler+0x1e8>)
 801a110:	4293      	cmp	r3, r2
 801a112:	d009      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a114:	687b      	ldr	r3, [r7, #4]
 801a116:	681b      	ldr	r3, [r3, #0]
 801a118:	4a19      	ldr	r2, [pc, #100]	@ (801a180 <HAL_DMA_IRQHandler+0x1ec>)
 801a11a:	4293      	cmp	r3, r2
 801a11c:	d004      	beq.n	801a128 <HAL_DMA_IRQHandler+0x194>
 801a11e:	687b      	ldr	r3, [r7, #4]
 801a120:	681b      	ldr	r3, [r3, #0]
 801a122:	4a18      	ldr	r2, [pc, #96]	@ (801a184 <HAL_DMA_IRQHandler+0x1f0>)
 801a124:	4293      	cmp	r3, r2
 801a126:	d12f      	bne.n	801a188 <HAL_DMA_IRQHandler+0x1f4>
 801a128:	687b      	ldr	r3, [r7, #4]
 801a12a:	681b      	ldr	r3, [r3, #0]
 801a12c:	681b      	ldr	r3, [r3, #0]
 801a12e:	f003 0304 	and.w	r3, r3, #4
 801a132:	2b00      	cmp	r3, #0
 801a134:	bf14      	ite	ne
 801a136:	2301      	movne	r3, #1
 801a138:	2300      	moveq	r3, #0
 801a13a:	b2db      	uxtb	r3, r3
 801a13c:	e02e      	b.n	801a19c <HAL_DMA_IRQHandler+0x208>
 801a13e:	bf00      	nop
 801a140:	20000000 	.word	0x20000000
 801a144:	1b4e81b5 	.word	0x1b4e81b5
 801a148:	40020010 	.word	0x40020010
 801a14c:	40020028 	.word	0x40020028
 801a150:	40020040 	.word	0x40020040
 801a154:	40020058 	.word	0x40020058
 801a158:	40020070 	.word	0x40020070
 801a15c:	40020088 	.word	0x40020088
 801a160:	400200a0 	.word	0x400200a0
 801a164:	400200b8 	.word	0x400200b8
 801a168:	40020410 	.word	0x40020410
 801a16c:	40020428 	.word	0x40020428
 801a170:	40020440 	.word	0x40020440
 801a174:	40020458 	.word	0x40020458
 801a178:	40020470 	.word	0x40020470
 801a17c:	40020488 	.word	0x40020488
 801a180:	400204a0 	.word	0x400204a0
 801a184:	400204b8 	.word	0x400204b8
 801a188:	687b      	ldr	r3, [r7, #4]
 801a18a:	681b      	ldr	r3, [r3, #0]
 801a18c:	681b      	ldr	r3, [r3, #0]
 801a18e:	f003 0308 	and.w	r3, r3, #8
 801a192:	2b00      	cmp	r3, #0
 801a194:	bf14      	ite	ne
 801a196:	2301      	movne	r3, #1
 801a198:	2300      	moveq	r3, #0
 801a19a:	b2db      	uxtb	r3, r3
 801a19c:	2b00      	cmp	r3, #0
 801a19e:	d015      	beq.n	801a1cc <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	681a      	ldr	r2, [r3, #0]
 801a1a6:	687b      	ldr	r3, [r7, #4]
 801a1a8:	681b      	ldr	r3, [r3, #0]
 801a1aa:	f022 0204 	bic.w	r2, r2, #4
 801a1ae:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a1b0:	687b      	ldr	r3, [r7, #4]
 801a1b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a1b4:	f003 031f 	and.w	r3, r3, #31
 801a1b8:	2208      	movs	r2, #8
 801a1ba:	409a      	lsls	r2, r3
 801a1bc:	6a3b      	ldr	r3, [r7, #32]
 801a1be:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a1c4:	f043 0201 	orr.w	r2, r3, #1
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a1cc:	687b      	ldr	r3, [r7, #4]
 801a1ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a1d0:	f003 031f 	and.w	r3, r3, #31
 801a1d4:	69ba      	ldr	r2, [r7, #24]
 801a1d6:	fa22 f303 	lsr.w	r3, r2, r3
 801a1da:	f003 0301 	and.w	r3, r3, #1
 801a1de:	2b00      	cmp	r3, #0
 801a1e0:	d06e      	beq.n	801a2c0 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801a1e2:	687b      	ldr	r3, [r7, #4]
 801a1e4:	681b      	ldr	r3, [r3, #0]
 801a1e6:	4a69      	ldr	r2, [pc, #420]	@ (801a38c <HAL_DMA_IRQHandler+0x3f8>)
 801a1e8:	4293      	cmp	r3, r2
 801a1ea:	d04a      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	681b      	ldr	r3, [r3, #0]
 801a1f0:	4a67      	ldr	r2, [pc, #412]	@ (801a390 <HAL_DMA_IRQHandler+0x3fc>)
 801a1f2:	4293      	cmp	r3, r2
 801a1f4:	d045      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	4a66      	ldr	r2, [pc, #408]	@ (801a394 <HAL_DMA_IRQHandler+0x400>)
 801a1fc:	4293      	cmp	r3, r2
 801a1fe:	d040      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	4a64      	ldr	r2, [pc, #400]	@ (801a398 <HAL_DMA_IRQHandler+0x404>)
 801a206:	4293      	cmp	r3, r2
 801a208:	d03b      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a20a:	687b      	ldr	r3, [r7, #4]
 801a20c:	681b      	ldr	r3, [r3, #0]
 801a20e:	4a63      	ldr	r2, [pc, #396]	@ (801a39c <HAL_DMA_IRQHandler+0x408>)
 801a210:	4293      	cmp	r3, r2
 801a212:	d036      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a214:	687b      	ldr	r3, [r7, #4]
 801a216:	681b      	ldr	r3, [r3, #0]
 801a218:	4a61      	ldr	r2, [pc, #388]	@ (801a3a0 <HAL_DMA_IRQHandler+0x40c>)
 801a21a:	4293      	cmp	r3, r2
 801a21c:	d031      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a21e:	687b      	ldr	r3, [r7, #4]
 801a220:	681b      	ldr	r3, [r3, #0]
 801a222:	4a60      	ldr	r2, [pc, #384]	@ (801a3a4 <HAL_DMA_IRQHandler+0x410>)
 801a224:	4293      	cmp	r3, r2
 801a226:	d02c      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	681b      	ldr	r3, [r3, #0]
 801a22c:	4a5e      	ldr	r2, [pc, #376]	@ (801a3a8 <HAL_DMA_IRQHandler+0x414>)
 801a22e:	4293      	cmp	r3, r2
 801a230:	d027      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a232:	687b      	ldr	r3, [r7, #4]
 801a234:	681b      	ldr	r3, [r3, #0]
 801a236:	4a5d      	ldr	r2, [pc, #372]	@ (801a3ac <HAL_DMA_IRQHandler+0x418>)
 801a238:	4293      	cmp	r3, r2
 801a23a:	d022      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a23c:	687b      	ldr	r3, [r7, #4]
 801a23e:	681b      	ldr	r3, [r3, #0]
 801a240:	4a5b      	ldr	r2, [pc, #364]	@ (801a3b0 <HAL_DMA_IRQHandler+0x41c>)
 801a242:	4293      	cmp	r3, r2
 801a244:	d01d      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	681b      	ldr	r3, [r3, #0]
 801a24a:	4a5a      	ldr	r2, [pc, #360]	@ (801a3b4 <HAL_DMA_IRQHandler+0x420>)
 801a24c:	4293      	cmp	r3, r2
 801a24e:	d018      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a250:	687b      	ldr	r3, [r7, #4]
 801a252:	681b      	ldr	r3, [r3, #0]
 801a254:	4a58      	ldr	r2, [pc, #352]	@ (801a3b8 <HAL_DMA_IRQHandler+0x424>)
 801a256:	4293      	cmp	r3, r2
 801a258:	d013      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a25a:	687b      	ldr	r3, [r7, #4]
 801a25c:	681b      	ldr	r3, [r3, #0]
 801a25e:	4a57      	ldr	r2, [pc, #348]	@ (801a3bc <HAL_DMA_IRQHandler+0x428>)
 801a260:	4293      	cmp	r3, r2
 801a262:	d00e      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a264:	687b      	ldr	r3, [r7, #4]
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	4a55      	ldr	r2, [pc, #340]	@ (801a3c0 <HAL_DMA_IRQHandler+0x42c>)
 801a26a:	4293      	cmp	r3, r2
 801a26c:	d009      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	4a54      	ldr	r2, [pc, #336]	@ (801a3c4 <HAL_DMA_IRQHandler+0x430>)
 801a274:	4293      	cmp	r3, r2
 801a276:	d004      	beq.n	801a282 <HAL_DMA_IRQHandler+0x2ee>
 801a278:	687b      	ldr	r3, [r7, #4]
 801a27a:	681b      	ldr	r3, [r3, #0]
 801a27c:	4a52      	ldr	r2, [pc, #328]	@ (801a3c8 <HAL_DMA_IRQHandler+0x434>)
 801a27e:	4293      	cmp	r3, r2
 801a280:	d10a      	bne.n	801a298 <HAL_DMA_IRQHandler+0x304>
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	695b      	ldr	r3, [r3, #20]
 801a288:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a28c:	2b00      	cmp	r3, #0
 801a28e:	bf14      	ite	ne
 801a290:	2301      	movne	r3, #1
 801a292:	2300      	moveq	r3, #0
 801a294:	b2db      	uxtb	r3, r3
 801a296:	e003      	b.n	801a2a0 <HAL_DMA_IRQHandler+0x30c>
 801a298:	687b      	ldr	r3, [r7, #4]
 801a29a:	681b      	ldr	r3, [r3, #0]
 801a29c:	681b      	ldr	r3, [r3, #0]
 801a29e:	2300      	movs	r3, #0
 801a2a0:	2b00      	cmp	r3, #0
 801a2a2:	d00d      	beq.n	801a2c0 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a2a4:	687b      	ldr	r3, [r7, #4]
 801a2a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a2a8:	f003 031f 	and.w	r3, r3, #31
 801a2ac:	2201      	movs	r2, #1
 801a2ae:	409a      	lsls	r2, r3
 801a2b0:	6a3b      	ldr	r3, [r7, #32]
 801a2b2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801a2b4:	687b      	ldr	r3, [r7, #4]
 801a2b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a2b8:	f043 0202 	orr.w	r2, r3, #2
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a2c0:	687b      	ldr	r3, [r7, #4]
 801a2c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a2c4:	f003 031f 	and.w	r3, r3, #31
 801a2c8:	2204      	movs	r2, #4
 801a2ca:	409a      	lsls	r2, r3
 801a2cc:	69bb      	ldr	r3, [r7, #24]
 801a2ce:	4013      	ands	r3, r2
 801a2d0:	2b00      	cmp	r3, #0
 801a2d2:	f000 808f 	beq.w	801a3f4 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	681b      	ldr	r3, [r3, #0]
 801a2da:	4a2c      	ldr	r2, [pc, #176]	@ (801a38c <HAL_DMA_IRQHandler+0x3f8>)
 801a2dc:	4293      	cmp	r3, r2
 801a2de:	d04a      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a2e0:	687b      	ldr	r3, [r7, #4]
 801a2e2:	681b      	ldr	r3, [r3, #0]
 801a2e4:	4a2a      	ldr	r2, [pc, #168]	@ (801a390 <HAL_DMA_IRQHandler+0x3fc>)
 801a2e6:	4293      	cmp	r3, r2
 801a2e8:	d045      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a2ea:	687b      	ldr	r3, [r7, #4]
 801a2ec:	681b      	ldr	r3, [r3, #0]
 801a2ee:	4a29      	ldr	r2, [pc, #164]	@ (801a394 <HAL_DMA_IRQHandler+0x400>)
 801a2f0:	4293      	cmp	r3, r2
 801a2f2:	d040      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a2f4:	687b      	ldr	r3, [r7, #4]
 801a2f6:	681b      	ldr	r3, [r3, #0]
 801a2f8:	4a27      	ldr	r2, [pc, #156]	@ (801a398 <HAL_DMA_IRQHandler+0x404>)
 801a2fa:	4293      	cmp	r3, r2
 801a2fc:	d03b      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a2fe:	687b      	ldr	r3, [r7, #4]
 801a300:	681b      	ldr	r3, [r3, #0]
 801a302:	4a26      	ldr	r2, [pc, #152]	@ (801a39c <HAL_DMA_IRQHandler+0x408>)
 801a304:	4293      	cmp	r3, r2
 801a306:	d036      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a308:	687b      	ldr	r3, [r7, #4]
 801a30a:	681b      	ldr	r3, [r3, #0]
 801a30c:	4a24      	ldr	r2, [pc, #144]	@ (801a3a0 <HAL_DMA_IRQHandler+0x40c>)
 801a30e:	4293      	cmp	r3, r2
 801a310:	d031      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a312:	687b      	ldr	r3, [r7, #4]
 801a314:	681b      	ldr	r3, [r3, #0]
 801a316:	4a23      	ldr	r2, [pc, #140]	@ (801a3a4 <HAL_DMA_IRQHandler+0x410>)
 801a318:	4293      	cmp	r3, r2
 801a31a:	d02c      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a31c:	687b      	ldr	r3, [r7, #4]
 801a31e:	681b      	ldr	r3, [r3, #0]
 801a320:	4a21      	ldr	r2, [pc, #132]	@ (801a3a8 <HAL_DMA_IRQHandler+0x414>)
 801a322:	4293      	cmp	r3, r2
 801a324:	d027      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a326:	687b      	ldr	r3, [r7, #4]
 801a328:	681b      	ldr	r3, [r3, #0]
 801a32a:	4a20      	ldr	r2, [pc, #128]	@ (801a3ac <HAL_DMA_IRQHandler+0x418>)
 801a32c:	4293      	cmp	r3, r2
 801a32e:	d022      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a330:	687b      	ldr	r3, [r7, #4]
 801a332:	681b      	ldr	r3, [r3, #0]
 801a334:	4a1e      	ldr	r2, [pc, #120]	@ (801a3b0 <HAL_DMA_IRQHandler+0x41c>)
 801a336:	4293      	cmp	r3, r2
 801a338:	d01d      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a33a:	687b      	ldr	r3, [r7, #4]
 801a33c:	681b      	ldr	r3, [r3, #0]
 801a33e:	4a1d      	ldr	r2, [pc, #116]	@ (801a3b4 <HAL_DMA_IRQHandler+0x420>)
 801a340:	4293      	cmp	r3, r2
 801a342:	d018      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a344:	687b      	ldr	r3, [r7, #4]
 801a346:	681b      	ldr	r3, [r3, #0]
 801a348:	4a1b      	ldr	r2, [pc, #108]	@ (801a3b8 <HAL_DMA_IRQHandler+0x424>)
 801a34a:	4293      	cmp	r3, r2
 801a34c:	d013      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a34e:	687b      	ldr	r3, [r7, #4]
 801a350:	681b      	ldr	r3, [r3, #0]
 801a352:	4a1a      	ldr	r2, [pc, #104]	@ (801a3bc <HAL_DMA_IRQHandler+0x428>)
 801a354:	4293      	cmp	r3, r2
 801a356:	d00e      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a358:	687b      	ldr	r3, [r7, #4]
 801a35a:	681b      	ldr	r3, [r3, #0]
 801a35c:	4a18      	ldr	r2, [pc, #96]	@ (801a3c0 <HAL_DMA_IRQHandler+0x42c>)
 801a35e:	4293      	cmp	r3, r2
 801a360:	d009      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a362:	687b      	ldr	r3, [r7, #4]
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	4a17      	ldr	r2, [pc, #92]	@ (801a3c4 <HAL_DMA_IRQHandler+0x430>)
 801a368:	4293      	cmp	r3, r2
 801a36a:	d004      	beq.n	801a376 <HAL_DMA_IRQHandler+0x3e2>
 801a36c:	687b      	ldr	r3, [r7, #4]
 801a36e:	681b      	ldr	r3, [r3, #0]
 801a370:	4a15      	ldr	r2, [pc, #84]	@ (801a3c8 <HAL_DMA_IRQHandler+0x434>)
 801a372:	4293      	cmp	r3, r2
 801a374:	d12a      	bne.n	801a3cc <HAL_DMA_IRQHandler+0x438>
 801a376:	687b      	ldr	r3, [r7, #4]
 801a378:	681b      	ldr	r3, [r3, #0]
 801a37a:	681b      	ldr	r3, [r3, #0]
 801a37c:	f003 0302 	and.w	r3, r3, #2
 801a380:	2b00      	cmp	r3, #0
 801a382:	bf14      	ite	ne
 801a384:	2301      	movne	r3, #1
 801a386:	2300      	moveq	r3, #0
 801a388:	b2db      	uxtb	r3, r3
 801a38a:	e023      	b.n	801a3d4 <HAL_DMA_IRQHandler+0x440>
 801a38c:	40020010 	.word	0x40020010
 801a390:	40020028 	.word	0x40020028
 801a394:	40020040 	.word	0x40020040
 801a398:	40020058 	.word	0x40020058
 801a39c:	40020070 	.word	0x40020070
 801a3a0:	40020088 	.word	0x40020088
 801a3a4:	400200a0 	.word	0x400200a0
 801a3a8:	400200b8 	.word	0x400200b8
 801a3ac:	40020410 	.word	0x40020410
 801a3b0:	40020428 	.word	0x40020428
 801a3b4:	40020440 	.word	0x40020440
 801a3b8:	40020458 	.word	0x40020458
 801a3bc:	40020470 	.word	0x40020470
 801a3c0:	40020488 	.word	0x40020488
 801a3c4:	400204a0 	.word	0x400204a0
 801a3c8:	400204b8 	.word	0x400204b8
 801a3cc:	687b      	ldr	r3, [r7, #4]
 801a3ce:	681b      	ldr	r3, [r3, #0]
 801a3d0:	681b      	ldr	r3, [r3, #0]
 801a3d2:	2300      	movs	r3, #0
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d00d      	beq.n	801a3f4 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a3dc:	f003 031f 	and.w	r3, r3, #31
 801a3e0:	2204      	movs	r2, #4
 801a3e2:	409a      	lsls	r2, r3
 801a3e4:	6a3b      	ldr	r3, [r7, #32]
 801a3e6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801a3e8:	687b      	ldr	r3, [r7, #4]
 801a3ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a3ec:	f043 0204 	orr.w	r2, r3, #4
 801a3f0:	687b      	ldr	r3, [r7, #4]
 801a3f2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a3f4:	687b      	ldr	r3, [r7, #4]
 801a3f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a3f8:	f003 031f 	and.w	r3, r3, #31
 801a3fc:	2210      	movs	r2, #16
 801a3fe:	409a      	lsls	r2, r3
 801a400:	69bb      	ldr	r3, [r7, #24]
 801a402:	4013      	ands	r3, r2
 801a404:	2b00      	cmp	r3, #0
 801a406:	f000 80a6 	beq.w	801a556 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	4a85      	ldr	r2, [pc, #532]	@ (801a624 <HAL_DMA_IRQHandler+0x690>)
 801a410:	4293      	cmp	r3, r2
 801a412:	d04a      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a414:	687b      	ldr	r3, [r7, #4]
 801a416:	681b      	ldr	r3, [r3, #0]
 801a418:	4a83      	ldr	r2, [pc, #524]	@ (801a628 <HAL_DMA_IRQHandler+0x694>)
 801a41a:	4293      	cmp	r3, r2
 801a41c:	d045      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	4a82      	ldr	r2, [pc, #520]	@ (801a62c <HAL_DMA_IRQHandler+0x698>)
 801a424:	4293      	cmp	r3, r2
 801a426:	d040      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	4a80      	ldr	r2, [pc, #512]	@ (801a630 <HAL_DMA_IRQHandler+0x69c>)
 801a42e:	4293      	cmp	r3, r2
 801a430:	d03b      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	4a7f      	ldr	r2, [pc, #508]	@ (801a634 <HAL_DMA_IRQHandler+0x6a0>)
 801a438:	4293      	cmp	r3, r2
 801a43a:	d036      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	4a7d      	ldr	r2, [pc, #500]	@ (801a638 <HAL_DMA_IRQHandler+0x6a4>)
 801a442:	4293      	cmp	r3, r2
 801a444:	d031      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	4a7c      	ldr	r2, [pc, #496]	@ (801a63c <HAL_DMA_IRQHandler+0x6a8>)
 801a44c:	4293      	cmp	r3, r2
 801a44e:	d02c      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	4a7a      	ldr	r2, [pc, #488]	@ (801a640 <HAL_DMA_IRQHandler+0x6ac>)
 801a456:	4293      	cmp	r3, r2
 801a458:	d027      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	4a79      	ldr	r2, [pc, #484]	@ (801a644 <HAL_DMA_IRQHandler+0x6b0>)
 801a460:	4293      	cmp	r3, r2
 801a462:	d022      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	4a77      	ldr	r2, [pc, #476]	@ (801a648 <HAL_DMA_IRQHandler+0x6b4>)
 801a46a:	4293      	cmp	r3, r2
 801a46c:	d01d      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	4a76      	ldr	r2, [pc, #472]	@ (801a64c <HAL_DMA_IRQHandler+0x6b8>)
 801a474:	4293      	cmp	r3, r2
 801a476:	d018      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	4a74      	ldr	r2, [pc, #464]	@ (801a650 <HAL_DMA_IRQHandler+0x6bc>)
 801a47e:	4293      	cmp	r3, r2
 801a480:	d013      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	4a73      	ldr	r2, [pc, #460]	@ (801a654 <HAL_DMA_IRQHandler+0x6c0>)
 801a488:	4293      	cmp	r3, r2
 801a48a:	d00e      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	4a71      	ldr	r2, [pc, #452]	@ (801a658 <HAL_DMA_IRQHandler+0x6c4>)
 801a492:	4293      	cmp	r3, r2
 801a494:	d009      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	4a70      	ldr	r2, [pc, #448]	@ (801a65c <HAL_DMA_IRQHandler+0x6c8>)
 801a49c:	4293      	cmp	r3, r2
 801a49e:	d004      	beq.n	801a4aa <HAL_DMA_IRQHandler+0x516>
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	4a6e      	ldr	r2, [pc, #440]	@ (801a660 <HAL_DMA_IRQHandler+0x6cc>)
 801a4a6:	4293      	cmp	r3, r2
 801a4a8:	d10a      	bne.n	801a4c0 <HAL_DMA_IRQHandler+0x52c>
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	681b      	ldr	r3, [r3, #0]
 801a4b0:	f003 0308 	and.w	r3, r3, #8
 801a4b4:	2b00      	cmp	r3, #0
 801a4b6:	bf14      	ite	ne
 801a4b8:	2301      	movne	r3, #1
 801a4ba:	2300      	moveq	r3, #0
 801a4bc:	b2db      	uxtb	r3, r3
 801a4be:	e009      	b.n	801a4d4 <HAL_DMA_IRQHandler+0x540>
 801a4c0:	687b      	ldr	r3, [r7, #4]
 801a4c2:	681b      	ldr	r3, [r3, #0]
 801a4c4:	681b      	ldr	r3, [r3, #0]
 801a4c6:	f003 0304 	and.w	r3, r3, #4
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	bf14      	ite	ne
 801a4ce:	2301      	movne	r3, #1
 801a4d0:	2300      	moveq	r3, #0
 801a4d2:	b2db      	uxtb	r3, r3
 801a4d4:	2b00      	cmp	r3, #0
 801a4d6:	d03e      	beq.n	801a556 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a4d8:	687b      	ldr	r3, [r7, #4]
 801a4da:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a4dc:	f003 031f 	and.w	r3, r3, #31
 801a4e0:	2210      	movs	r2, #16
 801a4e2:	409a      	lsls	r2, r3
 801a4e4:	6a3b      	ldr	r3, [r7, #32]
 801a4e6:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	681b      	ldr	r3, [r3, #0]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801a4f2:	2b00      	cmp	r3, #0
 801a4f4:	d018      	beq.n	801a528 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801a4f6:	687b      	ldr	r3, [r7, #4]
 801a4f8:	681b      	ldr	r3, [r3, #0]
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801a500:	2b00      	cmp	r3, #0
 801a502:	d108      	bne.n	801a516 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801a504:	687b      	ldr	r3, [r7, #4]
 801a506:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a508:	2b00      	cmp	r3, #0
 801a50a:	d024      	beq.n	801a556 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a510:	6878      	ldr	r0, [r7, #4]
 801a512:	4798      	blx	r3
 801a514:	e01f      	b.n	801a556 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801a516:	687b      	ldr	r3, [r7, #4]
 801a518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a51a:	2b00      	cmp	r3, #0
 801a51c:	d01b      	beq.n	801a556 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a522:	6878      	ldr	r0, [r7, #4]
 801a524:	4798      	blx	r3
 801a526:	e016      	b.n	801a556 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	681b      	ldr	r3, [r3, #0]
 801a52c:	681b      	ldr	r3, [r3, #0]
 801a52e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a532:	2b00      	cmp	r3, #0
 801a534:	d107      	bne.n	801a546 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801a536:	687b      	ldr	r3, [r7, #4]
 801a538:	681b      	ldr	r3, [r3, #0]
 801a53a:	681a      	ldr	r2, [r3, #0]
 801a53c:	687b      	ldr	r3, [r7, #4]
 801a53e:	681b      	ldr	r3, [r3, #0]
 801a540:	f022 0208 	bic.w	r2, r2, #8
 801a544:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801a546:	687b      	ldr	r3, [r7, #4]
 801a548:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d003      	beq.n	801a556 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a552:	6878      	ldr	r0, [r7, #4]
 801a554:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a556:	687b      	ldr	r3, [r7, #4]
 801a558:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a55a:	f003 031f 	and.w	r3, r3, #31
 801a55e:	2220      	movs	r2, #32
 801a560:	409a      	lsls	r2, r3
 801a562:	69bb      	ldr	r3, [r7, #24]
 801a564:	4013      	ands	r3, r2
 801a566:	2b00      	cmp	r3, #0
 801a568:	f000 8110 	beq.w	801a78c <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	4a2c      	ldr	r2, [pc, #176]	@ (801a624 <HAL_DMA_IRQHandler+0x690>)
 801a572:	4293      	cmp	r3, r2
 801a574:	d04a      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	4a2b      	ldr	r2, [pc, #172]	@ (801a628 <HAL_DMA_IRQHandler+0x694>)
 801a57c:	4293      	cmp	r3, r2
 801a57e:	d045      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	4a29      	ldr	r2, [pc, #164]	@ (801a62c <HAL_DMA_IRQHandler+0x698>)
 801a586:	4293      	cmp	r3, r2
 801a588:	d040      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a58a:	687b      	ldr	r3, [r7, #4]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	4a28      	ldr	r2, [pc, #160]	@ (801a630 <HAL_DMA_IRQHandler+0x69c>)
 801a590:	4293      	cmp	r3, r2
 801a592:	d03b      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a594:	687b      	ldr	r3, [r7, #4]
 801a596:	681b      	ldr	r3, [r3, #0]
 801a598:	4a26      	ldr	r2, [pc, #152]	@ (801a634 <HAL_DMA_IRQHandler+0x6a0>)
 801a59a:	4293      	cmp	r3, r2
 801a59c:	d036      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a59e:	687b      	ldr	r3, [r7, #4]
 801a5a0:	681b      	ldr	r3, [r3, #0]
 801a5a2:	4a25      	ldr	r2, [pc, #148]	@ (801a638 <HAL_DMA_IRQHandler+0x6a4>)
 801a5a4:	4293      	cmp	r3, r2
 801a5a6:	d031      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a5a8:	687b      	ldr	r3, [r7, #4]
 801a5aa:	681b      	ldr	r3, [r3, #0]
 801a5ac:	4a23      	ldr	r2, [pc, #140]	@ (801a63c <HAL_DMA_IRQHandler+0x6a8>)
 801a5ae:	4293      	cmp	r3, r2
 801a5b0:	d02c      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a5b2:	687b      	ldr	r3, [r7, #4]
 801a5b4:	681b      	ldr	r3, [r3, #0]
 801a5b6:	4a22      	ldr	r2, [pc, #136]	@ (801a640 <HAL_DMA_IRQHandler+0x6ac>)
 801a5b8:	4293      	cmp	r3, r2
 801a5ba:	d027      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	681b      	ldr	r3, [r3, #0]
 801a5c0:	4a20      	ldr	r2, [pc, #128]	@ (801a644 <HAL_DMA_IRQHandler+0x6b0>)
 801a5c2:	4293      	cmp	r3, r2
 801a5c4:	d022      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a5c6:	687b      	ldr	r3, [r7, #4]
 801a5c8:	681b      	ldr	r3, [r3, #0]
 801a5ca:	4a1f      	ldr	r2, [pc, #124]	@ (801a648 <HAL_DMA_IRQHandler+0x6b4>)
 801a5cc:	4293      	cmp	r3, r2
 801a5ce:	d01d      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a5d0:	687b      	ldr	r3, [r7, #4]
 801a5d2:	681b      	ldr	r3, [r3, #0]
 801a5d4:	4a1d      	ldr	r2, [pc, #116]	@ (801a64c <HAL_DMA_IRQHandler+0x6b8>)
 801a5d6:	4293      	cmp	r3, r2
 801a5d8:	d018      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	4a1c      	ldr	r2, [pc, #112]	@ (801a650 <HAL_DMA_IRQHandler+0x6bc>)
 801a5e0:	4293      	cmp	r3, r2
 801a5e2:	d013      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a5e4:	687b      	ldr	r3, [r7, #4]
 801a5e6:	681b      	ldr	r3, [r3, #0]
 801a5e8:	4a1a      	ldr	r2, [pc, #104]	@ (801a654 <HAL_DMA_IRQHandler+0x6c0>)
 801a5ea:	4293      	cmp	r3, r2
 801a5ec:	d00e      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a5ee:	687b      	ldr	r3, [r7, #4]
 801a5f0:	681b      	ldr	r3, [r3, #0]
 801a5f2:	4a19      	ldr	r2, [pc, #100]	@ (801a658 <HAL_DMA_IRQHandler+0x6c4>)
 801a5f4:	4293      	cmp	r3, r2
 801a5f6:	d009      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	4a17      	ldr	r2, [pc, #92]	@ (801a65c <HAL_DMA_IRQHandler+0x6c8>)
 801a5fe:	4293      	cmp	r3, r2
 801a600:	d004      	beq.n	801a60c <HAL_DMA_IRQHandler+0x678>
 801a602:	687b      	ldr	r3, [r7, #4]
 801a604:	681b      	ldr	r3, [r3, #0]
 801a606:	4a16      	ldr	r2, [pc, #88]	@ (801a660 <HAL_DMA_IRQHandler+0x6cc>)
 801a608:	4293      	cmp	r3, r2
 801a60a:	d12b      	bne.n	801a664 <HAL_DMA_IRQHandler+0x6d0>
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	681b      	ldr	r3, [r3, #0]
 801a610:	681b      	ldr	r3, [r3, #0]
 801a612:	f003 0310 	and.w	r3, r3, #16
 801a616:	2b00      	cmp	r3, #0
 801a618:	bf14      	ite	ne
 801a61a:	2301      	movne	r3, #1
 801a61c:	2300      	moveq	r3, #0
 801a61e:	b2db      	uxtb	r3, r3
 801a620:	e02a      	b.n	801a678 <HAL_DMA_IRQHandler+0x6e4>
 801a622:	bf00      	nop
 801a624:	40020010 	.word	0x40020010
 801a628:	40020028 	.word	0x40020028
 801a62c:	40020040 	.word	0x40020040
 801a630:	40020058 	.word	0x40020058
 801a634:	40020070 	.word	0x40020070
 801a638:	40020088 	.word	0x40020088
 801a63c:	400200a0 	.word	0x400200a0
 801a640:	400200b8 	.word	0x400200b8
 801a644:	40020410 	.word	0x40020410
 801a648:	40020428 	.word	0x40020428
 801a64c:	40020440 	.word	0x40020440
 801a650:	40020458 	.word	0x40020458
 801a654:	40020470 	.word	0x40020470
 801a658:	40020488 	.word	0x40020488
 801a65c:	400204a0 	.word	0x400204a0
 801a660:	400204b8 	.word	0x400204b8
 801a664:	687b      	ldr	r3, [r7, #4]
 801a666:	681b      	ldr	r3, [r3, #0]
 801a668:	681b      	ldr	r3, [r3, #0]
 801a66a:	f003 0302 	and.w	r3, r3, #2
 801a66e:	2b00      	cmp	r3, #0
 801a670:	bf14      	ite	ne
 801a672:	2301      	movne	r3, #1
 801a674:	2300      	moveq	r3, #0
 801a676:	b2db      	uxtb	r3, r3
 801a678:	2b00      	cmp	r3, #0
 801a67a:	f000 8087 	beq.w	801a78c <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a682:	f003 031f 	and.w	r3, r3, #31
 801a686:	2220      	movs	r2, #32
 801a688:	409a      	lsls	r2, r3
 801a68a:	6a3b      	ldr	r3, [r7, #32]
 801a68c:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801a68e:	687b      	ldr	r3, [r7, #4]
 801a690:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801a694:	b2db      	uxtb	r3, r3
 801a696:	2b04      	cmp	r3, #4
 801a698:	d139      	bne.n	801a70e <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801a69a:	687b      	ldr	r3, [r7, #4]
 801a69c:	681b      	ldr	r3, [r3, #0]
 801a69e:	681a      	ldr	r2, [r3, #0]
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	681b      	ldr	r3, [r3, #0]
 801a6a4:	f022 0216 	bic.w	r2, r2, #22
 801a6a8:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	681b      	ldr	r3, [r3, #0]
 801a6ae:	695a      	ldr	r2, [r3, #20]
 801a6b0:	687b      	ldr	r3, [r7, #4]
 801a6b2:	681b      	ldr	r3, [r3, #0]
 801a6b4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801a6b8:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801a6ba:	687b      	ldr	r3, [r7, #4]
 801a6bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a6be:	2b00      	cmp	r3, #0
 801a6c0:	d103      	bne.n	801a6ca <HAL_DMA_IRQHandler+0x736>
 801a6c2:	687b      	ldr	r3, [r7, #4]
 801a6c4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a6c6:	2b00      	cmp	r3, #0
 801a6c8:	d007      	beq.n	801a6da <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801a6ca:	687b      	ldr	r3, [r7, #4]
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	681a      	ldr	r2, [r3, #0]
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	f022 0208 	bic.w	r2, r2, #8
 801a6d8:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a6de:	f003 031f 	and.w	r3, r3, #31
 801a6e2:	223f      	movs	r2, #63	@ 0x3f
 801a6e4:	409a      	lsls	r2, r3
 801a6e6:	6a3b      	ldr	r3, [r7, #32]
 801a6e8:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801a6ea:	687b      	ldr	r3, [r7, #4]
 801a6ec:	2201      	movs	r2, #1
 801a6ee:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	2200      	movs	r2, #0
 801a6f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801a6fa:	687b      	ldr	r3, [r7, #4]
 801a6fc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a6fe:	2b00      	cmp	r3, #0
 801a700:	f000 834a 	beq.w	801ad98 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801a704:	687b      	ldr	r3, [r7, #4]
 801a706:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a708:	6878      	ldr	r0, [r7, #4]
 801a70a:	4798      	blx	r3
          }
          return;
 801a70c:	e344      	b.n	801ad98 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801a70e:	687b      	ldr	r3, [r7, #4]
 801a710:	681b      	ldr	r3, [r3, #0]
 801a712:	681b      	ldr	r3, [r3, #0]
 801a714:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801a718:	2b00      	cmp	r3, #0
 801a71a:	d018      	beq.n	801a74e <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801a71c:	687b      	ldr	r3, [r7, #4]
 801a71e:	681b      	ldr	r3, [r3, #0]
 801a720:	681b      	ldr	r3, [r3, #0]
 801a722:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801a726:	2b00      	cmp	r3, #0
 801a728:	d108      	bne.n	801a73c <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801a72a:	687b      	ldr	r3, [r7, #4]
 801a72c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d02c      	beq.n	801a78c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a736:	6878      	ldr	r0, [r7, #4]
 801a738:	4798      	blx	r3
 801a73a:	e027      	b.n	801a78c <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801a73c:	687b      	ldr	r3, [r7, #4]
 801a73e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a740:	2b00      	cmp	r3, #0
 801a742:	d023      	beq.n	801a78c <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801a744:	687b      	ldr	r3, [r7, #4]
 801a746:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a748:	6878      	ldr	r0, [r7, #4]
 801a74a:	4798      	blx	r3
 801a74c:	e01e      	b.n	801a78c <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801a74e:	687b      	ldr	r3, [r7, #4]
 801a750:	681b      	ldr	r3, [r3, #0]
 801a752:	681b      	ldr	r3, [r3, #0]
 801a754:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a758:	2b00      	cmp	r3, #0
 801a75a:	d10f      	bne.n	801a77c <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801a75c:	687b      	ldr	r3, [r7, #4]
 801a75e:	681b      	ldr	r3, [r3, #0]
 801a760:	681a      	ldr	r2, [r3, #0]
 801a762:	687b      	ldr	r3, [r7, #4]
 801a764:	681b      	ldr	r3, [r3, #0]
 801a766:	f022 0210 	bic.w	r2, r2, #16
 801a76a:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801a76c:	687b      	ldr	r3, [r7, #4]
 801a76e:	2201      	movs	r2, #1
 801a770:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	2200      	movs	r2, #0
 801a778:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801a77c:	687b      	ldr	r3, [r7, #4]
 801a77e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a780:	2b00      	cmp	r3, #0
 801a782:	d003      	beq.n	801a78c <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a788:	6878      	ldr	r0, [r7, #4]
 801a78a:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801a78c:	687b      	ldr	r3, [r7, #4]
 801a78e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a790:	2b00      	cmp	r3, #0
 801a792:	f000 8306 	beq.w	801ada2 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801a796:	687b      	ldr	r3, [r7, #4]
 801a798:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a79a:	f003 0301 	and.w	r3, r3, #1
 801a79e:	2b00      	cmp	r3, #0
 801a7a0:	f000 8088 	beq.w	801a8b4 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801a7a4:	687b      	ldr	r3, [r7, #4]
 801a7a6:	2204      	movs	r2, #4
 801a7a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801a7ac:	687b      	ldr	r3, [r7, #4]
 801a7ae:	681b      	ldr	r3, [r3, #0]
 801a7b0:	4a7a      	ldr	r2, [pc, #488]	@ (801a99c <HAL_DMA_IRQHandler+0xa08>)
 801a7b2:	4293      	cmp	r3, r2
 801a7b4:	d04a      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a7b6:	687b      	ldr	r3, [r7, #4]
 801a7b8:	681b      	ldr	r3, [r3, #0]
 801a7ba:	4a79      	ldr	r2, [pc, #484]	@ (801a9a0 <HAL_DMA_IRQHandler+0xa0c>)
 801a7bc:	4293      	cmp	r3, r2
 801a7be:	d045      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a7c0:	687b      	ldr	r3, [r7, #4]
 801a7c2:	681b      	ldr	r3, [r3, #0]
 801a7c4:	4a77      	ldr	r2, [pc, #476]	@ (801a9a4 <HAL_DMA_IRQHandler+0xa10>)
 801a7c6:	4293      	cmp	r3, r2
 801a7c8:	d040      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a7ca:	687b      	ldr	r3, [r7, #4]
 801a7cc:	681b      	ldr	r3, [r3, #0]
 801a7ce:	4a76      	ldr	r2, [pc, #472]	@ (801a9a8 <HAL_DMA_IRQHandler+0xa14>)
 801a7d0:	4293      	cmp	r3, r2
 801a7d2:	d03b      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a7d4:	687b      	ldr	r3, [r7, #4]
 801a7d6:	681b      	ldr	r3, [r3, #0]
 801a7d8:	4a74      	ldr	r2, [pc, #464]	@ (801a9ac <HAL_DMA_IRQHandler+0xa18>)
 801a7da:	4293      	cmp	r3, r2
 801a7dc:	d036      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a7de:	687b      	ldr	r3, [r7, #4]
 801a7e0:	681b      	ldr	r3, [r3, #0]
 801a7e2:	4a73      	ldr	r2, [pc, #460]	@ (801a9b0 <HAL_DMA_IRQHandler+0xa1c>)
 801a7e4:	4293      	cmp	r3, r2
 801a7e6:	d031      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	4a71      	ldr	r2, [pc, #452]	@ (801a9b4 <HAL_DMA_IRQHandler+0xa20>)
 801a7ee:	4293      	cmp	r3, r2
 801a7f0:	d02c      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a7f2:	687b      	ldr	r3, [r7, #4]
 801a7f4:	681b      	ldr	r3, [r3, #0]
 801a7f6:	4a70      	ldr	r2, [pc, #448]	@ (801a9b8 <HAL_DMA_IRQHandler+0xa24>)
 801a7f8:	4293      	cmp	r3, r2
 801a7fa:	d027      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	681b      	ldr	r3, [r3, #0]
 801a800:	4a6e      	ldr	r2, [pc, #440]	@ (801a9bc <HAL_DMA_IRQHandler+0xa28>)
 801a802:	4293      	cmp	r3, r2
 801a804:	d022      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	681b      	ldr	r3, [r3, #0]
 801a80a:	4a6d      	ldr	r2, [pc, #436]	@ (801a9c0 <HAL_DMA_IRQHandler+0xa2c>)
 801a80c:	4293      	cmp	r3, r2
 801a80e:	d01d      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a810:	687b      	ldr	r3, [r7, #4]
 801a812:	681b      	ldr	r3, [r3, #0]
 801a814:	4a6b      	ldr	r2, [pc, #428]	@ (801a9c4 <HAL_DMA_IRQHandler+0xa30>)
 801a816:	4293      	cmp	r3, r2
 801a818:	d018      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	681b      	ldr	r3, [r3, #0]
 801a81e:	4a6a      	ldr	r2, [pc, #424]	@ (801a9c8 <HAL_DMA_IRQHandler+0xa34>)
 801a820:	4293      	cmp	r3, r2
 801a822:	d013      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	4a68      	ldr	r2, [pc, #416]	@ (801a9cc <HAL_DMA_IRQHandler+0xa38>)
 801a82a:	4293      	cmp	r3, r2
 801a82c:	d00e      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a82e:	687b      	ldr	r3, [r7, #4]
 801a830:	681b      	ldr	r3, [r3, #0]
 801a832:	4a67      	ldr	r2, [pc, #412]	@ (801a9d0 <HAL_DMA_IRQHandler+0xa3c>)
 801a834:	4293      	cmp	r3, r2
 801a836:	d009      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	4a65      	ldr	r2, [pc, #404]	@ (801a9d4 <HAL_DMA_IRQHandler+0xa40>)
 801a83e:	4293      	cmp	r3, r2
 801a840:	d004      	beq.n	801a84c <HAL_DMA_IRQHandler+0x8b8>
 801a842:	687b      	ldr	r3, [r7, #4]
 801a844:	681b      	ldr	r3, [r3, #0]
 801a846:	4a64      	ldr	r2, [pc, #400]	@ (801a9d8 <HAL_DMA_IRQHandler+0xa44>)
 801a848:	4293      	cmp	r3, r2
 801a84a:	d108      	bne.n	801a85e <HAL_DMA_IRQHandler+0x8ca>
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	681b      	ldr	r3, [r3, #0]
 801a850:	681a      	ldr	r2, [r3, #0]
 801a852:	687b      	ldr	r3, [r7, #4]
 801a854:	681b      	ldr	r3, [r3, #0]
 801a856:	f022 0201 	bic.w	r2, r2, #1
 801a85a:	601a      	str	r2, [r3, #0]
 801a85c:	e007      	b.n	801a86e <HAL_DMA_IRQHandler+0x8da>
 801a85e:	687b      	ldr	r3, [r7, #4]
 801a860:	681b      	ldr	r3, [r3, #0]
 801a862:	681a      	ldr	r2, [r3, #0]
 801a864:	687b      	ldr	r3, [r7, #4]
 801a866:	681b      	ldr	r3, [r3, #0]
 801a868:	f022 0201 	bic.w	r2, r2, #1
 801a86c:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801a86e:	68fb      	ldr	r3, [r7, #12]
 801a870:	3301      	adds	r3, #1
 801a872:	60fb      	str	r3, [r7, #12]
 801a874:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801a876:	429a      	cmp	r2, r3
 801a878:	d307      	bcc.n	801a88a <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801a87a:	687b      	ldr	r3, [r7, #4]
 801a87c:	681b      	ldr	r3, [r3, #0]
 801a87e:	681b      	ldr	r3, [r3, #0]
 801a880:	f003 0301 	and.w	r3, r3, #1
 801a884:	2b00      	cmp	r3, #0
 801a886:	d1f2      	bne.n	801a86e <HAL_DMA_IRQHandler+0x8da>
 801a888:	e000      	b.n	801a88c <HAL_DMA_IRQHandler+0x8f8>
            break;
 801a88a:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	681b      	ldr	r3, [r3, #0]
 801a890:	681b      	ldr	r3, [r3, #0]
 801a892:	f003 0301 	and.w	r3, r3, #1
 801a896:	2b00      	cmp	r3, #0
 801a898:	d004      	beq.n	801a8a4 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801a89a:	687b      	ldr	r3, [r7, #4]
 801a89c:	2203      	movs	r2, #3
 801a89e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801a8a2:	e003      	b.n	801a8ac <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801a8a4:	687b      	ldr	r3, [r7, #4]
 801a8a6:	2201      	movs	r2, #1
 801a8a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801a8ac:	687b      	ldr	r3, [r7, #4]
 801a8ae:	2200      	movs	r2, #0
 801a8b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801a8b4:	687b      	ldr	r3, [r7, #4]
 801a8b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a8b8:	2b00      	cmp	r3, #0
 801a8ba:	f000 8272 	beq.w	801ada2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801a8c2:	6878      	ldr	r0, [r7, #4]
 801a8c4:	4798      	blx	r3
 801a8c6:	e26c      	b.n	801ada2 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801a8c8:	687b      	ldr	r3, [r7, #4]
 801a8ca:	681b      	ldr	r3, [r3, #0]
 801a8cc:	4a43      	ldr	r2, [pc, #268]	@ (801a9dc <HAL_DMA_IRQHandler+0xa48>)
 801a8ce:	4293      	cmp	r3, r2
 801a8d0:	d022      	beq.n	801a918 <HAL_DMA_IRQHandler+0x984>
 801a8d2:	687b      	ldr	r3, [r7, #4]
 801a8d4:	681b      	ldr	r3, [r3, #0]
 801a8d6:	4a42      	ldr	r2, [pc, #264]	@ (801a9e0 <HAL_DMA_IRQHandler+0xa4c>)
 801a8d8:	4293      	cmp	r3, r2
 801a8da:	d01d      	beq.n	801a918 <HAL_DMA_IRQHandler+0x984>
 801a8dc:	687b      	ldr	r3, [r7, #4]
 801a8de:	681b      	ldr	r3, [r3, #0]
 801a8e0:	4a40      	ldr	r2, [pc, #256]	@ (801a9e4 <HAL_DMA_IRQHandler+0xa50>)
 801a8e2:	4293      	cmp	r3, r2
 801a8e4:	d018      	beq.n	801a918 <HAL_DMA_IRQHandler+0x984>
 801a8e6:	687b      	ldr	r3, [r7, #4]
 801a8e8:	681b      	ldr	r3, [r3, #0]
 801a8ea:	4a3f      	ldr	r2, [pc, #252]	@ (801a9e8 <HAL_DMA_IRQHandler+0xa54>)
 801a8ec:	4293      	cmp	r3, r2
 801a8ee:	d013      	beq.n	801a918 <HAL_DMA_IRQHandler+0x984>
 801a8f0:	687b      	ldr	r3, [r7, #4]
 801a8f2:	681b      	ldr	r3, [r3, #0]
 801a8f4:	4a3d      	ldr	r2, [pc, #244]	@ (801a9ec <HAL_DMA_IRQHandler+0xa58>)
 801a8f6:	4293      	cmp	r3, r2
 801a8f8:	d00e      	beq.n	801a918 <HAL_DMA_IRQHandler+0x984>
 801a8fa:	687b      	ldr	r3, [r7, #4]
 801a8fc:	681b      	ldr	r3, [r3, #0]
 801a8fe:	4a3c      	ldr	r2, [pc, #240]	@ (801a9f0 <HAL_DMA_IRQHandler+0xa5c>)
 801a900:	4293      	cmp	r3, r2
 801a902:	d009      	beq.n	801a918 <HAL_DMA_IRQHandler+0x984>
 801a904:	687b      	ldr	r3, [r7, #4]
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	4a3a      	ldr	r2, [pc, #232]	@ (801a9f4 <HAL_DMA_IRQHandler+0xa60>)
 801a90a:	4293      	cmp	r3, r2
 801a90c:	d004      	beq.n	801a918 <HAL_DMA_IRQHandler+0x984>
 801a90e:	687b      	ldr	r3, [r7, #4]
 801a910:	681b      	ldr	r3, [r3, #0]
 801a912:	4a39      	ldr	r2, [pc, #228]	@ (801a9f8 <HAL_DMA_IRQHandler+0xa64>)
 801a914:	4293      	cmp	r3, r2
 801a916:	d101      	bne.n	801a91c <HAL_DMA_IRQHandler+0x988>
 801a918:	2301      	movs	r3, #1
 801a91a:	e000      	b.n	801a91e <HAL_DMA_IRQHandler+0x98a>
 801a91c:	2300      	movs	r3, #0
 801a91e:	2b00      	cmp	r3, #0
 801a920:	f000 823f 	beq.w	801ada2 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801a924:	687b      	ldr	r3, [r7, #4]
 801a926:	681b      	ldr	r3, [r3, #0]
 801a928:	681b      	ldr	r3, [r3, #0]
 801a92a:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a930:	f003 031f 	and.w	r3, r3, #31
 801a934:	2204      	movs	r2, #4
 801a936:	409a      	lsls	r2, r3
 801a938:	697b      	ldr	r3, [r7, #20]
 801a93a:	4013      	ands	r3, r2
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	f000 80cd 	beq.w	801aadc <HAL_DMA_IRQHandler+0xb48>
 801a942:	693b      	ldr	r3, [r7, #16]
 801a944:	f003 0304 	and.w	r3, r3, #4
 801a948:	2b00      	cmp	r3, #0
 801a94a:	f000 80c7 	beq.w	801aadc <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a952:	f003 031f 	and.w	r3, r3, #31
 801a956:	2204      	movs	r2, #4
 801a958:	409a      	lsls	r2, r3
 801a95a:	69fb      	ldr	r3, [r7, #28]
 801a95c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801a95e:	693b      	ldr	r3, [r7, #16]
 801a960:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801a964:	2b00      	cmp	r3, #0
 801a966:	d049      	beq.n	801a9fc <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801a968:	693b      	ldr	r3, [r7, #16]
 801a96a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801a96e:	2b00      	cmp	r3, #0
 801a970:	d109      	bne.n	801a986 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801a972:	687b      	ldr	r3, [r7, #4]
 801a974:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a976:	2b00      	cmp	r3, #0
 801a978:	f000 8210 	beq.w	801ad9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a980:	6878      	ldr	r0, [r7, #4]
 801a982:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801a984:	e20a      	b.n	801ad9c <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801a986:	687b      	ldr	r3, [r7, #4]
 801a988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	f000 8206 	beq.w	801ad9c <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801a990:	687b      	ldr	r3, [r7, #4]
 801a992:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a994:	6878      	ldr	r0, [r7, #4]
 801a996:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801a998:	e200      	b.n	801ad9c <HAL_DMA_IRQHandler+0xe08>
 801a99a:	bf00      	nop
 801a99c:	40020010 	.word	0x40020010
 801a9a0:	40020028 	.word	0x40020028
 801a9a4:	40020040 	.word	0x40020040
 801a9a8:	40020058 	.word	0x40020058
 801a9ac:	40020070 	.word	0x40020070
 801a9b0:	40020088 	.word	0x40020088
 801a9b4:	400200a0 	.word	0x400200a0
 801a9b8:	400200b8 	.word	0x400200b8
 801a9bc:	40020410 	.word	0x40020410
 801a9c0:	40020428 	.word	0x40020428
 801a9c4:	40020440 	.word	0x40020440
 801a9c8:	40020458 	.word	0x40020458
 801a9cc:	40020470 	.word	0x40020470
 801a9d0:	40020488 	.word	0x40020488
 801a9d4:	400204a0 	.word	0x400204a0
 801a9d8:	400204b8 	.word	0x400204b8
 801a9dc:	58025408 	.word	0x58025408
 801a9e0:	5802541c 	.word	0x5802541c
 801a9e4:	58025430 	.word	0x58025430
 801a9e8:	58025444 	.word	0x58025444
 801a9ec:	58025458 	.word	0x58025458
 801a9f0:	5802546c 	.word	0x5802546c
 801a9f4:	58025480 	.word	0x58025480
 801a9f8:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801a9fc:	693b      	ldr	r3, [r7, #16]
 801a9fe:	f003 0320 	and.w	r3, r3, #32
 801aa02:	2b00      	cmp	r3, #0
 801aa04:	d160      	bne.n	801aac8 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801aa06:	687b      	ldr	r3, [r7, #4]
 801aa08:	681b      	ldr	r3, [r3, #0]
 801aa0a:	4a7f      	ldr	r2, [pc, #508]	@ (801ac08 <HAL_DMA_IRQHandler+0xc74>)
 801aa0c:	4293      	cmp	r3, r2
 801aa0e:	d04a      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	4a7d      	ldr	r2, [pc, #500]	@ (801ac0c <HAL_DMA_IRQHandler+0xc78>)
 801aa16:	4293      	cmp	r3, r2
 801aa18:	d045      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	681b      	ldr	r3, [r3, #0]
 801aa1e:	4a7c      	ldr	r2, [pc, #496]	@ (801ac10 <HAL_DMA_IRQHandler+0xc7c>)
 801aa20:	4293      	cmp	r3, r2
 801aa22:	d040      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa24:	687b      	ldr	r3, [r7, #4]
 801aa26:	681b      	ldr	r3, [r3, #0]
 801aa28:	4a7a      	ldr	r2, [pc, #488]	@ (801ac14 <HAL_DMA_IRQHandler+0xc80>)
 801aa2a:	4293      	cmp	r3, r2
 801aa2c:	d03b      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa2e:	687b      	ldr	r3, [r7, #4]
 801aa30:	681b      	ldr	r3, [r3, #0]
 801aa32:	4a79      	ldr	r2, [pc, #484]	@ (801ac18 <HAL_DMA_IRQHandler+0xc84>)
 801aa34:	4293      	cmp	r3, r2
 801aa36:	d036      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa38:	687b      	ldr	r3, [r7, #4]
 801aa3a:	681b      	ldr	r3, [r3, #0]
 801aa3c:	4a77      	ldr	r2, [pc, #476]	@ (801ac1c <HAL_DMA_IRQHandler+0xc88>)
 801aa3e:	4293      	cmp	r3, r2
 801aa40:	d031      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa42:	687b      	ldr	r3, [r7, #4]
 801aa44:	681b      	ldr	r3, [r3, #0]
 801aa46:	4a76      	ldr	r2, [pc, #472]	@ (801ac20 <HAL_DMA_IRQHandler+0xc8c>)
 801aa48:	4293      	cmp	r3, r2
 801aa4a:	d02c      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa4c:	687b      	ldr	r3, [r7, #4]
 801aa4e:	681b      	ldr	r3, [r3, #0]
 801aa50:	4a74      	ldr	r2, [pc, #464]	@ (801ac24 <HAL_DMA_IRQHandler+0xc90>)
 801aa52:	4293      	cmp	r3, r2
 801aa54:	d027      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	4a73      	ldr	r2, [pc, #460]	@ (801ac28 <HAL_DMA_IRQHandler+0xc94>)
 801aa5c:	4293      	cmp	r3, r2
 801aa5e:	d022      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa60:	687b      	ldr	r3, [r7, #4]
 801aa62:	681b      	ldr	r3, [r3, #0]
 801aa64:	4a71      	ldr	r2, [pc, #452]	@ (801ac2c <HAL_DMA_IRQHandler+0xc98>)
 801aa66:	4293      	cmp	r3, r2
 801aa68:	d01d      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	681b      	ldr	r3, [r3, #0]
 801aa6e:	4a70      	ldr	r2, [pc, #448]	@ (801ac30 <HAL_DMA_IRQHandler+0xc9c>)
 801aa70:	4293      	cmp	r3, r2
 801aa72:	d018      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	681b      	ldr	r3, [r3, #0]
 801aa78:	4a6e      	ldr	r2, [pc, #440]	@ (801ac34 <HAL_DMA_IRQHandler+0xca0>)
 801aa7a:	4293      	cmp	r3, r2
 801aa7c:	d013      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	4a6d      	ldr	r2, [pc, #436]	@ (801ac38 <HAL_DMA_IRQHandler+0xca4>)
 801aa84:	4293      	cmp	r3, r2
 801aa86:	d00e      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa88:	687b      	ldr	r3, [r7, #4]
 801aa8a:	681b      	ldr	r3, [r3, #0]
 801aa8c:	4a6b      	ldr	r2, [pc, #428]	@ (801ac3c <HAL_DMA_IRQHandler+0xca8>)
 801aa8e:	4293      	cmp	r3, r2
 801aa90:	d009      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa92:	687b      	ldr	r3, [r7, #4]
 801aa94:	681b      	ldr	r3, [r3, #0]
 801aa96:	4a6a      	ldr	r2, [pc, #424]	@ (801ac40 <HAL_DMA_IRQHandler+0xcac>)
 801aa98:	4293      	cmp	r3, r2
 801aa9a:	d004      	beq.n	801aaa6 <HAL_DMA_IRQHandler+0xb12>
 801aa9c:	687b      	ldr	r3, [r7, #4]
 801aa9e:	681b      	ldr	r3, [r3, #0]
 801aaa0:	4a68      	ldr	r2, [pc, #416]	@ (801ac44 <HAL_DMA_IRQHandler+0xcb0>)
 801aaa2:	4293      	cmp	r3, r2
 801aaa4:	d108      	bne.n	801aab8 <HAL_DMA_IRQHandler+0xb24>
 801aaa6:	687b      	ldr	r3, [r7, #4]
 801aaa8:	681b      	ldr	r3, [r3, #0]
 801aaaa:	681a      	ldr	r2, [r3, #0]
 801aaac:	687b      	ldr	r3, [r7, #4]
 801aaae:	681b      	ldr	r3, [r3, #0]
 801aab0:	f022 0208 	bic.w	r2, r2, #8
 801aab4:	601a      	str	r2, [r3, #0]
 801aab6:	e007      	b.n	801aac8 <HAL_DMA_IRQHandler+0xb34>
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	681b      	ldr	r3, [r3, #0]
 801aabc:	681a      	ldr	r2, [r3, #0]
 801aabe:	687b      	ldr	r3, [r7, #4]
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	f022 0204 	bic.w	r2, r2, #4
 801aac6:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aacc:	2b00      	cmp	r3, #0
 801aace:	f000 8165 	beq.w	801ad9c <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801aad6:	6878      	ldr	r0, [r7, #4]
 801aad8:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801aada:	e15f      	b.n	801ad9c <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801aadc:	687b      	ldr	r3, [r7, #4]
 801aade:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aae0:	f003 031f 	and.w	r3, r3, #31
 801aae4:	2202      	movs	r2, #2
 801aae6:	409a      	lsls	r2, r3
 801aae8:	697b      	ldr	r3, [r7, #20]
 801aaea:	4013      	ands	r3, r2
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	f000 80c5 	beq.w	801ac7c <HAL_DMA_IRQHandler+0xce8>
 801aaf2:	693b      	ldr	r3, [r7, #16]
 801aaf4:	f003 0302 	and.w	r3, r3, #2
 801aaf8:	2b00      	cmp	r3, #0
 801aafa:	f000 80bf 	beq.w	801ac7c <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801aafe:	687b      	ldr	r3, [r7, #4]
 801ab00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ab02:	f003 031f 	and.w	r3, r3, #31
 801ab06:	2202      	movs	r2, #2
 801ab08:	409a      	lsls	r2, r3
 801ab0a:	69fb      	ldr	r3, [r7, #28]
 801ab0c:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801ab0e:	693b      	ldr	r3, [r7, #16]
 801ab10:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801ab14:	2b00      	cmp	r3, #0
 801ab16:	d018      	beq.n	801ab4a <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801ab18:	693b      	ldr	r3, [r7, #16]
 801ab1a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d109      	bne.n	801ab36 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ab26:	2b00      	cmp	r3, #0
 801ab28:	f000 813a 	beq.w	801ada0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801ab2c:	687b      	ldr	r3, [r7, #4]
 801ab2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ab30:	6878      	ldr	r0, [r7, #4]
 801ab32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801ab34:	e134      	b.n	801ada0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ab3a:	2b00      	cmp	r3, #0
 801ab3c:	f000 8130 	beq.w	801ada0 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801ab40:	687b      	ldr	r3, [r7, #4]
 801ab42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ab44:	6878      	ldr	r0, [r7, #4]
 801ab46:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801ab48:	e12a      	b.n	801ada0 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801ab4a:	693b      	ldr	r3, [r7, #16]
 801ab4c:	f003 0320 	and.w	r3, r3, #32
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	f040 8089 	bne.w	801ac68 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801ab56:	687b      	ldr	r3, [r7, #4]
 801ab58:	681b      	ldr	r3, [r3, #0]
 801ab5a:	4a2b      	ldr	r2, [pc, #172]	@ (801ac08 <HAL_DMA_IRQHandler+0xc74>)
 801ab5c:	4293      	cmp	r3, r2
 801ab5e:	d04a      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801ab60:	687b      	ldr	r3, [r7, #4]
 801ab62:	681b      	ldr	r3, [r3, #0]
 801ab64:	4a29      	ldr	r2, [pc, #164]	@ (801ac0c <HAL_DMA_IRQHandler+0xc78>)
 801ab66:	4293      	cmp	r3, r2
 801ab68:	d045      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801ab6a:	687b      	ldr	r3, [r7, #4]
 801ab6c:	681b      	ldr	r3, [r3, #0]
 801ab6e:	4a28      	ldr	r2, [pc, #160]	@ (801ac10 <HAL_DMA_IRQHandler+0xc7c>)
 801ab70:	4293      	cmp	r3, r2
 801ab72:	d040      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	4a26      	ldr	r2, [pc, #152]	@ (801ac14 <HAL_DMA_IRQHandler+0xc80>)
 801ab7a:	4293      	cmp	r3, r2
 801ab7c:	d03b      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801ab7e:	687b      	ldr	r3, [r7, #4]
 801ab80:	681b      	ldr	r3, [r3, #0]
 801ab82:	4a25      	ldr	r2, [pc, #148]	@ (801ac18 <HAL_DMA_IRQHandler+0xc84>)
 801ab84:	4293      	cmp	r3, r2
 801ab86:	d036      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	4a23      	ldr	r2, [pc, #140]	@ (801ac1c <HAL_DMA_IRQHandler+0xc88>)
 801ab8e:	4293      	cmp	r3, r2
 801ab90:	d031      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801ab92:	687b      	ldr	r3, [r7, #4]
 801ab94:	681b      	ldr	r3, [r3, #0]
 801ab96:	4a22      	ldr	r2, [pc, #136]	@ (801ac20 <HAL_DMA_IRQHandler+0xc8c>)
 801ab98:	4293      	cmp	r3, r2
 801ab9a:	d02c      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	681b      	ldr	r3, [r3, #0]
 801aba0:	4a20      	ldr	r2, [pc, #128]	@ (801ac24 <HAL_DMA_IRQHandler+0xc90>)
 801aba2:	4293      	cmp	r3, r2
 801aba4:	d027      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	4a1f      	ldr	r2, [pc, #124]	@ (801ac28 <HAL_DMA_IRQHandler+0xc94>)
 801abac:	4293      	cmp	r3, r2
 801abae:	d022      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801abb0:	687b      	ldr	r3, [r7, #4]
 801abb2:	681b      	ldr	r3, [r3, #0]
 801abb4:	4a1d      	ldr	r2, [pc, #116]	@ (801ac2c <HAL_DMA_IRQHandler+0xc98>)
 801abb6:	4293      	cmp	r3, r2
 801abb8:	d01d      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	4a1c      	ldr	r2, [pc, #112]	@ (801ac30 <HAL_DMA_IRQHandler+0xc9c>)
 801abc0:	4293      	cmp	r3, r2
 801abc2:	d018      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	681b      	ldr	r3, [r3, #0]
 801abc8:	4a1a      	ldr	r2, [pc, #104]	@ (801ac34 <HAL_DMA_IRQHandler+0xca0>)
 801abca:	4293      	cmp	r3, r2
 801abcc:	d013      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801abce:	687b      	ldr	r3, [r7, #4]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	4a19      	ldr	r2, [pc, #100]	@ (801ac38 <HAL_DMA_IRQHandler+0xca4>)
 801abd4:	4293      	cmp	r3, r2
 801abd6:	d00e      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801abd8:	687b      	ldr	r3, [r7, #4]
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	4a17      	ldr	r2, [pc, #92]	@ (801ac3c <HAL_DMA_IRQHandler+0xca8>)
 801abde:	4293      	cmp	r3, r2
 801abe0:	d009      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801abe2:	687b      	ldr	r3, [r7, #4]
 801abe4:	681b      	ldr	r3, [r3, #0]
 801abe6:	4a16      	ldr	r2, [pc, #88]	@ (801ac40 <HAL_DMA_IRQHandler+0xcac>)
 801abe8:	4293      	cmp	r3, r2
 801abea:	d004      	beq.n	801abf6 <HAL_DMA_IRQHandler+0xc62>
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	681b      	ldr	r3, [r3, #0]
 801abf0:	4a14      	ldr	r2, [pc, #80]	@ (801ac44 <HAL_DMA_IRQHandler+0xcb0>)
 801abf2:	4293      	cmp	r3, r2
 801abf4:	d128      	bne.n	801ac48 <HAL_DMA_IRQHandler+0xcb4>
 801abf6:	687b      	ldr	r3, [r7, #4]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	681a      	ldr	r2, [r3, #0]
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	681b      	ldr	r3, [r3, #0]
 801ac00:	f022 0214 	bic.w	r2, r2, #20
 801ac04:	601a      	str	r2, [r3, #0]
 801ac06:	e027      	b.n	801ac58 <HAL_DMA_IRQHandler+0xcc4>
 801ac08:	40020010 	.word	0x40020010
 801ac0c:	40020028 	.word	0x40020028
 801ac10:	40020040 	.word	0x40020040
 801ac14:	40020058 	.word	0x40020058
 801ac18:	40020070 	.word	0x40020070
 801ac1c:	40020088 	.word	0x40020088
 801ac20:	400200a0 	.word	0x400200a0
 801ac24:	400200b8 	.word	0x400200b8
 801ac28:	40020410 	.word	0x40020410
 801ac2c:	40020428 	.word	0x40020428
 801ac30:	40020440 	.word	0x40020440
 801ac34:	40020458 	.word	0x40020458
 801ac38:	40020470 	.word	0x40020470
 801ac3c:	40020488 	.word	0x40020488
 801ac40:	400204a0 	.word	0x400204a0
 801ac44:	400204b8 	.word	0x400204b8
 801ac48:	687b      	ldr	r3, [r7, #4]
 801ac4a:	681b      	ldr	r3, [r3, #0]
 801ac4c:	681a      	ldr	r2, [r3, #0]
 801ac4e:	687b      	ldr	r3, [r7, #4]
 801ac50:	681b      	ldr	r3, [r3, #0]
 801ac52:	f022 020a 	bic.w	r2, r2, #10
 801ac56:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	2201      	movs	r2, #1
 801ac5c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801ac60:	687b      	ldr	r3, [r7, #4]
 801ac62:	2200      	movs	r2, #0
 801ac64:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ac6c:	2b00      	cmp	r3, #0
 801ac6e:	f000 8097 	beq.w	801ada0 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ac76:	6878      	ldr	r0, [r7, #4]
 801ac78:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801ac7a:	e091      	b.n	801ada0 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ac80:	f003 031f 	and.w	r3, r3, #31
 801ac84:	2208      	movs	r2, #8
 801ac86:	409a      	lsls	r2, r3
 801ac88:	697b      	ldr	r3, [r7, #20]
 801ac8a:	4013      	ands	r3, r2
 801ac8c:	2b00      	cmp	r3, #0
 801ac8e:	f000 8088 	beq.w	801ada2 <HAL_DMA_IRQHandler+0xe0e>
 801ac92:	693b      	ldr	r3, [r7, #16]
 801ac94:	f003 0308 	and.w	r3, r3, #8
 801ac98:	2b00      	cmp	r3, #0
 801ac9a:	f000 8082 	beq.w	801ada2 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	681b      	ldr	r3, [r3, #0]
 801aca2:	4a41      	ldr	r2, [pc, #260]	@ (801ada8 <HAL_DMA_IRQHandler+0xe14>)
 801aca4:	4293      	cmp	r3, r2
 801aca6:	d04a      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	4a3f      	ldr	r2, [pc, #252]	@ (801adac <HAL_DMA_IRQHandler+0xe18>)
 801acae:	4293      	cmp	r3, r2
 801acb0:	d045      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801acb2:	687b      	ldr	r3, [r7, #4]
 801acb4:	681b      	ldr	r3, [r3, #0]
 801acb6:	4a3e      	ldr	r2, [pc, #248]	@ (801adb0 <HAL_DMA_IRQHandler+0xe1c>)
 801acb8:	4293      	cmp	r3, r2
 801acba:	d040      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	4a3c      	ldr	r2, [pc, #240]	@ (801adb4 <HAL_DMA_IRQHandler+0xe20>)
 801acc2:	4293      	cmp	r3, r2
 801acc4:	d03b      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	4a3b      	ldr	r2, [pc, #236]	@ (801adb8 <HAL_DMA_IRQHandler+0xe24>)
 801accc:	4293      	cmp	r3, r2
 801acce:	d036      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801acd0:	687b      	ldr	r3, [r7, #4]
 801acd2:	681b      	ldr	r3, [r3, #0]
 801acd4:	4a39      	ldr	r2, [pc, #228]	@ (801adbc <HAL_DMA_IRQHandler+0xe28>)
 801acd6:	4293      	cmp	r3, r2
 801acd8:	d031      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801acda:	687b      	ldr	r3, [r7, #4]
 801acdc:	681b      	ldr	r3, [r3, #0]
 801acde:	4a38      	ldr	r2, [pc, #224]	@ (801adc0 <HAL_DMA_IRQHandler+0xe2c>)
 801ace0:	4293      	cmp	r3, r2
 801ace2:	d02c      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	4a36      	ldr	r2, [pc, #216]	@ (801adc4 <HAL_DMA_IRQHandler+0xe30>)
 801acea:	4293      	cmp	r3, r2
 801acec:	d027      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	681b      	ldr	r3, [r3, #0]
 801acf2:	4a35      	ldr	r2, [pc, #212]	@ (801adc8 <HAL_DMA_IRQHandler+0xe34>)
 801acf4:	4293      	cmp	r3, r2
 801acf6:	d022      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801acf8:	687b      	ldr	r3, [r7, #4]
 801acfa:	681b      	ldr	r3, [r3, #0]
 801acfc:	4a33      	ldr	r2, [pc, #204]	@ (801adcc <HAL_DMA_IRQHandler+0xe38>)
 801acfe:	4293      	cmp	r3, r2
 801ad00:	d01d      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801ad02:	687b      	ldr	r3, [r7, #4]
 801ad04:	681b      	ldr	r3, [r3, #0]
 801ad06:	4a32      	ldr	r2, [pc, #200]	@ (801add0 <HAL_DMA_IRQHandler+0xe3c>)
 801ad08:	4293      	cmp	r3, r2
 801ad0a:	d018      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	681b      	ldr	r3, [r3, #0]
 801ad10:	4a30      	ldr	r2, [pc, #192]	@ (801add4 <HAL_DMA_IRQHandler+0xe40>)
 801ad12:	4293      	cmp	r3, r2
 801ad14:	d013      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	681b      	ldr	r3, [r3, #0]
 801ad1a:	4a2f      	ldr	r2, [pc, #188]	@ (801add8 <HAL_DMA_IRQHandler+0xe44>)
 801ad1c:	4293      	cmp	r3, r2
 801ad1e:	d00e      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	4a2d      	ldr	r2, [pc, #180]	@ (801addc <HAL_DMA_IRQHandler+0xe48>)
 801ad26:	4293      	cmp	r3, r2
 801ad28:	d009      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	4a2c      	ldr	r2, [pc, #176]	@ (801ade0 <HAL_DMA_IRQHandler+0xe4c>)
 801ad30:	4293      	cmp	r3, r2
 801ad32:	d004      	beq.n	801ad3e <HAL_DMA_IRQHandler+0xdaa>
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	4a2a      	ldr	r2, [pc, #168]	@ (801ade4 <HAL_DMA_IRQHandler+0xe50>)
 801ad3a:	4293      	cmp	r3, r2
 801ad3c:	d108      	bne.n	801ad50 <HAL_DMA_IRQHandler+0xdbc>
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	681a      	ldr	r2, [r3, #0]
 801ad44:	687b      	ldr	r3, [r7, #4]
 801ad46:	681b      	ldr	r3, [r3, #0]
 801ad48:	f022 021c 	bic.w	r2, r2, #28
 801ad4c:	601a      	str	r2, [r3, #0]
 801ad4e:	e007      	b.n	801ad60 <HAL_DMA_IRQHandler+0xdcc>
 801ad50:	687b      	ldr	r3, [r7, #4]
 801ad52:	681b      	ldr	r3, [r3, #0]
 801ad54:	681a      	ldr	r2, [r3, #0]
 801ad56:	687b      	ldr	r3, [r7, #4]
 801ad58:	681b      	ldr	r3, [r3, #0]
 801ad5a:	f022 020e 	bic.w	r2, r2, #14
 801ad5e:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ad64:	f003 031f 	and.w	r3, r3, #31
 801ad68:	2201      	movs	r2, #1
 801ad6a:	409a      	lsls	r2, r3
 801ad6c:	69fb      	ldr	r3, [r7, #28]
 801ad6e:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	2201      	movs	r2, #1
 801ad74:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801ad76:	687b      	ldr	r3, [r7, #4]
 801ad78:	2201      	movs	r2, #1
 801ad7a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801ad7e:	687b      	ldr	r3, [r7, #4]
 801ad80:	2200      	movs	r2, #0
 801ad82:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801ad86:	687b      	ldr	r3, [r7, #4]
 801ad88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	d009      	beq.n	801ada2 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ad92:	6878      	ldr	r0, [r7, #4]
 801ad94:	4798      	blx	r3
 801ad96:	e004      	b.n	801ada2 <HAL_DMA_IRQHandler+0xe0e>
          return;
 801ad98:	bf00      	nop
 801ad9a:	e002      	b.n	801ada2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801ad9c:	bf00      	nop
 801ad9e:	e000      	b.n	801ada2 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801ada0:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801ada2:	3728      	adds	r7, #40	@ 0x28
 801ada4:	46bd      	mov	sp, r7
 801ada6:	bd80      	pop	{r7, pc}
 801ada8:	40020010 	.word	0x40020010
 801adac:	40020028 	.word	0x40020028
 801adb0:	40020040 	.word	0x40020040
 801adb4:	40020058 	.word	0x40020058
 801adb8:	40020070 	.word	0x40020070
 801adbc:	40020088 	.word	0x40020088
 801adc0:	400200a0 	.word	0x400200a0
 801adc4:	400200b8 	.word	0x400200b8
 801adc8:	40020410 	.word	0x40020410
 801adcc:	40020428 	.word	0x40020428
 801add0:	40020440 	.word	0x40020440
 801add4:	40020458 	.word	0x40020458
 801add8:	40020470 	.word	0x40020470
 801addc:	40020488 	.word	0x40020488
 801ade0:	400204a0 	.word	0x400204a0
 801ade4:	400204b8 	.word	0x400204b8

0801ade8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801ade8:	b480      	push	{r7}
 801adea:	b085      	sub	sp, #20
 801adec:	af00      	add	r7, sp, #0
 801adee:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801adf0:	687b      	ldr	r3, [r7, #4]
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	4a42      	ldr	r2, [pc, #264]	@ (801af00 <DMA_CalcBaseAndBitshift+0x118>)
 801adf6:	4293      	cmp	r3, r2
 801adf8:	d04a      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801adfa:	687b      	ldr	r3, [r7, #4]
 801adfc:	681b      	ldr	r3, [r3, #0]
 801adfe:	4a41      	ldr	r2, [pc, #260]	@ (801af04 <DMA_CalcBaseAndBitshift+0x11c>)
 801ae00:	4293      	cmp	r3, r2
 801ae02:	d045      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae04:	687b      	ldr	r3, [r7, #4]
 801ae06:	681b      	ldr	r3, [r3, #0]
 801ae08:	4a3f      	ldr	r2, [pc, #252]	@ (801af08 <DMA_CalcBaseAndBitshift+0x120>)
 801ae0a:	4293      	cmp	r3, r2
 801ae0c:	d040      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae0e:	687b      	ldr	r3, [r7, #4]
 801ae10:	681b      	ldr	r3, [r3, #0]
 801ae12:	4a3e      	ldr	r2, [pc, #248]	@ (801af0c <DMA_CalcBaseAndBitshift+0x124>)
 801ae14:	4293      	cmp	r3, r2
 801ae16:	d03b      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae18:	687b      	ldr	r3, [r7, #4]
 801ae1a:	681b      	ldr	r3, [r3, #0]
 801ae1c:	4a3c      	ldr	r2, [pc, #240]	@ (801af10 <DMA_CalcBaseAndBitshift+0x128>)
 801ae1e:	4293      	cmp	r3, r2
 801ae20:	d036      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae22:	687b      	ldr	r3, [r7, #4]
 801ae24:	681b      	ldr	r3, [r3, #0]
 801ae26:	4a3b      	ldr	r2, [pc, #236]	@ (801af14 <DMA_CalcBaseAndBitshift+0x12c>)
 801ae28:	4293      	cmp	r3, r2
 801ae2a:	d031      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae2c:	687b      	ldr	r3, [r7, #4]
 801ae2e:	681b      	ldr	r3, [r3, #0]
 801ae30:	4a39      	ldr	r2, [pc, #228]	@ (801af18 <DMA_CalcBaseAndBitshift+0x130>)
 801ae32:	4293      	cmp	r3, r2
 801ae34:	d02c      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	681b      	ldr	r3, [r3, #0]
 801ae3a:	4a38      	ldr	r2, [pc, #224]	@ (801af1c <DMA_CalcBaseAndBitshift+0x134>)
 801ae3c:	4293      	cmp	r3, r2
 801ae3e:	d027      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae40:	687b      	ldr	r3, [r7, #4]
 801ae42:	681b      	ldr	r3, [r3, #0]
 801ae44:	4a36      	ldr	r2, [pc, #216]	@ (801af20 <DMA_CalcBaseAndBitshift+0x138>)
 801ae46:	4293      	cmp	r3, r2
 801ae48:	d022      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae4a:	687b      	ldr	r3, [r7, #4]
 801ae4c:	681b      	ldr	r3, [r3, #0]
 801ae4e:	4a35      	ldr	r2, [pc, #212]	@ (801af24 <DMA_CalcBaseAndBitshift+0x13c>)
 801ae50:	4293      	cmp	r3, r2
 801ae52:	d01d      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae54:	687b      	ldr	r3, [r7, #4]
 801ae56:	681b      	ldr	r3, [r3, #0]
 801ae58:	4a33      	ldr	r2, [pc, #204]	@ (801af28 <DMA_CalcBaseAndBitshift+0x140>)
 801ae5a:	4293      	cmp	r3, r2
 801ae5c:	d018      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	4a32      	ldr	r2, [pc, #200]	@ (801af2c <DMA_CalcBaseAndBitshift+0x144>)
 801ae64:	4293      	cmp	r3, r2
 801ae66:	d013      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	4a30      	ldr	r2, [pc, #192]	@ (801af30 <DMA_CalcBaseAndBitshift+0x148>)
 801ae6e:	4293      	cmp	r3, r2
 801ae70:	d00e      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	4a2f      	ldr	r2, [pc, #188]	@ (801af34 <DMA_CalcBaseAndBitshift+0x14c>)
 801ae78:	4293      	cmp	r3, r2
 801ae7a:	d009      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	4a2d      	ldr	r2, [pc, #180]	@ (801af38 <DMA_CalcBaseAndBitshift+0x150>)
 801ae82:	4293      	cmp	r3, r2
 801ae84:	d004      	beq.n	801ae90 <DMA_CalcBaseAndBitshift+0xa8>
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	4a2c      	ldr	r2, [pc, #176]	@ (801af3c <DMA_CalcBaseAndBitshift+0x154>)
 801ae8c:	4293      	cmp	r3, r2
 801ae8e:	d101      	bne.n	801ae94 <DMA_CalcBaseAndBitshift+0xac>
 801ae90:	2301      	movs	r3, #1
 801ae92:	e000      	b.n	801ae96 <DMA_CalcBaseAndBitshift+0xae>
 801ae94:	2300      	movs	r3, #0
 801ae96:	2b00      	cmp	r3, #0
 801ae98:	d024      	beq.n	801aee4 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	b2db      	uxtb	r3, r3
 801aea0:	3b10      	subs	r3, #16
 801aea2:	4a27      	ldr	r2, [pc, #156]	@ (801af40 <DMA_CalcBaseAndBitshift+0x158>)
 801aea4:	fba2 2303 	umull	r2, r3, r2, r3
 801aea8:	091b      	lsrs	r3, r3, #4
 801aeaa:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801aeac:	68fb      	ldr	r3, [r7, #12]
 801aeae:	f003 0307 	and.w	r3, r3, #7
 801aeb2:	4a24      	ldr	r2, [pc, #144]	@ (801af44 <DMA_CalcBaseAndBitshift+0x15c>)
 801aeb4:	5cd3      	ldrb	r3, [r2, r3]
 801aeb6:	461a      	mov	r2, r3
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801aebc:	68fb      	ldr	r3, [r7, #12]
 801aebe:	2b03      	cmp	r3, #3
 801aec0:	d908      	bls.n	801aed4 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	461a      	mov	r2, r3
 801aec8:	4b1f      	ldr	r3, [pc, #124]	@ (801af48 <DMA_CalcBaseAndBitshift+0x160>)
 801aeca:	4013      	ands	r3, r2
 801aecc:	1d1a      	adds	r2, r3, #4
 801aece:	687b      	ldr	r3, [r7, #4]
 801aed0:	659a      	str	r2, [r3, #88]	@ 0x58
 801aed2:	e00d      	b.n	801aef0 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801aed4:	687b      	ldr	r3, [r7, #4]
 801aed6:	681b      	ldr	r3, [r3, #0]
 801aed8:	461a      	mov	r2, r3
 801aeda:	4b1b      	ldr	r3, [pc, #108]	@ (801af48 <DMA_CalcBaseAndBitshift+0x160>)
 801aedc:	4013      	ands	r3, r2
 801aede:	687a      	ldr	r2, [r7, #4]
 801aee0:	6593      	str	r3, [r2, #88]	@ 0x58
 801aee2:	e005      	b.n	801aef0 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801aee4:	687b      	ldr	r3, [r7, #4]
 801aee6:	681b      	ldr	r3, [r3, #0]
 801aee8:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801aeec:	687b      	ldr	r3, [r7, #4]
 801aeee:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801aef0:	687b      	ldr	r3, [r7, #4]
 801aef2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801aef4:	4618      	mov	r0, r3
 801aef6:	3714      	adds	r7, #20
 801aef8:	46bd      	mov	sp, r7
 801aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aefe:	4770      	bx	lr
 801af00:	40020010 	.word	0x40020010
 801af04:	40020028 	.word	0x40020028
 801af08:	40020040 	.word	0x40020040
 801af0c:	40020058 	.word	0x40020058
 801af10:	40020070 	.word	0x40020070
 801af14:	40020088 	.word	0x40020088
 801af18:	400200a0 	.word	0x400200a0
 801af1c:	400200b8 	.word	0x400200b8
 801af20:	40020410 	.word	0x40020410
 801af24:	40020428 	.word	0x40020428
 801af28:	40020440 	.word	0x40020440
 801af2c:	40020458 	.word	0x40020458
 801af30:	40020470 	.word	0x40020470
 801af34:	40020488 	.word	0x40020488
 801af38:	400204a0 	.word	0x400204a0
 801af3c:	400204b8 	.word	0x400204b8
 801af40:	aaaaaaab 	.word	0xaaaaaaab
 801af44:	08025d18 	.word	0x08025d18
 801af48:	fffffc00 	.word	0xfffffc00

0801af4c <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801af4c:	b480      	push	{r7}
 801af4e:	b085      	sub	sp, #20
 801af50:	af00      	add	r7, sp, #0
 801af52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801af54:	2300      	movs	r3, #0
 801af56:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801af58:	687b      	ldr	r3, [r7, #4]
 801af5a:	699b      	ldr	r3, [r3, #24]
 801af5c:	2b00      	cmp	r3, #0
 801af5e:	d120      	bne.n	801afa2 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801af60:	687b      	ldr	r3, [r7, #4]
 801af62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801af64:	2b03      	cmp	r3, #3
 801af66:	d858      	bhi.n	801b01a <DMA_CheckFifoParam+0xce>
 801af68:	a201      	add	r2, pc, #4	@ (adr r2, 801af70 <DMA_CheckFifoParam+0x24>)
 801af6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801af6e:	bf00      	nop
 801af70:	0801af81 	.word	0x0801af81
 801af74:	0801af93 	.word	0x0801af93
 801af78:	0801af81 	.word	0x0801af81
 801af7c:	0801b01b 	.word	0x0801b01b
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801af80:	687b      	ldr	r3, [r7, #4]
 801af82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af84:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801af88:	2b00      	cmp	r3, #0
 801af8a:	d048      	beq.n	801b01e <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801af8c:	2301      	movs	r3, #1
 801af8e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801af90:	e045      	b.n	801b01e <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801af92:	687b      	ldr	r3, [r7, #4]
 801af94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801af96:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801af9a:	d142      	bne.n	801b022 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801af9c:	2301      	movs	r3, #1
 801af9e:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801afa0:	e03f      	b.n	801b022 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801afa2:	687b      	ldr	r3, [r7, #4]
 801afa4:	699b      	ldr	r3, [r3, #24]
 801afa6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801afaa:	d123      	bne.n	801aff4 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801afac:	687b      	ldr	r3, [r7, #4]
 801afae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801afb0:	2b03      	cmp	r3, #3
 801afb2:	d838      	bhi.n	801b026 <DMA_CheckFifoParam+0xda>
 801afb4:	a201      	add	r2, pc, #4	@ (adr r2, 801afbc <DMA_CheckFifoParam+0x70>)
 801afb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801afba:	bf00      	nop
 801afbc:	0801afcd 	.word	0x0801afcd
 801afc0:	0801afd3 	.word	0x0801afd3
 801afc4:	0801afcd 	.word	0x0801afcd
 801afc8:	0801afe5 	.word	0x0801afe5
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801afcc:	2301      	movs	r3, #1
 801afce:	73fb      	strb	r3, [r7, #15]
        break;
 801afd0:	e030      	b.n	801b034 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801afd2:	687b      	ldr	r3, [r7, #4]
 801afd4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afd6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801afda:	2b00      	cmp	r3, #0
 801afdc:	d025      	beq.n	801b02a <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801afde:	2301      	movs	r3, #1
 801afe0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801afe2:	e022      	b.n	801b02a <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801afe8:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801afec:	d11f      	bne.n	801b02e <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801afee:	2301      	movs	r3, #1
 801aff0:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801aff2:	e01c      	b.n	801b02e <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801aff8:	2b02      	cmp	r3, #2
 801affa:	d902      	bls.n	801b002 <DMA_CheckFifoParam+0xb6>
 801affc:	2b03      	cmp	r3, #3
 801affe:	d003      	beq.n	801b008 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801b000:	e018      	b.n	801b034 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801b002:	2301      	movs	r3, #1
 801b004:	73fb      	strb	r3, [r7, #15]
        break;
 801b006:	e015      	b.n	801b034 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b00c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b010:	2b00      	cmp	r3, #0
 801b012:	d00e      	beq.n	801b032 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801b014:	2301      	movs	r3, #1
 801b016:	73fb      	strb	r3, [r7, #15]
    break;
 801b018:	e00b      	b.n	801b032 <DMA_CheckFifoParam+0xe6>
        break;
 801b01a:	bf00      	nop
 801b01c:	e00a      	b.n	801b034 <DMA_CheckFifoParam+0xe8>
        break;
 801b01e:	bf00      	nop
 801b020:	e008      	b.n	801b034 <DMA_CheckFifoParam+0xe8>
        break;
 801b022:	bf00      	nop
 801b024:	e006      	b.n	801b034 <DMA_CheckFifoParam+0xe8>
        break;
 801b026:	bf00      	nop
 801b028:	e004      	b.n	801b034 <DMA_CheckFifoParam+0xe8>
        break;
 801b02a:	bf00      	nop
 801b02c:	e002      	b.n	801b034 <DMA_CheckFifoParam+0xe8>
        break;
 801b02e:	bf00      	nop
 801b030:	e000      	b.n	801b034 <DMA_CheckFifoParam+0xe8>
    break;
 801b032:	bf00      	nop
    }
  }

  return status;
 801b034:	7bfb      	ldrb	r3, [r7, #15]
}
 801b036:	4618      	mov	r0, r3
 801b038:	3714      	adds	r7, #20
 801b03a:	46bd      	mov	sp, r7
 801b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b040:	4770      	bx	lr
 801b042:	bf00      	nop

0801b044 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b044:	b480      	push	{r7}
 801b046:	b085      	sub	sp, #20
 801b048:	af00      	add	r7, sp, #0
 801b04a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801b04c:	687b      	ldr	r3, [r7, #4]
 801b04e:	681b      	ldr	r3, [r3, #0]
 801b050:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b052:	687b      	ldr	r3, [r7, #4]
 801b054:	681b      	ldr	r3, [r3, #0]
 801b056:	4a38      	ldr	r2, [pc, #224]	@ (801b138 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801b058:	4293      	cmp	r3, r2
 801b05a:	d022      	beq.n	801b0a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	681b      	ldr	r3, [r3, #0]
 801b060:	4a36      	ldr	r2, [pc, #216]	@ (801b13c <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801b062:	4293      	cmp	r3, r2
 801b064:	d01d      	beq.n	801b0a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b066:	687b      	ldr	r3, [r7, #4]
 801b068:	681b      	ldr	r3, [r3, #0]
 801b06a:	4a35      	ldr	r2, [pc, #212]	@ (801b140 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801b06c:	4293      	cmp	r3, r2
 801b06e:	d018      	beq.n	801b0a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b070:	687b      	ldr	r3, [r7, #4]
 801b072:	681b      	ldr	r3, [r3, #0]
 801b074:	4a33      	ldr	r2, [pc, #204]	@ (801b144 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801b076:	4293      	cmp	r3, r2
 801b078:	d013      	beq.n	801b0a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b07a:	687b      	ldr	r3, [r7, #4]
 801b07c:	681b      	ldr	r3, [r3, #0]
 801b07e:	4a32      	ldr	r2, [pc, #200]	@ (801b148 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801b080:	4293      	cmp	r3, r2
 801b082:	d00e      	beq.n	801b0a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b084:	687b      	ldr	r3, [r7, #4]
 801b086:	681b      	ldr	r3, [r3, #0]
 801b088:	4a30      	ldr	r2, [pc, #192]	@ (801b14c <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801b08a:	4293      	cmp	r3, r2
 801b08c:	d009      	beq.n	801b0a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b08e:	687b      	ldr	r3, [r7, #4]
 801b090:	681b      	ldr	r3, [r3, #0]
 801b092:	4a2f      	ldr	r2, [pc, #188]	@ (801b150 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801b094:	4293      	cmp	r3, r2
 801b096:	d004      	beq.n	801b0a2 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b098:	687b      	ldr	r3, [r7, #4]
 801b09a:	681b      	ldr	r3, [r3, #0]
 801b09c:	4a2d      	ldr	r2, [pc, #180]	@ (801b154 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801b09e:	4293      	cmp	r3, r2
 801b0a0:	d101      	bne.n	801b0a6 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801b0a2:	2301      	movs	r3, #1
 801b0a4:	e000      	b.n	801b0a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801b0a6:	2300      	movs	r3, #0
 801b0a8:	2b00      	cmp	r3, #0
 801b0aa:	d01a      	beq.n	801b0e2 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	681b      	ldr	r3, [r3, #0]
 801b0b0:	b2db      	uxtb	r3, r3
 801b0b2:	3b08      	subs	r3, #8
 801b0b4:	4a28      	ldr	r2, [pc, #160]	@ (801b158 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801b0b6:	fba2 2303 	umull	r2, r3, r2, r3
 801b0ba:	091b      	lsrs	r3, r3, #4
 801b0bc:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801b0be:	68fa      	ldr	r2, [r7, #12]
 801b0c0:	4b26      	ldr	r3, [pc, #152]	@ (801b15c <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801b0c2:	4413      	add	r3, r2
 801b0c4:	009b      	lsls	r3, r3, #2
 801b0c6:	461a      	mov	r2, r3
 801b0c8:	687b      	ldr	r3, [r7, #4]
 801b0ca:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	4a24      	ldr	r2, [pc, #144]	@ (801b160 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801b0d0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b0d2:	68fb      	ldr	r3, [r7, #12]
 801b0d4:	f003 031f 	and.w	r3, r3, #31
 801b0d8:	2201      	movs	r2, #1
 801b0da:	409a      	lsls	r2, r3
 801b0dc:	687b      	ldr	r3, [r7, #4]
 801b0de:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801b0e0:	e024      	b.n	801b12c <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b0e2:	687b      	ldr	r3, [r7, #4]
 801b0e4:	681b      	ldr	r3, [r3, #0]
 801b0e6:	b2db      	uxtb	r3, r3
 801b0e8:	3b10      	subs	r3, #16
 801b0ea:	4a1e      	ldr	r2, [pc, #120]	@ (801b164 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801b0ec:	fba2 2303 	umull	r2, r3, r2, r3
 801b0f0:	091b      	lsrs	r3, r3, #4
 801b0f2:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801b0f4:	68bb      	ldr	r3, [r7, #8]
 801b0f6:	4a1c      	ldr	r2, [pc, #112]	@ (801b168 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801b0f8:	4293      	cmp	r3, r2
 801b0fa:	d806      	bhi.n	801b10a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801b0fc:	68bb      	ldr	r3, [r7, #8]
 801b0fe:	4a1b      	ldr	r2, [pc, #108]	@ (801b16c <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801b100:	4293      	cmp	r3, r2
 801b102:	d902      	bls.n	801b10a <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801b104:	68fb      	ldr	r3, [r7, #12]
 801b106:	3308      	adds	r3, #8
 801b108:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801b10a:	68fa      	ldr	r2, [r7, #12]
 801b10c:	4b18      	ldr	r3, [pc, #96]	@ (801b170 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801b10e:	4413      	add	r3, r2
 801b110:	009b      	lsls	r3, r3, #2
 801b112:	461a      	mov	r2, r3
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b118:	687b      	ldr	r3, [r7, #4]
 801b11a:	4a16      	ldr	r2, [pc, #88]	@ (801b174 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801b11c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b11e:	68fb      	ldr	r3, [r7, #12]
 801b120:	f003 031f 	and.w	r3, r3, #31
 801b124:	2201      	movs	r2, #1
 801b126:	409a      	lsls	r2, r3
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801b12c:	bf00      	nop
 801b12e:	3714      	adds	r7, #20
 801b130:	46bd      	mov	sp, r7
 801b132:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b136:	4770      	bx	lr
 801b138:	58025408 	.word	0x58025408
 801b13c:	5802541c 	.word	0x5802541c
 801b140:	58025430 	.word	0x58025430
 801b144:	58025444 	.word	0x58025444
 801b148:	58025458 	.word	0x58025458
 801b14c:	5802546c 	.word	0x5802546c
 801b150:	58025480 	.word	0x58025480
 801b154:	58025494 	.word	0x58025494
 801b158:	cccccccd 	.word	0xcccccccd
 801b15c:	16009600 	.word	0x16009600
 801b160:	58025880 	.word	0x58025880
 801b164:	aaaaaaab 	.word	0xaaaaaaab
 801b168:	400204b8 	.word	0x400204b8
 801b16c:	4002040f 	.word	0x4002040f
 801b170:	10008200 	.word	0x10008200
 801b174:	40020880 	.word	0x40020880

0801b178 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b178:	b480      	push	{r7}
 801b17a:	b085      	sub	sp, #20
 801b17c:	af00      	add	r7, sp, #0
 801b17e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b180:	687b      	ldr	r3, [r7, #4]
 801b182:	685b      	ldr	r3, [r3, #4]
 801b184:	b2db      	uxtb	r3, r3
 801b186:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801b188:	68fb      	ldr	r3, [r7, #12]
 801b18a:	2b00      	cmp	r3, #0
 801b18c:	d04a      	beq.n	801b224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801b18e:	68fb      	ldr	r3, [r7, #12]
 801b190:	2b08      	cmp	r3, #8
 801b192:	d847      	bhi.n	801b224 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b194:	687b      	ldr	r3, [r7, #4]
 801b196:	681b      	ldr	r3, [r3, #0]
 801b198:	4a25      	ldr	r2, [pc, #148]	@ (801b230 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801b19a:	4293      	cmp	r3, r2
 801b19c:	d022      	beq.n	801b1e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	681b      	ldr	r3, [r3, #0]
 801b1a2:	4a24      	ldr	r2, [pc, #144]	@ (801b234 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801b1a4:	4293      	cmp	r3, r2
 801b1a6:	d01d      	beq.n	801b1e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	4a22      	ldr	r2, [pc, #136]	@ (801b238 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801b1ae:	4293      	cmp	r3, r2
 801b1b0:	d018      	beq.n	801b1e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b1b2:	687b      	ldr	r3, [r7, #4]
 801b1b4:	681b      	ldr	r3, [r3, #0]
 801b1b6:	4a21      	ldr	r2, [pc, #132]	@ (801b23c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801b1b8:	4293      	cmp	r3, r2
 801b1ba:	d013      	beq.n	801b1e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	4a1f      	ldr	r2, [pc, #124]	@ (801b240 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801b1c2:	4293      	cmp	r3, r2
 801b1c4:	d00e      	beq.n	801b1e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b1c6:	687b      	ldr	r3, [r7, #4]
 801b1c8:	681b      	ldr	r3, [r3, #0]
 801b1ca:	4a1e      	ldr	r2, [pc, #120]	@ (801b244 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801b1cc:	4293      	cmp	r3, r2
 801b1ce:	d009      	beq.n	801b1e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b1d0:	687b      	ldr	r3, [r7, #4]
 801b1d2:	681b      	ldr	r3, [r3, #0]
 801b1d4:	4a1c      	ldr	r2, [pc, #112]	@ (801b248 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801b1d6:	4293      	cmp	r3, r2
 801b1d8:	d004      	beq.n	801b1e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b1da:	687b      	ldr	r3, [r7, #4]
 801b1dc:	681b      	ldr	r3, [r3, #0]
 801b1de:	4a1b      	ldr	r2, [pc, #108]	@ (801b24c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801b1e0:	4293      	cmp	r3, r2
 801b1e2:	d101      	bne.n	801b1e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801b1e4:	2301      	movs	r3, #1
 801b1e6:	e000      	b.n	801b1ea <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801b1e8:	2300      	movs	r3, #0
 801b1ea:	2b00      	cmp	r3, #0
 801b1ec:	d00a      	beq.n	801b204 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801b1ee:	68fa      	ldr	r2, [r7, #12]
 801b1f0:	4b17      	ldr	r3, [pc, #92]	@ (801b250 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801b1f2:	4413      	add	r3, r2
 801b1f4:	009b      	lsls	r3, r3, #2
 801b1f6:	461a      	mov	r2, r3
 801b1f8:	687b      	ldr	r3, [r7, #4]
 801b1fa:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801b1fc:	687b      	ldr	r3, [r7, #4]
 801b1fe:	4a15      	ldr	r2, [pc, #84]	@ (801b254 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801b200:	671a      	str	r2, [r3, #112]	@ 0x70
 801b202:	e009      	b.n	801b218 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b204:	68fa      	ldr	r2, [r7, #12]
 801b206:	4b14      	ldr	r3, [pc, #80]	@ (801b258 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801b208:	4413      	add	r3, r2
 801b20a:	009b      	lsls	r3, r3, #2
 801b20c:	461a      	mov	r2, r3
 801b20e:	687b      	ldr	r3, [r7, #4]
 801b210:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b212:	687b      	ldr	r3, [r7, #4]
 801b214:	4a11      	ldr	r2, [pc, #68]	@ (801b25c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801b216:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801b218:	68fb      	ldr	r3, [r7, #12]
 801b21a:	3b01      	subs	r3, #1
 801b21c:	2201      	movs	r2, #1
 801b21e:	409a      	lsls	r2, r3
 801b220:	687b      	ldr	r3, [r7, #4]
 801b222:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801b224:	bf00      	nop
 801b226:	3714      	adds	r7, #20
 801b228:	46bd      	mov	sp, r7
 801b22a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b22e:	4770      	bx	lr
 801b230:	58025408 	.word	0x58025408
 801b234:	5802541c 	.word	0x5802541c
 801b238:	58025430 	.word	0x58025430
 801b23c:	58025444 	.word	0x58025444
 801b240:	58025458 	.word	0x58025458
 801b244:	5802546c 	.word	0x5802546c
 801b248:	58025480 	.word	0x58025480
 801b24c:	58025494 	.word	0x58025494
 801b250:	1600963f 	.word	0x1600963f
 801b254:	58025940 	.word	0x58025940
 801b258:	1000823f 	.word	0x1000823f
 801b25c:	40020940 	.word	0x40020940

0801b260 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801b260:	b480      	push	{r7}
 801b262:	b089      	sub	sp, #36	@ 0x24
 801b264:	af00      	add	r7, sp, #0
 801b266:	6078      	str	r0, [r7, #4]
 801b268:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801b26a:	2300      	movs	r3, #0
 801b26c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801b26e:	4b89      	ldr	r3, [pc, #548]	@ (801b494 <HAL_GPIO_Init+0x234>)
 801b270:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801b272:	e194      	b.n	801b59e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801b274:	683b      	ldr	r3, [r7, #0]
 801b276:	681a      	ldr	r2, [r3, #0]
 801b278:	2101      	movs	r1, #1
 801b27a:	69fb      	ldr	r3, [r7, #28]
 801b27c:	fa01 f303 	lsl.w	r3, r1, r3
 801b280:	4013      	ands	r3, r2
 801b282:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801b284:	693b      	ldr	r3, [r7, #16]
 801b286:	2b00      	cmp	r3, #0
 801b288:	f000 8186 	beq.w	801b598 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801b28c:	683b      	ldr	r3, [r7, #0]
 801b28e:	685b      	ldr	r3, [r3, #4]
 801b290:	f003 0303 	and.w	r3, r3, #3
 801b294:	2b01      	cmp	r3, #1
 801b296:	d005      	beq.n	801b2a4 <HAL_GPIO_Init+0x44>
 801b298:	683b      	ldr	r3, [r7, #0]
 801b29a:	685b      	ldr	r3, [r3, #4]
 801b29c:	f003 0303 	and.w	r3, r3, #3
 801b2a0:	2b02      	cmp	r3, #2
 801b2a2:	d130      	bne.n	801b306 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801b2a4:	687b      	ldr	r3, [r7, #4]
 801b2a6:	689b      	ldr	r3, [r3, #8]
 801b2a8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801b2aa:	69fb      	ldr	r3, [r7, #28]
 801b2ac:	005b      	lsls	r3, r3, #1
 801b2ae:	2203      	movs	r2, #3
 801b2b0:	fa02 f303 	lsl.w	r3, r2, r3
 801b2b4:	43db      	mvns	r3, r3
 801b2b6:	69ba      	ldr	r2, [r7, #24]
 801b2b8:	4013      	ands	r3, r2
 801b2ba:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801b2bc:	683b      	ldr	r3, [r7, #0]
 801b2be:	68da      	ldr	r2, [r3, #12]
 801b2c0:	69fb      	ldr	r3, [r7, #28]
 801b2c2:	005b      	lsls	r3, r3, #1
 801b2c4:	fa02 f303 	lsl.w	r3, r2, r3
 801b2c8:	69ba      	ldr	r2, [r7, #24]
 801b2ca:	4313      	orrs	r3, r2
 801b2cc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801b2ce:	687b      	ldr	r3, [r7, #4]
 801b2d0:	69ba      	ldr	r2, [r7, #24]
 801b2d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	685b      	ldr	r3, [r3, #4]
 801b2d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801b2da:	2201      	movs	r2, #1
 801b2dc:	69fb      	ldr	r3, [r7, #28]
 801b2de:	fa02 f303 	lsl.w	r3, r2, r3
 801b2e2:	43db      	mvns	r3, r3
 801b2e4:	69ba      	ldr	r2, [r7, #24]
 801b2e6:	4013      	ands	r3, r2
 801b2e8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801b2ea:	683b      	ldr	r3, [r7, #0]
 801b2ec:	685b      	ldr	r3, [r3, #4]
 801b2ee:	091b      	lsrs	r3, r3, #4
 801b2f0:	f003 0201 	and.w	r2, r3, #1
 801b2f4:	69fb      	ldr	r3, [r7, #28]
 801b2f6:	fa02 f303 	lsl.w	r3, r2, r3
 801b2fa:	69ba      	ldr	r2, [r7, #24]
 801b2fc:	4313      	orrs	r3, r2
 801b2fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801b300:	687b      	ldr	r3, [r7, #4]
 801b302:	69ba      	ldr	r2, [r7, #24]
 801b304:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801b306:	683b      	ldr	r3, [r7, #0]
 801b308:	685b      	ldr	r3, [r3, #4]
 801b30a:	f003 0303 	and.w	r3, r3, #3
 801b30e:	2b03      	cmp	r3, #3
 801b310:	d017      	beq.n	801b342 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801b312:	687b      	ldr	r3, [r7, #4]
 801b314:	68db      	ldr	r3, [r3, #12]
 801b316:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801b318:	69fb      	ldr	r3, [r7, #28]
 801b31a:	005b      	lsls	r3, r3, #1
 801b31c:	2203      	movs	r2, #3
 801b31e:	fa02 f303 	lsl.w	r3, r2, r3
 801b322:	43db      	mvns	r3, r3
 801b324:	69ba      	ldr	r2, [r7, #24]
 801b326:	4013      	ands	r3, r2
 801b328:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801b32a:	683b      	ldr	r3, [r7, #0]
 801b32c:	689a      	ldr	r2, [r3, #8]
 801b32e:	69fb      	ldr	r3, [r7, #28]
 801b330:	005b      	lsls	r3, r3, #1
 801b332:	fa02 f303 	lsl.w	r3, r2, r3
 801b336:	69ba      	ldr	r2, [r7, #24]
 801b338:	4313      	orrs	r3, r2
 801b33a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	69ba      	ldr	r2, [r7, #24]
 801b340:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801b342:	683b      	ldr	r3, [r7, #0]
 801b344:	685b      	ldr	r3, [r3, #4]
 801b346:	f003 0303 	and.w	r3, r3, #3
 801b34a:	2b02      	cmp	r3, #2
 801b34c:	d123      	bne.n	801b396 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801b34e:	69fb      	ldr	r3, [r7, #28]
 801b350:	08da      	lsrs	r2, r3, #3
 801b352:	687b      	ldr	r3, [r7, #4]
 801b354:	3208      	adds	r2, #8
 801b356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b35a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801b35c:	69fb      	ldr	r3, [r7, #28]
 801b35e:	f003 0307 	and.w	r3, r3, #7
 801b362:	009b      	lsls	r3, r3, #2
 801b364:	220f      	movs	r2, #15
 801b366:	fa02 f303 	lsl.w	r3, r2, r3
 801b36a:	43db      	mvns	r3, r3
 801b36c:	69ba      	ldr	r2, [r7, #24]
 801b36e:	4013      	ands	r3, r2
 801b370:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801b372:	683b      	ldr	r3, [r7, #0]
 801b374:	691a      	ldr	r2, [r3, #16]
 801b376:	69fb      	ldr	r3, [r7, #28]
 801b378:	f003 0307 	and.w	r3, r3, #7
 801b37c:	009b      	lsls	r3, r3, #2
 801b37e:	fa02 f303 	lsl.w	r3, r2, r3
 801b382:	69ba      	ldr	r2, [r7, #24]
 801b384:	4313      	orrs	r3, r2
 801b386:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801b388:	69fb      	ldr	r3, [r7, #28]
 801b38a:	08da      	lsrs	r2, r3, #3
 801b38c:	687b      	ldr	r3, [r7, #4]
 801b38e:	3208      	adds	r2, #8
 801b390:	69b9      	ldr	r1, [r7, #24]
 801b392:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801b396:	687b      	ldr	r3, [r7, #4]
 801b398:	681b      	ldr	r3, [r3, #0]
 801b39a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801b39c:	69fb      	ldr	r3, [r7, #28]
 801b39e:	005b      	lsls	r3, r3, #1
 801b3a0:	2203      	movs	r2, #3
 801b3a2:	fa02 f303 	lsl.w	r3, r2, r3
 801b3a6:	43db      	mvns	r3, r3
 801b3a8:	69ba      	ldr	r2, [r7, #24]
 801b3aa:	4013      	ands	r3, r2
 801b3ac:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801b3ae:	683b      	ldr	r3, [r7, #0]
 801b3b0:	685b      	ldr	r3, [r3, #4]
 801b3b2:	f003 0203 	and.w	r2, r3, #3
 801b3b6:	69fb      	ldr	r3, [r7, #28]
 801b3b8:	005b      	lsls	r3, r3, #1
 801b3ba:	fa02 f303 	lsl.w	r3, r2, r3
 801b3be:	69ba      	ldr	r2, [r7, #24]
 801b3c0:	4313      	orrs	r3, r2
 801b3c2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801b3c4:	687b      	ldr	r3, [r7, #4]
 801b3c6:	69ba      	ldr	r2, [r7, #24]
 801b3c8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801b3ca:	683b      	ldr	r3, [r7, #0]
 801b3cc:	685b      	ldr	r3, [r3, #4]
 801b3ce:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801b3d2:	2b00      	cmp	r3, #0
 801b3d4:	f000 80e0 	beq.w	801b598 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b3d8:	4b2f      	ldr	r3, [pc, #188]	@ (801b498 <HAL_GPIO_Init+0x238>)
 801b3da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801b3de:	4a2e      	ldr	r2, [pc, #184]	@ (801b498 <HAL_GPIO_Init+0x238>)
 801b3e0:	f043 0302 	orr.w	r3, r3, #2
 801b3e4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801b3e8:	4b2b      	ldr	r3, [pc, #172]	@ (801b498 <HAL_GPIO_Init+0x238>)
 801b3ea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801b3ee:	f003 0302 	and.w	r3, r3, #2
 801b3f2:	60fb      	str	r3, [r7, #12]
 801b3f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801b3f6:	4a29      	ldr	r2, [pc, #164]	@ (801b49c <HAL_GPIO_Init+0x23c>)
 801b3f8:	69fb      	ldr	r3, [r7, #28]
 801b3fa:	089b      	lsrs	r3, r3, #2
 801b3fc:	3302      	adds	r3, #2
 801b3fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b402:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801b404:	69fb      	ldr	r3, [r7, #28]
 801b406:	f003 0303 	and.w	r3, r3, #3
 801b40a:	009b      	lsls	r3, r3, #2
 801b40c:	220f      	movs	r2, #15
 801b40e:	fa02 f303 	lsl.w	r3, r2, r3
 801b412:	43db      	mvns	r3, r3
 801b414:	69ba      	ldr	r2, [r7, #24]
 801b416:	4013      	ands	r3, r2
 801b418:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801b41a:	687b      	ldr	r3, [r7, #4]
 801b41c:	4a20      	ldr	r2, [pc, #128]	@ (801b4a0 <HAL_GPIO_Init+0x240>)
 801b41e:	4293      	cmp	r3, r2
 801b420:	d052      	beq.n	801b4c8 <HAL_GPIO_Init+0x268>
 801b422:	687b      	ldr	r3, [r7, #4]
 801b424:	4a1f      	ldr	r2, [pc, #124]	@ (801b4a4 <HAL_GPIO_Init+0x244>)
 801b426:	4293      	cmp	r3, r2
 801b428:	d031      	beq.n	801b48e <HAL_GPIO_Init+0x22e>
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	4a1e      	ldr	r2, [pc, #120]	@ (801b4a8 <HAL_GPIO_Init+0x248>)
 801b42e:	4293      	cmp	r3, r2
 801b430:	d02b      	beq.n	801b48a <HAL_GPIO_Init+0x22a>
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	4a1d      	ldr	r2, [pc, #116]	@ (801b4ac <HAL_GPIO_Init+0x24c>)
 801b436:	4293      	cmp	r3, r2
 801b438:	d025      	beq.n	801b486 <HAL_GPIO_Init+0x226>
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	4a1c      	ldr	r2, [pc, #112]	@ (801b4b0 <HAL_GPIO_Init+0x250>)
 801b43e:	4293      	cmp	r3, r2
 801b440:	d01f      	beq.n	801b482 <HAL_GPIO_Init+0x222>
 801b442:	687b      	ldr	r3, [r7, #4]
 801b444:	4a1b      	ldr	r2, [pc, #108]	@ (801b4b4 <HAL_GPIO_Init+0x254>)
 801b446:	4293      	cmp	r3, r2
 801b448:	d019      	beq.n	801b47e <HAL_GPIO_Init+0x21e>
 801b44a:	687b      	ldr	r3, [r7, #4]
 801b44c:	4a1a      	ldr	r2, [pc, #104]	@ (801b4b8 <HAL_GPIO_Init+0x258>)
 801b44e:	4293      	cmp	r3, r2
 801b450:	d013      	beq.n	801b47a <HAL_GPIO_Init+0x21a>
 801b452:	687b      	ldr	r3, [r7, #4]
 801b454:	4a19      	ldr	r2, [pc, #100]	@ (801b4bc <HAL_GPIO_Init+0x25c>)
 801b456:	4293      	cmp	r3, r2
 801b458:	d00d      	beq.n	801b476 <HAL_GPIO_Init+0x216>
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	4a18      	ldr	r2, [pc, #96]	@ (801b4c0 <HAL_GPIO_Init+0x260>)
 801b45e:	4293      	cmp	r3, r2
 801b460:	d007      	beq.n	801b472 <HAL_GPIO_Init+0x212>
 801b462:	687b      	ldr	r3, [r7, #4]
 801b464:	4a17      	ldr	r2, [pc, #92]	@ (801b4c4 <HAL_GPIO_Init+0x264>)
 801b466:	4293      	cmp	r3, r2
 801b468:	d101      	bne.n	801b46e <HAL_GPIO_Init+0x20e>
 801b46a:	2309      	movs	r3, #9
 801b46c:	e02d      	b.n	801b4ca <HAL_GPIO_Init+0x26a>
 801b46e:	230a      	movs	r3, #10
 801b470:	e02b      	b.n	801b4ca <HAL_GPIO_Init+0x26a>
 801b472:	2308      	movs	r3, #8
 801b474:	e029      	b.n	801b4ca <HAL_GPIO_Init+0x26a>
 801b476:	2307      	movs	r3, #7
 801b478:	e027      	b.n	801b4ca <HAL_GPIO_Init+0x26a>
 801b47a:	2306      	movs	r3, #6
 801b47c:	e025      	b.n	801b4ca <HAL_GPIO_Init+0x26a>
 801b47e:	2305      	movs	r3, #5
 801b480:	e023      	b.n	801b4ca <HAL_GPIO_Init+0x26a>
 801b482:	2304      	movs	r3, #4
 801b484:	e021      	b.n	801b4ca <HAL_GPIO_Init+0x26a>
 801b486:	2303      	movs	r3, #3
 801b488:	e01f      	b.n	801b4ca <HAL_GPIO_Init+0x26a>
 801b48a:	2302      	movs	r3, #2
 801b48c:	e01d      	b.n	801b4ca <HAL_GPIO_Init+0x26a>
 801b48e:	2301      	movs	r3, #1
 801b490:	e01b      	b.n	801b4ca <HAL_GPIO_Init+0x26a>
 801b492:	bf00      	nop
 801b494:	58000080 	.word	0x58000080
 801b498:	58024400 	.word	0x58024400
 801b49c:	58000400 	.word	0x58000400
 801b4a0:	58020000 	.word	0x58020000
 801b4a4:	58020400 	.word	0x58020400
 801b4a8:	58020800 	.word	0x58020800
 801b4ac:	58020c00 	.word	0x58020c00
 801b4b0:	58021000 	.word	0x58021000
 801b4b4:	58021400 	.word	0x58021400
 801b4b8:	58021800 	.word	0x58021800
 801b4bc:	58021c00 	.word	0x58021c00
 801b4c0:	58022000 	.word	0x58022000
 801b4c4:	58022400 	.word	0x58022400
 801b4c8:	2300      	movs	r3, #0
 801b4ca:	69fa      	ldr	r2, [r7, #28]
 801b4cc:	f002 0203 	and.w	r2, r2, #3
 801b4d0:	0092      	lsls	r2, r2, #2
 801b4d2:	4093      	lsls	r3, r2
 801b4d4:	69ba      	ldr	r2, [r7, #24]
 801b4d6:	4313      	orrs	r3, r2
 801b4d8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801b4da:	4938      	ldr	r1, [pc, #224]	@ (801b5bc <HAL_GPIO_Init+0x35c>)
 801b4dc:	69fb      	ldr	r3, [r7, #28]
 801b4de:	089b      	lsrs	r3, r3, #2
 801b4e0:	3302      	adds	r3, #2
 801b4e2:	69ba      	ldr	r2, [r7, #24]
 801b4e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801b4e8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b4ec:	681b      	ldr	r3, [r3, #0]
 801b4ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b4f0:	693b      	ldr	r3, [r7, #16]
 801b4f2:	43db      	mvns	r3, r3
 801b4f4:	69ba      	ldr	r2, [r7, #24]
 801b4f6:	4013      	ands	r3, r2
 801b4f8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801b4fa:	683b      	ldr	r3, [r7, #0]
 801b4fc:	685b      	ldr	r3, [r3, #4]
 801b4fe:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801b502:	2b00      	cmp	r3, #0
 801b504:	d003      	beq.n	801b50e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801b506:	69ba      	ldr	r2, [r7, #24]
 801b508:	693b      	ldr	r3, [r7, #16]
 801b50a:	4313      	orrs	r3, r2
 801b50c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801b50e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801b512:	69bb      	ldr	r3, [r7, #24]
 801b514:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801b516:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b51a:	685b      	ldr	r3, [r3, #4]
 801b51c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b51e:	693b      	ldr	r3, [r7, #16]
 801b520:	43db      	mvns	r3, r3
 801b522:	69ba      	ldr	r2, [r7, #24]
 801b524:	4013      	ands	r3, r2
 801b526:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801b528:	683b      	ldr	r3, [r7, #0]
 801b52a:	685b      	ldr	r3, [r3, #4]
 801b52c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801b530:	2b00      	cmp	r3, #0
 801b532:	d003      	beq.n	801b53c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801b534:	69ba      	ldr	r2, [r7, #24]
 801b536:	693b      	ldr	r3, [r7, #16]
 801b538:	4313      	orrs	r3, r2
 801b53a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801b53c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801b540:	69bb      	ldr	r3, [r7, #24]
 801b542:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801b544:	697b      	ldr	r3, [r7, #20]
 801b546:	685b      	ldr	r3, [r3, #4]
 801b548:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b54a:	693b      	ldr	r3, [r7, #16]
 801b54c:	43db      	mvns	r3, r3
 801b54e:	69ba      	ldr	r2, [r7, #24]
 801b550:	4013      	ands	r3, r2
 801b552:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801b554:	683b      	ldr	r3, [r7, #0]
 801b556:	685b      	ldr	r3, [r3, #4]
 801b558:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	d003      	beq.n	801b568 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801b560:	69ba      	ldr	r2, [r7, #24]
 801b562:	693b      	ldr	r3, [r7, #16]
 801b564:	4313      	orrs	r3, r2
 801b566:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801b568:	697b      	ldr	r3, [r7, #20]
 801b56a:	69ba      	ldr	r2, [r7, #24]
 801b56c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801b56e:	697b      	ldr	r3, [r7, #20]
 801b570:	681b      	ldr	r3, [r3, #0]
 801b572:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b574:	693b      	ldr	r3, [r7, #16]
 801b576:	43db      	mvns	r3, r3
 801b578:	69ba      	ldr	r2, [r7, #24]
 801b57a:	4013      	ands	r3, r2
 801b57c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801b57e:	683b      	ldr	r3, [r7, #0]
 801b580:	685b      	ldr	r3, [r3, #4]
 801b582:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b586:	2b00      	cmp	r3, #0
 801b588:	d003      	beq.n	801b592 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801b58a:	69ba      	ldr	r2, [r7, #24]
 801b58c:	693b      	ldr	r3, [r7, #16]
 801b58e:	4313      	orrs	r3, r2
 801b590:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801b592:	697b      	ldr	r3, [r7, #20]
 801b594:	69ba      	ldr	r2, [r7, #24]
 801b596:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801b598:	69fb      	ldr	r3, [r7, #28]
 801b59a:	3301      	adds	r3, #1
 801b59c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801b59e:	683b      	ldr	r3, [r7, #0]
 801b5a0:	681a      	ldr	r2, [r3, #0]
 801b5a2:	69fb      	ldr	r3, [r7, #28]
 801b5a4:	fa22 f303 	lsr.w	r3, r2, r3
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	f47f ae63 	bne.w	801b274 <HAL_GPIO_Init+0x14>
  }
}
 801b5ae:	bf00      	nop
 801b5b0:	bf00      	nop
 801b5b2:	3724      	adds	r7, #36	@ 0x24
 801b5b4:	46bd      	mov	sp, r7
 801b5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b5ba:	4770      	bx	lr
 801b5bc:	58000400 	.word	0x58000400

0801b5c0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801b5c0:	b580      	push	{r7, lr}
 801b5c2:	b084      	sub	sp, #16
 801b5c4:	af00      	add	r7, sp, #0
 801b5c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801b5c8:	4b19      	ldr	r3, [pc, #100]	@ (801b630 <HAL_PWREx_ConfigSupply+0x70>)
 801b5ca:	68db      	ldr	r3, [r3, #12]
 801b5cc:	f003 0304 	and.w	r3, r3, #4
 801b5d0:	2b04      	cmp	r3, #4
 801b5d2:	d00a      	beq.n	801b5ea <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801b5d4:	4b16      	ldr	r3, [pc, #88]	@ (801b630 <HAL_PWREx_ConfigSupply+0x70>)
 801b5d6:	68db      	ldr	r3, [r3, #12]
 801b5d8:	f003 0307 	and.w	r3, r3, #7
 801b5dc:	687a      	ldr	r2, [r7, #4]
 801b5de:	429a      	cmp	r2, r3
 801b5e0:	d001      	beq.n	801b5e6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801b5e2:	2301      	movs	r3, #1
 801b5e4:	e01f      	b.n	801b626 <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	e01d      	b.n	801b626 <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801b5ea:	4b11      	ldr	r3, [pc, #68]	@ (801b630 <HAL_PWREx_ConfigSupply+0x70>)
 801b5ec:	68db      	ldr	r3, [r3, #12]
 801b5ee:	f023 0207 	bic.w	r2, r3, #7
 801b5f2:	490f      	ldr	r1, [pc, #60]	@ (801b630 <HAL_PWREx_ConfigSupply+0x70>)
 801b5f4:	687b      	ldr	r3, [r7, #4]
 801b5f6:	4313      	orrs	r3, r2
 801b5f8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801b5fa:	f7fd fd75 	bl	80190e8 <HAL_GetTick>
 801b5fe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801b600:	e009      	b.n	801b616 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801b602:	f7fd fd71 	bl	80190e8 <HAL_GetTick>
 801b606:	4602      	mov	r2, r0
 801b608:	68fb      	ldr	r3, [r7, #12]
 801b60a:	1ad3      	subs	r3, r2, r3
 801b60c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801b610:	d901      	bls.n	801b616 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801b612:	2301      	movs	r3, #1
 801b614:	e007      	b.n	801b626 <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801b616:	4b06      	ldr	r3, [pc, #24]	@ (801b630 <HAL_PWREx_ConfigSupply+0x70>)
 801b618:	685b      	ldr	r3, [r3, #4]
 801b61a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801b61e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b622:	d1ee      	bne.n	801b602 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801b624:	2300      	movs	r3, #0
}
 801b626:	4618      	mov	r0, r3
 801b628:	3710      	adds	r7, #16
 801b62a:	46bd      	mov	sp, r7
 801b62c:	bd80      	pop	{r7, pc}
 801b62e:	bf00      	nop
 801b630:	58024800 	.word	0x58024800

0801b634 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801b634:	b580      	push	{r7, lr}
 801b636:	b08c      	sub	sp, #48	@ 0x30
 801b638:	af00      	add	r7, sp, #0
 801b63a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801b63c:	687b      	ldr	r3, [r7, #4]
 801b63e:	2b00      	cmp	r3, #0
 801b640:	d102      	bne.n	801b648 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801b642:	2301      	movs	r3, #1
 801b644:	f000 bc48 	b.w	801bed8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801b648:	687b      	ldr	r3, [r7, #4]
 801b64a:	681b      	ldr	r3, [r3, #0]
 801b64c:	f003 0301 	and.w	r3, r3, #1
 801b650:	2b00      	cmp	r3, #0
 801b652:	f000 8088 	beq.w	801b766 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b656:	4b99      	ldr	r3, [pc, #612]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b658:	691b      	ldr	r3, [r3, #16]
 801b65a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801b65e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b660:	4b96      	ldr	r3, [pc, #600]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b662:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b664:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801b666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b668:	2b10      	cmp	r3, #16
 801b66a:	d007      	beq.n	801b67c <HAL_RCC_OscConfig+0x48>
 801b66c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b66e:	2b18      	cmp	r3, #24
 801b670:	d111      	bne.n	801b696 <HAL_RCC_OscConfig+0x62>
 801b672:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b674:	f003 0303 	and.w	r3, r3, #3
 801b678:	2b02      	cmp	r3, #2
 801b67a:	d10c      	bne.n	801b696 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b67c:	4b8f      	ldr	r3, [pc, #572]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b67e:	681b      	ldr	r3, [r3, #0]
 801b680:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b684:	2b00      	cmp	r3, #0
 801b686:	d06d      	beq.n	801b764 <HAL_RCC_OscConfig+0x130>
 801b688:	687b      	ldr	r3, [r7, #4]
 801b68a:	685b      	ldr	r3, [r3, #4]
 801b68c:	2b00      	cmp	r3, #0
 801b68e:	d169      	bne.n	801b764 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801b690:	2301      	movs	r3, #1
 801b692:	f000 bc21 	b.w	801bed8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801b696:	687b      	ldr	r3, [r7, #4]
 801b698:	685b      	ldr	r3, [r3, #4]
 801b69a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b69e:	d106      	bne.n	801b6ae <HAL_RCC_OscConfig+0x7a>
 801b6a0:	4b86      	ldr	r3, [pc, #536]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b6a2:	681b      	ldr	r3, [r3, #0]
 801b6a4:	4a85      	ldr	r2, [pc, #532]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b6a6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b6aa:	6013      	str	r3, [r2, #0]
 801b6ac:	e02e      	b.n	801b70c <HAL_RCC_OscConfig+0xd8>
 801b6ae:	687b      	ldr	r3, [r7, #4]
 801b6b0:	685b      	ldr	r3, [r3, #4]
 801b6b2:	2b00      	cmp	r3, #0
 801b6b4:	d10c      	bne.n	801b6d0 <HAL_RCC_OscConfig+0x9c>
 801b6b6:	4b81      	ldr	r3, [pc, #516]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b6b8:	681b      	ldr	r3, [r3, #0]
 801b6ba:	4a80      	ldr	r2, [pc, #512]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b6bc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b6c0:	6013      	str	r3, [r2, #0]
 801b6c2:	4b7e      	ldr	r3, [pc, #504]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	4a7d      	ldr	r2, [pc, #500]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b6c8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801b6cc:	6013      	str	r3, [r2, #0]
 801b6ce:	e01d      	b.n	801b70c <HAL_RCC_OscConfig+0xd8>
 801b6d0:	687b      	ldr	r3, [r7, #4]
 801b6d2:	685b      	ldr	r3, [r3, #4]
 801b6d4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801b6d8:	d10c      	bne.n	801b6f4 <HAL_RCC_OscConfig+0xc0>
 801b6da:	4b78      	ldr	r3, [pc, #480]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b6dc:	681b      	ldr	r3, [r3, #0]
 801b6de:	4a77      	ldr	r2, [pc, #476]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b6e0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801b6e4:	6013      	str	r3, [r2, #0]
 801b6e6:	4b75      	ldr	r3, [pc, #468]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b6e8:	681b      	ldr	r3, [r3, #0]
 801b6ea:	4a74      	ldr	r2, [pc, #464]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b6ec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b6f0:	6013      	str	r3, [r2, #0]
 801b6f2:	e00b      	b.n	801b70c <HAL_RCC_OscConfig+0xd8>
 801b6f4:	4b71      	ldr	r3, [pc, #452]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b6f6:	681b      	ldr	r3, [r3, #0]
 801b6f8:	4a70      	ldr	r2, [pc, #448]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b6fa:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b6fe:	6013      	str	r3, [r2, #0]
 801b700:	4b6e      	ldr	r3, [pc, #440]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b702:	681b      	ldr	r3, [r3, #0]
 801b704:	4a6d      	ldr	r2, [pc, #436]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b706:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801b70a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	685b      	ldr	r3, [r3, #4]
 801b710:	2b00      	cmp	r3, #0
 801b712:	d013      	beq.n	801b73c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b714:	f7fd fce8 	bl	80190e8 <HAL_GetTick>
 801b718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b71a:	e008      	b.n	801b72e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b71c:	f7fd fce4 	bl	80190e8 <HAL_GetTick>
 801b720:	4602      	mov	r2, r0
 801b722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b724:	1ad3      	subs	r3, r2, r3
 801b726:	2b64      	cmp	r3, #100	@ 0x64
 801b728:	d901      	bls.n	801b72e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801b72a:	2303      	movs	r3, #3
 801b72c:	e3d4      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801b72e:	4b63      	ldr	r3, [pc, #396]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b730:	681b      	ldr	r3, [r3, #0]
 801b732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b736:	2b00      	cmp	r3, #0
 801b738:	d0f0      	beq.n	801b71c <HAL_RCC_OscConfig+0xe8>
 801b73a:	e014      	b.n	801b766 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b73c:	f7fd fcd4 	bl	80190e8 <HAL_GetTick>
 801b740:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b742:	e008      	b.n	801b756 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801b744:	f7fd fcd0 	bl	80190e8 <HAL_GetTick>
 801b748:	4602      	mov	r2, r0
 801b74a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b74c:	1ad3      	subs	r3, r2, r3
 801b74e:	2b64      	cmp	r3, #100	@ 0x64
 801b750:	d901      	bls.n	801b756 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801b752:	2303      	movs	r3, #3
 801b754:	e3c0      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801b756:	4b59      	ldr	r3, [pc, #356]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b758:	681b      	ldr	r3, [r3, #0]
 801b75a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d1f0      	bne.n	801b744 <HAL_RCC_OscConfig+0x110>
 801b762:	e000      	b.n	801b766 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801b764:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801b766:	687b      	ldr	r3, [r7, #4]
 801b768:	681b      	ldr	r3, [r3, #0]
 801b76a:	f003 0302 	and.w	r3, r3, #2
 801b76e:	2b00      	cmp	r3, #0
 801b770:	f000 80ca 	beq.w	801b908 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b774:	4b51      	ldr	r3, [pc, #324]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b776:	691b      	ldr	r3, [r3, #16]
 801b778:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801b77c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b77e:	4b4f      	ldr	r3, [pc, #316]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b782:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801b784:	6a3b      	ldr	r3, [r7, #32]
 801b786:	2b00      	cmp	r3, #0
 801b788:	d007      	beq.n	801b79a <HAL_RCC_OscConfig+0x166>
 801b78a:	6a3b      	ldr	r3, [r7, #32]
 801b78c:	2b18      	cmp	r3, #24
 801b78e:	d156      	bne.n	801b83e <HAL_RCC_OscConfig+0x20a>
 801b790:	69fb      	ldr	r3, [r7, #28]
 801b792:	f003 0303 	and.w	r3, r3, #3
 801b796:	2b00      	cmp	r3, #0
 801b798:	d151      	bne.n	801b83e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b79a:	4b48      	ldr	r3, [pc, #288]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b79c:	681b      	ldr	r3, [r3, #0]
 801b79e:	f003 0304 	and.w	r3, r3, #4
 801b7a2:	2b00      	cmp	r3, #0
 801b7a4:	d005      	beq.n	801b7b2 <HAL_RCC_OscConfig+0x17e>
 801b7a6:	687b      	ldr	r3, [r7, #4]
 801b7a8:	68db      	ldr	r3, [r3, #12]
 801b7aa:	2b00      	cmp	r3, #0
 801b7ac:	d101      	bne.n	801b7b2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801b7ae:	2301      	movs	r3, #1
 801b7b0:	e392      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b7b2:	4b42      	ldr	r3, [pc, #264]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b7b4:	681b      	ldr	r3, [r3, #0]
 801b7b6:	f023 0219 	bic.w	r2, r3, #25
 801b7ba:	687b      	ldr	r3, [r7, #4]
 801b7bc:	68db      	ldr	r3, [r3, #12]
 801b7be:	493f      	ldr	r1, [pc, #252]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b7c0:	4313      	orrs	r3, r2
 801b7c2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b7c4:	f7fd fc90 	bl	80190e8 <HAL_GetTick>
 801b7c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b7ca:	e008      	b.n	801b7de <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b7cc:	f7fd fc8c 	bl	80190e8 <HAL_GetTick>
 801b7d0:	4602      	mov	r2, r0
 801b7d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b7d4:	1ad3      	subs	r3, r2, r3
 801b7d6:	2b02      	cmp	r3, #2
 801b7d8:	d901      	bls.n	801b7de <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801b7da:	2303      	movs	r3, #3
 801b7dc:	e37c      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b7de:	4b37      	ldr	r3, [pc, #220]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b7e0:	681b      	ldr	r3, [r3, #0]
 801b7e2:	f003 0304 	and.w	r3, r3, #4
 801b7e6:	2b00      	cmp	r3, #0
 801b7e8:	d0f0      	beq.n	801b7cc <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b7ea:	f7fd fc89 	bl	8019100 <HAL_GetREVID>
 801b7ee:	4603      	mov	r3, r0
 801b7f0:	f241 0203 	movw	r2, #4099	@ 0x1003
 801b7f4:	4293      	cmp	r3, r2
 801b7f6:	d817      	bhi.n	801b828 <HAL_RCC_OscConfig+0x1f4>
 801b7f8:	687b      	ldr	r3, [r7, #4]
 801b7fa:	691b      	ldr	r3, [r3, #16]
 801b7fc:	2b40      	cmp	r3, #64	@ 0x40
 801b7fe:	d108      	bne.n	801b812 <HAL_RCC_OscConfig+0x1de>
 801b800:	4b2e      	ldr	r3, [pc, #184]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b802:	685b      	ldr	r3, [r3, #4]
 801b804:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801b808:	4a2c      	ldr	r2, [pc, #176]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b80a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b80e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b810:	e07a      	b.n	801b908 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b812:	4b2a      	ldr	r3, [pc, #168]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b814:	685b      	ldr	r3, [r3, #4]
 801b816:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	691b      	ldr	r3, [r3, #16]
 801b81e:	031b      	lsls	r3, r3, #12
 801b820:	4926      	ldr	r1, [pc, #152]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b822:	4313      	orrs	r3, r2
 801b824:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b826:	e06f      	b.n	801b908 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b828:	4b24      	ldr	r3, [pc, #144]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b82a:	685b      	ldr	r3, [r3, #4]
 801b82c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801b830:	687b      	ldr	r3, [r7, #4]
 801b832:	691b      	ldr	r3, [r3, #16]
 801b834:	061b      	lsls	r3, r3, #24
 801b836:	4921      	ldr	r1, [pc, #132]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b838:	4313      	orrs	r3, r2
 801b83a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801b83c:	e064      	b.n	801b908 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801b83e:	687b      	ldr	r3, [r7, #4]
 801b840:	68db      	ldr	r3, [r3, #12]
 801b842:	2b00      	cmp	r3, #0
 801b844:	d047      	beq.n	801b8d6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801b846:	4b1d      	ldr	r3, [pc, #116]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b848:	681b      	ldr	r3, [r3, #0]
 801b84a:	f023 0219 	bic.w	r2, r3, #25
 801b84e:	687b      	ldr	r3, [r7, #4]
 801b850:	68db      	ldr	r3, [r3, #12]
 801b852:	491a      	ldr	r1, [pc, #104]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b854:	4313      	orrs	r3, r2
 801b856:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b858:	f7fd fc46 	bl	80190e8 <HAL_GetTick>
 801b85c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b85e:	e008      	b.n	801b872 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b860:	f7fd fc42 	bl	80190e8 <HAL_GetTick>
 801b864:	4602      	mov	r2, r0
 801b866:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b868:	1ad3      	subs	r3, r2, r3
 801b86a:	2b02      	cmp	r3, #2
 801b86c:	d901      	bls.n	801b872 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801b86e:	2303      	movs	r3, #3
 801b870:	e332      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801b872:	4b12      	ldr	r3, [pc, #72]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	f003 0304 	and.w	r3, r3, #4
 801b87a:	2b00      	cmp	r3, #0
 801b87c:	d0f0      	beq.n	801b860 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801b87e:	f7fd fc3f 	bl	8019100 <HAL_GetREVID>
 801b882:	4603      	mov	r3, r0
 801b884:	f241 0203 	movw	r2, #4099	@ 0x1003
 801b888:	4293      	cmp	r3, r2
 801b88a:	d819      	bhi.n	801b8c0 <HAL_RCC_OscConfig+0x28c>
 801b88c:	687b      	ldr	r3, [r7, #4]
 801b88e:	691b      	ldr	r3, [r3, #16]
 801b890:	2b40      	cmp	r3, #64	@ 0x40
 801b892:	d108      	bne.n	801b8a6 <HAL_RCC_OscConfig+0x272>
 801b894:	4b09      	ldr	r3, [pc, #36]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b896:	685b      	ldr	r3, [r3, #4]
 801b898:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801b89c:	4a07      	ldr	r2, [pc, #28]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b89e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b8a2:	6053      	str	r3, [r2, #4]
 801b8a4:	e030      	b.n	801b908 <HAL_RCC_OscConfig+0x2d4>
 801b8a6:	4b05      	ldr	r3, [pc, #20]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b8a8:	685b      	ldr	r3, [r3, #4]
 801b8aa:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801b8ae:	687b      	ldr	r3, [r7, #4]
 801b8b0:	691b      	ldr	r3, [r3, #16]
 801b8b2:	031b      	lsls	r3, r3, #12
 801b8b4:	4901      	ldr	r1, [pc, #4]	@ (801b8bc <HAL_RCC_OscConfig+0x288>)
 801b8b6:	4313      	orrs	r3, r2
 801b8b8:	604b      	str	r3, [r1, #4]
 801b8ba:	e025      	b.n	801b908 <HAL_RCC_OscConfig+0x2d4>
 801b8bc:	58024400 	.word	0x58024400
 801b8c0:	4b9a      	ldr	r3, [pc, #616]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b8c2:	685b      	ldr	r3, [r3, #4]
 801b8c4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801b8c8:	687b      	ldr	r3, [r7, #4]
 801b8ca:	691b      	ldr	r3, [r3, #16]
 801b8cc:	061b      	lsls	r3, r3, #24
 801b8ce:	4997      	ldr	r1, [pc, #604]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b8d0:	4313      	orrs	r3, r2
 801b8d2:	604b      	str	r3, [r1, #4]
 801b8d4:	e018      	b.n	801b908 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801b8d6:	4b95      	ldr	r3, [pc, #596]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	4a94      	ldr	r2, [pc, #592]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b8dc:	f023 0301 	bic.w	r3, r3, #1
 801b8e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b8e2:	f7fd fc01 	bl	80190e8 <HAL_GetTick>
 801b8e6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b8e8:	e008      	b.n	801b8fc <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801b8ea:	f7fd fbfd 	bl	80190e8 <HAL_GetTick>
 801b8ee:	4602      	mov	r2, r0
 801b8f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b8f2:	1ad3      	subs	r3, r2, r3
 801b8f4:	2b02      	cmp	r3, #2
 801b8f6:	d901      	bls.n	801b8fc <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801b8f8:	2303      	movs	r3, #3
 801b8fa:	e2ed      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801b8fc:	4b8b      	ldr	r3, [pc, #556]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b8fe:	681b      	ldr	r3, [r3, #0]
 801b900:	f003 0304 	and.w	r3, r3, #4
 801b904:	2b00      	cmp	r3, #0
 801b906:	d1f0      	bne.n	801b8ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801b908:	687b      	ldr	r3, [r7, #4]
 801b90a:	681b      	ldr	r3, [r3, #0]
 801b90c:	f003 0310 	and.w	r3, r3, #16
 801b910:	2b00      	cmp	r3, #0
 801b912:	f000 80a9 	beq.w	801ba68 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801b916:	4b85      	ldr	r3, [pc, #532]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b918:	691b      	ldr	r3, [r3, #16]
 801b91a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801b91e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801b920:	4b82      	ldr	r3, [pc, #520]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b924:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801b926:	69bb      	ldr	r3, [r7, #24]
 801b928:	2b08      	cmp	r3, #8
 801b92a:	d007      	beq.n	801b93c <HAL_RCC_OscConfig+0x308>
 801b92c:	69bb      	ldr	r3, [r7, #24]
 801b92e:	2b18      	cmp	r3, #24
 801b930:	d13a      	bne.n	801b9a8 <HAL_RCC_OscConfig+0x374>
 801b932:	697b      	ldr	r3, [r7, #20]
 801b934:	f003 0303 	and.w	r3, r3, #3
 801b938:	2b01      	cmp	r3, #1
 801b93a:	d135      	bne.n	801b9a8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b93c:	4b7b      	ldr	r3, [pc, #492]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b93e:	681b      	ldr	r3, [r3, #0]
 801b940:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b944:	2b00      	cmp	r3, #0
 801b946:	d005      	beq.n	801b954 <HAL_RCC_OscConfig+0x320>
 801b948:	687b      	ldr	r3, [r7, #4]
 801b94a:	69db      	ldr	r3, [r3, #28]
 801b94c:	2b80      	cmp	r3, #128	@ 0x80
 801b94e:	d001      	beq.n	801b954 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801b950:	2301      	movs	r3, #1
 801b952:	e2c1      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b954:	f7fd fbd4 	bl	8019100 <HAL_GetREVID>
 801b958:	4603      	mov	r3, r0
 801b95a:	f241 0203 	movw	r2, #4099	@ 0x1003
 801b95e:	4293      	cmp	r3, r2
 801b960:	d817      	bhi.n	801b992 <HAL_RCC_OscConfig+0x35e>
 801b962:	687b      	ldr	r3, [r7, #4]
 801b964:	6a1b      	ldr	r3, [r3, #32]
 801b966:	2b20      	cmp	r3, #32
 801b968:	d108      	bne.n	801b97c <HAL_RCC_OscConfig+0x348>
 801b96a:	4b70      	ldr	r3, [pc, #448]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b96c:	685b      	ldr	r3, [r3, #4]
 801b96e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801b972:	4a6e      	ldr	r2, [pc, #440]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b974:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801b978:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b97a:	e075      	b.n	801ba68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b97c:	4b6b      	ldr	r3, [pc, #428]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b97e:	685b      	ldr	r3, [r3, #4]
 801b980:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801b984:	687b      	ldr	r3, [r7, #4]
 801b986:	6a1b      	ldr	r3, [r3, #32]
 801b988:	069b      	lsls	r3, r3, #26
 801b98a:	4968      	ldr	r1, [pc, #416]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b98c:	4313      	orrs	r3, r2
 801b98e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b990:	e06a      	b.n	801ba68 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b992:	4b66      	ldr	r3, [pc, #408]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b994:	68db      	ldr	r3, [r3, #12]
 801b996:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801b99a:	687b      	ldr	r3, [r7, #4]
 801b99c:	6a1b      	ldr	r3, [r3, #32]
 801b99e:	061b      	lsls	r3, r3, #24
 801b9a0:	4962      	ldr	r1, [pc, #392]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b9a2:	4313      	orrs	r3, r2
 801b9a4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801b9a6:	e05f      	b.n	801ba68 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801b9a8:	687b      	ldr	r3, [r7, #4]
 801b9aa:	69db      	ldr	r3, [r3, #28]
 801b9ac:	2b00      	cmp	r3, #0
 801b9ae:	d042      	beq.n	801ba36 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801b9b0:	4b5e      	ldr	r3, [pc, #376]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b9b2:	681b      	ldr	r3, [r3, #0]
 801b9b4:	4a5d      	ldr	r2, [pc, #372]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b9b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801b9ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801b9bc:	f7fd fb94 	bl	80190e8 <HAL_GetTick>
 801b9c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b9c2:	e008      	b.n	801b9d6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801b9c4:	f7fd fb90 	bl	80190e8 <HAL_GetTick>
 801b9c8:	4602      	mov	r2, r0
 801b9ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801b9cc:	1ad3      	subs	r3, r2, r3
 801b9ce:	2b02      	cmp	r3, #2
 801b9d0:	d901      	bls.n	801b9d6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801b9d2:	2303      	movs	r3, #3
 801b9d4:	e280      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801b9d6:	4b55      	ldr	r3, [pc, #340]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b9d8:	681b      	ldr	r3, [r3, #0]
 801b9da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d0f0      	beq.n	801b9c4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801b9e2:	f7fd fb8d 	bl	8019100 <HAL_GetREVID>
 801b9e6:	4603      	mov	r3, r0
 801b9e8:	f241 0203 	movw	r2, #4099	@ 0x1003
 801b9ec:	4293      	cmp	r3, r2
 801b9ee:	d817      	bhi.n	801ba20 <HAL_RCC_OscConfig+0x3ec>
 801b9f0:	687b      	ldr	r3, [r7, #4]
 801b9f2:	6a1b      	ldr	r3, [r3, #32]
 801b9f4:	2b20      	cmp	r3, #32
 801b9f6:	d108      	bne.n	801ba0a <HAL_RCC_OscConfig+0x3d6>
 801b9f8:	4b4c      	ldr	r3, [pc, #304]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801b9fa:	685b      	ldr	r3, [r3, #4]
 801b9fc:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801ba00:	4a4a      	ldr	r2, [pc, #296]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801ba02:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801ba06:	6053      	str	r3, [r2, #4]
 801ba08:	e02e      	b.n	801ba68 <HAL_RCC_OscConfig+0x434>
 801ba0a:	4b48      	ldr	r3, [pc, #288]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801ba0c:	685b      	ldr	r3, [r3, #4]
 801ba0e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801ba12:	687b      	ldr	r3, [r7, #4]
 801ba14:	6a1b      	ldr	r3, [r3, #32]
 801ba16:	069b      	lsls	r3, r3, #26
 801ba18:	4944      	ldr	r1, [pc, #272]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801ba1a:	4313      	orrs	r3, r2
 801ba1c:	604b      	str	r3, [r1, #4]
 801ba1e:	e023      	b.n	801ba68 <HAL_RCC_OscConfig+0x434>
 801ba20:	4b42      	ldr	r3, [pc, #264]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801ba22:	68db      	ldr	r3, [r3, #12]
 801ba24:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801ba28:	687b      	ldr	r3, [r7, #4]
 801ba2a:	6a1b      	ldr	r3, [r3, #32]
 801ba2c:	061b      	lsls	r3, r3, #24
 801ba2e:	493f      	ldr	r1, [pc, #252]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801ba30:	4313      	orrs	r3, r2
 801ba32:	60cb      	str	r3, [r1, #12]
 801ba34:	e018      	b.n	801ba68 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801ba36:	4b3d      	ldr	r3, [pc, #244]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801ba38:	681b      	ldr	r3, [r3, #0]
 801ba3a:	4a3c      	ldr	r2, [pc, #240]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801ba3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801ba40:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ba42:	f7fd fb51 	bl	80190e8 <HAL_GetTick>
 801ba46:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801ba48:	e008      	b.n	801ba5c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801ba4a:	f7fd fb4d 	bl	80190e8 <HAL_GetTick>
 801ba4e:	4602      	mov	r2, r0
 801ba50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba52:	1ad3      	subs	r3, r2, r3
 801ba54:	2b02      	cmp	r3, #2
 801ba56:	d901      	bls.n	801ba5c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801ba58:	2303      	movs	r3, #3
 801ba5a:	e23d      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801ba5c:	4b33      	ldr	r3, [pc, #204]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801ba5e:	681b      	ldr	r3, [r3, #0]
 801ba60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ba64:	2b00      	cmp	r3, #0
 801ba66:	d1f0      	bne.n	801ba4a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801ba68:	687b      	ldr	r3, [r7, #4]
 801ba6a:	681b      	ldr	r3, [r3, #0]
 801ba6c:	f003 0308 	and.w	r3, r3, #8
 801ba70:	2b00      	cmp	r3, #0
 801ba72:	d036      	beq.n	801bae2 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801ba74:	687b      	ldr	r3, [r7, #4]
 801ba76:	695b      	ldr	r3, [r3, #20]
 801ba78:	2b00      	cmp	r3, #0
 801ba7a:	d019      	beq.n	801bab0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801ba7c:	4b2b      	ldr	r3, [pc, #172]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801ba7e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ba80:	4a2a      	ldr	r2, [pc, #168]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801ba82:	f043 0301 	orr.w	r3, r3, #1
 801ba86:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801ba88:	f7fd fb2e 	bl	80190e8 <HAL_GetTick>
 801ba8c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801ba8e:	e008      	b.n	801baa2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801ba90:	f7fd fb2a 	bl	80190e8 <HAL_GetTick>
 801ba94:	4602      	mov	r2, r0
 801ba96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ba98:	1ad3      	subs	r3, r2, r3
 801ba9a:	2b02      	cmp	r3, #2
 801ba9c:	d901      	bls.n	801baa2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801ba9e:	2303      	movs	r3, #3
 801baa0:	e21a      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801baa2:	4b22      	ldr	r3, [pc, #136]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801baa4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801baa6:	f003 0302 	and.w	r3, r3, #2
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d0f0      	beq.n	801ba90 <HAL_RCC_OscConfig+0x45c>
 801baae:	e018      	b.n	801bae2 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801bab0:	4b1e      	ldr	r3, [pc, #120]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801bab2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bab4:	4a1d      	ldr	r2, [pc, #116]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801bab6:	f023 0301 	bic.w	r3, r3, #1
 801baba:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801babc:	f7fd fb14 	bl	80190e8 <HAL_GetTick>
 801bac0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801bac2:	e008      	b.n	801bad6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801bac4:	f7fd fb10 	bl	80190e8 <HAL_GetTick>
 801bac8:	4602      	mov	r2, r0
 801baca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bacc:	1ad3      	subs	r3, r2, r3
 801bace:	2b02      	cmp	r3, #2
 801bad0:	d901      	bls.n	801bad6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801bad2:	2303      	movs	r3, #3
 801bad4:	e200      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801bad6:	4b15      	ldr	r3, [pc, #84]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801bad8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801bada:	f003 0302 	and.w	r3, r3, #2
 801bade:	2b00      	cmp	r3, #0
 801bae0:	d1f0      	bne.n	801bac4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	f003 0320 	and.w	r3, r3, #32
 801baea:	2b00      	cmp	r3, #0
 801baec:	d039      	beq.n	801bb62 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	699b      	ldr	r3, [r3, #24]
 801baf2:	2b00      	cmp	r3, #0
 801baf4:	d01c      	beq.n	801bb30 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801baf6:	4b0d      	ldr	r3, [pc, #52]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801baf8:	681b      	ldr	r3, [r3, #0]
 801bafa:	4a0c      	ldr	r2, [pc, #48]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801bafc:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801bb00:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801bb02:	f7fd faf1 	bl	80190e8 <HAL_GetTick>
 801bb06:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801bb08:	e008      	b.n	801bb1c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801bb0a:	f7fd faed 	bl	80190e8 <HAL_GetTick>
 801bb0e:	4602      	mov	r2, r0
 801bb10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb12:	1ad3      	subs	r3, r2, r3
 801bb14:	2b02      	cmp	r3, #2
 801bb16:	d901      	bls.n	801bb1c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801bb18:	2303      	movs	r3, #3
 801bb1a:	e1dd      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801bb1c:	4b03      	ldr	r3, [pc, #12]	@ (801bb2c <HAL_RCC_OscConfig+0x4f8>)
 801bb1e:	681b      	ldr	r3, [r3, #0]
 801bb20:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	d0f0      	beq.n	801bb0a <HAL_RCC_OscConfig+0x4d6>
 801bb28:	e01b      	b.n	801bb62 <HAL_RCC_OscConfig+0x52e>
 801bb2a:	bf00      	nop
 801bb2c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801bb30:	4b9b      	ldr	r3, [pc, #620]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	4a9a      	ldr	r2, [pc, #616]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bb36:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801bb3a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801bb3c:	f7fd fad4 	bl	80190e8 <HAL_GetTick>
 801bb40:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801bb42:	e008      	b.n	801bb56 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801bb44:	f7fd fad0 	bl	80190e8 <HAL_GetTick>
 801bb48:	4602      	mov	r2, r0
 801bb4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb4c:	1ad3      	subs	r3, r2, r3
 801bb4e:	2b02      	cmp	r3, #2
 801bb50:	d901      	bls.n	801bb56 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801bb52:	2303      	movs	r3, #3
 801bb54:	e1c0      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801bb56:	4b92      	ldr	r3, [pc, #584]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bb58:	681b      	ldr	r3, [r3, #0]
 801bb5a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801bb5e:	2b00      	cmp	r3, #0
 801bb60:	d1f0      	bne.n	801bb44 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801bb62:	687b      	ldr	r3, [r7, #4]
 801bb64:	681b      	ldr	r3, [r3, #0]
 801bb66:	f003 0304 	and.w	r3, r3, #4
 801bb6a:	2b00      	cmp	r3, #0
 801bb6c:	f000 8081 	beq.w	801bc72 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801bb70:	4b8c      	ldr	r3, [pc, #560]	@ (801bda4 <HAL_RCC_OscConfig+0x770>)
 801bb72:	681b      	ldr	r3, [r3, #0]
 801bb74:	4a8b      	ldr	r2, [pc, #556]	@ (801bda4 <HAL_RCC_OscConfig+0x770>)
 801bb76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801bb7a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801bb7c:	f7fd fab4 	bl	80190e8 <HAL_GetTick>
 801bb80:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801bb82:	e008      	b.n	801bb96 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801bb84:	f7fd fab0 	bl	80190e8 <HAL_GetTick>
 801bb88:	4602      	mov	r2, r0
 801bb8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bb8c:	1ad3      	subs	r3, r2, r3
 801bb8e:	2b64      	cmp	r3, #100	@ 0x64
 801bb90:	d901      	bls.n	801bb96 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801bb92:	2303      	movs	r3, #3
 801bb94:	e1a0      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801bb96:	4b83      	ldr	r3, [pc, #524]	@ (801bda4 <HAL_RCC_OscConfig+0x770>)
 801bb98:	681b      	ldr	r3, [r3, #0]
 801bb9a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801bb9e:	2b00      	cmp	r3, #0
 801bba0:	d0f0      	beq.n	801bb84 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801bba2:	687b      	ldr	r3, [r7, #4]
 801bba4:	689b      	ldr	r3, [r3, #8]
 801bba6:	2b01      	cmp	r3, #1
 801bba8:	d106      	bne.n	801bbb8 <HAL_RCC_OscConfig+0x584>
 801bbaa:	4b7d      	ldr	r3, [pc, #500]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bbac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bbae:	4a7c      	ldr	r2, [pc, #496]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bbb0:	f043 0301 	orr.w	r3, r3, #1
 801bbb4:	6713      	str	r3, [r2, #112]	@ 0x70
 801bbb6:	e02d      	b.n	801bc14 <HAL_RCC_OscConfig+0x5e0>
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	689b      	ldr	r3, [r3, #8]
 801bbbc:	2b00      	cmp	r3, #0
 801bbbe:	d10c      	bne.n	801bbda <HAL_RCC_OscConfig+0x5a6>
 801bbc0:	4b77      	ldr	r3, [pc, #476]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bbc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bbc4:	4a76      	ldr	r2, [pc, #472]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bbc6:	f023 0301 	bic.w	r3, r3, #1
 801bbca:	6713      	str	r3, [r2, #112]	@ 0x70
 801bbcc:	4b74      	ldr	r3, [pc, #464]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bbce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bbd0:	4a73      	ldr	r2, [pc, #460]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bbd2:	f023 0304 	bic.w	r3, r3, #4
 801bbd6:	6713      	str	r3, [r2, #112]	@ 0x70
 801bbd8:	e01c      	b.n	801bc14 <HAL_RCC_OscConfig+0x5e0>
 801bbda:	687b      	ldr	r3, [r7, #4]
 801bbdc:	689b      	ldr	r3, [r3, #8]
 801bbde:	2b05      	cmp	r3, #5
 801bbe0:	d10c      	bne.n	801bbfc <HAL_RCC_OscConfig+0x5c8>
 801bbe2:	4b6f      	ldr	r3, [pc, #444]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bbe4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bbe6:	4a6e      	ldr	r2, [pc, #440]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bbe8:	f043 0304 	orr.w	r3, r3, #4
 801bbec:	6713      	str	r3, [r2, #112]	@ 0x70
 801bbee:	4b6c      	ldr	r3, [pc, #432]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bbf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bbf2:	4a6b      	ldr	r2, [pc, #428]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bbf4:	f043 0301 	orr.w	r3, r3, #1
 801bbf8:	6713      	str	r3, [r2, #112]	@ 0x70
 801bbfa:	e00b      	b.n	801bc14 <HAL_RCC_OscConfig+0x5e0>
 801bbfc:	4b68      	ldr	r3, [pc, #416]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bbfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bc00:	4a67      	ldr	r2, [pc, #412]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bc02:	f023 0301 	bic.w	r3, r3, #1
 801bc06:	6713      	str	r3, [r2, #112]	@ 0x70
 801bc08:	4b65      	ldr	r3, [pc, #404]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bc0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bc0c:	4a64      	ldr	r2, [pc, #400]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bc0e:	f023 0304 	bic.w	r3, r3, #4
 801bc12:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801bc14:	687b      	ldr	r3, [r7, #4]
 801bc16:	689b      	ldr	r3, [r3, #8]
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d015      	beq.n	801bc48 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bc1c:	f7fd fa64 	bl	80190e8 <HAL_GetTick>
 801bc20:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bc22:	e00a      	b.n	801bc3a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bc24:	f7fd fa60 	bl	80190e8 <HAL_GetTick>
 801bc28:	4602      	mov	r2, r0
 801bc2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc2c:	1ad3      	subs	r3, r2, r3
 801bc2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801bc32:	4293      	cmp	r3, r2
 801bc34:	d901      	bls.n	801bc3a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801bc36:	2303      	movs	r3, #3
 801bc38:	e14e      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801bc3a:	4b59      	ldr	r3, [pc, #356]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bc3c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bc3e:	f003 0302 	and.w	r3, r3, #2
 801bc42:	2b00      	cmp	r3, #0
 801bc44:	d0ee      	beq.n	801bc24 <HAL_RCC_OscConfig+0x5f0>
 801bc46:	e014      	b.n	801bc72 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801bc48:	f7fd fa4e 	bl	80190e8 <HAL_GetTick>
 801bc4c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801bc4e:	e00a      	b.n	801bc66 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801bc50:	f7fd fa4a 	bl	80190e8 <HAL_GetTick>
 801bc54:	4602      	mov	r2, r0
 801bc56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bc58:	1ad3      	subs	r3, r2, r3
 801bc5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801bc5e:	4293      	cmp	r3, r2
 801bc60:	d901      	bls.n	801bc66 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801bc62:	2303      	movs	r3, #3
 801bc64:	e138      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801bc66:	4b4e      	ldr	r3, [pc, #312]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bc68:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801bc6a:	f003 0302 	and.w	r3, r3, #2
 801bc6e:	2b00      	cmp	r3, #0
 801bc70:	d1ee      	bne.n	801bc50 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801bc72:	687b      	ldr	r3, [r7, #4]
 801bc74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	f000 812d 	beq.w	801bed6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801bc7c:	4b48      	ldr	r3, [pc, #288]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bc7e:	691b      	ldr	r3, [r3, #16]
 801bc80:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801bc84:	2b18      	cmp	r3, #24
 801bc86:	f000 80bd 	beq.w	801be04 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801bc8a:	687b      	ldr	r3, [r7, #4]
 801bc8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801bc8e:	2b02      	cmp	r3, #2
 801bc90:	f040 809e 	bne.w	801bdd0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bc94:	4b42      	ldr	r3, [pc, #264]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bc96:	681b      	ldr	r3, [r3, #0]
 801bc98:	4a41      	ldr	r2, [pc, #260]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bc9a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801bc9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bca0:	f7fd fa22 	bl	80190e8 <HAL_GetTick>
 801bca4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801bca6:	e008      	b.n	801bcba <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bca8:	f7fd fa1e 	bl	80190e8 <HAL_GetTick>
 801bcac:	4602      	mov	r2, r0
 801bcae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bcb0:	1ad3      	subs	r3, r2, r3
 801bcb2:	2b02      	cmp	r3, #2
 801bcb4:	d901      	bls.n	801bcba <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801bcb6:	2303      	movs	r3, #3
 801bcb8:	e10e      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801bcba:	4b39      	ldr	r3, [pc, #228]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bcbc:	681b      	ldr	r3, [r3, #0]
 801bcbe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bcc2:	2b00      	cmp	r3, #0
 801bcc4:	d1f0      	bne.n	801bca8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801bcc6:	4b36      	ldr	r3, [pc, #216]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bcc8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801bcca:	4b37      	ldr	r3, [pc, #220]	@ (801bda8 <HAL_RCC_OscConfig+0x774>)
 801bccc:	4013      	ands	r3, r2
 801bcce:	687a      	ldr	r2, [r7, #4]
 801bcd0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801bcd2:	687a      	ldr	r2, [r7, #4]
 801bcd4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801bcd6:	0112      	lsls	r2, r2, #4
 801bcd8:	430a      	orrs	r2, r1
 801bcda:	4931      	ldr	r1, [pc, #196]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bcdc:	4313      	orrs	r3, r2
 801bcde:	628b      	str	r3, [r1, #40]	@ 0x28
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bce4:	3b01      	subs	r3, #1
 801bce6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801bcea:	687b      	ldr	r3, [r7, #4]
 801bcec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801bcee:	3b01      	subs	r3, #1
 801bcf0:	025b      	lsls	r3, r3, #9
 801bcf2:	b29b      	uxth	r3, r3
 801bcf4:	431a      	orrs	r2, r3
 801bcf6:	687b      	ldr	r3, [r7, #4]
 801bcf8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801bcfa:	3b01      	subs	r3, #1
 801bcfc:	041b      	lsls	r3, r3, #16
 801bcfe:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801bd02:	431a      	orrs	r2, r3
 801bd04:	687b      	ldr	r3, [r7, #4]
 801bd06:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801bd08:	3b01      	subs	r3, #1
 801bd0a:	061b      	lsls	r3, r3, #24
 801bd0c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801bd10:	4923      	ldr	r1, [pc, #140]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd12:	4313      	orrs	r3, r2
 801bd14:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801bd16:	4b22      	ldr	r3, [pc, #136]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd1a:	4a21      	ldr	r2, [pc, #132]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd1c:	f023 0301 	bic.w	r3, r3, #1
 801bd20:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801bd22:	4b1f      	ldr	r3, [pc, #124]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd24:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801bd26:	4b21      	ldr	r3, [pc, #132]	@ (801bdac <HAL_RCC_OscConfig+0x778>)
 801bd28:	4013      	ands	r3, r2
 801bd2a:	687a      	ldr	r2, [r7, #4]
 801bd2c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801bd2e:	00d2      	lsls	r2, r2, #3
 801bd30:	491b      	ldr	r1, [pc, #108]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd32:	4313      	orrs	r3, r2
 801bd34:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801bd36:	4b1a      	ldr	r3, [pc, #104]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd3a:	f023 020c 	bic.w	r2, r3, #12
 801bd3e:	687b      	ldr	r3, [r7, #4]
 801bd40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801bd42:	4917      	ldr	r1, [pc, #92]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd44:	4313      	orrs	r3, r2
 801bd46:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801bd48:	4b15      	ldr	r3, [pc, #84]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd4a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd4c:	f023 0202 	bic.w	r2, r3, #2
 801bd50:	687b      	ldr	r3, [r7, #4]
 801bd52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801bd54:	4912      	ldr	r1, [pc, #72]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd56:	4313      	orrs	r3, r2
 801bd58:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801bd5a:	4b11      	ldr	r3, [pc, #68]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd5e:	4a10      	ldr	r2, [pc, #64]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801bd64:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801bd66:	4b0e      	ldr	r3, [pc, #56]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd6a:	4a0d      	ldr	r2, [pc, #52]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bd70:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801bd72:	4b0b      	ldr	r3, [pc, #44]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd76:	4a0a      	ldr	r2, [pc, #40]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801bd7c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801bd7e:	4b08      	ldr	r3, [pc, #32]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd82:	4a07      	ldr	r2, [pc, #28]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd84:	f043 0301 	orr.w	r3, r3, #1
 801bd88:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801bd8a:	4b05      	ldr	r3, [pc, #20]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd8c:	681b      	ldr	r3, [r3, #0]
 801bd8e:	4a04      	ldr	r2, [pc, #16]	@ (801bda0 <HAL_RCC_OscConfig+0x76c>)
 801bd90:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801bd94:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bd96:	f7fd f9a7 	bl	80190e8 <HAL_GetTick>
 801bd9a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bd9c:	e011      	b.n	801bdc2 <HAL_RCC_OscConfig+0x78e>
 801bd9e:	bf00      	nop
 801bda0:	58024400 	.word	0x58024400
 801bda4:	58024800 	.word	0x58024800
 801bda8:	fffffc0c 	.word	0xfffffc0c
 801bdac:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bdb0:	f7fd f99a 	bl	80190e8 <HAL_GetTick>
 801bdb4:	4602      	mov	r2, r0
 801bdb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdb8:	1ad3      	subs	r3, r2, r3
 801bdba:	2b02      	cmp	r3, #2
 801bdbc:	d901      	bls.n	801bdc2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801bdbe:	2303      	movs	r3, #3
 801bdc0:	e08a      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801bdc2:	4b47      	ldr	r3, [pc, #284]	@ (801bee0 <HAL_RCC_OscConfig+0x8ac>)
 801bdc4:	681b      	ldr	r3, [r3, #0]
 801bdc6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bdca:	2b00      	cmp	r3, #0
 801bdcc:	d0f0      	beq.n	801bdb0 <HAL_RCC_OscConfig+0x77c>
 801bdce:	e082      	b.n	801bed6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801bdd0:	4b43      	ldr	r3, [pc, #268]	@ (801bee0 <HAL_RCC_OscConfig+0x8ac>)
 801bdd2:	681b      	ldr	r3, [r3, #0]
 801bdd4:	4a42      	ldr	r2, [pc, #264]	@ (801bee0 <HAL_RCC_OscConfig+0x8ac>)
 801bdd6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801bdda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bddc:	f7fd f984 	bl	80190e8 <HAL_GetTick>
 801bde0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801bde2:	e008      	b.n	801bdf6 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801bde4:	f7fd f980 	bl	80190e8 <HAL_GetTick>
 801bde8:	4602      	mov	r2, r0
 801bdea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bdec:	1ad3      	subs	r3, r2, r3
 801bdee:	2b02      	cmp	r3, #2
 801bdf0:	d901      	bls.n	801bdf6 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801bdf2:	2303      	movs	r3, #3
 801bdf4:	e070      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801bdf6:	4b3a      	ldr	r3, [pc, #232]	@ (801bee0 <HAL_RCC_OscConfig+0x8ac>)
 801bdf8:	681b      	ldr	r3, [r3, #0]
 801bdfa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801bdfe:	2b00      	cmp	r3, #0
 801be00:	d1f0      	bne.n	801bde4 <HAL_RCC_OscConfig+0x7b0>
 801be02:	e068      	b.n	801bed6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801be04:	4b36      	ldr	r3, [pc, #216]	@ (801bee0 <HAL_RCC_OscConfig+0x8ac>)
 801be06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801be08:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801be0a:	4b35      	ldr	r3, [pc, #212]	@ (801bee0 <HAL_RCC_OscConfig+0x8ac>)
 801be0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801be0e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801be10:	687b      	ldr	r3, [r7, #4]
 801be12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801be14:	2b01      	cmp	r3, #1
 801be16:	d031      	beq.n	801be7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801be18:	693b      	ldr	r3, [r7, #16]
 801be1a:	f003 0203 	and.w	r2, r3, #3
 801be1e:	687b      	ldr	r3, [r7, #4]
 801be20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801be22:	429a      	cmp	r2, r3
 801be24:	d12a      	bne.n	801be7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801be26:	693b      	ldr	r3, [r7, #16]
 801be28:	091b      	lsrs	r3, r3, #4
 801be2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801be2e:	687b      	ldr	r3, [r7, #4]
 801be30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801be32:	429a      	cmp	r2, r3
 801be34:	d122      	bne.n	801be7c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801be36:	68fb      	ldr	r3, [r7, #12]
 801be38:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801be3c:	687b      	ldr	r3, [r7, #4]
 801be3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801be40:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801be42:	429a      	cmp	r2, r3
 801be44:	d11a      	bne.n	801be7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801be46:	68fb      	ldr	r3, [r7, #12]
 801be48:	0a5b      	lsrs	r3, r3, #9
 801be4a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801be4e:	687b      	ldr	r3, [r7, #4]
 801be50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801be52:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801be54:	429a      	cmp	r2, r3
 801be56:	d111      	bne.n	801be7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801be58:	68fb      	ldr	r3, [r7, #12]
 801be5a:	0c1b      	lsrs	r3, r3, #16
 801be5c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801be60:	687b      	ldr	r3, [r7, #4]
 801be62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801be64:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801be66:	429a      	cmp	r2, r3
 801be68:	d108      	bne.n	801be7c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801be6a:	68fb      	ldr	r3, [r7, #12]
 801be6c:	0e1b      	lsrs	r3, r3, #24
 801be6e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801be72:	687b      	ldr	r3, [r7, #4]
 801be74:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801be76:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801be78:	429a      	cmp	r2, r3
 801be7a:	d001      	beq.n	801be80 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801be7c:	2301      	movs	r3, #1
 801be7e:	e02b      	b.n	801bed8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801be80:	4b17      	ldr	r3, [pc, #92]	@ (801bee0 <HAL_RCC_OscConfig+0x8ac>)
 801be82:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801be84:	08db      	lsrs	r3, r3, #3
 801be86:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801be8a:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801be8c:	687b      	ldr	r3, [r7, #4]
 801be8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801be90:	693a      	ldr	r2, [r7, #16]
 801be92:	429a      	cmp	r2, r3
 801be94:	d01f      	beq.n	801bed6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801be96:	4b12      	ldr	r3, [pc, #72]	@ (801bee0 <HAL_RCC_OscConfig+0x8ac>)
 801be98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801be9a:	4a11      	ldr	r2, [pc, #68]	@ (801bee0 <HAL_RCC_OscConfig+0x8ac>)
 801be9c:	f023 0301 	bic.w	r3, r3, #1
 801bea0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801bea2:	f7fd f921 	bl	80190e8 <HAL_GetTick>
 801bea6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801bea8:	bf00      	nop
 801beaa:	f7fd f91d 	bl	80190e8 <HAL_GetTick>
 801beae:	4602      	mov	r2, r0
 801beb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801beb2:	4293      	cmp	r3, r2
 801beb4:	d0f9      	beq.n	801beaa <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801beb6:	4b0a      	ldr	r3, [pc, #40]	@ (801bee0 <HAL_RCC_OscConfig+0x8ac>)
 801beb8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801beba:	4b0a      	ldr	r3, [pc, #40]	@ (801bee4 <HAL_RCC_OscConfig+0x8b0>)
 801bebc:	4013      	ands	r3, r2
 801bebe:	687a      	ldr	r2, [r7, #4]
 801bec0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801bec2:	00d2      	lsls	r2, r2, #3
 801bec4:	4906      	ldr	r1, [pc, #24]	@ (801bee0 <HAL_RCC_OscConfig+0x8ac>)
 801bec6:	4313      	orrs	r3, r2
 801bec8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801beca:	4b05      	ldr	r3, [pc, #20]	@ (801bee0 <HAL_RCC_OscConfig+0x8ac>)
 801becc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bece:	4a04      	ldr	r2, [pc, #16]	@ (801bee0 <HAL_RCC_OscConfig+0x8ac>)
 801bed0:	f043 0301 	orr.w	r3, r3, #1
 801bed4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801bed6:	2300      	movs	r3, #0
}
 801bed8:	4618      	mov	r0, r3
 801beda:	3730      	adds	r7, #48	@ 0x30
 801bedc:	46bd      	mov	sp, r7
 801bede:	bd80      	pop	{r7, pc}
 801bee0:	58024400 	.word	0x58024400
 801bee4:	ffff0007 	.word	0xffff0007

0801bee8 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801bee8:	b580      	push	{r7, lr}
 801beea:	b086      	sub	sp, #24
 801beec:	af00      	add	r7, sp, #0
 801beee:	6078      	str	r0, [r7, #4]
 801bef0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801bef2:	687b      	ldr	r3, [r7, #4]
 801bef4:	2b00      	cmp	r3, #0
 801bef6:	d101      	bne.n	801befc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801bef8:	2301      	movs	r3, #1
 801befa:	e19c      	b.n	801c236 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801befc:	4b8a      	ldr	r3, [pc, #552]	@ (801c128 <HAL_RCC_ClockConfig+0x240>)
 801befe:	681b      	ldr	r3, [r3, #0]
 801bf00:	f003 030f 	and.w	r3, r3, #15
 801bf04:	683a      	ldr	r2, [r7, #0]
 801bf06:	429a      	cmp	r2, r3
 801bf08:	d910      	bls.n	801bf2c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801bf0a:	4b87      	ldr	r3, [pc, #540]	@ (801c128 <HAL_RCC_ClockConfig+0x240>)
 801bf0c:	681b      	ldr	r3, [r3, #0]
 801bf0e:	f023 020f 	bic.w	r2, r3, #15
 801bf12:	4985      	ldr	r1, [pc, #532]	@ (801c128 <HAL_RCC_ClockConfig+0x240>)
 801bf14:	683b      	ldr	r3, [r7, #0]
 801bf16:	4313      	orrs	r3, r2
 801bf18:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801bf1a:	4b83      	ldr	r3, [pc, #524]	@ (801c128 <HAL_RCC_ClockConfig+0x240>)
 801bf1c:	681b      	ldr	r3, [r3, #0]
 801bf1e:	f003 030f 	and.w	r3, r3, #15
 801bf22:	683a      	ldr	r2, [r7, #0]
 801bf24:	429a      	cmp	r2, r3
 801bf26:	d001      	beq.n	801bf2c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801bf28:	2301      	movs	r3, #1
 801bf2a:	e184      	b.n	801c236 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801bf2c:	687b      	ldr	r3, [r7, #4]
 801bf2e:	681b      	ldr	r3, [r3, #0]
 801bf30:	f003 0304 	and.w	r3, r3, #4
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d010      	beq.n	801bf5a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801bf38:	687b      	ldr	r3, [r7, #4]
 801bf3a:	691a      	ldr	r2, [r3, #16]
 801bf3c:	4b7b      	ldr	r3, [pc, #492]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801bf3e:	699b      	ldr	r3, [r3, #24]
 801bf40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801bf44:	429a      	cmp	r2, r3
 801bf46:	d908      	bls.n	801bf5a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801bf48:	4b78      	ldr	r3, [pc, #480]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801bf4a:	699b      	ldr	r3, [r3, #24]
 801bf4c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801bf50:	687b      	ldr	r3, [r7, #4]
 801bf52:	691b      	ldr	r3, [r3, #16]
 801bf54:	4975      	ldr	r1, [pc, #468]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801bf56:	4313      	orrs	r3, r2
 801bf58:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801bf5a:	687b      	ldr	r3, [r7, #4]
 801bf5c:	681b      	ldr	r3, [r3, #0]
 801bf5e:	f003 0308 	and.w	r3, r3, #8
 801bf62:	2b00      	cmp	r3, #0
 801bf64:	d010      	beq.n	801bf88 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801bf66:	687b      	ldr	r3, [r7, #4]
 801bf68:	695a      	ldr	r2, [r3, #20]
 801bf6a:	4b70      	ldr	r3, [pc, #448]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801bf6c:	69db      	ldr	r3, [r3, #28]
 801bf6e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801bf72:	429a      	cmp	r2, r3
 801bf74:	d908      	bls.n	801bf88 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801bf76:	4b6d      	ldr	r3, [pc, #436]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801bf78:	69db      	ldr	r3, [r3, #28]
 801bf7a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801bf7e:	687b      	ldr	r3, [r7, #4]
 801bf80:	695b      	ldr	r3, [r3, #20]
 801bf82:	496a      	ldr	r1, [pc, #424]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801bf84:	4313      	orrs	r3, r2
 801bf86:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801bf88:	687b      	ldr	r3, [r7, #4]
 801bf8a:	681b      	ldr	r3, [r3, #0]
 801bf8c:	f003 0310 	and.w	r3, r3, #16
 801bf90:	2b00      	cmp	r3, #0
 801bf92:	d010      	beq.n	801bfb6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801bf94:	687b      	ldr	r3, [r7, #4]
 801bf96:	699a      	ldr	r2, [r3, #24]
 801bf98:	4b64      	ldr	r3, [pc, #400]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801bf9a:	69db      	ldr	r3, [r3, #28]
 801bf9c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801bfa0:	429a      	cmp	r2, r3
 801bfa2:	d908      	bls.n	801bfb6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801bfa4:	4b61      	ldr	r3, [pc, #388]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801bfa6:	69db      	ldr	r3, [r3, #28]
 801bfa8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801bfac:	687b      	ldr	r3, [r7, #4]
 801bfae:	699b      	ldr	r3, [r3, #24]
 801bfb0:	495e      	ldr	r1, [pc, #376]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801bfb2:	4313      	orrs	r3, r2
 801bfb4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801bfb6:	687b      	ldr	r3, [r7, #4]
 801bfb8:	681b      	ldr	r3, [r3, #0]
 801bfba:	f003 0320 	and.w	r3, r3, #32
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d010      	beq.n	801bfe4 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801bfc2:	687b      	ldr	r3, [r7, #4]
 801bfc4:	69da      	ldr	r2, [r3, #28]
 801bfc6:	4b59      	ldr	r3, [pc, #356]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801bfc8:	6a1b      	ldr	r3, [r3, #32]
 801bfca:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801bfce:	429a      	cmp	r2, r3
 801bfd0:	d908      	bls.n	801bfe4 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801bfd2:	4b56      	ldr	r3, [pc, #344]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801bfd4:	6a1b      	ldr	r3, [r3, #32]
 801bfd6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801bfda:	687b      	ldr	r3, [r7, #4]
 801bfdc:	69db      	ldr	r3, [r3, #28]
 801bfde:	4953      	ldr	r1, [pc, #332]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801bfe0:	4313      	orrs	r3, r2
 801bfe2:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801bfe4:	687b      	ldr	r3, [r7, #4]
 801bfe6:	681b      	ldr	r3, [r3, #0]
 801bfe8:	f003 0302 	and.w	r3, r3, #2
 801bfec:	2b00      	cmp	r3, #0
 801bfee:	d010      	beq.n	801c012 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801bff0:	687b      	ldr	r3, [r7, #4]
 801bff2:	68da      	ldr	r2, [r3, #12]
 801bff4:	4b4d      	ldr	r3, [pc, #308]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801bff6:	699b      	ldr	r3, [r3, #24]
 801bff8:	f003 030f 	and.w	r3, r3, #15
 801bffc:	429a      	cmp	r2, r3
 801bffe:	d908      	bls.n	801c012 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c000:	4b4a      	ldr	r3, [pc, #296]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c002:	699b      	ldr	r3, [r3, #24]
 801c004:	f023 020f 	bic.w	r2, r3, #15
 801c008:	687b      	ldr	r3, [r7, #4]
 801c00a:	68db      	ldr	r3, [r3, #12]
 801c00c:	4947      	ldr	r1, [pc, #284]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c00e:	4313      	orrs	r3, r2
 801c010:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c012:	687b      	ldr	r3, [r7, #4]
 801c014:	681b      	ldr	r3, [r3, #0]
 801c016:	f003 0301 	and.w	r3, r3, #1
 801c01a:	2b00      	cmp	r3, #0
 801c01c:	d055      	beq.n	801c0ca <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801c01e:	4b43      	ldr	r3, [pc, #268]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c020:	699b      	ldr	r3, [r3, #24]
 801c022:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801c026:	687b      	ldr	r3, [r7, #4]
 801c028:	689b      	ldr	r3, [r3, #8]
 801c02a:	4940      	ldr	r1, [pc, #256]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c02c:	4313      	orrs	r3, r2
 801c02e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c030:	687b      	ldr	r3, [r7, #4]
 801c032:	685b      	ldr	r3, [r3, #4]
 801c034:	2b02      	cmp	r3, #2
 801c036:	d107      	bne.n	801c048 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c038:	4b3c      	ldr	r3, [pc, #240]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c03a:	681b      	ldr	r3, [r3, #0]
 801c03c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c040:	2b00      	cmp	r3, #0
 801c042:	d121      	bne.n	801c088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c044:	2301      	movs	r3, #1
 801c046:	e0f6      	b.n	801c236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c048:	687b      	ldr	r3, [r7, #4]
 801c04a:	685b      	ldr	r3, [r3, #4]
 801c04c:	2b03      	cmp	r3, #3
 801c04e:	d107      	bne.n	801c060 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c050:	4b36      	ldr	r3, [pc, #216]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c052:	681b      	ldr	r3, [r3, #0]
 801c054:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c058:	2b00      	cmp	r3, #0
 801c05a:	d115      	bne.n	801c088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c05c:	2301      	movs	r3, #1
 801c05e:	e0ea      	b.n	801c236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801c060:	687b      	ldr	r3, [r7, #4]
 801c062:	685b      	ldr	r3, [r3, #4]
 801c064:	2b01      	cmp	r3, #1
 801c066:	d107      	bne.n	801c078 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c068:	4b30      	ldr	r3, [pc, #192]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c070:	2b00      	cmp	r3, #0
 801c072:	d109      	bne.n	801c088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c074:	2301      	movs	r3, #1
 801c076:	e0de      	b.n	801c236 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c078:	4b2c      	ldr	r3, [pc, #176]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c07a:	681b      	ldr	r3, [r3, #0]
 801c07c:	f003 0304 	and.w	r3, r3, #4
 801c080:	2b00      	cmp	r3, #0
 801c082:	d101      	bne.n	801c088 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c084:	2301      	movs	r3, #1
 801c086:	e0d6      	b.n	801c236 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c088:	4b28      	ldr	r3, [pc, #160]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c08a:	691b      	ldr	r3, [r3, #16]
 801c08c:	f023 0207 	bic.w	r2, r3, #7
 801c090:	687b      	ldr	r3, [r7, #4]
 801c092:	685b      	ldr	r3, [r3, #4]
 801c094:	4925      	ldr	r1, [pc, #148]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c096:	4313      	orrs	r3, r2
 801c098:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c09a:	f7fd f825 	bl	80190e8 <HAL_GetTick>
 801c09e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c0a0:	e00a      	b.n	801c0b8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c0a2:	f7fd f821 	bl	80190e8 <HAL_GetTick>
 801c0a6:	4602      	mov	r2, r0
 801c0a8:	697b      	ldr	r3, [r7, #20]
 801c0aa:	1ad3      	subs	r3, r2, r3
 801c0ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c0b0:	4293      	cmp	r3, r2
 801c0b2:	d901      	bls.n	801c0b8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801c0b4:	2303      	movs	r3, #3
 801c0b6:	e0be      	b.n	801c236 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c0b8:	4b1c      	ldr	r3, [pc, #112]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c0ba:	691b      	ldr	r3, [r3, #16]
 801c0bc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801c0c0:	687b      	ldr	r3, [r7, #4]
 801c0c2:	685b      	ldr	r3, [r3, #4]
 801c0c4:	00db      	lsls	r3, r3, #3
 801c0c6:	429a      	cmp	r2, r3
 801c0c8:	d1eb      	bne.n	801c0a2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c0ca:	687b      	ldr	r3, [r7, #4]
 801c0cc:	681b      	ldr	r3, [r3, #0]
 801c0ce:	f003 0302 	and.w	r3, r3, #2
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d010      	beq.n	801c0f8 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801c0d6:	687b      	ldr	r3, [r7, #4]
 801c0d8:	68da      	ldr	r2, [r3, #12]
 801c0da:	4b14      	ldr	r3, [pc, #80]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c0dc:	699b      	ldr	r3, [r3, #24]
 801c0de:	f003 030f 	and.w	r3, r3, #15
 801c0e2:	429a      	cmp	r2, r3
 801c0e4:	d208      	bcs.n	801c0f8 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c0e6:	4b11      	ldr	r3, [pc, #68]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c0e8:	699b      	ldr	r3, [r3, #24]
 801c0ea:	f023 020f 	bic.w	r2, r3, #15
 801c0ee:	687b      	ldr	r3, [r7, #4]
 801c0f0:	68db      	ldr	r3, [r3, #12]
 801c0f2:	490e      	ldr	r1, [pc, #56]	@ (801c12c <HAL_RCC_ClockConfig+0x244>)
 801c0f4:	4313      	orrs	r3, r2
 801c0f6:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c0f8:	4b0b      	ldr	r3, [pc, #44]	@ (801c128 <HAL_RCC_ClockConfig+0x240>)
 801c0fa:	681b      	ldr	r3, [r3, #0]
 801c0fc:	f003 030f 	and.w	r3, r3, #15
 801c100:	683a      	ldr	r2, [r7, #0]
 801c102:	429a      	cmp	r2, r3
 801c104:	d214      	bcs.n	801c130 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c106:	4b08      	ldr	r3, [pc, #32]	@ (801c128 <HAL_RCC_ClockConfig+0x240>)
 801c108:	681b      	ldr	r3, [r3, #0]
 801c10a:	f023 020f 	bic.w	r2, r3, #15
 801c10e:	4906      	ldr	r1, [pc, #24]	@ (801c128 <HAL_RCC_ClockConfig+0x240>)
 801c110:	683b      	ldr	r3, [r7, #0]
 801c112:	4313      	orrs	r3, r2
 801c114:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c116:	4b04      	ldr	r3, [pc, #16]	@ (801c128 <HAL_RCC_ClockConfig+0x240>)
 801c118:	681b      	ldr	r3, [r3, #0]
 801c11a:	f003 030f 	and.w	r3, r3, #15
 801c11e:	683a      	ldr	r2, [r7, #0]
 801c120:	429a      	cmp	r2, r3
 801c122:	d005      	beq.n	801c130 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801c124:	2301      	movs	r3, #1
 801c126:	e086      	b.n	801c236 <HAL_RCC_ClockConfig+0x34e>
 801c128:	52002000 	.word	0x52002000
 801c12c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c130:	687b      	ldr	r3, [r7, #4]
 801c132:	681b      	ldr	r3, [r3, #0]
 801c134:	f003 0304 	and.w	r3, r3, #4
 801c138:	2b00      	cmp	r3, #0
 801c13a:	d010      	beq.n	801c15e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	691a      	ldr	r2, [r3, #16]
 801c140:	4b3f      	ldr	r3, [pc, #252]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c142:	699b      	ldr	r3, [r3, #24]
 801c144:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c148:	429a      	cmp	r2, r3
 801c14a:	d208      	bcs.n	801c15e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c14c:	4b3c      	ldr	r3, [pc, #240]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c14e:	699b      	ldr	r3, [r3, #24]
 801c150:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c154:	687b      	ldr	r3, [r7, #4]
 801c156:	691b      	ldr	r3, [r3, #16]
 801c158:	4939      	ldr	r1, [pc, #228]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c15a:	4313      	orrs	r3, r2
 801c15c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c15e:	687b      	ldr	r3, [r7, #4]
 801c160:	681b      	ldr	r3, [r3, #0]
 801c162:	f003 0308 	and.w	r3, r3, #8
 801c166:	2b00      	cmp	r3, #0
 801c168:	d010      	beq.n	801c18c <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c16a:	687b      	ldr	r3, [r7, #4]
 801c16c:	695a      	ldr	r2, [r3, #20]
 801c16e:	4b34      	ldr	r3, [pc, #208]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c170:	69db      	ldr	r3, [r3, #28]
 801c172:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c176:	429a      	cmp	r2, r3
 801c178:	d208      	bcs.n	801c18c <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801c17a:	4b31      	ldr	r3, [pc, #196]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c17c:	69db      	ldr	r3, [r3, #28]
 801c17e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c182:	687b      	ldr	r3, [r7, #4]
 801c184:	695b      	ldr	r3, [r3, #20]
 801c186:	492e      	ldr	r1, [pc, #184]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c188:	4313      	orrs	r3, r2
 801c18a:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c18c:	687b      	ldr	r3, [r7, #4]
 801c18e:	681b      	ldr	r3, [r3, #0]
 801c190:	f003 0310 	and.w	r3, r3, #16
 801c194:	2b00      	cmp	r3, #0
 801c196:	d010      	beq.n	801c1ba <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801c198:	687b      	ldr	r3, [r7, #4]
 801c19a:	699a      	ldr	r2, [r3, #24]
 801c19c:	4b28      	ldr	r3, [pc, #160]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c19e:	69db      	ldr	r3, [r3, #28]
 801c1a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c1a4:	429a      	cmp	r2, r3
 801c1a6:	d208      	bcs.n	801c1ba <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801c1a8:	4b25      	ldr	r3, [pc, #148]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c1aa:	69db      	ldr	r3, [r3, #28]
 801c1ac:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801c1b0:	687b      	ldr	r3, [r7, #4]
 801c1b2:	699b      	ldr	r3, [r3, #24]
 801c1b4:	4922      	ldr	r1, [pc, #136]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c1b6:	4313      	orrs	r3, r2
 801c1b8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801c1ba:	687b      	ldr	r3, [r7, #4]
 801c1bc:	681b      	ldr	r3, [r3, #0]
 801c1be:	f003 0320 	and.w	r3, r3, #32
 801c1c2:	2b00      	cmp	r3, #0
 801c1c4:	d010      	beq.n	801c1e8 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801c1c6:	687b      	ldr	r3, [r7, #4]
 801c1c8:	69da      	ldr	r2, [r3, #28]
 801c1ca:	4b1d      	ldr	r3, [pc, #116]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c1cc:	6a1b      	ldr	r3, [r3, #32]
 801c1ce:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c1d2:	429a      	cmp	r2, r3
 801c1d4:	d208      	bcs.n	801c1e8 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801c1d6:	4b1a      	ldr	r3, [pc, #104]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c1d8:	6a1b      	ldr	r3, [r3, #32]
 801c1da:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c1de:	687b      	ldr	r3, [r7, #4]
 801c1e0:	69db      	ldr	r3, [r3, #28]
 801c1e2:	4917      	ldr	r1, [pc, #92]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c1e4:	4313      	orrs	r3, r2
 801c1e6:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801c1e8:	f000 f834 	bl	801c254 <HAL_RCC_GetSysClockFreq>
 801c1ec:	4602      	mov	r2, r0
 801c1ee:	4b14      	ldr	r3, [pc, #80]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c1f0:	699b      	ldr	r3, [r3, #24]
 801c1f2:	0a1b      	lsrs	r3, r3, #8
 801c1f4:	f003 030f 	and.w	r3, r3, #15
 801c1f8:	4912      	ldr	r1, [pc, #72]	@ (801c244 <HAL_RCC_ClockConfig+0x35c>)
 801c1fa:	5ccb      	ldrb	r3, [r1, r3]
 801c1fc:	f003 031f 	and.w	r3, r3, #31
 801c200:	fa22 f303 	lsr.w	r3, r2, r3
 801c204:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c206:	4b0e      	ldr	r3, [pc, #56]	@ (801c240 <HAL_RCC_ClockConfig+0x358>)
 801c208:	699b      	ldr	r3, [r3, #24]
 801c20a:	f003 030f 	and.w	r3, r3, #15
 801c20e:	4a0d      	ldr	r2, [pc, #52]	@ (801c244 <HAL_RCC_ClockConfig+0x35c>)
 801c210:	5cd3      	ldrb	r3, [r2, r3]
 801c212:	f003 031f 	and.w	r3, r3, #31
 801c216:	693a      	ldr	r2, [r7, #16]
 801c218:	fa22 f303 	lsr.w	r3, r2, r3
 801c21c:	4a0a      	ldr	r2, [pc, #40]	@ (801c248 <HAL_RCC_ClockConfig+0x360>)
 801c21e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801c220:	4a0a      	ldr	r2, [pc, #40]	@ (801c24c <HAL_RCC_ClockConfig+0x364>)
 801c222:	693b      	ldr	r3, [r7, #16]
 801c224:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801c226:	4b0a      	ldr	r3, [pc, #40]	@ (801c250 <HAL_RCC_ClockConfig+0x368>)
 801c228:	681b      	ldr	r3, [r3, #0]
 801c22a:	4618      	mov	r0, r3
 801c22c:	f7fc ff12 	bl	8019054 <HAL_InitTick>
 801c230:	4603      	mov	r3, r0
 801c232:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801c234:	7bfb      	ldrb	r3, [r7, #15]
}
 801c236:	4618      	mov	r0, r3
 801c238:	3718      	adds	r7, #24
 801c23a:	46bd      	mov	sp, r7
 801c23c:	bd80      	pop	{r7, pc}
 801c23e:	bf00      	nop
 801c240:	58024400 	.word	0x58024400
 801c244:	08025bdc 	.word	0x08025bdc
 801c248:	20000004 	.word	0x20000004
 801c24c:	20000000 	.word	0x20000000
 801c250:	20000020 	.word	0x20000020

0801c254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c254:	b480      	push	{r7}
 801c256:	b089      	sub	sp, #36	@ 0x24
 801c258:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c25a:	4bb3      	ldr	r3, [pc, #716]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c25c:	691b      	ldr	r3, [r3, #16]
 801c25e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c262:	2b18      	cmp	r3, #24
 801c264:	f200 8155 	bhi.w	801c512 <HAL_RCC_GetSysClockFreq+0x2be>
 801c268:	a201      	add	r2, pc, #4	@ (adr r2, 801c270 <HAL_RCC_GetSysClockFreq+0x1c>)
 801c26a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c26e:	bf00      	nop
 801c270:	0801c2d5 	.word	0x0801c2d5
 801c274:	0801c513 	.word	0x0801c513
 801c278:	0801c513 	.word	0x0801c513
 801c27c:	0801c513 	.word	0x0801c513
 801c280:	0801c513 	.word	0x0801c513
 801c284:	0801c513 	.word	0x0801c513
 801c288:	0801c513 	.word	0x0801c513
 801c28c:	0801c513 	.word	0x0801c513
 801c290:	0801c2fb 	.word	0x0801c2fb
 801c294:	0801c513 	.word	0x0801c513
 801c298:	0801c513 	.word	0x0801c513
 801c29c:	0801c513 	.word	0x0801c513
 801c2a0:	0801c513 	.word	0x0801c513
 801c2a4:	0801c513 	.word	0x0801c513
 801c2a8:	0801c513 	.word	0x0801c513
 801c2ac:	0801c513 	.word	0x0801c513
 801c2b0:	0801c301 	.word	0x0801c301
 801c2b4:	0801c513 	.word	0x0801c513
 801c2b8:	0801c513 	.word	0x0801c513
 801c2bc:	0801c513 	.word	0x0801c513
 801c2c0:	0801c513 	.word	0x0801c513
 801c2c4:	0801c513 	.word	0x0801c513
 801c2c8:	0801c513 	.word	0x0801c513
 801c2cc:	0801c513 	.word	0x0801c513
 801c2d0:	0801c307 	.word	0x0801c307
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c2d4:	4b94      	ldr	r3, [pc, #592]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c2d6:	681b      	ldr	r3, [r3, #0]
 801c2d8:	f003 0320 	and.w	r3, r3, #32
 801c2dc:	2b00      	cmp	r3, #0
 801c2de:	d009      	beq.n	801c2f4 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c2e0:	4b91      	ldr	r3, [pc, #580]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c2e2:	681b      	ldr	r3, [r3, #0]
 801c2e4:	08db      	lsrs	r3, r3, #3
 801c2e6:	f003 0303 	and.w	r3, r3, #3
 801c2ea:	4a90      	ldr	r2, [pc, #576]	@ (801c52c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c2ec:	fa22 f303 	lsr.w	r3, r2, r3
 801c2f0:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801c2f2:	e111      	b.n	801c518 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801c2f4:	4b8d      	ldr	r3, [pc, #564]	@ (801c52c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c2f6:	61bb      	str	r3, [r7, #24]
      break;
 801c2f8:	e10e      	b.n	801c518 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801c2fa:	4b8d      	ldr	r3, [pc, #564]	@ (801c530 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801c2fc:	61bb      	str	r3, [r7, #24]
      break;
 801c2fe:	e10b      	b.n	801c518 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801c300:	4b8c      	ldr	r3, [pc, #560]	@ (801c534 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801c302:	61bb      	str	r3, [r7, #24]
      break;
 801c304:	e108      	b.n	801c518 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801c306:	4b88      	ldr	r3, [pc, #544]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c30a:	f003 0303 	and.w	r3, r3, #3
 801c30e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801c310:	4b85      	ldr	r3, [pc, #532]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c312:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c314:	091b      	lsrs	r3, r3, #4
 801c316:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801c31a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801c31c:	4b82      	ldr	r3, [pc, #520]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c31e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c320:	f003 0301 	and.w	r3, r3, #1
 801c324:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801c326:	4b80      	ldr	r3, [pc, #512]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c328:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c32a:	08db      	lsrs	r3, r3, #3
 801c32c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c330:	68fa      	ldr	r2, [r7, #12]
 801c332:	fb02 f303 	mul.w	r3, r2, r3
 801c336:	ee07 3a90 	vmov	s15, r3
 801c33a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c33e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801c342:	693b      	ldr	r3, [r7, #16]
 801c344:	2b00      	cmp	r3, #0
 801c346:	f000 80e1 	beq.w	801c50c <HAL_RCC_GetSysClockFreq+0x2b8>
 801c34a:	697b      	ldr	r3, [r7, #20]
 801c34c:	2b02      	cmp	r3, #2
 801c34e:	f000 8083 	beq.w	801c458 <HAL_RCC_GetSysClockFreq+0x204>
 801c352:	697b      	ldr	r3, [r7, #20]
 801c354:	2b02      	cmp	r3, #2
 801c356:	f200 80a1 	bhi.w	801c49c <HAL_RCC_GetSysClockFreq+0x248>
 801c35a:	697b      	ldr	r3, [r7, #20]
 801c35c:	2b00      	cmp	r3, #0
 801c35e:	d003      	beq.n	801c368 <HAL_RCC_GetSysClockFreq+0x114>
 801c360:	697b      	ldr	r3, [r7, #20]
 801c362:	2b01      	cmp	r3, #1
 801c364:	d056      	beq.n	801c414 <HAL_RCC_GetSysClockFreq+0x1c0>
 801c366:	e099      	b.n	801c49c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c368:	4b6f      	ldr	r3, [pc, #444]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c36a:	681b      	ldr	r3, [r3, #0]
 801c36c:	f003 0320 	and.w	r3, r3, #32
 801c370:	2b00      	cmp	r3, #0
 801c372:	d02d      	beq.n	801c3d0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c374:	4b6c      	ldr	r3, [pc, #432]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c376:	681b      	ldr	r3, [r3, #0]
 801c378:	08db      	lsrs	r3, r3, #3
 801c37a:	f003 0303 	and.w	r3, r3, #3
 801c37e:	4a6b      	ldr	r2, [pc, #428]	@ (801c52c <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c380:	fa22 f303 	lsr.w	r3, r2, r3
 801c384:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c386:	687b      	ldr	r3, [r7, #4]
 801c388:	ee07 3a90 	vmov	s15, r3
 801c38c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c390:	693b      	ldr	r3, [r7, #16]
 801c392:	ee07 3a90 	vmov	s15, r3
 801c396:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c39a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c39e:	4b62      	ldr	r3, [pc, #392]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c3a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c3a2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c3a6:	ee07 3a90 	vmov	s15, r3
 801c3aa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c3ae:	ed97 6a02 	vldr	s12, [r7, #8]
 801c3b2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801c538 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c3b6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c3ba:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c3be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c3c2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c3ca:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801c3ce:	e087      	b.n	801c4e0 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c3d0:	693b      	ldr	r3, [r7, #16]
 801c3d2:	ee07 3a90 	vmov	s15, r3
 801c3d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c3da:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801c53c <HAL_RCC_GetSysClockFreq+0x2e8>
 801c3de:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c3e2:	4b51      	ldr	r3, [pc, #324]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c3e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c3e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c3ea:	ee07 3a90 	vmov	s15, r3
 801c3ee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c3f2:	ed97 6a02 	vldr	s12, [r7, #8]
 801c3f6:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801c538 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c3fa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c3fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c402:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c406:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c40a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c40e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c412:	e065      	b.n	801c4e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c414:	693b      	ldr	r3, [r7, #16]
 801c416:	ee07 3a90 	vmov	s15, r3
 801c41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c41e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801c540 <HAL_RCC_GetSysClockFreq+0x2ec>
 801c422:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c426:	4b40      	ldr	r3, [pc, #256]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c42a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c42e:	ee07 3a90 	vmov	s15, r3
 801c432:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c436:	ed97 6a02 	vldr	s12, [r7, #8]
 801c43a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801c538 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c43e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c442:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c446:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c44a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c44e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c452:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c456:	e043      	b.n	801c4e0 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c458:	693b      	ldr	r3, [r7, #16]
 801c45a:	ee07 3a90 	vmov	s15, r3
 801c45e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c462:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801c544 <HAL_RCC_GetSysClockFreq+0x2f0>
 801c466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c46a:	4b2f      	ldr	r3, [pc, #188]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c46c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c46e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c472:	ee07 3a90 	vmov	s15, r3
 801c476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c47a:	ed97 6a02 	vldr	s12, [r7, #8]
 801c47e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801c538 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c48a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c48e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c492:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c496:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c49a:	e021      	b.n	801c4e0 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801c49c:	693b      	ldr	r3, [r7, #16]
 801c49e:	ee07 3a90 	vmov	s15, r3
 801c4a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801c4a6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801c540 <HAL_RCC_GetSysClockFreq+0x2ec>
 801c4aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801c4ae:	4b1e      	ldr	r3, [pc, #120]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c4b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c4b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c4b6:	ee07 3a90 	vmov	s15, r3
 801c4ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801c4be:	ed97 6a02 	vldr	s12, [r7, #8]
 801c4c2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801c538 <HAL_RCC_GetSysClockFreq+0x2e4>
 801c4c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801c4ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801c4ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801c4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801c4d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801c4da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801c4de:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801c4e0:	4b11      	ldr	r3, [pc, #68]	@ (801c528 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c4e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c4e4:	0a5b      	lsrs	r3, r3, #9
 801c4e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c4ea:	3301      	adds	r3, #1
 801c4ec:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801c4ee:	683b      	ldr	r3, [r7, #0]
 801c4f0:	ee07 3a90 	vmov	s15, r3
 801c4f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801c4f8:	edd7 6a07 	vldr	s13, [r7, #28]
 801c4fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801c500:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801c504:	ee17 3a90 	vmov	r3, s15
 801c508:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801c50a:	e005      	b.n	801c518 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801c50c:	2300      	movs	r3, #0
 801c50e:	61bb      	str	r3, [r7, #24]
      break;
 801c510:	e002      	b.n	801c518 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801c512:	4b07      	ldr	r3, [pc, #28]	@ (801c530 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801c514:	61bb      	str	r3, [r7, #24]
      break;
 801c516:	bf00      	nop
  }

  return sysclockfreq;
 801c518:	69bb      	ldr	r3, [r7, #24]
}
 801c51a:	4618      	mov	r0, r3
 801c51c:	3724      	adds	r7, #36	@ 0x24
 801c51e:	46bd      	mov	sp, r7
 801c520:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c524:	4770      	bx	lr
 801c526:	bf00      	nop
 801c528:	58024400 	.word	0x58024400
 801c52c:	03d09000 	.word	0x03d09000
 801c530:	003d0900 	.word	0x003d0900
 801c534:	017d7840 	.word	0x017d7840
 801c538:	46000000 	.word	0x46000000
 801c53c:	4c742400 	.word	0x4c742400
 801c540:	4a742400 	.word	0x4a742400
 801c544:	4bbebc20 	.word	0x4bbebc20

0801c548 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801c548:	b580      	push	{r7, lr}
 801c54a:	b082      	sub	sp, #8
 801c54c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801c54e:	f7ff fe81 	bl	801c254 <HAL_RCC_GetSysClockFreq>
 801c552:	4602      	mov	r2, r0
 801c554:	4b10      	ldr	r3, [pc, #64]	@ (801c598 <HAL_RCC_GetHCLKFreq+0x50>)
 801c556:	699b      	ldr	r3, [r3, #24]
 801c558:	0a1b      	lsrs	r3, r3, #8
 801c55a:	f003 030f 	and.w	r3, r3, #15
 801c55e:	490f      	ldr	r1, [pc, #60]	@ (801c59c <HAL_RCC_GetHCLKFreq+0x54>)
 801c560:	5ccb      	ldrb	r3, [r1, r3]
 801c562:	f003 031f 	and.w	r3, r3, #31
 801c566:	fa22 f303 	lsr.w	r3, r2, r3
 801c56a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c56c:	4b0a      	ldr	r3, [pc, #40]	@ (801c598 <HAL_RCC_GetHCLKFreq+0x50>)
 801c56e:	699b      	ldr	r3, [r3, #24]
 801c570:	f003 030f 	and.w	r3, r3, #15
 801c574:	4a09      	ldr	r2, [pc, #36]	@ (801c59c <HAL_RCC_GetHCLKFreq+0x54>)
 801c576:	5cd3      	ldrb	r3, [r2, r3]
 801c578:	f003 031f 	and.w	r3, r3, #31
 801c57c:	687a      	ldr	r2, [r7, #4]
 801c57e:	fa22 f303 	lsr.w	r3, r2, r3
 801c582:	4a07      	ldr	r2, [pc, #28]	@ (801c5a0 <HAL_RCC_GetHCLKFreq+0x58>)
 801c584:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801c586:	4a07      	ldr	r2, [pc, #28]	@ (801c5a4 <HAL_RCC_GetHCLKFreq+0x5c>)
 801c588:	687b      	ldr	r3, [r7, #4]
 801c58a:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801c58c:	4b04      	ldr	r3, [pc, #16]	@ (801c5a0 <HAL_RCC_GetHCLKFreq+0x58>)
 801c58e:	681b      	ldr	r3, [r3, #0]
}
 801c590:	4618      	mov	r0, r3
 801c592:	3708      	adds	r7, #8
 801c594:	46bd      	mov	sp, r7
 801c596:	bd80      	pop	{r7, pc}
 801c598:	58024400 	.word	0x58024400
 801c59c:	08025bdc 	.word	0x08025bdc
 801c5a0:	20000004 	.word	0x20000004
 801c5a4:	20000000 	.word	0x20000000

0801c5a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801c5a8:	b580      	push	{r7, lr}
 801c5aa:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801c5ac:	f7ff ffcc 	bl	801c548 <HAL_RCC_GetHCLKFreq>
 801c5b0:	4602      	mov	r2, r0
 801c5b2:	4b06      	ldr	r3, [pc, #24]	@ (801c5cc <HAL_RCC_GetPCLK1Freq+0x24>)
 801c5b4:	69db      	ldr	r3, [r3, #28]
 801c5b6:	091b      	lsrs	r3, r3, #4
 801c5b8:	f003 0307 	and.w	r3, r3, #7
 801c5bc:	4904      	ldr	r1, [pc, #16]	@ (801c5d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 801c5be:	5ccb      	ldrb	r3, [r1, r3]
 801c5c0:	f003 031f 	and.w	r3, r3, #31
 801c5c4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801c5c8:	4618      	mov	r0, r3
 801c5ca:	bd80      	pop	{r7, pc}
 801c5cc:	58024400 	.word	0x58024400
 801c5d0:	08025bdc 	.word	0x08025bdc

0801c5d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801c5d4:	b580      	push	{r7, lr}
 801c5d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801c5d8:	f7ff ffb6 	bl	801c548 <HAL_RCC_GetHCLKFreq>
 801c5dc:	4602      	mov	r2, r0
 801c5de:	4b06      	ldr	r3, [pc, #24]	@ (801c5f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 801c5e0:	69db      	ldr	r3, [r3, #28]
 801c5e2:	0a1b      	lsrs	r3, r3, #8
 801c5e4:	f003 0307 	and.w	r3, r3, #7
 801c5e8:	4904      	ldr	r1, [pc, #16]	@ (801c5fc <HAL_RCC_GetPCLK2Freq+0x28>)
 801c5ea:	5ccb      	ldrb	r3, [r1, r3]
 801c5ec:	f003 031f 	and.w	r3, r3, #31
 801c5f0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801c5f4:	4618      	mov	r0, r3
 801c5f6:	bd80      	pop	{r7, pc}
 801c5f8:	58024400 	.word	0x58024400
 801c5fc:	08025bdc 	.word	0x08025bdc

0801c600 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801c604:	b0ca      	sub	sp, #296	@ 0x128
 801c606:	af00      	add	r7, sp, #0
 801c608:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801c60c:	2300      	movs	r3, #0
 801c60e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801c612:	2300      	movs	r3, #0
 801c614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801c618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c620:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801c624:	2500      	movs	r5, #0
 801c626:	ea54 0305 	orrs.w	r3, r4, r5
 801c62a:	d049      	beq.n	801c6c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801c62c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c630:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c632:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801c636:	d02f      	beq.n	801c698 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801c638:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801c63c:	d828      	bhi.n	801c690 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801c63e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801c642:	d01a      	beq.n	801c67a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801c644:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801c648:	d822      	bhi.n	801c690 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801c64a:	2b00      	cmp	r3, #0
 801c64c:	d003      	beq.n	801c656 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801c64e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801c652:	d007      	beq.n	801c664 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801c654:	e01c      	b.n	801c690 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c656:	4bb8      	ldr	r3, [pc, #736]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c658:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c65a:	4ab7      	ldr	r2, [pc, #732]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c65c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c660:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801c662:	e01a      	b.n	801c69a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c664:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c668:	3308      	adds	r3, #8
 801c66a:	2102      	movs	r1, #2
 801c66c:	4618      	mov	r0, r3
 801c66e:	f001 fc8f 	bl	801df90 <RCCEx_PLL2_Config>
 801c672:	4603      	mov	r3, r0
 801c674:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801c678:	e00f      	b.n	801c69a <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c67a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c67e:	3328      	adds	r3, #40	@ 0x28
 801c680:	2102      	movs	r1, #2
 801c682:	4618      	mov	r0, r3
 801c684:	f001 fd36 	bl	801e0f4 <RCCEx_PLL3_Config>
 801c688:	4603      	mov	r3, r0
 801c68a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801c68e:	e004      	b.n	801c69a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c690:	2301      	movs	r3, #1
 801c692:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c696:	e000      	b.n	801c69a <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801c698:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c69a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c69e:	2b00      	cmp	r3, #0
 801c6a0:	d10a      	bne.n	801c6b8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801c6a2:	4ba5      	ldr	r3, [pc, #660]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c6a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c6a6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801c6aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c6ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801c6b0:	4aa1      	ldr	r2, [pc, #644]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c6b2:	430b      	orrs	r3, r1
 801c6b4:	6513      	str	r3, [r2, #80]	@ 0x50
 801c6b6:	e003      	b.n	801c6c0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c6b8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c6bc:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801c6c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c6c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c6c8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801c6cc:	f04f 0900 	mov.w	r9, #0
 801c6d0:	ea58 0309 	orrs.w	r3, r8, r9
 801c6d4:	d047      	beq.n	801c766 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801c6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c6da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c6dc:	2b04      	cmp	r3, #4
 801c6de:	d82a      	bhi.n	801c736 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801c6e0:	a201      	add	r2, pc, #4	@ (adr r2, 801c6e8 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801c6e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c6e6:	bf00      	nop
 801c6e8:	0801c6fd 	.word	0x0801c6fd
 801c6ec:	0801c70b 	.word	0x0801c70b
 801c6f0:	0801c721 	.word	0x0801c721
 801c6f4:	0801c73f 	.word	0x0801c73f
 801c6f8:	0801c73f 	.word	0x0801c73f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c6fc:	4b8e      	ldr	r3, [pc, #568]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c6fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c700:	4a8d      	ldr	r2, [pc, #564]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c702:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c706:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c708:	e01a      	b.n	801c740 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c70a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c70e:	3308      	adds	r3, #8
 801c710:	2100      	movs	r1, #0
 801c712:	4618      	mov	r0, r3
 801c714:	f001 fc3c 	bl	801df90 <RCCEx_PLL2_Config>
 801c718:	4603      	mov	r3, r0
 801c71a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c71e:	e00f      	b.n	801c740 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c720:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c724:	3328      	adds	r3, #40	@ 0x28
 801c726:	2100      	movs	r1, #0
 801c728:	4618      	mov	r0, r3
 801c72a:	f001 fce3 	bl	801e0f4 <RCCEx_PLL3_Config>
 801c72e:	4603      	mov	r3, r0
 801c730:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c734:	e004      	b.n	801c740 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c736:	2301      	movs	r3, #1
 801c738:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c73c:	e000      	b.n	801c740 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801c73e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c744:	2b00      	cmp	r3, #0
 801c746:	d10a      	bne.n	801c75e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801c748:	4b7b      	ldr	r3, [pc, #492]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c74a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c74c:	f023 0107 	bic.w	r1, r3, #7
 801c750:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c754:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c756:	4a78      	ldr	r2, [pc, #480]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c758:	430b      	orrs	r3, r1
 801c75a:	6513      	str	r3, [r2, #80]	@ 0x50
 801c75c:	e003      	b.n	801c766 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c75e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c762:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801c766:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c76a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c76e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801c772:	f04f 0b00 	mov.w	fp, #0
 801c776:	ea5a 030b 	orrs.w	r3, sl, fp
 801c77a:	d04c      	beq.n	801c816 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801c77c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c780:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c786:	d030      	beq.n	801c7ea <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801c788:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c78c:	d829      	bhi.n	801c7e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801c78e:	2bc0      	cmp	r3, #192	@ 0xc0
 801c790:	d02d      	beq.n	801c7ee <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801c792:	2bc0      	cmp	r3, #192	@ 0xc0
 801c794:	d825      	bhi.n	801c7e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801c796:	2b80      	cmp	r3, #128	@ 0x80
 801c798:	d018      	beq.n	801c7cc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801c79a:	2b80      	cmp	r3, #128	@ 0x80
 801c79c:	d821      	bhi.n	801c7e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801c79e:	2b00      	cmp	r3, #0
 801c7a0:	d002      	beq.n	801c7a8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801c7a2:	2b40      	cmp	r3, #64	@ 0x40
 801c7a4:	d007      	beq.n	801c7b6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801c7a6:	e01c      	b.n	801c7e2 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c7a8:	4b63      	ldr	r3, [pc, #396]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c7aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c7ac:	4a62      	ldr	r2, [pc, #392]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c7ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c7b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801c7b4:	e01c      	b.n	801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c7b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c7ba:	3308      	adds	r3, #8
 801c7bc:	2100      	movs	r1, #0
 801c7be:	4618      	mov	r0, r3
 801c7c0:	f001 fbe6 	bl	801df90 <RCCEx_PLL2_Config>
 801c7c4:	4603      	mov	r3, r0
 801c7c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801c7ca:	e011      	b.n	801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c7cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c7d0:	3328      	adds	r3, #40	@ 0x28
 801c7d2:	2100      	movs	r1, #0
 801c7d4:	4618      	mov	r0, r3
 801c7d6:	f001 fc8d 	bl	801e0f4 <RCCEx_PLL3_Config>
 801c7da:	4603      	mov	r3, r0
 801c7dc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801c7e0:	e006      	b.n	801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c7e2:	2301      	movs	r3, #1
 801c7e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c7e8:	e002      	b.n	801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801c7ea:	bf00      	nop
 801c7ec:	e000      	b.n	801c7f0 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801c7ee:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c7f0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c7f4:	2b00      	cmp	r3, #0
 801c7f6:	d10a      	bne.n	801c80e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801c7f8:	4b4f      	ldr	r3, [pc, #316]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c7fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c7fc:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801c800:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c804:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c806:	4a4c      	ldr	r2, [pc, #304]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c808:	430b      	orrs	r3, r1
 801c80a:	6513      	str	r3, [r2, #80]	@ 0x50
 801c80c:	e003      	b.n	801c816 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c80e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c812:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801c816:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c81a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c81e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801c822:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801c826:	2300      	movs	r3, #0
 801c828:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801c82c:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801c830:	460b      	mov	r3, r1
 801c832:	4313      	orrs	r3, r2
 801c834:	d053      	beq.n	801c8de <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801c836:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c83a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801c83e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801c842:	d035      	beq.n	801c8b0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801c844:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801c848:	d82e      	bhi.n	801c8a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801c84a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801c84e:	d031      	beq.n	801c8b4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801c850:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801c854:	d828      	bhi.n	801c8a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801c856:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801c85a:	d01a      	beq.n	801c892 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801c85c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801c860:	d822      	bhi.n	801c8a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801c862:	2b00      	cmp	r3, #0
 801c864:	d003      	beq.n	801c86e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801c866:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801c86a:	d007      	beq.n	801c87c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801c86c:	e01c      	b.n	801c8a8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c86e:	4b32      	ldr	r3, [pc, #200]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c872:	4a31      	ldr	r2, [pc, #196]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c878:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c87a:	e01c      	b.n	801c8b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c87c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c880:	3308      	adds	r3, #8
 801c882:	2100      	movs	r1, #0
 801c884:	4618      	mov	r0, r3
 801c886:	f001 fb83 	bl	801df90 <RCCEx_PLL2_Config>
 801c88a:	4603      	mov	r3, r0
 801c88c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801c890:	e011      	b.n	801c8b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c896:	3328      	adds	r3, #40	@ 0x28
 801c898:	2100      	movs	r1, #0
 801c89a:	4618      	mov	r0, r3
 801c89c:	f001 fc2a 	bl	801e0f4 <RCCEx_PLL3_Config>
 801c8a0:	4603      	mov	r3, r0
 801c8a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c8a6:	e006      	b.n	801c8b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801c8a8:	2301      	movs	r3, #1
 801c8aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c8ae:	e002      	b.n	801c8b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801c8b0:	bf00      	nop
 801c8b2:	e000      	b.n	801c8b6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801c8b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c8b6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c8ba:	2b00      	cmp	r3, #0
 801c8bc:	d10b      	bne.n	801c8d6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801c8be:	4b1e      	ldr	r3, [pc, #120]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c8c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c8c2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801c8c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c8ca:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801c8ce:	4a1a      	ldr	r2, [pc, #104]	@ (801c938 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801c8d0:	430b      	orrs	r3, r1
 801c8d2:	6593      	str	r3, [r2, #88]	@ 0x58
 801c8d4:	e003      	b.n	801c8de <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c8d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c8da:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801c8de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c8e6:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801c8ea:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801c8ee:	2300      	movs	r3, #0
 801c8f0:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801c8f4:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801c8f8:	460b      	mov	r3, r1
 801c8fa:	4313      	orrs	r3, r2
 801c8fc:	d056      	beq.n	801c9ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801c8fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c902:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801c906:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801c90a:	d038      	beq.n	801c97e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801c90c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801c910:	d831      	bhi.n	801c976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801c912:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801c916:	d034      	beq.n	801c982 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801c918:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801c91c:	d82b      	bhi.n	801c976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801c91e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801c922:	d01d      	beq.n	801c960 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801c924:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801c928:	d825      	bhi.n	801c976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801c92a:	2b00      	cmp	r3, #0
 801c92c:	d006      	beq.n	801c93c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801c92e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801c932:	d00a      	beq.n	801c94a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801c934:	e01f      	b.n	801c976 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801c936:	bf00      	nop
 801c938:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c93c:	4ba2      	ldr	r3, [pc, #648]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c940:	4aa1      	ldr	r2, [pc, #644]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c942:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c946:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c948:	e01c      	b.n	801c984 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c94a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c94e:	3308      	adds	r3, #8
 801c950:	2100      	movs	r1, #0
 801c952:	4618      	mov	r0, r3
 801c954:	f001 fb1c 	bl	801df90 <RCCEx_PLL2_Config>
 801c958:	4603      	mov	r3, r0
 801c95a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801c95e:	e011      	b.n	801c984 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c960:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c964:	3328      	adds	r3, #40	@ 0x28
 801c966:	2100      	movs	r1, #0
 801c968:	4618      	mov	r0, r3
 801c96a:	f001 fbc3 	bl	801e0f4 <RCCEx_PLL3_Config>
 801c96e:	4603      	mov	r3, r0
 801c970:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801c974:	e006      	b.n	801c984 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801c976:	2301      	movs	r3, #1
 801c978:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801c97c:	e002      	b.n	801c984 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801c97e:	bf00      	nop
 801c980:	e000      	b.n	801c984 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801c982:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c984:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c988:	2b00      	cmp	r3, #0
 801c98a:	d10b      	bne.n	801c9a4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801c98c:	4b8e      	ldr	r3, [pc, #568]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c98e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c990:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801c994:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c998:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801c99c:	4a8a      	ldr	r2, [pc, #552]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c99e:	430b      	orrs	r3, r1
 801c9a0:	6593      	str	r3, [r2, #88]	@ 0x58
 801c9a2:	e003      	b.n	801c9ac <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c9a4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801c9a8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801c9ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c9b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c9b4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801c9b8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801c9bc:	2300      	movs	r3, #0
 801c9be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801c9c2:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801c9c6:	460b      	mov	r3, r1
 801c9c8:	4313      	orrs	r3, r2
 801c9ca:	d03a      	beq.n	801ca42 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801c9cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c9d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c9d2:	2b30      	cmp	r3, #48	@ 0x30
 801c9d4:	d01f      	beq.n	801ca16 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801c9d6:	2b30      	cmp	r3, #48	@ 0x30
 801c9d8:	d819      	bhi.n	801ca0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801c9da:	2b20      	cmp	r3, #32
 801c9dc:	d00c      	beq.n	801c9f8 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801c9de:	2b20      	cmp	r3, #32
 801c9e0:	d815      	bhi.n	801ca0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801c9e2:	2b00      	cmp	r3, #0
 801c9e4:	d019      	beq.n	801ca1a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801c9e6:	2b10      	cmp	r3, #16
 801c9e8:	d111      	bne.n	801ca0e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c9ea:	4b77      	ldr	r3, [pc, #476]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c9ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c9ee:	4a76      	ldr	r2, [pc, #472]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801c9f0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c9f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801c9f6:	e011      	b.n	801ca1c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c9f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801c9fc:	3308      	adds	r3, #8
 801c9fe:	2102      	movs	r1, #2
 801ca00:	4618      	mov	r0, r3
 801ca02:	f001 fac5 	bl	801df90 <RCCEx_PLL2_Config>
 801ca06:	4603      	mov	r3, r0
 801ca08:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801ca0c:	e006      	b.n	801ca1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801ca0e:	2301      	movs	r3, #1
 801ca10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ca14:	e002      	b.n	801ca1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801ca16:	bf00      	nop
 801ca18:	e000      	b.n	801ca1c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801ca1a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ca1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ca20:	2b00      	cmp	r3, #0
 801ca22:	d10a      	bne.n	801ca3a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801ca24:	4b68      	ldr	r3, [pc, #416]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ca26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ca28:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801ca2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ca32:	4a65      	ldr	r2, [pc, #404]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ca34:	430b      	orrs	r3, r1
 801ca36:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801ca38:	e003      	b.n	801ca42 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ca3a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ca3e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801ca42:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ca4a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801ca4e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801ca52:	2300      	movs	r3, #0
 801ca54:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801ca58:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801ca5c:	460b      	mov	r3, r1
 801ca5e:	4313      	orrs	r3, r2
 801ca60:	d051      	beq.n	801cb06 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801ca62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ca66:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ca68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ca6c:	d035      	beq.n	801cada <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801ca6e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ca72:	d82e      	bhi.n	801cad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801ca74:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ca78:	d031      	beq.n	801cade <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801ca7a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ca7e:	d828      	bhi.n	801cad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801ca80:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ca84:	d01a      	beq.n	801cabc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801ca86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ca8a:	d822      	bhi.n	801cad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801ca8c:	2b00      	cmp	r3, #0
 801ca8e:	d003      	beq.n	801ca98 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801ca90:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ca94:	d007      	beq.n	801caa6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801ca96:	e01c      	b.n	801cad2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ca98:	4b4b      	ldr	r3, [pc, #300]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ca9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca9c:	4a4a      	ldr	r2, [pc, #296]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801ca9e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801caa2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801caa4:	e01c      	b.n	801cae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801caa6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801caaa:	3308      	adds	r3, #8
 801caac:	2100      	movs	r1, #0
 801caae:	4618      	mov	r0, r3
 801cab0:	f001 fa6e 	bl	801df90 <RCCEx_PLL2_Config>
 801cab4:	4603      	mov	r3, r0
 801cab6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801caba:	e011      	b.n	801cae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cabc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cac0:	3328      	adds	r3, #40	@ 0x28
 801cac2:	2100      	movs	r1, #0
 801cac4:	4618      	mov	r0, r3
 801cac6:	f001 fb15 	bl	801e0f4 <RCCEx_PLL3_Config>
 801caca:	4603      	mov	r3, r0
 801cacc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801cad0:	e006      	b.n	801cae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cad2:	2301      	movs	r3, #1
 801cad4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cad8:	e002      	b.n	801cae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801cada:	bf00      	nop
 801cadc:	e000      	b.n	801cae0 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801cade:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cae0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cae4:	2b00      	cmp	r3, #0
 801cae6:	d10a      	bne.n	801cafe <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801cae8:	4b37      	ldr	r3, [pc, #220]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801caea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801caec:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801caf0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801caf4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801caf6:	4a34      	ldr	r2, [pc, #208]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801caf8:	430b      	orrs	r3, r1
 801cafa:	6513      	str	r3, [r2, #80]	@ 0x50
 801cafc:	e003      	b.n	801cb06 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cafe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cb02:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801cb06:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cb0e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801cb12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801cb16:	2300      	movs	r3, #0
 801cb18:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801cb1c:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801cb20:	460b      	mov	r3, r1
 801cb22:	4313      	orrs	r3, r2
 801cb24:	d056      	beq.n	801cbd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801cb26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb2a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801cb2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801cb30:	d033      	beq.n	801cb9a <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801cb32:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801cb36:	d82c      	bhi.n	801cb92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801cb38:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801cb3c:	d02f      	beq.n	801cb9e <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801cb3e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801cb42:	d826      	bhi.n	801cb92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801cb44:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801cb48:	d02b      	beq.n	801cba2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801cb4a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801cb4e:	d820      	bhi.n	801cb92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801cb50:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cb54:	d012      	beq.n	801cb7c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801cb56:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cb5a:	d81a      	bhi.n	801cb92 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801cb5c:	2b00      	cmp	r3, #0
 801cb5e:	d022      	beq.n	801cba6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801cb60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cb64:	d115      	bne.n	801cb92 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cb66:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb6a:	3308      	adds	r3, #8
 801cb6c:	2101      	movs	r1, #1
 801cb6e:	4618      	mov	r0, r3
 801cb70:	f001 fa0e 	bl	801df90 <RCCEx_PLL2_Config>
 801cb74:	4603      	mov	r3, r0
 801cb76:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801cb7a:	e015      	b.n	801cba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cb7c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cb80:	3328      	adds	r3, #40	@ 0x28
 801cb82:	2101      	movs	r1, #1
 801cb84:	4618      	mov	r0, r3
 801cb86:	f001 fab5 	bl	801e0f4 <RCCEx_PLL3_Config>
 801cb8a:	4603      	mov	r3, r0
 801cb8c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801cb90:	e00a      	b.n	801cba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cb92:	2301      	movs	r3, #1
 801cb94:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cb98:	e006      	b.n	801cba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801cb9a:	bf00      	nop
 801cb9c:	e004      	b.n	801cba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801cb9e:	bf00      	nop
 801cba0:	e002      	b.n	801cba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801cba2:	bf00      	nop
 801cba4:	e000      	b.n	801cba8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801cba6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cba8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cbac:	2b00      	cmp	r3, #0
 801cbae:	d10d      	bne.n	801cbcc <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801cbb0:	4b05      	ldr	r3, [pc, #20]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cbb2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cbb4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801cbb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801cbbe:	4a02      	ldr	r2, [pc, #8]	@ (801cbc8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801cbc0:	430b      	orrs	r3, r1
 801cbc2:	6513      	str	r3, [r2, #80]	@ 0x50
 801cbc4:	e006      	b.n	801cbd4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801cbc6:	bf00      	nop
 801cbc8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cbcc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cbd0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801cbd4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cbdc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801cbe0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801cbe4:	2300      	movs	r3, #0
 801cbe6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801cbea:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801cbee:	460b      	mov	r3, r1
 801cbf0:	4313      	orrs	r3, r2
 801cbf2:	d055      	beq.n	801cca0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801cbf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cbf8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801cbfc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801cc00:	d033      	beq.n	801cc6a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801cc02:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801cc06:	d82c      	bhi.n	801cc62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801cc08:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cc0c:	d02f      	beq.n	801cc6e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801cc0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801cc12:	d826      	bhi.n	801cc62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801cc14:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801cc18:	d02b      	beq.n	801cc72 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801cc1a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801cc1e:	d820      	bhi.n	801cc62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801cc20:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cc24:	d012      	beq.n	801cc4c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801cc26:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cc2a:	d81a      	bhi.n	801cc62 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	d022      	beq.n	801cc76 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801cc30:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cc34:	d115      	bne.n	801cc62 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cc36:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc3a:	3308      	adds	r3, #8
 801cc3c:	2101      	movs	r1, #1
 801cc3e:	4618      	mov	r0, r3
 801cc40:	f001 f9a6 	bl	801df90 <RCCEx_PLL2_Config>
 801cc44:	4603      	mov	r3, r0
 801cc46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801cc4a:	e015      	b.n	801cc78 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801cc4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc50:	3328      	adds	r3, #40	@ 0x28
 801cc52:	2101      	movs	r1, #1
 801cc54:	4618      	mov	r0, r3
 801cc56:	f001 fa4d 	bl	801e0f4 <RCCEx_PLL3_Config>
 801cc5a:	4603      	mov	r3, r0
 801cc5c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801cc60:	e00a      	b.n	801cc78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801cc62:	2301      	movs	r3, #1
 801cc64:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cc68:	e006      	b.n	801cc78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801cc6a:	bf00      	nop
 801cc6c:	e004      	b.n	801cc78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801cc6e:	bf00      	nop
 801cc70:	e002      	b.n	801cc78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801cc72:	bf00      	nop
 801cc74:	e000      	b.n	801cc78 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801cc76:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cc78:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cc7c:	2b00      	cmp	r3, #0
 801cc7e:	d10b      	bne.n	801cc98 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801cc80:	4ba3      	ldr	r3, [pc, #652]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cc82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cc84:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801cc88:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cc8c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801cc90:	4a9f      	ldr	r2, [pc, #636]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cc92:	430b      	orrs	r3, r1
 801cc94:	6593      	str	r3, [r2, #88]	@ 0x58
 801cc96:	e003      	b.n	801cca0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cc98:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cc9c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801cca0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cca8:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801ccac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801ccb0:	2300      	movs	r3, #0
 801ccb2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801ccb6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801ccba:	460b      	mov	r3, r1
 801ccbc:	4313      	orrs	r3, r2
 801ccbe:	d037      	beq.n	801cd30 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801ccc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ccc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ccc6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ccca:	d00e      	beq.n	801ccea <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801cccc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ccd0:	d816      	bhi.n	801cd00 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801ccd2:	2b00      	cmp	r3, #0
 801ccd4:	d018      	beq.n	801cd08 <HAL_RCCEx_PeriphCLKConfig+0x708>
 801ccd6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ccda:	d111      	bne.n	801cd00 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ccdc:	4b8c      	ldr	r3, [pc, #560]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ccde:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cce0:	4a8b      	ldr	r2, [pc, #556]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cce2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cce6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801cce8:	e00f      	b.n	801cd0a <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801ccea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ccee:	3308      	adds	r3, #8
 801ccf0:	2101      	movs	r1, #1
 801ccf2:	4618      	mov	r0, r3
 801ccf4:	f001 f94c 	bl	801df90 <RCCEx_PLL2_Config>
 801ccf8:	4603      	mov	r3, r0
 801ccfa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801ccfe:	e004      	b.n	801cd0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cd00:	2301      	movs	r3, #1
 801cd02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cd06:	e000      	b.n	801cd0a <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801cd08:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cd0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cd0e:	2b00      	cmp	r3, #0
 801cd10:	d10a      	bne.n	801cd28 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801cd12:	4b7f      	ldr	r3, [pc, #508]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cd14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cd16:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801cd1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cd20:	4a7b      	ldr	r2, [pc, #492]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cd22:	430b      	orrs	r3, r1
 801cd24:	6513      	str	r3, [r2, #80]	@ 0x50
 801cd26:	e003      	b.n	801cd30 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cd28:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cd2c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801cd30:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd38:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801cd3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801cd40:	2300      	movs	r3, #0
 801cd42:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801cd46:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801cd4a:	460b      	mov	r3, r1
 801cd4c:	4313      	orrs	r3, r2
 801cd4e:	d039      	beq.n	801cdc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801cd50:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd54:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cd56:	2b03      	cmp	r3, #3
 801cd58:	d81c      	bhi.n	801cd94 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801cd5a:	a201      	add	r2, pc, #4	@ (adr r2, 801cd60 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801cd5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cd60:	0801cd9d 	.word	0x0801cd9d
 801cd64:	0801cd71 	.word	0x0801cd71
 801cd68:	0801cd7f 	.word	0x0801cd7f
 801cd6c:	0801cd9d 	.word	0x0801cd9d
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cd70:	4b67      	ldr	r3, [pc, #412]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cd72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd74:	4a66      	ldr	r2, [pc, #408]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cd76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cd7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801cd7c:	e00f      	b.n	801cd9e <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cd7e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd82:	3308      	adds	r3, #8
 801cd84:	2102      	movs	r1, #2
 801cd86:	4618      	mov	r0, r3
 801cd88:	f001 f902 	bl	801df90 <RCCEx_PLL2_Config>
 801cd8c:	4603      	mov	r3, r0
 801cd8e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801cd92:	e004      	b.n	801cd9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801cd94:	2301      	movs	r3, #1
 801cd96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cd9a:	e000      	b.n	801cd9e <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801cd9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cd9e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cda2:	2b00      	cmp	r3, #0
 801cda4:	d10a      	bne.n	801cdbc <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801cda6:	4b5a      	ldr	r3, [pc, #360]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cda8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cdaa:	f023 0103 	bic.w	r1, r3, #3
 801cdae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cdb2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801cdb4:	4a56      	ldr	r2, [pc, #344]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cdb6:	430b      	orrs	r3, r1
 801cdb8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801cdba:	e003      	b.n	801cdc4 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cdbc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cdc0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801cdc4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cdc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdcc:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801cdd0:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801cdd4:	2300      	movs	r3, #0
 801cdd6:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801cdda:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801cdde:	460b      	mov	r3, r1
 801cde0:	4313      	orrs	r3, r2
 801cde2:	f000 809f 	beq.w	801cf24 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801cde6:	4b4b      	ldr	r3, [pc, #300]	@ (801cf14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801cde8:	681b      	ldr	r3, [r3, #0]
 801cdea:	4a4a      	ldr	r2, [pc, #296]	@ (801cf14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801cdec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801cdf0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801cdf2:	f7fc f979 	bl	80190e8 <HAL_GetTick>
 801cdf6:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801cdfa:	e00b      	b.n	801ce14 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801cdfc:	f7fc f974 	bl	80190e8 <HAL_GetTick>
 801ce00:	4602      	mov	r2, r0
 801ce02:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801ce06:	1ad3      	subs	r3, r2, r3
 801ce08:	2b64      	cmp	r3, #100	@ 0x64
 801ce0a:	d903      	bls.n	801ce14 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801ce0c:	2303      	movs	r3, #3
 801ce0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ce12:	e005      	b.n	801ce20 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801ce14:	4b3f      	ldr	r3, [pc, #252]	@ (801cf14 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801ce16:	681b      	ldr	r3, [r3, #0]
 801ce18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ce1c:	2b00      	cmp	r3, #0
 801ce1e:	d0ed      	beq.n	801cdfc <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801ce20:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ce24:	2b00      	cmp	r3, #0
 801ce26:	d179      	bne.n	801cf1c <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801ce28:	4b39      	ldr	r3, [pc, #228]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce2a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801ce2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce30:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ce34:	4053      	eors	r3, r2
 801ce36:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801ce3a:	2b00      	cmp	r3, #0
 801ce3c:	d015      	beq.n	801ce6a <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801ce3e:	4b34      	ldr	r3, [pc, #208]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ce42:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801ce46:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801ce4a:	4b31      	ldr	r3, [pc, #196]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce4c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ce4e:	4a30      	ldr	r2, [pc, #192]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce50:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801ce54:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801ce56:	4b2e      	ldr	r3, [pc, #184]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ce5a:	4a2d      	ldr	r2, [pc, #180]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce5c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801ce60:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801ce62:	4a2b      	ldr	r2, [pc, #172]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801ce64:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801ce68:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801ce6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce6e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ce72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ce76:	d118      	bne.n	801ceaa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ce78:	f7fc f936 	bl	80190e8 <HAL_GetTick>
 801ce7c:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ce80:	e00d      	b.n	801ce9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ce82:	f7fc f931 	bl	80190e8 <HAL_GetTick>
 801ce86:	4602      	mov	r2, r0
 801ce88:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801ce8c:	1ad2      	subs	r2, r2, r3
 801ce8e:	f241 3388 	movw	r3, #5000	@ 0x1388
 801ce92:	429a      	cmp	r2, r3
 801ce94:	d903      	bls.n	801ce9e <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801ce96:	2303      	movs	r3, #3
 801ce98:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801ce9c:	e005      	b.n	801ceaa <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ce9e:	4b1c      	ldr	r3, [pc, #112]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cea0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801cea2:	f003 0302 	and.w	r3, r3, #2
 801cea6:	2b00      	cmp	r3, #0
 801cea8:	d0eb      	beq.n	801ce82 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801ceaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ceae:	2b00      	cmp	r3, #0
 801ceb0:	d129      	bne.n	801cf06 <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801ceb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ceb6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ceba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801cebe:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801cec2:	d10e      	bne.n	801cee2 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801cec4:	4b12      	ldr	r3, [pc, #72]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cec6:	691b      	ldr	r3, [r3, #16]
 801cec8:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801cecc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ced0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801ced4:	091a      	lsrs	r2, r3, #4
 801ced6:	4b10      	ldr	r3, [pc, #64]	@ (801cf18 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801ced8:	4013      	ands	r3, r2
 801ceda:	4a0d      	ldr	r2, [pc, #52]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cedc:	430b      	orrs	r3, r1
 801cede:	6113      	str	r3, [r2, #16]
 801cee0:	e005      	b.n	801ceee <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801cee2:	4b0b      	ldr	r3, [pc, #44]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cee4:	691b      	ldr	r3, [r3, #16]
 801cee6:	4a0a      	ldr	r2, [pc, #40]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cee8:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801ceec:	6113      	str	r3, [r2, #16]
 801ceee:	4b08      	ldr	r3, [pc, #32]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cef0:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801cef2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cef6:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801cefa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801cefe:	4a04      	ldr	r2, [pc, #16]	@ (801cf10 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801cf00:	430b      	orrs	r3, r1
 801cf02:	6713      	str	r3, [r2, #112]	@ 0x70
 801cf04:	e00e      	b.n	801cf24 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801cf06:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cf0a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801cf0e:	e009      	b.n	801cf24 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801cf10:	58024400 	.word	0x58024400
 801cf14:	58024800 	.word	0x58024800
 801cf18:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cf1c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cf20:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801cf24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf28:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf2c:	f002 0301 	and.w	r3, r2, #1
 801cf30:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801cf34:	2300      	movs	r3, #0
 801cf36:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801cf3a:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801cf3e:	460b      	mov	r3, r1
 801cf40:	4313      	orrs	r3, r2
 801cf42:	f000 8089 	beq.w	801d058 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801cf46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf4a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801cf4c:	2b28      	cmp	r3, #40	@ 0x28
 801cf4e:	d86b      	bhi.n	801d028 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801cf50:	a201      	add	r2, pc, #4	@ (adr r2, 801cf58 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801cf52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cf56:	bf00      	nop
 801cf58:	0801d031 	.word	0x0801d031
 801cf5c:	0801d029 	.word	0x0801d029
 801cf60:	0801d029 	.word	0x0801d029
 801cf64:	0801d029 	.word	0x0801d029
 801cf68:	0801d029 	.word	0x0801d029
 801cf6c:	0801d029 	.word	0x0801d029
 801cf70:	0801d029 	.word	0x0801d029
 801cf74:	0801d029 	.word	0x0801d029
 801cf78:	0801cffd 	.word	0x0801cffd
 801cf7c:	0801d029 	.word	0x0801d029
 801cf80:	0801d029 	.word	0x0801d029
 801cf84:	0801d029 	.word	0x0801d029
 801cf88:	0801d029 	.word	0x0801d029
 801cf8c:	0801d029 	.word	0x0801d029
 801cf90:	0801d029 	.word	0x0801d029
 801cf94:	0801d029 	.word	0x0801d029
 801cf98:	0801d013 	.word	0x0801d013
 801cf9c:	0801d029 	.word	0x0801d029
 801cfa0:	0801d029 	.word	0x0801d029
 801cfa4:	0801d029 	.word	0x0801d029
 801cfa8:	0801d029 	.word	0x0801d029
 801cfac:	0801d029 	.word	0x0801d029
 801cfb0:	0801d029 	.word	0x0801d029
 801cfb4:	0801d029 	.word	0x0801d029
 801cfb8:	0801d031 	.word	0x0801d031
 801cfbc:	0801d029 	.word	0x0801d029
 801cfc0:	0801d029 	.word	0x0801d029
 801cfc4:	0801d029 	.word	0x0801d029
 801cfc8:	0801d029 	.word	0x0801d029
 801cfcc:	0801d029 	.word	0x0801d029
 801cfd0:	0801d029 	.word	0x0801d029
 801cfd4:	0801d029 	.word	0x0801d029
 801cfd8:	0801d031 	.word	0x0801d031
 801cfdc:	0801d029 	.word	0x0801d029
 801cfe0:	0801d029 	.word	0x0801d029
 801cfe4:	0801d029 	.word	0x0801d029
 801cfe8:	0801d029 	.word	0x0801d029
 801cfec:	0801d029 	.word	0x0801d029
 801cff0:	0801d029 	.word	0x0801d029
 801cff4:	0801d029 	.word	0x0801d029
 801cff8:	0801d031 	.word	0x0801d031
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801cffc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d000:	3308      	adds	r3, #8
 801d002:	2101      	movs	r1, #1
 801d004:	4618      	mov	r0, r3
 801d006:	f000 ffc3 	bl	801df90 <RCCEx_PLL2_Config>
 801d00a:	4603      	mov	r3, r0
 801d00c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801d010:	e00f      	b.n	801d032 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d012:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d016:	3328      	adds	r3, #40	@ 0x28
 801d018:	2101      	movs	r1, #1
 801d01a:	4618      	mov	r0, r3
 801d01c:	f001 f86a 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d020:	4603      	mov	r3, r0
 801d022:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801d026:	e004      	b.n	801d032 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d028:	2301      	movs	r3, #1
 801d02a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d02e:	e000      	b.n	801d032 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801d030:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d032:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d036:	2b00      	cmp	r3, #0
 801d038:	d10a      	bne.n	801d050 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801d03a:	4bbf      	ldr	r3, [pc, #764]	@ (801d338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d03c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d03e:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801d042:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d046:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d048:	4abb      	ldr	r2, [pc, #748]	@ (801d338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d04a:	430b      	orrs	r3, r1
 801d04c:	6553      	str	r3, [r2, #84]	@ 0x54
 801d04e:	e003      	b.n	801d058 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d050:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d054:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801d058:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d060:	f002 0302 	and.w	r3, r2, #2
 801d064:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801d068:	2300      	movs	r3, #0
 801d06a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801d06e:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801d072:	460b      	mov	r3, r1
 801d074:	4313      	orrs	r3, r2
 801d076:	d041      	beq.n	801d0fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801d078:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d07c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d07e:	2b05      	cmp	r3, #5
 801d080:	d824      	bhi.n	801d0cc <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801d082:	a201      	add	r2, pc, #4	@ (adr r2, 801d088 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801d084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d088:	0801d0d5 	.word	0x0801d0d5
 801d08c:	0801d0a1 	.word	0x0801d0a1
 801d090:	0801d0b7 	.word	0x0801d0b7
 801d094:	0801d0d5 	.word	0x0801d0d5
 801d098:	0801d0d5 	.word	0x0801d0d5
 801d09c:	0801d0d5 	.word	0x0801d0d5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0a4:	3308      	adds	r3, #8
 801d0a6:	2101      	movs	r1, #1
 801d0a8:	4618      	mov	r0, r3
 801d0aa:	f000 ff71 	bl	801df90 <RCCEx_PLL2_Config>
 801d0ae:	4603      	mov	r3, r0
 801d0b0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801d0b4:	e00f      	b.n	801d0d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d0b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0ba:	3328      	adds	r3, #40	@ 0x28
 801d0bc:	2101      	movs	r1, #1
 801d0be:	4618      	mov	r0, r3
 801d0c0:	f001 f818 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d0c4:	4603      	mov	r3, r0
 801d0c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801d0ca:	e004      	b.n	801d0d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d0cc:	2301      	movs	r3, #1
 801d0ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d0d2:	e000      	b.n	801d0d6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801d0d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d0d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d0da:	2b00      	cmp	r3, #0
 801d0dc:	d10a      	bne.n	801d0f4 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801d0de:	4b96      	ldr	r3, [pc, #600]	@ (801d338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d0e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d0e2:	f023 0107 	bic.w	r1, r3, #7
 801d0e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0ea:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d0ec:	4a92      	ldr	r2, [pc, #584]	@ (801d338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d0ee:	430b      	orrs	r3, r1
 801d0f0:	6553      	str	r3, [r2, #84]	@ 0x54
 801d0f2:	e003      	b.n	801d0fc <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d0f4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d0f8:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801d0fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d100:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d104:	f002 0304 	and.w	r3, r2, #4
 801d108:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801d10c:	2300      	movs	r3, #0
 801d10e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801d112:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801d116:	460b      	mov	r3, r1
 801d118:	4313      	orrs	r3, r2
 801d11a:	d044      	beq.n	801d1a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801d11c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d120:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d124:	2b05      	cmp	r3, #5
 801d126:	d825      	bhi.n	801d174 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801d128:	a201      	add	r2, pc, #4	@ (adr r2, 801d130 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801d12a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d12e:	bf00      	nop
 801d130:	0801d17d 	.word	0x0801d17d
 801d134:	0801d149 	.word	0x0801d149
 801d138:	0801d15f 	.word	0x0801d15f
 801d13c:	0801d17d 	.word	0x0801d17d
 801d140:	0801d17d 	.word	0x0801d17d
 801d144:	0801d17d 	.word	0x0801d17d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d148:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d14c:	3308      	adds	r3, #8
 801d14e:	2101      	movs	r1, #1
 801d150:	4618      	mov	r0, r3
 801d152:	f000 ff1d 	bl	801df90 <RCCEx_PLL2_Config>
 801d156:	4603      	mov	r3, r0
 801d158:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801d15c:	e00f      	b.n	801d17e <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d15e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d162:	3328      	adds	r3, #40	@ 0x28
 801d164:	2101      	movs	r1, #1
 801d166:	4618      	mov	r0, r3
 801d168:	f000 ffc4 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d16c:	4603      	mov	r3, r0
 801d16e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801d172:	e004      	b.n	801d17e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d174:	2301      	movs	r3, #1
 801d176:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d17a:	e000      	b.n	801d17e <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801d17c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d17e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d182:	2b00      	cmp	r3, #0
 801d184:	d10b      	bne.n	801d19e <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801d186:	4b6c      	ldr	r3, [pc, #432]	@ (801d338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d188:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d18a:	f023 0107 	bic.w	r1, r3, #7
 801d18e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d192:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d196:	4a68      	ldr	r2, [pc, #416]	@ (801d338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d198:	430b      	orrs	r3, r1
 801d19a:	6593      	str	r3, [r2, #88]	@ 0x58
 801d19c:	e003      	b.n	801d1a6 <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d19e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d1a2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801d1a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d1ae:	f002 0320 	and.w	r3, r2, #32
 801d1b2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801d1b6:	2300      	movs	r3, #0
 801d1b8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801d1bc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801d1c0:	460b      	mov	r3, r1
 801d1c2:	4313      	orrs	r3, r2
 801d1c4:	d055      	beq.n	801d272 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801d1c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d1ce:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d1d2:	d033      	beq.n	801d23c <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801d1d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d1d8:	d82c      	bhi.n	801d234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d1da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d1de:	d02f      	beq.n	801d240 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801d1e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d1e4:	d826      	bhi.n	801d234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d1e6:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d1ea:	d02b      	beq.n	801d244 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801d1ec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d1f0:	d820      	bhi.n	801d234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d1f2:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d1f6:	d012      	beq.n	801d21e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801d1f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d1fc:	d81a      	bhi.n	801d234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d1fe:	2b00      	cmp	r3, #0
 801d200:	d022      	beq.n	801d248 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801d202:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d206:	d115      	bne.n	801d234 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d208:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d20c:	3308      	adds	r3, #8
 801d20e:	2100      	movs	r1, #0
 801d210:	4618      	mov	r0, r3
 801d212:	f000 febd 	bl	801df90 <RCCEx_PLL2_Config>
 801d216:	4603      	mov	r3, r0
 801d218:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801d21c:	e015      	b.n	801d24a <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d21e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d222:	3328      	adds	r3, #40	@ 0x28
 801d224:	2102      	movs	r1, #2
 801d226:	4618      	mov	r0, r3
 801d228:	f000 ff64 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d22c:	4603      	mov	r3, r0
 801d22e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801d232:	e00a      	b.n	801d24a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d234:	2301      	movs	r3, #1
 801d236:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d23a:	e006      	b.n	801d24a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d23c:	bf00      	nop
 801d23e:	e004      	b.n	801d24a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d240:	bf00      	nop
 801d242:	e002      	b.n	801d24a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d244:	bf00      	nop
 801d246:	e000      	b.n	801d24a <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d248:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d24a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d24e:	2b00      	cmp	r3, #0
 801d250:	d10b      	bne.n	801d26a <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d252:	4b39      	ldr	r3, [pc, #228]	@ (801d338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d254:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d256:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801d25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d25e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d262:	4a35      	ldr	r2, [pc, #212]	@ (801d338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d264:	430b      	orrs	r3, r1
 801d266:	6553      	str	r3, [r2, #84]	@ 0x54
 801d268:	e003      	b.n	801d272 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d26a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d26e:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801d272:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d276:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d27a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801d27e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801d282:	2300      	movs	r3, #0
 801d284:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801d288:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801d28c:	460b      	mov	r3, r1
 801d28e:	4313      	orrs	r3, r2
 801d290:	d058      	beq.n	801d344 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801d292:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d296:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d29a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801d29e:	d033      	beq.n	801d308 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801d2a0:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801d2a4:	d82c      	bhi.n	801d300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d2a6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d2aa:	d02f      	beq.n	801d30c <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801d2ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d2b0:	d826      	bhi.n	801d300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d2b2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801d2b6:	d02b      	beq.n	801d310 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801d2b8:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801d2bc:	d820      	bhi.n	801d300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d2be:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801d2c2:	d012      	beq.n	801d2ea <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801d2c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801d2c8:	d81a      	bhi.n	801d300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d2ca:	2b00      	cmp	r3, #0
 801d2cc:	d022      	beq.n	801d314 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801d2ce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d2d2:	d115      	bne.n	801d300 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d2d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2d8:	3308      	adds	r3, #8
 801d2da:	2100      	movs	r1, #0
 801d2dc:	4618      	mov	r0, r3
 801d2de:	f000 fe57 	bl	801df90 <RCCEx_PLL2_Config>
 801d2e2:	4603      	mov	r3, r0
 801d2e4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801d2e8:	e015      	b.n	801d316 <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d2ea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2ee:	3328      	adds	r3, #40	@ 0x28
 801d2f0:	2102      	movs	r1, #2
 801d2f2:	4618      	mov	r0, r3
 801d2f4:	f000 fefe 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d2f8:	4603      	mov	r3, r0
 801d2fa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801d2fe:	e00a      	b.n	801d316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d300:	2301      	movs	r3, #1
 801d302:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d306:	e006      	b.n	801d316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d308:	bf00      	nop
 801d30a:	e004      	b.n	801d316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d30c:	bf00      	nop
 801d30e:	e002      	b.n	801d316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d310:	bf00      	nop
 801d312:	e000      	b.n	801d316 <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d314:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d316:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d31a:	2b00      	cmp	r3, #0
 801d31c:	d10e      	bne.n	801d33c <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801d31e:	4b06      	ldr	r3, [pc, #24]	@ (801d338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d320:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d322:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801d326:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d32a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d32e:	4a02      	ldr	r2, [pc, #8]	@ (801d338 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d330:	430b      	orrs	r3, r1
 801d332:	6593      	str	r3, [r2, #88]	@ 0x58
 801d334:	e006      	b.n	801d344 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801d336:	bf00      	nop
 801d338:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d33c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d340:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801d344:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d34c:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801d350:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801d354:	2300      	movs	r3, #0
 801d356:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801d35a:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801d35e:	460b      	mov	r3, r1
 801d360:	4313      	orrs	r3, r2
 801d362:	d055      	beq.n	801d410 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801d364:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d368:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801d36c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801d370:	d033      	beq.n	801d3da <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801d372:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801d376:	d82c      	bhi.n	801d3d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d378:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801d37c:	d02f      	beq.n	801d3de <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801d37e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801d382:	d826      	bhi.n	801d3d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d384:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801d388:	d02b      	beq.n	801d3e2 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801d38a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801d38e:	d820      	bhi.n	801d3d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d390:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d394:	d012      	beq.n	801d3bc <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801d396:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d39a:	d81a      	bhi.n	801d3d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801d39c:	2b00      	cmp	r3, #0
 801d39e:	d022      	beq.n	801d3e6 <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801d3a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d3a4:	d115      	bne.n	801d3d2 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d3a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3aa:	3308      	adds	r3, #8
 801d3ac:	2100      	movs	r1, #0
 801d3ae:	4618      	mov	r0, r3
 801d3b0:	f000 fdee 	bl	801df90 <RCCEx_PLL2_Config>
 801d3b4:	4603      	mov	r3, r0
 801d3b6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801d3ba:	e015      	b.n	801d3e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d3bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3c0:	3328      	adds	r3, #40	@ 0x28
 801d3c2:	2102      	movs	r1, #2
 801d3c4:	4618      	mov	r0, r3
 801d3c6:	f000 fe95 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d3ca:	4603      	mov	r3, r0
 801d3cc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801d3d0:	e00a      	b.n	801d3e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d3d2:	2301      	movs	r3, #1
 801d3d4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d3d8:	e006      	b.n	801d3e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d3da:	bf00      	nop
 801d3dc:	e004      	b.n	801d3e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d3de:	bf00      	nop
 801d3e0:	e002      	b.n	801d3e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d3e2:	bf00      	nop
 801d3e4:	e000      	b.n	801d3e8 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801d3e6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d3e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d3ec:	2b00      	cmp	r3, #0
 801d3ee:	d10b      	bne.n	801d408 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801d3f0:	4ba1      	ldr	r3, [pc, #644]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d3f2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d3f4:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801d3f8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3fc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801d400:	4a9d      	ldr	r2, [pc, #628]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d402:	430b      	orrs	r3, r1
 801d404:	6593      	str	r3, [r2, #88]	@ 0x58
 801d406:	e003      	b.n	801d410 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d408:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d40c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801d410:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d414:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d418:	f002 0308 	and.w	r3, r2, #8
 801d41c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801d420:	2300      	movs	r3, #0
 801d422:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801d426:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801d42a:	460b      	mov	r3, r1
 801d42c:	4313      	orrs	r3, r2
 801d42e:	d01e      	beq.n	801d46e <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801d430:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d434:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801d438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d43c:	d10c      	bne.n	801d458 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d43e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d442:	3328      	adds	r3, #40	@ 0x28
 801d444:	2102      	movs	r1, #2
 801d446:	4618      	mov	r0, r3
 801d448:	f000 fe54 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d44c:	4603      	mov	r3, r0
 801d44e:	2b00      	cmp	r3, #0
 801d450:	d002      	beq.n	801d458 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801d452:	2301      	movs	r3, #1
 801d454:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801d458:	4b87      	ldr	r3, [pc, #540]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d45a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d45c:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801d460:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801d468:	4a83      	ldr	r2, [pc, #524]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d46a:	430b      	orrs	r3, r1
 801d46c:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801d46e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d472:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d476:	f002 0310 	and.w	r3, r2, #16
 801d47a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801d47e:	2300      	movs	r3, #0
 801d480:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801d484:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801d488:	460b      	mov	r3, r1
 801d48a:	4313      	orrs	r3, r2
 801d48c:	d01e      	beq.n	801d4cc <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801d48e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d492:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801d496:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d49a:	d10c      	bne.n	801d4b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d49c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4a0:	3328      	adds	r3, #40	@ 0x28
 801d4a2:	2102      	movs	r1, #2
 801d4a4:	4618      	mov	r0, r3
 801d4a6:	f000 fe25 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d4aa:	4603      	mov	r3, r0
 801d4ac:	2b00      	cmp	r3, #0
 801d4ae:	d002      	beq.n	801d4b6 <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801d4b0:	2301      	movs	r3, #1
 801d4b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801d4b6:	4b70      	ldr	r3, [pc, #448]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d4b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d4ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801d4be:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4c2:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801d4c6:	4a6c      	ldr	r2, [pc, #432]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d4c8:	430b      	orrs	r3, r1
 801d4ca:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801d4cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4d4:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801d4d8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801d4dc:	2300      	movs	r3, #0
 801d4de:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801d4e2:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801d4e6:	460b      	mov	r3, r1
 801d4e8:	4313      	orrs	r3, r2
 801d4ea:	d03e      	beq.n	801d56a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801d4ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4f0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801d4f4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d4f8:	d022      	beq.n	801d540 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801d4fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d4fe:	d81b      	bhi.n	801d538 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801d500:	2b00      	cmp	r3, #0
 801d502:	d003      	beq.n	801d50c <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801d504:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d508:	d00b      	beq.n	801d522 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801d50a:	e015      	b.n	801d538 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d50c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d510:	3308      	adds	r3, #8
 801d512:	2100      	movs	r1, #0
 801d514:	4618      	mov	r0, r3
 801d516:	f000 fd3b 	bl	801df90 <RCCEx_PLL2_Config>
 801d51a:	4603      	mov	r3, r0
 801d51c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801d520:	e00f      	b.n	801d542 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d522:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d526:	3328      	adds	r3, #40	@ 0x28
 801d528:	2102      	movs	r1, #2
 801d52a:	4618      	mov	r0, r3
 801d52c:	f000 fde2 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d530:	4603      	mov	r3, r0
 801d532:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801d536:	e004      	b.n	801d542 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d538:	2301      	movs	r3, #1
 801d53a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d53e:	e000      	b.n	801d542 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801d540:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d542:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d546:	2b00      	cmp	r3, #0
 801d548:	d10b      	bne.n	801d562 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801d54a:	4b4b      	ldr	r3, [pc, #300]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d54c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d54e:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801d552:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d556:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801d55a:	4a47      	ldr	r2, [pc, #284]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d55c:	430b      	orrs	r3, r1
 801d55e:	6593      	str	r3, [r2, #88]	@ 0x58
 801d560:	e003      	b.n	801d56a <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d562:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d566:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801d56a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d572:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801d576:	67bb      	str	r3, [r7, #120]	@ 0x78
 801d578:	2300      	movs	r3, #0
 801d57a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801d57c:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801d580:	460b      	mov	r3, r1
 801d582:	4313      	orrs	r3, r2
 801d584:	d03b      	beq.n	801d5fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801d586:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d58a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d58e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d592:	d01f      	beq.n	801d5d4 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801d594:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801d598:	d818      	bhi.n	801d5cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801d59a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801d59e:	d003      	beq.n	801d5a8 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801d5a0:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801d5a4:	d007      	beq.n	801d5b6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801d5a6:	e011      	b.n	801d5cc <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d5a8:	4b33      	ldr	r3, [pc, #204]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d5aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d5ac:	4a32      	ldr	r2, [pc, #200]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d5ae:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d5b2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801d5b4:	e00f      	b.n	801d5d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d5b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5ba:	3328      	adds	r3, #40	@ 0x28
 801d5bc:	2101      	movs	r1, #1
 801d5be:	4618      	mov	r0, r3
 801d5c0:	f000 fd98 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d5c4:	4603      	mov	r3, r0
 801d5c6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801d5ca:	e004      	b.n	801d5d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d5cc:	2301      	movs	r3, #1
 801d5ce:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d5d2:	e000      	b.n	801d5d6 <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801d5d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d5d6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d5da:	2b00      	cmp	r3, #0
 801d5dc:	d10b      	bne.n	801d5f6 <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801d5de:	4b26      	ldr	r3, [pc, #152]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d5e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d5e2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801d5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801d5ee:	4a22      	ldr	r2, [pc, #136]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d5f0:	430b      	orrs	r3, r1
 801d5f2:	6553      	str	r3, [r2, #84]	@ 0x54
 801d5f4:	e003      	b.n	801d5fe <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d5f6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d5fa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801d5fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d602:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d606:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801d60a:	673b      	str	r3, [r7, #112]	@ 0x70
 801d60c:	2300      	movs	r3, #0
 801d60e:	677b      	str	r3, [r7, #116]	@ 0x74
 801d610:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801d614:	460b      	mov	r3, r1
 801d616:	4313      	orrs	r3, r2
 801d618:	d034      	beq.n	801d684 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801d61a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d61e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d620:	2b00      	cmp	r3, #0
 801d622:	d003      	beq.n	801d62c <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801d624:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d628:	d007      	beq.n	801d63a <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801d62a:	e011      	b.n	801d650 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d62c:	4b12      	ldr	r3, [pc, #72]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d62e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d630:	4a11      	ldr	r2, [pc, #68]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d632:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d636:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801d638:	e00e      	b.n	801d658 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d63e:	3308      	adds	r3, #8
 801d640:	2102      	movs	r1, #2
 801d642:	4618      	mov	r0, r3
 801d644:	f000 fca4 	bl	801df90 <RCCEx_PLL2_Config>
 801d648:	4603      	mov	r3, r0
 801d64a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801d64e:	e003      	b.n	801d658 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801d650:	2301      	movs	r3, #1
 801d652:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d656:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d658:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d65c:	2b00      	cmp	r3, #0
 801d65e:	d10d      	bne.n	801d67c <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801d660:	4b05      	ldr	r3, [pc, #20]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d662:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d664:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801d668:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d66c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d66e:	4a02      	ldr	r2, [pc, #8]	@ (801d678 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801d670:	430b      	orrs	r3, r1
 801d672:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d674:	e006      	b.n	801d684 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801d676:	bf00      	nop
 801d678:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d67c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d680:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801d684:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d688:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d68c:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801d690:	66bb      	str	r3, [r7, #104]	@ 0x68
 801d692:	2300      	movs	r3, #0
 801d694:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801d696:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801d69a:	460b      	mov	r3, r1
 801d69c:	4313      	orrs	r3, r2
 801d69e:	d00c      	beq.n	801d6ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801d6a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6a4:	3328      	adds	r3, #40	@ 0x28
 801d6a6:	2102      	movs	r1, #2
 801d6a8:	4618      	mov	r0, r3
 801d6aa:	f000 fd23 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d6ae:	4603      	mov	r3, r0
 801d6b0:	2b00      	cmp	r3, #0
 801d6b2:	d002      	beq.n	801d6ba <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801d6b4:	2301      	movs	r3, #1
 801d6b6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801d6ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6be:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d6c2:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801d6c6:	663b      	str	r3, [r7, #96]	@ 0x60
 801d6c8:	2300      	movs	r3, #0
 801d6ca:	667b      	str	r3, [r7, #100]	@ 0x64
 801d6cc:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801d6d0:	460b      	mov	r3, r1
 801d6d2:	4313      	orrs	r3, r2
 801d6d4:	d038      	beq.n	801d748 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801d6d6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d6de:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d6e2:	d018      	beq.n	801d716 <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801d6e4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d6e8:	d811      	bhi.n	801d70e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801d6ea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d6ee:	d014      	beq.n	801d71a <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801d6f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801d6f4:	d80b      	bhi.n	801d70e <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801d6f6:	2b00      	cmp	r3, #0
 801d6f8:	d011      	beq.n	801d71e <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801d6fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d6fe:	d106      	bne.n	801d70e <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d700:	4bc3      	ldr	r3, [pc, #780]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d704:	4ac2      	ldr	r2, [pc, #776]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d706:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d70a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801d70c:	e008      	b.n	801d720 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d70e:	2301      	movs	r3, #1
 801d710:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d714:	e004      	b.n	801d720 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801d716:	bf00      	nop
 801d718:	e002      	b.n	801d720 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801d71a:	bf00      	nop
 801d71c:	e000      	b.n	801d720 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801d71e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d720:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d724:	2b00      	cmp	r3, #0
 801d726:	d10b      	bne.n	801d740 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801d728:	4bb9      	ldr	r3, [pc, #740]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d72a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d72c:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801d730:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d734:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801d738:	4ab5      	ldr	r2, [pc, #724]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d73a:	430b      	orrs	r3, r1
 801d73c:	6553      	str	r3, [r2, #84]	@ 0x54
 801d73e:	e003      	b.n	801d748 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d740:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d744:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801d748:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d750:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801d754:	65bb      	str	r3, [r7, #88]	@ 0x58
 801d756:	2300      	movs	r3, #0
 801d758:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801d75a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801d75e:	460b      	mov	r3, r1
 801d760:	4313      	orrs	r3, r2
 801d762:	d009      	beq.n	801d778 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801d764:	4baa      	ldr	r3, [pc, #680]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d768:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801d76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d770:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801d772:	4aa7      	ldr	r2, [pc, #668]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d774:	430b      	orrs	r3, r1
 801d776:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801d778:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d77c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d780:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801d784:	653b      	str	r3, [r7, #80]	@ 0x50
 801d786:	2300      	movs	r3, #0
 801d788:	657b      	str	r3, [r7, #84]	@ 0x54
 801d78a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801d78e:	460b      	mov	r3, r1
 801d790:	4313      	orrs	r3, r2
 801d792:	d00a      	beq.n	801d7aa <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801d794:	4b9e      	ldr	r3, [pc, #632]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d796:	691b      	ldr	r3, [r3, #16]
 801d798:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801d79c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7a0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801d7a4:	4a9a      	ldr	r2, [pc, #616]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d7a6:	430b      	orrs	r3, r1
 801d7a8:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801d7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7b2:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801d7b6:	64bb      	str	r3, [r7, #72]	@ 0x48
 801d7b8:	2300      	movs	r3, #0
 801d7ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801d7bc:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801d7c0:	460b      	mov	r3, r1
 801d7c2:	4313      	orrs	r3, r2
 801d7c4:	d009      	beq.n	801d7da <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801d7c6:	4b92      	ldr	r3, [pc, #584]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d7c8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d7ca:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801d7ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801d7d4:	4a8e      	ldr	r2, [pc, #568]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d7d6:	430b      	orrs	r3, r1
 801d7d8:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801d7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7e2:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801d7e6:	643b      	str	r3, [r7, #64]	@ 0x40
 801d7e8:	2300      	movs	r3, #0
 801d7ea:	647b      	str	r3, [r7, #68]	@ 0x44
 801d7ec:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801d7f0:	460b      	mov	r3, r1
 801d7f2:	4313      	orrs	r3, r2
 801d7f4:	d00e      	beq.n	801d814 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801d7f6:	4b86      	ldr	r3, [pc, #536]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d7f8:	691b      	ldr	r3, [r3, #16]
 801d7fa:	4a85      	ldr	r2, [pc, #532]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d7fc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801d800:	6113      	str	r3, [r2, #16]
 801d802:	4b83      	ldr	r3, [pc, #524]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d804:	6919      	ldr	r1, [r3, #16]
 801d806:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d80a:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801d80e:	4a80      	ldr	r2, [pc, #512]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d810:	430b      	orrs	r3, r1
 801d812:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801d814:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d818:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d81c:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801d820:	63bb      	str	r3, [r7, #56]	@ 0x38
 801d822:	2300      	movs	r3, #0
 801d824:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d826:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801d82a:	460b      	mov	r3, r1
 801d82c:	4313      	orrs	r3, r2
 801d82e:	d009      	beq.n	801d844 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801d830:	4b77      	ldr	r3, [pc, #476]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d832:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d834:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801d838:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d83c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d83e:	4a74      	ldr	r2, [pc, #464]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d840:	430b      	orrs	r3, r1
 801d842:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801d844:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d848:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d84c:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801d850:	633b      	str	r3, [r7, #48]	@ 0x30
 801d852:	2300      	movs	r3, #0
 801d854:	637b      	str	r3, [r7, #52]	@ 0x34
 801d856:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801d85a:	460b      	mov	r3, r1
 801d85c:	4313      	orrs	r3, r2
 801d85e:	d00a      	beq.n	801d876 <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801d860:	4b6b      	ldr	r3, [pc, #428]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d862:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d864:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801d868:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d86c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801d870:	4a67      	ldr	r2, [pc, #412]	@ (801da10 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801d872:	430b      	orrs	r3, r1
 801d874:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801d876:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d87a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d87e:	2100      	movs	r1, #0
 801d880:	62b9      	str	r1, [r7, #40]	@ 0x28
 801d882:	f003 0301 	and.w	r3, r3, #1
 801d886:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801d888:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801d88c:	460b      	mov	r3, r1
 801d88e:	4313      	orrs	r3, r2
 801d890:	d011      	beq.n	801d8b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d892:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d896:	3308      	adds	r3, #8
 801d898:	2100      	movs	r1, #0
 801d89a:	4618      	mov	r0, r3
 801d89c:	f000 fb78 	bl	801df90 <RCCEx_PLL2_Config>
 801d8a0:	4603      	mov	r3, r0
 801d8a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801d8a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8aa:	2b00      	cmp	r3, #0
 801d8ac:	d003      	beq.n	801d8b6 <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d8ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801d8b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8be:	2100      	movs	r1, #0
 801d8c0:	6239      	str	r1, [r7, #32]
 801d8c2:	f003 0302 	and.w	r3, r3, #2
 801d8c6:	627b      	str	r3, [r7, #36]	@ 0x24
 801d8c8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801d8cc:	460b      	mov	r3, r1
 801d8ce:	4313      	orrs	r3, r2
 801d8d0:	d011      	beq.n	801d8f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d8d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8d6:	3308      	adds	r3, #8
 801d8d8:	2101      	movs	r1, #1
 801d8da:	4618      	mov	r0, r3
 801d8dc:	f000 fb58 	bl	801df90 <RCCEx_PLL2_Config>
 801d8e0:	4603      	mov	r3, r0
 801d8e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801d8e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8ea:	2b00      	cmp	r3, #0
 801d8ec:	d003      	beq.n	801d8f6 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d8ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d8f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801d8f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8fe:	2100      	movs	r1, #0
 801d900:	61b9      	str	r1, [r7, #24]
 801d902:	f003 0304 	and.w	r3, r3, #4
 801d906:	61fb      	str	r3, [r7, #28]
 801d908:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801d90c:	460b      	mov	r3, r1
 801d90e:	4313      	orrs	r3, r2
 801d910:	d011      	beq.n	801d936 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d916:	3308      	adds	r3, #8
 801d918:	2102      	movs	r1, #2
 801d91a:	4618      	mov	r0, r3
 801d91c:	f000 fb38 	bl	801df90 <RCCEx_PLL2_Config>
 801d920:	4603      	mov	r3, r0
 801d922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801d926:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d92a:	2b00      	cmp	r3, #0
 801d92c:	d003      	beq.n	801d936 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d92e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d932:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801d936:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d93a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d93e:	2100      	movs	r1, #0
 801d940:	6139      	str	r1, [r7, #16]
 801d942:	f003 0308 	and.w	r3, r3, #8
 801d946:	617b      	str	r3, [r7, #20]
 801d948:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801d94c:	460b      	mov	r3, r1
 801d94e:	4313      	orrs	r3, r2
 801d950:	d011      	beq.n	801d976 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d952:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d956:	3328      	adds	r3, #40	@ 0x28
 801d958:	2100      	movs	r1, #0
 801d95a:	4618      	mov	r0, r3
 801d95c:	f000 fbca 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d960:	4603      	mov	r3, r0
 801d962:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801d966:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d96a:	2b00      	cmp	r3, #0
 801d96c:	d003      	beq.n	801d976 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d96e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d972:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801d976:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d97a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d97e:	2100      	movs	r1, #0
 801d980:	60b9      	str	r1, [r7, #8]
 801d982:	f003 0310 	and.w	r3, r3, #16
 801d986:	60fb      	str	r3, [r7, #12]
 801d988:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801d98c:	460b      	mov	r3, r1
 801d98e:	4313      	orrs	r3, r2
 801d990:	d011      	beq.n	801d9b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d992:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d996:	3328      	adds	r3, #40	@ 0x28
 801d998:	2101      	movs	r1, #1
 801d99a:	4618      	mov	r0, r3
 801d99c:	f000 fbaa 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d9a0:	4603      	mov	r3, r0
 801d9a2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801d9a6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d9aa:	2b00      	cmp	r3, #0
 801d9ac:	d003      	beq.n	801d9b6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d9ae:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d9b2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801d9b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d9be:	2100      	movs	r1, #0
 801d9c0:	6039      	str	r1, [r7, #0]
 801d9c2:	f003 0320 	and.w	r3, r3, #32
 801d9c6:	607b      	str	r3, [r7, #4]
 801d9c8:	e9d7 1200 	ldrd	r1, r2, [r7]
 801d9cc:	460b      	mov	r3, r1
 801d9ce:	4313      	orrs	r3, r2
 801d9d0:	d011      	beq.n	801d9f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d9d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9d6:	3328      	adds	r3, #40	@ 0x28
 801d9d8:	2102      	movs	r1, #2
 801d9da:	4618      	mov	r0, r3
 801d9dc:	f000 fb8a 	bl	801e0f4 <RCCEx_PLL3_Config>
 801d9e0:	4603      	mov	r3, r0
 801d9e2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801d9e6:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d003      	beq.n	801d9f6 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d9ee:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d9f2:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801d9f6:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801d9fa:	2b00      	cmp	r3, #0
 801d9fc:	d101      	bne.n	801da02 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801d9fe:	2300      	movs	r3, #0
 801da00:	e000      	b.n	801da04 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801da02:	2301      	movs	r3, #1
}
 801da04:	4618      	mov	r0, r3
 801da06:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801da0a:	46bd      	mov	sp, r7
 801da0c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801da10:	58024400 	.word	0x58024400

0801da14 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801da14:	b580      	push	{r7, lr}
 801da16:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801da18:	f7fe fd96 	bl	801c548 <HAL_RCC_GetHCLKFreq>
 801da1c:	4602      	mov	r2, r0
 801da1e:	4b06      	ldr	r3, [pc, #24]	@ (801da38 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801da20:	6a1b      	ldr	r3, [r3, #32]
 801da22:	091b      	lsrs	r3, r3, #4
 801da24:	f003 0307 	and.w	r3, r3, #7
 801da28:	4904      	ldr	r1, [pc, #16]	@ (801da3c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801da2a:	5ccb      	ldrb	r3, [r1, r3]
 801da2c:	f003 031f 	and.w	r3, r3, #31
 801da30:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801da34:	4618      	mov	r0, r3
 801da36:	bd80      	pop	{r7, pc}
 801da38:	58024400 	.word	0x58024400
 801da3c:	08025bdc 	.word	0x08025bdc

0801da40 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801da40:	b480      	push	{r7}
 801da42:	b089      	sub	sp, #36	@ 0x24
 801da44:	af00      	add	r7, sp, #0
 801da46:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801da48:	4ba1      	ldr	r3, [pc, #644]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801da4c:	f003 0303 	and.w	r3, r3, #3
 801da50:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801da52:	4b9f      	ldr	r3, [pc, #636]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801da56:	0b1b      	lsrs	r3, r3, #12
 801da58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801da5c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801da5e:	4b9c      	ldr	r3, [pc, #624]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801da62:	091b      	lsrs	r3, r3, #4
 801da64:	f003 0301 	and.w	r3, r3, #1
 801da68:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801da6a:	4b99      	ldr	r3, [pc, #612]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801da6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801da6e:	08db      	lsrs	r3, r3, #3
 801da70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801da74:	693a      	ldr	r2, [r7, #16]
 801da76:	fb02 f303 	mul.w	r3, r2, r3
 801da7a:	ee07 3a90 	vmov	s15, r3
 801da7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801da82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801da86:	697b      	ldr	r3, [r7, #20]
 801da88:	2b00      	cmp	r3, #0
 801da8a:	f000 8111 	beq.w	801dcb0 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801da8e:	69bb      	ldr	r3, [r7, #24]
 801da90:	2b02      	cmp	r3, #2
 801da92:	f000 8083 	beq.w	801db9c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801da96:	69bb      	ldr	r3, [r7, #24]
 801da98:	2b02      	cmp	r3, #2
 801da9a:	f200 80a1 	bhi.w	801dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801da9e:	69bb      	ldr	r3, [r7, #24]
 801daa0:	2b00      	cmp	r3, #0
 801daa2:	d003      	beq.n	801daac <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801daa4:	69bb      	ldr	r3, [r7, #24]
 801daa6:	2b01      	cmp	r3, #1
 801daa8:	d056      	beq.n	801db58 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801daaa:	e099      	b.n	801dbe0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801daac:	4b88      	ldr	r3, [pc, #544]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801daae:	681b      	ldr	r3, [r3, #0]
 801dab0:	f003 0320 	and.w	r3, r3, #32
 801dab4:	2b00      	cmp	r3, #0
 801dab6:	d02d      	beq.n	801db14 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dab8:	4b85      	ldr	r3, [pc, #532]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801daba:	681b      	ldr	r3, [r3, #0]
 801dabc:	08db      	lsrs	r3, r3, #3
 801dabe:	f003 0303 	and.w	r3, r3, #3
 801dac2:	4a84      	ldr	r2, [pc, #528]	@ (801dcd4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801dac4:	fa22 f303 	lsr.w	r3, r2, r3
 801dac8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801daca:	68bb      	ldr	r3, [r7, #8]
 801dacc:	ee07 3a90 	vmov	s15, r3
 801dad0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dad4:	697b      	ldr	r3, [r7, #20]
 801dad6:	ee07 3a90 	vmov	s15, r3
 801dada:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dade:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dae2:	4b7b      	ldr	r3, [pc, #492]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dae4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dae6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801daea:	ee07 3a90 	vmov	s15, r3
 801daee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801daf2:	ed97 6a03 	vldr	s12, [r7, #12]
 801daf6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801dcd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dafa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dafe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801db02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801db06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801db12:	e087      	b.n	801dc24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801db14:	697b      	ldr	r3, [r7, #20]
 801db16:	ee07 3a90 	vmov	s15, r3
 801db1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801dcdc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801db22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801db26:	4b6a      	ldr	r3, [pc, #424]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db28:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801db2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801db2e:	ee07 3a90 	vmov	s15, r3
 801db32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db36:	ed97 6a03 	vldr	s12, [r7, #12]
 801db3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801dcd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801db3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801db42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801db46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801db4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801db56:	e065      	b.n	801dc24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801db58:	697b      	ldr	r3, [r7, #20]
 801db5a:	ee07 3a90 	vmov	s15, r3
 801db5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801dce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801db66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801db6a:	4b59      	ldr	r3, [pc, #356]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801db6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801db6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801db72:	ee07 3a90 	vmov	s15, r3
 801db76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db7a:	ed97 6a03 	vldr	s12, [r7, #12]
 801db7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801dcd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801db82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801db86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801db8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801db8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db92:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801db9a:	e043      	b.n	801dc24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801db9c:	697b      	ldr	r3, [r7, #20]
 801db9e:	ee07 3a90 	vmov	s15, r3
 801dba2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dba6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801dce4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801dbaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dbae:	4b48      	ldr	r3, [pc, #288]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dbb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dbb6:	ee07 3a90 	vmov	s15, r3
 801dbba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dbbe:	ed97 6a03 	vldr	s12, [r7, #12]
 801dbc2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801dcd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dbc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dbca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dbce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dbd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dbd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dbda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dbde:	e021      	b.n	801dc24 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801dbe0:	697b      	ldr	r3, [r7, #20]
 801dbe2:	ee07 3a90 	vmov	s15, r3
 801dbe6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dbea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801dce0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801dbee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dbf2:	4b37      	ldr	r3, [pc, #220]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dbf4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dbf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dbfa:	ee07 3a90 	vmov	s15, r3
 801dbfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dc02:	ed97 6a03 	vldr	s12, [r7, #12]
 801dc06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801dcd8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801dc0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dc0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dc12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dc16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dc1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dc1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dc22:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801dc24:	4b2a      	ldr	r3, [pc, #168]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dc26:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dc28:	0a5b      	lsrs	r3, r3, #9
 801dc2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dc2e:	ee07 3a90 	vmov	s15, r3
 801dc32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dc3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dc3e:	edd7 6a07 	vldr	s13, [r7, #28]
 801dc42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dc46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dc4a:	ee17 2a90 	vmov	r2, s15
 801dc4e:	687b      	ldr	r3, [r7, #4]
 801dc50:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801dc52:	4b1f      	ldr	r3, [pc, #124]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dc54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dc56:	0c1b      	lsrs	r3, r3, #16
 801dc58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dc5c:	ee07 3a90 	vmov	s15, r3
 801dc60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dc68:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dc6c:	edd7 6a07 	vldr	s13, [r7, #28]
 801dc70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dc74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dc78:	ee17 2a90 	vmov	r2, s15
 801dc7c:	687b      	ldr	r3, [r7, #4]
 801dc7e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801dc80:	4b13      	ldr	r3, [pc, #76]	@ (801dcd0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801dc82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801dc84:	0e1b      	lsrs	r3, r3, #24
 801dc86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dc8a:	ee07 3a90 	vmov	s15, r3
 801dc8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dc92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dc96:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dc9a:	edd7 6a07 	vldr	s13, [r7, #28]
 801dc9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dca2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dca6:	ee17 2a90 	vmov	r2, s15
 801dcaa:	687b      	ldr	r3, [r7, #4]
 801dcac:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801dcae:	e008      	b.n	801dcc2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801dcb0:	687b      	ldr	r3, [r7, #4]
 801dcb2:	2200      	movs	r2, #0
 801dcb4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801dcb6:	687b      	ldr	r3, [r7, #4]
 801dcb8:	2200      	movs	r2, #0
 801dcba:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801dcbc:	687b      	ldr	r3, [r7, #4]
 801dcbe:	2200      	movs	r2, #0
 801dcc0:	609a      	str	r2, [r3, #8]
}
 801dcc2:	bf00      	nop
 801dcc4:	3724      	adds	r7, #36	@ 0x24
 801dcc6:	46bd      	mov	sp, r7
 801dcc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dccc:	4770      	bx	lr
 801dcce:	bf00      	nop
 801dcd0:	58024400 	.word	0x58024400
 801dcd4:	03d09000 	.word	0x03d09000
 801dcd8:	46000000 	.word	0x46000000
 801dcdc:	4c742400 	.word	0x4c742400
 801dce0:	4a742400 	.word	0x4a742400
 801dce4:	4bbebc20 	.word	0x4bbebc20

0801dce8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801dce8:	b480      	push	{r7}
 801dcea:	b089      	sub	sp, #36	@ 0x24
 801dcec:	af00      	add	r7, sp, #0
 801dcee:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801dcf0:	4ba1      	ldr	r3, [pc, #644]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dcf2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dcf4:	f003 0303 	and.w	r3, r3, #3
 801dcf8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801dcfa:	4b9f      	ldr	r3, [pc, #636]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dcfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dcfe:	0d1b      	lsrs	r3, r3, #20
 801dd00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dd04:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801dd06:	4b9c      	ldr	r3, [pc, #624]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd0a:	0a1b      	lsrs	r3, r3, #8
 801dd0c:	f003 0301 	and.w	r3, r3, #1
 801dd10:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801dd12:	4b99      	ldr	r3, [pc, #612]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801dd16:	08db      	lsrs	r3, r3, #3
 801dd18:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801dd1c:	693a      	ldr	r2, [r7, #16]
 801dd1e:	fb02 f303 	mul.w	r3, r2, r3
 801dd22:	ee07 3a90 	vmov	s15, r3
 801dd26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd2a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801dd2e:	697b      	ldr	r3, [r7, #20]
 801dd30:	2b00      	cmp	r3, #0
 801dd32:	f000 8111 	beq.w	801df58 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801dd36:	69bb      	ldr	r3, [r7, #24]
 801dd38:	2b02      	cmp	r3, #2
 801dd3a:	f000 8083 	beq.w	801de44 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801dd3e:	69bb      	ldr	r3, [r7, #24]
 801dd40:	2b02      	cmp	r3, #2
 801dd42:	f200 80a1 	bhi.w	801de88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801dd46:	69bb      	ldr	r3, [r7, #24]
 801dd48:	2b00      	cmp	r3, #0
 801dd4a:	d003      	beq.n	801dd54 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801dd4c:	69bb      	ldr	r3, [r7, #24]
 801dd4e:	2b01      	cmp	r3, #1
 801dd50:	d056      	beq.n	801de00 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801dd52:	e099      	b.n	801de88 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801dd54:	4b88      	ldr	r3, [pc, #544]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd56:	681b      	ldr	r3, [r3, #0]
 801dd58:	f003 0320 	and.w	r3, r3, #32
 801dd5c:	2b00      	cmp	r3, #0
 801dd5e:	d02d      	beq.n	801ddbc <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801dd60:	4b85      	ldr	r3, [pc, #532]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd62:	681b      	ldr	r3, [r3, #0]
 801dd64:	08db      	lsrs	r3, r3, #3
 801dd66:	f003 0303 	and.w	r3, r3, #3
 801dd6a:	4a84      	ldr	r2, [pc, #528]	@ (801df7c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801dd6c:	fa22 f303 	lsr.w	r3, r2, r3
 801dd70:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801dd72:	68bb      	ldr	r3, [r7, #8]
 801dd74:	ee07 3a90 	vmov	s15, r3
 801dd78:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd7c:	697b      	ldr	r3, [r7, #20]
 801dd7e:	ee07 3a90 	vmov	s15, r3
 801dd82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dd86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dd8a:	4b7b      	ldr	r3, [pc, #492]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dd8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801dd8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dd92:	ee07 3a90 	vmov	s15, r3
 801dd96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dd9a:	ed97 6a03 	vldr	s12, [r7, #12]
 801dd9e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801df80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801dda2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dda6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ddaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ddae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ddb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ddb6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801ddba:	e087      	b.n	801decc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801ddbc:	697b      	ldr	r3, [r7, #20]
 801ddbe:	ee07 3a90 	vmov	s15, r3
 801ddc2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ddc6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801df84 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801ddca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ddce:	4b6a      	ldr	r3, [pc, #424]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801ddd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ddd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ddd6:	ee07 3a90 	vmov	s15, r3
 801ddda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ddde:	ed97 6a03 	vldr	s12, [r7, #12]
 801dde2:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801df80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801dde6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801ddea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801ddee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ddf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ddf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801ddfa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801ddfe:	e065      	b.n	801decc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801de00:	697b      	ldr	r3, [r7, #20]
 801de02:	ee07 3a90 	vmov	s15, r3
 801de06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de0a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801df88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801de0e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de12:	4b59      	ldr	r3, [pc, #356]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801de16:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801de1a:	ee07 3a90 	vmov	s15, r3
 801de1e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de22:	ed97 6a03 	vldr	s12, [r7, #12]
 801de26:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801df80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801de2a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de2e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de32:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de36:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de3e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801de42:	e043      	b.n	801decc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801de44:	697b      	ldr	r3, [r7, #20]
 801de46:	ee07 3a90 	vmov	s15, r3
 801de4a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de4e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801df8c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801de52:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de56:	4b48      	ldr	r3, [pc, #288]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801de5a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801de5e:	ee07 3a90 	vmov	s15, r3
 801de62:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801de66:	ed97 6a03 	vldr	s12, [r7, #12]
 801de6a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801df80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801de6e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801de72:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801de76:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801de7a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801de7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801de82:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801de86:	e021      	b.n	801decc <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801de88:	697b      	ldr	r3, [r7, #20]
 801de8a:	ee07 3a90 	vmov	s15, r3
 801de8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801de92:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801df88 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801de96:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801de9a:	4b37      	ldr	r3, [pc, #220]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801de9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801de9e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801dea2:	ee07 3a90 	vmov	s15, r3
 801dea6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801deaa:	ed97 6a03 	vldr	s12, [r7, #12]
 801deae:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801df80 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801deb2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801deb6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801deba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801debe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dec2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dec6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801deca:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801decc:	4b2a      	ldr	r3, [pc, #168]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801dece:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ded0:	0a5b      	lsrs	r3, r3, #9
 801ded2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801ded6:	ee07 3a90 	vmov	s15, r3
 801deda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dede:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dee2:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dee6:	edd7 6a07 	vldr	s13, [r7, #28]
 801deea:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801deee:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801def2:	ee17 2a90 	vmov	r2, s15
 801def6:	687b      	ldr	r3, [r7, #4]
 801def8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801defa:	4b1f      	ldr	r3, [pc, #124]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801defc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801defe:	0c1b      	lsrs	r3, r3, #16
 801df00:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801df04:	ee07 3a90 	vmov	s15, r3
 801df08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801df10:	ee37 7a87 	vadd.f32	s14, s15, s14
 801df14:	edd7 6a07 	vldr	s13, [r7, #28]
 801df18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801df1c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801df20:	ee17 2a90 	vmov	r2, s15
 801df24:	687b      	ldr	r3, [r7, #4]
 801df26:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801df28:	4b13      	ldr	r3, [pc, #76]	@ (801df78 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801df2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801df2c:	0e1b      	lsrs	r3, r3, #24
 801df2e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801df32:	ee07 3a90 	vmov	s15, r3
 801df36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801df3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801df3e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801df42:	edd7 6a07 	vldr	s13, [r7, #28]
 801df46:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801df4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801df4e:	ee17 2a90 	vmov	r2, s15
 801df52:	687b      	ldr	r3, [r7, #4]
 801df54:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801df56:	e008      	b.n	801df6a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801df58:	687b      	ldr	r3, [r7, #4]
 801df5a:	2200      	movs	r2, #0
 801df5c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801df5e:	687b      	ldr	r3, [r7, #4]
 801df60:	2200      	movs	r2, #0
 801df62:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801df64:	687b      	ldr	r3, [r7, #4]
 801df66:	2200      	movs	r2, #0
 801df68:	609a      	str	r2, [r3, #8]
}
 801df6a:	bf00      	nop
 801df6c:	3724      	adds	r7, #36	@ 0x24
 801df6e:	46bd      	mov	sp, r7
 801df70:	f85d 7b04 	ldr.w	r7, [sp], #4
 801df74:	4770      	bx	lr
 801df76:	bf00      	nop
 801df78:	58024400 	.word	0x58024400
 801df7c:	03d09000 	.word	0x03d09000
 801df80:	46000000 	.word	0x46000000
 801df84:	4c742400 	.word	0x4c742400
 801df88:	4a742400 	.word	0x4a742400
 801df8c:	4bbebc20 	.word	0x4bbebc20

0801df90 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801df90:	b580      	push	{r7, lr}
 801df92:	b084      	sub	sp, #16
 801df94:	af00      	add	r7, sp, #0
 801df96:	6078      	str	r0, [r7, #4]
 801df98:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801df9a:	2300      	movs	r3, #0
 801df9c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801df9e:	4b53      	ldr	r3, [pc, #332]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801dfa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dfa2:	f003 0303 	and.w	r3, r3, #3
 801dfa6:	2b03      	cmp	r3, #3
 801dfa8:	d101      	bne.n	801dfae <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801dfaa:	2301      	movs	r3, #1
 801dfac:	e099      	b.n	801e0e2 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801dfae:	4b4f      	ldr	r3, [pc, #316]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801dfb0:	681b      	ldr	r3, [r3, #0]
 801dfb2:	4a4e      	ldr	r2, [pc, #312]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801dfb4:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801dfb8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801dfba:	f7fb f895 	bl	80190e8 <HAL_GetTick>
 801dfbe:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801dfc0:	e008      	b.n	801dfd4 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801dfc2:	f7fb f891 	bl	80190e8 <HAL_GetTick>
 801dfc6:	4602      	mov	r2, r0
 801dfc8:	68bb      	ldr	r3, [r7, #8]
 801dfca:	1ad3      	subs	r3, r2, r3
 801dfcc:	2b02      	cmp	r3, #2
 801dfce:	d901      	bls.n	801dfd4 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801dfd0:	2303      	movs	r3, #3
 801dfd2:	e086      	b.n	801e0e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801dfd4:	4b45      	ldr	r3, [pc, #276]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801dfd6:	681b      	ldr	r3, [r3, #0]
 801dfd8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801dfdc:	2b00      	cmp	r3, #0
 801dfde:	d1f0      	bne.n	801dfc2 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801dfe0:	4b42      	ldr	r3, [pc, #264]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801dfe2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dfe4:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801dfe8:	687b      	ldr	r3, [r7, #4]
 801dfea:	681b      	ldr	r3, [r3, #0]
 801dfec:	031b      	lsls	r3, r3, #12
 801dfee:	493f      	ldr	r1, [pc, #252]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801dff0:	4313      	orrs	r3, r2
 801dff2:	628b      	str	r3, [r1, #40]	@ 0x28
 801dff4:	687b      	ldr	r3, [r7, #4]
 801dff6:	685b      	ldr	r3, [r3, #4]
 801dff8:	3b01      	subs	r3, #1
 801dffa:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801dffe:	687b      	ldr	r3, [r7, #4]
 801e000:	689b      	ldr	r3, [r3, #8]
 801e002:	3b01      	subs	r3, #1
 801e004:	025b      	lsls	r3, r3, #9
 801e006:	b29b      	uxth	r3, r3
 801e008:	431a      	orrs	r2, r3
 801e00a:	687b      	ldr	r3, [r7, #4]
 801e00c:	68db      	ldr	r3, [r3, #12]
 801e00e:	3b01      	subs	r3, #1
 801e010:	041b      	lsls	r3, r3, #16
 801e012:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801e016:	431a      	orrs	r2, r3
 801e018:	687b      	ldr	r3, [r7, #4]
 801e01a:	691b      	ldr	r3, [r3, #16]
 801e01c:	3b01      	subs	r3, #1
 801e01e:	061b      	lsls	r3, r3, #24
 801e020:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801e024:	4931      	ldr	r1, [pc, #196]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e026:	4313      	orrs	r3, r2
 801e028:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801e02a:	4b30      	ldr	r3, [pc, #192]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e02c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e02e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801e032:	687b      	ldr	r3, [r7, #4]
 801e034:	695b      	ldr	r3, [r3, #20]
 801e036:	492d      	ldr	r1, [pc, #180]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e038:	4313      	orrs	r3, r2
 801e03a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801e03c:	4b2b      	ldr	r3, [pc, #172]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e03e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e040:	f023 0220 	bic.w	r2, r3, #32
 801e044:	687b      	ldr	r3, [r7, #4]
 801e046:	699b      	ldr	r3, [r3, #24]
 801e048:	4928      	ldr	r1, [pc, #160]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e04a:	4313      	orrs	r3, r2
 801e04c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801e04e:	4b27      	ldr	r3, [pc, #156]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e052:	4a26      	ldr	r2, [pc, #152]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e054:	f023 0310 	bic.w	r3, r3, #16
 801e058:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801e05a:	4b24      	ldr	r3, [pc, #144]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e05c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e05e:	4b24      	ldr	r3, [pc, #144]	@ (801e0f0 <RCCEx_PLL2_Config+0x160>)
 801e060:	4013      	ands	r3, r2
 801e062:	687a      	ldr	r2, [r7, #4]
 801e064:	69d2      	ldr	r2, [r2, #28]
 801e066:	00d2      	lsls	r2, r2, #3
 801e068:	4920      	ldr	r1, [pc, #128]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e06a:	4313      	orrs	r3, r2
 801e06c:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801e06e:	4b1f      	ldr	r3, [pc, #124]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e070:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e072:	4a1e      	ldr	r2, [pc, #120]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e074:	f043 0310 	orr.w	r3, r3, #16
 801e078:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e07a:	683b      	ldr	r3, [r7, #0]
 801e07c:	2b00      	cmp	r3, #0
 801e07e:	d106      	bne.n	801e08e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801e080:	4b1a      	ldr	r3, [pc, #104]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e082:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e084:	4a19      	ldr	r2, [pc, #100]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e086:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e08a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801e08c:	e00f      	b.n	801e0ae <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e08e:	683b      	ldr	r3, [r7, #0]
 801e090:	2b01      	cmp	r3, #1
 801e092:	d106      	bne.n	801e0a2 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801e094:	4b15      	ldr	r3, [pc, #84]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e098:	4a14      	ldr	r2, [pc, #80]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e09a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e09e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801e0a0:	e005      	b.n	801e0ae <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801e0a2:	4b12      	ldr	r3, [pc, #72]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e0a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e0a6:	4a11      	ldr	r2, [pc, #68]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e0a8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801e0ac:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801e0ae:	4b0f      	ldr	r3, [pc, #60]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e0b0:	681b      	ldr	r3, [r3, #0]
 801e0b2:	4a0e      	ldr	r2, [pc, #56]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e0b4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801e0b8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e0ba:	f7fb f815 	bl	80190e8 <HAL_GetTick>
 801e0be:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e0c0:	e008      	b.n	801e0d4 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e0c2:	f7fb f811 	bl	80190e8 <HAL_GetTick>
 801e0c6:	4602      	mov	r2, r0
 801e0c8:	68bb      	ldr	r3, [r7, #8]
 801e0ca:	1ad3      	subs	r3, r2, r3
 801e0cc:	2b02      	cmp	r3, #2
 801e0ce:	d901      	bls.n	801e0d4 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e0d0:	2303      	movs	r3, #3
 801e0d2:	e006      	b.n	801e0e2 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e0d4:	4b05      	ldr	r3, [pc, #20]	@ (801e0ec <RCCEx_PLL2_Config+0x15c>)
 801e0d6:	681b      	ldr	r3, [r3, #0]
 801e0d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e0dc:	2b00      	cmp	r3, #0
 801e0de:	d0f0      	beq.n	801e0c2 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801e0e0:	7bfb      	ldrb	r3, [r7, #15]
}
 801e0e2:	4618      	mov	r0, r3
 801e0e4:	3710      	adds	r7, #16
 801e0e6:	46bd      	mov	sp, r7
 801e0e8:	bd80      	pop	{r7, pc}
 801e0ea:	bf00      	nop
 801e0ec:	58024400 	.word	0x58024400
 801e0f0:	ffff0007 	.word	0xffff0007

0801e0f4 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801e0f4:	b580      	push	{r7, lr}
 801e0f6:	b084      	sub	sp, #16
 801e0f8:	af00      	add	r7, sp, #0
 801e0fa:	6078      	str	r0, [r7, #4]
 801e0fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e0fe:	2300      	movs	r3, #0
 801e100:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e102:	4b53      	ldr	r3, [pc, #332]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e104:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e106:	f003 0303 	and.w	r3, r3, #3
 801e10a:	2b03      	cmp	r3, #3
 801e10c:	d101      	bne.n	801e112 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801e10e:	2301      	movs	r3, #1
 801e110:	e099      	b.n	801e246 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801e112:	4b4f      	ldr	r3, [pc, #316]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e114:	681b      	ldr	r3, [r3, #0]
 801e116:	4a4e      	ldr	r2, [pc, #312]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e118:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801e11c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e11e:	f7fa ffe3 	bl	80190e8 <HAL_GetTick>
 801e122:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e124:	e008      	b.n	801e138 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e126:	f7fa ffdf 	bl	80190e8 <HAL_GetTick>
 801e12a:	4602      	mov	r2, r0
 801e12c:	68bb      	ldr	r3, [r7, #8]
 801e12e:	1ad3      	subs	r3, r2, r3
 801e130:	2b02      	cmp	r3, #2
 801e132:	d901      	bls.n	801e138 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e134:	2303      	movs	r3, #3
 801e136:	e086      	b.n	801e246 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e138:	4b45      	ldr	r3, [pc, #276]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e13a:	681b      	ldr	r3, [r3, #0]
 801e13c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e140:	2b00      	cmp	r3, #0
 801e142:	d1f0      	bne.n	801e126 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801e144:	4b42      	ldr	r3, [pc, #264]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e146:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e148:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801e14c:	687b      	ldr	r3, [r7, #4]
 801e14e:	681b      	ldr	r3, [r3, #0]
 801e150:	051b      	lsls	r3, r3, #20
 801e152:	493f      	ldr	r1, [pc, #252]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e154:	4313      	orrs	r3, r2
 801e156:	628b      	str	r3, [r1, #40]	@ 0x28
 801e158:	687b      	ldr	r3, [r7, #4]
 801e15a:	685b      	ldr	r3, [r3, #4]
 801e15c:	3b01      	subs	r3, #1
 801e15e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e162:	687b      	ldr	r3, [r7, #4]
 801e164:	689b      	ldr	r3, [r3, #8]
 801e166:	3b01      	subs	r3, #1
 801e168:	025b      	lsls	r3, r3, #9
 801e16a:	b29b      	uxth	r3, r3
 801e16c:	431a      	orrs	r2, r3
 801e16e:	687b      	ldr	r3, [r7, #4]
 801e170:	68db      	ldr	r3, [r3, #12]
 801e172:	3b01      	subs	r3, #1
 801e174:	041b      	lsls	r3, r3, #16
 801e176:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801e17a:	431a      	orrs	r2, r3
 801e17c:	687b      	ldr	r3, [r7, #4]
 801e17e:	691b      	ldr	r3, [r3, #16]
 801e180:	3b01      	subs	r3, #1
 801e182:	061b      	lsls	r3, r3, #24
 801e184:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801e188:	4931      	ldr	r1, [pc, #196]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e18a:	4313      	orrs	r3, r2
 801e18c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801e18e:	4b30      	ldr	r3, [pc, #192]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e190:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e192:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801e196:	687b      	ldr	r3, [r7, #4]
 801e198:	695b      	ldr	r3, [r3, #20]
 801e19a:	492d      	ldr	r1, [pc, #180]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e19c:	4313      	orrs	r3, r2
 801e19e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801e1a0:	4b2b      	ldr	r3, [pc, #172]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e1a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e1a4:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801e1a8:	687b      	ldr	r3, [r7, #4]
 801e1aa:	699b      	ldr	r3, [r3, #24]
 801e1ac:	4928      	ldr	r1, [pc, #160]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e1ae:	4313      	orrs	r3, r2
 801e1b0:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801e1b2:	4b27      	ldr	r3, [pc, #156]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e1b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e1b6:	4a26      	ldr	r2, [pc, #152]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e1b8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e1bc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801e1be:	4b24      	ldr	r3, [pc, #144]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e1c0:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e1c2:	4b24      	ldr	r3, [pc, #144]	@ (801e254 <RCCEx_PLL3_Config+0x160>)
 801e1c4:	4013      	ands	r3, r2
 801e1c6:	687a      	ldr	r2, [r7, #4]
 801e1c8:	69d2      	ldr	r2, [r2, #28]
 801e1ca:	00d2      	lsls	r2, r2, #3
 801e1cc:	4920      	ldr	r1, [pc, #128]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e1ce:	4313      	orrs	r3, r2
 801e1d0:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801e1d2:	4b1f      	ldr	r3, [pc, #124]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e1d6:	4a1e      	ldr	r2, [pc, #120]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e1d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801e1dc:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e1de:	683b      	ldr	r3, [r7, #0]
 801e1e0:	2b00      	cmp	r3, #0
 801e1e2:	d106      	bne.n	801e1f2 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801e1e4:	4b1a      	ldr	r3, [pc, #104]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e1e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e1e8:	4a19      	ldr	r2, [pc, #100]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e1ea:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801e1ee:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801e1f0:	e00f      	b.n	801e212 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e1f2:	683b      	ldr	r3, [r7, #0]
 801e1f4:	2b01      	cmp	r3, #1
 801e1f6:	d106      	bne.n	801e206 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801e1f8:	4b15      	ldr	r3, [pc, #84]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e1fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e1fc:	4a14      	ldr	r2, [pc, #80]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e1fe:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801e202:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801e204:	e005      	b.n	801e212 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801e206:	4b12      	ldr	r3, [pc, #72]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e208:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e20a:	4a11      	ldr	r2, [pc, #68]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e20c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801e210:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801e212:	4b0f      	ldr	r3, [pc, #60]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e214:	681b      	ldr	r3, [r3, #0]
 801e216:	4a0e      	ldr	r2, [pc, #56]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e218:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801e21c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e21e:	f7fa ff63 	bl	80190e8 <HAL_GetTick>
 801e222:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e224:	e008      	b.n	801e238 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e226:	f7fa ff5f 	bl	80190e8 <HAL_GetTick>
 801e22a:	4602      	mov	r2, r0
 801e22c:	68bb      	ldr	r3, [r7, #8]
 801e22e:	1ad3      	subs	r3, r2, r3
 801e230:	2b02      	cmp	r3, #2
 801e232:	d901      	bls.n	801e238 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e234:	2303      	movs	r3, #3
 801e236:	e006      	b.n	801e246 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e238:	4b05      	ldr	r3, [pc, #20]	@ (801e250 <RCCEx_PLL3_Config+0x15c>)
 801e23a:	681b      	ldr	r3, [r3, #0]
 801e23c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e240:	2b00      	cmp	r3, #0
 801e242:	d0f0      	beq.n	801e226 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801e244:	7bfb      	ldrb	r3, [r7, #15]
}
 801e246:	4618      	mov	r0, r3
 801e248:	3710      	adds	r7, #16
 801e24a:	46bd      	mov	sp, r7
 801e24c:	bd80      	pop	{r7, pc}
 801e24e:	bf00      	nop
 801e250:	58024400 	.word	0x58024400
 801e254:	ffff0007 	.word	0xffff0007

0801e258 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801e258:	b580      	push	{r7, lr}
 801e25a:	b084      	sub	sp, #16
 801e25c:	af00      	add	r7, sp, #0
 801e25e:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801e260:	687b      	ldr	r3, [r7, #4]
 801e262:	2b00      	cmp	r3, #0
 801e264:	d101      	bne.n	801e26a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801e266:	2301      	movs	r3, #1
 801e268:	e10f      	b.n	801e48a <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801e26a:	687b      	ldr	r3, [r7, #4]
 801e26c:	2200      	movs	r2, #0
 801e26e:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801e270:	687b      	ldr	r3, [r7, #4]
 801e272:	681b      	ldr	r3, [r3, #0]
 801e274:	4a87      	ldr	r2, [pc, #540]	@ (801e494 <HAL_SPI_Init+0x23c>)
 801e276:	4293      	cmp	r3, r2
 801e278:	d00f      	beq.n	801e29a <HAL_SPI_Init+0x42>
 801e27a:	687b      	ldr	r3, [r7, #4]
 801e27c:	681b      	ldr	r3, [r3, #0]
 801e27e:	4a86      	ldr	r2, [pc, #536]	@ (801e498 <HAL_SPI_Init+0x240>)
 801e280:	4293      	cmp	r3, r2
 801e282:	d00a      	beq.n	801e29a <HAL_SPI_Init+0x42>
 801e284:	687b      	ldr	r3, [r7, #4]
 801e286:	681b      	ldr	r3, [r3, #0]
 801e288:	4a84      	ldr	r2, [pc, #528]	@ (801e49c <HAL_SPI_Init+0x244>)
 801e28a:	4293      	cmp	r3, r2
 801e28c:	d005      	beq.n	801e29a <HAL_SPI_Init+0x42>
 801e28e:	687b      	ldr	r3, [r7, #4]
 801e290:	68db      	ldr	r3, [r3, #12]
 801e292:	2b0f      	cmp	r3, #15
 801e294:	d901      	bls.n	801e29a <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801e296:	2301      	movs	r3, #1
 801e298:	e0f7      	b.n	801e48a <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801e29a:	6878      	ldr	r0, [r7, #4]
 801e29c:	f000 fbba 	bl	801ea14 <SPI_GetPacketSize>
 801e2a0:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801e2a2:	687b      	ldr	r3, [r7, #4]
 801e2a4:	681b      	ldr	r3, [r3, #0]
 801e2a6:	4a7b      	ldr	r2, [pc, #492]	@ (801e494 <HAL_SPI_Init+0x23c>)
 801e2a8:	4293      	cmp	r3, r2
 801e2aa:	d00c      	beq.n	801e2c6 <HAL_SPI_Init+0x6e>
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	4a79      	ldr	r2, [pc, #484]	@ (801e498 <HAL_SPI_Init+0x240>)
 801e2b2:	4293      	cmp	r3, r2
 801e2b4:	d007      	beq.n	801e2c6 <HAL_SPI_Init+0x6e>
 801e2b6:	687b      	ldr	r3, [r7, #4]
 801e2b8:	681b      	ldr	r3, [r3, #0]
 801e2ba:	4a78      	ldr	r2, [pc, #480]	@ (801e49c <HAL_SPI_Init+0x244>)
 801e2bc:	4293      	cmp	r3, r2
 801e2be:	d002      	beq.n	801e2c6 <HAL_SPI_Init+0x6e>
 801e2c0:	68fb      	ldr	r3, [r7, #12]
 801e2c2:	2b08      	cmp	r3, #8
 801e2c4:	d811      	bhi.n	801e2ea <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801e2c6:	687b      	ldr	r3, [r7, #4]
 801e2c8:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801e2ca:	4a72      	ldr	r2, [pc, #456]	@ (801e494 <HAL_SPI_Init+0x23c>)
 801e2cc:	4293      	cmp	r3, r2
 801e2ce:	d009      	beq.n	801e2e4 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801e2d0:	687b      	ldr	r3, [r7, #4]
 801e2d2:	681b      	ldr	r3, [r3, #0]
 801e2d4:	4a70      	ldr	r2, [pc, #448]	@ (801e498 <HAL_SPI_Init+0x240>)
 801e2d6:	4293      	cmp	r3, r2
 801e2d8:	d004      	beq.n	801e2e4 <HAL_SPI_Init+0x8c>
 801e2da:	687b      	ldr	r3, [r7, #4]
 801e2dc:	681b      	ldr	r3, [r3, #0]
 801e2de:	4a6f      	ldr	r2, [pc, #444]	@ (801e49c <HAL_SPI_Init+0x244>)
 801e2e0:	4293      	cmp	r3, r2
 801e2e2:	d104      	bne.n	801e2ee <HAL_SPI_Init+0x96>
 801e2e4:	68fb      	ldr	r3, [r7, #12]
 801e2e6:	2b10      	cmp	r3, #16
 801e2e8:	d901      	bls.n	801e2ee <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801e2ea:	2301      	movs	r3, #1
 801e2ec:	e0cd      	b.n	801e48a <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801e2ee:	687b      	ldr	r3, [r7, #4]
 801e2f0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801e2f4:	b2db      	uxtb	r3, r3
 801e2f6:	2b00      	cmp	r3, #0
 801e2f8:	d106      	bne.n	801e308 <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	2200      	movs	r2, #0
 801e2fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801e302:	6878      	ldr	r0, [r7, #4]
 801e304:	f7e3 fa26 	bl	8001754 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	2202      	movs	r2, #2
 801e30c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801e310:	687b      	ldr	r3, [r7, #4]
 801e312:	681b      	ldr	r3, [r3, #0]
 801e314:	681a      	ldr	r2, [r3, #0]
 801e316:	687b      	ldr	r3, [r7, #4]
 801e318:	681b      	ldr	r3, [r3, #0]
 801e31a:	f022 0201 	bic.w	r2, r2, #1
 801e31e:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801e320:	687b      	ldr	r3, [r7, #4]
 801e322:	681b      	ldr	r3, [r3, #0]
 801e324:	689b      	ldr	r3, [r3, #8]
 801e326:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801e32a:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801e32c:	687b      	ldr	r3, [r7, #4]
 801e32e:	699b      	ldr	r3, [r3, #24]
 801e330:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e334:	d119      	bne.n	801e36a <HAL_SPI_Init+0x112>
 801e336:	687b      	ldr	r3, [r7, #4]
 801e338:	685b      	ldr	r3, [r3, #4]
 801e33a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801e33e:	d103      	bne.n	801e348 <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801e340:	687b      	ldr	r3, [r7, #4]
 801e342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801e344:	2b00      	cmp	r3, #0
 801e346:	d008      	beq.n	801e35a <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801e348:	687b      	ldr	r3, [r7, #4]
 801e34a:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801e34c:	2b00      	cmp	r3, #0
 801e34e:	d10c      	bne.n	801e36a <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801e350:	687b      	ldr	r3, [r7, #4]
 801e352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801e354:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801e358:	d107      	bne.n	801e36a <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801e35a:	687b      	ldr	r3, [r7, #4]
 801e35c:	681b      	ldr	r3, [r3, #0]
 801e35e:	681a      	ldr	r2, [r3, #0]
 801e360:	687b      	ldr	r3, [r7, #4]
 801e362:	681b      	ldr	r3, [r3, #0]
 801e364:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801e368:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801e36a:	687b      	ldr	r3, [r7, #4]
 801e36c:	685b      	ldr	r3, [r3, #4]
 801e36e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801e372:	2b00      	cmp	r3, #0
 801e374:	d00f      	beq.n	801e396 <HAL_SPI_Init+0x13e>
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	68db      	ldr	r3, [r3, #12]
 801e37a:	2b06      	cmp	r3, #6
 801e37c:	d90b      	bls.n	801e396 <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801e37e:	687b      	ldr	r3, [r7, #4]
 801e380:	681b      	ldr	r3, [r3, #0]
 801e382:	681b      	ldr	r3, [r3, #0]
 801e384:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e38c:	687b      	ldr	r3, [r7, #4]
 801e38e:	681b      	ldr	r3, [r3, #0]
 801e390:	430a      	orrs	r2, r1
 801e392:	601a      	str	r2, [r3, #0]
 801e394:	e007      	b.n	801e3a6 <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801e396:	687b      	ldr	r3, [r7, #4]
 801e398:	681b      	ldr	r3, [r3, #0]
 801e39a:	681a      	ldr	r2, [r3, #0]
 801e39c:	687b      	ldr	r3, [r7, #4]
 801e39e:	681b      	ldr	r3, [r3, #0]
 801e3a0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801e3a4:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801e3a6:	687b      	ldr	r3, [r7, #4]
 801e3a8:	69da      	ldr	r2, [r3, #28]
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e3ae:	431a      	orrs	r2, r3
 801e3b0:	68bb      	ldr	r3, [r7, #8]
 801e3b2:	431a      	orrs	r2, r3
 801e3b4:	687b      	ldr	r3, [r7, #4]
 801e3b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e3b8:	ea42 0103 	orr.w	r1, r2, r3
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	68da      	ldr	r2, [r3, #12]
 801e3c0:	687b      	ldr	r3, [r7, #4]
 801e3c2:	681b      	ldr	r3, [r3, #0]
 801e3c4:	430a      	orrs	r2, r1
 801e3c6:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801e3c8:	687b      	ldr	r3, [r7, #4]
 801e3ca:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801e3cc:	687b      	ldr	r3, [r7, #4]
 801e3ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e3d0:	431a      	orrs	r2, r3
 801e3d2:	687b      	ldr	r3, [r7, #4]
 801e3d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e3d6:	431a      	orrs	r2, r3
 801e3d8:	687b      	ldr	r3, [r7, #4]
 801e3da:	699b      	ldr	r3, [r3, #24]
 801e3dc:	431a      	orrs	r2, r3
 801e3de:	687b      	ldr	r3, [r7, #4]
 801e3e0:	691b      	ldr	r3, [r3, #16]
 801e3e2:	431a      	orrs	r2, r3
 801e3e4:	687b      	ldr	r3, [r7, #4]
 801e3e6:	695b      	ldr	r3, [r3, #20]
 801e3e8:	431a      	orrs	r2, r3
 801e3ea:	687b      	ldr	r3, [r7, #4]
 801e3ec:	6a1b      	ldr	r3, [r3, #32]
 801e3ee:	431a      	orrs	r2, r3
 801e3f0:	687b      	ldr	r3, [r7, #4]
 801e3f2:	685b      	ldr	r3, [r3, #4]
 801e3f4:	431a      	orrs	r2, r3
 801e3f6:	687b      	ldr	r3, [r7, #4]
 801e3f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e3fa:	431a      	orrs	r2, r3
 801e3fc:	687b      	ldr	r3, [r7, #4]
 801e3fe:	689b      	ldr	r3, [r3, #8]
 801e400:	431a      	orrs	r2, r3
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801e406:	ea42 0103 	orr.w	r1, r2, r3
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801e40e:	687b      	ldr	r3, [r7, #4]
 801e410:	681b      	ldr	r3, [r3, #0]
 801e412:	430a      	orrs	r2, r1
 801e414:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801e416:	687b      	ldr	r3, [r7, #4]
 801e418:	685b      	ldr	r3, [r3, #4]
 801e41a:	2b00      	cmp	r3, #0
 801e41c:	d113      	bne.n	801e446 <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801e41e:	687b      	ldr	r3, [r7, #4]
 801e420:	681b      	ldr	r3, [r3, #0]
 801e422:	689b      	ldr	r3, [r3, #8]
 801e424:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801e428:	687b      	ldr	r3, [r7, #4]
 801e42a:	681b      	ldr	r3, [r3, #0]
 801e42c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801e430:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801e432:	687b      	ldr	r3, [r7, #4]
 801e434:	681b      	ldr	r3, [r3, #0]
 801e436:	689b      	ldr	r3, [r3, #8]
 801e438:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801e43c:	687b      	ldr	r3, [r7, #4]
 801e43e:	681b      	ldr	r3, [r3, #0]
 801e440:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801e444:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801e446:	687b      	ldr	r3, [r7, #4]
 801e448:	681b      	ldr	r3, [r3, #0]
 801e44a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801e44c:	687b      	ldr	r3, [r7, #4]
 801e44e:	681b      	ldr	r3, [r3, #0]
 801e450:	f022 0201 	bic.w	r2, r2, #1
 801e454:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801e456:	687b      	ldr	r3, [r7, #4]
 801e458:	685b      	ldr	r3, [r3, #4]
 801e45a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801e45e:	2b00      	cmp	r3, #0
 801e460:	d00a      	beq.n	801e478 <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801e462:	687b      	ldr	r3, [r7, #4]
 801e464:	681b      	ldr	r3, [r3, #0]
 801e466:	68db      	ldr	r3, [r3, #12]
 801e468:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801e46c:	687b      	ldr	r3, [r7, #4]
 801e46e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	681b      	ldr	r3, [r3, #0]
 801e474:	430a      	orrs	r2, r1
 801e476:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	2200      	movs	r2, #0
 801e47c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801e480:	687b      	ldr	r3, [r7, #4]
 801e482:	2201      	movs	r2, #1
 801e484:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801e488:	2300      	movs	r3, #0
}
 801e48a:	4618      	mov	r0, r3
 801e48c:	3710      	adds	r7, #16
 801e48e:	46bd      	mov	sp, r7
 801e490:	bd80      	pop	{r7, pc}
 801e492:	bf00      	nop
 801e494:	40013000 	.word	0x40013000
 801e498:	40003800 	.word	0x40003800
 801e49c:	40003c00 	.word	0x40003c00

0801e4a0 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801e4a0:	b580      	push	{r7, lr}
 801e4a2:	b08a      	sub	sp, #40	@ 0x28
 801e4a4:	af00      	add	r7, sp, #0
 801e4a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	681b      	ldr	r3, [r3, #0]
 801e4ac:	691b      	ldr	r3, [r3, #16]
 801e4ae:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801e4b0:	687b      	ldr	r3, [r7, #4]
 801e4b2:	681b      	ldr	r3, [r3, #0]
 801e4b4:	695b      	ldr	r3, [r3, #20]
 801e4b6:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801e4b8:	6a3a      	ldr	r2, [r7, #32]
 801e4ba:	69fb      	ldr	r3, [r7, #28]
 801e4bc:	4013      	ands	r3, r2
 801e4be:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801e4c0:	687b      	ldr	r3, [r7, #4]
 801e4c2:	681b      	ldr	r3, [r3, #0]
 801e4c4:	689b      	ldr	r3, [r3, #8]
 801e4c6:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801e4c8:	2300      	movs	r3, #0
 801e4ca:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801e4cc:	687b      	ldr	r3, [r7, #4]
 801e4ce:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801e4d2:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801e4d4:	687b      	ldr	r3, [r7, #4]
 801e4d6:	681b      	ldr	r3, [r3, #0]
 801e4d8:	3330      	adds	r3, #48	@ 0x30
 801e4da:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801e4dc:	69fb      	ldr	r3, [r7, #28]
 801e4de:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801e4e2:	2b00      	cmp	r3, #0
 801e4e4:	d010      	beq.n	801e508 <HAL_SPI_IRQHandler+0x68>
 801e4e6:	6a3b      	ldr	r3, [r7, #32]
 801e4e8:	f003 0308 	and.w	r3, r3, #8
 801e4ec:	2b00      	cmp	r3, #0
 801e4ee:	d00b      	beq.n	801e508 <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801e4f0:	687b      	ldr	r3, [r7, #4]
 801e4f2:	681b      	ldr	r3, [r3, #0]
 801e4f4:	699a      	ldr	r2, [r3, #24]
 801e4f6:	687b      	ldr	r3, [r7, #4]
 801e4f8:	681b      	ldr	r3, [r3, #0]
 801e4fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801e4fe:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801e500:	6878      	ldr	r0, [r7, #4]
 801e502:	f000 f9c3 	bl	801e88c <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801e506:	e192      	b.n	801e82e <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801e508:	69bb      	ldr	r3, [r7, #24]
 801e50a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e50e:	2b00      	cmp	r3, #0
 801e510:	d113      	bne.n	801e53a <HAL_SPI_IRQHandler+0x9a>
 801e512:	69bb      	ldr	r3, [r7, #24]
 801e514:	f003 0320 	and.w	r3, r3, #32
 801e518:	2b00      	cmp	r3, #0
 801e51a:	d10e      	bne.n	801e53a <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801e51c:	69bb      	ldr	r3, [r7, #24]
 801e51e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801e522:	2b00      	cmp	r3, #0
 801e524:	d009      	beq.n	801e53a <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801e526:	687b      	ldr	r3, [r7, #4]
 801e528:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e52a:	6878      	ldr	r0, [r7, #4]
 801e52c:	4798      	blx	r3
    hspi->RxISR(hspi);
 801e52e:	687b      	ldr	r3, [r7, #4]
 801e530:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e532:	6878      	ldr	r0, [r7, #4]
 801e534:	4798      	blx	r3
    handled = 1UL;
 801e536:	2301      	movs	r3, #1
 801e538:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801e53a:	69bb      	ldr	r3, [r7, #24]
 801e53c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e540:	2b00      	cmp	r3, #0
 801e542:	d10f      	bne.n	801e564 <HAL_SPI_IRQHandler+0xc4>
 801e544:	69bb      	ldr	r3, [r7, #24]
 801e546:	f003 0301 	and.w	r3, r3, #1
 801e54a:	2b00      	cmp	r3, #0
 801e54c:	d00a      	beq.n	801e564 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801e54e:	69bb      	ldr	r3, [r7, #24]
 801e550:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801e554:	2b00      	cmp	r3, #0
 801e556:	d105      	bne.n	801e564 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801e558:	687b      	ldr	r3, [r7, #4]
 801e55a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e55c:	6878      	ldr	r0, [r7, #4]
 801e55e:	4798      	blx	r3
    handled = 1UL;
 801e560:	2301      	movs	r3, #1
 801e562:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801e564:	69bb      	ldr	r3, [r7, #24]
 801e566:	f003 0320 	and.w	r3, r3, #32
 801e56a:	2b00      	cmp	r3, #0
 801e56c:	d10f      	bne.n	801e58e <HAL_SPI_IRQHandler+0xee>
 801e56e:	69bb      	ldr	r3, [r7, #24]
 801e570:	f003 0302 	and.w	r3, r3, #2
 801e574:	2b00      	cmp	r3, #0
 801e576:	d00a      	beq.n	801e58e <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801e578:	69bb      	ldr	r3, [r7, #24]
 801e57a:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801e57e:	2b00      	cmp	r3, #0
 801e580:	d105      	bne.n	801e58e <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801e582:	687b      	ldr	r3, [r7, #4]
 801e584:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e586:	6878      	ldr	r0, [r7, #4]
 801e588:	4798      	blx	r3
    handled = 1UL;
 801e58a:	2301      	movs	r3, #1
 801e58c:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801e58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e590:	2b00      	cmp	r3, #0
 801e592:	f040 8147 	bne.w	801e824 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801e596:	69bb      	ldr	r3, [r7, #24]
 801e598:	f003 0308 	and.w	r3, r3, #8
 801e59c:	2b00      	cmp	r3, #0
 801e59e:	f000 808b 	beq.w	801e6b8 <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801e5a2:	687b      	ldr	r3, [r7, #4]
 801e5a4:	681b      	ldr	r3, [r3, #0]
 801e5a6:	699a      	ldr	r2, [r3, #24]
 801e5a8:	687b      	ldr	r3, [r7, #4]
 801e5aa:	681b      	ldr	r3, [r3, #0]
 801e5ac:	f042 0208 	orr.w	r2, r2, #8
 801e5b0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801e5b2:	687b      	ldr	r3, [r7, #4]
 801e5b4:	681b      	ldr	r3, [r3, #0]
 801e5b6:	699a      	ldr	r2, [r3, #24]
 801e5b8:	687b      	ldr	r3, [r7, #4]
 801e5ba:	681b      	ldr	r3, [r3, #0]
 801e5bc:	f042 0210 	orr.w	r2, r2, #16
 801e5c0:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801e5c2:	687b      	ldr	r3, [r7, #4]
 801e5c4:	681b      	ldr	r3, [r3, #0]
 801e5c6:	699a      	ldr	r2, [r3, #24]
 801e5c8:	687b      	ldr	r3, [r7, #4]
 801e5ca:	681b      	ldr	r3, [r3, #0]
 801e5cc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801e5d0:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801e5d2:	687b      	ldr	r3, [r7, #4]
 801e5d4:	681b      	ldr	r3, [r3, #0]
 801e5d6:	691a      	ldr	r2, [r3, #16]
 801e5d8:	687b      	ldr	r3, [r7, #4]
 801e5da:	681b      	ldr	r3, [r3, #0]
 801e5dc:	f022 0208 	bic.w	r2, r2, #8
 801e5e0:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801e5e2:	687b      	ldr	r3, [r7, #4]
 801e5e4:	681b      	ldr	r3, [r3, #0]
 801e5e6:	689b      	ldr	r3, [r3, #8]
 801e5e8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801e5ec:	2b00      	cmp	r3, #0
 801e5ee:	d13d      	bne.n	801e66c <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801e5f0:	e036      	b.n	801e660 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801e5f2:	687b      	ldr	r3, [r7, #4]
 801e5f4:	68db      	ldr	r3, [r3, #12]
 801e5f6:	2b0f      	cmp	r3, #15
 801e5f8:	d90b      	bls.n	801e612 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801e5fa:	687b      	ldr	r3, [r7, #4]
 801e5fc:	681a      	ldr	r2, [r3, #0]
 801e5fe:	687b      	ldr	r3, [r7, #4]
 801e600:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e602:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801e604:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801e606:	687b      	ldr	r3, [r7, #4]
 801e608:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e60a:	1d1a      	adds	r2, r3, #4
 801e60c:	687b      	ldr	r3, [r7, #4]
 801e60e:	665a      	str	r2, [r3, #100]	@ 0x64
 801e610:	e01d      	b.n	801e64e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801e612:	687b      	ldr	r3, [r7, #4]
 801e614:	68db      	ldr	r3, [r3, #12]
 801e616:	2b07      	cmp	r3, #7
 801e618:	d90b      	bls.n	801e632 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801e61a:	687b      	ldr	r3, [r7, #4]
 801e61c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e61e:	68fa      	ldr	r2, [r7, #12]
 801e620:	8812      	ldrh	r2, [r2, #0]
 801e622:	b292      	uxth	r2, r2
 801e624:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801e626:	687b      	ldr	r3, [r7, #4]
 801e628:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e62a:	1c9a      	adds	r2, r3, #2
 801e62c:	687b      	ldr	r3, [r7, #4]
 801e62e:	665a      	str	r2, [r3, #100]	@ 0x64
 801e630:	e00d      	b.n	801e64e <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801e632:	687b      	ldr	r3, [r7, #4]
 801e634:	681b      	ldr	r3, [r3, #0]
 801e636:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801e63a:	687b      	ldr	r3, [r7, #4]
 801e63c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e63e:	7812      	ldrb	r2, [r2, #0]
 801e640:	b2d2      	uxtb	r2, r2
 801e642:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801e644:	687b      	ldr	r3, [r7, #4]
 801e646:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801e648:	1c5a      	adds	r2, r3, #1
 801e64a:	687b      	ldr	r3, [r7, #4]
 801e64c:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801e64e:	687b      	ldr	r3, [r7, #4]
 801e650:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801e654:	b29b      	uxth	r3, r3
 801e656:	3b01      	subs	r3, #1
 801e658:	b29a      	uxth	r2, r3
 801e65a:	687b      	ldr	r3, [r7, #4]
 801e65c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801e660:	687b      	ldr	r3, [r7, #4]
 801e662:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801e666:	b29b      	uxth	r3, r3
 801e668:	2b00      	cmp	r3, #0
 801e66a:	d1c2      	bne.n	801e5f2 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801e66c:	6878      	ldr	r0, [r7, #4]
 801e66e:	f000 f931 	bl	801e8d4 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	2201      	movs	r2, #1
 801e676:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e67a:	687b      	ldr	r3, [r7, #4]
 801e67c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e680:	2b00      	cmp	r3, #0
 801e682:	d003      	beq.n	801e68c <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801e684:	6878      	ldr	r0, [r7, #4]
 801e686:	f000 f8f7 	bl	801e878 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801e68a:	e0d0      	b.n	801e82e <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801e68c:	7cfb      	ldrb	r3, [r7, #19]
 801e68e:	2b05      	cmp	r3, #5
 801e690:	d103      	bne.n	801e69a <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801e692:	6878      	ldr	r0, [r7, #4]
 801e694:	f000 f8e6 	bl	801e864 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801e698:	e0c6      	b.n	801e828 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801e69a:	7cfb      	ldrb	r3, [r7, #19]
 801e69c:	2b04      	cmp	r3, #4
 801e69e:	d103      	bne.n	801e6a8 <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801e6a0:	6878      	ldr	r0, [r7, #4]
 801e6a2:	f000 f8d5 	bl	801e850 <HAL_SPI_RxCpltCallback>
    return;
 801e6a6:	e0bf      	b.n	801e828 <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801e6a8:	7cfb      	ldrb	r3, [r7, #19]
 801e6aa:	2b03      	cmp	r3, #3
 801e6ac:	f040 80bc 	bne.w	801e828 <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801e6b0:	6878      	ldr	r0, [r7, #4]
 801e6b2:	f000 f8c3 	bl	801e83c <HAL_SPI_TxCpltCallback>
    return;
 801e6b6:	e0b7      	b.n	801e828 <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801e6b8:	69bb      	ldr	r3, [r7, #24]
 801e6ba:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801e6be:	2b00      	cmp	r3, #0
 801e6c0:	f000 80b5 	beq.w	801e82e <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801e6c4:	69bb      	ldr	r3, [r7, #24]
 801e6c6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e6ca:	2b00      	cmp	r3, #0
 801e6cc:	d00f      	beq.n	801e6ee <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801e6ce:	687b      	ldr	r3, [r7, #4]
 801e6d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e6d4:	f043 0204 	orr.w	r2, r3, #4
 801e6d8:	687b      	ldr	r3, [r7, #4]
 801e6da:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801e6de:	687b      	ldr	r3, [r7, #4]
 801e6e0:	681b      	ldr	r3, [r3, #0]
 801e6e2:	699a      	ldr	r2, [r3, #24]
 801e6e4:	687b      	ldr	r3, [r7, #4]
 801e6e6:	681b      	ldr	r3, [r3, #0]
 801e6e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801e6ec:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801e6ee:	69bb      	ldr	r3, [r7, #24]
 801e6f0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801e6f4:	2b00      	cmp	r3, #0
 801e6f6:	d00f      	beq.n	801e718 <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801e6f8:	687b      	ldr	r3, [r7, #4]
 801e6fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e6fe:	f043 0201 	orr.w	r2, r3, #1
 801e702:	687b      	ldr	r3, [r7, #4]
 801e704:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801e708:	687b      	ldr	r3, [r7, #4]
 801e70a:	681b      	ldr	r3, [r3, #0]
 801e70c:	699a      	ldr	r2, [r3, #24]
 801e70e:	687b      	ldr	r3, [r7, #4]
 801e710:	681b      	ldr	r3, [r3, #0]
 801e712:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801e716:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801e718:	69bb      	ldr	r3, [r7, #24]
 801e71a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e71e:	2b00      	cmp	r3, #0
 801e720:	d00f      	beq.n	801e742 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801e722:	687b      	ldr	r3, [r7, #4]
 801e724:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e728:	f043 0208 	orr.w	r2, r3, #8
 801e72c:	687b      	ldr	r3, [r7, #4]
 801e72e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801e732:	687b      	ldr	r3, [r7, #4]
 801e734:	681b      	ldr	r3, [r3, #0]
 801e736:	699a      	ldr	r2, [r3, #24]
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	681b      	ldr	r3, [r3, #0]
 801e73c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e740:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801e742:	69bb      	ldr	r3, [r7, #24]
 801e744:	f003 0320 	and.w	r3, r3, #32
 801e748:	2b00      	cmp	r3, #0
 801e74a:	d00f      	beq.n	801e76c <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801e74c:	687b      	ldr	r3, [r7, #4]
 801e74e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e752:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801e756:	687b      	ldr	r3, [r7, #4]
 801e758:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801e75c:	687b      	ldr	r3, [r7, #4]
 801e75e:	681b      	ldr	r3, [r3, #0]
 801e760:	699a      	ldr	r2, [r3, #24]
 801e762:	687b      	ldr	r3, [r7, #4]
 801e764:	681b      	ldr	r3, [r3, #0]
 801e766:	f042 0220 	orr.w	r2, r2, #32
 801e76a:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801e76c:	687b      	ldr	r3, [r7, #4]
 801e76e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e772:	2b00      	cmp	r3, #0
 801e774:	d05a      	beq.n	801e82c <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801e776:	687b      	ldr	r3, [r7, #4]
 801e778:	681b      	ldr	r3, [r3, #0]
 801e77a:	681a      	ldr	r2, [r3, #0]
 801e77c:	687b      	ldr	r3, [r7, #4]
 801e77e:	681b      	ldr	r3, [r3, #0]
 801e780:	f022 0201 	bic.w	r2, r2, #1
 801e784:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801e786:	687b      	ldr	r3, [r7, #4]
 801e788:	681b      	ldr	r3, [r3, #0]
 801e78a:	6919      	ldr	r1, [r3, #16]
 801e78c:	687b      	ldr	r3, [r7, #4]
 801e78e:	681a      	ldr	r2, [r3, #0]
 801e790:	4b28      	ldr	r3, [pc, #160]	@ (801e834 <HAL_SPI_IRQHandler+0x394>)
 801e792:	400b      	ands	r3, r1
 801e794:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801e796:	697b      	ldr	r3, [r7, #20]
 801e798:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801e79c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801e7a0:	d138      	bne.n	801e814 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801e7a2:	687b      	ldr	r3, [r7, #4]
 801e7a4:	681b      	ldr	r3, [r3, #0]
 801e7a6:	689a      	ldr	r2, [r3, #8]
 801e7a8:	687b      	ldr	r3, [r7, #4]
 801e7aa:	681b      	ldr	r3, [r3, #0]
 801e7ac:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801e7b0:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801e7b2:	687b      	ldr	r3, [r7, #4]
 801e7b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e7b6:	2b00      	cmp	r3, #0
 801e7b8:	d013      	beq.n	801e7e2 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801e7ba:	687b      	ldr	r3, [r7, #4]
 801e7bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e7be:	4a1e      	ldr	r2, [pc, #120]	@ (801e838 <HAL_SPI_IRQHandler+0x398>)
 801e7c0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801e7c2:	687b      	ldr	r3, [r7, #4]
 801e7c4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801e7c6:	4618      	mov	r0, r3
 801e7c8:	f7fb f99e 	bl	8019b08 <HAL_DMA_Abort_IT>
 801e7cc:	4603      	mov	r3, r0
 801e7ce:	2b00      	cmp	r3, #0
 801e7d0:	d007      	beq.n	801e7e2 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801e7d2:	687b      	ldr	r3, [r7, #4]
 801e7d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e7d8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801e7dc:	687b      	ldr	r3, [r7, #4]
 801e7de:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801e7e2:	687b      	ldr	r3, [r7, #4]
 801e7e4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e7e6:	2b00      	cmp	r3, #0
 801e7e8:	d020      	beq.n	801e82c <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801e7ea:	687b      	ldr	r3, [r7, #4]
 801e7ec:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e7ee:	4a12      	ldr	r2, [pc, #72]	@ (801e838 <HAL_SPI_IRQHandler+0x398>)
 801e7f0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801e7f2:	687b      	ldr	r3, [r7, #4]
 801e7f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e7f6:	4618      	mov	r0, r3
 801e7f8:	f7fb f986 	bl	8019b08 <HAL_DMA_Abort_IT>
 801e7fc:	4603      	mov	r3, r0
 801e7fe:	2b00      	cmp	r3, #0
 801e800:	d014      	beq.n	801e82c <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801e802:	687b      	ldr	r3, [r7, #4]
 801e804:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e808:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801e80c:	687b      	ldr	r3, [r7, #4]
 801e80e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801e812:	e00b      	b.n	801e82c <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 801e814:	687b      	ldr	r3, [r7, #4]
 801e816:	2201      	movs	r2, #1
 801e818:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 801e81c:	6878      	ldr	r0, [r7, #4]
 801e81e:	f000 f82b 	bl	801e878 <HAL_SPI_ErrorCallback>
    return;
 801e822:	e003      	b.n	801e82c <HAL_SPI_IRQHandler+0x38c>
    return;
 801e824:	bf00      	nop
 801e826:	e002      	b.n	801e82e <HAL_SPI_IRQHandler+0x38e>
    return;
 801e828:	bf00      	nop
 801e82a:	e000      	b.n	801e82e <HAL_SPI_IRQHandler+0x38e>
    return;
 801e82c:	bf00      	nop
  }
}
 801e82e:	3728      	adds	r7, #40	@ 0x28
 801e830:	46bd      	mov	sp, r7
 801e832:	bd80      	pop	{r7, pc}
 801e834:	fffffc94 	.word	0xfffffc94
 801e838:	0801e8a1 	.word	0x0801e8a1

0801e83c <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801e83c:	b480      	push	{r7}
 801e83e:	b083      	sub	sp, #12
 801e840:	af00      	add	r7, sp, #0
 801e842:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801e844:	bf00      	nop
 801e846:	370c      	adds	r7, #12
 801e848:	46bd      	mov	sp, r7
 801e84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e84e:	4770      	bx	lr

0801e850 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801e850:	b480      	push	{r7}
 801e852:	b083      	sub	sp, #12
 801e854:	af00      	add	r7, sp, #0
 801e856:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801e858:	bf00      	nop
 801e85a:	370c      	adds	r7, #12
 801e85c:	46bd      	mov	sp, r7
 801e85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e862:	4770      	bx	lr

0801e864 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801e864:	b480      	push	{r7}
 801e866:	b083      	sub	sp, #12
 801e868:	af00      	add	r7, sp, #0
 801e86a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801e86c:	bf00      	nop
 801e86e:	370c      	adds	r7, #12
 801e870:	46bd      	mov	sp, r7
 801e872:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e876:	4770      	bx	lr

0801e878 <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801e878:	b480      	push	{r7}
 801e87a:	b083      	sub	sp, #12
 801e87c:	af00      	add	r7, sp, #0
 801e87e:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801e880:	bf00      	nop
 801e882:	370c      	adds	r7, #12
 801e884:	46bd      	mov	sp, r7
 801e886:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e88a:	4770      	bx	lr

0801e88c <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801e88c:	b480      	push	{r7}
 801e88e:	b083      	sub	sp, #12
 801e890:	af00      	add	r7, sp, #0
 801e892:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801e894:	bf00      	nop
 801e896:	370c      	adds	r7, #12
 801e898:	46bd      	mov	sp, r7
 801e89a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e89e:	4770      	bx	lr

0801e8a0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801e8a0:	b580      	push	{r7, lr}
 801e8a2:	b084      	sub	sp, #16
 801e8a4:	af00      	add	r7, sp, #0
 801e8a6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801e8a8:	687b      	ldr	r3, [r7, #4]
 801e8aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e8ac:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801e8ae:	68fb      	ldr	r3, [r7, #12]
 801e8b0:	2200      	movs	r2, #0
 801e8b2:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801e8b6:	68fb      	ldr	r3, [r7, #12]
 801e8b8:	2200      	movs	r2, #0
 801e8ba:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801e8be:	68fb      	ldr	r3, [r7, #12]
 801e8c0:	2201      	movs	r2, #1
 801e8c2:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801e8c6:	68f8      	ldr	r0, [r7, #12]
 801e8c8:	f7ff ffd6 	bl	801e878 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801e8cc:	bf00      	nop
 801e8ce:	3710      	adds	r7, #16
 801e8d0:	46bd      	mov	sp, r7
 801e8d2:	bd80      	pop	{r7, pc}

0801e8d4 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801e8d4:	b480      	push	{r7}
 801e8d6:	b085      	sub	sp, #20
 801e8d8:	af00      	add	r7, sp, #0
 801e8da:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801e8dc:	687b      	ldr	r3, [r7, #4]
 801e8de:	681b      	ldr	r3, [r3, #0]
 801e8e0:	695b      	ldr	r3, [r3, #20]
 801e8e2:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801e8e4:	687b      	ldr	r3, [r7, #4]
 801e8e6:	681b      	ldr	r3, [r3, #0]
 801e8e8:	699a      	ldr	r2, [r3, #24]
 801e8ea:	687b      	ldr	r3, [r7, #4]
 801e8ec:	681b      	ldr	r3, [r3, #0]
 801e8ee:	f042 0208 	orr.w	r2, r2, #8
 801e8f2:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801e8f4:	687b      	ldr	r3, [r7, #4]
 801e8f6:	681b      	ldr	r3, [r3, #0]
 801e8f8:	699a      	ldr	r2, [r3, #24]
 801e8fa:	687b      	ldr	r3, [r7, #4]
 801e8fc:	681b      	ldr	r3, [r3, #0]
 801e8fe:	f042 0210 	orr.w	r2, r2, #16
 801e902:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801e904:	687b      	ldr	r3, [r7, #4]
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	681a      	ldr	r2, [r3, #0]
 801e90a:	687b      	ldr	r3, [r7, #4]
 801e90c:	681b      	ldr	r3, [r3, #0]
 801e90e:	f022 0201 	bic.w	r2, r2, #1
 801e912:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801e914:	687b      	ldr	r3, [r7, #4]
 801e916:	681b      	ldr	r3, [r3, #0]
 801e918:	6919      	ldr	r1, [r3, #16]
 801e91a:	687b      	ldr	r3, [r7, #4]
 801e91c:	681a      	ldr	r2, [r3, #0]
 801e91e:	4b3c      	ldr	r3, [pc, #240]	@ (801ea10 <SPI_CloseTransfer+0x13c>)
 801e920:	400b      	ands	r3, r1
 801e922:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801e924:	687b      	ldr	r3, [r7, #4]
 801e926:	681b      	ldr	r3, [r3, #0]
 801e928:	689a      	ldr	r2, [r3, #8]
 801e92a:	687b      	ldr	r3, [r7, #4]
 801e92c:	681b      	ldr	r3, [r3, #0]
 801e92e:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801e932:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801e934:	687b      	ldr	r3, [r7, #4]
 801e936:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801e93a:	b2db      	uxtb	r3, r3
 801e93c:	2b04      	cmp	r3, #4
 801e93e:	d014      	beq.n	801e96a <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801e940:	68fb      	ldr	r3, [r7, #12]
 801e942:	f003 0320 	and.w	r3, r3, #32
 801e946:	2b00      	cmp	r3, #0
 801e948:	d00f      	beq.n	801e96a <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801e94a:	687b      	ldr	r3, [r7, #4]
 801e94c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e950:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801e95a:	687b      	ldr	r3, [r7, #4]
 801e95c:	681b      	ldr	r3, [r3, #0]
 801e95e:	699a      	ldr	r2, [r3, #24]
 801e960:	687b      	ldr	r3, [r7, #4]
 801e962:	681b      	ldr	r3, [r3, #0]
 801e964:	f042 0220 	orr.w	r2, r2, #32
 801e968:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801e96a:	687b      	ldr	r3, [r7, #4]
 801e96c:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801e970:	b2db      	uxtb	r3, r3
 801e972:	2b03      	cmp	r3, #3
 801e974:	d014      	beq.n	801e9a0 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801e976:	68fb      	ldr	r3, [r7, #12]
 801e978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801e97c:	2b00      	cmp	r3, #0
 801e97e:	d00f      	beq.n	801e9a0 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801e980:	687b      	ldr	r3, [r7, #4]
 801e982:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e986:	f043 0204 	orr.w	r2, r3, #4
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801e990:	687b      	ldr	r3, [r7, #4]
 801e992:	681b      	ldr	r3, [r3, #0]
 801e994:	699a      	ldr	r2, [r3, #24]
 801e996:	687b      	ldr	r3, [r7, #4]
 801e998:	681b      	ldr	r3, [r3, #0]
 801e99a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801e99e:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801e9a0:	68fb      	ldr	r3, [r7, #12]
 801e9a2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801e9a6:	2b00      	cmp	r3, #0
 801e9a8:	d00f      	beq.n	801e9ca <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e9b0:	f043 0201 	orr.w	r2, r3, #1
 801e9b4:	687b      	ldr	r3, [r7, #4]
 801e9b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	681b      	ldr	r3, [r3, #0]
 801e9be:	699a      	ldr	r2, [r3, #24]
 801e9c0:	687b      	ldr	r3, [r7, #4]
 801e9c2:	681b      	ldr	r3, [r3, #0]
 801e9c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801e9c8:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801e9ca:	68fb      	ldr	r3, [r7, #12]
 801e9cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801e9d0:	2b00      	cmp	r3, #0
 801e9d2:	d00f      	beq.n	801e9f4 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801e9d4:	687b      	ldr	r3, [r7, #4]
 801e9d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e9da:	f043 0208 	orr.w	r2, r3, #8
 801e9de:	687b      	ldr	r3, [r7, #4]
 801e9e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801e9e4:	687b      	ldr	r3, [r7, #4]
 801e9e6:	681b      	ldr	r3, [r3, #0]
 801e9e8:	699a      	ldr	r2, [r3, #24]
 801e9ea:	687b      	ldr	r3, [r7, #4]
 801e9ec:	681b      	ldr	r3, [r3, #0]
 801e9ee:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801e9f2:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801e9f4:	687b      	ldr	r3, [r7, #4]
 801e9f6:	2200      	movs	r2, #0
 801e9f8:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	2200      	movs	r2, #0
 801ea00:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 801ea04:	bf00      	nop
 801ea06:	3714      	adds	r7, #20
 801ea08:	46bd      	mov	sp, r7
 801ea0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea0e:	4770      	bx	lr
 801ea10:	fffffc90 	.word	0xfffffc90

0801ea14 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801ea14:	b480      	push	{r7}
 801ea16:	b085      	sub	sp, #20
 801ea18:	af00      	add	r7, sp, #0
 801ea1a:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801ea1c:	687b      	ldr	r3, [r7, #4]
 801ea1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ea20:	095b      	lsrs	r3, r3, #5
 801ea22:	3301      	adds	r3, #1
 801ea24:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801ea26:	687b      	ldr	r3, [r7, #4]
 801ea28:	68db      	ldr	r3, [r3, #12]
 801ea2a:	3301      	adds	r3, #1
 801ea2c:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801ea2e:	68bb      	ldr	r3, [r7, #8]
 801ea30:	3307      	adds	r3, #7
 801ea32:	08db      	lsrs	r3, r3, #3
 801ea34:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801ea36:	68bb      	ldr	r3, [r7, #8]
 801ea38:	68fa      	ldr	r2, [r7, #12]
 801ea3a:	fb02 f303 	mul.w	r3, r2, r3
}
 801ea3e:	4618      	mov	r0, r3
 801ea40:	3714      	adds	r7, #20
 801ea42:	46bd      	mov	sp, r7
 801ea44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea48:	4770      	bx	lr

0801ea4a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801ea4a:	b580      	push	{r7, lr}
 801ea4c:	b082      	sub	sp, #8
 801ea4e:	af00      	add	r7, sp, #0
 801ea50:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801ea52:	687b      	ldr	r3, [r7, #4]
 801ea54:	2b00      	cmp	r3, #0
 801ea56:	d101      	bne.n	801ea5c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801ea58:	2301      	movs	r3, #1
 801ea5a:	e049      	b.n	801eaf0 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801ea5c:	687b      	ldr	r3, [r7, #4]
 801ea5e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801ea62:	b2db      	uxtb	r3, r3
 801ea64:	2b00      	cmp	r3, #0
 801ea66:	d106      	bne.n	801ea76 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801ea68:	687b      	ldr	r3, [r7, #4]
 801ea6a:	2200      	movs	r2, #0
 801ea6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801ea70:	6878      	ldr	r0, [r7, #4]
 801ea72:	f7e3 f801 	bl	8001a78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801ea76:	687b      	ldr	r3, [r7, #4]
 801ea78:	2202      	movs	r2, #2
 801ea7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801ea7e:	687b      	ldr	r3, [r7, #4]
 801ea80:	681a      	ldr	r2, [r3, #0]
 801ea82:	687b      	ldr	r3, [r7, #4]
 801ea84:	3304      	adds	r3, #4
 801ea86:	4619      	mov	r1, r3
 801ea88:	4610      	mov	r0, r2
 801ea8a:	f000 f9a5 	bl	801edd8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801ea8e:	687b      	ldr	r3, [r7, #4]
 801ea90:	2201      	movs	r2, #1
 801ea92:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801ea96:	687b      	ldr	r3, [r7, #4]
 801ea98:	2201      	movs	r2, #1
 801ea9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	2201      	movs	r2, #1
 801eaa2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801eaa6:	687b      	ldr	r3, [r7, #4]
 801eaa8:	2201      	movs	r2, #1
 801eaaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801eaae:	687b      	ldr	r3, [r7, #4]
 801eab0:	2201      	movs	r2, #1
 801eab2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801eab6:	687b      	ldr	r3, [r7, #4]
 801eab8:	2201      	movs	r2, #1
 801eaba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801eabe:	687b      	ldr	r3, [r7, #4]
 801eac0:	2201      	movs	r2, #1
 801eac2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	2201      	movs	r2, #1
 801eaca:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801eace:	687b      	ldr	r3, [r7, #4]
 801ead0:	2201      	movs	r2, #1
 801ead2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801ead6:	687b      	ldr	r3, [r7, #4]
 801ead8:	2201      	movs	r2, #1
 801eada:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801eade:	687b      	ldr	r3, [r7, #4]
 801eae0:	2201      	movs	r2, #1
 801eae2:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801eae6:	687b      	ldr	r3, [r7, #4]
 801eae8:	2201      	movs	r2, #1
 801eaea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801eaee:	2300      	movs	r3, #0
}
 801eaf0:	4618      	mov	r0, r3
 801eaf2:	3708      	adds	r7, #8
 801eaf4:	46bd      	mov	sp, r7
 801eaf6:	bd80      	pop	{r7, pc}

0801eaf8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801eaf8:	b480      	push	{r7}
 801eafa:	b085      	sub	sp, #20
 801eafc:	af00      	add	r7, sp, #0
 801eafe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801eb00:	687b      	ldr	r3, [r7, #4]
 801eb02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801eb06:	b2db      	uxtb	r3, r3
 801eb08:	2b01      	cmp	r3, #1
 801eb0a:	d001      	beq.n	801eb10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801eb0c:	2301      	movs	r3, #1
 801eb0e:	e054      	b.n	801ebba <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801eb10:	687b      	ldr	r3, [r7, #4]
 801eb12:	2202      	movs	r2, #2
 801eb14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801eb18:	687b      	ldr	r3, [r7, #4]
 801eb1a:	681b      	ldr	r3, [r3, #0]
 801eb1c:	68da      	ldr	r2, [r3, #12]
 801eb1e:	687b      	ldr	r3, [r7, #4]
 801eb20:	681b      	ldr	r3, [r3, #0]
 801eb22:	f042 0201 	orr.w	r2, r2, #1
 801eb26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801eb28:	687b      	ldr	r3, [r7, #4]
 801eb2a:	681b      	ldr	r3, [r3, #0]
 801eb2c:	4a26      	ldr	r2, [pc, #152]	@ (801ebc8 <HAL_TIM_Base_Start_IT+0xd0>)
 801eb2e:	4293      	cmp	r3, r2
 801eb30:	d022      	beq.n	801eb78 <HAL_TIM_Base_Start_IT+0x80>
 801eb32:	687b      	ldr	r3, [r7, #4]
 801eb34:	681b      	ldr	r3, [r3, #0]
 801eb36:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801eb3a:	d01d      	beq.n	801eb78 <HAL_TIM_Base_Start_IT+0x80>
 801eb3c:	687b      	ldr	r3, [r7, #4]
 801eb3e:	681b      	ldr	r3, [r3, #0]
 801eb40:	4a22      	ldr	r2, [pc, #136]	@ (801ebcc <HAL_TIM_Base_Start_IT+0xd4>)
 801eb42:	4293      	cmp	r3, r2
 801eb44:	d018      	beq.n	801eb78 <HAL_TIM_Base_Start_IT+0x80>
 801eb46:	687b      	ldr	r3, [r7, #4]
 801eb48:	681b      	ldr	r3, [r3, #0]
 801eb4a:	4a21      	ldr	r2, [pc, #132]	@ (801ebd0 <HAL_TIM_Base_Start_IT+0xd8>)
 801eb4c:	4293      	cmp	r3, r2
 801eb4e:	d013      	beq.n	801eb78 <HAL_TIM_Base_Start_IT+0x80>
 801eb50:	687b      	ldr	r3, [r7, #4]
 801eb52:	681b      	ldr	r3, [r3, #0]
 801eb54:	4a1f      	ldr	r2, [pc, #124]	@ (801ebd4 <HAL_TIM_Base_Start_IT+0xdc>)
 801eb56:	4293      	cmp	r3, r2
 801eb58:	d00e      	beq.n	801eb78 <HAL_TIM_Base_Start_IT+0x80>
 801eb5a:	687b      	ldr	r3, [r7, #4]
 801eb5c:	681b      	ldr	r3, [r3, #0]
 801eb5e:	4a1e      	ldr	r2, [pc, #120]	@ (801ebd8 <HAL_TIM_Base_Start_IT+0xe0>)
 801eb60:	4293      	cmp	r3, r2
 801eb62:	d009      	beq.n	801eb78 <HAL_TIM_Base_Start_IT+0x80>
 801eb64:	687b      	ldr	r3, [r7, #4]
 801eb66:	681b      	ldr	r3, [r3, #0]
 801eb68:	4a1c      	ldr	r2, [pc, #112]	@ (801ebdc <HAL_TIM_Base_Start_IT+0xe4>)
 801eb6a:	4293      	cmp	r3, r2
 801eb6c:	d004      	beq.n	801eb78 <HAL_TIM_Base_Start_IT+0x80>
 801eb6e:	687b      	ldr	r3, [r7, #4]
 801eb70:	681b      	ldr	r3, [r3, #0]
 801eb72:	4a1b      	ldr	r2, [pc, #108]	@ (801ebe0 <HAL_TIM_Base_Start_IT+0xe8>)
 801eb74:	4293      	cmp	r3, r2
 801eb76:	d115      	bne.n	801eba4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801eb78:	687b      	ldr	r3, [r7, #4]
 801eb7a:	681b      	ldr	r3, [r3, #0]
 801eb7c:	689a      	ldr	r2, [r3, #8]
 801eb7e:	4b19      	ldr	r3, [pc, #100]	@ (801ebe4 <HAL_TIM_Base_Start_IT+0xec>)
 801eb80:	4013      	ands	r3, r2
 801eb82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eb84:	68fb      	ldr	r3, [r7, #12]
 801eb86:	2b06      	cmp	r3, #6
 801eb88:	d015      	beq.n	801ebb6 <HAL_TIM_Base_Start_IT+0xbe>
 801eb8a:	68fb      	ldr	r3, [r7, #12]
 801eb8c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801eb90:	d011      	beq.n	801ebb6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801eb92:	687b      	ldr	r3, [r7, #4]
 801eb94:	681b      	ldr	r3, [r3, #0]
 801eb96:	681a      	ldr	r2, [r3, #0]
 801eb98:	687b      	ldr	r3, [r7, #4]
 801eb9a:	681b      	ldr	r3, [r3, #0]
 801eb9c:	f042 0201 	orr.w	r2, r2, #1
 801eba0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801eba2:	e008      	b.n	801ebb6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	681b      	ldr	r3, [r3, #0]
 801eba8:	681a      	ldr	r2, [r3, #0]
 801ebaa:	687b      	ldr	r3, [r7, #4]
 801ebac:	681b      	ldr	r3, [r3, #0]
 801ebae:	f042 0201 	orr.w	r2, r2, #1
 801ebb2:	601a      	str	r2, [r3, #0]
 801ebb4:	e000      	b.n	801ebb8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801ebb6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801ebb8:	2300      	movs	r3, #0
}
 801ebba:	4618      	mov	r0, r3
 801ebbc:	3714      	adds	r7, #20
 801ebbe:	46bd      	mov	sp, r7
 801ebc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ebc4:	4770      	bx	lr
 801ebc6:	bf00      	nop
 801ebc8:	40010000 	.word	0x40010000
 801ebcc:	40000400 	.word	0x40000400
 801ebd0:	40000800 	.word	0x40000800
 801ebd4:	40000c00 	.word	0x40000c00
 801ebd8:	40010400 	.word	0x40010400
 801ebdc:	40001800 	.word	0x40001800
 801ebe0:	40014000 	.word	0x40014000
 801ebe4:	00010007 	.word	0x00010007

0801ebe8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801ebe8:	b580      	push	{r7, lr}
 801ebea:	b084      	sub	sp, #16
 801ebec:	af00      	add	r7, sp, #0
 801ebee:	6078      	str	r0, [r7, #4]
 801ebf0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801ebf2:	2300      	movs	r3, #0
 801ebf4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801ebf6:	687b      	ldr	r3, [r7, #4]
 801ebf8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801ebfc:	2b01      	cmp	r3, #1
 801ebfe:	d101      	bne.n	801ec04 <HAL_TIM_ConfigClockSource+0x1c>
 801ec00:	2302      	movs	r3, #2
 801ec02:	e0dc      	b.n	801edbe <HAL_TIM_ConfigClockSource+0x1d6>
 801ec04:	687b      	ldr	r3, [r7, #4]
 801ec06:	2201      	movs	r2, #1
 801ec08:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801ec0c:	687b      	ldr	r3, [r7, #4]
 801ec0e:	2202      	movs	r2, #2
 801ec10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801ec14:	687b      	ldr	r3, [r7, #4]
 801ec16:	681b      	ldr	r3, [r3, #0]
 801ec18:	689b      	ldr	r3, [r3, #8]
 801ec1a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801ec1c:	68ba      	ldr	r2, [r7, #8]
 801ec1e:	4b6a      	ldr	r3, [pc, #424]	@ (801edc8 <HAL_TIM_ConfigClockSource+0x1e0>)
 801ec20:	4013      	ands	r3, r2
 801ec22:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801ec24:	68bb      	ldr	r3, [r7, #8]
 801ec26:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801ec2a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801ec2c:	687b      	ldr	r3, [r7, #4]
 801ec2e:	681b      	ldr	r3, [r3, #0]
 801ec30:	68ba      	ldr	r2, [r7, #8]
 801ec32:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801ec34:	683b      	ldr	r3, [r7, #0]
 801ec36:	681b      	ldr	r3, [r3, #0]
 801ec38:	4a64      	ldr	r2, [pc, #400]	@ (801edcc <HAL_TIM_ConfigClockSource+0x1e4>)
 801ec3a:	4293      	cmp	r3, r2
 801ec3c:	f000 80a9 	beq.w	801ed92 <HAL_TIM_ConfigClockSource+0x1aa>
 801ec40:	4a62      	ldr	r2, [pc, #392]	@ (801edcc <HAL_TIM_ConfigClockSource+0x1e4>)
 801ec42:	4293      	cmp	r3, r2
 801ec44:	f200 80ae 	bhi.w	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec48:	4a61      	ldr	r2, [pc, #388]	@ (801edd0 <HAL_TIM_ConfigClockSource+0x1e8>)
 801ec4a:	4293      	cmp	r3, r2
 801ec4c:	f000 80a1 	beq.w	801ed92 <HAL_TIM_ConfigClockSource+0x1aa>
 801ec50:	4a5f      	ldr	r2, [pc, #380]	@ (801edd0 <HAL_TIM_ConfigClockSource+0x1e8>)
 801ec52:	4293      	cmp	r3, r2
 801ec54:	f200 80a6 	bhi.w	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec58:	4a5e      	ldr	r2, [pc, #376]	@ (801edd4 <HAL_TIM_ConfigClockSource+0x1ec>)
 801ec5a:	4293      	cmp	r3, r2
 801ec5c:	f000 8099 	beq.w	801ed92 <HAL_TIM_ConfigClockSource+0x1aa>
 801ec60:	4a5c      	ldr	r2, [pc, #368]	@ (801edd4 <HAL_TIM_ConfigClockSource+0x1ec>)
 801ec62:	4293      	cmp	r3, r2
 801ec64:	f200 809e 	bhi.w	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec68:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801ec6c:	f000 8091 	beq.w	801ed92 <HAL_TIM_ConfigClockSource+0x1aa>
 801ec70:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801ec74:	f200 8096 	bhi.w	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801ec7c:	f000 8089 	beq.w	801ed92 <HAL_TIM_ConfigClockSource+0x1aa>
 801ec80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801ec84:	f200 808e 	bhi.w	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec88:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ec8c:	d03e      	beq.n	801ed0c <HAL_TIM_ConfigClockSource+0x124>
 801ec8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ec92:	f200 8087 	bhi.w	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
 801ec96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801ec9a:	f000 8086 	beq.w	801edaa <HAL_TIM_ConfigClockSource+0x1c2>
 801ec9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801eca2:	d87f      	bhi.n	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
 801eca4:	2b70      	cmp	r3, #112	@ 0x70
 801eca6:	d01a      	beq.n	801ecde <HAL_TIM_ConfigClockSource+0xf6>
 801eca8:	2b70      	cmp	r3, #112	@ 0x70
 801ecaa:	d87b      	bhi.n	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
 801ecac:	2b60      	cmp	r3, #96	@ 0x60
 801ecae:	d050      	beq.n	801ed52 <HAL_TIM_ConfigClockSource+0x16a>
 801ecb0:	2b60      	cmp	r3, #96	@ 0x60
 801ecb2:	d877      	bhi.n	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
 801ecb4:	2b50      	cmp	r3, #80	@ 0x50
 801ecb6:	d03c      	beq.n	801ed32 <HAL_TIM_ConfigClockSource+0x14a>
 801ecb8:	2b50      	cmp	r3, #80	@ 0x50
 801ecba:	d873      	bhi.n	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
 801ecbc:	2b40      	cmp	r3, #64	@ 0x40
 801ecbe:	d058      	beq.n	801ed72 <HAL_TIM_ConfigClockSource+0x18a>
 801ecc0:	2b40      	cmp	r3, #64	@ 0x40
 801ecc2:	d86f      	bhi.n	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
 801ecc4:	2b30      	cmp	r3, #48	@ 0x30
 801ecc6:	d064      	beq.n	801ed92 <HAL_TIM_ConfigClockSource+0x1aa>
 801ecc8:	2b30      	cmp	r3, #48	@ 0x30
 801ecca:	d86b      	bhi.n	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
 801eccc:	2b20      	cmp	r3, #32
 801ecce:	d060      	beq.n	801ed92 <HAL_TIM_ConfigClockSource+0x1aa>
 801ecd0:	2b20      	cmp	r3, #32
 801ecd2:	d867      	bhi.n	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
 801ecd4:	2b00      	cmp	r3, #0
 801ecd6:	d05c      	beq.n	801ed92 <HAL_TIM_ConfigClockSource+0x1aa>
 801ecd8:	2b10      	cmp	r3, #16
 801ecda:	d05a      	beq.n	801ed92 <HAL_TIM_ConfigClockSource+0x1aa>
 801ecdc:	e062      	b.n	801eda4 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801ecde:	687b      	ldr	r3, [r7, #4]
 801ece0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801ece2:	683b      	ldr	r3, [r7, #0]
 801ece4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801ece6:	683b      	ldr	r3, [r7, #0]
 801ece8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801ecea:	683b      	ldr	r3, [r7, #0]
 801ecec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801ecee:	f000 f997 	bl	801f020 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	681b      	ldr	r3, [r3, #0]
 801ecf6:	689b      	ldr	r3, [r3, #8]
 801ecf8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801ecfa:	68bb      	ldr	r3, [r7, #8]
 801ecfc:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801ed00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	681b      	ldr	r3, [r3, #0]
 801ed06:	68ba      	ldr	r2, [r7, #8]
 801ed08:	609a      	str	r2, [r3, #8]
      break;
 801ed0a:	e04f      	b.n	801edac <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801ed0c:	687b      	ldr	r3, [r7, #4]
 801ed0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801ed10:	683b      	ldr	r3, [r7, #0]
 801ed12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801ed14:	683b      	ldr	r3, [r7, #0]
 801ed16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801ed18:	683b      	ldr	r3, [r7, #0]
 801ed1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801ed1c:	f000 f980 	bl	801f020 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	689a      	ldr	r2, [r3, #8]
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	681b      	ldr	r3, [r3, #0]
 801ed2a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801ed2e:	609a      	str	r2, [r3, #8]
      break;
 801ed30:	e03c      	b.n	801edac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801ed32:	687b      	ldr	r3, [r7, #4]
 801ed34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801ed36:	683b      	ldr	r3, [r7, #0]
 801ed38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801ed3a:	683b      	ldr	r3, [r7, #0]
 801ed3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801ed3e:	461a      	mov	r2, r3
 801ed40:	f000 f8f0 	bl	801ef24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801ed44:	687b      	ldr	r3, [r7, #4]
 801ed46:	681b      	ldr	r3, [r3, #0]
 801ed48:	2150      	movs	r1, #80	@ 0x50
 801ed4a:	4618      	mov	r0, r3
 801ed4c:	f000 f94a 	bl	801efe4 <TIM_ITRx_SetConfig>
      break;
 801ed50:	e02c      	b.n	801edac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801ed52:	687b      	ldr	r3, [r7, #4]
 801ed54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801ed56:	683b      	ldr	r3, [r7, #0]
 801ed58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801ed5a:	683b      	ldr	r3, [r7, #0]
 801ed5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801ed5e:	461a      	mov	r2, r3
 801ed60:	f000 f90f 	bl	801ef82 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801ed64:	687b      	ldr	r3, [r7, #4]
 801ed66:	681b      	ldr	r3, [r3, #0]
 801ed68:	2160      	movs	r1, #96	@ 0x60
 801ed6a:	4618      	mov	r0, r3
 801ed6c:	f000 f93a 	bl	801efe4 <TIM_ITRx_SetConfig>
      break;
 801ed70:	e01c      	b.n	801edac <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801ed72:	687b      	ldr	r3, [r7, #4]
 801ed74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801ed76:	683b      	ldr	r3, [r7, #0]
 801ed78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801ed7a:	683b      	ldr	r3, [r7, #0]
 801ed7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801ed7e:	461a      	mov	r2, r3
 801ed80:	f000 f8d0 	bl	801ef24 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801ed84:	687b      	ldr	r3, [r7, #4]
 801ed86:	681b      	ldr	r3, [r3, #0]
 801ed88:	2140      	movs	r1, #64	@ 0x40
 801ed8a:	4618      	mov	r0, r3
 801ed8c:	f000 f92a 	bl	801efe4 <TIM_ITRx_SetConfig>
      break;
 801ed90:	e00c      	b.n	801edac <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801ed92:	687b      	ldr	r3, [r7, #4]
 801ed94:	681a      	ldr	r2, [r3, #0]
 801ed96:	683b      	ldr	r3, [r7, #0]
 801ed98:	681b      	ldr	r3, [r3, #0]
 801ed9a:	4619      	mov	r1, r3
 801ed9c:	4610      	mov	r0, r2
 801ed9e:	f000 f921 	bl	801efe4 <TIM_ITRx_SetConfig>
      break;
 801eda2:	e003      	b.n	801edac <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801eda4:	2301      	movs	r3, #1
 801eda6:	73fb      	strb	r3, [r7, #15]
      break;
 801eda8:	e000      	b.n	801edac <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801edaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801edac:	687b      	ldr	r3, [r7, #4]
 801edae:	2201      	movs	r2, #1
 801edb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	2200      	movs	r2, #0
 801edb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801edbc:	7bfb      	ldrb	r3, [r7, #15]
}
 801edbe:	4618      	mov	r0, r3
 801edc0:	3710      	adds	r7, #16
 801edc2:	46bd      	mov	sp, r7
 801edc4:	bd80      	pop	{r7, pc}
 801edc6:	bf00      	nop
 801edc8:	ffceff88 	.word	0xffceff88
 801edcc:	00100040 	.word	0x00100040
 801edd0:	00100030 	.word	0x00100030
 801edd4:	00100020 	.word	0x00100020

0801edd8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801edd8:	b480      	push	{r7}
 801edda:	b085      	sub	sp, #20
 801eddc:	af00      	add	r7, sp, #0
 801edde:	6078      	str	r0, [r7, #4]
 801ede0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801ede2:	687b      	ldr	r3, [r7, #4]
 801ede4:	681b      	ldr	r3, [r3, #0]
 801ede6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801ede8:	687b      	ldr	r3, [r7, #4]
 801edea:	4a46      	ldr	r2, [pc, #280]	@ (801ef04 <TIM_Base_SetConfig+0x12c>)
 801edec:	4293      	cmp	r3, r2
 801edee:	d013      	beq.n	801ee18 <TIM_Base_SetConfig+0x40>
 801edf0:	687b      	ldr	r3, [r7, #4]
 801edf2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801edf6:	d00f      	beq.n	801ee18 <TIM_Base_SetConfig+0x40>
 801edf8:	687b      	ldr	r3, [r7, #4]
 801edfa:	4a43      	ldr	r2, [pc, #268]	@ (801ef08 <TIM_Base_SetConfig+0x130>)
 801edfc:	4293      	cmp	r3, r2
 801edfe:	d00b      	beq.n	801ee18 <TIM_Base_SetConfig+0x40>
 801ee00:	687b      	ldr	r3, [r7, #4]
 801ee02:	4a42      	ldr	r2, [pc, #264]	@ (801ef0c <TIM_Base_SetConfig+0x134>)
 801ee04:	4293      	cmp	r3, r2
 801ee06:	d007      	beq.n	801ee18 <TIM_Base_SetConfig+0x40>
 801ee08:	687b      	ldr	r3, [r7, #4]
 801ee0a:	4a41      	ldr	r2, [pc, #260]	@ (801ef10 <TIM_Base_SetConfig+0x138>)
 801ee0c:	4293      	cmp	r3, r2
 801ee0e:	d003      	beq.n	801ee18 <TIM_Base_SetConfig+0x40>
 801ee10:	687b      	ldr	r3, [r7, #4]
 801ee12:	4a40      	ldr	r2, [pc, #256]	@ (801ef14 <TIM_Base_SetConfig+0x13c>)
 801ee14:	4293      	cmp	r3, r2
 801ee16:	d108      	bne.n	801ee2a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801ee18:	68fb      	ldr	r3, [r7, #12]
 801ee1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801ee1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801ee20:	683b      	ldr	r3, [r7, #0]
 801ee22:	685b      	ldr	r3, [r3, #4]
 801ee24:	68fa      	ldr	r2, [r7, #12]
 801ee26:	4313      	orrs	r3, r2
 801ee28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801ee2a:	687b      	ldr	r3, [r7, #4]
 801ee2c:	4a35      	ldr	r2, [pc, #212]	@ (801ef04 <TIM_Base_SetConfig+0x12c>)
 801ee2e:	4293      	cmp	r3, r2
 801ee30:	d01f      	beq.n	801ee72 <TIM_Base_SetConfig+0x9a>
 801ee32:	687b      	ldr	r3, [r7, #4]
 801ee34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801ee38:	d01b      	beq.n	801ee72 <TIM_Base_SetConfig+0x9a>
 801ee3a:	687b      	ldr	r3, [r7, #4]
 801ee3c:	4a32      	ldr	r2, [pc, #200]	@ (801ef08 <TIM_Base_SetConfig+0x130>)
 801ee3e:	4293      	cmp	r3, r2
 801ee40:	d017      	beq.n	801ee72 <TIM_Base_SetConfig+0x9a>
 801ee42:	687b      	ldr	r3, [r7, #4]
 801ee44:	4a31      	ldr	r2, [pc, #196]	@ (801ef0c <TIM_Base_SetConfig+0x134>)
 801ee46:	4293      	cmp	r3, r2
 801ee48:	d013      	beq.n	801ee72 <TIM_Base_SetConfig+0x9a>
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	4a30      	ldr	r2, [pc, #192]	@ (801ef10 <TIM_Base_SetConfig+0x138>)
 801ee4e:	4293      	cmp	r3, r2
 801ee50:	d00f      	beq.n	801ee72 <TIM_Base_SetConfig+0x9a>
 801ee52:	687b      	ldr	r3, [r7, #4]
 801ee54:	4a2f      	ldr	r2, [pc, #188]	@ (801ef14 <TIM_Base_SetConfig+0x13c>)
 801ee56:	4293      	cmp	r3, r2
 801ee58:	d00b      	beq.n	801ee72 <TIM_Base_SetConfig+0x9a>
 801ee5a:	687b      	ldr	r3, [r7, #4]
 801ee5c:	4a2e      	ldr	r2, [pc, #184]	@ (801ef18 <TIM_Base_SetConfig+0x140>)
 801ee5e:	4293      	cmp	r3, r2
 801ee60:	d007      	beq.n	801ee72 <TIM_Base_SetConfig+0x9a>
 801ee62:	687b      	ldr	r3, [r7, #4]
 801ee64:	4a2d      	ldr	r2, [pc, #180]	@ (801ef1c <TIM_Base_SetConfig+0x144>)
 801ee66:	4293      	cmp	r3, r2
 801ee68:	d003      	beq.n	801ee72 <TIM_Base_SetConfig+0x9a>
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	4a2c      	ldr	r2, [pc, #176]	@ (801ef20 <TIM_Base_SetConfig+0x148>)
 801ee6e:	4293      	cmp	r3, r2
 801ee70:	d108      	bne.n	801ee84 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801ee72:	68fb      	ldr	r3, [r7, #12]
 801ee74:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801ee78:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801ee7a:	683b      	ldr	r3, [r7, #0]
 801ee7c:	68db      	ldr	r3, [r3, #12]
 801ee7e:	68fa      	ldr	r2, [r7, #12]
 801ee80:	4313      	orrs	r3, r2
 801ee82:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801ee84:	68fb      	ldr	r3, [r7, #12]
 801ee86:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801ee8a:	683b      	ldr	r3, [r7, #0]
 801ee8c:	695b      	ldr	r3, [r3, #20]
 801ee8e:	4313      	orrs	r3, r2
 801ee90:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801ee92:	687b      	ldr	r3, [r7, #4]
 801ee94:	68fa      	ldr	r2, [r7, #12]
 801ee96:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801ee98:	683b      	ldr	r3, [r7, #0]
 801ee9a:	689a      	ldr	r2, [r3, #8]
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801eea0:	683b      	ldr	r3, [r7, #0]
 801eea2:	681a      	ldr	r2, [r3, #0]
 801eea4:	687b      	ldr	r3, [r7, #4]
 801eea6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801eea8:	687b      	ldr	r3, [r7, #4]
 801eeaa:	4a16      	ldr	r2, [pc, #88]	@ (801ef04 <TIM_Base_SetConfig+0x12c>)
 801eeac:	4293      	cmp	r3, r2
 801eeae:	d00f      	beq.n	801eed0 <TIM_Base_SetConfig+0xf8>
 801eeb0:	687b      	ldr	r3, [r7, #4]
 801eeb2:	4a18      	ldr	r2, [pc, #96]	@ (801ef14 <TIM_Base_SetConfig+0x13c>)
 801eeb4:	4293      	cmp	r3, r2
 801eeb6:	d00b      	beq.n	801eed0 <TIM_Base_SetConfig+0xf8>
 801eeb8:	687b      	ldr	r3, [r7, #4]
 801eeba:	4a17      	ldr	r2, [pc, #92]	@ (801ef18 <TIM_Base_SetConfig+0x140>)
 801eebc:	4293      	cmp	r3, r2
 801eebe:	d007      	beq.n	801eed0 <TIM_Base_SetConfig+0xf8>
 801eec0:	687b      	ldr	r3, [r7, #4]
 801eec2:	4a16      	ldr	r2, [pc, #88]	@ (801ef1c <TIM_Base_SetConfig+0x144>)
 801eec4:	4293      	cmp	r3, r2
 801eec6:	d003      	beq.n	801eed0 <TIM_Base_SetConfig+0xf8>
 801eec8:	687b      	ldr	r3, [r7, #4]
 801eeca:	4a15      	ldr	r2, [pc, #84]	@ (801ef20 <TIM_Base_SetConfig+0x148>)
 801eecc:	4293      	cmp	r3, r2
 801eece:	d103      	bne.n	801eed8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801eed0:	683b      	ldr	r3, [r7, #0]
 801eed2:	691a      	ldr	r2, [r3, #16]
 801eed4:	687b      	ldr	r3, [r7, #4]
 801eed6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801eed8:	687b      	ldr	r3, [r7, #4]
 801eeda:	2201      	movs	r2, #1
 801eedc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	691b      	ldr	r3, [r3, #16]
 801eee2:	f003 0301 	and.w	r3, r3, #1
 801eee6:	2b01      	cmp	r3, #1
 801eee8:	d105      	bne.n	801eef6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801eeea:	687b      	ldr	r3, [r7, #4]
 801eeec:	691b      	ldr	r3, [r3, #16]
 801eeee:	f023 0201 	bic.w	r2, r3, #1
 801eef2:	687b      	ldr	r3, [r7, #4]
 801eef4:	611a      	str	r2, [r3, #16]
  }
}
 801eef6:	bf00      	nop
 801eef8:	3714      	adds	r7, #20
 801eefa:	46bd      	mov	sp, r7
 801eefc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef00:	4770      	bx	lr
 801ef02:	bf00      	nop
 801ef04:	40010000 	.word	0x40010000
 801ef08:	40000400 	.word	0x40000400
 801ef0c:	40000800 	.word	0x40000800
 801ef10:	40000c00 	.word	0x40000c00
 801ef14:	40010400 	.word	0x40010400
 801ef18:	40014000 	.word	0x40014000
 801ef1c:	40014400 	.word	0x40014400
 801ef20:	40014800 	.word	0x40014800

0801ef24 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ef24:	b480      	push	{r7}
 801ef26:	b087      	sub	sp, #28
 801ef28:	af00      	add	r7, sp, #0
 801ef2a:	60f8      	str	r0, [r7, #12]
 801ef2c:	60b9      	str	r1, [r7, #8]
 801ef2e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801ef30:	68fb      	ldr	r3, [r7, #12]
 801ef32:	6a1b      	ldr	r3, [r3, #32]
 801ef34:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801ef36:	68fb      	ldr	r3, [r7, #12]
 801ef38:	6a1b      	ldr	r3, [r3, #32]
 801ef3a:	f023 0201 	bic.w	r2, r3, #1
 801ef3e:	68fb      	ldr	r3, [r7, #12]
 801ef40:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801ef42:	68fb      	ldr	r3, [r7, #12]
 801ef44:	699b      	ldr	r3, [r3, #24]
 801ef46:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801ef48:	693b      	ldr	r3, [r7, #16]
 801ef4a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801ef4e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801ef50:	687b      	ldr	r3, [r7, #4]
 801ef52:	011b      	lsls	r3, r3, #4
 801ef54:	693a      	ldr	r2, [r7, #16]
 801ef56:	4313      	orrs	r3, r2
 801ef58:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801ef5a:	697b      	ldr	r3, [r7, #20]
 801ef5c:	f023 030a 	bic.w	r3, r3, #10
 801ef60:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801ef62:	697a      	ldr	r2, [r7, #20]
 801ef64:	68bb      	ldr	r3, [r7, #8]
 801ef66:	4313      	orrs	r3, r2
 801ef68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801ef6a:	68fb      	ldr	r3, [r7, #12]
 801ef6c:	693a      	ldr	r2, [r7, #16]
 801ef6e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801ef70:	68fb      	ldr	r3, [r7, #12]
 801ef72:	697a      	ldr	r2, [r7, #20]
 801ef74:	621a      	str	r2, [r3, #32]
}
 801ef76:	bf00      	nop
 801ef78:	371c      	adds	r7, #28
 801ef7a:	46bd      	mov	sp, r7
 801ef7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef80:	4770      	bx	lr

0801ef82 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801ef82:	b480      	push	{r7}
 801ef84:	b087      	sub	sp, #28
 801ef86:	af00      	add	r7, sp, #0
 801ef88:	60f8      	str	r0, [r7, #12]
 801ef8a:	60b9      	str	r1, [r7, #8]
 801ef8c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801ef8e:	68fb      	ldr	r3, [r7, #12]
 801ef90:	6a1b      	ldr	r3, [r3, #32]
 801ef92:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801ef94:	68fb      	ldr	r3, [r7, #12]
 801ef96:	6a1b      	ldr	r3, [r3, #32]
 801ef98:	f023 0210 	bic.w	r2, r3, #16
 801ef9c:	68fb      	ldr	r3, [r7, #12]
 801ef9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801efa0:	68fb      	ldr	r3, [r7, #12]
 801efa2:	699b      	ldr	r3, [r3, #24]
 801efa4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801efa6:	693b      	ldr	r3, [r7, #16]
 801efa8:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801efac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801efae:	687b      	ldr	r3, [r7, #4]
 801efb0:	031b      	lsls	r3, r3, #12
 801efb2:	693a      	ldr	r2, [r7, #16]
 801efb4:	4313      	orrs	r3, r2
 801efb6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801efb8:	697b      	ldr	r3, [r7, #20]
 801efba:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801efbe:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801efc0:	68bb      	ldr	r3, [r7, #8]
 801efc2:	011b      	lsls	r3, r3, #4
 801efc4:	697a      	ldr	r2, [r7, #20]
 801efc6:	4313      	orrs	r3, r2
 801efc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801efca:	68fb      	ldr	r3, [r7, #12]
 801efcc:	693a      	ldr	r2, [r7, #16]
 801efce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801efd0:	68fb      	ldr	r3, [r7, #12]
 801efd2:	697a      	ldr	r2, [r7, #20]
 801efd4:	621a      	str	r2, [r3, #32]
}
 801efd6:	bf00      	nop
 801efd8:	371c      	adds	r7, #28
 801efda:	46bd      	mov	sp, r7
 801efdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801efe0:	4770      	bx	lr
	...

0801efe4 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801efe4:	b480      	push	{r7}
 801efe6:	b085      	sub	sp, #20
 801efe8:	af00      	add	r7, sp, #0
 801efea:	6078      	str	r0, [r7, #4]
 801efec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801efee:	687b      	ldr	r3, [r7, #4]
 801eff0:	689b      	ldr	r3, [r3, #8]
 801eff2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801eff4:	68fa      	ldr	r2, [r7, #12]
 801eff6:	4b09      	ldr	r3, [pc, #36]	@ (801f01c <TIM_ITRx_SetConfig+0x38>)
 801eff8:	4013      	ands	r3, r2
 801effa:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801effc:	683a      	ldr	r2, [r7, #0]
 801effe:	68fb      	ldr	r3, [r7, #12]
 801f000:	4313      	orrs	r3, r2
 801f002:	f043 0307 	orr.w	r3, r3, #7
 801f006:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801f008:	687b      	ldr	r3, [r7, #4]
 801f00a:	68fa      	ldr	r2, [r7, #12]
 801f00c:	609a      	str	r2, [r3, #8]
}
 801f00e:	bf00      	nop
 801f010:	3714      	adds	r7, #20
 801f012:	46bd      	mov	sp, r7
 801f014:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f018:	4770      	bx	lr
 801f01a:	bf00      	nop
 801f01c:	ffcfff8f 	.word	0xffcfff8f

0801f020 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801f020:	b480      	push	{r7}
 801f022:	b087      	sub	sp, #28
 801f024:	af00      	add	r7, sp, #0
 801f026:	60f8      	str	r0, [r7, #12]
 801f028:	60b9      	str	r1, [r7, #8]
 801f02a:	607a      	str	r2, [r7, #4]
 801f02c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801f02e:	68fb      	ldr	r3, [r7, #12]
 801f030:	689b      	ldr	r3, [r3, #8]
 801f032:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f034:	697b      	ldr	r3, [r7, #20]
 801f036:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801f03a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801f03c:	683b      	ldr	r3, [r7, #0]
 801f03e:	021a      	lsls	r2, r3, #8
 801f040:	687b      	ldr	r3, [r7, #4]
 801f042:	431a      	orrs	r2, r3
 801f044:	68bb      	ldr	r3, [r7, #8]
 801f046:	4313      	orrs	r3, r2
 801f048:	697a      	ldr	r2, [r7, #20]
 801f04a:	4313      	orrs	r3, r2
 801f04c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801f04e:	68fb      	ldr	r3, [r7, #12]
 801f050:	697a      	ldr	r2, [r7, #20]
 801f052:	609a      	str	r2, [r3, #8]
}
 801f054:	bf00      	nop
 801f056:	371c      	adds	r7, #28
 801f058:	46bd      	mov	sp, r7
 801f05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f05e:	4770      	bx	lr

0801f060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801f060:	b480      	push	{r7}
 801f062:	b085      	sub	sp, #20
 801f064:	af00      	add	r7, sp, #0
 801f066:	6078      	str	r0, [r7, #4]
 801f068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801f06a:	687b      	ldr	r3, [r7, #4]
 801f06c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801f070:	2b01      	cmp	r3, #1
 801f072:	d101      	bne.n	801f078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801f074:	2302      	movs	r3, #2
 801f076:	e06d      	b.n	801f154 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801f078:	687b      	ldr	r3, [r7, #4]
 801f07a:	2201      	movs	r2, #1
 801f07c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f080:	687b      	ldr	r3, [r7, #4]
 801f082:	2202      	movs	r2, #2
 801f084:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801f088:	687b      	ldr	r3, [r7, #4]
 801f08a:	681b      	ldr	r3, [r3, #0]
 801f08c:	685b      	ldr	r3, [r3, #4]
 801f08e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801f090:	687b      	ldr	r3, [r7, #4]
 801f092:	681b      	ldr	r3, [r3, #0]
 801f094:	689b      	ldr	r3, [r3, #8]
 801f096:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801f098:	687b      	ldr	r3, [r7, #4]
 801f09a:	681b      	ldr	r3, [r3, #0]
 801f09c:	4a30      	ldr	r2, [pc, #192]	@ (801f160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801f09e:	4293      	cmp	r3, r2
 801f0a0:	d004      	beq.n	801f0ac <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801f0a2:	687b      	ldr	r3, [r7, #4]
 801f0a4:	681b      	ldr	r3, [r3, #0]
 801f0a6:	4a2f      	ldr	r2, [pc, #188]	@ (801f164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f0a8:	4293      	cmp	r3, r2
 801f0aa:	d108      	bne.n	801f0be <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801f0ac:	68fb      	ldr	r3, [r7, #12]
 801f0ae:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801f0b2:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801f0b4:	683b      	ldr	r3, [r7, #0]
 801f0b6:	685b      	ldr	r3, [r3, #4]
 801f0b8:	68fa      	ldr	r2, [r7, #12]
 801f0ba:	4313      	orrs	r3, r2
 801f0bc:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801f0be:	68fb      	ldr	r3, [r7, #12]
 801f0c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f0c4:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801f0c6:	683b      	ldr	r3, [r7, #0]
 801f0c8:	681b      	ldr	r3, [r3, #0]
 801f0ca:	68fa      	ldr	r2, [r7, #12]
 801f0cc:	4313      	orrs	r3, r2
 801f0ce:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801f0d0:	687b      	ldr	r3, [r7, #4]
 801f0d2:	681b      	ldr	r3, [r3, #0]
 801f0d4:	68fa      	ldr	r2, [r7, #12]
 801f0d6:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f0d8:	687b      	ldr	r3, [r7, #4]
 801f0da:	681b      	ldr	r3, [r3, #0]
 801f0dc:	4a20      	ldr	r2, [pc, #128]	@ (801f160 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801f0de:	4293      	cmp	r3, r2
 801f0e0:	d022      	beq.n	801f128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f0e2:	687b      	ldr	r3, [r7, #4]
 801f0e4:	681b      	ldr	r3, [r3, #0]
 801f0e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f0ea:	d01d      	beq.n	801f128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f0ec:	687b      	ldr	r3, [r7, #4]
 801f0ee:	681b      	ldr	r3, [r3, #0]
 801f0f0:	4a1d      	ldr	r2, [pc, #116]	@ (801f168 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f0f2:	4293      	cmp	r3, r2
 801f0f4:	d018      	beq.n	801f128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f0f6:	687b      	ldr	r3, [r7, #4]
 801f0f8:	681b      	ldr	r3, [r3, #0]
 801f0fa:	4a1c      	ldr	r2, [pc, #112]	@ (801f16c <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f0fc:	4293      	cmp	r3, r2
 801f0fe:	d013      	beq.n	801f128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f100:	687b      	ldr	r3, [r7, #4]
 801f102:	681b      	ldr	r3, [r3, #0]
 801f104:	4a1a      	ldr	r2, [pc, #104]	@ (801f170 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801f106:	4293      	cmp	r3, r2
 801f108:	d00e      	beq.n	801f128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f10a:	687b      	ldr	r3, [r7, #4]
 801f10c:	681b      	ldr	r3, [r3, #0]
 801f10e:	4a15      	ldr	r2, [pc, #84]	@ (801f164 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f110:	4293      	cmp	r3, r2
 801f112:	d009      	beq.n	801f128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f114:	687b      	ldr	r3, [r7, #4]
 801f116:	681b      	ldr	r3, [r3, #0]
 801f118:	4a16      	ldr	r2, [pc, #88]	@ (801f174 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801f11a:	4293      	cmp	r3, r2
 801f11c:	d004      	beq.n	801f128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f11e:	687b      	ldr	r3, [r7, #4]
 801f120:	681b      	ldr	r3, [r3, #0]
 801f122:	4a15      	ldr	r2, [pc, #84]	@ (801f178 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801f124:	4293      	cmp	r3, r2
 801f126:	d10c      	bne.n	801f142 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801f128:	68bb      	ldr	r3, [r7, #8]
 801f12a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801f12e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801f130:	683b      	ldr	r3, [r7, #0]
 801f132:	689b      	ldr	r3, [r3, #8]
 801f134:	68ba      	ldr	r2, [r7, #8]
 801f136:	4313      	orrs	r3, r2
 801f138:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801f13a:	687b      	ldr	r3, [r7, #4]
 801f13c:	681b      	ldr	r3, [r3, #0]
 801f13e:	68ba      	ldr	r2, [r7, #8]
 801f140:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801f142:	687b      	ldr	r3, [r7, #4]
 801f144:	2201      	movs	r2, #1
 801f146:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801f14a:	687b      	ldr	r3, [r7, #4]
 801f14c:	2200      	movs	r2, #0
 801f14e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801f152:	2300      	movs	r3, #0
}
 801f154:	4618      	mov	r0, r3
 801f156:	3714      	adds	r7, #20
 801f158:	46bd      	mov	sp, r7
 801f15a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f15e:	4770      	bx	lr
 801f160:	40010000 	.word	0x40010000
 801f164:	40010400 	.word	0x40010400
 801f168:	40000400 	.word	0x40000400
 801f16c:	40000800 	.word	0x40000800
 801f170:	40000c00 	.word	0x40000c00
 801f174:	40001800 	.word	0x40001800
 801f178:	40014000 	.word	0x40014000

0801f17c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f17c:	b580      	push	{r7, lr}
 801f17e:	b082      	sub	sp, #8
 801f180:	af00      	add	r7, sp, #0
 801f182:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f184:	687b      	ldr	r3, [r7, #4]
 801f186:	2b00      	cmp	r3, #0
 801f188:	d101      	bne.n	801f18e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f18a:	2301      	movs	r3, #1
 801f18c:	e042      	b.n	801f214 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f18e:	687b      	ldr	r3, [r7, #4]
 801f190:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f194:	2b00      	cmp	r3, #0
 801f196:	d106      	bne.n	801f1a6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f198:	687b      	ldr	r3, [r7, #4]
 801f19a:	2200      	movs	r2, #0
 801f19c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f1a0:	6878      	ldr	r0, [r7, #4]
 801f1a2:	f7e2 fd1b 	bl	8001bdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f1a6:	687b      	ldr	r3, [r7, #4]
 801f1a8:	2224      	movs	r2, #36	@ 0x24
 801f1aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801f1ae:	687b      	ldr	r3, [r7, #4]
 801f1b0:	681b      	ldr	r3, [r3, #0]
 801f1b2:	681a      	ldr	r2, [r3, #0]
 801f1b4:	687b      	ldr	r3, [r7, #4]
 801f1b6:	681b      	ldr	r3, [r3, #0]
 801f1b8:	f022 0201 	bic.w	r2, r2, #1
 801f1bc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f1be:	687b      	ldr	r3, [r7, #4]
 801f1c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f1c2:	2b00      	cmp	r3, #0
 801f1c4:	d002      	beq.n	801f1cc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801f1c6:	6878      	ldr	r0, [r7, #4]
 801f1c8:	f000 fd90 	bl	801fcec <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f1cc:	6878      	ldr	r0, [r7, #4]
 801f1ce:	f000 f825 	bl	801f21c <UART_SetConfig>
 801f1d2:	4603      	mov	r3, r0
 801f1d4:	2b01      	cmp	r3, #1
 801f1d6:	d101      	bne.n	801f1dc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801f1d8:	2301      	movs	r3, #1
 801f1da:	e01b      	b.n	801f214 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f1dc:	687b      	ldr	r3, [r7, #4]
 801f1de:	681b      	ldr	r3, [r3, #0]
 801f1e0:	685a      	ldr	r2, [r3, #4]
 801f1e2:	687b      	ldr	r3, [r7, #4]
 801f1e4:	681b      	ldr	r3, [r3, #0]
 801f1e6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801f1ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f1ec:	687b      	ldr	r3, [r7, #4]
 801f1ee:	681b      	ldr	r3, [r3, #0]
 801f1f0:	689a      	ldr	r2, [r3, #8]
 801f1f2:	687b      	ldr	r3, [r7, #4]
 801f1f4:	681b      	ldr	r3, [r3, #0]
 801f1f6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801f1fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f1fc:	687b      	ldr	r3, [r7, #4]
 801f1fe:	681b      	ldr	r3, [r3, #0]
 801f200:	681a      	ldr	r2, [r3, #0]
 801f202:	687b      	ldr	r3, [r7, #4]
 801f204:	681b      	ldr	r3, [r3, #0]
 801f206:	f042 0201 	orr.w	r2, r2, #1
 801f20a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f20c:	6878      	ldr	r0, [r7, #4]
 801f20e:	f000 fe0f 	bl	801fe30 <UART_CheckIdleState>
 801f212:	4603      	mov	r3, r0
}
 801f214:	4618      	mov	r0, r3
 801f216:	3708      	adds	r7, #8
 801f218:	46bd      	mov	sp, r7
 801f21a:	bd80      	pop	{r7, pc}

0801f21c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f21c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f220:	b092      	sub	sp, #72	@ 0x48
 801f222:	af00      	add	r7, sp, #0
 801f224:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f226:	2300      	movs	r3, #0
 801f228:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f22c:	697b      	ldr	r3, [r7, #20]
 801f22e:	689a      	ldr	r2, [r3, #8]
 801f230:	697b      	ldr	r3, [r7, #20]
 801f232:	691b      	ldr	r3, [r3, #16]
 801f234:	431a      	orrs	r2, r3
 801f236:	697b      	ldr	r3, [r7, #20]
 801f238:	695b      	ldr	r3, [r3, #20]
 801f23a:	431a      	orrs	r2, r3
 801f23c:	697b      	ldr	r3, [r7, #20]
 801f23e:	69db      	ldr	r3, [r3, #28]
 801f240:	4313      	orrs	r3, r2
 801f242:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f244:	697b      	ldr	r3, [r7, #20]
 801f246:	681b      	ldr	r3, [r3, #0]
 801f248:	681a      	ldr	r2, [r3, #0]
 801f24a:	4bbe      	ldr	r3, [pc, #760]	@ (801f544 <UART_SetConfig+0x328>)
 801f24c:	4013      	ands	r3, r2
 801f24e:	697a      	ldr	r2, [r7, #20]
 801f250:	6812      	ldr	r2, [r2, #0]
 801f252:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801f254:	430b      	orrs	r3, r1
 801f256:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f258:	697b      	ldr	r3, [r7, #20]
 801f25a:	681b      	ldr	r3, [r3, #0]
 801f25c:	685b      	ldr	r3, [r3, #4]
 801f25e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801f262:	697b      	ldr	r3, [r7, #20]
 801f264:	68da      	ldr	r2, [r3, #12]
 801f266:	697b      	ldr	r3, [r7, #20]
 801f268:	681b      	ldr	r3, [r3, #0]
 801f26a:	430a      	orrs	r2, r1
 801f26c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f26e:	697b      	ldr	r3, [r7, #20]
 801f270:	699b      	ldr	r3, [r3, #24]
 801f272:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801f274:	697b      	ldr	r3, [r7, #20]
 801f276:	681b      	ldr	r3, [r3, #0]
 801f278:	4ab3      	ldr	r2, [pc, #716]	@ (801f548 <UART_SetConfig+0x32c>)
 801f27a:	4293      	cmp	r3, r2
 801f27c:	d004      	beq.n	801f288 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801f27e:	697b      	ldr	r3, [r7, #20]
 801f280:	6a1b      	ldr	r3, [r3, #32]
 801f282:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801f284:	4313      	orrs	r3, r2
 801f286:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f288:	697b      	ldr	r3, [r7, #20]
 801f28a:	681b      	ldr	r3, [r3, #0]
 801f28c:	689a      	ldr	r2, [r3, #8]
 801f28e:	4baf      	ldr	r3, [pc, #700]	@ (801f54c <UART_SetConfig+0x330>)
 801f290:	4013      	ands	r3, r2
 801f292:	697a      	ldr	r2, [r7, #20]
 801f294:	6812      	ldr	r2, [r2, #0]
 801f296:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801f298:	430b      	orrs	r3, r1
 801f29a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801f29c:	697b      	ldr	r3, [r7, #20]
 801f29e:	681b      	ldr	r3, [r3, #0]
 801f2a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f2a2:	f023 010f 	bic.w	r1, r3, #15
 801f2a6:	697b      	ldr	r3, [r7, #20]
 801f2a8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f2aa:	697b      	ldr	r3, [r7, #20]
 801f2ac:	681b      	ldr	r3, [r3, #0]
 801f2ae:	430a      	orrs	r2, r1
 801f2b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f2b2:	697b      	ldr	r3, [r7, #20]
 801f2b4:	681b      	ldr	r3, [r3, #0]
 801f2b6:	4aa6      	ldr	r2, [pc, #664]	@ (801f550 <UART_SetConfig+0x334>)
 801f2b8:	4293      	cmp	r3, r2
 801f2ba:	d177      	bne.n	801f3ac <UART_SetConfig+0x190>
 801f2bc:	4ba5      	ldr	r3, [pc, #660]	@ (801f554 <UART_SetConfig+0x338>)
 801f2be:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f2c0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f2c4:	2b28      	cmp	r3, #40	@ 0x28
 801f2c6:	d86d      	bhi.n	801f3a4 <UART_SetConfig+0x188>
 801f2c8:	a201      	add	r2, pc, #4	@ (adr r2, 801f2d0 <UART_SetConfig+0xb4>)
 801f2ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f2ce:	bf00      	nop
 801f2d0:	0801f375 	.word	0x0801f375
 801f2d4:	0801f3a5 	.word	0x0801f3a5
 801f2d8:	0801f3a5 	.word	0x0801f3a5
 801f2dc:	0801f3a5 	.word	0x0801f3a5
 801f2e0:	0801f3a5 	.word	0x0801f3a5
 801f2e4:	0801f3a5 	.word	0x0801f3a5
 801f2e8:	0801f3a5 	.word	0x0801f3a5
 801f2ec:	0801f3a5 	.word	0x0801f3a5
 801f2f0:	0801f37d 	.word	0x0801f37d
 801f2f4:	0801f3a5 	.word	0x0801f3a5
 801f2f8:	0801f3a5 	.word	0x0801f3a5
 801f2fc:	0801f3a5 	.word	0x0801f3a5
 801f300:	0801f3a5 	.word	0x0801f3a5
 801f304:	0801f3a5 	.word	0x0801f3a5
 801f308:	0801f3a5 	.word	0x0801f3a5
 801f30c:	0801f3a5 	.word	0x0801f3a5
 801f310:	0801f385 	.word	0x0801f385
 801f314:	0801f3a5 	.word	0x0801f3a5
 801f318:	0801f3a5 	.word	0x0801f3a5
 801f31c:	0801f3a5 	.word	0x0801f3a5
 801f320:	0801f3a5 	.word	0x0801f3a5
 801f324:	0801f3a5 	.word	0x0801f3a5
 801f328:	0801f3a5 	.word	0x0801f3a5
 801f32c:	0801f3a5 	.word	0x0801f3a5
 801f330:	0801f38d 	.word	0x0801f38d
 801f334:	0801f3a5 	.word	0x0801f3a5
 801f338:	0801f3a5 	.word	0x0801f3a5
 801f33c:	0801f3a5 	.word	0x0801f3a5
 801f340:	0801f3a5 	.word	0x0801f3a5
 801f344:	0801f3a5 	.word	0x0801f3a5
 801f348:	0801f3a5 	.word	0x0801f3a5
 801f34c:	0801f3a5 	.word	0x0801f3a5
 801f350:	0801f395 	.word	0x0801f395
 801f354:	0801f3a5 	.word	0x0801f3a5
 801f358:	0801f3a5 	.word	0x0801f3a5
 801f35c:	0801f3a5 	.word	0x0801f3a5
 801f360:	0801f3a5 	.word	0x0801f3a5
 801f364:	0801f3a5 	.word	0x0801f3a5
 801f368:	0801f3a5 	.word	0x0801f3a5
 801f36c:	0801f3a5 	.word	0x0801f3a5
 801f370:	0801f39d 	.word	0x0801f39d
 801f374:	2301      	movs	r3, #1
 801f376:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f37a:	e222      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f37c:	2304      	movs	r3, #4
 801f37e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f382:	e21e      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f384:	2308      	movs	r3, #8
 801f386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f38a:	e21a      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f38c:	2310      	movs	r3, #16
 801f38e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f392:	e216      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f394:	2320      	movs	r3, #32
 801f396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f39a:	e212      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f39c:	2340      	movs	r3, #64	@ 0x40
 801f39e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f3a2:	e20e      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f3a4:	2380      	movs	r3, #128	@ 0x80
 801f3a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f3aa:	e20a      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f3ac:	697b      	ldr	r3, [r7, #20]
 801f3ae:	681b      	ldr	r3, [r3, #0]
 801f3b0:	4a69      	ldr	r2, [pc, #420]	@ (801f558 <UART_SetConfig+0x33c>)
 801f3b2:	4293      	cmp	r3, r2
 801f3b4:	d130      	bne.n	801f418 <UART_SetConfig+0x1fc>
 801f3b6:	4b67      	ldr	r3, [pc, #412]	@ (801f554 <UART_SetConfig+0x338>)
 801f3b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f3ba:	f003 0307 	and.w	r3, r3, #7
 801f3be:	2b05      	cmp	r3, #5
 801f3c0:	d826      	bhi.n	801f410 <UART_SetConfig+0x1f4>
 801f3c2:	a201      	add	r2, pc, #4	@ (adr r2, 801f3c8 <UART_SetConfig+0x1ac>)
 801f3c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f3c8:	0801f3e1 	.word	0x0801f3e1
 801f3cc:	0801f3e9 	.word	0x0801f3e9
 801f3d0:	0801f3f1 	.word	0x0801f3f1
 801f3d4:	0801f3f9 	.word	0x0801f3f9
 801f3d8:	0801f401 	.word	0x0801f401
 801f3dc:	0801f409 	.word	0x0801f409
 801f3e0:	2300      	movs	r3, #0
 801f3e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f3e6:	e1ec      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f3e8:	2304      	movs	r3, #4
 801f3ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f3ee:	e1e8      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f3f0:	2308      	movs	r3, #8
 801f3f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f3f6:	e1e4      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f3f8:	2310      	movs	r3, #16
 801f3fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f3fe:	e1e0      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f400:	2320      	movs	r3, #32
 801f402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f406:	e1dc      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f408:	2340      	movs	r3, #64	@ 0x40
 801f40a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f40e:	e1d8      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f410:	2380      	movs	r3, #128	@ 0x80
 801f412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f416:	e1d4      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f418:	697b      	ldr	r3, [r7, #20]
 801f41a:	681b      	ldr	r3, [r3, #0]
 801f41c:	4a4f      	ldr	r2, [pc, #316]	@ (801f55c <UART_SetConfig+0x340>)
 801f41e:	4293      	cmp	r3, r2
 801f420:	d130      	bne.n	801f484 <UART_SetConfig+0x268>
 801f422:	4b4c      	ldr	r3, [pc, #304]	@ (801f554 <UART_SetConfig+0x338>)
 801f424:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f426:	f003 0307 	and.w	r3, r3, #7
 801f42a:	2b05      	cmp	r3, #5
 801f42c:	d826      	bhi.n	801f47c <UART_SetConfig+0x260>
 801f42e:	a201      	add	r2, pc, #4	@ (adr r2, 801f434 <UART_SetConfig+0x218>)
 801f430:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f434:	0801f44d 	.word	0x0801f44d
 801f438:	0801f455 	.word	0x0801f455
 801f43c:	0801f45d 	.word	0x0801f45d
 801f440:	0801f465 	.word	0x0801f465
 801f444:	0801f46d 	.word	0x0801f46d
 801f448:	0801f475 	.word	0x0801f475
 801f44c:	2300      	movs	r3, #0
 801f44e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f452:	e1b6      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f454:	2304      	movs	r3, #4
 801f456:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f45a:	e1b2      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f45c:	2308      	movs	r3, #8
 801f45e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f462:	e1ae      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f464:	2310      	movs	r3, #16
 801f466:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f46a:	e1aa      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f46c:	2320      	movs	r3, #32
 801f46e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f472:	e1a6      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f474:	2340      	movs	r3, #64	@ 0x40
 801f476:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f47a:	e1a2      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f47c:	2380      	movs	r3, #128	@ 0x80
 801f47e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f482:	e19e      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f484:	697b      	ldr	r3, [r7, #20]
 801f486:	681b      	ldr	r3, [r3, #0]
 801f488:	4a35      	ldr	r2, [pc, #212]	@ (801f560 <UART_SetConfig+0x344>)
 801f48a:	4293      	cmp	r3, r2
 801f48c:	d130      	bne.n	801f4f0 <UART_SetConfig+0x2d4>
 801f48e:	4b31      	ldr	r3, [pc, #196]	@ (801f554 <UART_SetConfig+0x338>)
 801f490:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f492:	f003 0307 	and.w	r3, r3, #7
 801f496:	2b05      	cmp	r3, #5
 801f498:	d826      	bhi.n	801f4e8 <UART_SetConfig+0x2cc>
 801f49a:	a201      	add	r2, pc, #4	@ (adr r2, 801f4a0 <UART_SetConfig+0x284>)
 801f49c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f4a0:	0801f4b9 	.word	0x0801f4b9
 801f4a4:	0801f4c1 	.word	0x0801f4c1
 801f4a8:	0801f4c9 	.word	0x0801f4c9
 801f4ac:	0801f4d1 	.word	0x0801f4d1
 801f4b0:	0801f4d9 	.word	0x0801f4d9
 801f4b4:	0801f4e1 	.word	0x0801f4e1
 801f4b8:	2300      	movs	r3, #0
 801f4ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f4be:	e180      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f4c0:	2304      	movs	r3, #4
 801f4c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f4c6:	e17c      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f4c8:	2308      	movs	r3, #8
 801f4ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f4ce:	e178      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f4d0:	2310      	movs	r3, #16
 801f4d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f4d6:	e174      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f4d8:	2320      	movs	r3, #32
 801f4da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f4de:	e170      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f4e0:	2340      	movs	r3, #64	@ 0x40
 801f4e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f4e6:	e16c      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f4e8:	2380      	movs	r3, #128	@ 0x80
 801f4ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f4ee:	e168      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f4f0:	697b      	ldr	r3, [r7, #20]
 801f4f2:	681b      	ldr	r3, [r3, #0]
 801f4f4:	4a1b      	ldr	r2, [pc, #108]	@ (801f564 <UART_SetConfig+0x348>)
 801f4f6:	4293      	cmp	r3, r2
 801f4f8:	d142      	bne.n	801f580 <UART_SetConfig+0x364>
 801f4fa:	4b16      	ldr	r3, [pc, #88]	@ (801f554 <UART_SetConfig+0x338>)
 801f4fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f4fe:	f003 0307 	and.w	r3, r3, #7
 801f502:	2b05      	cmp	r3, #5
 801f504:	d838      	bhi.n	801f578 <UART_SetConfig+0x35c>
 801f506:	a201      	add	r2, pc, #4	@ (adr r2, 801f50c <UART_SetConfig+0x2f0>)
 801f508:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f50c:	0801f525 	.word	0x0801f525
 801f510:	0801f52d 	.word	0x0801f52d
 801f514:	0801f535 	.word	0x0801f535
 801f518:	0801f53d 	.word	0x0801f53d
 801f51c:	0801f569 	.word	0x0801f569
 801f520:	0801f571 	.word	0x0801f571
 801f524:	2300      	movs	r3, #0
 801f526:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f52a:	e14a      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f52c:	2304      	movs	r3, #4
 801f52e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f532:	e146      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f534:	2308      	movs	r3, #8
 801f536:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f53a:	e142      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f53c:	2310      	movs	r3, #16
 801f53e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f542:	e13e      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f544:	cfff69f3 	.word	0xcfff69f3
 801f548:	58000c00 	.word	0x58000c00
 801f54c:	11fff4ff 	.word	0x11fff4ff
 801f550:	40011000 	.word	0x40011000
 801f554:	58024400 	.word	0x58024400
 801f558:	40004400 	.word	0x40004400
 801f55c:	40004800 	.word	0x40004800
 801f560:	40004c00 	.word	0x40004c00
 801f564:	40005000 	.word	0x40005000
 801f568:	2320      	movs	r3, #32
 801f56a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f56e:	e128      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f570:	2340      	movs	r3, #64	@ 0x40
 801f572:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f576:	e124      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f578:	2380      	movs	r3, #128	@ 0x80
 801f57a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f57e:	e120      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f580:	697b      	ldr	r3, [r7, #20]
 801f582:	681b      	ldr	r3, [r3, #0]
 801f584:	4acb      	ldr	r2, [pc, #812]	@ (801f8b4 <UART_SetConfig+0x698>)
 801f586:	4293      	cmp	r3, r2
 801f588:	d176      	bne.n	801f678 <UART_SetConfig+0x45c>
 801f58a:	4bcb      	ldr	r3, [pc, #812]	@ (801f8b8 <UART_SetConfig+0x69c>)
 801f58c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f58e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f592:	2b28      	cmp	r3, #40	@ 0x28
 801f594:	d86c      	bhi.n	801f670 <UART_SetConfig+0x454>
 801f596:	a201      	add	r2, pc, #4	@ (adr r2, 801f59c <UART_SetConfig+0x380>)
 801f598:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f59c:	0801f641 	.word	0x0801f641
 801f5a0:	0801f671 	.word	0x0801f671
 801f5a4:	0801f671 	.word	0x0801f671
 801f5a8:	0801f671 	.word	0x0801f671
 801f5ac:	0801f671 	.word	0x0801f671
 801f5b0:	0801f671 	.word	0x0801f671
 801f5b4:	0801f671 	.word	0x0801f671
 801f5b8:	0801f671 	.word	0x0801f671
 801f5bc:	0801f649 	.word	0x0801f649
 801f5c0:	0801f671 	.word	0x0801f671
 801f5c4:	0801f671 	.word	0x0801f671
 801f5c8:	0801f671 	.word	0x0801f671
 801f5cc:	0801f671 	.word	0x0801f671
 801f5d0:	0801f671 	.word	0x0801f671
 801f5d4:	0801f671 	.word	0x0801f671
 801f5d8:	0801f671 	.word	0x0801f671
 801f5dc:	0801f651 	.word	0x0801f651
 801f5e0:	0801f671 	.word	0x0801f671
 801f5e4:	0801f671 	.word	0x0801f671
 801f5e8:	0801f671 	.word	0x0801f671
 801f5ec:	0801f671 	.word	0x0801f671
 801f5f0:	0801f671 	.word	0x0801f671
 801f5f4:	0801f671 	.word	0x0801f671
 801f5f8:	0801f671 	.word	0x0801f671
 801f5fc:	0801f659 	.word	0x0801f659
 801f600:	0801f671 	.word	0x0801f671
 801f604:	0801f671 	.word	0x0801f671
 801f608:	0801f671 	.word	0x0801f671
 801f60c:	0801f671 	.word	0x0801f671
 801f610:	0801f671 	.word	0x0801f671
 801f614:	0801f671 	.word	0x0801f671
 801f618:	0801f671 	.word	0x0801f671
 801f61c:	0801f661 	.word	0x0801f661
 801f620:	0801f671 	.word	0x0801f671
 801f624:	0801f671 	.word	0x0801f671
 801f628:	0801f671 	.word	0x0801f671
 801f62c:	0801f671 	.word	0x0801f671
 801f630:	0801f671 	.word	0x0801f671
 801f634:	0801f671 	.word	0x0801f671
 801f638:	0801f671 	.word	0x0801f671
 801f63c:	0801f669 	.word	0x0801f669
 801f640:	2301      	movs	r3, #1
 801f642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f646:	e0bc      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f648:	2304      	movs	r3, #4
 801f64a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f64e:	e0b8      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f650:	2308      	movs	r3, #8
 801f652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f656:	e0b4      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f658:	2310      	movs	r3, #16
 801f65a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f65e:	e0b0      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f660:	2320      	movs	r3, #32
 801f662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f666:	e0ac      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f668:	2340      	movs	r3, #64	@ 0x40
 801f66a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f66e:	e0a8      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f670:	2380      	movs	r3, #128	@ 0x80
 801f672:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f676:	e0a4      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f678:	697b      	ldr	r3, [r7, #20]
 801f67a:	681b      	ldr	r3, [r3, #0]
 801f67c:	4a8f      	ldr	r2, [pc, #572]	@ (801f8bc <UART_SetConfig+0x6a0>)
 801f67e:	4293      	cmp	r3, r2
 801f680:	d130      	bne.n	801f6e4 <UART_SetConfig+0x4c8>
 801f682:	4b8d      	ldr	r3, [pc, #564]	@ (801f8b8 <UART_SetConfig+0x69c>)
 801f684:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f686:	f003 0307 	and.w	r3, r3, #7
 801f68a:	2b05      	cmp	r3, #5
 801f68c:	d826      	bhi.n	801f6dc <UART_SetConfig+0x4c0>
 801f68e:	a201      	add	r2, pc, #4	@ (adr r2, 801f694 <UART_SetConfig+0x478>)
 801f690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f694:	0801f6ad 	.word	0x0801f6ad
 801f698:	0801f6b5 	.word	0x0801f6b5
 801f69c:	0801f6bd 	.word	0x0801f6bd
 801f6a0:	0801f6c5 	.word	0x0801f6c5
 801f6a4:	0801f6cd 	.word	0x0801f6cd
 801f6a8:	0801f6d5 	.word	0x0801f6d5
 801f6ac:	2300      	movs	r3, #0
 801f6ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6b2:	e086      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f6b4:	2304      	movs	r3, #4
 801f6b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6ba:	e082      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f6bc:	2308      	movs	r3, #8
 801f6be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6c2:	e07e      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f6c4:	2310      	movs	r3, #16
 801f6c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6ca:	e07a      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f6cc:	2320      	movs	r3, #32
 801f6ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6d2:	e076      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f6d4:	2340      	movs	r3, #64	@ 0x40
 801f6d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6da:	e072      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f6dc:	2380      	movs	r3, #128	@ 0x80
 801f6de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f6e2:	e06e      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f6e4:	697b      	ldr	r3, [r7, #20]
 801f6e6:	681b      	ldr	r3, [r3, #0]
 801f6e8:	4a75      	ldr	r2, [pc, #468]	@ (801f8c0 <UART_SetConfig+0x6a4>)
 801f6ea:	4293      	cmp	r3, r2
 801f6ec:	d130      	bne.n	801f750 <UART_SetConfig+0x534>
 801f6ee:	4b72      	ldr	r3, [pc, #456]	@ (801f8b8 <UART_SetConfig+0x69c>)
 801f6f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f6f2:	f003 0307 	and.w	r3, r3, #7
 801f6f6:	2b05      	cmp	r3, #5
 801f6f8:	d826      	bhi.n	801f748 <UART_SetConfig+0x52c>
 801f6fa:	a201      	add	r2, pc, #4	@ (adr r2, 801f700 <UART_SetConfig+0x4e4>)
 801f6fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f700:	0801f719 	.word	0x0801f719
 801f704:	0801f721 	.word	0x0801f721
 801f708:	0801f729 	.word	0x0801f729
 801f70c:	0801f731 	.word	0x0801f731
 801f710:	0801f739 	.word	0x0801f739
 801f714:	0801f741 	.word	0x0801f741
 801f718:	2300      	movs	r3, #0
 801f71a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f71e:	e050      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f720:	2304      	movs	r3, #4
 801f722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f726:	e04c      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f728:	2308      	movs	r3, #8
 801f72a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f72e:	e048      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f730:	2310      	movs	r3, #16
 801f732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f736:	e044      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f738:	2320      	movs	r3, #32
 801f73a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f73e:	e040      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f740:	2340      	movs	r3, #64	@ 0x40
 801f742:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f746:	e03c      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f748:	2380      	movs	r3, #128	@ 0x80
 801f74a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f74e:	e038      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f750:	697b      	ldr	r3, [r7, #20]
 801f752:	681b      	ldr	r3, [r3, #0]
 801f754:	4a5b      	ldr	r2, [pc, #364]	@ (801f8c4 <UART_SetConfig+0x6a8>)
 801f756:	4293      	cmp	r3, r2
 801f758:	d130      	bne.n	801f7bc <UART_SetConfig+0x5a0>
 801f75a:	4b57      	ldr	r3, [pc, #348]	@ (801f8b8 <UART_SetConfig+0x69c>)
 801f75c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801f75e:	f003 0307 	and.w	r3, r3, #7
 801f762:	2b05      	cmp	r3, #5
 801f764:	d826      	bhi.n	801f7b4 <UART_SetConfig+0x598>
 801f766:	a201      	add	r2, pc, #4	@ (adr r2, 801f76c <UART_SetConfig+0x550>)
 801f768:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f76c:	0801f785 	.word	0x0801f785
 801f770:	0801f78d 	.word	0x0801f78d
 801f774:	0801f795 	.word	0x0801f795
 801f778:	0801f79d 	.word	0x0801f79d
 801f77c:	0801f7a5 	.word	0x0801f7a5
 801f780:	0801f7ad 	.word	0x0801f7ad
 801f784:	2302      	movs	r3, #2
 801f786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f78a:	e01a      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f78c:	2304      	movs	r3, #4
 801f78e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f792:	e016      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f794:	2308      	movs	r3, #8
 801f796:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f79a:	e012      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f79c:	2310      	movs	r3, #16
 801f79e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f7a2:	e00e      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f7a4:	2320      	movs	r3, #32
 801f7a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f7aa:	e00a      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f7ac:	2340      	movs	r3, #64	@ 0x40
 801f7ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f7b2:	e006      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f7b4:	2380      	movs	r3, #128	@ 0x80
 801f7b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801f7ba:	e002      	b.n	801f7c2 <UART_SetConfig+0x5a6>
 801f7bc:	2380      	movs	r3, #128	@ 0x80
 801f7be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801f7c2:	697b      	ldr	r3, [r7, #20]
 801f7c4:	681b      	ldr	r3, [r3, #0]
 801f7c6:	4a3f      	ldr	r2, [pc, #252]	@ (801f8c4 <UART_SetConfig+0x6a8>)
 801f7c8:	4293      	cmp	r3, r2
 801f7ca:	f040 80f8 	bne.w	801f9be <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801f7ce:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801f7d2:	2b20      	cmp	r3, #32
 801f7d4:	dc46      	bgt.n	801f864 <UART_SetConfig+0x648>
 801f7d6:	2b02      	cmp	r3, #2
 801f7d8:	f2c0 8082 	blt.w	801f8e0 <UART_SetConfig+0x6c4>
 801f7dc:	3b02      	subs	r3, #2
 801f7de:	2b1e      	cmp	r3, #30
 801f7e0:	d87e      	bhi.n	801f8e0 <UART_SetConfig+0x6c4>
 801f7e2:	a201      	add	r2, pc, #4	@ (adr r2, 801f7e8 <UART_SetConfig+0x5cc>)
 801f7e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f7e8:	0801f86b 	.word	0x0801f86b
 801f7ec:	0801f8e1 	.word	0x0801f8e1
 801f7f0:	0801f873 	.word	0x0801f873
 801f7f4:	0801f8e1 	.word	0x0801f8e1
 801f7f8:	0801f8e1 	.word	0x0801f8e1
 801f7fc:	0801f8e1 	.word	0x0801f8e1
 801f800:	0801f883 	.word	0x0801f883
 801f804:	0801f8e1 	.word	0x0801f8e1
 801f808:	0801f8e1 	.word	0x0801f8e1
 801f80c:	0801f8e1 	.word	0x0801f8e1
 801f810:	0801f8e1 	.word	0x0801f8e1
 801f814:	0801f8e1 	.word	0x0801f8e1
 801f818:	0801f8e1 	.word	0x0801f8e1
 801f81c:	0801f8e1 	.word	0x0801f8e1
 801f820:	0801f893 	.word	0x0801f893
 801f824:	0801f8e1 	.word	0x0801f8e1
 801f828:	0801f8e1 	.word	0x0801f8e1
 801f82c:	0801f8e1 	.word	0x0801f8e1
 801f830:	0801f8e1 	.word	0x0801f8e1
 801f834:	0801f8e1 	.word	0x0801f8e1
 801f838:	0801f8e1 	.word	0x0801f8e1
 801f83c:	0801f8e1 	.word	0x0801f8e1
 801f840:	0801f8e1 	.word	0x0801f8e1
 801f844:	0801f8e1 	.word	0x0801f8e1
 801f848:	0801f8e1 	.word	0x0801f8e1
 801f84c:	0801f8e1 	.word	0x0801f8e1
 801f850:	0801f8e1 	.word	0x0801f8e1
 801f854:	0801f8e1 	.word	0x0801f8e1
 801f858:	0801f8e1 	.word	0x0801f8e1
 801f85c:	0801f8e1 	.word	0x0801f8e1
 801f860:	0801f8d3 	.word	0x0801f8d3
 801f864:	2b40      	cmp	r3, #64	@ 0x40
 801f866:	d037      	beq.n	801f8d8 <UART_SetConfig+0x6bc>
 801f868:	e03a      	b.n	801f8e0 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801f86a:	f7fe f8d3 	bl	801da14 <HAL_RCCEx_GetD3PCLK1Freq>
 801f86e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801f870:	e03c      	b.n	801f8ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801f872:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801f876:	4618      	mov	r0, r3
 801f878:	f7fe f8e2 	bl	801da40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801f87c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f87e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f880:	e034      	b.n	801f8ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801f882:	f107 0318 	add.w	r3, r7, #24
 801f886:	4618      	mov	r0, r3
 801f888:	f7fe fa2e 	bl	801dce8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801f88c:	69fb      	ldr	r3, [r7, #28]
 801f88e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f890:	e02c      	b.n	801f8ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801f892:	4b09      	ldr	r3, [pc, #36]	@ (801f8b8 <UART_SetConfig+0x69c>)
 801f894:	681b      	ldr	r3, [r3, #0]
 801f896:	f003 0320 	and.w	r3, r3, #32
 801f89a:	2b00      	cmp	r3, #0
 801f89c:	d016      	beq.n	801f8cc <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801f89e:	4b06      	ldr	r3, [pc, #24]	@ (801f8b8 <UART_SetConfig+0x69c>)
 801f8a0:	681b      	ldr	r3, [r3, #0]
 801f8a2:	08db      	lsrs	r3, r3, #3
 801f8a4:	f003 0303 	and.w	r3, r3, #3
 801f8a8:	4a07      	ldr	r2, [pc, #28]	@ (801f8c8 <UART_SetConfig+0x6ac>)
 801f8aa:	fa22 f303 	lsr.w	r3, r2, r3
 801f8ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801f8b0:	e01c      	b.n	801f8ec <UART_SetConfig+0x6d0>
 801f8b2:	bf00      	nop
 801f8b4:	40011400 	.word	0x40011400
 801f8b8:	58024400 	.word	0x58024400
 801f8bc:	40007800 	.word	0x40007800
 801f8c0:	40007c00 	.word	0x40007c00
 801f8c4:	58000c00 	.word	0x58000c00
 801f8c8:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801f8cc:	4b9d      	ldr	r3, [pc, #628]	@ (801fb44 <UART_SetConfig+0x928>)
 801f8ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f8d0:	e00c      	b.n	801f8ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801f8d2:	4b9d      	ldr	r3, [pc, #628]	@ (801fb48 <UART_SetConfig+0x92c>)
 801f8d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f8d6:	e009      	b.n	801f8ec <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801f8d8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801f8dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801f8de:	e005      	b.n	801f8ec <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801f8e0:	2300      	movs	r3, #0
 801f8e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801f8e4:	2301      	movs	r3, #1
 801f8e6:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801f8ea:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801f8ec:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f8ee:	2b00      	cmp	r3, #0
 801f8f0:	f000 81de 	beq.w	801fcb0 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801f8f4:	697b      	ldr	r3, [r7, #20]
 801f8f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f8f8:	4a94      	ldr	r2, [pc, #592]	@ (801fb4c <UART_SetConfig+0x930>)
 801f8fa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f8fe:	461a      	mov	r2, r3
 801f900:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f902:	fbb3 f3f2 	udiv	r3, r3, r2
 801f906:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801f908:	697b      	ldr	r3, [r7, #20]
 801f90a:	685a      	ldr	r2, [r3, #4]
 801f90c:	4613      	mov	r3, r2
 801f90e:	005b      	lsls	r3, r3, #1
 801f910:	4413      	add	r3, r2
 801f912:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f914:	429a      	cmp	r2, r3
 801f916:	d305      	bcc.n	801f924 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801f918:	697b      	ldr	r3, [r7, #20]
 801f91a:	685b      	ldr	r3, [r3, #4]
 801f91c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801f91e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801f920:	429a      	cmp	r2, r3
 801f922:	d903      	bls.n	801f92c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 801f924:	2301      	movs	r3, #1
 801f926:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801f92a:	e1c1      	b.n	801fcb0 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801f92c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f92e:	2200      	movs	r2, #0
 801f930:	60bb      	str	r3, [r7, #8]
 801f932:	60fa      	str	r2, [r7, #12]
 801f934:	697b      	ldr	r3, [r7, #20]
 801f936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801f938:	4a84      	ldr	r2, [pc, #528]	@ (801fb4c <UART_SetConfig+0x930>)
 801f93a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801f93e:	b29b      	uxth	r3, r3
 801f940:	2200      	movs	r2, #0
 801f942:	603b      	str	r3, [r7, #0]
 801f944:	607a      	str	r2, [r7, #4]
 801f946:	e9d7 2300 	ldrd	r2, r3, [r7]
 801f94a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801f94e:	f7e0 fd2f 	bl	80003b0 <__aeabi_uldivmod>
 801f952:	4602      	mov	r2, r0
 801f954:	460b      	mov	r3, r1
 801f956:	4610      	mov	r0, r2
 801f958:	4619      	mov	r1, r3
 801f95a:	f04f 0200 	mov.w	r2, #0
 801f95e:	f04f 0300 	mov.w	r3, #0
 801f962:	020b      	lsls	r3, r1, #8
 801f964:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 801f968:	0202      	lsls	r2, r0, #8
 801f96a:	6979      	ldr	r1, [r7, #20]
 801f96c:	6849      	ldr	r1, [r1, #4]
 801f96e:	0849      	lsrs	r1, r1, #1
 801f970:	2000      	movs	r0, #0
 801f972:	460c      	mov	r4, r1
 801f974:	4605      	mov	r5, r0
 801f976:	eb12 0804 	adds.w	r8, r2, r4
 801f97a:	eb43 0905 	adc.w	r9, r3, r5
 801f97e:	697b      	ldr	r3, [r7, #20]
 801f980:	685b      	ldr	r3, [r3, #4]
 801f982:	2200      	movs	r2, #0
 801f984:	469a      	mov	sl, r3
 801f986:	4693      	mov	fp, r2
 801f988:	4652      	mov	r2, sl
 801f98a:	465b      	mov	r3, fp
 801f98c:	4640      	mov	r0, r8
 801f98e:	4649      	mov	r1, r9
 801f990:	f7e0 fd0e 	bl	80003b0 <__aeabi_uldivmod>
 801f994:	4602      	mov	r2, r0
 801f996:	460b      	mov	r3, r1
 801f998:	4613      	mov	r3, r2
 801f99a:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 801f99c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f99e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801f9a2:	d308      	bcc.n	801f9b6 <UART_SetConfig+0x79a>
 801f9a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f9a6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801f9aa:	d204      	bcs.n	801f9b6 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 801f9ac:	697b      	ldr	r3, [r7, #20]
 801f9ae:	681b      	ldr	r3, [r3, #0]
 801f9b0:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801f9b2:	60da      	str	r2, [r3, #12]
 801f9b4:	e17c      	b.n	801fcb0 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801f9b6:	2301      	movs	r3, #1
 801f9b8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801f9bc:	e178      	b.n	801fcb0 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801f9be:	697b      	ldr	r3, [r7, #20]
 801f9c0:	69db      	ldr	r3, [r3, #28]
 801f9c2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801f9c6:	f040 80c5 	bne.w	801fb54 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801f9ca:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801f9ce:	2b20      	cmp	r3, #32
 801f9d0:	dc48      	bgt.n	801fa64 <UART_SetConfig+0x848>
 801f9d2:	2b00      	cmp	r3, #0
 801f9d4:	db7b      	blt.n	801face <UART_SetConfig+0x8b2>
 801f9d6:	2b20      	cmp	r3, #32
 801f9d8:	d879      	bhi.n	801face <UART_SetConfig+0x8b2>
 801f9da:	a201      	add	r2, pc, #4	@ (adr r2, 801f9e0 <UART_SetConfig+0x7c4>)
 801f9dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f9e0:	0801fa6b 	.word	0x0801fa6b
 801f9e4:	0801fa73 	.word	0x0801fa73
 801f9e8:	0801facf 	.word	0x0801facf
 801f9ec:	0801facf 	.word	0x0801facf
 801f9f0:	0801fa7b 	.word	0x0801fa7b
 801f9f4:	0801facf 	.word	0x0801facf
 801f9f8:	0801facf 	.word	0x0801facf
 801f9fc:	0801facf 	.word	0x0801facf
 801fa00:	0801fa8b 	.word	0x0801fa8b
 801fa04:	0801facf 	.word	0x0801facf
 801fa08:	0801facf 	.word	0x0801facf
 801fa0c:	0801facf 	.word	0x0801facf
 801fa10:	0801facf 	.word	0x0801facf
 801fa14:	0801facf 	.word	0x0801facf
 801fa18:	0801facf 	.word	0x0801facf
 801fa1c:	0801facf 	.word	0x0801facf
 801fa20:	0801fa9b 	.word	0x0801fa9b
 801fa24:	0801facf 	.word	0x0801facf
 801fa28:	0801facf 	.word	0x0801facf
 801fa2c:	0801facf 	.word	0x0801facf
 801fa30:	0801facf 	.word	0x0801facf
 801fa34:	0801facf 	.word	0x0801facf
 801fa38:	0801facf 	.word	0x0801facf
 801fa3c:	0801facf 	.word	0x0801facf
 801fa40:	0801facf 	.word	0x0801facf
 801fa44:	0801facf 	.word	0x0801facf
 801fa48:	0801facf 	.word	0x0801facf
 801fa4c:	0801facf 	.word	0x0801facf
 801fa50:	0801facf 	.word	0x0801facf
 801fa54:	0801facf 	.word	0x0801facf
 801fa58:	0801facf 	.word	0x0801facf
 801fa5c:	0801facf 	.word	0x0801facf
 801fa60:	0801fac1 	.word	0x0801fac1
 801fa64:	2b40      	cmp	r3, #64	@ 0x40
 801fa66:	d02e      	beq.n	801fac6 <UART_SetConfig+0x8aa>
 801fa68:	e031      	b.n	801face <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fa6a:	f7fc fd9d 	bl	801c5a8 <HAL_RCC_GetPCLK1Freq>
 801fa6e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801fa70:	e033      	b.n	801fada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fa72:	f7fc fdaf 	bl	801c5d4 <HAL_RCC_GetPCLK2Freq>
 801fa76:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801fa78:	e02f      	b.n	801fada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801fa7a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801fa7e:	4618      	mov	r0, r3
 801fa80:	f7fd ffde 	bl	801da40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801fa84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fa86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fa88:	e027      	b.n	801fada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801fa8a:	f107 0318 	add.w	r3, r7, #24
 801fa8e:	4618      	mov	r0, r3
 801fa90:	f7fe f92a 	bl	801dce8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801fa94:	69fb      	ldr	r3, [r7, #28]
 801fa96:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fa98:	e01f      	b.n	801fada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801fa9a:	4b2d      	ldr	r3, [pc, #180]	@ (801fb50 <UART_SetConfig+0x934>)
 801fa9c:	681b      	ldr	r3, [r3, #0]
 801fa9e:	f003 0320 	and.w	r3, r3, #32
 801faa2:	2b00      	cmp	r3, #0
 801faa4:	d009      	beq.n	801faba <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801faa6:	4b2a      	ldr	r3, [pc, #168]	@ (801fb50 <UART_SetConfig+0x934>)
 801faa8:	681b      	ldr	r3, [r3, #0]
 801faaa:	08db      	lsrs	r3, r3, #3
 801faac:	f003 0303 	and.w	r3, r3, #3
 801fab0:	4a24      	ldr	r2, [pc, #144]	@ (801fb44 <UART_SetConfig+0x928>)
 801fab2:	fa22 f303 	lsr.w	r3, r2, r3
 801fab6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801fab8:	e00f      	b.n	801fada <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801faba:	4b22      	ldr	r3, [pc, #136]	@ (801fb44 <UART_SetConfig+0x928>)
 801fabc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fabe:	e00c      	b.n	801fada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801fac0:	4b21      	ldr	r3, [pc, #132]	@ (801fb48 <UART_SetConfig+0x92c>)
 801fac2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fac4:	e009      	b.n	801fada <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fac6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801faca:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801facc:	e005      	b.n	801fada <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 801face:	2300      	movs	r3, #0
 801fad0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801fad2:	2301      	movs	r3, #1
 801fad4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801fad8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801fada:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fadc:	2b00      	cmp	r3, #0
 801fade:	f000 80e7 	beq.w	801fcb0 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fae2:	697b      	ldr	r3, [r7, #20]
 801fae4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fae6:	4a19      	ldr	r2, [pc, #100]	@ (801fb4c <UART_SetConfig+0x930>)
 801fae8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801faec:	461a      	mov	r2, r3
 801faee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801faf0:	fbb3 f3f2 	udiv	r3, r3, r2
 801faf4:	005a      	lsls	r2, r3, #1
 801faf6:	697b      	ldr	r3, [r7, #20]
 801faf8:	685b      	ldr	r3, [r3, #4]
 801fafa:	085b      	lsrs	r3, r3, #1
 801fafc:	441a      	add	r2, r3
 801fafe:	697b      	ldr	r3, [r7, #20]
 801fb00:	685b      	ldr	r3, [r3, #4]
 801fb02:	fbb2 f3f3 	udiv	r3, r2, r3
 801fb06:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801fb08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fb0a:	2b0f      	cmp	r3, #15
 801fb0c:	d916      	bls.n	801fb3c <UART_SetConfig+0x920>
 801fb0e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fb10:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801fb14:	d212      	bcs.n	801fb3c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801fb16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fb18:	b29b      	uxth	r3, r3
 801fb1a:	f023 030f 	bic.w	r3, r3, #15
 801fb1e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 801fb20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fb22:	085b      	lsrs	r3, r3, #1
 801fb24:	b29b      	uxth	r3, r3
 801fb26:	f003 0307 	and.w	r3, r3, #7
 801fb2a:	b29a      	uxth	r2, r3
 801fb2c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 801fb2e:	4313      	orrs	r3, r2
 801fb30:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 801fb32:	697b      	ldr	r3, [r7, #20]
 801fb34:	681b      	ldr	r3, [r3, #0]
 801fb36:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801fb38:	60da      	str	r2, [r3, #12]
 801fb3a:	e0b9      	b.n	801fcb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801fb3c:	2301      	movs	r3, #1
 801fb3e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801fb42:	e0b5      	b.n	801fcb0 <UART_SetConfig+0xa94>
 801fb44:	03d09000 	.word	0x03d09000
 801fb48:	003d0900 	.word	0x003d0900
 801fb4c:	08025d20 	.word	0x08025d20
 801fb50:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 801fb54:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801fb58:	2b20      	cmp	r3, #32
 801fb5a:	dc49      	bgt.n	801fbf0 <UART_SetConfig+0x9d4>
 801fb5c:	2b00      	cmp	r3, #0
 801fb5e:	db7c      	blt.n	801fc5a <UART_SetConfig+0xa3e>
 801fb60:	2b20      	cmp	r3, #32
 801fb62:	d87a      	bhi.n	801fc5a <UART_SetConfig+0xa3e>
 801fb64:	a201      	add	r2, pc, #4	@ (adr r2, 801fb6c <UART_SetConfig+0x950>)
 801fb66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb6a:	bf00      	nop
 801fb6c:	0801fbf7 	.word	0x0801fbf7
 801fb70:	0801fbff 	.word	0x0801fbff
 801fb74:	0801fc5b 	.word	0x0801fc5b
 801fb78:	0801fc5b 	.word	0x0801fc5b
 801fb7c:	0801fc07 	.word	0x0801fc07
 801fb80:	0801fc5b 	.word	0x0801fc5b
 801fb84:	0801fc5b 	.word	0x0801fc5b
 801fb88:	0801fc5b 	.word	0x0801fc5b
 801fb8c:	0801fc17 	.word	0x0801fc17
 801fb90:	0801fc5b 	.word	0x0801fc5b
 801fb94:	0801fc5b 	.word	0x0801fc5b
 801fb98:	0801fc5b 	.word	0x0801fc5b
 801fb9c:	0801fc5b 	.word	0x0801fc5b
 801fba0:	0801fc5b 	.word	0x0801fc5b
 801fba4:	0801fc5b 	.word	0x0801fc5b
 801fba8:	0801fc5b 	.word	0x0801fc5b
 801fbac:	0801fc27 	.word	0x0801fc27
 801fbb0:	0801fc5b 	.word	0x0801fc5b
 801fbb4:	0801fc5b 	.word	0x0801fc5b
 801fbb8:	0801fc5b 	.word	0x0801fc5b
 801fbbc:	0801fc5b 	.word	0x0801fc5b
 801fbc0:	0801fc5b 	.word	0x0801fc5b
 801fbc4:	0801fc5b 	.word	0x0801fc5b
 801fbc8:	0801fc5b 	.word	0x0801fc5b
 801fbcc:	0801fc5b 	.word	0x0801fc5b
 801fbd0:	0801fc5b 	.word	0x0801fc5b
 801fbd4:	0801fc5b 	.word	0x0801fc5b
 801fbd8:	0801fc5b 	.word	0x0801fc5b
 801fbdc:	0801fc5b 	.word	0x0801fc5b
 801fbe0:	0801fc5b 	.word	0x0801fc5b
 801fbe4:	0801fc5b 	.word	0x0801fc5b
 801fbe8:	0801fc5b 	.word	0x0801fc5b
 801fbec:	0801fc4d 	.word	0x0801fc4d
 801fbf0:	2b40      	cmp	r3, #64	@ 0x40
 801fbf2:	d02e      	beq.n	801fc52 <UART_SetConfig+0xa36>
 801fbf4:	e031      	b.n	801fc5a <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801fbf6:	f7fc fcd7 	bl	801c5a8 <HAL_RCC_GetPCLK1Freq>
 801fbfa:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801fbfc:	e033      	b.n	801fc66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801fbfe:	f7fc fce9 	bl	801c5d4 <HAL_RCC_GetPCLK2Freq>
 801fc02:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801fc04:	e02f      	b.n	801fc66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801fc06:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801fc0a:	4618      	mov	r0, r3
 801fc0c:	f7fd ff18 	bl	801da40 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801fc10:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801fc12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fc14:	e027      	b.n	801fc66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801fc16:	f107 0318 	add.w	r3, r7, #24
 801fc1a:	4618      	mov	r0, r3
 801fc1c:	f7fe f864 	bl	801dce8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801fc20:	69fb      	ldr	r3, [r7, #28]
 801fc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fc24:	e01f      	b.n	801fc66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801fc26:	4b2d      	ldr	r3, [pc, #180]	@ (801fcdc <UART_SetConfig+0xac0>)
 801fc28:	681b      	ldr	r3, [r3, #0]
 801fc2a:	f003 0320 	and.w	r3, r3, #32
 801fc2e:	2b00      	cmp	r3, #0
 801fc30:	d009      	beq.n	801fc46 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801fc32:	4b2a      	ldr	r3, [pc, #168]	@ (801fcdc <UART_SetConfig+0xac0>)
 801fc34:	681b      	ldr	r3, [r3, #0]
 801fc36:	08db      	lsrs	r3, r3, #3
 801fc38:	f003 0303 	and.w	r3, r3, #3
 801fc3c:	4a28      	ldr	r2, [pc, #160]	@ (801fce0 <UART_SetConfig+0xac4>)
 801fc3e:	fa22 f303 	lsr.w	r3, r2, r3
 801fc42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801fc44:	e00f      	b.n	801fc66 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 801fc46:	4b26      	ldr	r3, [pc, #152]	@ (801fce0 <UART_SetConfig+0xac4>)
 801fc48:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fc4a:	e00c      	b.n	801fc66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801fc4c:	4b25      	ldr	r3, [pc, #148]	@ (801fce4 <UART_SetConfig+0xac8>)
 801fc4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fc50:	e009      	b.n	801fc66 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801fc52:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801fc56:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801fc58:	e005      	b.n	801fc66 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 801fc5a:	2300      	movs	r3, #0
 801fc5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801fc5e:	2301      	movs	r3, #1
 801fc60:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801fc64:	bf00      	nop
    }

    if (pclk != 0U)
 801fc66:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fc68:	2b00      	cmp	r3, #0
 801fc6a:	d021      	beq.n	801fcb0 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 801fc6c:	697b      	ldr	r3, [r7, #20]
 801fc6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801fc70:	4a1d      	ldr	r2, [pc, #116]	@ (801fce8 <UART_SetConfig+0xacc>)
 801fc72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fc76:	461a      	mov	r2, r3
 801fc78:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fc7a:	fbb3 f2f2 	udiv	r2, r3, r2
 801fc7e:	697b      	ldr	r3, [r7, #20]
 801fc80:	685b      	ldr	r3, [r3, #4]
 801fc82:	085b      	lsrs	r3, r3, #1
 801fc84:	441a      	add	r2, r3
 801fc86:	697b      	ldr	r3, [r7, #20]
 801fc88:	685b      	ldr	r3, [r3, #4]
 801fc8a:	fbb2 f3f3 	udiv	r3, r2, r3
 801fc8e:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801fc90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fc92:	2b0f      	cmp	r3, #15
 801fc94:	d909      	bls.n	801fcaa <UART_SetConfig+0xa8e>
 801fc96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fc98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801fc9c:	d205      	bcs.n	801fcaa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 801fc9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fca0:	b29a      	uxth	r2, r3
 801fca2:	697b      	ldr	r3, [r7, #20]
 801fca4:	681b      	ldr	r3, [r3, #0]
 801fca6:	60da      	str	r2, [r3, #12]
 801fca8:	e002      	b.n	801fcb0 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801fcaa:	2301      	movs	r3, #1
 801fcac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 801fcb0:	697b      	ldr	r3, [r7, #20]
 801fcb2:	2201      	movs	r2, #1
 801fcb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801fcb8:	697b      	ldr	r3, [r7, #20]
 801fcba:	2201      	movs	r2, #1
 801fcbc:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801fcc0:	697b      	ldr	r3, [r7, #20]
 801fcc2:	2200      	movs	r2, #0
 801fcc4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801fcc6:	697b      	ldr	r3, [r7, #20]
 801fcc8:	2200      	movs	r2, #0
 801fcca:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 801fccc:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 801fcd0:	4618      	mov	r0, r3
 801fcd2:	3748      	adds	r7, #72	@ 0x48
 801fcd4:	46bd      	mov	sp, r7
 801fcd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801fcda:	bf00      	nop
 801fcdc:	58024400 	.word	0x58024400
 801fce0:	03d09000 	.word	0x03d09000
 801fce4:	003d0900 	.word	0x003d0900
 801fce8:	08025d20 	.word	0x08025d20

0801fcec <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801fcec:	b480      	push	{r7}
 801fcee:	b083      	sub	sp, #12
 801fcf0:	af00      	add	r7, sp, #0
 801fcf2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 801fcf4:	687b      	ldr	r3, [r7, #4]
 801fcf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fcf8:	f003 0308 	and.w	r3, r3, #8
 801fcfc:	2b00      	cmp	r3, #0
 801fcfe:	d00a      	beq.n	801fd16 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 801fd00:	687b      	ldr	r3, [r7, #4]
 801fd02:	681b      	ldr	r3, [r3, #0]
 801fd04:	685b      	ldr	r3, [r3, #4]
 801fd06:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801fd0a:	687b      	ldr	r3, [r7, #4]
 801fd0c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801fd0e:	687b      	ldr	r3, [r7, #4]
 801fd10:	681b      	ldr	r3, [r3, #0]
 801fd12:	430a      	orrs	r2, r1
 801fd14:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801fd16:	687b      	ldr	r3, [r7, #4]
 801fd18:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd1a:	f003 0301 	and.w	r3, r3, #1
 801fd1e:	2b00      	cmp	r3, #0
 801fd20:	d00a      	beq.n	801fd38 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	681b      	ldr	r3, [r3, #0]
 801fd26:	685b      	ldr	r3, [r3, #4]
 801fd28:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 801fd2c:	687b      	ldr	r3, [r7, #4]
 801fd2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801fd30:	687b      	ldr	r3, [r7, #4]
 801fd32:	681b      	ldr	r3, [r3, #0]
 801fd34:	430a      	orrs	r2, r1
 801fd36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801fd38:	687b      	ldr	r3, [r7, #4]
 801fd3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd3c:	f003 0302 	and.w	r3, r3, #2
 801fd40:	2b00      	cmp	r3, #0
 801fd42:	d00a      	beq.n	801fd5a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 801fd44:	687b      	ldr	r3, [r7, #4]
 801fd46:	681b      	ldr	r3, [r3, #0]
 801fd48:	685b      	ldr	r3, [r3, #4]
 801fd4a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801fd4e:	687b      	ldr	r3, [r7, #4]
 801fd50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801fd52:	687b      	ldr	r3, [r7, #4]
 801fd54:	681b      	ldr	r3, [r3, #0]
 801fd56:	430a      	orrs	r2, r1
 801fd58:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 801fd5a:	687b      	ldr	r3, [r7, #4]
 801fd5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd5e:	f003 0304 	and.w	r3, r3, #4
 801fd62:	2b00      	cmp	r3, #0
 801fd64:	d00a      	beq.n	801fd7c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 801fd66:	687b      	ldr	r3, [r7, #4]
 801fd68:	681b      	ldr	r3, [r3, #0]
 801fd6a:	685b      	ldr	r3, [r3, #4]
 801fd6c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 801fd70:	687b      	ldr	r3, [r7, #4]
 801fd72:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fd74:	687b      	ldr	r3, [r7, #4]
 801fd76:	681b      	ldr	r3, [r3, #0]
 801fd78:	430a      	orrs	r2, r1
 801fd7a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 801fd7c:	687b      	ldr	r3, [r7, #4]
 801fd7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fd80:	f003 0310 	and.w	r3, r3, #16
 801fd84:	2b00      	cmp	r3, #0
 801fd86:	d00a      	beq.n	801fd9e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 801fd88:	687b      	ldr	r3, [r7, #4]
 801fd8a:	681b      	ldr	r3, [r3, #0]
 801fd8c:	689b      	ldr	r3, [r3, #8]
 801fd8e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 801fd92:	687b      	ldr	r3, [r7, #4]
 801fd94:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801fd96:	687b      	ldr	r3, [r7, #4]
 801fd98:	681b      	ldr	r3, [r3, #0]
 801fd9a:	430a      	orrs	r2, r1
 801fd9c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 801fd9e:	687b      	ldr	r3, [r7, #4]
 801fda0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fda2:	f003 0320 	and.w	r3, r3, #32
 801fda6:	2b00      	cmp	r3, #0
 801fda8:	d00a      	beq.n	801fdc0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 801fdaa:	687b      	ldr	r3, [r7, #4]
 801fdac:	681b      	ldr	r3, [r3, #0]
 801fdae:	689b      	ldr	r3, [r3, #8]
 801fdb0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 801fdb4:	687b      	ldr	r3, [r7, #4]
 801fdb6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801fdb8:	687b      	ldr	r3, [r7, #4]
 801fdba:	681b      	ldr	r3, [r3, #0]
 801fdbc:	430a      	orrs	r2, r1
 801fdbe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 801fdc0:	687b      	ldr	r3, [r7, #4]
 801fdc2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fdc4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801fdc8:	2b00      	cmp	r3, #0
 801fdca:	d01a      	beq.n	801fe02 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801fdcc:	687b      	ldr	r3, [r7, #4]
 801fdce:	681b      	ldr	r3, [r3, #0]
 801fdd0:	685b      	ldr	r3, [r3, #4]
 801fdd2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 801fdd6:	687b      	ldr	r3, [r7, #4]
 801fdd8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801fdda:	687b      	ldr	r3, [r7, #4]
 801fddc:	681b      	ldr	r3, [r3, #0]
 801fdde:	430a      	orrs	r2, r1
 801fde0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801fde6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801fdea:	d10a      	bne.n	801fe02 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801fdec:	687b      	ldr	r3, [r7, #4]
 801fdee:	681b      	ldr	r3, [r3, #0]
 801fdf0:	685b      	ldr	r3, [r3, #4]
 801fdf2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 801fdf6:	687b      	ldr	r3, [r7, #4]
 801fdf8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801fdfa:	687b      	ldr	r3, [r7, #4]
 801fdfc:	681b      	ldr	r3, [r3, #0]
 801fdfe:	430a      	orrs	r2, r1
 801fe00:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 801fe02:	687b      	ldr	r3, [r7, #4]
 801fe04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801fe06:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801fe0a:	2b00      	cmp	r3, #0
 801fe0c:	d00a      	beq.n	801fe24 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 801fe0e:	687b      	ldr	r3, [r7, #4]
 801fe10:	681b      	ldr	r3, [r3, #0]
 801fe12:	685b      	ldr	r3, [r3, #4]
 801fe14:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 801fe18:	687b      	ldr	r3, [r7, #4]
 801fe1a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801fe1c:	687b      	ldr	r3, [r7, #4]
 801fe1e:	681b      	ldr	r3, [r3, #0]
 801fe20:	430a      	orrs	r2, r1
 801fe22:	605a      	str	r2, [r3, #4]
  }
}
 801fe24:	bf00      	nop
 801fe26:	370c      	adds	r7, #12
 801fe28:	46bd      	mov	sp, r7
 801fe2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801fe2e:	4770      	bx	lr

0801fe30 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 801fe30:	b580      	push	{r7, lr}
 801fe32:	b098      	sub	sp, #96	@ 0x60
 801fe34:	af02      	add	r7, sp, #8
 801fe36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801fe38:	687b      	ldr	r3, [r7, #4]
 801fe3a:	2200      	movs	r2, #0
 801fe3c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 801fe40:	f7f9 f952 	bl	80190e8 <HAL_GetTick>
 801fe44:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 801fe46:	687b      	ldr	r3, [r7, #4]
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	681b      	ldr	r3, [r3, #0]
 801fe4c:	f003 0308 	and.w	r3, r3, #8
 801fe50:	2b08      	cmp	r3, #8
 801fe52:	d12f      	bne.n	801feb4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fe54:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801fe58:	9300      	str	r3, [sp, #0]
 801fe5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801fe5c:	2200      	movs	r2, #0
 801fe5e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 801fe62:	6878      	ldr	r0, [r7, #4]
 801fe64:	f000 f88e 	bl	801ff84 <UART_WaitOnFlagUntilTimeout>
 801fe68:	4603      	mov	r3, r0
 801fe6a:	2b00      	cmp	r3, #0
 801fe6c:	d022      	beq.n	801feb4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 801fe6e:	687b      	ldr	r3, [r7, #4]
 801fe70:	681b      	ldr	r3, [r3, #0]
 801fe72:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fe74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801fe76:	e853 3f00 	ldrex	r3, [r3]
 801fe7a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801fe7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801fe7e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801fe82:	653b      	str	r3, [r7, #80]	@ 0x50
 801fe84:	687b      	ldr	r3, [r7, #4]
 801fe86:	681b      	ldr	r3, [r3, #0]
 801fe88:	461a      	mov	r2, r3
 801fe8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801fe8c:	647b      	str	r3, [r7, #68]	@ 0x44
 801fe8e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fe90:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801fe92:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801fe94:	e841 2300 	strex	r3, r2, [r1]
 801fe98:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801fe9a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fe9c:	2b00      	cmp	r3, #0
 801fe9e:	d1e6      	bne.n	801fe6e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 801fea0:	687b      	ldr	r3, [r7, #4]
 801fea2:	2220      	movs	r2, #32
 801fea4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 801fea8:	687b      	ldr	r3, [r7, #4]
 801feaa:	2200      	movs	r2, #0
 801feac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801feb0:	2303      	movs	r3, #3
 801feb2:	e063      	b.n	801ff7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 801feb4:	687b      	ldr	r3, [r7, #4]
 801feb6:	681b      	ldr	r3, [r3, #0]
 801feb8:	681b      	ldr	r3, [r3, #0]
 801feba:	f003 0304 	and.w	r3, r3, #4
 801febe:	2b04      	cmp	r3, #4
 801fec0:	d149      	bne.n	801ff56 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 801fec2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 801fec6:	9300      	str	r3, [sp, #0]
 801fec8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801feca:	2200      	movs	r2, #0
 801fecc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 801fed0:	6878      	ldr	r0, [r7, #4]
 801fed2:	f000 f857 	bl	801ff84 <UART_WaitOnFlagUntilTimeout>
 801fed6:	4603      	mov	r3, r0
 801fed8:	2b00      	cmp	r3, #0
 801feda:	d03c      	beq.n	801ff56 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801fedc:	687b      	ldr	r3, [r7, #4]
 801fede:	681b      	ldr	r3, [r3, #0]
 801fee0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801fee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801fee4:	e853 3f00 	ldrex	r3, [r3]
 801fee8:	623b      	str	r3, [r7, #32]
   return(result);
 801feea:	6a3b      	ldr	r3, [r7, #32]
 801feec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801fef0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801fef2:	687b      	ldr	r3, [r7, #4]
 801fef4:	681b      	ldr	r3, [r3, #0]
 801fef6:	461a      	mov	r2, r3
 801fef8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801fefa:	633b      	str	r3, [r7, #48]	@ 0x30
 801fefc:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801fefe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801ff00:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801ff02:	e841 2300 	strex	r3, r2, [r1]
 801ff06:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801ff08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff0a:	2b00      	cmp	r3, #0
 801ff0c:	d1e6      	bne.n	801fedc <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801ff0e:	687b      	ldr	r3, [r7, #4]
 801ff10:	681b      	ldr	r3, [r3, #0]
 801ff12:	3308      	adds	r3, #8
 801ff14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ff16:	693b      	ldr	r3, [r7, #16]
 801ff18:	e853 3f00 	ldrex	r3, [r3]
 801ff1c:	60fb      	str	r3, [r7, #12]
   return(result);
 801ff1e:	68fb      	ldr	r3, [r7, #12]
 801ff20:	f023 0301 	bic.w	r3, r3, #1
 801ff24:	64bb      	str	r3, [r7, #72]	@ 0x48
 801ff26:	687b      	ldr	r3, [r7, #4]
 801ff28:	681b      	ldr	r3, [r3, #0]
 801ff2a:	3308      	adds	r3, #8
 801ff2c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801ff2e:	61fa      	str	r2, [r7, #28]
 801ff30:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ff32:	69b9      	ldr	r1, [r7, #24]
 801ff34:	69fa      	ldr	r2, [r7, #28]
 801ff36:	e841 2300 	strex	r3, r2, [r1]
 801ff3a:	617b      	str	r3, [r7, #20]
   return(result);
 801ff3c:	697b      	ldr	r3, [r7, #20]
 801ff3e:	2b00      	cmp	r3, #0
 801ff40:	d1e5      	bne.n	801ff0e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801ff42:	687b      	ldr	r3, [r7, #4]
 801ff44:	2220      	movs	r2, #32
 801ff46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801ff4a:	687b      	ldr	r3, [r7, #4]
 801ff4c:	2200      	movs	r2, #0
 801ff4e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801ff52:	2303      	movs	r3, #3
 801ff54:	e012      	b.n	801ff7c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801ff56:	687b      	ldr	r3, [r7, #4]
 801ff58:	2220      	movs	r2, #32
 801ff5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801ff5e:	687b      	ldr	r3, [r7, #4]
 801ff60:	2220      	movs	r2, #32
 801ff62:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ff66:	687b      	ldr	r3, [r7, #4]
 801ff68:	2200      	movs	r2, #0
 801ff6a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ff6c:	687b      	ldr	r3, [r7, #4]
 801ff6e:	2200      	movs	r2, #0
 801ff70:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801ff72:	687b      	ldr	r3, [r7, #4]
 801ff74:	2200      	movs	r2, #0
 801ff76:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801ff7a:	2300      	movs	r3, #0
}
 801ff7c:	4618      	mov	r0, r3
 801ff7e:	3758      	adds	r7, #88	@ 0x58
 801ff80:	46bd      	mov	sp, r7
 801ff82:	bd80      	pop	{r7, pc}

0801ff84 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801ff84:	b580      	push	{r7, lr}
 801ff86:	b084      	sub	sp, #16
 801ff88:	af00      	add	r7, sp, #0
 801ff8a:	60f8      	str	r0, [r7, #12]
 801ff8c:	60b9      	str	r1, [r7, #8]
 801ff8e:	603b      	str	r3, [r7, #0]
 801ff90:	4613      	mov	r3, r2
 801ff92:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801ff94:	e04f      	b.n	8020036 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801ff96:	69bb      	ldr	r3, [r7, #24]
 801ff98:	f1b3 3fff 	cmp.w	r3, #4294967295
 801ff9c:	d04b      	beq.n	8020036 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801ff9e:	f7f9 f8a3 	bl	80190e8 <HAL_GetTick>
 801ffa2:	4602      	mov	r2, r0
 801ffa4:	683b      	ldr	r3, [r7, #0]
 801ffa6:	1ad3      	subs	r3, r2, r3
 801ffa8:	69ba      	ldr	r2, [r7, #24]
 801ffaa:	429a      	cmp	r2, r3
 801ffac:	d302      	bcc.n	801ffb4 <UART_WaitOnFlagUntilTimeout+0x30>
 801ffae:	69bb      	ldr	r3, [r7, #24]
 801ffb0:	2b00      	cmp	r3, #0
 801ffb2:	d101      	bne.n	801ffb8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801ffb4:	2303      	movs	r3, #3
 801ffb6:	e04e      	b.n	8020056 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801ffb8:	68fb      	ldr	r3, [r7, #12]
 801ffba:	681b      	ldr	r3, [r3, #0]
 801ffbc:	681b      	ldr	r3, [r3, #0]
 801ffbe:	f003 0304 	and.w	r3, r3, #4
 801ffc2:	2b00      	cmp	r3, #0
 801ffc4:	d037      	beq.n	8020036 <UART_WaitOnFlagUntilTimeout+0xb2>
 801ffc6:	68bb      	ldr	r3, [r7, #8]
 801ffc8:	2b80      	cmp	r3, #128	@ 0x80
 801ffca:	d034      	beq.n	8020036 <UART_WaitOnFlagUntilTimeout+0xb2>
 801ffcc:	68bb      	ldr	r3, [r7, #8]
 801ffce:	2b40      	cmp	r3, #64	@ 0x40
 801ffd0:	d031      	beq.n	8020036 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801ffd2:	68fb      	ldr	r3, [r7, #12]
 801ffd4:	681b      	ldr	r3, [r3, #0]
 801ffd6:	69db      	ldr	r3, [r3, #28]
 801ffd8:	f003 0308 	and.w	r3, r3, #8
 801ffdc:	2b08      	cmp	r3, #8
 801ffde:	d110      	bne.n	8020002 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801ffe0:	68fb      	ldr	r3, [r7, #12]
 801ffe2:	681b      	ldr	r3, [r3, #0]
 801ffe4:	2208      	movs	r2, #8
 801ffe6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801ffe8:	68f8      	ldr	r0, [r7, #12]
 801ffea:	f000 f839 	bl	8020060 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801ffee:	68fb      	ldr	r3, [r7, #12]
 801fff0:	2208      	movs	r2, #8
 801fff2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801fff6:	68fb      	ldr	r3, [r7, #12]
 801fff8:	2200      	movs	r2, #0
 801fffa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801fffe:	2301      	movs	r3, #1
 8020000:	e029      	b.n	8020056 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8020002:	68fb      	ldr	r3, [r7, #12]
 8020004:	681b      	ldr	r3, [r3, #0]
 8020006:	69db      	ldr	r3, [r3, #28]
 8020008:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 802000c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8020010:	d111      	bne.n	8020036 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8020012:	68fb      	ldr	r3, [r7, #12]
 8020014:	681b      	ldr	r3, [r3, #0]
 8020016:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 802001a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 802001c:	68f8      	ldr	r0, [r7, #12]
 802001e:	f000 f81f 	bl	8020060 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8020022:	68fb      	ldr	r3, [r7, #12]
 8020024:	2220      	movs	r2, #32
 8020026:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802002a:	68fb      	ldr	r3, [r7, #12]
 802002c:	2200      	movs	r2, #0
 802002e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8020032:	2303      	movs	r3, #3
 8020034:	e00f      	b.n	8020056 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8020036:	68fb      	ldr	r3, [r7, #12]
 8020038:	681b      	ldr	r3, [r3, #0]
 802003a:	69da      	ldr	r2, [r3, #28]
 802003c:	68bb      	ldr	r3, [r7, #8]
 802003e:	4013      	ands	r3, r2
 8020040:	68ba      	ldr	r2, [r7, #8]
 8020042:	429a      	cmp	r2, r3
 8020044:	bf0c      	ite	eq
 8020046:	2301      	moveq	r3, #1
 8020048:	2300      	movne	r3, #0
 802004a:	b2db      	uxtb	r3, r3
 802004c:	461a      	mov	r2, r3
 802004e:	79fb      	ldrb	r3, [r7, #7]
 8020050:	429a      	cmp	r2, r3
 8020052:	d0a0      	beq.n	801ff96 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8020054:	2300      	movs	r3, #0
}
 8020056:	4618      	mov	r0, r3
 8020058:	3710      	adds	r7, #16
 802005a:	46bd      	mov	sp, r7
 802005c:	bd80      	pop	{r7, pc}
	...

08020060 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8020060:	b480      	push	{r7}
 8020062:	b095      	sub	sp, #84	@ 0x54
 8020064:	af00      	add	r7, sp, #0
 8020066:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8020068:	687b      	ldr	r3, [r7, #4]
 802006a:	681b      	ldr	r3, [r3, #0]
 802006c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802006e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020070:	e853 3f00 	ldrex	r3, [r3]
 8020074:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8020076:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020078:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 802007c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 802007e:	687b      	ldr	r3, [r7, #4]
 8020080:	681b      	ldr	r3, [r3, #0]
 8020082:	461a      	mov	r2, r3
 8020084:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020086:	643b      	str	r3, [r7, #64]	@ 0x40
 8020088:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802008a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 802008c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802008e:	e841 2300 	strex	r3, r2, [r1]
 8020092:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8020094:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020096:	2b00      	cmp	r3, #0
 8020098:	d1e6      	bne.n	8020068 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802009a:	687b      	ldr	r3, [r7, #4]
 802009c:	681b      	ldr	r3, [r3, #0]
 802009e:	3308      	adds	r3, #8
 80200a0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80200a2:	6a3b      	ldr	r3, [r7, #32]
 80200a4:	e853 3f00 	ldrex	r3, [r3]
 80200a8:	61fb      	str	r3, [r7, #28]
   return(result);
 80200aa:	69fa      	ldr	r2, [r7, #28]
 80200ac:	4b1e      	ldr	r3, [pc, #120]	@ (8020128 <UART_EndRxTransfer+0xc8>)
 80200ae:	4013      	ands	r3, r2
 80200b0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80200b2:	687b      	ldr	r3, [r7, #4]
 80200b4:	681b      	ldr	r3, [r3, #0]
 80200b6:	3308      	adds	r3, #8
 80200b8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80200ba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80200bc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80200be:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80200c0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80200c2:	e841 2300 	strex	r3, r2, [r1]
 80200c6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80200c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80200ca:	2b00      	cmp	r3, #0
 80200cc:	d1e5      	bne.n	802009a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80200ce:	687b      	ldr	r3, [r7, #4]
 80200d0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80200d2:	2b01      	cmp	r3, #1
 80200d4:	d118      	bne.n	8020108 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80200d6:	687b      	ldr	r3, [r7, #4]
 80200d8:	681b      	ldr	r3, [r3, #0]
 80200da:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80200dc:	68fb      	ldr	r3, [r7, #12]
 80200de:	e853 3f00 	ldrex	r3, [r3]
 80200e2:	60bb      	str	r3, [r7, #8]
   return(result);
 80200e4:	68bb      	ldr	r3, [r7, #8]
 80200e6:	f023 0310 	bic.w	r3, r3, #16
 80200ea:	647b      	str	r3, [r7, #68]	@ 0x44
 80200ec:	687b      	ldr	r3, [r7, #4]
 80200ee:	681b      	ldr	r3, [r3, #0]
 80200f0:	461a      	mov	r2, r3
 80200f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80200f4:	61bb      	str	r3, [r7, #24]
 80200f6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80200f8:	6979      	ldr	r1, [r7, #20]
 80200fa:	69ba      	ldr	r2, [r7, #24]
 80200fc:	e841 2300 	strex	r3, r2, [r1]
 8020100:	613b      	str	r3, [r7, #16]
   return(result);
 8020102:	693b      	ldr	r3, [r7, #16]
 8020104:	2b00      	cmp	r3, #0
 8020106:	d1e6      	bne.n	80200d6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8020108:	687b      	ldr	r3, [r7, #4]
 802010a:	2220      	movs	r2, #32
 802010c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020110:	687b      	ldr	r3, [r7, #4]
 8020112:	2200      	movs	r2, #0
 8020114:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8020116:	687b      	ldr	r3, [r7, #4]
 8020118:	2200      	movs	r2, #0
 802011a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 802011c:	bf00      	nop
 802011e:	3754      	adds	r7, #84	@ 0x54
 8020120:	46bd      	mov	sp, r7
 8020122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020126:	4770      	bx	lr
 8020128:	effffffe 	.word	0xeffffffe

0802012c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 802012c:	b480      	push	{r7}
 802012e:	b085      	sub	sp, #20
 8020130:	af00      	add	r7, sp, #0
 8020132:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020134:	687b      	ldr	r3, [r7, #4]
 8020136:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802013a:	2b01      	cmp	r3, #1
 802013c:	d101      	bne.n	8020142 <HAL_UARTEx_DisableFifoMode+0x16>
 802013e:	2302      	movs	r3, #2
 8020140:	e027      	b.n	8020192 <HAL_UARTEx_DisableFifoMode+0x66>
 8020142:	687b      	ldr	r3, [r7, #4]
 8020144:	2201      	movs	r2, #1
 8020146:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802014a:	687b      	ldr	r3, [r7, #4]
 802014c:	2224      	movs	r2, #36	@ 0x24
 802014e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020152:	687b      	ldr	r3, [r7, #4]
 8020154:	681b      	ldr	r3, [r3, #0]
 8020156:	681b      	ldr	r3, [r3, #0]
 8020158:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802015a:	687b      	ldr	r3, [r7, #4]
 802015c:	681b      	ldr	r3, [r3, #0]
 802015e:	681a      	ldr	r2, [r3, #0]
 8020160:	687b      	ldr	r3, [r7, #4]
 8020162:	681b      	ldr	r3, [r3, #0]
 8020164:	f022 0201 	bic.w	r2, r2, #1
 8020168:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 802016a:	68fb      	ldr	r3, [r7, #12]
 802016c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8020170:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8020172:	687b      	ldr	r3, [r7, #4]
 8020174:	2200      	movs	r2, #0
 8020176:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020178:	687b      	ldr	r3, [r7, #4]
 802017a:	681b      	ldr	r3, [r3, #0]
 802017c:	68fa      	ldr	r2, [r7, #12]
 802017e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020180:	687b      	ldr	r3, [r7, #4]
 8020182:	2220      	movs	r2, #32
 8020184:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020188:	687b      	ldr	r3, [r7, #4]
 802018a:	2200      	movs	r2, #0
 802018c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8020190:	2300      	movs	r3, #0
}
 8020192:	4618      	mov	r0, r3
 8020194:	3714      	adds	r7, #20
 8020196:	46bd      	mov	sp, r7
 8020198:	f85d 7b04 	ldr.w	r7, [sp], #4
 802019c:	4770      	bx	lr

0802019e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802019e:	b580      	push	{r7, lr}
 80201a0:	b084      	sub	sp, #16
 80201a2:	af00      	add	r7, sp, #0
 80201a4:	6078      	str	r0, [r7, #4]
 80201a6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80201a8:	687b      	ldr	r3, [r7, #4]
 80201aa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80201ae:	2b01      	cmp	r3, #1
 80201b0:	d101      	bne.n	80201b6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80201b2:	2302      	movs	r3, #2
 80201b4:	e02d      	b.n	8020212 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80201b6:	687b      	ldr	r3, [r7, #4]
 80201b8:	2201      	movs	r2, #1
 80201ba:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80201be:	687b      	ldr	r3, [r7, #4]
 80201c0:	2224      	movs	r2, #36	@ 0x24
 80201c2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	681b      	ldr	r3, [r3, #0]
 80201ca:	681b      	ldr	r3, [r3, #0]
 80201cc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80201ce:	687b      	ldr	r3, [r7, #4]
 80201d0:	681b      	ldr	r3, [r3, #0]
 80201d2:	681a      	ldr	r2, [r3, #0]
 80201d4:	687b      	ldr	r3, [r7, #4]
 80201d6:	681b      	ldr	r3, [r3, #0]
 80201d8:	f022 0201 	bic.w	r2, r2, #1
 80201dc:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80201de:	687b      	ldr	r3, [r7, #4]
 80201e0:	681b      	ldr	r3, [r3, #0]
 80201e2:	689b      	ldr	r3, [r3, #8]
 80201e4:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80201e8:	687b      	ldr	r3, [r7, #4]
 80201ea:	681b      	ldr	r3, [r3, #0]
 80201ec:	683a      	ldr	r2, [r7, #0]
 80201ee:	430a      	orrs	r2, r1
 80201f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80201f2:	6878      	ldr	r0, [r7, #4]
 80201f4:	f000 f850 	bl	8020298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80201f8:	687b      	ldr	r3, [r7, #4]
 80201fa:	681b      	ldr	r3, [r3, #0]
 80201fc:	68fa      	ldr	r2, [r7, #12]
 80201fe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020200:	687b      	ldr	r3, [r7, #4]
 8020202:	2220      	movs	r2, #32
 8020204:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020208:	687b      	ldr	r3, [r7, #4]
 802020a:	2200      	movs	r2, #0
 802020c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8020210:	2300      	movs	r3, #0
}
 8020212:	4618      	mov	r0, r3
 8020214:	3710      	adds	r7, #16
 8020216:	46bd      	mov	sp, r7
 8020218:	bd80      	pop	{r7, pc}

0802021a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802021a:	b580      	push	{r7, lr}
 802021c:	b084      	sub	sp, #16
 802021e:	af00      	add	r7, sp, #0
 8020220:	6078      	str	r0, [r7, #4]
 8020222:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020224:	687b      	ldr	r3, [r7, #4]
 8020226:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802022a:	2b01      	cmp	r3, #1
 802022c:	d101      	bne.n	8020232 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 802022e:	2302      	movs	r3, #2
 8020230:	e02d      	b.n	802028e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8020232:	687b      	ldr	r3, [r7, #4]
 8020234:	2201      	movs	r2, #1
 8020236:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802023a:	687b      	ldr	r3, [r7, #4]
 802023c:	2224      	movs	r2, #36	@ 0x24
 802023e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020242:	687b      	ldr	r3, [r7, #4]
 8020244:	681b      	ldr	r3, [r3, #0]
 8020246:	681b      	ldr	r3, [r3, #0]
 8020248:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802024a:	687b      	ldr	r3, [r7, #4]
 802024c:	681b      	ldr	r3, [r3, #0]
 802024e:	681a      	ldr	r2, [r3, #0]
 8020250:	687b      	ldr	r3, [r7, #4]
 8020252:	681b      	ldr	r3, [r3, #0]
 8020254:	f022 0201 	bic.w	r2, r2, #1
 8020258:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802025a:	687b      	ldr	r3, [r7, #4]
 802025c:	681b      	ldr	r3, [r3, #0]
 802025e:	689b      	ldr	r3, [r3, #8]
 8020260:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8020264:	687b      	ldr	r3, [r7, #4]
 8020266:	681b      	ldr	r3, [r3, #0]
 8020268:	683a      	ldr	r2, [r7, #0]
 802026a:	430a      	orrs	r2, r1
 802026c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 802026e:	6878      	ldr	r0, [r7, #4]
 8020270:	f000 f812 	bl	8020298 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020274:	687b      	ldr	r3, [r7, #4]
 8020276:	681b      	ldr	r3, [r3, #0]
 8020278:	68fa      	ldr	r2, [r7, #12]
 802027a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 802027c:	687b      	ldr	r3, [r7, #4]
 802027e:	2220      	movs	r2, #32
 8020280:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020284:	687b      	ldr	r3, [r7, #4]
 8020286:	2200      	movs	r2, #0
 8020288:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802028c:	2300      	movs	r3, #0
}
 802028e:	4618      	mov	r0, r3
 8020290:	3710      	adds	r7, #16
 8020292:	46bd      	mov	sp, r7
 8020294:	bd80      	pop	{r7, pc}
	...

08020298 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8020298:	b480      	push	{r7}
 802029a:	b085      	sub	sp, #20
 802029c:	af00      	add	r7, sp, #0
 802029e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80202a0:	687b      	ldr	r3, [r7, #4]
 80202a2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80202a4:	2b00      	cmp	r3, #0
 80202a6:	d108      	bne.n	80202ba <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80202a8:	687b      	ldr	r3, [r7, #4]
 80202aa:	2201      	movs	r2, #1
 80202ac:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80202b0:	687b      	ldr	r3, [r7, #4]
 80202b2:	2201      	movs	r2, #1
 80202b4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80202b8:	e031      	b.n	802031e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80202ba:	2310      	movs	r3, #16
 80202bc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80202be:	2310      	movs	r3, #16
 80202c0:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80202c2:	687b      	ldr	r3, [r7, #4]
 80202c4:	681b      	ldr	r3, [r3, #0]
 80202c6:	689b      	ldr	r3, [r3, #8]
 80202c8:	0e5b      	lsrs	r3, r3, #25
 80202ca:	b2db      	uxtb	r3, r3
 80202cc:	f003 0307 	and.w	r3, r3, #7
 80202d0:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80202d2:	687b      	ldr	r3, [r7, #4]
 80202d4:	681b      	ldr	r3, [r3, #0]
 80202d6:	689b      	ldr	r3, [r3, #8]
 80202d8:	0f5b      	lsrs	r3, r3, #29
 80202da:	b2db      	uxtb	r3, r3
 80202dc:	f003 0307 	and.w	r3, r3, #7
 80202e0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80202e2:	7bbb      	ldrb	r3, [r7, #14]
 80202e4:	7b3a      	ldrb	r2, [r7, #12]
 80202e6:	4911      	ldr	r1, [pc, #68]	@ (802032c <UARTEx_SetNbDataToProcess+0x94>)
 80202e8:	5c8a      	ldrb	r2, [r1, r2]
 80202ea:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80202ee:	7b3a      	ldrb	r2, [r7, #12]
 80202f0:	490f      	ldr	r1, [pc, #60]	@ (8020330 <UARTEx_SetNbDataToProcess+0x98>)
 80202f2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80202f4:	fb93 f3f2 	sdiv	r3, r3, r2
 80202f8:	b29a      	uxth	r2, r3
 80202fa:	687b      	ldr	r3, [r7, #4]
 80202fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020300:	7bfb      	ldrb	r3, [r7, #15]
 8020302:	7b7a      	ldrb	r2, [r7, #13]
 8020304:	4909      	ldr	r1, [pc, #36]	@ (802032c <UARTEx_SetNbDataToProcess+0x94>)
 8020306:	5c8a      	ldrb	r2, [r1, r2]
 8020308:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 802030c:	7b7a      	ldrb	r2, [r7, #13]
 802030e:	4908      	ldr	r1, [pc, #32]	@ (8020330 <UARTEx_SetNbDataToProcess+0x98>)
 8020310:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020312:	fb93 f3f2 	sdiv	r3, r3, r2
 8020316:	b29a      	uxth	r2, r3
 8020318:	687b      	ldr	r3, [r7, #4]
 802031a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 802031e:	bf00      	nop
 8020320:	3714      	adds	r7, #20
 8020322:	46bd      	mov	sp, r7
 8020324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020328:	4770      	bx	lr
 802032a:	bf00      	nop
 802032c:	08025d38 	.word	0x08025d38
 8020330:	08025d40 	.word	0x08025d40

08020334 <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 8020334:	b580      	push	{r7, lr}
 8020336:	b082      	sub	sp, #8
 8020338:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 802033a:	4b15      	ldr	r3, [pc, #84]	@ (8020390 <prvInitialiseLogging+0x5c>)
 802033c:	681b      	ldr	r3, [r3, #0]
 802033e:	2b00      	cmp	r3, #0
 8020340:	d120      	bne.n	8020384 <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8020342:	f7e3 ff9b 	bl	800427c <xTaskGetSchedulerState>
 8020346:	4603      	mov	r3, r0
 8020348:	2b02      	cmp	r3, #2
 802034a:	d11b      	bne.n	8020384 <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 802034c:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 8020350:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 8020352:	6878      	ldr	r0, [r7, #4]
 8020354:	f7e5 f8f6 	bl	8005544 <pvPortMalloc>
 8020358:	4603      	mov	r3, r0
 802035a:	4a0e      	ldr	r2, [pc, #56]	@ (8020394 <prvInitialiseLogging+0x60>)
 802035c:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 802035e:	4b0d      	ldr	r3, [pc, #52]	@ (8020394 <prvInitialiseLogging+0x60>)
 8020360:	681b      	ldr	r3, [r3, #0]
 8020362:	2b00      	cmp	r3, #0
 8020364:	d00e      	beq.n	8020384 <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 8020366:	4b0b      	ldr	r3, [pc, #44]	@ (8020394 <prvInitialiseLogging+0x60>)
 8020368:	681b      	ldr	r3, [r3, #0]
 802036a:	687a      	ldr	r2, [r7, #4]
 802036c:	2100      	movs	r1, #0
 802036e:	4618      	mov	r0, r3
 8020370:	f000 fc35 	bl	8020bde <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8020374:	4b07      	ldr	r3, [pc, #28]	@ (8020394 <prvInitialiseLogging+0x60>)
 8020376:	681b      	ldr	r3, [r3, #0]
 8020378:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 802037c:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 802037e:	4b04      	ldr	r3, [pc, #16]	@ (8020390 <prvInitialiseLogging+0x5c>)
 8020380:	2201      	movs	r2, #1
 8020382:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 8020384:	4b02      	ldr	r3, [pc, #8]	@ (8020390 <prvInitialiseLogging+0x5c>)
 8020386:	681b      	ldr	r3, [r3, #0]
}
 8020388:	4618      	mov	r0, r3
 802038a:	3708      	adds	r7, #8
 802038c:	46bd      	mov	sp, r7
 802038e:	bd80      	pop	{r7, pc}
 8020390:	20002310 	.word	0x20002310
 8020394:	20002300 	.word	0x20002300

08020398 <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 8020398:	b580      	push	{r7, lr}
 802039a:	b086      	sub	sp, #24
 802039c:	af02      	add	r7, sp, #8
 802039e:	6078      	str	r0, [r7, #4]
 80203a0:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 80203a2:	2300      	movs	r3, #0
 80203a4:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 80203a6:	4b24      	ldr	r3, [pc, #144]	@ (8020438 <prvGetMessageFromStreamBuffer+0xa0>)
 80203a8:	681b      	ldr	r3, [r3, #0]
 80203aa:	2b00      	cmp	r3, #0
 80203ac:	d03f      	beq.n	802042e <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 80203ae:	4b22      	ldr	r3, [pc, #136]	@ (8020438 <prvGetMessageFromStreamBuffer+0xa0>)
 80203b0:	681b      	ldr	r3, [r3, #0]
 80203b2:	4618      	mov	r0, r3
 80203b4:	f7ef fbd7 	bl	800fb66 <uxStreamBufferGetSize>
 80203b8:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 80203ba:	68fb      	ldr	r3, [r7, #12]
 80203bc:	2b04      	cmp	r3, #4
 80203be:	d936      	bls.n	802042e <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 80203c0:	f7e3 f93e 	bl	8003640 <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 80203c4:	4b1c      	ldr	r3, [pc, #112]	@ (8020438 <prvGetMessageFromStreamBuffer+0xa0>)
 80203c6:	6818      	ldr	r0, [r3, #0]
 80203c8:	f107 0208 	add.w	r2, r7, #8
 80203cc:	2300      	movs	r3, #0
 80203ce:	9300      	str	r3, [sp, #0]
 80203d0:	2304      	movs	r3, #4
 80203d2:	2100      	movs	r1, #0
 80203d4:	f7ef fce5 	bl	800fda2 <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 80203d8:	68bb      	ldr	r3, [r7, #8]
 80203da:	683a      	ldr	r2, [r7, #0]
 80203dc:	429a      	cmp	r2, r3
 80203de:	d216      	bcs.n	802040e <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 80203e0:	4b15      	ldr	r3, [pc, #84]	@ (8020438 <prvGetMessageFromStreamBuffer+0xa0>)
 80203e2:	6818      	ldr	r0, [r3, #0]
 80203e4:	68bb      	ldr	r3, [r7, #8]
 80203e6:	2200      	movs	r2, #0
 80203e8:	9200      	str	r2, [sp, #0]
 80203ea:	4a14      	ldr	r2, [pc, #80]	@ (802043c <prvGetMessageFromStreamBuffer+0xa4>)
 80203ec:	2100      	movs	r1, #0
 80203ee:	f7ef fcd8 	bl	800fda2 <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 80203f2:	683a      	ldr	r2, [r7, #0]
 80203f4:	4911      	ldr	r1, [pc, #68]	@ (802043c <prvGetMessageFromStreamBuffer+0xa4>)
 80203f6:	6878      	ldr	r0, [r7, #4]
 80203f8:	f000 fae4 	bl	80209c4 <memcpy>
					xMessageLength = xBufferLength;
 80203fc:	683b      	ldr	r3, [r7, #0]
 80203fe:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 8020400:	683b      	ldr	r3, [r7, #0]
 8020402:	3b01      	subs	r3, #1
 8020404:	687a      	ldr	r2, [r7, #4]
 8020406:	4413      	add	r3, r2
 8020408:	2200      	movs	r2, #0
 802040a:	701a      	strb	r2, [r3, #0]
 802040c:	e00d      	b.n	802042a <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 802040e:	4b0a      	ldr	r3, [pc, #40]	@ (8020438 <prvGetMessageFromStreamBuffer+0xa0>)
 8020410:	6818      	ldr	r0, [r3, #0]
 8020412:	68bb      	ldr	r3, [r7, #8]
 8020414:	2200      	movs	r2, #0
 8020416:	9200      	str	r2, [sp, #0]
 8020418:	687a      	ldr	r2, [r7, #4]
 802041a:	2100      	movs	r1, #0
 802041c:	f7ef fcc1 	bl	800fda2 <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 8020420:	68bb      	ldr	r3, [r7, #8]
 8020422:	687a      	ldr	r2, [r7, #4]
 8020424:	4413      	add	r3, r2
 8020426:	2200      	movs	r2, #0
 8020428:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 802042a:	f7e3 f917 	bl	800365c <xTaskResumeAll>
		}
	}

	return xMessageLength;
 802042e:	68bb      	ldr	r3, [r7, #8]
}
 8020430:	4618      	mov	r0, r3
 8020432:	3710      	adds	r7, #16
 8020434:	46bd      	mov	sp, r7
 8020436:	bd80      	pop	{r7, pc}
 8020438:	20002300 	.word	0x20002300
 802043c:	20002238 	.word	0x20002238

08020440 <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 8020440:	b580      	push	{r7, lr}
 8020442:	b08e      	sub	sp, #56	@ 0x38
 8020444:	af04      	add	r7, sp, #16
 8020446:	6078      	str	r0, [r7, #4]
 8020448:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 802044a:	4b49      	ldr	r3, [pc, #292]	@ (8020570 <prvBufferFormattedString+0x130>)
 802044c:	681b      	ldr	r3, [r3, #0]
 802044e:	2b00      	cmp	r3, #0
 8020450:	d104      	bne.n	802045c <prvBufferFormattedString+0x1c>
 8020452:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8020456:	4847      	ldr	r0, [pc, #284]	@ (8020574 <prvBufferFormattedString+0x134>)
 8020458:	f7e0 fe6a 	bl	8001130 <vAssertCalled>

	vTaskSuspendAll();
 802045c:	f7e3 f8f0 	bl	8003640 <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 8020460:	f000 fa2a 	bl	80208b8 <ullGetHighResolutionTime>
 8020464:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 8020468:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 802046c:	4a42      	ldr	r2, [pc, #264]	@ (8020578 <prvBufferFormattedString+0x138>)
 802046e:	f04f 0300 	mov.w	r3, #0
 8020472:	f7df ff9d 	bl	80003b0 <__aeabi_uldivmod>
 8020476:	4602      	mov	r2, r0
 8020478:	460b      	mov	r3, r1
 802047a:	4613      	mov	r3, r2
 802047c:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 802047e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020482:	4a3d      	ldr	r2, [pc, #244]	@ (8020578 <prvBufferFormattedString+0x138>)
 8020484:	f04f 0300 	mov.w	r3, #0
 8020488:	f7df ff92 	bl	80003b0 <__aeabi_uldivmod>
 802048c:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 8020490:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020494:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8020498:	f04f 0300 	mov.w	r3, #0
 802049c:	f7df ff88 	bl	80003b0 <__aeabi_uldivmod>
 80204a0:	4602      	mov	r2, r0
 80204a2:	460b      	mov	r3, r1
 80204a4:	4613      	mov	r3, r2
 80204a6:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 80204a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80204ac:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80204b0:	f04f 0300 	mov.w	r3, #0
 80204b4:	f7df ff7c 	bl	80003b0 <__aeabi_uldivmod>
 80204b8:	4613      	mov	r3, r2
 80204ba:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 80204bc:	2000      	movs	r0, #0
 80204be:	f7e3 f9e1 	bl	8003884 <pcTaskGetName>
 80204c2:	4603      	mov	r3, r0
 80204c4:	9302      	str	r3, [sp, #8]
 80204c6:	697b      	ldr	r3, [r7, #20]
 80204c8:	9301      	str	r3, [sp, #4]
 80204ca:	69bb      	ldr	r3, [r7, #24]
 80204cc:	9300      	str	r3, [sp, #0]
 80204ce:	69fb      	ldr	r3, [r7, #28]
 80204d0:	4a2a      	ldr	r2, [pc, #168]	@ (802057c <prvBufferFormattedString+0x13c>)
 80204d2:	21c8      	movs	r1, #200	@ 0xc8
 80204d4:	482a      	ldr	r0, [pc, #168]	@ (8020580 <prvBufferFormattedString+0x140>)
 80204d6:	f001 f885 	bl	80215e4 <snprintf>
 80204da:	4603      	mov	r3, r0
 80204dc:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 80204de:	68fb      	ldr	r3, [r7, #12]
 80204e0:	4a27      	ldr	r2, [pc, #156]	@ (8020580 <prvBufferFormattedString+0x140>)
 80204e2:	1898      	adds	r0, r3, r2
 80204e4:	68fb      	ldr	r3, [r7, #12]
 80204e6:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 80204ea:	683b      	ldr	r3, [r7, #0]
 80204ec:	687a      	ldr	r2, [r7, #4]
 80204ee:	f001 f85d 	bl	80215ac <vsnprintf>
 80204f2:	4603      	mov	r3, r0
 80204f4:	461a      	mov	r2, r3
 80204f6:	68fb      	ldr	r3, [r7, #12]
 80204f8:	4413      	add	r3, r2
 80204fa:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 80204fc:	4b1c      	ldr	r3, [pc, #112]	@ (8020570 <prvBufferFormattedString+0x130>)
 80204fe:	681b      	ldr	r3, [r3, #0]
 8020500:	4618      	mov	r0, r3
 8020502:	f7ef fb0e 	bl	800fb22 <uxStreamBufferGetSpace>
 8020506:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 8020508:	68fb      	ldr	r3, [r7, #12]
 802050a:	3304      	adds	r3, #4
 802050c:	693a      	ldr	r2, [r7, #16]
 802050e:	429a      	cmp	r2, r3
 8020510:	d90e      	bls.n	8020530 <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 8020512:	4b17      	ldr	r3, [pc, #92]	@ (8020570 <prvBufferFormattedString+0x130>)
 8020514:	6818      	ldr	r0, [r3, #0]
 8020516:	f107 020c 	add.w	r2, r7, #12
 802051a:	2304      	movs	r3, #4
 802051c:	2100      	movs	r1, #0
 802051e:	f7ef fbc0 	bl	800fca2 <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 8020522:	4b13      	ldr	r3, [pc, #76]	@ (8020570 <prvBufferFormattedString+0x130>)
 8020524:	6818      	ldr	r0, [r3, #0]
 8020526:	68fb      	ldr	r3, [r7, #12]
 8020528:	4a15      	ldr	r2, [pc, #84]	@ (8020580 <prvBufferFormattedString+0x140>)
 802052a:	2100      	movs	r1, #0
 802052c:	f7ef fbb9 	bl	800fca2 <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 8020530:	f7e3 f894 	bl	800365c <xTaskResumeAll>

	if( xLoggingTask == NULL )
 8020534:	4b13      	ldr	r3, [pc, #76]	@ (8020584 <prvBufferFormattedString+0x144>)
 8020536:	681b      	ldr	r3, [r3, #0]
 8020538:	2b00      	cmp	r3, #0
 802053a:	d10a      	bne.n	8020552 <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 802053c:	68fb      	ldr	r3, [r7, #12]
 802053e:	4619      	mov	r1, r3
 8020540:	480f      	ldr	r0, [pc, #60]	@ (8020580 <prvBufferFormattedString+0x140>)
 8020542:	f000 f85b 	bl	80205fc <vUDPLoggingHook>
		uxSkipCount++;
 8020546:	4b10      	ldr	r3, [pc, #64]	@ (8020588 <prvBufferFormattedString+0x148>)
 8020548:	681b      	ldr	r3, [r3, #0]
 802054a:	3301      	adds	r3, #1
 802054c:	4a0e      	ldr	r2, [pc, #56]	@ (8020588 <prvBufferFormattedString+0x148>)
 802054e:	6013      	str	r3, [r2, #0]
 8020550:	e008      	b.n	8020564 <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 8020552:	4b0c      	ldr	r3, [pc, #48]	@ (8020584 <prvBufferFormattedString+0x144>)
 8020554:	6818      	ldr	r0, [r3, #0]
 8020556:	2300      	movs	r3, #0
 8020558:	9300      	str	r3, [sp, #0]
 802055a:	2302      	movs	r3, #2
 802055c:	2200      	movs	r2, #0
 802055e:	2100      	movs	r1, #0
 8020560:	f7e4 f9d2 	bl	8004908 <xTaskGenericNotify>
	}

	return xLength;
 8020564:	68fb      	ldr	r3, [r7, #12]
}
 8020566:	4618      	mov	r0, r3
 8020568:	3728      	adds	r7, #40	@ 0x28
 802056a:	46bd      	mov	sp, r7
 802056c:	bd80      	pop	{r7, pc}
 802056e:	bf00      	nop
 8020570:	20002300 	.word	0x20002300
 8020574:	08025b2c 	.word	0x08025b2c
 8020578:	000f4240 	.word	0x000f4240
 802057c:	08025b54 	.word	0x08025b54
 8020580:	20002238 	.word	0x20002238
 8020584:	20002304 	.word	0x20002304
 8020588:	20002308 	.word	0x20002308

0802058c <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 802058c:	b40f      	push	{r0, r1, r2, r3}
 802058e:	b580      	push	{r7, lr}
 8020590:	b082      	sub	sp, #8
 8020592:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 8020594:	f7ff fece 	bl	8020334 <prvInitialiseLogging>
 8020598:	4603      	mov	r3, r0
 802059a:	2b00      	cmp	r3, #0
 802059c:	d008      	beq.n	80205b0 <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 802059e:	f107 0314 	add.w	r3, r7, #20
 80205a2:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 80205a4:	6839      	ldr	r1, [r7, #0]
 80205a6:	6938      	ldr	r0, [r7, #16]
 80205a8:	f7ff ff4a 	bl	8020440 <prvBufferFormattedString>
 80205ac:	6078      	str	r0, [r7, #4]
 80205ae:	e001      	b.n	80205b4 <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 80205b0:	2300      	movs	r3, #0
 80205b2:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 80205b4:	687b      	ldr	r3, [r7, #4]
}
 80205b6:	4618      	mov	r0, r3
 80205b8:	3708      	adds	r7, #8
 80205ba:	46bd      	mov	sp, r7
 80205bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80205c0:	b004      	add	sp, #16
 80205c2:	4770      	bx	lr

080205c4 <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 80205c4:	b580      	push	{r7, lr}
 80205c6:	b082      	sub	sp, #8
 80205c8:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 80205ca:	4b08      	ldr	r3, [pc, #32]	@ (80205ec <vUDPLoggingTaskCreate+0x28>)
 80205cc:	9301      	str	r3, [sp, #4]
 80205ce:	2302      	movs	r3, #2
 80205d0:	9300      	str	r3, [sp, #0]
 80205d2:	2300      	movs	r3, #0
 80205d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80205d8:	4905      	ldr	r1, [pc, #20]	@ (80205f0 <vUDPLoggingTaskCreate+0x2c>)
 80205da:	4806      	ldr	r0, [pc, #24]	@ (80205f4 <vUDPLoggingTaskCreate+0x30>)
 80205dc:	f7e2 fe38 	bl	8003250 <xTaskCreate>
 80205e0:	4603      	mov	r3, r0
 80205e2:	4a05      	ldr	r2, [pc, #20]	@ (80205f8 <vUDPLoggingTaskCreate+0x34>)
 80205e4:	6013      	str	r3, [r2, #0]
}
 80205e6:	bf00      	nop
 80205e8:	46bd      	mov	sp, r7
 80205ea:	bd80      	pop	{r7, pc}
 80205ec:	20002304 	.word	0x20002304
 80205f0:	08025b6c 	.word	0x08025b6c
 80205f4:	08020615 	.word	0x08020615
 80205f8:	2000230c 	.word	0x2000230c

080205fc <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 80205fc:	b480      	push	{r7}
 80205fe:	b083      	sub	sp, #12
 8020600:	af00      	add	r7, sp, #0
 8020602:	6078      	str	r0, [r7, #4]
 8020604:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 8020606:	bf00      	nop
 8020608:	370c      	adds	r7, #12
 802060a:	46bd      	mov	sp, r7
 802060c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020610:	4770      	bx	lr
	...

08020614 <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 8020614:	b580      	push	{r7, lr}
 8020616:	b098      	sub	sp, #96	@ 0x60
 8020618:	af02      	add	r7, sp, #8
 802061a:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 802061c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020620:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8020622:	2000      	movs	r0, #0
 8020624:	f7ec f850 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 8020628:	6538      	str	r0, [r7, #80]	@ 0x50
 802062a:	e01c      	b.n	8020666 <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 802062c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802062e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8020632:	f003 0310 	and.w	r3, r3, #16
 8020636:	b2db      	uxtb	r3, r3
 8020638:	2b00      	cmp	r3, #0
 802063a:	d00f      	beq.n	802065c <prvLoggingTask+0x48>
 802063c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 802063e:	2b00      	cmp	r3, #0
 8020640:	d009      	beq.n	8020656 <prvLoggingTask+0x42>
 8020642:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020644:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8020648:	f003 0304 	and.w	r3, r3, #4
 802064c:	b2db      	uxtb	r3, r3
 802064e:	2b00      	cmp	r3, #0
 8020650:	d101      	bne.n	8020656 <prvLoggingTask+0x42>
 8020652:	2301      	movs	r3, #1
 8020654:	e000      	b.n	8020658 <prvLoggingTask+0x44>
 8020656:	2300      	movs	r3, #0
 8020658:	2b00      	cmp	r3, #0
 802065a:	d108      	bne.n	802066e <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 802065c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 802065e:	2000      	movs	r0, #0
 8020660:	f7ec f854 	bl	800c70c <FreeRTOS_NextEndPoint>
 8020664:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 8020666:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020668:	2b00      	cmp	r3, #0
 802066a:	d1df      	bne.n	802062c <prvLoggingTask+0x18>
 802066c:	e000      	b.n	8020670 <prvLoggingTask+0x5c>
				{
					break;
 802066e:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 8020670:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020672:	2b00      	cmp	r3, #0
 8020674:	d000      	beq.n	8020678 <prvLoggingTask+0x64>
			{
				break;
 8020676:	e004      	b.n	8020682 <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 8020678:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 802067c:	f7e2 ff28 	bl	80034d0 <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8020680:	e7cf      	b.n	8020622 <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 8020682:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8020684:	f7e2 ff24 	bl	80034d0 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8020688:	2211      	movs	r2, #17
 802068a:	2102      	movs	r1, #2
 802068c:	2002      	movs	r0, #2
 802068e:	f7ec fd97 	bl	800d1c0 <FreeRTOS_socket>
 8020692:	4603      	mov	r3, r0
 8020694:	4a4c      	ldr	r2, [pc, #304]	@ (80207c8 <prvLoggingTask+0x1b4>)
 8020696:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 8020698:	4b4b      	ldr	r3, [pc, #300]	@ (80207c8 <prvLoggingTask+0x1b4>)
 802069a:	681b      	ldr	r3, [r3, #0]
 802069c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80206a0:	d0ef      	beq.n	8020682 <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 80206a2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	d104      	bne.n	80206b2 <prvLoggingTask+0x9e>
 80206a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80206ac:	4847      	ldr	r0, [pc, #284]	@ (80207cc <prvLoggingTask+0x1b8>)
 80206ae:	f7e0 fd3f 	bl	8001130 <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 80206b2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80206b4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80206b8:	2b00      	cmp	r3, #0
 80206ba:	d104      	bne.n	80206c6 <prvLoggingTask+0xb2>
 80206bc:	f240 11df 	movw	r1, #479	@ 0x1df
 80206c0:	4842      	ldr	r0, [pc, #264]	@ (80207cc <prvLoggingTask+0x1b8>)
 80206c2:	f7e0 fd35 	bl	8001130 <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 80206c6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80206c8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80206cc:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 80206ce:	f246 2309 	movw	r3, #25097	@ 0x6209
 80206d2:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 80206d4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80206d6:	681b      	ldr	r3, [r3, #0]
 80206d8:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 80206da:	4b3b      	ldr	r3, [pc, #236]	@ (80207c8 <prvLoggingTask+0x1b4>)
 80206dc:	681b      	ldr	r3, [r3, #0]
 80206de:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 80206e2:	2218      	movs	r2, #24
 80206e4:	4618      	mov	r0, r3
 80206e6:	f7ec ff5b 	bl	800d5a0 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 80206ea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80206ec:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 80206ee:	4b36      	ldr	r3, [pc, #216]	@ (80207c8 <prvLoggingTask+0x1b4>)
 80206f0:	6818      	ldr	r0, [r3, #0]
 80206f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80206f6:	2204      	movs	r2, #4
 80206f8:	9200      	str	r2, [sp, #0]
 80206fa:	2201      	movs	r2, #1
 80206fc:	2100      	movs	r1, #0
 80206fe:	f7ed fd19 	bl	800e134 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8020702:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020704:	2101      	movs	r1, #1
 8020706:	2000      	movs	r0, #0
 8020708:	f7e3 fff2 	bl	80046f0 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 802070c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 802070e:	691b      	ldr	r3, [r3, #16]
 8020710:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8020712:	4798      	blx	r3
 8020714:	4603      	mov	r3, r0
 8020716:	2b00      	cmp	r3, #0
 8020718:	d0f3      	beq.n	8020702 <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 802071a:	2300      	movs	r3, #0
 802071c:	657b      	str	r3, [r7, #84]	@ 0x54
 802071e:	e04c      	b.n	80207ba <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 8020720:	21c8      	movs	r1, #200	@ 0xc8
 8020722:	482b      	ldr	r0, [pc, #172]	@ (80207d0 <prvLoggingTask+0x1bc>)
 8020724:	f7ff fe38 	bl	8020398 <prvGetMessageFromStreamBuffer>
 8020728:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 802072a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802072c:	2b00      	cmp	r3, #0
 802072e:	d048      	beq.n	80207c2 <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8020730:	2000      	movs	r0, #0
 8020732:	f7eb ffc9 	bl	800c6c8 <FreeRTOS_FirstEndPoint>
 8020736:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8020738:	e02a      	b.n	8020790 <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 802073a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802073c:	2b00      	cmp	r3, #0
 802073e:	d022      	beq.n	8020786 <prvLoggingTask+0x172>
 8020740:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020742:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8020746:	f003 0304 	and.w	r3, r3, #4
 802074a:	b2db      	uxtb	r3, r3
 802074c:	2b00      	cmp	r3, #0
 802074e:	d11a      	bne.n	8020786 <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 8020750:	2318      	movs	r3, #24
 8020752:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 8020754:	2302      	movs	r3, #2
 8020756:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 8020758:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802075a:	681a      	ldr	r2, [r3, #0]
 802075c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802075e:	685b      	ldr	r3, [r3, #4]
 8020760:	43db      	mvns	r3, r3
 8020762:	4313      	orrs	r3, r2
 8020764:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 8020766:	f246 3309 	movw	r3, #25353	@ 0x6309
 802076a:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 802076c:	4b16      	ldr	r3, [pc, #88]	@ (80207c8 <prvLoggingTask+0x1b4>)
 802076e:	6818      	ldr	r0, [r3, #0]
 8020770:	2318      	movs	r3, #24
 8020772:	9301      	str	r3, [sp, #4]
 8020774:	f107 030c 	add.w	r3, r7, #12
 8020778:	9300      	str	r3, [sp, #0]
 802077a:	2300      	movs	r3, #0
 802077c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 802077e:	4914      	ldr	r1, [pc, #80]	@ (80207d0 <prvLoggingTask+0x1bc>)
 8020780:	f7ec fe9e 	bl	800d4c0 <FreeRTOS_sendto>
							}
							break;
 8020784:	e007      	b.n	8020796 <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 8020786:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8020788:	2000      	movs	r0, #0
 802078a:	f7eb ffbf 	bl	800c70c <FreeRTOS_NextEndPoint>
 802078e:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 8020790:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020792:	2b00      	cmp	r3, #0
 8020794:	d1d1      	bne.n	802073a <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 8020796:	4b0f      	ldr	r3, [pc, #60]	@ (80207d4 <prvLoggingTask+0x1c0>)
 8020798:	681b      	ldr	r3, [r3, #0]
 802079a:	2b00      	cmp	r3, #0
 802079c:	d005      	beq.n	80207aa <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 802079e:	4b0d      	ldr	r3, [pc, #52]	@ (80207d4 <prvLoggingTask+0x1c0>)
 80207a0:	681b      	ldr	r3, [r3, #0]
 80207a2:	3b01      	subs	r3, #1
 80207a4:	4a0b      	ldr	r2, [pc, #44]	@ (80207d4 <prvLoggingTask+0x1c0>)
 80207a6:	6013      	str	r3, [r2, #0]
 80207a8:	e004      	b.n	80207b4 <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 80207aa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80207ac:	4619      	mov	r1, r3
 80207ae:	4808      	ldr	r0, [pc, #32]	@ (80207d0 <prvLoggingTask+0x1bc>)
 80207b0:	f7ff ff24 	bl	80205fc <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 80207b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80207b6:	3301      	adds	r3, #1
 80207b8:	657b      	str	r3, [r7, #84]	@ 0x54
 80207ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80207bc:	2b13      	cmp	r3, #19
 80207be:	ddaf      	ble.n	8020720 <prvLoggingTask+0x10c>
 80207c0:	e79f      	b.n	8020702 <prvLoggingTask+0xee>
					break;
 80207c2:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 80207c4:	e79d      	b.n	8020702 <prvLoggingTask+0xee>
 80207c6:	bf00      	nop
 80207c8:	20000028 	.word	0x20000028
 80207cc:	08025b2c 	.word	0x08025b2c
 80207d0:	20002314 	.word	0x20002314
 80207d4:	20002308 	.word	0x20002308

080207d8 <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 80207d8:	b480      	push	{r7}
 80207da:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 80207dc:	4b0c      	ldr	r3, [pc, #48]	@ (8020810 <TIM2_IRQHandler+0x38>)
 80207de:	681b      	ldr	r3, [r3, #0]
 80207e0:	691b      	ldr	r3, [r3, #16]
 80207e2:	4a0c      	ldr	r2, [pc, #48]	@ (8020814 <TIM2_IRQHandler+0x3c>)
 80207e4:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 80207e6:	4b0b      	ldr	r3, [pc, #44]	@ (8020814 <TIM2_IRQHandler+0x3c>)
 80207e8:	681b      	ldr	r3, [r3, #0]
 80207ea:	f003 0301 	and.w	r3, r3, #1
 80207ee:	2b00      	cmp	r3, #0
 80207f0:	d009      	beq.n	8020806 <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 80207f2:	4b07      	ldr	r3, [pc, #28]	@ (8020810 <TIM2_IRQHandler+0x38>)
 80207f4:	681b      	ldr	r3, [r3, #0]
 80207f6:	f06f 0201 	mvn.w	r2, #1
 80207fa:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 80207fc:	4b06      	ldr	r3, [pc, #24]	@ (8020818 <TIM2_IRQHandler+0x40>)
 80207fe:	681b      	ldr	r3, [r3, #0]
 8020800:	3301      	adds	r3, #1
 8020802:	4a05      	ldr	r2, [pc, #20]	@ (8020818 <TIM2_IRQHandler+0x40>)
 8020804:	6013      	str	r3, [r2, #0]
	}
}
 8020806:	bf00      	nop
 8020808:	46bd      	mov	sp, r7
 802080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802080e:	4770      	bx	lr
 8020810:	20000378 	.word	0x20000378
 8020814:	200023e0 	.word	0x200023e0
 8020818:	200023dc 	.word	0x200023dc

0802081c <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 802081c:	b580      	push	{r7, lr}
 802081e:	b082      	sub	sp, #8
 8020820:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8020822:	4b20      	ldr	r3, [pc, #128]	@ (80208a4 <vStartHighResolutionTimer+0x88>)
 8020824:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8020828:	4a1e      	ldr	r2, [pc, #120]	@ (80208a4 <vStartHighResolutionTimer+0x88>)
 802082a:	f043 0301 	orr.w	r3, r3, #1
 802082e:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8020832:	4b1c      	ldr	r3, [pc, #112]	@ (80208a4 <vStartHighResolutionTimer+0x88>)
 8020834:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8020838:	f003 0301 	and.w	r3, r3, #1
 802083c:	607b      	str	r3, [r7, #4]
 802083e:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 8020840:	4b19      	ldr	r3, [pc, #100]	@ (80208a8 <vStartHighResolutionTimer+0x8c>)
 8020842:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8020846:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 8020848:	23c8      	movs	r3, #200	@ 0xc8
 802084a:	3b01      	subs	r3, #1
 802084c:	4a16      	ldr	r2, [pc, #88]	@ (80208a8 <vStartHighResolutionTimer+0x8c>)
 802084e:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 8020850:	4b15      	ldr	r3, [pc, #84]	@ (80208a8 <vStartHighResolutionTimer+0x8c>)
 8020852:	2200      	movs	r2, #0
 8020854:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 8020856:	4b15      	ldr	r3, [pc, #84]	@ (80208ac <vStartHighResolutionTimer+0x90>)
 8020858:	3b01      	subs	r3, #1
 802085a:	4a13      	ldr	r2, [pc, #76]	@ (80208a8 <vStartHighResolutionTimer+0x8c>)
 802085c:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 802085e:	4b12      	ldr	r3, [pc, #72]	@ (80208a8 <vStartHighResolutionTimer+0x8c>)
 8020860:	2200      	movs	r2, #0
 8020862:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 8020864:	4b10      	ldr	r3, [pc, #64]	@ (80208a8 <vStartHighResolutionTimer+0x8c>)
 8020866:	2200      	movs	r2, #0
 8020868:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 802086a:	4b0f      	ldr	r3, [pc, #60]	@ (80208a8 <vStartHighResolutionTimer+0x8c>)
 802086c:	2201      	movs	r2, #1
 802086e:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 8020870:	2200      	movs	r2, #0
 8020872:	2105      	movs	r1, #5
 8020874:	201c      	movs	r0, #28
 8020876:	f7f8 fd3e 	bl	80192f6 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 802087a:	201c      	movs	r0, #28
 802087c:	f7f8 fd55 	bl	801932a <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 8020880:	4809      	ldr	r0, [pc, #36]	@ (80208a8 <vStartHighResolutionTimer+0x8c>)
 8020882:	f7fe f8e2 	bl	801ea4a <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 8020886:	4808      	ldr	r0, [pc, #32]	@ (80208a8 <vStartHighResolutionTimer+0x8c>)
 8020888:	f7fe f936 	bl	801eaf8 <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 802088c:	4b06      	ldr	r3, [pc, #24]	@ (80208a8 <vStartHighResolutionTimer+0x8c>)
 802088e:	681b      	ldr	r3, [r3, #0]
 8020890:	691b      	ldr	r3, [r3, #16]
 8020892:	4a07      	ldr	r2, [pc, #28]	@ (80208b0 <vStartHighResolutionTimer+0x94>)
 8020894:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 8020896:	4b07      	ldr	r3, [pc, #28]	@ (80208b4 <vStartHighResolutionTimer+0x98>)
 8020898:	2200      	movs	r2, #0
 802089a:	601a      	str	r2, [r3, #0]
}
 802089c:	bf00      	nop
 802089e:	3708      	adds	r7, #8
 80208a0:	46bd      	mov	sp, r7
 80208a2:	bd80      	pop	{r7, pc}
 80208a4:	58024400 	.word	0x58024400
 80208a8:	20000378 	.word	0x20000378
 80208ac:	00989680 	.word	0x00989680
 80208b0:	200023e0 	.word	0x200023e0
 80208b4:	200023dc 	.word	0x200023dc

080208b8 <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 80208b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80208bc:	b08e      	sub	sp, #56	@ 0x38
 80208be:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 80208c0:	493d      	ldr	r1, [pc, #244]	@ (80209b8 <ullGetHighResolutionTime+0x100>)
 80208c2:	6809      	ldr	r1, [r1, #0]
 80208c4:	2900      	cmp	r1, #0
 80208c6:	d132      	bne.n	802092e <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 80208c8:	f7e2 ffcc 	bl	8003864 <xTaskGetTickCount>
 80208cc:	4603      	mov	r3, r0
 80208ce:	2200      	movs	r2, #0
 80208d0:	469a      	mov	sl, r3
 80208d2:	4693      	mov	fp, r2
 80208d4:	4652      	mov	r2, sl
 80208d6:	465b      	mov	r3, fp
 80208d8:	f04f 0000 	mov.w	r0, #0
 80208dc:	f04f 0100 	mov.w	r1, #0
 80208e0:	0159      	lsls	r1, r3, #5
 80208e2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80208e6:	0150      	lsls	r0, r2, #5
 80208e8:	4602      	mov	r2, r0
 80208ea:	460b      	mov	r3, r1
 80208ec:	ebb2 040a 	subs.w	r4, r2, sl
 80208f0:	eb63 050b 	sbc.w	r5, r3, fp
 80208f4:	f04f 0200 	mov.w	r2, #0
 80208f8:	f04f 0300 	mov.w	r3, #0
 80208fc:	00ab      	lsls	r3, r5, #2
 80208fe:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8020902:	00a2      	lsls	r2, r4, #2
 8020904:	4614      	mov	r4, r2
 8020906:	461d      	mov	r5, r3
 8020908:	eb14 080a 	adds.w	r8, r4, sl
 802090c:	eb45 090b 	adc.w	r9, r5, fp
 8020910:	f04f 0200 	mov.w	r2, #0
 8020914:	f04f 0300 	mov.w	r3, #0
 8020918:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 802091c:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8020920:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8020924:	4690      	mov	r8, r2
 8020926:	4699      	mov	r9, r3
 8020928:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 802092c:	e03c      	b.n	80209a8 <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 802092e:	4922      	ldr	r1, [pc, #136]	@ (80209b8 <ullGetHighResolutionTime+0x100>)
 8020930:	6809      	ldr	r1, [r1, #0]
 8020932:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8020934:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 8020936:	4921      	ldr	r1, [pc, #132]	@ (80209bc <ullGetHighResolutionTime+0x104>)
 8020938:	6809      	ldr	r1, [r1, #0]
 802093a:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 802093c:	491e      	ldr	r1, [pc, #120]	@ (80209b8 <ullGetHighResolutionTime+0x100>)
 802093e:	6809      	ldr	r1, [r1, #0]
 8020940:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8020942:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 8020944:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8020946:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8020948:	4288      	cmp	r0, r1
 802094a:	d200      	bcs.n	802094e <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 802094c:	e7ef      	b.n	802092e <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 802094e:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 8020950:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8020952:	2000      	movs	r0, #0
 8020954:	61b9      	str	r1, [r7, #24]
 8020956:	61f8      	str	r0, [r7, #28]
 8020958:	4819      	ldr	r0, [pc, #100]	@ (80209c0 <ullGetHighResolutionTime+0x108>)
 802095a:	2100      	movs	r1, #0
 802095c:	6138      	str	r0, [r7, #16]
 802095e:	6179      	str	r1, [r7, #20]
 8020960:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8020964:	4649      	mov	r1, r9
 8020966:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802096a:	4650      	mov	r0, sl
 802096c:	fb00 f001 	mul.w	r0, r0, r1
 8020970:	4659      	mov	r1, fp
 8020972:	4644      	mov	r4, r8
 8020974:	fb04 f101 	mul.w	r1, r4, r1
 8020978:	4401      	add	r1, r0
 802097a:	4640      	mov	r0, r8
 802097c:	4654      	mov	r4, sl
 802097e:	fba0 2304 	umull	r2, r3, r0, r4
 8020982:	4419      	add	r1, r3
 8020984:	460b      	mov	r3, r1
 8020986:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8020988:	2000      	movs	r0, #0
 802098a:	60b9      	str	r1, [r7, #8]
 802098c:	60f8      	str	r0, [r7, #12]
 802098e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8020992:	4621      	mov	r1, r4
 8020994:	1851      	adds	r1, r2, r1
 8020996:	6039      	str	r1, [r7, #0]
 8020998:	4629      	mov	r1, r5
 802099a:	eb43 0101 	adc.w	r1, r3, r1
 802099e:	6079      	str	r1, [r7, #4]
 80209a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80209a4:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 80209a8:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 80209ac:	4610      	mov	r0, r2
 80209ae:	4619      	mov	r1, r3
 80209b0:	3738      	adds	r7, #56	@ 0x38
 80209b2:	46bd      	mov	sp, r7
 80209b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80209b8:	20000378 	.word	0x20000378
 80209bc:	200023dc 	.word	0x200023dc
 80209c0:	00989680 	.word	0x00989680

080209c4 <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 80209c4:	b480      	push	{r7}
 80209c6:	b08d      	sub	sp, #52	@ 0x34
 80209c8:	af00      	add	r7, sp, #0
 80209ca:	60f8      	str	r0, [r7, #12]
 80209cc:	60b9      	str	r1, [r7, #8]
 80209ce:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 80209d0:	68fb      	ldr	r3, [r7, #12]
 80209d2:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 80209d4:	68bb      	ldr	r3, [r7, #8]
 80209d6:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 80209d8:	697a      	ldr	r2, [r7, #20]
 80209da:	687b      	ldr	r3, [r7, #4]
 80209dc:	4413      	add	r3, r2
 80209de:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 80209e0:	69ba      	ldr	r2, [r7, #24]
 80209e2:	697b      	ldr	r3, [r7, #20]
 80209e4:	4053      	eors	r3, r2
 80209e6:	f003 0303 	and.w	r3, r3, #3
 80209ea:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 80209ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80209ee:	f003 0301 	and.w	r3, r3, #1
 80209f2:	2b00      	cmp	r3, #0
 80209f4:	f040 80a1 	bne.w	8020b3a <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 80209f8:	697b      	ldr	r3, [r7, #20]
 80209fa:	f003 0301 	and.w	r3, r3, #1
 80209fe:	2b00      	cmp	r3, #0
 8020a00:	d00b      	beq.n	8020a1a <memcpy+0x56>
 8020a02:	697a      	ldr	r2, [r7, #20]
 8020a04:	693b      	ldr	r3, [r7, #16]
 8020a06:	429a      	cmp	r2, r3
 8020a08:	d207      	bcs.n	8020a1a <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 8020a0a:	697a      	ldr	r2, [r7, #20]
 8020a0c:	1c53      	adds	r3, r2, #1
 8020a0e:	617b      	str	r3, [r7, #20]
 8020a10:	69bb      	ldr	r3, [r7, #24]
 8020a12:	1c59      	adds	r1, r3, #1
 8020a14:	61b9      	str	r1, [r7, #24]
 8020a16:	7812      	ldrb	r2, [r2, #0]
 8020a18:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 8020a1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020a1c:	f003 0302 	and.w	r3, r3, #2
 8020a20:	2b00      	cmp	r3, #0
 8020a22:	d01f      	beq.n	8020a64 <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 8020a24:	693b      	ldr	r3, [r7, #16]
 8020a26:	f003 0301 	and.w	r3, r3, #1
 8020a2a:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 8020a2c:	693b      	ldr	r3, [r7, #16]
 8020a2e:	f023 0301 	bic.w	r3, r3, #1
 8020a32:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8020a34:	e00a      	b.n	8020a4c <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8020a36:	697a      	ldr	r2, [r7, #20]
 8020a38:	1c93      	adds	r3, r2, #2
 8020a3a:	617b      	str	r3, [r7, #20]
 8020a3c:	69bb      	ldr	r3, [r7, #24]
 8020a3e:	1c99      	adds	r1, r3, #2
 8020a40:	61b9      	str	r1, [r7, #24]
 8020a42:	8812      	ldrh	r2, [r2, #0]
 8020a44:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 8020a46:	687b      	ldr	r3, [r7, #4]
 8020a48:	3b02      	subs	r3, #2
 8020a4a:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8020a4c:	697a      	ldr	r2, [r7, #20]
 8020a4e:	693b      	ldr	r3, [r7, #16]
 8020a50:	429a      	cmp	r2, r3
 8020a52:	d202      	bcs.n	8020a5a <memcpy+0x96>
 8020a54:	687b      	ldr	r3, [r7, #4]
 8020a56:	2b00      	cmp	r3, #0
 8020a58:	d1ed      	bne.n	8020a36 <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8020a5a:	693a      	ldr	r2, [r7, #16]
 8020a5c:	69fb      	ldr	r3, [r7, #28]
 8020a5e:	4313      	orrs	r3, r2
 8020a60:	613b      	str	r3, [r7, #16]
 8020a62:	e0ae      	b.n	8020bc2 <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 8020a64:	697b      	ldr	r3, [r7, #20]
 8020a66:	f003 0302 	and.w	r3, r3, #2
 8020a6a:	2b00      	cmp	r3, #0
 8020a6c:	d00c      	beq.n	8020a88 <memcpy+0xc4>
 8020a6e:	697a      	ldr	r2, [r7, #20]
 8020a70:	693b      	ldr	r3, [r7, #16]
 8020a72:	3b01      	subs	r3, #1
 8020a74:	429a      	cmp	r2, r3
 8020a76:	d207      	bcs.n	8020a88 <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 8020a78:	697a      	ldr	r2, [r7, #20]
 8020a7a:	1c93      	adds	r3, r2, #2
 8020a7c:	617b      	str	r3, [r7, #20]
 8020a7e:	69bb      	ldr	r3, [r7, #24]
 8020a80:	1c99      	adds	r1, r3, #2
 8020a82:	61b9      	str	r1, [r7, #24]
 8020a84:	8812      	ldrh	r2, [r2, #0]
 8020a86:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 8020a88:	693b      	ldr	r3, [r7, #16]
 8020a8a:	f003 0303 	and.w	r3, r3, #3
 8020a8e:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 8020a90:	693b      	ldr	r3, [r7, #16]
 8020a92:	f023 0303 	bic.w	r3, r3, #3
 8020a96:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 8020a98:	693a      	ldr	r2, [r7, #16]
 8020a9a:	697b      	ldr	r3, [r7, #20]
 8020a9c:	1ad3      	subs	r3, r2, r3
 8020a9e:	109b      	asrs	r3, r3, #2
 8020aa0:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8020aa2:	e02f      	b.n	8020b04 <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8020aa4:	697a      	ldr	r2, [r7, #20]
 8020aa6:	69bb      	ldr	r3, [r7, #24]
 8020aa8:	6812      	ldr	r2, [r2, #0]
 8020aaa:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 8020aac:	697a      	ldr	r2, [r7, #20]
 8020aae:	69bb      	ldr	r3, [r7, #24]
 8020ab0:	3304      	adds	r3, #4
 8020ab2:	6852      	ldr	r2, [r2, #4]
 8020ab4:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 8020ab6:	697a      	ldr	r2, [r7, #20]
 8020ab8:	69bb      	ldr	r3, [r7, #24]
 8020aba:	3308      	adds	r3, #8
 8020abc:	6892      	ldr	r2, [r2, #8]
 8020abe:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 8020ac0:	697a      	ldr	r2, [r7, #20]
 8020ac2:	69bb      	ldr	r3, [r7, #24]
 8020ac4:	330c      	adds	r3, #12
 8020ac6:	68d2      	ldr	r2, [r2, #12]
 8020ac8:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 8020aca:	697a      	ldr	r2, [r7, #20]
 8020acc:	69bb      	ldr	r3, [r7, #24]
 8020ace:	3310      	adds	r3, #16
 8020ad0:	6912      	ldr	r2, [r2, #16]
 8020ad2:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 8020ad4:	697a      	ldr	r2, [r7, #20]
 8020ad6:	69bb      	ldr	r3, [r7, #24]
 8020ad8:	3314      	adds	r3, #20
 8020ada:	6952      	ldr	r2, [r2, #20]
 8020adc:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 8020ade:	697a      	ldr	r2, [r7, #20]
 8020ae0:	69bb      	ldr	r3, [r7, #24]
 8020ae2:	3318      	adds	r3, #24
 8020ae4:	6992      	ldr	r2, [r2, #24]
 8020ae6:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 8020ae8:	697a      	ldr	r2, [r7, #20]
 8020aea:	69bb      	ldr	r3, [r7, #24]
 8020aec:	331c      	adds	r3, #28
 8020aee:	69d2      	ldr	r2, [r2, #28]
 8020af0:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 8020af2:	69bb      	ldr	r3, [r7, #24]
 8020af4:	3320      	adds	r3, #32
 8020af6:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 8020af8:	697b      	ldr	r3, [r7, #20]
 8020afa:	3320      	adds	r3, #32
 8020afc:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 8020afe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020b00:	3b08      	subs	r3, #8
 8020b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8020b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020b06:	2b08      	cmp	r3, #8
 8020b08:	dccc      	bgt.n	8020aa4 <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8020b0a:	e00a      	b.n	8020b22 <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 8020b0c:	697a      	ldr	r2, [r7, #20]
 8020b0e:	1d13      	adds	r3, r2, #4
 8020b10:	617b      	str	r3, [r7, #20]
 8020b12:	69bb      	ldr	r3, [r7, #24]
 8020b14:	1d19      	adds	r1, r3, #4
 8020b16:	61b9      	str	r1, [r7, #24]
 8020b18:	6812      	ldr	r2, [r2, #0]
 8020b1a:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 8020b1c:	687b      	ldr	r3, [r7, #4]
 8020b1e:	3b04      	subs	r3, #4
 8020b20:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8020b22:	697a      	ldr	r2, [r7, #20]
 8020b24:	693b      	ldr	r3, [r7, #16]
 8020b26:	429a      	cmp	r2, r3
 8020b28:	d202      	bcs.n	8020b30 <memcpy+0x16c>
 8020b2a:	687b      	ldr	r3, [r7, #4]
 8020b2c:	2b00      	cmp	r3, #0
 8020b2e:	d1ed      	bne.n	8020b0c <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8020b30:	693a      	ldr	r2, [r7, #16]
 8020b32:	6a3b      	ldr	r3, [r7, #32]
 8020b34:	4313      	orrs	r3, r2
 8020b36:	613b      	str	r3, [r7, #16]
 8020b38:	e043      	b.n	8020bc2 <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 8020b3a:	693a      	ldr	r2, [r7, #16]
 8020b3c:	697b      	ldr	r3, [r7, #20]
 8020b3e:	1ad3      	subs	r3, r2, r3
 8020b40:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8020b42:	e02f      	b.n	8020ba4 <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 8020b44:	697a      	ldr	r2, [r7, #20]
 8020b46:	69bb      	ldr	r3, [r7, #24]
 8020b48:	7812      	ldrb	r2, [r2, #0]
 8020b4a:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 8020b4c:	697a      	ldr	r2, [r7, #20]
 8020b4e:	69bb      	ldr	r3, [r7, #24]
 8020b50:	3301      	adds	r3, #1
 8020b52:	7852      	ldrb	r2, [r2, #1]
 8020b54:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 8020b56:	697a      	ldr	r2, [r7, #20]
 8020b58:	69bb      	ldr	r3, [r7, #24]
 8020b5a:	3302      	adds	r3, #2
 8020b5c:	7892      	ldrb	r2, [r2, #2]
 8020b5e:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 8020b60:	697a      	ldr	r2, [r7, #20]
 8020b62:	69bb      	ldr	r3, [r7, #24]
 8020b64:	3303      	adds	r3, #3
 8020b66:	78d2      	ldrb	r2, [r2, #3]
 8020b68:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 8020b6a:	697a      	ldr	r2, [r7, #20]
 8020b6c:	69bb      	ldr	r3, [r7, #24]
 8020b6e:	3304      	adds	r3, #4
 8020b70:	7912      	ldrb	r2, [r2, #4]
 8020b72:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 8020b74:	697a      	ldr	r2, [r7, #20]
 8020b76:	69bb      	ldr	r3, [r7, #24]
 8020b78:	3305      	adds	r3, #5
 8020b7a:	7952      	ldrb	r2, [r2, #5]
 8020b7c:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 8020b7e:	697a      	ldr	r2, [r7, #20]
 8020b80:	69bb      	ldr	r3, [r7, #24]
 8020b82:	3306      	adds	r3, #6
 8020b84:	7992      	ldrb	r2, [r2, #6]
 8020b86:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 8020b88:	697a      	ldr	r2, [r7, #20]
 8020b8a:	69bb      	ldr	r3, [r7, #24]
 8020b8c:	3307      	adds	r3, #7
 8020b8e:	79d2      	ldrb	r2, [r2, #7]
 8020b90:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 8020b92:	69bb      	ldr	r3, [r7, #24]
 8020b94:	3308      	adds	r3, #8
 8020b96:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 8020b98:	697b      	ldr	r3, [r7, #20]
 8020b9a:	3308      	adds	r3, #8
 8020b9c:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8020b9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020ba0:	3b08      	subs	r3, #8
 8020ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8020ba4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020ba6:	2b08      	cmp	r3, #8
 8020ba8:	dccc      	bgt.n	8020b44 <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8020baa:	e00a      	b.n	8020bc2 <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 8020bac:	697a      	ldr	r2, [r7, #20]
 8020bae:	1c53      	adds	r3, r2, #1
 8020bb0:	617b      	str	r3, [r7, #20]
 8020bb2:	69bb      	ldr	r3, [r7, #24]
 8020bb4:	1c59      	adds	r1, r3, #1
 8020bb6:	61b9      	str	r1, [r7, #24]
 8020bb8:	7812      	ldrb	r2, [r2, #0]
 8020bba:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 8020bbc:	687b      	ldr	r3, [r7, #4]
 8020bbe:	3b01      	subs	r3, #1
 8020bc0:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 8020bc2:	697a      	ldr	r2, [r7, #20]
 8020bc4:	693b      	ldr	r3, [r7, #16]
 8020bc6:	429a      	cmp	r2, r3
 8020bc8:	d202      	bcs.n	8020bd0 <memcpy+0x20c>
 8020bca:	687b      	ldr	r3, [r7, #4]
 8020bcc:	2b00      	cmp	r3, #0
 8020bce:	d1ed      	bne.n	8020bac <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 8020bd0:	68fb      	ldr	r3, [r7, #12]
}
 8020bd2:	4618      	mov	r0, r3
 8020bd4:	3734      	adds	r7, #52	@ 0x34
 8020bd6:	46bd      	mov	sp, r7
 8020bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020bdc:	4770      	bx	lr

08020bde <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 8020bde:	b480      	push	{r7}
 8020be0:	b08b      	sub	sp, #44	@ 0x2c
 8020be2:	af00      	add	r7, sp, #0
 8020be4:	60f8      	str	r0, [r7, #12]
 8020be6:	60b9      	str	r1, [r7, #8]
 8020be8:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 8020bea:	68fb      	ldr	r3, [r7, #12]
 8020bec:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 8020bee:	697a      	ldr	r2, [r7, #20]
 8020bf0:	687b      	ldr	r3, [r7, #4]
 8020bf2:	4413      	add	r3, r2
 8020bf4:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 8020bf6:	687b      	ldr	r3, [r7, #4]
 8020bf8:	2b07      	cmp	r3, #7
 8020bfa:	d97b      	bls.n	8020cf4 <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 8020bfc:	68bb      	ldr	r3, [r7, #8]
 8020bfe:	b2db      	uxtb	r3, r3
 8020c00:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 8020c02:	69fb      	ldr	r3, [r7, #28]
 8020c04:	021a      	lsls	r2, r3, #8
 8020c06:	69fb      	ldr	r3, [r7, #28]
 8020c08:	041b      	lsls	r3, r3, #16
 8020c0a:	431a      	orrs	r2, r3
 8020c0c:	69fb      	ldr	r3, [r7, #28]
 8020c0e:	061b      	lsls	r3, r3, #24
 8020c10:	4313      	orrs	r3, r2
 8020c12:	69fa      	ldr	r2, [r7, #28]
 8020c14:	4313      	orrs	r3, r2
 8020c16:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 8020c18:	697b      	ldr	r3, [r7, #20]
 8020c1a:	f003 0303 	and.w	r3, r3, #3
 8020c1e:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 8020c20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c22:	2b00      	cmp	r3, #0
 8020c24:	d010      	beq.n	8020c48 <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 8020c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c28:	f1c3 0304 	rsb	r3, r3, #4
 8020c2c:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 8020c2e:	e006      	b.n	8020c3e <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 8020c30:	697b      	ldr	r3, [r7, #20]
 8020c32:	68ba      	ldr	r2, [r7, #8]
 8020c34:	b2d2      	uxtb	r2, r2
 8020c36:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 8020c38:	697b      	ldr	r3, [r7, #20]
 8020c3a:	3301      	adds	r3, #1
 8020c3c:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 8020c3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020c40:	1e5a      	subs	r2, r3, #1
 8020c42:	627a      	str	r2, [r7, #36]	@ 0x24
 8020c44:	2b00      	cmp	r3, #0
 8020c46:	d1f3      	bne.n	8020c30 <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 8020c48:	693b      	ldr	r3, [r7, #16]
 8020c4a:	f003 0303 	and.w	r3, r3, #3
 8020c4e:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 8020c50:	693b      	ldr	r3, [r7, #16]
 8020c52:	f023 0303 	bic.w	r3, r3, #3
 8020c56:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 8020c58:	693a      	ldr	r2, [r7, #16]
 8020c5a:	697b      	ldr	r3, [r7, #20]
 8020c5c:	1ad3      	subs	r3, r2, r3
 8020c5e:	109b      	asrs	r3, r3, #2
 8020c60:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8020c62:	e024      	b.n	8020cae <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 8020c64:	697b      	ldr	r3, [r7, #20]
 8020c66:	69fa      	ldr	r2, [r7, #28]
 8020c68:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 8020c6a:	697b      	ldr	r3, [r7, #20]
 8020c6c:	3304      	adds	r3, #4
 8020c6e:	69fa      	ldr	r2, [r7, #28]
 8020c70:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 8020c72:	697b      	ldr	r3, [r7, #20]
 8020c74:	3308      	adds	r3, #8
 8020c76:	69fa      	ldr	r2, [r7, #28]
 8020c78:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 8020c7a:	697b      	ldr	r3, [r7, #20]
 8020c7c:	330c      	adds	r3, #12
 8020c7e:	69fa      	ldr	r2, [r7, #28]
 8020c80:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 8020c82:	697b      	ldr	r3, [r7, #20]
 8020c84:	3310      	adds	r3, #16
 8020c86:	69fa      	ldr	r2, [r7, #28]
 8020c88:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 8020c8a:	697b      	ldr	r3, [r7, #20]
 8020c8c:	3314      	adds	r3, #20
 8020c8e:	69fa      	ldr	r2, [r7, #28]
 8020c90:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 8020c92:	697b      	ldr	r3, [r7, #20]
 8020c94:	3318      	adds	r3, #24
 8020c96:	69fa      	ldr	r2, [r7, #28]
 8020c98:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 8020c9a:	697b      	ldr	r3, [r7, #20]
 8020c9c:	331c      	adds	r3, #28
 8020c9e:	69fa      	ldr	r2, [r7, #28]
 8020ca0:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 8020ca2:	697b      	ldr	r3, [r7, #20]
 8020ca4:	3320      	adds	r3, #32
 8020ca6:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8020ca8:	6a3b      	ldr	r3, [r7, #32]
 8020caa:	3b08      	subs	r3, #8
 8020cac:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8020cae:	6a3b      	ldr	r3, [r7, #32]
 8020cb0:	2b08      	cmp	r3, #8
 8020cb2:	dcd7      	bgt.n	8020c64 <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8020cb4:	e008      	b.n	8020cc8 <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 8020cb6:	697b      	ldr	r3, [r7, #20]
 8020cb8:	69fa      	ldr	r2, [r7, #28]
 8020cba:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 8020cbc:	697b      	ldr	r3, [r7, #20]
 8020cbe:	3304      	adds	r3, #4
 8020cc0:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 8020cc2:	687b      	ldr	r3, [r7, #4]
 8020cc4:	3304      	adds	r3, #4
 8020cc6:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 8020cc8:	697a      	ldr	r2, [r7, #20]
 8020cca:	693b      	ldr	r3, [r7, #16]
 8020ccc:	429a      	cmp	r2, r3
 8020cce:	d202      	bcs.n	8020cd6 <memset+0xf8>
 8020cd0:	687b      	ldr	r3, [r7, #4]
 8020cd2:	2b00      	cmp	r3, #0
 8020cd4:	d1ef      	bne.n	8020cb6 <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 8020cd6:	693a      	ldr	r2, [r7, #16]
 8020cd8:	69bb      	ldr	r3, [r7, #24]
 8020cda:	4313      	orrs	r3, r2
 8020cdc:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8020cde:	e009      	b.n	8020cf4 <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 8020ce0:	697b      	ldr	r3, [r7, #20]
 8020ce2:	68ba      	ldr	r2, [r7, #8]
 8020ce4:	b2d2      	uxtb	r2, r2
 8020ce6:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 8020ce8:	697b      	ldr	r3, [r7, #20]
 8020cea:	3301      	adds	r3, #1
 8020cec:	617b      	str	r3, [r7, #20]
			ulBytes++;
 8020cee:	687b      	ldr	r3, [r7, #4]
 8020cf0:	3301      	adds	r3, #1
 8020cf2:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 8020cf4:	697a      	ldr	r2, [r7, #20]
 8020cf6:	693b      	ldr	r3, [r7, #16]
 8020cf8:	429a      	cmp	r2, r3
 8020cfa:	d202      	bcs.n	8020d02 <memset+0x124>
 8020cfc:	687b      	ldr	r3, [r7, #4]
 8020cfe:	2b00      	cmp	r3, #0
 8020d00:	d1ee      	bne.n	8020ce0 <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 8020d02:	68fb      	ldr	r3, [r7, #12]
}
 8020d04:	4618      	mov	r0, r3
 8020d06:	372c      	adds	r7, #44	@ 0x2c
 8020d08:	46bd      	mov	sp, r7
 8020d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d0e:	4770      	bx	lr

08020d10 <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 8020d10:	b480      	push	{r7}
 8020d12:	b083      	sub	sp, #12
 8020d14:	af00      	add	r7, sp, #0
 8020d16:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 8020d18:	2303      	movs	r3, #3
}
 8020d1a:	4618      	mov	r0, r3
 8020d1c:	370c      	adds	r7, #12
 8020d1e:	46bd      	mov	sp, r7
 8020d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d24:	4770      	bx	lr

08020d26 <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 8020d26:	b480      	push	{r7}
 8020d28:	b083      	sub	sp, #12
 8020d2a:	af00      	add	r7, sp, #0
 8020d2c:	4603      	mov	r3, r0
 8020d2e:	6039      	str	r1, [r7, #0]
 8020d30:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 8020d32:	bf00      	nop
 8020d34:	370c      	adds	r7, #12
 8020d36:	46bd      	mov	sp, r7
 8020d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d3c:	4770      	bx	lr

08020d3e <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 8020d3e:	b580      	push	{r7, lr}
 8020d40:	b084      	sub	sp, #16
 8020d42:	af00      	add	r7, sp, #0
 8020d44:	60f8      	str	r0, [r7, #12]
 8020d46:	60b9      	str	r1, [r7, #8]
 8020d48:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 8020d4a:	68fb      	ldr	r3, [r7, #12]
 8020d4c:	68ba      	ldr	r2, [r7, #8]
 8020d4e:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 8020d50:	68fb      	ldr	r3, [r7, #12]
 8020d52:	68ba      	ldr	r2, [r7, #8]
 8020d54:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 8020d56:	687b      	ldr	r3, [r7, #4]
 8020d58:	1e5a      	subs	r2, r3, #1
 8020d5a:	68fb      	ldr	r3, [r7, #12]
 8020d5c:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 8020d5e:	68fb      	ldr	r3, [r7, #12]
 8020d60:	2200      	movs	r2, #0
 8020d62:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 8020d64:	68fb      	ldr	r3, [r7, #12]
 8020d66:	3310      	adds	r3, #16
 8020d68:	2210      	movs	r2, #16
 8020d6a:	2100      	movs	r1, #0
 8020d6c:	4618      	mov	r0, r3
 8020d6e:	f7ff ff36 	bl	8020bde <memset>
}
 8020d72:	bf00      	nop
 8020d74:	3710      	adds	r7, #16
 8020d76:	46bd      	mov	sp, r7
 8020d78:	bd80      	pop	{r7, pc}

08020d7a <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 8020d7a:	b580      	push	{r7, lr}
 8020d7c:	b082      	sub	sp, #8
 8020d7e:	af00      	add	r7, sp, #0
 8020d80:	6078      	str	r0, [r7, #4]
 8020d82:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8020d84:	687b      	ldr	r3, [r7, #4]
 8020d86:	681b      	ldr	r3, [r3, #0]
 8020d88:	2b00      	cmp	r3, #0
 8020d8a:	d10d      	bne.n	8020da8 <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8020d8c:	683b      	ldr	r3, [r7, #0]
 8020d8e:	b2db      	uxtb	r3, r3
 8020d90:	2214      	movs	r2, #20
 8020d92:	4611      	mov	r1, r2
 8020d94:	4618      	mov	r0, r3
 8020d96:	f7ff ffc6 	bl	8020d26 <vOutputChar>
		apStr->curLen++;
 8020d9a:	687b      	ldr	r3, [r7, #4]
 8020d9c:	68db      	ldr	r3, [r3, #12]
 8020d9e:	1c5a      	adds	r2, r3, #1
 8020da0:	687b      	ldr	r3, [r7, #4]
 8020da2:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8020da4:	2301      	movs	r3, #1
 8020da6:	e022      	b.n	8020dee <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 8020da8:	687b      	ldr	r3, [r7, #4]
 8020daa:	681a      	ldr	r2, [r3, #0]
 8020dac:	687b      	ldr	r3, [r7, #4]
 8020dae:	689b      	ldr	r3, [r3, #8]
 8020db0:	429a      	cmp	r2, r3
 8020db2:	d20e      	bcs.n	8020dd2 <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 8020db4:	687b      	ldr	r3, [r7, #4]
 8020db6:	681b      	ldr	r3, [r3, #0]
 8020db8:	1c59      	adds	r1, r3, #1
 8020dba:	687a      	ldr	r2, [r7, #4]
 8020dbc:	6011      	str	r1, [r2, #0]
 8020dbe:	683a      	ldr	r2, [r7, #0]
 8020dc0:	b2d2      	uxtb	r2, r2
 8020dc2:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 8020dc4:	687b      	ldr	r3, [r7, #4]
 8020dc6:	68db      	ldr	r3, [r3, #12]
 8020dc8:	1c5a      	adds	r2, r3, #1
 8020dca:	687b      	ldr	r3, [r7, #4]
 8020dcc:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8020dce:	2301      	movs	r3, #1
 8020dd0:	e00d      	b.n	8020dee <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 8020dd2:	687b      	ldr	r3, [r7, #4]
 8020dd4:	681a      	ldr	r2, [r3, #0]
 8020dd6:	687b      	ldr	r3, [r7, #4]
 8020dd8:	689b      	ldr	r3, [r3, #8]
 8020dda:	429a      	cmp	r2, r3
 8020ddc:	d106      	bne.n	8020dec <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 8020dde:	687b      	ldr	r3, [r7, #4]
 8020de0:	681b      	ldr	r3, [r3, #0]
 8020de2:	1c59      	adds	r1, r3, #1
 8020de4:	687a      	ldr	r2, [r7, #4]
 8020de6:	6011      	str	r1, [r2, #0]
 8020de8:	2200      	movs	r2, #0
 8020dea:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8020dec:	2300      	movs	r3, #0
}
 8020dee:	4618      	mov	r0, r3
 8020df0:	3708      	adds	r7, #8
 8020df2:	46bd      	mov	sp, r7
 8020df4:	bd80      	pop	{r7, pc}

08020df6 <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 8020df6:	b580      	push	{r7, lr}
 8020df8:	b082      	sub	sp, #8
 8020dfa:	af00      	add	r7, sp, #0
 8020dfc:	6078      	str	r0, [r7, #4]
 8020dfe:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8020e00:	687b      	ldr	r3, [r7, #4]
 8020e02:	681b      	ldr	r3, [r3, #0]
 8020e04:	2b00      	cmp	r3, #0
 8020e06:	d112      	bne.n	8020e2e <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8020e08:	683b      	ldr	r3, [r7, #0]
 8020e0a:	b2db      	uxtb	r3, r3
 8020e0c:	2214      	movs	r2, #20
 8020e0e:	4611      	mov	r1, r2
 8020e10:	4618      	mov	r0, r3
 8020e12:	f7ff ff88 	bl	8020d26 <vOutputChar>
		if( c == 0 )
 8020e16:	683b      	ldr	r3, [r7, #0]
 8020e18:	2b00      	cmp	r3, #0
 8020e1a:	d101      	bne.n	8020e20 <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 8020e1c:	2300      	movs	r3, #0
 8020e1e:	e02e      	b.n	8020e7e <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8020e20:	687b      	ldr	r3, [r7, #4]
 8020e22:	68db      	ldr	r3, [r3, #12]
 8020e24:	1c5a      	adds	r2, r3, #1
 8020e26:	687b      	ldr	r3, [r7, #4]
 8020e28:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8020e2a:	2301      	movs	r3, #1
 8020e2c:	e027      	b.n	8020e7e <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 8020e2e:	687b      	ldr	r3, [r7, #4]
 8020e30:	681a      	ldr	r2, [r3, #0]
 8020e32:	687b      	ldr	r3, [r7, #4]
 8020e34:	689b      	ldr	r3, [r3, #8]
 8020e36:	429a      	cmp	r2, r3
 8020e38:	d213      	bcs.n	8020e62 <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 8020e3a:	687b      	ldr	r3, [r7, #4]
 8020e3c:	681b      	ldr	r3, [r3, #0]
 8020e3e:	1c59      	adds	r1, r3, #1
 8020e40:	687a      	ldr	r2, [r7, #4]
 8020e42:	6011      	str	r1, [r2, #0]
 8020e44:	683a      	ldr	r2, [r7, #0]
 8020e46:	b2d2      	uxtb	r2, r2
 8020e48:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 8020e4a:	683b      	ldr	r3, [r7, #0]
 8020e4c:	2b00      	cmp	r3, #0
 8020e4e:	d101      	bne.n	8020e54 <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 8020e50:	2300      	movs	r3, #0
 8020e52:	e014      	b.n	8020e7e <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8020e54:	687b      	ldr	r3, [r7, #4]
 8020e56:	68db      	ldr	r3, [r3, #12]
 8020e58:	1c5a      	adds	r2, r3, #1
 8020e5a:	687b      	ldr	r3, [r7, #4]
 8020e5c:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8020e5e:	2301      	movs	r3, #1
 8020e60:	e00d      	b.n	8020e7e <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 8020e62:	687b      	ldr	r3, [r7, #4]
 8020e64:	681a      	ldr	r2, [r3, #0]
 8020e66:	687b      	ldr	r3, [r7, #4]
 8020e68:	689b      	ldr	r3, [r3, #8]
 8020e6a:	429a      	cmp	r2, r3
 8020e6c:	d106      	bne.n	8020e7c <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 8020e6e:	687b      	ldr	r3, [r7, #4]
 8020e70:	681b      	ldr	r3, [r3, #0]
 8020e72:	1c59      	adds	r1, r3, #1
 8020e74:	687a      	ldr	r2, [r7, #4]
 8020e76:	6011      	str	r1, [r2, #0]
 8020e78:	2200      	movs	r2, #0
 8020e7a:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8020e7c:	2300      	movs	r3, #0
}
 8020e7e:	4618      	mov	r0, r3
 8020e80:	3708      	adds	r7, #8
 8020e82:	46bd      	mov	sp, r7
 8020e84:	bd80      	pop	{r7, pc}
	...

08020e88 <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 8020e88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8020e8a:	b085      	sub	sp, #20
 8020e8c:	af00      	add	r7, sp, #0
 8020e8e:	6078      	str	r0, [r7, #4]
 8020e90:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 8020e92:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 8020e94:	683b      	ldr	r3, [r7, #0]
 8020e96:	4618      	mov	r0, r3
 8020e98:	f7ff ff3a 	bl	8020d10 <xApplicationMemoryPermissions>
 8020e9c:	4603      	mov	r3, r0
 8020e9e:	2b00      	cmp	r3, #0
 8020ea0:	d101      	bne.n	8020ea6 <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 8020ea2:	4b4c      	ldr	r3, [pc, #304]	@ (8020fd4 <prints+0x14c>)
 8020ea4:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 8020ea6:	687b      	ldr	r3, [r7, #4]
 8020ea8:	695b      	ldr	r3, [r3, #20]
 8020eaa:	2b00      	cmp	r3, #0
 8020eac:	dd1b      	ble.n	8020ee6 <prints+0x5e>
	{
		register int count = 0;
 8020eae:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 8020eb0:	683d      	ldr	r5, [r7, #0]
 8020eb2:	e001      	b.n	8020eb8 <prints+0x30>
		{
			++count;
 8020eb4:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 8020eb6:	3501      	adds	r5, #1
 8020eb8:	782b      	ldrb	r3, [r5, #0]
 8020eba:	2b00      	cmp	r3, #0
 8020ebc:	d1fa      	bne.n	8020eb4 <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 8020ebe:	687b      	ldr	r3, [r7, #4]
 8020ec0:	695b      	ldr	r3, [r3, #20]
 8020ec2:	429c      	cmp	r4, r3
 8020ec4:	db03      	blt.n	8020ece <prints+0x46>
		{
			apBuf->flags.width = 0;
 8020ec6:	687b      	ldr	r3, [r7, #4]
 8020ec8:	2200      	movs	r2, #0
 8020eca:	615a      	str	r2, [r3, #20]
 8020ecc:	e004      	b.n	8020ed8 <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 8020ece:	687b      	ldr	r3, [r7, #4]
 8020ed0:	695b      	ldr	r3, [r3, #20]
 8020ed2:	1b1a      	subs	r2, r3, r4
 8020ed4:	687b      	ldr	r3, [r7, #4]
 8020ed6:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 8020ed8:	687b      	ldr	r3, [r7, #4]
 8020eda:	7f1b      	ldrb	r3, [r3, #28]
 8020edc:	f003 0302 	and.w	r3, r3, #2
 8020ee0:	2b00      	cmp	r3, #0
 8020ee2:	d000      	beq.n	8020ee6 <prints+0x5e>
		{
			padchar = '0';
 8020ee4:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 8020ee6:	687b      	ldr	r3, [r7, #4]
 8020ee8:	7f1b      	ldrb	r3, [r3, #28]
 8020eea:	f003 0301 	and.w	r3, r3, #1
 8020eee:	2b00      	cmp	r3, #0
 8020ef0:	d112      	bne.n	8020f18 <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8020ef2:	e00d      	b.n	8020f10 <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 8020ef4:	4631      	mov	r1, r6
 8020ef6:	6878      	ldr	r0, [r7, #4]
 8020ef8:	f7ff ff3f 	bl	8020d7a <strbuf_printchar>
 8020efc:	4603      	mov	r3, r0
 8020efe:	2b00      	cmp	r3, #0
 8020f00:	d101      	bne.n	8020f06 <prints+0x7e>
			{
				return pdFALSE;
 8020f02:	2300      	movs	r3, #0
 8020f04:	e062      	b.n	8020fcc <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8020f06:	687b      	ldr	r3, [r7, #4]
 8020f08:	695b      	ldr	r3, [r3, #20]
 8020f0a:	1e5a      	subs	r2, r3, #1
 8020f0c:	687b      	ldr	r3, [r7, #4]
 8020f0e:	615a      	str	r2, [r3, #20]
 8020f10:	687b      	ldr	r3, [r7, #4]
 8020f12:	695b      	ldr	r3, [r3, #20]
 8020f14:	2b00      	cmp	r3, #0
 8020f16:	dced      	bgt.n	8020ef4 <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 8020f18:	687b      	ldr	r3, [r7, #4]
 8020f1a:	7f9b      	ldrb	r3, [r3, #30]
 8020f1c:	f003 0302 	and.w	r3, r3, #2
 8020f20:	b2db      	uxtb	r3, r3
 8020f22:	2b00      	cmp	r3, #0
 8020f24:	d036      	beq.n	8020f94 <prints+0x10c>
 8020f26:	687b      	ldr	r3, [r7, #4]
 8020f28:	7f1b      	ldrb	r3, [r3, #28]
 8020f2a:	2b01      	cmp	r3, #1
 8020f2c:	d132      	bne.n	8020f94 <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 8020f2e:	6838      	ldr	r0, [r7, #0]
 8020f30:	f7df f9e0 	bl	80002f4 <strlen>
 8020f34:	4603      	mov	r3, r0
 8020f36:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 8020f38:	687b      	ldr	r3, [r7, #4]
 8020f3a:	699b      	ldr	r3, [r3, #24]
 8020f3c:	68ba      	ldr	r2, [r7, #8]
 8020f3e:	429a      	cmp	r2, r3
 8020f40:	da28      	bge.n	8020f94 <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 8020f42:	687b      	ldr	r3, [r7, #4]
 8020f44:	699a      	ldr	r2, [r3, #24]
 8020f46:	68bb      	ldr	r3, [r7, #8]
 8020f48:	1ad3      	subs	r3, r2, r3
 8020f4a:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 8020f4c:	e00b      	b.n	8020f66 <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 8020f4e:	2130      	movs	r1, #48	@ 0x30
 8020f50:	6878      	ldr	r0, [r7, #4]
 8020f52:	f7ff ff12 	bl	8020d7a <strbuf_printchar>
 8020f56:	4603      	mov	r3, r0
 8020f58:	2b00      	cmp	r3, #0
 8020f5a:	d101      	bne.n	8020f60 <prints+0xd8>
				{
					return pdFALSE;
 8020f5c:	2300      	movs	r3, #0
 8020f5e:	e035      	b.n	8020fcc <prints+0x144>
			for( ; i; i-- )
 8020f60:	68fb      	ldr	r3, [r7, #12]
 8020f62:	3b01      	subs	r3, #1
 8020f64:	60fb      	str	r3, [r7, #12]
 8020f66:	68fb      	ldr	r3, [r7, #12]
 8020f68:	2b00      	cmp	r3, #0
 8020f6a:	d1f0      	bne.n	8020f4e <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8020f6c:	e012      	b.n	8020f94 <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 8020f6e:	683b      	ldr	r3, [r7, #0]
 8020f70:	781b      	ldrb	r3, [r3, #0]
 8020f72:	4619      	mov	r1, r3
 8020f74:	6878      	ldr	r0, [r7, #4]
 8020f76:	f7ff ff00 	bl	8020d7a <strbuf_printchar>
 8020f7a:	4603      	mov	r3, r0
 8020f7c:	2b00      	cmp	r3, #0
 8020f7e:	d101      	bne.n	8020f84 <prints+0xfc>
		{
			return pdFALSE;
 8020f80:	2300      	movs	r3, #0
 8020f82:	e023      	b.n	8020fcc <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8020f84:	683b      	ldr	r3, [r7, #0]
 8020f86:	3301      	adds	r3, #1
 8020f88:	603b      	str	r3, [r7, #0]
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	699b      	ldr	r3, [r3, #24]
 8020f8e:	1e5a      	subs	r2, r3, #1
 8020f90:	687b      	ldr	r3, [r7, #4]
 8020f92:	619a      	str	r2, [r3, #24]
 8020f94:	687b      	ldr	r3, [r7, #4]
 8020f96:	699b      	ldr	r3, [r3, #24]
 8020f98:	2b00      	cmp	r3, #0
 8020f9a:	d012      	beq.n	8020fc2 <prints+0x13a>
 8020f9c:	683b      	ldr	r3, [r7, #0]
 8020f9e:	781b      	ldrb	r3, [r3, #0]
 8020fa0:	2b00      	cmp	r3, #0
 8020fa2:	d1e4      	bne.n	8020f6e <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8020fa4:	e00d      	b.n	8020fc2 <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 8020fa6:	4631      	mov	r1, r6
 8020fa8:	6878      	ldr	r0, [r7, #4]
 8020faa:	f7ff fee6 	bl	8020d7a <strbuf_printchar>
 8020fae:	4603      	mov	r3, r0
 8020fb0:	2b00      	cmp	r3, #0
 8020fb2:	d101      	bne.n	8020fb8 <prints+0x130>
		{
			return pdFALSE;
 8020fb4:	2300      	movs	r3, #0
 8020fb6:	e009      	b.n	8020fcc <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8020fb8:	687b      	ldr	r3, [r7, #4]
 8020fba:	695b      	ldr	r3, [r3, #20]
 8020fbc:	1e5a      	subs	r2, r3, #1
 8020fbe:	687b      	ldr	r3, [r7, #4]
 8020fc0:	615a      	str	r2, [r3, #20]
 8020fc2:	687b      	ldr	r3, [r7, #4]
 8020fc4:	695b      	ldr	r3, [r3, #20]
 8020fc6:	2b00      	cmp	r3, #0
 8020fc8:	dced      	bgt.n	8020fa6 <prints+0x11e>
		}
	}

	return pdTRUE;
 8020fca:	2301      	movs	r3, #1
}
 8020fcc:	4618      	mov	r0, r3
 8020fce:	3714      	adds	r7, #20
 8020fd0:	46bd      	mov	sp, r7
 8020fd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020fd4:	08025b74 	.word	0x08025b74

08020fd8 <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 8020fd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8020fdc:	b087      	sub	sp, #28
 8020fde:	af00      	add	r7, sp, #0
 8020fe0:	6078      	str	r0, [r7, #4]
 8020fe2:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 8020fe4:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 8020fe8:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 8020fea:	687b      	ldr	r3, [r7, #4]
 8020fec:	691b      	ldr	r3, [r3, #16]
 8020fee:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8020ff0:	687a      	ldr	r2, [r7, #4]
 8020ff2:	7f93      	ldrb	r3, [r2, #30]
 8020ff4:	f043 0302 	orr.w	r3, r3, #2
 8020ff8:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 8020ffa:	683b      	ldr	r3, [r7, #0]
 8020ffc:	2b00      	cmp	r3, #0
 8020ffe:	d10b      	bne.n	8021018 <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 8021000:	2330      	movs	r3, #48	@ 0x30
 8021002:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 8021004:	2300      	movs	r3, #0
 8021006:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 8021008:	f107 030c 	add.w	r3, r7, #12
 802100c:	4619      	mov	r1, r3
 802100e:	6878      	ldr	r0, [r7, #4]
 8021010:	f7ff ff3a 	bl	8020e88 <prints>
 8021014:	4603      	mov	r3, r0
 8021016:	e067      	b.n	80210e8 <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 8021018:	687b      	ldr	r3, [r7, #4]
 802101a:	7f9b      	ldrb	r3, [r3, #30]
 802101c:	f003 0301 	and.w	r3, r3, #1
 8021020:	b2db      	uxtb	r3, r3
 8021022:	2b00      	cmp	r3, #0
 8021024:	d009      	beq.n	802103a <printi+0x62>
 8021026:	2e0a      	cmp	r6, #10
 8021028:	d107      	bne.n	802103a <printi+0x62>
 802102a:	683b      	ldr	r3, [r7, #0]
 802102c:	2b00      	cmp	r3, #0
 802102e:	da04      	bge.n	802103a <printi+0x62>
	{
		neg = 1;
 8021030:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8021034:	683b      	ldr	r3, [r7, #0]
 8021036:	425b      	negs	r3, r3
 8021038:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 802103a:	f107 040c 	add.w	r4, r7, #12
 802103e:	340b      	adds	r4, #11

	*s = '\0';
 8021040:	2300      	movs	r3, #0
 8021042:	7023      	strb	r3, [r4, #0]
	switch( base )
 8021044:	2e10      	cmp	r6, #16
 8021046:	d017      	beq.n	8021078 <printi+0xa0>
 8021048:	2e10      	cmp	r6, #16
 802104a:	d829      	bhi.n	80210a0 <printi+0xc8>
 802104c:	2e08      	cmp	r6, #8
 802104e:	d024      	beq.n	802109a <printi+0xc2>
 8021050:	2e0a      	cmp	r6, #10
 8021052:	d022      	beq.n	802109a <printi+0xc2>
 8021054:	e024      	b.n	80210a0 <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 8021056:	462b      	mov	r3, r5
 8021058:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 802105c:	f1b8 0f09 	cmp.w	r8, #9
 8021060:	dd03      	ble.n	802106a <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 8021062:	687b      	ldr	r3, [r7, #4]
 8021064:	7f5b      	ldrb	r3, [r3, #29]
 8021066:	3b3a      	subs	r3, #58	@ 0x3a
 8021068:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 802106a:	fa5f f388 	uxtb.w	r3, r8
 802106e:	3c01      	subs	r4, #1
 8021070:	3330      	adds	r3, #48	@ 0x30
 8021072:	b2db      	uxtb	r3, r3
 8021074:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 8021076:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 8021078:	2d00      	cmp	r5, #0
 802107a:	d1ec      	bne.n	8021056 <printi+0x7e>
		}
		break;
 802107c:	e010      	b.n	80210a0 <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 802107e:	fbb5 f3f6 	udiv	r3, r5, r6
 8021082:	fb06 f303 	mul.w	r3, r6, r3
 8021086:	1aeb      	subs	r3, r5, r3
 8021088:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 802108a:	fa5f f388 	uxtb.w	r3, r8
 802108e:	3c01      	subs	r4, #1
 8021090:	3330      	adds	r3, #48	@ 0x30
 8021092:	b2db      	uxtb	r3, r3
 8021094:	7023      	strb	r3, [r4, #0]
			u /= base;
 8021096:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 802109a:	2d00      	cmp	r5, #0
 802109c:	d1ef      	bne.n	802107e <printi+0xa6>
		}
		break;
 802109e:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 80210a0:	f1b9 0f00 	cmp.w	r9, #0
 80210a4:	d01b      	beq.n	80210de <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 80210a6:	687b      	ldr	r3, [r7, #4]
 80210a8:	695b      	ldr	r3, [r3, #20]
 80210aa:	2b00      	cmp	r3, #0
 80210ac:	d014      	beq.n	80210d8 <printi+0x100>
 80210ae:	687b      	ldr	r3, [r7, #4]
 80210b0:	7f1b      	ldrb	r3, [r3, #28]
 80210b2:	f003 0302 	and.w	r3, r3, #2
 80210b6:	2b00      	cmp	r3, #0
 80210b8:	d00e      	beq.n	80210d8 <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 80210ba:	212d      	movs	r1, #45	@ 0x2d
 80210bc:	6878      	ldr	r0, [r7, #4]
 80210be:	f7ff fe5c 	bl	8020d7a <strbuf_printchar>
 80210c2:	4603      	mov	r3, r0
 80210c4:	2b00      	cmp	r3, #0
 80210c6:	d101      	bne.n	80210cc <printi+0xf4>
			{
				return pdFALSE;
 80210c8:	2300      	movs	r3, #0
 80210ca:	e00d      	b.n	80210e8 <printi+0x110>
			}
			--apBuf->flags.width;
 80210cc:	687b      	ldr	r3, [r7, #4]
 80210ce:	695b      	ldr	r3, [r3, #20]
 80210d0:	1e5a      	subs	r2, r3, #1
 80210d2:	687b      	ldr	r3, [r7, #4]
 80210d4:	615a      	str	r2, [r3, #20]
 80210d6:	e002      	b.n	80210de <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 80210d8:	3c01      	subs	r4, #1
 80210da:	232d      	movs	r3, #45	@ 0x2d
 80210dc:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 80210de:	4621      	mov	r1, r4
 80210e0:	6878      	ldr	r0, [r7, #4]
 80210e2:	f7ff fed1 	bl	8020e88 <prints>
 80210e6:	4603      	mov	r3, r0
}
 80210e8:	4618      	mov	r0, r3
 80210ea:	371c      	adds	r7, #28
 80210ec:	46bd      	mov	sp, r7
 80210ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080210f4 <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 80210f4:	b590      	push	{r4, r7, lr}
 80210f6:	b089      	sub	sp, #36	@ 0x24
 80210f8:	af02      	add	r7, sp, #8
 80210fa:	6078      	str	r0, [r7, #4]
 80210fc:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 80210fe:	683b      	ldr	r3, [r7, #0]
 8021100:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 8021102:	683b      	ldr	r3, [r7, #0]
 8021104:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 8021106:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 8021108:	683b      	ldr	r3, [r7, #0]
 802110a:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 802110c:	b2db      	uxtb	r3, r3
 802110e:	683a      	ldr	r2, [r7, #0]
 8021110:	b2d2      	uxtb	r2, r2
 8021112:	f107 0008 	add.w	r0, r7, #8
 8021116:	9201      	str	r2, [sp, #4]
 8021118:	9300      	str	r3, [sp, #0]
 802111a:	4623      	mov	r3, r4
 802111c:	460a      	mov	r2, r1
 802111e:	4909      	ldr	r1, [pc, #36]	@ (8021144 <printIp+0x50>)
 8021120:	f000 fa81 	bl	8021626 <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8021124:	687a      	ldr	r2, [r7, #4]
 8021126:	7f93      	ldrb	r3, [r2, #30]
 8021128:	f043 0302 	orr.w	r3, r3, #2
 802112c:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 802112e:	f107 0308 	add.w	r3, r7, #8
 8021132:	4619      	mov	r1, r3
 8021134:	6878      	ldr	r0, [r7, #4]
 8021136:	f7ff fea7 	bl	8020e88 <prints>

	return pdTRUE;
 802113a:	2301      	movs	r3, #1
}
 802113c:	4618      	mov	r0, r3
 802113e:	371c      	adds	r7, #28
 8021140:	46bd      	mov	sp, r7
 8021142:	bd90      	pop	{r4, r7, pc}
 8021144:	08025b7c 	.word	0x08025b7c

08021148 <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 8021148:	b480      	push	{r7}
 802114a:	b083      	sub	sp, #12
 802114c:	af00      	add	r7, sp, #0
 802114e:	4603      	mov	r3, r0
 8021150:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 8021152:	4a0b      	ldr	r2, [pc, #44]	@ (8021180 <usNetToHost+0x38>)
 8021154:	4b0b      	ldr	r3, [pc, #44]	@ (8021184 <usNetToHost+0x3c>)
 8021156:	429a      	cmp	r2, r3
 8021158:	d101      	bne.n	802115e <usNetToHost+0x16>
	{
		return usValue;
 802115a:	88fb      	ldrh	r3, [r7, #6]
 802115c:	e009      	b.n	8021172 <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 802115e:	88fb      	ldrh	r3, [r7, #6]
 8021160:	021b      	lsls	r3, r3, #8
 8021162:	b21a      	sxth	r2, r3
 8021164:	88fb      	ldrh	r3, [r7, #6]
 8021166:	0a1b      	lsrs	r3, r3, #8
 8021168:	b29b      	uxth	r3, r3
 802116a:	b21b      	sxth	r3, r3
 802116c:	4313      	orrs	r3, r2
 802116e:	b21b      	sxth	r3, r3
 8021170:	b29b      	uxth	r3, r3
	}
}
 8021172:	4618      	mov	r0, r3
 8021174:	370c      	adds	r7, #12
 8021176:	46bd      	mov	sp, r7
 8021178:	f85d 7b04 	ldr.w	r7, [sp], #4
 802117c:	4770      	bx	lr
 802117e:	bf00      	nop
 8021180:	03020100 	.word	0x03020100
 8021184:	00010203 	.word	0x00010203

08021188 <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 8021188:	b580      	push	{r7, lr}
 802118a:	b088      	sub	sp, #32
 802118c:	af00      	add	r7, sp, #0
 802118e:	6078      	str	r0, [r7, #4]
 8021190:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 8021192:	f04f 33ff 	mov.w	r3, #4294967295
 8021196:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 8021198:	2300      	movs	r3, #0
 802119a:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 802119c:	2300      	movs	r3, #0
 802119e:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 80211a0:	2300      	movs	r3, #0
 80211a2:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 80211a4:	2300      	movs	r3, #0
 80211a6:	61fb      	str	r3, [r7, #28]
 80211a8:	e026      	b.n	80211f8 <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 80211aa:	69fb      	ldr	r3, [r7, #28]
 80211ac:	005b      	lsls	r3, r3, #1
 80211ae:	683a      	ldr	r2, [r7, #0]
 80211b0:	4413      	add	r3, r2
 80211b2:	881b      	ldrh	r3, [r3, #0]
 80211b4:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 80211b6:	897b      	ldrh	r3, [r7, #10]
 80211b8:	2b00      	cmp	r3, #0
 80211ba:	d107      	bne.n	80211cc <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 80211bc:	68fb      	ldr	r3, [r7, #12]
 80211be:	2b00      	cmp	r3, #0
 80211c0:	d101      	bne.n	80211c6 <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 80211c2:	69fb      	ldr	r3, [r7, #28]
 80211c4:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 80211c6:	68fb      	ldr	r3, [r7, #12]
 80211c8:	3301      	adds	r3, #1
 80211ca:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 80211cc:	897b      	ldrh	r3, [r7, #10]
 80211ce:	2b00      	cmp	r3, #0
 80211d0:	d102      	bne.n	80211d8 <printIPv6+0x50>
 80211d2:	69fb      	ldr	r3, [r7, #28]
 80211d4:	2b07      	cmp	r3, #7
 80211d6:	d10c      	bne.n	80211f2 <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 80211d8:	68fb      	ldr	r3, [r7, #12]
 80211da:	2b01      	cmp	r3, #1
 80211dc:	dd07      	ble.n	80211ee <printIPv6+0x66>
 80211de:	697a      	ldr	r2, [r7, #20]
 80211e0:	68fb      	ldr	r3, [r7, #12]
 80211e2:	429a      	cmp	r2, r3
 80211e4:	da03      	bge.n	80211ee <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 80211e6:	68fb      	ldr	r3, [r7, #12]
 80211e8:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 80211ea:	693b      	ldr	r3, [r7, #16]
 80211ec:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 80211ee:	2300      	movs	r3, #0
 80211f0:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 80211f2:	69fb      	ldr	r3, [r7, #28]
 80211f4:	3301      	adds	r3, #1
 80211f6:	61fb      	str	r3, [r7, #28]
 80211f8:	69fb      	ldr	r3, [r7, #28]
 80211fa:	2b07      	cmp	r3, #7
 80211fc:	ddd5      	ble.n	80211aa <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 80211fe:	687b      	ldr	r3, [r7, #4]
 8021200:	2210      	movs	r2, #16
 8021202:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 8021204:	687b      	ldr	r3, [r7, #4]
 8021206:	2261      	movs	r2, #97	@ 0x61
 8021208:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 802120a:	2300      	movs	r3, #0
 802120c:	61fb      	str	r3, [r7, #28]
 802120e:	e02b      	b.n	8021268 <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 8021210:	69fa      	ldr	r2, [r7, #28]
 8021212:	69bb      	ldr	r3, [r7, #24]
 8021214:	429a      	cmp	r2, r3
 8021216:	d110      	bne.n	802123a <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 8021218:	697b      	ldr	r3, [r7, #20]
 802121a:	3b01      	subs	r3, #1
 802121c:	69fa      	ldr	r2, [r7, #28]
 802121e:	4413      	add	r3, r2
 8021220:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 8021222:	213a      	movs	r1, #58	@ 0x3a
 8021224:	6878      	ldr	r0, [r7, #4]
 8021226:	f7ff fda8 	bl	8020d7a <strbuf_printchar>
			if( iIndex == 7 )
 802122a:	69fb      	ldr	r3, [r7, #28]
 802122c:	2b07      	cmp	r3, #7
 802122e:	d118      	bne.n	8021262 <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 8021230:	213a      	movs	r1, #58	@ 0x3a
 8021232:	6878      	ldr	r0, [r7, #4]
 8021234:	f7ff fda1 	bl	8020d7a <strbuf_printchar>
 8021238:	e013      	b.n	8021262 <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 802123a:	69fb      	ldr	r3, [r7, #28]
 802123c:	2b00      	cmp	r3, #0
 802123e:	dd03      	ble.n	8021248 <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 8021240:	213a      	movs	r1, #58	@ 0x3a
 8021242:	6878      	ldr	r0, [r7, #4]
 8021244:	f7ff fd99 	bl	8020d7a <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 8021248:	69fb      	ldr	r3, [r7, #28]
 802124a:	005b      	lsls	r3, r3, #1
 802124c:	683a      	ldr	r2, [r7, #0]
 802124e:	4413      	add	r3, r2
 8021250:	881b      	ldrh	r3, [r3, #0]
 8021252:	4618      	mov	r0, r3
 8021254:	f7ff ff78 	bl	8021148 <usNetToHost>
 8021258:	4603      	mov	r3, r0
 802125a:	4619      	mov	r1, r3
 802125c:	6878      	ldr	r0, [r7, #4]
 802125e:	f7ff febb 	bl	8020fd8 <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 8021262:	69fb      	ldr	r3, [r7, #28]
 8021264:	3301      	adds	r3, #1
 8021266:	61fb      	str	r3, [r7, #28]
 8021268:	69fb      	ldr	r3, [r7, #28]
 802126a:	2b07      	cmp	r3, #7
 802126c:	ddd0      	ble.n	8021210 <printIPv6+0x88>
		}
	}

	return pdTRUE;
 802126e:	2301      	movs	r3, #1
}
 8021270:	4618      	mov	r0, r3
 8021272:	3720      	adds	r7, #32
 8021274:	46bd      	mov	sp, r7
 8021276:	bd80      	pop	{r7, pc}

08021278 <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 8021278:	b590      	push	{r4, r7, lr}
 802127a:	b087      	sub	sp, #28
 802127c:	af00      	add	r7, sp, #0
 802127e:	60f8      	str	r0, [r7, #12]
 8021280:	60b9      	str	r1, [r7, #8]
 8021282:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 8021284:	68bb      	ldr	r3, [r7, #8]
 8021286:	1c5a      	adds	r2, r3, #1
 8021288:	60ba      	str	r2, [r7, #8]
 802128a:	781b      	ldrb	r3, [r3, #0]
 802128c:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 802128e:	697b      	ldr	r3, [r7, #20]
 8021290:	2b25      	cmp	r3, #37	@ 0x25
 8021292:	d00f      	beq.n	80212b4 <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 8021294:	6979      	ldr	r1, [r7, #20]
 8021296:	68f8      	ldr	r0, [r7, #12]
 8021298:	f7ff fdad 	bl	8020df6 <strbuf_printchar_inline>
 802129c:	4603      	mov	r3, r0
 802129e:	2b00      	cmp	r3, #0
 80212a0:	f000 817e 	beq.w	80215a0 <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 80212a4:	68bb      	ldr	r3, [r7, #8]
 80212a6:	1c5a      	adds	r2, r3, #1
 80212a8:	60ba      	str	r2, [r7, #8]
 80212aa:	781b      	ldrb	r3, [r3, #0]
 80212ac:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 80212ae:	697b      	ldr	r3, [r7, #20]
 80212b0:	2b25      	cmp	r3, #37	@ 0x25
 80212b2:	d1ef      	bne.n	8021294 <tiny_print+0x1c>
		}
		ch = *( format++ );
 80212b4:	68bb      	ldr	r3, [r7, #8]
 80212b6:	1c5a      	adds	r2, r3, #1
 80212b8:	60ba      	str	r2, [r7, #8]
 80212ba:	781b      	ldrb	r3, [r3, #0]
 80212bc:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 80212be:	697b      	ldr	r3, [r7, #20]
 80212c0:	2b00      	cmp	r3, #0
 80212c2:	f000 8165 	beq.w	8021590 <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 80212c6:	697b      	ldr	r3, [r7, #20]
 80212c8:	2b25      	cmp	r3, #37	@ 0x25
 80212ca:	d108      	bne.n	80212de <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 80212cc:	6979      	ldr	r1, [r7, #20]
 80212ce:	68f8      	ldr	r0, [r7, #12]
 80212d0:	f7ff fd53 	bl	8020d7a <strbuf_printchar>
 80212d4:	4603      	mov	r3, r0
 80212d6:	2b00      	cmp	r3, #0
 80212d8:	f040 814e 	bne.w	8021578 <tiny_print+0x300>
			{
				return;
 80212dc:	e161      	b.n	80215a2 <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 80212de:	68fb      	ldr	r3, [r7, #12]
 80212e0:	3310      	adds	r3, #16
 80212e2:	2210      	movs	r2, #16
 80212e4:	2100      	movs	r1, #0
 80212e6:	4618      	mov	r0, r3
 80212e8:	f7ff fc79 	bl	8020bde <memset>

		if( ch == '-' )
 80212ec:	697b      	ldr	r3, [r7, #20]
 80212ee:	2b2d      	cmp	r3, #45	@ 0x2d
 80212f0:	d114      	bne.n	802131c <tiny_print+0xa4>
		{
			ch = *( format++ );
 80212f2:	68bb      	ldr	r3, [r7, #8]
 80212f4:	1c5a      	adds	r2, r3, #1
 80212f6:	60ba      	str	r2, [r7, #8]
 80212f8:	781b      	ldrb	r3, [r3, #0]
 80212fa:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 80212fc:	68fb      	ldr	r3, [r7, #12]
 80212fe:	2201      	movs	r2, #1
 8021300:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 8021302:	e00b      	b.n	802131c <tiny_print+0xa4>
		{
			ch = *( format++ );
 8021304:	68bb      	ldr	r3, [r7, #8]
 8021306:	1c5a      	adds	r2, r3, #1
 8021308:	60ba      	str	r2, [r7, #8]
 802130a:	781b      	ldrb	r3, [r3, #0]
 802130c:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 802130e:	68fb      	ldr	r3, [r7, #12]
 8021310:	7f1b      	ldrb	r3, [r3, #28]
 8021312:	f043 0302 	orr.w	r3, r3, #2
 8021316:	b2da      	uxtb	r2, r3
 8021318:	68fb      	ldr	r3, [r7, #12]
 802131a:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 802131c:	697b      	ldr	r3, [r7, #20]
 802131e:	2b30      	cmp	r3, #48	@ 0x30
 8021320:	d0f0      	beq.n	8021304 <tiny_print+0x8c>
		}
		if( ch == '*' )
 8021322:	697b      	ldr	r3, [r7, #20]
 8021324:	2b2a      	cmp	r3, #42	@ 0x2a
 8021326:	d120      	bne.n	802136a <tiny_print+0xf2>
		{
			ch = *( format++ );
 8021328:	68bb      	ldr	r3, [r7, #8]
 802132a:	1c5a      	adds	r2, r3, #1
 802132c:	60ba      	str	r2, [r7, #8]
 802132e:	781b      	ldrb	r3, [r3, #0]
 8021330:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 8021332:	687b      	ldr	r3, [r7, #4]
 8021334:	1d1a      	adds	r2, r3, #4
 8021336:	607a      	str	r2, [r7, #4]
 8021338:	681a      	ldr	r2, [r3, #0]
 802133a:	68fb      	ldr	r3, [r7, #12]
 802133c:	615a      	str	r2, [r3, #20]
 802133e:	e01a      	b.n	8021376 <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 8021340:	68fb      	ldr	r3, [r7, #12]
 8021342:	695a      	ldr	r2, [r3, #20]
 8021344:	4613      	mov	r3, r2
 8021346:	009b      	lsls	r3, r3, #2
 8021348:	4413      	add	r3, r2
 802134a:	005b      	lsls	r3, r3, #1
 802134c:	461a      	mov	r2, r3
 802134e:	68fb      	ldr	r3, [r7, #12]
 8021350:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 8021352:	68fb      	ldr	r3, [r7, #12]
 8021354:	695a      	ldr	r2, [r3, #20]
 8021356:	697b      	ldr	r3, [r7, #20]
 8021358:	3b30      	subs	r3, #48	@ 0x30
 802135a:	441a      	add	r2, r3
 802135c:	68fb      	ldr	r3, [r7, #12]
 802135e:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 8021360:	68bb      	ldr	r3, [r7, #8]
 8021362:	1c5a      	adds	r2, r3, #1
 8021364:	60ba      	str	r2, [r7, #8]
 8021366:	781b      	ldrb	r3, [r3, #0]
 8021368:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 802136a:	697b      	ldr	r3, [r7, #20]
 802136c:	2b2f      	cmp	r3, #47	@ 0x2f
 802136e:	dd02      	ble.n	8021376 <tiny_print+0xfe>
 8021370:	697b      	ldr	r3, [r7, #20]
 8021372:	2b39      	cmp	r3, #57	@ 0x39
 8021374:	dde4      	ble.n	8021340 <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 8021376:	697b      	ldr	r3, [r7, #20]
 8021378:	2b2e      	cmp	r3, #46	@ 0x2e
 802137a:	d12e      	bne.n	80213da <tiny_print+0x162>
		{
			ch = *( format++ );
 802137c:	68bb      	ldr	r3, [r7, #8]
 802137e:	1c5a      	adds	r2, r3, #1
 8021380:	60ba      	str	r2, [r7, #8]
 8021382:	781b      	ldrb	r3, [r3, #0]
 8021384:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 8021386:	697b      	ldr	r3, [r7, #20]
 8021388:	2b2a      	cmp	r3, #42	@ 0x2a
 802138a:	d120      	bne.n	80213ce <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 802138c:	687b      	ldr	r3, [r7, #4]
 802138e:	1d1a      	adds	r2, r3, #4
 8021390:	607a      	str	r2, [r7, #4]
 8021392:	681a      	ldr	r2, [r3, #0]
 8021394:	68fb      	ldr	r3, [r7, #12]
 8021396:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 8021398:	68bb      	ldr	r3, [r7, #8]
 802139a:	1c5a      	adds	r2, r3, #1
 802139c:	60ba      	str	r2, [r7, #8]
 802139e:	781b      	ldrb	r3, [r3, #0]
 80213a0:	617b      	str	r3, [r7, #20]
 80213a2:	e01a      	b.n	80213da <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 80213a4:	68fb      	ldr	r3, [r7, #12]
 80213a6:	699a      	ldr	r2, [r3, #24]
 80213a8:	4613      	mov	r3, r2
 80213aa:	009b      	lsls	r3, r3, #2
 80213ac:	4413      	add	r3, r2
 80213ae:	005b      	lsls	r3, r3, #1
 80213b0:	461a      	mov	r2, r3
 80213b2:	68fb      	ldr	r3, [r7, #12]
 80213b4:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 80213b6:	68fb      	ldr	r3, [r7, #12]
 80213b8:	699a      	ldr	r2, [r3, #24]
 80213ba:	697b      	ldr	r3, [r7, #20]
 80213bc:	3b30      	subs	r3, #48	@ 0x30
 80213be:	441a      	add	r2, r3
 80213c0:	68fb      	ldr	r3, [r7, #12]
 80213c2:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 80213c4:	68bb      	ldr	r3, [r7, #8]
 80213c6:	1c5a      	adds	r2, r3, #1
 80213c8:	60ba      	str	r2, [r7, #8]
 80213ca:	781b      	ldrb	r3, [r3, #0]
 80213cc:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 80213ce:	697b      	ldr	r3, [r7, #20]
 80213d0:	2b2f      	cmp	r3, #47	@ 0x2f
 80213d2:	dd02      	ble.n	80213da <tiny_print+0x162>
 80213d4:	697b      	ldr	r3, [r7, #20]
 80213d6:	2b39      	cmp	r3, #57	@ 0x39
 80213d8:	dde4      	ble.n	80213a4 <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 80213da:	68fb      	ldr	r3, [r7, #12]
 80213dc:	699b      	ldr	r3, [r3, #24]
 80213de:	2b00      	cmp	r3, #0
 80213e0:	d104      	bne.n	80213ec <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 80213e2:	68fb      	ldr	r3, [r7, #12]
 80213e4:	699b      	ldr	r3, [r3, #24]
 80213e6:	1e5a      	subs	r2, r3, #1
 80213e8:	68fb      	ldr	r3, [r7, #12]
 80213ea:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 80213ec:	697b      	ldr	r3, [r7, #20]
 80213ee:	2b70      	cmp	r3, #112	@ 0x70
 80213f0:	d118      	bne.n	8021424 <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 80213f2:	68bb      	ldr	r3, [r7, #8]
 80213f4:	781b      	ldrb	r3, [r3, #0]
 80213f6:	2b69      	cmp	r3, #105	@ 0x69
 80213f8:	d114      	bne.n	8021424 <tiny_print+0x1ac>
 80213fa:	68bb      	ldr	r3, [r7, #8]
 80213fc:	3301      	adds	r3, #1
 80213fe:	781b      	ldrb	r3, [r3, #0]
 8021400:	2b70      	cmp	r3, #112	@ 0x70
 8021402:	d10f      	bne.n	8021424 <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 8021404:	68bb      	ldr	r3, [r7, #8]
 8021406:	3302      	adds	r3, #2
 8021408:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 802140a:	687b      	ldr	r3, [r7, #4]
 802140c:	1d1a      	adds	r2, r3, #4
 802140e:	607a      	str	r2, [r7, #4]
 8021410:	681b      	ldr	r3, [r3, #0]
 8021412:	4619      	mov	r1, r3
 8021414:	68f8      	ldr	r0, [r7, #12]
 8021416:	f7ff feb7 	bl	8021188 <printIPv6>
 802141a:	4603      	mov	r3, r0
 802141c:	2b00      	cmp	r3, #0
 802141e:	f040 80ad 	bne.w	802157c <tiny_print+0x304>
				{
					break;
 8021422:	e0b8      	b.n	8021596 <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 8021424:	697b      	ldr	r3, [r7, #20]
 8021426:	2b73      	cmp	r3, #115	@ 0x73
 8021428:	d112      	bne.n	8021450 <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 802142a:	687b      	ldr	r3, [r7, #4]
 802142c:	1d1a      	adds	r2, r3, #4
 802142e:	607a      	str	r2, [r7, #4]
 8021430:	681b      	ldr	r3, [r3, #0]
 8021432:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 8021434:	2c00      	cmp	r4, #0
 8021436:	d001      	beq.n	802143c <tiny_print+0x1c4>
 8021438:	4623      	mov	r3, r4
 802143a:	e000      	b.n	802143e <tiny_print+0x1c6>
 802143c:	4b5a      	ldr	r3, [pc, #360]	@ (80215a8 <tiny_print+0x330>)
 802143e:	4619      	mov	r1, r3
 8021440:	68f8      	ldr	r0, [r7, #12]
 8021442:	f7ff fd21 	bl	8020e88 <prints>
 8021446:	4603      	mov	r3, r0
 8021448:	2b00      	cmp	r3, #0
 802144a:	f040 8099 	bne.w	8021580 <tiny_print+0x308>
			{
				break;
 802144e:	e0a2      	b.n	8021596 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 8021450:	697b      	ldr	r3, [r7, #20]
 8021452:	2b63      	cmp	r3, #99	@ 0x63
 8021454:	d10f      	bne.n	8021476 <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 8021456:	687b      	ldr	r3, [r7, #4]
 8021458:	1d1a      	adds	r2, r3, #4
 802145a:	607a      	str	r2, [r7, #4]
 802145c:	681b      	ldr	r3, [r3, #0]
 802145e:	b2db      	uxtb	r3, r3
 8021460:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 8021462:	7c3b      	ldrb	r3, [r7, #16]
 8021464:	4619      	mov	r1, r3
 8021466:	68f8      	ldr	r0, [r7, #12]
 8021468:	f7ff fc87 	bl	8020d7a <strbuf_printchar>
 802146c:	4603      	mov	r3, r0
 802146e:	2b00      	cmp	r3, #0
 8021470:	f040 8088 	bne.w	8021584 <tiny_print+0x30c>
			{
				return;
 8021474:	e095      	b.n	80215a2 <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 8021476:	697b      	ldr	r3, [r7, #20]
 8021478:	2b6c      	cmp	r3, #108	@ 0x6c
 802147a:	d109      	bne.n	8021490 <tiny_print+0x218>
		{
			ch = *( format++ );
 802147c:	68bb      	ldr	r3, [r7, #8]
 802147e:	1c5a      	adds	r2, r3, #1
 8021480:	60ba      	str	r2, [r7, #8]
 8021482:	781b      	ldrb	r3, [r3, #0]
 8021484:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 8021486:	68fa      	ldr	r2, [r7, #12]
 8021488:	7f93      	ldrb	r3, [r2, #30]
 802148a:	f043 0304 	orr.w	r3, r3, #4
 802148e:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 8021490:	697b      	ldr	r3, [r7, #20]
 8021492:	2b4c      	cmp	r3, #76	@ 0x4c
 8021494:	d109      	bne.n	80214aa <tiny_print+0x232>
		{
			ch = *( format++ );
 8021496:	68bb      	ldr	r3, [r7, #8]
 8021498:	1c5a      	adds	r2, r3, #1
 802149a:	60ba      	str	r2, [r7, #8]
 802149c:	781b      	ldrb	r3, [r3, #0]
 802149e:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 80214a0:	68fa      	ldr	r2, [r7, #12]
 80214a2:	7f93      	ldrb	r3, [r2, #30]
 80214a4:	f043 0308 	orr.w	r3, r3, #8
 80214a8:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 80214aa:	68fb      	ldr	r3, [r7, #12]
 80214ac:	220a      	movs	r2, #10
 80214ae:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 80214b0:	68fb      	ldr	r3, [r7, #12]
 80214b2:	2261      	movs	r2, #97	@ 0x61
 80214b4:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 80214b6:	697b      	ldr	r3, [r7, #20]
 80214b8:	2b64      	cmp	r3, #100	@ 0x64
 80214ba:	d002      	beq.n	80214c2 <tiny_print+0x24a>
 80214bc:	697b      	ldr	r3, [r7, #20]
 80214be:	2b75      	cmp	r3, #117	@ 0x75
 80214c0:	d116      	bne.n	80214f0 <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 80214c2:	697b      	ldr	r3, [r7, #20]
 80214c4:	2b64      	cmp	r3, #100	@ 0x64
 80214c6:	bf0c      	ite	eq
 80214c8:	2301      	moveq	r3, #1
 80214ca:	2300      	movne	r3, #0
 80214cc:	b2d9      	uxtb	r1, r3
 80214ce:	68fa      	ldr	r2, [r7, #12]
 80214d0:	7f93      	ldrb	r3, [r2, #30]
 80214d2:	f361 0300 	bfi	r3, r1, #0, #1
 80214d6:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 80214d8:	687b      	ldr	r3, [r7, #4]
 80214da:	1d1a      	adds	r2, r3, #4
 80214dc:	607a      	str	r2, [r7, #4]
 80214de:	681b      	ldr	r3, [r3, #0]
 80214e0:	4619      	mov	r1, r3
 80214e2:	68f8      	ldr	r0, [r7, #12]
 80214e4:	f7ff fd78 	bl	8020fd8 <printi>
 80214e8:	4603      	mov	r3, r0
 80214ea:	2b00      	cmp	r3, #0
 80214ec:	d14c      	bne.n	8021588 <tiny_print+0x310>
			{
				break;
 80214ee:	e052      	b.n	8021596 <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 80214f0:	68fb      	ldr	r3, [r7, #12]
 80214f2:	2210      	movs	r2, #16
 80214f4:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 80214f6:	697b      	ldr	r3, [r7, #20]
 80214f8:	2b78      	cmp	r3, #120	@ 0x78
 80214fa:	d117      	bne.n	802152c <tiny_print+0x2b4>
 80214fc:	68bb      	ldr	r3, [r7, #8]
 80214fe:	781b      	ldrb	r3, [r3, #0]
 8021500:	2b69      	cmp	r3, #105	@ 0x69
 8021502:	d113      	bne.n	802152c <tiny_print+0x2b4>
 8021504:	68bb      	ldr	r3, [r7, #8]
 8021506:	3301      	adds	r3, #1
 8021508:	781b      	ldrb	r3, [r3, #0]
 802150a:	2b70      	cmp	r3, #112	@ 0x70
 802150c:	d10e      	bne.n	802152c <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 802150e:	68bb      	ldr	r3, [r7, #8]
 8021510:	3302      	adds	r3, #2
 8021512:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	1d1a      	adds	r2, r3, #4
 8021518:	607a      	str	r2, [r7, #4]
 802151a:	681b      	ldr	r3, [r3, #0]
 802151c:	4619      	mov	r1, r3
 802151e:	68f8      	ldr	r0, [r7, #12]
 8021520:	f7ff fde8 	bl	80210f4 <printIp>
 8021524:	4603      	mov	r3, r0
 8021526:	2b00      	cmp	r3, #0
 8021528:	d130      	bne.n	802158c <tiny_print+0x314>
			{
				break;
 802152a:	e034      	b.n	8021596 <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 802152c:	697b      	ldr	r3, [r7, #20]
 802152e:	2b78      	cmp	r3, #120	@ 0x78
 8021530:	d009      	beq.n	8021546 <tiny_print+0x2ce>
 8021532:	697b      	ldr	r3, [r7, #20]
 8021534:	2b58      	cmp	r3, #88	@ 0x58
 8021536:	d006      	beq.n	8021546 <tiny_print+0x2ce>
 8021538:	697b      	ldr	r3, [r7, #20]
 802153a:	2b70      	cmp	r3, #112	@ 0x70
 802153c:	d003      	beq.n	8021546 <tiny_print+0x2ce>
 802153e:	697b      	ldr	r3, [r7, #20]
 8021540:	2b6f      	cmp	r3, #111	@ 0x6f
 8021542:	f47f ae9f 	bne.w	8021284 <tiny_print+0xc>
		{
			if( ch == 'X' )
 8021546:	697b      	ldr	r3, [r7, #20]
 8021548:	2b58      	cmp	r3, #88	@ 0x58
 802154a:	d103      	bne.n	8021554 <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 802154c:	68fb      	ldr	r3, [r7, #12]
 802154e:	2241      	movs	r2, #65	@ 0x41
 8021550:	775a      	strb	r2, [r3, #29]
 8021552:	e005      	b.n	8021560 <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 8021554:	697b      	ldr	r3, [r7, #20]
 8021556:	2b6f      	cmp	r3, #111	@ 0x6f
 8021558:	d102      	bne.n	8021560 <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 802155a:	68fb      	ldr	r3, [r7, #12]
 802155c:	2208      	movs	r2, #8
 802155e:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8021560:	687b      	ldr	r3, [r7, #4]
 8021562:	1d1a      	adds	r2, r3, #4
 8021564:	607a      	str	r2, [r7, #4]
 8021566:	681b      	ldr	r3, [r3, #0]
 8021568:	4619      	mov	r1, r3
 802156a:	68f8      	ldr	r0, [r7, #12]
 802156c:	f7ff fd34 	bl	8020fd8 <printi>
 8021570:	4603      	mov	r3, r0
 8021572:	2b00      	cmp	r3, #0
 8021574:	d00e      	beq.n	8021594 <tiny_print+0x31c>
			{
				break;
			}
			continue;
 8021576:	e00a      	b.n	802158e <tiny_print+0x316>
			continue;
 8021578:	bf00      	nop
 802157a:	e683      	b.n	8021284 <tiny_print+0xc>
				continue;
 802157c:	bf00      	nop
 802157e:	e681      	b.n	8021284 <tiny_print+0xc>
			continue;
 8021580:	bf00      	nop
 8021582:	e67f      	b.n	8021284 <tiny_print+0xc>
			continue;
 8021584:	bf00      	nop
 8021586:	e67d      	b.n	8021284 <tiny_print+0xc>
			continue;
 8021588:	bf00      	nop
 802158a:	e67b      	b.n	8021284 <tiny_print+0xc>
			continue;
 802158c:	bf00      	nop
	{
 802158e:	e679      	b.n	8021284 <tiny_print+0xc>
			break;
 8021590:	bf00      	nop
 8021592:	e000      	b.n	8021596 <tiny_print+0x31e>
				break;
 8021594:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 8021596:	2100      	movs	r1, #0
 8021598:	68f8      	ldr	r0, [r7, #12]
 802159a:	f7ff fbee 	bl	8020d7a <strbuf_printchar>
 802159e:	e000      	b.n	80215a2 <tiny_print+0x32a>
					return;
 80215a0:	bf00      	nop
}
 80215a2:	371c      	adds	r7, #28
 80215a4:	46bd      	mov	sp, r7
 80215a6:	bd90      	pop	{r4, r7, pc}
 80215a8:	08025b88 	.word	0x08025b88

080215ac <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 80215ac:	b580      	push	{r7, lr}
 80215ae:	b08c      	sub	sp, #48	@ 0x30
 80215b0:	af00      	add	r7, sp, #0
 80215b2:	60f8      	str	r0, [r7, #12]
 80215b4:	60b9      	str	r1, [r7, #8]
 80215b6:	607a      	str	r2, [r7, #4]
 80215b8:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 80215ba:	68fa      	ldr	r2, [r7, #12]
 80215bc:	68bb      	ldr	r3, [r7, #8]
 80215be:	441a      	add	r2, r3
 80215c0:	f107 0310 	add.w	r3, r7, #16
 80215c4:	68f9      	ldr	r1, [r7, #12]
 80215c6:	4618      	mov	r0, r3
 80215c8:	f7ff fbb9 	bl	8020d3e <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 80215cc:	f107 0310 	add.w	r3, r7, #16
 80215d0:	683a      	ldr	r2, [r7, #0]
 80215d2:	6879      	ldr	r1, [r7, #4]
 80215d4:	4618      	mov	r0, r3
 80215d6:	f7ff fe4f 	bl	8021278 <tiny_print>

	return strBuf.curLen;
 80215da:	69fb      	ldr	r3, [r7, #28]
}
 80215dc:	4618      	mov	r0, r3
 80215de:	3730      	adds	r7, #48	@ 0x30
 80215e0:	46bd      	mov	sp, r7
 80215e2:	bd80      	pop	{r7, pc}

080215e4 <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 80215e4:	b40c      	push	{r2, r3}
 80215e6:	b580      	push	{r7, lr}
 80215e8:	b08c      	sub	sp, #48	@ 0x30
 80215ea:	af00      	add	r7, sp, #0
 80215ec:	6078      	str	r0, [r7, #4]
 80215ee:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 80215f0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80215f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 80215f6:	687a      	ldr	r2, [r7, #4]
 80215f8:	683b      	ldr	r3, [r7, #0]
 80215fa:	441a      	add	r2, r3
 80215fc:	f107 030c 	add.w	r3, r7, #12
 8021600:	6879      	ldr	r1, [r7, #4]
 8021602:	4618      	mov	r0, r3
 8021604:	f7ff fb9b 	bl	8020d3e <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8021608:	f107 030c 	add.w	r3, r7, #12
 802160c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802160e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8021610:	4618      	mov	r0, r3
 8021612:	f7ff fe31 	bl	8021278 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8021616:	69bb      	ldr	r3, [r7, #24]
}
 8021618:	4618      	mov	r0, r3
 802161a:	3730      	adds	r7, #48	@ 0x30
 802161c:	46bd      	mov	sp, r7
 802161e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8021622:	b002      	add	sp, #8
 8021624:	4770      	bx	lr

08021626 <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 8021626:	b40e      	push	{r1, r2, r3}
 8021628:	b580      	push	{r7, lr}
 802162a:	b08d      	sub	sp, #52	@ 0x34
 802162c:	af00      	add	r7, sp, #0
 802162e:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 8021630:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8021634:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 8021636:	687b      	ldr	r3, [r7, #4]
 8021638:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 802163c:	f107 030c 	add.w	r3, r7, #12
 8021640:	6879      	ldr	r1, [r7, #4]
 8021642:	4618      	mov	r0, r3
 8021644:	f7ff fb7b 	bl	8020d3e <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8021648:	f107 030c 	add.w	r3, r7, #12
 802164c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802164e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021650:	4618      	mov	r0, r3
 8021652:	f7ff fe11 	bl	8021278 <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8021656:	69bb      	ldr	r3, [r7, #24]
}
 8021658:	4618      	mov	r0, r3
 802165a:	3734      	adds	r7, #52	@ 0x34
 802165c:	46bd      	mov	sp, r7
 802165e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8021662:	b003      	add	sp, #12
 8021664:	4770      	bx	lr
	...

08021668 <rand>:
 8021668:	4b16      	ldr	r3, [pc, #88]	@ (80216c4 <rand+0x5c>)
 802166a:	b510      	push	{r4, lr}
 802166c:	681c      	ldr	r4, [r3, #0]
 802166e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021670:	b9b3      	cbnz	r3, 80216a0 <rand+0x38>
 8021672:	2018      	movs	r0, #24
 8021674:	f000 fa70 	bl	8021b58 <malloc>
 8021678:	4602      	mov	r2, r0
 802167a:	6320      	str	r0, [r4, #48]	@ 0x30
 802167c:	b920      	cbnz	r0, 8021688 <rand+0x20>
 802167e:	4b12      	ldr	r3, [pc, #72]	@ (80216c8 <rand+0x60>)
 8021680:	4812      	ldr	r0, [pc, #72]	@ (80216cc <rand+0x64>)
 8021682:	2152      	movs	r1, #82	@ 0x52
 8021684:	f000 fa00 	bl	8021a88 <__assert_func>
 8021688:	4911      	ldr	r1, [pc, #68]	@ (80216d0 <rand+0x68>)
 802168a:	4b12      	ldr	r3, [pc, #72]	@ (80216d4 <rand+0x6c>)
 802168c:	e9c0 1300 	strd	r1, r3, [r0]
 8021690:	4b11      	ldr	r3, [pc, #68]	@ (80216d8 <rand+0x70>)
 8021692:	6083      	str	r3, [r0, #8]
 8021694:	230b      	movs	r3, #11
 8021696:	8183      	strh	r3, [r0, #12]
 8021698:	2100      	movs	r1, #0
 802169a:	2001      	movs	r0, #1
 802169c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80216a0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80216a2:	480e      	ldr	r0, [pc, #56]	@ (80216dc <rand+0x74>)
 80216a4:	690b      	ldr	r3, [r1, #16]
 80216a6:	694c      	ldr	r4, [r1, #20]
 80216a8:	4a0d      	ldr	r2, [pc, #52]	@ (80216e0 <rand+0x78>)
 80216aa:	4358      	muls	r0, r3
 80216ac:	fb02 0004 	mla	r0, r2, r4, r0
 80216b0:	fba3 3202 	umull	r3, r2, r3, r2
 80216b4:	3301      	adds	r3, #1
 80216b6:	eb40 0002 	adc.w	r0, r0, r2
 80216ba:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80216be:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80216c2:	bd10      	pop	{r4, pc}
 80216c4:	20000038 	.word	0x20000038
 80216c8:	08025d48 	.word	0x08025d48
 80216cc:	08025d5f 	.word	0x08025d5f
 80216d0:	abcd330e 	.word	0xabcd330e
 80216d4:	e66d1234 	.word	0xe66d1234
 80216d8:	0005deec 	.word	0x0005deec
 80216dc:	5851f42d 	.word	0x5851f42d
 80216e0:	4c957f2d 	.word	0x4c957f2d

080216e4 <std>:
 80216e4:	2300      	movs	r3, #0
 80216e6:	b510      	push	{r4, lr}
 80216e8:	4604      	mov	r4, r0
 80216ea:	e9c0 3300 	strd	r3, r3, [r0]
 80216ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80216f2:	6083      	str	r3, [r0, #8]
 80216f4:	8181      	strh	r1, [r0, #12]
 80216f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80216f8:	81c2      	strh	r2, [r0, #14]
 80216fa:	6183      	str	r3, [r0, #24]
 80216fc:	4619      	mov	r1, r3
 80216fe:	2208      	movs	r2, #8
 8021700:	305c      	adds	r0, #92	@ 0x5c
 8021702:	f7ff fa6c 	bl	8020bde <memset>
 8021706:	4b0d      	ldr	r3, [pc, #52]	@ (802173c <std+0x58>)
 8021708:	6263      	str	r3, [r4, #36]	@ 0x24
 802170a:	4b0d      	ldr	r3, [pc, #52]	@ (8021740 <std+0x5c>)
 802170c:	62a3      	str	r3, [r4, #40]	@ 0x28
 802170e:	4b0d      	ldr	r3, [pc, #52]	@ (8021744 <std+0x60>)
 8021710:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021712:	4b0d      	ldr	r3, [pc, #52]	@ (8021748 <std+0x64>)
 8021714:	6323      	str	r3, [r4, #48]	@ 0x30
 8021716:	4b0d      	ldr	r3, [pc, #52]	@ (802174c <std+0x68>)
 8021718:	6224      	str	r4, [r4, #32]
 802171a:	429c      	cmp	r4, r3
 802171c:	d006      	beq.n	802172c <std+0x48>
 802171e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021722:	4294      	cmp	r4, r2
 8021724:	d002      	beq.n	802172c <std+0x48>
 8021726:	33d0      	adds	r3, #208	@ 0xd0
 8021728:	429c      	cmp	r4, r3
 802172a:	d105      	bne.n	8021738 <std+0x54>
 802172c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021730:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021734:	f000 b9a4 	b.w	8021a80 <__retarget_lock_init_recursive>
 8021738:	bd10      	pop	{r4, pc}
 802173a:	bf00      	nop
 802173c:	08021869 	.word	0x08021869
 8021740:	0802188b 	.word	0x0802188b
 8021744:	080218c3 	.word	0x080218c3
 8021748:	080218e7 	.word	0x080218e7
 802174c:	200023e4 	.word	0x200023e4

08021750 <stdio_exit_handler>:
 8021750:	4a02      	ldr	r2, [pc, #8]	@ (802175c <stdio_exit_handler+0xc>)
 8021752:	4903      	ldr	r1, [pc, #12]	@ (8021760 <stdio_exit_handler+0x10>)
 8021754:	4803      	ldr	r0, [pc, #12]	@ (8021764 <stdio_exit_handler+0x14>)
 8021756:	f000 b869 	b.w	802182c <_fwalk_sglue>
 802175a:	bf00      	nop
 802175c:	2000002c 	.word	0x2000002c
 8021760:	08021dcd 	.word	0x08021dcd
 8021764:	2000003c 	.word	0x2000003c

08021768 <cleanup_stdio>:
 8021768:	6841      	ldr	r1, [r0, #4]
 802176a:	4b0c      	ldr	r3, [pc, #48]	@ (802179c <cleanup_stdio+0x34>)
 802176c:	4299      	cmp	r1, r3
 802176e:	b510      	push	{r4, lr}
 8021770:	4604      	mov	r4, r0
 8021772:	d001      	beq.n	8021778 <cleanup_stdio+0x10>
 8021774:	f000 fb2a 	bl	8021dcc <_fflush_r>
 8021778:	68a1      	ldr	r1, [r4, #8]
 802177a:	4b09      	ldr	r3, [pc, #36]	@ (80217a0 <cleanup_stdio+0x38>)
 802177c:	4299      	cmp	r1, r3
 802177e:	d002      	beq.n	8021786 <cleanup_stdio+0x1e>
 8021780:	4620      	mov	r0, r4
 8021782:	f000 fb23 	bl	8021dcc <_fflush_r>
 8021786:	68e1      	ldr	r1, [r4, #12]
 8021788:	4b06      	ldr	r3, [pc, #24]	@ (80217a4 <cleanup_stdio+0x3c>)
 802178a:	4299      	cmp	r1, r3
 802178c:	d004      	beq.n	8021798 <cleanup_stdio+0x30>
 802178e:	4620      	mov	r0, r4
 8021790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021794:	f000 bb1a 	b.w	8021dcc <_fflush_r>
 8021798:	bd10      	pop	{r4, pc}
 802179a:	bf00      	nop
 802179c:	200023e4 	.word	0x200023e4
 80217a0:	2000244c 	.word	0x2000244c
 80217a4:	200024b4 	.word	0x200024b4

080217a8 <global_stdio_init.part.0>:
 80217a8:	b510      	push	{r4, lr}
 80217aa:	4b0b      	ldr	r3, [pc, #44]	@ (80217d8 <global_stdio_init.part.0+0x30>)
 80217ac:	4c0b      	ldr	r4, [pc, #44]	@ (80217dc <global_stdio_init.part.0+0x34>)
 80217ae:	4a0c      	ldr	r2, [pc, #48]	@ (80217e0 <global_stdio_init.part.0+0x38>)
 80217b0:	601a      	str	r2, [r3, #0]
 80217b2:	4620      	mov	r0, r4
 80217b4:	2200      	movs	r2, #0
 80217b6:	2104      	movs	r1, #4
 80217b8:	f7ff ff94 	bl	80216e4 <std>
 80217bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80217c0:	2201      	movs	r2, #1
 80217c2:	2109      	movs	r1, #9
 80217c4:	f7ff ff8e 	bl	80216e4 <std>
 80217c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80217cc:	2202      	movs	r2, #2
 80217ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80217d2:	2112      	movs	r1, #18
 80217d4:	f7ff bf86 	b.w	80216e4 <std>
 80217d8:	2000251c 	.word	0x2000251c
 80217dc:	200023e4 	.word	0x200023e4
 80217e0:	08021751 	.word	0x08021751

080217e4 <__sfp_lock_acquire>:
 80217e4:	4801      	ldr	r0, [pc, #4]	@ (80217ec <__sfp_lock_acquire+0x8>)
 80217e6:	f000 b94c 	b.w	8021a82 <__retarget_lock_acquire_recursive>
 80217ea:	bf00      	nop
 80217ec:	20002525 	.word	0x20002525

080217f0 <__sfp_lock_release>:
 80217f0:	4801      	ldr	r0, [pc, #4]	@ (80217f8 <__sfp_lock_release+0x8>)
 80217f2:	f000 b947 	b.w	8021a84 <__retarget_lock_release_recursive>
 80217f6:	bf00      	nop
 80217f8:	20002525 	.word	0x20002525

080217fc <__sinit>:
 80217fc:	b510      	push	{r4, lr}
 80217fe:	4604      	mov	r4, r0
 8021800:	f7ff fff0 	bl	80217e4 <__sfp_lock_acquire>
 8021804:	6a23      	ldr	r3, [r4, #32]
 8021806:	b11b      	cbz	r3, 8021810 <__sinit+0x14>
 8021808:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802180c:	f7ff bff0 	b.w	80217f0 <__sfp_lock_release>
 8021810:	4b04      	ldr	r3, [pc, #16]	@ (8021824 <__sinit+0x28>)
 8021812:	6223      	str	r3, [r4, #32]
 8021814:	4b04      	ldr	r3, [pc, #16]	@ (8021828 <__sinit+0x2c>)
 8021816:	681b      	ldr	r3, [r3, #0]
 8021818:	2b00      	cmp	r3, #0
 802181a:	d1f5      	bne.n	8021808 <__sinit+0xc>
 802181c:	f7ff ffc4 	bl	80217a8 <global_stdio_init.part.0>
 8021820:	e7f2      	b.n	8021808 <__sinit+0xc>
 8021822:	bf00      	nop
 8021824:	08021769 	.word	0x08021769
 8021828:	2000251c 	.word	0x2000251c

0802182c <_fwalk_sglue>:
 802182c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021830:	4607      	mov	r7, r0
 8021832:	4688      	mov	r8, r1
 8021834:	4614      	mov	r4, r2
 8021836:	2600      	movs	r6, #0
 8021838:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 802183c:	f1b9 0901 	subs.w	r9, r9, #1
 8021840:	d505      	bpl.n	802184e <_fwalk_sglue+0x22>
 8021842:	6824      	ldr	r4, [r4, #0]
 8021844:	2c00      	cmp	r4, #0
 8021846:	d1f7      	bne.n	8021838 <_fwalk_sglue+0xc>
 8021848:	4630      	mov	r0, r6
 802184a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 802184e:	89ab      	ldrh	r3, [r5, #12]
 8021850:	2b01      	cmp	r3, #1
 8021852:	d907      	bls.n	8021864 <_fwalk_sglue+0x38>
 8021854:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021858:	3301      	adds	r3, #1
 802185a:	d003      	beq.n	8021864 <_fwalk_sglue+0x38>
 802185c:	4629      	mov	r1, r5
 802185e:	4638      	mov	r0, r7
 8021860:	47c0      	blx	r8
 8021862:	4306      	orrs	r6, r0
 8021864:	3568      	adds	r5, #104	@ 0x68
 8021866:	e7e9      	b.n	802183c <_fwalk_sglue+0x10>

08021868 <__sread>:
 8021868:	b510      	push	{r4, lr}
 802186a:	460c      	mov	r4, r1
 802186c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021870:	f000 f8b8 	bl	80219e4 <_read_r>
 8021874:	2800      	cmp	r0, #0
 8021876:	bfab      	itete	ge
 8021878:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 802187a:	89a3      	ldrhlt	r3, [r4, #12]
 802187c:	181b      	addge	r3, r3, r0
 802187e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021882:	bfac      	ite	ge
 8021884:	6563      	strge	r3, [r4, #84]	@ 0x54
 8021886:	81a3      	strhlt	r3, [r4, #12]
 8021888:	bd10      	pop	{r4, pc}

0802188a <__swrite>:
 802188a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 802188e:	461f      	mov	r7, r3
 8021890:	898b      	ldrh	r3, [r1, #12]
 8021892:	05db      	lsls	r3, r3, #23
 8021894:	4605      	mov	r5, r0
 8021896:	460c      	mov	r4, r1
 8021898:	4616      	mov	r6, r2
 802189a:	d505      	bpl.n	80218a8 <__swrite+0x1e>
 802189c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80218a0:	2302      	movs	r3, #2
 80218a2:	2200      	movs	r2, #0
 80218a4:	f000 f88c 	bl	80219c0 <_lseek_r>
 80218a8:	89a3      	ldrh	r3, [r4, #12]
 80218aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80218ae:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80218b2:	81a3      	strh	r3, [r4, #12]
 80218b4:	4632      	mov	r2, r6
 80218b6:	463b      	mov	r3, r7
 80218b8:	4628      	mov	r0, r5
 80218ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80218be:	f000 b8a3 	b.w	8021a08 <_write_r>

080218c2 <__sseek>:
 80218c2:	b510      	push	{r4, lr}
 80218c4:	460c      	mov	r4, r1
 80218c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80218ca:	f000 f879 	bl	80219c0 <_lseek_r>
 80218ce:	1c43      	adds	r3, r0, #1
 80218d0:	89a3      	ldrh	r3, [r4, #12]
 80218d2:	bf15      	itete	ne
 80218d4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80218d6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80218da:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80218de:	81a3      	strheq	r3, [r4, #12]
 80218e0:	bf18      	it	ne
 80218e2:	81a3      	strhne	r3, [r4, #12]
 80218e4:	bd10      	pop	{r4, pc}

080218e6 <__sclose>:
 80218e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80218ea:	f000 b859 	b.w	80219a0 <_close_r>

080218ee <memcmp>:
 80218ee:	b510      	push	{r4, lr}
 80218f0:	3901      	subs	r1, #1
 80218f2:	4402      	add	r2, r0
 80218f4:	4290      	cmp	r0, r2
 80218f6:	d101      	bne.n	80218fc <memcmp+0xe>
 80218f8:	2000      	movs	r0, #0
 80218fa:	e005      	b.n	8021908 <memcmp+0x1a>
 80218fc:	7803      	ldrb	r3, [r0, #0]
 80218fe:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021902:	42a3      	cmp	r3, r4
 8021904:	d001      	beq.n	802190a <memcmp+0x1c>
 8021906:	1b18      	subs	r0, r3, r4
 8021908:	bd10      	pop	{r4, pc}
 802190a:	3001      	adds	r0, #1
 802190c:	e7f2      	b.n	80218f4 <memcmp+0x6>

0802190e <memmove>:
 802190e:	4288      	cmp	r0, r1
 8021910:	b510      	push	{r4, lr}
 8021912:	eb01 0402 	add.w	r4, r1, r2
 8021916:	d902      	bls.n	802191e <memmove+0x10>
 8021918:	4284      	cmp	r4, r0
 802191a:	4623      	mov	r3, r4
 802191c:	d807      	bhi.n	802192e <memmove+0x20>
 802191e:	1e43      	subs	r3, r0, #1
 8021920:	42a1      	cmp	r1, r4
 8021922:	d008      	beq.n	8021936 <memmove+0x28>
 8021924:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021928:	f803 2f01 	strb.w	r2, [r3, #1]!
 802192c:	e7f8      	b.n	8021920 <memmove+0x12>
 802192e:	4402      	add	r2, r0
 8021930:	4601      	mov	r1, r0
 8021932:	428a      	cmp	r2, r1
 8021934:	d100      	bne.n	8021938 <memmove+0x2a>
 8021936:	bd10      	pop	{r4, pc}
 8021938:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 802193c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021940:	e7f7      	b.n	8021932 <memmove+0x24>
	...

08021944 <strcasecmp>:
 8021944:	b530      	push	{r4, r5, lr}
 8021946:	4d0b      	ldr	r5, [pc, #44]	@ (8021974 <strcasecmp+0x30>)
 8021948:	4604      	mov	r4, r0
 802194a:	f814 3b01 	ldrb.w	r3, [r4], #1
 802194e:	5cea      	ldrb	r2, [r5, r3]
 8021950:	f002 0203 	and.w	r2, r2, #3
 8021954:	2a01      	cmp	r2, #1
 8021956:	f811 2b01 	ldrb.w	r2, [r1], #1
 802195a:	5ca8      	ldrb	r0, [r5, r2]
 802195c:	f000 0003 	and.w	r0, r0, #3
 8021960:	bf08      	it	eq
 8021962:	3320      	addeq	r3, #32
 8021964:	2801      	cmp	r0, #1
 8021966:	bf08      	it	eq
 8021968:	3220      	addeq	r2, #32
 802196a:	1a98      	subs	r0, r3, r2
 802196c:	d101      	bne.n	8021972 <strcasecmp+0x2e>
 802196e:	2a00      	cmp	r2, #0
 8021970:	d1eb      	bne.n	802194a <strcasecmp+0x6>
 8021972:	bd30      	pop	{r4, r5, pc}
 8021974:	08025df4 	.word	0x08025df4

08021978 <strncpy>:
 8021978:	b510      	push	{r4, lr}
 802197a:	3901      	subs	r1, #1
 802197c:	4603      	mov	r3, r0
 802197e:	b132      	cbz	r2, 802198e <strncpy+0x16>
 8021980:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021984:	f803 4b01 	strb.w	r4, [r3], #1
 8021988:	3a01      	subs	r2, #1
 802198a:	2c00      	cmp	r4, #0
 802198c:	d1f7      	bne.n	802197e <strncpy+0x6>
 802198e:	441a      	add	r2, r3
 8021990:	2100      	movs	r1, #0
 8021992:	4293      	cmp	r3, r2
 8021994:	d100      	bne.n	8021998 <strncpy+0x20>
 8021996:	bd10      	pop	{r4, pc}
 8021998:	f803 1b01 	strb.w	r1, [r3], #1
 802199c:	e7f9      	b.n	8021992 <strncpy+0x1a>
	...

080219a0 <_close_r>:
 80219a0:	b538      	push	{r3, r4, r5, lr}
 80219a2:	4d06      	ldr	r5, [pc, #24]	@ (80219bc <_close_r+0x1c>)
 80219a4:	2300      	movs	r3, #0
 80219a6:	4604      	mov	r4, r0
 80219a8:	4608      	mov	r0, r1
 80219aa:	602b      	str	r3, [r5, #0]
 80219ac:	f7e0 fa74 	bl	8001e98 <_close>
 80219b0:	1c43      	adds	r3, r0, #1
 80219b2:	d102      	bne.n	80219ba <_close_r+0x1a>
 80219b4:	682b      	ldr	r3, [r5, #0]
 80219b6:	b103      	cbz	r3, 80219ba <_close_r+0x1a>
 80219b8:	6023      	str	r3, [r4, #0]
 80219ba:	bd38      	pop	{r3, r4, r5, pc}
 80219bc:	20002520 	.word	0x20002520

080219c0 <_lseek_r>:
 80219c0:	b538      	push	{r3, r4, r5, lr}
 80219c2:	4d07      	ldr	r5, [pc, #28]	@ (80219e0 <_lseek_r+0x20>)
 80219c4:	4604      	mov	r4, r0
 80219c6:	4608      	mov	r0, r1
 80219c8:	4611      	mov	r1, r2
 80219ca:	2200      	movs	r2, #0
 80219cc:	602a      	str	r2, [r5, #0]
 80219ce:	461a      	mov	r2, r3
 80219d0:	f7e0 fa89 	bl	8001ee6 <_lseek>
 80219d4:	1c43      	adds	r3, r0, #1
 80219d6:	d102      	bne.n	80219de <_lseek_r+0x1e>
 80219d8:	682b      	ldr	r3, [r5, #0]
 80219da:	b103      	cbz	r3, 80219de <_lseek_r+0x1e>
 80219dc:	6023      	str	r3, [r4, #0]
 80219de:	bd38      	pop	{r3, r4, r5, pc}
 80219e0:	20002520 	.word	0x20002520

080219e4 <_read_r>:
 80219e4:	b538      	push	{r3, r4, r5, lr}
 80219e6:	4d07      	ldr	r5, [pc, #28]	@ (8021a04 <_read_r+0x20>)
 80219e8:	4604      	mov	r4, r0
 80219ea:	4608      	mov	r0, r1
 80219ec:	4611      	mov	r1, r2
 80219ee:	2200      	movs	r2, #0
 80219f0:	602a      	str	r2, [r5, #0]
 80219f2:	461a      	mov	r2, r3
 80219f4:	f7e0 fa17 	bl	8001e26 <_read>
 80219f8:	1c43      	adds	r3, r0, #1
 80219fa:	d102      	bne.n	8021a02 <_read_r+0x1e>
 80219fc:	682b      	ldr	r3, [r5, #0]
 80219fe:	b103      	cbz	r3, 8021a02 <_read_r+0x1e>
 8021a00:	6023      	str	r3, [r4, #0]
 8021a02:	bd38      	pop	{r3, r4, r5, pc}
 8021a04:	20002520 	.word	0x20002520

08021a08 <_write_r>:
 8021a08:	b538      	push	{r3, r4, r5, lr}
 8021a0a:	4d07      	ldr	r5, [pc, #28]	@ (8021a28 <_write_r+0x20>)
 8021a0c:	4604      	mov	r4, r0
 8021a0e:	4608      	mov	r0, r1
 8021a10:	4611      	mov	r1, r2
 8021a12:	2200      	movs	r2, #0
 8021a14:	602a      	str	r2, [r5, #0]
 8021a16:	461a      	mov	r2, r3
 8021a18:	f7e0 fa22 	bl	8001e60 <_write>
 8021a1c:	1c43      	adds	r3, r0, #1
 8021a1e:	d102      	bne.n	8021a26 <_write_r+0x1e>
 8021a20:	682b      	ldr	r3, [r5, #0]
 8021a22:	b103      	cbz	r3, 8021a26 <_write_r+0x1e>
 8021a24:	6023      	str	r3, [r4, #0]
 8021a26:	bd38      	pop	{r3, r4, r5, pc}
 8021a28:	20002520 	.word	0x20002520

08021a2c <__errno>:
 8021a2c:	4b01      	ldr	r3, [pc, #4]	@ (8021a34 <__errno+0x8>)
 8021a2e:	6818      	ldr	r0, [r3, #0]
 8021a30:	4770      	bx	lr
 8021a32:	bf00      	nop
 8021a34:	20000038 	.word	0x20000038

08021a38 <__libc_init_array>:
 8021a38:	b570      	push	{r4, r5, r6, lr}
 8021a3a:	4d0d      	ldr	r5, [pc, #52]	@ (8021a70 <__libc_init_array+0x38>)
 8021a3c:	4c0d      	ldr	r4, [pc, #52]	@ (8021a74 <__libc_init_array+0x3c>)
 8021a3e:	1b64      	subs	r4, r4, r5
 8021a40:	10a4      	asrs	r4, r4, #2
 8021a42:	2600      	movs	r6, #0
 8021a44:	42a6      	cmp	r6, r4
 8021a46:	d109      	bne.n	8021a5c <__libc_init_array+0x24>
 8021a48:	4d0b      	ldr	r5, [pc, #44]	@ (8021a78 <__libc_init_array+0x40>)
 8021a4a:	4c0c      	ldr	r4, [pc, #48]	@ (8021a7c <__libc_init_array+0x44>)
 8021a4c:	f000 fe3a 	bl	80226c4 <_init>
 8021a50:	1b64      	subs	r4, r4, r5
 8021a52:	10a4      	asrs	r4, r4, #2
 8021a54:	2600      	movs	r6, #0
 8021a56:	42a6      	cmp	r6, r4
 8021a58:	d105      	bne.n	8021a66 <__libc_init_array+0x2e>
 8021a5a:	bd70      	pop	{r4, r5, r6, pc}
 8021a5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8021a60:	4798      	blx	r3
 8021a62:	3601      	adds	r6, #1
 8021a64:	e7ee      	b.n	8021a44 <__libc_init_array+0xc>
 8021a66:	f855 3b04 	ldr.w	r3, [r5], #4
 8021a6a:	4798      	blx	r3
 8021a6c:	3601      	adds	r6, #1
 8021a6e:	e7f2      	b.n	8021a56 <__libc_init_array+0x1e>
 8021a70:	08025f30 	.word	0x08025f30
 8021a74:	08025f30 	.word	0x08025f30
 8021a78:	08025f30 	.word	0x08025f30
 8021a7c:	08025f34 	.word	0x08025f34

08021a80 <__retarget_lock_init_recursive>:
 8021a80:	4770      	bx	lr

08021a82 <__retarget_lock_acquire_recursive>:
 8021a82:	4770      	bx	lr

08021a84 <__retarget_lock_release_recursive>:
 8021a84:	4770      	bx	lr
	...

08021a88 <__assert_func>:
 8021a88:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8021a8a:	4614      	mov	r4, r2
 8021a8c:	461a      	mov	r2, r3
 8021a8e:	4b09      	ldr	r3, [pc, #36]	@ (8021ab4 <__assert_func+0x2c>)
 8021a90:	681b      	ldr	r3, [r3, #0]
 8021a92:	4605      	mov	r5, r0
 8021a94:	68d8      	ldr	r0, [r3, #12]
 8021a96:	b954      	cbnz	r4, 8021aae <__assert_func+0x26>
 8021a98:	4b07      	ldr	r3, [pc, #28]	@ (8021ab8 <__assert_func+0x30>)
 8021a9a:	461c      	mov	r4, r3
 8021a9c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021aa0:	9100      	str	r1, [sp, #0]
 8021aa2:	462b      	mov	r3, r5
 8021aa4:	4905      	ldr	r1, [pc, #20]	@ (8021abc <__assert_func+0x34>)
 8021aa6:	f000 f9b9 	bl	8021e1c <fiprintf>
 8021aaa:	f000 f9d9 	bl	8021e60 <abort>
 8021aae:	4b04      	ldr	r3, [pc, #16]	@ (8021ac0 <__assert_func+0x38>)
 8021ab0:	e7f4      	b.n	8021a9c <__assert_func+0x14>
 8021ab2:	bf00      	nop
 8021ab4:	20000038 	.word	0x20000038
 8021ab8:	08025df2 	.word	0x08025df2
 8021abc:	08025dc4 	.word	0x08025dc4
 8021ac0:	08025db7 	.word	0x08025db7

08021ac4 <_free_r>:
 8021ac4:	b538      	push	{r3, r4, r5, lr}
 8021ac6:	4605      	mov	r5, r0
 8021ac8:	2900      	cmp	r1, #0
 8021aca:	d041      	beq.n	8021b50 <_free_r+0x8c>
 8021acc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021ad0:	1f0c      	subs	r4, r1, #4
 8021ad2:	2b00      	cmp	r3, #0
 8021ad4:	bfb8      	it	lt
 8021ad6:	18e4      	addlt	r4, r4, r3
 8021ad8:	f000 f8e8 	bl	8021cac <__malloc_lock>
 8021adc:	4a1d      	ldr	r2, [pc, #116]	@ (8021b54 <_free_r+0x90>)
 8021ade:	6813      	ldr	r3, [r2, #0]
 8021ae0:	b933      	cbnz	r3, 8021af0 <_free_r+0x2c>
 8021ae2:	6063      	str	r3, [r4, #4]
 8021ae4:	6014      	str	r4, [r2, #0]
 8021ae6:	4628      	mov	r0, r5
 8021ae8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021aec:	f000 b8e4 	b.w	8021cb8 <__malloc_unlock>
 8021af0:	42a3      	cmp	r3, r4
 8021af2:	d908      	bls.n	8021b06 <_free_r+0x42>
 8021af4:	6820      	ldr	r0, [r4, #0]
 8021af6:	1821      	adds	r1, r4, r0
 8021af8:	428b      	cmp	r3, r1
 8021afa:	bf01      	itttt	eq
 8021afc:	6819      	ldreq	r1, [r3, #0]
 8021afe:	685b      	ldreq	r3, [r3, #4]
 8021b00:	1809      	addeq	r1, r1, r0
 8021b02:	6021      	streq	r1, [r4, #0]
 8021b04:	e7ed      	b.n	8021ae2 <_free_r+0x1e>
 8021b06:	461a      	mov	r2, r3
 8021b08:	685b      	ldr	r3, [r3, #4]
 8021b0a:	b10b      	cbz	r3, 8021b10 <_free_r+0x4c>
 8021b0c:	42a3      	cmp	r3, r4
 8021b0e:	d9fa      	bls.n	8021b06 <_free_r+0x42>
 8021b10:	6811      	ldr	r1, [r2, #0]
 8021b12:	1850      	adds	r0, r2, r1
 8021b14:	42a0      	cmp	r0, r4
 8021b16:	d10b      	bne.n	8021b30 <_free_r+0x6c>
 8021b18:	6820      	ldr	r0, [r4, #0]
 8021b1a:	4401      	add	r1, r0
 8021b1c:	1850      	adds	r0, r2, r1
 8021b1e:	4283      	cmp	r3, r0
 8021b20:	6011      	str	r1, [r2, #0]
 8021b22:	d1e0      	bne.n	8021ae6 <_free_r+0x22>
 8021b24:	6818      	ldr	r0, [r3, #0]
 8021b26:	685b      	ldr	r3, [r3, #4]
 8021b28:	6053      	str	r3, [r2, #4]
 8021b2a:	4408      	add	r0, r1
 8021b2c:	6010      	str	r0, [r2, #0]
 8021b2e:	e7da      	b.n	8021ae6 <_free_r+0x22>
 8021b30:	d902      	bls.n	8021b38 <_free_r+0x74>
 8021b32:	230c      	movs	r3, #12
 8021b34:	602b      	str	r3, [r5, #0]
 8021b36:	e7d6      	b.n	8021ae6 <_free_r+0x22>
 8021b38:	6820      	ldr	r0, [r4, #0]
 8021b3a:	1821      	adds	r1, r4, r0
 8021b3c:	428b      	cmp	r3, r1
 8021b3e:	bf04      	itt	eq
 8021b40:	6819      	ldreq	r1, [r3, #0]
 8021b42:	685b      	ldreq	r3, [r3, #4]
 8021b44:	6063      	str	r3, [r4, #4]
 8021b46:	bf04      	itt	eq
 8021b48:	1809      	addeq	r1, r1, r0
 8021b4a:	6021      	streq	r1, [r4, #0]
 8021b4c:	6054      	str	r4, [r2, #4]
 8021b4e:	e7ca      	b.n	8021ae6 <_free_r+0x22>
 8021b50:	bd38      	pop	{r3, r4, r5, pc}
 8021b52:	bf00      	nop
 8021b54:	2000252c 	.word	0x2000252c

08021b58 <malloc>:
 8021b58:	4b02      	ldr	r3, [pc, #8]	@ (8021b64 <malloc+0xc>)
 8021b5a:	4601      	mov	r1, r0
 8021b5c:	6818      	ldr	r0, [r3, #0]
 8021b5e:	f000 b825 	b.w	8021bac <_malloc_r>
 8021b62:	bf00      	nop
 8021b64:	20000038 	.word	0x20000038

08021b68 <sbrk_aligned>:
 8021b68:	b570      	push	{r4, r5, r6, lr}
 8021b6a:	4e0f      	ldr	r6, [pc, #60]	@ (8021ba8 <sbrk_aligned+0x40>)
 8021b6c:	460c      	mov	r4, r1
 8021b6e:	6831      	ldr	r1, [r6, #0]
 8021b70:	4605      	mov	r5, r0
 8021b72:	b911      	cbnz	r1, 8021b7a <sbrk_aligned+0x12>
 8021b74:	f000 f964 	bl	8021e40 <_sbrk_r>
 8021b78:	6030      	str	r0, [r6, #0]
 8021b7a:	4621      	mov	r1, r4
 8021b7c:	4628      	mov	r0, r5
 8021b7e:	f000 f95f 	bl	8021e40 <_sbrk_r>
 8021b82:	1c43      	adds	r3, r0, #1
 8021b84:	d103      	bne.n	8021b8e <sbrk_aligned+0x26>
 8021b86:	f04f 34ff 	mov.w	r4, #4294967295
 8021b8a:	4620      	mov	r0, r4
 8021b8c:	bd70      	pop	{r4, r5, r6, pc}
 8021b8e:	1cc4      	adds	r4, r0, #3
 8021b90:	f024 0403 	bic.w	r4, r4, #3
 8021b94:	42a0      	cmp	r0, r4
 8021b96:	d0f8      	beq.n	8021b8a <sbrk_aligned+0x22>
 8021b98:	1a21      	subs	r1, r4, r0
 8021b9a:	4628      	mov	r0, r5
 8021b9c:	f000 f950 	bl	8021e40 <_sbrk_r>
 8021ba0:	3001      	adds	r0, #1
 8021ba2:	d1f2      	bne.n	8021b8a <sbrk_aligned+0x22>
 8021ba4:	e7ef      	b.n	8021b86 <sbrk_aligned+0x1e>
 8021ba6:	bf00      	nop
 8021ba8:	20002528 	.word	0x20002528

08021bac <_malloc_r>:
 8021bac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021bb0:	1ccd      	adds	r5, r1, #3
 8021bb2:	f025 0503 	bic.w	r5, r5, #3
 8021bb6:	3508      	adds	r5, #8
 8021bb8:	2d0c      	cmp	r5, #12
 8021bba:	bf38      	it	cc
 8021bbc:	250c      	movcc	r5, #12
 8021bbe:	2d00      	cmp	r5, #0
 8021bc0:	4606      	mov	r6, r0
 8021bc2:	db01      	blt.n	8021bc8 <_malloc_r+0x1c>
 8021bc4:	42a9      	cmp	r1, r5
 8021bc6:	d904      	bls.n	8021bd2 <_malloc_r+0x26>
 8021bc8:	230c      	movs	r3, #12
 8021bca:	6033      	str	r3, [r6, #0]
 8021bcc:	2000      	movs	r0, #0
 8021bce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021bd2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8021ca8 <_malloc_r+0xfc>
 8021bd6:	f000 f869 	bl	8021cac <__malloc_lock>
 8021bda:	f8d8 3000 	ldr.w	r3, [r8]
 8021bde:	461c      	mov	r4, r3
 8021be0:	bb44      	cbnz	r4, 8021c34 <_malloc_r+0x88>
 8021be2:	4629      	mov	r1, r5
 8021be4:	4630      	mov	r0, r6
 8021be6:	f7ff ffbf 	bl	8021b68 <sbrk_aligned>
 8021bea:	1c43      	adds	r3, r0, #1
 8021bec:	4604      	mov	r4, r0
 8021bee:	d158      	bne.n	8021ca2 <_malloc_r+0xf6>
 8021bf0:	f8d8 4000 	ldr.w	r4, [r8]
 8021bf4:	4627      	mov	r7, r4
 8021bf6:	2f00      	cmp	r7, #0
 8021bf8:	d143      	bne.n	8021c82 <_malloc_r+0xd6>
 8021bfa:	2c00      	cmp	r4, #0
 8021bfc:	d04b      	beq.n	8021c96 <_malloc_r+0xea>
 8021bfe:	6823      	ldr	r3, [r4, #0]
 8021c00:	4639      	mov	r1, r7
 8021c02:	4630      	mov	r0, r6
 8021c04:	eb04 0903 	add.w	r9, r4, r3
 8021c08:	f000 f91a 	bl	8021e40 <_sbrk_r>
 8021c0c:	4581      	cmp	r9, r0
 8021c0e:	d142      	bne.n	8021c96 <_malloc_r+0xea>
 8021c10:	6821      	ldr	r1, [r4, #0]
 8021c12:	1a6d      	subs	r5, r5, r1
 8021c14:	4629      	mov	r1, r5
 8021c16:	4630      	mov	r0, r6
 8021c18:	f7ff ffa6 	bl	8021b68 <sbrk_aligned>
 8021c1c:	3001      	adds	r0, #1
 8021c1e:	d03a      	beq.n	8021c96 <_malloc_r+0xea>
 8021c20:	6823      	ldr	r3, [r4, #0]
 8021c22:	442b      	add	r3, r5
 8021c24:	6023      	str	r3, [r4, #0]
 8021c26:	f8d8 3000 	ldr.w	r3, [r8]
 8021c2a:	685a      	ldr	r2, [r3, #4]
 8021c2c:	bb62      	cbnz	r2, 8021c88 <_malloc_r+0xdc>
 8021c2e:	f8c8 7000 	str.w	r7, [r8]
 8021c32:	e00f      	b.n	8021c54 <_malloc_r+0xa8>
 8021c34:	6822      	ldr	r2, [r4, #0]
 8021c36:	1b52      	subs	r2, r2, r5
 8021c38:	d420      	bmi.n	8021c7c <_malloc_r+0xd0>
 8021c3a:	2a0b      	cmp	r2, #11
 8021c3c:	d917      	bls.n	8021c6e <_malloc_r+0xc2>
 8021c3e:	1961      	adds	r1, r4, r5
 8021c40:	42a3      	cmp	r3, r4
 8021c42:	6025      	str	r5, [r4, #0]
 8021c44:	bf18      	it	ne
 8021c46:	6059      	strne	r1, [r3, #4]
 8021c48:	6863      	ldr	r3, [r4, #4]
 8021c4a:	bf08      	it	eq
 8021c4c:	f8c8 1000 	streq.w	r1, [r8]
 8021c50:	5162      	str	r2, [r4, r5]
 8021c52:	604b      	str	r3, [r1, #4]
 8021c54:	4630      	mov	r0, r6
 8021c56:	f000 f82f 	bl	8021cb8 <__malloc_unlock>
 8021c5a:	f104 000b 	add.w	r0, r4, #11
 8021c5e:	1d23      	adds	r3, r4, #4
 8021c60:	f020 0007 	bic.w	r0, r0, #7
 8021c64:	1ac2      	subs	r2, r0, r3
 8021c66:	bf1c      	itt	ne
 8021c68:	1a1b      	subne	r3, r3, r0
 8021c6a:	50a3      	strne	r3, [r4, r2]
 8021c6c:	e7af      	b.n	8021bce <_malloc_r+0x22>
 8021c6e:	6862      	ldr	r2, [r4, #4]
 8021c70:	42a3      	cmp	r3, r4
 8021c72:	bf0c      	ite	eq
 8021c74:	f8c8 2000 	streq.w	r2, [r8]
 8021c78:	605a      	strne	r2, [r3, #4]
 8021c7a:	e7eb      	b.n	8021c54 <_malloc_r+0xa8>
 8021c7c:	4623      	mov	r3, r4
 8021c7e:	6864      	ldr	r4, [r4, #4]
 8021c80:	e7ae      	b.n	8021be0 <_malloc_r+0x34>
 8021c82:	463c      	mov	r4, r7
 8021c84:	687f      	ldr	r7, [r7, #4]
 8021c86:	e7b6      	b.n	8021bf6 <_malloc_r+0x4a>
 8021c88:	461a      	mov	r2, r3
 8021c8a:	685b      	ldr	r3, [r3, #4]
 8021c8c:	42a3      	cmp	r3, r4
 8021c8e:	d1fb      	bne.n	8021c88 <_malloc_r+0xdc>
 8021c90:	2300      	movs	r3, #0
 8021c92:	6053      	str	r3, [r2, #4]
 8021c94:	e7de      	b.n	8021c54 <_malloc_r+0xa8>
 8021c96:	230c      	movs	r3, #12
 8021c98:	6033      	str	r3, [r6, #0]
 8021c9a:	4630      	mov	r0, r6
 8021c9c:	f000 f80c 	bl	8021cb8 <__malloc_unlock>
 8021ca0:	e794      	b.n	8021bcc <_malloc_r+0x20>
 8021ca2:	6005      	str	r5, [r0, #0]
 8021ca4:	e7d6      	b.n	8021c54 <_malloc_r+0xa8>
 8021ca6:	bf00      	nop
 8021ca8:	2000252c 	.word	0x2000252c

08021cac <__malloc_lock>:
 8021cac:	4801      	ldr	r0, [pc, #4]	@ (8021cb4 <__malloc_lock+0x8>)
 8021cae:	f7ff bee8 	b.w	8021a82 <__retarget_lock_acquire_recursive>
 8021cb2:	bf00      	nop
 8021cb4:	20002524 	.word	0x20002524

08021cb8 <__malloc_unlock>:
 8021cb8:	4801      	ldr	r0, [pc, #4]	@ (8021cc0 <__malloc_unlock+0x8>)
 8021cba:	f7ff bee3 	b.w	8021a84 <__retarget_lock_release_recursive>
 8021cbe:	bf00      	nop
 8021cc0:	20002524 	.word	0x20002524

08021cc4 <__sflush_r>:
 8021cc4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8021cc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ccc:	0716      	lsls	r6, r2, #28
 8021cce:	4605      	mov	r5, r0
 8021cd0:	460c      	mov	r4, r1
 8021cd2:	d454      	bmi.n	8021d7e <__sflush_r+0xba>
 8021cd4:	684b      	ldr	r3, [r1, #4]
 8021cd6:	2b00      	cmp	r3, #0
 8021cd8:	dc02      	bgt.n	8021ce0 <__sflush_r+0x1c>
 8021cda:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8021cdc:	2b00      	cmp	r3, #0
 8021cde:	dd48      	ble.n	8021d72 <__sflush_r+0xae>
 8021ce0:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021ce2:	2e00      	cmp	r6, #0
 8021ce4:	d045      	beq.n	8021d72 <__sflush_r+0xae>
 8021ce6:	2300      	movs	r3, #0
 8021ce8:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8021cec:	682f      	ldr	r7, [r5, #0]
 8021cee:	6a21      	ldr	r1, [r4, #32]
 8021cf0:	602b      	str	r3, [r5, #0]
 8021cf2:	d030      	beq.n	8021d56 <__sflush_r+0x92>
 8021cf4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021cf6:	89a3      	ldrh	r3, [r4, #12]
 8021cf8:	0759      	lsls	r1, r3, #29
 8021cfa:	d505      	bpl.n	8021d08 <__sflush_r+0x44>
 8021cfc:	6863      	ldr	r3, [r4, #4]
 8021cfe:	1ad2      	subs	r2, r2, r3
 8021d00:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021d02:	b10b      	cbz	r3, 8021d08 <__sflush_r+0x44>
 8021d04:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021d06:	1ad2      	subs	r2, r2, r3
 8021d08:	2300      	movs	r3, #0
 8021d0a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021d0c:	6a21      	ldr	r1, [r4, #32]
 8021d0e:	4628      	mov	r0, r5
 8021d10:	47b0      	blx	r6
 8021d12:	1c43      	adds	r3, r0, #1
 8021d14:	89a3      	ldrh	r3, [r4, #12]
 8021d16:	d106      	bne.n	8021d26 <__sflush_r+0x62>
 8021d18:	6829      	ldr	r1, [r5, #0]
 8021d1a:	291d      	cmp	r1, #29
 8021d1c:	d82b      	bhi.n	8021d76 <__sflush_r+0xb2>
 8021d1e:	4a2a      	ldr	r2, [pc, #168]	@ (8021dc8 <__sflush_r+0x104>)
 8021d20:	410a      	asrs	r2, r1
 8021d22:	07d6      	lsls	r6, r2, #31
 8021d24:	d427      	bmi.n	8021d76 <__sflush_r+0xb2>
 8021d26:	2200      	movs	r2, #0
 8021d28:	6062      	str	r2, [r4, #4]
 8021d2a:	04d9      	lsls	r1, r3, #19
 8021d2c:	6922      	ldr	r2, [r4, #16]
 8021d2e:	6022      	str	r2, [r4, #0]
 8021d30:	d504      	bpl.n	8021d3c <__sflush_r+0x78>
 8021d32:	1c42      	adds	r2, r0, #1
 8021d34:	d101      	bne.n	8021d3a <__sflush_r+0x76>
 8021d36:	682b      	ldr	r3, [r5, #0]
 8021d38:	b903      	cbnz	r3, 8021d3c <__sflush_r+0x78>
 8021d3a:	6560      	str	r0, [r4, #84]	@ 0x54
 8021d3c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021d3e:	602f      	str	r7, [r5, #0]
 8021d40:	b1b9      	cbz	r1, 8021d72 <__sflush_r+0xae>
 8021d42:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021d46:	4299      	cmp	r1, r3
 8021d48:	d002      	beq.n	8021d50 <__sflush_r+0x8c>
 8021d4a:	4628      	mov	r0, r5
 8021d4c:	f7ff feba 	bl	8021ac4 <_free_r>
 8021d50:	2300      	movs	r3, #0
 8021d52:	6363      	str	r3, [r4, #52]	@ 0x34
 8021d54:	e00d      	b.n	8021d72 <__sflush_r+0xae>
 8021d56:	2301      	movs	r3, #1
 8021d58:	4628      	mov	r0, r5
 8021d5a:	47b0      	blx	r6
 8021d5c:	4602      	mov	r2, r0
 8021d5e:	1c50      	adds	r0, r2, #1
 8021d60:	d1c9      	bne.n	8021cf6 <__sflush_r+0x32>
 8021d62:	682b      	ldr	r3, [r5, #0]
 8021d64:	2b00      	cmp	r3, #0
 8021d66:	d0c6      	beq.n	8021cf6 <__sflush_r+0x32>
 8021d68:	2b1d      	cmp	r3, #29
 8021d6a:	d001      	beq.n	8021d70 <__sflush_r+0xac>
 8021d6c:	2b16      	cmp	r3, #22
 8021d6e:	d11e      	bne.n	8021dae <__sflush_r+0xea>
 8021d70:	602f      	str	r7, [r5, #0]
 8021d72:	2000      	movs	r0, #0
 8021d74:	e022      	b.n	8021dbc <__sflush_r+0xf8>
 8021d76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021d7a:	b21b      	sxth	r3, r3
 8021d7c:	e01b      	b.n	8021db6 <__sflush_r+0xf2>
 8021d7e:	690f      	ldr	r7, [r1, #16]
 8021d80:	2f00      	cmp	r7, #0
 8021d82:	d0f6      	beq.n	8021d72 <__sflush_r+0xae>
 8021d84:	0793      	lsls	r3, r2, #30
 8021d86:	680e      	ldr	r6, [r1, #0]
 8021d88:	bf08      	it	eq
 8021d8a:	694b      	ldreq	r3, [r1, #20]
 8021d8c:	600f      	str	r7, [r1, #0]
 8021d8e:	bf18      	it	ne
 8021d90:	2300      	movne	r3, #0
 8021d92:	eba6 0807 	sub.w	r8, r6, r7
 8021d96:	608b      	str	r3, [r1, #8]
 8021d98:	f1b8 0f00 	cmp.w	r8, #0
 8021d9c:	dde9      	ble.n	8021d72 <__sflush_r+0xae>
 8021d9e:	6a21      	ldr	r1, [r4, #32]
 8021da0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8021da2:	4643      	mov	r3, r8
 8021da4:	463a      	mov	r2, r7
 8021da6:	4628      	mov	r0, r5
 8021da8:	47b0      	blx	r6
 8021daa:	2800      	cmp	r0, #0
 8021dac:	dc08      	bgt.n	8021dc0 <__sflush_r+0xfc>
 8021dae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021db2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021db6:	81a3      	strh	r3, [r4, #12]
 8021db8:	f04f 30ff 	mov.w	r0, #4294967295
 8021dbc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021dc0:	4407      	add	r7, r0
 8021dc2:	eba8 0800 	sub.w	r8, r8, r0
 8021dc6:	e7e7      	b.n	8021d98 <__sflush_r+0xd4>
 8021dc8:	dfbffffe 	.word	0xdfbffffe

08021dcc <_fflush_r>:
 8021dcc:	b538      	push	{r3, r4, r5, lr}
 8021dce:	690b      	ldr	r3, [r1, #16]
 8021dd0:	4605      	mov	r5, r0
 8021dd2:	460c      	mov	r4, r1
 8021dd4:	b913      	cbnz	r3, 8021ddc <_fflush_r+0x10>
 8021dd6:	2500      	movs	r5, #0
 8021dd8:	4628      	mov	r0, r5
 8021dda:	bd38      	pop	{r3, r4, r5, pc}
 8021ddc:	b118      	cbz	r0, 8021de6 <_fflush_r+0x1a>
 8021dde:	6a03      	ldr	r3, [r0, #32]
 8021de0:	b90b      	cbnz	r3, 8021de6 <_fflush_r+0x1a>
 8021de2:	f7ff fd0b 	bl	80217fc <__sinit>
 8021de6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021dea:	2b00      	cmp	r3, #0
 8021dec:	d0f3      	beq.n	8021dd6 <_fflush_r+0xa>
 8021dee:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021df0:	07d0      	lsls	r0, r2, #31
 8021df2:	d404      	bmi.n	8021dfe <_fflush_r+0x32>
 8021df4:	0599      	lsls	r1, r3, #22
 8021df6:	d402      	bmi.n	8021dfe <_fflush_r+0x32>
 8021df8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021dfa:	f7ff fe42 	bl	8021a82 <__retarget_lock_acquire_recursive>
 8021dfe:	4628      	mov	r0, r5
 8021e00:	4621      	mov	r1, r4
 8021e02:	f7ff ff5f 	bl	8021cc4 <__sflush_r>
 8021e06:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021e08:	07da      	lsls	r2, r3, #31
 8021e0a:	4605      	mov	r5, r0
 8021e0c:	d4e4      	bmi.n	8021dd8 <_fflush_r+0xc>
 8021e0e:	89a3      	ldrh	r3, [r4, #12]
 8021e10:	059b      	lsls	r3, r3, #22
 8021e12:	d4e1      	bmi.n	8021dd8 <_fflush_r+0xc>
 8021e14:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021e16:	f7ff fe35 	bl	8021a84 <__retarget_lock_release_recursive>
 8021e1a:	e7dd      	b.n	8021dd8 <_fflush_r+0xc>

08021e1c <fiprintf>:
 8021e1c:	b40e      	push	{r1, r2, r3}
 8021e1e:	b503      	push	{r0, r1, lr}
 8021e20:	4601      	mov	r1, r0
 8021e22:	ab03      	add	r3, sp, #12
 8021e24:	4805      	ldr	r0, [pc, #20]	@ (8021e3c <fiprintf+0x20>)
 8021e26:	f853 2b04 	ldr.w	r2, [r3], #4
 8021e2a:	6800      	ldr	r0, [r0, #0]
 8021e2c:	9301      	str	r3, [sp, #4]
 8021e2e:	f000 f847 	bl	8021ec0 <_vfiprintf_r>
 8021e32:	b002      	add	sp, #8
 8021e34:	f85d eb04 	ldr.w	lr, [sp], #4
 8021e38:	b003      	add	sp, #12
 8021e3a:	4770      	bx	lr
 8021e3c:	20000038 	.word	0x20000038

08021e40 <_sbrk_r>:
 8021e40:	b538      	push	{r3, r4, r5, lr}
 8021e42:	4d06      	ldr	r5, [pc, #24]	@ (8021e5c <_sbrk_r+0x1c>)
 8021e44:	2300      	movs	r3, #0
 8021e46:	4604      	mov	r4, r0
 8021e48:	4608      	mov	r0, r1
 8021e4a:	602b      	str	r3, [r5, #0]
 8021e4c:	f7e0 f858 	bl	8001f00 <_sbrk>
 8021e50:	1c43      	adds	r3, r0, #1
 8021e52:	d102      	bne.n	8021e5a <_sbrk_r+0x1a>
 8021e54:	682b      	ldr	r3, [r5, #0]
 8021e56:	b103      	cbz	r3, 8021e5a <_sbrk_r+0x1a>
 8021e58:	6023      	str	r3, [r4, #0]
 8021e5a:	bd38      	pop	{r3, r4, r5, pc}
 8021e5c:	20002520 	.word	0x20002520

08021e60 <abort>:
 8021e60:	b508      	push	{r3, lr}
 8021e62:	2006      	movs	r0, #6
 8021e64:	f000 fb8e 	bl	8022584 <raise>
 8021e68:	2001      	movs	r0, #1
 8021e6a:	f7df ffd1 	bl	8001e10 <_exit>

08021e6e <__sfputc_r>:
 8021e6e:	6893      	ldr	r3, [r2, #8]
 8021e70:	3b01      	subs	r3, #1
 8021e72:	2b00      	cmp	r3, #0
 8021e74:	b410      	push	{r4}
 8021e76:	6093      	str	r3, [r2, #8]
 8021e78:	da08      	bge.n	8021e8c <__sfputc_r+0x1e>
 8021e7a:	6994      	ldr	r4, [r2, #24]
 8021e7c:	42a3      	cmp	r3, r4
 8021e7e:	db01      	blt.n	8021e84 <__sfputc_r+0x16>
 8021e80:	290a      	cmp	r1, #10
 8021e82:	d103      	bne.n	8021e8c <__sfputc_r+0x1e>
 8021e84:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021e88:	f000 bac0 	b.w	802240c <__swbuf_r>
 8021e8c:	6813      	ldr	r3, [r2, #0]
 8021e8e:	1c58      	adds	r0, r3, #1
 8021e90:	6010      	str	r0, [r2, #0]
 8021e92:	7019      	strb	r1, [r3, #0]
 8021e94:	4608      	mov	r0, r1
 8021e96:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021e9a:	4770      	bx	lr

08021e9c <__sfputs_r>:
 8021e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021e9e:	4606      	mov	r6, r0
 8021ea0:	460f      	mov	r7, r1
 8021ea2:	4614      	mov	r4, r2
 8021ea4:	18d5      	adds	r5, r2, r3
 8021ea6:	42ac      	cmp	r4, r5
 8021ea8:	d101      	bne.n	8021eae <__sfputs_r+0x12>
 8021eaa:	2000      	movs	r0, #0
 8021eac:	e007      	b.n	8021ebe <__sfputs_r+0x22>
 8021eae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021eb2:	463a      	mov	r2, r7
 8021eb4:	4630      	mov	r0, r6
 8021eb6:	f7ff ffda 	bl	8021e6e <__sfputc_r>
 8021eba:	1c43      	adds	r3, r0, #1
 8021ebc:	d1f3      	bne.n	8021ea6 <__sfputs_r+0xa>
 8021ebe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08021ec0 <_vfiprintf_r>:
 8021ec0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021ec4:	460d      	mov	r5, r1
 8021ec6:	b09d      	sub	sp, #116	@ 0x74
 8021ec8:	4614      	mov	r4, r2
 8021eca:	4698      	mov	r8, r3
 8021ecc:	4606      	mov	r6, r0
 8021ece:	b118      	cbz	r0, 8021ed8 <_vfiprintf_r+0x18>
 8021ed0:	6a03      	ldr	r3, [r0, #32]
 8021ed2:	b90b      	cbnz	r3, 8021ed8 <_vfiprintf_r+0x18>
 8021ed4:	f7ff fc92 	bl	80217fc <__sinit>
 8021ed8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021eda:	07d9      	lsls	r1, r3, #31
 8021edc:	d405      	bmi.n	8021eea <_vfiprintf_r+0x2a>
 8021ede:	89ab      	ldrh	r3, [r5, #12]
 8021ee0:	059a      	lsls	r2, r3, #22
 8021ee2:	d402      	bmi.n	8021eea <_vfiprintf_r+0x2a>
 8021ee4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021ee6:	f7ff fdcc 	bl	8021a82 <__retarget_lock_acquire_recursive>
 8021eea:	89ab      	ldrh	r3, [r5, #12]
 8021eec:	071b      	lsls	r3, r3, #28
 8021eee:	d501      	bpl.n	8021ef4 <_vfiprintf_r+0x34>
 8021ef0:	692b      	ldr	r3, [r5, #16]
 8021ef2:	b99b      	cbnz	r3, 8021f1c <_vfiprintf_r+0x5c>
 8021ef4:	4629      	mov	r1, r5
 8021ef6:	4630      	mov	r0, r6
 8021ef8:	f000 fac6 	bl	8022488 <__swsetup_r>
 8021efc:	b170      	cbz	r0, 8021f1c <_vfiprintf_r+0x5c>
 8021efe:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021f00:	07dc      	lsls	r4, r3, #31
 8021f02:	d504      	bpl.n	8021f0e <_vfiprintf_r+0x4e>
 8021f04:	f04f 30ff 	mov.w	r0, #4294967295
 8021f08:	b01d      	add	sp, #116	@ 0x74
 8021f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021f0e:	89ab      	ldrh	r3, [r5, #12]
 8021f10:	0598      	lsls	r0, r3, #22
 8021f12:	d4f7      	bmi.n	8021f04 <_vfiprintf_r+0x44>
 8021f14:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021f16:	f7ff fdb5 	bl	8021a84 <__retarget_lock_release_recursive>
 8021f1a:	e7f3      	b.n	8021f04 <_vfiprintf_r+0x44>
 8021f1c:	2300      	movs	r3, #0
 8021f1e:	9309      	str	r3, [sp, #36]	@ 0x24
 8021f20:	2320      	movs	r3, #32
 8021f22:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8021f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8021f2a:	2330      	movs	r3, #48	@ 0x30
 8021f2c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80220dc <_vfiprintf_r+0x21c>
 8021f30:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8021f34:	f04f 0901 	mov.w	r9, #1
 8021f38:	4623      	mov	r3, r4
 8021f3a:	469a      	mov	sl, r3
 8021f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021f40:	b10a      	cbz	r2, 8021f46 <_vfiprintf_r+0x86>
 8021f42:	2a25      	cmp	r2, #37	@ 0x25
 8021f44:	d1f9      	bne.n	8021f3a <_vfiprintf_r+0x7a>
 8021f46:	ebba 0b04 	subs.w	fp, sl, r4
 8021f4a:	d00b      	beq.n	8021f64 <_vfiprintf_r+0xa4>
 8021f4c:	465b      	mov	r3, fp
 8021f4e:	4622      	mov	r2, r4
 8021f50:	4629      	mov	r1, r5
 8021f52:	4630      	mov	r0, r6
 8021f54:	f7ff ffa2 	bl	8021e9c <__sfputs_r>
 8021f58:	3001      	adds	r0, #1
 8021f5a:	f000 80a7 	beq.w	80220ac <_vfiprintf_r+0x1ec>
 8021f5e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021f60:	445a      	add	r2, fp
 8021f62:	9209      	str	r2, [sp, #36]	@ 0x24
 8021f64:	f89a 3000 	ldrb.w	r3, [sl]
 8021f68:	2b00      	cmp	r3, #0
 8021f6a:	f000 809f 	beq.w	80220ac <_vfiprintf_r+0x1ec>
 8021f6e:	2300      	movs	r3, #0
 8021f70:	f04f 32ff 	mov.w	r2, #4294967295
 8021f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021f78:	f10a 0a01 	add.w	sl, sl, #1
 8021f7c:	9304      	str	r3, [sp, #16]
 8021f7e:	9307      	str	r3, [sp, #28]
 8021f80:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8021f84:	931a      	str	r3, [sp, #104]	@ 0x68
 8021f86:	4654      	mov	r4, sl
 8021f88:	2205      	movs	r2, #5
 8021f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021f8e:	4853      	ldr	r0, [pc, #332]	@ (80220dc <_vfiprintf_r+0x21c>)
 8021f90:	f7de f9be 	bl	8000310 <memchr>
 8021f94:	9a04      	ldr	r2, [sp, #16]
 8021f96:	b9d8      	cbnz	r0, 8021fd0 <_vfiprintf_r+0x110>
 8021f98:	06d1      	lsls	r1, r2, #27
 8021f9a:	bf44      	itt	mi
 8021f9c:	2320      	movmi	r3, #32
 8021f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021fa2:	0713      	lsls	r3, r2, #28
 8021fa4:	bf44      	itt	mi
 8021fa6:	232b      	movmi	r3, #43	@ 0x2b
 8021fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021fac:	f89a 3000 	ldrb.w	r3, [sl]
 8021fb0:	2b2a      	cmp	r3, #42	@ 0x2a
 8021fb2:	d015      	beq.n	8021fe0 <_vfiprintf_r+0x120>
 8021fb4:	9a07      	ldr	r2, [sp, #28]
 8021fb6:	4654      	mov	r4, sl
 8021fb8:	2000      	movs	r0, #0
 8021fba:	f04f 0c0a 	mov.w	ip, #10
 8021fbe:	4621      	mov	r1, r4
 8021fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8021fc4:	3b30      	subs	r3, #48	@ 0x30
 8021fc6:	2b09      	cmp	r3, #9
 8021fc8:	d94b      	bls.n	8022062 <_vfiprintf_r+0x1a2>
 8021fca:	b1b0      	cbz	r0, 8021ffa <_vfiprintf_r+0x13a>
 8021fcc:	9207      	str	r2, [sp, #28]
 8021fce:	e014      	b.n	8021ffa <_vfiprintf_r+0x13a>
 8021fd0:	eba0 0308 	sub.w	r3, r0, r8
 8021fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8021fd8:	4313      	orrs	r3, r2
 8021fda:	9304      	str	r3, [sp, #16]
 8021fdc:	46a2      	mov	sl, r4
 8021fde:	e7d2      	b.n	8021f86 <_vfiprintf_r+0xc6>
 8021fe0:	9b03      	ldr	r3, [sp, #12]
 8021fe2:	1d19      	adds	r1, r3, #4
 8021fe4:	681b      	ldr	r3, [r3, #0]
 8021fe6:	9103      	str	r1, [sp, #12]
 8021fe8:	2b00      	cmp	r3, #0
 8021fea:	bfbb      	ittet	lt
 8021fec:	425b      	neglt	r3, r3
 8021fee:	f042 0202 	orrlt.w	r2, r2, #2
 8021ff2:	9307      	strge	r3, [sp, #28]
 8021ff4:	9307      	strlt	r3, [sp, #28]
 8021ff6:	bfb8      	it	lt
 8021ff8:	9204      	strlt	r2, [sp, #16]
 8021ffa:	7823      	ldrb	r3, [r4, #0]
 8021ffc:	2b2e      	cmp	r3, #46	@ 0x2e
 8021ffe:	d10a      	bne.n	8022016 <_vfiprintf_r+0x156>
 8022000:	7863      	ldrb	r3, [r4, #1]
 8022002:	2b2a      	cmp	r3, #42	@ 0x2a
 8022004:	d132      	bne.n	802206c <_vfiprintf_r+0x1ac>
 8022006:	9b03      	ldr	r3, [sp, #12]
 8022008:	1d1a      	adds	r2, r3, #4
 802200a:	681b      	ldr	r3, [r3, #0]
 802200c:	9203      	str	r2, [sp, #12]
 802200e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022012:	3402      	adds	r4, #2
 8022014:	9305      	str	r3, [sp, #20]
 8022016:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80220ec <_vfiprintf_r+0x22c>
 802201a:	7821      	ldrb	r1, [r4, #0]
 802201c:	2203      	movs	r2, #3
 802201e:	4650      	mov	r0, sl
 8022020:	f7de f976 	bl	8000310 <memchr>
 8022024:	b138      	cbz	r0, 8022036 <_vfiprintf_r+0x176>
 8022026:	9b04      	ldr	r3, [sp, #16]
 8022028:	eba0 000a 	sub.w	r0, r0, sl
 802202c:	2240      	movs	r2, #64	@ 0x40
 802202e:	4082      	lsls	r2, r0
 8022030:	4313      	orrs	r3, r2
 8022032:	3401      	adds	r4, #1
 8022034:	9304      	str	r3, [sp, #16]
 8022036:	f814 1b01 	ldrb.w	r1, [r4], #1
 802203a:	4829      	ldr	r0, [pc, #164]	@ (80220e0 <_vfiprintf_r+0x220>)
 802203c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022040:	2206      	movs	r2, #6
 8022042:	f7de f965 	bl	8000310 <memchr>
 8022046:	2800      	cmp	r0, #0
 8022048:	d03f      	beq.n	80220ca <_vfiprintf_r+0x20a>
 802204a:	4b26      	ldr	r3, [pc, #152]	@ (80220e4 <_vfiprintf_r+0x224>)
 802204c:	bb1b      	cbnz	r3, 8022096 <_vfiprintf_r+0x1d6>
 802204e:	9b03      	ldr	r3, [sp, #12]
 8022050:	3307      	adds	r3, #7
 8022052:	f023 0307 	bic.w	r3, r3, #7
 8022056:	3308      	adds	r3, #8
 8022058:	9303      	str	r3, [sp, #12]
 802205a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802205c:	443b      	add	r3, r7
 802205e:	9309      	str	r3, [sp, #36]	@ 0x24
 8022060:	e76a      	b.n	8021f38 <_vfiprintf_r+0x78>
 8022062:	fb0c 3202 	mla	r2, ip, r2, r3
 8022066:	460c      	mov	r4, r1
 8022068:	2001      	movs	r0, #1
 802206a:	e7a8      	b.n	8021fbe <_vfiprintf_r+0xfe>
 802206c:	2300      	movs	r3, #0
 802206e:	3401      	adds	r4, #1
 8022070:	9305      	str	r3, [sp, #20]
 8022072:	4619      	mov	r1, r3
 8022074:	f04f 0c0a 	mov.w	ip, #10
 8022078:	4620      	mov	r0, r4
 802207a:	f810 2b01 	ldrb.w	r2, [r0], #1
 802207e:	3a30      	subs	r2, #48	@ 0x30
 8022080:	2a09      	cmp	r2, #9
 8022082:	d903      	bls.n	802208c <_vfiprintf_r+0x1cc>
 8022084:	2b00      	cmp	r3, #0
 8022086:	d0c6      	beq.n	8022016 <_vfiprintf_r+0x156>
 8022088:	9105      	str	r1, [sp, #20]
 802208a:	e7c4      	b.n	8022016 <_vfiprintf_r+0x156>
 802208c:	fb0c 2101 	mla	r1, ip, r1, r2
 8022090:	4604      	mov	r4, r0
 8022092:	2301      	movs	r3, #1
 8022094:	e7f0      	b.n	8022078 <_vfiprintf_r+0x1b8>
 8022096:	ab03      	add	r3, sp, #12
 8022098:	9300      	str	r3, [sp, #0]
 802209a:	462a      	mov	r2, r5
 802209c:	4b12      	ldr	r3, [pc, #72]	@ (80220e8 <_vfiprintf_r+0x228>)
 802209e:	a904      	add	r1, sp, #16
 80220a0:	4630      	mov	r0, r6
 80220a2:	f3af 8000 	nop.w
 80220a6:	4607      	mov	r7, r0
 80220a8:	1c78      	adds	r0, r7, #1
 80220aa:	d1d6      	bne.n	802205a <_vfiprintf_r+0x19a>
 80220ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80220ae:	07d9      	lsls	r1, r3, #31
 80220b0:	d405      	bmi.n	80220be <_vfiprintf_r+0x1fe>
 80220b2:	89ab      	ldrh	r3, [r5, #12]
 80220b4:	059a      	lsls	r2, r3, #22
 80220b6:	d402      	bmi.n	80220be <_vfiprintf_r+0x1fe>
 80220b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80220ba:	f7ff fce3 	bl	8021a84 <__retarget_lock_release_recursive>
 80220be:	89ab      	ldrh	r3, [r5, #12]
 80220c0:	065b      	lsls	r3, r3, #25
 80220c2:	f53f af1f 	bmi.w	8021f04 <_vfiprintf_r+0x44>
 80220c6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80220c8:	e71e      	b.n	8021f08 <_vfiprintf_r+0x48>
 80220ca:	ab03      	add	r3, sp, #12
 80220cc:	9300      	str	r3, [sp, #0]
 80220ce:	462a      	mov	r2, r5
 80220d0:	4b05      	ldr	r3, [pc, #20]	@ (80220e8 <_vfiprintf_r+0x228>)
 80220d2:	a904      	add	r1, sp, #16
 80220d4:	4630      	mov	r0, r6
 80220d6:	f000 f879 	bl	80221cc <_printf_i>
 80220da:	e7e4      	b.n	80220a6 <_vfiprintf_r+0x1e6>
 80220dc:	08025ef4 	.word	0x08025ef4
 80220e0:	08025efe 	.word	0x08025efe
 80220e4:	00000000 	.word	0x00000000
 80220e8:	08021e9d 	.word	0x08021e9d
 80220ec:	08025efa 	.word	0x08025efa

080220f0 <_printf_common>:
 80220f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80220f4:	4616      	mov	r6, r2
 80220f6:	4698      	mov	r8, r3
 80220f8:	688a      	ldr	r2, [r1, #8]
 80220fa:	690b      	ldr	r3, [r1, #16]
 80220fc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8022100:	4293      	cmp	r3, r2
 8022102:	bfb8      	it	lt
 8022104:	4613      	movlt	r3, r2
 8022106:	6033      	str	r3, [r6, #0]
 8022108:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 802210c:	4607      	mov	r7, r0
 802210e:	460c      	mov	r4, r1
 8022110:	b10a      	cbz	r2, 8022116 <_printf_common+0x26>
 8022112:	3301      	adds	r3, #1
 8022114:	6033      	str	r3, [r6, #0]
 8022116:	6823      	ldr	r3, [r4, #0]
 8022118:	0699      	lsls	r1, r3, #26
 802211a:	bf42      	ittt	mi
 802211c:	6833      	ldrmi	r3, [r6, #0]
 802211e:	3302      	addmi	r3, #2
 8022120:	6033      	strmi	r3, [r6, #0]
 8022122:	6825      	ldr	r5, [r4, #0]
 8022124:	f015 0506 	ands.w	r5, r5, #6
 8022128:	d106      	bne.n	8022138 <_printf_common+0x48>
 802212a:	f104 0a19 	add.w	sl, r4, #25
 802212e:	68e3      	ldr	r3, [r4, #12]
 8022130:	6832      	ldr	r2, [r6, #0]
 8022132:	1a9b      	subs	r3, r3, r2
 8022134:	42ab      	cmp	r3, r5
 8022136:	dc26      	bgt.n	8022186 <_printf_common+0x96>
 8022138:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 802213c:	6822      	ldr	r2, [r4, #0]
 802213e:	3b00      	subs	r3, #0
 8022140:	bf18      	it	ne
 8022142:	2301      	movne	r3, #1
 8022144:	0692      	lsls	r2, r2, #26
 8022146:	d42b      	bmi.n	80221a0 <_printf_common+0xb0>
 8022148:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 802214c:	4641      	mov	r1, r8
 802214e:	4638      	mov	r0, r7
 8022150:	47c8      	blx	r9
 8022152:	3001      	adds	r0, #1
 8022154:	d01e      	beq.n	8022194 <_printf_common+0xa4>
 8022156:	6823      	ldr	r3, [r4, #0]
 8022158:	6922      	ldr	r2, [r4, #16]
 802215a:	f003 0306 	and.w	r3, r3, #6
 802215e:	2b04      	cmp	r3, #4
 8022160:	bf02      	ittt	eq
 8022162:	68e5      	ldreq	r5, [r4, #12]
 8022164:	6833      	ldreq	r3, [r6, #0]
 8022166:	1aed      	subeq	r5, r5, r3
 8022168:	68a3      	ldr	r3, [r4, #8]
 802216a:	bf0c      	ite	eq
 802216c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022170:	2500      	movne	r5, #0
 8022172:	4293      	cmp	r3, r2
 8022174:	bfc4      	itt	gt
 8022176:	1a9b      	subgt	r3, r3, r2
 8022178:	18ed      	addgt	r5, r5, r3
 802217a:	2600      	movs	r6, #0
 802217c:	341a      	adds	r4, #26
 802217e:	42b5      	cmp	r5, r6
 8022180:	d11a      	bne.n	80221b8 <_printf_common+0xc8>
 8022182:	2000      	movs	r0, #0
 8022184:	e008      	b.n	8022198 <_printf_common+0xa8>
 8022186:	2301      	movs	r3, #1
 8022188:	4652      	mov	r2, sl
 802218a:	4641      	mov	r1, r8
 802218c:	4638      	mov	r0, r7
 802218e:	47c8      	blx	r9
 8022190:	3001      	adds	r0, #1
 8022192:	d103      	bne.n	802219c <_printf_common+0xac>
 8022194:	f04f 30ff 	mov.w	r0, #4294967295
 8022198:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802219c:	3501      	adds	r5, #1
 802219e:	e7c6      	b.n	802212e <_printf_common+0x3e>
 80221a0:	18e1      	adds	r1, r4, r3
 80221a2:	1c5a      	adds	r2, r3, #1
 80221a4:	2030      	movs	r0, #48	@ 0x30
 80221a6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80221aa:	4422      	add	r2, r4
 80221ac:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80221b0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80221b4:	3302      	adds	r3, #2
 80221b6:	e7c7      	b.n	8022148 <_printf_common+0x58>
 80221b8:	2301      	movs	r3, #1
 80221ba:	4622      	mov	r2, r4
 80221bc:	4641      	mov	r1, r8
 80221be:	4638      	mov	r0, r7
 80221c0:	47c8      	blx	r9
 80221c2:	3001      	adds	r0, #1
 80221c4:	d0e6      	beq.n	8022194 <_printf_common+0xa4>
 80221c6:	3601      	adds	r6, #1
 80221c8:	e7d9      	b.n	802217e <_printf_common+0x8e>
	...

080221cc <_printf_i>:
 80221cc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80221d0:	7e0f      	ldrb	r7, [r1, #24]
 80221d2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80221d4:	2f78      	cmp	r7, #120	@ 0x78
 80221d6:	4691      	mov	r9, r2
 80221d8:	4680      	mov	r8, r0
 80221da:	460c      	mov	r4, r1
 80221dc:	469a      	mov	sl, r3
 80221de:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80221e2:	d807      	bhi.n	80221f4 <_printf_i+0x28>
 80221e4:	2f62      	cmp	r7, #98	@ 0x62
 80221e6:	d80a      	bhi.n	80221fe <_printf_i+0x32>
 80221e8:	2f00      	cmp	r7, #0
 80221ea:	f000 80d2 	beq.w	8022392 <_printf_i+0x1c6>
 80221ee:	2f58      	cmp	r7, #88	@ 0x58
 80221f0:	f000 80b9 	beq.w	8022366 <_printf_i+0x19a>
 80221f4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80221f8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80221fc:	e03a      	b.n	8022274 <_printf_i+0xa8>
 80221fe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8022202:	2b15      	cmp	r3, #21
 8022204:	d8f6      	bhi.n	80221f4 <_printf_i+0x28>
 8022206:	a101      	add	r1, pc, #4	@ (adr r1, 802220c <_printf_i+0x40>)
 8022208:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 802220c:	08022265 	.word	0x08022265
 8022210:	08022279 	.word	0x08022279
 8022214:	080221f5 	.word	0x080221f5
 8022218:	080221f5 	.word	0x080221f5
 802221c:	080221f5 	.word	0x080221f5
 8022220:	080221f5 	.word	0x080221f5
 8022224:	08022279 	.word	0x08022279
 8022228:	080221f5 	.word	0x080221f5
 802222c:	080221f5 	.word	0x080221f5
 8022230:	080221f5 	.word	0x080221f5
 8022234:	080221f5 	.word	0x080221f5
 8022238:	08022379 	.word	0x08022379
 802223c:	080222a3 	.word	0x080222a3
 8022240:	08022333 	.word	0x08022333
 8022244:	080221f5 	.word	0x080221f5
 8022248:	080221f5 	.word	0x080221f5
 802224c:	0802239b 	.word	0x0802239b
 8022250:	080221f5 	.word	0x080221f5
 8022254:	080222a3 	.word	0x080222a3
 8022258:	080221f5 	.word	0x080221f5
 802225c:	080221f5 	.word	0x080221f5
 8022260:	0802233b 	.word	0x0802233b
 8022264:	6833      	ldr	r3, [r6, #0]
 8022266:	1d1a      	adds	r2, r3, #4
 8022268:	681b      	ldr	r3, [r3, #0]
 802226a:	6032      	str	r2, [r6, #0]
 802226c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022270:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022274:	2301      	movs	r3, #1
 8022276:	e09d      	b.n	80223b4 <_printf_i+0x1e8>
 8022278:	6833      	ldr	r3, [r6, #0]
 802227a:	6820      	ldr	r0, [r4, #0]
 802227c:	1d19      	adds	r1, r3, #4
 802227e:	6031      	str	r1, [r6, #0]
 8022280:	0606      	lsls	r6, r0, #24
 8022282:	d501      	bpl.n	8022288 <_printf_i+0xbc>
 8022284:	681d      	ldr	r5, [r3, #0]
 8022286:	e003      	b.n	8022290 <_printf_i+0xc4>
 8022288:	0645      	lsls	r5, r0, #25
 802228a:	d5fb      	bpl.n	8022284 <_printf_i+0xb8>
 802228c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022290:	2d00      	cmp	r5, #0
 8022292:	da03      	bge.n	802229c <_printf_i+0xd0>
 8022294:	232d      	movs	r3, #45	@ 0x2d
 8022296:	426d      	negs	r5, r5
 8022298:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 802229c:	4859      	ldr	r0, [pc, #356]	@ (8022404 <_printf_i+0x238>)
 802229e:	230a      	movs	r3, #10
 80222a0:	e011      	b.n	80222c6 <_printf_i+0xfa>
 80222a2:	6821      	ldr	r1, [r4, #0]
 80222a4:	6833      	ldr	r3, [r6, #0]
 80222a6:	0608      	lsls	r0, r1, #24
 80222a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80222ac:	d402      	bmi.n	80222b4 <_printf_i+0xe8>
 80222ae:	0649      	lsls	r1, r1, #25
 80222b0:	bf48      	it	mi
 80222b2:	b2ad      	uxthmi	r5, r5
 80222b4:	2f6f      	cmp	r7, #111	@ 0x6f
 80222b6:	4853      	ldr	r0, [pc, #332]	@ (8022404 <_printf_i+0x238>)
 80222b8:	6033      	str	r3, [r6, #0]
 80222ba:	bf14      	ite	ne
 80222bc:	230a      	movne	r3, #10
 80222be:	2308      	moveq	r3, #8
 80222c0:	2100      	movs	r1, #0
 80222c2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80222c6:	6866      	ldr	r6, [r4, #4]
 80222c8:	60a6      	str	r6, [r4, #8]
 80222ca:	2e00      	cmp	r6, #0
 80222cc:	bfa2      	ittt	ge
 80222ce:	6821      	ldrge	r1, [r4, #0]
 80222d0:	f021 0104 	bicge.w	r1, r1, #4
 80222d4:	6021      	strge	r1, [r4, #0]
 80222d6:	b90d      	cbnz	r5, 80222dc <_printf_i+0x110>
 80222d8:	2e00      	cmp	r6, #0
 80222da:	d04b      	beq.n	8022374 <_printf_i+0x1a8>
 80222dc:	4616      	mov	r6, r2
 80222de:	fbb5 f1f3 	udiv	r1, r5, r3
 80222e2:	fb03 5711 	mls	r7, r3, r1, r5
 80222e6:	5dc7      	ldrb	r7, [r0, r7]
 80222e8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80222ec:	462f      	mov	r7, r5
 80222ee:	42bb      	cmp	r3, r7
 80222f0:	460d      	mov	r5, r1
 80222f2:	d9f4      	bls.n	80222de <_printf_i+0x112>
 80222f4:	2b08      	cmp	r3, #8
 80222f6:	d10b      	bne.n	8022310 <_printf_i+0x144>
 80222f8:	6823      	ldr	r3, [r4, #0]
 80222fa:	07df      	lsls	r7, r3, #31
 80222fc:	d508      	bpl.n	8022310 <_printf_i+0x144>
 80222fe:	6923      	ldr	r3, [r4, #16]
 8022300:	6861      	ldr	r1, [r4, #4]
 8022302:	4299      	cmp	r1, r3
 8022304:	bfde      	ittt	le
 8022306:	2330      	movle	r3, #48	@ 0x30
 8022308:	f806 3c01 	strble.w	r3, [r6, #-1]
 802230c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022310:	1b92      	subs	r2, r2, r6
 8022312:	6122      	str	r2, [r4, #16]
 8022314:	f8cd a000 	str.w	sl, [sp]
 8022318:	464b      	mov	r3, r9
 802231a:	aa03      	add	r2, sp, #12
 802231c:	4621      	mov	r1, r4
 802231e:	4640      	mov	r0, r8
 8022320:	f7ff fee6 	bl	80220f0 <_printf_common>
 8022324:	3001      	adds	r0, #1
 8022326:	d14a      	bne.n	80223be <_printf_i+0x1f2>
 8022328:	f04f 30ff 	mov.w	r0, #4294967295
 802232c:	b004      	add	sp, #16
 802232e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022332:	6823      	ldr	r3, [r4, #0]
 8022334:	f043 0320 	orr.w	r3, r3, #32
 8022338:	6023      	str	r3, [r4, #0]
 802233a:	4833      	ldr	r0, [pc, #204]	@ (8022408 <_printf_i+0x23c>)
 802233c:	2778      	movs	r7, #120	@ 0x78
 802233e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022342:	6823      	ldr	r3, [r4, #0]
 8022344:	6831      	ldr	r1, [r6, #0]
 8022346:	061f      	lsls	r7, r3, #24
 8022348:	f851 5b04 	ldr.w	r5, [r1], #4
 802234c:	d402      	bmi.n	8022354 <_printf_i+0x188>
 802234e:	065f      	lsls	r7, r3, #25
 8022350:	bf48      	it	mi
 8022352:	b2ad      	uxthmi	r5, r5
 8022354:	6031      	str	r1, [r6, #0]
 8022356:	07d9      	lsls	r1, r3, #31
 8022358:	bf44      	itt	mi
 802235a:	f043 0320 	orrmi.w	r3, r3, #32
 802235e:	6023      	strmi	r3, [r4, #0]
 8022360:	b11d      	cbz	r5, 802236a <_printf_i+0x19e>
 8022362:	2310      	movs	r3, #16
 8022364:	e7ac      	b.n	80222c0 <_printf_i+0xf4>
 8022366:	4827      	ldr	r0, [pc, #156]	@ (8022404 <_printf_i+0x238>)
 8022368:	e7e9      	b.n	802233e <_printf_i+0x172>
 802236a:	6823      	ldr	r3, [r4, #0]
 802236c:	f023 0320 	bic.w	r3, r3, #32
 8022370:	6023      	str	r3, [r4, #0]
 8022372:	e7f6      	b.n	8022362 <_printf_i+0x196>
 8022374:	4616      	mov	r6, r2
 8022376:	e7bd      	b.n	80222f4 <_printf_i+0x128>
 8022378:	6833      	ldr	r3, [r6, #0]
 802237a:	6825      	ldr	r5, [r4, #0]
 802237c:	6961      	ldr	r1, [r4, #20]
 802237e:	1d18      	adds	r0, r3, #4
 8022380:	6030      	str	r0, [r6, #0]
 8022382:	062e      	lsls	r6, r5, #24
 8022384:	681b      	ldr	r3, [r3, #0]
 8022386:	d501      	bpl.n	802238c <_printf_i+0x1c0>
 8022388:	6019      	str	r1, [r3, #0]
 802238a:	e002      	b.n	8022392 <_printf_i+0x1c6>
 802238c:	0668      	lsls	r0, r5, #25
 802238e:	d5fb      	bpl.n	8022388 <_printf_i+0x1bc>
 8022390:	8019      	strh	r1, [r3, #0]
 8022392:	2300      	movs	r3, #0
 8022394:	6123      	str	r3, [r4, #16]
 8022396:	4616      	mov	r6, r2
 8022398:	e7bc      	b.n	8022314 <_printf_i+0x148>
 802239a:	6833      	ldr	r3, [r6, #0]
 802239c:	1d1a      	adds	r2, r3, #4
 802239e:	6032      	str	r2, [r6, #0]
 80223a0:	681e      	ldr	r6, [r3, #0]
 80223a2:	6862      	ldr	r2, [r4, #4]
 80223a4:	2100      	movs	r1, #0
 80223a6:	4630      	mov	r0, r6
 80223a8:	f7dd ffb2 	bl	8000310 <memchr>
 80223ac:	b108      	cbz	r0, 80223b2 <_printf_i+0x1e6>
 80223ae:	1b80      	subs	r0, r0, r6
 80223b0:	6060      	str	r0, [r4, #4]
 80223b2:	6863      	ldr	r3, [r4, #4]
 80223b4:	6123      	str	r3, [r4, #16]
 80223b6:	2300      	movs	r3, #0
 80223b8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80223bc:	e7aa      	b.n	8022314 <_printf_i+0x148>
 80223be:	6923      	ldr	r3, [r4, #16]
 80223c0:	4632      	mov	r2, r6
 80223c2:	4649      	mov	r1, r9
 80223c4:	4640      	mov	r0, r8
 80223c6:	47d0      	blx	sl
 80223c8:	3001      	adds	r0, #1
 80223ca:	d0ad      	beq.n	8022328 <_printf_i+0x15c>
 80223cc:	6823      	ldr	r3, [r4, #0]
 80223ce:	079b      	lsls	r3, r3, #30
 80223d0:	d413      	bmi.n	80223fa <_printf_i+0x22e>
 80223d2:	68e0      	ldr	r0, [r4, #12]
 80223d4:	9b03      	ldr	r3, [sp, #12]
 80223d6:	4298      	cmp	r0, r3
 80223d8:	bfb8      	it	lt
 80223da:	4618      	movlt	r0, r3
 80223dc:	e7a6      	b.n	802232c <_printf_i+0x160>
 80223de:	2301      	movs	r3, #1
 80223e0:	4632      	mov	r2, r6
 80223e2:	4649      	mov	r1, r9
 80223e4:	4640      	mov	r0, r8
 80223e6:	47d0      	blx	sl
 80223e8:	3001      	adds	r0, #1
 80223ea:	d09d      	beq.n	8022328 <_printf_i+0x15c>
 80223ec:	3501      	adds	r5, #1
 80223ee:	68e3      	ldr	r3, [r4, #12]
 80223f0:	9903      	ldr	r1, [sp, #12]
 80223f2:	1a5b      	subs	r3, r3, r1
 80223f4:	42ab      	cmp	r3, r5
 80223f6:	dcf2      	bgt.n	80223de <_printf_i+0x212>
 80223f8:	e7eb      	b.n	80223d2 <_printf_i+0x206>
 80223fa:	2500      	movs	r5, #0
 80223fc:	f104 0619 	add.w	r6, r4, #25
 8022400:	e7f5      	b.n	80223ee <_printf_i+0x222>
 8022402:	bf00      	nop
 8022404:	08025f05 	.word	0x08025f05
 8022408:	08025f16 	.word	0x08025f16

0802240c <__swbuf_r>:
 802240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802240e:	460e      	mov	r6, r1
 8022410:	4614      	mov	r4, r2
 8022412:	4605      	mov	r5, r0
 8022414:	b118      	cbz	r0, 802241e <__swbuf_r+0x12>
 8022416:	6a03      	ldr	r3, [r0, #32]
 8022418:	b90b      	cbnz	r3, 802241e <__swbuf_r+0x12>
 802241a:	f7ff f9ef 	bl	80217fc <__sinit>
 802241e:	69a3      	ldr	r3, [r4, #24]
 8022420:	60a3      	str	r3, [r4, #8]
 8022422:	89a3      	ldrh	r3, [r4, #12]
 8022424:	071a      	lsls	r2, r3, #28
 8022426:	d501      	bpl.n	802242c <__swbuf_r+0x20>
 8022428:	6923      	ldr	r3, [r4, #16]
 802242a:	b943      	cbnz	r3, 802243e <__swbuf_r+0x32>
 802242c:	4621      	mov	r1, r4
 802242e:	4628      	mov	r0, r5
 8022430:	f000 f82a 	bl	8022488 <__swsetup_r>
 8022434:	b118      	cbz	r0, 802243e <__swbuf_r+0x32>
 8022436:	f04f 37ff 	mov.w	r7, #4294967295
 802243a:	4638      	mov	r0, r7
 802243c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 802243e:	6823      	ldr	r3, [r4, #0]
 8022440:	6922      	ldr	r2, [r4, #16]
 8022442:	1a98      	subs	r0, r3, r2
 8022444:	6963      	ldr	r3, [r4, #20]
 8022446:	b2f6      	uxtb	r6, r6
 8022448:	4283      	cmp	r3, r0
 802244a:	4637      	mov	r7, r6
 802244c:	dc05      	bgt.n	802245a <__swbuf_r+0x4e>
 802244e:	4621      	mov	r1, r4
 8022450:	4628      	mov	r0, r5
 8022452:	f7ff fcbb 	bl	8021dcc <_fflush_r>
 8022456:	2800      	cmp	r0, #0
 8022458:	d1ed      	bne.n	8022436 <__swbuf_r+0x2a>
 802245a:	68a3      	ldr	r3, [r4, #8]
 802245c:	3b01      	subs	r3, #1
 802245e:	60a3      	str	r3, [r4, #8]
 8022460:	6823      	ldr	r3, [r4, #0]
 8022462:	1c5a      	adds	r2, r3, #1
 8022464:	6022      	str	r2, [r4, #0]
 8022466:	701e      	strb	r6, [r3, #0]
 8022468:	6962      	ldr	r2, [r4, #20]
 802246a:	1c43      	adds	r3, r0, #1
 802246c:	429a      	cmp	r2, r3
 802246e:	d004      	beq.n	802247a <__swbuf_r+0x6e>
 8022470:	89a3      	ldrh	r3, [r4, #12]
 8022472:	07db      	lsls	r3, r3, #31
 8022474:	d5e1      	bpl.n	802243a <__swbuf_r+0x2e>
 8022476:	2e0a      	cmp	r6, #10
 8022478:	d1df      	bne.n	802243a <__swbuf_r+0x2e>
 802247a:	4621      	mov	r1, r4
 802247c:	4628      	mov	r0, r5
 802247e:	f7ff fca5 	bl	8021dcc <_fflush_r>
 8022482:	2800      	cmp	r0, #0
 8022484:	d0d9      	beq.n	802243a <__swbuf_r+0x2e>
 8022486:	e7d6      	b.n	8022436 <__swbuf_r+0x2a>

08022488 <__swsetup_r>:
 8022488:	b538      	push	{r3, r4, r5, lr}
 802248a:	4b29      	ldr	r3, [pc, #164]	@ (8022530 <__swsetup_r+0xa8>)
 802248c:	4605      	mov	r5, r0
 802248e:	6818      	ldr	r0, [r3, #0]
 8022490:	460c      	mov	r4, r1
 8022492:	b118      	cbz	r0, 802249c <__swsetup_r+0x14>
 8022494:	6a03      	ldr	r3, [r0, #32]
 8022496:	b90b      	cbnz	r3, 802249c <__swsetup_r+0x14>
 8022498:	f7ff f9b0 	bl	80217fc <__sinit>
 802249c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80224a0:	0719      	lsls	r1, r3, #28
 80224a2:	d422      	bmi.n	80224ea <__swsetup_r+0x62>
 80224a4:	06da      	lsls	r2, r3, #27
 80224a6:	d407      	bmi.n	80224b8 <__swsetup_r+0x30>
 80224a8:	2209      	movs	r2, #9
 80224aa:	602a      	str	r2, [r5, #0]
 80224ac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80224b0:	81a3      	strh	r3, [r4, #12]
 80224b2:	f04f 30ff 	mov.w	r0, #4294967295
 80224b6:	e033      	b.n	8022520 <__swsetup_r+0x98>
 80224b8:	0758      	lsls	r0, r3, #29
 80224ba:	d512      	bpl.n	80224e2 <__swsetup_r+0x5a>
 80224bc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80224be:	b141      	cbz	r1, 80224d2 <__swsetup_r+0x4a>
 80224c0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80224c4:	4299      	cmp	r1, r3
 80224c6:	d002      	beq.n	80224ce <__swsetup_r+0x46>
 80224c8:	4628      	mov	r0, r5
 80224ca:	f7ff fafb 	bl	8021ac4 <_free_r>
 80224ce:	2300      	movs	r3, #0
 80224d0:	6363      	str	r3, [r4, #52]	@ 0x34
 80224d2:	89a3      	ldrh	r3, [r4, #12]
 80224d4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80224d8:	81a3      	strh	r3, [r4, #12]
 80224da:	2300      	movs	r3, #0
 80224dc:	6063      	str	r3, [r4, #4]
 80224de:	6923      	ldr	r3, [r4, #16]
 80224e0:	6023      	str	r3, [r4, #0]
 80224e2:	89a3      	ldrh	r3, [r4, #12]
 80224e4:	f043 0308 	orr.w	r3, r3, #8
 80224e8:	81a3      	strh	r3, [r4, #12]
 80224ea:	6923      	ldr	r3, [r4, #16]
 80224ec:	b94b      	cbnz	r3, 8022502 <__swsetup_r+0x7a>
 80224ee:	89a3      	ldrh	r3, [r4, #12]
 80224f0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80224f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80224f8:	d003      	beq.n	8022502 <__swsetup_r+0x7a>
 80224fa:	4621      	mov	r1, r4
 80224fc:	4628      	mov	r0, r5
 80224fe:	f000 f883 	bl	8022608 <__smakebuf_r>
 8022502:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022506:	f013 0201 	ands.w	r2, r3, #1
 802250a:	d00a      	beq.n	8022522 <__swsetup_r+0x9a>
 802250c:	2200      	movs	r2, #0
 802250e:	60a2      	str	r2, [r4, #8]
 8022510:	6962      	ldr	r2, [r4, #20]
 8022512:	4252      	negs	r2, r2
 8022514:	61a2      	str	r2, [r4, #24]
 8022516:	6922      	ldr	r2, [r4, #16]
 8022518:	b942      	cbnz	r2, 802252c <__swsetup_r+0xa4>
 802251a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 802251e:	d1c5      	bne.n	80224ac <__swsetup_r+0x24>
 8022520:	bd38      	pop	{r3, r4, r5, pc}
 8022522:	0799      	lsls	r1, r3, #30
 8022524:	bf58      	it	pl
 8022526:	6962      	ldrpl	r2, [r4, #20]
 8022528:	60a2      	str	r2, [r4, #8]
 802252a:	e7f4      	b.n	8022516 <__swsetup_r+0x8e>
 802252c:	2000      	movs	r0, #0
 802252e:	e7f7      	b.n	8022520 <__swsetup_r+0x98>
 8022530:	20000038 	.word	0x20000038

08022534 <_raise_r>:
 8022534:	291f      	cmp	r1, #31
 8022536:	b538      	push	{r3, r4, r5, lr}
 8022538:	4605      	mov	r5, r0
 802253a:	460c      	mov	r4, r1
 802253c:	d904      	bls.n	8022548 <_raise_r+0x14>
 802253e:	2316      	movs	r3, #22
 8022540:	6003      	str	r3, [r0, #0]
 8022542:	f04f 30ff 	mov.w	r0, #4294967295
 8022546:	bd38      	pop	{r3, r4, r5, pc}
 8022548:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 802254a:	b112      	cbz	r2, 8022552 <_raise_r+0x1e>
 802254c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022550:	b94b      	cbnz	r3, 8022566 <_raise_r+0x32>
 8022552:	4628      	mov	r0, r5
 8022554:	f000 f830 	bl	80225b8 <_getpid_r>
 8022558:	4622      	mov	r2, r4
 802255a:	4601      	mov	r1, r0
 802255c:	4628      	mov	r0, r5
 802255e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022562:	f000 b817 	b.w	8022594 <_kill_r>
 8022566:	2b01      	cmp	r3, #1
 8022568:	d00a      	beq.n	8022580 <_raise_r+0x4c>
 802256a:	1c59      	adds	r1, r3, #1
 802256c:	d103      	bne.n	8022576 <_raise_r+0x42>
 802256e:	2316      	movs	r3, #22
 8022570:	6003      	str	r3, [r0, #0]
 8022572:	2001      	movs	r0, #1
 8022574:	e7e7      	b.n	8022546 <_raise_r+0x12>
 8022576:	2100      	movs	r1, #0
 8022578:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 802257c:	4620      	mov	r0, r4
 802257e:	4798      	blx	r3
 8022580:	2000      	movs	r0, #0
 8022582:	e7e0      	b.n	8022546 <_raise_r+0x12>

08022584 <raise>:
 8022584:	4b02      	ldr	r3, [pc, #8]	@ (8022590 <raise+0xc>)
 8022586:	4601      	mov	r1, r0
 8022588:	6818      	ldr	r0, [r3, #0]
 802258a:	f7ff bfd3 	b.w	8022534 <_raise_r>
 802258e:	bf00      	nop
 8022590:	20000038 	.word	0x20000038

08022594 <_kill_r>:
 8022594:	b538      	push	{r3, r4, r5, lr}
 8022596:	4d07      	ldr	r5, [pc, #28]	@ (80225b4 <_kill_r+0x20>)
 8022598:	2300      	movs	r3, #0
 802259a:	4604      	mov	r4, r0
 802259c:	4608      	mov	r0, r1
 802259e:	4611      	mov	r1, r2
 80225a0:	602b      	str	r3, [r5, #0]
 80225a2:	f7df fc25 	bl	8001df0 <_kill>
 80225a6:	1c43      	adds	r3, r0, #1
 80225a8:	d102      	bne.n	80225b0 <_kill_r+0x1c>
 80225aa:	682b      	ldr	r3, [r5, #0]
 80225ac:	b103      	cbz	r3, 80225b0 <_kill_r+0x1c>
 80225ae:	6023      	str	r3, [r4, #0]
 80225b0:	bd38      	pop	{r3, r4, r5, pc}
 80225b2:	bf00      	nop
 80225b4:	20002520 	.word	0x20002520

080225b8 <_getpid_r>:
 80225b8:	f7df bc12 	b.w	8001de0 <_getpid>

080225bc <__swhatbuf_r>:
 80225bc:	b570      	push	{r4, r5, r6, lr}
 80225be:	460c      	mov	r4, r1
 80225c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80225c4:	2900      	cmp	r1, #0
 80225c6:	b096      	sub	sp, #88	@ 0x58
 80225c8:	4615      	mov	r5, r2
 80225ca:	461e      	mov	r6, r3
 80225cc:	da0d      	bge.n	80225ea <__swhatbuf_r+0x2e>
 80225ce:	89a3      	ldrh	r3, [r4, #12]
 80225d0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80225d4:	f04f 0100 	mov.w	r1, #0
 80225d8:	bf14      	ite	ne
 80225da:	2340      	movne	r3, #64	@ 0x40
 80225dc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80225e0:	2000      	movs	r0, #0
 80225e2:	6031      	str	r1, [r6, #0]
 80225e4:	602b      	str	r3, [r5, #0]
 80225e6:	b016      	add	sp, #88	@ 0x58
 80225e8:	bd70      	pop	{r4, r5, r6, pc}
 80225ea:	466a      	mov	r2, sp
 80225ec:	f000 f848 	bl	8022680 <_fstat_r>
 80225f0:	2800      	cmp	r0, #0
 80225f2:	dbec      	blt.n	80225ce <__swhatbuf_r+0x12>
 80225f4:	9901      	ldr	r1, [sp, #4]
 80225f6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80225fa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80225fe:	4259      	negs	r1, r3
 8022600:	4159      	adcs	r1, r3
 8022602:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022606:	e7eb      	b.n	80225e0 <__swhatbuf_r+0x24>

08022608 <__smakebuf_r>:
 8022608:	898b      	ldrh	r3, [r1, #12]
 802260a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 802260c:	079d      	lsls	r5, r3, #30
 802260e:	4606      	mov	r6, r0
 8022610:	460c      	mov	r4, r1
 8022612:	d507      	bpl.n	8022624 <__smakebuf_r+0x1c>
 8022614:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022618:	6023      	str	r3, [r4, #0]
 802261a:	6123      	str	r3, [r4, #16]
 802261c:	2301      	movs	r3, #1
 802261e:	6163      	str	r3, [r4, #20]
 8022620:	b003      	add	sp, #12
 8022622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022624:	ab01      	add	r3, sp, #4
 8022626:	466a      	mov	r2, sp
 8022628:	f7ff ffc8 	bl	80225bc <__swhatbuf_r>
 802262c:	9f00      	ldr	r7, [sp, #0]
 802262e:	4605      	mov	r5, r0
 8022630:	4639      	mov	r1, r7
 8022632:	4630      	mov	r0, r6
 8022634:	f7ff faba 	bl	8021bac <_malloc_r>
 8022638:	b948      	cbnz	r0, 802264e <__smakebuf_r+0x46>
 802263a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 802263e:	059a      	lsls	r2, r3, #22
 8022640:	d4ee      	bmi.n	8022620 <__smakebuf_r+0x18>
 8022642:	f023 0303 	bic.w	r3, r3, #3
 8022646:	f043 0302 	orr.w	r3, r3, #2
 802264a:	81a3      	strh	r3, [r4, #12]
 802264c:	e7e2      	b.n	8022614 <__smakebuf_r+0xc>
 802264e:	89a3      	ldrh	r3, [r4, #12]
 8022650:	6020      	str	r0, [r4, #0]
 8022652:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022656:	81a3      	strh	r3, [r4, #12]
 8022658:	9b01      	ldr	r3, [sp, #4]
 802265a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 802265e:	b15b      	cbz	r3, 8022678 <__smakebuf_r+0x70>
 8022660:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022664:	4630      	mov	r0, r6
 8022666:	f000 f81d 	bl	80226a4 <_isatty_r>
 802266a:	b128      	cbz	r0, 8022678 <__smakebuf_r+0x70>
 802266c:	89a3      	ldrh	r3, [r4, #12]
 802266e:	f023 0303 	bic.w	r3, r3, #3
 8022672:	f043 0301 	orr.w	r3, r3, #1
 8022676:	81a3      	strh	r3, [r4, #12]
 8022678:	89a3      	ldrh	r3, [r4, #12]
 802267a:	431d      	orrs	r5, r3
 802267c:	81a5      	strh	r5, [r4, #12]
 802267e:	e7cf      	b.n	8022620 <__smakebuf_r+0x18>

08022680 <_fstat_r>:
 8022680:	b538      	push	{r3, r4, r5, lr}
 8022682:	4d07      	ldr	r5, [pc, #28]	@ (80226a0 <_fstat_r+0x20>)
 8022684:	2300      	movs	r3, #0
 8022686:	4604      	mov	r4, r0
 8022688:	4608      	mov	r0, r1
 802268a:	4611      	mov	r1, r2
 802268c:	602b      	str	r3, [r5, #0]
 802268e:	f7df fc0f 	bl	8001eb0 <_fstat>
 8022692:	1c43      	adds	r3, r0, #1
 8022694:	d102      	bne.n	802269c <_fstat_r+0x1c>
 8022696:	682b      	ldr	r3, [r5, #0]
 8022698:	b103      	cbz	r3, 802269c <_fstat_r+0x1c>
 802269a:	6023      	str	r3, [r4, #0]
 802269c:	bd38      	pop	{r3, r4, r5, pc}
 802269e:	bf00      	nop
 80226a0:	20002520 	.word	0x20002520

080226a4 <_isatty_r>:
 80226a4:	b538      	push	{r3, r4, r5, lr}
 80226a6:	4d06      	ldr	r5, [pc, #24]	@ (80226c0 <_isatty_r+0x1c>)
 80226a8:	2300      	movs	r3, #0
 80226aa:	4604      	mov	r4, r0
 80226ac:	4608      	mov	r0, r1
 80226ae:	602b      	str	r3, [r5, #0]
 80226b0:	f7df fc0e 	bl	8001ed0 <_isatty>
 80226b4:	1c43      	adds	r3, r0, #1
 80226b6:	d102      	bne.n	80226be <_isatty_r+0x1a>
 80226b8:	682b      	ldr	r3, [r5, #0]
 80226ba:	b103      	cbz	r3, 80226be <_isatty_r+0x1a>
 80226bc:	6023      	str	r3, [r4, #0]
 80226be:	bd38      	pop	{r3, r4, r5, pc}
 80226c0:	20002520 	.word	0x20002520

080226c4 <_init>:
 80226c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226c6:	bf00      	nop
 80226c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80226ca:	bc08      	pop	{r3}
 80226cc:	469e      	mov	lr, r3
 80226ce:	4770      	bx	lr

080226d0 <_fini>:
 80226d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80226d2:	bf00      	nop
 80226d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80226d6:	bc08      	pop	{r3}
 80226d8:	469e      	mov	lr, r3
 80226da:	4770      	bx	lr
