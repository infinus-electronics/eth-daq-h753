
eth-daq-h753.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00022b30  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000384c  08022dd0  08022dd0  00023dd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802661c  0802661c  0002761c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08026624  08026624  00027624  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  08026628  08026628  00027628  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000088  20000000  0802662c  00028000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000024fc  20000088  080266b4  00028088  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  20002584  080266b4  00028584  2**0
                  ALLOC
  9 .dtcm_data    00018000  20002b88  080266b4  00028b88  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .ethernet_data 000580c0  24000000  24000000  00041000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .ram2_data    00024000  30000000  30000000  0009a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ram3_data    00008004  38000000  38000000  000be000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000c6004  2**0
                  CONTENTS, READONLY
 14 .debug_info   00062f1b  00000000  00000000  000c6032  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000c017  00000000  00000000  00128f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00003158  00000000  00000000  00134f68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00002789  00000000  00000000  001380c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0004f64c  00000000  00000000  0013a849  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0005c5b7  00000000  00000000  00189e95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    00191db3  00000000  00000000  001e644c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000043  00000000  00000000  003781ff  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000d6b8  00000000  00000000  00378244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000068  00000000  00000000  003858fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	20000088 	.word	0x20000088
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08022db8 	.word	0x08022db8

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	2000008c 	.word	0x2000008c
 80002dc:	08022db8 	.word	0x08022db8

080002e0 <strcmp>:
 80002e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80002e4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80002e8:	2a01      	cmp	r2, #1
 80002ea:	bf28      	it	cs
 80002ec:	429a      	cmpcs	r2, r3
 80002ee:	d0f7      	beq.n	80002e0 <strcmp>
 80002f0:	1ad0      	subs	r0, r2, r3
 80002f2:	4770      	bx	lr

080002f4 <strlen>:
 80002f4:	4603      	mov	r3, r0
 80002f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002fa:	2a00      	cmp	r2, #0
 80002fc:	d1fb      	bne.n	80002f6 <strlen+0x2>
 80002fe:	1a18      	subs	r0, r3, r0
 8000300:	3801      	subs	r0, #1
 8000302:	4770      	bx	lr
	...

08000310 <memchr>:
 8000310:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000314:	2a10      	cmp	r2, #16
 8000316:	db2b      	blt.n	8000370 <memchr+0x60>
 8000318:	f010 0f07 	tst.w	r0, #7
 800031c:	d008      	beq.n	8000330 <memchr+0x20>
 800031e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000322:	3a01      	subs	r2, #1
 8000324:	428b      	cmp	r3, r1
 8000326:	d02d      	beq.n	8000384 <memchr+0x74>
 8000328:	f010 0f07 	tst.w	r0, #7
 800032c:	b342      	cbz	r2, 8000380 <memchr+0x70>
 800032e:	d1f6      	bne.n	800031e <memchr+0xe>
 8000330:	b4f0      	push	{r4, r5, r6, r7}
 8000332:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000336:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800033a:	f022 0407 	bic.w	r4, r2, #7
 800033e:	f07f 0700 	mvns.w	r7, #0
 8000342:	2300      	movs	r3, #0
 8000344:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000348:	3c08      	subs	r4, #8
 800034a:	ea85 0501 	eor.w	r5, r5, r1
 800034e:	ea86 0601 	eor.w	r6, r6, r1
 8000352:	fa85 f547 	uadd8	r5, r5, r7
 8000356:	faa3 f587 	sel	r5, r3, r7
 800035a:	fa86 f647 	uadd8	r6, r6, r7
 800035e:	faa5 f687 	sel	r6, r5, r7
 8000362:	b98e      	cbnz	r6, 8000388 <memchr+0x78>
 8000364:	d1ee      	bne.n	8000344 <memchr+0x34>
 8000366:	bcf0      	pop	{r4, r5, r6, r7}
 8000368:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800036c:	f002 0207 	and.w	r2, r2, #7
 8000370:	b132      	cbz	r2, 8000380 <memchr+0x70>
 8000372:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000376:	3a01      	subs	r2, #1
 8000378:	ea83 0301 	eor.w	r3, r3, r1
 800037c:	b113      	cbz	r3, 8000384 <memchr+0x74>
 800037e:	d1f8      	bne.n	8000372 <memchr+0x62>
 8000380:	2000      	movs	r0, #0
 8000382:	4770      	bx	lr
 8000384:	3801      	subs	r0, #1
 8000386:	4770      	bx	lr
 8000388:	2d00      	cmp	r5, #0
 800038a:	bf06      	itte	eq
 800038c:	4635      	moveq	r5, r6
 800038e:	3803      	subeq	r0, #3
 8000390:	3807      	subne	r0, #7
 8000392:	f015 0f01 	tst.w	r5, #1
 8000396:	d107      	bne.n	80003a8 <memchr+0x98>
 8000398:	3001      	adds	r0, #1
 800039a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800039e:	bf02      	ittt	eq
 80003a0:	3001      	addeq	r0, #1
 80003a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80003a6:	3001      	addeq	r0, #1
 80003a8:	bcf0      	pop	{r4, r5, r6, r7}
 80003aa:	3801      	subs	r0, #1
 80003ac:	4770      	bx	lr
 80003ae:	bf00      	nop

080003b0 <__aeabi_uldivmod>:
 80003b0:	b953      	cbnz	r3, 80003c8 <__aeabi_uldivmod+0x18>
 80003b2:	b94a      	cbnz	r2, 80003c8 <__aeabi_uldivmod+0x18>
 80003b4:	2900      	cmp	r1, #0
 80003b6:	bf08      	it	eq
 80003b8:	2800      	cmpeq	r0, #0
 80003ba:	bf1c      	itt	ne
 80003bc:	f04f 31ff 	movne.w	r1, #4294967295
 80003c0:	f04f 30ff 	movne.w	r0, #4294967295
 80003c4:	f000 b96a 	b.w	800069c <__aeabi_idiv0>
 80003c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003d0:	f000 f806 	bl	80003e0 <__udivmoddi4>
 80003d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003dc:	b004      	add	sp, #16
 80003de:	4770      	bx	lr

080003e0 <__udivmoddi4>:
 80003e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003e4:	9d08      	ldr	r5, [sp, #32]
 80003e6:	460c      	mov	r4, r1
 80003e8:	2b00      	cmp	r3, #0
 80003ea:	d14e      	bne.n	800048a <__udivmoddi4+0xaa>
 80003ec:	4694      	mov	ip, r2
 80003ee:	458c      	cmp	ip, r1
 80003f0:	4686      	mov	lr, r0
 80003f2:	fab2 f282 	clz	r2, r2
 80003f6:	d962      	bls.n	80004be <__udivmoddi4+0xde>
 80003f8:	b14a      	cbz	r2, 800040e <__udivmoddi4+0x2e>
 80003fa:	f1c2 0320 	rsb	r3, r2, #32
 80003fe:	4091      	lsls	r1, r2
 8000400:	fa20 f303 	lsr.w	r3, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	4319      	orrs	r1, r3
 800040a:	fa00 fe02 	lsl.w	lr, r0, r2
 800040e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000412:	fa1f f68c 	uxth.w	r6, ip
 8000416:	fbb1 f4f7 	udiv	r4, r1, r7
 800041a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041e:	fb07 1114 	mls	r1, r7, r4, r1
 8000422:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000426:	fb04 f106 	mul.w	r1, r4, r6
 800042a:	4299      	cmp	r1, r3
 800042c:	d90a      	bls.n	8000444 <__udivmoddi4+0x64>
 800042e:	eb1c 0303 	adds.w	r3, ip, r3
 8000432:	f104 30ff 	add.w	r0, r4, #4294967295
 8000436:	f080 8112 	bcs.w	800065e <__udivmoddi4+0x27e>
 800043a:	4299      	cmp	r1, r3
 800043c:	f240 810f 	bls.w	800065e <__udivmoddi4+0x27e>
 8000440:	3c02      	subs	r4, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a59      	subs	r1, r3, r1
 8000446:	fa1f f38e 	uxth.w	r3, lr
 800044a:	fbb1 f0f7 	udiv	r0, r1, r7
 800044e:	fb07 1110 	mls	r1, r7, r0, r1
 8000452:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000456:	fb00 f606 	mul.w	r6, r0, r6
 800045a:	429e      	cmp	r6, r3
 800045c:	d90a      	bls.n	8000474 <__udivmoddi4+0x94>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 31ff 	add.w	r1, r0, #4294967295
 8000466:	f080 80fc 	bcs.w	8000662 <__udivmoddi4+0x282>
 800046a:	429e      	cmp	r6, r3
 800046c:	f240 80f9 	bls.w	8000662 <__udivmoddi4+0x282>
 8000470:	4463      	add	r3, ip
 8000472:	3802      	subs	r0, #2
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800047a:	2100      	movs	r1, #0
 800047c:	b11d      	cbz	r5, 8000486 <__udivmoddi4+0xa6>
 800047e:	40d3      	lsrs	r3, r2
 8000480:	2200      	movs	r2, #0
 8000482:	e9c5 3200 	strd	r3, r2, [r5]
 8000486:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800048a:	428b      	cmp	r3, r1
 800048c:	d905      	bls.n	800049a <__udivmoddi4+0xba>
 800048e:	b10d      	cbz	r5, 8000494 <__udivmoddi4+0xb4>
 8000490:	e9c5 0100 	strd	r0, r1, [r5]
 8000494:	2100      	movs	r1, #0
 8000496:	4608      	mov	r0, r1
 8000498:	e7f5      	b.n	8000486 <__udivmoddi4+0xa6>
 800049a:	fab3 f183 	clz	r1, r3
 800049e:	2900      	cmp	r1, #0
 80004a0:	d146      	bne.n	8000530 <__udivmoddi4+0x150>
 80004a2:	42a3      	cmp	r3, r4
 80004a4:	d302      	bcc.n	80004ac <__udivmoddi4+0xcc>
 80004a6:	4290      	cmp	r0, r2
 80004a8:	f0c0 80f0 	bcc.w	800068c <__udivmoddi4+0x2ac>
 80004ac:	1a86      	subs	r6, r0, r2
 80004ae:	eb64 0303 	sbc.w	r3, r4, r3
 80004b2:	2001      	movs	r0, #1
 80004b4:	2d00      	cmp	r5, #0
 80004b6:	d0e6      	beq.n	8000486 <__udivmoddi4+0xa6>
 80004b8:	e9c5 6300 	strd	r6, r3, [r5]
 80004bc:	e7e3      	b.n	8000486 <__udivmoddi4+0xa6>
 80004be:	2a00      	cmp	r2, #0
 80004c0:	f040 8090 	bne.w	80005e4 <__udivmoddi4+0x204>
 80004c4:	eba1 040c 	sub.w	r4, r1, ip
 80004c8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004cc:	fa1f f78c 	uxth.w	r7, ip
 80004d0:	2101      	movs	r1, #1
 80004d2:	fbb4 f6f8 	udiv	r6, r4, r8
 80004d6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80004da:	fb08 4416 	mls	r4, r8, r6, r4
 80004de:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80004e2:	fb07 f006 	mul.w	r0, r7, r6
 80004e6:	4298      	cmp	r0, r3
 80004e8:	d908      	bls.n	80004fc <__udivmoddi4+0x11c>
 80004ea:	eb1c 0303 	adds.w	r3, ip, r3
 80004ee:	f106 34ff 	add.w	r4, r6, #4294967295
 80004f2:	d202      	bcs.n	80004fa <__udivmoddi4+0x11a>
 80004f4:	4298      	cmp	r0, r3
 80004f6:	f200 80cd 	bhi.w	8000694 <__udivmoddi4+0x2b4>
 80004fa:	4626      	mov	r6, r4
 80004fc:	1a1c      	subs	r4, r3, r0
 80004fe:	fa1f f38e 	uxth.w	r3, lr
 8000502:	fbb4 f0f8 	udiv	r0, r4, r8
 8000506:	fb08 4410 	mls	r4, r8, r0, r4
 800050a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800050e:	fb00 f707 	mul.w	r7, r0, r7
 8000512:	429f      	cmp	r7, r3
 8000514:	d908      	bls.n	8000528 <__udivmoddi4+0x148>
 8000516:	eb1c 0303 	adds.w	r3, ip, r3
 800051a:	f100 34ff 	add.w	r4, r0, #4294967295
 800051e:	d202      	bcs.n	8000526 <__udivmoddi4+0x146>
 8000520:	429f      	cmp	r7, r3
 8000522:	f200 80b0 	bhi.w	8000686 <__udivmoddi4+0x2a6>
 8000526:	4620      	mov	r0, r4
 8000528:	1bdb      	subs	r3, r3, r7
 800052a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800052e:	e7a5      	b.n	800047c <__udivmoddi4+0x9c>
 8000530:	f1c1 0620 	rsb	r6, r1, #32
 8000534:	408b      	lsls	r3, r1
 8000536:	fa22 f706 	lsr.w	r7, r2, r6
 800053a:	431f      	orrs	r7, r3
 800053c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000540:	fa04 f301 	lsl.w	r3, r4, r1
 8000544:	ea43 030c 	orr.w	r3, r3, ip
 8000548:	40f4      	lsrs	r4, r6
 800054a:	fa00 f801 	lsl.w	r8, r0, r1
 800054e:	0c38      	lsrs	r0, r7, #16
 8000550:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000554:	fbb4 fef0 	udiv	lr, r4, r0
 8000558:	fa1f fc87 	uxth.w	ip, r7
 800055c:	fb00 441e 	mls	r4, r0, lr, r4
 8000560:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000564:	fb0e f90c 	mul.w	r9, lr, ip
 8000568:	45a1      	cmp	r9, r4
 800056a:	fa02 f201 	lsl.w	r2, r2, r1
 800056e:	d90a      	bls.n	8000586 <__udivmoddi4+0x1a6>
 8000570:	193c      	adds	r4, r7, r4
 8000572:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000576:	f080 8084 	bcs.w	8000682 <__udivmoddi4+0x2a2>
 800057a:	45a1      	cmp	r9, r4
 800057c:	f240 8081 	bls.w	8000682 <__udivmoddi4+0x2a2>
 8000580:	f1ae 0e02 	sub.w	lr, lr, #2
 8000584:	443c      	add	r4, r7
 8000586:	eba4 0409 	sub.w	r4, r4, r9
 800058a:	fa1f f983 	uxth.w	r9, r3
 800058e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000592:	fb00 4413 	mls	r4, r0, r3, r4
 8000596:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800059a:	fb03 fc0c 	mul.w	ip, r3, ip
 800059e:	45a4      	cmp	ip, r4
 80005a0:	d907      	bls.n	80005b2 <__udivmoddi4+0x1d2>
 80005a2:	193c      	adds	r4, r7, r4
 80005a4:	f103 30ff 	add.w	r0, r3, #4294967295
 80005a8:	d267      	bcs.n	800067a <__udivmoddi4+0x29a>
 80005aa:	45a4      	cmp	ip, r4
 80005ac:	d965      	bls.n	800067a <__udivmoddi4+0x29a>
 80005ae:	3b02      	subs	r3, #2
 80005b0:	443c      	add	r4, r7
 80005b2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80005b6:	fba0 9302 	umull	r9, r3, r0, r2
 80005ba:	eba4 040c 	sub.w	r4, r4, ip
 80005be:	429c      	cmp	r4, r3
 80005c0:	46ce      	mov	lr, r9
 80005c2:	469c      	mov	ip, r3
 80005c4:	d351      	bcc.n	800066a <__udivmoddi4+0x28a>
 80005c6:	d04e      	beq.n	8000666 <__udivmoddi4+0x286>
 80005c8:	b155      	cbz	r5, 80005e0 <__udivmoddi4+0x200>
 80005ca:	ebb8 030e 	subs.w	r3, r8, lr
 80005ce:	eb64 040c 	sbc.w	r4, r4, ip
 80005d2:	fa04 f606 	lsl.w	r6, r4, r6
 80005d6:	40cb      	lsrs	r3, r1
 80005d8:	431e      	orrs	r6, r3
 80005da:	40cc      	lsrs	r4, r1
 80005dc:	e9c5 6400 	strd	r6, r4, [r5]
 80005e0:	2100      	movs	r1, #0
 80005e2:	e750      	b.n	8000486 <__udivmoddi4+0xa6>
 80005e4:	f1c2 0320 	rsb	r3, r2, #32
 80005e8:	fa20 f103 	lsr.w	r1, r0, r3
 80005ec:	fa0c fc02 	lsl.w	ip, ip, r2
 80005f0:	fa24 f303 	lsr.w	r3, r4, r3
 80005f4:	4094      	lsls	r4, r2
 80005f6:	430c      	orrs	r4, r1
 80005f8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80005fc:	fa00 fe02 	lsl.w	lr, r0, r2
 8000600:	fa1f f78c 	uxth.w	r7, ip
 8000604:	fbb3 f0f8 	udiv	r0, r3, r8
 8000608:	fb08 3110 	mls	r1, r8, r0, r3
 800060c:	0c23      	lsrs	r3, r4, #16
 800060e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000612:	fb00 f107 	mul.w	r1, r0, r7
 8000616:	4299      	cmp	r1, r3
 8000618:	d908      	bls.n	800062c <__udivmoddi4+0x24c>
 800061a:	eb1c 0303 	adds.w	r3, ip, r3
 800061e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000622:	d22c      	bcs.n	800067e <__udivmoddi4+0x29e>
 8000624:	4299      	cmp	r1, r3
 8000626:	d92a      	bls.n	800067e <__udivmoddi4+0x29e>
 8000628:	3802      	subs	r0, #2
 800062a:	4463      	add	r3, ip
 800062c:	1a5b      	subs	r3, r3, r1
 800062e:	b2a4      	uxth	r4, r4
 8000630:	fbb3 f1f8 	udiv	r1, r3, r8
 8000634:	fb08 3311 	mls	r3, r8, r1, r3
 8000638:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800063c:	fb01 f307 	mul.w	r3, r1, r7
 8000640:	42a3      	cmp	r3, r4
 8000642:	d908      	bls.n	8000656 <__udivmoddi4+0x276>
 8000644:	eb1c 0404 	adds.w	r4, ip, r4
 8000648:	f101 36ff 	add.w	r6, r1, #4294967295
 800064c:	d213      	bcs.n	8000676 <__udivmoddi4+0x296>
 800064e:	42a3      	cmp	r3, r4
 8000650:	d911      	bls.n	8000676 <__udivmoddi4+0x296>
 8000652:	3902      	subs	r1, #2
 8000654:	4464      	add	r4, ip
 8000656:	1ae4      	subs	r4, r4, r3
 8000658:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800065c:	e739      	b.n	80004d2 <__udivmoddi4+0xf2>
 800065e:	4604      	mov	r4, r0
 8000660:	e6f0      	b.n	8000444 <__udivmoddi4+0x64>
 8000662:	4608      	mov	r0, r1
 8000664:	e706      	b.n	8000474 <__udivmoddi4+0x94>
 8000666:	45c8      	cmp	r8, r9
 8000668:	d2ae      	bcs.n	80005c8 <__udivmoddi4+0x1e8>
 800066a:	ebb9 0e02 	subs.w	lr, r9, r2
 800066e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000672:	3801      	subs	r0, #1
 8000674:	e7a8      	b.n	80005c8 <__udivmoddi4+0x1e8>
 8000676:	4631      	mov	r1, r6
 8000678:	e7ed      	b.n	8000656 <__udivmoddi4+0x276>
 800067a:	4603      	mov	r3, r0
 800067c:	e799      	b.n	80005b2 <__udivmoddi4+0x1d2>
 800067e:	4630      	mov	r0, r6
 8000680:	e7d4      	b.n	800062c <__udivmoddi4+0x24c>
 8000682:	46d6      	mov	lr, sl
 8000684:	e77f      	b.n	8000586 <__udivmoddi4+0x1a6>
 8000686:	4463      	add	r3, ip
 8000688:	3802      	subs	r0, #2
 800068a:	e74d      	b.n	8000528 <__udivmoddi4+0x148>
 800068c:	4606      	mov	r6, r0
 800068e:	4623      	mov	r3, r4
 8000690:	4608      	mov	r0, r1
 8000692:	e70f      	b.n	80004b4 <__udivmoddi4+0xd4>
 8000694:	3e02      	subs	r6, #2
 8000696:	4463      	add	r3, ip
 8000698:	e730      	b.n	80004fc <__udivmoddi4+0x11c>
 800069a:	bf00      	nop

0800069c <__aeabi_idiv0>:
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop

080006a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b088      	sub	sp, #32
 80006a4:	af04      	add	r7, sp, #16
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MPU Configuration--------------------------------------------------------*/
  MPU_Config();
 80006a6:	f001 f8cb 	bl	8001840 <MPU_Config>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006aa:	4b31      	ldr	r3, [pc, #196]	@ (8000770 <main+0xd0>)
 80006ac:	695b      	ldr	r3, [r3, #20]
 80006ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d11b      	bne.n	80006ee <main+0x4e>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80006b6:	f3bf 8f4f 	dsb	sy
}
 80006ba:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006bc:	f3bf 8f6f 	isb	sy
}
 80006c0:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80006c2:	4b2b      	ldr	r3, [pc, #172]	@ (8000770 <main+0xd0>)
 80006c4:	2200      	movs	r2, #0
 80006c6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80006ca:	f3bf 8f4f 	dsb	sy
}
 80006ce:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006d0:	f3bf 8f6f 	isb	sy
}
 80006d4:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80006d6:	4b26      	ldr	r3, [pc, #152]	@ (8000770 <main+0xd0>)
 80006d8:	695b      	ldr	r3, [r3, #20]
 80006da:	4a25      	ldr	r2, [pc, #148]	@ (8000770 <main+0xd0>)
 80006dc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006e0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80006e2:	f3bf 8f4f 	dsb	sy
}
 80006e6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80006e8:	f3bf 8f6f 	isb	sy
}
 80006ec:	e000      	b.n	80006f0 <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80006ee:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80006f0:	4b1f      	ldr	r3, [pc, #124]	@ (8000770 <main+0xd0>)
 80006f2:	695b      	ldr	r3, [r3, #20]
 80006f4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	d13b      	bne.n	8000774 <main+0xd4>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80006fc:	4b1c      	ldr	r3, [pc, #112]	@ (8000770 <main+0xd0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000704:	f3bf 8f4f 	dsb	sy
}
 8000708:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800070a:	4b19      	ldr	r3, [pc, #100]	@ (8000770 <main+0xd0>)
 800070c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000710:	60fb      	str	r3, [r7, #12]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000712:	68fb      	ldr	r3, [r7, #12]
 8000714:	0b5b      	lsrs	r3, r3, #13
 8000716:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800071a:	60bb      	str	r3, [r7, #8]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800071c:	68fb      	ldr	r3, [r7, #12]
 800071e:	08db      	lsrs	r3, r3, #3
 8000720:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000724:	607b      	str	r3, [r7, #4]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000726:	68bb      	ldr	r3, [r7, #8]
 8000728:	015a      	lsls	r2, r3, #5
 800072a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800072e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000730:	687a      	ldr	r2, [r7, #4]
 8000732:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000734:	490e      	ldr	r1, [pc, #56]	@ (8000770 <main+0xd0>)
 8000736:	4313      	orrs	r3, r2
 8000738:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	1e5a      	subs	r2, r3, #1
 8000740:	607a      	str	r2, [r7, #4]
 8000742:	2b00      	cmp	r3, #0
 8000744:	d1ef      	bne.n	8000726 <main+0x86>
    } while(sets-- != 0U);
 8000746:	68bb      	ldr	r3, [r7, #8]
 8000748:	1e5a      	subs	r2, r3, #1
 800074a:	60ba      	str	r2, [r7, #8]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d1e5      	bne.n	800071c <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 8000750:	f3bf 8f4f 	dsb	sy
}
 8000754:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000756:	4b06      	ldr	r3, [pc, #24]	@ (8000770 <main+0xd0>)
 8000758:	695b      	ldr	r3, [r3, #20]
 800075a:	4a05      	ldr	r2, [pc, #20]	@ (8000770 <main+0xd0>)
 800075c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000760:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000762:	f3bf 8f4f 	dsb	sy
}
 8000766:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000768:	f3bf 8f6f 	isb	sy
}
 800076c:	e003      	b.n	8000776 <main+0xd6>
 800076e:	bf00      	nop
 8000770:	e000ed00 	.word	0xe000ed00
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000774:	bf00      	nop
  SCB_EnableDCache();

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000776:	f018 fe39 	bl	80193ec <HAL_Init>

  /* USER CODE BEGIN Init */
  memset(usADCDataMock0, 0x41, sizeof(usADCDataMock0));
 800077a:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800077e:	2141      	movs	r1, #65	@ 0x41
 8000780:	48ac      	ldr	r0, [pc, #688]	@ (8000a34 <main+0x394>)
 8000782:	f020 fda6 	bl	80212d2 <memset>
  memset(usADCDataMock1, 0x42, sizeof(usADCDataMock1));
 8000786:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800078a:	2142      	movs	r1, #66	@ 0x42
 800078c:	48aa      	ldr	r0, [pc, #680]	@ (8000a38 <main+0x398>)
 800078e:	f020 fda0 	bl	80212d2 <memset>
  memset(usAuxADCDataMock0, 0x43, sizeof(usAuxADCDataMock0));
 8000792:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000796:	2143      	movs	r1, #67	@ 0x43
 8000798:	48a8      	ldr	r0, [pc, #672]	@ (8000a3c <main+0x39c>)
 800079a:	f020 fd9a 	bl	80212d2 <memset>
  memset(usAuxADCDataMock1, 0x44, sizeof(usAuxADCDataMock1));
 800079e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80007a2:	2144      	movs	r1, #68	@ 0x44
 80007a4:	48a6      	ldr	r0, [pc, #664]	@ (8000a40 <main+0x3a0>)
 80007a6:	f020 fd94 	bl	80212d2 <memset>
  __ASM volatile ("dsb 0xF":::"memory");
 80007aa:	f3bf 8f4f 	dsb	sy
}
 80007ae:	bf00      	nop
  __DSB();
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b0:	f000 fa22 	bl	8000bf8 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80007b4:	f000 face 	bl	8000d54 <PeriphCommonClock_Config>

  /* USER CODE BEGIN SysInit */
  vHeapInit();
 80007b8:	f000 fe3c 	bl	8001434 <vHeapInit>
  vStartHighResolutionTimer();
 80007bc:	f020 fba8 	bl	8020f10 <vStartHighResolutionTimer>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c0:	f000 fd60 	bl	8001284 <MX_GPIO_Init>
  MX_DMA_Init();
 80007c4:	f000 fd26 	bl	8001214 <MX_DMA_Init>
  // MX_ETH_Init();
  MX_USART3_UART_Init();
 80007c8:	f000 fcd8 	bl	800117c <MX_USART3_UART_Init>
  MX_SPI1_Init();
 80007cc:	f000 fb32 	bl	8000e34 <MX_SPI1_Init>
  MX_SPI2_Init();
 80007d0:	f000 fb88 	bl	8000ee4 <MX_SPI2_Init>
  MX_SPI3_Init();
 80007d4:	f000 fbdc 	bl	8000f90 <MX_SPI3_Init>
  MX_TIM1_Init();
 80007d8:	f000 fc30 	bl	800103c <MX_TIM1_Init>
  MX_TIM3_Init();
 80007dc:	f000 fc80 	bl	80010e0 <MX_TIM3_Init>
  // MX_TIM2_Init();
  MX_I2C4_Init();
 80007e0:	f000 fae8 	bl	8000db4 <MX_I2C4_Init>
  /* USER CODE BEGIN 2 */

  //DAC Setup
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_RESET);
 80007e4:	2200      	movs	r2, #0
 80007e6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80007ea:	4896      	ldr	r0, [pc, #600]	@ (8000a44 <main+0x3a4>)
 80007ec:	f01b f914 	bl	801ba18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(DUT_DAC_LDAC_GPIO_Port, DUT_DAC_LDAC_Pin, GPIO_PIN_RESET);
 80007f0:	2200      	movs	r2, #0
 80007f2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80007f6:	4893      	ldr	r0, [pc, #588]	@ (8000a44 <main+0x3a4>)
 80007f8:	f01b f90e 	bl	801ba18 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 80007fc:	2032      	movs	r0, #50	@ 0x32
 80007fe:	f018 fe87 	bl	8019510 <HAL_Delay>
  HAL_GPIO_WritePin(DUT_DAC_RESET_GPIO_Port, DUT_DAC_RESET_Pin, GPIO_PIN_SET);
 8000802:	2201      	movs	r2, #1
 8000804:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000808:	488e      	ldr	r0, [pc, #568]	@ (8000a44 <main+0x3a4>)
 800080a:	f01b f905 	bl	801ba18 <HAL_GPIO_WritePin>
  HAL_Delay(50);
 800080e:	2032      	movs	r0, #50	@ 0x32
 8000810:	f018 fe7e 	bl	8019510 <HAL_Delay>

  I2C4->CR2 = ( (0b0001100 << 1) & 0xFFFE )  // 7-bit address
 8000814:	4b8c      	ldr	r3, [pc, #560]	@ (8000a48 <main+0x3a8>)
 8000816:	4a8d      	ldr	r2, [pc, #564]	@ (8000a4c <main+0x3ac>)
 8000818:	605a      	str	r2, [r3, #4]
                 | (3 << 16)                   // NBYTES = 2
                 | (0 << 10)                   // Write direction (0 = write)
                 | I2C_CR2_AUTOEND             // Auto generate STOP
                 | I2C_CR2_START;              // Generate START
  while( (I2C4->ISR & (I2C_ISR_TXIS | I2C_ISR_NACKF)) == 0 );
 800081a:	bf00      	nop
 800081c:	4b8a      	ldr	r3, [pc, #552]	@ (8000a48 <main+0x3a8>)
 800081e:	699b      	ldr	r3, [r3, #24]
 8000820:	f003 0312 	and.w	r3, r3, #18
 8000824:	2b00      	cmp	r3, #0
 8000826:	d0f9      	beq.n	800081c <main+0x17c>
//      if (I2C4->ISR & I2C_ISR_NACKF) {
//          I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
//          return;  // Abort on failure
//      }
  I2C4->TXDR = 0b00111001; //write to both registers
 8000828:	4b87      	ldr	r3, [pc, #540]	@ (8000a48 <main+0x3a8>)
 800082a:	2239      	movs	r2, #57	@ 0x39
 800082c:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 800082e:	bf00      	nop
 8000830:	4b85      	ldr	r3, [pc, #532]	@ (8000a48 <main+0x3a8>)
 8000832:	699b      	ldr	r3, [r3, #24]
 8000834:	f003 0302 	and.w	r3, r3, #2
 8000838:	2b00      	cmp	r3, #0
 800083a:	d0f9      	beq.n	8000830 <main+0x190>
  I2C4->TXDR = 0; //MSB
 800083c:	4b82      	ldr	r3, [pc, #520]	@ (8000a48 <main+0x3a8>)
 800083e:	2200      	movs	r2, #0
 8000840:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXIS)) == 0 );
 8000842:	bf00      	nop
 8000844:	4b80      	ldr	r3, [pc, #512]	@ (8000a48 <main+0x3a8>)
 8000846:	699b      	ldr	r3, [r3, #24]
 8000848:	f003 0302 	and.w	r3, r3, #2
 800084c:	2b00      	cmp	r3, #0
 800084e:	d0f9      	beq.n	8000844 <main+0x1a4>
  I2C4->TXDR = 4; //LSB
 8000850:	4b7d      	ldr	r3, [pc, #500]	@ (8000a48 <main+0x3a8>)
 8000852:	2204      	movs	r2, #4
 8000854:	629a      	str	r2, [r3, #40]	@ 0x28
  while( (I2C4->ISR & (I2C_ISR_TXE)) == 0 );
 8000856:	bf00      	nop
 8000858:	4b7b      	ldr	r3, [pc, #492]	@ (8000a48 <main+0x3a8>)
 800085a:	699b      	ldr	r3, [r3, #24]
 800085c:	f003 0301 	and.w	r3, r3, #1
 8000860:	2b00      	cmp	r3, #0
 8000862:	d0f9      	beq.n	8000858 <main+0x1b8>
  // Check if NACK occurred
  if (I2C4->ISR & I2C_ISR_NACKF) {
 8000864:	4b78      	ldr	r3, [pc, #480]	@ (8000a48 <main+0x3a8>)
 8000866:	699b      	ldr	r3, [r3, #24]
 8000868:	f003 0310 	and.w	r3, r3, #16
 800086c:	2b00      	cmp	r3, #0
 800086e:	d005      	beq.n	800087c <main+0x1dc>
      // Handle error (e.g., reset I2C)
      I2C4->ICR |= I2C_ICR_NACKCF;  // Clear NACK flag
 8000870:	4b75      	ldr	r3, [pc, #468]	@ (8000a48 <main+0x3a8>)
 8000872:	69db      	ldr	r3, [r3, #28]
 8000874:	4a74      	ldr	r2, [pc, #464]	@ (8000a48 <main+0x3a8>)
 8000876:	f043 0310 	orr.w	r3, r3, #16
 800087a:	61d3      	str	r3, [r2, #28]
  }

  //SPI1 RX Stream
   DMA1_Stream0->M0AR = usADCDataMock0;
 800087c:	4b74      	ldr	r3, [pc, #464]	@ (8000a50 <main+0x3b0>)
 800087e:	4a6d      	ldr	r2, [pc, #436]	@ (8000a34 <main+0x394>)
 8000880:	60da      	str	r2, [r3, #12]
   DMA1_Stream0->M1AR = usADCDataMock1;
 8000882:	4b73      	ldr	r3, [pc, #460]	@ (8000a50 <main+0x3b0>)
 8000884:	4a6c      	ldr	r2, [pc, #432]	@ (8000a38 <main+0x398>)
 8000886:	611a      	str	r2, [r3, #16]
   DMA1_Stream0->PAR = &(SPI1->RXDR);
 8000888:	4b71      	ldr	r3, [pc, #452]	@ (8000a50 <main+0x3b0>)
 800088a:	4a72      	ldr	r2, [pc, #456]	@ (8000a54 <main+0x3b4>)
 800088c:	609a      	str	r2, [r3, #8]
   DMA1_Stream0->CR |= DMA_DOUBLE_BUFFER_M0;
 800088e:	4b70      	ldr	r3, [pc, #448]	@ (8000a50 <main+0x3b0>)
 8000890:	681b      	ldr	r3, [r3, #0]
 8000892:	4a6f      	ldr	r2, [pc, #444]	@ (8000a50 <main+0x3b0>)
 8000894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000898:	6013      	str	r3, [r2, #0]
   DMA1_Stream0->NDTR = ADC_BUFFER_HALF_SIZE;
 800089a:	4b6d      	ldr	r3, [pc, #436]	@ (8000a50 <main+0x3b0>)
 800089c:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80008a0:	605a      	str	r2, [r3, #4]
  //  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
   DMA1_Stream0->CR |= DMA_SxCR_TCIE;
 80008a2:	4b6b      	ldr	r3, [pc, #428]	@ (8000a50 <main+0x3b0>)
 80008a4:	681b      	ldr	r3, [r3, #0]
 80008a6:	4a6a      	ldr	r2, [pc, #424]	@ (8000a50 <main+0x3b0>)
 80008a8:	f043 0310 	orr.w	r3, r3, #16
 80008ac:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80008ae:	f3bf 8f4f 	dsb	sy
}
 80008b2:	bf00      	nop
   __DSB(); //required?
   DMA1_Stream0->CR |= DMA_SxCR_EN;
 80008b4:	4b66      	ldr	r3, [pc, #408]	@ (8000a50 <main+0x3b0>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	4a65      	ldr	r2, [pc, #404]	@ (8000a50 <main+0x3b0>)
 80008ba:	f043 0301 	orr.w	r3, r3, #1
 80008be:	6013      	str	r3, [r2, #0]

  //SPI2 RX Stream
  DMA1_Stream1->M0AR = usAuxADCDataMock0;
 80008c0:	4b65      	ldr	r3, [pc, #404]	@ (8000a58 <main+0x3b8>)
 80008c2:	4a5e      	ldr	r2, [pc, #376]	@ (8000a3c <main+0x39c>)
 80008c4:	60da      	str	r2, [r3, #12]
  DMA1_Stream1->M1AR = usAuxADCDataMock1;
 80008c6:	4b64      	ldr	r3, [pc, #400]	@ (8000a58 <main+0x3b8>)
 80008c8:	4a5d      	ldr	r2, [pc, #372]	@ (8000a40 <main+0x3a0>)
 80008ca:	611a      	str	r2, [r3, #16]
  DMA1_Stream1->PAR = &(SPI2->RXDR);
 80008cc:	4b62      	ldr	r3, [pc, #392]	@ (8000a58 <main+0x3b8>)
 80008ce:	4a63      	ldr	r2, [pc, #396]	@ (8000a5c <main+0x3bc>)
 80008d0:	609a      	str	r2, [r3, #8]
  DMA1_Stream1->CR |= DMA_DOUBLE_BUFFER_M0;
 80008d2:	4b61      	ldr	r3, [pc, #388]	@ (8000a58 <main+0x3b8>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4a60      	ldr	r2, [pc, #384]	@ (8000a58 <main+0x3b8>)
 80008d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80008dc:	6013      	str	r3, [r2, #0]
  DMA1_Stream1->NDTR = AUX_ADC_BUFFER_HALF_SIZE;
 80008de:	4b5e      	ldr	r3, [pc, #376]	@ (8000a58 <main+0x3b8>)
 80008e0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80008e4:	605a      	str	r2, [r3, #4]
//  DMA1_Stream0->CR |= DMA_SxCR_TCIE | DMA_SxCR_HTIE | DMA_SxCR_TEIE | DMA_SxCR_DMEIE;
  DMA1_Stream1->CR |= DMA_SxCR_TCIE;
 80008e6:	4b5c      	ldr	r3, [pc, #368]	@ (8000a58 <main+0x3b8>)
 80008e8:	681b      	ldr	r3, [r3, #0]
 80008ea:	4a5b      	ldr	r2, [pc, #364]	@ (8000a58 <main+0x3b8>)
 80008ec:	f043 0310 	orr.w	r3, r3, #16
 80008f0:	6013      	str	r3, [r2, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80008f2:	f3bf 8f4f 	dsb	sy
}
 80008f6:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream1->CR |= DMA_SxCR_EN;
 80008f8:	4b57      	ldr	r3, [pc, #348]	@ (8000a58 <main+0x3b8>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	4a56      	ldr	r2, [pc, #344]	@ (8000a58 <main+0x3b8>)
 80008fe:	f043 0301 	orr.w	r3, r3, #1
 8000902:	6013      	str	r3, [r2, #0]

  //TIM1 UP DMA
  DMA1_Stream2->M0AR = &usZero;
 8000904:	4b56      	ldr	r3, [pc, #344]	@ (8000a60 <main+0x3c0>)
 8000906:	4a57      	ldr	r2, [pc, #348]	@ (8000a64 <main+0x3c4>)
 8000908:	60da      	str	r2, [r3, #12]
  DMA1_Stream2->PAR = &(SPI1->TXDR);
 800090a:	4b55      	ldr	r3, [pc, #340]	@ (8000a60 <main+0x3c0>)
 800090c:	4a56      	ldr	r2, [pc, #344]	@ (8000a68 <main+0x3c8>)
 800090e:	609a      	str	r2, [r3, #8]
  DMA1_Stream2->NDTR = 1;
 8000910:	4b53      	ldr	r3, [pc, #332]	@ (8000a60 <main+0x3c0>)
 8000912:	2201      	movs	r2, #1
 8000914:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 8000916:	f3bf 8f4f 	dsb	sy
}
 800091a:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream2->CR |= DMA_SxCR_EN;
 800091c:	4b50      	ldr	r3, [pc, #320]	@ (8000a60 <main+0x3c0>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4a4f      	ldr	r2, [pc, #316]	@ (8000a60 <main+0x3c0>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	6013      	str	r3, [r2, #0]

  //TIM3 UP DMA
  DMA1_Stream3->M0AR = &usZero;
 8000928:	4b50      	ldr	r3, [pc, #320]	@ (8000a6c <main+0x3cc>)
 800092a:	4a4e      	ldr	r2, [pc, #312]	@ (8000a64 <main+0x3c4>)
 800092c:	60da      	str	r2, [r3, #12]
  DMA1_Stream3->PAR = &(SPI2->TXDR);
 800092e:	4b4f      	ldr	r3, [pc, #316]	@ (8000a6c <main+0x3cc>)
 8000930:	4a4f      	ldr	r2, [pc, #316]	@ (8000a70 <main+0x3d0>)
 8000932:	609a      	str	r2, [r3, #8]
  DMA1_Stream3->NDTR = 1;
 8000934:	4b4d      	ldr	r3, [pc, #308]	@ (8000a6c <main+0x3cc>)
 8000936:	2201      	movs	r2, #1
 8000938:	605a      	str	r2, [r3, #4]
  __ASM volatile ("dsb 0xF":::"memory");
 800093a:	f3bf 8f4f 	dsb	sy
}
 800093e:	bf00      	nop
  __DSB(); //required?
  DMA1_Stream3->CR |= DMA_SxCR_EN;
 8000940:	4b4a      	ldr	r3, [pc, #296]	@ (8000a6c <main+0x3cc>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a49      	ldr	r2, [pc, #292]	@ (8000a6c <main+0x3cc>)
 8000946:	f043 0301 	orr.w	r3, r3, #1
 800094a:	6013      	str	r3, [r2, #0]

  //initialize high speed ADC here
  SPI1->CR1 |= SPI_CR1_SPE;
 800094c:	4b49      	ldr	r3, [pc, #292]	@ (8000a74 <main+0x3d4>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a48      	ldr	r2, [pc, #288]	@ (8000a74 <main+0x3d4>)
 8000952:	f043 0301 	orr.w	r3, r3, #1
 8000956:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000958:	4b46      	ldr	r3, [pc, #280]	@ (8000a74 <main+0x3d4>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4a45      	ldr	r2, [pc, #276]	@ (8000a74 <main+0x3d4>)
 800095e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000962:	6013      	str	r3, [r2, #0]
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8000964:	2200      	movs	r2, #0
 8000966:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800096a:	4843      	ldr	r0, [pc, #268]	@ (8000a78 <main+0x3d8>)
 800096c:	f01b f854 	bl	801ba18 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000970:	2064      	movs	r0, #100	@ 0x64
 8000972:	f018 fdcd 	bl	8019510 <HAL_Delay>
  HAL_GPIO_WritePin(HS_ADC_RESET_GPIO_Port, HS_ADC_RESET_Pin, GPIO_PIN_SET);
 8000976:	2201      	movs	r2, #1
 8000978:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800097c:	483e      	ldr	r0, [pc, #248]	@ (8000a78 <main+0x3d8>)
 800097e:	f01b f84b 	bl	801ba18 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8000982:	2064      	movs	r0, #100	@ 0x64
 8000984:	f018 fdc4 	bl	8019510 <HAL_Delay>
  uint8_t spi_data[2] = {0b00011011, 0x80+0x05}; //low reference, low input, vcm on, refpbuf on, input buf on
 8000988:	f248 531b 	movw	r3, #34075	@ 0x851b
 800098c:	803b      	strh	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 800098e:	787b      	ldrb	r3, [r7, #1]
 8000990:	021b      	lsls	r3, r3, #8
 8000992:	783a      	ldrb	r2, [r7, #0]
 8000994:	431a      	orrs	r2, r3
 8000996:	4b37      	ldr	r3, [pc, #220]	@ (8000a74 <main+0x3d4>)
 8000998:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 800099a:	bf00      	nop
 800099c:	4b35      	ldr	r3, [pc, #212]	@ (8000a74 <main+0x3d4>)
 800099e:	695b      	ldr	r3, [r3, #20]
 80009a0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d0f9      	beq.n	800099c <main+0x2fc>
  spi_data[1]++;
 80009a8:	787b      	ldrb	r3, [r7, #1]
 80009aa:	3301      	adds	r3, #1
 80009ac:	b2db      	uxtb	r3, r3
 80009ae:	707b      	strb	r3, [r7, #1]
  spi_data[0] = 0b00010000; //sync control mode
 80009b0:	2310      	movs	r3, #16
 80009b2:	703b      	strb	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 80009b4:	787b      	ldrb	r3, [r7, #1]
 80009b6:	021b      	lsls	r3, r3, #8
 80009b8:	783a      	ldrb	r2, [r7, #0]
 80009ba:	431a      	orrs	r2, r3
 80009bc:	4b2d      	ldr	r3, [pc, #180]	@ (8000a74 <main+0x3d4>)
 80009be:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 80009c0:	bf00      	nop
 80009c2:	4b2c      	ldr	r3, [pc, #176]	@ (8000a74 <main+0x3d4>)
 80009c4:	695b      	ldr	r3, [r3, #20]
 80009c6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d0f9      	beq.n	80009c2 <main+0x322>
  spi_data[1]++;
 80009ce:	787b      	ldrb	r3, [r7, #1]
 80009d0:	3301      	adds	r3, #1
 80009d2:	b2db      	uxtb	r3, r3
 80009d4:	707b      	strb	r3, [r7, #1]
  spi_data[0] = 0b00001001; //sinc4 osr16
 80009d6:	2309      	movs	r3, #9
 80009d8:	703b      	strb	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 80009da:	787b      	ldrb	r3, [r7, #1]
 80009dc:	021b      	lsls	r3, r3, #8
 80009de:	783a      	ldrb	r2, [r7, #0]
 80009e0:	431a      	orrs	r2, r3
 80009e2:	4b24      	ldr	r3, [pc, #144]	@ (8000a74 <main+0x3d4>)
 80009e4:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 80009e6:	bf00      	nop
 80009e8:	4b22      	ldr	r3, [pc, #136]	@ (8000a74 <main+0x3d4>)
 80009ea:	695b      	ldr	r3, [r3, #20]
 80009ec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80009f0:	2b00      	cmp	r3, #0
 80009f2:	d0f9      	beq.n	80009e8 <main+0x348>
  spi_data[1]++;
 80009f4:	787b      	ldrb	r3, [r7, #1]
 80009f6:	3301      	adds	r3, #1
 80009f8:	b2db      	uxtb	r3, r3
 80009fa:	707b      	strb	r3, [r7, #1]
  spi_data[0]=0b10000000; //external clock
 80009fc:	2380      	movs	r3, #128	@ 0x80
 80009fe:	703b      	strb	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000a00:	787b      	ldrb	r3, [r7, #1]
 8000a02:	021b      	lsls	r3, r3, #8
 8000a04:	783a      	ldrb	r2, [r7, #0]
 8000a06:	431a      	orrs	r2, r3
 8000a08:	4b1a      	ldr	r3, [pc, #104]	@ (8000a74 <main+0x3d4>)
 8000a0a:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000a0c:	bf00      	nop
 8000a0e:	4b19      	ldr	r3, [pc, #100]	@ (8000a74 <main+0x3d4>)
 8000a10:	695b      	ldr	r3, [r3, #20]
 8000a12:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d0f9      	beq.n	8000a0e <main+0x36e>
  spi_data[1]=0x80+0x03; //start conversion
 8000a1a:	2383      	movs	r3, #131	@ 0x83
 8000a1c:	707b      	strb	r3, [r7, #1]
  spi_data[0]=0b00000010;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	703b      	strb	r3, [r7, #0]
  SPI1->TXDR = ((spi_data[1] << 8) | spi_data[0]);
 8000a22:	787b      	ldrb	r3, [r7, #1]
 8000a24:	021b      	lsls	r3, r3, #8
 8000a26:	783a      	ldrb	r2, [r7, #0]
 8000a28:	431a      	orrs	r2, r3
 8000a2a:	4b12      	ldr	r3, [pc, #72]	@ (8000a74 <main+0x3d4>)
 8000a2c:	621a      	str	r2, [r3, #32]
  while((SPI1->SR & SPI_SR_TXC) == 0){}; //wait for enough space to become available
 8000a2e:	bf00      	nop
 8000a30:	e024      	b.n	8000a7c <main+0x3dc>
 8000a32:	bf00      	nop
 8000a34:	30000000 	.word	0x30000000
 8000a38:	30010000 	.word	0x30010000
 8000a3c:	30020000 	.word	0x30020000
 8000a40:	30022000 	.word	0x30022000
 8000a44:	58020c00 	.word	0x58020c00
 8000a48:	58001c00 	.word	0x58001c00
 8000a4c:	02032018 	.word	0x02032018
 8000a50:	40020010 	.word	0x40020010
 8000a54:	40013030 	.word	0x40013030
 8000a58:	40020028 	.word	0x40020028
 8000a5c:	40003830 	.word	0x40003830
 8000a60:	40020040 	.word	0x40020040
 8000a64:	38000000 	.word	0x38000000
 8000a68:	40013020 	.word	0x40013020
 8000a6c:	40020058 	.word	0x40020058
 8000a70:	40003820 	.word	0x40003820
 8000a74:	40013000 	.word	0x40013000
 8000a78:	58020000 	.word	0x58020000
 8000a7c:	4b4d      	ldr	r3, [pc, #308]	@ (8000bb4 <main+0x514>)
 8000a7e:	695b      	ldr	r3, [r3, #20]
 8000a80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d0f9      	beq.n	8000a7c <main+0x3dc>
  SPI1->CR1 &= ~SPI_CR1_SPE;
 8000a88:	4b4a      	ldr	r3, [pc, #296]	@ (8000bb4 <main+0x514>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a49      	ldr	r2, [pc, #292]	@ (8000bb4 <main+0x514>)
 8000a8e:	f023 0301 	bic.w	r3, r3, #1
 8000a92:	6013      	str	r3, [r2, #0]



  //Enable SPI1
//  SPI1->CR1 &=  ~SPI_CR1_SPE;
  SPI1->CR2 = 0; //reinitialize tsize
 8000a94:	4b47      	ldr	r3, [pc, #284]	@ (8000bb4 <main+0x514>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  SPI1->CFG1 |= SPI_CFG1_RXDMAEN;
 8000a9a:	4b46      	ldr	r3, [pc, #280]	@ (8000bb4 <main+0x514>)
 8000a9c:	689b      	ldr	r3, [r3, #8]
 8000a9e:	4a45      	ldr	r2, [pc, #276]	@ (8000bb4 <main+0x514>)
 8000aa0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa4:	6093      	str	r3, [r2, #8]
  SPI1->CR1 |= SPI_CR1_SPE;
 8000aa6:	4b43      	ldr	r3, [pc, #268]	@ (8000bb4 <main+0x514>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	4a42      	ldr	r2, [pc, #264]	@ (8000bb4 <main+0x514>)
 8000aac:	f043 0301 	orr.w	r3, r3, #1
 8000ab0:	6013      	str	r3, [r2, #0]
  SPI1->CR1 |= SPI_CR1_CSTART;
 8000ab2:	4b40      	ldr	r3, [pc, #256]	@ (8000bb4 <main+0x514>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a3f      	ldr	r2, [pc, #252]	@ (8000bb4 <main+0x514>)
 8000ab8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000abc:	6013      	str	r3, [r2, #0]

  //Enable SPI2
  SPI2->CFG1 |= SPI_CFG1_RXDMAEN;
 8000abe:	4b3e      	ldr	r3, [pc, #248]	@ (8000bb8 <main+0x518>)
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	4a3d      	ldr	r2, [pc, #244]	@ (8000bb8 <main+0x518>)
 8000ac4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000ac8:	6093      	str	r3, [r2, #8]
  SPI2->CR1 |= SPI_CR1_SPE;
 8000aca:	4b3b      	ldr	r3, [pc, #236]	@ (8000bb8 <main+0x518>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a3a      	ldr	r2, [pc, #232]	@ (8000bb8 <main+0x518>)
 8000ad0:	f043 0301 	orr.w	r3, r3, #1
 8000ad4:	6013      	str	r3, [r2, #0]
  SPI2->CR1 |= SPI_CR1_CSTART;
 8000ad6:	4b38      	ldr	r3, [pc, #224]	@ (8000bb8 <main+0x518>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4a37      	ldr	r2, [pc, #220]	@ (8000bb8 <main+0x518>)
 8000adc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000ae0:	6013      	str	r3, [r2, #0]

  //Enable TIM1 (SPI1)
  TIM1->CR1 |= TIM_CR1_URS;
 8000ae2:	4b36      	ldr	r3, [pc, #216]	@ (8000bbc <main+0x51c>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a35      	ldr	r2, [pc, #212]	@ (8000bbc <main+0x51c>)
 8000ae8:	f043 0304 	orr.w	r3, r3, #4
 8000aec:	6013      	str	r3, [r2, #0]
  TIM1->CR1 &= ~TIM_CR1_UDIS;
 8000aee:	4b33      	ldr	r3, [pc, #204]	@ (8000bbc <main+0x51c>)
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4a32      	ldr	r2, [pc, #200]	@ (8000bbc <main+0x51c>)
 8000af4:	f023 0302 	bic.w	r3, r3, #2
 8000af8:	6013      	str	r3, [r2, #0]
  TIM1->DIER |= TIM_DMA_UPDATE;
 8000afa:	4b30      	ldr	r3, [pc, #192]	@ (8000bbc <main+0x51c>)
 8000afc:	68db      	ldr	r3, [r3, #12]
 8000afe:	4a2f      	ldr	r2, [pc, #188]	@ (8000bbc <main+0x51c>)
 8000b00:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b04:	60d3      	str	r3, [r2, #12]
  TIM1->EGR |= TIM_EGR_UG;
 8000b06:	4b2d      	ldr	r3, [pc, #180]	@ (8000bbc <main+0x51c>)
 8000b08:	695b      	ldr	r3, [r3, #20]
 8000b0a:	4a2c      	ldr	r2, [pc, #176]	@ (8000bbc <main+0x51c>)
 8000b0c:	f043 0301 	orr.w	r3, r3, #1
 8000b10:	6153      	str	r3, [r2, #20]
  TIM1->CR1 |= TIM_CR1_CEN;
 8000b12:	4b2a      	ldr	r3, [pc, #168]	@ (8000bbc <main+0x51c>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	4a29      	ldr	r2, [pc, #164]	@ (8000bbc <main+0x51c>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6013      	str	r3, [r2, #0]

  //Enable TIM3 (SPI2)
  TIM3->CR1 |= TIM_CR1_URS;
 8000b1e:	4b28      	ldr	r3, [pc, #160]	@ (8000bc0 <main+0x520>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	4a27      	ldr	r2, [pc, #156]	@ (8000bc0 <main+0x520>)
 8000b24:	f043 0304 	orr.w	r3, r3, #4
 8000b28:	6013      	str	r3, [r2, #0]
  TIM3->CR1 &= ~TIM_CR1_UDIS;
 8000b2a:	4b25      	ldr	r3, [pc, #148]	@ (8000bc0 <main+0x520>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a24      	ldr	r2, [pc, #144]	@ (8000bc0 <main+0x520>)
 8000b30:	f023 0302 	bic.w	r3, r3, #2
 8000b34:	6013      	str	r3, [r2, #0]
  TIM3->DIER |= TIM_DMA_UPDATE;
 8000b36:	4b22      	ldr	r3, [pc, #136]	@ (8000bc0 <main+0x520>)
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	4a21      	ldr	r2, [pc, #132]	@ (8000bc0 <main+0x520>)
 8000b3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000b40:	60d3      	str	r3, [r2, #12]
  TIM3->EGR |= TIM_EGR_UG;
 8000b42:	4b1f      	ldr	r3, [pc, #124]	@ (8000bc0 <main+0x520>)
 8000b44:	695b      	ldr	r3, [r3, #20]
 8000b46:	4a1e      	ldr	r2, [pc, #120]	@ (8000bc0 <main+0x520>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6153      	str	r3, [r2, #20]
  TIM3->CR1 |= TIM_CR1_CEN;
 8000b4e:	4b1c      	ldr	r3, [pc, #112]	@ (8000bc0 <main+0x520>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a1b      	ldr	r2, [pc, #108]	@ (8000bc0 <main+0x520>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6013      	str	r3, [r2, #0]

  /* Initialise the interface descriptor for WinPCap for example. */
     pxSTM32H_FillInterfaceDescriptor( 0, &( xInterfaces[ 0 ] ) );
 8000b5a:	491a      	ldr	r1, [pc, #104]	@ (8000bc4 <main+0x524>)
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f016 fd79 	bl	8017654 <pxSTM32H_FillInterfaceDescriptor>

     FreeRTOS_FillEndPoint( &( xInterfaces[ 0 ] ), &( xEndPoints[ 0 ] ), ucIPAddress,
 8000b62:	4b19      	ldr	r3, [pc, #100]	@ (8000bc8 <main+0x528>)
 8000b64:	9302      	str	r3, [sp, #8]
 8000b66:	4b19      	ldr	r3, [pc, #100]	@ (8000bcc <main+0x52c>)
 8000b68:	9301      	str	r3, [sp, #4]
 8000b6a:	4b19      	ldr	r3, [pc, #100]	@ (8000bd0 <main+0x530>)
 8000b6c:	9300      	str	r3, [sp, #0]
 8000b6e:	4b19      	ldr	r3, [pc, #100]	@ (8000bd4 <main+0x534>)
 8000b70:	4a19      	ldr	r2, [pc, #100]	@ (8000bd8 <main+0x538>)
 8000b72:	491a      	ldr	r1, [pc, #104]	@ (8000bdc <main+0x53c>)
 8000b74:	4813      	ldr	r0, [pc, #76]	@ (8000bc4 <main+0x524>)
 8000b76:	f00b fe4b 	bl	800c810 <FreeRTOS_FillEndPoint>
     #endif /* ( ipconfigUSE_DHCP != 0 ) */

     /* Initialise the RTOS's TCP/IP stack.  The tasks that use the network
        are created in the vApplicationIPNetworkEventHook() hook function
        below.  The hook function is called when the network connects. */
      FreeRTOS_IPInit_Multi();
 8000b7a:	f007 ff99 	bl	8008ab0 <FreeRTOS_IPInit_Multi>


      xTaskCreate( prvServerWorkTask, "SvrWork", mainTCP_SERVER_STACK_SIZE, NULL, 0, &xServerWorkTaskHandle );
 8000b7e:	4b18      	ldr	r3, [pc, #96]	@ (8000be0 <main+0x540>)
 8000b80:	9301      	str	r3, [sp, #4]
 8000b82:	2300      	movs	r3, #0
 8000b84:	9300      	str	r3, [sp, #0]
 8000b86:	2300      	movs	r3, #0
 8000b88:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000b8c:	4915      	ldr	r1, [pc, #84]	@ (8000be4 <main+0x544>)
 8000b8e:	4816      	ldr	r0, [pc, #88]	@ (8000be8 <main+0x548>)
 8000b90:	f002 fd68 	bl	8003664 <xTaskCreate>
//      xTaskCreate ( vNotifierTask, "Notif", 200, NULL, 0, &vNotifierTaskHandle);
      xTaskCreate ( vADCTCPTask, "ADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vADCTCPTaskHandle);
 8000b94:	4b15      	ldr	r3, [pc, #84]	@ (8000bec <main+0x54c>)
 8000b96:	9301      	str	r3, [sp, #4]
 8000b98:	2301      	movs	r3, #1
 8000b9a:	9300      	str	r3, [sp, #0]
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	f44f 7220 	mov.w	r2, #640	@ 0x280
 8000ba2:	4913      	ldr	r1, [pc, #76]	@ (8000bf0 <main+0x550>)
 8000ba4:	4813      	ldr	r0, [pc, #76]	@ (8000bf4 <main+0x554>)
 8000ba6:	f002 fd5d 	bl	8003664 <xTaskCreate>
//      xTaskCreate ( vAuxADCTCPTask, "AuxADC_TCP", mainTCP_SERVER_STACK_SIZE, NULL, 1, &vAuxADCTCPTaskHandle);
      vTaskStartScheduler();
 8000baa:	f002 ff17 	bl	80039dc <vTaskStartScheduler>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000bae:	bf00      	nop
 8000bb0:	e7fd      	b.n	8000bae <main+0x50e>
 8000bb2:	bf00      	nop
 8000bb4:	40013000 	.word	0x40013000
 8000bb8:	40003800 	.word	0x40003800
 8000bbc:	40010000 	.word	0x40010000
 8000bc0:	40000400 	.word	0x40000400
 8000bc4:	200005e8 	.word	0x200005e8
 8000bc8:	080262c4 	.word	0x080262c4
 8000bcc:	080262c0 	.word	0x080262c0
 8000bd0:	080262bc 	.word	0x080262bc
 8000bd4:	080262b8 	.word	0x080262b8
 8000bd8:	080262b4 	.word	0x080262b4
 8000bdc:	20000610 	.word	0x20000610
 8000be0:	20000ab8 	.word	0x20000ab8
 8000be4:	08022dd0 	.word	0x08022dd0
 8000be8:	08001661 	.word	0x08001661
 8000bec:	20000abc 	.word	0x20000abc
 8000bf0:	08022dd8 	.word	0x08022dd8
 8000bf4:	08001689 	.word	0x08001689

08000bf8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b09e      	sub	sp, #120	@ 0x78
 8000bfc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bfe:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000c02:	224c      	movs	r2, #76	@ 0x4c
 8000c04:	2100      	movs	r1, #0
 8000c06:	4618      	mov	r0, r3
 8000c08:	f020 fb63 	bl	80212d2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	2220      	movs	r2, #32
 8000c12:	2100      	movs	r1, #0
 8000c14:	4618      	mov	r0, r3
 8000c16:	f020 fb5c 	bl	80212d2 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 8000c1a:	2002      	movs	r0, #2
 8000c1c:	f01b f84a 	bl	801bcb4 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000c20:	2300      	movs	r3, #0
 8000c22:	60bb      	str	r3, [r7, #8]
 8000c24:	4b48      	ldr	r3, [pc, #288]	@ (8000d48 <SystemClock_Config+0x150>)
 8000c26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c28:	4a47      	ldr	r2, [pc, #284]	@ (8000d48 <SystemClock_Config+0x150>)
 8000c2a:	f023 0301 	bic.w	r3, r3, #1
 8000c2e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000c30:	4b45      	ldr	r3, [pc, #276]	@ (8000d48 <SystemClock_Config+0x150>)
 8000c32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c34:	f003 0301 	and.w	r3, r3, #1
 8000c38:	60bb      	str	r3, [r7, #8]
 8000c3a:	4b44      	ldr	r3, [pc, #272]	@ (8000d4c <SystemClock_Config+0x154>)
 8000c3c:	699b      	ldr	r3, [r3, #24]
 8000c3e:	4a43      	ldr	r2, [pc, #268]	@ (8000d4c <SystemClock_Config+0x154>)
 8000c40:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c44:	6193      	str	r3, [r2, #24]
 8000c46:	4b41      	ldr	r3, [pc, #260]	@ (8000d4c <SystemClock_Config+0x154>)
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c4e:	60bb      	str	r3, [r7, #8]
 8000c50:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000c52:	bf00      	nop
 8000c54:	4b3d      	ldr	r3, [pc, #244]	@ (8000d4c <SystemClock_Config+0x154>)
 8000c56:	699b      	ldr	r3, [r3, #24]
 8000c58:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000c5c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000c60:	d1f8      	bne.n	8000c54 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c62:	4b3b      	ldr	r3, [pc, #236]	@ (8000d50 <SystemClock_Config+0x158>)
 8000c64:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c68:	4a39      	ldr	r2, [pc, #228]	@ (8000d50 <SystemClock_Config+0x158>)
 8000c6a:	f043 0302 	orr.w	r3, r3, #2
 8000c6e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c72:	4b37      	ldr	r3, [pc, #220]	@ (8000d50 <SystemClock_Config+0x158>)
 8000c74:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c78:	f003 0302 	and.w	r3, r3, #2
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 8000c80:	2300      	movs	r3, #0
 8000c82:	603b      	str	r3, [r7, #0]
 8000c84:	4b31      	ldr	r3, [pc, #196]	@ (8000d4c <SystemClock_Config+0x154>)
 8000c86:	699b      	ldr	r3, [r3, #24]
 8000c88:	4a30      	ldr	r2, [pc, #192]	@ (8000d4c <SystemClock_Config+0x154>)
 8000c8a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000c8e:	6193      	str	r3, [r2, #24]
 8000c90:	4b2e      	ldr	r3, [pc, #184]	@ (8000d4c <SystemClock_Config+0x154>)
 8000c92:	699b      	ldr	r3, [r3, #24]
 8000c94:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b2b      	ldr	r3, [pc, #172]	@ (8000d48 <SystemClock_Config+0x150>)
 8000c9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000c9e:	4a2a      	ldr	r2, [pc, #168]	@ (8000d48 <SystemClock_Config+0x150>)
 8000ca0:	f043 0301 	orr.w	r3, r3, #1
 8000ca4:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8000ca6:	4b28      	ldr	r3, [pc, #160]	@ (8000d48 <SystemClock_Config+0x150>)
 8000ca8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000caa:	f003 0301 	and.w	r3, r3, #1
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cb2:	bf00      	nop
 8000cb4:	4b25      	ldr	r3, [pc, #148]	@ (8000d4c <SystemClock_Config+0x154>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000cbc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8000cc0:	d1f8      	bne.n	8000cb4 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cc6:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000cca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ccc:	2302      	movs	r3, #2
 8000cce:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000cd0:	2302      	movs	r3, #2
 8000cd2:	657b      	str	r3, [r7, #84]	@ 0x54
  RCC_OscInitStruct.PLL.PLLM = 2;
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	65bb      	str	r3, [r7, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000cd8:	2340      	movs	r3, #64	@ 0x40
 8000cda:	65fb      	str	r3, [r7, #92]	@ 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000cdc:	2302      	movs	r3, #2
 8000cde:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ce0:	2302      	movs	r3, #2
 8000ce2:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000ce8:	230c      	movs	r3, #12
 8000cea:	66fb      	str	r3, [r7, #108]	@ 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000cec:	2300      	movs	r3, #0
 8000cee:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	677b      	str	r3, [r7, #116]	@ 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000cf4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	f01b f815 	bl	801bd28 <HAL_RCC_OscConfig>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <SystemClock_Config+0x110>
  {
    Error_Handler();
 8000d04:	f000 fdc9 	bl	800189a <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d08:	233f      	movs	r3, #63	@ 0x3f
 8000d0a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d0c:	2303      	movs	r3, #3
 8000d0e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d10:	2300      	movs	r3, #0
 8000d12:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000d14:	2308      	movs	r3, #8
 8000d16:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000d18:	2340      	movs	r3, #64	@ 0x40
 8000d1a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d1c:	2340      	movs	r3, #64	@ 0x40
 8000d1e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000d20:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d24:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000d26:	2340      	movs	r3, #64	@ 0x40
 8000d28:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d2a:	f107 030c 	add.w	r3, r7, #12
 8000d2e:	2102      	movs	r1, #2
 8000d30:	4618      	mov	r0, r3
 8000d32:	f01b fc53 	bl	801c5dc <HAL_RCC_ClockConfig>
 8000d36:	4603      	mov	r3, r0
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d001      	beq.n	8000d40 <SystemClock_Config+0x148>
  {
    Error_Handler();
 8000d3c:	f000 fdad 	bl	800189a <Error_Handler>
  }
}
 8000d40:	bf00      	nop
 8000d42:	3778      	adds	r7, #120	@ 0x78
 8000d44:	46bd      	mov	sp, r7
 8000d46:	bd80      	pop	{r7, pc}
 8000d48:	58000400 	.word	0x58000400
 8000d4c:	58024800 	.word	0x58024800
 8000d50:	58024400 	.word	0x58024400

08000d54 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b0b0      	sub	sp, #192	@ 0xc0
 8000d58:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d5a:	463b      	mov	r3, r7
 8000d5c:	22c0      	movs	r2, #192	@ 0xc0
 8000d5e:	2100      	movs	r1, #0
 8000d60:	4618      	mov	r0, r3
 8000d62:	f020 fab6 	bl	80212d2 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SPI3|RCC_PERIPHCLK_SPI2
 8000d66:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8000d6a:	f04f 0300 	mov.w	r3, #0
 8000d6e:	e9c7 2300 	strd	r2, r3, [r7]
                              |RCC_PERIPHCLK_SPI1;
  PeriphClkInitStruct.PLL2.PLL2M = 8;
 8000d72:	2308      	movs	r3, #8
 8000d74:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 64;
 8000d76:	2340      	movs	r3, #64	@ 0x40
 8000d78:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000d7e:	2302      	movs	r3, #2
 8000d80:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000d82:	2302      	movs	r3, #2
 8000d84:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8000d86:	2340      	movs	r3, #64	@ 0x40
 8000d88:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000d8e:	2300      	movs	r3, #0
 8000d90:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.Spi123ClockSelection = RCC_SPI123CLKSOURCE_PLL2;
 8000d92:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d96:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d98:	463b      	mov	r3, r7
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	f01b ffaa 	bl	801ccf4 <HAL_RCCEx_PeriphCLKConfig>
 8000da0:	4603      	mov	r3, r0
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d001      	beq.n	8000daa <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000da6:	f000 fd78 	bl	800189a <Error_Handler>
  }
}
 8000daa:	bf00      	nop
 8000dac:	37c0      	adds	r7, #192	@ 0xc0
 8000dae:	46bd      	mov	sp, r7
 8000db0:	bd80      	pop	{r7, pc}
	...

08000db4 <MX_I2C4_Init>:
  * @brief I2C4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C4_Init(void)
{
 8000db4:	b580      	push	{r7, lr}
 8000db6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000db8:	4b1b      	ldr	r3, [pc, #108]	@ (8000e28 <MX_I2C4_Init+0x74>)
 8000dba:	4a1c      	ldr	r2, [pc, #112]	@ (8000e2c <MX_I2C4_Init+0x78>)
 8000dbc:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x10C0ECFF;
 8000dbe:	4b1a      	ldr	r3, [pc, #104]	@ (8000e28 <MX_I2C4_Init+0x74>)
 8000dc0:	4a1b      	ldr	r2, [pc, #108]	@ (8000e30 <MX_I2C4_Init+0x7c>)
 8000dc2:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000dc4:	4b18      	ldr	r3, [pc, #96]	@ (8000e28 <MX_I2C4_Init+0x74>)
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dca:	4b17      	ldr	r3, [pc, #92]	@ (8000e28 <MX_I2C4_Init+0x74>)
 8000dcc:	2201      	movs	r2, #1
 8000dce:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd0:	4b15      	ldr	r3, [pc, #84]	@ (8000e28 <MX_I2C4_Init+0x74>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000dd6:	4b14      	ldr	r3, [pc, #80]	@ (8000e28 <MX_I2C4_Init+0x74>)
 8000dd8:	2200      	movs	r2, #0
 8000dda:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ddc:	4b12      	ldr	r3, [pc, #72]	@ (8000e28 <MX_I2C4_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de2:	4b11      	ldr	r3, [pc, #68]	@ (8000e28 <MX_I2C4_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000de8:	4b0f      	ldr	r3, [pc, #60]	@ (8000e28 <MX_I2C4_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000dee:	480e      	ldr	r0, [pc, #56]	@ (8000e28 <MX_I2C4_Init+0x74>)
 8000df0:	f01a fe2c 	bl	801ba4c <HAL_I2C_Init>
 8000df4:	4603      	mov	r3, r0
 8000df6:	2b00      	cmp	r3, #0
 8000df8:	d001      	beq.n	8000dfe <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000dfa:	f000 fd4e 	bl	800189a <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000dfe:	2100      	movs	r1, #0
 8000e00:	4809      	ldr	r0, [pc, #36]	@ (8000e28 <MX_I2C4_Init+0x74>)
 8000e02:	f01a febf 	bl	801bb84 <HAL_I2CEx_ConfigAnalogFilter>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b00      	cmp	r3, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e0c:	f000 fd45 	bl	800189a <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e10:	2100      	movs	r1, #0
 8000e12:	4805      	ldr	r0, [pc, #20]	@ (8000e28 <MX_I2C4_Init+0x74>)
 8000e14:	f01a ff01 	bl	801bc1a <HAL_I2CEx_ConfigDigitalFilter>
 8000e18:	4603      	mov	r3, r0
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d001      	beq.n	8000e22 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000e1e:	f000 fd3c 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	200000a4 	.word	0x200000a4
 8000e2c:	58001c00 	.word	0x58001c00
 8000e30:	10c0ecff 	.word	0x10c0ecff

08000e34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e38:	4b28      	ldr	r3, [pc, #160]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e3a:	4a29      	ldr	r2, [pc, #164]	@ (8000ee0 <MX_SPI1_Init+0xac>)
 8000e3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e3e:	4b27      	ldr	r3, [pc, #156]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e40:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000e44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e46:	4b25      	ldr	r3, [pc, #148]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e48:	2200      	movs	r2, #0
 8000e4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8000e4c:	4b23      	ldr	r3, [pc, #140]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e4e:	220f      	movs	r2, #15
 8000e50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e52:	4b22      	ldr	r3, [pc, #136]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e54:	2200      	movs	r2, #0
 8000e56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000e58:	4b20      	ldr	r3, [pc, #128]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e5a:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8000e5e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000e60:	4b1e      	ldr	r3, [pc, #120]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e62:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000e66:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000e68:	4b1c      	ldr	r3, [pc, #112]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8000e6e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e70:	4b1a      	ldr	r3, [pc, #104]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e76:	4b19      	ldr	r3, [pc, #100]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e7c:	4b17      	ldr	r3, [pc, #92]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 0x0;
 8000e82:	4b16      	ldr	r3, [pc, #88]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000e88:	4b14      	ldr	r3, [pc, #80]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e8a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e8e:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi1.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000e90:	4b12      	ldr	r3, [pc, #72]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi1.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000e96:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi1.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000e9c:	4b0f      	ldr	r3, [pc, #60]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi1.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ea2:	4b0e      	ldr	r3, [pc, #56]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi1.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000eaa:	2203      	movs	r2, #3
 8000eac:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi1.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8000eae:	4b0b      	ldr	r3, [pc, #44]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000eb0:	2230      	movs	r2, #48	@ 0x30
 8000eb2:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi1.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000eb4:	4b09      	ldr	r3, [pc, #36]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi1.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000eba:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi1.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000ec0:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ec6:	4805      	ldr	r0, [pc, #20]	@ (8000edc <MX_SPI1_Init+0xa8>)
 8000ec8:	f01d fd40 	bl	801e94c <HAL_SPI_Init>
 8000ecc:	4603      	mov	r3, r0
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d001      	beq.n	8000ed6 <MX_SPI1_Init+0xa2>
  {
    Error_Handler();
 8000ed2:	f000 fce2 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ed6:	bf00      	nop
 8000ed8:	bd80      	pop	{r7, pc}
 8000eda:	bf00      	nop
 8000edc:	200000f8 	.word	0x200000f8
 8000ee0:	40013000 	.word	0x40013000

08000ee4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000ee8:	4b27      	ldr	r3, [pc, #156]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000eea:	4a28      	ldr	r2, [pc, #160]	@ (8000f8c <MX_SPI2_Init+0xa8>)
 8000eec:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000eee:	4b26      	ldr	r3, [pc, #152]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000ef0:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000ef4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000ef6:	4b24      	ldr	r3, [pc, #144]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000ef8:	2200      	movs	r2, #0
 8000efa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_16BIT;
 8000efc:	4b22      	ldr	r3, [pc, #136]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000efe:	220f      	movs	r2, #15
 8000f00:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f02:	4b21      	ldr	r3, [pc, #132]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f08:	4b1f      	ldr	r3, [pc, #124]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000f0e:	4b1e      	ldr	r3, [pc, #120]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f10:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000f14:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8000f16:	4b1c      	ldr	r3, [pc, #112]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f18:	f04f 5240 	mov.w	r2, #805306368	@ 0x30000000
 8000f1c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f1e:	4b1a      	ldr	r3, [pc, #104]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f20:	2200      	movs	r2, #0
 8000f22:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f24:	4b18      	ldr	r3, [pc, #96]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f26:	2200      	movs	r2, #0
 8000f28:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f2a:	4b17      	ldr	r3, [pc, #92]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 0x0;
 8000f30:	4b15      	ldr	r3, [pc, #84]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000f36:	4b14      	ldr	r3, [pc, #80]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f38:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f3c:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi2.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000f3e:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f40:	2200      	movs	r2, #0
 8000f42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi2.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000f44:	4b10      	ldr	r3, [pc, #64]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi2.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi2.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000f50:	4b0d      	ldr	r3, [pc, #52]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi2.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_03CYCLE;
 8000f56:	4b0c      	ldr	r3, [pc, #48]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f58:	2203      	movs	r2, #3
 8000f5a:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi2.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_03CYCLE;
 8000f5c:	4b0a      	ldr	r3, [pc, #40]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f5e:	2230      	movs	r2, #48	@ 0x30
 8000f60:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi2.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 8000f62:	4b09      	ldr	r3, [pc, #36]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi2.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8000f68:	4b07      	ldr	r3, [pc, #28]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi2.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8000f6e:	4b06      	ldr	r3, [pc, #24]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f74:	4804      	ldr	r0, [pc, #16]	@ (8000f88 <MX_SPI2_Init+0xa4>)
 8000f76:	f01d fce9 	bl	801e94c <HAL_SPI_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_SPI2_Init+0xa0>
  {
    Error_Handler();
 8000f80:	f000 fc8b 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f84:	bf00      	nop
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	20000180 	.word	0x20000180
 8000f8c:	40003800 	.word	0x40003800

08000f90 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 8000f94:	4b27      	ldr	r3, [pc, #156]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000f96:	4a28      	ldr	r2, [pc, #160]	@ (8001038 <MX_SPI3_Init+0xa8>)
 8000f98:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8000f9a:	4b26      	ldr	r3, [pc, #152]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000f9c:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 8000fa0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8000fa2:	4b24      	ldr	r3, [pc, #144]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8000fa8:	4b22      	ldr	r3, [pc, #136]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000faa:	2203      	movs	r2, #3
 8000fac:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000fae:	4b21      	ldr	r3, [pc, #132]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_HARD_OUTPUT;
 8000fba:	4b1e      	ldr	r3, [pc, #120]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000fbc:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8000fc0:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000fc2:	4b1c      	ldr	r3, [pc, #112]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8000fce:	4b19      	ldr	r3, [pc, #100]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000fd4:	4b17      	ldr	r3, [pc, #92]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi3.Init.CRCPolynomial = 0x0;
 8000fda:	4b16      	ldr	r3, [pc, #88]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000fe0:	4b14      	ldr	r3, [pc, #80]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000fe2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000fe6:	635a      	str	r2, [r3, #52]	@ 0x34
  hspi3.Init.NSSPolarity = SPI_NSS_POLARITY_LOW;
 8000fe8:	4b12      	ldr	r3, [pc, #72]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi3.Init.FifoThreshold = SPI_FIFO_THRESHOLD_01DATA;
 8000fee:	4b11      	ldr	r3, [pc, #68]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	63da      	str	r2, [r3, #60]	@ 0x3c
  hspi3.Init.TxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi3.Init.RxCRCInitializationPattern = SPI_CRC_INITIALIZATION_ALL_ZERO_PATTERN;
 8000ffa:	4b0e      	ldr	r3, [pc, #56]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi3.Init.MasterSSIdleness = SPI_MASTER_SS_IDLENESS_00CYCLE;
 8001000:	4b0c      	ldr	r3, [pc, #48]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8001002:	2200      	movs	r2, #0
 8001004:	649a      	str	r2, [r3, #72]	@ 0x48
  hspi3.Init.MasterInterDataIdleness = SPI_MASTER_INTERDATA_IDLENESS_00CYCLE;
 8001006:	4b0b      	ldr	r3, [pc, #44]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8001008:	2200      	movs	r2, #0
 800100a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hspi3.Init.MasterReceiverAutoSusp = SPI_MASTER_RX_AUTOSUSP_DISABLE;
 800100c:	4b09      	ldr	r3, [pc, #36]	@ (8001034 <MX_SPI3_Init+0xa4>)
 800100e:	2200      	movs	r2, #0
 8001010:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi3.Init.MasterKeepIOState = SPI_MASTER_KEEP_IO_STATE_DISABLE;
 8001012:	4b08      	ldr	r3, [pc, #32]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8001014:	2200      	movs	r2, #0
 8001016:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi3.Init.IOSwap = SPI_IO_SWAP_DISABLE;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <MX_SPI3_Init+0xa4>)
 800101a:	2200      	movs	r2, #0
 800101c:	659a      	str	r2, [r3, #88]	@ 0x58
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800101e:	4805      	ldr	r0, [pc, #20]	@ (8001034 <MX_SPI3_Init+0xa4>)
 8001020:	f01d fc94 	bl	801e94c <HAL_SPI_Init>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <MX_SPI3_Init+0x9e>
  {
    Error_Handler();
 800102a:	f000 fc36 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000208 	.word	0x20000208
 8001038:	40003c00 	.word	0x40003c00

0800103c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001042:	f107 0310 	add.w	r3, r7, #16
 8001046:	2200      	movs	r2, #0
 8001048:	601a      	str	r2, [r3, #0]
 800104a:	605a      	str	r2, [r3, #4]
 800104c:	609a      	str	r2, [r3, #8]
 800104e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001050:	1d3b      	adds	r3, r7, #4
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800105a:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <MX_TIM1_Init+0x9c>)
 800105c:	4a1f      	ldr	r2, [pc, #124]	@ (80010dc <MX_TIM1_Init+0xa0>)
 800105e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001060:	4b1d      	ldr	r3, [pc, #116]	@ (80010d8 <MX_TIM1_Init+0x9c>)
 8001062:	2200      	movs	r2, #0
 8001064:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001066:	4b1c      	ldr	r3, [pc, #112]	@ (80010d8 <MX_TIM1_Init+0x9c>)
 8001068:	2200      	movs	r2, #0
 800106a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 255;
 800106c:	4b1a      	ldr	r3, [pc, #104]	@ (80010d8 <MX_TIM1_Init+0x9c>)
 800106e:	22ff      	movs	r2, #255	@ 0xff
 8001070:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001072:	4b19      	ldr	r3, [pc, #100]	@ (80010d8 <MX_TIM1_Init+0x9c>)
 8001074:	2200      	movs	r2, #0
 8001076:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001078:	4b17      	ldr	r3, [pc, #92]	@ (80010d8 <MX_TIM1_Init+0x9c>)
 800107a:	2200      	movs	r2, #0
 800107c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800107e:	4b16      	ldr	r3, [pc, #88]	@ (80010d8 <MX_TIM1_Init+0x9c>)
 8001080:	2200      	movs	r2, #0
 8001082:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001084:	4814      	ldr	r0, [pc, #80]	@ (80010d8 <MX_TIM1_Init+0x9c>)
 8001086:	f01e f85a 	bl	801f13e <HAL_TIM_Base_Init>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001090:	f000 fc03 	bl	800189a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001094:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001098:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800109a:	f107 0310 	add.w	r3, r7, #16
 800109e:	4619      	mov	r1, r3
 80010a0:	480d      	ldr	r0, [pc, #52]	@ (80010d8 <MX_TIM1_Init+0x9c>)
 80010a2:	f01e f91b 	bl	801f2dc <HAL_TIM_ConfigClockSource>
 80010a6:	4603      	mov	r3, r0
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d001      	beq.n	80010b0 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80010ac:	f000 fbf5 	bl	800189a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80010b0:	2320      	movs	r3, #32
 80010b2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80010b4:	2300      	movs	r3, #0
 80010b6:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80010bc:	1d3b      	adds	r3, r7, #4
 80010be:	4619      	mov	r1, r3
 80010c0:	4805      	ldr	r0, [pc, #20]	@ (80010d8 <MX_TIM1_Init+0x9c>)
 80010c2:	f01e fb47 	bl	801f754 <HAL_TIMEx_MasterConfigSynchronization>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80010cc:	f000 fbe5 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80010d0:	bf00      	nop
 80010d2:	3720      	adds	r7, #32
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000380 	.word	0x20000380
 80010dc:	40010000 	.word	0x40010000

080010e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b088      	sub	sp, #32
 80010e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010e6:	f107 0310 	add.w	r3, r7, #16
 80010ea:	2200      	movs	r2, #0
 80010ec:	601a      	str	r2, [r3, #0]
 80010ee:	605a      	str	r2, [r3, #4]
 80010f0:	609a      	str	r2, [r3, #8]
 80010f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010f4:	1d3b      	adds	r3, r7, #4
 80010f6:	2200      	movs	r2, #0
 80010f8:	601a      	str	r2, [r3, #0]
 80010fa:	605a      	str	r2, [r3, #4]
 80010fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010fe:	4b1d      	ldr	r3, [pc, #116]	@ (8001174 <MX_TIM3_Init+0x94>)
 8001100:	4a1d      	ldr	r2, [pc, #116]	@ (8001178 <MX_TIM3_Init+0x98>)
 8001102:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 199;
 8001104:	4b1b      	ldr	r3, [pc, #108]	@ (8001174 <MX_TIM3_Init+0x94>)
 8001106:	22c7      	movs	r2, #199	@ 0xc7
 8001108:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800110a:	4b1a      	ldr	r3, [pc, #104]	@ (8001174 <MX_TIM3_Init+0x94>)
 800110c:	2200      	movs	r2, #0
 800110e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9;
 8001110:	4b18      	ldr	r3, [pc, #96]	@ (8001174 <MX_TIM3_Init+0x94>)
 8001112:	2209      	movs	r2, #9
 8001114:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001116:	4b17      	ldr	r3, [pc, #92]	@ (8001174 <MX_TIM3_Init+0x94>)
 8001118:	2200      	movs	r2, #0
 800111a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800111c:	4b15      	ldr	r3, [pc, #84]	@ (8001174 <MX_TIM3_Init+0x94>)
 800111e:	2200      	movs	r2, #0
 8001120:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001122:	4814      	ldr	r0, [pc, #80]	@ (8001174 <MX_TIM3_Init+0x94>)
 8001124:	f01e f80b 	bl	801f13e <HAL_TIM_Base_Init>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800112e:	f000 fbb4 	bl	800189a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001132:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001136:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001138:	f107 0310 	add.w	r3, r7, #16
 800113c:	4619      	mov	r1, r3
 800113e:	480d      	ldr	r0, [pc, #52]	@ (8001174 <MX_TIM3_Init+0x94>)
 8001140:	f01e f8cc 	bl	801f2dc <HAL_TIM_ConfigClockSource>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 800114a:	f000 fba6 	bl	800189a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800114e:	2300      	movs	r3, #0
 8001150:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001152:	2300      	movs	r3, #0
 8001154:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001156:	1d3b      	adds	r3, r7, #4
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	@ (8001174 <MX_TIM3_Init+0x94>)
 800115c:	f01e fafa 	bl	801f754 <HAL_TIMEx_MasterConfigSynchronization>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 8001166:	f000 fb98 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	3720      	adds	r7, #32
 800116e:	46bd      	mov	sp, r7
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	20000418 	.word	0x20000418
 8001178:	40000400 	.word	0x40000400

0800117c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001180:	4b22      	ldr	r3, [pc, #136]	@ (800120c <MX_USART3_UART_Init+0x90>)
 8001182:	4a23      	ldr	r2, [pc, #140]	@ (8001210 <MX_USART3_UART_Init+0x94>)
 8001184:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001186:	4b21      	ldr	r3, [pc, #132]	@ (800120c <MX_USART3_UART_Init+0x90>)
 8001188:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800118c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800118e:	4b1f      	ldr	r3, [pc, #124]	@ (800120c <MX_USART3_UART_Init+0x90>)
 8001190:	2200      	movs	r2, #0
 8001192:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001194:	4b1d      	ldr	r3, [pc, #116]	@ (800120c <MX_USART3_UART_Init+0x90>)
 8001196:	2200      	movs	r2, #0
 8001198:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800119a:	4b1c      	ldr	r3, [pc, #112]	@ (800120c <MX_USART3_UART_Init+0x90>)
 800119c:	2200      	movs	r2, #0
 800119e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011a0:	4b1a      	ldr	r3, [pc, #104]	@ (800120c <MX_USART3_UART_Init+0x90>)
 80011a2:	220c      	movs	r2, #12
 80011a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011a6:	4b19      	ldr	r3, [pc, #100]	@ (800120c <MX_USART3_UART_Init+0x90>)
 80011a8:	2200      	movs	r2, #0
 80011aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ac:	4b17      	ldr	r3, [pc, #92]	@ (800120c <MX_USART3_UART_Init+0x90>)
 80011ae:	2200      	movs	r2, #0
 80011b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80011b2:	4b16      	ldr	r3, [pc, #88]	@ (800120c <MX_USART3_UART_Init+0x90>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80011b8:	4b14      	ldr	r3, [pc, #80]	@ (800120c <MX_USART3_UART_Init+0x90>)
 80011ba:	2200      	movs	r2, #0
 80011bc:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80011be:	4b13      	ldr	r3, [pc, #76]	@ (800120c <MX_USART3_UART_Init+0x90>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011c4:	4811      	ldr	r0, [pc, #68]	@ (800120c <MX_USART3_UART_Init+0x90>)
 80011c6:	f01e fb53 	bl	801f870 <HAL_UART_Init>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80011d0:	f000 fb63 	bl	800189a <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011d4:	2100      	movs	r1, #0
 80011d6:	480d      	ldr	r0, [pc, #52]	@ (800120c <MX_USART3_UART_Init+0x90>)
 80011d8:	f01f fb5b 	bl	8020892 <HAL_UARTEx_SetTxFifoThreshold>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d001      	beq.n	80011e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80011e2:	f000 fb5a 	bl	800189a <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80011e6:	2100      	movs	r1, #0
 80011e8:	4808      	ldr	r0, [pc, #32]	@ (800120c <MX_USART3_UART_Init+0x90>)
 80011ea:	f01f fb90 	bl	802090e <HAL_UARTEx_SetRxFifoThreshold>
 80011ee:	4603      	mov	r3, r0
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d001      	beq.n	80011f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80011f4:	f000 fb51 	bl	800189a <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80011f8:	4804      	ldr	r0, [pc, #16]	@ (800120c <MX_USART3_UART_Init+0x90>)
 80011fa:	f01f fb11 	bl	8020820 <HAL_UARTEx_DisableFifoMode>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001204:	f000 fb49 	bl	800189a <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}
 800120c:	20000554 	.word	0x20000554
 8001210:	40004800 	.word	0x40004800

08001214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	4b19      	ldr	r3, [pc, #100]	@ (8001280 <MX_DMA_Init+0x6c>)
 800121c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001220:	4a17      	ldr	r2, [pc, #92]	@ (8001280 <MX_DMA_Init+0x6c>)
 8001222:	f043 0301 	orr.w	r3, r3, #1
 8001226:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <MX_DMA_Init+0x6c>)
 800122c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001230:	f003 0301 	and.w	r3, r3, #1
 8001234:	607b      	str	r3, [r7, #4]
 8001236:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 6, 0);
 8001238:	2200      	movs	r2, #0
 800123a:	2106      	movs	r1, #6
 800123c:	200b      	movs	r0, #11
 800123e:	f018 fa86 	bl	801974e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001242:	200b      	movs	r0, #11
 8001244:	f018 fa9d 	bl	8019782 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 6, 0);
 8001248:	2200      	movs	r2, #0
 800124a:	2106      	movs	r1, #6
 800124c:	200c      	movs	r0, #12
 800124e:	f018 fa7e 	bl	801974e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001252:	200c      	movs	r0, #12
 8001254:	f018 fa95 	bl	8019782 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 7, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2107      	movs	r1, #7
 800125c:	200d      	movs	r0, #13
 800125e:	f018 fa76 	bl	801974e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8001262:	200d      	movs	r0, #13
 8001264:	f018 fa8d 	bl	8019782 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 7, 0);
 8001268:	2200      	movs	r2, #0
 800126a:	2107      	movs	r1, #7
 800126c:	200e      	movs	r0, #14
 800126e:	f018 fa6e 	bl	801974e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8001272:	200e      	movs	r0, #14
 8001274:	f018 fa85 	bl	8019782 <HAL_NVIC_EnableIRQ>

}
 8001278:	bf00      	nop
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	58024400 	.word	0x58024400

08001284 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	b08c      	sub	sp, #48	@ 0x30
 8001288:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800128a:	f107 031c 	add.w	r3, r7, #28
 800128e:	2200      	movs	r2, #0
 8001290:	601a      	str	r2, [r3, #0]
 8001292:	605a      	str	r2, [r3, #4]
 8001294:	609a      	str	r2, [r3, #8]
 8001296:	60da      	str	r2, [r3, #12]
 8001298:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800129a:	4b61      	ldr	r3, [pc, #388]	@ (8001420 <MX_GPIO_Init+0x19c>)
 800129c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012a0:	4a5f      	ldr	r2, [pc, #380]	@ (8001420 <MX_GPIO_Init+0x19c>)
 80012a2:	f043 0310 	orr.w	r3, r3, #16
 80012a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012aa:	4b5d      	ldr	r3, [pc, #372]	@ (8001420 <MX_GPIO_Init+0x19c>)
 80012ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	61bb      	str	r3, [r7, #24]
 80012b6:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012b8:	4b59      	ldr	r3, [pc, #356]	@ (8001420 <MX_GPIO_Init+0x19c>)
 80012ba:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012be:	4a58      	ldr	r2, [pc, #352]	@ (8001420 <MX_GPIO_Init+0x19c>)
 80012c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012c4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012c8:	4b55      	ldr	r3, [pc, #340]	@ (8001420 <MX_GPIO_Init+0x19c>)
 80012ca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ce:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d6:	4b52      	ldr	r3, [pc, #328]	@ (8001420 <MX_GPIO_Init+0x19c>)
 80012d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012dc:	4a50      	ldr	r2, [pc, #320]	@ (8001420 <MX_GPIO_Init+0x19c>)
 80012de:	f043 0304 	orr.w	r3, r3, #4
 80012e2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80012e6:	4b4e      	ldr	r3, [pc, #312]	@ (8001420 <MX_GPIO_Init+0x19c>)
 80012e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	613b      	str	r3, [r7, #16]
 80012f2:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012f4:	4b4a      	ldr	r3, [pc, #296]	@ (8001420 <MX_GPIO_Init+0x19c>)
 80012f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80012fa:	4a49      	ldr	r2, [pc, #292]	@ (8001420 <MX_GPIO_Init+0x19c>)
 80012fc:	f043 0301 	orr.w	r3, r3, #1
 8001300:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001304:	4b46      	ldr	r3, [pc, #280]	@ (8001420 <MX_GPIO_Init+0x19c>)
 8001306:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	60fb      	str	r3, [r7, #12]
 8001310:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001312:	4b43      	ldr	r3, [pc, #268]	@ (8001420 <MX_GPIO_Init+0x19c>)
 8001314:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001318:	4a41      	ldr	r2, [pc, #260]	@ (8001420 <MX_GPIO_Init+0x19c>)
 800131a:	f043 0302 	orr.w	r3, r3, #2
 800131e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001322:	4b3f      	ldr	r3, [pc, #252]	@ (8001420 <MX_GPIO_Init+0x19c>)
 8001324:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001328:	f003 0302 	and.w	r3, r3, #2
 800132c:	60bb      	str	r3, [r7, #8]
 800132e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001330:	4b3b      	ldr	r3, [pc, #236]	@ (8001420 <MX_GPIO_Init+0x19c>)
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001336:	4a3a      	ldr	r2, [pc, #232]	@ (8001420 <MX_GPIO_Init+0x19c>)
 8001338:	f043 0308 	orr.w	r3, r3, #8
 800133c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001340:	4b37      	ldr	r3, [pc, #220]	@ (8001420 <MX_GPIO_Init+0x19c>)
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001346:	f003 0308 	and.w	r3, r3, #8
 800134a:	607b      	str	r3, [r7, #4]
 800134c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin, GPIO_PIN_RESET);
 800134e:	2200      	movs	r2, #0
 8001350:	213c      	movs	r1, #60	@ 0x3c
 8001352:	4834      	ldr	r0, [pc, #208]	@ (8001424 <MX_GPIO_Init+0x1a0>)
 8001354:	f01a fb60 	bl	801ba18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	f44f 4144 	mov.w	r1, #50176	@ 0xc400
 800135e:	4832      	ldr	r0, [pc, #200]	@ (8001428 <MX_GPIO_Init+0x1a4>)
 8001360:	f01a fb5a 	bl	801ba18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, HS_ADC_START_Pin|HS_ADC_RESET_Pin, GPIO_PIN_RESET);
 8001364:	2200      	movs	r2, #0
 8001366:	f44f 61a0 	mov.w	r1, #1280	@ 0x500
 800136a:	4830      	ldr	r0, [pc, #192]	@ (800142c <MX_GPIO_Init+0x1a8>)
 800136c:	f01a fb54 	bl	801ba18 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DUT_HVDC_ISOLATE_Pin DUT_VGS_IDLE_SEL_Pin DUT_VICTRL_SEL_Pin DUT_GATE_SEL_Pin */
  GPIO_InitStruct.Pin = DUT_HVDC_ISOLATE_Pin|DUT_VGS_IDLE_SEL_Pin|DUT_VICTRL_SEL_Pin|DUT_GATE_SEL_Pin;
 8001370:	233c      	movs	r3, #60	@ 0x3c
 8001372:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001374:	2301      	movs	r3, #1
 8001376:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800137c:	2300      	movs	r3, #0
 800137e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001380:	f107 031c 	add.w	r3, r7, #28
 8001384:	4619      	mov	r1, r3
 8001386:	4827      	ldr	r0, [pc, #156]	@ (8001424 <MX_GPIO_Init+0x1a0>)
 8001388:	f01a f996 	bl	801b6b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : GADC_RESET_Pin DUT_DAC_LDAC_Pin DUT_DAC_RESET_Pin */
  GPIO_InitStruct.Pin = GADC_RESET_Pin|DUT_DAC_LDAC_Pin|DUT_DAC_RESET_Pin;
 800138c:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001390:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001392:	2301      	movs	r3, #1
 8001394:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001396:	2300      	movs	r3, #0
 8001398:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139a:	2300      	movs	r3, #0
 800139c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800139e:	f107 031c 	add.w	r3, r7, #28
 80013a2:	4619      	mov	r1, r3
 80013a4:	4820      	ldr	r0, [pc, #128]	@ (8001428 <MX_GPIO_Init+0x1a4>)
 80013a6:	f01a f987 	bl	801b6b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : GADC_RVS_Pin */
  GPIO_InitStruct.Pin = GADC_RVS_Pin;
 80013aa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80013ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013b0:	2300      	movs	r3, #0
 80013b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b4:	2300      	movs	r3, #0
 80013b6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GADC_RVS_GPIO_Port, &GPIO_InitStruct);
 80013b8:	f107 031c 	add.w	r3, r7, #28
 80013bc:	4619      	mov	r1, r3
 80013be:	481a      	ldr	r0, [pc, #104]	@ (8001428 <MX_GPIO_Init+0x1a4>)
 80013c0:	f01a f97a 	bl	801b6b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : HS_ADC_START_Pin HS_ADC_RESET_Pin */
  GPIO_InitStruct.Pin = HS_ADC_START_Pin|HS_ADC_RESET_Pin;
 80013c4:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80013c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013ca:	2301      	movs	r3, #1
 80013cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d2:	2300      	movs	r3, #0
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013d6:	f107 031c 	add.w	r3, r7, #28
 80013da:	4619      	mov	r1, r3
 80013dc:	4813      	ldr	r0, [pc, #76]	@ (800142c <MX_GPIO_Init+0x1a8>)
 80013de:	f01a f96b 	bl	801b6b8 <HAL_GPIO_Init>

  /*Configure GPIO pin : HS_ADC_DRDY_Pin */
  GPIO_InitStruct.Pin = HS_ADC_DRDY_Pin;
 80013e2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80013e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013e8:	2300      	movs	r3, #0
 80013ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(HS_ADC_DRDY_GPIO_Port, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	480d      	ldr	r0, [pc, #52]	@ (800142c <MX_GPIO_Init+0x1a8>)
 80013f8:	f01a f95e 	bl	801b6b8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EFUSE_FLT_Pin EFUSE_PGOOD_Pin */
  GPIO_InitStruct.Pin = EFUSE_FLT_Pin|EFUSE_PGOOD_Pin;
 80013fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001400:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001402:	2300      	movs	r3, #0
 8001404:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001406:	2300      	movs	r3, #0
 8001408:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800140a:	f107 031c 	add.w	r3, r7, #28
 800140e:	4619      	mov	r1, r3
 8001410:	4807      	ldr	r0, [pc, #28]	@ (8001430 <MX_GPIO_Init+0x1ac>)
 8001412:	f01a f951 	bl	801b6b8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001416:	bf00      	nop
 8001418:	3730      	adds	r7, #48	@ 0x30
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	58024400 	.word	0x58024400
 8001424:	58021000 	.word	0x58021000
 8001428:	58020c00 	.word	0x58020c00
 800142c:	58020000 	.word	0x58020000
 8001430:	58020400 	.word	0x58020400

08001434 <vHeapInit>:
static uint8_t ucRAM_3 [ 32 * 1024] __attribute__( ( section( ".ram3_data" ) ) );

#define mainMEM_REGION( REGION )   REGION, sizeof( REGION )

static void vHeapInit( )
{
 8001434:	b5b0      	push	{r4, r5, r7, lr}
 8001436:	b088      	sub	sp, #32
 8001438:	af00      	add	r7, sp, #0
	/* Note: the memories must be sorted on their physical address. */
	HeapRegion_t xHeapRegions[] = {
 800143a:	4b08      	ldr	r3, [pc, #32]	@ (800145c <vHeapInit+0x28>)
 800143c:	463c      	mov	r4, r7
 800143e:	461d      	mov	r5, r3
 8001440:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001442:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001444:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001448:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
//		{ mainMEM_REGION( ucRAM_2 ) },
		{ mainMEM_REGION( ucRAM_3 ) },
		{ NULL, 0 }
		};

	vPortDefineHeapRegions( xHeapRegions );
 800144c:	463b      	mov	r3, r7
 800144e:	4618      	mov	r0, r3
 8001450:	f004 fc18 	bl	8005c84 <vPortDefineHeapRegions>
}
 8001454:	bf00      	nop
 8001456:	3720      	adds	r7, #32
 8001458:	46bd      	mov	sp, r7
 800145a:	bdb0      	pop	{r4, r5, r7, pc}
 800145c:	08022de0 	.word	0x08022de0

08001460 <ulGetRunTimeCounterValue>:


// helper functions

uint32_t ulGetRunTimeCounterValue()
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
	return 0U;
 8001464:	2300      	movs	r3, #0
}
 8001466:	4618      	mov	r0, r3
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <vAssertCalled>:

void vAssertCalled( const char *pcFile, uint32_t ulLine )
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b084      	sub	sp, #16
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
 8001478:	6039      	str	r1, [r7, #0]
volatile unsigned long ul = 0;
 800147a:	2300      	movs	r3, #0
 800147c:	60fb      	str	r3, [r7, #12]

	( void ) pcFile;
	( void ) ulLine;

	taskENTER_CRITICAL();
 800147e:	f004 f967 	bl	8005750 <vPortEnterCritical>
	{
		/* Set ul to a non-zero value using the debugger to step out of this
		function. */
		while( ul == 0 )
 8001482:	e000      	b.n	8001486 <vAssertCalled+0x16>
		{
			__NOP();
 8001484:	bf00      	nop
		while( ul == 0 )
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d0fb      	beq.n	8001484 <vAssertCalled+0x14>
		}
	}
	taskEXIT_CRITICAL();
 800148c:	f004 f98c 	bl	80057a8 <vPortExitCritical>
}
 8001490:	bf00      	nop
 8001492:	3710      	adds	r7, #16
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}

08001498 <vApplicationMallocFailedHook>:

void vApplicationMallocFailedHook( void )
{
 8001498:	b580      	push	{r7, lr}
 800149a:	af00      	add	r7, sp, #0
	internally by FreeRTOS API functions that create tasks, queues, software
	timers, and semaphores.  The size of the FreeRTOS heap is set by the
	configTOTAL_HEAP_SIZE configuration constant in FreeRTOSConfig.h. */

	/* Force an assert. */
	configASSERT( ( volatile void * ) NULL );
 800149c:	f240 412b 	movw	r1, #1067	@ 0x42b
 80014a0:	4802      	ldr	r0, [pc, #8]	@ (80014ac <vApplicationMallocFailedHook+0x14>)
 80014a2:	f7ff ffe5 	bl	8001470 <vAssertCalled>
}
 80014a6:	bf00      	nop
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	08022e00 	.word	0x08022e00

080014b0 <ulApplicationGetNextSequenceNumber>:
uint32_t ulApplicationGetNextSequenceNumber(
    uint32_t ulSourceAddress,
    uint16_t usSourcePort,
    uint32_t ulDestinationAddress,
    uint16_t usDestinationPort )
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b086      	sub	sp, #24
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	60f8      	str	r0, [r7, #12]
 80014b8:	607a      	str	r2, [r7, #4]
 80014ba:	461a      	mov	r2, r3
 80014bc:	460b      	mov	r3, r1
 80014be:	817b      	strh	r3, [r7, #10]
 80014c0:	4613      	mov	r3, r2
 80014c2:	813b      	strh	r3, [r7, #8]
	uint32_t ulReturn;
	( void ) ulSourceAddress;
	( void ) usSourcePort;
	( void ) ulDestinationAddress;
	( void ) usDestinationPort;
	xApplicationGetRandomNumber( &ulReturn );
 80014c4:	f107 0314 	add.w	r3, r7, #20
 80014c8:	4618      	mov	r0, r3
 80014ca:	f000 f89b 	bl	8001604 <xApplicationGetRandomNumber>

	return ulReturn;
 80014ce:	697b      	ldr	r3, [r7, #20]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <vApplicationIPNetworkEventHook>:

void vApplicationIPNetworkEventHook( eIPCallbackEvent_t eNetworkEvent )
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08a      	sub	sp, #40	@ 0x28
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	/* If the network has just come up...*/
	if( eNetworkEvent == eNetworkUp )
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d147      	bne.n	8001578 <vApplicationIPNetworkEventHook+0xa0>
	uint32_t ulIPAddress, ulNetMask, ulGatewayAddress, ulDNSServerAddress;
	char cBuffer[ 16 ];

		/* Create the tasks that use the IP stack if they have not already been
		created. */
		if( xTasksAlreadyCreated == pdFALSE )
 80014e8:	4b25      	ldr	r3, [pc, #148]	@ (8001580 <vApplicationIPNetworkEventHook+0xa8>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d105      	bne.n	80014fc <vApplicationIPNetworkEventHook+0x24>
		{
			xTasksAlreadyCreated = pdTRUE;
 80014f0:	4b23      	ldr	r3, [pc, #140]	@ (8001580 <vApplicationIPNetworkEventHook+0xa8>)
 80014f2:	2201      	movs	r2, #1
 80014f4:	601a      	str	r2, [r3, #0]
			/* Sockets, and tasks that use the TCP/IP stack can be created here. */
//
			xDoCreateSockets = pdTRUE;
 80014f6:	4b23      	ldr	r3, [pc, #140]	@ (8001584 <vApplicationIPNetworkEventHook+0xac>)
 80014f8:	2201      	movs	r2, #1
 80014fa:	601a      	str	r2, [r3, #0]
		}
		/* Print out the network configuration, which may have come from a DHCP
		server. */
		FreeRTOS_GetAddressConfiguration( &ulIPAddress, &ulNetMask, &ulGatewayAddress, &ulDNSServerAddress );
 80014fc:	f107 0318 	add.w	r3, r7, #24
 8001500:	f107 021c 	add.w	r2, r7, #28
 8001504:	f107 0120 	add.w	r1, r7, #32
 8001508:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800150c:	f007 fb68 	bl	8008be0 <FreeRTOS_GetAddressConfiguration>
		FreeRTOS_inet_ntoa( ulIPAddress, cBuffer );
 8001510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001512:	f107 0208 	add.w	r2, r7, #8
 8001516:	4611      	mov	r1, r2
 8001518:	4618      	mov	r0, r3
 800151a:	f00d f965 	bl	800e7e8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "IP Address: %s\n", cBuffer ) );
 800151e:	f107 0308 	add.w	r3, r7, #8
 8001522:	4619      	mov	r1, r3
 8001524:	4818      	ldr	r0, [pc, #96]	@ (8001588 <vApplicationIPNetworkEventHook+0xb0>)
 8001526:	f01f fbab 	bl	8020c80 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulNetMask, cBuffer );
 800152a:	6a3b      	ldr	r3, [r7, #32]
 800152c:	f107 0208 	add.w	r2, r7, #8
 8001530:	4611      	mov	r1, r2
 8001532:	4618      	mov	r0, r3
 8001534:	f00d f958 	bl	800e7e8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Subnet Mask: %s\n", cBuffer ) );
 8001538:	f107 0308 	add.w	r3, r7, #8
 800153c:	4619      	mov	r1, r3
 800153e:	4813      	ldr	r0, [pc, #76]	@ (800158c <vApplicationIPNetworkEventHook+0xb4>)
 8001540:	f01f fb9e 	bl	8020c80 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulGatewayAddress, cBuffer );
 8001544:	69fb      	ldr	r3, [r7, #28]
 8001546:	f107 0208 	add.w	r2, r7, #8
 800154a:	4611      	mov	r1, r2
 800154c:	4618      	mov	r0, r3
 800154e:	f00d f94b 	bl	800e7e8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "Gateway Address: %s\n", cBuffer ) );
 8001552:	f107 0308 	add.w	r3, r7, #8
 8001556:	4619      	mov	r1, r3
 8001558:	480d      	ldr	r0, [pc, #52]	@ (8001590 <vApplicationIPNetworkEventHook+0xb8>)
 800155a:	f01f fb91 	bl	8020c80 <lUDPLoggingPrintf>

		FreeRTOS_inet_ntoa( ulDNSServerAddress, cBuffer );
 800155e:	69bb      	ldr	r3, [r7, #24]
 8001560:	f107 0208 	add.w	r2, r7, #8
 8001564:	4611      	mov	r1, r2
 8001566:	4618      	mov	r0, r3
 8001568:	f00d f93e 	bl	800e7e8 <FreeRTOS_inet_ntoa>
		FreeRTOS_printf( ( "DNS Server Address: %s\n", cBuffer ) );
 800156c:	f107 0308 	add.w	r3, r7, #8
 8001570:	4619      	mov	r1, r3
 8001572:	4808      	ldr	r0, [pc, #32]	@ (8001594 <vApplicationIPNetworkEventHook+0xbc>)
 8001574:	f01f fb84 	bl	8020c80 <lUDPLoggingPrintf>
	}
}
 8001578:	bf00      	nop
 800157a:	3728      	adds	r7, #40	@ 0x28
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000ab0 	.word	0x20000ab0
 8001584:	20000ab4 	.word	0x20000ab4
 8001588:	08022e14 	.word	0x08022e14
 800158c:	08022e24 	.word	0x08022e24
 8001590:	08022e38 	.word	0x08022e38
 8001594:	08022e50 	.word	0x08022e50

08001598 <xApplicationDNSQueryHook>:
/*-----------------------------------------------------------*/

BaseType_t xApplicationDNSQueryHook( const char *pcName )
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b084      	sub	sp, #16
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFAIL;
 80015a0:	2300      	movs	r3, #0
 80015a2:	60fb      	str	r3, [r7, #12]

	/* Determine if a name lookup is for this node.  Two names are given
	to this node: that returned by pcApplicationHostnameHook() and that set
	by mainDEVICE_NICK_NAME. */
	if( strcasecmp( pcName, pcApplicationHostnameHook() ) == 0 )
 80015a4:	f000 f810 	bl	80015c8 <pcApplicationHostnameHook>
 80015a8:	4603      	mov	r3, r0
 80015aa:	4619      	mov	r1, r3
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f020 fd43 	bl	8022038 <strcasecmp>
 80015b2:	4603      	mov	r3, r0
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <xApplicationDNSQueryHook+0x24>
	{
		xReturn = pdPASS;
 80015b8:	2301      	movs	r3, #1
 80015ba:	60fb      	str	r3, [r7, #12]
	}
	return xReturn;
 80015bc:	68fb      	ldr	r3, [r7, #12]
}
 80015be:	4618      	mov	r0, r3
 80015c0:	3710      	adds	r7, #16
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
	...

080015c8 <pcApplicationHostnameHook>:
/*-----------------------------------------------------------*/

const char *pcApplicationHostnameHook( void )
{
 80015c8:	b480      	push	{r7}
 80015ca:	af00      	add	r7, sp, #0
	/* Assign the name "STM32H7" to this network node.  This function will be
	called during the DHCP: the machine will be registered with an IP address
	plus this name. */
	return "STM32H7";
 80015cc:	4b02      	ldr	r3, [pc, #8]	@ (80015d8 <pcApplicationHostnameHook+0x10>)
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	08022e68 	.word	0x08022e68

080015dc <vApplicationPingReplyHook>:
/*-----------------------------------------------------------*/

#if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
	void vApplicationPingReplyHook( ePingReplyStatus_t eStatus, uint16_t usIdentifier )
	{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	4603      	mov	r3, r0
 80015e4:	460a      	mov	r2, r1
 80015e6:	71fb      	strb	r3, [r7, #7]
 80015e8:	4613      	mov	r3, r2
 80015ea:	80bb      	strh	r3, [r7, #4]
		FreeRTOS_printf( ( "Received ping ID %04X\n", usIdentifier ) );
 80015ec:	88bb      	ldrh	r3, [r7, #4]
 80015ee:	4619      	mov	r1, r3
 80015f0:	4803      	ldr	r0, [pc, #12]	@ (8001600 <vApplicationPingReplyHook+0x24>)
 80015f2:	f01f fb45 	bl	8020c80 <lUDPLoggingPrintf>
	}
 80015f6:	bf00      	nop
 80015f8:	3708      	adds	r7, #8
 80015fa:	46bd      	mov	sp, r7
 80015fc:	bd80      	pop	{r7, pc}
 80015fe:	bf00      	nop
 8001600:	08022e70 	.word	0x08022e70

08001604 <xApplicationGetRandomNumber>:
#endif

/*-----------------------------------------------------------*/

BaseType_t xApplicationGetRandomNumber( uint32_t *pulNumber ){
 8001604:	b580      	push	{r7, lr}
 8001606:	b082      	sub	sp, #8
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	*pulNumber = rand();
 800160c:	f020 fba6 	bl	8021d5c <rand>
 8001610:	4603      	mov	r3, r0
 8001612:	461a      	mov	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	601a      	str	r2, [r3, #0]
	return pdTRUE;
 8001618:	2301      	movs	r3, #1
}
 800161a:	4618      	mov	r0, r3
 800161c:	3708      	adds	r7, #8
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
	...

08001624 <prvGetRegistersFromStack>:
};

volatile struct xREGISTER_STACK *pxRegisterStack = NULL;

void prvGetRegistersFromStack( uint32_t * pulFaultStackAddress )
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
	/* When the debuggger stops here, you can inspect the registeers of the
	application by looking at *pxRegisterStack. */
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
		( pulFaultStackAddress - ARRAY_SIZE( pxRegisterStack->spare0 ) );
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	3b20      	subs	r3, #32
	pxRegisterStack = ( volatile struct xREGISTER_STACK * )
 8001630:	4a01      	ldr	r2, [pc, #4]	@ (8001638 <prvGetRegistersFromStack+0x14>)
 8001632:	6013      	str	r3, [r2, #0]

	/* When the following line is hit, the variables contain the register values. */
	for( ;; );
 8001634:	bf00      	nop
 8001636:	e7fd      	b.n	8001634 <prvGetRegistersFromStack+0x10>
 8001638:	20000ac0 	.word	0x20000ac0

0800163c <HardFault_Handler>:
}

void HardFault_Handler(void)
{
 800163c:	b480      	push	{r7}
 800163e:	af00      	add	r7, sp, #0
	__asm volatile
 8001640:	f01e 0f04 	tst.w	lr, #4
 8001644:	bf0c      	ite	eq
 8001646:	f3ef 8008 	mrseq	r0, MSP
 800164a:	f3ef 8009 	mrsne	r0, PSP
 800164e:	6981      	ldr	r1, [r0, #24]
 8001650:	f7ff ffe8 	bl	8001624 <prvGetRegistersFromStack>
		" mrseq r0, msp                                             \n"
		" mrsne r0, psp                                             \n"
		" ldr r1, [r0, #24]                                         \n"
		" bl prvGetRegistersFromStack                               \n"
	);
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <prvServerWorkTask>:



static void prvServerWorkTask( void *pvParameters )
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
	TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 100U );
#endif	/* ( CONTINUOUS_PING != 0 ) */

	for( ;; )
	{
		vTaskDelay( 10U );
 8001668:	200a      	movs	r0, #10
 800166a:	f002 f93b 	bl	80038e4 <vTaskDelay>
		if( xDoCreateSockets != pdFALSE )
 800166e:	4b05      	ldr	r3, [pc, #20]	@ (8001684 <prvServerWorkTask+0x24>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d0f8      	beq.n	8001668 <prvServerWorkTask+0x8>
		{
			xDoCreateSockets = pdFALSE;
 8001676:	4b03      	ldr	r3, [pc, #12]	@ (8001684 <prvServerWorkTask+0x24>)
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
			/* Start a new task to fetch logging lines and send them out.
			See FreeRTOSConfig.h for the configuration of UDP logging. */
			vUDPLoggingTaskCreate();
 800167c:	f01f fb1c 	bl	8020cb8 <vUDPLoggingTaskCreate>
		vTaskDelay( 10U );
 8001680:	e7f2      	b.n	8001668 <prvServerWorkTask+0x8>
 8001682:	bf00      	nop
 8001684:	20000ab4 	.word	0x20000ab4

08001688 <vADCTCPTask>:

}



static void vADCTCPTask(void *pvParameters) {
 8001688:	b580      	push	{r7, lr}
 800168a:	b098      	sub	sp, #96	@ 0x60
 800168c:	af02      	add	r7, sp, #8
 800168e:	6078      	str	r0, [r7, #4]
    Socket_t xSocket;
    static const TickType_t xTimeOut = pdMS_TO_TICKS( 500 );
    struct freertos_sockaddr xRemoteAddress;
    BaseType_t xAlreadyTransmitted, xBytesSent;
    char *pcBufferToTransmit;
    const size_t xTotalLengthToSend = sizeof(usADCDataMock0);
 8001690:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001694:	64bb      	str	r3, [r7, #72]	@ 0x48
    uint32_t ulCurrBuf;

    /* Remote address setup */
    memset(&xRemoteAddress, 0, sizeof(xRemoteAddress));
 8001696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169a:	2218      	movs	r2, #24
 800169c:	2100      	movs	r1, #0
 800169e:	4618      	mov	r0, r3
 80016a0:	f01f fe17 	bl	80212d2 <memset>
    xRemoteAddress.sin_port = FreeRTOS_htons(usADCPort);
 80016a4:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 80016a8:	021b      	lsls	r3, r3, #8
 80016aa:	b21a      	sxth	r2, r3
 80016ac:	f241 53b3 	movw	r3, #5555	@ 0x15b3
 80016b0:	0a1b      	lsrs	r3, r3, #8
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	b21b      	sxth	r3, r3
 80016b6:	4313      	orrs	r3, r2
 80016b8:	b21b      	sxth	r3, r3
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	84fb      	strh	r3, [r7, #38]	@ 0x26
    xRemoteAddress.sin_address.ulIP_IPv4 = FreeRTOS_inet_addr_quick(ucServerIPAddress[0], ucServerIPAddress[1], ucServerIPAddress[2], ucServerIPAddress[3]);
 80016be:	2303      	movs	r3, #3
 80016c0:	061a      	lsls	r2, r3, #24
 80016c2:	2301      	movs	r3, #1
 80016c4:	041b      	lsls	r3, r3, #16
 80016c6:	431a      	orrs	r2, r3
 80016c8:	23a8      	movs	r3, #168	@ 0xa8
 80016ca:	021b      	lsls	r3, r3, #8
 80016cc:	4313      	orrs	r3, r2
 80016ce:	22c0      	movs	r2, #192	@ 0xc0
 80016d0:	4313      	orrs	r3, r2
 80016d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    xRemoteAddress.sin_family = FREERTOS_AF_INET4;
 80016d4:	2302      	movs	r3, #2
 80016d6:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25

    for(;;) {
        /* Create new socket for each transmission */
	xSocket = FreeRTOS_socket(FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP);
 80016da:	2206      	movs	r2, #6
 80016dc:	2101      	movs	r1, #1
 80016de:	2002      	movs	r0, #2
 80016e0:	f00b ff76 	bl	800d5d0 <FreeRTOS_socket>
 80016e4:	6478      	str	r0, [r7, #68]	@ 0x44
	  WinProperties_t xWinProperties;

	  memset(&xWinProperties, '\0', sizeof xWinProperties);
 80016e6:	f107 0310 	add.w	r3, r7, #16
 80016ea:	2210      	movs	r2, #16
 80016ec:	2100      	movs	r1, #0
 80016ee:	4618      	mov	r0, r3
 80016f0:	f01f fdef 	bl	80212d2 <memset>

	  xWinProperties.lTxBufSize   = ipconfigIPERF_TX_BUFSIZE;	/* Units of bytes. */
 80016f4:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 80016f8:	613b      	str	r3, [r7, #16]
	  xWinProperties.lTxWinSize   = ipconfigIPERF_TX_WINSIZE;	/* Size in units of MSS */
 80016fa:	230c      	movs	r3, #12
 80016fc:	617b      	str	r3, [r7, #20]
	  xWinProperties.lRxBufSize   = ipconfigIPERF_RX_BUFSIZE;	/* Units of bytes. */
 80016fe:	f648 03e0 	movw	r3, #35040	@ 0x88e0
 8001702:	61bb      	str	r3, [r7, #24]
	  xWinProperties.lRxWinSize   = ipconfigIPERF_RX_WINSIZE; /* Size in units of MSS */
 8001704:	230c      	movs	r3, #12
 8001706:	61fb      	str	r3, [r7, #28]

	  /* Set send and receive time outs. */
	  FreeRTOS_setsockopt( xSocket,
 8001708:	2304      	movs	r3, #4
 800170a:	9300      	str	r3, [sp, #0]
 800170c:	4b48      	ldr	r3, [pc, #288]	@ (8001830 <vADCTCPTask+0x1a8>)
 800170e:	2200      	movs	r2, #0
 8001710:	2100      	movs	r1, #0
 8001712:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001714:	f00c ff16 	bl	800e544 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_RCVTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket,
 8001718:	2304      	movs	r3, #4
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	4b44      	ldr	r3, [pc, #272]	@ (8001830 <vADCTCPTask+0x1a8>)
 800171e:	2201      	movs	r2, #1
 8001720:	2100      	movs	r1, #0
 8001722:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001724:	f00c ff0e 	bl	800e544 <FreeRTOS_setsockopt>
			     0,
			     FREERTOS_SO_SNDTIMEO,
			     &xTimeOut,
			     sizeof( xTimeOut ) );

	  FreeRTOS_setsockopt( xSocket, 0, FREERTOS_SO_WIN_PROPERTIES, ( void * ) &xWinProperties, sizeof( xWinProperties ) );
 8001728:	f107 0310 	add.w	r3, r7, #16
 800172c:	2210      	movs	r2, #16
 800172e:	9200      	str	r2, [sp, #0]
 8001730:	220d      	movs	r2, #13
 8001732:	2100      	movs	r1, #0
 8001734:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001736:	f00c ff05 	bl	800e544 <FreeRTOS_setsockopt>


        configASSERT(xSocket != FREERTOS_INVALID_SOCKET);
 800173a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800173c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001740:	d104      	bne.n	800174c <vADCTCPTask+0xc4>
 8001742:	f240 5153 	movw	r1, #1363	@ 0x553
 8001746:	483b      	ldr	r0, [pc, #236]	@ (8001834 <vADCTCPTask+0x1ac>)
 8001748:	f7ff fe92 	bl	8001470 <vAssertCalled>
        /* Block indefinitely (without a timeout, so no need to check the function's
	   return value) to wait for a notification. NOTE! Real applications
	   should not block indefinitely, but instead time out occasionally in order
	   to handle error conditions that may prevent the interrupt from sending
	   any more notifications. */
	xTaskNotifyWait( 0x00,               /* Don't clear any bits on entry. */
 800174c:	f107 0320 	add.w	r3, r7, #32
 8001750:	f04f 32ff 	mov.w	r2, #4294967295
 8001754:	9200      	str	r2, [sp, #0]
 8001756:	f04f 32ff 	mov.w	r2, #4294967295
 800175a:	2100      	movs	r1, #0
 800175c:	2000      	movs	r0, #0
 800175e:	f003 fa4b 	bl	8004bf8 <xTaskGenericNotifyWait>
			 0xffffffff,          /* Clear all bits on exit. */
			&ulCurrBuf, /* Receives the notification value. */
			portMAX_DELAY );    /* Block indefinitely. */
	if ((ulCurrBuf & 1) != 0){
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	f003 0301 	and.w	r3, r3, #1
 8001768:	2b00      	cmp	r3, #0
 800176a:	d002      	beq.n	8001772 <vADCTCPTask+0xea>
	    pcBufferToTransmit = usADCDataMock1;
 800176c:	4b32      	ldr	r3, [pc, #200]	@ (8001838 <vADCTCPTask+0x1b0>)
 800176e:	653b      	str	r3, [r7, #80]	@ 0x50
 8001770:	e001      	b.n	8001776 <vADCTCPTask+0xee>
	} else {
	    pcBufferToTransmit = usADCDataMock0;
 8001772:	4b32      	ldr	r3, [pc, #200]	@ (800183c <vADCTCPTask+0x1b4>)
 8001774:	653b      	str	r3, [r7, #80]	@ 0x50
	}
//        HAL_GPIO_TogglePin(LD1_GPIO_Port, LD1_Pin);
        xAlreadyTransmitted = 0;
 8001776:	2300      	movs	r3, #0
 8001778:	657b      	str	r3, [r7, #84]	@ 0x54
        xBytesSent = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	643b      	str	r3, [r7, #64]	@ 0x40
//        FreeRTOS_printf(("Start Mock Transmission \n"));

        if(FreeRTOS_connect(xSocket, &xRemoteAddress, sizeof(xRemoteAddress)) == 0) {
 800177e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001782:	2218      	movs	r2, #24
 8001784:	4619      	mov	r1, r3
 8001786:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8001788:	f00d fa7a 	bl	800ec80 <FreeRTOS_connect>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d139      	bne.n	8001806 <vADCTCPTask+0x17e>
        while( xAlreadyTransmitted < xTotalLengthToSend )
 8001792:	e030      	b.n	80017f6 <vADCTCPTask+0x16e>
                {
                    BaseType_t xAvlSpace = 0;
 8001794:	2300      	movs	r3, #0
 8001796:	60fb      	str	r3, [r7, #12]
                    BaseType_t xBytesToSend = 0;
 8001798:	2300      	movs	r3, #0
 800179a:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       buffer that is passed into, rather than copied into, the FreeRTOS_send()
                       function. */

                    /* Obtain the pointer to the current head of sockets TX stream buffer
                       using FreeRTOS_get_tx_head */
                    pucTCPZeroCopyStrmBuffer = FreeRTOS_get_tx_head( xSocket, &xAvlSpace );
 800179c:	f107 030c 	add.w	r3, r7, #12
 80017a0:	4619      	mov	r1, r3
 80017a2:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80017a4:	f00d fc55 	bl	800f052 <FreeRTOS_get_tx_head>
 80017a8:	63f8      	str	r0, [r7, #60]	@ 0x3c
//                    FreeRTOS_printf(("xSocket Available Space: %d \n", xAvlSpace));

                    if(pucTCPZeroCopyStrmBuffer)
 80017aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d027      	beq.n	8001800 <vADCTCPTask+0x178>
                    {
                        /* Check if there is enough space in the stream buffer to place
                           the entire data. */
                        if((xTotalLengthToSend - xAlreadyTransmitted) > xAvlSpace)
 80017b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017b2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4293      	cmp	r3, r2
 80017ba:	d902      	bls.n	80017c2 <vADCTCPTask+0x13a>
                        {
                            xBytesToSend = xAvlSpace;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80017c0:	e003      	b.n	80017ca <vADCTCPTask+0x142>
                        }
                        else
                        {
                            xBytesToSend = (xTotalLengthToSend - xAlreadyTransmitted);
 80017c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017c4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	64fb      	str	r3, [r7, #76]	@ 0x4c
                        }
                        memcpy( pucTCPZeroCopyStrmBuffer,
 80017ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017cc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80017ce:	4413      	add	r3, r2
 80017d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017d2:	4619      	mov	r1, r3
 80017d4:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80017d6:	f01f fc6f 	bl	80210b8 <memcpy>
                        break;
                    }

                    /* Call the FreeRTOS_send with buffer as NULL indicating to the stack
                       that its a zero copy */
                    xBytesSent = FreeRTOS_send( /* The socket being sent to. */
 80017da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80017dc:	2300      	movs	r3, #0
 80017de:	2100      	movs	r1, #0
 80017e0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80017e2:	f00d fd41 	bl	800f268 <FreeRTOS_send>
 80017e6:	6438      	str	r0, [r7, #64]	@ 0x40
                                                /* The remaining length of data to send. */
                                                xBytesToSend,
                                                /* ulFlags. */
                                                0 );

                    if( xBytesSent >= 0 )
 80017e8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	db0a      	blt.n	8001804 <vADCTCPTask+0x17c>
                    {
                        /* Data was sent successfully. */
                        xAlreadyTransmitted += xBytesSent;
 80017ee:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80017f0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80017f2:	4413      	add	r3, r2
 80017f4:	657b      	str	r3, [r7, #84]	@ 0x54
        while( xAlreadyTransmitted < xTotalLengthToSend )
 80017f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80017f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d8ca      	bhi.n	8001794 <vADCTCPTask+0x10c>
 80017fe:	e002      	b.n	8001806 <vADCTCPTask+0x17e>
                        break;
 8001800:	bf00      	nop
 8001802:	e000      	b.n	8001806 <vADCTCPTask+0x17e>
                    }
                    else
                    {
                        /* Error - break out of the loop for graceful socket close. */
                        break;
 8001804:	bf00      	nop
                }
        }


        /* Cleanup after each transmission */
        FreeRTOS_shutdown(xSocket, FREERTOS_SHUT_RDWR);
 8001806:	2102      	movs	r1, #2
 8001808:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800180a:	f00d fddc 	bl	800f3c6 <FreeRTOS_shutdown>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 800180e:	e002      	b.n	8001816 <vADCTCPTask+0x18e>
            vTaskDelay(pdMS_TO_TICKS(1));
 8001810:	2001      	movs	r0, #1
 8001812:	f002 f867 	bl	80038e4 <vTaskDelay>
        while(FreeRTOS_recv(xSocket, pcBufferToTransmit, xTotalLengthToSend, 0) >= 0) {
 8001816:	2300      	movs	r3, #0
 8001818:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800181a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800181c:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800181e:	f00d fb83 	bl	800ef28 <FreeRTOS_recv>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	daf3      	bge.n	8001810 <vADCTCPTask+0x188>
        }
        FreeRTOS_closesocket(xSocket);
 8001828:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 800182a:	f00c fa95 	bl	800dd58 <FreeRTOS_closesocket>
    for(;;) {
 800182e:	e754      	b.n	80016da <vADCTCPTask+0x52>
 8001830:	080262cc 	.word	0x080262cc
 8001834:	08022e00 	.word	0x08022e00
 8001838:	30010000 	.word	0x30010000
 800183c:	30000000 	.word	0x30000000

08001840 <MPU_Config>:
/* USER CODE END 4 */

 /* MPU Configuration */

void MPU_Config(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8001846:	463b      	mov	r3, r7
 8001848:	2200      	movs	r2, #0
 800184a:	601a      	str	r2, [r3, #0]
 800184c:	605a      	str	r2, [r3, #4]
 800184e:	609a      	str	r2, [r3, #8]
 8001850:	60da      	str	r2, [r3, #12]

  /* Disables the MPU */
  HAL_MPU_Disable();
 8001852:	f017 ffb1 	bl	80197b8 <HAL_MPU_Disable>

  /** Initializes and configures the Region and the memory to be protected
  */
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8001856:	2301      	movs	r3, #1
 8001858:	703b      	strb	r3, [r7, #0]
  MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 800185a:	2300      	movs	r3, #0
 800185c:	707b      	strb	r3, [r7, #1]
  MPU_InitStruct.BaseAddress = 0x24000000;
 800185e:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8001862:	607b      	str	r3, [r7, #4]
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8001864:	2312      	movs	r3, #18
 8001866:	723b      	strb	r3, [r7, #8]
  MPU_InitStruct.SubRegionDisable = 0x0;
 8001868:	2300      	movs	r3, #0
 800186a:	727b      	strb	r3, [r7, #9]
  MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL1;
 800186c:	2301      	movs	r3, #1
 800186e:	72bb      	strb	r3, [r7, #10]
  MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8001870:	2303      	movs	r3, #3
 8001872:	72fb      	strb	r3, [r7, #11]
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8001874:	2300      	movs	r3, #0
 8001876:	733b      	strb	r3, [r7, #12]
  MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8001878:	2301      	movs	r3, #1
 800187a:	737b      	strb	r3, [r7, #13]
  MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800187c:	2300      	movs	r3, #0
 800187e:	73bb      	strb	r3, [r7, #14]
  MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8001880:	2300      	movs	r3, #0
 8001882:	73fb      	strb	r3, [r7, #15]

  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8001884:	463b      	mov	r3, r7
 8001886:	4618      	mov	r0, r3
 8001888:	f017 ffce 	bl	8019828 <HAL_MPU_ConfigRegion>
  /* Enables the MPU */
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 800188c:	2004      	movs	r0, #4
 800188e:	f017 ffab 	bl	80197e8 <HAL_MPU_Enable>

}
 8001892:	bf00      	nop
 8001894:	3710      	adds	r7, #16
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800189a:	b480      	push	{r7}
 800189c:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 800189e:	b672      	cpsid	i
}
 80018a0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018a2:	bf00      	nop
 80018a4:	e7fd      	b.n	80018a2 <Error_Handler+0x8>
	...

080018a8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018ae:	4b0a      	ldr	r3, [pc, #40]	@ (80018d8 <HAL_MspInit+0x30>)
 80018b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018b4:	4a08      	ldr	r2, [pc, #32]	@ (80018d8 <HAL_MspInit+0x30>)
 80018b6:	f043 0302 	orr.w	r3, r3, #2
 80018ba:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80018be:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_MspInit+0x30>)
 80018c0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80018c4:	f003 0302 	and.w	r3, r3, #2
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	58024400 	.word	0x58024400

080018dc <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b08e      	sub	sp, #56	@ 0x38
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a61      	ldr	r2, [pc, #388]	@ (8001a80 <HAL_ETH_MspInit+0x1a4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	f040 80bb 	bne.w	8001a76 <HAL_ETH_MspInit+0x19a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8001900:	4b60      	ldr	r3, [pc, #384]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 8001902:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001906:	4a5f      	ldr	r2, [pc, #380]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 8001908:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800190c:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8001910:	4b5c      	ldr	r3, [pc, #368]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 8001912:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001916:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800191a:	623b      	str	r3, [r7, #32]
 800191c:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 800191e:	4b59      	ldr	r3, [pc, #356]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 8001920:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001924:	4a57      	ldr	r2, [pc, #348]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 8001926:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800192a:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800192e:	4b55      	ldr	r3, [pc, #340]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 8001930:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001934:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001938:	61fb      	str	r3, [r7, #28]
 800193a:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 800193c:	4b51      	ldr	r3, [pc, #324]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 800193e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001942:	4a50      	ldr	r2, [pc, #320]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 8001944:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001948:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800194c:	4b4d      	ldr	r3, [pc, #308]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 800194e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8001952:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001956:	61bb      	str	r3, [r7, #24]
 8001958:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800195a:	4b4a      	ldr	r3, [pc, #296]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 800195c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001960:	4a48      	ldr	r2, [pc, #288]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 8001962:	f043 0304 	orr.w	r3, r3, #4
 8001966:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800196a:	4b46      	ldr	r3, [pc, #280]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 800196c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001970:	f003 0304 	and.w	r3, r3, #4
 8001974:	617b      	str	r3, [r7, #20]
 8001976:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001978:	4b42      	ldr	r3, [pc, #264]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 800197a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800197e:	4a41      	ldr	r2, [pc, #260]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 8001980:	f043 0301 	orr.w	r3, r3, #1
 8001984:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001988:	4b3e      	ldr	r3, [pc, #248]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 800198a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800198e:	f003 0301 	and.w	r3, r3, #1
 8001992:	613b      	str	r3, [r7, #16]
 8001994:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001996:	4b3b      	ldr	r3, [pc, #236]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 8001998:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800199c:	4a39      	ldr	r2, [pc, #228]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 800199e:	f043 0302 	orr.w	r3, r3, #2
 80019a2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80019a6:	4b37      	ldr	r3, [pc, #220]	@ (8001a84 <HAL_ETH_MspInit+0x1a8>)
 80019a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80019ac:	f003 0302 	and.w	r3, r3, #2
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
    PC5     ------> ETH_RXD1
    PB11     ------> ETH_TX_EN
    PB12     ------> ETH_TXD0
    PB13     ------> ETH_TXD1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 80019b4:	2302      	movs	r3, #2
 80019b6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b8:	2302      	movs	r3, #2
 80019ba:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c0:	2303      	movs	r3, #3
 80019c2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019c4:	230b      	movs	r3, #11
 80019c6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019cc:	4619      	mov	r1, r3
 80019ce:	482e      	ldr	r0, [pc, #184]	@ (8001a88 <HAL_ETH_MspInit+0x1ac>)
 80019d0:	f019 fe72 	bl	801b6b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80019d4:	2306      	movs	r3, #6
 80019d6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e0:	2303      	movs	r3, #3
 80019e2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80019e4:	230b      	movs	r3, #11
 80019e6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ec:	4619      	mov	r1, r3
 80019ee:	4827      	ldr	r0, [pc, #156]	@ (8001a8c <HAL_ETH_MspInit+0x1b0>)
 80019f0:	f019 fe62 	bl	801b6b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019f4:	2380      	movs	r3, #128	@ 0x80
 80019f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019f8:	2302      	movs	r3, #2
 80019fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a00:	2300      	movs	r3, #0
 8001a02:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a04:	230b      	movs	r3, #11
 8001a06:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a0c:	4619      	mov	r1, r3
 8001a0e:	481f      	ldr	r0, [pc, #124]	@ (8001a8c <HAL_ETH_MspInit+0x1b0>)
 8001a10:	f019 fe52 	bl	801b6b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001a14:	2330      	movs	r3, #48	@ 0x30
 8001a16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a18:	2302      	movs	r3, #2
 8001a1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a20:	2300      	movs	r3, #0
 8001a22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a24:	230b      	movs	r3, #11
 8001a26:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a28:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	4816      	ldr	r0, [pc, #88]	@ (8001a88 <HAL_ETH_MspInit+0x1ac>)
 8001a30:	f019 fe42 	bl	801b6b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
 8001a34:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 8001a38:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001a46:	230b      	movs	r3, #11
 8001a48:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480f      	ldr	r0, [pc, #60]	@ (8001a90 <HAL_ETH_MspInit+0x1b4>)
 8001a52:	f019 fe31 	bl	801b6b8 <HAL_GPIO_Init>

    /* ETH interrupt Init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2105      	movs	r1, #5
 8001a5a:	203d      	movs	r0, #61	@ 0x3d
 8001a5c:	f017 fe77 	bl	801974e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8001a60:	203d      	movs	r0, #61	@ 0x3d
 8001a62:	f017 fe8e 	bl	8019782 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 8001a66:	2200      	movs	r2, #0
 8001a68:	2105      	movs	r1, #5
 8001a6a:	203e      	movs	r0, #62	@ 0x3e
 8001a6c:	f017 fe6f 	bl	801974e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 8001a70:	203e      	movs	r0, #62	@ 0x3e
 8001a72:	f017 fe86 	bl	8019782 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ETH_MspInit 1 */

  }

}
 8001a76:	bf00      	nop
 8001a78:	3738      	adds	r7, #56	@ 0x38
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40028000 	.word	0x40028000
 8001a84:	58024400 	.word	0x58024400
 8001a88:	58020800 	.word	0x58020800
 8001a8c:	58020000 	.word	0x58020000
 8001a90:	58020400 	.word	0x58020400

08001a94 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b0ba      	sub	sp, #232	@ 0xe8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a9c:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001aa0:	2200      	movs	r2, #0
 8001aa2:	601a      	str	r2, [r3, #0]
 8001aa4:	605a      	str	r2, [r3, #4]
 8001aa6:	609a      	str	r2, [r3, #8]
 8001aa8:	60da      	str	r2, [r3, #12]
 8001aaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	22c0      	movs	r2, #192	@ 0xc0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f01f fc0c 	bl	80212d2 <memset>
  if(hi2c->Instance==I2C4)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	4a27      	ldr	r2, [pc, #156]	@ (8001b5c <HAL_I2C_MspInit+0xc8>)
 8001ac0:	4293      	cmp	r3, r2
 8001ac2:	d146      	bne.n	8001b52 <HAL_I2C_MspInit+0xbe>

  /* USER CODE END I2C4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001ac4:	f04f 0210 	mov.w	r2, #16
 8001ac8:	f04f 0300 	mov.w	r3, #0
 8001acc:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_D3PCLK1;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ad6:	f107 0310 	add.w	r3, r7, #16
 8001ada:	4618      	mov	r0, r3
 8001adc:	f01b f90a 	bl	801ccf4 <HAL_RCCEx_PeriphCLKConfig>
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d001      	beq.n	8001aea <HAL_I2C_MspInit+0x56>
    {
      Error_Handler();
 8001ae6:	f7ff fed8 	bl	800189a <Error_Handler>
    }

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001aea:	4b1d      	ldr	r3, [pc, #116]	@ (8001b60 <HAL_I2C_MspInit+0xcc>)
 8001aec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001af0:	4a1b      	ldr	r2, [pc, #108]	@ (8001b60 <HAL_I2C_MspInit+0xcc>)
 8001af2:	f043 0308 	orr.w	r3, r3, #8
 8001af6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001afa:	4b19      	ldr	r3, [pc, #100]	@ (8001b60 <HAL_I2C_MspInit+0xcc>)
 8001afc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001b00:	f003 0308 	and.w	r3, r3, #8
 8001b04:	60fb      	str	r3, [r7, #12]
 8001b06:	68fb      	ldr	r3, [r7, #12]
    /**I2C4 GPIO Configuration
    PD12     ------> I2C4_SCL
    PD13     ------> I2C4_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13;
 8001b08:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001b0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001b10:	2312      	movs	r3, #18
 8001b12:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b16:	2300      	movs	r3, #0
 8001b18:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001b22:	2304      	movs	r3, #4
 8001b24:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b28:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001b2c:	4619      	mov	r1, r3
 8001b2e:	480d      	ldr	r0, [pc, #52]	@ (8001b64 <HAL_I2C_MspInit+0xd0>)
 8001b30:	f019 fdc2 	bl	801b6b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C4_CLK_ENABLE();
 8001b34:	4b0a      	ldr	r3, [pc, #40]	@ (8001b60 <HAL_I2C_MspInit+0xcc>)
 8001b36:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b3a:	4a09      	ldr	r2, [pc, #36]	@ (8001b60 <HAL_I2C_MspInit+0xcc>)
 8001b3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001b40:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <HAL_I2C_MspInit+0xcc>)
 8001b46:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001b4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001b4e:	60bb      	str	r3, [r7, #8]
 8001b50:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C4_MspInit 1 */

  }

}
 8001b52:	bf00      	nop
 8001b54:	37e8      	adds	r7, #232	@ 0xe8
 8001b56:	46bd      	mov	sp, r7
 8001b58:	bd80      	pop	{r7, pc}
 8001b5a:	bf00      	nop
 8001b5c:	58001c00 	.word	0x58001c00
 8001b60:	58024400 	.word	0x58024400
 8001b64:	58020c00 	.word	0x58020c00

08001b68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b090      	sub	sp, #64	@ 0x40
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b70:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001b74:	2200      	movs	r2, #0
 8001b76:	601a      	str	r2, [r3, #0]
 8001b78:	605a      	str	r2, [r3, #4]
 8001b7a:	609a      	str	r2, [r3, #8]
 8001b7c:	60da      	str	r2, [r3, #12]
 8001b7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	4a88      	ldr	r2, [pc, #544]	@ (8001da8 <HAL_SPI_MspInit+0x240>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	f040 8083 	bne.w	8001c92 <HAL_SPI_MspInit+0x12a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001b8c:	4b87      	ldr	r3, [pc, #540]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001b8e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001b92:	4a86      	ldr	r2, [pc, #536]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001b94:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001b98:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001b9c:	4b83      	ldr	r3, [pc, #524]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001b9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001baa:	4b80      	ldr	r3, [pc, #512]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001bac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bb0:	4a7e      	ldr	r2, [pc, #504]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001bb2:	f043 0301 	orr.w	r3, r3, #1
 8001bb6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bba:	4b7c      	ldr	r3, [pc, #496]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001bc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bc8:	4b78      	ldr	r3, [pc, #480]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001bca:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bce:	4a77      	ldr	r2, [pc, #476]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001bd0:	f043 0302 	orr.w	r3, r3, #2
 8001bd4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001bd8:	4b74      	ldr	r3, [pc, #464]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001bda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001bde:	f003 0302 	and.w	r3, r3, #2
 8001be2:	623b      	str	r3, [r7, #32]
 8001be4:	6a3b      	ldr	r3, [r7, #32]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001be6:	2370      	movs	r3, #112	@ 0x70
 8001be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bea:	2302      	movs	r3, #2
 8001bec:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bee:	2300      	movs	r3, #0
 8001bf0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001bfe:	4619      	mov	r1, r3
 8001c00:	486b      	ldr	r0, [pc, #428]	@ (8001db0 <HAL_SPI_MspInit+0x248>)
 8001c02:	f019 fd59 	bl	801b6b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c06:	2320      	movs	r3, #32
 8001c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c12:	2300      	movs	r3, #0
 8001c14:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c16:	2305      	movs	r3, #5
 8001c18:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001c1e:	4619      	mov	r1, r3
 8001c20:	4864      	ldr	r0, [pc, #400]	@ (8001db4 <HAL_SPI_MspInit+0x24c>)
 8001c22:	f019 fd49 	bl	801b6b8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA1_Stream0;
 8001c26:	4b64      	ldr	r3, [pc, #400]	@ (8001db8 <HAL_SPI_MspInit+0x250>)
 8001c28:	4a64      	ldr	r2, [pc, #400]	@ (8001dbc <HAL_SPI_MspInit+0x254>)
 8001c2a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Request = DMA_REQUEST_SPI1_RX;
 8001c2c:	4b62      	ldr	r3, [pc, #392]	@ (8001db8 <HAL_SPI_MspInit+0x250>)
 8001c2e:	2225      	movs	r2, #37	@ 0x25
 8001c30:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001c32:	4b61      	ldr	r3, [pc, #388]	@ (8001db8 <HAL_SPI_MspInit+0x250>)
 8001c34:	2200      	movs	r2, #0
 8001c36:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001c38:	4b5f      	ldr	r3, [pc, #380]	@ (8001db8 <HAL_SPI_MspInit+0x250>)
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001c3e:	4b5e      	ldr	r3, [pc, #376]	@ (8001db8 <HAL_SPI_MspInit+0x250>)
 8001c40:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001c44:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001c46:	4b5c      	ldr	r3, [pc, #368]	@ (8001db8 <HAL_SPI_MspInit+0x250>)
 8001c48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001c4c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001c4e:	4b5a      	ldr	r3, [pc, #360]	@ (8001db8 <HAL_SPI_MspInit+0x250>)
 8001c50:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001c54:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001c56:	4b58      	ldr	r3, [pc, #352]	@ (8001db8 <HAL_SPI_MspInit+0x250>)
 8001c58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001c5c:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001c5e:	4b56      	ldr	r3, [pc, #344]	@ (8001db8 <HAL_SPI_MspInit+0x250>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001c64:	4b54      	ldr	r3, [pc, #336]	@ (8001db8 <HAL_SPI_MspInit+0x250>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 8001c6a:	4853      	ldr	r0, [pc, #332]	@ (8001db8 <HAL_SPI_MspInit+0x250>)
 8001c6c:	f017 fe1c 	bl	80198a8 <HAL_DMA_Init>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_SPI_MspInit+0x112>
    {
      Error_Handler();
 8001c76:	f7ff fe10 	bl	800189a <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001db8 <HAL_SPI_MspInit+0x250>)
 8001c7e:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001c80:	4a4d      	ldr	r2, [pc, #308]	@ (8001db8 <HAL_SPI_MspInit+0x250>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6393      	str	r3, [r2, #56]	@ 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001c86:	2200      	movs	r2, #0
 8001c88:	2100      	movs	r1, #0
 8001c8a:	2023      	movs	r0, #35	@ 0x23
 8001c8c:	f017 fd5f 	bl	801974e <HAL_NVIC_SetPriority>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8001c90:	e0f0      	b.n	8001e74 <HAL_SPI_MspInit+0x30c>
  else if(hspi->Instance==SPI2)
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	4a4a      	ldr	r2, [pc, #296]	@ (8001dc0 <HAL_SPI_MspInit+0x258>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	f040 8097 	bne.w	8001dcc <HAL_SPI_MspInit+0x264>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001c9e:	4b43      	ldr	r3, [pc, #268]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001ca0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ca4:	4a41      	ldr	r2, [pc, #260]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001ca6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001caa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cae:	4b3f      	ldr	r3, [pc, #252]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001cb0:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001cb4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001cb8:	61fb      	str	r3, [r7, #28]
 8001cba:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001cbc:	4b3b      	ldr	r3, [pc, #236]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001cbe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cc2:	4a3a      	ldr	r2, [pc, #232]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001cc4:	f043 0302 	orr.w	r3, r3, #2
 8001cc8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001ccc:	4b37      	ldr	r3, [pc, #220]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001cce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cd2:	f003 0302 	and.w	r3, r3, #2
 8001cd6:	61bb      	str	r3, [r7, #24]
 8001cd8:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cda:	4b34      	ldr	r3, [pc, #208]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001cdc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001ce0:	4a32      	ldr	r2, [pc, #200]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001ce2:	f043 0301 	orr.w	r3, r3, #1
 8001ce6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001cea:	4b30      	ldr	r3, [pc, #192]	@ (8001dac <HAL_SPI_MspInit+0x244>)
 8001cec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001cf0:	f003 0301 	and.w	r3, r3, #1
 8001cf4:	617b      	str	r3, [r7, #20]
 8001cf6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_14|GPIO_PIN_15;
 8001cf8:	f44f 4344 	mov.w	r3, #50176	@ 0xc400
 8001cfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cfe:	2302      	movs	r3, #2
 8001d00:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d06:	2300      	movs	r3, #0
 8001d08:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d0a:	2305      	movs	r3, #5
 8001d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d12:	4619      	mov	r1, r3
 8001d14:	4827      	ldr	r0, [pc, #156]	@ (8001db4 <HAL_SPI_MspInit+0x24c>)
 8001d16:	f019 fccf 	bl	801b6b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001d1a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001d1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001d20:	2302      	movs	r3, #2
 8001d22:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d24:	2300      	movs	r3, #0
 8001d26:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001d2c:	2305      	movs	r3, #5
 8001d2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d30:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001d34:	4619      	mov	r1, r3
 8001d36:	481e      	ldr	r0, [pc, #120]	@ (8001db0 <HAL_SPI_MspInit+0x248>)
 8001d38:	f019 fcbe 	bl	801b6b8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream1;
 8001d3c:	4b21      	ldr	r3, [pc, #132]	@ (8001dc4 <HAL_SPI_MspInit+0x25c>)
 8001d3e:	4a22      	ldr	r2, [pc, #136]	@ (8001dc8 <HAL_SPI_MspInit+0x260>)
 8001d40:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_SPI2_RX;
 8001d42:	4b20      	ldr	r3, [pc, #128]	@ (8001dc4 <HAL_SPI_MspInit+0x25c>)
 8001d44:	2227      	movs	r2, #39	@ 0x27
 8001d46:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001d48:	4b1e      	ldr	r3, [pc, #120]	@ (8001dc4 <HAL_SPI_MspInit+0x25c>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d4e:	4b1d      	ldr	r3, [pc, #116]	@ (8001dc4 <HAL_SPI_MspInit+0x25c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001d54:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc4 <HAL_SPI_MspInit+0x25c>)
 8001d56:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001d5a:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001d5c:	4b19      	ldr	r3, [pc, #100]	@ (8001dc4 <HAL_SPI_MspInit+0x25c>)
 8001d5e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d62:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001d64:	4b17      	ldr	r3, [pc, #92]	@ (8001dc4 <HAL_SPI_MspInit+0x25c>)
 8001d66:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001d6a:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8001d6c:	4b15      	ldr	r3, [pc, #84]	@ (8001dc4 <HAL_SPI_MspInit+0x25c>)
 8001d6e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001d72:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d74:	4b13      	ldr	r3, [pc, #76]	@ (8001dc4 <HAL_SPI_MspInit+0x25c>)
 8001d76:	2200      	movs	r2, #0
 8001d78:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d7a:	4b12      	ldr	r3, [pc, #72]	@ (8001dc4 <HAL_SPI_MspInit+0x25c>)
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001d80:	4810      	ldr	r0, [pc, #64]	@ (8001dc4 <HAL_SPI_MspInit+0x25c>)
 8001d82:	f017 fd91 	bl	80198a8 <HAL_DMA_Init>
 8001d86:	4603      	mov	r3, r0
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d001      	beq.n	8001d90 <HAL_SPI_MspInit+0x228>
      Error_Handler();
 8001d8c:	f7ff fd85 	bl	800189a <Error_Handler>
    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	4a0c      	ldr	r2, [pc, #48]	@ (8001dc4 <HAL_SPI_MspInit+0x25c>)
 8001d94:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001d96:	4a0b      	ldr	r2, [pc, #44]	@ (8001dc4 <HAL_SPI_MspInit+0x25c>)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	6393      	str	r3, [r2, #56]	@ 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	2100      	movs	r1, #0
 8001da0:	2024      	movs	r0, #36	@ 0x24
 8001da2:	f017 fcd4 	bl	801974e <HAL_NVIC_SetPriority>
}
 8001da6:	e065      	b.n	8001e74 <HAL_SPI_MspInit+0x30c>
 8001da8:	40013000 	.word	0x40013000
 8001dac:	58024400 	.word	0x58024400
 8001db0:	58020000 	.word	0x58020000
 8001db4:	58020400 	.word	0x58020400
 8001db8:	20000290 	.word	0x20000290
 8001dbc:	40020010 	.word	0x40020010
 8001dc0:	40003800 	.word	0x40003800
 8001dc4:	20000308 	.word	0x20000308
 8001dc8:	40020028 	.word	0x40020028
  else if(hspi->Instance==SPI3)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	4a2a      	ldr	r2, [pc, #168]	@ (8001e7c <HAL_SPI_MspInit+0x314>)
 8001dd2:	4293      	cmp	r3, r2
 8001dd4:	d14e      	bne.n	8001e74 <HAL_SPI_MspInit+0x30c>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8001e80 <HAL_SPI_MspInit+0x318>)
 8001dd8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ddc:	4a28      	ldr	r2, [pc, #160]	@ (8001e80 <HAL_SPI_MspInit+0x318>)
 8001dde:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001de2:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001de6:	4b26      	ldr	r3, [pc, #152]	@ (8001e80 <HAL_SPI_MspInit+0x318>)
 8001de8:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001dec:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8001df0:	613b      	str	r3, [r7, #16]
 8001df2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001df4:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <HAL_SPI_MspInit+0x318>)
 8001df6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001dfa:	4a21      	ldr	r2, [pc, #132]	@ (8001e80 <HAL_SPI_MspInit+0x318>)
 8001dfc:	f043 0301 	orr.w	r3, r3, #1
 8001e00:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e04:	4b1e      	ldr	r3, [pc, #120]	@ (8001e80 <HAL_SPI_MspInit+0x318>)
 8001e06:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e0a:	f003 0301 	and.w	r3, r3, #1
 8001e0e:	60fb      	str	r3, [r7, #12]
 8001e10:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e12:	4b1b      	ldr	r3, [pc, #108]	@ (8001e80 <HAL_SPI_MspInit+0x318>)
 8001e14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e18:	4a19      	ldr	r2, [pc, #100]	@ (8001e80 <HAL_SPI_MspInit+0x318>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8001e22:	4b17      	ldr	r3, [pc, #92]	@ (8001e80 <HAL_SPI_MspInit+0x318>)
 8001e24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001e28:	f003 0304 	and.w	r3, r3, #4
 8001e2c:	60bb      	str	r3, [r7, #8]
 8001e2e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001e30:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e36:	2302      	movs	r3, #2
 8001e38:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e42:	2306      	movs	r3, #6
 8001e44:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e46:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	480d      	ldr	r0, [pc, #52]	@ (8001e84 <HAL_SPI_MspInit+0x31c>)
 8001e4e:	f019 fc33 	bl	801b6b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12;
 8001e52:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 8001e56:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e58:	2302      	movs	r3, #2
 8001e5a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e60:	2300      	movs	r3, #0
 8001e62:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001e64:	2306      	movs	r3, #6
 8001e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e68:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4806      	ldr	r0, [pc, #24]	@ (8001e88 <HAL_SPI_MspInit+0x320>)
 8001e70:	f019 fc22 	bl	801b6b8 <HAL_GPIO_Init>
}
 8001e74:	bf00      	nop
 8001e76:	3740      	adds	r7, #64	@ 0x40
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bd80      	pop	{r7, pc}
 8001e7c:	40003c00 	.word	0x40003c00
 8001e80:	58024400 	.word	0x58024400
 8001e84:	58020000 	.word	0x58020000
 8001e88:	58020800 	.word	0x58020800

08001e8c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b086      	sub	sp, #24
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a4e      	ldr	r2, [pc, #312]	@ (8001fd4 <HAL_TIM_Base_MspInit+0x148>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d13e      	bne.n	8001f1c <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e9e:	4b4e      	ldr	r3, [pc, #312]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x14c>)
 8001ea0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001ea4:	4a4c      	ldr	r2, [pc, #304]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x14c>)
 8001ea6:	f043 0301 	orr.w	r3, r3, #1
 8001eaa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8001eae:	4b4a      	ldr	r3, [pc, #296]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x14c>)
 8001eb0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	617b      	str	r3, [r7, #20]
 8001eba:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_UP Init */
    hdma_tim1_up.Instance = DMA1_Stream2;
 8001ebc:	4b47      	ldr	r3, [pc, #284]	@ (8001fdc <HAL_TIM_Base_MspInit+0x150>)
 8001ebe:	4a48      	ldr	r2, [pc, #288]	@ (8001fe0 <HAL_TIM_Base_MspInit+0x154>)
 8001ec0:	601a      	str	r2, [r3, #0]
    hdma_tim1_up.Init.Request = DMA_REQUEST_TIM1_UP;
 8001ec2:	4b46      	ldr	r3, [pc, #280]	@ (8001fdc <HAL_TIM_Base_MspInit+0x150>)
 8001ec4:	220f      	movs	r2, #15
 8001ec6:	605a      	str	r2, [r3, #4]
    hdma_tim1_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ec8:	4b44      	ldr	r3, [pc, #272]	@ (8001fdc <HAL_TIM_Base_MspInit+0x150>)
 8001eca:	2240      	movs	r2, #64	@ 0x40
 8001ecc:	609a      	str	r2, [r3, #8]
    hdma_tim1_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001ece:	4b43      	ldr	r3, [pc, #268]	@ (8001fdc <HAL_TIM_Base_MspInit+0x150>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	60da      	str	r2, [r3, #12]
    hdma_tim1_up.Init.MemInc = DMA_MINC_DISABLE;
 8001ed4:	4b41      	ldr	r3, [pc, #260]	@ (8001fdc <HAL_TIM_Base_MspInit+0x150>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	611a      	str	r2, [r3, #16]
    hdma_tim1_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001eda:	4b40      	ldr	r3, [pc, #256]	@ (8001fdc <HAL_TIM_Base_MspInit+0x150>)
 8001edc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001ee0:	615a      	str	r2, [r3, #20]
    hdma_tim1_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001ee2:	4b3e      	ldr	r3, [pc, #248]	@ (8001fdc <HAL_TIM_Base_MspInit+0x150>)
 8001ee4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ee8:	619a      	str	r2, [r3, #24]
    hdma_tim1_up.Init.Mode = DMA_CIRCULAR;
 8001eea:	4b3c      	ldr	r3, [pc, #240]	@ (8001fdc <HAL_TIM_Base_MspInit+0x150>)
 8001eec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ef0:	61da      	str	r2, [r3, #28]
    hdma_tim1_up.Init.Priority = DMA_PRIORITY_LOW;
 8001ef2:	4b3a      	ldr	r3, [pc, #232]	@ (8001fdc <HAL_TIM_Base_MspInit+0x150>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	621a      	str	r2, [r3, #32]
    hdma_tim1_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ef8:	4b38      	ldr	r3, [pc, #224]	@ (8001fdc <HAL_TIM_Base_MspInit+0x150>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_up) != HAL_OK)
 8001efe:	4837      	ldr	r0, [pc, #220]	@ (8001fdc <HAL_TIM_Base_MspInit+0x150>)
 8001f00:	f017 fcd2 	bl	80198a8 <HAL_DMA_Init>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8001f0a:	f7ff fcc6 	bl	800189a <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim1_up);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	4a32      	ldr	r2, [pc, #200]	@ (8001fdc <HAL_TIM_Base_MspInit+0x150>)
 8001f12:	621a      	str	r2, [r3, #32]
 8001f14:	4a31      	ldr	r2, [pc, #196]	@ (8001fdc <HAL_TIM_Base_MspInit+0x150>)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001f1a:	e057      	b.n	8001fcc <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM2)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f24:	d10f      	bne.n	8001f46 <HAL_TIM_Base_MspInit+0xba>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f26:	4b2c      	ldr	r3, [pc, #176]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x14c>)
 8001f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f2c:	4a2a      	ldr	r2, [pc, #168]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x14c>)
 8001f2e:	f043 0301 	orr.w	r3, r3, #1
 8001f32:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f36:	4b28      	ldr	r3, [pc, #160]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x14c>)
 8001f38:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	693b      	ldr	r3, [r7, #16]
}
 8001f44:	e042      	b.n	8001fcc <HAL_TIM_Base_MspInit+0x140>
  else if(htim_base->Instance==TIM3)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4a26      	ldr	r2, [pc, #152]	@ (8001fe4 <HAL_TIM_Base_MspInit+0x158>)
 8001f4c:	4293      	cmp	r3, r2
 8001f4e:	d13d      	bne.n	8001fcc <HAL_TIM_Base_MspInit+0x140>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f50:	4b21      	ldr	r3, [pc, #132]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x14c>)
 8001f52:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f56:	4a20      	ldr	r2, [pc, #128]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x14c>)
 8001f58:	f043 0302 	orr.w	r3, r3, #2
 8001f5c:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001f60:	4b1d      	ldr	r3, [pc, #116]	@ (8001fd8 <HAL_TIM_Base_MspInit+0x14c>)
 8001f62:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001f66:	f003 0302 	and.w	r3, r3, #2
 8001f6a:	60fb      	str	r3, [r7, #12]
 8001f6c:	68fb      	ldr	r3, [r7, #12]
    hdma_tim3_up.Instance = DMA1_Stream3;
 8001f6e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8001f70:	4a1e      	ldr	r2, [pc, #120]	@ (8001fec <HAL_TIM_Base_MspInit+0x160>)
 8001f72:	601a      	str	r2, [r3, #0]
    hdma_tim3_up.Init.Request = DMA_REQUEST_TIM3_UP;
 8001f74:	4b1c      	ldr	r3, [pc, #112]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8001f76:	221b      	movs	r2, #27
 8001f78:	605a      	str	r2, [r3, #4]
    hdma_tim3_up.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f7a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8001f7c:	2240      	movs	r2, #64	@ 0x40
 8001f7e:	609a      	str	r2, [r3, #8]
    hdma_tim3_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f80:	4b19      	ldr	r3, [pc, #100]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	60da      	str	r2, [r3, #12]
    hdma_tim3_up.Init.MemInc = DMA_MINC_DISABLE;
 8001f86:	4b18      	ldr	r3, [pc, #96]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8001f88:	2200      	movs	r2, #0
 8001f8a:	611a      	str	r2, [r3, #16]
    hdma_tim3_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001f8c:	4b16      	ldr	r3, [pc, #88]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8001f8e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f92:	615a      	str	r2, [r3, #20]
    hdma_tim3_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001f94:	4b14      	ldr	r3, [pc, #80]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8001f96:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f9a:	619a      	str	r2, [r3, #24]
    hdma_tim3_up.Init.Mode = DMA_CIRCULAR;
 8001f9c:	4b12      	ldr	r3, [pc, #72]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8001f9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fa2:	61da      	str	r2, [r3, #28]
    hdma_tim3_up.Init.Priority = DMA_PRIORITY_LOW;
 8001fa4:	4b10      	ldr	r3, [pc, #64]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	621a      	str	r2, [r3, #32]
    hdma_tim3_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001faa:	4b0f      	ldr	r3, [pc, #60]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim3_up) != HAL_OK)
 8001fb0:	480d      	ldr	r0, [pc, #52]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8001fb2:	f017 fc79 	bl	80198a8 <HAL_DMA_Init>
 8001fb6:	4603      	mov	r3, r0
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d001      	beq.n	8001fc0 <HAL_TIM_Base_MspInit+0x134>
      Error_Handler();
 8001fbc:	f7ff fc6d 	bl	800189a <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim3_up);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	4a09      	ldr	r2, [pc, #36]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8001fc4:	621a      	str	r2, [r3, #32]
 8001fc6:	4a08      	ldr	r2, [pc, #32]	@ (8001fe8 <HAL_TIM_Base_MspInit+0x15c>)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001fcc:	bf00      	nop
 8001fce:	3718      	adds	r7, #24
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	40010000 	.word	0x40010000
 8001fd8:	58024400 	.word	0x58024400
 8001fdc:	20000464 	.word	0x20000464
 8001fe0:	40020040 	.word	0x40020040
 8001fe4:	40000400 	.word	0x40000400
 8001fe8:	200004dc 	.word	0x200004dc
 8001fec:	40020058 	.word	0x40020058

08001ff0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b0ba      	sub	sp, #232	@ 0xe8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ff8:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	609a      	str	r2, [r3, #8]
 8002004:	60da      	str	r2, [r3, #12]
 8002006:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002008:	f107 0310 	add.w	r3, r7, #16
 800200c:	22c0      	movs	r2, #192	@ 0xc0
 800200e:	2100      	movs	r1, #0
 8002010:	4618      	mov	r0, r3
 8002012:	f01f f95e 	bl	80212d2 <memset>
  if(huart->Instance==USART3)
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a27      	ldr	r2, [pc, #156]	@ (80020b8 <HAL_UART_MspInit+0xc8>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d146      	bne.n	80020ae <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002020:	f04f 0202 	mov.w	r2, #2
 8002024:	f04f 0300 	mov.w	r3, #0
 8002028:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 800202c:	2300      	movs	r3, #0
 800202e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002032:	f107 0310 	add.w	r3, r7, #16
 8002036:	4618      	mov	r0, r3
 8002038:	f01a fe5c 	bl	801ccf4 <HAL_RCCEx_PeriphCLKConfig>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8002042:	f7ff fc2a 	bl	800189a <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002046:	4b1d      	ldr	r3, [pc, #116]	@ (80020bc <HAL_UART_MspInit+0xcc>)
 8002048:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800204c:	4a1b      	ldr	r2, [pc, #108]	@ (80020bc <HAL_UART_MspInit+0xcc>)
 800204e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002052:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8002056:	4b19      	ldr	r3, [pc, #100]	@ (80020bc <HAL_UART_MspInit+0xcc>)
 8002058:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 800205c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002060:	60fb      	str	r3, [r7, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002064:	4b15      	ldr	r3, [pc, #84]	@ (80020bc <HAL_UART_MspInit+0xcc>)
 8002066:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800206a:	4a14      	ldr	r2, [pc, #80]	@ (80020bc <HAL_UART_MspInit+0xcc>)
 800206c:	f043 0308 	orr.w	r3, r3, #8
 8002070:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8002074:	4b11      	ldr	r3, [pc, #68]	@ (80020bc <HAL_UART_MspInit+0xcc>)
 8002076:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800207a:	f003 0308 	and.w	r3, r3, #8
 800207e:	60bb      	str	r3, [r7, #8]
 8002080:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002082:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002086:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208a:	2302      	movs	r3, #2
 800208c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002090:	2300      	movs	r3, #0
 8002092:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800209c:	2307      	movs	r3, #7
 800209e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a2:	f107 03d4 	add.w	r3, r7, #212	@ 0xd4
 80020a6:	4619      	mov	r1, r3
 80020a8:	4805      	ldr	r0, [pc, #20]	@ (80020c0 <HAL_UART_MspInit+0xd0>)
 80020aa:	f019 fb05 	bl	801b6b8 <HAL_GPIO_Init>

  /* USER CODE END USART3_MspInit 1 */

  }

}
 80020ae:	bf00      	nop
 80020b0:	37e8      	adds	r7, #232	@ 0xe8
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	40004800 	.word	0x40004800
 80020bc:	58024400 	.word	0x58024400
 80020c0:	58020c00 	.word	0x58020c00

080020c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <NMI_Handler+0x4>

080020cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <MemManage_Handler+0x4>

080020d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <BusFault_Handler+0x4>

080020dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <UsageFault_Handler+0x4>

080020e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020e8:	bf00      	nop
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr

080020f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80020f2:	b580      	push	{r7, lr}
 80020f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80020f6:	f017 f9eb 	bl	80194d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */
  if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80020fa:	f002 fac9 	bl	8004690 <xTaskGetSchedulerState>
 80020fe:	4603      	mov	r3, r0
 8002100:	2b02      	cmp	r3, #2
 8002102:	d101      	bne.n	8002108 <SysTick_Handler+0x16>
      {
    	xPortSysTickHandler();
 8002104:	f003 fba8 	bl	8005858 <xPortSysTickHandler>
      }
  /* USER CODE END SysTick_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	bd80      	pop	{r7, pc}

0800210c <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken;
  uint32_t ulCurrBuf = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	60fb      	str	r3, [r7, #12]
  //SPI1 Stream
  if (DMA1->LISR & DMA_FLAG_TCIF0_4){
 8002116:	4b19      	ldr	r3, [pc, #100]	@ (800217c <DMA1_Stream0_IRQHandler+0x70>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0320 	and.w	r3, r3, #32
 800211e:	2b00      	cmp	r3, #0
 8002120:	d00c      	beq.n	800213c <DMA1_Stream0_IRQHandler+0x30>
      uint32_t status = DMA1_Stream0->CR;
 8002122:	4b17      	ldr	r3, [pc, #92]	@ (8002180 <DMA1_Stream0_IRQHandler+0x74>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	60bb      	str	r3, [r7, #8]
        if ((status & DMA_SxCR_CT_Msk)!=0){ //current Transmittable Buffer
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800212e:	2b00      	cmp	r3, #0
 8002130:	d002      	beq.n	8002138 <DMA1_Stream0_IRQHandler+0x2c>
  	  ulCurrBuf = 0;
 8002132:	2300      	movs	r3, #0
 8002134:	60fb      	str	r3, [r7, #12]
 8002136:	e001      	b.n	800213c <DMA1_Stream0_IRQHandler+0x30>
        } else {
  	  ulCurrBuf = 1;
 8002138:	2301      	movs	r3, #1
 800213a:	60fb      	str	r3, [r7, #12]
        }

    }
  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 800213c:	4811      	ldr	r0, [pc, #68]	@ (8002184 <DMA1_Stream0_IRQHandler+0x78>)
 800213e:	f018 f955 	bl	801a3ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */
  /* xHigherPriorityTaskWoken must be initialised to pdFALSE. If calling
     xTaskNotifyFromISR() unblocks the handling task, and the priority of
     the handling task is higher than the priority of the currently running task,
     then xHigherPriorityTaskWoken will automatically get set to pdTRUE. */
  xHigherPriorityTaskWoken = pdFALSE;
 8002142:	2300      	movs	r3, #0
 8002144:	607b      	str	r3, [r7, #4]
  /* Unblock the handling task so the task can perform any processing necessitated
     by the interrupt. xHandlingTask is the task's handle, which was obtained
     when the task was created. The handling task's 0th notification value
     is bitwise ORed with the interrupt status - ensuring bits that are already
     set are not overwritten. */
  xTaskNotifyFromISR( vADCTCPTaskHandle,
 8002146:	4b10      	ldr	r3, [pc, #64]	@ (8002188 <DMA1_Stream0_IRQHandler+0x7c>)
 8002148:	6818      	ldr	r0, [r3, #0]
 800214a:	1d3b      	adds	r3, r7, #4
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	2300      	movs	r3, #0
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	2301      	movs	r3, #1
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	2100      	movs	r1, #0
 8002158:	f002 fef2 	bl	8004f40 <xTaskGenericNotifyFromISR>
			     &xHigherPriorityTaskWoken );

  /* Force a context switch if xHigherPriorityTaskWoken is now set to pdTRUE.
     The macro used to do this is dependent on the port and may be called
     portEND_SWITCHING_ISR. */
  portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d007      	beq.n	8002172 <DMA1_Stream0_IRQHandler+0x66>
 8002162:	4b0a      	ldr	r3, [pc, #40]	@ (800218c <DMA1_Stream0_IRQHandler+0x80>)
 8002164:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	f3bf 8f4f 	dsb	sy
 800216e:	f3bf 8f6f 	isb	sy
  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	3710      	adds	r7, #16
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40020000 	.word	0x40020000
 8002180:	40020010 	.word	0x40020010
 8002184:	20000290 	.word	0x20000290
 8002188:	20000abc 	.word	0x20000abc
 800218c:	e000ed04 	.word	0xe000ed04

08002190 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8002194:	4802      	ldr	r0, [pc, #8]	@ (80021a0 <DMA1_Stream1_IRQHandler+0x10>)
 8002196:	f018 f929 	bl	801a3ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000308 	.word	0x20000308

080021a4 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_up);
 80021a8:	4802      	ldr	r0, [pc, #8]	@ (80021b4 <DMA1_Stream2_IRQHandler+0x10>)
 80021aa:	f018 f91f 	bl	801a3ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000464 	.word	0x20000464

080021b8 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim3_up);
 80021bc:	4802      	ldr	r0, [pc, #8]	@ (80021c8 <DMA1_Stream3_IRQHandler+0x10>)
 80021be:	f018 f915 	bl	801a3ec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200004dc 	.word	0x200004dc

080021cc <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80021d0:	4802      	ldr	r0, [pc, #8]	@ (80021dc <SPI1_IRQHandler+0x10>)
 80021d2:	f01c fcdf 	bl	801eb94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	200000f8 	.word	0x200000f8

080021e0 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80021e4:	4802      	ldr	r0, [pc, #8]	@ (80021f0 <SPI2_IRQHandler+0x10>)
 80021e6:	f01c fcd5 	bl	801eb94 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000180 	.word	0x20000180

080021f4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  return 1;
 80021f8:	2301      	movs	r3, #1
}
 80021fa:	4618      	mov	r0, r3
 80021fc:	46bd      	mov	sp, r7
 80021fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002202:	4770      	bx	lr

08002204 <_kill>:

int _kill(int pid, int sig)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
 800220c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800220e:	f01f ff87 	bl	8022120 <__errno>
 8002212:	4603      	mov	r3, r0
 8002214:	2216      	movs	r2, #22
 8002216:	601a      	str	r2, [r3, #0]
  return -1;
 8002218:	f04f 33ff 	mov.w	r3, #4294967295
}
 800221c:	4618      	mov	r0, r3
 800221e:	3708      	adds	r7, #8
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <_exit>:

void _exit (int status)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800222c:	f04f 31ff 	mov.w	r1, #4294967295
 8002230:	6878      	ldr	r0, [r7, #4]
 8002232:	f7ff ffe7 	bl	8002204 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002236:	bf00      	nop
 8002238:	e7fd      	b.n	8002236 <_exit+0x12>

0800223a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	b086      	sub	sp, #24
 800223e:	af00      	add	r7, sp, #0
 8002240:	60f8      	str	r0, [r7, #12]
 8002242:	60b9      	str	r1, [r7, #8]
 8002244:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002246:	2300      	movs	r3, #0
 8002248:	617b      	str	r3, [r7, #20]
 800224a:	e00a      	b.n	8002262 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800224c:	f3af 8000 	nop.w
 8002250:	4601      	mov	r1, r0
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	1c5a      	adds	r2, r3, #1
 8002256:	60ba      	str	r2, [r7, #8]
 8002258:	b2ca      	uxtb	r2, r1
 800225a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	3301      	adds	r3, #1
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	697a      	ldr	r2, [r7, #20]
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	429a      	cmp	r2, r3
 8002268:	dbf0      	blt.n	800224c <_read+0x12>
  }

  return len;
 800226a:	687b      	ldr	r3, [r7, #4]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3718      	adds	r7, #24
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b086      	sub	sp, #24
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002280:	2300      	movs	r3, #0
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	e009      	b.n	800229a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	1c5a      	adds	r2, r3, #1
 800228a:	60ba      	str	r2, [r7, #8]
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	4618      	mov	r0, r3
 8002290:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	3301      	adds	r3, #1
 8002298:	617b      	str	r3, [r7, #20]
 800229a:	697a      	ldr	r2, [r7, #20]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	429a      	cmp	r2, r3
 80022a0:	dbf1      	blt.n	8002286 <_write+0x12>
  }
  return len;
 80022a2:	687b      	ldr	r3, [r7, #4]
}
 80022a4:	4618      	mov	r0, r3
 80022a6:	3718      	adds	r7, #24
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bd80      	pop	{r7, pc}

080022ac <_close>:

int _close(int file)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80022b4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b8:	4618      	mov	r0, r3
 80022ba:	370c      	adds	r7, #12
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80022ce:	683b      	ldr	r3, [r7, #0]
 80022d0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022d4:	605a      	str	r2, [r3, #4]
  return 0;
 80022d6:	2300      	movs	r3, #0
}
 80022d8:	4618      	mov	r0, r3
 80022da:	370c      	adds	r7, #12
 80022dc:	46bd      	mov	sp, r7
 80022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e2:	4770      	bx	lr

080022e4 <_isatty>:

int _isatty(int file)
{
 80022e4:	b480      	push	{r7}
 80022e6:	b083      	sub	sp, #12
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80022ec:	2301      	movs	r3, #1
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	370c      	adds	r7, #12
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr

080022fa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022fa:	b480      	push	{r7}
 80022fc:	b085      	sub	sp, #20
 80022fe:	af00      	add	r7, sp, #0
 8002300:	60f8      	str	r0, [r7, #12]
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002312:	4770      	bx	lr

08002314 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b086      	sub	sp, #24
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800231c:	4a14      	ldr	r2, [pc, #80]	@ (8002370 <_sbrk+0x5c>)
 800231e:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <_sbrk+0x60>)
 8002320:	1ad3      	subs	r3, r2, r3
 8002322:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002328:	4b13      	ldr	r3, [pc, #76]	@ (8002378 <_sbrk+0x64>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	2b00      	cmp	r3, #0
 800232e:	d102      	bne.n	8002336 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002330:	4b11      	ldr	r3, [pc, #68]	@ (8002378 <_sbrk+0x64>)
 8002332:	4a12      	ldr	r2, [pc, #72]	@ (800237c <_sbrk+0x68>)
 8002334:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002336:	4b10      	ldr	r3, [pc, #64]	@ (8002378 <_sbrk+0x64>)
 8002338:	681a      	ldr	r2, [r3, #0]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4413      	add	r3, r2
 800233e:	693a      	ldr	r2, [r7, #16]
 8002340:	429a      	cmp	r2, r3
 8002342:	d207      	bcs.n	8002354 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002344:	f01f feec 	bl	8022120 <__errno>
 8002348:	4603      	mov	r3, r0
 800234a:	220c      	movs	r2, #12
 800234c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800234e:	f04f 33ff 	mov.w	r3, #4294967295
 8002352:	e009      	b.n	8002368 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002354:	4b08      	ldr	r3, [pc, #32]	@ (8002378 <_sbrk+0x64>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800235a:	4b07      	ldr	r3, [pc, #28]	@ (8002378 <_sbrk+0x64>)
 800235c:	681a      	ldr	r2, [r3, #0]
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	4413      	add	r3, r2
 8002362:	4a05      	ldr	r2, [pc, #20]	@ (8002378 <_sbrk+0x64>)
 8002364:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002366:	68fb      	ldr	r3, [r7, #12]
}
 8002368:	4618      	mov	r0, r3
 800236a:	3718      	adds	r7, #24
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	24080000 	.word	0x24080000
 8002374:	00000400 	.word	0x00000400
 8002378:	20000ac4 	.word	0x20000ac4
 800237c:	20002588 	.word	0x20002588

08002380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002380:	b480      	push	{r7}
 8002382:	b083      	sub	sp, #12
 8002384:	af00      	add	r7, sp, #0
 __IO uint32_t tmpreg;
#endif /* DATA_IN_D2_SRAM */

  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002386:	4b3f      	ldr	r3, [pc, #252]	@ (8002484 <SystemInit+0x104>)
 8002388:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800238c:	4a3d      	ldr	r2, [pc, #244]	@ (8002484 <SystemInit+0x104>)
 800238e:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002392:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/

   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8002396:	4b3c      	ldr	r3, [pc, #240]	@ (8002488 <SystemInit+0x108>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	2b06      	cmp	r3, #6
 80023a0:	d807      	bhi.n	80023b2 <SystemInit+0x32>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023a2:	4b39      	ldr	r3, [pc, #228]	@ (8002488 <SystemInit+0x108>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 030f 	bic.w	r3, r3, #15
 80023aa:	4a37      	ldr	r2, [pc, #220]	@ (8002488 <SystemInit+0x108>)
 80023ac:	f043 0307 	orr.w	r3, r3, #7
 80023b0:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80023b2:	4b36      	ldr	r3, [pc, #216]	@ (800248c <SystemInit+0x10c>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4a35      	ldr	r2, [pc, #212]	@ (800248c <SystemInit+0x10c>)
 80023b8:	f043 0301 	orr.w	r3, r3, #1
 80023bc:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80023be:	4b33      	ldr	r3, [pc, #204]	@ (800248c <SystemInit+0x10c>)
 80023c0:	2200      	movs	r2, #0
 80023c2:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80023c4:	4b31      	ldr	r3, [pc, #196]	@ (800248c <SystemInit+0x10c>)
 80023c6:	681a      	ldr	r2, [r3, #0]
 80023c8:	4930      	ldr	r1, [pc, #192]	@ (800248c <SystemInit+0x10c>)
 80023ca:	4b31      	ldr	r3, [pc, #196]	@ (8002490 <SystemInit+0x110>)
 80023cc:	4013      	ands	r3, r2
 80023ce:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80023d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002488 <SystemInit+0x108>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f003 0308 	and.w	r3, r3, #8
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d007      	beq.n	80023ec <SystemInit+0x6c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80023dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002488 <SystemInit+0x108>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f023 030f 	bic.w	r3, r3, #15
 80023e4:	4a28      	ldr	r2, [pc, #160]	@ (8002488 <SystemInit+0x108>)
 80023e6:	f043 0307 	orr.w	r3, r3, #7
 80023ea:	6013      	str	r3, [r2, #0]
  }

#if defined(D3_SRAM_BASE)
  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80023ec:	4b27      	ldr	r3, [pc, #156]	@ (800248c <SystemInit+0x10c>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80023f2:	4b26      	ldr	r3, [pc, #152]	@ (800248c <SystemInit+0x10c>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80023f8:	4b24      	ldr	r3, [pc, #144]	@ (800248c <SystemInit+0x10c>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	621a      	str	r2, [r3, #32]

  /* Reset SRDCFGR register */
  RCC->SRDCFGR = 0x00000000;
#endif
  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80023fe:	4b23      	ldr	r3, [pc, #140]	@ (800248c <SystemInit+0x10c>)
 8002400:	4a24      	ldr	r2, [pc, #144]	@ (8002494 <SystemInit+0x114>)
 8002402:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8002404:	4b21      	ldr	r3, [pc, #132]	@ (800248c <SystemInit+0x10c>)
 8002406:	4a24      	ldr	r2, [pc, #144]	@ (8002498 <SystemInit+0x118>)
 8002408:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800240a:	4b20      	ldr	r3, [pc, #128]	@ (800248c <SystemInit+0x10c>)
 800240c:	4a23      	ldr	r2, [pc, #140]	@ (800249c <SystemInit+0x11c>)
 800240e:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8002410:	4b1e      	ldr	r3, [pc, #120]	@ (800248c <SystemInit+0x10c>)
 8002412:	2200      	movs	r2, #0
 8002414:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8002416:	4b1d      	ldr	r3, [pc, #116]	@ (800248c <SystemInit+0x10c>)
 8002418:	4a20      	ldr	r2, [pc, #128]	@ (800249c <SystemInit+0x11c>)
 800241a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800241c:	4b1b      	ldr	r3, [pc, #108]	@ (800248c <SystemInit+0x10c>)
 800241e:	2200      	movs	r2, #0
 8002420:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8002422:	4b1a      	ldr	r3, [pc, #104]	@ (800248c <SystemInit+0x10c>)
 8002424:	4a1d      	ldr	r2, [pc, #116]	@ (800249c <SystemInit+0x11c>)
 8002426:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8002428:	4b18      	ldr	r3, [pc, #96]	@ (800248c <SystemInit+0x10c>)
 800242a:	2200      	movs	r2, #0
 800242c:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800242e:	4b17      	ldr	r3, [pc, #92]	@ (800248c <SystemInit+0x10c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a16      	ldr	r2, [pc, #88]	@ (800248c <SystemInit+0x10c>)
 8002434:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002438:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800243a:	4b14      	ldr	r3, [pc, #80]	@ (800248c <SystemInit+0x10c>)
 800243c:	2200      	movs	r2, #0
 800243e:	661a      	str	r2, [r3, #96]	@ 0x60

#if (STM32H7_DEV_ID == 0x450UL)
  /* dual core CM7 or single core line */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8002440:	4b17      	ldr	r3, [pc, #92]	@ (80024a0 <SystemInit+0x120>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b17      	ldr	r3, [pc, #92]	@ (80024a4 <SystemInit+0x124>)
 8002446:	4013      	ands	r3, r2
 8002448:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800244c:	d202      	bcs.n	8002454 <SystemInit+0xd4>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800244e:	4b16      	ldr	r3, [pc, #88]	@ (80024a8 <SystemInit+0x128>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]
#endif /* STM32H7_DEV_ID */

#if defined(DATA_IN_D2_SRAM)
  /* in case of initialized data in D2 SRAM (AHB SRAM), enable the D2 SRAM clock (AHB SRAM clock) */
#if defined(RCC_AHB2ENR_D2SRAM3EN)
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN | RCC_AHB2ENR_D2SRAM3EN);
 8002454:	4b0d      	ldr	r3, [pc, #52]	@ (800248c <SystemInit+0x10c>)
 8002456:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800245a:	4a0c      	ldr	r2, [pc, #48]	@ (800248c <SystemInit+0x10c>)
 800245c:	f043 4360 	orr.w	r3, r3, #3758096384	@ 0xe0000000
 8002460:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
  RCC->AHB2ENR |= (RCC_AHB2ENR_D2SRAM1EN | RCC_AHB2ENR_D2SRAM2EN);
#else
  RCC->AHB2ENR |= (RCC_AHB2ENR_AHBSRAM1EN | RCC_AHB2ENR_AHBSRAM2EN);
#endif /* RCC_AHB2ENR_D2SRAM3EN */

  tmpreg = RCC->AHB2ENR;
 8002464:	4b09      	ldr	r3, [pc, #36]	@ (800248c <SystemInit+0x10c>)
 8002466:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800246a:	607b      	str	r3, [r7, #4]
  (void) tmpreg;
 800246c:	687b      	ldr	r3, [r7, #4]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 800246e:	4b0f      	ldr	r3, [pc, #60]	@ (80024ac <SystemInit+0x12c>)
 8002470:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8002474:	601a      	str	r2, [r3, #0]
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM or in Internal FLASH */
#endif /* USER_VECT_TAB_ADDRESS */

#endif /*DUAL_CORE && CORE_CM4*/
}
 8002476:	bf00      	nop
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr
 8002482:	bf00      	nop
 8002484:	e000ed00 	.word	0xe000ed00
 8002488:	52002000 	.word	0x52002000
 800248c:	58024400 	.word	0x58024400
 8002490:	eaf6ed7f 	.word	0xeaf6ed7f
 8002494:	02020200 	.word	0x02020200
 8002498:	01ff0000 	.word	0x01ff0000
 800249c:	01010280 	.word	0x01010280
 80024a0:	5c001000 	.word	0x5c001000
 80024a4:	ffff0000 	.word	0xffff0000
 80024a8:	51008108 	.word	0x51008108
 80024ac:	52004000 	.word	0x52004000

080024b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80024b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80024e8 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80024b4:	f7ff ff64 	bl	8002380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80024b8:	480c      	ldr	r0, [pc, #48]	@ (80024ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80024ba:	490d      	ldr	r1, [pc, #52]	@ (80024f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80024bc:	4a0d      	ldr	r2, [pc, #52]	@ (80024f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80024be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80024c0:	e002      	b.n	80024c8 <LoopCopyDataInit>

080024c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80024c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80024c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80024c6:	3304      	adds	r3, #4

080024c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80024c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80024ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80024cc:	d3f9      	bcc.n	80024c2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80024ce:	4a0a      	ldr	r2, [pc, #40]	@ (80024f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80024d0:	4c0a      	ldr	r4, [pc, #40]	@ (80024fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80024d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80024d4:	e001      	b.n	80024da <LoopFillZerobss>

080024d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80024d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80024d8:	3204      	adds	r2, #4

080024da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80024da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80024dc:	d3fb      	bcc.n	80024d6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80024de:	f01f fe25 	bl	802212c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80024e2:	f7fe f8dd 	bl	80006a0 <main>
  bx  lr
 80024e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80024e8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80024ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80024f0:	20000088 	.word	0x20000088
  ldr r2, =_sidata
 80024f4:	0802662c 	.word	0x0802662c
  ldr r2, =_sbss
 80024f8:	20000088 	.word	0x20000088
  ldr r4, =_ebss
 80024fc:	20002584 	.word	0x20002584

08002500 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002500:	e7fe      	b.n	8002500 <ADC3_IRQHandler>

08002502 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

    #if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

        EventGroupHandle_t xEventGroupCreate( void )
        {
 8002502:	b580      	push	{r7, lr}
 8002504:	b082      	sub	sp, #8
 8002506:	af00      	add	r7, sp, #0
            traceENTER_xEventGroupCreate();

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 8002508:	201c      	movs	r0, #28
 800250a:	f003 fa23 	bl	8005954 <pvPortMalloc>
 800250e:	6078      	str	r0, [r7, #4]

            if( pxEventBits != NULL )
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d007      	beq.n	8002526 <xEventGroupCreate+0x24>
            {
                pxEventBits->uxEventBits = 0;
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
                vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	3304      	adds	r3, #4
 8002520:	4618      	mov	r0, r3
 8002522:	f000 f9c3 	bl	80028ac <vListInitialise>
                traceEVENT_GROUP_CREATE_FAILED();
            }

            traceRETURN_xEventGroupCreate( pxEventBits );

            return pxEventBits;
 8002526:	687b      	ldr	r3, [r7, #4]
        }
 8002528:	4618      	mov	r0, r3
 800252a:	3708      	adds	r7, #8
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <xEventGroupWaitBits>:
    EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup,
                                     const EventBits_t uxBitsToWaitFor,
                                     const BaseType_t xClearOnExit,
                                     const BaseType_t xWaitForAllBits,
                                     TickType_t xTicksToWait )
    {
 8002530:	b580      	push	{r7, lr}
 8002532:	b08c      	sub	sp, #48	@ 0x30
 8002534:	af00      	add	r7, sp, #0
 8002536:	60f8      	str	r0, [r7, #12]
 8002538:	60b9      	str	r1, [r7, #8]
 800253a:	607a      	str	r2, [r7, #4]
 800253c:	603b      	str	r3, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	627b      	str	r3, [r7, #36]	@ 0x24
        EventBits_t uxReturn, uxControlBits = 0;
 8002542:	2300      	movs	r3, #0
 8002544:	62bb      	str	r3, [r7, #40]	@ 0x28
        BaseType_t xWaitConditionMet, xAlreadyYielded;
        BaseType_t xTimeoutOccurred = pdFALSE;
 8002546:	2300      	movs	r3, #0
 8002548:	623b      	str	r3, [r7, #32]

        traceENTER_xEventGroupWaitBits( xEventGroup, uxBitsToWaitFor, xClearOnExit, xWaitForAllBits, xTicksToWait );

        /* Check the user is not attempting to wait on the bits used by the kernel
         * itself, and that at least one bit is being requested. */
        configASSERT( xEventGroup );
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d104      	bne.n	800255a <xEventGroupWaitBits+0x2a>
 8002550:	f240 1147 	movw	r1, #327	@ 0x147
 8002554:	4850      	ldr	r0, [pc, #320]	@ (8002698 <xEventGroupWaitBits+0x168>)
 8002556:	f7fe ff8b 	bl	8001470 <vAssertCalled>
        configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002560:	d304      	bcc.n	800256c <xEventGroupWaitBits+0x3c>
 8002562:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 8002566:	484c      	ldr	r0, [pc, #304]	@ (8002698 <xEventGroupWaitBits+0x168>)
 8002568:	f7fe ff82 	bl	8001470 <vAssertCalled>
        configASSERT( uxBitsToWaitFor != 0 );
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d104      	bne.n	800257c <xEventGroupWaitBits+0x4c>
 8002572:	f240 1149 	movw	r1, #329	@ 0x149
 8002576:	4848      	ldr	r0, [pc, #288]	@ (8002698 <xEventGroupWaitBits+0x168>)
 8002578:	f7fe ff7a 	bl	8001470 <vAssertCalled>
        #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
        {
            configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800257c:	f002 f888 	bl	8004690 <xTaskGetSchedulerState>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d102      	bne.n	800258c <xEventGroupWaitBits+0x5c>
 8002586:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002588:	2b00      	cmp	r3, #0
 800258a:	d101      	bne.n	8002590 <xEventGroupWaitBits+0x60>
 800258c:	2301      	movs	r3, #1
 800258e:	e000      	b.n	8002592 <xEventGroupWaitBits+0x62>
 8002590:	2300      	movs	r3, #0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d104      	bne.n	80025a0 <xEventGroupWaitBits+0x70>
 8002596:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 800259a:	483f      	ldr	r0, [pc, #252]	@ (8002698 <xEventGroupWaitBits+0x168>)
 800259c:	f7fe ff68 	bl	8001470 <vAssertCalled>
        }
        #endif

        vTaskSuspendAll();
 80025a0:	f001 fa58 	bl	8003a54 <vTaskSuspendAll>
        {
            const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80025a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	61fb      	str	r3, [r7, #28]

            /* Check to see if the wait condition is already met or not. */
            xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80025aa:	683a      	ldr	r2, [r7, #0]
 80025ac:	68b9      	ldr	r1, [r7, #8]
 80025ae:	69f8      	ldr	r0, [r7, #28]
 80025b0:	f000 f95a 	bl	8002868 <prvTestWaitCondition>
 80025b4:	61b8      	str	r0, [r7, #24]

            if( xWaitConditionMet != pdFALSE )
 80025b6:	69bb      	ldr	r3, [r7, #24]
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d00e      	beq.n	80025da <xEventGroupWaitBits+0xaa>
            {
                /* The wait condition has already been met so there is no need to
                 * block. */
                uxReturn = uxCurrentEventBits;
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTicksToWait = ( TickType_t ) 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the wait bits if requested to do so. */
                if( xClearOnExit != pdFALSE )
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d028      	beq.n	800261c <xEventGroupWaitBits+0xec>
                {
                    pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80025ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025cc:	681a      	ldr	r2, [r3, #0]
 80025ce:	68bb      	ldr	r3, [r7, #8]
 80025d0:	43db      	mvns	r3, r3
 80025d2:	401a      	ands	r2, r3
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	601a      	str	r2, [r3, #0]
 80025d8:	e020      	b.n	800261c <xEventGroupWaitBits+0xec>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            else if( xTicksToWait == ( TickType_t ) 0 )
 80025da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d104      	bne.n	80025ea <xEventGroupWaitBits+0xba>
            {
                /* The wait condition has not been met, but no block time was
                 * specified, so just return the current value. */
                uxReturn = uxCurrentEventBits;
 80025e0:	69fb      	ldr	r3, [r7, #28]
 80025e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
                xTimeoutOccurred = pdTRUE;
 80025e4:	2301      	movs	r3, #1
 80025e6:	623b      	str	r3, [r7, #32]
 80025e8:	e018      	b.n	800261c <xEventGroupWaitBits+0xec>
            {
                /* The task is going to block to wait for its required bits to be
                 * set.  uxControlBits are used to remember the specified behaviour of
                 * this call to xEventGroupWaitBits() - for use when the event bits
                 * unblock the task. */
                if( xClearOnExit != pdFALSE )
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <xEventGroupWaitBits+0xc8>
                {
                    uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80025f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80025f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80025f6:	62bb      	str	r3, [r7, #40]	@ 0x28
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                if( xWaitForAllBits != pdFALSE )
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d003      	beq.n	8002606 <xEventGroupWaitBits+0xd6>
                {
                    uxControlBits |= eventWAIT_FOR_ALL_BITS;
 80025fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002600:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002604:	62bb      	str	r3, [r7, #40]	@ 0x28
                }

                /* Store the bits that the calling task is waiting for in the
                 * task's event list item so the kernel knows when a match is
                 * found.  Then enter the blocked state. */
                vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002608:	1d18      	adds	r0, r3, #4
 800260a:	68ba      	ldr	r2, [r7, #8]
 800260c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800260e:	4313      	orrs	r3, r2
 8002610:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002612:	4619      	mov	r1, r3
 8002614:	f001 fd06 	bl	8004024 <vTaskPlaceOnUnorderedEventList>

                /* This is obsolete as it will get set after the task unblocks, but
                 * some compilers mistakenly generate a warning about the variable
                 * being returned without being set if it is not done. */
                uxReturn = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 800261c:	f001 fa28 	bl	8003a70 <xTaskResumeAll>
 8002620:	6178      	str	r0, [r7, #20]

        if( xTicksToWait != ( TickType_t ) 0 )
 8002622:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002624:	2b00      	cmp	r3, #0
 8002626:	d031      	beq.n	800268c <xEventGroupWaitBits+0x15c>
        {
            if( xAlreadyYielded == pdFALSE )
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b00      	cmp	r3, #0
 800262c:	d107      	bne.n	800263e <xEventGroupWaitBits+0x10e>
            {
                taskYIELD_WITHIN_API();
 800262e:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <xEventGroupWaitBits+0x16c>)
 8002630:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	f3bf 8f6f 	isb	sy

            /* The task blocked to wait for its required bits to be set - at this
             * point either the required bits were set or the block time expired.  If
             * the required bits were set they will have been stored in the task's
             * event list item, and they should now be retrieved then cleared. */
            uxReturn = uxTaskResetEventItemValue();
 800263e:	f002 fa31 	bl	8004aa4 <uxTaskResetEventItemValue>
 8002642:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 8002644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d11a      	bne.n	8002684 <xEventGroupWaitBits+0x154>
            {
                taskENTER_CRITICAL();
 800264e:	f003 f87f 	bl	8005750 <vPortEnterCritical>
                {
                    /* The task timed out, just return the current event bit value. */
                    uxReturn = pxEventBits->uxEventBits;
 8002652:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* It is possible that the event bits were updated between this
                     * task leaving the Blocked state and running again. */
                    if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	68b9      	ldr	r1, [r7, #8]
 800265c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800265e:	f000 f903 	bl	8002868 <prvTestWaitCondition>
 8002662:	4603      	mov	r3, r0
 8002664:	2b00      	cmp	r3, #0
 8002666:	d009      	beq.n	800267c <xEventGroupWaitBits+0x14c>
                    {
                        if( xClearOnExit != pdFALSE )
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2b00      	cmp	r3, #0
 800266c:	d006      	beq.n	800267c <xEventGroupWaitBits+0x14c>
                        {
                            pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800266e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	43db      	mvns	r3, r3
 8002676:	401a      	ands	r2, r3
 8002678:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267a:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xTimeoutOccurred = pdTRUE;
 800267c:	2301      	movs	r3, #1
 800267e:	623b      	str	r3, [r7, #32]
                }
                taskEXIT_CRITICAL();
 8002680:	f003 f892 	bl	80057a8 <vPortExitCritical>
            {
                /* The task unblocked because the bits were set. */
            }

            /* The task blocked so control bits may have been set. */
            uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002684:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002686:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800268a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        /* Prevent compiler warnings when trace macros are not used. */
        ( void ) xTimeoutOccurred;

        traceRETURN_xEventGroupWaitBits( uxReturn );

        return uxReturn;
 800268c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800268e:	4618      	mov	r0, r3
 8002690:	3730      	adds	r7, #48	@ 0x30
 8002692:	46bd      	mov	sp, r7
 8002694:	bd80      	pop	{r7, pc}
 8002696:	bf00      	nop
 8002698:	08022e88 	.word	0x08022e88
 800269c:	e000ed04 	.word	0xe000ed04

080026a0 <xEventGroupClearBits>:
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupClearBits( EventGroupHandle_t xEventGroup,
                                      const EventBits_t uxBitsToClear )
    {
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b084      	sub	sp, #16
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
 80026a8:	6039      	str	r1, [r7, #0]
        EventGroup_t * pxEventBits = xEventGroup;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	60fb      	str	r3, [r7, #12]

        traceENTER_xEventGroupClearBits( xEventGroup, uxBitsToClear );

        /* Check the user is not attempting to clear the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d104      	bne.n	80026be <xEventGroupClearBits+0x1e>
 80026b4:	f44f 71f1 	mov.w	r1, #482	@ 0x1e2
 80026b8:	480f      	ldr	r0, [pc, #60]	@ (80026f8 <xEventGroupClearBits+0x58>)
 80026ba:	f7fe fed9 	bl	8001470 <vAssertCalled>
        configASSERT( ( uxBitsToClear & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026c4:	d304      	bcc.n	80026d0 <xEventGroupClearBits+0x30>
 80026c6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80026ca:	480b      	ldr	r0, [pc, #44]	@ (80026f8 <xEventGroupClearBits+0x58>)
 80026cc:	f7fe fed0 	bl	8001470 <vAssertCalled>

        taskENTER_CRITICAL();
 80026d0:	f003 f83e 	bl	8005750 <vPortEnterCritical>
        {
            traceEVENT_GROUP_CLEAR_BITS( xEventGroup, uxBitsToClear );

            /* The value returned is the event group value prior to the bits being
             * cleared. */
            uxReturn = pxEventBits->uxEventBits;
 80026d4:	68fb      	ldr	r3, [r7, #12]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	60bb      	str	r3, [r7, #8]

            /* Clear the bits. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	683b      	ldr	r3, [r7, #0]
 80026e0:	43db      	mvns	r3, r3
 80026e2:	401a      	ands	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	601a      	str	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 80026e8:	f003 f85e 	bl	80057a8 <vPortExitCritical>

        traceRETURN_xEventGroupClearBits( uxReturn );

        return uxReturn;
 80026ec:	68bb      	ldr	r3, [r7, #8]
    }
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	08022e88 	.word	0x08022e88

080026fc <xEventGroupSetBits>:
    }
/*-----------------------------------------------------------*/

    EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup,
                                    const EventBits_t uxBitsToSet )
    {
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b08c      	sub	sp, #48	@ 0x30
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
 8002704:	6039      	str	r1, [r7, #0]
        ListItem_t * pxListItem;
        ListItem_t * pxNext;
        ListItem_t const * pxListEnd;
        List_t const * pxList;
        EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002706:	2300      	movs	r3, #0
 8002708:	62bb      	str	r3, [r7, #40]	@ 0x28
        EventGroup_t * pxEventBits = xEventGroup;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	623b      	str	r3, [r7, #32]
        BaseType_t xMatchFound = pdFALSE;
 800270e:	2300      	movs	r3, #0
 8002710:	627b      	str	r3, [r7, #36]	@ 0x24

        traceENTER_xEventGroupSetBits( xEventGroup, uxBitsToSet );

        /* Check the user is not attempting to set the bits used by the kernel
         * itself. */
        configASSERT( xEventGroup );
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d104      	bne.n	8002722 <xEventGroupSetBits+0x26>
 8002718:	f240 2132 	movw	r1, #562	@ 0x232
 800271c:	4836      	ldr	r0, [pc, #216]	@ (80027f8 <xEventGroupSetBits+0xfc>)
 800271e:	f7fe fea7 	bl	8001470 <vAssertCalled>
        configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002728:	d304      	bcc.n	8002734 <xEventGroupSetBits+0x38>
 800272a:	f240 2133 	movw	r1, #563	@ 0x233
 800272e:	4832      	ldr	r0, [pc, #200]	@ (80027f8 <xEventGroupSetBits+0xfc>)
 8002730:	f7fe fe9e 	bl	8001470 <vAssertCalled>

        pxList = &( pxEventBits->xTasksWaitingForBits );
 8002734:	6a3b      	ldr	r3, [r7, #32]
 8002736:	3304      	adds	r3, #4
 8002738:	61fb      	str	r3, [r7, #28]
        pxListEnd = listGET_END_MARKER( pxList );
 800273a:	69fb      	ldr	r3, [r7, #28]
 800273c:	3308      	adds	r3, #8
 800273e:	61bb      	str	r3, [r7, #24]
        vTaskSuspendAll();
 8002740:	f001 f988 	bl	8003a54 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

            pxListItem = listGET_HEAD_ENTRY( pxList );
 8002744:	69fb      	ldr	r3, [r7, #28]
 8002746:	68db      	ldr	r3, [r3, #12]
 8002748:	62fb      	str	r3, [r7, #44]	@ 0x2c

            /* Set the bits. */
            pxEventBits->uxEventBits |= uxBitsToSet;
 800274a:	6a3b      	ldr	r3, [r7, #32]
 800274c:	681a      	ldr	r2, [r3, #0]
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	431a      	orrs	r2, r3
 8002752:	6a3b      	ldr	r3, [r7, #32]
 8002754:	601a      	str	r2, [r3, #0]

            /* See if the new bit value should unblock any tasks. */
            while( pxListItem != pxListEnd )
 8002756:	e03c      	b.n	80027d2 <xEventGroupSetBits+0xd6>
            {
                pxNext = listGET_NEXT( pxListItem );
 8002758:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	617b      	str	r3, [r7, #20]
                uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800275e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	613b      	str	r3, [r7, #16]
                xMatchFound = pdFALSE;
 8002764:	2300      	movs	r3, #0
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Split the bits waited for from the control bits. */
                uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800276e:	60fb      	str	r3, [r7, #12]
                uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002776:	613b      	str	r3, [r7, #16]

                if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800277e:	2b00      	cmp	r3, #0
 8002780:	d108      	bne.n	8002794 <xEventGroupSetBits+0x98>
                {
                    /* Just looking for single bit being set. */
                    if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8002782:	6a3b      	ldr	r3, [r7, #32]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	693b      	ldr	r3, [r7, #16]
 8002788:	4013      	ands	r3, r2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d00b      	beq.n	80027a6 <xEventGroupSetBits+0xaa>
                    {
                        xMatchFound = pdTRUE;
 800278e:	2301      	movs	r3, #1
 8002790:	627b      	str	r3, [r7, #36]	@ 0x24
 8002792:	e008      	b.n	80027a6 <xEventGroupSetBits+0xaa>
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8002794:	6a3b      	ldr	r3, [r7, #32]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	693b      	ldr	r3, [r7, #16]
 800279a:	4013      	ands	r3, r2
 800279c:	693a      	ldr	r2, [r7, #16]
 800279e:	429a      	cmp	r2, r3
 80027a0:	d101      	bne.n	80027a6 <xEventGroupSetBits+0xaa>
                {
                    /* All bits are set. */
                    xMatchFound = pdTRUE;
 80027a2:	2301      	movs	r3, #1
 80027a4:	627b      	str	r3, [r7, #36]	@ 0x24
                else
                {
                    /* Need all bits to be set, but not all the bits were set. */
                }

                if( xMatchFound != pdFALSE )
 80027a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d010      	beq.n	80027ce <xEventGroupSetBits+0xd2>
                {
                    /* The bits match.  Should the bits be cleared on exit? */
                    if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <xEventGroupSetBits+0xc2>
                    {
                        uxBitsToClear |= uxBitsWaitedFor;
 80027b6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80027b8:	693b      	ldr	r3, [r7, #16]
 80027ba:	4313      	orrs	r3, r2
 80027bc:	62bb      	str	r3, [r7, #40]	@ 0x28
                    /* Store the actual event flag value in the task's event list
                     * item before removing the task from the event list.  The
                     * eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
                     * that is was unblocked due to its required bits matching, rather
                     * than because it timed out. */
                    vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80027c6:	4619      	mov	r1, r3
 80027c8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80027ca:	f001 fd49 	bl	8004260 <vTaskRemoveFromUnorderedEventList>
                }

                /* Move onto the next list item.  Note pxListItem->pxNext is not
                 * used here as the list item may have been removed from the event list
                 * and inserted into the ready/pending reading list. */
                pxListItem = pxNext;
 80027ce:	697b      	ldr	r3, [r7, #20]
 80027d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
            while( pxListItem != pxListEnd )
 80027d2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80027d4:	69bb      	ldr	r3, [r7, #24]
 80027d6:	429a      	cmp	r2, r3
 80027d8:	d1be      	bne.n	8002758 <xEventGroupSetBits+0x5c>
            }

            /* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
             * bit was set in the control word. */
            pxEventBits->uxEventBits &= ~uxBitsToClear;
 80027da:	6a3b      	ldr	r3, [r7, #32]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80027e0:	43db      	mvns	r3, r3
 80027e2:	401a      	ands	r2, r3
 80027e4:	6a3b      	ldr	r3, [r7, #32]
 80027e6:	601a      	str	r2, [r3, #0]
        }
        ( void ) xTaskResumeAll();
 80027e8:	f001 f942 	bl	8003a70 <xTaskResumeAll>

        traceRETURN_xEventGroupSetBits( pxEventBits->uxEventBits );

        return pxEventBits->uxEventBits;
 80027ec:	6a3b      	ldr	r3, [r7, #32]
 80027ee:	681b      	ldr	r3, [r3, #0]
    }
 80027f0:	4618      	mov	r0, r3
 80027f2:	3730      	adds	r7, #48	@ 0x30
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	08022e88 	.word	0x08022e88

080027fc <vEventGroupDelete>:
/*-----------------------------------------------------------*/

    void vEventGroupDelete( EventGroupHandle_t xEventGroup )
    {
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b084      	sub	sp, #16
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
        EventGroup_t * pxEventBits = xEventGroup;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	60fb      	str	r3, [r7, #12]
        const List_t * pxTasksWaitingForBits;

        traceENTER_vEventGroupDelete( xEventGroup );

        configASSERT( pxEventBits );
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d104      	bne.n	8002818 <vEventGroupDelete+0x1c>
 800280e:	f240 218e 	movw	r1, #654	@ 0x28e
 8002812:	4814      	ldr	r0, [pc, #80]	@ (8002864 <vEventGroupDelete+0x68>)
 8002814:	f7fe fe2c 	bl	8001470 <vAssertCalled>

        pxTasksWaitingForBits = &( pxEventBits->xTasksWaitingForBits );
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	3304      	adds	r3, #4
 800281c:	60bb      	str	r3, [r7, #8]

        vTaskSuspendAll();
 800281e:	f001 f919 	bl	8003a54 <vTaskSuspendAll>
        {
            traceEVENT_GROUP_DELETE( xEventGroup );

            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8002822:	e011      	b.n	8002848 <vEventGroupDelete+0x4c>
            {
                /* Unblock the task, returning 0 as the event list is being deleted
                 * and cannot therefore have any bits set. */
                configASSERT( pxTasksWaitingForBits->xListEnd.pxNext != ( const ListItem_t * ) &( pxTasksWaitingForBits->xListEnd ) );
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	68da      	ldr	r2, [r3, #12]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	3308      	adds	r3, #8
 800282c:	429a      	cmp	r2, r3
 800282e:	d104      	bne.n	800283a <vEventGroupDelete+0x3e>
 8002830:	f240 219a 	movw	r1, #666	@ 0x29a
 8002834:	480b      	ldr	r0, [pc, #44]	@ (8002864 <vEventGroupDelete+0x68>)
 8002836:	f7fe fe1b 	bl	8001470 <vAssertCalled>
                vTaskRemoveFromUnorderedEventList( pxTasksWaitingForBits->xListEnd.pxNext, eventUNBLOCKED_DUE_TO_BIT_SET );
 800283a:	68bb      	ldr	r3, [r7, #8]
 800283c:	68db      	ldr	r3, [r3, #12]
 800283e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002842:	4618      	mov	r0, r3
 8002844:	f001 fd0c 	bl	8004260 <vTaskRemoveFromUnorderedEventList>
            while( listCURRENT_LIST_LENGTH( pxTasksWaitingForBits ) > ( UBaseType_t ) 0 )
 8002848:	68bb      	ldr	r3, [r7, #8]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d1e9      	bne.n	8002824 <vEventGroupDelete+0x28>
            }
        }
        ( void ) xTaskResumeAll();
 8002850:	f001 f90e 	bl	8003a70 <xTaskResumeAll>

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
        {
            /* The event group can only have been allocated dynamically - free
             * it again. */
            vPortFree( pxEventBits );
 8002854:	68f8      	ldr	r0, [r7, #12]
 8002856:	f003 f951 	bl	8005afc <vPortFree>
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

        traceRETURN_vEventGroupDelete();
    }
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	08022e88 	.word	0x08022e88

08002868 <prvTestWaitCondition>:
/*-----------------------------------------------------------*/

    static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits,
                                            const EventBits_t uxBitsToWaitFor,
                                            const BaseType_t xWaitForAllBits )
    {
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	60f8      	str	r0, [r7, #12]
 8002870:	60b9      	str	r1, [r7, #8]
 8002872:	607a      	str	r2, [r7, #4]
        BaseType_t xWaitConditionMet = pdFALSE;
 8002874:	2300      	movs	r3, #0
 8002876:	617b      	str	r3, [r7, #20]

        if( xWaitForAllBits == pdFALSE )
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2b00      	cmp	r3, #0
 800287c:	d107      	bne.n	800288e <prvTestWaitCondition+0x26>
        {
            /* Task only has to wait for one bit within uxBitsToWaitFor to be
             * set.  Is one already set? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	4013      	ands	r3, r2
 8002884:	2b00      	cmp	r3, #0
 8002886:	d00a      	beq.n	800289e <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 8002888:	2301      	movs	r3, #1
 800288a:	617b      	str	r3, [r7, #20]
 800288c:	e007      	b.n	800289e <prvTestWaitCondition+0x36>
        }
        else
        {
            /* Task has to wait for all the bits in uxBitsToWaitFor to be set.
             * Are they set already? */
            if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800288e:	68fa      	ldr	r2, [r7, #12]
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	4013      	ands	r3, r2
 8002894:	68ba      	ldr	r2, [r7, #8]
 8002896:	429a      	cmp	r2, r3
 8002898:	d101      	bne.n	800289e <prvTestWaitCondition+0x36>
            {
                xWaitConditionMet = pdTRUE;
 800289a:	2301      	movs	r3, #1
 800289c:	617b      	str	r3, [r7, #20]
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }

        return xWaitConditionMet;
 800289e:	697b      	ldr	r3, [r7, #20]
    }
 80028a0:	4618      	mov	r0, r3
 80028a2:	371c      	adds	r7, #28
 80028a4:	46bd      	mov	sp, r7
 80028a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028aa:	4770      	bx	lr

080028ac <vListInitialise>:
/*-----------------------------------------------------------
* PUBLIC LIST API documented in list.h
*----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80028ac:	b480      	push	{r7}
 80028ae:	b083      	sub	sp, #12
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialise( pxList );

    /* The list structure contains a list item which is used to mark the
     * end of the list.  To initialise the list the list end is inserted
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f103 0208 	add.w	r2, r3, #8
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	605a      	str	r2, [r3, #4]

    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	f04f 32ff 	mov.w	r2, #4294967295
 80028c4:	609a      	str	r2, [r3, #8]

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f103 0208 	add.w	r2, r3, #8
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	60da      	str	r2, [r3, #12]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	f103 0208 	add.w	r2, r3, #8
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	611a      	str	r2, [r3, #16]
        pxList->xListEnd.pxContainer = NULL;
        listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( &( pxList->xListEnd ) );
    }
    #endif

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2200      	movs	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );

    traceRETURN_vListInitialise();
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
    traceENTER_vListInitialiseItem( pxItem );

    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2200      	movs	r2, #0
 80028f8:	611a      	str	r2, [r3, #16]
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );

    traceRETURN_vListInitialiseItem();
}
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr

08002906 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
 8002906:	b480      	push	{r7}
 8002908:	b085      	sub	sp, #20
 800290a:	af00      	add	r7, sp, #0
 800290c:	6078      	str	r0, [r7, #4]
 800290e:	6039      	str	r1, [r7, #0]
    ListItem_t * const pxIndex = pxList->pxIndex;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	60fb      	str	r3, [r7, #12]
    listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	689a      	ldr	r2, [r3, #8]
 8002920:	683b      	ldr	r3, [r7, #0]
 8002922:	609a      	str	r2, [r3, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	605a      	str	r2, [r3, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800292c:	68fb      	ldr	r3, [r7, #12]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	609a      	str	r2, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	687a      	ldr	r2, [r7, #4]
 8002936:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	1c5a      	adds	r2, r3, #1
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsertEnd();
}
 8002942:	bf00      	nop
 8002944:	3714      	adds	r7, #20
 8002946:	46bd      	mov	sp, r7
 8002948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294c:	4770      	bx	lr

0800294e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 800294e:	b480      	push	{r7}
 8002950:	b085      	sub	sp, #20
 8002952:	af00      	add	r7, sp, #0
 8002954:	6078      	str	r0, [r7, #4]
 8002956:	6039      	str	r1, [r7, #0]
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002958:	683b      	ldr	r3, [r7, #0]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	60bb      	str	r3, [r7, #8]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800295e:	68bb      	ldr	r3, [r7, #8]
 8002960:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002964:	d103      	bne.n	800296e <vListInsert+0x20>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	691b      	ldr	r3, [r3, #16]
 800296a:	60fb      	str	r3, [r7, #12]
 800296c:	e00c      	b.n	8002988 <vListInsert+0x3a>
        *   5) If the FreeRTOS port supports interrupt nesting then ensure that
        *      the priority of the tick interrupt is at or below
        *      configMAX_SYSCALL_INTERRUPT_PRIORITY.
        **********************************************************************/

        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	3308      	adds	r3, #8
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	e002      	b.n	800297c <vListInsert+0x2e>
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	685b      	ldr	r3, [r3, #4]
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	68ba      	ldr	r2, [r7, #8]
 8002984:	429a      	cmp	r2, r3
 8002986:	d2f6      	bcs.n	8002976 <vListInsert+0x28>
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	605a      	str	r2, [r3, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	609a      	str	r2, [r3, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	609a      	str	r2, [r3, #8]
    pxIterator->pxNext = pxNewListItem;
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	605a      	str	r2, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	687a      	ldr	r2, [r7, #4]
 80029a8:	611a      	str	r2, [r3, #16]

    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems + 1U );
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	1c5a      	adds	r2, r3, #1
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	601a      	str	r2, [r3, #0]

    traceRETURN_vListInsert();
}
 80029b4:	bf00      	nop
 80029b6:	3714      	adds	r7, #20
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <uxListRemove>:
/*-----------------------------------------------------------*/


UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80029c0:	b480      	push	{r7}
 80029c2:	b085      	sub	sp, #20
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
    /* The list item knows which list it is in.  Obtain the list from the list
     * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	691b      	ldr	r3, [r3, #16]
 80029cc:	60fb      	str	r3, [r7, #12]

    traceENTER_uxListRemove( pxItemToRemove );

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6892      	ldr	r2, [r2, #8]
 80029d6:	609a      	str	r2, [r3, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	687a      	ldr	r2, [r7, #4]
 80029de:	6852      	ldr	r2, [r2, #4]
 80029e0:	605a      	str	r2, [r3, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	687a      	ldr	r2, [r7, #4]
 80029e8:	429a      	cmp	r2, r3
 80029ea:	d103      	bne.n	80029f4 <uxListRemove+0x34>
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	689a      	ldr	r2, [r3, #8]
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	605a      	str	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	2200      	movs	r2, #0
 80029f8:	611a      	str	r2, [r3, #16]
    ( pxList->uxNumberOfItems ) = ( UBaseType_t ) ( pxList->uxNumberOfItems - 1U );
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	1e5a      	subs	r2, r3, #1
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	601a      	str	r2, [r3, #0]

    traceRETURN_uxListRemove( pxList->uxNumberOfItems );

    return pxList->uxNumberOfItems;
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	681b      	ldr	r3, [r3, #0]
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3714      	adds	r7, #20
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <xQueueGenericReset>:
    } while( 0 )
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue,
                               BaseType_t xNewQueue )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b084      	sub	sp, #16
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
 8002a1c:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn = pdPASS;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	60fb      	str	r3, [r7, #12]
    Queue_t * const pxQueue = xQueue;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	60bb      	str	r3, [r7, #8]

    traceENTER_xQueueGenericReset( xQueue, xNewQueue );

    configASSERT( pxQueue );
 8002a26:	68bb      	ldr	r3, [r7, #8]
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d104      	bne.n	8002a36 <xQueueGenericReset+0x22>
 8002a2c:	f240 1137 	movw	r1, #311	@ 0x137
 8002a30:	4839      	ldr	r0, [pc, #228]	@ (8002b18 <xQueueGenericReset+0x104>)
 8002a32:	f7fe fd1d 	bl	8001470 <vAssertCalled>

    if( ( pxQueue != NULL ) &&
 8002a36:	68bb      	ldr	r3, [r7, #8]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d05d      	beq.n	8002af8 <xQueueGenericReset+0xe4>
        ( pxQueue->uxLength >= 1U ) &&
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    if( ( pxQueue != NULL ) &&
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d059      	beq.n	8002af8 <xQueueGenericReset+0xe4>
        /* Check for multiplication overflow. */
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8002a44:	68bb      	ldr	r3, [r7, #8]
 8002a46:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4c:	2100      	movs	r1, #0
 8002a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d000      	beq.n	8002a58 <xQueueGenericReset+0x44>
 8002a56:	2101      	movs	r1, #1
 8002a58:	460b      	mov	r3, r1
        ( pxQueue->uxLength >= 1U ) &&
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d14c      	bne.n	8002af8 <xQueueGenericReset+0xe4>
    {
        taskENTER_CRITICAL();
 8002a5e:	f002 fe77 	bl	8005750 <vPortEnterCritical>
        {
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8002a62:	68bb      	ldr	r3, [r7, #8]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	68bb      	ldr	r3, [r7, #8]
 8002a68:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a6a:	68b9      	ldr	r1, [r7, #8]
 8002a6c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a6e:	fb01 f303 	mul.w	r3, r1, r3
 8002a72:	441a      	add	r2, r3
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	609a      	str	r2, [r3, #8]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	639a      	str	r2, [r3, #56]	@ 0x38
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8002a7e:	68bb      	ldr	r3, [r7, #8]
 8002a80:	681a      	ldr	r2, [r3, #0]
 8002a82:	68bb      	ldr	r3, [r7, #8]
 8002a84:	605a      	str	r2, [r3, #4]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize );
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	681a      	ldr	r2, [r3, #0]
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	68b9      	ldr	r1, [r7, #8]
 8002a92:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8002a94:	fb01 f303 	mul.w	r3, r1, r3
 8002a98:	441a      	add	r2, r3
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	22ff      	movs	r2, #255	@ 0xff
 8002aa2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
            pxQueue->cTxLock = queueUNLOCKED;
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	22ff      	movs	r2, #255	@ 0xff
 8002aaa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

            if( xNewQueue == pdFALSE )
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d114      	bne.n	8002ade <xQueueGenericReset+0xca>
                /* If there are tasks blocked waiting to read from the queue, then
                 * the tasks will remain blocked as after this function exits the queue
                 * will still be empty.  If there are tasks blocked waiting to write to
                 * the queue, then one should be unblocked as after this function exits
                 * it will be possible to write to it. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	691b      	ldr	r3, [r3, #16]
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d01a      	beq.n	8002af2 <xQueueGenericReset+0xde>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002abc:	68bb      	ldr	r3, [r7, #8]
 8002abe:	3310      	adds	r3, #16
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f001 fafb 	bl	80040bc <xTaskRemoveFromEventList>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d012      	beq.n	8002af2 <xQueueGenericReset+0xde>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002acc:	4b13      	ldr	r3, [pc, #76]	@ (8002b1c <xQueueGenericReset+0x108>)
 8002ace:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	f3bf 8f4f 	dsb	sy
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	e009      	b.n	8002af2 <xQueueGenericReset+0xde>
                }
            }
            else
            {
                /* Ensure the event queues start in the correct state. */
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	3310      	adds	r3, #16
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	f7ff fee2 	bl	80028ac <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002ae8:	68bb      	ldr	r3, [r7, #8]
 8002aea:	3324      	adds	r3, #36	@ 0x24
 8002aec:	4618      	mov	r0, r3
 8002aee:	f7ff fedd 	bl	80028ac <vListInitialise>
            }
        }
        taskEXIT_CRITICAL();
 8002af2:	f002 fe59 	bl	80057a8 <vPortExitCritical>
 8002af6:	e001      	b.n	8002afc <xQueueGenericReset+0xe8>
    }
    else
    {
        xReturn = pdFAIL;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60fb      	str	r3, [r7, #12]
    }

    configASSERT( xReturn != pdFAIL );
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d104      	bne.n	8002b0c <xQueueGenericReset+0xf8>
 8002b02:	f44f 71b6 	mov.w	r1, #364	@ 0x16c
 8002b06:	4804      	ldr	r0, [pc, #16]	@ (8002b18 <xQueueGenericReset+0x104>)
 8002b08:	f7fe fcb2 	bl	8001470 <vAssertCalled>

    /* A value is returned for calling semantic consistency with previous
     * versions. */
    traceRETURN_xQueueGenericReset( xReturn );

    return xReturn;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
 8002b16:	bf00      	nop
 8002b18:	08022eb4 	.word	0x08022eb4
 8002b1c:	e000ed04 	.word	0xe000ed04

08002b20 <xQueueGenericCreate>:
#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

    QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength,
                                       const UBaseType_t uxItemSize,
                                       const uint8_t ucQueueType )
    {
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	@ 0x28
 8002b24:	af02      	add	r7, sp, #8
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	4613      	mov	r3, r2
 8002b2c:	71fb      	strb	r3, [r7, #7]
        Queue_t * pxNewQueue = NULL;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	61fb      	str	r3, [r7, #28]
        size_t xQueueSizeInBytes;
        uint8_t * pucQueueStorage;

        traceENTER_xQueueGenericCreate( uxQueueLength, uxItemSize, ucQueueType );

        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d02e      	beq.n	8002b96 <xQueueGenericCreate+0x76>
            /* Check for multiplication overflow. */
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002b38:	2100      	movs	r1, #0
 8002b3a:	68ba      	ldr	r2, [r7, #8]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	fba3 2302 	umull	r2, r3, r3, r2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d000      	beq.n	8002b48 <xQueueGenericCreate+0x28>
 8002b46:	2101      	movs	r1, #1
 8002b48:	460b      	mov	r3, r1
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d123      	bne.n	8002b96 <xQueueGenericCreate+0x76>
            /* Check for addition overflow. */
            ( ( UBaseType_t ) ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	68ba      	ldr	r2, [r7, #8]
 8002b52:	fb02 f303 	mul.w	r3, r2, r3
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8002b56:	f113 0f51 	cmn.w	r3, #81	@ 0x51
 8002b5a:	d81c      	bhi.n	8002b96 <xQueueGenericCreate+0x76>
        {
            /* Allocate enough space to hold the maximum number of items that
             * can be in the queue at any time.  It is valid for uxItemSize to be
             * zero in the case the queue is used as a semaphore. */
            xQueueSizeInBytes = ( size_t ) ( ( size_t ) uxQueueLength * ( size_t ) uxItemSize );
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	68ba      	ldr	r2, [r7, #8]
 8002b60:	fb02 f303 	mul.w	r3, r2, r3
 8002b64:	61bb      	str	r3, [r7, #24]

            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	3350      	adds	r3, #80	@ 0x50
 8002b6a:	4618      	mov	r0, r3
 8002b6c:	f002 fef2 	bl	8005954 <pvPortMalloc>
 8002b70:	61f8      	str	r0, [r7, #28]

            if( pxNewQueue != NULL )
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d016      	beq.n	8002ba6 <xQueueGenericCreate+0x86>
            {
                /* Jump past the queue structure to find the location of the queue
                 * storage area. */
                pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8002b78:	69fb      	ldr	r3, [r7, #28]
 8002b7a:	617b      	str	r3, [r7, #20]
                pucQueueStorage += sizeof( Queue_t );
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	3350      	adds	r3, #80	@ 0x50
 8002b80:	617b      	str	r3, [r7, #20]
                     * deleted. */
                    pxNewQueue->ucStaticallyAllocated = pdFALSE;
                }
                #endif /* configSUPPORT_STATIC_ALLOCATION */

                prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002b82:	79fa      	ldrb	r2, [r7, #7]
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	9300      	str	r3, [sp, #0]
 8002b88:	4613      	mov	r3, r2
 8002b8a:	697a      	ldr	r2, [r7, #20]
 8002b8c:	68b9      	ldr	r1, [r7, #8]
 8002b8e:	68f8      	ldr	r0, [r7, #12]
 8002b90:	f000 f810 	bl	8002bb4 <prvInitialiseNewQueue>
            if( pxNewQueue != NULL )
 8002b94:	e007      	b.n	8002ba6 <xQueueGenericCreate+0x86>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            configASSERT( pxNewQueue );
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d104      	bne.n	8002ba6 <xQueueGenericCreate+0x86>
 8002b9c:	f240 212a 	movw	r1, #554	@ 0x22a
 8002ba0:	4803      	ldr	r0, [pc, #12]	@ (8002bb0 <xQueueGenericCreate+0x90>)
 8002ba2:	f7fe fc65 	bl	8001470 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueGenericCreate( pxNewQueue );

        return pxNewQueue;
 8002ba6:	69fb      	ldr	r3, [r7, #28]
    }
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3720      	adds	r7, #32
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	08022eb4 	.word	0x08022eb4

08002bb4 <prvInitialiseNewQueue>:
static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength,
                                   const UBaseType_t uxItemSize,
                                   uint8_t * pucQueueStorage,
                                   const uint8_t ucQueueType,
                                   Queue_t * pxNewQueue )
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b084      	sub	sp, #16
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	60f8      	str	r0, [r7, #12]
 8002bbc:	60b9      	str	r1, [r7, #8]
 8002bbe:	607a      	str	r2, [r7, #4]
 8002bc0:	70fb      	strb	r3, [r7, #3]
    /* Remove compiler warnings about unused parameters should
     * configUSE_TRACE_FACILITY not be set to 1. */
    ( void ) ucQueueType;

    if( uxItemSize == ( UBaseType_t ) 0 )
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d103      	bne.n	8002bd0 <prvInitialiseNewQueue+0x1c>
    {
        /* No RAM was allocated for the queue storage area, but PC head cannot
         * be set to NULL because NULL is used as a key to say the queue is used as
         * a mutex.  Therefore just set pcHead to point to the queue as a benign
         * value that is known to be within the memory map. */
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002bc8:	69bb      	ldr	r3, [r7, #24]
 8002bca:	69ba      	ldr	r2, [r7, #24]
 8002bcc:	601a      	str	r2, [r3, #0]
 8002bce:	e002      	b.n	8002bd6 <prvInitialiseNewQueue+0x22>
    }
    else
    {
        /* Set the head to the start of the queue storage area. */
        pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002bd0:	69bb      	ldr	r3, [r7, #24]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	601a      	str	r2, [r3, #0]
    }

    /* Initialise the queue members as described where the queue type is
     * defined. */
    pxNewQueue->uxLength = uxQueueLength;
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	68fa      	ldr	r2, [r7, #12]
 8002bda:	63da      	str	r2, [r3, #60]	@ 0x3c
    pxNewQueue->uxItemSize = uxItemSize;
 8002bdc:	69bb      	ldr	r3, [r7, #24]
 8002bde:	68ba      	ldr	r2, [r7, #8]
 8002be0:	641a      	str	r2, [r3, #64]	@ 0x40
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002be2:	2101      	movs	r1, #1
 8002be4:	69b8      	ldr	r0, [r7, #24]
 8002be6:	f7ff ff15 	bl	8002a14 <xQueueGenericReset>

    #if ( configUSE_TRACE_FACILITY == 1 )
    {
        pxNewQueue->ucQueueType = ucQueueType;
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	78fa      	ldrb	r2, [r7, #3]
 8002bee:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        pxNewQueue->pxQueueSetContainer = NULL;
    }
    #endif /* configUSE_QUEUE_SETS */

    traceQUEUE_CREATE( pxNewQueue );
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static void prvInitialiseMutex( Queue_t * pxNewQueue )
    {
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b082      	sub	sp, #8
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
        if( pxNewQueue != NULL )
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d00e      	beq.n	8002c26 <prvInitialiseMutex+0x2c>
        {
            /* The queue create function will set all the queue structure members
            * correctly for a generic queue, but this function is creating a
            * mutex.  Overwrite those members that need to be set differently -
            * in particular the information required for priority inheritance. */
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	609a      	str	r2, [r3, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

            /* In case this is a recursive mutex. */
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2200      	movs	r2, #0
 8002c18:	60da      	str	r2, [r3, #12]

            traceCREATE_MUTEX( pxNewQueue );

            /* Start with the semaphore in the expected state. */
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	2100      	movs	r1, #0
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f000 f847 	bl	8002cb4 <xQueueGenericSend>
        }
        else
        {
            traceCREATE_MUTEX_FAILED();
        }
    }
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
    {
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	71fb      	strb	r3, [r7, #7]
        QueueHandle_t xNewQueue;
        const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	617b      	str	r3, [r7, #20]
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	613b      	str	r3, [r7, #16]

        traceENTER_xQueueCreateMutex( ucQueueType );

        xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002c40:	79fb      	ldrb	r3, [r7, #7]
 8002c42:	461a      	mov	r2, r3
 8002c44:	6939      	ldr	r1, [r7, #16]
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7ff ff6a 	bl	8002b20 <xQueueGenericCreate>
 8002c4c:	60f8      	str	r0, [r7, #12]
        prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002c4e:	68f8      	ldr	r0, [r7, #12]
 8002c50:	f7ff ffd3 	bl	8002bfa <prvInitialiseMutex>

        traceRETURN_xQueueCreateMutex( xNewQueue );

        return xNewQueue;
 8002c54:	68fb      	ldr	r3, [r7, #12]
    }
 8002c56:	4618      	mov	r0, r3
 8002c58:	3718      	adds	r7, #24
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bd80      	pop	{r7, pc}
	...

08002c60 <xQueueCreateCountingSemaphore>:

#if ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

    QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount,
                                                 const UBaseType_t uxInitialCount )
    {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b084      	sub	sp, #16
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
        QueueHandle_t xHandle = NULL;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	60fb      	str	r3, [r7, #12]

        traceENTER_xQueueCreateCountingSemaphore( uxMaxCount, uxInitialCount );

        if( ( uxMaxCount != 0U ) &&
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d010      	beq.n	8002c96 <xQueueCreateCountingSemaphore+0x36>
 8002c74:	683a      	ldr	r2, [r7, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d80c      	bhi.n	8002c96 <xQueueCreateCountingSemaphore+0x36>
            ( uxInitialCount <= uxMaxCount ) )
        {
            xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002c7c:	2202      	movs	r2, #2
 8002c7e:	2100      	movs	r1, #0
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f7ff ff4d 	bl	8002b20 <xQueueGenericCreate>
 8002c86:	60f8      	str	r0, [r7, #12]

            if( xHandle != NULL )
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d00b      	beq.n	8002ca6 <xQueueCreateCountingSemaphore+0x46>
            {
                ( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	683a      	ldr	r2, [r7, #0]
 8002c92:	639a      	str	r2, [r3, #56]	@ 0x38
            if( xHandle != NULL )
 8002c94:	e007      	b.n	8002ca6 <xQueueCreateCountingSemaphore+0x46>
                traceCREATE_COUNTING_SEMAPHORE_FAILED();
            }
        }
        else
        {
            configASSERT( xHandle );
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d104      	bne.n	8002ca6 <xQueueCreateCountingSemaphore+0x46>
 8002c9c:	f240 319f 	movw	r1, #927	@ 0x39f
 8002ca0:	4803      	ldr	r0, [pc, #12]	@ (8002cb0 <xQueueCreateCountingSemaphore+0x50>)
 8002ca2:	f7fe fbe5 	bl	8001470 <vAssertCalled>
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xQueueCreateCountingSemaphore( xHandle );

        return xHandle;
 8002ca6:	68fb      	ldr	r3, [r7, #12]
    }
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3710      	adds	r7, #16
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bd80      	pop	{r7, pc}
 8002cb0:	08022eb4 	.word	0x08022eb4

08002cb4 <xQueueGenericSend>:

BaseType_t xQueueGenericSend( QueueHandle_t xQueue,
                              const void * const pvItemToQueue,
                              TickType_t xTicksToWait,
                              const BaseType_t xCopyPosition )
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b08a      	sub	sp, #40	@ 0x28
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
 8002cc0:	603b      	str	r3, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueGenericSend( xQueue, pvItemToQueue, xTicksToWait, xCopyPosition );

    configASSERT( pxQueue );
 8002cca:	6a3b      	ldr	r3, [r7, #32]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d104      	bne.n	8002cda <xQueueGenericSend+0x26>
 8002cd0:	f240 31b6 	movw	r1, #950	@ 0x3b6
 8002cd4:	4869      	ldr	r0, [pc, #420]	@ (8002e7c <xQueueGenericSend+0x1c8>)
 8002cd6:	f7fe fbcb 	bl	8001470 <vAssertCalled>
    configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d103      	bne.n	8002ce8 <xQueueGenericSend+0x34>
 8002ce0:	6a3b      	ldr	r3, [r7, #32]
 8002ce2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d101      	bne.n	8002cec <xQueueGenericSend+0x38>
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e000      	b.n	8002cee <xQueueGenericSend+0x3a>
 8002cec:	2300      	movs	r3, #0
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d104      	bne.n	8002cfc <xQueueGenericSend+0x48>
 8002cf2:	f240 31b7 	movw	r1, #951	@ 0x3b7
 8002cf6:	4861      	ldr	r0, [pc, #388]	@ (8002e7c <xQueueGenericSend+0x1c8>)
 8002cf8:	f7fe fbba 	bl	8001470 <vAssertCalled>
    configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	2b02      	cmp	r3, #2
 8002d00:	d103      	bne.n	8002d0a <xQueueGenericSend+0x56>
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d06:	2b01      	cmp	r3, #1
 8002d08:	d101      	bne.n	8002d0e <xQueueGenericSend+0x5a>
 8002d0a:	2301      	movs	r3, #1
 8002d0c:	e000      	b.n	8002d10 <xQueueGenericSend+0x5c>
 8002d0e:	2300      	movs	r3, #0
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d104      	bne.n	8002d1e <xQueueGenericSend+0x6a>
 8002d14:	f44f 716e 	mov.w	r1, #952	@ 0x3b8
 8002d18:	4858      	ldr	r0, [pc, #352]	@ (8002e7c <xQueueGenericSend+0x1c8>)
 8002d1a:	f7fe fba9 	bl	8001470 <vAssertCalled>
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002d1e:	f001 fcb7 	bl	8004690 <xTaskGetSchedulerState>
 8002d22:	4603      	mov	r3, r0
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d102      	bne.n	8002d2e <xQueueGenericSend+0x7a>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d101      	bne.n	8002d32 <xQueueGenericSend+0x7e>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <xQueueGenericSend+0x80>
 8002d32:	2300      	movs	r3, #0
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d104      	bne.n	8002d42 <xQueueGenericSend+0x8e>
 8002d38:	f240 31bb 	movw	r1, #955	@ 0x3bb
 8002d3c:	484f      	ldr	r0, [pc, #316]	@ (8002e7c <xQueueGenericSend+0x1c8>)
 8002d3e:	f7fe fb97 	bl	8001470 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002d42:	f002 fd05 	bl	8005750 <vPortEnterCritical>
        {
            /* Is there room on the queue now?  The running task must be the
             * highest priority task wanting to access the queue.  If the head item
             * in the queue is to be overwritten then it does not matter if the
             * queue is full. */
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002d46:	6a3b      	ldr	r3, [r7, #32]
 8002d48:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002d4a:	6a3b      	ldr	r3, [r7, #32]
 8002d4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d4e:	429a      	cmp	r2, r3
 8002d50:	d302      	bcc.n	8002d58 <xQueueGenericSend+0xa4>
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b02      	cmp	r3, #2
 8002d56:	d129      	bne.n	8002dac <xQueueGenericSend+0xf8>
                        }
                    }
                }
                #else /* configUSE_QUEUE_SETS */
                {
                    xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002d58:	683a      	ldr	r2, [r7, #0]
 8002d5a:	68b9      	ldr	r1, [r7, #8]
 8002d5c:	6a38      	ldr	r0, [r7, #32]
 8002d5e:	f000 fabb 	bl	80032d8 <prvCopyDataToQueue>
 8002d62:	61f8      	str	r0, [r7, #28]

                    /* If there was a task waiting for data to arrive on the
                     * queue then unblock it now. */
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d64:	6a3b      	ldr	r3, [r7, #32]
 8002d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d010      	beq.n	8002d8e <xQueueGenericSend+0xda>
                    {
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d6c:	6a3b      	ldr	r3, [r7, #32]
 8002d6e:	3324      	adds	r3, #36	@ 0x24
 8002d70:	4618      	mov	r0, r3
 8002d72:	f001 f9a3 	bl	80040bc <xTaskRemoveFromEventList>
 8002d76:	4603      	mov	r3, r0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <xQueueGenericSend+0xf0>
                        {
                            /* The unblocked task has a priority higher than
                             * our own so yield immediately.  Yes it is ok to do
                             * this from within the critical section - the kernel
                             * takes care of that. */
                            queueYIELD_IF_USING_PREEMPTION();
 8002d7c:	4b40      	ldr	r3, [pc, #256]	@ (8002e80 <xQueueGenericSend+0x1cc>)
 8002d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	f3bf 8f4f 	dsb	sy
 8002d88:	f3bf 8f6f 	isb	sy
 8002d8c:	e00a      	b.n	8002da4 <xQueueGenericSend+0xf0>
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }
                    else if( xYieldRequired != pdFALSE )
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d007      	beq.n	8002da4 <xQueueGenericSend+0xf0>
                    {
                        /* This path is a special case that will only get
                         * executed if the task was holding multiple mutexes and
                         * the mutexes were given back in an order that is
                         * different to that in which they were taken. */
                        queueYIELD_IF_USING_PREEMPTION();
 8002d94:	4b3a      	ldr	r3, [pc, #232]	@ (8002e80 <xQueueGenericSend+0x1cc>)
 8002d96:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002d9a:	601a      	str	r2, [r3, #0]
 8002d9c:	f3bf 8f4f 	dsb	sy
 8002da0:	f3bf 8f6f 	isb	sy
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* configUSE_QUEUE_SETS */

                taskEXIT_CRITICAL();
 8002da4:	f002 fd00 	bl	80057a8 <vPortExitCritical>

                traceRETURN_xQueueGenericSend( pdPASS );

                return pdPASS;
 8002da8:	2301      	movs	r3, #1
 8002daa:	e063      	b.n	8002e74 <xQueueGenericSend+0x1c0>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d103      	bne.n	8002dba <xQueueGenericSend+0x106>
                {
                    /* The queue was full and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002db2:	f002 fcf9 	bl	80057a8 <vPortExitCritical>
                    /* Return to the original privilege level before exiting
                     * the function. */
                    traceQUEUE_SEND_FAILED( pxQueue );
                    traceRETURN_xQueueGenericSend( errQUEUE_FULL );

                    return errQUEUE_FULL;
 8002db6:	2300      	movs	r3, #0
 8002db8:	e05c      	b.n	8002e74 <xQueueGenericSend+0x1c0>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002dba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d106      	bne.n	8002dce <xQueueGenericSend+0x11a>
                {
                    /* The queue was full and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002dc0:	f107 0314 	add.w	r3, r7, #20
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f001 fb23 	bl	8004410 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002dca:	2301      	movs	r3, #1
 8002dcc:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002dce:	f002 fceb 	bl	80057a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002dd2:	f000 fe3f 	bl	8003a54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002dd6:	f002 fcbb 	bl	8005750 <vPortEnterCritical>
 8002dda:	6a3b      	ldr	r3, [r7, #32]
 8002ddc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002de0:	b25b      	sxtb	r3, r3
 8002de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de6:	d103      	bne.n	8002df0 <xQueueGenericSend+0x13c>
 8002de8:	6a3b      	ldr	r3, [r7, #32]
 8002dea:	2200      	movs	r2, #0
 8002dec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002df0:	6a3b      	ldr	r3, [r7, #32]
 8002df2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002df6:	b25b      	sxtb	r3, r3
 8002df8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dfc:	d103      	bne.n	8002e06 <xQueueGenericSend+0x152>
 8002dfe:	6a3b      	ldr	r3, [r7, #32]
 8002e00:	2200      	movs	r2, #0
 8002e02:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002e06:	f002 fccf 	bl	80057a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e0a:	1d3a      	adds	r2, r7, #4
 8002e0c:	f107 0314 	add.w	r3, r7, #20
 8002e10:	4611      	mov	r1, r2
 8002e12:	4618      	mov	r0, r3
 8002e14:	f001 fb12 	bl	800443c <xTaskCheckForTimeOut>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d124      	bne.n	8002e68 <xQueueGenericSend+0x1b4>
        {
            if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002e1e:	6a38      	ldr	r0, [r7, #32]
 8002e20:	f000 fb52 	bl	80034c8 <prvIsQueueFull>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d018      	beq.n	8002e5c <xQueueGenericSend+0x1a8>
            {
                traceBLOCKING_ON_QUEUE_SEND( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002e2a:	6a3b      	ldr	r3, [r7, #32]
 8002e2c:	3310      	adds	r3, #16
 8002e2e:	687a      	ldr	r2, [r7, #4]
 8002e30:	4611      	mov	r1, r2
 8002e32:	4618      	mov	r0, r3
 8002e34:	f001 f8d6 	bl	8003fe4 <vTaskPlaceOnEventList>
                /* Unlocking the queue means queue events can effect the
                 * event list. It is possible that interrupts occurring now
                 * remove this task from the event list again - but as the
                 * scheduler is suspended the task will go onto the pending
                 * ready list instead of the actual ready list. */
                prvUnlockQueue( pxQueue );
 8002e38:	6a38      	ldr	r0, [r7, #32]
 8002e3a:	f000 fadd 	bl	80033f8 <prvUnlockQueue>
                /* Resuming the scheduler will move tasks from the pending
                 * ready list into the ready list - so it is feasible that this
                 * task is already in the ready list before it yields - in which
                 * case the yield will not cause a context switch unless there
                 * is also a higher priority task in the pending ready list. */
                if( xTaskResumeAll() == pdFALSE )
 8002e3e:	f000 fe17 	bl	8003a70 <xTaskResumeAll>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f47f af7c 	bne.w	8002d42 <xQueueGenericSend+0x8e>
                {
                    taskYIELD_WITHIN_API();
 8002e4a:	4b0d      	ldr	r3, [pc, #52]	@ (8002e80 <xQueueGenericSend+0x1cc>)
 8002e4c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002e50:	601a      	str	r2, [r3, #0]
 8002e52:	f3bf 8f4f 	dsb	sy
 8002e56:	f3bf 8f6f 	isb	sy
 8002e5a:	e772      	b.n	8002d42 <xQueueGenericSend+0x8e>
                }
            }
            else
            {
                /* Try again. */
                prvUnlockQueue( pxQueue );
 8002e5c:	6a38      	ldr	r0, [r7, #32]
 8002e5e:	f000 facb 	bl	80033f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002e62:	f000 fe05 	bl	8003a70 <xTaskResumeAll>
 8002e66:	e76c      	b.n	8002d42 <xQueueGenericSend+0x8e>
            }
        }
        else
        {
            /* The timeout has expired. */
            prvUnlockQueue( pxQueue );
 8002e68:	6a38      	ldr	r0, [r7, #32]
 8002e6a:	f000 fac5 	bl	80033f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002e6e:	f000 fdff 	bl	8003a70 <xTaskResumeAll>

            traceQUEUE_SEND_FAILED( pxQueue );
            traceRETURN_xQueueGenericSend( errQUEUE_FULL );

            return errQUEUE_FULL;
 8002e72:	2300      	movs	r3, #0
        }
    }
}
 8002e74:	4618      	mov	r0, r3
 8002e76:	3728      	adds	r7, #40	@ 0x28
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	bd80      	pop	{r7, pc}
 8002e7c:	08022eb4 	.word	0x08022eb4
 8002e80:	e000ed04 	.word	0xe000ed04

08002e84 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue,
                          void * const pvBuffer,
                          TickType_t xTicksToWait )
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b08a      	sub	sp, #40	@ 0x28
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
    BaseType_t xEntryTimeSet = pdFALSE;
 8002e90:	2300      	movs	r3, #0
 8002e92:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	623b      	str	r3, [r7, #32]

    traceENTER_xQueueReceive( xQueue, pvBuffer, xTicksToWait );

    /* Check the pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 8002e98:	6a3b      	ldr	r3, [r7, #32]
 8002e9a:	2b00      	cmp	r3, #0
 8002e9c:	d104      	bne.n	8002ea8 <xQueueReceive+0x24>
 8002e9e:	f240 51e9 	movw	r1, #1513	@ 0x5e9
 8002ea2:	485e      	ldr	r0, [pc, #376]	@ (800301c <xQueueReceive+0x198>)
 8002ea4:	f7fe fae4 	bl	8001470 <vAssertCalled>

    /* The buffer into which data is received can only be NULL if the data size
     * is zero (so no data is copied into the buffer). */
    configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ea8:	68bb      	ldr	r3, [r7, #8]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d103      	bne.n	8002eb6 <xQueueReceive+0x32>
 8002eae:	6a3b      	ldr	r3, [r7, #32]
 8002eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d101      	bne.n	8002eba <xQueueReceive+0x36>
 8002eb6:	2301      	movs	r3, #1
 8002eb8:	e000      	b.n	8002ebc <xQueueReceive+0x38>
 8002eba:	2300      	movs	r3, #0
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d104      	bne.n	8002eca <xQueueReceive+0x46>
 8002ec0:	f240 51ed 	movw	r1, #1517	@ 0x5ed
 8002ec4:	4855      	ldr	r0, [pc, #340]	@ (800301c <xQueueReceive+0x198>)
 8002ec6:	f7fe fad3 	bl	8001470 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002eca:	f001 fbe1 	bl	8004690 <xTaskGetSchedulerState>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d102      	bne.n	8002eda <xQueueReceive+0x56>
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d101      	bne.n	8002ede <xQueueReceive+0x5a>
 8002eda:	2301      	movs	r3, #1
 8002edc:	e000      	b.n	8002ee0 <xQueueReceive+0x5c>
 8002ede:	2300      	movs	r3, #0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d104      	bne.n	8002eee <xQueueReceive+0x6a>
 8002ee4:	f240 51f2 	movw	r1, #1522	@ 0x5f2
 8002ee8:	484c      	ldr	r0, [pc, #304]	@ (800301c <xQueueReceive+0x198>)
 8002eea:	f7fe fac1 	bl	8001470 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8002eee:	f002 fc2f 	bl	8005750 <vPortEnterCritical>
        {
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ef6:	61fb      	str	r3, [r7, #28]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d01f      	beq.n	8002f3e <xQueueReceive+0xba>
            {
                /* Data available, remove one item. */
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002efe:	68b9      	ldr	r1, [r7, #8]
 8002f00:	6a38      	ldr	r0, [r7, #32]
 8002f02:	f000 fa53 	bl	80033ac <prvCopyDataFromQueue>
                traceQUEUE_RECEIVE( pxQueue );
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting - ( UBaseType_t ) 1 );
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	1e5a      	subs	r2, r3, #1
 8002f0a:	6a3b      	ldr	r3, [r7, #32]
 8002f0c:	639a      	str	r2, [r3, #56]	@ 0x38

                /* There is now space in the queue, were any tasks waiting to
                 * post to the queue?  If so, unblock the highest priority waiting
                 * task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f0e:	6a3b      	ldr	r3, [r7, #32]
 8002f10:	691b      	ldr	r3, [r3, #16]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d00f      	beq.n	8002f36 <xQueueReceive+0xb2>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f16:	6a3b      	ldr	r3, [r7, #32]
 8002f18:	3310      	adds	r3, #16
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f001 f8ce 	bl	80040bc <xTaskRemoveFromEventList>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d007      	beq.n	8002f36 <xQueueReceive+0xb2>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 8002f26:	4b3e      	ldr	r3, [pc, #248]	@ (8003020 <xQueueReceive+0x19c>)
 8002f28:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f3bf 8f4f 	dsb	sy
 8002f32:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 8002f36:	f002 fc37 	bl	80057a8 <vPortExitCritical>

                traceRETURN_xQueueReceive( pdPASS );

                return pdPASS;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e069      	b.n	8003012 <xQueueReceive+0x18e>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d103      	bne.n	8002f4c <xQueueReceive+0xc8>
                {
                    /* The queue was empty and no block time is specified (or
                     * the block time has expired) so leave now. */
                    taskEXIT_CRITICAL();
 8002f44:	f002 fc30 	bl	80057a8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e062      	b.n	8003012 <xQueueReceive+0x18e>
                }
                else if( xEntryTimeSet == pdFALSE )
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d106      	bne.n	8002f60 <xQueueReceive+0xdc>
                {
                    /* The queue was empty and a block time was specified so
                     * configure the timeout structure. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8002f52:	f107 0314 	add.w	r3, r7, #20
 8002f56:	4618      	mov	r0, r3
 8002f58:	f001 fa5a 	bl	8004410 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 8002f60:	f002 fc22 	bl	80057a8 <vPortExitCritical>

        /* Interrupts and other tasks can send to and receive from the queue
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8002f64:	f000 fd76 	bl	8003a54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8002f68:	f002 fbf2 	bl	8005750 <vPortEnterCritical>
 8002f6c:	6a3b      	ldr	r3, [r7, #32]
 8002f6e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8002f72:	b25b      	sxtb	r3, r3
 8002f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f78:	d103      	bne.n	8002f82 <xQueueReceive+0xfe>
 8002f7a:	6a3b      	ldr	r3, [r7, #32]
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002f82:	6a3b      	ldr	r3, [r7, #32]
 8002f84:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8002f88:	b25b      	sxtb	r3, r3
 8002f8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f8e:	d103      	bne.n	8002f98 <xQueueReceive+0x114>
 8002f90:	6a3b      	ldr	r3, [r7, #32]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8002f98:	f002 fc06 	bl	80057a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f9c:	1d3a      	adds	r2, r7, #4
 8002f9e:	f107 0314 	add.w	r3, r7, #20
 8002fa2:	4611      	mov	r1, r2
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f001 fa49 	bl	800443c <xTaskCheckForTimeOut>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d123      	bne.n	8002ff8 <xQueueReceive+0x174>
        {
            /* The timeout has not expired.  If the queue is still empty place
             * the task on the list of tasks waiting to receive from the queue. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002fb0:	6a38      	ldr	r0, [r7, #32]
 8002fb2:	f000 fa73 	bl	800349c <prvIsQueueEmpty>
 8002fb6:	4603      	mov	r3, r0
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d017      	beq.n	8002fec <xQueueReceive+0x168>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	3324      	adds	r3, #36	@ 0x24
 8002fc0:	687a      	ldr	r2, [r7, #4]
 8002fc2:	4611      	mov	r1, r2
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	f001 f80d 	bl	8003fe4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8002fca:	6a38      	ldr	r0, [r7, #32]
 8002fcc:	f000 fa14 	bl	80033f8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8002fd0:	f000 fd4e 	bl	8003a70 <xTaskResumeAll>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d189      	bne.n	8002eee <xQueueReceive+0x6a>
                {
                    taskYIELD_WITHIN_API();
 8002fda:	4b11      	ldr	r3, [pc, #68]	@ (8003020 <xQueueReceive+0x19c>)
 8002fdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	f3bf 8f4f 	dsb	sy
 8002fe6:	f3bf 8f6f 	isb	sy
 8002fea:	e780      	b.n	8002eee <xQueueReceive+0x6a>
            }
            else
            {
                /* The queue contains data again.  Loop back to try and read the
                 * data. */
                prvUnlockQueue( pxQueue );
 8002fec:	6a38      	ldr	r0, [r7, #32]
 8002fee:	f000 fa03 	bl	80033f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8002ff2:	f000 fd3d 	bl	8003a70 <xTaskResumeAll>
 8002ff6:	e77a      	b.n	8002eee <xQueueReceive+0x6a>
        }
        else
        {
            /* Timed out.  If there is no data in the queue exit, otherwise loop
             * back and attempt to read the data. */
            prvUnlockQueue( pxQueue );
 8002ff8:	6a38      	ldr	r0, [r7, #32]
 8002ffa:	f000 f9fd 	bl	80033f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8002ffe:	f000 fd37 	bl	8003a70 <xTaskResumeAll>

            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003002:	6a38      	ldr	r0, [r7, #32]
 8003004:	f000 fa4a 	bl	800349c <prvIsQueueEmpty>
 8003008:	4603      	mov	r3, r0
 800300a:	2b00      	cmp	r3, #0
 800300c:	f43f af6f 	beq.w	8002eee <xQueueReceive+0x6a>
            {
                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueReceive( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 8003010:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 8003012:	4618      	mov	r0, r3
 8003014:	3728      	adds	r7, #40	@ 0x28
 8003016:	46bd      	mov	sp, r7
 8003018:	bd80      	pop	{r7, pc}
 800301a:	bf00      	nop
 800301c:	08022eb4 	.word	0x08022eb4
 8003020:	e000ed04 	.word	0xe000ed04

08003024 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue,
                                TickType_t xTicksToWait )
{
 8003024:	b580      	push	{r7, lr}
 8003026:	b08a      	sub	sp, #40	@ 0x28
 8003028:	af00      	add	r7, sp, #0
 800302a:	6078      	str	r0, [r7, #4]
 800302c:	6039      	str	r1, [r7, #0]
    BaseType_t xEntryTimeSet = pdFALSE;
 800302e:	2300      	movs	r3, #0
 8003030:	627b      	str	r3, [r7, #36]	@ 0x24
    TimeOut_t xTimeOut;
    Queue_t * const pxQueue = xQueue;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	61fb      	str	r3, [r7, #28]

    #if ( configUSE_MUTEXES == 1 )
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003036:	2300      	movs	r3, #0
 8003038:	623b      	str	r3, [r7, #32]
    #endif

    traceENTER_xQueueSemaphoreTake( xQueue, xTicksToWait );

    /* Check the queue pointer is not NULL. */
    configASSERT( ( pxQueue ) );
 800303a:	69fb      	ldr	r3, [r7, #28]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d104      	bne.n	800304a <xQueueSemaphoreTake+0x26>
 8003040:	f240 6182 	movw	r1, #1666	@ 0x682
 8003044:	486c      	ldr	r0, [pc, #432]	@ (80031f8 <xQueueSemaphoreTake+0x1d4>)
 8003046:	f7fe fa13 	bl	8001470 <vAssertCalled>

    /* Check this really is a semaphore, in which case the item size will be
     * 0. */
    configASSERT( pxQueue->uxItemSize == 0 );
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800304e:	2b00      	cmp	r3, #0
 8003050:	d004      	beq.n	800305c <xQueueSemaphoreTake+0x38>
 8003052:	f240 6186 	movw	r1, #1670	@ 0x686
 8003056:	4868      	ldr	r0, [pc, #416]	@ (80031f8 <xQueueSemaphoreTake+0x1d4>)
 8003058:	f7fe fa0a 	bl	8001470 <vAssertCalled>

    /* Cannot block if the scheduler is suspended. */
    #if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
    {
        configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800305c:	f001 fb18 	bl	8004690 <xTaskGetSchedulerState>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d102      	bne.n	800306c <xQueueSemaphoreTake+0x48>
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	2b00      	cmp	r3, #0
 800306a:	d101      	bne.n	8003070 <xQueueSemaphoreTake+0x4c>
 800306c:	2301      	movs	r3, #1
 800306e:	e000      	b.n	8003072 <xQueueSemaphoreTake+0x4e>
 8003070:	2300      	movs	r3, #0
 8003072:	2b00      	cmp	r3, #0
 8003074:	d104      	bne.n	8003080 <xQueueSemaphoreTake+0x5c>
 8003076:	f240 618b 	movw	r1, #1675	@ 0x68b
 800307a:	485f      	ldr	r0, [pc, #380]	@ (80031f8 <xQueueSemaphoreTake+0x1d4>)
 800307c:	f7fe f9f8 	bl	8001470 <vAssertCalled>
    }
    #endif

    for( ; ; )
    {
        taskENTER_CRITICAL();
 8003080:	f002 fb66 	bl	8005750 <vPortEnterCritical>
        {
            /* Semaphores are queues with an item size of 0, and where the
             * number of messages in the queue is the semaphore's count value. */
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003084:	69fb      	ldr	r3, [r7, #28]
 8003086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003088:	61bb      	str	r3, [r7, #24]

            /* Is there data in the queue now?  To be running the calling task
             * must be the highest priority task wanting to access the queue. */
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d024      	beq.n	80030da <xQueueSemaphoreTake+0xb6>
            {
                traceQUEUE_RECEIVE( pxQueue );

                /* Semaphores are queues with a data size of zero and where the
                 * messages waiting is the semaphore's count.  Reduce the count. */
                pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxSemaphoreCount - ( UBaseType_t ) 1 );
 8003090:	69bb      	ldr	r3, [r7, #24]
 8003092:	1e5a      	subs	r2, r3, #1
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	639a      	str	r2, [r3, #56]	@ 0x38

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d104      	bne.n	80030aa <xQueueSemaphoreTake+0x86>
                    {
                        /* Record the information required to implement
                         * priority inheritance should it become necessary. */
                        pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80030a0:	f001 fd18 	bl	8004ad4 <pvTaskIncrementMutexHeldCount>
 80030a4:	4602      	mov	r2, r0
 80030a6:	69fb      	ldr	r3, [r7, #28]
 80030a8:	609a      	str	r2, [r3, #8]
                }
                #endif /* configUSE_MUTEXES */

                /* Check to see if other tasks are blocked waiting to give the
                 * semaphore, and if so, unblock the highest priority such task. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030aa:	69fb      	ldr	r3, [r7, #28]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00f      	beq.n	80030d2 <xQueueSemaphoreTake+0xae>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030b2:	69fb      	ldr	r3, [r7, #28]
 80030b4:	3310      	adds	r3, #16
 80030b6:	4618      	mov	r0, r3
 80030b8:	f001 f800 	bl	80040bc <xTaskRemoveFromEventList>
 80030bc:	4603      	mov	r3, r0
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d007      	beq.n	80030d2 <xQueueSemaphoreTake+0xae>
                    {
                        queueYIELD_IF_USING_PREEMPTION();
 80030c2:	4b4e      	ldr	r3, [pc, #312]	@ (80031fc <xQueueSemaphoreTake+0x1d8>)
 80030c4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80030c8:	601a      	str	r2, [r3, #0]
 80030ca:	f3bf 8f4f 	dsb	sy
 80030ce:	f3bf 8f6f 	isb	sy
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                taskEXIT_CRITICAL();
 80030d2:	f002 fb69 	bl	80057a8 <vPortExitCritical>

                traceRETURN_xQueueSemaphoreTake( pdPASS );

                return pdPASS;
 80030d6:	2301      	movs	r3, #1
 80030d8:	e089      	b.n	80031ee <xQueueSemaphoreTake+0x1ca>
            }
            else
            {
                if( xTicksToWait == ( TickType_t ) 0 )
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d103      	bne.n	80030e8 <xQueueSemaphoreTake+0xc4>
                {
                    /* The semaphore count was 0 and no block time is specified
                     * (or the block time has expired) so exit now. */
                    taskEXIT_CRITICAL();
 80030e0:	f002 fb62 	bl	80057a8 <vPortExitCritical>

                    traceQUEUE_RECEIVE_FAILED( pxQueue );
                    traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                    return errQUEUE_EMPTY;
 80030e4:	2300      	movs	r3, #0
 80030e6:	e082      	b.n	80031ee <xQueueSemaphoreTake+0x1ca>
                }
                else if( xEntryTimeSet == pdFALSE )
 80030e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d106      	bne.n	80030fc <xQueueSemaphoreTake+0xd8>
                {
                    /* The semaphore count was 0 and a block time was specified
                     * so configure the timeout structure ready to block. */
                    vTaskInternalSetTimeOutState( &xTimeOut );
 80030ee:	f107 030c 	add.w	r3, r7, #12
 80030f2:	4618      	mov	r0, r3
 80030f4:	f001 f98c 	bl	8004410 <vTaskInternalSetTimeOutState>
                    xEntryTimeSet = pdTRUE;
 80030f8:	2301      	movs	r3, #1
 80030fa:	627b      	str	r3, [r7, #36]	@ 0x24
                    /* Entry time was already set. */
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }
        taskEXIT_CRITICAL();
 80030fc:	f002 fb54 	bl	80057a8 <vPortExitCritical>

        /* Interrupts and other tasks can give to and take from the semaphore
         * now the critical section has been exited. */

        vTaskSuspendAll();
 8003100:	f000 fca8 	bl	8003a54 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003104:	f002 fb24 	bl	8005750 <vPortEnterCritical>
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800310e:	b25b      	sxtb	r3, r3
 8003110:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003114:	d103      	bne.n	800311e <xQueueSemaphoreTake+0xfa>
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	2200      	movs	r2, #0
 800311a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8003124:	b25b      	sxtb	r3, r3
 8003126:	f1b3 3fff 	cmp.w	r3, #4294967295
 800312a:	d103      	bne.n	8003134 <xQueueSemaphoreTake+0x110>
 800312c:	69fb      	ldr	r3, [r7, #28]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8003134:	f002 fb38 	bl	80057a8 <vPortExitCritical>

        /* Update the timeout state to see if it has expired yet. */
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003138:	463a      	mov	r2, r7
 800313a:	f107 030c 	add.w	r3, r7, #12
 800313e:	4611      	mov	r1, r2
 8003140:	4618      	mov	r0, r3
 8003142:	f001 f97b 	bl	800443c <xTaskCheckForTimeOut>
 8003146:	4603      	mov	r3, r0
 8003148:	2b00      	cmp	r3, #0
 800314a:	d132      	bne.n	80031b2 <xQueueSemaphoreTake+0x18e>
        {
            /* A block time is specified and not expired.  If the semaphore
             * count is 0 then enter the Blocked state to wait for a semaphore to
             * become available.  As semaphores are implemented with queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800314c:	69f8      	ldr	r0, [r7, #28]
 800314e:	f000 f9a5 	bl	800349c <prvIsQueueEmpty>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	d026      	beq.n	80031a6 <xQueueSemaphoreTake+0x182>
            {
                traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

                #if ( configUSE_MUTEXES == 1 )
                {
                    if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003158:	69fb      	ldr	r3, [r7, #28]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d109      	bne.n	8003174 <xQueueSemaphoreTake+0x150>
                    {
                        taskENTER_CRITICAL();
 8003160:	f002 faf6 	bl	8005750 <vPortEnterCritical>
                        {
                            xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	4618      	mov	r0, r3
 800316a:	f001 faaf 	bl	80046cc <xTaskPriorityInherit>
 800316e:	6238      	str	r0, [r7, #32]
                        }
                        taskEXIT_CRITICAL();
 8003170:	f002 fb1a 	bl	80057a8 <vPortExitCritical>
                        mtCOVERAGE_TEST_MARKER();
                    }
                }
                #endif /* if ( configUSE_MUTEXES == 1 ) */

                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003174:	69fb      	ldr	r3, [r7, #28]
 8003176:	3324      	adds	r3, #36	@ 0x24
 8003178:	683a      	ldr	r2, [r7, #0]
 800317a:	4611      	mov	r1, r2
 800317c:	4618      	mov	r0, r3
 800317e:	f000 ff31 	bl	8003fe4 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003182:	69f8      	ldr	r0, [r7, #28]
 8003184:	f000 f938 	bl	80033f8 <prvUnlockQueue>

                if( xTaskResumeAll() == pdFALSE )
 8003188:	f000 fc72 	bl	8003a70 <xTaskResumeAll>
 800318c:	4603      	mov	r3, r0
 800318e:	2b00      	cmp	r3, #0
 8003190:	f47f af76 	bne.w	8003080 <xQueueSemaphoreTake+0x5c>
                {
                    taskYIELD_WITHIN_API();
 8003194:	4b19      	ldr	r3, [pc, #100]	@ (80031fc <xQueueSemaphoreTake+0x1d8>)
 8003196:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800319a:	601a      	str	r2, [r3, #0]
 800319c:	f3bf 8f4f 	dsb	sy
 80031a0:	f3bf 8f6f 	isb	sy
 80031a4:	e76c      	b.n	8003080 <xQueueSemaphoreTake+0x5c>
            }
            else
            {
                /* There was no timeout and the semaphore count was not 0, so
                 * attempt to take the semaphore again. */
                prvUnlockQueue( pxQueue );
 80031a6:	69f8      	ldr	r0, [r7, #28]
 80031a8:	f000 f926 	bl	80033f8 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80031ac:	f000 fc60 	bl	8003a70 <xTaskResumeAll>
 80031b0:	e766      	b.n	8003080 <xQueueSemaphoreTake+0x5c>
            }
        }
        else
        {
            /* Timed out. */
            prvUnlockQueue( pxQueue );
 80031b2:	69f8      	ldr	r0, [r7, #28]
 80031b4:	f000 f920 	bl	80033f8 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80031b8:	f000 fc5a 	bl	8003a70 <xTaskResumeAll>

            /* If the semaphore count is 0 exit now as the timeout has
             * expired.  Otherwise return to attempt to take the semaphore that is
             * known to be available.  As semaphores are implemented by queues the
             * queue being empty is equivalent to the semaphore count being 0. */
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80031bc:	69f8      	ldr	r0, [r7, #28]
 80031be:	f000 f96d 	bl	800349c <prvIsQueueEmpty>
 80031c2:	4603      	mov	r3, r0
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	f43f af5b 	beq.w	8003080 <xQueueSemaphoreTake+0x5c>
                #if ( configUSE_MUTEXES == 1 )
                {
                    /* xInheritanceOccurred could only have be set if
                     * pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
                     * test the mutex type again to check it is actually a mutex. */
                    if( xInheritanceOccurred != pdFALSE )
 80031ca:	6a3b      	ldr	r3, [r7, #32]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d00d      	beq.n	80031ec <xQueueSemaphoreTake+0x1c8>
                    {
                        taskENTER_CRITICAL();
 80031d0:	f002 fabe 	bl	8005750 <vPortEnterCritical>
                            /* This task blocking on the mutex caused another
                             * task to inherit this task's priority.  Now this task
                             * has timed out the priority should be disinherited
                             * again, but only as low as the next highest priority
                             * task that is waiting for the same mutex. */
                            uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80031d4:	69f8      	ldr	r0, [r7, #28]
 80031d6:	f000 f867 	bl	80032a8 <prvGetDisinheritPriorityAfterTimeout>
 80031da:	6178      	str	r0, [r7, #20]
                             * mutex to the ready list for its new priority. Coverity thinks that
                             * it can result in out-of-bounds access which is not true because
                             * uxHighestWaitingPriority, as returned by prvGetDisinheritPriorityAfterTimeout,
                             * is capped at ( configMAX_PRIORITIES - 1 ). */
                            /* coverity[overrun] */
                            vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	689b      	ldr	r3, [r3, #8]
 80031e0:	6979      	ldr	r1, [r7, #20]
 80031e2:	4618      	mov	r0, r3
 80031e4:	f001 fbae 	bl	8004944 <vTaskPriorityDisinheritAfterTimeout>
                        }
                        taskEXIT_CRITICAL();
 80031e8:	f002 fade 	bl	80057a8 <vPortExitCritical>
                #endif /* configUSE_MUTEXES */

                traceQUEUE_RECEIVE_FAILED( pxQueue );
                traceRETURN_xQueueSemaphoreTake( errQUEUE_EMPTY );

                return errQUEUE_EMPTY;
 80031ec:	2300      	movs	r3, #0
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
    }
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3728      	adds	r7, #40	@ 0x28
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	08022eb4 	.word	0x08022eb4
 80031fc:	e000ed04 	.word	0xe000ed04

08003200 <uxQueueMessagesWaiting>:
    return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;

    traceENTER_uxQueueMessagesWaiting( xQueue );

    configASSERT( xQueue );
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d104      	bne.n	8003218 <uxQueueMessagesWaiting+0x18>
 800320e:	f640 019b 	movw	r1, #2203	@ 0x89b
 8003212:	4807      	ldr	r0, [pc, #28]	@ (8003230 <uxQueueMessagesWaiting+0x30>)
 8003214:	f7fe f92c 	bl	8001470 <vAssertCalled>

    taskENTER_CRITICAL();
 8003218:	f002 fa9a 	bl	8005750 <vPortEnterCritical>
    {
        uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003220:	60fb      	str	r3, [r7, #12]
    }
    taskEXIT_CRITICAL();
 8003222:	f002 fac1 	bl	80057a8 <vPortExitCritical>

    traceRETURN_uxQueueMessagesWaiting( uxReturn );

    return uxReturn;
 8003226:	68fb      	ldr	r3, [r7, #12]
}
 8003228:	4618      	mov	r0, r3
 800322a:	3710      	adds	r7, #16
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}
 8003230:	08022eb4 	.word	0x08022eb4

08003234 <uxQueueSpacesAvailable>:
/*-----------------------------------------------------------*/

UBaseType_t uxQueueSpacesAvailable( const QueueHandle_t xQueue )
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b084      	sub	sp, #16
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
    UBaseType_t uxReturn;
    Queue_t * const pxQueue = xQueue;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	60fb      	str	r3, [r7, #12]

    traceENTER_uxQueueSpacesAvailable( xQueue );

    configASSERT( pxQueue );
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d104      	bne.n	8003250 <uxQueueSpacesAvailable+0x1c>
 8003246:	f44f 610b 	mov.w	r1, #2224	@ 0x8b0
 800324a:	4809      	ldr	r0, [pc, #36]	@ (8003270 <uxQueueSpacesAvailable+0x3c>)
 800324c:	f7fe f910 	bl	8001470 <vAssertCalled>

    taskENTER_CRITICAL();
 8003250:	f002 fa7e 	bl	8005750 <vPortEnterCritical>
    {
        uxReturn = ( UBaseType_t ) ( pxQueue->uxLength - pxQueue->uxMessagesWaiting );
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800325c:	1ad3      	subs	r3, r2, r3
 800325e:	60bb      	str	r3, [r7, #8]
    }
    taskEXIT_CRITICAL();
 8003260:	f002 faa2 	bl	80057a8 <vPortExitCritical>

    traceRETURN_uxQueueSpacesAvailable( uxReturn );

    return uxReturn;
 8003264:	68bb      	ldr	r3, [r7, #8]
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	08022eb4 	.word	0x08022eb4

08003274 <vQueueDelete>:
    return uxReturn;
}
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
    Queue_t * const pxQueue = xQueue;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	60fb      	str	r3, [r7, #12]

    traceENTER_vQueueDelete( xQueue );

    configASSERT( pxQueue );
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d104      	bne.n	8003290 <vQueueDelete+0x1c>
 8003286:	f640 01d4 	movw	r1, #2260	@ 0x8d4
 800328a:	4806      	ldr	r0, [pc, #24]	@ (80032a4 <vQueueDelete+0x30>)
 800328c:	f7fe f8f0 	bl	8001470 <vAssertCalled>
    traceQUEUE_DELETE( pxQueue );

    #if ( configQUEUE_REGISTRY_SIZE > 0 )
    {
        vQueueUnregisterQueue( pxQueue );
 8003290:	68f8      	ldr	r0, [r7, #12]
 8003292:	f000 f979 	bl	8003588 <vQueueUnregisterQueue>

    #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) )
    {
        /* The queue can only have been allocated dynamically - free it
         * again. */
        vPortFree( pxQueue );
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f002 fc30 	bl	8005afc <vPortFree>
        ( void ) pxQueue;
    }
    #endif /* configSUPPORT_DYNAMIC_ALLOCATION */

    traceRETURN_vQueueDelete();
}
 800329c:	bf00      	nop
 800329e:	3710      	adds	r7, #16
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bd80      	pop	{r7, pc}
 80032a4:	08022eb4 	.word	0x08022eb4

080032a8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
    {
 80032a8:	b480      	push	{r7}
 80032aa:	b085      	sub	sp, #20
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
         * priority, but the waiting task times out, then the holder should
         * disinherit the priority - but only down to the highest priority of any
         * other tasks that are waiting for the same mutex.  For this purpose,
         * return the priority of the highest priority task that is waiting for the
         * mutex. */
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d006      	beq.n	80032c6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
        {
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) ( ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) ) );
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	f1c3 0307 	rsb	r3, r3, #7
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	e001      	b.n	80032ca <prvGetDisinheritPriorityAfterTimeout+0x22>
        }
        else
        {
            uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
        }

        return uxHighestPriorityOfWaitingTasks;
 80032ca:	68fb      	ldr	r3, [r7, #12]
    }
 80032cc:	4618      	mov	r0, r3
 80032ce:	3714      	adds	r7, #20
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr

080032d8 <prvCopyDataToQueue>:
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue,
                                      const void * pvItemToQueue,
                                      const BaseType_t xPosition )
{
 80032d8:	b580      	push	{r7, lr}
 80032da:	b086      	sub	sp, #24
 80032dc:	af00      	add	r7, sp, #0
 80032de:	60f8      	str	r0, [r7, #12]
 80032e0:	60b9      	str	r1, [r7, #8]
 80032e2:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 80032e4:	2300      	movs	r3, #0
 80032e6:	617b      	str	r3, [r7, #20]
    UBaseType_t uxMessagesWaiting;

    /* This function is called from a critical section. */

    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ec:	613b      	str	r3, [r7, #16]

    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d10d      	bne.n	8003312 <prvCopyDataToQueue+0x3a>
    {
        #if ( configUSE_MUTEXES == 1 )
        {
            if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d14d      	bne.n	800339a <prvCopyDataToQueue+0xc2>
            {
                /* The mutex is no longer being held. */
                xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	4618      	mov	r0, r3
 8003304:	f001 fa82 	bl	800480c <xTaskPriorityDisinherit>
 8003308:	6178      	str	r0, [r7, #20]
                pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	609a      	str	r2, [r3, #8]
 8003310:	e043      	b.n	800339a <prvCopyDataToQueue+0xc2>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configUSE_MUTEXES */
    }
    else if( xPosition == queueSEND_TO_BACK )
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d119      	bne.n	800334c <prvCopyDataToQueue+0x74>
    {
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	6858      	ldr	r0, [r3, #4]
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003320:	461a      	mov	r2, r3
 8003322:	68b9      	ldr	r1, [r7, #8]
 8003324:	f01d fec8 	bl	80210b8 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	685a      	ldr	r2, [r3, #4]
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003330:	441a      	add	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	605a      	str	r2, [r3, #4]

        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	685a      	ldr	r2, [r3, #4]
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	689b      	ldr	r3, [r3, #8]
 800333e:	429a      	cmp	r2, r3
 8003340:	d32b      	bcc.n	800339a <prvCopyDataToQueue+0xc2>
        {
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681a      	ldr	r2, [r3, #0]
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	605a      	str	r2, [r3, #4]
 800334a:	e026      	b.n	800339a <prvCopyDataToQueue+0xc2>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    else
    {
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize );
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	68d8      	ldr	r0, [r3, #12]
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003354:	461a      	mov	r2, r3
 8003356:	68b9      	ldr	r1, [r7, #8]
 8003358:	f01d feae 	bl	80210b8 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	68da      	ldr	r2, [r3, #12]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003364:	425b      	negs	r3, r3
 8003366:	441a      	add	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead )
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	68da      	ldr	r2, [r3, #12]
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	429a      	cmp	r2, r3
 8003376:	d207      	bcs.n	8003388 <prvCopyDataToQueue+0xb0>
        {
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003380:	425b      	negs	r3, r3
 8003382:	441a      	add	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        if( xPosition == queueOVERWRITE )
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b02      	cmp	r3, #2
 800338c:	d105      	bne.n	800339a <prvCopyDataToQueue+0xc2>
        {
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	2b00      	cmp	r3, #0
 8003392:	d002      	beq.n	800339a <prvCopyDataToQueue+0xc2>
            {
                /* An item is not being added but overwritten, so subtract
                 * one from the recorded number of items in the queue so when
                 * one is added again below the number of recorded items remains
                 * correct. */
                --uxMessagesWaiting;
 8003394:	693b      	ldr	r3, [r7, #16]
 8003396:	3b01      	subs	r3, #1
 8003398:	613b      	str	r3, [r7, #16]
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }

    pxQueue->uxMessagesWaiting = ( UBaseType_t ) ( uxMessagesWaiting + ( UBaseType_t ) 1 );
 800339a:	693b      	ldr	r3, [r7, #16]
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	639a      	str	r2, [r3, #56]	@ 0x38

    return xReturn;
 80033a2:	697b      	ldr	r3, [r7, #20]
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bd80      	pop	{r7, pc}

080033ac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue,
                                  void * const pvBuffer )
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b082      	sub	sp, #8
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
 80033b4:	6039      	str	r1, [r7, #0]
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d018      	beq.n	80033f0 <prvCopyDataFromQueue+0x44>
    {
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	68da      	ldr	r2, [r3, #12]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033c6:	441a      	add	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	60da      	str	r2, [r3, #12]

        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail )
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	68da      	ldr	r2, [r3, #12]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d303      	bcc.n	80033e0 <prvCopyDataFromQueue+0x34>
        {
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681a      	ldr	r2, [r3, #0]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	60da      	str	r2, [r3, #12]
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize );
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	68d9      	ldr	r1, [r3, #12]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e8:	461a      	mov	r2, r3
 80033ea:	6838      	ldr	r0, [r7, #0]
 80033ec:	f01d fe64 	bl	80210b8 <memcpy>
    }
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}

080033f8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	b084      	sub	sp, #16
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]

    /* The lock counts contains the number of extra data items placed or
     * removed from the queue while the queue was locked.  When a queue is
     * locked items can be added or removed, but the event lists cannot be
     * updated. */
    taskENTER_CRITICAL();
 8003400:	f002 f9a6 	bl	8005750 <vPortEnterCritical>
    {
        int8_t cTxLock = pxQueue->cTxLock;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800340a:	73fb      	strb	r3, [r7, #15]

        /* See if data was added to the queue while it was locked. */
        while( cTxLock > queueLOCKED_UNMODIFIED )
 800340c:	e011      	b.n	8003432 <prvUnlockQueue+0x3a>
            }
            #else /* configUSE_QUEUE_SETS */
            {
                /* Tasks that are removed from the event list will get added to
                 * the pending ready list as the scheduler is still suspended. */
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003412:	2b00      	cmp	r3, #0
 8003414:	d012      	beq.n	800343c <prvUnlockQueue+0x44>
                {
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	3324      	adds	r3, #36	@ 0x24
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fe4e 	bl	80040bc <xTaskRemoveFromEventList>
 8003420:	4603      	mov	r3, r0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d001      	beq.n	800342a <prvUnlockQueue+0x32>
                    {
                        /* The task waiting has a higher priority so record that
                         * a context switch is required. */
                        vTaskMissedYield();
 8003426:	f001 f865 	bl	80044f4 <vTaskMissedYield>
                    break;
                }
            }
            #endif /* configUSE_QUEUE_SETS */

            --cTxLock;
 800342a:	7bfb      	ldrb	r3, [r7, #15]
 800342c:	3b01      	subs	r3, #1
 800342e:	b2db      	uxtb	r3, r3
 8003430:	73fb      	strb	r3, [r7, #15]
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003436:	2b00      	cmp	r3, #0
 8003438:	dce9      	bgt.n	800340e <prvUnlockQueue+0x16>
 800343a:	e000      	b.n	800343e <prvUnlockQueue+0x46>
                    break;
 800343c:	bf00      	nop
        }

        pxQueue->cTxLock = queueUNLOCKED;
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	22ff      	movs	r2, #255	@ 0xff
 8003442:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
    taskEXIT_CRITICAL();
 8003446:	f002 f9af 	bl	80057a8 <vPortExitCritical>

    /* Do the same for the Rx lock. */
    taskENTER_CRITICAL();
 800344a:	f002 f981 	bl	8005750 <vPortEnterCritical>
    {
        int8_t cRxLock = pxQueue->cRxLock;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8003454:	73bb      	strb	r3, [r7, #14]

        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003456:	e011      	b.n	800347c <prvUnlockQueue+0x84>
        {
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	691b      	ldr	r3, [r3, #16]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d012      	beq.n	8003486 <prvUnlockQueue+0x8e>
            {
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	3310      	adds	r3, #16
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fe29 	bl	80040bc <xTaskRemoveFromEventList>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <prvUnlockQueue+0x7c>
                {
                    vTaskMissedYield();
 8003470:	f001 f840 	bl	80044f4 <vTaskMissedYield>
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }

                --cRxLock;
 8003474:	7bbb      	ldrb	r3, [r7, #14]
 8003476:	3b01      	subs	r3, #1
 8003478:	b2db      	uxtb	r3, r3
 800347a:	73bb      	strb	r3, [r7, #14]
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800347c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003480:	2b00      	cmp	r3, #0
 8003482:	dce9      	bgt.n	8003458 <prvUnlockQueue+0x60>
 8003484:	e000      	b.n	8003488 <prvUnlockQueue+0x90>
            }
            else
            {
                break;
 8003486:	bf00      	nop
            }
        }

        pxQueue->cRxLock = queueUNLOCKED;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	22ff      	movs	r2, #255	@ 0xff
 800348c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
    }
    taskEXIT_CRITICAL();
 8003490:	f002 f98a 	bl	80057a8 <vPortExitCritical>
}
 8003494:	bf00      	nop
 8003496:	3710      	adds	r7, #16
 8003498:	46bd      	mov	sp, r7
 800349a:	bd80      	pop	{r7, pc}

0800349c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b084      	sub	sp, #16
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80034a4:	f002 f954 	bl	8005750 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d102      	bne.n	80034b6 <prvIsQueueEmpty+0x1a>
        {
            xReturn = pdTRUE;
 80034b0:	2301      	movs	r3, #1
 80034b2:	60fb      	str	r3, [r7, #12]
 80034b4:	e001      	b.n	80034ba <prvIsQueueEmpty+0x1e>
        }
        else
        {
            xReturn = pdFALSE;
 80034b6:	2300      	movs	r3, #0
 80034b8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80034ba:	f002 f975 	bl	80057a8 <vPortExitCritical>

    return xReturn;
 80034be:	68fb      	ldr	r3, [r7, #12]
}
 80034c0:	4618      	mov	r0, r3
 80034c2:	3710      	adds	r7, #16
 80034c4:	46bd      	mov	sp, r7
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <prvIsQueueFull>:
    return xReturn;
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80034d0:	f002 f93e 	bl	8005750 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80034dc:	429a      	cmp	r2, r3
 80034de:	d102      	bne.n	80034e6 <prvIsQueueFull+0x1e>
        {
            xReturn = pdTRUE;
 80034e0:	2301      	movs	r3, #1
 80034e2:	60fb      	str	r3, [r7, #12]
 80034e4:	e001      	b.n	80034ea <prvIsQueueFull+0x22>
        }
        else
        {
            xReturn = pdFALSE;
 80034e6:	2300      	movs	r3, #0
 80034e8:	60fb      	str	r3, [r7, #12]
        }
    }
    taskEXIT_CRITICAL();
 80034ea:	f002 f95d 	bl	80057a8 <vPortExitCritical>

    return xReturn;
 80034ee:	68fb      	ldr	r3, [r7, #12]
}
 80034f0:	4618      	mov	r0, r3
 80034f2:	3710      	adds	r7, #16
 80034f4:	46bd      	mov	sp, r7
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <vQueueAddToRegistry>:

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueAddToRegistry( QueueHandle_t xQueue,
                              const char * pcQueueName )
    {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
 8003500:	6039      	str	r1, [r7, #0]
        UBaseType_t ux;
        QueueRegistryItem_t * pxEntryToWrite = NULL;
 8003502:	2300      	movs	r3, #0
 8003504:	60bb      	str	r3, [r7, #8]

        traceENTER_vQueueAddToRegistry( xQueue, pcQueueName );

        configASSERT( xQueue );
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d104      	bne.n	8003516 <vQueueAddToRegistry+0x1e>
 800350c:	f640 31c9 	movw	r1, #3017	@ 0xbc9
 8003510:	481b      	ldr	r0, [pc, #108]	@ (8003580 <vQueueAddToRegistry+0x88>)
 8003512:	f7fd ffad 	bl	8001470 <vAssertCalled>

        if( pcQueueName != NULL )
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d024      	beq.n	8003566 <vQueueAddToRegistry+0x6e>
        {
            /* See if there is an empty space in the registry.  A NULL name denotes
             * a free slot. */
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800351c:	2300      	movs	r3, #0
 800351e:	60fb      	str	r3, [r7, #12]
 8003520:	e01e      	b.n	8003560 <vQueueAddToRegistry+0x68>
            {
                /* Replace an existing entry if the queue is already in the registry. */
                if( xQueue == xQueueRegistry[ ux ].xHandle )
 8003522:	4a18      	ldr	r2, [pc, #96]	@ (8003584 <vQueueAddToRegistry+0x8c>)
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	00db      	lsls	r3, r3, #3
 8003528:	4413      	add	r3, r2
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	687a      	ldr	r2, [r7, #4]
 800352e:	429a      	cmp	r2, r3
 8003530:	d105      	bne.n	800353e <vQueueAddToRegistry+0x46>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	00db      	lsls	r3, r3, #3
 8003536:	4a13      	ldr	r2, [pc, #76]	@ (8003584 <vQueueAddToRegistry+0x8c>)
 8003538:	4413      	add	r3, r2
 800353a:	60bb      	str	r3, [r7, #8]
                    break;
 800353c:	e013      	b.n	8003566 <vQueueAddToRegistry+0x6e>
                }
                /* Otherwise, store in the next empty location */
                else if( ( pxEntryToWrite == NULL ) && ( xQueueRegistry[ ux ].pcQueueName == NULL ) )
 800353e:	68bb      	ldr	r3, [r7, #8]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d10a      	bne.n	800355a <vQueueAddToRegistry+0x62>
 8003544:	4a0f      	ldr	r2, [pc, #60]	@ (8003584 <vQueueAddToRegistry+0x8c>)
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d104      	bne.n	800355a <vQueueAddToRegistry+0x62>
                {
                    pxEntryToWrite = &( xQueueRegistry[ ux ] );
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	00db      	lsls	r3, r3, #3
 8003554:	4a0b      	ldr	r2, [pc, #44]	@ (8003584 <vQueueAddToRegistry+0x8c>)
 8003556:	4413      	add	r3, r2
 8003558:	60bb      	str	r3, [r7, #8]
            for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	3301      	adds	r3, #1
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2b07      	cmp	r3, #7
 8003564:	d9dd      	bls.n	8003522 <vQueueAddToRegistry+0x2a>
                    mtCOVERAGE_TEST_MARKER();
                }
            }
        }

        if( pxEntryToWrite != NULL )
 8003566:	68bb      	ldr	r3, [r7, #8]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d005      	beq.n	8003578 <vQueueAddToRegistry+0x80>
        {
            /* Store the information on this queue. */
            pxEntryToWrite->pcQueueName = pcQueueName;
 800356c:	68bb      	ldr	r3, [r7, #8]
 800356e:	683a      	ldr	r2, [r7, #0]
 8003570:	601a      	str	r2, [r3, #0]
            pxEntryToWrite->xHandle = xQueue;
 8003572:	68bb      	ldr	r3, [r7, #8]
 8003574:	687a      	ldr	r2, [r7, #4]
 8003576:	605a      	str	r2, [r3, #4]

            traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
        }

        traceRETURN_vQueueAddToRegistry();
    }
 8003578:	bf00      	nop
 800357a:	3710      	adds	r7, #16
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	08022eb4 	.word	0x08022eb4
 8003584:	20000ac8 	.word	0x20000ac8

08003588 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

    void vQueueUnregisterQueue( QueueHandle_t xQueue )
    {
 8003588:	b580      	push	{r7, lr}
 800358a:	b084      	sub	sp, #16
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
        UBaseType_t ux;

        traceENTER_vQueueUnregisterQueue( xQueue );

        configASSERT( xQueue );
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d104      	bne.n	80035a0 <vQueueUnregisterQueue+0x18>
 8003596:	f640 411d 	movw	r1, #3101	@ 0xc1d
 800359a:	4812      	ldr	r0, [pc, #72]	@ (80035e4 <vQueueUnregisterQueue+0x5c>)
 800359c:	f7fd ff68 	bl	8001470 <vAssertCalled>

        /* See if the handle of the queue being unregistered in actually in the
         * registry. */
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035a0:	2300      	movs	r3, #0
 80035a2:	60fb      	str	r3, [r7, #12]
 80035a4:	e016      	b.n	80035d4 <vQueueUnregisterQueue+0x4c>
        {
            if( xQueueRegistry[ ux ].xHandle == xQueue )
 80035a6:	4a10      	ldr	r2, [pc, #64]	@ (80035e8 <vQueueUnregisterQueue+0x60>)
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	00db      	lsls	r3, r3, #3
 80035ac:	4413      	add	r3, r2
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	429a      	cmp	r2, r3
 80035b4:	d10b      	bne.n	80035ce <vQueueUnregisterQueue+0x46>
            {
                /* Set the name to NULL to show that this slot if free again. */
                xQueueRegistry[ ux ].pcQueueName = NULL;
 80035b6:	4a0c      	ldr	r2, [pc, #48]	@ (80035e8 <vQueueUnregisterQueue+0x60>)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2100      	movs	r1, #0
 80035bc:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

                /* Set the handle to NULL to ensure the same queue handle cannot
                 * appear in the registry twice if it is added, removed, then
                 * added again. */
                xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80035c0:	4a09      	ldr	r2, [pc, #36]	@ (80035e8 <vQueueUnregisterQueue+0x60>)
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	00db      	lsls	r3, r3, #3
 80035c6:	4413      	add	r3, r2
 80035c8:	2200      	movs	r2, #0
 80035ca:	605a      	str	r2, [r3, #4]
                break;
 80035cc:	e006      	b.n	80035dc <vQueueUnregisterQueue+0x54>
        for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	3301      	adds	r3, #1
 80035d2:	60fb      	str	r3, [r7, #12]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2b07      	cmp	r3, #7
 80035d8:	d9e5      	bls.n	80035a6 <vQueueUnregisterQueue+0x1e>
                mtCOVERAGE_TEST_MARKER();
            }
        }

        traceRETURN_vQueueUnregisterQueue();
    }
 80035da:	bf00      	nop
 80035dc:	bf00      	nop
 80035de:	3710      	adds	r7, #16
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	08022eb4 	.word	0x08022eb4
 80035e8:	20000ac8 	.word	0x20000ac8

080035ec <prvCreateTask>:
                                  const char * const pcName,
                                  const configSTACK_DEPTH_TYPE uxStackDepth,
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask )
    {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b08a      	sub	sp, #40	@ 0x28
 80035f0:	af04      	add	r7, sp, #16
 80035f2:	60f8      	str	r0, [r7, #12]
 80035f4:	60b9      	str	r1, [r7, #8]
 80035f6:	607a      	str	r2, [r7, #4]
 80035f8:	603b      	str	r3, [r7, #0]

            /* Allocate space for the stack used by the task being created. */
            /* MISRA Ref 11.5.1 [Malloc memory assignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
            /* coverity[misra_c_2012_rule_11_5_violation] */
            pxStack = pvPortMallocStack( ( ( ( size_t ) uxStackDepth ) * sizeof( StackType_t ) ) );
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	009b      	lsls	r3, r3, #2
 80035fe:	4618      	mov	r0, r3
 8003600:	f002 f9a8 	bl	8005954 <pvPortMalloc>
 8003604:	6138      	str	r0, [r7, #16]

            if( pxStack != NULL )
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d013      	beq.n	8003634 <prvCreateTask+0x48>
            {
                /* Allocate space for the TCB. */
                /* MISRA Ref 11.5.1 [Malloc memory assignment] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                /* coverity[misra_c_2012_rule_11_5_violation] */
                pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) );
 800360c:	206c      	movs	r0, #108	@ 0x6c
 800360e:	f002 f9a1 	bl	8005954 <pvPortMalloc>
 8003612:	6178      	str	r0, [r7, #20]

                if( pxNewTCB != NULL )
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <prvCreateTask+0x40>
                {
                    ( void ) memset( ( void * ) pxNewTCB, 0x00, sizeof( TCB_t ) );
 800361a:	226c      	movs	r2, #108	@ 0x6c
 800361c:	2100      	movs	r1, #0
 800361e:	6978      	ldr	r0, [r7, #20]
 8003620:	f01d fe57 	bl	80212d2 <memset>

                    /* Store the stack location in the TCB. */
                    pxNewTCB->pxStack = pxStack;
 8003624:	697b      	ldr	r3, [r7, #20]
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	631a      	str	r2, [r3, #48]	@ 0x30
 800362a:	e005      	b.n	8003638 <prvCreateTask+0x4c>
                }
                else
                {
                    /* The stack cannot be used as the TCB was not created.  Free
                     * it again. */
                    vPortFreeStack( pxStack );
 800362c:	6938      	ldr	r0, [r7, #16]
 800362e:	f002 fa65 	bl	8005afc <vPortFree>
 8003632:	e001      	b.n	8003638 <prvCreateTask+0x4c>
                }
            }
            else
            {
                pxNewTCB = NULL;
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
            }
        }
        #endif /* portSTACK_GROWTH */

        if( pxNewTCB != NULL )
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	2b00      	cmp	r3, #0
 800363c:	d00d      	beq.n	800365a <prvCreateTask+0x6e>
                 * task was created dynamically in case it is later deleted. */
                pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
            }
            #endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

            prvInitialiseNewTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800363e:	2300      	movs	r3, #0
 8003640:	9303      	str	r3, [sp, #12]
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	9302      	str	r3, [sp, #8]
 8003646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003648:	9301      	str	r3, [sp, #4]
 800364a:	6a3b      	ldr	r3, [r7, #32]
 800364c:	9300      	str	r3, [sp, #0]
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	68b9      	ldr	r1, [r7, #8]
 8003654:	68f8      	ldr	r0, [r7, #12]
 8003656:	f000 f829 	bl	80036ac <prvInitialiseNewTask>
        }

        return pxNewTCB;
 800365a:	697b      	ldr	r3, [r7, #20]
    }
 800365c:	4618      	mov	r0, r3
 800365e:	3718      	adds	r7, #24
 8003660:	46bd      	mov	sp, r7
 8003662:	bd80      	pop	{r7, pc}

08003664 <xTaskCreate>:
                            const char * const pcName,
                            const configSTACK_DEPTH_TYPE uxStackDepth,
                            void * const pvParameters,
                            UBaseType_t uxPriority,
                            TaskHandle_t * const pxCreatedTask )
    {
 8003664:	b580      	push	{r7, lr}
 8003666:	b088      	sub	sp, #32
 8003668:	af02      	add	r7, sp, #8
 800366a:	60f8      	str	r0, [r7, #12]
 800366c:	60b9      	str	r1, [r7, #8]
 800366e:	607a      	str	r2, [r7, #4]
 8003670:	603b      	str	r3, [r7, #0]
        TCB_t * pxNewTCB;
        BaseType_t xReturn;

        traceENTER_xTaskCreate( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );

        pxNewTCB = prvCreateTask( pxTaskCode, pcName, uxStackDepth, pvParameters, uxPriority, pxCreatedTask );
 8003672:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003674:	9301      	str	r3, [sp, #4]
 8003676:	6a3b      	ldr	r3, [r7, #32]
 8003678:	9300      	str	r3, [sp, #0]
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	687a      	ldr	r2, [r7, #4]
 800367e:	68b9      	ldr	r1, [r7, #8]
 8003680:	68f8      	ldr	r0, [r7, #12]
 8003682:	f7ff ffb3 	bl	80035ec <prvCreateTask>
 8003686:	6138      	str	r0, [r7, #16]

        if( pxNewTCB != NULL )
 8003688:	693b      	ldr	r3, [r7, #16]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d005      	beq.n	800369a <xTaskCreate+0x36>
                /* Set the task's affinity before scheduling it. */
                pxNewTCB->uxCoreAffinityMask = configTASK_DEFAULT_CORE_AFFINITY;
            }
            #endif

            prvAddNewTaskToReadyList( pxNewTCB );
 800368e:	6938      	ldr	r0, [r7, #16]
 8003690:	f000 f890 	bl	80037b4 <prvAddNewTaskToReadyList>
            xReturn = pdPASS;
 8003694:	2301      	movs	r3, #1
 8003696:	617b      	str	r3, [r7, #20]
 8003698:	e002      	b.n	80036a0 <xTaskCreate+0x3c>
        }
        else
        {
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800369a:	f04f 33ff 	mov.w	r3, #4294967295
 800369e:	617b      	str	r3, [r7, #20]
        }

        traceRETURN_xTaskCreate( xReturn );

        return xReturn;
 80036a0:	697b      	ldr	r3, [r7, #20]
    }
 80036a2:	4618      	mov	r0, r3
 80036a4:	3718      	adds	r7, #24
 80036a6:	46bd      	mov	sp, r7
 80036a8:	bd80      	pop	{r7, pc}
	...

080036ac <prvInitialiseNewTask>:
                                  void * const pvParameters,
                                  UBaseType_t uxPriority,
                                  TaskHandle_t * const pxCreatedTask,
                                  TCB_t * pxNewTCB,
                                  const MemoryRegion_t * const xRegions )
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b086      	sub	sp, #24
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	60f8      	str	r0, [r7, #12]
 80036b4:	60b9      	str	r1, [r7, #8]
 80036b6:	607a      	str	r2, [r7, #4]
 80036b8:	603b      	str	r3, [r7, #0]

    /* Avoid dependency on memset() if it is not required. */
    #if ( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
    {
        /* Fill the stack with a known value to assist debugging. */
        ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) uxStackDepth * sizeof( StackType_t ) );
 80036ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036bc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	009b      	lsls	r3, r3, #2
 80036c2:	461a      	mov	r2, r3
 80036c4:	21a5      	movs	r1, #165	@ 0xa5
 80036c6:	f01d fe04 	bl	80212d2 <memset>
     * grows from high memory to low (as per the 80x86) or vice versa.
     * portSTACK_GROWTH is used to make the result positive or negative as required
     * by the port. */
    #if ( portSTACK_GROWTH < 0 )
    {
        pxTopOfStack = &( pxNewTCB->pxStack[ uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 ] );
 80036ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80036cc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036ce:	6879      	ldr	r1, [r7, #4]
 80036d0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80036d4:	440b      	add	r3, r1
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	613b      	str	r3, [r7, #16]
        pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) );
 80036dc:	693b      	ldr	r3, [r7, #16]
 80036de:	f023 0307 	bic.w	r3, r3, #7
 80036e2:	613b      	str	r3, [r7, #16]

        /* Check the alignment of the calculated top of stack is correct. */
        configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0U ) );
 80036e4:	693b      	ldr	r3, [r7, #16]
 80036e6:	f003 0307 	and.w	r3, r3, #7
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d004      	beq.n	80036f8 <prvInitialiseNewTask+0x4c>
 80036ee:	f240 712e 	movw	r1, #1838	@ 0x72e
 80036f2:	482f      	ldr	r0, [pc, #188]	@ (80037b0 <prvInitialiseNewTask+0x104>)
 80036f4:	f7fd febc 	bl	8001470 <vAssertCalled>
        pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( uxStackDepth - ( configSTACK_DEPTH_TYPE ) 1 );
    }
    #endif /* portSTACK_GROWTH */

    /* Store the task name in the TCB. */
    if( pcName != NULL )
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d01e      	beq.n	800373c <prvInitialiseNewTask+0x90>
    {
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036fe:	2300      	movs	r3, #0
 8003700:	617b      	str	r3, [r7, #20]
 8003702:	e012      	b.n	800372a <prvInitialiseNewTask+0x7e>
        {
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003704:	68ba      	ldr	r2, [r7, #8]
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	4413      	add	r3, r2
 800370a:	7819      	ldrb	r1, [r3, #0]
 800370c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800370e:	697b      	ldr	r3, [r7, #20]
 8003710:	4413      	add	r3, r2
 8003712:	3334      	adds	r3, #52	@ 0x34
 8003714:	460a      	mov	r2, r1
 8003716:	701a      	strb	r2, [r3, #0]

            /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
             * configMAX_TASK_NAME_LEN characters just in case the memory after the
             * string is not accessible (extremely unlikely). */
            if( pcName[ x ] == ( char ) 0x00 )
 8003718:	68ba      	ldr	r2, [r7, #8]
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	4413      	add	r3, r2
 800371e:	781b      	ldrb	r3, [r3, #0]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d006      	beq.n	8003732 <prvInitialiseNewTask+0x86>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003724:	697b      	ldr	r3, [r7, #20]
 8003726:	3301      	adds	r3, #1
 8003728:	617b      	str	r3, [r7, #20]
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	2b0f      	cmp	r3, #15
 800372e:	d9e9      	bls.n	8003704 <prvInitialiseNewTask+0x58>
 8003730:	e000      	b.n	8003734 <prvInitialiseNewTask+0x88>
            {
                break;
 8003732:	bf00      	nop
            }
        }

        /* Ensure the name string is terminated in the case that the string length
         * was greater or equal to configMAX_TASK_NAME_LEN. */
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1U ] = '\0';
 8003734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    {
        mtCOVERAGE_TEST_MARKER();
    }

    /* This is used as an array index so must ensure it's not too large. */
    configASSERT( uxPriority < configMAX_PRIORITIES );
 800373c:	6a3b      	ldr	r3, [r7, #32]
 800373e:	2b06      	cmp	r3, #6
 8003740:	d904      	bls.n	800374c <prvInitialiseNewTask+0xa0>
 8003742:	f240 7164 	movw	r1, #1892	@ 0x764
 8003746:	481a      	ldr	r0, [pc, #104]	@ (80037b0 <prvInitialiseNewTask+0x104>)
 8003748:	f7fd fe92 	bl	8001470 <vAssertCalled>

    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800374c:	6a3b      	ldr	r3, [r7, #32]
 800374e:	2b06      	cmp	r3, #6
 8003750:	d901      	bls.n	8003756 <prvInitialiseNewTask+0xaa>
    {
        uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003752:	2306      	movs	r3, #6
 8003754:	623b      	str	r3, [r7, #32]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxNewTCB->uxPriority = uxPriority;
 8003756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003758:	6a3a      	ldr	r2, [r7, #32]
 800375a:	62da      	str	r2, [r3, #44]	@ 0x2c
    #if ( configUSE_MUTEXES == 1 )
    {
        pxNewTCB->uxBasePriority = uxPriority;
 800375c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800375e:	6a3a      	ldr	r2, [r7, #32]
 8003760:	64da      	str	r2, [r3, #76]	@ 0x4c
    }
    #endif /* configUSE_MUTEXES */

    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003764:	3304      	adds	r3, #4
 8003766:	4618      	mov	r0, r3
 8003768:	f7ff f8c0 	bl	80028ec <vListInitialiseItem>
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800376c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800376e:	3318      	adds	r3, #24
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff f8bb 	bl	80028ec <vListInitialiseItem>

    /* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
     * back to  the containing TCB from a generic item in a list. */
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003778:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800377a:	611a      	str	r2, [r3, #16]

    /* Event lists are always in priority order. */
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority );
 800377c:	6a3b      	ldr	r3, [r7, #32]
 800377e:	f1c3 0207 	rsb	r2, r3, #7
 8003782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003784:	619a      	str	r2, [r3, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003786:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003788:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800378a:	625a      	str	r2, [r3, #36]	@ 0x24
            }
            #endif /* portSTACK_GROWTH */
        }
        #else /* portHAS_STACK_OVERFLOW_CHECKING */
        {
            pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800378c:	683a      	ldr	r2, [r7, #0]
 800378e:	68f9      	ldr	r1, [r7, #12]
 8003790:	6938      	ldr	r0, [r7, #16]
 8003792:	f001 fea5 	bl	80054e0 <pxPortInitialiseStack>
 8003796:	4602      	mov	r2, r0
 8003798:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800379a:	601a      	str	r2, [r3, #0]
            pxNewTCB->uxTaskAttributes |= taskATTRIBUTE_IS_IDLE;
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES > 1 ) */

    if( pxCreatedTask != NULL )
 800379c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <prvInitialiseNewTask+0xfc>
    {
        /* Pass the handle out in an anonymous way.  The handle can be used to
         * change the created task's priority, delete the created task, etc.*/
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80037a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80037a6:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 80037a8:	bf00      	nop
 80037aa:	3718      	adds	r7, #24
 80037ac:	46bd      	mov	sp, r7
 80037ae:	bd80      	pop	{r7, pc}
 80037b0:	08022ed8 	.word	0x08022ed8

080037b4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )

    static void prvAddNewTaskToReadyList( TCB_t * pxNewTCB )
    {
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
        /* Ensure interrupts don't access the task lists while the lists are being
         * updated. */
        taskENTER_CRITICAL();
 80037bc:	f001 ffc8 	bl	8005750 <vPortEnterCritical>
        {
            uxCurrentNumberOfTasks = ( UBaseType_t ) ( uxCurrentNumberOfTasks + 1U );
 80037c0:	4b41      	ldr	r3, [pc, #260]	@ (80038c8 <prvAddNewTaskToReadyList+0x114>)
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	3301      	adds	r3, #1
 80037c6:	4a40      	ldr	r2, [pc, #256]	@ (80038c8 <prvAddNewTaskToReadyList+0x114>)
 80037c8:	6013      	str	r3, [r2, #0]

            if( pxCurrentTCB == NULL )
 80037ca:	4b40      	ldr	r3, [pc, #256]	@ (80038cc <prvAddNewTaskToReadyList+0x118>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d109      	bne.n	80037e6 <prvAddNewTaskToReadyList+0x32>
            {
                /* There are no other tasks, or all the other tasks are in
                 * the suspended state - make this the current task. */
                pxCurrentTCB = pxNewTCB;
 80037d2:	4a3e      	ldr	r2, [pc, #248]	@ (80038cc <prvAddNewTaskToReadyList+0x118>)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6013      	str	r3, [r2, #0]

                if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80037d8:	4b3b      	ldr	r3, [pc, #236]	@ (80038c8 <prvAddNewTaskToReadyList+0x114>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d110      	bne.n	8003802 <prvAddNewTaskToReadyList+0x4e>
                {
                    /* This is the first task to be created so do the preliminary
                     * initialisation required.  We will not recover if this call
                     * fails, but we will report the failure. */
                    prvInitialiseTaskLists();
 80037e0:	f000 feac 	bl	800453c <prvInitialiseTaskLists>
 80037e4:	e00d      	b.n	8003802 <prvAddNewTaskToReadyList+0x4e>
            else
            {
                /* If the scheduler is not already running, make this task the
                 * current task if it is the highest priority task to be created
                 * so far. */
                if( xSchedulerRunning == pdFALSE )
 80037e6:	4b3a      	ldr	r3, [pc, #232]	@ (80038d0 <prvAddNewTaskToReadyList+0x11c>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d109      	bne.n	8003802 <prvAddNewTaskToReadyList+0x4e>
                {
                    if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ee:	4b37      	ldr	r3, [pc, #220]	@ (80038cc <prvAddNewTaskToReadyList+0x118>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d802      	bhi.n	8003802 <prvAddNewTaskToReadyList+0x4e>
                    {
                        pxCurrentTCB = pxNewTCB;
 80037fc:	4a33      	ldr	r2, [pc, #204]	@ (80038cc <prvAddNewTaskToReadyList+0x118>)
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6013      	str	r3, [r2, #0]
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }

            uxTaskNumber++;
 8003802:	4b34      	ldr	r3, [pc, #208]	@ (80038d4 <prvAddNewTaskToReadyList+0x120>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	3301      	adds	r3, #1
 8003808:	4a32      	ldr	r2, [pc, #200]	@ (80038d4 <prvAddNewTaskToReadyList+0x120>)
 800380a:	6013      	str	r3, [r2, #0]

            #if ( configUSE_TRACE_FACILITY == 1 )
            {
                /* Add a counter into the TCB for tracing only. */
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800380c:	4b31      	ldr	r3, [pc, #196]	@ (80038d4 <prvAddNewTaskToReadyList+0x120>)
 800380e:	681a      	ldr	r2, [r3, #0]
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	645a      	str	r2, [r3, #68]	@ 0x44
            }
            #endif /* configUSE_TRACE_FACILITY */
            traceTASK_CREATE( pxNewTCB );

            prvAddTaskToReadyList( pxNewTCB );
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003818:	2201      	movs	r2, #1
 800381a:	409a      	lsls	r2, r3
 800381c:	4b2e      	ldr	r3, [pc, #184]	@ (80038d8 <prvAddNewTaskToReadyList+0x124>)
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	4313      	orrs	r3, r2
 8003822:	4a2d      	ldr	r2, [pc, #180]	@ (80038d8 <prvAddNewTaskToReadyList+0x124>)
 8003824:	6013      	str	r3, [r2, #0]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800382a:	492c      	ldr	r1, [pc, #176]	@ (80038dc <prvAddNewTaskToReadyList+0x128>)
 800382c:	4613      	mov	r3, r2
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	4413      	add	r3, r2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	440b      	add	r3, r1
 8003836:	3304      	adds	r3, #4
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	60fb      	str	r3, [r7, #12]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	68fa      	ldr	r2, [r7, #12]
 8003840:	609a      	str	r2, [r3, #8]
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	689a      	ldr	r2, [r3, #8]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	60da      	str	r2, [r3, #12]
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	689b      	ldr	r3, [r3, #8]
 800384e:	687a      	ldr	r2, [r7, #4]
 8003850:	3204      	adds	r2, #4
 8003852:	605a      	str	r2, [r3, #4]
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	1d1a      	adds	r2, r3, #4
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	609a      	str	r2, [r3, #8]
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	009b      	lsls	r3, r3, #2
 8003868:	4a1c      	ldr	r2, [pc, #112]	@ (80038dc <prvAddNewTaskToReadyList+0x128>)
 800386a:	441a      	add	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	615a      	str	r2, [r3, #20]
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003874:	4919      	ldr	r1, [pc, #100]	@ (80038dc <prvAddNewTaskToReadyList+0x128>)
 8003876:	4613      	mov	r3, r2
 8003878:	009b      	lsls	r3, r3, #2
 800387a:	4413      	add	r3, r2
 800387c:	009b      	lsls	r3, r3, #2
 800387e:	440b      	add	r3, r1
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003886:	1c59      	adds	r1, r3, #1
 8003888:	4814      	ldr	r0, [pc, #80]	@ (80038dc <prvAddNewTaskToReadyList+0x128>)
 800388a:	4613      	mov	r3, r2
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	4413      	add	r3, r2
 8003890:	009b      	lsls	r3, r3, #2
 8003892:	4403      	add	r3, r0
 8003894:	6019      	str	r1, [r3, #0]

            portSETUP_TCB( pxNewTCB );
        }
        taskEXIT_CRITICAL();
 8003896:	f001 ff87 	bl	80057a8 <vPortExitCritical>

        if( xSchedulerRunning != pdFALSE )
 800389a:	4b0d      	ldr	r3, [pc, #52]	@ (80038d0 <prvAddNewTaskToReadyList+0x11c>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d00e      	beq.n	80038c0 <prvAddNewTaskToReadyList+0x10c>
        {
            /* If the created task is of a higher priority than the current task
             * then it should run now. */
            taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxNewTCB );
 80038a2:	4b0a      	ldr	r3, [pc, #40]	@ (80038cc <prvAddNewTaskToReadyList+0x118>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038ac:	429a      	cmp	r2, r3
 80038ae:	d207      	bcs.n	80038c0 <prvAddNewTaskToReadyList+0x10c>
 80038b0:	4b0b      	ldr	r3, [pc, #44]	@ (80038e0 <prvAddNewTaskToReadyList+0x12c>)
 80038b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	f3bf 8f4f 	dsb	sy
 80038bc:	f3bf 8f6f 	isb	sy
        }
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
 80038c0:	bf00      	nop
 80038c2:	3710      	adds	r7, #16
 80038c4:	46bd      	mov	sp, r7
 80038c6:	bd80      	pop	{r7, pc}
 80038c8:	20000c08 	.word	0x20000c08
 80038cc:	20000b08 	.word	0x20000b08
 80038d0:	20000c14 	.word	0x20000c14
 80038d4:	20000c24 	.word	0x20000c24
 80038d8:	20000c10 	.word	0x20000c10
 80038dc:	20000b0c 	.word	0x20000b0c
 80038e0:	e000ed04 	.word	0xe000ed04

080038e4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

    void vTaskDelay( const TickType_t xTicksToDelay )
    {
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
        BaseType_t xAlreadyYielded = pdFALSE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	60fb      	str	r3, [r7, #12]

        traceENTER_vTaskDelay( xTicksToDelay );

        /* A delay time of zero just forces a reschedule. */
        if( xTicksToDelay > ( TickType_t ) 0U )
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d011      	beq.n	800391a <vTaskDelay+0x36>
        {
            vTaskSuspendAll();
 80038f6:	f000 f8ad 	bl	8003a54 <vTaskSuspendAll>
            {
                configASSERT( uxSchedulerSuspended == 1U );
 80038fa:	4b0f      	ldr	r3, [pc, #60]	@ (8003938 <vTaskDelay+0x54>)
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d004      	beq.n	800390c <vTaskDelay+0x28>
 8003902:	f640 118e 	movw	r1, #2446	@ 0x98e
 8003906:	480d      	ldr	r0, [pc, #52]	@ (800393c <vTaskDelay+0x58>)
 8003908:	f7fd fdb2 	bl	8001470 <vAssertCalled>
                 * list or removed from the blocked list until the scheduler
                 * is resumed.
                 *
                 * This task cannot be in an event list as it is the currently
                 * executing task. */
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800390c:	2100      	movs	r1, #0
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f001 fd64 	bl	80053dc <prvAddCurrentTaskToDelayedList>
            }
            xAlreadyYielded = xTaskResumeAll();
 8003914:	f000 f8ac 	bl	8003a70 <xTaskResumeAll>
 8003918:	60f8      	str	r0, [r7, #12]
            mtCOVERAGE_TEST_MARKER();
        }

        /* Force a reschedule if xTaskResumeAll has not already done so, we may
         * have put ourselves to sleep. */
        if( xAlreadyYielded == pdFALSE )
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d107      	bne.n	8003930 <vTaskDelay+0x4c>
        {
            taskYIELD_WITHIN_API();
 8003920:	4b07      	ldr	r3, [pc, #28]	@ (8003940 <vTaskDelay+0x5c>)
 8003922:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003926:	601a      	str	r2, [r3, #0]
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	f3bf 8f6f 	isb	sy
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskDelay();
    }
 8003930:	bf00      	nop
 8003932:	3710      	adds	r7, #16
 8003934:	46bd      	mov	sp, r7
 8003936:	bd80      	pop	{r7, pc}
 8003938:	20000c30 	.word	0x20000c30
 800393c:	08022ed8 	.word	0x08022ed8
 8003940:	e000ed04 	.word	0xe000ed04

08003944 <prvCreateIdleTasks>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

static BaseType_t prvCreateIdleTasks( void )
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b08a      	sub	sp, #40	@ 0x28
 8003948:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdPASS;
 800394a:	2301      	movs	r3, #1
 800394c:	61fb      	str	r3, [r7, #28]
    BaseType_t xCoreID;
    char cIdleName[ configMAX_TASK_NAME_LEN ];
    TaskFunction_t pxIdleTaskFunction = NULL;
 800394e:	2300      	movs	r3, #0
 8003950:	613b      	str	r3, [r7, #16]
    BaseType_t xIdleTaskNameIndex;

    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003952:	2300      	movs	r3, #0
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e011      	b.n	800397c <prvCreateIdleTasks+0x38>
    {
        cIdleName[ xIdleTaskNameIndex ] = configIDLE_TASK_NAME[ xIdleTaskNameIndex ];
 8003958:	4a1d      	ldr	r2, [pc, #116]	@ (80039d0 <prvCreateIdleTasks+0x8c>)
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	4413      	add	r3, r2
 800395e:	7819      	ldrb	r1, [r3, #0]
 8003960:	463a      	mov	r2, r7
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	4413      	add	r3, r2
 8003966:	460a      	mov	r2, r1
 8003968:	701a      	strb	r2, [r3, #0]

        /* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
         * configMAX_TASK_NAME_LEN characters just in case the memory after the
         * string is not accessible (extremely unlikely). */
        if( cIdleName[ xIdleTaskNameIndex ] == ( char ) 0x00 )
 800396a:	463a      	mov	r2, r7
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	4413      	add	r3, r2
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	2b00      	cmp	r3, #0
 8003974:	d006      	beq.n	8003984 <prvCreateIdleTasks+0x40>
    for( xIdleTaskNameIndex = ( BaseType_t ) 0; xIdleTaskNameIndex < ( BaseType_t ) configMAX_TASK_NAME_LEN; xIdleTaskNameIndex++ )
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	3301      	adds	r3, #1
 800397a:	617b      	str	r3, [r7, #20]
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	2b0f      	cmp	r3, #15
 8003980:	ddea      	ble.n	8003958 <prvCreateIdleTasks+0x14>
 8003982:	e000      	b.n	8003986 <prvCreateIdleTasks+0x42>
        {
            break;
 8003984:	bf00      	nop
            mtCOVERAGE_TEST_MARKER();
        }
    }

    /* Add each idle task at the lowest priority. */
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 8003986:	2300      	movs	r3, #0
 8003988:	61bb      	str	r3, [r7, #24]
 800398a:	e016      	b.n	80039ba <prvCreateIdleTasks+0x76>
    {
        #if ( configNUMBER_OF_CORES == 1 )
        {
            pxIdleTaskFunction = prvIdleTask;
 800398c:	4b11      	ldr	r3, [pc, #68]	@ (80039d4 <prvCreateIdleTasks+0x90>)
 800398e:	613b      	str	r3, [r7, #16]
            }
        }
        #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
        {
            /* The Idle task is being created using dynamically allocated RAM. */
            xReturn = xTaskCreate( pxIdleTaskFunction,
 8003990:	69bb      	ldr	r3, [r7, #24]
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	4a10      	ldr	r2, [pc, #64]	@ (80039d8 <prvCreateIdleTasks+0x94>)
 8003996:	4413      	add	r3, r2
 8003998:	4639      	mov	r1, r7
 800399a:	9301      	str	r3, [sp, #4]
 800399c:	2300      	movs	r3, #0
 800399e:	9300      	str	r3, [sp, #0]
 80039a0:	2300      	movs	r3, #0
 80039a2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80039a6:	6938      	ldr	r0, [r7, #16]
 80039a8:	f7ff fe5c 	bl	8003664 <xTaskCreate>
 80039ac:	61f8      	str	r0, [r7, #28]
                                   &xIdleTaskHandles[ xCoreID ] );
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        /* Break the loop if any of the idle task is failed to be created. */
        if( xReturn == pdFAIL )
 80039ae:	69fb      	ldr	r3, [r7, #28]
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d006      	beq.n	80039c2 <prvCreateIdleTasks+0x7e>
    for( xCoreID = ( BaseType_t ) 0; xCoreID < ( BaseType_t ) configNUMBER_OF_CORES; xCoreID++ )
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	3301      	adds	r3, #1
 80039b8:	61bb      	str	r3, [r7, #24]
 80039ba:	69bb      	ldr	r3, [r7, #24]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	dde5      	ble.n	800398c <prvCreateIdleTasks+0x48>
 80039c0:	e000      	b.n	80039c4 <prvCreateIdleTasks+0x80>
        {
            break;
 80039c2:	bf00      	nop
            }
            #endif
        }
    }

    return xReturn;
 80039c4:	69fb      	ldr	r3, [r7, #28]
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3720      	adds	r7, #32
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}
 80039ce:	bf00      	nop
 80039d0:	08022efc 	.word	0x08022efc
 80039d4:	0800450d 	.word	0x0800450d
 80039d8:	20000c2c 	.word	0x20000c2c

080039dc <vTaskStartScheduler>:

/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b082      	sub	sp, #8
 80039e0:	af00      	add	r7, sp, #0
         * the number of bits as confNUMBER_OF_CORES. */
        configASSERT( ( sizeof( UBaseType_t ) * taskBITS_PER_BYTE ) >= configNUMBER_OF_CORES );
    }
    #endif /* #if ( configUSE_CORE_AFFINITY == 1 ) && ( configNUMBER_OF_CORES > 1 ) */

    xReturn = prvCreateIdleTasks();
 80039e2:	f7ff ffaf 	bl	8003944 <prvCreateIdleTasks>
 80039e6:	6078      	str	r0, [r7, #4]
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* configUSE_TIMERS */

    if( xReturn == pdPASS )
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d118      	bne.n	8003a20 <vTaskStartScheduler+0x44>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
    uint32_t ulNewBASEPRI;

    __asm volatile
 80039ee:	f04f 0340 	mov.w	r3, #64	@ 0x40
 80039f2:	b672      	cpsid	i
 80039f4:	f383 8811 	msr	BASEPRI, r3
 80039f8:	f3bf 8f6f 	isb	sy
 80039fc:	f3bf 8f4f 	dsb	sy
 8003a00:	b662      	cpsie	i
 8003a02:	603b      	str	r3, [r7, #0]
        "   isb                                                     \n" \
        "   dsb                                                     \n" \
        "   cpsie i                                                 \n" \
        : "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );
}
 8003a04:	bf00      	nop
             * block specific to the task that will run first. */
            configSET_TLS_BLOCK( pxCurrentTCB->xTLSBlock );
        }
        #endif

        xNextTaskUnblockTime = portMAX_DELAY;
 8003a06:	4b0e      	ldr	r3, [pc, #56]	@ (8003a40 <vTaskStartScheduler+0x64>)
 8003a08:	f04f 32ff 	mov.w	r2, #4294967295
 8003a0c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003a44 <vTaskStartScheduler+0x68>)
 8003a10:	2201      	movs	r2, #1
 8003a12:	601a      	str	r2, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003a14:	4b0c      	ldr	r3, [pc, #48]	@ (8003a48 <vTaskStartScheduler+0x6c>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	601a      	str	r2, [r3, #0]
        /* Setting up the timer tick is hardware specific and thus in the
         * portable interface. */

        /* The return value for xPortStartScheduler is not required
         * hence using a void datatype. */
        ( void ) xPortStartScheduler();
 8003a1a:	f001 fdeb 	bl	80055f4 <xPortStartScheduler>
 8003a1e:	e008      	b.n	8003a32 <vTaskStartScheduler+0x56>
    else
    {
        /* This line will only be reached if the kernel could not be started,
         * because there was not enough FreeRTOS heap to create the idle task
         * or the timer task. */
        configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d104      	bne.n	8003a32 <vTaskStartScheduler+0x56>
 8003a28:	f640 61a9 	movw	r1, #3753	@ 0xea9
 8003a2c:	4807      	ldr	r0, [pc, #28]	@ (8003a4c <vTaskStartScheduler+0x70>)
 8003a2e:	f7fd fd1f 	bl	8001470 <vAssertCalled>
     * meaning xIdleTaskHandles are not used anywhere else. */
    ( void ) xIdleTaskHandles;

    /* OpenOCD makes use of uxTopUsedPriority for thread debugging. Prevent uxTopUsedPriority
     * from getting optimized out as it is no longer used by the kernel. */
    ( void ) uxTopUsedPriority;
 8003a32:	4b07      	ldr	r3, [pc, #28]	@ (8003a50 <vTaskStartScheduler+0x74>)
 8003a34:	681b      	ldr	r3, [r3, #0]

    traceRETURN_vTaskStartScheduler();
}
 8003a36:	bf00      	nop
 8003a38:	3708      	adds	r7, #8
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}
 8003a3e:	bf00      	nop
 8003a40:	20000c28 	.word	0x20000c28
 8003a44:	20000c14 	.word	0x20000c14
 8003a48:	20000c0c 	.word	0x20000c0c
 8003a4c:	08022ed8 	.word	0x08022ed8
 8003a50:	20000008 	.word	0x20000008

08003a54 <vTaskSuspendAll>:
    traceRETURN_vTaskEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
         * do not otherwise exhibit real time behaviour. */
        portSOFTWARE_BARRIER();

        /* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
         * is used to allow calls to vTaskSuspendAll() to nest. */
        uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended + 1U );
 8003a58:	4b04      	ldr	r3, [pc, #16]	@ (8003a6c <vTaskSuspendAll+0x18>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	3301      	adds	r3, #1
 8003a5e:	4a03      	ldr	r2, [pc, #12]	@ (8003a6c <vTaskSuspendAll+0x18>)
 8003a60:	6013      	str	r3, [r2, #0]
        }
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskSuspendAll();
}
 8003a62:	bf00      	nop
 8003a64:	46bd      	mov	sp, r7
 8003a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6a:	4770      	bx	lr
 8003a6c:	20000c30 	.word	0x20000c30

08003a70 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b088      	sub	sp, #32
 8003a74:	af00      	add	r7, sp, #0
    TCB_t * pxTCB = NULL;
 8003a76:	2300      	movs	r3, #0
 8003a78:	61fb      	str	r3, [r7, #28]
    BaseType_t xAlreadyYielded = pdFALSE;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61bb      	str	r3, [r7, #24]
        /* It is possible that an ISR caused a task to be removed from an event
         * list while the scheduler was suspended.  If this was the case then the
         * removed task will have been added to the xPendingReadyList.  Once the
         * scheduler has been resumed it is safe to move all the pending ready
         * tasks from this list into their appropriate ready list. */
        taskENTER_CRITICAL();
 8003a7e:	f001 fe67 	bl	8005750 <vPortEnterCritical>
        {
            BaseType_t xCoreID;
            xCoreID = ( BaseType_t ) portGET_CORE_ID();
 8003a82:	2300      	movs	r3, #0
 8003a84:	613b      	str	r3, [r7, #16]

            /* If uxSchedulerSuspended is zero then this function does not match a
             * previous call to vTaskSuspendAll(). */
            configASSERT( uxSchedulerSuspended != 0U );
 8003a86:	4b72      	ldr	r3, [pc, #456]	@ (8003c50 <xTaskResumeAll+0x1e0>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d104      	bne.n	8003a98 <xTaskResumeAll+0x28>
 8003a8e:	f640 718b 	movw	r1, #3979	@ 0xf8b
 8003a92:	4870      	ldr	r0, [pc, #448]	@ (8003c54 <xTaskResumeAll+0x1e4>)
 8003a94:	f7fd fcec 	bl	8001470 <vAssertCalled>

            uxSchedulerSuspended = ( UBaseType_t ) ( uxSchedulerSuspended - 1U );
 8003a98:	4b6d      	ldr	r3, [pc, #436]	@ (8003c50 <xTaskResumeAll+0x1e0>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	3b01      	subs	r3, #1
 8003a9e:	4a6c      	ldr	r2, [pc, #432]	@ (8003c50 <xTaskResumeAll+0x1e0>)
 8003aa0:	6013      	str	r3, [r2, #0]
            portRELEASE_TASK_LOCK();

            if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003aa2:	4b6b      	ldr	r3, [pc, #428]	@ (8003c50 <xTaskResumeAll+0x1e0>)
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	f040 80ca 	bne.w	8003c40 <xTaskResumeAll+0x1d0>
            {
                if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003aac:	4b6a      	ldr	r3, [pc, #424]	@ (8003c58 <xTaskResumeAll+0x1e8>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 80c5 	beq.w	8003c40 <xTaskResumeAll+0x1d0>
                {
                    /* Move any readied tasks from the pending list into the
                     * appropriate ready list. */
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ab6:	e08e      	b.n	8003bd6 <xTaskResumeAll+0x166>
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 8003ab8:	4b68      	ldr	r3, [pc, #416]	@ (8003c5c <xTaskResumeAll+0x1ec>)
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	68db      	ldr	r3, [r3, #12]
 8003abe:	61fb      	str	r3, [r7, #28]
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003ac0:	69fb      	ldr	r3, [r7, #28]
 8003ac2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ac4:	60fb      	str	r3, [r7, #12]
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	69db      	ldr	r3, [r3, #28]
 8003aca:	69fa      	ldr	r2, [r7, #28]
 8003acc:	6a12      	ldr	r2, [r2, #32]
 8003ace:	609a      	str	r2, [r3, #8]
 8003ad0:	69fb      	ldr	r3, [r7, #28]
 8003ad2:	6a1b      	ldr	r3, [r3, #32]
 8003ad4:	69fa      	ldr	r2, [r7, #28]
 8003ad6:	69d2      	ldr	r2, [r2, #28]
 8003ad8:	605a      	str	r2, [r3, #4]
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	685a      	ldr	r2, [r3, #4]
 8003ade:	69fb      	ldr	r3, [r7, #28]
 8003ae0:	3318      	adds	r3, #24
 8003ae2:	429a      	cmp	r2, r3
 8003ae4:	d103      	bne.n	8003aee <xTaskResumeAll+0x7e>
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	6a1a      	ldr	r2, [r3, #32]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	69fb      	ldr	r3, [r7, #28]
 8003af0:	2200      	movs	r2, #0
 8003af2:	629a      	str	r2, [r3, #40]	@ 0x28
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	1e5a      	subs	r2, r3, #1
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	601a      	str	r2, [r3, #0]
                        portMEMORY_BARRIER();
                        listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003afe:	69fb      	ldr	r3, [r7, #28]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	60bb      	str	r3, [r7, #8]
 8003b04:	69fb      	ldr	r3, [r7, #28]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	69fa      	ldr	r2, [r7, #28]
 8003b0a:	68d2      	ldr	r2, [r2, #12]
 8003b0c:	609a      	str	r2, [r3, #8]
 8003b0e:	69fb      	ldr	r3, [r7, #28]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	69fa      	ldr	r2, [r7, #28]
 8003b14:	6892      	ldr	r2, [r2, #8]
 8003b16:	605a      	str	r2, [r3, #4]
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	685a      	ldr	r2, [r3, #4]
 8003b1c:	69fb      	ldr	r3, [r7, #28]
 8003b1e:	3304      	adds	r3, #4
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d103      	bne.n	8003b2c <xTaskResumeAll+0xbc>
 8003b24:	69fb      	ldr	r3, [r7, #28]
 8003b26:	68da      	ldr	r2, [r3, #12]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	605a      	str	r2, [r3, #4]
 8003b2c:	69fb      	ldr	r3, [r7, #28]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	615a      	str	r2, [r3, #20]
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	1e5a      	subs	r2, r3, #1
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	601a      	str	r2, [r3, #0]
                        prvAddTaskToReadyList( pxTCB );
 8003b3c:	69fb      	ldr	r3, [r7, #28]
 8003b3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b40:	2201      	movs	r2, #1
 8003b42:	409a      	lsls	r2, r3
 8003b44:	4b46      	ldr	r3, [pc, #280]	@ (8003c60 <xTaskResumeAll+0x1f0>)
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	4313      	orrs	r3, r2
 8003b4a:	4a45      	ldr	r2, [pc, #276]	@ (8003c60 <xTaskResumeAll+0x1f0>)
 8003b4c:	6013      	str	r3, [r2, #0]
 8003b4e:	69fb      	ldr	r3, [r7, #28]
 8003b50:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b52:	4944      	ldr	r1, [pc, #272]	@ (8003c64 <xTaskResumeAll+0x1f4>)
 8003b54:	4613      	mov	r3, r2
 8003b56:	009b      	lsls	r3, r3, #2
 8003b58:	4413      	add	r3, r2
 8003b5a:	009b      	lsls	r3, r3, #2
 8003b5c:	440b      	add	r3, r1
 8003b5e:	3304      	adds	r3, #4
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	607b      	str	r3, [r7, #4]
 8003b64:	69fb      	ldr	r3, [r7, #28]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	609a      	str	r2, [r3, #8]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	689a      	ldr	r2, [r3, #8]
 8003b6e:	69fb      	ldr	r3, [r7, #28]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	689b      	ldr	r3, [r3, #8]
 8003b76:	69fa      	ldr	r2, [r7, #28]
 8003b78:	3204      	adds	r2, #4
 8003b7a:	605a      	str	r2, [r3, #4]
 8003b7c:	69fb      	ldr	r3, [r7, #28]
 8003b7e:	1d1a      	adds	r2, r3, #4
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	609a      	str	r2, [r3, #8]
 8003b84:	69fb      	ldr	r3, [r7, #28]
 8003b86:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b88:	4613      	mov	r3, r2
 8003b8a:	009b      	lsls	r3, r3, #2
 8003b8c:	4413      	add	r3, r2
 8003b8e:	009b      	lsls	r3, r3, #2
 8003b90:	4a34      	ldr	r2, [pc, #208]	@ (8003c64 <xTaskResumeAll+0x1f4>)
 8003b92:	441a      	add	r2, r3
 8003b94:	69fb      	ldr	r3, [r7, #28]
 8003b96:	615a      	str	r2, [r3, #20]
 8003b98:	69fb      	ldr	r3, [r7, #28]
 8003b9a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003b9c:	4931      	ldr	r1, [pc, #196]	@ (8003c64 <xTaskResumeAll+0x1f4>)
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	4413      	add	r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	440b      	add	r3, r1
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69fa      	ldr	r2, [r7, #28]
 8003bac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003bae:	1c59      	adds	r1, r3, #1
 8003bb0:	482c      	ldr	r0, [pc, #176]	@ (8003c64 <xTaskResumeAll+0x1f4>)
 8003bb2:	4613      	mov	r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	4413      	add	r3, r2
 8003bb8:	009b      	lsls	r3, r3, #2
 8003bba:	4403      	add	r3, r0
 8003bbc:	6019      	str	r1, [r3, #0]

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            /* If the moved task has a priority higher than the current
                             * task then a yield must be performed. */
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003bbe:	69fb      	ldr	r3, [r7, #28]
 8003bc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003bc2:	4b29      	ldr	r3, [pc, #164]	@ (8003c68 <xTaskResumeAll+0x1f8>)
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	d904      	bls.n	8003bd6 <xTaskResumeAll+0x166>
                            {
                                xYieldPendings[ xCoreID ] = pdTRUE;
 8003bcc:	4a27      	ldr	r2, [pc, #156]	@ (8003c6c <xTaskResumeAll+0x1fc>)
 8003bce:	693b      	ldr	r3, [r7, #16]
 8003bd0:	2101      	movs	r1, #1
 8003bd2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                    while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003bd6:	4b21      	ldr	r3, [pc, #132]	@ (8003c5c <xTaskResumeAll+0x1ec>)
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	f47f af6c 	bne.w	8003ab8 <xTaskResumeAll+0x48>
                             * which sets xYieldPendings for the current core to pdTRUE. */
                        }
                        #endif /* #if ( configNUMBER_OF_CORES == 1 ) */
                    }

                    if( pxTCB != NULL )
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d001      	beq.n	8003bea <xTaskResumeAll+0x17a>
                         * which may have prevented the next unblock time from being
                         * re-calculated, in which case re-calculate it now.  Mainly
                         * important for low power tickless implementations, where
                         * this can prevent an unnecessary exit from low power
                         * state. */
                        prvResetNextTaskUnblockTime();
 8003be6:	f000 fd27 	bl	8004638 <prvResetNextTaskUnblockTime>
                     * It should be safe to call xTaskIncrementTick here from any core
                     * since we are in a critical section and xTaskIncrementTick itself
                     * protects itself within a critical section. Suspending the scheduler
                     * from any core causes xTaskIncrementTick to increment uxPendedCounts. */
                    {
                        TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003bea:	4b21      	ldr	r3, [pc, #132]	@ (8003c70 <xTaskResumeAll+0x200>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	617b      	str	r3, [r7, #20]

                        if( xPendedCounts > ( TickType_t ) 0U )
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d012      	beq.n	8003c1c <xTaskResumeAll+0x1ac>
                        {
                            do
                            {
                                if( xTaskIncrementTick() != pdFALSE )
 8003bf6:	f000 f86d 	bl	8003cd4 <xTaskIncrementTick>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d004      	beq.n	8003c0a <xTaskResumeAll+0x19a>
                                {
                                    /* Other cores are interrupted from
                                     * within xTaskIncrementTick(). */
                                    xYieldPendings[ xCoreID ] = pdTRUE;
 8003c00:	4a1a      	ldr	r2, [pc, #104]	@ (8003c6c <xTaskResumeAll+0x1fc>)
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	2101      	movs	r1, #1
 8003c06:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
                                else
                                {
                                    mtCOVERAGE_TEST_MARKER();
                                }

                                --xPendedCounts;
 8003c0a:	697b      	ldr	r3, [r7, #20]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	617b      	str	r3, [r7, #20]
                            } while( xPendedCounts > ( TickType_t ) 0U );
 8003c10:	697b      	ldr	r3, [r7, #20]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d1ef      	bne.n	8003bf6 <xTaskResumeAll+0x186>

                            xPendedTicks = 0;
 8003c16:	4b16      	ldr	r3, [pc, #88]	@ (8003c70 <xTaskResumeAll+0x200>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }
                    }

                    if( xYieldPendings[ xCoreID ] != pdFALSE )
 8003c1c:	4a13      	ldr	r2, [pc, #76]	@ (8003c6c <xTaskResumeAll+0x1fc>)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d00b      	beq.n	8003c40 <xTaskResumeAll+0x1d0>
                    {
                        #if ( configUSE_PREEMPTION != 0 )
                        {
                            xAlreadyYielded = pdTRUE;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	61bb      	str	r3, [r7, #24]
                        }
                        #endif /* #if ( configUSE_PREEMPTION != 0 ) */

                        #if ( configNUMBER_OF_CORES == 1 )
                        {
                            taskYIELD_TASK_CORE_IF_USING_PREEMPTION( pxCurrentTCB );
 8003c2c:	4b0e      	ldr	r3, [pc, #56]	@ (8003c68 <xTaskResumeAll+0x1f8>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4b10      	ldr	r3, [pc, #64]	@ (8003c74 <xTaskResumeAll+0x204>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8003c40:	f001 fdb2 	bl	80057a8 <vPortExitCritical>
    }

    traceRETURN_xTaskResumeAll( xAlreadyYielded );

    return xAlreadyYielded;
 8003c44:	69bb      	ldr	r3, [r7, #24]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3720      	adds	r7, #32
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000c30 	.word	0x20000c30
 8003c54:	08022ed8 	.word	0x08022ed8
 8003c58:	20000c08 	.word	0x20000c08
 8003c5c:	20000bc8 	.word	0x20000bc8
 8003c60:	20000c10 	.word	0x20000c10
 8003c64:	20000b0c 	.word	0x20000b0c
 8003c68:	20000b08 	.word	0x20000b08
 8003c6c:	20000c1c 	.word	0x20000c1c
 8003c70:	20000c18 	.word	0x20000c18
 8003c74:	e000ed04 	.word	0xe000ed04

08003c78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b083      	sub	sp, #12
 8003c7c:	af00      	add	r7, sp, #0
    traceENTER_xTaskGetTickCount();

    /* Critical section required if running on a 16 bit processor. */
    portTICK_TYPE_ENTER_CRITICAL();
    {
        xTicks = xTickCount;
 8003c7e:	4b05      	ldr	r3, [pc, #20]	@ (8003c94 <xTaskGetTickCount+0x1c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	607b      	str	r3, [r7, #4]
    }
    portTICK_TYPE_EXIT_CRITICAL();

    traceRETURN_xTaskGetTickCount( xTicks );

    return xTicks;
 8003c84:	687b      	ldr	r3, [r7, #4]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	370c      	adds	r7, #12
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c90:	4770      	bx	lr
 8003c92:	bf00      	nop
 8003c94:	20000c0c 	.word	0x20000c0c

08003c98 <pcTaskGetName>:
    return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char * pcTaskGetName( TaskHandle_t xTaskToQuery )
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b084      	sub	sp, #16
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]

    traceENTER_pcTaskGetName( xTaskToQuery );

    /* If null is passed in here then the name of the calling task is being
     * queried. */
    pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2b00      	cmp	r3, #0
 8003ca4:	d102      	bne.n	8003cac <pcTaskGetName+0x14>
 8003ca6:	4b09      	ldr	r3, [pc, #36]	@ (8003ccc <pcTaskGetName+0x34>)
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	e000      	b.n	8003cae <pcTaskGetName+0x16>
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	60fb      	str	r3, [r7, #12]
    configASSERT( pxTCB );
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	d104      	bne.n	8003cc0 <pcTaskGetName+0x28>
 8003cb6:	f241 0155 	movw	r1, #4181	@ 0x1055
 8003cba:	4805      	ldr	r0, [pc, #20]	@ (8003cd0 <pcTaskGetName+0x38>)
 8003cbc:	f7fd fbd8 	bl	8001470 <vAssertCalled>

    traceRETURN_pcTaskGetName( &( pxTCB->pcTaskName[ 0 ] ) );

    return &( pxTCB->pcTaskName[ 0 ] );
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	3334      	adds	r3, #52	@ 0x34
}
 8003cc4:	4618      	mov	r0, r3
 8003cc6:	3710      	adds	r7, #16
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	bd80      	pop	{r7, pc}
 8003ccc:	20000b08 	.word	0x20000b08
 8003cd0:	08022ed8 	.word	0x08022ed8

08003cd4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b088      	sub	sp, #32
 8003cd8:	af00      	add	r7, sp, #0
    TCB_t * pxTCB;
    TickType_t xItemValue;
    BaseType_t xSwitchRequired = pdFALSE;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]

    /* Tick increment should occur on every kernel timer event. Core 0 has the
     * responsibility to increment the tick, or increment the pended ticks if the
     * scheduler is suspended.  If pended ticks is greater than zero, the core that
     * calls xTaskResumeAll has the responsibility to increment the tick. */
    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8003cde:	4b7b      	ldr	r3, [pc, #492]	@ (8003ecc <xTaskIncrementTick+0x1f8>)
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	f040 80e8 	bne.w	8003eb8 <xTaskIncrementTick+0x1e4>
    {
        /* Minor optimisation.  The tick count cannot change in this
         * block. */
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003ce8:	4b79      	ldr	r3, [pc, #484]	@ (8003ed0 <xTaskIncrementTick+0x1fc>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	3301      	adds	r3, #1
 8003cee:	61bb      	str	r3, [r7, #24]

        /* Increment the RTOS tick, switching the delayed and overflowed
         * delayed lists if it wraps to 0. */
        xTickCount = xConstTickCount;
 8003cf0:	4a77      	ldr	r2, [pc, #476]	@ (8003ed0 <xTaskIncrementTick+0x1fc>)
 8003cf2:	69bb      	ldr	r3, [r7, #24]
 8003cf4:	6013      	str	r3, [r2, #0]

        if( xConstTickCount == ( TickType_t ) 0U )
 8003cf6:	69bb      	ldr	r3, [r7, #24]
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d11a      	bne.n	8003d32 <xTaskIncrementTick+0x5e>
        {
            taskSWITCH_DELAYED_LISTS();
 8003cfc:	4b75      	ldr	r3, [pc, #468]	@ (8003ed4 <xTaskIncrementTick+0x200>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d004      	beq.n	8003d10 <xTaskIncrementTick+0x3c>
 8003d06:	f241 215f 	movw	r1, #4703	@ 0x125f
 8003d0a:	4873      	ldr	r0, [pc, #460]	@ (8003ed8 <xTaskIncrementTick+0x204>)
 8003d0c:	f7fd fbb0 	bl	8001470 <vAssertCalled>
 8003d10:	4b70      	ldr	r3, [pc, #448]	@ (8003ed4 <xTaskIncrementTick+0x200>)
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	617b      	str	r3, [r7, #20]
 8003d16:	4b71      	ldr	r3, [pc, #452]	@ (8003edc <xTaskIncrementTick+0x208>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	4a6e      	ldr	r2, [pc, #440]	@ (8003ed4 <xTaskIncrementTick+0x200>)
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	4a6f      	ldr	r2, [pc, #444]	@ (8003edc <xTaskIncrementTick+0x208>)
 8003d20:	697b      	ldr	r3, [r7, #20]
 8003d22:	6013      	str	r3, [r2, #0]
 8003d24:	4b6e      	ldr	r3, [pc, #440]	@ (8003ee0 <xTaskIncrementTick+0x20c>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	3301      	adds	r3, #1
 8003d2a:	4a6d      	ldr	r2, [pc, #436]	@ (8003ee0 <xTaskIncrementTick+0x20c>)
 8003d2c:	6013      	str	r3, [r2, #0]
 8003d2e:	f000 fc83 	bl	8004638 <prvResetNextTaskUnblockTime>

        /* See if this tick has made a timeout expire.  Tasks are stored in
         * the  queue in the order of their wake time - meaning once one task
         * has been found whose block time has not expired there is no need to
         * look any further down the list. */
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003d32:	4b6c      	ldr	r3, [pc, #432]	@ (8003ee4 <xTaskIncrementTick+0x210>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	69ba      	ldr	r2, [r7, #24]
 8003d38:	429a      	cmp	r2, r3
 8003d3a:	f0c0 80a8 	bcc.w	8003e8e <xTaskIncrementTick+0x1ba>
        {
            for( ; ; )
            {
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d3e:	4b65      	ldr	r3, [pc, #404]	@ (8003ed4 <xTaskIncrementTick+0x200>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d104      	bne.n	8003d52 <xTaskIncrementTick+0x7e>
                    /* The delayed list is empty.  Set xNextTaskUnblockTime
                     * to the maximum possible value so it is extremely
                     * unlikely that the
                     * if( xTickCount >= xNextTaskUnblockTime ) test will pass
                     * next time through. */
                    xNextTaskUnblockTime = portMAX_DELAY;
 8003d48:	4b66      	ldr	r3, [pc, #408]	@ (8003ee4 <xTaskIncrementTick+0x210>)
 8003d4a:	f04f 32ff 	mov.w	r2, #4294967295
 8003d4e:	601a      	str	r2, [r3, #0]
                    break;
 8003d50:	e09d      	b.n	8003e8e <xTaskIncrementTick+0x1ba>
                     * at which the task at the head of the delayed list must
                     * be removed from the Blocked state. */
                    /* MISRA Ref 11.5.3 [Void pointer assignment] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                    /* coverity[misra_c_2012_rule_11_5_violation] */
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003d52:	4b60      	ldr	r3, [pc, #384]	@ (8003ed4 <xTaskIncrementTick+0x200>)
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	68db      	ldr	r3, [r3, #12]
 8003d5a:	613b      	str	r3, [r7, #16]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	60fb      	str	r3, [r7, #12]

                    if( xConstTickCount < xItemValue )
 8003d62:	69ba      	ldr	r2, [r7, #24]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	429a      	cmp	r2, r3
 8003d68:	d203      	bcs.n	8003d72 <xTaskIncrementTick+0x9e>
                        /* It is not time to unblock this item yet, but the
                         * item value is the time at which the task at the head
                         * of the blocked list must be removed from the Blocked
                         * state -  so record the item value in
                         * xNextTaskUnblockTime. */
                        xNextTaskUnblockTime = xItemValue;
 8003d6a:	4a5e      	ldr	r2, [pc, #376]	@ (8003ee4 <xTaskIncrementTick+0x210>)
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6013      	str	r3, [r2, #0]
                        break;
 8003d70:	e08d      	b.n	8003e8e <xTaskIncrementTick+0x1ba>
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* It is time to remove the item from the Blocked state. */
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	695b      	ldr	r3, [r3, #20]
 8003d76:	60bb      	str	r3, [r7, #8]
 8003d78:	693b      	ldr	r3, [r7, #16]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	68d2      	ldr	r2, [r2, #12]
 8003d80:	609a      	str	r2, [r3, #8]
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	68db      	ldr	r3, [r3, #12]
 8003d86:	693a      	ldr	r2, [r7, #16]
 8003d88:	6892      	ldr	r2, [r2, #8]
 8003d8a:	605a      	str	r2, [r3, #4]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	685a      	ldr	r2, [r3, #4]
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	3304      	adds	r3, #4
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d103      	bne.n	8003da0 <xTaskIncrementTick+0xcc>
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	68da      	ldr	r2, [r3, #12]
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	605a      	str	r2, [r3, #4]
 8003da0:	693b      	ldr	r3, [r7, #16]
 8003da2:	2200      	movs	r2, #0
 8003da4:	615a      	str	r2, [r3, #20]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	1e5a      	subs	r2, r3, #1
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	601a      	str	r2, [r3, #0]

                    /* Is the task waiting on an event also?  If so remove
                     * it from the event list. */
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003db0:	693b      	ldr	r3, [r7, #16]
 8003db2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d01e      	beq.n	8003df6 <xTaskIncrementTick+0x122>
                    {
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	693b      	ldr	r3, [r7, #16]
 8003dc0:	69db      	ldr	r3, [r3, #28]
 8003dc2:	693a      	ldr	r2, [r7, #16]
 8003dc4:	6a12      	ldr	r2, [r2, #32]
 8003dc6:	609a      	str	r2, [r3, #8]
 8003dc8:	693b      	ldr	r3, [r7, #16]
 8003dca:	6a1b      	ldr	r3, [r3, #32]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	69d2      	ldr	r2, [r2, #28]
 8003dd0:	605a      	str	r2, [r3, #4]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	685a      	ldr	r2, [r3, #4]
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	3318      	adds	r3, #24
 8003dda:	429a      	cmp	r2, r3
 8003ddc:	d103      	bne.n	8003de6 <xTaskIncrementTick+0x112>
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	6a1a      	ldr	r2, [r3, #32]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	605a      	str	r2, [r3, #4]
 8003de6:	693b      	ldr	r3, [r7, #16]
 8003de8:	2200      	movs	r2, #0
 8003dea:	629a      	str	r2, [r3, #40]	@ 0x28
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	1e5a      	subs	r2, r3, #1
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	601a      	str	r2, [r3, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Place the unblocked task into the appropriate ready
                     * list. */
                    prvAddTaskToReadyList( pxTCB );
 8003df6:	693b      	ldr	r3, [r7, #16]
 8003df8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	409a      	lsls	r2, r3
 8003dfe:	4b3a      	ldr	r3, [pc, #232]	@ (8003ee8 <xTaskIncrementTick+0x214>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4313      	orrs	r3, r2
 8003e04:	4a38      	ldr	r2, [pc, #224]	@ (8003ee8 <xTaskIncrementTick+0x214>)
 8003e06:	6013      	str	r3, [r2, #0]
 8003e08:	693b      	ldr	r3, [r7, #16]
 8003e0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e0c:	4937      	ldr	r1, [pc, #220]	@ (8003eec <xTaskIncrementTick+0x218>)
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	3304      	adds	r3, #4
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	603b      	str	r3, [r7, #0]
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	609a      	str	r2, [r3, #8]
 8003e24:	683b      	ldr	r3, [r7, #0]
 8003e26:	689a      	ldr	r2, [r3, #8]
 8003e28:	693b      	ldr	r3, [r7, #16]
 8003e2a:	60da      	str	r2, [r3, #12]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	693a      	ldr	r2, [r7, #16]
 8003e32:	3204      	adds	r2, #4
 8003e34:	605a      	str	r2, [r3, #4]
 8003e36:	693b      	ldr	r3, [r7, #16]
 8003e38:	1d1a      	adds	r2, r3, #4
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	609a      	str	r2, [r3, #8]
 8003e3e:	693b      	ldr	r3, [r7, #16]
 8003e40:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e42:	4613      	mov	r3, r2
 8003e44:	009b      	lsls	r3, r3, #2
 8003e46:	4413      	add	r3, r2
 8003e48:	009b      	lsls	r3, r3, #2
 8003e4a:	4a28      	ldr	r2, [pc, #160]	@ (8003eec <xTaskIncrementTick+0x218>)
 8003e4c:	441a      	add	r2, r3
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	615a      	str	r2, [r3, #20]
 8003e52:	693b      	ldr	r3, [r7, #16]
 8003e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e56:	4925      	ldr	r1, [pc, #148]	@ (8003eec <xTaskIncrementTick+0x218>)
 8003e58:	4613      	mov	r3, r2
 8003e5a:	009b      	lsls	r3, r3, #2
 8003e5c:	4413      	add	r3, r2
 8003e5e:	009b      	lsls	r3, r3, #2
 8003e60:	440b      	add	r3, r1
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8003e68:	1c59      	adds	r1, r3, #1
 8003e6a:	4820      	ldr	r0, [pc, #128]	@ (8003eec <xTaskIncrementTick+0x218>)
 8003e6c:	4613      	mov	r3, r2
 8003e6e:	009b      	lsls	r3, r3, #2
 8003e70:	4413      	add	r3, r2
 8003e72:	009b      	lsls	r3, r3, #2
 8003e74:	4403      	add	r3, r0
 8003e76:	6019      	str	r1, [r3, #0]
                             * task.
                             * The case of equal priority tasks sharing
                             * processing time (which happens when both
                             * preemption and time slicing are on) is
                             * handled below.*/
                            if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e78:	693b      	ldr	r3, [r7, #16]
 8003e7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e7c:	4b1c      	ldr	r3, [pc, #112]	@ (8003ef0 <xTaskIncrementTick+0x21c>)
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e82:	429a      	cmp	r2, r3
 8003e84:	f67f af5b 	bls.w	8003d3e <xTaskIncrementTick+0x6a>
                            {
                                xSwitchRequired = pdTRUE;
 8003e88:	2301      	movs	r3, #1
 8003e8a:	61fb      	str	r3, [r7, #28]
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003e8c:	e757      	b.n	8003d3e <xTaskIncrementTick+0x6a>
         * writer has not explicitly turned time slicing off. */
        #if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > 1U )
 8003e8e:	4b18      	ldr	r3, [pc, #96]	@ (8003ef0 <xTaskIncrementTick+0x21c>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e94:	4915      	ldr	r1, [pc, #84]	@ (8003eec <xTaskIncrementTick+0x218>)
 8003e96:	4613      	mov	r3, r2
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	4413      	add	r3, r2
 8003e9c:	009b      	lsls	r3, r3, #2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	2b01      	cmp	r3, #1
 8003ea4:	d901      	bls.n	8003eaa <xTaskIncrementTick+0x1d6>
                {
                    xSwitchRequired = pdTRUE;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	61fb      	str	r3, [r7, #28]
        #if ( configUSE_PREEMPTION == 1 )
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                /* For single core the core ID is always 0. */
                if( xYieldPendings[ 0 ] != pdFALSE )
 8003eaa:	4b12      	ldr	r3, [pc, #72]	@ (8003ef4 <xTaskIncrementTick+0x220>)
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d007      	beq.n	8003ec2 <xTaskIncrementTick+0x1ee>
                {
                    xSwitchRequired = pdTRUE;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	61fb      	str	r3, [r7, #28]
 8003eb6:	e004      	b.n	8003ec2 <xTaskIncrementTick+0x1ee>
        }
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    else
    {
        xPendedTicks += 1U;
 8003eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8003ef8 <xTaskIncrementTick+0x224>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3301      	adds	r3, #1
 8003ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8003ef8 <xTaskIncrementTick+0x224>)
 8003ec0:	6013      	str	r3, [r2, #0]
        #endif
    }

    traceRETURN_xTaskIncrementTick( xSwitchRequired );

    return xSwitchRequired;
 8003ec2:	69fb      	ldr	r3, [r7, #28]
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3720      	adds	r7, #32
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}
 8003ecc:	20000c30 	.word	0x20000c30
 8003ed0:	20000c0c 	.word	0x20000c0c
 8003ed4:	20000bc0 	.word	0x20000bc0
 8003ed8:	08022ed8 	.word	0x08022ed8
 8003edc:	20000bc4 	.word	0x20000bc4
 8003ee0:	20000c20 	.word	0x20000c20
 8003ee4:	20000c28 	.word	0x20000c28
 8003ee8:	20000c10 	.word	0x20000c10
 8003eec:	20000b0c 	.word	0x20000b0c
 8003ef0:	20000b08 	.word	0x20000b08
 8003ef4:	20000c1c 	.word	0x20000c1c
 8003ef8:	20000c18 	.word	0x20000c18

08003efc <vTaskSwitchContext>:
#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

#if ( configNUMBER_OF_CORES == 1 )
    void vTaskSwitchContext( void )
    {
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b084      	sub	sp, #16
 8003f00:	af00      	add	r7, sp, #0
        traceENTER_vTaskSwitchContext();

        if( uxSchedulerSuspended != ( UBaseType_t ) 0U )
 8003f02:	4b30      	ldr	r3, [pc, #192]	@ (8003fc4 <vTaskSwitchContext+0xc8>)
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d003      	beq.n	8003f12 <vTaskSwitchContext+0x16>
        {
            /* The scheduler is currently suspended - do not allow a context
             * switch. */
            xYieldPendings[ 0 ] = pdTRUE;
 8003f0a:	4b2f      	ldr	r3, [pc, #188]	@ (8003fc8 <vTaskSwitchContext+0xcc>)
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        traceRETURN_vTaskSwitchContext();
    }
 8003f10:	e053      	b.n	8003fba <vTaskSwitchContext+0xbe>
            xYieldPendings[ 0 ] = pdFALSE;
 8003f12:	4b2d      	ldr	r3, [pc, #180]	@ (8003fc8 <vTaskSwitchContext+0xcc>)
 8003f14:	2200      	movs	r2, #0
 8003f16:	601a      	str	r2, [r3, #0]
                    ulTotalRunTime[ 0 ] = portGET_RUN_TIME_COUNTER_VALUE();
 8003f18:	f7fd faa2 	bl	8001460 <ulGetRunTimeCounterValue>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	4a2b      	ldr	r2, [pc, #172]	@ (8003fcc <vTaskSwitchContext+0xd0>)
 8003f20:	6013      	str	r3, [r2, #0]
                if( ulTotalRunTime[ 0 ] > ulTaskSwitchedInTime[ 0 ] )
 8003f22:	4b2a      	ldr	r3, [pc, #168]	@ (8003fcc <vTaskSwitchContext+0xd0>)
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd0 <vTaskSwitchContext+0xd4>)
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	429a      	cmp	r2, r3
 8003f2c:	d909      	bls.n	8003f42 <vTaskSwitchContext+0x46>
                    pxCurrentTCB->ulRunTimeCounter += ( ulTotalRunTime[ 0 ] - ulTaskSwitchedInTime[ 0 ] );
 8003f2e:	4b27      	ldr	r3, [pc, #156]	@ (8003fcc <vTaskSwitchContext+0xd0>)
 8003f30:	681a      	ldr	r2, [r3, #0]
 8003f32:	4b27      	ldr	r3, [pc, #156]	@ (8003fd0 <vTaskSwitchContext+0xd4>)
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	1ad1      	subs	r1, r2, r3
 8003f38:	4b26      	ldr	r3, [pc, #152]	@ (8003fd4 <vTaskSwitchContext+0xd8>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8003f3e:	440a      	add	r2, r1
 8003f40:	661a      	str	r2, [r3, #96]	@ 0x60
                ulTaskSwitchedInTime[ 0 ] = ulTotalRunTime[ 0 ];
 8003f42:	4b22      	ldr	r3, [pc, #136]	@ (8003fcc <vTaskSwitchContext+0xd0>)
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	4a22      	ldr	r2, [pc, #136]	@ (8003fd0 <vTaskSwitchContext+0xd4>)
 8003f48:	6013      	str	r3, [r2, #0]
            taskSELECT_HIGHEST_PRIORITY_TASK();
 8003f4a:	4b23      	ldr	r3, [pc, #140]	@ (8003fd8 <vTaskSwitchContext+0xdc>)
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	607b      	str	r3, [r7, #4]
        __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	fab3 f383 	clz	r3, r3
 8003f56:	70fb      	strb	r3, [r7, #3]
        return ucReturn;
 8003f58:	78fb      	ldrb	r3, [r7, #3]
 8003f5a:	f1c3 031f 	rsb	r3, r3, #31
 8003f5e:	60fb      	str	r3, [r7, #12]
 8003f60:	491e      	ldr	r1, [pc, #120]	@ (8003fdc <vTaskSwitchContext+0xe0>)
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	4613      	mov	r3, r2
 8003f66:	009b      	lsls	r3, r3, #2
 8003f68:	4413      	add	r3, r2
 8003f6a:	009b      	lsls	r3, r3, #2
 8003f6c:	440b      	add	r3, r1
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d104      	bne.n	8003f7e <vTaskSwitchContext+0x82>
 8003f74:	f241 31fa 	movw	r1, #5114	@ 0x13fa
 8003f78:	4819      	ldr	r0, [pc, #100]	@ (8003fe0 <vTaskSwitchContext+0xe4>)
 8003f7a:	f7fd fa79 	bl	8001470 <vAssertCalled>
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	4613      	mov	r3, r2
 8003f82:	009b      	lsls	r3, r3, #2
 8003f84:	4413      	add	r3, r2
 8003f86:	009b      	lsls	r3, r3, #2
 8003f88:	4a14      	ldr	r2, [pc, #80]	@ (8003fdc <vTaskSwitchContext+0xe0>)
 8003f8a:	4413      	add	r3, r2
 8003f8c:	60bb      	str	r3, [r7, #8]
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	605a      	str	r2, [r3, #4]
 8003f98:	68bb      	ldr	r3, [r7, #8]
 8003f9a:	685a      	ldr	r2, [r3, #4]
 8003f9c:	68bb      	ldr	r3, [r7, #8]
 8003f9e:	3308      	adds	r3, #8
 8003fa0:	429a      	cmp	r2, r3
 8003fa2:	d103      	bne.n	8003fac <vTaskSwitchContext+0xb0>
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	68da      	ldr	r2, [r3, #12]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	605a      	str	r2, [r3, #4]
 8003fac:	68bb      	ldr	r3, [r7, #8]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	68db      	ldr	r3, [r3, #12]
 8003fb2:	4a08      	ldr	r2, [pc, #32]	@ (8003fd4 <vTaskSwitchContext+0xd8>)
 8003fb4:	6013      	str	r3, [r2, #0]
            portTASK_SWITCH_HOOK( pxCurrentTCB );
 8003fb6:	4b07      	ldr	r3, [pc, #28]	@ (8003fd4 <vTaskSwitchContext+0xd8>)
 8003fb8:	681b      	ldr	r3, [r3, #0]
    }
 8003fba:	bf00      	nop
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	20000c30 	.word	0x20000c30
 8003fc8:	20000c1c 	.word	0x20000c1c
 8003fcc:	20000c38 	.word	0x20000c38
 8003fd0:	20000c34 	.word	0x20000c34
 8003fd4:	20000b08 	.word	0x20000b08
 8003fd8:	20000c10 	.word	0x20000c10
 8003fdc:	20000b0c 	.word	0x20000b0c
 8003fe0:	08022ed8 	.word	0x08022ed8

08003fe4 <vTaskPlaceOnEventList>:
#endif /* if ( configNUMBER_OF_CORES > 1 ) */
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList,
                            const TickType_t xTicksToWait )
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b082      	sub	sp, #8
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
 8003fec:	6039      	str	r1, [r7, #0]
    traceENTER_vTaskPlaceOnEventList( pxEventList, xTicksToWait );

    configASSERT( pxEventList );
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d104      	bne.n	8003ffe <vTaskPlaceOnEventList+0x1a>
 8003ff4:	f44f 51a4 	mov.w	r1, #5248	@ 0x1480
 8003ff8:	4808      	ldr	r0, [pc, #32]	@ (800401c <vTaskPlaceOnEventList+0x38>)
 8003ffa:	f7fd fa39 	bl	8001470 <vAssertCalled>
     *      xItemValue = ( configMAX_PRIORITIES - uxPriority )
     * Therefore, the event list is sorted in descending priority order.
     *
     * The queue that contains the event list is locked, preventing
     * simultaneous access from interrupts. */
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003ffe:	4b08      	ldr	r3, [pc, #32]	@ (8004020 <vTaskPlaceOnEventList+0x3c>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	3318      	adds	r3, #24
 8004004:	4619      	mov	r1, r3
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fe fca1 	bl	800294e <vListInsert>

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800400c:	2101      	movs	r1, #1
 800400e:	6838      	ldr	r0, [r7, #0]
 8004010:	f001 f9e4 	bl	80053dc <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnEventList();
}
 8004014:	bf00      	nop
 8004016:	3708      	adds	r7, #8
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	08022ed8 	.word	0x08022ed8
 8004020:	20000b08 	.word	0x20000b08

08004024 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList,
                                     const TickType_t xItemValue,
                                     const TickType_t xTicksToWait )
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b086      	sub	sp, #24
 8004028:	af00      	add	r7, sp, #0
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
    traceENTER_vTaskPlaceOnUnorderedEventList( pxEventList, xItemValue, xTicksToWait );

    configASSERT( pxEventList );
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d104      	bne.n	8004040 <vTaskPlaceOnUnorderedEventList+0x1c>
 8004036:	f241 419e 	movw	r1, #5278	@ 0x149e
 800403a:	481d      	ldr	r0, [pc, #116]	@ (80040b0 <vTaskPlaceOnUnorderedEventList+0x8c>)
 800403c:	f7fd fa18 	bl	8001470 <vAssertCalled>

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event groups implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 8004040:	4b1c      	ldr	r3, [pc, #112]	@ (80040b4 <vTaskPlaceOnUnorderedEventList+0x90>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d104      	bne.n	8004052 <vTaskPlaceOnUnorderedEventList+0x2e>
 8004048:	f241 41a2 	movw	r1, #5282	@ 0x14a2
 800404c:	4818      	ldr	r0, [pc, #96]	@ (80040b0 <vTaskPlaceOnUnorderedEventList+0x8c>)
 800404e:	f7fd fa0f 	bl	8001470 <vAssertCalled>

    /* Store the item value in the event list item.  It is safe to access the
     * event list item here as interrupts won't access the event list item of a
     * task that is not in the Blocked state. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8004052:	4b19      	ldr	r3, [pc, #100]	@ (80040b8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800405c:	619a      	str	r2, [r3, #24]
    /* Place the event list item of the TCB at the end of the appropriate event
     * list.  It is safe to access the event list here because it is part of an
     * event group implementation - and interrupts don't access event groups
     * directly (instead they access them indirectly by pending function calls to
     * the task level). */
    listINSERT_END( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	685b      	ldr	r3, [r3, #4]
 8004062:	617b      	str	r3, [r7, #20]
 8004064:	4b14      	ldr	r3, [pc, #80]	@ (80040b8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	61da      	str	r2, [r3, #28]
 800406c:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <vTaskPlaceOnUnorderedEventList+0x94>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	697a      	ldr	r2, [r7, #20]
 8004072:	6892      	ldr	r2, [r2, #8]
 8004074:	621a      	str	r2, [r3, #32]
 8004076:	4b10      	ldr	r3, [pc, #64]	@ (80040b8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004078:	681a      	ldr	r2, [r3, #0]
 800407a:	697b      	ldr	r3, [r7, #20]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	3218      	adds	r2, #24
 8004080:	605a      	str	r2, [r3, #4]
 8004082:	4b0d      	ldr	r3, [pc, #52]	@ (80040b8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f103 0218 	add.w	r2, r3, #24
 800408a:	697b      	ldr	r3, [r7, #20]
 800408c:	609a      	str	r2, [r3, #8]
 800408e:	4b0a      	ldr	r3, [pc, #40]	@ (80040b8 <vTaskPlaceOnUnorderedEventList+0x94>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	629a      	str	r2, [r3, #40]	@ 0x28
 8004096:	68fb      	ldr	r3, [r7, #12]
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	1c5a      	adds	r2, r3, #1
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	601a      	str	r2, [r3, #0]

    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80040a0:	2101      	movs	r1, #1
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f001 f99a 	bl	80053dc <prvAddCurrentTaskToDelayedList>

    traceRETURN_vTaskPlaceOnUnorderedEventList();
}
 80040a8:	bf00      	nop
 80040aa:	3718      	adds	r7, #24
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	08022ed8 	.word	0x08022ed8
 80040b4:	20000c30 	.word	0x20000c30
 80040b8:	20000b08 	.word	0x20000b08

080040bc <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80040bc:	b580      	push	{r7, lr}
 80040be:	b088      	sub	sp, #32
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
     * This function assumes that a check has already been made to ensure that
     * pxEventList is not empty. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	61bb      	str	r3, [r7, #24]
    configASSERT( pxUnblockedTCB );
 80040cc:	69bb      	ldr	r3, [r7, #24]
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d104      	bne.n	80040dc <xTaskRemoveFromEventList+0x20>
 80040d2:	f241 41f5 	movw	r1, #5365	@ 0x14f5
 80040d6:	485b      	ldr	r0, [pc, #364]	@ (8004244 <xTaskRemoveFromEventList+0x188>)
 80040d8:	f7fd f9ca 	bl	8001470 <vAssertCalled>
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 80040dc:	69bb      	ldr	r3, [r7, #24]
 80040de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80040e0:	617b      	str	r3, [r7, #20]
 80040e2:	69bb      	ldr	r3, [r7, #24]
 80040e4:	69db      	ldr	r3, [r3, #28]
 80040e6:	69ba      	ldr	r2, [r7, #24]
 80040e8:	6a12      	ldr	r2, [r2, #32]
 80040ea:	609a      	str	r2, [r3, #8]
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	6a1b      	ldr	r3, [r3, #32]
 80040f0:	69ba      	ldr	r2, [r7, #24]
 80040f2:	69d2      	ldr	r2, [r2, #28]
 80040f4:	605a      	str	r2, [r3, #4]
 80040f6:	697b      	ldr	r3, [r7, #20]
 80040f8:	685a      	ldr	r2, [r3, #4]
 80040fa:	69bb      	ldr	r3, [r7, #24]
 80040fc:	3318      	adds	r3, #24
 80040fe:	429a      	cmp	r2, r3
 8004100:	d103      	bne.n	800410a <xTaskRemoveFromEventList+0x4e>
 8004102:	69bb      	ldr	r3, [r7, #24]
 8004104:	6a1a      	ldr	r2, [r3, #32]
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	605a      	str	r2, [r3, #4]
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2200      	movs	r2, #0
 800410e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	1e5a      	subs	r2, r3, #1
 8004116:	697b      	ldr	r3, [r7, #20]
 8004118:	601a      	str	r2, [r3, #0]

    if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800411a:	4b4b      	ldr	r3, [pc, #300]	@ (8004248 <xTaskRemoveFromEventList+0x18c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d160      	bne.n	80041e4 <xTaskRemoveFromEventList+0x128>
    {
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004122:	69bb      	ldr	r3, [r7, #24]
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	60fb      	str	r3, [r7, #12]
 8004128:	69bb      	ldr	r3, [r7, #24]
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	69ba      	ldr	r2, [r7, #24]
 800412e:	68d2      	ldr	r2, [r2, #12]
 8004130:	609a      	str	r2, [r3, #8]
 8004132:	69bb      	ldr	r3, [r7, #24]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	69ba      	ldr	r2, [r7, #24]
 8004138:	6892      	ldr	r2, [r2, #8]
 800413a:	605a      	str	r2, [r3, #4]
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	685a      	ldr	r2, [r3, #4]
 8004140:	69bb      	ldr	r3, [r7, #24]
 8004142:	3304      	adds	r3, #4
 8004144:	429a      	cmp	r2, r3
 8004146:	d103      	bne.n	8004150 <xTaskRemoveFromEventList+0x94>
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	68da      	ldr	r2, [r3, #12]
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	605a      	str	r2, [r3, #4]
 8004150:	69bb      	ldr	r3, [r7, #24]
 8004152:	2200      	movs	r2, #0
 8004154:	615a      	str	r2, [r3, #20]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	1e5a      	subs	r2, r3, #1
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	601a      	str	r2, [r3, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004164:	2201      	movs	r2, #1
 8004166:	409a      	lsls	r2, r3
 8004168:	4b38      	ldr	r3, [pc, #224]	@ (800424c <xTaskRemoveFromEventList+0x190>)
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	4313      	orrs	r3, r2
 800416e:	4a37      	ldr	r2, [pc, #220]	@ (800424c <xTaskRemoveFromEventList+0x190>)
 8004170:	6013      	str	r3, [r2, #0]
 8004172:	69bb      	ldr	r3, [r7, #24]
 8004174:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004176:	4936      	ldr	r1, [pc, #216]	@ (8004250 <xTaskRemoveFromEventList+0x194>)
 8004178:	4613      	mov	r3, r2
 800417a:	009b      	lsls	r3, r3, #2
 800417c:	4413      	add	r3, r2
 800417e:	009b      	lsls	r3, r3, #2
 8004180:	440b      	add	r3, r1
 8004182:	3304      	adds	r3, #4
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60bb      	str	r3, [r7, #8]
 8004188:	69bb      	ldr	r3, [r7, #24]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	609a      	str	r2, [r3, #8]
 800418e:	68bb      	ldr	r3, [r7, #8]
 8004190:	689a      	ldr	r2, [r3, #8]
 8004192:	69bb      	ldr	r3, [r7, #24]
 8004194:	60da      	str	r2, [r3, #12]
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	689b      	ldr	r3, [r3, #8]
 800419a:	69ba      	ldr	r2, [r7, #24]
 800419c:	3204      	adds	r2, #4
 800419e:	605a      	str	r2, [r3, #4]
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	1d1a      	adds	r2, r3, #4
 80041a4:	68bb      	ldr	r3, [r7, #8]
 80041a6:	609a      	str	r2, [r3, #8]
 80041a8:	69bb      	ldr	r3, [r7, #24]
 80041aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041ac:	4613      	mov	r3, r2
 80041ae:	009b      	lsls	r3, r3, #2
 80041b0:	4413      	add	r3, r2
 80041b2:	009b      	lsls	r3, r3, #2
 80041b4:	4a26      	ldr	r2, [pc, #152]	@ (8004250 <xTaskRemoveFromEventList+0x194>)
 80041b6:	441a      	add	r2, r3
 80041b8:	69bb      	ldr	r3, [r7, #24]
 80041ba:	615a      	str	r2, [r3, #20]
 80041bc:	69bb      	ldr	r3, [r7, #24]
 80041be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80041c0:	4923      	ldr	r1, [pc, #140]	@ (8004250 <xTaskRemoveFromEventList+0x194>)
 80041c2:	4613      	mov	r3, r2
 80041c4:	009b      	lsls	r3, r3, #2
 80041c6:	4413      	add	r3, r2
 80041c8:	009b      	lsls	r3, r3, #2
 80041ca:	440b      	add	r3, r1
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	69ba      	ldr	r2, [r7, #24]
 80041d0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80041d2:	1c59      	adds	r1, r3, #1
 80041d4:	481e      	ldr	r0, [pc, #120]	@ (8004250 <xTaskRemoveFromEventList+0x194>)
 80041d6:	4613      	mov	r3, r2
 80041d8:	009b      	lsls	r3, r3, #2
 80041da:	4413      	add	r3, r2
 80041dc:	009b      	lsls	r3, r3, #2
 80041de:	4403      	add	r3, r0
 80041e0:	6019      	str	r1, [r3, #0]
 80041e2:	e01b      	b.n	800421c <xTaskRemoveFromEventList+0x160>
    }
    else
    {
        /* The delayed and ready lists cannot be accessed, so hold this task
         * pending until the scheduler is resumed. */
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80041e4:	4b1b      	ldr	r3, [pc, #108]	@ (8004254 <xTaskRemoveFromEventList+0x198>)
 80041e6:	685b      	ldr	r3, [r3, #4]
 80041e8:	613b      	str	r3, [r7, #16]
 80041ea:	69bb      	ldr	r3, [r7, #24]
 80041ec:	693a      	ldr	r2, [r7, #16]
 80041ee:	61da      	str	r2, [r3, #28]
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	689a      	ldr	r2, [r3, #8]
 80041f4:	69bb      	ldr	r3, [r7, #24]
 80041f6:	621a      	str	r2, [r3, #32]
 80041f8:	693b      	ldr	r3, [r7, #16]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	69ba      	ldr	r2, [r7, #24]
 80041fe:	3218      	adds	r2, #24
 8004200:	605a      	str	r2, [r3, #4]
 8004202:	69bb      	ldr	r3, [r7, #24]
 8004204:	f103 0218 	add.w	r2, r3, #24
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	609a      	str	r2, [r3, #8]
 800420c:	69bb      	ldr	r3, [r7, #24]
 800420e:	4a11      	ldr	r2, [pc, #68]	@ (8004254 <xTaskRemoveFromEventList+0x198>)
 8004210:	629a      	str	r2, [r3, #40]	@ 0x28
 8004212:	4b10      	ldr	r3, [pc, #64]	@ (8004254 <xTaskRemoveFromEventList+0x198>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	3301      	adds	r3, #1
 8004218:	4a0e      	ldr	r2, [pc, #56]	@ (8004254 <xTaskRemoveFromEventList+0x198>)
 800421a:	6013      	str	r3, [r2, #0]
    }

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800421c:	69bb      	ldr	r3, [r7, #24]
 800421e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004220:	4b0d      	ldr	r3, [pc, #52]	@ (8004258 <xTaskRemoveFromEventList+0x19c>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004226:	429a      	cmp	r2, r3
 8004228:	d905      	bls.n	8004236 <xTaskRemoveFromEventList+0x17a>
        {
            /* Return true if the task removed from the event list has a higher
             * priority than the calling task.  This allows the calling task to know if
             * it should force a context switch now. */
            xReturn = pdTRUE;
 800422a:	2301      	movs	r3, #1
 800422c:	61fb      	str	r3, [r7, #28]

            /* Mark that a yield is pending in case the user is not using the
             * "xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
            xYieldPendings[ 0 ] = pdTRUE;
 800422e:	4b0b      	ldr	r3, [pc, #44]	@ (800425c <xTaskRemoveFromEventList+0x1a0>)
 8004230:	2201      	movs	r2, #1
 8004232:	601a      	str	r2, [r3, #0]
 8004234:	e001      	b.n	800423a <xTaskRemoveFromEventList+0x17e>
        }
        else
        {
            xReturn = pdFALSE;
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
        #endif /* #if ( configUSE_PREEMPTION == 1 ) */
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_xTaskRemoveFromEventList( xReturn );
    return xReturn;
 800423a:	69fb      	ldr	r3, [r7, #28]
}
 800423c:	4618      	mov	r0, r3
 800423e:	3720      	adds	r7, #32
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	08022ed8 	.word	0x08022ed8
 8004248:	20000c30 	.word	0x20000c30
 800424c:	20000c10 	.word	0x20000c10
 8004250:	20000b0c 	.word	0x20000b0c
 8004254:	20000bc8 	.word	0x20000bc8
 8004258:	20000b08 	.word	0x20000b08
 800425c:	20000c1c 	.word	0x20000c1c

08004260 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem,
                                        const TickType_t xItemValue )
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b086      	sub	sp, #24
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]

    traceENTER_vTaskRemoveFromUnorderedEventList( pxEventListItem, xItemValue );

    /* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
     * the event flags implementation. */
    configASSERT( uxSchedulerSuspended != ( UBaseType_t ) 0U );
 800426a:	4b52      	ldr	r3, [pc, #328]	@ (80043b4 <vTaskRemoveFromUnorderedEventList+0x154>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d104      	bne.n	800427c <vTaskRemoveFromUnorderedEventList+0x1c>
 8004272:	f241 5143 	movw	r1, #5443	@ 0x1543
 8004276:	4850      	ldr	r0, [pc, #320]	@ (80043b8 <vTaskRemoveFromUnorderedEventList+0x158>)
 8004278:	f7fd f8fa 	bl	8001470 <vAssertCalled>

    /* Store the new item value in the event list. */
    listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	601a      	str	r2, [r3, #0]
    /* Remove the event list form the event flag.  Interrupts do not access
     * event flags. */
    /* MISRA Ref 11.5.3 [Void pointer assignment] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
    /* coverity[misra_c_2012_rule_11_5_violation] */
    pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem );
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	617b      	str	r3, [r7, #20]
    configASSERT( pxUnblockedTCB );
 800428c:	697b      	ldr	r3, [r7, #20]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d104      	bne.n	800429c <vTaskRemoveFromUnorderedEventList+0x3c>
 8004292:	f241 514e 	movw	r1, #5454	@ 0x154e
 8004296:	4848      	ldr	r0, [pc, #288]	@ (80043b8 <vTaskRemoveFromUnorderedEventList+0x158>)
 8004298:	f7fd f8ea 	bl	8001470 <vAssertCalled>
    listREMOVE_ITEM( pxEventListItem );
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	691b      	ldr	r3, [r3, #16]
 80042a0:	613b      	str	r3, [r7, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	687a      	ldr	r2, [r7, #4]
 80042a8:	6892      	ldr	r2, [r2, #8]
 80042aa:	609a      	str	r2, [r3, #8]
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	687a      	ldr	r2, [r7, #4]
 80042b2:	6852      	ldr	r2, [r2, #4]
 80042b4:	605a      	str	r2, [r3, #4]
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	429a      	cmp	r2, r3
 80042be:	d103      	bne.n	80042c8 <vTaskRemoveFromUnorderedEventList+0x68>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689a      	ldr	r2, [r3, #8]
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	605a      	str	r2, [r3, #4]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2200      	movs	r2, #0
 80042cc:	611a      	str	r2, [r3, #16]
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	1e5a      	subs	r2, r3, #1
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	601a      	str	r2, [r3, #0]
    #endif

    /* Remove the task from the delayed list and add it to the ready list.  The
     * scheduler is suspended so interrupts will not be accessing the ready
     * lists. */
    listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 80042d8:	697b      	ldr	r3, [r7, #20]
 80042da:	695b      	ldr	r3, [r3, #20]
 80042dc:	60fb      	str	r3, [r7, #12]
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	689b      	ldr	r3, [r3, #8]
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	68d2      	ldr	r2, [r2, #12]
 80042e6:	609a      	str	r2, [r3, #8]
 80042e8:	697b      	ldr	r3, [r7, #20]
 80042ea:	68db      	ldr	r3, [r3, #12]
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	6892      	ldr	r2, [r2, #8]
 80042f0:	605a      	str	r2, [r3, #4]
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	685a      	ldr	r2, [r3, #4]
 80042f6:	697b      	ldr	r3, [r7, #20]
 80042f8:	3304      	adds	r3, #4
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d103      	bne.n	8004306 <vTaskRemoveFromUnorderedEventList+0xa6>
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	68da      	ldr	r2, [r3, #12]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	605a      	str	r2, [r3, #4]
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	2200      	movs	r2, #0
 800430a:	615a      	str	r2, [r3, #20]
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	1e5a      	subs	r2, r3, #1
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	601a      	str	r2, [r3, #0]
    prvAddTaskToReadyList( pxUnblockedTCB );
 8004316:	697b      	ldr	r3, [r7, #20]
 8004318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800431a:	2201      	movs	r2, #1
 800431c:	409a      	lsls	r2, r3
 800431e:	4b27      	ldr	r3, [pc, #156]	@ (80043bc <vTaskRemoveFromUnorderedEventList+0x15c>)
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4313      	orrs	r3, r2
 8004324:	4a25      	ldr	r2, [pc, #148]	@ (80043bc <vTaskRemoveFromUnorderedEventList+0x15c>)
 8004326:	6013      	str	r3, [r2, #0]
 8004328:	697b      	ldr	r3, [r7, #20]
 800432a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800432c:	4924      	ldr	r1, [pc, #144]	@ (80043c0 <vTaskRemoveFromUnorderedEventList+0x160>)
 800432e:	4613      	mov	r3, r2
 8004330:	009b      	lsls	r3, r3, #2
 8004332:	4413      	add	r3, r2
 8004334:	009b      	lsls	r3, r3, #2
 8004336:	440b      	add	r3, r1
 8004338:	3304      	adds	r3, #4
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	60bb      	str	r3, [r7, #8]
 800433e:	697b      	ldr	r3, [r7, #20]
 8004340:	68ba      	ldr	r2, [r7, #8]
 8004342:	609a      	str	r2, [r3, #8]
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	60da      	str	r2, [r3, #12]
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	689b      	ldr	r3, [r3, #8]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	3204      	adds	r2, #4
 8004354:	605a      	str	r2, [r3, #4]
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	1d1a      	adds	r2, r3, #4
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	609a      	str	r2, [r3, #8]
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004362:	4613      	mov	r3, r2
 8004364:	009b      	lsls	r3, r3, #2
 8004366:	4413      	add	r3, r2
 8004368:	009b      	lsls	r3, r3, #2
 800436a:	4a15      	ldr	r2, [pc, #84]	@ (80043c0 <vTaskRemoveFromUnorderedEventList+0x160>)
 800436c:	441a      	add	r2, r3
 800436e:	697b      	ldr	r3, [r7, #20]
 8004370:	615a      	str	r2, [r3, #20]
 8004372:	697b      	ldr	r3, [r7, #20]
 8004374:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004376:	4912      	ldr	r1, [pc, #72]	@ (80043c0 <vTaskRemoveFromUnorderedEventList+0x160>)
 8004378:	4613      	mov	r3, r2
 800437a:	009b      	lsls	r3, r3, #2
 800437c:	4413      	add	r3, r2
 800437e:	009b      	lsls	r3, r3, #2
 8004380:	440b      	add	r3, r1
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	697a      	ldr	r2, [r7, #20]
 8004386:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004388:	1c59      	adds	r1, r3, #1
 800438a:	480d      	ldr	r0, [pc, #52]	@ (80043c0 <vTaskRemoveFromUnorderedEventList+0x160>)
 800438c:	4613      	mov	r3, r2
 800438e:	009b      	lsls	r3, r3, #2
 8004390:	4413      	add	r3, r2
 8004392:	009b      	lsls	r3, r3, #2
 8004394:	4403      	add	r3, r0
 8004396:	6019      	str	r1, [r3, #0]

    #if ( configNUMBER_OF_CORES == 1 )
    {
        if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800439c:	4b09      	ldr	r3, [pc, #36]	@ (80043c4 <vTaskRemoveFromUnorderedEventList+0x164>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a2:	429a      	cmp	r2, r3
 80043a4:	d902      	bls.n	80043ac <vTaskRemoveFromUnorderedEventList+0x14c>
        {
            /* The unblocked task has a priority above that of the calling task, so
             * a context switch is required.  This function is called with the
             * scheduler suspended so xYieldPending is set so the context switch
             * occurs immediately that the scheduler is resumed (unsuspended). */
            xYieldPendings[ 0 ] = pdTRUE;
 80043a6:	4b08      	ldr	r3, [pc, #32]	@ (80043c8 <vTaskRemoveFromUnorderedEventList+0x168>)
 80043a8:	2201      	movs	r2, #1
 80043aa:	601a      	str	r2, [r3, #0]
        #endif
    }
    #endif /* #if ( configNUMBER_OF_CORES == 1 ) */

    traceRETURN_vTaskRemoveFromUnorderedEventList();
}
 80043ac:	bf00      	nop
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}
 80043b4:	20000c30 	.word	0x20000c30
 80043b8:	08022ed8 	.word	0x08022ed8
 80043bc:	20000c10 	.word	0x20000c10
 80043c0:	20000b0c 	.word	0x20000b0c
 80043c4:	20000b08 	.word	0x20000b08
 80043c8:	20000c1c 	.word	0x20000c1c

080043cc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80043cc:	b580      	push	{r7, lr}
 80043ce:	b082      	sub	sp, #8
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskSetTimeOutState( pxTimeOut );

    configASSERT( pxTimeOut );
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d104      	bne.n	80043e4 <vTaskSetTimeOutState+0x18>
 80043da:	f241 5186 	movw	r1, #5510	@ 0x1586
 80043de:	4809      	ldr	r0, [pc, #36]	@ (8004404 <vTaskSetTimeOutState+0x38>)
 80043e0:	f7fd f846 	bl	8001470 <vAssertCalled>
    taskENTER_CRITICAL();
 80043e4:	f001 f9b4 	bl	8005750 <vPortEnterCritical>
    {
        pxTimeOut->xOverflowCount = xNumOfOverflows;
 80043e8:	4b07      	ldr	r3, [pc, #28]	@ (8004408 <vTaskSetTimeOutState+0x3c>)
 80043ea:	681a      	ldr	r2, [r3, #0]
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	601a      	str	r2, [r3, #0]
        pxTimeOut->xTimeOnEntering = xTickCount;
 80043f0:	4b06      	ldr	r3, [pc, #24]	@ (800440c <vTaskSetTimeOutState+0x40>)
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	605a      	str	r2, [r3, #4]
    }
    taskEXIT_CRITICAL();
 80043f8:	f001 f9d6 	bl	80057a8 <vPortExitCritical>

    traceRETURN_vTaskSetTimeOutState();
}
 80043fc:	bf00      	nop
 80043fe:	3708      	adds	r7, #8
 8004400:	46bd      	mov	sp, r7
 8004402:	bd80      	pop	{r7, pc}
 8004404:	08022ed8 	.word	0x08022ed8
 8004408:	20000c20 	.word	0x20000c20
 800440c:	20000c0c 	.word	0x20000c0c

08004410 <vTaskInternalSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004410:	b480      	push	{r7}
 8004412:	b083      	sub	sp, #12
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
    traceENTER_vTaskInternalSetTimeOutState( pxTimeOut );

    /* For internal use only as it does not use a critical section. */
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004418:	4b06      	ldr	r3, [pc, #24]	@ (8004434 <vTaskInternalSetTimeOutState+0x24>)
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	601a      	str	r2, [r3, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004420:	4b05      	ldr	r3, [pc, #20]	@ (8004438 <vTaskInternalSetTimeOutState+0x28>)
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	605a      	str	r2, [r3, #4]

    traceRETURN_vTaskInternalSetTimeOutState();
}
 8004428:	bf00      	nop
 800442a:	370c      	adds	r7, #12
 800442c:	46bd      	mov	sp, r7
 800442e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004432:	4770      	bx	lr
 8004434:	20000c20 	.word	0x20000c20
 8004438:	20000c0c 	.word	0x20000c0c

0800443c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut,
                                 TickType_t * const pxTicksToWait )
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b086      	sub	sp, #24
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
 8004444:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn;

    traceENTER_xTaskCheckForTimeOut( pxTimeOut, pxTicksToWait );

    configASSERT( pxTimeOut );
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2b00      	cmp	r3, #0
 800444a:	d104      	bne.n	8004456 <xTaskCheckForTimeOut+0x1a>
 800444c:	f241 51a5 	movw	r1, #5541	@ 0x15a5
 8004450:	4825      	ldr	r0, [pc, #148]	@ (80044e8 <xTaskCheckForTimeOut+0xac>)
 8004452:	f7fd f80d 	bl	8001470 <vAssertCalled>
    configASSERT( pxTicksToWait );
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d104      	bne.n	8004466 <xTaskCheckForTimeOut+0x2a>
 800445c:	f241 51a6 	movw	r1, #5542	@ 0x15a6
 8004460:	4821      	ldr	r0, [pc, #132]	@ (80044e8 <xTaskCheckForTimeOut+0xac>)
 8004462:	f7fd f805 	bl	8001470 <vAssertCalled>

    taskENTER_CRITICAL();
 8004466:	f001 f973 	bl	8005750 <vPortEnterCritical>
    {
        /* Minor optimisation.  The tick count cannot change in this block. */
        const TickType_t xConstTickCount = xTickCount;
 800446a:	4b20      	ldr	r3, [pc, #128]	@ (80044ec <xTaskCheckForTimeOut+0xb0>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	613b      	str	r3, [r7, #16]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	60fb      	str	r3, [r7, #12]
            }
            else
        #endif

        #if ( INCLUDE_vTaskSuspend == 1 )
            if( *pxTicksToWait == portMAX_DELAY )
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004482:	d102      	bne.n	800448a <xTaskCheckForTimeOut+0x4e>
            {
                /* If INCLUDE_vTaskSuspend is set to 1 and the block time
                 * specified is the maximum block time then the task should block
                 * indefinitely, and therefore never time out. */
                xReturn = pdFALSE;
 8004484:	2300      	movs	r3, #0
 8004486:	617b      	str	r3, [r7, #20]
 8004488:	e026      	b.n	80044d8 <xTaskCheckForTimeOut+0x9c>
            }
            else
        #endif

        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) )
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	4b18      	ldr	r3, [pc, #96]	@ (80044f0 <xTaskCheckForTimeOut+0xb4>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	429a      	cmp	r2, r3
 8004494:	d00a      	beq.n	80044ac <xTaskCheckForTimeOut+0x70>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	429a      	cmp	r2, r3
 800449e:	d305      	bcc.n	80044ac <xTaskCheckForTimeOut+0x70>
            /* The tick count is greater than the time at which
             * vTaskSetTimeout() was called, but has also overflowed since
             * vTaskSetTimeOut() was called.  It must have wrapped all the way
             * around and gone past again. This passed since vTaskSetTimeout()
             * was called. */
            xReturn = pdTRUE;
 80044a0:	2301      	movs	r3, #1
 80044a2:	617b      	str	r3, [r7, #20]
            *pxTicksToWait = ( TickType_t ) 0;
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
 80044aa:	e015      	b.n	80044d8 <xTaskCheckForTimeOut+0x9c>
        }
        else if( xElapsedTime < *pxTicksToWait )
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	68fa      	ldr	r2, [r7, #12]
 80044b2:	429a      	cmp	r2, r3
 80044b4:	d20b      	bcs.n	80044ce <xTaskCheckForTimeOut+0x92>
        {
            /* Not a genuine timeout. Adjust parameters for time remaining. */
            *pxTicksToWait -= xElapsedTime;
 80044b6:	683b      	ldr	r3, [r7, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	1ad2      	subs	r2, r2, r3
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	601a      	str	r2, [r3, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7ff ffa4 	bl	8004410 <vTaskInternalSetTimeOutState>
            xReturn = pdFALSE;
 80044c8:	2300      	movs	r3, #0
 80044ca:	617b      	str	r3, [r7, #20]
 80044cc:	e004      	b.n	80044d8 <xTaskCheckForTimeOut+0x9c>
        }
        else
        {
            *pxTicksToWait = ( TickType_t ) 0;
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2200      	movs	r2, #0
 80044d2:	601a      	str	r2, [r3, #0]
            xReturn = pdTRUE;
 80044d4:	2301      	movs	r3, #1
 80044d6:	617b      	str	r3, [r7, #20]
        }
    }
    taskEXIT_CRITICAL();
 80044d8:	f001 f966 	bl	80057a8 <vPortExitCritical>

    traceRETURN_xTaskCheckForTimeOut( xReturn );

    return xReturn;
 80044dc:	697b      	ldr	r3, [r7, #20]
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	08022ed8 	.word	0x08022ed8
 80044ec:	20000c0c 	.word	0x20000c0c
 80044f0:	20000c20 	.word	0x20000c20

080044f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80044f4:	b480      	push	{r7}
 80044f6:	af00      	add	r7, sp, #0
    traceENTER_vTaskMissedYield();

    /* Must be called from within a critical section. */
    xYieldPendings[ portGET_CORE_ID() ] = pdTRUE;
 80044f8:	4b03      	ldr	r3, [pc, #12]	@ (8004508 <vTaskMissedYield+0x14>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

    traceRETURN_vTaskMissedYield();
}
 80044fe:	bf00      	nop
 8004500:	46bd      	mov	sp, r7
 8004502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004506:	4770      	bx	lr
 8004508:	20000c1c 	.word	0x20000c1c

0800450c <prvIdleTask>:
 * void prvIdleTask( void *pvParameters );
 *
 */

static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800450c:	b580      	push	{r7, lr}
 800450e:	b082      	sub	sp, #8
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]

    for( ; configCONTROL_INFINITE_LOOP(); )
    {
        /* See if any tasks have deleted themselves - if so then the idle task
         * is responsible for freeing the deleted task's TCB and stack. */
        prvCheckTasksWaitingTermination();
 8004514:	f000 f852 	bl	80045bc <prvCheckTasksWaitingTermination>
             * A critical region is not required here as we are just reading from
             * the list, and an occasional incorrect value will not matter.  If
             * the ready list at the idle priority contains one more task than the
             * number of idle tasks, which is equal to the configured numbers of cores
             * then a task other than the idle task is ready to execute. */
            if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) configNUMBER_OF_CORES )
 8004518:	4b06      	ldr	r3, [pc, #24]	@ (8004534 <prvIdleTask+0x28>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	2b01      	cmp	r3, #1
 800451e:	d9f9      	bls.n	8004514 <prvIdleTask+0x8>
            {
                taskYIELD();
 8004520:	4b05      	ldr	r3, [pc, #20]	@ (8004538 <prvIdleTask+0x2c>)
 8004522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004526:	601a      	str	r2, [r3, #0]
 8004528:	f3bf 8f4f 	dsb	sy
 800452c:	f3bf 8f6f 	isb	sy
        prvCheckTasksWaitingTermination();
 8004530:	e7f0      	b.n	8004514 <prvIdleTask+0x8>
 8004532:	bf00      	nop
 8004534:	20000b0c 	.word	0x20000b0c
 8004538:	e000ed04 	.word	0xe000ed04

0800453c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800453c:	b580      	push	{r7, lr}
 800453e:	b082      	sub	sp, #8
 8004540:	af00      	add	r7, sp, #0
    UBaseType_t uxPriority;

    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004542:	2300      	movs	r3, #0
 8004544:	607b      	str	r3, [r7, #4]
 8004546:	e00c      	b.n	8004562 <prvInitialiseTaskLists+0x26>
    {
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004548:	687a      	ldr	r2, [r7, #4]
 800454a:	4613      	mov	r3, r2
 800454c:	009b      	lsls	r3, r3, #2
 800454e:	4413      	add	r3, r2
 8004550:	009b      	lsls	r3, r3, #2
 8004552:	4a12      	ldr	r2, [pc, #72]	@ (800459c <prvInitialiseTaskLists+0x60>)
 8004554:	4413      	add	r3, r2
 8004556:	4618      	mov	r0, r3
 8004558:	f7fe f9a8 	bl	80028ac <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	3301      	adds	r3, #1
 8004560:	607b      	str	r3, [r7, #4]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	2b06      	cmp	r3, #6
 8004566:	d9ef      	bls.n	8004548 <prvInitialiseTaskLists+0xc>
    }

    vListInitialise( &xDelayedTaskList1 );
 8004568:	480d      	ldr	r0, [pc, #52]	@ (80045a0 <prvInitialiseTaskLists+0x64>)
 800456a:	f7fe f99f 	bl	80028ac <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800456e:	480d      	ldr	r0, [pc, #52]	@ (80045a4 <prvInitialiseTaskLists+0x68>)
 8004570:	f7fe f99c 	bl	80028ac <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004574:	480c      	ldr	r0, [pc, #48]	@ (80045a8 <prvInitialiseTaskLists+0x6c>)
 8004576:	f7fe f999 	bl	80028ac <vListInitialise>

    #if ( INCLUDE_vTaskDelete == 1 )
    {
        vListInitialise( &xTasksWaitingTermination );
 800457a:	480c      	ldr	r0, [pc, #48]	@ (80045ac <prvInitialiseTaskLists+0x70>)
 800457c:	f7fe f996 	bl	80028ac <vListInitialise>
    }
    #endif /* INCLUDE_vTaskDelete */

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        vListInitialise( &xSuspendedTaskList );
 8004580:	480b      	ldr	r0, [pc, #44]	@ (80045b0 <prvInitialiseTaskLists+0x74>)
 8004582:	f7fe f993 	bl	80028ac <vListInitialise>
    }
    #endif /* INCLUDE_vTaskSuspend */

    /* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
     * using list2. */
    pxDelayedTaskList = &xDelayedTaskList1;
 8004586:	4b0b      	ldr	r3, [pc, #44]	@ (80045b4 <prvInitialiseTaskLists+0x78>)
 8004588:	4a05      	ldr	r2, [pc, #20]	@ (80045a0 <prvInitialiseTaskLists+0x64>)
 800458a:	601a      	str	r2, [r3, #0]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800458c:	4b0a      	ldr	r3, [pc, #40]	@ (80045b8 <prvInitialiseTaskLists+0x7c>)
 800458e:	4a05      	ldr	r2, [pc, #20]	@ (80045a4 <prvInitialiseTaskLists+0x68>)
 8004590:	601a      	str	r2, [r3, #0]
}
 8004592:	bf00      	nop
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
 800459a:	bf00      	nop
 800459c:	20000b0c 	.word	0x20000b0c
 80045a0:	20000b98 	.word	0x20000b98
 80045a4:	20000bac 	.word	0x20000bac
 80045a8:	20000bc8 	.word	0x20000bc8
 80045ac:	20000bdc 	.word	0x20000bdc
 80045b0:	20000bf4 	.word	0x20000bf4
 80045b4:	20000bc0 	.word	0x20000bc0
 80045b8:	20000bc4 	.word	0x20000bc4

080045bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80045bc:	b580      	push	{r7, lr}
 80045be:	b082      	sub	sp, #8
 80045c0:	af00      	add	r7, sp, #0
    {
        TCB_t * pxTCB;

        /* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
         * being called too often in the idle task. */
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045c2:	e019      	b.n	80045f8 <prvCheckTasksWaitingTermination+0x3c>
        {
            #if ( configNUMBER_OF_CORES == 1 )
            {
                taskENTER_CRITICAL();
 80045c4:	f001 f8c4 	bl	8005750 <vPortEnterCritical>
                {
                    {
                        /* MISRA Ref 11.5.3 [Void pointer assignment] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#rule-115 */
                        /* coverity[misra_c_2012_rule_11_5_violation] */
                        pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 80045c8:	4b10      	ldr	r3, [pc, #64]	@ (800460c <prvCheckTasksWaitingTermination+0x50>)
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	68db      	ldr	r3, [r3, #12]
 80045ce:	607b      	str	r3, [r7, #4]
                        ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	3304      	adds	r3, #4
 80045d4:	4618      	mov	r0, r3
 80045d6:	f7fe f9f3 	bl	80029c0 <uxListRemove>
                        --uxCurrentNumberOfTasks;
 80045da:	4b0d      	ldr	r3, [pc, #52]	@ (8004610 <prvCheckTasksWaitingTermination+0x54>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	3b01      	subs	r3, #1
 80045e0:	4a0b      	ldr	r2, [pc, #44]	@ (8004610 <prvCheckTasksWaitingTermination+0x54>)
 80045e2:	6013      	str	r3, [r2, #0]
                        --uxDeletedTasksWaitingCleanUp;
 80045e4:	4b0b      	ldr	r3, [pc, #44]	@ (8004614 <prvCheckTasksWaitingTermination+0x58>)
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	3b01      	subs	r3, #1
 80045ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004614 <prvCheckTasksWaitingTermination+0x58>)
 80045ec:	6013      	str	r3, [r2, #0]
                    }
                }
                taskEXIT_CRITICAL();
 80045ee:	f001 f8db 	bl	80057a8 <vPortExitCritical>

                prvDeleteTCB( pxTCB );
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f810 	bl	8004618 <prvDeleteTCB>
        while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80045f8:	4b06      	ldr	r3, [pc, #24]	@ (8004614 <prvCheckTasksWaitingTermination+0x58>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e1      	bne.n	80045c4 <prvCheckTasksWaitingTermination+0x8>
            }
            #endif /* #if( configNUMBER_OF_CORES == 1 ) */
        }
    }
    #endif /* INCLUDE_vTaskDelete */
}
 8004600:	bf00      	nop
 8004602:	bf00      	nop
 8004604:	3708      	adds	r7, #8
 8004606:	46bd      	mov	sp, r7
 8004608:	bd80      	pop	{r7, pc}
 800460a:	bf00      	nop
 800460c:	20000bdc 	.word	0x20000bdc
 8004610:	20000c08 	.word	0x20000c08
 8004614:	20000bf0 	.word	0x20000bf0

08004618 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

    static void prvDeleteTCB( TCB_t * pxTCB )
    {
 8004618:	b580      	push	{r7, lr}
 800461a:	b082      	sub	sp, #8
 800461c:	af00      	add	r7, sp, #0
 800461e:	6078      	str	r0, [r7, #4]

        #if ( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
        {
            /* The task can only have been allocated dynamically - free both
             * the stack and TCB. */
            vPortFreeStack( pxTCB->pxStack );
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004624:	4618      	mov	r0, r3
 8004626:	f001 fa69 	bl	8005afc <vPortFree>
            vPortFree( pxTCB );
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f001 fa66 	bl	8005afc <vPortFree>
                configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB );
                mtCOVERAGE_TEST_MARKER();
            }
        }
        #endif /* configSUPPORT_DYNAMIC_ALLOCATION */
    }
 8004630:	bf00      	nop
 8004632:	3708      	adds	r7, #8
 8004634:	46bd      	mov	sp, r7
 8004636:	bd80      	pop	{r7, pc}

08004638 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004638:	b480      	push	{r7}
 800463a:	af00      	add	r7, sp, #0
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800463c:	4b0a      	ldr	r3, [pc, #40]	@ (8004668 <prvResetNextTaskUnblockTime+0x30>)
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2b00      	cmp	r3, #0
 8004644:	d104      	bne.n	8004650 <prvResetNextTaskUnblockTime+0x18>
    {
        /* The new current delayed list is empty.  Set xNextTaskUnblockTime to
         * the maximum possible value so it is  extremely unlikely that the
         * if( xTickCount >= xNextTaskUnblockTime ) test will pass until
         * there is an item in the delayed list. */
        xNextTaskUnblockTime = portMAX_DELAY;
 8004646:	4b09      	ldr	r3, [pc, #36]	@ (800466c <prvResetNextTaskUnblockTime+0x34>)
 8004648:	f04f 32ff 	mov.w	r2, #4294967295
 800464c:	601a      	str	r2, [r3, #0]
         * the item at the head of the delayed list.  This is the time at
         * which the task at the head of the delayed list should be removed
         * from the Blocked state. */
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
    }
}
 800464e:	e005      	b.n	800465c <prvResetNextTaskUnblockTime+0x24>
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8004650:	4b05      	ldr	r3, [pc, #20]	@ (8004668 <prvResetNextTaskUnblockTime+0x30>)
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a04      	ldr	r2, [pc, #16]	@ (800466c <prvResetNextTaskUnblockTime+0x34>)
 800465a:	6013      	str	r3, [r2, #0]
}
 800465c:	bf00      	nop
 800465e:	46bd      	mov	sp, r7
 8004660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004664:	4770      	bx	lr
 8004666:	bf00      	nop
 8004668:	20000bc0 	.word	0x20000bc0
 800466c:	20000c28 	.word	0x20000c28

08004670 <xTaskGetCurrentTaskHandle>:

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) ) || ( configNUMBER_OF_CORES > 1 )

    #if ( configNUMBER_OF_CORES == 1 )
        TaskHandle_t xTaskGetCurrentTaskHandle( void )
        {
 8004670:	b480      	push	{r7}
 8004672:	b083      	sub	sp, #12
 8004674:	af00      	add	r7, sp, #0
            traceENTER_xTaskGetCurrentTaskHandle();

            /* A critical section is not required as this is not called from
             * an interrupt and the current TCB will always be the same for any
             * individual execution thread. */
            xReturn = pxCurrentTCB;
 8004676:	4b05      	ldr	r3, [pc, #20]	@ (800468c <xTaskGetCurrentTaskHandle+0x1c>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	607b      	str	r3, [r7, #4]

            traceRETURN_xTaskGetCurrentTaskHandle( xReturn );

            return xReturn;
 800467c:	687b      	ldr	r3, [r7, #4]
        }
 800467e:	4618      	mov	r0, r3
 8004680:	370c      	adds	r7, #12
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr
 800468a:	bf00      	nop
 800468c:	20000b08 	.word	0x20000b08

08004690 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

    BaseType_t xTaskGetSchedulerState( void )
    {
 8004690:	b480      	push	{r7}
 8004692:	b083      	sub	sp, #12
 8004694:	af00      	add	r7, sp, #0
        BaseType_t xReturn;

        traceENTER_xTaskGetSchedulerState();

        if( xSchedulerRunning == pdFALSE )
 8004696:	4b0b      	ldr	r3, [pc, #44]	@ (80046c4 <xTaskGetSchedulerState+0x34>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d102      	bne.n	80046a4 <xTaskGetSchedulerState+0x14>
        {
            xReturn = taskSCHEDULER_NOT_STARTED;
 800469e:	2301      	movs	r3, #1
 80046a0:	607b      	str	r3, [r7, #4]
 80046a2:	e008      	b.n	80046b6 <xTaskGetSchedulerState+0x26>
        {
            #if ( configNUMBER_OF_CORES > 1 )
                taskENTER_CRITICAL();
            #endif
            {
                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 80046a4:	4b08      	ldr	r3, [pc, #32]	@ (80046c8 <xTaskGetSchedulerState+0x38>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d102      	bne.n	80046b2 <xTaskGetSchedulerState+0x22>
                {
                    xReturn = taskSCHEDULER_RUNNING;
 80046ac:	2302      	movs	r3, #2
 80046ae:	607b      	str	r3, [r7, #4]
 80046b0:	e001      	b.n	80046b6 <xTaskGetSchedulerState+0x26>
                }
                else
                {
                    xReturn = taskSCHEDULER_SUSPENDED;
 80046b2:	2300      	movs	r3, #0
 80046b4:	607b      	str	r3, [r7, #4]
            #endif
        }

        traceRETURN_xTaskGetSchedulerState( xReturn );

        return xReturn;
 80046b6:	687b      	ldr	r3, [r7, #4]
    }
 80046b8:	4618      	mov	r0, r3
 80046ba:	370c      	adds	r7, #12
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	20000c14 	.word	0x20000c14
 80046c8:	20000c30 	.word	0x20000c30

080046cc <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
    {
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
        TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80046d8:	2300      	movs	r3, #0
 80046da:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityInherit( pxMutexHolder );

        /* If the mutex is taken by an interrupt, the mutex holder is NULL. Priority
         * inheritance is not applied in this scenario. */
        if( pxMutexHolder != NULL )
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	f000 8089 	beq.w	80047f6 <xTaskPriorityInherit+0x12a>
        {
            /* If the holder of the mutex has a priority below the priority of
             * the task attempting to obtain the mutex then it will temporarily
             * inherit the priority of the task attempting to obtain the mutex. */
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80046e8:	4b45      	ldr	r3, [pc, #276]	@ (8004800 <xTaskPriorityInherit+0x134>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80046ee:	429a      	cmp	r2, r3
 80046f0:	d278      	bcs.n	80047e4 <xTaskPriorityInherit+0x118>
            {
                /* Adjust the mutex holder state to account for its new
                 * priority.  Only reset the event list item value if the value is
                 * not being used for anything else. */
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	db06      	blt.n	8004708 <xTaskPriorityInherit+0x3c>
                {
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority );
 80046fa:	4b41      	ldr	r3, [pc, #260]	@ (8004800 <xTaskPriorityInherit+0x134>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004700:	f1c3 0207 	rsb	r2, r3, #7
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	619a      	str	r2, [r3, #24]
                    mtCOVERAGE_TEST_MARKER();
                }

                /* If the task being modified is in the ready state it will need
                 * to be moved into a new list. */
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	6959      	ldr	r1, [r3, #20]
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004710:	4613      	mov	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	4413      	add	r3, r2
 8004716:	009b      	lsls	r3, r3, #2
 8004718:	4a3a      	ldr	r2, [pc, #232]	@ (8004804 <xTaskPriorityInherit+0x138>)
 800471a:	4413      	add	r3, r2
 800471c:	4299      	cmp	r1, r3
 800471e:	d159      	bne.n	80047d4 <xTaskPriorityInherit+0x108>
                {
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	3304      	adds	r3, #4
 8004724:	4618      	mov	r0, r3
 8004726:	f7fe f94b 	bl	80029c0 <uxListRemove>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	d10a      	bne.n	8004746 <xTaskPriorityInherit+0x7a>
                    {
                        /* It is known that the task is in its ready list so
                         * there is no need to check again and the port level
                         * reset macro can be called directly. */
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004734:	2201      	movs	r2, #1
 8004736:	fa02 f303 	lsl.w	r3, r2, r3
 800473a:	43da      	mvns	r2, r3
 800473c:	4b32      	ldr	r3, [pc, #200]	@ (8004808 <xTaskPriorityInherit+0x13c>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	4013      	ands	r3, r2
 8004742:	4a31      	ldr	r2, [pc, #196]	@ (8004808 <xTaskPriorityInherit+0x13c>)
 8004744:	6013      	str	r3, [r2, #0]
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* Inherit the priority before being moved into the new list. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004746:	4b2e      	ldr	r3, [pc, #184]	@ (8004800 <xTaskPriorityInherit+0x134>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	62da      	str	r2, [r3, #44]	@ 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004754:	2201      	movs	r2, #1
 8004756:	409a      	lsls	r2, r3
 8004758:	4b2b      	ldr	r3, [pc, #172]	@ (8004808 <xTaskPriorityInherit+0x13c>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	4313      	orrs	r3, r2
 800475e:	4a2a      	ldr	r2, [pc, #168]	@ (8004808 <xTaskPriorityInherit+0x13c>)
 8004760:	6013      	str	r3, [r2, #0]
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004766:	4927      	ldr	r1, [pc, #156]	@ (8004804 <xTaskPriorityInherit+0x138>)
 8004768:	4613      	mov	r3, r2
 800476a:	009b      	lsls	r3, r3, #2
 800476c:	4413      	add	r3, r2
 800476e:	009b      	lsls	r3, r3, #2
 8004770:	440b      	add	r3, r1
 8004772:	3304      	adds	r3, #4
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	693b      	ldr	r3, [r7, #16]
 800477a:	68fa      	ldr	r2, [r7, #12]
 800477c:	609a      	str	r2, [r3, #8]
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	689a      	ldr	r2, [r3, #8]
 8004782:	693b      	ldr	r3, [r7, #16]
 8004784:	60da      	str	r2, [r3, #12]
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	689b      	ldr	r3, [r3, #8]
 800478a:	693a      	ldr	r2, [r7, #16]
 800478c:	3204      	adds	r2, #4
 800478e:	605a      	str	r2, [r3, #4]
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	1d1a      	adds	r2, r3, #4
 8004794:	68fb      	ldr	r3, [r7, #12]
 8004796:	609a      	str	r2, [r3, #8]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4a17      	ldr	r2, [pc, #92]	@ (8004804 <xTaskPriorityInherit+0x138>)
 80047a6:	441a      	add	r2, r3
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	615a      	str	r2, [r3, #20]
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047b0:	4914      	ldr	r1, [pc, #80]	@ (8004804 <xTaskPriorityInherit+0x138>)
 80047b2:	4613      	mov	r3, r2
 80047b4:	009b      	lsls	r3, r3, #2
 80047b6:	4413      	add	r3, r2
 80047b8:	009b      	lsls	r3, r3, #2
 80047ba:	440b      	add	r3, r1
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	693a      	ldr	r2, [r7, #16]
 80047c0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80047c2:	1c59      	adds	r1, r3, #1
 80047c4:	480f      	ldr	r0, [pc, #60]	@ (8004804 <xTaskPriorityInherit+0x138>)
 80047c6:	4613      	mov	r3, r2
 80047c8:	009b      	lsls	r3, r3, #2
 80047ca:	4413      	add	r3, r2
 80047cc:	009b      	lsls	r3, r3, #2
 80047ce:	4403      	add	r3, r0
 80047d0:	6019      	str	r1, [r3, #0]
 80047d2:	e004      	b.n	80047de <xTaskPriorityInherit+0x112>
                    #endif /* if ( configNUMBER_OF_CORES > 1 ) */
                }
                else
                {
                    /* Just inherit the priority. */
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047d4:	4b0a      	ldr	r3, [pc, #40]	@ (8004800 <xTaskPriorityInherit+0x134>)
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	62da      	str	r2, [r3, #44]	@ 0x2c
                }

                traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

                /* Inheritance occurred. */
                xReturn = pdTRUE;
 80047de:	2301      	movs	r3, #1
 80047e0:	617b      	str	r3, [r7, #20]
 80047e2:	e008      	b.n	80047f6 <xTaskPriorityInherit+0x12a>
            }
            else
            {
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80047e4:	693b      	ldr	r3, [r7, #16]
 80047e6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80047e8:	4b05      	ldr	r3, [pc, #20]	@ (8004800 <xTaskPriorityInherit+0x134>)
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047ee:	429a      	cmp	r2, r3
 80047f0:	d201      	bcs.n	80047f6 <xTaskPriorityInherit+0x12a>
                     * current priority of the mutex holder is not lower than the
                     * priority of the task attempting to take the mutex.
                     * Therefore the mutex holder must have already inherited a
                     * priority, but inheritance would have occurred if that had
                     * not been the case. */
                    xReturn = pdTRUE;
 80047f2:	2301      	movs	r3, #1
 80047f4:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityInherit( xReturn );

        return xReturn;
 80047f6:	697b      	ldr	r3, [r7, #20]
    }
 80047f8:	4618      	mov	r0, r3
 80047fa:	3718      	adds	r7, #24
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20000b08 	.word	0x20000b08
 8004804:	20000b0c 	.word	0x20000b0c
 8004808:	20000c10 	.word	0x20000c10

0800480c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
    {
 800480c:	b580      	push	{r7, lr}
 800480e:	b086      	sub	sp, #24
 8004810:	af00      	add	r7, sp, #0
 8004812:	6078      	str	r0, [r7, #4]
        TCB_t * const pxTCB = pxMutexHolder;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 8004818:	2300      	movs	r3, #0
 800481a:	617b      	str	r3, [r7, #20]

        traceENTER_xTaskPriorityDisinherit( pxMutexHolder );

        if( pxMutexHolder != NULL )
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	2b00      	cmp	r3, #0
 8004820:	f000 8082 	beq.w	8004928 <xTaskPriorityDisinherit+0x11c>
        {
            /* A task can only have an inherited priority if it holds the mutex.
             * If the mutex is held by a task then it cannot be given from an
             * interrupt, and if a mutex is given by the holding task then it must
             * be the running state task. */
            configASSERT( pxTCB == pxCurrentTCB );
 8004824:	4b43      	ldr	r3, [pc, #268]	@ (8004934 <xTaskPriorityDisinherit+0x128>)
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	429a      	cmp	r2, r3
 800482c:	d004      	beq.n	8004838 <xTaskPriorityDisinherit+0x2c>
 800482e:	f641 2128 	movw	r1, #6696	@ 0x1a28
 8004832:	4841      	ldr	r0, [pc, #260]	@ (8004938 <xTaskPriorityDisinherit+0x12c>)
 8004834:	f7fc fe1c 	bl	8001470 <vAssertCalled>
            configASSERT( pxTCB->uxMutexesHeld );
 8004838:	693b      	ldr	r3, [r7, #16]
 800483a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800483c:	2b00      	cmp	r3, #0
 800483e:	d104      	bne.n	800484a <xTaskPriorityDisinherit+0x3e>
 8004840:	f641 2129 	movw	r1, #6697	@ 0x1a29
 8004844:	483c      	ldr	r0, [pc, #240]	@ (8004938 <xTaskPriorityDisinherit+0x12c>)
 8004846:	f7fc fe13 	bl	8001470 <vAssertCalled>
            ( pxTCB->uxMutexesHeld )--;
 800484a:	693b      	ldr	r3, [r7, #16]
 800484c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800484e:	1e5a      	subs	r2, r3, #1
 8004850:	693b      	ldr	r3, [r7, #16]
 8004852:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Has the holder of the mutex inherited the priority of another
             * task? */
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004858:	693b      	ldr	r3, [r7, #16]
 800485a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800485c:	429a      	cmp	r2, r3
 800485e:	d063      	beq.n	8004928 <xTaskPriorityDisinherit+0x11c>
            {
                /* Only disinherit if no other mutexes are held. */
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004864:	2b00      	cmp	r3, #0
 8004866:	d15f      	bne.n	8004928 <xTaskPriorityDisinherit+0x11c>
                    /* A task can only have an inherited priority if it holds
                     * the mutex.  If the mutex is held by a task then it cannot be
                     * given from an interrupt, and if a mutex is given by the
                     * holding task then it must be the running state task.  Remove
                     * the holding task from the ready list. */
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	3304      	adds	r3, #4
 800486c:	4618      	mov	r0, r3
 800486e:	f7fe f8a7 	bl	80029c0 <uxListRemove>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d10a      	bne.n	800488e <xTaskPriorityDisinherit+0x82>
                    {
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800487c:	2201      	movs	r2, #1
 800487e:	fa02 f303 	lsl.w	r3, r2, r3
 8004882:	43da      	mvns	r2, r3
 8004884:	4b2d      	ldr	r3, [pc, #180]	@ (800493c <xTaskPriorityDisinherit+0x130>)
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	4013      	ands	r3, r2
 800488a:	4a2c      	ldr	r2, [pc, #176]	@ (800493c <xTaskPriorityDisinherit+0x130>)
 800488c:	6013      	str	r3, [r2, #0]
                    }

                    /* Disinherit the priority before adding the task into the
                     * new  ready list. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8004892:	693b      	ldr	r3, [r7, #16]
 8004894:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Reset the event list item value.  It cannot be in use for
                     * any other purpose if this task is running, and it must be
                     * running to give back the mutex. */
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority );
 8004896:	693b      	ldr	r3, [r7, #16]
 8004898:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800489a:	f1c3 0207 	rsb	r2, r3, #7
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	619a      	str	r2, [r3, #24]
                    prvAddTaskToReadyList( pxTCB );
 80048a2:	693b      	ldr	r3, [r7, #16]
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	2201      	movs	r2, #1
 80048a8:	409a      	lsls	r2, r3
 80048aa:	4b24      	ldr	r3, [pc, #144]	@ (800493c <xTaskPriorityDisinherit+0x130>)
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	4a22      	ldr	r2, [pc, #136]	@ (800493c <xTaskPriorityDisinherit+0x130>)
 80048b2:	6013      	str	r3, [r2, #0]
 80048b4:	693b      	ldr	r3, [r7, #16]
 80048b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048b8:	4921      	ldr	r1, [pc, #132]	@ (8004940 <xTaskPriorityDisinherit+0x134>)
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	440b      	add	r3, r1
 80048c4:	3304      	adds	r3, #4
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	68fa      	ldr	r2, [r7, #12]
 80048ce:	609a      	str	r2, [r3, #8]
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	689a      	ldr	r2, [r3, #8]
 80048d4:	693b      	ldr	r3, [r7, #16]
 80048d6:	60da      	str	r2, [r3, #12]
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	689b      	ldr	r3, [r3, #8]
 80048dc:	693a      	ldr	r2, [r7, #16]
 80048de:	3204      	adds	r2, #4
 80048e0:	605a      	str	r2, [r3, #4]
 80048e2:	693b      	ldr	r3, [r7, #16]
 80048e4:	1d1a      	adds	r2, r3, #4
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	609a      	str	r2, [r3, #8]
 80048ea:	693b      	ldr	r3, [r7, #16]
 80048ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80048ee:	4613      	mov	r3, r2
 80048f0:	009b      	lsls	r3, r3, #2
 80048f2:	4413      	add	r3, r2
 80048f4:	009b      	lsls	r3, r3, #2
 80048f6:	4a12      	ldr	r2, [pc, #72]	@ (8004940 <xTaskPriorityDisinherit+0x134>)
 80048f8:	441a      	add	r2, r3
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	615a      	str	r2, [r3, #20]
 80048fe:	693b      	ldr	r3, [r7, #16]
 8004900:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004902:	490f      	ldr	r1, [pc, #60]	@ (8004940 <xTaskPriorityDisinherit+0x134>)
 8004904:	4613      	mov	r3, r2
 8004906:	009b      	lsls	r3, r3, #2
 8004908:	4413      	add	r3, r2
 800490a:	009b      	lsls	r3, r3, #2
 800490c:	440b      	add	r3, r1
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004914:	1c59      	adds	r1, r3, #1
 8004916:	480a      	ldr	r0, [pc, #40]	@ (8004940 <xTaskPriorityDisinherit+0x134>)
 8004918:	4613      	mov	r3, r2
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	4413      	add	r3, r2
 800491e:	009b      	lsls	r3, r3, #2
 8004920:	4403      	add	r3, r0
 8004922:	6019      	str	r1, [r3, #0]
                     * in an order different to that in which they were taken.
                     * If a context switch did not occur when the first mutex was
                     * returned, even if a task was waiting on it, then a context
                     * switch should occur when the last mutex is returned whether
                     * a task is waiting on it or not. */
                    xReturn = pdTRUE;
 8004924:	2301      	movs	r3, #1
 8004926:	617b      	str	r3, [r7, #20]
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_xTaskPriorityDisinherit( xReturn );

        return xReturn;
 8004928:	697b      	ldr	r3, [r7, #20]
    }
 800492a:	4618      	mov	r0, r3
 800492c:	3718      	adds	r7, #24
 800492e:	46bd      	mov	sp, r7
 8004930:	bd80      	pop	{r7, pc}
 8004932:	bf00      	nop
 8004934:	20000b08 	.word	0x20000b08
 8004938:	08022ed8 	.word	0x08022ed8
 800493c:	20000c10 	.word	0x20000c10
 8004940:	20000b0c 	.word	0x20000b0c

08004944 <vTaskPriorityDisinheritAfterTimeout>:

#if ( configUSE_MUTEXES == 1 )

    void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder,
                                              UBaseType_t uxHighestPriorityWaitingTask )
    {
 8004944:	b580      	push	{r7, lr}
 8004946:	b088      	sub	sp, #32
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
 800494c:	6039      	str	r1, [r7, #0]
        TCB_t * const pxTCB = pxMutexHolder;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	61bb      	str	r3, [r7, #24]
        UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
        const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004952:	2301      	movs	r3, #1
 8004954:	617b      	str	r3, [r7, #20]

        traceENTER_vTaskPriorityDisinheritAfterTimeout( pxMutexHolder, uxHighestPriorityWaitingTask );

        if( pxMutexHolder != NULL )
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	2b00      	cmp	r3, #0
 800495a:	f000 8096 	beq.w	8004a8a <vTaskPriorityDisinheritAfterTimeout+0x146>
        {
            /* If pxMutexHolder is not NULL then the holder must hold at least
             * one mutex. */
            configASSERT( pxTCB->uxMutexesHeld );
 800495e:	69bb      	ldr	r3, [r7, #24]
 8004960:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <vTaskPriorityDisinheritAfterTimeout+0x2c>
 8004966:	f641 2186 	movw	r1, #6790	@ 0x1a86
 800496a:	484a      	ldr	r0, [pc, #296]	@ (8004a94 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 800496c:	f7fc fd80 	bl	8001470 <vAssertCalled>

            /* Determine the priority to which the priority of the task that
             * holds the mutex should be set.  This will be the greater of the
             * holding task's base priority and the priority of the highest
             * priority task that is waiting to obtain the mutex. */
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004974:	683a      	ldr	r2, [r7, #0]
 8004976:	429a      	cmp	r2, r3
 8004978:	d902      	bls.n	8004980 <vTaskPriorityDisinheritAfterTimeout+0x3c>
            {
                uxPriorityToUse = uxHighestPriorityWaitingTask;
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	61fb      	str	r3, [r7, #28]
 800497e:	e002      	b.n	8004986 <vTaskPriorityDisinheritAfterTimeout+0x42>
            }
            else
            {
                uxPriorityToUse = pxTCB->uxBasePriority;
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004984:	61fb      	str	r3, [r7, #28]
            }

            /* Does the priority need to change? */
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004986:	69bb      	ldr	r3, [r7, #24]
 8004988:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800498a:	69fa      	ldr	r2, [r7, #28]
 800498c:	429a      	cmp	r2, r3
 800498e:	d07c      	beq.n	8004a8a <vTaskPriorityDisinheritAfterTimeout+0x146>
            {
                /* Only disinherit if no other mutexes are held.  This is a
                 * simplification in the priority inheritance implementation.  If
                 * the task that holds the mutex is also holding other mutexes then
                 * the other mutexes may have caused the priority inheritance. */
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004990:	69bb      	ldr	r3, [r7, #24]
 8004992:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004994:	697a      	ldr	r2, [r7, #20]
 8004996:	429a      	cmp	r2, r3
 8004998:	d177      	bne.n	8004a8a <vTaskPriorityDisinheritAfterTimeout+0x146>
                {
                    /* If a task has timed out because it already holds the
                     * mutex it was trying to obtain then it cannot of inherited
                     * its own priority. */
                    configASSERT( pxTCB != pxCurrentTCB );
 800499a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a98 <vTaskPriorityDisinheritAfterTimeout+0x154>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69ba      	ldr	r2, [r7, #24]
 80049a0:	429a      	cmp	r2, r3
 80049a2:	d104      	bne.n	80049ae <vTaskPriorityDisinheritAfterTimeout+0x6a>
 80049a4:	f641 21a1 	movw	r1, #6817	@ 0x1aa1
 80049a8:	483a      	ldr	r0, [pc, #232]	@ (8004a94 <vTaskPriorityDisinheritAfterTimeout+0x150>)
 80049aa:	f7fc fd61 	bl	8001470 <vAssertCalled>

                    /* Disinherit the priority, remembering the previous
                     * priority to facilitate determining the subject task's
                     * state. */
                    traceTASK_PRIORITY_DISINHERIT( pxTCB, uxPriorityToUse );
                    uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049b2:	613b      	str	r3, [r7, #16]
                    pxTCB->uxPriority = uxPriorityToUse;
 80049b4:	69bb      	ldr	r3, [r7, #24]
 80049b6:	69fa      	ldr	r2, [r7, #28]
 80049b8:	62da      	str	r2, [r3, #44]	@ 0x2c

                    /* Only reset the event list item value if the value is not
                     * being used for anything else. */
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == ( ( TickType_t ) 0U ) )
 80049ba:	69bb      	ldr	r3, [r7, #24]
 80049bc:	699b      	ldr	r3, [r3, #24]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	db04      	blt.n	80049cc <vTaskPriorityDisinheritAfterTimeout+0x88>
                    {
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse );
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f1c3 0207 	rsb	r2, r3, #7
 80049c8:	69bb      	ldr	r3, [r7, #24]
 80049ca:	619a      	str	r2, [r3, #24]
                     * then the task that holds the mutex could be in either the
                     * Ready, Blocked or Suspended states.  Only remove the task
                     * from its current state list if it is in the Ready state as
                     * the task's priority is going to change and there is one
                     * Ready list per priority. */
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80049cc:	69bb      	ldr	r3, [r7, #24]
 80049ce:	6959      	ldr	r1, [r3, #20]
 80049d0:	693a      	ldr	r2, [r7, #16]
 80049d2:	4613      	mov	r3, r2
 80049d4:	009b      	lsls	r3, r3, #2
 80049d6:	4413      	add	r3, r2
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4a30      	ldr	r2, [pc, #192]	@ (8004a9c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 80049dc:	4413      	add	r3, r2
 80049de:	4299      	cmp	r1, r3
 80049e0:	d153      	bne.n	8004a8a <vTaskPriorityDisinheritAfterTimeout+0x146>
                    {
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	3304      	adds	r3, #4
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fd ffea 	bl	80029c0 <uxListRemove>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10a      	bne.n	8004a08 <vTaskPriorityDisinheritAfterTimeout+0xc4>
                        {
                            /* It is known that the task is in its ready list so
                             * there is no need to check again and the port level
                             * reset macro can be called directly. */
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80049f6:	2201      	movs	r2, #1
 80049f8:	fa02 f303 	lsl.w	r3, r2, r3
 80049fc:	43da      	mvns	r2, r3
 80049fe:	4b28      	ldr	r3, [pc, #160]	@ (8004aa0 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	4013      	ands	r3, r2
 8004a04:	4a26      	ldr	r2, [pc, #152]	@ (8004aa0 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004a06:	6013      	str	r3, [r2, #0]
                        else
                        {
                            mtCOVERAGE_TEST_MARKER();
                        }

                        prvAddTaskToReadyList( pxTCB );
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004a0c:	2201      	movs	r2, #1
 8004a0e:	409a      	lsls	r2, r3
 8004a10:	4b23      	ldr	r3, [pc, #140]	@ (8004aa0 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	4a22      	ldr	r2, [pc, #136]	@ (8004aa0 <vTaskPriorityDisinheritAfterTimeout+0x15c>)
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	69bb      	ldr	r3, [r7, #24]
 8004a1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a1e:	491f      	ldr	r1, [pc, #124]	@ (8004a9c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004a20:	4613      	mov	r3, r2
 8004a22:	009b      	lsls	r3, r3, #2
 8004a24:	4413      	add	r3, r2
 8004a26:	009b      	lsls	r3, r3, #2
 8004a28:	440b      	add	r3, r1
 8004a2a:	3304      	adds	r3, #4
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	60fb      	str	r3, [r7, #12]
 8004a30:	69bb      	ldr	r3, [r7, #24]
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	609a      	str	r2, [r3, #8]
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	689a      	ldr	r2, [r3, #8]
 8004a3a:	69bb      	ldr	r3, [r7, #24]
 8004a3c:	60da      	str	r2, [r3, #12]
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	689b      	ldr	r3, [r3, #8]
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	3204      	adds	r2, #4
 8004a46:	605a      	str	r2, [r3, #4]
 8004a48:	69bb      	ldr	r3, [r7, #24]
 8004a4a:	1d1a      	adds	r2, r3, #4
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	609a      	str	r2, [r3, #8]
 8004a50:	69bb      	ldr	r3, [r7, #24]
 8004a52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a54:	4613      	mov	r3, r2
 8004a56:	009b      	lsls	r3, r3, #2
 8004a58:	4413      	add	r3, r2
 8004a5a:	009b      	lsls	r3, r3, #2
 8004a5c:	4a0f      	ldr	r2, [pc, #60]	@ (8004a9c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004a5e:	441a      	add	r2, r3
 8004a60:	69bb      	ldr	r3, [r7, #24]
 8004a62:	615a      	str	r2, [r3, #20]
 8004a64:	69bb      	ldr	r3, [r7, #24]
 8004a66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004a68:	490c      	ldr	r1, [pc, #48]	@ (8004a9c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004a6a:	4613      	mov	r3, r2
 8004a6c:	009b      	lsls	r3, r3, #2
 8004a6e:	4413      	add	r3, r2
 8004a70:	009b      	lsls	r3, r3, #2
 8004a72:	440b      	add	r3, r1
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004a7a:	1c59      	adds	r1, r3, #1
 8004a7c:	4807      	ldr	r0, [pc, #28]	@ (8004a9c <vTaskPriorityDisinheritAfterTimeout+0x158>)
 8004a7e:	4613      	mov	r3, r2
 8004a80:	009b      	lsls	r3, r3, #2
 8004a82:	4413      	add	r3, r2
 8004a84:	009b      	lsls	r3, r3, #2
 8004a86:	4403      	add	r3, r0
 8004a88:	6019      	str	r1, [r3, #0]
        {
            mtCOVERAGE_TEST_MARKER();
        }

        traceRETURN_vTaskPriorityDisinheritAfterTimeout();
    }
 8004a8a:	bf00      	nop
 8004a8c:	3720      	adds	r7, #32
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}
 8004a92:	bf00      	nop
 8004a94:	08022ed8 	.word	0x08022ed8
 8004a98:	20000b08 	.word	0x20000b08
 8004a9c:	20000b0c 	.word	0x20000b0c
 8004aa0:	20000c10 	.word	0x20000c10

08004aa4 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8004aa4:	b480      	push	{r7}
 8004aa6:	b083      	sub	sp, #12
 8004aa8:	af00      	add	r7, sp, #0
    TickType_t uxReturn;

    traceENTER_uxTaskResetEventItemValue();

    uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 8004aaa:	4b09      	ldr	r3, [pc, #36]	@ (8004ad0 <uxTaskResetEventItemValue+0x2c>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	607b      	str	r3, [r7, #4]

    /* Reset the event list item to its normal value - so it can be used with
     * queues and semaphores. */
    listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) );
 8004ab2:	4b07      	ldr	r3, [pc, #28]	@ (8004ad0 <uxTaskResetEventItemValue+0x2c>)
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ab8:	4b05      	ldr	r3, [pc, #20]	@ (8004ad0 <uxTaskResetEventItemValue+0x2c>)
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f1c2 0207 	rsb	r2, r2, #7
 8004ac0:	619a      	str	r2, [r3, #24]

    traceRETURN_uxTaskResetEventItemValue( uxReturn );

    return uxReturn;
 8004ac2:	687b      	ldr	r3, [r7, #4]
}
 8004ac4:	4618      	mov	r0, r3
 8004ac6:	370c      	adds	r7, #12
 8004ac8:	46bd      	mov	sp, r7
 8004aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ace:	4770      	bx	lr
 8004ad0:	20000b08 	.word	0x20000b08

08004ad4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

    TaskHandle_t pvTaskIncrementMutexHeldCount( void )
    {
 8004ad4:	b480      	push	{r7}
 8004ad6:	b083      	sub	sp, #12
 8004ad8:	af00      	add	r7, sp, #0
        TCB_t * pxTCB;

        traceENTER_pvTaskIncrementMutexHeldCount();

        pxTCB = pxCurrentTCB;
 8004ada:	4b09      	ldr	r3, [pc, #36]	@ (8004b00 <pvTaskIncrementMutexHeldCount+0x2c>)
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	607b      	str	r3, [r7, #4]

        /* If xSemaphoreCreateMutex() is called before any tasks have been created
         * then pxCurrentTCB will be NULL. */
        if( pxTCB != NULL )
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d004      	beq.n	8004af0 <pvTaskIncrementMutexHeldCount+0x1c>
        {
            ( pxTCB->uxMutexesHeld )++;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004aea:	1c5a      	adds	r2, r3, #1
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	651a      	str	r2, [r3, #80]	@ 0x50
        }

        traceRETURN_pvTaskIncrementMutexHeldCount( pxTCB );

        return pxTCB;
 8004af0:	687b      	ldr	r3, [r7, #4]
    }
 8004af2:	4618      	mov	r0, r3
 8004af4:	370c      	adds	r7, #12
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr
 8004afe:	bf00      	nop
 8004b00:	20000b08 	.word	0x20000b08

08004b04 <ulTaskGenericNotifyTake>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    uint32_t ulTaskGenericNotifyTake( UBaseType_t uxIndexToWaitOn,
                                      BaseType_t xClearCountOnExit,
                                      TickType_t xTicksToWait )
    {
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b088      	sub	sp, #32
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	60f8      	str	r0, [r7, #12]
 8004b0c:	60b9      	str	r1, [r7, #8]
 8004b0e:	607a      	str	r2, [r7, #4]
        uint32_t ulReturn;
        BaseType_t xAlreadyYielded, xShouldBlock = pdFALSE;
 8004b10:	2300      	movs	r3, #0
 8004b12:	61fb      	str	r3, [r7, #28]

        traceENTER_ulTaskGenericNotifyTake( uxIndexToWaitOn, xClearCountOnExit, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d004      	beq.n	8004b24 <ulTaskGenericNotifyTake+0x20>
 8004b1a:	f641 51c7 	movw	r1, #7623	@ 0x1dc7
 8004b1e:	4833      	ldr	r0, [pc, #204]	@ (8004bec <ulTaskGenericNotifyTake+0xe8>)
 8004b20:	f7fc fca6 	bl	8001470 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8004b24:	f7fe ff96 	bl	8003a54 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check if a notification
             * has occurred and set the flag to indicate that we are waiting for
             * a notification. If we do not do so, a notification sent from an ISR
             * will get lost. */
            taskENTER_CRITICAL();
 8004b28:	f000 fe12 	bl	8005750 <vPortEnterCritical>
            {
                /* Only block if the notification count is not already non-zero. */
                if( pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] == 0U )
 8004b2c:	4b30      	ldr	r3, [pc, #192]	@ (8004bf0 <ulTaskGenericNotifyTake+0xec>)
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3318      	adds	r3, #24
 8004b34:	009b      	lsls	r3, r3, #2
 8004b36:	4413      	add	r3, r2
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d10b      	bne.n	8004b56 <ulTaskGenericNotifyTake+0x52>
                {
                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8004b3e:	4b2c      	ldr	r3, [pc, #176]	@ (8004bf0 <ulTaskGenericNotifyTake+0xec>)
 8004b40:	681a      	ldr	r2, [r3, #0]
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	4413      	add	r3, r2
 8004b46:	3368      	adds	r3, #104	@ 0x68
 8004b48:	2201      	movs	r2, #1
 8004b4a:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <ulTaskGenericNotifyTake+0x52>
                    {
                        xShouldBlock = pdTRUE;
 8004b52:	2301      	movs	r3, #1
 8004b54:	61fb      	str	r3, [r7, #28]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004b56:	f000 fe27 	bl	80057a8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	2b01      	cmp	r3, #1
 8004b5e:	d103      	bne.n	8004b68 <ulTaskGenericNotifyTake+0x64>
            {
                traceTASK_NOTIFY_TAKE_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b60:	2101      	movs	r1, #1
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f000 fc3a 	bl	80053dc <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8004b68:	f7fe ff82 	bl	8003a70 <xTaskResumeAll>
 8004b6c:	61b8      	str	r0, [r7, #24]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d10a      	bne.n	8004b8a <ulTaskGenericNotifyTake+0x86>
 8004b74:	69bb      	ldr	r3, [r7, #24]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d107      	bne.n	8004b8a <ulTaskGenericNotifyTake+0x86>
        {
            taskYIELD_WITHIN_API();
 8004b7a:	4b1e      	ldr	r3, [pc, #120]	@ (8004bf4 <ulTaskGenericNotifyTake+0xf0>)
 8004b7c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004b80:	601a      	str	r2, [r3, #0]
 8004b82:	f3bf 8f4f 	dsb	sy
 8004b86:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8004b8a:	f000 fde1 	bl	8005750 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_TAKE( uxIndexToWaitOn );
            ulReturn = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8004b8e:	4b18      	ldr	r3, [pc, #96]	@ (8004bf0 <ulTaskGenericNotifyTake+0xec>)
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3318      	adds	r3, #24
 8004b96:	009b      	lsls	r3, r3, #2
 8004b98:	4413      	add	r3, r2
 8004b9a:	685b      	ldr	r3, [r3, #4]
 8004b9c:	617b      	str	r3, [r7, #20]

            if( ulReturn != 0U )
 8004b9e:	697b      	ldr	r3, [r7, #20]
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d014      	beq.n	8004bce <ulTaskGenericNotifyTake+0xca>
            {
                if( xClearCountOnExit != pdFALSE )
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <ulTaskGenericNotifyTake+0xb8>
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ( uint32_t ) 0U;
 8004baa:	4b11      	ldr	r3, [pc, #68]	@ (8004bf0 <ulTaskGenericNotifyTake+0xec>)
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	3318      	adds	r3, #24
 8004bb2:	009b      	lsls	r3, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	2200      	movs	r2, #0
 8004bb8:	605a      	str	r2, [r3, #4]
 8004bba:	e008      	b.n	8004bce <ulTaskGenericNotifyTake+0xca>
                }
                else
                {
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] = ulReturn - ( uint32_t ) 1;
 8004bbc:	4b0c      	ldr	r3, [pc, #48]	@ (8004bf0 <ulTaskGenericNotifyTake+0xec>)
 8004bbe:	6819      	ldr	r1, [r3, #0]
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	1e5a      	subs	r2, r3, #1
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	3318      	adds	r3, #24
 8004bc8:	009b      	lsls	r3, r3, #2
 8004bca:	440b      	add	r3, r1
 8004bcc:	605a      	str	r2, [r3, #4]
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8004bce:	4b08      	ldr	r3, [pc, #32]	@ (8004bf0 <ulTaskGenericNotifyTake+0xec>)
 8004bd0:	681a      	ldr	r2, [r3, #0]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	4413      	add	r3, r2
 8004bd6:	3368      	adds	r3, #104	@ 0x68
 8004bd8:	2200      	movs	r2, #0
 8004bda:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004bdc:	f000 fde4 	bl	80057a8 <vPortExitCritical>

        traceRETURN_ulTaskGenericNotifyTake( ulReturn );

        return ulReturn;
 8004be0:	697b      	ldr	r3, [r7, #20]
    }
 8004be2:	4618      	mov	r0, r3
 8004be4:	3720      	adds	r7, #32
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	08022ed8 	.word	0x08022ed8
 8004bf0:	20000b08 	.word	0x20000b08
 8004bf4:	e000ed04 	.word	0xe000ed04

08004bf8 <xTaskGenericNotifyWait>:
    BaseType_t xTaskGenericNotifyWait( UBaseType_t uxIndexToWaitOn,
                                       uint32_t ulBitsToClearOnEntry,
                                       uint32_t ulBitsToClearOnExit,
                                       uint32_t * pulNotificationValue,
                                       TickType_t xTicksToWait )
    {
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b088      	sub	sp, #32
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	607a      	str	r2, [r7, #4]
 8004c04:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn, xAlreadyYielded, xShouldBlock = pdFALSE;
 8004c06:	2300      	movs	r3, #0
 8004c08:	61bb      	str	r3, [r7, #24]

        traceENTER_xTaskGenericNotifyWait( uxIndexToWaitOn, ulBitsToClearOnEntry, ulBitsToClearOnExit, pulNotificationValue, xTicksToWait );

        configASSERT( uxIndexToWaitOn < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d004      	beq.n	8004c1a <xTaskGenericNotifyWait+0x22>
 8004c10:	f641 612f 	movw	r1, #7727	@ 0x1e2f
 8004c14:	483e      	ldr	r0, [pc, #248]	@ (8004d10 <xTaskGenericNotifyWait+0x118>)
 8004c16:	f7fc fc2b 	bl	8001470 <vAssertCalled>

        /* We suspend the scheduler here as prvAddCurrentTaskToDelayedList is a
         * non-deterministic operation. */
        vTaskSuspendAll();
 8004c1a:	f7fe ff1b 	bl	8003a54 <vTaskSuspendAll>
        {
            /* We MUST enter a critical section to atomically check and update the
             * task notification value. If we do not do so, a notification from
             * an ISR will get lost. */
            taskENTER_CRITICAL();
 8004c1e:	f000 fd97 	bl	8005750 <vPortEnterCritical>
            {
                /* Only block if a notification is not already pending. */
                if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8004c22:	4b3c      	ldr	r3, [pc, #240]	@ (8004d14 <xTaskGenericNotifyWait+0x11c>)
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	4413      	add	r3, r2
 8004c2a:	3368      	adds	r3, #104	@ 0x68
 8004c2c:	781b      	ldrb	r3, [r3, #0]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	2b02      	cmp	r3, #2
 8004c32:	d01a      	beq.n	8004c6a <xTaskGenericNotifyWait+0x72>
                {
                    /* Clear bits in the task's notification value as bits may get
                     * set by the notifying task or interrupt. This can be used
                     * to clear the value to zero. */
                    pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnEntry;
 8004c34:	4b37      	ldr	r3, [pc, #220]	@ (8004d14 <xTaskGenericNotifyWait+0x11c>)
 8004c36:	681a      	ldr	r2, [r3, #0]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	3318      	adds	r3, #24
 8004c3c:	009b      	lsls	r3, r3, #2
 8004c3e:	4413      	add	r3, r2
 8004c40:	6859      	ldr	r1, [r3, #4]
 8004c42:	68bb      	ldr	r3, [r7, #8]
 8004c44:	43db      	mvns	r3, r3
 8004c46:	4019      	ands	r1, r3
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	3318      	adds	r3, #24
 8004c4c:	009b      	lsls	r3, r3, #2
 8004c4e:	4413      	add	r3, r2
 8004c50:	6059      	str	r1, [r3, #4]

                    /* Mark this task as waiting for a notification. */
                    pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskWAITING_NOTIFICATION;
 8004c52:	4b30      	ldr	r3, [pc, #192]	@ (8004d14 <xTaskGenericNotifyWait+0x11c>)
 8004c54:	681a      	ldr	r2, [r3, #0]
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	3368      	adds	r3, #104	@ 0x68
 8004c5c:	2201      	movs	r2, #1
 8004c5e:	701a      	strb	r2, [r3, #0]

                    if( xTicksToWait > ( TickType_t ) 0 )
 8004c60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d001      	beq.n	8004c6a <xTaskGenericNotifyWait+0x72>
                    {
                        xShouldBlock = pdTRUE;
 8004c66:	2301      	movs	r3, #1
 8004c68:	61bb      	str	r3, [r7, #24]
                else
                {
                    mtCOVERAGE_TEST_MARKER();
                }
            }
            taskEXIT_CRITICAL();
 8004c6a:	f000 fd9d 	bl	80057a8 <vPortExitCritical>

            /* We are now out of the critical section but the scheduler is still
             * suspended, so we are safe to do non-deterministic operations such
             * as prvAddCurrentTaskToDelayedList. */
            if( xShouldBlock == pdTRUE )
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	2b01      	cmp	r3, #1
 8004c72:	d103      	bne.n	8004c7c <xTaskGenericNotifyWait+0x84>
            {
                traceTASK_NOTIFY_WAIT_BLOCK( uxIndexToWaitOn );
                prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004c74:	2101      	movs	r1, #1
 8004c76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c78:	f000 fbb0 	bl	80053dc <prvAddCurrentTaskToDelayedList>
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        xAlreadyYielded = xTaskResumeAll();
 8004c7c:	f7fe fef8 	bl	8003a70 <xTaskResumeAll>
 8004c80:	6178      	str	r0, [r7, #20]

        /* Force a reschedule if xTaskResumeAll has not already done so. */
        if( ( xShouldBlock == pdTRUE ) && ( xAlreadyYielded == pdFALSE ) )
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d10a      	bne.n	8004c9e <xTaskGenericNotifyWait+0xa6>
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d107      	bne.n	8004c9e <xTaskGenericNotifyWait+0xa6>
        {
            taskYIELD_WITHIN_API();
 8004c8e:	4b22      	ldr	r3, [pc, #136]	@ (8004d18 <xTaskGenericNotifyWait+0x120>)
 8004c90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c94:	601a      	str	r2, [r3, #0]
 8004c96:	f3bf 8f4f 	dsb	sy
 8004c9a:	f3bf 8f6f 	isb	sy
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }

        taskENTER_CRITICAL();
 8004c9e:	f000 fd57 	bl	8005750 <vPortEnterCritical>
        {
            traceTASK_NOTIFY_WAIT( uxIndexToWaitOn );

            if( pulNotificationValue != NULL )
 8004ca2:	683b      	ldr	r3, [r7, #0]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d008      	beq.n	8004cba <xTaskGenericNotifyWait+0xc2>
            {
                /* Output the current notification value, which may or may not
                 * have changed. */
                *pulNotificationValue = pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ];
 8004ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d14 <xTaskGenericNotifyWait+0x11c>)
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3318      	adds	r3, #24
 8004cb0:	009b      	lsls	r3, r3, #2
 8004cb2:	4413      	add	r3, r2
 8004cb4:	685a      	ldr	r2, [r3, #4]
 8004cb6:	683b      	ldr	r3, [r7, #0]
 8004cb8:	601a      	str	r2, [r3, #0]

            /* If ucNotifyValue is set then either the task never entered the
             * blocked state (because a notification was already pending) or the
             * task unblocked because of a notification.  Otherwise the task
             * unblocked because of a timeout. */
            if( pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] != taskNOTIFICATION_RECEIVED )
 8004cba:	4b16      	ldr	r3, [pc, #88]	@ (8004d14 <xTaskGenericNotifyWait+0x11c>)
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4413      	add	r3, r2
 8004cc2:	3368      	adds	r3, #104	@ 0x68
 8004cc4:	781b      	ldrb	r3, [r3, #0]
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	2b02      	cmp	r3, #2
 8004cca:	d002      	beq.n	8004cd2 <xTaskGenericNotifyWait+0xda>
            {
                /* A notification was not received. */
                xReturn = pdFALSE;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	61fb      	str	r3, [r7, #28]
 8004cd0:	e010      	b.n	8004cf4 <xTaskGenericNotifyWait+0xfc>
            }
            else
            {
                /* A notification was already pending or a notification was
                 * received while the task was waiting. */
                pxCurrentTCB->ulNotifiedValue[ uxIndexToWaitOn ] &= ~ulBitsToClearOnExit;
 8004cd2:	4b10      	ldr	r3, [pc, #64]	@ (8004d14 <xTaskGenericNotifyWait+0x11c>)
 8004cd4:	681a      	ldr	r2, [r3, #0]
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	3318      	adds	r3, #24
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	6859      	ldr	r1, [r3, #4]
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	43db      	mvns	r3, r3
 8004ce4:	4019      	ands	r1, r3
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	3318      	adds	r3, #24
 8004cea:	009b      	lsls	r3, r3, #2
 8004cec:	4413      	add	r3, r2
 8004cee:	6059      	str	r1, [r3, #4]
                xReturn = pdTRUE;
 8004cf0:	2301      	movs	r3, #1
 8004cf2:	61fb      	str	r3, [r7, #28]
            }

            pxCurrentTCB->ucNotifyState[ uxIndexToWaitOn ] = taskNOT_WAITING_NOTIFICATION;
 8004cf4:	4b07      	ldr	r3, [pc, #28]	@ (8004d14 <xTaskGenericNotifyWait+0x11c>)
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	3368      	adds	r3, #104	@ 0x68
 8004cfe:	2200      	movs	r2, #0
 8004d00:	701a      	strb	r2, [r3, #0]
        }
        taskEXIT_CRITICAL();
 8004d02:	f000 fd51 	bl	80057a8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotifyWait( xReturn );

        return xReturn;
 8004d06:	69fb      	ldr	r3, [r7, #28]
    }
 8004d08:	4618      	mov	r0, r3
 8004d0a:	3720      	adds	r7, #32
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	08022ed8 	.word	0x08022ed8
 8004d14:	20000b08 	.word	0x20000b08
 8004d18:	e000ed04 	.word	0xe000ed04

08004d1c <xTaskGenericNotify>:
    BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify,
                                   UBaseType_t uxIndexToNotify,
                                   uint32_t ulValue,
                                   eNotifyAction eAction,
                                   uint32_t * pulPreviousNotificationValue )
    {
 8004d1c:	b580      	push	{r7, lr}
 8004d1e:	b08a      	sub	sp, #40	@ 0x28
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	60f8      	str	r0, [r7, #12]
 8004d24:	60b9      	str	r1, [r7, #8]
 8004d26:	607a      	str	r2, [r7, #4]
 8004d28:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        BaseType_t xReturn = pdPASS;
 8004d2a:	2301      	movs	r3, #1
 8004d2c:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucOriginalNotifyState;

        traceENTER_xTaskGenericNotify( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue );

        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004d2e:	68bb      	ldr	r3, [r7, #8]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d004      	beq.n	8004d3e <xTaskGenericNotify+0x22>
 8004d34:	f641 61a4 	movw	r1, #7844	@ 0x1ea4
 8004d38:	487b      	ldr	r0, [pc, #492]	@ (8004f28 <xTaskGenericNotify+0x20c>)
 8004d3a:	f7fc fb99 	bl	8001470 <vAssertCalled>
        configASSERT( xTaskToNotify );
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d104      	bne.n	8004d4e <xTaskGenericNotify+0x32>
 8004d44:	f641 61a5 	movw	r1, #7845	@ 0x1ea5
 8004d48:	4877      	ldr	r0, [pc, #476]	@ (8004f28 <xTaskGenericNotify+0x20c>)
 8004d4a:	f7fc fb91 	bl	8001470 <vAssertCalled>
        pxTCB = xTaskToNotify;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	623b      	str	r3, [r7, #32]

        taskENTER_CRITICAL();
 8004d52:	f000 fcfd 	bl	8005750 <vPortEnterCritical>
        {
            if( pulPreviousNotificationValue != NULL )
 8004d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d007      	beq.n	8004d6c <xTaskGenericNotify+0x50>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004d5c:	6a3a      	ldr	r2, [r7, #32]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	3318      	adds	r3, #24
 8004d62:	009b      	lsls	r3, r3, #2
 8004d64:	4413      	add	r3, r2
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d6a:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004d6c:	6a3a      	ldr	r2, [r7, #32]
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	4413      	add	r3, r2
 8004d72:	3368      	adds	r3, #104	@ 0x68
 8004d74:	781b      	ldrb	r3, [r3, #0]
 8004d76:	77fb      	strb	r3, [r7, #31]

            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004d78:	6a3a      	ldr	r2, [r7, #32]
 8004d7a:	68bb      	ldr	r3, [r7, #8]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	3368      	adds	r3, #104	@ 0x68
 8004d80:	2202      	movs	r2, #2
 8004d82:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004d84:	78fb      	ldrb	r3, [r7, #3]
 8004d86:	2b04      	cmp	r3, #4
 8004d88:	d83f      	bhi.n	8004e0a <xTaskGenericNotify+0xee>
 8004d8a:	a201      	add	r2, pc, #4	@ (adr r2, 8004d90 <xTaskGenericNotify+0x74>)
 8004d8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d90:	08004e1f 	.word	0x08004e1f
 8004d94:	08004da5 	.word	0x08004da5
 8004d98:	08004dc3 	.word	0x08004dc3
 8004d9c:	08004ddf 	.word	0x08004ddf
 8004da0:	08004def 	.word	0x08004def
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004da4:	6a3a      	ldr	r2, [r7, #32]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	3318      	adds	r3, #24
 8004daa:	009b      	lsls	r3, r3, #2
 8004dac:	4413      	add	r3, r2
 8004dae:	685a      	ldr	r2, [r3, #4]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	6a39      	ldr	r1, [r7, #32]
 8004db6:	68bb      	ldr	r3, [r7, #8]
 8004db8:	3318      	adds	r3, #24
 8004dba:	009b      	lsls	r3, r3, #2
 8004dbc:	440b      	add	r3, r1
 8004dbe:	605a      	str	r2, [r3, #4]
                    break;
 8004dc0:	e030      	b.n	8004e24 <xTaskGenericNotify+0x108>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8004dc2:	6a3a      	ldr	r2, [r7, #32]
 8004dc4:	68bb      	ldr	r3, [r7, #8]
 8004dc6:	3318      	adds	r3, #24
 8004dc8:	009b      	lsls	r3, r3, #2
 8004dca:	4413      	add	r3, r2
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	6a39      	ldr	r1, [r7, #32]
 8004dd2:	68bb      	ldr	r3, [r7, #8]
 8004dd4:	3318      	adds	r3, #24
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	440b      	add	r3, r1
 8004dda:	605a      	str	r2, [r3, #4]
                    break;
 8004ddc:	e022      	b.n	8004e24 <xTaskGenericNotify+0x108>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004dde:	6a3a      	ldr	r2, [r7, #32]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	3318      	adds	r3, #24
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	687a      	ldr	r2, [r7, #4]
 8004dea:	605a      	str	r2, [r3, #4]
                    break;
 8004dec:	e01a      	b.n	8004e24 <xTaskGenericNotify+0x108>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8004dee:	7ffb      	ldrb	r3, [r7, #31]
 8004df0:	2b02      	cmp	r3, #2
 8004df2:	d007      	beq.n	8004e04 <xTaskGenericNotify+0xe8>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8004df4:	6a3a      	ldr	r2, [r7, #32]
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	3318      	adds	r3, #24
 8004dfa:	009b      	lsls	r3, r3, #2
 8004dfc:	4413      	add	r3, r2
 8004dfe:	687a      	ldr	r2, [r7, #4]
 8004e00:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 8004e02:	e00f      	b.n	8004e24 <xTaskGenericNotify+0x108>
                        xReturn = pdFAIL;
 8004e04:	2300      	movs	r3, #0
 8004e06:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8004e08:	e00c      	b.n	8004e24 <xTaskGenericNotify+0x108>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8004e0a:	4b48      	ldr	r3, [pc, #288]	@ (8004f2c <xTaskGenericNotify+0x210>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d007      	beq.n	8004e22 <xTaskGenericNotify+0x106>
 8004e12:	f641 61da 	movw	r1, #7898	@ 0x1eda
 8004e16:	4844      	ldr	r0, [pc, #272]	@ (8004f28 <xTaskGenericNotify+0x20c>)
 8004e18:	f7fc fb2a 	bl	8001470 <vAssertCalled>

                    break;
 8004e1c:	e001      	b.n	8004e22 <xTaskGenericNotify+0x106>
                    break;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <xTaskGenericNotify+0x108>
                    break;
 8004e22:	bf00      	nop

            traceTASK_NOTIFY( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8004e24:	7ffb      	ldrb	r3, [r7, #31]
 8004e26:	2b01      	cmp	r3, #1
 8004e28:	d177      	bne.n	8004f1a <xTaskGenericNotify+0x1fe>
            {
                listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004e2a:	6a3b      	ldr	r3, [r7, #32]
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	61bb      	str	r3, [r7, #24]
 8004e30:	6a3b      	ldr	r3, [r7, #32]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	6a3a      	ldr	r2, [r7, #32]
 8004e36:	68d2      	ldr	r2, [r2, #12]
 8004e38:	609a      	str	r2, [r3, #8]
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	68db      	ldr	r3, [r3, #12]
 8004e3e:	6a3a      	ldr	r2, [r7, #32]
 8004e40:	6892      	ldr	r2, [r2, #8]
 8004e42:	605a      	str	r2, [r3, #4]
 8004e44:	69bb      	ldr	r3, [r7, #24]
 8004e46:	685a      	ldr	r2, [r3, #4]
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	3304      	adds	r3, #4
 8004e4c:	429a      	cmp	r2, r3
 8004e4e:	d103      	bne.n	8004e58 <xTaskGenericNotify+0x13c>
 8004e50:	6a3b      	ldr	r3, [r7, #32]
 8004e52:	68da      	ldr	r2, [r3, #12]
 8004e54:	69bb      	ldr	r3, [r7, #24]
 8004e56:	605a      	str	r2, [r3, #4]
 8004e58:	6a3b      	ldr	r3, [r7, #32]
 8004e5a:	2200      	movs	r2, #0
 8004e5c:	615a      	str	r2, [r3, #20]
 8004e5e:	69bb      	ldr	r3, [r7, #24]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	1e5a      	subs	r2, r3, #1
 8004e64:	69bb      	ldr	r3, [r7, #24]
 8004e66:	601a      	str	r2, [r3, #0]
                prvAddTaskToReadyList( pxTCB );
 8004e68:	6a3b      	ldr	r3, [r7, #32]
 8004e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e6c:	2201      	movs	r2, #1
 8004e6e:	409a      	lsls	r2, r3
 8004e70:	4b2f      	ldr	r3, [pc, #188]	@ (8004f30 <xTaskGenericNotify+0x214>)
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4313      	orrs	r3, r2
 8004e76:	4a2e      	ldr	r2, [pc, #184]	@ (8004f30 <xTaskGenericNotify+0x214>)
 8004e78:	6013      	str	r3, [r2, #0]
 8004e7a:	6a3b      	ldr	r3, [r7, #32]
 8004e7c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e7e:	492d      	ldr	r1, [pc, #180]	@ (8004f34 <xTaskGenericNotify+0x218>)
 8004e80:	4613      	mov	r3, r2
 8004e82:	009b      	lsls	r3, r3, #2
 8004e84:	4413      	add	r3, r2
 8004e86:	009b      	lsls	r3, r3, #2
 8004e88:	440b      	add	r3, r1
 8004e8a:	3304      	adds	r3, #4
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	617b      	str	r3, [r7, #20]
 8004e90:	6a3b      	ldr	r3, [r7, #32]
 8004e92:	697a      	ldr	r2, [r7, #20]
 8004e94:	609a      	str	r2, [r3, #8]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	689a      	ldr	r2, [r3, #8]
 8004e9a:	6a3b      	ldr	r3, [r7, #32]
 8004e9c:	60da      	str	r2, [r3, #12]
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	6a3a      	ldr	r2, [r7, #32]
 8004ea4:	3204      	adds	r2, #4
 8004ea6:	605a      	str	r2, [r3, #4]
 8004ea8:	6a3b      	ldr	r3, [r7, #32]
 8004eaa:	1d1a      	adds	r2, r3, #4
 8004eac:	697b      	ldr	r3, [r7, #20]
 8004eae:	609a      	str	r2, [r3, #8]
 8004eb0:	6a3b      	ldr	r3, [r7, #32]
 8004eb2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004eb4:	4613      	mov	r3, r2
 8004eb6:	009b      	lsls	r3, r3, #2
 8004eb8:	4413      	add	r3, r2
 8004eba:	009b      	lsls	r3, r3, #2
 8004ebc:	4a1d      	ldr	r2, [pc, #116]	@ (8004f34 <xTaskGenericNotify+0x218>)
 8004ebe:	441a      	add	r2, r3
 8004ec0:	6a3b      	ldr	r3, [r7, #32]
 8004ec2:	615a      	str	r2, [r3, #20]
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004ec8:	491a      	ldr	r1, [pc, #104]	@ (8004f34 <xTaskGenericNotify+0x218>)
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	6a3a      	ldr	r2, [r7, #32]
 8004ed8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004eda:	1c59      	adds	r1, r3, #1
 8004edc:	4815      	ldr	r0, [pc, #84]	@ (8004f34 <xTaskGenericNotify+0x218>)
 8004ede:	4613      	mov	r3, r2
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	4413      	add	r3, r2
 8004ee4:	009b      	lsls	r3, r3, #2
 8004ee6:	4403      	add	r3, r0
 8004ee8:	6019      	str	r1, [r3, #0]

                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8004eea:	6a3b      	ldr	r3, [r7, #32]
 8004eec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d004      	beq.n	8004efc <xTaskGenericNotify+0x1e0>
 8004ef2:	f641 61e9 	movw	r1, #7913	@ 0x1ee9
 8004ef6:	480c      	ldr	r0, [pc, #48]	@ (8004f28 <xTaskGenericNotify+0x20c>)
 8004ef8:	f7fc faba 	bl	8001470 <vAssertCalled>
                }
                #endif

                /* Check if the notified task has a priority above the currently
                 * executing task. */
                taskYIELD_ANY_CORE_IF_USING_PREEMPTION( pxTCB );
 8004efc:	4b0e      	ldr	r3, [pc, #56]	@ (8004f38 <xTaskGenericNotify+0x21c>)
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f02:	6a3b      	ldr	r3, [r7, #32]
 8004f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004f06:	429a      	cmp	r2, r3
 8004f08:	d207      	bcs.n	8004f1a <xTaskGenericNotify+0x1fe>
 8004f0a:	4b0c      	ldr	r3, [pc, #48]	@ (8004f3c <xTaskGenericNotify+0x220>)
 8004f0c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f10:	601a      	str	r2, [r3, #0]
 8004f12:	f3bf 8f4f 	dsb	sy
 8004f16:	f3bf 8f6f 	isb	sy
            else
            {
                mtCOVERAGE_TEST_MARKER();
            }
        }
        taskEXIT_CRITICAL();
 8004f1a:	f000 fc45 	bl	80057a8 <vPortExitCritical>

        traceRETURN_xTaskGenericNotify( xReturn );

        return xReturn;
 8004f1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8004f20:	4618      	mov	r0, r3
 8004f22:	3728      	adds	r7, #40	@ 0x28
 8004f24:	46bd      	mov	sp, r7
 8004f26:	bd80      	pop	{r7, pc}
 8004f28:	08022ed8 	.word	0x08022ed8
 8004f2c:	20000c0c 	.word	0x20000c0c
 8004f30:	20000c10 	.word	0x20000c10
 8004f34:	20000b0c 	.word	0x20000b0c
 8004f38:	20000b08 	.word	0x20000b08
 8004f3c:	e000ed04 	.word	0xe000ed04

08004f40 <xTaskGenericNotifyFromISR>:
                                          UBaseType_t uxIndexToNotify,
                                          uint32_t ulValue,
                                          eNotifyAction eAction,
                                          uint32_t * pulPreviousNotificationValue,
                                          BaseType_t * pxHigherPriorityTaskWoken )
    {
 8004f40:	b580      	push	{r7, lr}
 8004f42:	b08e      	sub	sp, #56	@ 0x38
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	60f8      	str	r0, [r7, #12]
 8004f48:	60b9      	str	r1, [r7, #8]
 8004f4a:	607a      	str	r2, [r7, #4]
 8004f4c:	70fb      	strb	r3, [r7, #3]
        TCB_t * pxTCB;
        uint8_t ucOriginalNotifyState;
        BaseType_t xReturn = pdPASS;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	637b      	str	r3, [r7, #52]	@ 0x34
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_xTaskGenericNotifyFromISR( xTaskToNotify, uxIndexToNotify, ulValue, eAction, pulPreviousNotificationValue, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d104      	bne.n	8004f62 <xTaskGenericNotifyFromISR+0x22>
 8004f58:	f641 711e 	movw	r1, #7966	@ 0x1f1e
 8004f5c:	4899      	ldr	r0, [pc, #612]	@ (80051c4 <xTaskGenericNotifyFromISR+0x284>)
 8004f5e:	f7fc fa87 	bl	8001470 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d004      	beq.n	8004f72 <xTaskGenericNotifyFromISR+0x32>
 8004f68:	f641 711f 	movw	r1, #7967	@ 0x1f1f
 8004f6c:	4895      	ldr	r0, [pc, #596]	@ (80051c4 <xTaskGenericNotifyFromISR+0x284>)
 8004f6e:	f7fc fa7f 	bl	8001470 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f72:	f000 fcbb 	bl	80058ec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	633b      	str	r3, [r7, #48]	@ 0x30

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
    uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

    __asm volatile
 8004f7a:	f3ef 8211 	mrs	r2, BASEPRI
 8004f7e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8004f82:	b672      	cpsid	i
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	b662      	cpsie	i
 8004f92:	61ba      	str	r2, [r7, #24]
 8004f94:	617b      	str	r3, [r7, #20]
        : "=r" ( ulOriginalBASEPRI ), "=r" ( ulNewBASEPRI ) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
    );

    /* This return will not be reached but is necessary to prevent compiler
     * warnings. */
    return ulOriginalBASEPRI;
 8004f96:	69bb      	ldr	r3, [r7, #24]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8004f98:	62fb      	str	r3, [r7, #44]	@ 0x2c
        {
            if( pulPreviousNotificationValue != NULL )
 8004f9a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d007      	beq.n	8004fb0 <xTaskGenericNotifyFromISR+0x70>
            {
                *pulPreviousNotificationValue = pxTCB->ulNotifiedValue[ uxIndexToNotify ];
 8004fa0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fa2:	68bb      	ldr	r3, [r7, #8]
 8004fa4:	3318      	adds	r3, #24
 8004fa6:	009b      	lsls	r3, r3, #2
 8004fa8:	4413      	add	r3, r2
 8004faa:	685a      	ldr	r2, [r3, #4]
 8004fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004fae:	601a      	str	r2, [r3, #0]
            }

            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8004fb0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	3368      	adds	r3, #104	@ 0x68
 8004fb8:	781b      	ldrb	r3, [r3, #0]
 8004fba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8004fbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fc0:	68bb      	ldr	r3, [r7, #8]
 8004fc2:	4413      	add	r3, r2
 8004fc4:	3368      	adds	r3, #104	@ 0x68
 8004fc6:	2202      	movs	r2, #2
 8004fc8:	701a      	strb	r2, [r3, #0]

            switch( eAction )
 8004fca:	78fb      	ldrb	r3, [r7, #3]
 8004fcc:	2b04      	cmp	r3, #4
 8004fce:	d841      	bhi.n	8005054 <xTaskGenericNotifyFromISR+0x114>
 8004fd0:	a201      	add	r2, pc, #4	@ (adr r2, 8004fd8 <xTaskGenericNotifyFromISR+0x98>)
 8004fd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fd6:	bf00      	nop
 8004fd8:	08005069 	.word	0x08005069
 8004fdc:	08004fed 	.word	0x08004fed
 8004fe0:	0800500b 	.word	0x0800500b
 8004fe4:	08005027 	.word	0x08005027
 8004fe8:	08005037 	.word	0x08005037
            {
                case eSetBits:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] |= ulValue;
 8004fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004fee:	68bb      	ldr	r3, [r7, #8]
 8004ff0:	3318      	adds	r3, #24
 8004ff2:	009b      	lsls	r3, r3, #2
 8004ff4:	4413      	add	r3, r2
 8004ff6:	685a      	ldr	r2, [r3, #4]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	431a      	orrs	r2, r3
 8004ffc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	3318      	adds	r3, #24
 8005002:	009b      	lsls	r3, r3, #2
 8005004:	440b      	add	r3, r1
 8005006:	605a      	str	r2, [r3, #4]
                    break;
 8005008:	e031      	b.n	800506e <xTaskGenericNotifyFromISR+0x12e>

                case eIncrement:
                    ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 800500a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800500c:	68bb      	ldr	r3, [r7, #8]
 800500e:	3318      	adds	r3, #24
 8005010:	009b      	lsls	r3, r3, #2
 8005012:	4413      	add	r3, r2
 8005014:	685b      	ldr	r3, [r3, #4]
 8005016:	1c5a      	adds	r2, r3, #1
 8005018:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	3318      	adds	r3, #24
 800501e:	009b      	lsls	r3, r3, #2
 8005020:	440b      	add	r3, r1
 8005022:	605a      	str	r2, [r3, #4]
                    break;
 8005024:	e023      	b.n	800506e <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithOverwrite:
                    pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 8005026:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005028:	68bb      	ldr	r3, [r7, #8]
 800502a:	3318      	adds	r3, #24
 800502c:	009b      	lsls	r3, r3, #2
 800502e:	4413      	add	r3, r2
 8005030:	687a      	ldr	r2, [r7, #4]
 8005032:	605a      	str	r2, [r3, #4]
                    break;
 8005034:	e01b      	b.n	800506e <xTaskGenericNotifyFromISR+0x12e>

                case eSetValueWithoutOverwrite:

                    if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8005036:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800503a:	2b02      	cmp	r3, #2
 800503c:	d007      	beq.n	800504e <xTaskGenericNotifyFromISR+0x10e>
                    {
                        pxTCB->ulNotifiedValue[ uxIndexToNotify ] = ulValue;
 800503e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005040:	68bb      	ldr	r3, [r7, #8]
 8005042:	3318      	adds	r3, #24
 8005044:	009b      	lsls	r3, r3, #2
 8005046:	4413      	add	r3, r2
 8005048:	687a      	ldr	r2, [r7, #4]
 800504a:	605a      	str	r2, [r3, #4]
                    {
                        /* The value could not be written to the task. */
                        xReturn = pdFAIL;
                    }

                    break;
 800504c:	e00f      	b.n	800506e <xTaskGenericNotifyFromISR+0x12e>
                        xReturn = pdFAIL;
 800504e:	2300      	movs	r3, #0
 8005050:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 8005052:	e00c      	b.n	800506e <xTaskGenericNotifyFromISR+0x12e>
                default:

                    /* Should not get here if all enums are handled.
                     * Artificially force an assert by testing a value the
                     * compiler can't assume is const. */
                    configASSERT( xTickCount == ( TickType_t ) 0 );
 8005054:	4b5c      	ldr	r3, [pc, #368]	@ (80051c8 <xTaskGenericNotifyFromISR+0x288>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	2b00      	cmp	r3, #0
 800505a:	d007      	beq.n	800506c <xTaskGenericNotifyFromISR+0x12c>
 800505c:	f641 7169 	movw	r1, #8041	@ 0x1f69
 8005060:	4858      	ldr	r0, [pc, #352]	@ (80051c4 <xTaskGenericNotifyFromISR+0x284>)
 8005062:	f7fc fa05 	bl	8001470 <vAssertCalled>
                    break;
 8005066:	e001      	b.n	800506c <xTaskGenericNotifyFromISR+0x12c>
                    break;
 8005068:	bf00      	nop
 800506a:	e000      	b.n	800506e <xTaskGenericNotifyFromISR+0x12e>
                    break;
 800506c:	bf00      	nop

            traceTASK_NOTIFY_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800506e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8005072:	2b01      	cmp	r3, #1
 8005074:	f040 809a 	bne.w	80051ac <xTaskGenericNotifyFromISR+0x26c>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005078:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800507a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800507c:	2b00      	cmp	r3, #0
 800507e:	d004      	beq.n	800508a <xTaskGenericNotifyFromISR+0x14a>
 8005080:	f641 7174 	movw	r1, #8052	@ 0x1f74
 8005084:	484f      	ldr	r0, [pc, #316]	@ (80051c4 <xTaskGenericNotifyFromISR+0x284>)
 8005086:	f7fc f9f3 	bl	8001470 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 800508a:	4b50      	ldr	r3, [pc, #320]	@ (80051cc <xTaskGenericNotifyFromISR+0x28c>)
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	2b00      	cmp	r3, #0
 8005090:	d160      	bne.n	8005154 <xTaskGenericNotifyFromISR+0x214>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	623b      	str	r3, [r7, #32]
 8005098:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800509a:	689b      	ldr	r3, [r3, #8]
 800509c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800509e:	68d2      	ldr	r2, [r2, #12]
 80050a0:	609a      	str	r2, [r3, #8]
 80050a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050a4:	68db      	ldr	r3, [r3, #12]
 80050a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80050a8:	6892      	ldr	r2, [r2, #8]
 80050aa:	605a      	str	r2, [r3, #4]
 80050ac:	6a3b      	ldr	r3, [r7, #32]
 80050ae:	685a      	ldr	r2, [r3, #4]
 80050b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b2:	3304      	adds	r3, #4
 80050b4:	429a      	cmp	r2, r3
 80050b6:	d103      	bne.n	80050c0 <xTaskGenericNotifyFromISR+0x180>
 80050b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050ba:	68da      	ldr	r2, [r3, #12]
 80050bc:	6a3b      	ldr	r3, [r7, #32]
 80050be:	605a      	str	r2, [r3, #4]
 80050c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c2:	2200      	movs	r2, #0
 80050c4:	615a      	str	r2, [r3, #20]
 80050c6:	6a3b      	ldr	r3, [r7, #32]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	1e5a      	subs	r2, r3, #1
 80050cc:	6a3b      	ldr	r3, [r7, #32]
 80050ce:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80050d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050d4:	2201      	movs	r2, #1
 80050d6:	409a      	lsls	r2, r3
 80050d8:	4b3d      	ldr	r3, [pc, #244]	@ (80051d0 <xTaskGenericNotifyFromISR+0x290>)
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4313      	orrs	r3, r2
 80050de:	4a3c      	ldr	r2, [pc, #240]	@ (80051d0 <xTaskGenericNotifyFromISR+0x290>)
 80050e0:	6013      	str	r3, [r2, #0]
 80050e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80050e6:	493b      	ldr	r1, [pc, #236]	@ (80051d4 <xTaskGenericNotifyFromISR+0x294>)
 80050e8:	4613      	mov	r3, r2
 80050ea:	009b      	lsls	r3, r3, #2
 80050ec:	4413      	add	r3, r2
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	3304      	adds	r3, #4
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	61fb      	str	r3, [r7, #28]
 80050f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	609a      	str	r2, [r3, #8]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	689a      	ldr	r2, [r3, #8]
 8005102:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005104:	60da      	str	r2, [r3, #12]
 8005106:	69fb      	ldr	r3, [r7, #28]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800510c:	3204      	adds	r2, #4
 800510e:	605a      	str	r2, [r3, #4]
 8005110:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005112:	1d1a      	adds	r2, r3, #4
 8005114:	69fb      	ldr	r3, [r7, #28]
 8005116:	609a      	str	r2, [r3, #8]
 8005118:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800511c:	4613      	mov	r3, r2
 800511e:	009b      	lsls	r3, r3, #2
 8005120:	4413      	add	r3, r2
 8005122:	009b      	lsls	r3, r3, #2
 8005124:	4a2b      	ldr	r2, [pc, #172]	@ (80051d4 <xTaskGenericNotifyFromISR+0x294>)
 8005126:	441a      	add	r2, r3
 8005128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512a:	615a      	str	r2, [r3, #20]
 800512c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800512e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005130:	4928      	ldr	r1, [pc, #160]	@ (80051d4 <xTaskGenericNotifyFromISR+0x294>)
 8005132:	4613      	mov	r3, r2
 8005134:	009b      	lsls	r3, r3, #2
 8005136:	4413      	add	r3, r2
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	440b      	add	r3, r1
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005140:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005142:	1c59      	adds	r1, r3, #1
 8005144:	4823      	ldr	r0, [pc, #140]	@ (80051d4 <xTaskGenericNotifyFromISR+0x294>)
 8005146:	4613      	mov	r3, r2
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4413      	add	r3, r2
 800514c:	009b      	lsls	r3, r3, #2
 800514e:	4403      	add	r3, r0
 8005150:	6019      	str	r1, [r3, #0]
 8005152:	e01b      	b.n	800518c <xTaskGenericNotifyFromISR+0x24c>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005154:	4b20      	ldr	r3, [pc, #128]	@ (80051d8 <xTaskGenericNotifyFromISR+0x298>)
 8005156:	685b      	ldr	r3, [r3, #4]
 8005158:	627b      	str	r3, [r7, #36]	@ 0x24
 800515a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800515e:	61da      	str	r2, [r3, #28]
 8005160:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005162:	689a      	ldr	r2, [r3, #8]
 8005164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005166:	621a      	str	r2, [r3, #32]
 8005168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800516a:	689b      	ldr	r3, [r3, #8]
 800516c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800516e:	3218      	adds	r2, #24
 8005170:	605a      	str	r2, [r3, #4]
 8005172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005174:	f103 0218 	add.w	r2, r3, #24
 8005178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800517a:	609a      	str	r2, [r3, #8]
 800517c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800517e:	4a16      	ldr	r2, [pc, #88]	@ (80051d8 <xTaskGenericNotifyFromISR+0x298>)
 8005180:	629a      	str	r2, [r3, #40]	@ 0x28
 8005182:	4b15      	ldr	r3, [pc, #84]	@ (80051d8 <xTaskGenericNotifyFromISR+0x298>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	3301      	adds	r3, #1
 8005188:	4a13      	ldr	r2, [pc, #76]	@ (80051d8 <xTaskGenericNotifyFromISR+0x298>)
 800518a:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800518c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800518e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005190:	4b12      	ldr	r3, [pc, #72]	@ (80051dc <xTaskGenericNotifyFromISR+0x29c>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005196:	429a      	cmp	r2, r3
 8005198:	d908      	bls.n	80051ac <xTaskGenericNotifyFromISR+0x26c>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 800519a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800519c:	2b00      	cmp	r3, #0
 800519e:	d002      	beq.n	80051a6 <xTaskGenericNotifyFromISR+0x266>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 80051a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80051a2:	2201      	movs	r2, #1
 80051a4:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter to an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80051a6:	4b0e      	ldr	r3, [pc, #56]	@ (80051e0 <xTaskGenericNotifyFromISR+0x2a0>)
 80051a8:	2201      	movs	r2, #1
 80051aa:	601a      	str	r2, [r3, #0]
 80051ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80051ae:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
    __asm volatile
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	f383 8811 	msr	BASEPRI, r3
    (
        "   msr basepri, %0 " ::"r" ( ulNewMaskValue ) : "memory"
    );
}
 80051b6:	bf00      	nop
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_xTaskGenericNotifyFromISR( xReturn );

        return xReturn;
 80051b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 80051ba:	4618      	mov	r0, r3
 80051bc:	3738      	adds	r7, #56	@ 0x38
 80051be:	46bd      	mov	sp, r7
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	bf00      	nop
 80051c4:	08022ed8 	.word	0x08022ed8
 80051c8:	20000c0c 	.word	0x20000c0c
 80051cc:	20000c30 	.word	0x20000c30
 80051d0:	20000c10 	.word	0x20000c10
 80051d4:	20000b0c 	.word	0x20000b0c
 80051d8:	20000bc8 	.word	0x20000bc8
 80051dc:	20000b08 	.word	0x20000b08
 80051e0:	20000c1c 	.word	0x20000c1c

080051e4 <vTaskGenericNotifyGiveFromISR>:
#if ( configUSE_TASK_NOTIFICATIONS == 1 )

    void vTaskGenericNotifyGiveFromISR( TaskHandle_t xTaskToNotify,
                                        UBaseType_t uxIndexToNotify,
                                        BaseType_t * pxHigherPriorityTaskWoken )
    {
 80051e4:	b580      	push	{r7, lr}
 80051e6:	b08e      	sub	sp, #56	@ 0x38
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	60f8      	str	r0, [r7, #12]
 80051ec:	60b9      	str	r1, [r7, #8]
 80051ee:	607a      	str	r2, [r7, #4]
        uint8_t ucOriginalNotifyState;
        UBaseType_t uxSavedInterruptStatus;

        traceENTER_vTaskGenericNotifyGiveFromISR( xTaskToNotify, uxIndexToNotify, pxHigherPriorityTaskWoken );

        configASSERT( xTaskToNotify );
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d104      	bne.n	8005200 <vTaskGenericNotifyGiveFromISR+0x1c>
 80051f6:	f44f 51fe 	mov.w	r1, #8128	@ 0x1fc0
 80051fa:	4871      	ldr	r0, [pc, #452]	@ (80053c0 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 80051fc:	f7fc f938 	bl	8001470 <vAssertCalled>
        configASSERT( uxIndexToNotify < configTASK_NOTIFICATION_ARRAY_ENTRIES );
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d004      	beq.n	8005210 <vTaskGenericNotifyGiveFromISR+0x2c>
 8005206:	f641 71c1 	movw	r1, #8129	@ 0x1fc1
 800520a:	486d      	ldr	r0, [pc, #436]	@ (80053c0 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 800520c:	f7fc f930 	bl	8001470 <vAssertCalled>
         * below the maximum system call interrupt priority.  FreeRTOS maintains a
         * separate interrupt safe API to ensure interrupt entry is as fast and as
         * simple as possible.  More information (albeit Cortex-M specific) is
         * provided on the following link:
         * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005210:	f000 fb6c 	bl	80058ec <vPortValidateInterruptPriority>

        pxTCB = xTaskToNotify;
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	637b      	str	r3, [r7, #52]	@ 0x34
    __asm volatile
 8005218:	f3ef 8211 	mrs	r2, BASEPRI
 800521c:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005220:	b672      	cpsid	i
 8005222:	f383 8811 	msr	BASEPRI, r3
 8005226:	f3bf 8f6f 	isb	sy
 800522a:	f3bf 8f4f 	dsb	sy
 800522e:	b662      	cpsie	i
 8005230:	61fa      	str	r2, [r7, #28]
 8005232:	61bb      	str	r3, [r7, #24]
    return ulOriginalBASEPRI;
 8005234:	69fb      	ldr	r3, [r7, #28]

        /* MISRA Ref 4.7.1 [Return value shall be checked] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Kernel/blob/main/MISRA.md#dir-47 */
        /* coverity[misra_c_2012_directive_4_7_violation] */
        uxSavedInterruptStatus = ( UBaseType_t ) taskENTER_CRITICAL_FROM_ISR();
 8005236:	633b      	str	r3, [r7, #48]	@ 0x30
        {
            ucOriginalNotifyState = pxTCB->ucNotifyState[ uxIndexToNotify ];
 8005238:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800523a:	68bb      	ldr	r3, [r7, #8]
 800523c:	4413      	add	r3, r2
 800523e:	3368      	adds	r3, #104	@ 0x68
 8005240:	781b      	ldrb	r3, [r3, #0]
 8005242:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            pxTCB->ucNotifyState[ uxIndexToNotify ] = taskNOTIFICATION_RECEIVED;
 8005246:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005248:	68bb      	ldr	r3, [r7, #8]
 800524a:	4413      	add	r3, r2
 800524c:	3368      	adds	r3, #104	@ 0x68
 800524e:	2202      	movs	r2, #2
 8005250:	701a      	strb	r2, [r3, #0]

            /* 'Giving' is equivalent to incrementing a count in a counting
             * semaphore. */
            ( pxTCB->ulNotifiedValue[ uxIndexToNotify ] )++;
 8005252:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	3318      	adds	r3, #24
 8005258:	009b      	lsls	r3, r3, #2
 800525a:	4413      	add	r3, r2
 800525c:	685b      	ldr	r3, [r3, #4]
 800525e:	1c5a      	adds	r2, r3, #1
 8005260:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8005262:	68bb      	ldr	r3, [r7, #8]
 8005264:	3318      	adds	r3, #24
 8005266:	009b      	lsls	r3, r3, #2
 8005268:	440b      	add	r3, r1
 800526a:	605a      	str	r2, [r3, #4]

            traceTASK_NOTIFY_GIVE_FROM_ISR( uxIndexToNotify );

            /* If the task is in the blocked state specifically to wait for a
             * notification then unblock it now. */
            if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800526c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8005270:	2b01      	cmp	r3, #1
 8005272:	f040 809a 	bne.w	80053aa <vTaskGenericNotifyGiveFromISR+0x1c6>
            {
                /* The task should not have been on an event list. */
                configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8005276:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005278:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527a:	2b00      	cmp	r3, #0
 800527c:	d004      	beq.n	8005288 <vTaskGenericNotifyGiveFromISR+0xa4>
 800527e:	f641 71ea 	movw	r1, #8170	@ 0x1fea
 8005282:	484f      	ldr	r0, [pc, #316]	@ (80053c0 <vTaskGenericNotifyGiveFromISR+0x1dc>)
 8005284:	f7fc f8f4 	bl	8001470 <vAssertCalled>

                if( uxSchedulerSuspended == ( UBaseType_t ) 0U )
 8005288:	4b4e      	ldr	r3, [pc, #312]	@ (80053c4 <vTaskGenericNotifyGiveFromISR+0x1e0>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d160      	bne.n	8005352 <vTaskGenericNotifyGiveFromISR+0x16e>
                {
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8005290:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005292:	695b      	ldr	r3, [r3, #20]
 8005294:	627b      	str	r3, [r7, #36]	@ 0x24
 8005296:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800529c:	68d2      	ldr	r2, [r2, #12]
 800529e:	609a      	str	r2, [r3, #8]
 80052a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80052a6:	6892      	ldr	r2, [r2, #8]
 80052a8:	605a      	str	r2, [r3, #4]
 80052aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052ac:	685a      	ldr	r2, [r3, #4]
 80052ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b0:	3304      	adds	r3, #4
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d103      	bne.n	80052be <vTaskGenericNotifyGiveFromISR+0xda>
 80052b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052b8:	68da      	ldr	r2, [r3, #12]
 80052ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052bc:	605a      	str	r2, [r3, #4]
 80052be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c0:	2200      	movs	r2, #0
 80052c2:	615a      	str	r2, [r3, #20]
 80052c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	1e5a      	subs	r2, r3, #1
 80052ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052cc:	601a      	str	r2, [r3, #0]
                    prvAddTaskToReadyList( pxTCB );
 80052ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80052d2:	2201      	movs	r2, #1
 80052d4:	409a      	lsls	r2, r3
 80052d6:	4b3c      	ldr	r3, [pc, #240]	@ (80053c8 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	4313      	orrs	r3, r2
 80052dc:	4a3a      	ldr	r2, [pc, #232]	@ (80053c8 <vTaskGenericNotifyGiveFromISR+0x1e4>)
 80052de:	6013      	str	r3, [r2, #0]
 80052e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80052e4:	4939      	ldr	r1, [pc, #228]	@ (80053cc <vTaskGenericNotifyGiveFromISR+0x1e8>)
 80052e6:	4613      	mov	r3, r2
 80052e8:	009b      	lsls	r3, r3, #2
 80052ea:	4413      	add	r3, r2
 80052ec:	009b      	lsls	r3, r3, #2
 80052ee:	440b      	add	r3, r1
 80052f0:	3304      	adds	r3, #4
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	623b      	str	r3, [r7, #32]
 80052f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052f8:	6a3a      	ldr	r2, [r7, #32]
 80052fa:	609a      	str	r2, [r3, #8]
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	689a      	ldr	r2, [r3, #8]
 8005300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005302:	60da      	str	r2, [r3, #12]
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	689b      	ldr	r3, [r3, #8]
 8005308:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800530a:	3204      	adds	r2, #4
 800530c:	605a      	str	r2, [r3, #4]
 800530e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005310:	1d1a      	adds	r2, r3, #4
 8005312:	6a3b      	ldr	r3, [r7, #32]
 8005314:	609a      	str	r2, [r3, #8]
 8005316:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800531a:	4613      	mov	r3, r2
 800531c:	009b      	lsls	r3, r3, #2
 800531e:	4413      	add	r3, r2
 8005320:	009b      	lsls	r3, r3, #2
 8005322:	4a2a      	ldr	r2, [pc, #168]	@ (80053cc <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005324:	441a      	add	r2, r3
 8005326:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005328:	615a      	str	r2, [r3, #20]
 800532a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800532c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800532e:	4927      	ldr	r1, [pc, #156]	@ (80053cc <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005330:	4613      	mov	r3, r2
 8005332:	009b      	lsls	r3, r3, #2
 8005334:	4413      	add	r3, r2
 8005336:	009b      	lsls	r3, r3, #2
 8005338:	440b      	add	r3, r1
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800533e:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8005340:	1c59      	adds	r1, r3, #1
 8005342:	4822      	ldr	r0, [pc, #136]	@ (80053cc <vTaskGenericNotifyGiveFromISR+0x1e8>)
 8005344:	4613      	mov	r3, r2
 8005346:	009b      	lsls	r3, r3, #2
 8005348:	4413      	add	r3, r2
 800534a:	009b      	lsls	r3, r3, #2
 800534c:	4403      	add	r3, r0
 800534e:	6019      	str	r1, [r3, #0]
 8005350:	e01b      	b.n	800538a <vTaskGenericNotifyGiveFromISR+0x1a6>
                }
                else
                {
                    /* The delayed and ready lists cannot be accessed, so hold
                     * this task pending until the scheduler is resumed. */
                    listINSERT_END( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8005352:	4b1f      	ldr	r3, [pc, #124]	@ (80053d0 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005354:	685b      	ldr	r3, [r3, #4]
 8005356:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005358:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800535a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800535c:	61da      	str	r2, [r3, #28]
 800535e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005360:	689a      	ldr	r2, [r3, #8]
 8005362:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005364:	621a      	str	r2, [r3, #32]
 8005366:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005368:	689b      	ldr	r3, [r3, #8]
 800536a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800536c:	3218      	adds	r2, #24
 800536e:	605a      	str	r2, [r3, #4]
 8005370:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005372:	f103 0218 	add.w	r2, r3, #24
 8005376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005378:	609a      	str	r2, [r3, #8]
 800537a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800537c:	4a14      	ldr	r2, [pc, #80]	@ (80053d0 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 800537e:	629a      	str	r2, [r3, #40]	@ 0x28
 8005380:	4b13      	ldr	r3, [pc, #76]	@ (80053d0 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	3301      	adds	r3, #1
 8005386:	4a12      	ldr	r2, [pc, #72]	@ (80053d0 <vTaskGenericNotifyGiveFromISR+0x1ec>)
 8005388:	6013      	str	r3, [r2, #0]
                }

                #if ( configNUMBER_OF_CORES == 1 )
                {
                    if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800538a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800538c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800538e:	4b11      	ldr	r3, [pc, #68]	@ (80053d4 <vTaskGenericNotifyGiveFromISR+0x1f0>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005394:	429a      	cmp	r2, r3
 8005396:	d908      	bls.n	80053aa <vTaskGenericNotifyGiveFromISR+0x1c6>
                    {
                        /* The notified task has a priority above the currently
                         * executing task so a yield is required. */
                        if( pxHigherPriorityTaskWoken != NULL )
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	2b00      	cmp	r3, #0
 800539c:	d002      	beq.n	80053a4 <vTaskGenericNotifyGiveFromISR+0x1c0>
                        {
                            *pxHigherPriorityTaskWoken = pdTRUE;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	601a      	str	r2, [r3, #0]
                        }

                        /* Mark that a yield is pending in case the user is not
                         * using the "xHigherPriorityTaskWoken" parameter in an ISR
                         * safe FreeRTOS function. */
                        xYieldPendings[ 0 ] = pdTRUE;
 80053a4:	4b0c      	ldr	r3, [pc, #48]	@ (80053d8 <vTaskGenericNotifyGiveFromISR+0x1f4>)
 80053a6:	2201      	movs	r2, #1
 80053a8:	601a      	str	r2, [r3, #0]
 80053aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053ac:	617b      	str	r3, [r7, #20]
    __asm volatile
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f383 8811 	msr	BASEPRI, r3
}
 80053b4:	bf00      	nop
            }
        }
        taskEXIT_CRITICAL_FROM_ISR( uxSavedInterruptStatus );

        traceRETURN_vTaskGenericNotifyGiveFromISR();
    }
 80053b6:	bf00      	nop
 80053b8:	3738      	adds	r7, #56	@ 0x38
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	08022ed8 	.word	0x08022ed8
 80053c4:	20000c30 	.word	0x20000c30
 80053c8:	20000c10 	.word	0x20000c10
 80053cc:	20000b0c 	.word	0x20000b0c
 80053d0:	20000bc8 	.word	0x20000bc8
 80053d4:	20000b08 	.word	0x20000b08
 80053d8:	20000c1c 	.word	0x20000c1c

080053dc <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b088      	sub	sp, #32
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
 80053e4:	6039      	str	r1, [r7, #0]
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 80053e6:	4b37      	ldr	r3, [pc, #220]	@ (80054c4 <prvAddCurrentTaskToDelayedList+0xe8>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	61fb      	str	r3, [r7, #28]
    List_t * const pxDelayedList = pxDelayedTaskList;
 80053ec:	4b36      	ldr	r3, [pc, #216]	@ (80054c8 <prvAddCurrentTaskToDelayedList+0xec>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	61bb      	str	r3, [r7, #24]
    List_t * const pxOverflowDelayedList = pxOverflowDelayedTaskList;
 80053f2:	4b36      	ldr	r3, [pc, #216]	@ (80054cc <prvAddCurrentTaskToDelayedList+0xf0>)
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	617b      	str	r3, [r7, #20]
    }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80053f8:	4b35      	ldr	r3, [pc, #212]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	3304      	adds	r3, #4
 80053fe:	4618      	mov	r0, r3
 8005400:	f7fd fade 	bl	80029c0 <uxListRemove>
 8005404:	4603      	mov	r3, r0
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10b      	bne.n	8005422 <prvAddCurrentTaskToDelayedList+0x46>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
 800540a:	4b31      	ldr	r3, [pc, #196]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005410:	2201      	movs	r2, #1
 8005412:	fa02 f303 	lsl.w	r3, r2, r3
 8005416:	43da      	mvns	r2, r3
 8005418:	4b2e      	ldr	r3, [pc, #184]	@ (80054d4 <prvAddCurrentTaskToDelayedList+0xf8>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4013      	ands	r3, r2
 800541e:	4a2d      	ldr	r2, [pc, #180]	@ (80054d4 <prvAddCurrentTaskToDelayedList+0xf8>)
 8005420:	6013      	str	r3, [r2, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
    {
        if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005428:	d124      	bne.n	8005474 <prvAddCurrentTaskToDelayedList+0x98>
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d021      	beq.n	8005474 <prvAddCurrentTaskToDelayedList+0x98>
        {
            /* Add the task to the suspended task list instead of a delayed task
             * list to ensure it is not woken by a timing event.  It will block
             * indefinitely. */
            listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005430:	4b29      	ldr	r3, [pc, #164]	@ (80054d8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	613b      	str	r3, [r7, #16]
 8005436:	4b26      	ldr	r3, [pc, #152]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	609a      	str	r2, [r3, #8]
 800543e:	4b24      	ldr	r3, [pc, #144]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	6892      	ldr	r2, [r2, #8]
 8005446:	60da      	str	r2, [r3, #12]
 8005448:	4b21      	ldr	r3, [pc, #132]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	3204      	adds	r2, #4
 8005452:	605a      	str	r2, [r3, #4]
 8005454:	4b1e      	ldr	r3, [pc, #120]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	1d1a      	adds	r2, r3, #4
 800545a:	693b      	ldr	r3, [r7, #16]
 800545c:	609a      	str	r2, [r3, #8]
 800545e:	4b1c      	ldr	r3, [pc, #112]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	4a1d      	ldr	r2, [pc, #116]	@ (80054d8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005464:	615a      	str	r2, [r3, #20]
 8005466:	4b1c      	ldr	r3, [pc, #112]	@ (80054d8 <prvAddCurrentTaskToDelayedList+0xfc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	3301      	adds	r3, #1
 800546c:	4a1a      	ldr	r2, [pc, #104]	@ (80054d8 <prvAddCurrentTaskToDelayedList+0xfc>)
 800546e:	6013      	str	r3, [r2, #0]
 8005470:	bf00      	nop

        /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
        ( void ) xCanBlockIndefinitely;
    }
    #endif /* INCLUDE_vTaskSuspend */
}
 8005472:	e022      	b.n	80054ba <prvAddCurrentTaskToDelayedList+0xde>
            xTimeToWake = xConstTickCount + xTicksToWait;
 8005474:	69fa      	ldr	r2, [r7, #28]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	4413      	add	r3, r2
 800547a:	60fb      	str	r3, [r7, #12]
            listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800547c:	4b14      	ldr	r3, [pc, #80]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800547e:	681b      	ldr	r3, [r3, #0]
 8005480:	68fa      	ldr	r2, [r7, #12]
 8005482:	605a      	str	r2, [r3, #4]
            if( xTimeToWake < xConstTickCount )
 8005484:	68fa      	ldr	r2, [r7, #12]
 8005486:	69fb      	ldr	r3, [r7, #28]
 8005488:	429a      	cmp	r2, r3
 800548a:	d207      	bcs.n	800549c <prvAddCurrentTaskToDelayedList+0xc0>
                vListInsert( pxOverflowDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800548c:	4b10      	ldr	r3, [pc, #64]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	3304      	adds	r3, #4
 8005492:	4619      	mov	r1, r3
 8005494:	6978      	ldr	r0, [r7, #20]
 8005496:	f7fd fa5a 	bl	800294e <vListInsert>
}
 800549a:	e00e      	b.n	80054ba <prvAddCurrentTaskToDelayedList+0xde>
                vListInsert( pxDelayedList, &( pxCurrentTCB->xStateListItem ) );
 800549c:	4b0c      	ldr	r3, [pc, #48]	@ (80054d0 <prvAddCurrentTaskToDelayedList+0xf4>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4619      	mov	r1, r3
 80054a4:	69b8      	ldr	r0, [r7, #24]
 80054a6:	f7fd fa52 	bl	800294e <vListInsert>
                if( xTimeToWake < xNextTaskUnblockTime )
 80054aa:	4b0c      	ldr	r3, [pc, #48]	@ (80054dc <prvAddCurrentTaskToDelayedList+0x100>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	429a      	cmp	r2, r3
 80054b2:	d202      	bcs.n	80054ba <prvAddCurrentTaskToDelayedList+0xde>
                    xNextTaskUnblockTime = xTimeToWake;
 80054b4:	4a09      	ldr	r2, [pc, #36]	@ (80054dc <prvAddCurrentTaskToDelayedList+0x100>)
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	6013      	str	r3, [r2, #0]
}
 80054ba:	bf00      	nop
 80054bc:	3720      	adds	r7, #32
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
 80054c2:	bf00      	nop
 80054c4:	20000c0c 	.word	0x20000c0c
 80054c8:	20000bc0 	.word	0x20000bc0
 80054cc:	20000bc4 	.word	0x20000bc4
 80054d0:	20000b08 	.word	0x20000b08
 80054d4:	20000c10 	.word	0x20000c10
 80054d8:	20000bf4 	.word	0x20000bf4
 80054dc:	20000c28 	.word	0x20000c28

080054e0 <pxPortInitialiseStack>:
 * See header file for description.
 */
StackType_t * pxPortInitialiseStack( StackType_t * pxTopOfStack,
                                     TaskFunction_t pxCode,
                                     void * pvParameters )
{
 80054e0:	b480      	push	{r7}
 80054e2:	b085      	sub	sp, #20
 80054e4:	af00      	add	r7, sp, #0
 80054e6:	60f8      	str	r0, [r7, #12]
 80054e8:	60b9      	str	r1, [r7, #8]
 80054ea:	607a      	str	r2, [r7, #4]
    /* Simulate the stack frame as it would be created by a context switch
     * interrupt. */

    /* Offset added to account for the way the MCU uses the stack on entry/exit
     * of interrupts, and to ensure alignment. */
    pxTopOfStack--;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	3b04      	subs	r3, #4
 80054f0:	60fb      	str	r3, [r7, #12]

    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80054f8:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	3b04      	subs	r3, #4
 80054fe:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8005500:	68bb      	ldr	r3, [r7, #8]
 8005502:	f023 0201 	bic.w	r2, r3, #1
 8005506:	68fb      	ldr	r3, [r7, #12]
 8005508:	601a      	str	r2, [r3, #0]
    pxTopOfStack--;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	3b04      	subs	r3, #4
 800550e:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8005510:	4a0c      	ldr	r2, [pc, #48]	@ (8005544 <pxPortInitialiseStack+0x64>)
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	601a      	str	r2, [r3, #0]

    /* Save code space by skipping register initialisation. */
    pxTopOfStack -= 5;                            /* R12, R3, R2 and R1. */
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	3b14      	subs	r3, #20
 800551a:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = ( StackType_t ) pvParameters; /* R0 */
 800551c:	687a      	ldr	r2, [r7, #4]
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	601a      	str	r2, [r3, #0]

    /* A save method is being used that requires each task to maintain its
     * own exec return value. */
    pxTopOfStack--;
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	3b04      	subs	r3, #4
 8005526:	60fb      	str	r3, [r7, #12]
    *pxTopOfStack = portINITIAL_EXC_RETURN;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f06f 0202 	mvn.w	r2, #2
 800552e:	601a      	str	r2, [r3, #0]

    pxTopOfStack -= 8; /* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	3b20      	subs	r3, #32
 8005534:	60fb      	str	r3, [r7, #12]

    return pxTopOfStack;
 8005536:	68fb      	ldr	r3, [r7, #12]
}
 8005538:	4618      	mov	r0, r3
 800553a:	3714      	adds	r7, #20
 800553c:	46bd      	mov	sp, r7
 800553e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005542:	4770      	bx	lr
 8005544:	08005549 	.word	0x08005549

08005548 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b082      	sub	sp, #8
 800554c:	af00      	add	r7, sp, #0
    volatile uint32_t ulDummy = 0;
 800554e:	2300      	movs	r3, #0
 8005550:	603b      	str	r3, [r7, #0]
     * its caller as there is nothing to return to.  If a task wants to exit it
     * should instead call vTaskDelete( NULL ).
     *
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
 8005552:	4b0f      	ldr	r3, [pc, #60]	@ (8005590 <prvTaskExitError+0x48>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f1b3 3fff 	cmp.w	r3, #4294967295
 800555a:	d003      	beq.n	8005564 <prvTaskExitError+0x1c>
 800555c:	21ee      	movs	r1, #238	@ 0xee
 800555e:	480d      	ldr	r0, [pc, #52]	@ (8005594 <prvTaskExitError+0x4c>)
 8005560:	f7fb ff86 	bl	8001470 <vAssertCalled>
    __asm volatile
 8005564:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005568:	b672      	cpsid	i
 800556a:	f383 8811 	msr	BASEPRI, r3
 800556e:	f3bf 8f6f 	isb	sy
 8005572:	f3bf 8f4f 	dsb	sy
 8005576:	b662      	cpsie	i
 8005578:	607b      	str	r3, [r7, #4]
}
 800557a:	bf00      	nop
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800557c:	bf00      	nop
 800557e:	683b      	ldr	r3, [r7, #0]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d0fc      	beq.n	800557e <prvTaskExitError+0x36>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8005584:	bf00      	nop
 8005586:	bf00      	nop
 8005588:	3708      	adds	r7, #8
 800558a:	46bd      	mov	sp, r7
 800558c:	bd80      	pop	{r7, pc}
 800558e:	bf00      	nop
 8005590:	2000000c 	.word	0x2000000c
 8005594:	08022f04 	.word	0x08022f04
	...

080055a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
    __asm volatile (
 80055a0:	4b07      	ldr	r3, [pc, #28]	@ (80055c0 <pxCurrentTCBConst2>)
 80055a2:	6819      	ldr	r1, [r3, #0]
 80055a4:	6808      	ldr	r0, [r1, #0]
 80055a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055aa:	f380 8809 	msr	PSP, r0
 80055ae:	f3bf 8f6f 	isb	sy
 80055b2:	f04f 0000 	mov.w	r0, #0
 80055b6:	f380 8811 	msr	BASEPRI, r0
 80055ba:	4770      	bx	lr
 80055bc:	f3af 8000 	nop.w

080055c0 <pxCurrentTCBConst2>:
 80055c0:	20000b08 	.word	0x20000b08
        "   bx r14                          \n"
        "                                   \n"
        "   .align 4                        \n"
        "pxCurrentTCBConst2: .word pxCurrentTCB             \n"
        );
}
 80055c4:	bf00      	nop
 80055c6:	bf00      	nop

080055c8 <prvPortStartFirstTask>:
{
    /* Start the first task.  This also clears the bit that indicates the FPU is
     * in use in case the FPU was used before the scheduler was started - which
     * would otherwise result in the unnecessary leaving of space in the SVC stack
     * for lazy saving of FPU registers. */
    __asm volatile (
 80055c8:	4808      	ldr	r0, [pc, #32]	@ (80055ec <prvPortStartFirstTask+0x24>)
 80055ca:	6800      	ldr	r0, [r0, #0]
 80055cc:	6800      	ldr	r0, [r0, #0]
 80055ce:	f380 8808 	msr	MSP, r0
 80055d2:	f04f 0000 	mov.w	r0, #0
 80055d6:	f380 8814 	msr	CONTROL, r0
 80055da:	b662      	cpsie	i
 80055dc:	b661      	cpsie	f
 80055de:	f3bf 8f4f 	dsb	sy
 80055e2:	f3bf 8f6f 	isb	sy
 80055e6:	df00      	svc	0
 80055e8:	bf00      	nop
 80055ea:	0000      	.short	0x0000
 80055ec:	e000ed08 	.word	0xe000ed08
        " isb                   \n"
        " svc 0                 \n" /* System call to start first task. */
        " nop                   \n"
        " .ltorg                \n"
        );
}
 80055f0:	bf00      	nop
 80055f2:	bf00      	nop

080055f4 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
     * configCHECK_HANDLER_INSTALLATION to 0 in their FreeRTOSConfig.h. Direct
     * routing, which is validated here when configCHECK_HANDLER_INSTALLATION
     * is 1, should be preferred when possible. */
    #if ( configCHECK_HANDLER_INSTALLATION == 1 )
    {
        const portISR_t * const pxVectorTable = portSCB_VTOR_REG;
 80055fa:	4b4a      	ldr	r3, [pc, #296]	@ (8005724 <xPortStartScheduler+0x130>)
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	617b      	str	r3, [r7, #20]
         * https://www.FreeRTOS.org/FAQHelp.html.
         *
         * Systems with a configurable address for the interrupt vector table
         * can also encounter assertion failures or even system faults here if
         * VTOR is not set correctly to point to the application's vector table. */
        configASSERT( pxVectorTable[ portVECTOR_INDEX_SVC ] == vPortSVCHandler );
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	332c      	adds	r3, #44	@ 0x2c
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	4a48      	ldr	r2, [pc, #288]	@ (8005728 <xPortStartScheduler+0x134>)
 8005608:	4293      	cmp	r3, r2
 800560a:	d004      	beq.n	8005616 <xPortStartScheduler+0x22>
 800560c:	f240 114b 	movw	r1, #331	@ 0x14b
 8005610:	4846      	ldr	r0, [pc, #280]	@ (800572c <xPortStartScheduler+0x138>)
 8005612:	f7fb ff2d 	bl	8001470 <vAssertCalled>
        configASSERT( pxVectorTable[ portVECTOR_INDEX_PENDSV ] == xPortPendSVHandler );
 8005616:	697b      	ldr	r3, [r7, #20]
 8005618:	3338      	adds	r3, #56	@ 0x38
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	4a44      	ldr	r2, [pc, #272]	@ (8005730 <xPortStartScheduler+0x13c>)
 800561e:	4293      	cmp	r3, r2
 8005620:	d004      	beq.n	800562c <xPortStartScheduler+0x38>
 8005622:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 8005626:	4841      	ldr	r0, [pc, #260]	@ (800572c <xPortStartScheduler+0x138>)
 8005628:	f7fb ff22 	bl	8001470 <vAssertCalled>
    #endif /* configCHECK_HANDLER_INSTALLATION */

    #if ( configASSERT_DEFINED == 1 )
    {
        volatile uint8_t ucOriginalPriority;
        volatile uint32_t ulImplementedPrioBits = 0;
 800562c:	2300      	movs	r3, #0
 800562e:	60bb      	str	r3, [r7, #8]
        volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005630:	4b40      	ldr	r3, [pc, #256]	@ (8005734 <xPortStartScheduler+0x140>)
 8005632:	613b      	str	r3, [r7, #16]
         * functions can be called.  ISR safe functions are those that end in
         * "FromISR".  FreeRTOS maintains separate thread and ISR API functions to
         * ensure interrupt entry is as fast and simple as possible.
         *
         * Save the interrupt priority value that is about to be clobbered. */
        ucOriginalPriority = *pucFirstUserPriorityRegister;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	781b      	ldrb	r3, [r3, #0]
 8005638:	b2db      	uxtb	r3, r3
 800563a:	73fb      	strb	r3, [r7, #15]

        /* Determine the number of priority bits available.  First write to all
         * possible bits. */
        *pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	22ff      	movs	r2, #255	@ 0xff
 8005640:	701a      	strb	r2, [r3, #0]

        /* Read the value back to see how many bits stuck. */
        ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005642:	693b      	ldr	r3, [r7, #16]
 8005644:	781b      	ldrb	r3, [r3, #0]
 8005646:	b2db      	uxtb	r3, r3
 8005648:	71fb      	strb	r3, [r7, #7]

        /* Use the same mask on the maximum system call priority. */
        ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800564a:	79fb      	ldrb	r3, [r7, #7]
 800564c:	b2db      	uxtb	r3, r3
 800564e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005652:	b2da      	uxtb	r2, r3
 8005654:	4b38      	ldr	r3, [pc, #224]	@ (8005738 <xPortStartScheduler+0x144>)
 8005656:	701a      	strb	r2, [r3, #0]
         * accounting for the number of priority bits supported by the
         * hardware. A priority of 0 is invalid because setting the BASEPRI
         * register to 0 unmasks all interrupts, and interrupts with priority 0
         * cannot be masked using BASEPRI.
         * See https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
        configASSERT( ucMaxSysCallPriority );
 8005658:	4b37      	ldr	r3, [pc, #220]	@ (8005738 <xPortStartScheduler+0x144>)
 800565a:	781b      	ldrb	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d104      	bne.n	800566a <xPortStartScheduler+0x76>
 8005660:	f240 116f 	movw	r1, #367	@ 0x16f
 8005664:	4831      	ldr	r0, [pc, #196]	@ (800572c <xPortStartScheduler+0x138>)
 8005666:	f7fb ff03 	bl	8001470 <vAssertCalled>

        /* Check that the bits not implemented in hardware are zero in
         * configMAX_SYSCALL_INTERRUPT_PRIORITY. */
        configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & ( ~ucMaxPriorityValue ) ) == 0U );
 800566a:	79fb      	ldrb	r3, [r7, #7]
 800566c:	b2db      	uxtb	r3, r3
 800566e:	43db      	mvns	r3, r3
 8005670:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00d      	beq.n	8005694 <xPortStartScheduler+0xa0>
 8005678:	f240 1173 	movw	r1, #371	@ 0x173
 800567c:	482b      	ldr	r0, [pc, #172]	@ (800572c <xPortStartScheduler+0x138>)
 800567e:	f7fb fef7 	bl	8001470 <vAssertCalled>

        /* Calculate the maximum acceptable priority group value for the number
         * of bits read back. */

        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005682:	e007      	b.n	8005694 <xPortStartScheduler+0xa0>
        {
            ulImplementedPrioBits++;
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	3301      	adds	r3, #1
 8005688:	60bb      	str	r3, [r7, #8]
            ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800568a:	79fb      	ldrb	r3, [r7, #7]
 800568c:	b2db      	uxtb	r3, r3
 800568e:	005b      	lsls	r3, r3, #1
 8005690:	b2db      	uxtb	r3, r3
 8005692:	71fb      	strb	r3, [r7, #7]
        while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005694:	79fb      	ldrb	r3, [r7, #7]
 8005696:	b2db      	uxtb	r3, r3
 8005698:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800569c:	2b80      	cmp	r3, #128	@ 0x80
 800569e:	d0f1      	beq.n	8005684 <xPortStartScheduler+0x90>
        }

        if( ulImplementedPrioBits == 8 )
 80056a0:	68bb      	ldr	r3, [r7, #8]
 80056a2:	2b08      	cmp	r3, #8
 80056a4:	d103      	bne.n	80056ae <xPortStartScheduler+0xba>
             *
             * The following assert ensures that the sub-priority bit in the
             * configMAX_SYSCALL_INTERRUPT_PRIORITY is clear to avoid the above mentioned
             * confusion. */
            configASSERT( ( configMAX_SYSCALL_INTERRUPT_PRIORITY & 0x1U ) == 0U );
            ulMaxPRIGROUPValue = 0;
 80056a6:	4b25      	ldr	r3, [pc, #148]	@ (800573c <xPortStartScheduler+0x148>)
 80056a8:	2200      	movs	r2, #0
 80056aa:	601a      	str	r2, [r3, #0]
 80056ac:	e004      	b.n	80056b8 <xPortStartScheduler+0xc4>
        }
        else
        {
            ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS - ulImplementedPrioBits;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	f1c3 0307 	rsb	r3, r3, #7
 80056b4:	4a21      	ldr	r2, [pc, #132]	@ (800573c <xPortStartScheduler+0x148>)
 80056b6:	6013      	str	r3, [r2, #0]
        }

        /* Shift the priority group value back to its position within the AIRCR
         * register. */
        ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80056b8:	4b20      	ldr	r3, [pc, #128]	@ (800573c <xPortStartScheduler+0x148>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	021b      	lsls	r3, r3, #8
 80056be:	4a1f      	ldr	r2, [pc, #124]	@ (800573c <xPortStartScheduler+0x148>)
 80056c0:	6013      	str	r3, [r2, #0]
        ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80056c2:	4b1e      	ldr	r3, [pc, #120]	@ (800573c <xPortStartScheduler+0x148>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80056ca:	4a1c      	ldr	r2, [pc, #112]	@ (800573c <xPortStartScheduler+0x148>)
 80056cc:	6013      	str	r3, [r2, #0]

        /* Restore the clobbered interrupt priority register to its original
         * value. */
        *pucFirstUserPriorityRegister = ucOriginalPriority;
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
 80056d0:	b2da      	uxtb	r2, r3
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	701a      	strb	r2, [r3, #0]
    }
    #endif /* configASSERT_DEFINED */

    /* Make PendSV and SysTick the lowest priority interrupts, and make SVCall
     * the highest priority. */
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80056d6:	4b1a      	ldr	r3, [pc, #104]	@ (8005740 <xPortStartScheduler+0x14c>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	4a19      	ldr	r2, [pc, #100]	@ (8005740 <xPortStartScheduler+0x14c>)
 80056dc:	f443 037f 	orr.w	r3, r3, #16711680	@ 0xff0000
 80056e0:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 80056e2:	4b17      	ldr	r3, [pc, #92]	@ (8005740 <xPortStartScheduler+0x14c>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4a16      	ldr	r2, [pc, #88]	@ (8005740 <xPortStartScheduler+0x14c>)
 80056e8:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 80056ec:	6013      	str	r3, [r2, #0]
    portNVIC_SHPR2_REG = 0;
 80056ee:	4b15      	ldr	r3, [pc, #84]	@ (8005744 <xPortStartScheduler+0x150>)
 80056f0:	2200      	movs	r2, #0
 80056f2:	601a      	str	r2, [r3, #0]

    /* Start the timer that generates the tick ISR.  Interrupts are disabled
     * here already. */
    vPortSetupTimerInterrupt();
 80056f4:	f000 f8d4 	bl	80058a0 <vPortSetupTimerInterrupt>

    /* Initialise the critical nesting count ready for the first task. */
    uxCriticalNesting = 0;
 80056f8:	4b13      	ldr	r3, [pc, #76]	@ (8005748 <xPortStartScheduler+0x154>)
 80056fa:	2200      	movs	r2, #0
 80056fc:	601a      	str	r2, [r3, #0]

    /* Ensure the VFP is enabled - it should be anyway. */
    vPortEnableVFP();
 80056fe:	f000 f8e9 	bl	80058d4 <vPortEnableVFP>

    /* Lazy save always. */
    *( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005702:	4b12      	ldr	r3, [pc, #72]	@ (800574c <xPortStartScheduler+0x158>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	4a11      	ldr	r2, [pc, #68]	@ (800574c <xPortStartScheduler+0x158>)
 8005708:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800570c:	6013      	str	r3, [r2, #0]

    /* Start the first task. */
    prvPortStartFirstTask();
 800570e:	f7ff ff5b 	bl	80055c8 <prvPortStartFirstTask>
     * exit error function to prevent compiler warnings about a static function
     * not being called in the case that the application writer overrides this
     * functionality by defining configTASK_RETURN_ADDRESS.  Call
     * vTaskSwitchContext() so link time optimisation does not remove the
     * symbol. */
    vTaskSwitchContext();
 8005712:	f7fe fbf3 	bl	8003efc <vTaskSwitchContext>
    prvTaskExitError();
 8005716:	f7ff ff17 	bl	8005548 <prvTaskExitError>

    /* Should not get here! */
    return 0;
 800571a:	2300      	movs	r3, #0
}
 800571c:	4618      	mov	r0, r3
 800571e:	3718      	adds	r7, #24
 8005720:	46bd      	mov	sp, r7
 8005722:	bd80      	pop	{r7, pc}
 8005724:	e000ed08 	.word	0xe000ed08
 8005728:	080055a1 	.word	0x080055a1
 800572c:	08022f04 	.word	0x08022f04
 8005730:	080057f1 	.word	0x080057f1
 8005734:	e000e400 	.word	0xe000e400
 8005738:	20000c3c 	.word	0x20000c3c
 800573c:	20000c40 	.word	0x20000c40
 8005740:	e000ed20 	.word	0xe000ed20
 8005744:	e000ed1c 	.word	0xe000ed1c
 8005748:	2000000c 	.word	0x2000000c
 800574c:	e000ef34 	.word	0xe000ef34

08005750 <vPortEnterCritical>:
    configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
    __asm volatile
 8005756:	f04f 0340 	mov.w	r3, #64	@ 0x40
 800575a:	b672      	cpsid	i
 800575c:	f383 8811 	msr	BASEPRI, r3
 8005760:	f3bf 8f6f 	isb	sy
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	b662      	cpsie	i
 800576a:	607b      	str	r3, [r7, #4]
}
 800576c:	bf00      	nop
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 800576e:	4b0b      	ldr	r3, [pc, #44]	@ (800579c <vPortEnterCritical+0x4c>)
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	3301      	adds	r3, #1
 8005774:	4a09      	ldr	r2, [pc, #36]	@ (800579c <vPortEnterCritical+0x4c>)
 8005776:	6013      	str	r3, [r2, #0]
    /* This is not the interrupt safe version of the enter critical function so
     * assert() if it is being called from an interrupt context.  Only API
     * functions that end in "FromISR" can be used in an interrupt.  Only assert if
     * the critical nesting count is 1 to protect against recursive calls if the
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
 8005778:	4b08      	ldr	r3, [pc, #32]	@ (800579c <vPortEnterCritical+0x4c>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	2b01      	cmp	r3, #1
 800577e:	d109      	bne.n	8005794 <vPortEnterCritical+0x44>
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005780:	4b07      	ldr	r3, [pc, #28]	@ (80057a0 <vPortEnterCritical+0x50>)
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d004      	beq.n	8005794 <vPortEnterCritical+0x44>
 800578a:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 800578e:	4805      	ldr	r0, [pc, #20]	@ (80057a4 <vPortEnterCritical+0x54>)
 8005790:	f7fb fe6e 	bl	8001470 <vAssertCalled>
    }
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}
 800579c:	2000000c 	.word	0x2000000c
 80057a0:	e000ed04 	.word	0xe000ed04
 80057a4:	08022f04 	.word	0x08022f04

080057a8 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b082      	sub	sp, #8
 80057ac:	af00      	add	r7, sp, #0
    configASSERT( uxCriticalNesting );
 80057ae:	4b0e      	ldr	r3, [pc, #56]	@ (80057e8 <vPortExitCritical+0x40>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d104      	bne.n	80057c0 <vPortExitCritical+0x18>
 80057b6:	f240 11e3 	movw	r1, #483	@ 0x1e3
 80057ba:	480c      	ldr	r0, [pc, #48]	@ (80057ec <vPortExitCritical+0x44>)
 80057bc:	f7fb fe58 	bl	8001470 <vAssertCalled>
    uxCriticalNesting--;
 80057c0:	4b09      	ldr	r3, [pc, #36]	@ (80057e8 <vPortExitCritical+0x40>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	3b01      	subs	r3, #1
 80057c6:	4a08      	ldr	r2, [pc, #32]	@ (80057e8 <vPortExitCritical+0x40>)
 80057c8:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80057ca:	4b07      	ldr	r3, [pc, #28]	@ (80057e8 <vPortExitCritical+0x40>)
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d105      	bne.n	80057de <vPortExitCritical+0x36>
 80057d2:	2300      	movs	r3, #0
 80057d4:	607b      	str	r3, [r7, #4]
    __asm volatile
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f383 8811 	msr	BASEPRI, r3
}
 80057dc:	bf00      	nop
    {
        portENABLE_INTERRUPTS();
    }
}
 80057de:	bf00      	nop
 80057e0:	3708      	adds	r7, #8
 80057e2:	46bd      	mov	sp, r7
 80057e4:	bd80      	pop	{r7, pc}
 80057e6:	bf00      	nop
 80057e8:	2000000c 	.word	0x2000000c
 80057ec:	08022f04 	.word	0x08022f04

080057f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 80057f0:	f3ef 8009 	mrs	r0, PSP
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	4b15      	ldr	r3, [pc, #84]	@ (8005850 <pxCurrentTCBConst>)
 80057fa:	681a      	ldr	r2, [r3, #0]
 80057fc:	f01e 0f10 	tst.w	lr, #16
 8005800:	bf08      	it	eq
 8005802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800580a:	6010      	str	r0, [r2, #0]
 800580c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005810:	f04f 0040 	mov.w	r0, #64	@ 0x40
 8005814:	b672      	cpsid	i
 8005816:	f380 8811 	msr	BASEPRI, r0
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	f3bf 8f6f 	isb	sy
 8005822:	b662      	cpsie	i
 8005824:	f7fe fb6a 	bl	8003efc <vTaskSwitchContext>
 8005828:	f04f 0000 	mov.w	r0, #0
 800582c:	f380 8811 	msr	BASEPRI, r0
 8005830:	bc09      	pop	{r0, r3}
 8005832:	6819      	ldr	r1, [r3, #0]
 8005834:	6808      	ldr	r0, [r1, #0]
 8005836:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800583a:	f01e 0f10 	tst.w	lr, #16
 800583e:	bf08      	it	eq
 8005840:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005844:	f380 8809 	msr	PSP, r0
 8005848:	f3bf 8f6f 	isb	sy
 800584c:	4770      	bx	lr
 800584e:	bf00      	nop

08005850 <pxCurrentTCBConst>:
 8005850:	20000b08 	.word	0x20000b08
        "                                       \n"
        "   .align 4                            \n"
        "pxCurrentTCBConst: .word pxCurrentTCB  \n"
        ::"i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY )
    );
}
 8005854:	bf00      	nop
 8005856:	bf00      	nop

08005858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b082      	sub	sp, #8
 800585c:	af00      	add	r7, sp, #0
    __asm volatile
 800585e:	f04f 0340 	mov.w	r3, #64	@ 0x40
 8005862:	b672      	cpsid	i
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	b662      	cpsie	i
 8005872:	607b      	str	r3, [r7, #4]
}
 8005874:	bf00      	nop
     * known. */
    portDISABLE_INTERRUPTS();
    traceISR_ENTER();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8005876:	f7fe fa2d 	bl	8003cd4 <xTaskIncrementTick>
 800587a:	4603      	mov	r3, r0
 800587c:	2b00      	cmp	r3, #0
 800587e:	d003      	beq.n	8005888 <xPortSysTickHandler+0x30>
        {
            traceISR_EXIT_TO_SCHEDULER();

            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005880:	4b06      	ldr	r3, [pc, #24]	@ (800589c <xPortSysTickHandler+0x44>)
 8005882:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005886:	601a      	str	r2, [r3, #0]
 8005888:	2300      	movs	r3, #0
 800588a:	603b      	str	r3, [r7, #0]
    __asm volatile
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	f383 8811 	msr	BASEPRI, r3
}
 8005892:	bf00      	nop
        {
            traceISR_EXIT();
        }
    }
    portENABLE_INTERRUPTS();
}
 8005894:	bf00      	nop
 8005896:	3708      	adds	r7, #8
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}
 800589c:	e000ed04 	.word	0xe000ed04

080058a0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__( ( weak ) ) void vPortSetupTimerInterrupt( void )
{
 80058a0:	b480      	push	{r7}
 80058a2:	af00      	add	r7, sp, #0
        ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
    }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80058a4:	4b08      	ldr	r3, [pc, #32]	@ (80058c8 <vPortSetupTimerInterrupt+0x28>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80058aa:	4b08      	ldr	r3, [pc, #32]	@ (80058cc <vPortSetupTimerInterrupt+0x2c>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	601a      	str	r2, [r3, #0]

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80058b0:	4b07      	ldr	r3, [pc, #28]	@ (80058d0 <vPortSetupTimerInterrupt+0x30>)
 80058b2:	f24c 324f 	movw	r2, #49999	@ 0xc34f
 80058b6:	601a      	str	r2, [r3, #0]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT_CONFIG | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80058b8:	4b03      	ldr	r3, [pc, #12]	@ (80058c8 <vPortSetupTimerInterrupt+0x28>)
 80058ba:	2203      	movs	r2, #3
 80058bc:	601a      	str	r2, [r3, #0]
}
 80058be:	bf00      	nop
 80058c0:	46bd      	mov	sp, r7
 80058c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c6:	4770      	bx	lr
 80058c8:	e000e010 	.word	0xe000e010
 80058cc:	e000e018 	.word	0xe000e018
 80058d0:	e000e014 	.word	0xe000e014

080058d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
    __asm volatile
 80058d4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80058e4 <vPortEnableVFP+0x10>
 80058d8:	6801      	ldr	r1, [r0, #0]
 80058da:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80058de:	6001      	str	r1, [r0, #0]
 80058e0:	4770      	bx	lr
 80058e2:	0000      	.short	0x0000
 80058e4:	e000ed88 	.word	0xe000ed88
        "   orr r1, r1, #( 0xf << 20 )  \n" /* Enable CP10 and CP11 coprocessors, then save back. */
        "   str r1, [r0]                \n"
        "   bx r14                      \n"
        "   .ltorg                      \n"
    );
}
 80058e8:	bf00      	nop
 80058ea:	bf00      	nop

080058ec <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if ( configASSERT_DEFINED == 1 )

    void vPortValidateInterruptPriority( void )
    {
 80058ec:	b580      	push	{r7, lr}
 80058ee:	b082      	sub	sp, #8
 80058f0:	af00      	add	r7, sp, #0
        uint32_t ulCurrentInterrupt;
        uint8_t ucCurrentPriority;

        /* Obtain the number of the currently executing interrupt. */
        __asm volatile ( "mrs %0, ipsr" : "=r" ( ulCurrentInterrupt )::"memory" );
 80058f2:	f3ef 8305 	mrs	r3, IPSR
 80058f6:	607b      	str	r3, [r7, #4]

        /* Is the interrupt number a user defined interrupt? */
        if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	2b0f      	cmp	r3, #15
 80058fc:	d90e      	bls.n	800591c <vPortValidateInterruptPriority+0x30>
        {
            /* Look up the interrupt's priority. */
            ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80058fe:	4a10      	ldr	r2, [pc, #64]	@ (8005940 <vPortValidateInterruptPriority+0x54>)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	4413      	add	r3, r2
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	70fb      	strb	r3, [r7, #3]
             * interrupt entry is as fast and simple as possible.
             *
             * The following links provide detailed information:
             * https://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html
             * https://www.FreeRTOS.org/FAQHelp.html */
            configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005908:	4b0e      	ldr	r3, [pc, #56]	@ (8005944 <vPortValidateInterruptPriority+0x58>)
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	78fa      	ldrb	r2, [r7, #3]
 800590e:	429a      	cmp	r2, r3
 8005910:	d204      	bcs.n	800591c <vPortValidateInterruptPriority+0x30>
 8005912:	f44f 715c 	mov.w	r1, #880	@ 0x370
 8005916:	480c      	ldr	r0, [pc, #48]	@ (8005948 <vPortValidateInterruptPriority+0x5c>)
 8005918:	f7fb fdaa 	bl	8001470 <vAssertCalled>
         * configuration then the correct setting can be achieved on all Cortex-M
         * devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
         * scheduler.  Note however that some vendor specific peripheral libraries
         * assume a non-zero priority group setting, in which cases using a value
         * of zero will result in unpredictable behaviour. */
        configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800591c:	4b0b      	ldr	r3, [pc, #44]	@ (800594c <vPortValidateInterruptPriority+0x60>)
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005924:	4b0a      	ldr	r3, [pc, #40]	@ (8005950 <vPortValidateInterruptPriority+0x64>)
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	429a      	cmp	r2, r3
 800592a:	d904      	bls.n	8005936 <vPortValidateInterruptPriority+0x4a>
 800592c:	f44f 7160 	mov.w	r1, #896	@ 0x380
 8005930:	4805      	ldr	r0, [pc, #20]	@ (8005948 <vPortValidateInterruptPriority+0x5c>)
 8005932:	f7fb fd9d 	bl	8001470 <vAssertCalled>
    }
 8005936:	bf00      	nop
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	e000e3f0 	.word	0xe000e3f0
 8005944:	20000c3c 	.word	0x20000c3c
 8005948:	08022f04 	.word	0x08022f04
 800594c:	e000ed0c 	.word	0xe000ed0c
 8005950:	20000c40 	.word	0x20000c40

08005954 <pvPortMalloc>:
#endif /* configENABLE_HEAP_PROTECTOR */

/*-----------------------------------------------------------*/

void * pvPortMalloc( size_t xWantedSize )
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxBlock;
    BlockLink_t * pxPreviousBlock;
    BlockLink_t * pxNewBlockLink;
    void * pvReturn = NULL;
 800595c:	2300      	movs	r3, #0
 800595e:	617b      	str	r3, [r7, #20]
    size_t xAdditionalRequiredSize;

    /* The heap must be initialised before the first call to
     * pvPortMalloc(). */
    configASSERT( pxEnd );
 8005960:	4b60      	ldr	r3, [pc, #384]	@ (8005ae4 <pvPortMalloc+0x190>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	2b00      	cmp	r3, #0
 8005966:	d103      	bne.n	8005970 <pvPortMalloc+0x1c>
 8005968:	21da      	movs	r1, #218	@ 0xda
 800596a:	485f      	ldr	r0, [pc, #380]	@ (8005ae8 <pvPortMalloc+0x194>)
 800596c:	f7fb fd80 	bl	8001470 <vAssertCalled>

    if( xWantedSize > 0 )
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d022      	beq.n	80059bc <pvPortMalloc+0x68>
    {
        /* The wanted size must be increased so it can contain a BlockLink_t
         * structure in addition to the requested amount of bytes. */
        if( heapADD_WILL_OVERFLOW( xWantedSize, xHeapStructSize ) == 0 )
 8005976:	2308      	movs	r3, #8
 8005978:	43db      	mvns	r3, r3
 800597a:	687a      	ldr	r2, [r7, #4]
 800597c:	429a      	cmp	r2, r3
 800597e:	d81b      	bhi.n	80059b8 <pvPortMalloc+0x64>
        {
            xWantedSize += xHeapStructSize;
 8005980:	2208      	movs	r2, #8
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	4413      	add	r3, r2
 8005986:	607b      	str	r3, [r7, #4]

            /* Ensure that blocks are always aligned to the required number
             * of bytes. */
            if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	f003 0307 	and.w	r3, r3, #7
 800598e:	2b00      	cmp	r3, #0
 8005990:	d014      	beq.n	80059bc <pvPortMalloc+0x68>
            {
                /* Byte alignment required. */
                xAdditionalRequiredSize = portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK );
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	f1c3 0308 	rsb	r3, r3, #8
 800599c:	613b      	str	r3, [r7, #16]

                if( heapADD_WILL_OVERFLOW( xWantedSize, xAdditionalRequiredSize ) == 0 )
 800599e:	693b      	ldr	r3, [r7, #16]
 80059a0:	43db      	mvns	r3, r3
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d804      	bhi.n	80059b2 <pvPortMalloc+0x5e>
                {
                    xWantedSize += xAdditionalRequiredSize;
 80059a8:	687a      	ldr	r2, [r7, #4]
 80059aa:	693b      	ldr	r3, [r7, #16]
 80059ac:	4413      	add	r3, r2
 80059ae:	607b      	str	r3, [r7, #4]
 80059b0:	e004      	b.n	80059bc <pvPortMalloc+0x68>
                }
                else
                {
                    xWantedSize = 0;
 80059b2:	2300      	movs	r3, #0
 80059b4:	607b      	str	r3, [r7, #4]
 80059b6:	e001      	b.n	80059bc <pvPortMalloc+0x68>
                mtCOVERAGE_TEST_MARKER();
            }
        }
        else
        {
            xWantedSize = 0;
 80059b8:	2300      	movs	r3, #0
 80059ba:	607b      	str	r3, [r7, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    vTaskSuspendAll();
 80059bc:	f7fe f84a 	bl	8003a54 <vTaskSuspendAll>
    {
        /* Check the block size we are trying to allocate is not so large that the
         * top bit is set.  The top bit of the block size member of the BlockLink_t
         * structure is used to determine who owns the block - the application or
         * the kernel, so it must be free. */
        if( heapBLOCK_SIZE_IS_VALID( xWantedSize ) != 0 )
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	db78      	blt.n	8005ab8 <pvPortMalloc+0x164>
        {
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d075      	beq.n	8005ab8 <pvPortMalloc+0x164>
 80059cc:	4b47      	ldr	r3, [pc, #284]	@ (8005aec <pvPortMalloc+0x198>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	429a      	cmp	r2, r3
 80059d4:	d870      	bhi.n	8005ab8 <pvPortMalloc+0x164>
            {
                /* Traverse the list from the start (lowest address) block until
                 * one of adequate size is found. */
                pxPreviousBlock = &xStart;
 80059d6:	4b46      	ldr	r3, [pc, #280]	@ (8005af0 <pvPortMalloc+0x19c>)
 80059d8:	61bb      	str	r3, [r7, #24]
                pxBlock = heapPROTECT_BLOCK_POINTER( xStart.pxNextFreeBlock );
 80059da:	4b45      	ldr	r3, [pc, #276]	@ (8005af0 <pvPortMalloc+0x19c>)
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	61fb      	str	r3, [r7, #28]
                heapVALIDATE_BLOCK_POINTER( pxBlock );

                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80059e0:	e004      	b.n	80059ec <pvPortMalloc+0x98>
                {
                    pxPreviousBlock = pxBlock;
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	61bb      	str	r3, [r7, #24]
                    pxBlock = heapPROTECT_BLOCK_POINTER( pxBlock->pxNextFreeBlock );
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	61fb      	str	r3, [r7, #28]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != heapPROTECT_BLOCK_POINTER( NULL ) ) )
 80059ec:	69fb      	ldr	r3, [r7, #28]
 80059ee:	685b      	ldr	r3, [r3, #4]
 80059f0:	687a      	ldr	r2, [r7, #4]
 80059f2:	429a      	cmp	r2, r3
 80059f4:	d903      	bls.n	80059fe <pvPortMalloc+0xaa>
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1f1      	bne.n	80059e2 <pvPortMalloc+0x8e>
                    heapVALIDATE_BLOCK_POINTER( pxBlock );
                }

                /* If the end marker was reached then a block of adequate size
                 * was not found. */
                if( pxBlock != pxEnd )
 80059fe:	4b39      	ldr	r3, [pc, #228]	@ (8005ae4 <pvPortMalloc+0x190>)
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	69fa      	ldr	r2, [r7, #28]
 8005a04:	429a      	cmp	r2, r3
 8005a06:	d057      	beq.n	8005ab8 <pvPortMalloc+0x164>
                {
                    /* Return the memory space pointed to - jumping over the
                     * BlockLink_t structure at its start. */
                    pvReturn = ( void * ) ( ( ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxPreviousBlock->pxNextFreeBlock ) ) + xHeapStructSize );
 8005a08:	69bb      	ldr	r3, [r7, #24]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	2208      	movs	r2, #8
 8005a0e:	4413      	add	r3, r2
 8005a10:	617b      	str	r3, [r7, #20]
                    heapVALIDATE_BLOCK_POINTER( pvReturn );

                    /* This block is being returned for use so must be taken out
                     * of the list of free blocks. */
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	681a      	ldr	r2, [r3, #0]
 8005a16:	69bb      	ldr	r3, [r7, #24]
 8005a18:	601a      	str	r2, [r3, #0]

                    /* If the block is larger than required it can be split into
                     * two. */
                    configASSERT( heapSUBTRACT_WILL_UNDERFLOW( pxBlock->xBlockSize, xWantedSize ) == 0 );
 8005a1a:	69fb      	ldr	r3, [r7, #28]
 8005a1c:	685b      	ldr	r3, [r3, #4]
 8005a1e:	687a      	ldr	r2, [r7, #4]
 8005a20:	429a      	cmp	r2, r3
 8005a22:	d904      	bls.n	8005a2e <pvPortMalloc+0xda>
 8005a24:	f240 1129 	movw	r1, #297	@ 0x129
 8005a28:	482f      	ldr	r0, [pc, #188]	@ (8005ae8 <pvPortMalloc+0x194>)
 8005a2a:	f7fb fd21 	bl	8001470 <vAssertCalled>

                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	685a      	ldr	r2, [r3, #4]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	1ad2      	subs	r2, r2, r3
 8005a36:	2308      	movs	r3, #8
 8005a38:	005b      	lsls	r3, r3, #1
 8005a3a:	429a      	cmp	r2, r3
 8005a3c:	d91d      	bls.n	8005a7a <pvPortMalloc+0x126>
                    {
                        /* This block is to be split into two.  Create a new
                         * block following the number of bytes requested. The void
                         * cast is used to prevent byte alignment warnings from the
                         * compiler. */
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005a3e:	69fa      	ldr	r2, [r7, #28]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	4413      	add	r3, r2
 8005a44:	60fb      	str	r3, [r7, #12]
                        configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	f003 0307 	and.w	r3, r3, #7
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d004      	beq.n	8005a5a <pvPortMalloc+0x106>
 8005a50:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8005a54:	4824      	ldr	r0, [pc, #144]	@ (8005ae8 <pvPortMalloc+0x194>)
 8005a56:	f7fb fd0b 	bl	8001470 <vAssertCalled>

                        /* Calculate the sizes of two blocks split from the
                         * single block. */
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005a5a:	69fb      	ldr	r3, [r7, #28]
 8005a5c:	685a      	ldr	r2, [r3, #4]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	1ad2      	subs	r2, r2, r3
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	605a      	str	r2, [r3, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8005a66:	69fb      	ldr	r3, [r7, #28]
 8005a68:	687a      	ldr	r2, [r7, #4]
 8005a6a:	605a      	str	r2, [r3, #4]

                        /* Insert the new block into the list of free blocks. */
                        pxNewBlockLink->pxNextFreeBlock = pxPreviousBlock->pxNextFreeBlock;
 8005a6c:	69bb      	ldr	r3, [r7, #24]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	601a      	str	r2, [r3, #0]
                        pxPreviousBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxNewBlockLink );
 8005a74:	69bb      	ldr	r3, [r7, #24]
 8005a76:	68fa      	ldr	r2, [r7, #12]
 8005a78:	601a      	str	r2, [r3, #0]
                    else
                    {
                        mtCOVERAGE_TEST_MARKER();
                    }

                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005a7a:	4b1c      	ldr	r3, [pc, #112]	@ (8005aec <pvPortMalloc+0x198>)
 8005a7c:	681a      	ldr	r2, [r3, #0]
 8005a7e:	69fb      	ldr	r3, [r7, #28]
 8005a80:	685b      	ldr	r3, [r3, #4]
 8005a82:	1ad3      	subs	r3, r2, r3
 8005a84:	4a19      	ldr	r2, [pc, #100]	@ (8005aec <pvPortMalloc+0x198>)
 8005a86:	6013      	str	r3, [r2, #0]

                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005a88:	4b18      	ldr	r3, [pc, #96]	@ (8005aec <pvPortMalloc+0x198>)
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	4b19      	ldr	r3, [pc, #100]	@ (8005af4 <pvPortMalloc+0x1a0>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	429a      	cmp	r2, r3
 8005a92:	d203      	bcs.n	8005a9c <pvPortMalloc+0x148>
                    {
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005a94:	4b15      	ldr	r3, [pc, #84]	@ (8005aec <pvPortMalloc+0x198>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	4a16      	ldr	r2, [pc, #88]	@ (8005af4 <pvPortMalloc+0x1a0>)
 8005a9a:	6013      	str	r3, [r2, #0]
                        mtCOVERAGE_TEST_MARKER();
                    }

                    /* The block is being returned - it is allocated and owned
                     * by the application and has no "next" block. */
                    heapALLOCATE_BLOCK( pxBlock );
 8005a9c:	69fb      	ldr	r3, [r7, #28]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	605a      	str	r2, [r3, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005aa8:	69fb      	ldr	r3, [r7, #28]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	601a      	str	r2, [r3, #0]
                    xNumberOfSuccessfulAllocations++;
 8005aae:	4b12      	ldr	r3, [pc, #72]	@ (8005af8 <pvPortMalloc+0x1a4>)
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	3301      	adds	r3, #1
 8005ab4:	4a10      	ldr	r2, [pc, #64]	@ (8005af8 <pvPortMalloc+0x1a4>)
 8005ab6:	6013      	str	r3, [r2, #0]
            mtCOVERAGE_TEST_MARKER();
        }

        traceMALLOC( pvReturn, xWantedSize );
    }
    ( void ) xTaskResumeAll();
 8005ab8:	f7fd ffda 	bl	8003a70 <xTaskResumeAll>

    #if ( configUSE_MALLOC_FAILED_HOOK == 1 )
    {
        if( pvReturn == NULL )
 8005abc:	697b      	ldr	r3, [r7, #20]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d101      	bne.n	8005ac6 <pvPortMalloc+0x172>
        {
            vApplicationMallocFailedHook();
 8005ac2:	f7fb fce9 	bl	8001498 <vApplicationMallocFailedHook>
            mtCOVERAGE_TEST_MARKER();
        }
    }
    #endif /* if ( configUSE_MALLOC_FAILED_HOOK == 1 ) */

    configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f003 0307 	and.w	r3, r3, #7
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d004      	beq.n	8005ada <pvPortMalloc+0x186>
 8005ad0:	f240 1173 	movw	r1, #371	@ 0x173
 8005ad4:	4804      	ldr	r0, [pc, #16]	@ (8005ae8 <pvPortMalloc+0x194>)
 8005ad6:	f7fb fccb 	bl	8001470 <vAssertCalled>
    return pvReturn;
 8005ada:	697b      	ldr	r3, [r7, #20]
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3720      	adds	r7, #32
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}
 8005ae4:	20000c4c 	.word	0x20000c4c
 8005ae8:	08022f40 	.word	0x08022f40
 8005aec:	20000c50 	.word	0x20000c50
 8005af0:	20000c44 	.word	0x20000c44
 8005af4:	20000c54 	.word	0x20000c54
 8005af8:	20000c58 	.word	0x20000c58

08005afc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void * pv )
{
 8005afc:	b580      	push	{r7, lr}
 8005afe:	b084      	sub	sp, #16
 8005b00:	af00      	add	r7, sp, #0
 8005b02:	6078      	str	r0, [r7, #4]
    uint8_t * puc = ( uint8_t * ) pv;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	60fb      	str	r3, [r7, #12]
    BlockLink_t * pxLink;

    if( pv != NULL )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d03d      	beq.n	8005b8a <vPortFree+0x8e>
    {
        /* The memory being freed will have an BlockLink_t structure immediately
         * before it. */
        puc -= xHeapStructSize;
 8005b0e:	2308      	movs	r3, #8
 8005b10:	425b      	negs	r3, r3
 8005b12:	68fa      	ldr	r2, [r7, #12]
 8005b14:	4413      	add	r3, r2
 8005b16:	60fb      	str	r3, [r7, #12]

        /* This casting is to keep the compiler from issuing warnings. */
        pxLink = ( void * ) puc;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	60bb      	str	r3, [r7, #8]

        heapVALIDATE_BLOCK_POINTER( pxLink );
        configASSERT( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 );
 8005b1c:	68bb      	ldr	r3, [r7, #8]
 8005b1e:	685b      	ldr	r3, [r3, #4]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	db04      	blt.n	8005b2e <vPortFree+0x32>
 8005b24:	f240 1187 	movw	r1, #391	@ 0x187
 8005b28:	481a      	ldr	r0, [pc, #104]	@ (8005b94 <vPortFree+0x98>)
 8005b2a:	f7fb fca1 	bl	8001470 <vAssertCalled>
        configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d004      	beq.n	8005b40 <vPortFree+0x44>
 8005b36:	f44f 71c4 	mov.w	r1, #392	@ 0x188
 8005b3a:	4816      	ldr	r0, [pc, #88]	@ (8005b94 <vPortFree+0x98>)
 8005b3c:	f7fb fc98 	bl	8001470 <vAssertCalled>

        if( heapBLOCK_IS_ALLOCATED( pxLink ) != 0 )
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	0fdb      	lsrs	r3, r3, #31
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	b2db      	uxtb	r3, r3
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d01c      	beq.n	8005b8a <vPortFree+0x8e>
        {
            if( pxLink->pxNextFreeBlock == NULL )
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d118      	bne.n	8005b8a <vPortFree+0x8e>
            {
                /* The block is being returned to the heap - it is no longer
                 * allocated. */
                heapFREE_BLOCK( pxLink );
 8005b58:	68bb      	ldr	r3, [r7, #8]
 8005b5a:	685b      	ldr	r3, [r3, #4]
 8005b5c:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	605a      	str	r2, [r3, #4]
                        ( void ) memset( puc + xHeapStructSize, 0, pxLink->xBlockSize - xHeapStructSize );
                    }
                }
                #endif

                vTaskSuspendAll();
 8005b64:	f7fd ff76 	bl	8003a54 <vTaskSuspendAll>
                {
                    /* Add this block to the list of free blocks. */
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005b68:	68bb      	ldr	r3, [r7, #8]
 8005b6a:	685a      	ldr	r2, [r3, #4]
 8005b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8005b98 <vPortFree+0x9c>)
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	4413      	add	r3, r2
 8005b72:	4a09      	ldr	r2, [pc, #36]	@ (8005b98 <vPortFree+0x9c>)
 8005b74:	6013      	str	r3, [r2, #0]
                    traceFREE( pv, pxLink->xBlockSize );
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005b76:	68b8      	ldr	r0, [r7, #8]
 8005b78:	f000 f82a 	bl	8005bd0 <prvInsertBlockIntoFreeList>
                    xNumberOfSuccessfulFrees++;
 8005b7c:	4b07      	ldr	r3, [pc, #28]	@ (8005b9c <vPortFree+0xa0>)
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	3301      	adds	r3, #1
 8005b82:	4a06      	ldr	r2, [pc, #24]	@ (8005b9c <vPortFree+0xa0>)
 8005b84:	6013      	str	r3, [r2, #0]
                }
                ( void ) xTaskResumeAll();
 8005b86:	f7fd ff73 	bl	8003a70 <xTaskResumeAll>
        else
        {
            mtCOVERAGE_TEST_MARKER();
        }
    }
}
 8005b8a:	bf00      	nop
 8005b8c:	3710      	adds	r7, #16
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	bd80      	pop	{r7, pc}
 8005b92:	bf00      	nop
 8005b94:	08022f40 	.word	0x08022f40
 8005b98:	20000c50 	.word	0x20000c50
 8005b9c:	20000c5c 	.word	0x20000c5c

08005ba0 <xPortGetFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetFreeHeapSize( void )
{
 8005ba0:	b480      	push	{r7}
 8005ba2:	af00      	add	r7, sp, #0
    return xFreeBytesRemaining;
 8005ba4:	4b03      	ldr	r3, [pc, #12]	@ (8005bb4 <xPortGetFreeHeapSize+0x14>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb0:	4770      	bx	lr
 8005bb2:	bf00      	nop
 8005bb4:	20000c50 	.word	0x20000c50

08005bb8 <xPortGetMinimumEverFreeHeapSize>:
/*-----------------------------------------------------------*/

size_t xPortGetMinimumEverFreeHeapSize( void )
{
 8005bb8:	b480      	push	{r7}
 8005bba:	af00      	add	r7, sp, #0
    return xMinimumEverFreeBytesRemaining;
 8005bbc:	4b03      	ldr	r3, [pc, #12]	@ (8005bcc <xPortGetMinimumEverFreeHeapSize+0x14>)
 8005bbe:	681b      	ldr	r3, [r3, #0]
}
 8005bc0:	4618      	mov	r0, r3
 8005bc2:	46bd      	mov	sp, r7
 8005bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc8:	4770      	bx	lr
 8005bca:	bf00      	nop
 8005bcc:	20000c54 	.word	0x20000c54

08005bd0 <prvInsertBlockIntoFreeList>:
    return pv;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) < pxBlockToInsert; pxIterator = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005bd8:	4b28      	ldr	r3, [pc, #160]	@ (8005c7c <prvInsertBlockIntoFreeList+0xac>)
 8005bda:	60fb      	str	r3, [r7, #12]
 8005bdc:	e002      	b.n	8005be4 <prvInsertBlockIntoFreeList+0x14>
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	60fb      	str	r3, [r7, #12]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	687a      	ldr	r2, [r7, #4]
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d8f7      	bhi.n	8005bde <prvInsertBlockIntoFreeList+0xe>
        heapVALIDATE_BLOCK_POINTER( pxIterator );
    }

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	685b      	ldr	r3, [r3, #4]
 8005bf6:	68ba      	ldr	r2, [r7, #8]
 8005bf8:	4413      	add	r3, r2
 8005bfa:	687a      	ldr	r2, [r7, #4]
 8005bfc:	429a      	cmp	r2, r3
 8005bfe:	d108      	bne.n	8005c12 <prvInsertBlockIntoFreeList+0x42>
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	685a      	ldr	r2, [r3, #4]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	685b      	ldr	r3, [r3, #4]
 8005c08:	441a      	add	r2, r3
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	605a      	str	r2, [r3, #4]
        pxBlockToInsert = pxIterator;
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	607b      	str	r3, [r7, #4]
        mtCOVERAGE_TEST_MARKER();
    }

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	60bb      	str	r3, [r7, #8]

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	68ba      	ldr	r2, [r7, #8]
 8005c1c:	441a      	add	r2, r3
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d118      	bne.n	8005c58 <prvInsertBlockIntoFreeList+0x88>
    {
        if( heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock ) != pxEnd )
 8005c26:	68fb      	ldr	r3, [r7, #12]
 8005c28:	681a      	ldr	r2, [r3, #0]
 8005c2a:	4b15      	ldr	r3, [pc, #84]	@ (8005c80 <prvInsertBlockIntoFreeList+0xb0>)
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	429a      	cmp	r2, r3
 8005c30:	d00d      	beq.n	8005c4e <prvInsertBlockIntoFreeList+0x7e>
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->xBlockSize;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	685a      	ldr	r2, [r3, #4]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	685b      	ldr	r3, [r3, #4]
 8005c3c:	441a      	add	r2, r3
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	605a      	str	r2, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxIterator->pxNextFreeBlock )->pxNextFreeBlock;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	681a      	ldr	r2, [r3, #0]
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	e008      	b.n	8005c60 <prvInsertBlockIntoFreeList+0x90>
        }
        else
        {
            pxBlockToInsert->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005c4e:	4b0c      	ldr	r3, [pc, #48]	@ (8005c80 <prvInsertBlockIntoFreeList+0xb0>)
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	601a      	str	r2, [r3, #0]
 8005c56:	e003      	b.n	8005c60 <prvInsertBlockIntoFreeList+0x90>
        }
    }
    else
    {
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681a      	ldr	r2, [r3, #0]
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	601a      	str	r2, [r3, #0]

    /* If the block being inserted plugged a gap, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	429a      	cmp	r2, r3
 8005c66:	d002      	beq.n	8005c6e <prvInsertBlockIntoFreeList+0x9e>
    {
        pxIterator->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxBlockToInsert );
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	687a      	ldr	r2, [r7, #4]
 8005c6c:	601a      	str	r2, [r3, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8005c6e:	bf00      	nop
 8005c70:	3714      	adds	r7, #20
 8005c72:	46bd      	mov	sp, r7
 8005c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c78:	4770      	bx	lr
 8005c7a:	bf00      	nop
 8005c7c:	20000c44 	.word	0x20000c44
 8005c80:	20000c4c 	.word	0x20000c4c

08005c84 <vPortDefineHeapRegions>:
/*-----------------------------------------------------------*/

void vPortDefineHeapRegions( const HeapRegion_t * const pxHeapRegions ) /* PRIVILEGED_FUNCTION */
{
 8005c84:	b580      	push	{r7, lr}
 8005c86:	b08a      	sub	sp, #40	@ 0x28
 8005c88:	af00      	add	r7, sp, #0
 8005c8a:	6078      	str	r0, [r7, #4]
    BlockLink_t * pxFirstFreeBlockInRegion = NULL;
 8005c8c:	2300      	movs	r3, #0
 8005c8e:	613b      	str	r3, [r7, #16]
    BlockLink_t * pxPreviousFreeBlock;
    portPOINTER_SIZE_TYPE xAlignedHeap;
    size_t xTotalRegionSize, xTotalHeapSize = 0;
 8005c90:	2300      	movs	r3, #0
 8005c92:	623b      	str	r3, [r7, #32]
    BaseType_t xDefinedRegions = 0;
 8005c94:	2300      	movs	r3, #0
 8005c96:	61fb      	str	r3, [r7, #28]
    portPOINTER_SIZE_TYPE xAddress;
    const HeapRegion_t * pxHeapRegion;

    /* Can only call once! */
    configASSERT( pxEnd == NULL );
 8005c98:	4b4b      	ldr	r3, [pc, #300]	@ (8005dc8 <vPortDefineHeapRegions+0x144>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d004      	beq.n	8005caa <vPortDefineHeapRegions+0x26>
 8005ca0:	f240 2121 	movw	r1, #545	@ 0x221
 8005ca4:	4849      	ldr	r0, [pc, #292]	@ (8005dcc <vPortDefineHeapRegions+0x148>)
 8005ca6:	f7fb fbe3 	bl	8001470 <vAssertCalled>
    {
        vApplicationGetRandomHeapCanary( &( xHeapCanary ) );
    }
    #endif

    pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8005caa:	69fb      	ldr	r3, [r7, #28]
 8005cac:	00db      	lsls	r3, r3, #3
 8005cae:	687a      	ldr	r2, [r7, #4]
 8005cb0:	4413      	add	r3, r2
 8005cb2:	617b      	str	r3, [r7, #20]

    while( pxHeapRegion->xSizeInBytes > 0 )
 8005cb4:	e071      	b.n	8005d9a <vPortDefineHeapRegions+0x116>
    {
        xTotalRegionSize = pxHeapRegion->xSizeInBytes;
 8005cb6:	697b      	ldr	r3, [r7, #20]
 8005cb8:	685b      	ldr	r3, [r3, #4]
 8005cba:	627b      	str	r3, [r7, #36]	@ 0x24

        /* Ensure the heap region starts on a correctly aligned boundary. */
        xAddress = ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress;
 8005cbc:	697b      	ldr	r3, [r7, #20]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	61bb      	str	r3, [r7, #24]

        if( ( xAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005cc2:	69bb      	ldr	r3, [r7, #24]
 8005cc4:	f003 0307 	and.w	r3, r3, #7
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00e      	beq.n	8005cea <vPortDefineHeapRegions+0x66>
        {
            xAddress += ( portBYTE_ALIGNMENT - 1 );
 8005ccc:	69bb      	ldr	r3, [r7, #24]
 8005cce:	3307      	adds	r3, #7
 8005cd0:	61bb      	str	r3, [r7, #24]
            xAddress &= ~( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK;
 8005cd2:	69bb      	ldr	r3, [r7, #24]
 8005cd4:	f023 0307 	bic.w	r3, r3, #7
 8005cd8:	61bb      	str	r3, [r7, #24]

            /* Adjust the size for the bytes lost to alignment. */
            xTotalRegionSize -= ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxHeapRegion->pucStartAddress );
 8005cda:	697b      	ldr	r3, [r7, #20]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	461a      	mov	r2, r3
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	1ad3      	subs	r3, r2, r3
 8005ce4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005ce6:	4413      	add	r3, r2
 8005ce8:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        xAlignedHeap = xAddress;
 8005cea:	69bb      	ldr	r3, [r7, #24]
 8005cec:	60fb      	str	r3, [r7, #12]

        /* Set xStart if it has not already been set. */
        if( xDefinedRegions == 0 )
 8005cee:	69fb      	ldr	r3, [r7, #28]
 8005cf0:	2b00      	cmp	r3, #0
 8005cf2:	d106      	bne.n	8005d02 <vPortDefineHeapRegions+0x7e>
        {
            /* xStart is used to hold a pointer to the first item in the list of
             *  free blocks.  The void cast is used to prevent compiler warnings. */
            xStart.pxNextFreeBlock = ( BlockLink_t * ) heapPROTECT_BLOCK_POINTER( xAlignedHeap );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4a36      	ldr	r2, [pc, #216]	@ (8005dd0 <vPortDefineHeapRegions+0x14c>)
 8005cf8:	6013      	str	r3, [r2, #0]
            xStart.xBlockSize = ( size_t ) 0;
 8005cfa:	4b35      	ldr	r3, [pc, #212]	@ (8005dd0 <vPortDefineHeapRegions+0x14c>)
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	605a      	str	r2, [r3, #4]
 8005d00:	e013      	b.n	8005d2a <vPortDefineHeapRegions+0xa6>
        }
        else
        {
            /* Should only get here if one region has already been added to the
             * heap. */
            configASSERT( pxEnd != heapPROTECT_BLOCK_POINTER( NULL ) );
 8005d02:	4b31      	ldr	r3, [pc, #196]	@ (8005dc8 <vPortDefineHeapRegions+0x144>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d104      	bne.n	8005d14 <vPortDefineHeapRegions+0x90>
 8005d0a:	f240 2149 	movw	r1, #585	@ 0x249
 8005d0e:	482f      	ldr	r0, [pc, #188]	@ (8005dcc <vPortDefineHeapRegions+0x148>)
 8005d10:	f7fb fbae 	bl	8001470 <vAssertCalled>

            /* Check blocks are passed in with increasing start addresses. */
            configASSERT( ( size_t ) xAddress > ( size_t ) pxEnd );
 8005d14:	4b2c      	ldr	r3, [pc, #176]	@ (8005dc8 <vPortDefineHeapRegions+0x144>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	461a      	mov	r2, r3
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	4293      	cmp	r3, r2
 8005d1e:	d804      	bhi.n	8005d2a <vPortDefineHeapRegions+0xa6>
 8005d20:	f44f 7113 	mov.w	r1, #588	@ 0x24c
 8005d24:	4829      	ldr	r0, [pc, #164]	@ (8005dcc <vPortDefineHeapRegions+0x148>)
 8005d26:	f7fb fba3 	bl	8001470 <vAssertCalled>
        }
        #endif /* configENABLE_HEAP_PROTECTOR */

        /* Remember the location of the end marker in the previous region, if
         * any. */
        pxPreviousFreeBlock = pxEnd;
 8005d2a:	4b27      	ldr	r3, [pc, #156]	@ (8005dc8 <vPortDefineHeapRegions+0x144>)
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	60bb      	str	r3, [r7, #8]

        /* pxEnd is used to mark the end of the list of free blocks and is
         * inserted at the end of the region space. */
        xAddress = xAlignedHeap + ( portPOINTER_SIZE_TYPE ) xTotalRegionSize;
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	4413      	add	r3, r2
 8005d36:	61bb      	str	r3, [r7, #24]
        xAddress -= ( portPOINTER_SIZE_TYPE ) xHeapStructSize;
 8005d38:	2208      	movs	r2, #8
 8005d3a:	69bb      	ldr	r3, [r7, #24]
 8005d3c:	1a9b      	subs	r3, r3, r2
 8005d3e:	61bb      	str	r3, [r7, #24]
        xAddress &= ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK );
 8005d40:	69bb      	ldr	r3, [r7, #24]
 8005d42:	f023 0307 	bic.w	r3, r3, #7
 8005d46:	61bb      	str	r3, [r7, #24]
        pxEnd = ( BlockLink_t * ) xAddress;
 8005d48:	69bb      	ldr	r3, [r7, #24]
 8005d4a:	4a1f      	ldr	r2, [pc, #124]	@ (8005dc8 <vPortDefineHeapRegions+0x144>)
 8005d4c:	6013      	str	r3, [r2, #0]
        pxEnd->xBlockSize = 0;
 8005d4e:	4b1e      	ldr	r3, [pc, #120]	@ (8005dc8 <vPortDefineHeapRegions+0x144>)
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	2200      	movs	r2, #0
 8005d54:	605a      	str	r2, [r3, #4]
        pxEnd->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( NULL );
 8005d56:	4b1c      	ldr	r3, [pc, #112]	@ (8005dc8 <vPortDefineHeapRegions+0x144>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	2200      	movs	r2, #0
 8005d5c:	601a      	str	r2, [r3, #0]

        /* To start with there is a single free block in this region that is
         * sized to take up the entire heap region minus the space taken by the
         * free block structure. */
        pxFirstFreeBlockInRegion = ( BlockLink_t * ) xAlignedHeap;
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	613b      	str	r3, [r7, #16]
        pxFirstFreeBlockInRegion->xBlockSize = ( size_t ) ( xAddress - ( portPOINTER_SIZE_TYPE ) pxFirstFreeBlockInRegion );
 8005d62:	693b      	ldr	r3, [r7, #16]
 8005d64:	69ba      	ldr	r2, [r7, #24]
 8005d66:	1ad2      	subs	r2, r2, r3
 8005d68:	693b      	ldr	r3, [r7, #16]
 8005d6a:	605a      	str	r2, [r3, #4]
        pxFirstFreeBlockInRegion->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxEnd );
 8005d6c:	4b16      	ldr	r3, [pc, #88]	@ (8005dc8 <vPortDefineHeapRegions+0x144>)
 8005d6e:	681a      	ldr	r2, [r3, #0]
 8005d70:	693b      	ldr	r3, [r7, #16]
 8005d72:	601a      	str	r2, [r3, #0]

        /* If this is not the first region that makes up the entire heap space
         * then link the previous region to this region. */
        if( pxPreviousFreeBlock != NULL )
 8005d74:	68bb      	ldr	r3, [r7, #8]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d002      	beq.n	8005d80 <vPortDefineHeapRegions+0xfc>
        {
            pxPreviousFreeBlock->pxNextFreeBlock = heapPROTECT_BLOCK_POINTER( pxFirstFreeBlockInRegion );
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	601a      	str	r2, [r3, #0]
        }

        xTotalHeapSize += pxFirstFreeBlockInRegion->xBlockSize;
 8005d80:	693b      	ldr	r3, [r7, #16]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	6a3a      	ldr	r2, [r7, #32]
 8005d86:	4413      	add	r3, r2
 8005d88:	623b      	str	r3, [r7, #32]
            }
        }
        #endif

        /* Move onto the next HeapRegion_t structure. */
        xDefinedRegions++;
 8005d8a:	69fb      	ldr	r3, [r7, #28]
 8005d8c:	3301      	adds	r3, #1
 8005d8e:	61fb      	str	r3, [r7, #28]
        pxHeapRegion = &( pxHeapRegions[ xDefinedRegions ] );
 8005d90:	69fb      	ldr	r3, [r7, #28]
 8005d92:	00db      	lsls	r3, r3, #3
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	4413      	add	r3, r2
 8005d98:	617b      	str	r3, [r7, #20]
    while( pxHeapRegion->xSizeInBytes > 0 )
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	685b      	ldr	r3, [r3, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d189      	bne.n	8005cb6 <vPortDefineHeapRegions+0x32>
    }

    xMinimumEverFreeBytesRemaining = xTotalHeapSize;
 8005da2:	4a0c      	ldr	r2, [pc, #48]	@ (8005dd4 <vPortDefineHeapRegions+0x150>)
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	6013      	str	r3, [r2, #0]
    xFreeBytesRemaining = xTotalHeapSize;
 8005da8:	4a0b      	ldr	r2, [pc, #44]	@ (8005dd8 <vPortDefineHeapRegions+0x154>)
 8005daa:	6a3b      	ldr	r3, [r7, #32]
 8005dac:	6013      	str	r3, [r2, #0]

    /* Check something was actually defined before it is accessed. */
    configASSERT( xTotalHeapSize );
 8005dae:	6a3b      	ldr	r3, [r7, #32]
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	d104      	bne.n	8005dbe <vPortDefineHeapRegions+0x13a>
 8005db4:	f240 2189 	movw	r1, #649	@ 0x289
 8005db8:	4804      	ldr	r0, [pc, #16]	@ (8005dcc <vPortDefineHeapRegions+0x148>)
 8005dba:	f7fb fb59 	bl	8001470 <vAssertCalled>
}
 8005dbe:	bf00      	nop
 8005dc0:	3728      	adds	r7, #40	@ 0x28
 8005dc2:	46bd      	mov	sp, r7
 8005dc4:	bd80      	pop	{r7, pc}
 8005dc6:	bf00      	nop
 8005dc8:	20000c4c 	.word	0x20000c4c
 8005dcc:	08022f40 	.word	0x08022f40
 8005dd0:	20000c44 	.word	0x20000c44
 8005dd4:	20000c54 	.word	0x20000c54
 8005dd8:	20000c50 	.word	0x20000c50

08005ddc <eARPProcessPacket>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be processed.
 *
 * @return An enum which says whether to return the frame or to release it.
 */
    eFrameProcessingResult_t eARPProcessPacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b090      	sub	sp, #64	@ 0x40
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ARPPacket_t * pxARPFrame = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005de8:	63bb      	str	r3, [r7, #56]	@ 0x38
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8005dea:	2300      	movs	r3, #0
 8005dec:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
        uint32_t ulTargetProtocolAddress, ulSenderProtocolAddress;

        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource;
        void * pvCopyDest;
        NetworkEndPoint_t * pxTargetEndPoint = pxNetworkBuffer->pxEndPoint;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005df4:	637b      	str	r3, [r7, #52]	@ 0x34
         * period. */
        static UBaseType_t uxARPClashCounter = 0U;
        /* The time at which the last ARP clash was sent. */
        static TimeOut_t xARPClashTimeOut;

        pxARPHeader = &( pxARPFrame->xARPHeader );
 8005df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df8:	330e      	adds	r3, #14
 8005dfa:	633b      	str	r3, [r7, #48]	@ 0x30

        /* Only Ethernet hardware type is supported.
         * Only IPv4 address can be present in the ARP packet.
         * The hardware length (the MAC address) must be 6 bytes. And,
         * The Protocol address length must be 4 bytes as it is IPv4. */
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfe:	881b      	ldrh	r3, [r3, #0]
 8005e00:	b29b      	uxth	r3, r3
 8005e02:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e06:	f040 81bb 	bne.w	8006180 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8005e0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e0c:	885b      	ldrh	r3, [r3, #2]
 8005e0e:	b29b      	uxth	r3, r3
        if( ( pxARPHeader->usHardwareType == ipARP_HARDWARE_TYPE_ETHERNET ) &&
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	f040 81b5 	bne.w	8006180 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8005e16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e18:	791b      	ldrb	r3, [r3, #4]
            ( pxARPHeader->usProtocolType == ipARP_PROTOCOL_TYPE ) &&
 8005e1a:	2b06      	cmp	r3, #6
 8005e1c:	f040 81b0 	bne.w	8006180 <eARPProcessPacket+0x3a4>
            ( pxARPHeader->ucProtocolAddressLength == ipIP_ADDRESS_LENGTH_BYTES ) )
 8005e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e22:	795b      	ldrb	r3, [r3, #5]
            ( pxARPHeader->ucHardwareAddressLength == ipMAC_ADDRESS_LENGTH_BYTES ) &&
 8005e24:	2b04      	cmp	r3, #4
 8005e26:	f040 81ab 	bne.w	8006180 <eARPProcessPacket+0x3a4>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxARPHeader->ucSenderProtocolAddress;
 8005e2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e2c:	330e      	adds	r3, #14
 8005e2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
            pvCopyDest = &ulSenderProtocolAddress;
 8005e30:	f107 0320 	add.w	r3, r7, #32
 8005e34:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ulSenderProtocolAddress ) );
 8005e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3e:	601a      	str	r2, [r3, #0]
            /* The field ulTargetProtocolAddress is well-aligned, a 32-bits copy. */
            ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8005e40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e42:	699b      	ldr	r3, [r3, #24]
 8005e44:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxARPClashCounter != 0U )
 8005e46:	4b9c      	ldr	r3, [pc, #624]	@ (80060b8 <eARPProcessPacket+0x2dc>)
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d009      	beq.n	8005e62 <eARPProcessPacket+0x86>
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xARPClashTimeOut, &uxARPClashTimeoutPeriod ) == pdTRUE )
 8005e4e:	499b      	ldr	r1, [pc, #620]	@ (80060bc <eARPProcessPacket+0x2e0>)
 8005e50:	489b      	ldr	r0, [pc, #620]	@ (80060c0 <eARPProcessPacket+0x2e4>)
 8005e52:	f7fe faf3 	bl	800443c <xTaskCheckForTimeOut>
 8005e56:	4603      	mov	r3, r0
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d102      	bne.n	8005e62 <eARPProcessPacket+0x86>
                {
                    /* We have waited long enough, reset the counter. */
                    uxARPClashCounter = 0;
 8005e5c:	4b96      	ldr	r3, [pc, #600]	@ (80060b8 <eARPProcessPacket+0x2dc>)
 8005e5e:	2200      	movs	r2, #0
 8005e60:	601a      	str	r2, [r3, #0]
                }
            }

            /* Check whether the lowest bit of the highest byte is 1 to check for
             * multicast address or even a broadcast address (FF:FF:FF:FF:FF:FF). */
            if( ( pxARPHeader->xSenderHardwareAddress.ucBytes[ 0 ] & 0x01U ) == 0x01U )
 8005e62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e64:	7a1b      	ldrb	r3, [r3, #8]
 8005e66:	f003 0301 	and.w	r3, r3, #1
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	f040 8188 	bne.w	8006180 <eARPProcessPacket+0x3a4>
                /* Senders address is a multicast OR broadcast address which is not
                 * allowed for an ARP packet. Drop the packet. See RFC 1812 section
                 * 3.3.2. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8005e70:	6a3b      	ldr	r3, [r7, #32]
 8005e72:	061a      	lsls	r2, r3, #24
 8005e74:	6a3b      	ldr	r3, [r7, #32]
 8005e76:	021b      	lsls	r3, r3, #8
 8005e78:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005e7c:	431a      	orrs	r2, r3
 8005e7e:	6a3b      	ldr	r3, [r7, #32]
 8005e80:	0a1b      	lsrs	r3, r3, #8
 8005e82:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005e86:	431a      	orrs	r2, r3
 8005e88:	6a3b      	ldr	r3, [r7, #32]
 8005e8a:	0e1b      	lsrs	r3, r3, #24
 8005e8c:	4313      	orrs	r3, r2
 8005e8e:	f1b3 4ffe 	cmp.w	r3, #2130706432	@ 0x7f000000
 8005e92:	d311      	bcc.n	8005eb8 <eARPProcessPacket+0xdc>
                     ( ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) < ipLAST_LOOPBACK_IPv4 ) )
 8005e94:	6a3b      	ldr	r3, [r7, #32]
 8005e96:	061a      	lsls	r2, r3, #24
 8005e98:	6a3b      	ldr	r3, [r7, #32]
 8005e9a:	021b      	lsls	r3, r3, #8
 8005e9c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005ea0:	431a      	orrs	r2, r3
 8005ea2:	6a3b      	ldr	r3, [r7, #32]
 8005ea4:	0a1b      	lsrs	r3, r3, #8
 8005ea6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005eaa:	431a      	orrs	r2, r3
 8005eac:	6a3b      	ldr	r3, [r7, #32]
 8005eae:	0e1b      	lsrs	r3, r3, #24
 8005eb0:	4313      	orrs	r3, r2
            else if( ( ipFIRST_LOOPBACK_IPv4 <= ( FreeRTOS_ntohl( ulSenderProtocolAddress ) ) ) &&
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	f280 8164 	bge.w	8006180 <eARPProcessPacket+0x3a4>
                /* The local loopback addresses must never appear outside a host. See RFC 1122
                 * section 3.2.1.3. */
                iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
            }
            /* Check whether there is a clash with another device for this IP address. */
            else if( ( pxTargetEndPoint != NULL ) && ( ulSenderProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) )
 8005eb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d021      	beq.n	8005f02 <eARPProcessPacket+0x126>
 8005ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ec0:	681a      	ldr	r2, [r3, #0]
 8005ec2:	6a3b      	ldr	r3, [r7, #32]
 8005ec4:	429a      	cmp	r2, r3
 8005ec6:	d11c      	bne.n	8005f02 <eARPProcessPacket+0x126>
            {
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8005ec8:	4b7b      	ldr	r3, [pc, #492]	@ (80060b8 <eARPProcessPacket+0x2dc>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f040 8157 	bne.w	8006180 <eARPProcessPacket+0x3a4>
                {
                    /* Increment the counter. */
                    uxARPClashCounter++;
 8005ed2:	4b79      	ldr	r3, [pc, #484]	@ (80060b8 <eARPProcessPacket+0x2dc>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	3301      	adds	r3, #1
 8005ed8:	4a77      	ldr	r2, [pc, #476]	@ (80060b8 <eARPProcessPacket+0x2dc>)
 8005eda:	6013      	str	r3, [r2, #0]

                    /* Send out a defensive ARP request. */
                    FreeRTOS_OutputARPRequest_Multi( pxTargetEndPoint, pxTargetEndPoint->ipv4_settings.ulIPAddress );
 8005edc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8005ee4:	f000 fe32 	bl	8006b4c <FreeRTOS_OutputARPRequest_Multi>

                    /* Since an ARP Request for this IP was just sent, do not send a gratuitous
                     * ARP for arpGRATUITOUS_ARP_PERIOD. */
                    xLastGratuitousARPTime = xTaskGetTickCount();
 8005ee8:	f7fd fec6 	bl	8003c78 <xTaskGetTickCount>
 8005eec:	4603      	mov	r3, r0
 8005eee:	4a75      	ldr	r2, [pc, #468]	@ (80060c4 <eARPProcessPacket+0x2e8>)
 8005ef0:	6013      	str	r3, [r2, #0]

                    /* Note the time at which this request was sent. */
                    vTaskSetTimeOutState( &xARPClashTimeOut );
 8005ef2:	4873      	ldr	r0, [pc, #460]	@ (80060c0 <eARPProcessPacket+0x2e4>)
 8005ef4:	f7fe fa6a 	bl	80043cc <vTaskSetTimeOutState>

                    /* Reset the time-out period to the given value. */
                    uxARPClashTimeoutPeriod = pdMS_TO_TICKS( arpIP_CLASH_RESET_TIMEOUT_MS );
 8005ef8:	4b70      	ldr	r3, [pc, #448]	@ (80060bc <eARPProcessPacket+0x2e0>)
 8005efa:	f242 7210 	movw	r2, #10000	@ 0x2710
 8005efe:	601a      	str	r2, [r3, #0]
                if( uxARPClashCounter < arpIP_CLASH_MAX_RETRIES )
 8005f00:	e13e      	b.n	8006180 <eARPProcessPacket+0x3a4>
            {
                traceARP_PACKET_RECEIVED();

                /* Some extra logging while still testing. */
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( pxARPHeader->usOperation == ( uint16_t ) ipARP_REPLY )
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	88db      	ldrh	r3, [r3, #6]
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005f0c:	d14a      	bne.n	8005fa4 <eARPProcessPacket+0x1c8>
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REPLY from %xip to %xip end-point %xip\n",
 8005f0e:	6a3b      	ldr	r3, [r7, #32]
 8005f10:	061a      	lsls	r2, r3, #24
 8005f12:	6a3b      	ldr	r3, [r7, #32]
 8005f14:	021b      	lsls	r3, r3, #8
 8005f16:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f1a:	431a      	orrs	r2, r3
 8005f1c:	6a3b      	ldr	r3, [r7, #32]
 8005f1e:	0a1b      	lsrs	r3, r3, #8
 8005f20:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f24:	431a      	orrs	r2, r3
 8005f26:	6a3b      	ldr	r3, [r7, #32]
 8005f28:	0e1b      	lsrs	r3, r3, #24
 8005f2a:	ea42 0103 	orr.w	r1, r2, r3
 8005f2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f30:	061a      	lsls	r2, r3, #24
 8005f32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f34:	021b      	lsls	r3, r3, #8
 8005f36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f3a:	431a      	orrs	r2, r3
 8005f3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f3e:	0a1b      	lsrs	r3, r3, #8
 8005f40:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f44:	431a      	orrs	r2, r3
 8005f46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f48:	0e1b      	lsrs	r3, r3, #24
 8005f4a:	ea42 0003 	orr.w	r0, r2, r3
 8005f4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d003      	beq.n	8005f5c <eARPProcessPacket+0x180>
 8005f54:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	061a      	lsls	r2, r3, #24
 8005f5a:	e000      	b.n	8005f5e <eARPProcessPacket+0x182>
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d005      	beq.n	8005f70 <eARPProcessPacket+0x194>
 8005f64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	021b      	lsls	r3, r3, #8
 8005f6a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005f6e:	e000      	b.n	8005f72 <eARPProcessPacket+0x196>
 8005f70:	2300      	movs	r3, #0
 8005f72:	431a      	orrs	r2, r3
 8005f74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d005      	beq.n	8005f86 <eARPProcessPacket+0x1aa>
 8005f7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	0a1b      	lsrs	r3, r3, #8
 8005f80:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005f84:	e000      	b.n	8005f88 <eARPProcessPacket+0x1ac>
 8005f86:	2300      	movs	r3, #0
 8005f88:	431a      	orrs	r2, r3
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d003      	beq.n	8005f98 <eARPProcessPacket+0x1bc>
 8005f90:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	0e1b      	lsrs	r3, r3, #24
 8005f96:	e000      	b.n	8005f9a <eARPProcessPacket+0x1be>
 8005f98:	2300      	movs	r3, #0
 8005f9a:	4313      	orrs	r3, r2
 8005f9c:	4602      	mov	r2, r0
 8005f9e:	484a      	ldr	r0, [pc, #296]	@ (80060c8 <eARPProcessPacket+0x2ec>)
 8005fa0:	f01a fe6e 	bl	8020c80 <lUDPLoggingPrintf>
                                                 ( unsigned ) FreeRTOS_ntohl( ( pxTargetEndPoint != NULL ) ? pxTargetEndPoint->ipv4_settings.ulIPAddress : 0U ) ) );
                    }
                #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8005fa4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa6:	88db      	ldrh	r3, [r3, #6]
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fae:	d151      	bne.n	8006054 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8005fb0:	6a3b      	ldr	r3, [r7, #32]
                    if( ( pxARPHeader->usOperation == ( uint16_t ) ipARP_REQUEST ) &&
 8005fb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d04d      	beq.n	8006054 <eARPProcessPacket+0x278>
                        ( ulSenderProtocolAddress != ulTargetProtocolAddress ) &&
 8005fb8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d04a      	beq.n	8006054 <eARPProcessPacket+0x278>
                        ( pxTargetEndPoint != NULL ) )
                    {
                        FreeRTOS_debug_printf( ( "ipARP_REQUEST from %xip to %xip end-point %xip\n",
 8005fbe:	6a3b      	ldr	r3, [r7, #32]
 8005fc0:	061a      	lsls	r2, r3, #24
 8005fc2:	6a3b      	ldr	r3, [r7, #32]
 8005fc4:	021b      	lsls	r3, r3, #8
 8005fc6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005fca:	431a      	orrs	r2, r3
 8005fcc:	6a3b      	ldr	r3, [r7, #32]
 8005fce:	0a1b      	lsrs	r3, r3, #8
 8005fd0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005fd4:	431a      	orrs	r2, r3
 8005fd6:	6a3b      	ldr	r3, [r7, #32]
 8005fd8:	0e1b      	lsrs	r3, r3, #24
 8005fda:	ea42 0103 	orr.w	r1, r2, r3
 8005fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe0:	061a      	lsls	r2, r3, #24
 8005fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fe4:	021b      	lsls	r3, r3, #8
 8005fe6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8005fea:	431a      	orrs	r2, r3
 8005fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005fee:	0a1b      	lsrs	r3, r3, #8
 8005ff0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8005ff4:	431a      	orrs	r2, r3
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ff8:	0e1b      	lsrs	r3, r3, #24
 8005ffa:	ea42 0003 	orr.w	r0, r2, r3
 8005ffe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006000:	2b00      	cmp	r3, #0
 8006002:	d003      	beq.n	800600c <eARPProcessPacket+0x230>
 8006004:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	061a      	lsls	r2, r3, #24
 800600a:	e000      	b.n	800600e <eARPProcessPacket+0x232>
 800600c:	2200      	movs	r2, #0
 800600e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006010:	2b00      	cmp	r3, #0
 8006012:	d005      	beq.n	8006020 <eARPProcessPacket+0x244>
 8006014:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	021b      	lsls	r3, r3, #8
 800601a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800601e:	e000      	b.n	8006022 <eARPProcessPacket+0x246>
 8006020:	2300      	movs	r3, #0
 8006022:	431a      	orrs	r2, r3
 8006024:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006026:	2b00      	cmp	r3, #0
 8006028:	d005      	beq.n	8006036 <eARPProcessPacket+0x25a>
 800602a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	0a1b      	lsrs	r3, r3, #8
 8006030:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006034:	e000      	b.n	8006038 <eARPProcessPacket+0x25c>
 8006036:	2300      	movs	r3, #0
 8006038:	431a      	orrs	r2, r3
 800603a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800603c:	2b00      	cmp	r3, #0
 800603e:	d003      	beq.n	8006048 <eARPProcessPacket+0x26c>
 8006040:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	0e1b      	lsrs	r3, r3, #24
 8006046:	e000      	b.n	800604a <eARPProcessPacket+0x26e>
 8006048:	2300      	movs	r3, #0
 800604a:	4313      	orrs	r3, r2
 800604c:	4602      	mov	r2, r0
 800604e:	481f      	ldr	r0, [pc, #124]	@ (80060cc <eARPProcessPacket+0x2f0>)
 8006050:	f01a fe16 	bl	8020c80 <lUDPLoggingPrintf>
                /* ulTargetProtocolAddress won't be used unless logging is enabled. */
                ( void ) ulTargetProtocolAddress;

                /* Don't do anything if the local IP address is zero because
                 * that means a DHCP request has not completed. */
                if( ( pxTargetEndPoint != NULL ) && ( pxTargetEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) )
 8006054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006056:	2b00      	cmp	r3, #0
 8006058:	f000 8092 	beq.w	8006180 <eARPProcessPacket+0x3a4>
 800605c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800605e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006062:	f003 0310 	and.w	r3, r3, #16
 8006066:	b2db      	uxtb	r3, r3
 8006068:	2b00      	cmp	r3, #0
 800606a:	f000 8089 	beq.w	8006180 <eARPProcessPacket+0x3a4>
                {
                    switch( pxARPHeader->usOperation )
 800606e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006070:	88db      	ldrh	r3, [r3, #6]
 8006072:	b29b      	uxth	r3, r3
 8006074:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006078:	d003      	beq.n	8006082 <eARPProcessPacket+0x2a6>
 800607a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800607e:	d077      	beq.n	8006170 <eARPProcessPacket+0x394>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
                            break;

                        default:
                            /* Invalid. */
                            break;
 8006080:	e07e      	b.n	8006180 <eARPProcessPacket+0x3a4>
                            if( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress )
 8006082:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006088:	429a      	cmp	r2, r3
 800608a:	d121      	bne.n	80060d0 <eARPProcessPacket+0x2f4>
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 800608c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800608e:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
                                            pxARPHeader->xSenderHardwareAddress.ucBytes,
 8006092:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006094:	3308      	adds	r3, #8
                                if( memcmp( pxTargetEndPoint->xMACAddress.ucBytes,
 8006096:	2206      	movs	r2, #6
 8006098:	4619      	mov	r1, r3
 800609a:	f01b ffa2 	bl	8021fe2 <memcmp>
 800609e:	4603      	mov	r3, r0
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d06c      	beq.n	800617e <eARPProcessPacket+0x3a2>
                                    vARPProcessPacketRequest( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 80060a4:	6a3b      	ldr	r3, [r7, #32]
 80060a6:	461a      	mov	r2, r3
 80060a8:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 80060aa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80060ac:	f000 f872 	bl	8006194 <vARPProcessPacketRequest>
                                    eReturn = eReturnEthernetFrame;
 80060b0:	2302      	movs	r3, #2
 80060b2:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                            break;
 80060b6:	e062      	b.n	800617e <eARPProcessPacket+0x3a2>
 80060b8:	20000cc4 	.word	0x20000cc4
 80060bc:	20000010 	.word	0x20000010
 80060c0:	20000cc8 	.word	0x20000cc8
 80060c4:	20000cc0 	.word	0x20000cc0
 80060c8:	08022f78 	.word	0x08022f78
 80060cc:	08022fa8 	.word	0x08022fa8
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 80060d0:	6a3b      	ldr	r3, [r7, #32]
 80060d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80060d4:	429a      	cmp	r2, r3
 80060d6:	d152      	bne.n	800617e <eARPProcessPacket+0x3a2>
                                     ( ( ulSenderProtocolAddress & pxTargetEndPoint->ipv4_settings.ulNetMask ) == ( pxTargetEndPoint->ipv4_settings.ulNetMask & pxTargetEndPoint->ipv4_settings.ulIPAddress ) ) )
 80060d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060da:	681a      	ldr	r2, [r3, #0]
 80060dc:	6a3b      	ldr	r3, [r7, #32]
 80060de:	405a      	eors	r2, r3
 80060e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	4013      	ands	r3, r2
                            else if( ( ulSenderProtocolAddress == ulTargetProtocolAddress ) &&
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d149      	bne.n	800617e <eARPProcessPacket+0x3a2>
                                const MACAddress_t xGARPTargetAddress = { { 0, 0, 0, 0, 0, 0 } };
 80060ea:	4a28      	ldr	r2, [pc, #160]	@ (800618c <eARPProcessPacket+0x3b0>)
 80060ec:	f107 0318 	add.w	r3, r7, #24
 80060f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80060f4:	6018      	str	r0, [r3, #0]
 80060f6:	3304      	adds	r3, #4
 80060f8:	8019      	strh	r1, [r3, #0]
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 80060fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060fc:	3312      	adds	r3, #18
 80060fe:	2206      	movs	r2, #6
 8006100:	4923      	ldr	r1, [pc, #140]	@ (8006190 <eARPProcessPacket+0x3b4>)
 8006102:	4618      	mov	r0, r3
 8006104:	f01b ff6d 	bl	8021fe2 <memcmp>
 8006108:	4603      	mov	r3, r0
 800610a:	2b00      	cmp	r3, #0
 800610c:	d00a      	beq.n	8006124 <eARPProcessPacket+0x348>
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	3312      	adds	r3, #18
 8006112:	f107 0118 	add.w	r1, r7, #24
 8006116:	2206      	movs	r2, #6
 8006118:	4618      	mov	r0, r3
 800611a:	f01b ff62 	bl	8021fe2 <memcmp>
 800611e:	4603      	mov	r3, r0
                                if( ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xBroadcastMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ||
 8006120:	2b00      	cmp	r3, #0
 8006122:	d12c      	bne.n	800617e <eARPProcessPacket+0x3a2>
                                    ( memcmp( pxTargetEndPoint->xMACAddress.ucBytes, pxARPHeader->xSenderHardwareAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) != 0 ) )
 8006124:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006126:	f103 00e8 	add.w	r0, r3, #232	@ 0xe8
 800612a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800612c:	3308      	adds	r3, #8
 800612e:	2206      	movs	r2, #6
 8006130:	4619      	mov	r1, r3
 8006132:	f01b ff56 	bl	8021fe2 <memcmp>
 8006136:	4603      	mov	r3, r0
                                      ( ( memcmp( pxARPHeader->xTargetHardwareAddress.ucBytes, xGARPTargetAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ) ) &&
 8006138:	2b00      	cmp	r3, #0
 800613a:	d020      	beq.n	800617e <eARPProcessPacket+0x3a2>
                                    pxCachedEndPoint = NULL;
 800613c:	2300      	movs	r3, #0
 800613e:	60fb      	str	r3, [r7, #12]
                                    if( eARPGetCacheEntry( &( ulSenderProtocolAddress ), &( xHardwareAddress ), &( pxCachedEndPoint ) ) == eARPCacheHit )
 8006140:	f107 020c 	add.w	r2, r7, #12
 8006144:	f107 0110 	add.w	r1, r7, #16
 8006148:	f107 0320 	add.w	r3, r7, #32
 800614c:	4618      	mov	r0, r3
 800614e:	f000 fb11 	bl	8006774 <eARPGetCacheEntry>
 8006152:	4603      	mov	r3, r0
 8006154:	2b01      	cmp	r3, #1
 8006156:	d112      	bne.n	800617e <eARPProcessPacket+0x3a2>
                                        if( pxCachedEndPoint == pxTargetEndPoint )
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800615c:	429a      	cmp	r2, r3
 800615e:	d10e      	bne.n	800617e <eARPProcessPacket+0x3a2>
                                            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 8006160:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006162:	3308      	adds	r3, #8
 8006164:	6a39      	ldr	r1, [r7, #32]
 8006166:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006168:	4618      	mov	r0, r3
 800616a:	f000 f9ef 	bl	800654c <vARPRefreshCacheEntry>
                            break;
 800616e:	e006      	b.n	800617e <eARPProcessPacket+0x3a2>
                            vARPProcessPacketReply( pxARPFrame, pxTargetEndPoint, ulSenderProtocolAddress );
 8006170:	6a3b      	ldr	r3, [r7, #32]
 8006172:	461a      	mov	r2, r3
 8006174:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006176:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006178:	f000 f84a 	bl	8006210 <vARPProcessPacketReply>
                            break;
 800617c:	e000      	b.n	8006180 <eARPProcessPacket+0x3a4>
                            break;
 800617e:	bf00      	nop
        else
        {
            iptraceDROPPED_INVALID_ARP_PACKET( pxARPHeader );
        }

        return eReturn;
 8006180:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
    }
 8006184:	4618      	mov	r0, r3
 8006186:	3740      	adds	r7, #64	@ 0x40
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}
 800618c:	08022fd8 	.word	0x08022fd8
 8006190:	08026318 	.word	0x08026318

08006194 <vARPProcessPacketRequest>:
 *
 */
    static void vARPProcessPacketRequest( ARPPacket_t * pxARPFrame,
                                          NetworkEndPoint_t * pxTargetEndPoint,
                                          uint32_t ulSenderProtocolAddress )
    {
 8006194:	b580      	push	{r7, lr}
 8006196:	b088      	sub	sp, #32
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
        ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	330e      	adds	r3, #14
 80061a4:	61fb      	str	r3, [r7, #28]
        iptraceSENDING_ARP_REPLY( ulSenderProtocolAddress );

        /* The request is for the address of this node.  Add the
         * entry into the ARP cache, or refresh the entry if it
         * already exists. */
        vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 80061a6:	69fb      	ldr	r3, [r7, #28]
 80061a8:	3308      	adds	r3, #8
 80061aa:	68ba      	ldr	r2, [r7, #8]
 80061ac:	6879      	ldr	r1, [r7, #4]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f000 f9cc 	bl	800654c <vARPRefreshCacheEntry>

        /* Generate a reply payload in the same buffer. */
        pxARPHeader->usOperation = ( uint16_t ) ipARP_REPLY;
 80061b4:	69fb      	ldr	r3, [r7, #28]
 80061b6:	2200      	movs	r2, #0
 80061b8:	719a      	strb	r2, [r3, #6]
 80061ba:	2200      	movs	r2, #0
 80061bc:	f042 0202 	orr.w	r2, r2, #2
 80061c0:	71da      	strb	r2, [r3, #7]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	3308      	adds	r3, #8
 80061c6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xTargetHardwareAddress.ucBytes;
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	3312      	adds	r3, #18
 80061cc:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80061ce:	2206      	movs	r2, #6
 80061d0:	69b9      	ldr	r1, [r7, #24]
 80061d2:	6978      	ldr	r0, [r7, #20]
 80061d4:	f01a ff70 	bl	80210b8 <memcpy>
        pxARPHeader->ulTargetProtocolAddress = ulSenderProtocolAddress;
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	687a      	ldr	r2, [r7, #4]
 80061dc:	619a      	str	r2, [r3, #24]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = pxTargetEndPoint->xMACAddress.ucBytes;
 80061de:	68bb      	ldr	r3, [r7, #8]
 80061e0:	33e8      	adds	r3, #232	@ 0xe8
 80061e2:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->xSenderHardwareAddress.ucBytes;
 80061e4:	69fb      	ldr	r3, [r7, #28]
 80061e6:	3308      	adds	r3, #8
 80061e8:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( MACAddress_t ) );
 80061ea:	2206      	movs	r2, #6
 80061ec:	69b9      	ldr	r1, [r7, #24]
 80061ee:	6978      	ldr	r0, [r7, #20]
 80061f0:	f01a ff62 	bl	80210b8 <memcpy>
        pvCopySource = &( pxTargetEndPoint->ipv4_settings.ulIPAddress );
 80061f4:	68bb      	ldr	r3, [r7, #8]
 80061f6:	61bb      	str	r3, [r7, #24]
        pvCopyDest = pxARPHeader->ucSenderProtocolAddress;
 80061f8:	69fb      	ldr	r3, [r7, #28]
 80061fa:	330e      	adds	r3, #14
 80061fc:	617b      	str	r3, [r7, #20]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPHeader->ucSenderProtocolAddress ) );
 80061fe:	69bb      	ldr	r3, [r7, #24]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	461a      	mov	r2, r3
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	601a      	str	r2, [r3, #0]
    }
 8006208:	bf00      	nop
 800620a:	3720      	adds	r7, #32
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <vARPProcessPacketReply>:
 * @param[in] ulSenderProtocolAddress The IPv4 address involved.
 */
    static void vARPProcessPacketReply( const ARPPacket_t * pxARPFrame,
                                        NetworkEndPoint_t * pxTargetEndPoint,
                                        uint32_t ulSenderProtocolAddress )
    {
 8006210:	b580      	push	{r7, lr}
 8006212:	b08c      	sub	sp, #48	@ 0x30
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
        const ARPHeader_t * pxARPHeader = &( pxARPFrame->xARPHeader );
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	330e      	adds	r3, #14
 8006220:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint32_t ulTargetProtocolAddress = pxARPHeader->ulTargetProtocolAddress;
 8006222:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006224:	699b      	ldr	r3, [r3, #24]
 8006226:	62bb      	str	r3, [r7, #40]	@ 0x28

        /* If the packet is meant for this device or if the entry already exists. */
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 8006228:	68bb      	ldr	r3, [r7, #8]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800622e:	429a      	cmp	r2, r3
 8006230:	d005      	beq.n	800623e <vARPProcessPacketReply+0x2e>
            ( xIsIPInARPCache( ulSenderProtocolAddress ) == pdTRUE ) )
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 f844 	bl	80062c0 <xIsIPInARPCache>
 8006238:	4603      	mov	r3, r0
        if( ( ulTargetProtocolAddress == pxTargetEndPoint->ipv4_settings.ulIPAddress ) ||
 800623a:	2b01      	cmp	r3, #1
 800623c:	d106      	bne.n	800624c <vARPProcessPacketReply+0x3c>
        {
            iptracePROCESSING_RECEIVED_ARP_REPLY( ulTargetProtocolAddress );
            vARPRefreshCacheEntry( &( pxARPHeader->xSenderHardwareAddress ), ulSenderProtocolAddress, pxTargetEndPoint );
 800623e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006240:	3308      	adds	r3, #8
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	6879      	ldr	r1, [r7, #4]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 f980 	bl	800654c <vARPRefreshCacheEntry>
        }

        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800624c:	4b1b      	ldr	r3, [pc, #108]	@ (80062bc <vARPProcessPacketReply+0xac>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	d02e      	beq.n	80062b2 <vARPProcessPacketReply+0xa2>
            ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv4_HEADER ) )
 8006254:	4b19      	ldr	r3, [pc, #100]	@ (80062bc <vARPProcessPacketReply+0xac>)
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	4618      	mov	r0, r3
 800625a:	f003 f8a5 	bl	80093a8 <uxIPHeaderSizePacket>
 800625e:	4603      	mov	r3, r0
        if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 8006260:	2b14      	cmp	r3, #20
 8006262:	d126      	bne.n	80062b2 <vARPProcessPacketReply+0xa2>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_t * pxARPWaitingIPPacket = ( ( IPPacket_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 8006264:	4b15      	ldr	r3, [pc, #84]	@ (80062bc <vARPProcessPacketReply+0xac>)
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626a:	627b      	str	r3, [r7, #36]	@ 0x24
            const IPHeader_t * pxARPWaitingIPHeader = &( pxARPWaitingIPPacket->xIPHeader );
 800626c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800626e:	330e      	adds	r3, #14
 8006270:	623b      	str	r3, [r7, #32]

            if( ulSenderProtocolAddress == pxARPWaitingIPHeader->ulSourceIPAddress )
 8006272:	6a3b      	ldr	r3, [r7, #32]
 8006274:	68db      	ldr	r3, [r3, #12]
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	429a      	cmp	r2, r3
 800627a:	d11a      	bne.n	80062b2 <vARPProcessPacketReply+0xa2>
            {
                IPStackEvent_t xEventMessage;
                const TickType_t xDontBlock = ( TickType_t ) 0;
 800627c:	2300      	movs	r3, #0
 800627e:	61fb      	str	r3, [r7, #28]

                xEventMessage.eEventType = eNetworkRxEvent;
 8006280:	2301      	movs	r3, #1
 8006282:	753b      	strb	r3, [r7, #20]
                xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 8006284:	4b0d      	ldr	r3, [pc, #52]	@ (80062bc <vARPProcessPacketReply+0xac>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	61bb      	str	r3, [r7, #24]

                if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800628a:	f107 0314 	add.w	r3, r7, #20
 800628e:	69f9      	ldr	r1, [r7, #28]
 8006290:	4618      	mov	r0, r3
 8006292:	f002 fcd5 	bl	8008c40 <xSendEventStructToIPTask>
 8006296:	4603      	mov	r3, r0
 8006298:	2b01      	cmp	r3, #1
 800629a:	d004      	beq.n	80062a6 <vARPProcessPacketReply+0x96>
                {
                    /* Failed to send the message, so release the network buffer. */
                    vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 800629c:	4b07      	ldr	r3, [pc, #28]	@ (80062bc <vARPProcessPacketReply+0xac>)
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	4618      	mov	r0, r3
 80062a2:	f010 fa91 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Clear the buffer. */
                pxARPWaitingNetworkBuffer = NULL;
 80062a6:	4b05      	ldr	r3, [pc, #20]	@ (80062bc <vARPProcessPacketReply+0xac>)
 80062a8:	2200      	movs	r2, #0
 80062aa:	601a      	str	r2, [r3, #0]

                /* Found an ARP resolution, disable ARP resolution timer. */
                vIPSetARPResolutionTimerEnableState( pdFALSE );
 80062ac:	2000      	movs	r0, #0
 80062ae:	f003 fabd 	bl	800982c <vIPSetARPResolutionTimerEnableState>

                iptrace_DELAYED_ARP_REQUEST_REPLIED();
            }
        }
    }
 80062b2:	bf00      	nop
 80062b4:	3730      	adds	r7, #48	@ 0x30
 80062b6:	46bd      	mov	sp, r7
 80062b8:	bd80      	pop	{r7, pc}
 80062ba:	bf00      	nop
 80062bc:	20000e98 	.word	0x20000e98

080062c0 <xIsIPInARPCache>:
 *                    check for.
 *
 * @return When the IP-address is found: pdTRUE, else pdFALSE.
 */
BaseType_t xIsIPInARPCache( uint32_t ulAddressToLookup )
{
 80062c0:	b480      	push	{r7}
 80062c2:	b085      	sub	sp, #20
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
    BaseType_t x, xReturn = pdFALSE;
 80062c8:	2300      	movs	r3, #0
 80062ca:	60bb      	str	r3, [r7, #8]

    /* Loop through each entry in the ARP cache. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80062cc:	2300      	movs	r3, #0
 80062ce:	60fb      	str	r3, [r7, #12]
 80062d0:	e017      	b.n	8006302 <xIsIPInARPCache+0x42>
    {
        /* Does this row in the ARP cache table hold an entry for the IP address
         * being queried? */
        if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80062d2:	4a12      	ldr	r2, [pc, #72]	@ (800631c <xIsIPInARPCache+0x5c>)
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	011b      	lsls	r3, r3, #4
 80062d8:	4413      	add	r3, r2
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	429a      	cmp	r2, r3
 80062e0:	d10c      	bne.n	80062fc <xIsIPInARPCache+0x3c>
        {
            xReturn = pdTRUE;
 80062e2:	2301      	movs	r3, #1
 80062e4:	60bb      	str	r3, [r7, #8]

            /* A matching valid entry was found. */
            if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80062e6:	4a0d      	ldr	r2, [pc, #52]	@ (800631c <xIsIPInARPCache+0x5c>)
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	011b      	lsls	r3, r3, #4
 80062ec:	4413      	add	r3, r2
 80062ee:	330b      	adds	r3, #11
 80062f0:	781b      	ldrb	r3, [r3, #0]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d109      	bne.n	800630a <xIsIPInARPCache+0x4a>
            {
                /* This entry is waiting an ARP reply, so is not valid. */
                xReturn = pdFALSE;
 80062f6:	2300      	movs	r3, #0
 80062f8:	60bb      	str	r3, [r7, #8]
            }

            break;
 80062fa:	e006      	b.n	800630a <xIsIPInARPCache+0x4a>
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	3301      	adds	r3, #1
 8006300:	60fb      	str	r3, [r7, #12]
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	2b05      	cmp	r3, #5
 8006306:	dde4      	ble.n	80062d2 <xIsIPInARPCache+0x12>
 8006308:	e000      	b.n	800630c <xIsIPInARPCache+0x4c>
            break;
 800630a:	bf00      	nop
        }
    }

    return xReturn;
 800630c:	68bb      	ldr	r3, [r7, #8]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3714      	adds	r7, #20
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr
 800631a:	bf00      	nop
 800631c:	20000c60 	.word	0x20000c60

08006320 <xCheckRequiresARPResolution>:
 * @param[in] pxNetworkBuffer The network buffer with the packet to be checked.
 *
 * @return pdTRUE if the packet needs ARP resolution, pdFALSE otherwise.
 */
BaseType_t xCheckRequiresARPResolution( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8006320:	b590      	push	{r4, r7, lr}
 8006322:	b0a5      	sub	sp, #148	@ 0x94
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
    BaseType_t xNeedsARPResolution = pdFALSE;
 8006328:	2300      	movs	r3, #0
 800632a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

    switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f003 f83a 	bl	80093a8 <uxIPHeaderSizePacket>
 8006334:	4603      	mov	r3, r0
 8006336:	2b14      	cmp	r3, #20
 8006338:	d002      	beq.n	8006340 <xCheckRequiresARPResolution+0x20>
 800633a:	2b28      	cmp	r3, #40	@ 0x28
 800633c:	d029      	beq.n	8006392 <xCheckRequiresARPResolution+0x72>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* Shouldn't reach here */
            /* MISRA 16.4 Compliance */
            break;
 800633e:	e0b6      	b.n	80064ae <xCheckRequiresARPResolution+0x18e>
                   const IPPacket_t * pxIPPacket = ( ( const IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006344:	673b      	str	r3, [r7, #112]	@ 0x70
                   const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8006346:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006348:	330e      	adds	r3, #14
 800634a:	66fb      	str	r3, [r7, #108]	@ 0x6c
                   const IPV4Parameters_t * pxIPv4Settings = &( pxNetworkBuffer->pxEndPoint->ipv4_settings );
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006350:	66bb      	str	r3, [r7, #104]	@ 0x68
                   if( ( pxIPHeader->ulSourceIPAddress & pxIPv4Settings->ulNetMask ) == ( pxIPv4Settings->ulIPAddress & pxIPv4Settings->ulNetMask ) )
 8006352:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	405a      	eors	r2, r3
 800635c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	4013      	ands	r3, r2
 8006362:	2b00      	cmp	r3, #0
 8006364:	f040 80a0 	bne.w	80064a8 <xCheckRequiresARPResolution+0x188>
                       if( xIsIPInARPCache( pxIPHeader->ulSourceIPAddress ) == pdFALSE )
 8006368:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800636a:	68db      	ldr	r3, [r3, #12]
 800636c:	4618      	mov	r0, r3
 800636e:	f7ff ffa7 	bl	80062c0 <xIsIPInARPCache>
 8006372:	4603      	mov	r3, r0
 8006374:	2b00      	cmp	r3, #0
 8006376:	f040 8097 	bne.w	80064a8 <xCheckRequiresARPResolution+0x188>
                           FreeRTOS_OutputARPRequest_Multi( pxNetworkBuffer->pxEndPoint, pxIPHeader->ulSourceIPAddress );
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800637e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006380:	68db      	ldr	r3, [r3, #12]
 8006382:	4619      	mov	r1, r3
 8006384:	4610      	mov	r0, r2
 8006386:	f000 fbe1 	bl	8006b4c <FreeRTOS_OutputARPRequest_Multi>
                           xNeedsARPResolution = pdTRUE;
 800638a:	2301      	movs	r3, #1
 800638c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 8006390:	e08a      	b.n	80064a8 <xCheckRequiresARPResolution+0x188>
                   IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006396:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
                   IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800639a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800639e:	330e      	adds	r3, #14
 80063a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                   IPv6_Address_t * pxIPAddress = &( pxIPHeader->xSourceAddress );
 80063a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063a8:	3308      	adds	r3, #8
 80063aa:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
                   uint8_t ucNextHeader = pxIPHeader->ucNextHeader;
 80063ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80063b2:	799b      	ldrb	r3, [r3, #6]
 80063b4:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
                   if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 80063b8:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80063bc:	2b06      	cmp	r3, #6
 80063be:	d003      	beq.n	80063c8 <xCheckRequiresARPResolution+0xa8>
 80063c0:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
 80063c4:	2b11      	cmp	r3, #17
 80063c6:	d171      	bne.n	80064ac <xCheckRequiresARPResolution+0x18c>
                       IPv6_Type_t eType = xIPv6_GetIPType( ( const IPv6_Address_t * ) pxIPAddress );
 80063c8:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 80063cc:	f006 ff68 	bl	800d2a0 <xIPv6_GetIPType>
 80063d0:	4603      	mov	r3, r0
 80063d2:	f887 307e 	strb.w	r3, [r7, #126]	@ 0x7e
                       FreeRTOS_debug_printf( ( "xCheckRequiresARPResolution: %pip type %s\n",
 80063d6:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 80063da:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d00d      	beq.n	80063fe <xCheckRequiresARPResolution+0xde>
 80063e2:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d007      	beq.n	80063fa <xCheckRequiresARPResolution+0xda>
 80063ea:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 80063ee:	2b04      	cmp	r3, #4
 80063f0:	d101      	bne.n	80063f6 <xCheckRequiresARPResolution+0xd6>
 80063f2:	4b32      	ldr	r3, [pc, #200]	@ (80064bc <xCheckRequiresARPResolution+0x19c>)
 80063f4:	e004      	b.n	8006400 <xCheckRequiresARPResolution+0xe0>
 80063f6:	4b32      	ldr	r3, [pc, #200]	@ (80064c0 <xCheckRequiresARPResolution+0x1a0>)
 80063f8:	e002      	b.n	8006400 <xCheckRequiresARPResolution+0xe0>
 80063fa:	4b32      	ldr	r3, [pc, #200]	@ (80064c4 <xCheckRequiresARPResolution+0x1a4>)
 80063fc:	e000      	b.n	8006400 <xCheckRequiresARPResolution+0xe0>
 80063fe:	4b32      	ldr	r3, [pc, #200]	@ (80064c8 <xCheckRequiresARPResolution+0x1a8>)
 8006400:	461a      	mov	r2, r3
 8006402:	4832      	ldr	r0, [pc, #200]	@ (80064cc <xCheckRequiresARPResolution+0x1ac>)
 8006404:	f01a fc3c 	bl	8020c80 <lUDPLoggingPrintf>
                       if( eType == eIPv6_LinkLocal )
 8006408:	f897 307e 	ldrb.w	r3, [r7, #126]	@ 0x7e
 800640c:	2b01      	cmp	r3, #1
 800640e:	d14d      	bne.n	80064ac <xCheckRequiresARPResolution+0x18c>
                           ( void ) memset( &( pcName ), 0, sizeof( pcName ) );
 8006410:	f107 030c 	add.w	r3, r7, #12
 8006414:	2250      	movs	r2, #80	@ 0x50
 8006416:	2100      	movs	r1, #0
 8006418:	4618      	mov	r0, r3
 800641a:	f01a ff5a 	bl	80212d2 <memset>
                           eResult = eNDGetCacheEntry( pxIPAddress, &xMACAddress, &pxEndPoint );
 800641e:	f107 025c 	add.w	r2, r7, #92	@ 0x5c
 8006422:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8006426:	4619      	mov	r1, r3
 8006428:	f8d7 0080 	ldr.w	r0, [r7, #128]	@ 0x80
 800642c:	f004 fe0e 	bl	800b04c <eNDGetCacheEntry>
 8006430:	4603      	mov	r3, r0
 8006432:	f887 307d 	strb.w	r3, [r7, #125]	@ 0x7d
                           FreeRTOS_printf( ( "xCheckRequiresARPResolution: eResult %s with EP %s\n", ( eResult == eARPCacheMiss ) ? "Miss" : ( eResult == eARPCacheHit ) ? "Hit" : "Error", pcEndpointName( pxEndPoint, pcName, sizeof pcName ) ) );
 8006436:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800643a:	2b00      	cmp	r3, #0
 800643c:	d007      	beq.n	800644e <xCheckRequiresARPResolution+0x12e>
 800643e:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 8006442:	2b01      	cmp	r3, #1
 8006444:	d101      	bne.n	800644a <xCheckRequiresARPResolution+0x12a>
 8006446:	4c22      	ldr	r4, [pc, #136]	@ (80064d0 <xCheckRequiresARPResolution+0x1b0>)
 8006448:	e002      	b.n	8006450 <xCheckRequiresARPResolution+0x130>
 800644a:	4c22      	ldr	r4, [pc, #136]	@ (80064d4 <xCheckRequiresARPResolution+0x1b4>)
 800644c:	e000      	b.n	8006450 <xCheckRequiresARPResolution+0x130>
 800644e:	4c22      	ldr	r4, [pc, #136]	@ (80064d8 <xCheckRequiresARPResolution+0x1b8>)
 8006450:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006452:	f107 010c 	add.w	r1, r7, #12
 8006456:	2250      	movs	r2, #80	@ 0x50
 8006458:	4618      	mov	r0, r3
 800645a:	f006 ff79 	bl	800d350 <pcEndpointName>
 800645e:	4603      	mov	r3, r0
 8006460:	461a      	mov	r2, r3
 8006462:	4621      	mov	r1, r4
 8006464:	481d      	ldr	r0, [pc, #116]	@ (80064dc <xCheckRequiresARPResolution+0x1bc>)
 8006466:	f01a fc0b 	bl	8020c80 <lUDPLoggingPrintf>
                           if( eResult == eARPCacheMiss )
 800646a:	f897 307d 	ldrb.w	r3, [r7, #125]	@ 0x7d
 800646e:	2b00      	cmp	r3, #0
 8006470:	d11c      	bne.n	80064ac <xCheckRequiresARPResolution+0x18c>
                               uxNeededSize = sizeof( ICMPPacket_IPv6_t );
 8006472:	2356      	movs	r3, #86	@ 0x56
 8006474:	67bb      	str	r3, [r7, #120]	@ 0x78
                               pxTempBuffer = pxGetNetworkBufferWithDescriptor( BUFFER_FROM_WHERE_CALL( 199 ) uxNeededSize, 0U );
 8006476:	2100      	movs	r1, #0
 8006478:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800647a:	f010 f93d 	bl	80166f8 <pxGetNetworkBufferWithDescriptor>
 800647e:	6778      	str	r0, [r7, #116]	@ 0x74
                               if( pxTempBuffer != NULL )
 8006480:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006482:	2b00      	cmp	r3, #0
 8006484:	d00c      	beq.n	80064a0 <xCheckRequiresARPResolution+0x180>
                                   pxTempBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800648a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800648c:	631a      	str	r2, [r3, #48]	@ 0x30
                                   pxTempBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006492:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006494:	62da      	str	r2, [r3, #44]	@ 0x2c
                                   vNDSendNeighbourSolicitation( pxTempBuffer, pxIPAddress );
 8006496:	f8d7 1080 	ldr.w	r1, [r7, #128]	@ 0x80
 800649a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800649c:	f005 f842 	bl	800b524 <vNDSendNeighbourSolicitation>
                               xNeedsARPResolution = pdTRUE;
 80064a0:	2301      	movs	r3, #1
 80064a2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                   break;
 80064a6:	e001      	b.n	80064ac <xCheckRequiresARPResolution+0x18c>
                   break;
 80064a8:	bf00      	nop
 80064aa:	e000      	b.n	80064ae <xCheckRequiresARPResolution+0x18e>
                   break;
 80064ac:	bf00      	nop
    }

    return xNeedsARPResolution;
 80064ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
}
 80064b2:	4618      	mov	r0, r3
 80064b4:	3794      	adds	r7, #148	@ 0x94
 80064b6:	46bd      	mov	sp, r7
 80064b8:	bd90      	pop	{r4, r7, pc}
 80064ba:	bf00      	nop
 80064bc:	08022fe0 	.word	0x08022fe0
 80064c0:	08022fec 	.word	0x08022fec
 80064c4:	08022ff4 	.word	0x08022ff4
 80064c8:	08023000 	.word	0x08023000
 80064cc:	08023008 	.word	0x08023008
 80064d0:	08023034 	.word	0x08023034
 80064d4:	08023038 	.word	0x08023038
 80064d8:	08023040 	.word	0x08023040
 80064dc:	08023048 	.word	0x08023048

080064e0 <vARPRefreshCacheEntryAge>:
 * @param[in] pxMACAddress Pointer to the MAC address whose entry needs to be updated.
 * @param[in] ulIPAddress the IP address whose corresponding entry needs to be updated.
 */
void vARPRefreshCacheEntryAge( const MACAddress_t * pxMACAddress,
                               const uint32_t ulIPAddress )
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b084      	sub	sp, #16
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
 80064e8:	6039      	str	r1, [r7, #0]
    BaseType_t x;

    if( pxMACAddress != NULL )
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d026      	beq.n	800653e <vARPRefreshCacheEntryAge+0x5e>
    {
        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80064f0:	2300      	movs	r3, #0
 80064f2:	60fb      	str	r3, [r7, #12]
 80064f4:	e020      	b.n	8006538 <vARPRefreshCacheEntryAge+0x58>
        {
            /* Does this line in the cache table hold an entry for the IP
             * address being queried? */
            if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 80064f6:	4a14      	ldr	r2, [pc, #80]	@ (8006548 <vARPRefreshCacheEntryAge+0x68>)
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	011b      	lsls	r3, r3, #4
 80064fc:	4413      	add	r3, r2
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	683a      	ldr	r2, [r7, #0]
 8006502:	429a      	cmp	r2, r3
 8006504:	d115      	bne.n	8006532 <vARPRefreshCacheEntryAge+0x52>
            {
                /* Does this cache entry have the same MAC address? */
                if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	011b      	lsls	r3, r3, #4
 800650a:	4a0f      	ldr	r2, [pc, #60]	@ (8006548 <vARPRefreshCacheEntryAge+0x68>)
 800650c:	4413      	add	r3, r2
 800650e:	3304      	adds	r3, #4
 8006510:	6879      	ldr	r1, [r7, #4]
 8006512:	2206      	movs	r2, #6
 8006514:	4618      	mov	r0, r3
 8006516:	f01b fd64 	bl	8021fe2 <memcmp>
 800651a:	4603      	mov	r3, r0
 800651c:	2b00      	cmp	r3, #0
 800651e:	d108      	bne.n	8006532 <vARPRefreshCacheEntryAge+0x52>
                {
                    /* The IP address and the MAC matched, update this entry age. */
                    xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 8006520:	4a09      	ldr	r2, [pc, #36]	@ (8006548 <vARPRefreshCacheEntryAge+0x68>)
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	011b      	lsls	r3, r3, #4
 8006526:	4413      	add	r3, r2
 8006528:	330a      	adds	r3, #10
 800652a:	2296      	movs	r2, #150	@ 0x96
 800652c:	701a      	strb	r2, [r3, #0]
                    break;
 800652e:	bf00      	nop
                }
            }
        }
    }
}
 8006530:	e005      	b.n	800653e <vARPRefreshCacheEntryAge+0x5e>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	3301      	adds	r3, #1
 8006536:	60fb      	str	r3, [r7, #12]
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b05      	cmp	r3, #5
 800653c:	dddb      	ble.n	80064f6 <vARPRefreshCacheEntryAge+0x16>
}
 800653e:	bf00      	nop
 8006540:	3710      	adds	r7, #16
 8006542:	46bd      	mov	sp, r7
 8006544:	bd80      	pop	{r7, pc}
 8006546:	bf00      	nop
 8006548:	20000c60 	.word	0x20000c60

0800654c <vARPRefreshCacheEntry>:
 * @param[in] pxEndPoint The end-point stored in the table.
 */
void vARPRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                            const uint32_t ulIPAddress,
                            struct xNetworkEndPoint * pxEndPoint )
{
 800654c:	b580      	push	{r7, lr}
 800654e:	b088      	sub	sp, #32
 8006550:	af00      	add	r7, sp, #0
 8006552:	60f8      	str	r0, [r7, #12]
 8006554:	60b9      	str	r1, [r7, #8]
 8006556:	607a      	str	r2, [r7, #4]
    #endif
    {
        CacheLocation_t xLocation;
        BaseType_t xReady;

        xReady = prvFindCacheEntry( pxMACAddress, ulIPAddress, pxEndPoint, &( xLocation ) );
 8006558:	f107 0310 	add.w	r3, r7, #16
 800655c:	687a      	ldr	r2, [r7, #4]
 800655e:	68b9      	ldr	r1, [r7, #8]
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f000 f85b 	bl	800661c <prvFindCacheEntry>
 8006566:	61f8      	str	r0, [r7, #28]

        if( xReady == pdFALSE )
 8006568:	69fb      	ldr	r3, [r7, #28]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d150      	bne.n	8006610 <vARPRefreshCacheEntry+0xc4>
        {
            if( xLocation.xMacEntry >= 0 )
 800656e:	697b      	ldr	r3, [r7, #20]
 8006570:	2b00      	cmp	r3, #0
 8006572:	db0e      	blt.n	8006592 <vARPRefreshCacheEntry+0x46>
            {
                xLocation.xUseEntry = xLocation.xMacEntry;
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	61bb      	str	r3, [r7, #24]

                if( xLocation.xIpEntry >= 0 )
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	2b00      	cmp	r3, #0
 800657c:	db0e      	blt.n	800659c <vARPRefreshCacheEntry+0x50>
                {
                    /* Both the MAC address as well as the IP address were found in
                     * different locations: clear the entry which matches the
                     * IP-address */
                    ( void ) memset( &( xARPCache[ xLocation.xIpEntry ] ), 0, sizeof( ARPCacheRow_t ) );
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	011b      	lsls	r3, r3, #4
 8006582:	4a25      	ldr	r2, [pc, #148]	@ (8006618 <vARPRefreshCacheEntry+0xcc>)
 8006584:	4413      	add	r3, r2
 8006586:	2210      	movs	r2, #16
 8006588:	2100      	movs	r1, #0
 800658a:	4618      	mov	r0, r3
 800658c:	f01a fea1 	bl	80212d2 <memset>
 8006590:	e004      	b.n	800659c <vARPRefreshCacheEntry+0x50>
                }
            }
            else if( xLocation.xIpEntry >= 0 )
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	2b00      	cmp	r3, #0
 8006596:	db01      	blt.n	800659c <vARPRefreshCacheEntry+0x50>
            {
                /* An entry containing the IP-address was found, but it had a different MAC address */
                xLocation.xUseEntry = xLocation.xIpEntry;
 8006598:	693b      	ldr	r3, [r7, #16]
 800659a:	61bb      	str	r3, [r7, #24]
            {
                /* No matching entry found. */
            }

            /* If the entry was not found, we use the oldest entry and set the IPaddress */
            xARPCache[ xLocation.xUseEntry ].ulIPAddress = ulIPAddress;
 800659c:	69bb      	ldr	r3, [r7, #24]
 800659e:	4a1e      	ldr	r2, [pc, #120]	@ (8006618 <vARPRefreshCacheEntry+0xcc>)
 80065a0:	011b      	lsls	r3, r3, #4
 80065a2:	4413      	add	r3, r2
 80065a4:	68ba      	ldr	r2, [r7, #8]
 80065a6:	601a      	str	r2, [r3, #0]

            if( pxMACAddress != NULL )
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d01f      	beq.n	80065ee <vARPRefreshCacheEntry+0xa2>
            {
                ( void ) memcpy( xARPCache[ xLocation.xUseEntry ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) );
 80065ae:	69bb      	ldr	r3, [r7, #24]
 80065b0:	011b      	lsls	r3, r3, #4
 80065b2:	4a19      	ldr	r2, [pc, #100]	@ (8006618 <vARPRefreshCacheEntry+0xcc>)
 80065b4:	4413      	add	r3, r2
 80065b6:	3304      	adds	r3, #4
 80065b8:	68f9      	ldr	r1, [r7, #12]
 80065ba:	2206      	movs	r2, #6
 80065bc:	4618      	mov	r0, r3
 80065be:	f01a fd7b 	bl	80210b8 <memcpy>

                iptraceARP_TABLE_ENTRY_CREATED( ulIPAddress, ( *pxMACAddress ) );
                /* And this entry does not need immediate attention */
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80065c2:	69bb      	ldr	r3, [r7, #24]
 80065c4:	4a14      	ldr	r2, [pc, #80]	@ (8006618 <vARPRefreshCacheEntry+0xcc>)
 80065c6:	011b      	lsls	r3, r3, #4
 80065c8:	4413      	add	r3, r2
 80065ca:	330a      	adds	r3, #10
 80065cc:	2296      	movs	r2, #150	@ 0x96
 80065ce:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdTRUE;
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	4a11      	ldr	r2, [pc, #68]	@ (8006618 <vARPRefreshCacheEntry+0xcc>)
 80065d4:	011b      	lsls	r3, r3, #4
 80065d6:	4413      	add	r3, r2
 80065d8:	330b      	adds	r3, #11
 80065da:	2201      	movs	r2, #1
 80065dc:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].pxEndPoint = pxEndPoint;
 80065de:	69bb      	ldr	r3, [r7, #24]
 80065e0:	4a0d      	ldr	r2, [pc, #52]	@ (8006618 <vARPRefreshCacheEntry+0xcc>)
 80065e2:	011b      	lsls	r3, r3, #4
 80065e4:	4413      	add	r3, r2
 80065e6:	330c      	adds	r3, #12
 80065e8:	687a      	ldr	r2, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]
            {
                /* Nothing will be stored. */
            }
        }
    }
}
 80065ec:	e010      	b.n	8006610 <vARPRefreshCacheEntry+0xc4>
            else if( xLocation.xIpEntry < 0 )
 80065ee:	693b      	ldr	r3, [r7, #16]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	da0d      	bge.n	8006610 <vARPRefreshCacheEntry+0xc4>
                xARPCache[ xLocation.xUseEntry ].ucAge = ( uint8_t ) ipconfigMAX_ARP_RETRANSMISSIONS;
 80065f4:	69bb      	ldr	r3, [r7, #24]
 80065f6:	4a08      	ldr	r2, [pc, #32]	@ (8006618 <vARPRefreshCacheEntry+0xcc>)
 80065f8:	011b      	lsls	r3, r3, #4
 80065fa:	4413      	add	r3, r2
 80065fc:	330a      	adds	r3, #10
 80065fe:	2205      	movs	r2, #5
 8006600:	701a      	strb	r2, [r3, #0]
                xARPCache[ xLocation.xUseEntry ].ucValid = ( uint8_t ) pdFALSE;
 8006602:	69bb      	ldr	r3, [r7, #24]
 8006604:	4a04      	ldr	r2, [pc, #16]	@ (8006618 <vARPRefreshCacheEntry+0xcc>)
 8006606:	011b      	lsls	r3, r3, #4
 8006608:	4413      	add	r3, r2
 800660a:	330b      	adds	r3, #11
 800660c:	2200      	movs	r2, #0
 800660e:	701a      	strb	r2, [r3, #0]
}
 8006610:	bf00      	nop
 8006612:	3720      	adds	r7, #32
 8006614:	46bd      	mov	sp, r7
 8006616:	bd80      	pop	{r7, pc}
 8006618:	20000c60 	.word	0x20000c60

0800661c <prvFindCacheEntry>:
 */
static BaseType_t prvFindCacheEntry( const MACAddress_t * pxMACAddress,
                                     const uint32_t ulIPAddress,
                                     struct xNetworkEndPoint * pxEndPoint,
                                     CacheLocation_t * pxLocation )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b08a      	sub	sp, #40	@ 0x28
 8006620:	af00      	add	r7, sp, #0
 8006622:	60f8      	str	r0, [r7, #12]
 8006624:	60b9      	str	r1, [r7, #8]
 8006626:	607a      	str	r2, [r7, #4]
 8006628:	603b      	str	r3, [r7, #0]
    BaseType_t x = 0;
 800662a:	2300      	movs	r3, #0
 800662c:	627b      	str	r3, [r7, #36]	@ 0x24
    uint8_t ucMinAgeFound = 0U;
 800662e:	2300      	movs	r3, #0
 8006630:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    BaseType_t xReturn = pdFALSE;
 8006634:	2300      	movs	r3, #0
 8006636:	61fb      	str	r3, [r7, #28]

    #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
        BaseType_t xAddressIsLocal = ( FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 2 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 8006638:	2102      	movs	r1, #2
 800663a:	68b8      	ldr	r0, [r7, #8]
 800663c:	f006 fb24 	bl	800cc88 <FreeRTOS_FindEndPointOnNetMask>
 8006640:	4603      	mov	r3, r0
 8006642:	2b00      	cmp	r3, #0
 8006644:	bf14      	ite	ne
 8006646:	2301      	movne	r3, #1
 8006648:	2300      	moveq	r3, #0
 800664a:	b2db      	uxtb	r3, r3
 800664c:	617b      	str	r3, [r7, #20]
    #endif

    /* Start with the maximum possible number. */
    ucMinAgeFound--;
 800664e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8006652:	3b01      	subs	r3, #1
 8006654:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

    pxLocation->xIpEntry = -1;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	f04f 32ff 	mov.w	r2, #4294967295
 800665e:	601a      	str	r2, [r3, #0]
    pxLocation->xMacEntry = -1;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	f04f 32ff 	mov.w	r2, #4294967295
 8006666:	605a      	str	r2, [r3, #4]
    pxLocation->xUseEntry = 0;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	2200      	movs	r2, #0
 800666c:	609a      	str	r2, [r3, #8]

    /* For each entry in the ARP cache table. */
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 800666e:	2300      	movs	r3, #0
 8006670:	627b      	str	r3, [r7, #36]	@ 0x24
 8006672:	e074      	b.n	800675e <prvFindCacheEntry+0x142>
    {
        BaseType_t xMatchingMAC = pdFALSE;
 8006674:	2300      	movs	r3, #0
 8006676:	61bb      	str	r3, [r7, #24]

        if( pxMACAddress != NULL )
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b00      	cmp	r3, #0
 800667c:	d00e      	beq.n	800669c <prvFindCacheEntry+0x80>
        {
            if( memcmp( xARPCache[ x ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( pxMACAddress->ucBytes ) ) == 0 )
 800667e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006680:	011b      	lsls	r3, r3, #4
 8006682:	4a3b      	ldr	r2, [pc, #236]	@ (8006770 <prvFindCacheEntry+0x154>)
 8006684:	4413      	add	r3, r2
 8006686:	3304      	adds	r3, #4
 8006688:	68f9      	ldr	r1, [r7, #12]
 800668a:	2206      	movs	r2, #6
 800668c:	4618      	mov	r0, r3
 800668e:	f01b fca8 	bl	8021fe2 <memcmp>
 8006692:	4603      	mov	r3, r0
 8006694:	2b00      	cmp	r3, #0
 8006696:	d101      	bne.n	800669c <prvFindCacheEntry+0x80>
            {
                xMatchingMAC = pdTRUE;
 8006698:	2301      	movs	r3, #1
 800669a:	61bb      	str	r3, [r7, #24]
            }
        }

        /* Does this line in the cache table hold an entry for the IP
         * address being queried? */
        if( xARPCache[ x ].ulIPAddress == ulIPAddress )
 800669c:	4a34      	ldr	r2, [pc, #208]	@ (8006770 <prvFindCacheEntry+0x154>)
 800669e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a0:	011b      	lsls	r3, r3, #4
 80066a2:	4413      	add	r3, r2
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	68ba      	ldr	r2, [r7, #8]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d125      	bne.n	80066f8 <prvFindCacheEntry+0xdc>
        {
            if( pxMACAddress == NULL )
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d103      	bne.n	80066ba <prvFindCacheEntry+0x9e>
            {
                /* In case the parameter pxMACAddress is NULL, an entry will be reserved to
                 * indicate that there is an outstanding ARP request, This entry will have
                 * "ucValid == pdFALSE". */
                pxLocation->xIpEntry = x;
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066b6:	601a      	str	r2, [r3, #0]
                break;
 80066b8:	e054      	b.n	8006764 <prvFindCacheEntry+0x148>
            }

            /* See if the MAC-address also matches. */
            if( xMatchingMAC != pdFALSE )
 80066ba:	69bb      	ldr	r3, [r7, #24]
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d017      	beq.n	80066f0 <prvFindCacheEntry+0xd4>
            {
                /* This function will be called for each received packet
                 * This is by far the most common path. */
                xARPCache[ x ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 80066c0:	4a2b      	ldr	r2, [pc, #172]	@ (8006770 <prvFindCacheEntry+0x154>)
 80066c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066c4:	011b      	lsls	r3, r3, #4
 80066c6:	4413      	add	r3, r2
 80066c8:	330a      	adds	r3, #10
 80066ca:	2296      	movs	r2, #150	@ 0x96
 80066cc:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].ucValid = ( uint8_t ) pdTRUE;
 80066ce:	4a28      	ldr	r2, [pc, #160]	@ (8006770 <prvFindCacheEntry+0x154>)
 80066d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066d2:	011b      	lsls	r3, r3, #4
 80066d4:	4413      	add	r3, r2
 80066d6:	330b      	adds	r3, #11
 80066d8:	2201      	movs	r2, #1
 80066da:	701a      	strb	r2, [r3, #0]
                xARPCache[ x ].pxEndPoint = pxEndPoint;
 80066dc:	4a24      	ldr	r2, [pc, #144]	@ (8006770 <prvFindCacheEntry+0x154>)
 80066de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066e0:	011b      	lsls	r3, r3, #4
 80066e2:	4413      	add	r3, r2
 80066e4:	330c      	adds	r3, #12
 80066e6:	687a      	ldr	r2, [r7, #4]
 80066e8:	601a      	str	r2, [r3, #0]
                /* Indicate to the caller that the entry is updated. */
                xReturn = pdTRUE;
 80066ea:	2301      	movs	r3, #1
 80066ec:	61fb      	str	r3, [r7, #28]
                break;
 80066ee:	e039      	b.n	8006764 <prvFindCacheEntry+0x148>
            /* Found an entry containing ulIPAddress, but the MAC address
             * doesn't match.  Might be an entry with ucValid=pdFALSE, waiting
             * for an ARP reply.  Still want to see if there is match with the
             * given MAC address.ucBytes.  If found, either of the two entries
             * must be cleared. */
            pxLocation->xIpEntry = x;
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80066f4:	601a      	str	r2, [r3, #0]
 80066f6:	e02f      	b.n	8006758 <prvFindCacheEntry+0x13c>
        }
        else if( xMatchingMAC != pdFALSE )
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d017      	beq.n	800672e <prvFindCacheEntry+0x112>
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 )
            {
                /* If ARP stores the MAC address of IP addresses outside the
                 * network, than the MAC address of the gateway should not be
                 * overwritten. */
                BaseType_t xOtherIsLocal = ( FreeRTOS_FindEndPointOnNetMask( xARPCache[ x ].ulIPAddress, 3 ) != NULL ) ? 1 : 0; /* ARP remote address. */
 80066fe:	4a1c      	ldr	r2, [pc, #112]	@ (8006770 <prvFindCacheEntry+0x154>)
 8006700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006702:	011b      	lsls	r3, r3, #4
 8006704:	4413      	add	r3, r2
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	2103      	movs	r1, #3
 800670a:	4618      	mov	r0, r3
 800670c:	f006 fabc 	bl	800cc88 <FreeRTOS_FindEndPointOnNetMask>
 8006710:	4603      	mov	r3, r0
 8006712:	2b00      	cmp	r3, #0
 8006714:	bf14      	ite	ne
 8006716:	2301      	movne	r3, #1
 8006718:	2300      	moveq	r3, #0
 800671a:	b2db      	uxtb	r3, r3
 800671c:	613b      	str	r3, [r7, #16]

                if( xAddressIsLocal == xOtherIsLocal )
 800671e:	697a      	ldr	r2, [r7, #20]
 8006720:	693b      	ldr	r3, [r7, #16]
 8006722:	429a      	cmp	r2, r3
 8006724:	d118      	bne.n	8006758 <prvFindCacheEntry+0x13c>
                {
                    pxLocation->xMacEntry = x;
 8006726:	683b      	ldr	r3, [r7, #0]
 8006728:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800672a:	605a      	str	r2, [r3, #4]
 800672c:	e014      	b.n	8006758 <prvFindCacheEntry+0x13c>
            #endif /* if ( ipconfigARP_STORES_REMOTE_ADDRESSES != 0 ) */
        }

        /* _HT_
         * Shouldn't we test for xARPCache[ x ].ucValid == pdFALSE here ? */
        else if( xARPCache[ x ].ucAge < ucMinAgeFound )
 800672e:	4a10      	ldr	r2, [pc, #64]	@ (8006770 <prvFindCacheEntry+0x154>)
 8006730:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006732:	011b      	lsls	r3, r3, #4
 8006734:	4413      	add	r3, r2
 8006736:	330a      	adds	r3, #10
 8006738:	781b      	ldrb	r3, [r3, #0]
 800673a:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800673e:	429a      	cmp	r2, r3
 8006740:	d90a      	bls.n	8006758 <prvFindCacheEntry+0x13c>
        {
            /* As the table is traversed, remember the table row that
             * contains the oldest entry (the lowest age count, as ages are
             * decremented to zero) so the row can be re-used if this function
             * needs to add an entry that does not already exist. */
            ucMinAgeFound = xARPCache[ x ].ucAge;
 8006742:	4a0b      	ldr	r2, [pc, #44]	@ (8006770 <prvFindCacheEntry+0x154>)
 8006744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006746:	011b      	lsls	r3, r3, #4
 8006748:	4413      	add	r3, r2
 800674a:	330a      	adds	r3, #10
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            pxLocation->xUseEntry = x;
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006756:	609a      	str	r2, [r3, #8]
    for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800675a:	3301      	adds	r3, #1
 800675c:	627b      	str	r3, [r7, #36]	@ 0x24
 800675e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006760:	2b05      	cmp	r3, #5
 8006762:	dd87      	ble.n	8006674 <prvFindCacheEntry+0x58>
        {
            /* Nothing happens to this cache entry for now. */
        }
    } /* for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ ) */

    return xReturn;
 8006764:	69fb      	ldr	r3, [r7, #28]
}
 8006766:	4618      	mov	r0, r3
 8006768:	3728      	adds	r7, #40	@ 0x28
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000c60 	.word	0x20000c60

08006774 <eARPGetCacheEntry>:
 *         eCantSendPacket.
 */
    eARPLookupResult_t eARPGetCacheEntry( uint32_t * pulIPAddress,
                                          MACAddress_t * const pxMACAddress,
                                          struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006774:	b580      	push	{r7, lr}
 8006776:	b088      	sub	sp, #32
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        uint32_t ulAddressToLookup;
        NetworkEndPoint_t * pxEndPoint = NULL;
 8006780:	2300      	movs	r3, #0
 8006782:	61bb      	str	r3, [r7, #24]

        configASSERT( pxMACAddress != NULL );
 8006784:	68bb      	ldr	r3, [r7, #8]
 8006786:	2b00      	cmp	r3, #0
 8006788:	d104      	bne.n	8006794 <eARPGetCacheEntry+0x20>
 800678a:	f240 31c9 	movw	r1, #969	@ 0x3c9
 800678e:	483c      	ldr	r0, [pc, #240]	@ (8006880 <eARPGetCacheEntry+0x10c>)
 8006790:	f7fa fe6e 	bl	8001470 <vAssertCalled>
        configASSERT( pulIPAddress != NULL );
 8006794:	68fb      	ldr	r3, [r7, #12]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d104      	bne.n	80067a4 <eARPGetCacheEntry+0x30>
 800679a:	f240 31ca 	movw	r1, #970	@ 0x3ca
 800679e:	4838      	ldr	r0, [pc, #224]	@ (8006880 <eARPGetCacheEntry+0x10c>)
 80067a0:	f7fa fe66 	bl	8001470 <vAssertCalled>
        configASSERT( ppxEndPoint != NULL );
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d104      	bne.n	80067b4 <eARPGetCacheEntry+0x40>
 80067aa:	f240 31cb 	movw	r1, #971	@ 0x3cb
 80067ae:	4834      	ldr	r0, [pc, #208]	@ (8006880 <eARPGetCacheEntry+0x10c>)
 80067b0:	f7fa fe5e 	bl	8001470 <vAssertCalled>

        *( ppxEndPoint ) = NULL;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]
        ulAddressToLookup = *pulIPAddress;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	617b      	str	r3, [r7, #20]
        pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( ulAddressToLookup, 0 );
 80067c0:	2100      	movs	r1, #0
 80067c2:	6978      	ldr	r0, [r7, #20]
 80067c4:	f006 f9d4 	bl	800cb70 <FreeRTOS_FindEndPointOnIP_IPv4>
 80067c8:	61b8      	str	r0, [r7, #24]

        if( xIsIPv4Multicast( ulAddressToLookup ) != 0 )
 80067ca:	6978      	ldr	r0, [r7, #20]
 80067cc:	f003 fc3c 	bl	800a048 <xIsIPv4Multicast>
 80067d0:	4603      	mov	r3, r0
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d021      	beq.n	800681a <eARPGetCacheEntry+0xa6>
        {
            /* Get the lowest 23 bits of the IP-address. */
            vSetMultiCastIPv4MacAddress( ulAddressToLookup, pxMACAddress );
 80067d6:	68b9      	ldr	r1, [r7, #8]
 80067d8:	6978      	ldr	r0, [r7, #20]
 80067da:	f003 fd63 	bl	800a2a4 <vSetMultiCastIPv4MacAddress>

            eReturn = eCantSendPacket;
 80067de:	2302      	movs	r3, #2
 80067e0:	77fb      	strb	r3, [r7, #31]
            pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 80067e2:	2000      	movs	r0, #0
 80067e4:	f006 f978 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 80067e8:	61b8      	str	r0, [r7, #24]

            for( ;
 80067ea:	e012      	b.n	8006812 <eARPGetCacheEntry+0x9e>
                 pxEndPoint != NULL;
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
            {
                if( pxEndPoint->bits.bIPv6 == 0U ) /*NULL End Point is checked in the for loop, no need for an extra check */
 80067ec:	69bb      	ldr	r3, [r7, #24]
 80067ee:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80067f2:	f003 0304 	and.w	r3, r3, #4
 80067f6:	b2db      	uxtb	r3, r3
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d105      	bne.n	8006808 <eARPGetCacheEntry+0x94>
                {
                    /* For multi-cast, use the first IPv4 end-point. */
                    *( ppxEndPoint ) = pxEndPoint;
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	69ba      	ldr	r2, [r7, #24]
 8006800:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 8006802:	2301      	movs	r3, #1
 8006804:	77fb      	strb	r3, [r7, #31]
                    break;
 8006806:	e035      	b.n	8006874 <eARPGetCacheEntry+0x100>
                 pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8006808:	69b9      	ldr	r1, [r7, #24]
 800680a:	2000      	movs	r0, #0
 800680c:	f006 f986 	bl	800cb1c <FreeRTOS_NextEndPoint>
 8006810:	61b8      	str	r0, [r7, #24]
                 pxEndPoint != NULL;
 8006812:	69bb      	ldr	r3, [r7, #24]
 8006814:	2b00      	cmp	r3, #0
 8006816:	d1e9      	bne.n	80067ec <eARPGetCacheEntry+0x78>
 8006818:	e02c      	b.n	8006874 <eARPGetCacheEntry+0x100>
                }
            }
        }
        else if( ( FreeRTOS_htonl( ulAddressToLookup ) & 0xffU ) == 0xffU ) /* Is this a broadcast address like x.x.x.255 ? */
 800681a:	697b      	ldr	r3, [r7, #20]
 800681c:	061a      	lsls	r2, r3, #24
 800681e:	697b      	ldr	r3, [r7, #20]
 8006820:	021b      	lsls	r3, r3, #8
 8006822:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006826:	431a      	orrs	r2, r3
 8006828:	697b      	ldr	r3, [r7, #20]
 800682a:	0a1b      	lsrs	r3, r3, #8
 800682c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006830:	431a      	orrs	r2, r3
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	0e1b      	lsrs	r3, r3, #24
 8006836:	4313      	orrs	r3, r2
 8006838:	b2db      	uxtb	r3, r3
 800683a:	2bff      	cmp	r3, #255	@ 0xff
 800683c:	d113      	bne.n	8006866 <eARPGetCacheEntry+0xf2>
        {
            /* This is a broadcast so it uses the broadcast MAC address. */
            ( void ) memcpy( pxMACAddress->ucBytes, xBroadcastMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800683e:	68bb      	ldr	r3, [r7, #8]
 8006840:	4a10      	ldr	r2, [pc, #64]	@ (8006884 <eARPGetCacheEntry+0x110>)
 8006842:	6811      	ldr	r1, [r2, #0]
 8006844:	6019      	str	r1, [r3, #0]
 8006846:	8892      	ldrh	r2, [r2, #4]
 8006848:	809a      	strh	r2, [r3, #4]
            pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 800684a:	2104      	movs	r1, #4
 800684c:	6978      	ldr	r0, [r7, #20]
 800684e:	f006 fa1b 	bl	800cc88 <FreeRTOS_FindEndPointOnNetMask>
 8006852:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 8006854:	69bb      	ldr	r3, [r7, #24]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <eARPGetCacheEntry+0xec>
            {
                *( ppxEndPoint ) = pxEndPoint;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	69ba      	ldr	r2, [r7, #24]
 800685e:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 8006860:	2301      	movs	r3, #1
 8006862:	77fb      	strb	r3, [r7, #31]
 8006864:	e006      	b.n	8006874 <eARPGetCacheEntry+0x100>
        }
        else
        {
            eReturn = eARPGetCacheEntryGateWay( pulIPAddress, pxMACAddress, ppxEndPoint );
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	68b9      	ldr	r1, [r7, #8]
 800686a:	68f8      	ldr	r0, [r7, #12]
 800686c:	f000 f80c 	bl	8006888 <eARPGetCacheEntryGateWay>
 8006870:	4603      	mov	r3, r0
 8006872:	77fb      	strb	r3, [r7, #31]
        }

        return eReturn;
 8006874:	7ffb      	ldrb	r3, [r7, #31]
    }
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}
 800687e:	bf00      	nop
 8006880:	0802307c 	.word	0x0802307c
 8006884:	08026318 	.word	0x08026318

08006888 <eARPGetCacheEntryGateWay>:
 * @param[out] ppxEndPoint The end-point of the gateway will be copy to the pointee.
 */
    static eARPLookupResult_t eARPGetCacheEntryGateWay( uint32_t * pulIPAddress,
                                                        MACAddress_t * const pxMACAddress,
                                                        struct xNetworkEndPoint ** ppxEndPoint )
    {
 8006888:	b580      	push	{r7, lr}
 800688a:	b088      	sub	sp, #32
 800688c:	af00      	add	r7, sp, #0
 800688e:	60f8      	str	r0, [r7, #12]
 8006890:	60b9      	str	r1, [r7, #8]
 8006892:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn = eARPCacheMiss;
 8006894:	2300      	movs	r3, #0
 8006896:	77fb      	strb	r3, [r7, #31]
        uint32_t ulAddressToLookup = *( pulIPAddress );
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	61bb      	str	r3, [r7, #24]
        NetworkEndPoint_t * pxEndPoint;
        uint32_t ulOriginal = *pulIPAddress;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	617b      	str	r3, [r7, #20]

        /* It is assumed that devices with the same netmask are on the same
         * LAN and don't need a gateway. */
        pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulAddressToLookup, 4 );
 80068a4:	2104      	movs	r1, #4
 80068a6:	69b8      	ldr	r0, [r7, #24]
 80068a8:	f006 f9ee 	bl	800cc88 <FreeRTOS_FindEndPointOnNetMask>
 80068ac:	6138      	str	r0, [r7, #16]

        if( pxEndPoint == NULL )
 80068ae:	693b      	ldr	r3, [r7, #16]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d11b      	bne.n	80068ec <eARPGetCacheEntryGateWay+0x64>
        {
            /* No matching end-point is found, look for a gateway. */
            #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 80068b4:	687a      	ldr	r2, [r7, #4]
 80068b6:	68b9      	ldr	r1, [r7, #8]
 80068b8:	69b8      	ldr	r0, [r7, #24]
 80068ba:	f000 f86b 	bl	8006994 <prvCacheLookup>
 80068be:	4603      	mov	r3, r0
 80068c0:	77fb      	strb	r3, [r7, #31]

                if( eReturn == eARPCacheHit )
 80068c2:	7ffb      	ldrb	r3, [r7, #31]
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	d017      	beq.n	80068f8 <eARPGetCacheEntryGateWay+0x70>
                else
            #endif
            {
                /* The IP address is off the local network, so look up the
                 * hardware address of the router, if any. */
                *( ppxEndPoint ) = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv4 );
 80068c8:	2040      	movs	r0, #64	@ 0x40
 80068ca:	f006 fca9 	bl	800d220 <FreeRTOS_FindGateWay>
 80068ce:	4602      	mov	r2, r0
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	601a      	str	r2, [r3, #0]

                if( *( ppxEndPoint ) != NULL )
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d004      	beq.n	80068e6 <eARPGetCacheEntryGateWay+0x5e>
                {
                    /* 'ipv4_settings' can be accessed safely, because 'ipTYPE_IPv4' was provided. */
                    ulAddressToLookup = ( *ppxEndPoint )->ipv4_settings.ulGatewayAddress;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	61bb      	str	r3, [r7, #24]
 80068e4:	e008      	b.n	80068f8 <eARPGetCacheEntryGateWay+0x70>
                }
                else
                {
                    ulAddressToLookup = 0U;
 80068e6:	2300      	movs	r3, #0
 80068e8:	61bb      	str	r3, [r7, #24]
 80068ea:	e005      	b.n	80068f8 <eARPGetCacheEntryGateWay+0x70>
        }
        else
        {
            /* The IP address is on the local network, so lookup the requested
             * IP address directly. */
            ulAddressToLookup = *pulIPAddress;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	61bb      	str	r3, [r7, #24]
            *ppxEndPoint = pxEndPoint;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	693a      	ldr	r2, [r7, #16]
 80068f6:	601a      	str	r2, [r3, #0]
        }

        #if ( ipconfigARP_STORES_REMOTE_ADDRESSES == 1 )
            if( eReturn == eARPCacheMiss )
 80068f8:	7ffb      	ldrb	r3, [r7, #31]
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d13f      	bne.n	800697e <eARPGetCacheEntryGateWay+0xf6>
        #endif
        {
            if( ulAddressToLookup == 0U )
 80068fe:	69bb      	ldr	r3, [r7, #24]
 8006900:	2b00      	cmp	r3, #0
 8006902:	d102      	bne.n	800690a <eARPGetCacheEntryGateWay+0x82>
            {
                /* The address is not on the local network, and there is not a
                 * router. */
                eReturn = eCantSendPacket;
 8006904:	2302      	movs	r3, #2
 8006906:	77fb      	strb	r3, [r7, #31]
 8006908:	e039      	b.n	800697e <eARPGetCacheEntryGateWay+0xf6>
            }
            else
            {
                eReturn = prvCacheLookup( ulAddressToLookup, pxMACAddress, ppxEndPoint );
 800690a:	687a      	ldr	r2, [r7, #4]
 800690c:	68b9      	ldr	r1, [r7, #8]
 800690e:	69b8      	ldr	r0, [r7, #24]
 8006910:	f000 f840 	bl	8006994 <prvCacheLookup>
 8006914:	4603      	mov	r3, r0
 8006916:	77fb      	strb	r3, [r7, #31]

                if( ( eReturn != eARPCacheHit ) || ( ulOriginal != ulAddressToLookup ) )
 8006918:	7ffb      	ldrb	r3, [r7, #31]
 800691a:	2b01      	cmp	r3, #1
 800691c:	d103      	bne.n	8006926 <eARPGetCacheEntryGateWay+0x9e>
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	69bb      	ldr	r3, [r7, #24]
 8006922:	429a      	cmp	r2, r3
 8006924:	d028      	beq.n	8006978 <eARPGetCacheEntryGateWay+0xf0>
                {
                    FreeRTOS_debug_printf( ( "ARP %xip %s using %xip\n",
 8006926:	697b      	ldr	r3, [r7, #20]
 8006928:	061a      	lsls	r2, r3, #24
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006932:	431a      	orrs	r2, r3
 8006934:	697b      	ldr	r3, [r7, #20]
 8006936:	0a1b      	lsrs	r3, r3, #8
 8006938:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800693c:	431a      	orrs	r2, r3
 800693e:	697b      	ldr	r3, [r7, #20]
 8006940:	0e1b      	lsrs	r3, r3, #24
 8006942:	ea42 0103 	orr.w	r1, r2, r3
 8006946:	7ffb      	ldrb	r3, [r7, #31]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d101      	bne.n	8006950 <eARPGetCacheEntryGateWay+0xc8>
 800694c:	480e      	ldr	r0, [pc, #56]	@ (8006988 <eARPGetCacheEntryGateWay+0x100>)
 800694e:	e000      	b.n	8006952 <eARPGetCacheEntryGateWay+0xca>
 8006950:	480e      	ldr	r0, [pc, #56]	@ (800698c <eARPGetCacheEntryGateWay+0x104>)
 8006952:	69bb      	ldr	r3, [r7, #24]
 8006954:	061a      	lsls	r2, r3, #24
 8006956:	69bb      	ldr	r3, [r7, #24]
 8006958:	021b      	lsls	r3, r3, #8
 800695a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800695e:	431a      	orrs	r2, r3
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	0a1b      	lsrs	r3, r3, #8
 8006964:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006968:	431a      	orrs	r2, r3
 800696a:	69bb      	ldr	r3, [r7, #24]
 800696c:	0e1b      	lsrs	r3, r3, #24
 800696e:	4313      	orrs	r3, r2
 8006970:	4602      	mov	r2, r0
 8006972:	4807      	ldr	r0, [pc, #28]	@ (8006990 <eARPGetCacheEntryGateWay+0x108>)
 8006974:	f01a f984 	bl	8020c80 <lUDPLoggingPrintf>
                                             ( eReturn == eARPCacheHit ) ? "hit" : "miss",
                                             ( unsigned ) FreeRTOS_ntohl( ulAddressToLookup ) ) );
                }

                /* It might be that the ARP has to go to the gateway. */
                *pulIPAddress = ulAddressToLookup;
 8006978:	68fb      	ldr	r3, [r7, #12]
 800697a:	69ba      	ldr	r2, [r7, #24]
 800697c:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800697e:	7ffb      	ldrb	r3, [r7, #31]
    }
 8006980:	4618      	mov	r0, r3
 8006982:	3720      	adds	r7, #32
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}
 8006988:	080230a8 	.word	0x080230a8
 800698c:	080230ac 	.word	0x080230ac
 8006990:	080230b4 	.word	0x080230b4

08006994 <prvCacheLookup>:
 *         and when waiting for a ARP reply: eCantSendPacket.
 */
    static eARPLookupResult_t prvCacheLookup( uint32_t ulAddressToLookup,
                                              MACAddress_t * const pxMACAddress,
                                              NetworkEndPoint_t ** ppxEndPoint )
    {
 8006994:	b580      	push	{r7, lr}
 8006996:	b086      	sub	sp, #24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 80069a0:	2300      	movs	r3, #0
 80069a2:	74fb      	strb	r3, [r7, #19]

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80069a4:	2300      	movs	r3, #0
 80069a6:	617b      	str	r3, [r7, #20]
 80069a8:	e02a      	b.n	8006a00 <prvCacheLookup+0x6c>
        {
            /* Does this row in the ARP cache table hold an entry for the IP address
             * being queried? */
            if( xARPCache[ x ].ulIPAddress == ulAddressToLookup )
 80069aa:	4a19      	ldr	r2, [pc, #100]	@ (8006a10 <prvCacheLookup+0x7c>)
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	011b      	lsls	r3, r3, #4
 80069b0:	4413      	add	r3, r2
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	429a      	cmp	r2, r3
 80069b8:	d11f      	bne.n	80069fa <prvCacheLookup+0x66>
            {
                /* A matching valid entry was found. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 80069ba:	4a15      	ldr	r2, [pc, #84]	@ (8006a10 <prvCacheLookup+0x7c>)
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	011b      	lsls	r3, r3, #4
 80069c0:	4413      	add	r3, r2
 80069c2:	330b      	adds	r3, #11
 80069c4:	781b      	ldrb	r3, [r3, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d102      	bne.n	80069d0 <prvCacheLookup+0x3c>
                {
                    /* This entry is waiting an ARP reply, so is not valid. */
                    eReturn = eCantSendPacket;
 80069ca:	2302      	movs	r3, #2
 80069cc:	74fb      	strb	r3, [r7, #19]
                    /* ppxEndPoint != NULL was tested in the only caller eARPGetCacheEntry(). */
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
                    eReturn = eARPCacheHit;
                }

                break;
 80069ce:	e01a      	b.n	8006a06 <prvCacheLookup+0x72>
                    ( void ) memcpy( pxMACAddress->ucBytes, xARPCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 80069d0:	68b8      	ldr	r0, [r7, #8]
 80069d2:	697b      	ldr	r3, [r7, #20]
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	4a0e      	ldr	r2, [pc, #56]	@ (8006a10 <prvCacheLookup+0x7c>)
 80069d8:	4413      	add	r3, r2
 80069da:	3304      	adds	r3, #4
 80069dc:	2206      	movs	r2, #6
 80069de:	4619      	mov	r1, r3
 80069e0:	f01a fb6a 	bl	80210b8 <memcpy>
                    *( ppxEndPoint ) = xARPCache[ x ].pxEndPoint;
 80069e4:	4a0a      	ldr	r2, [pc, #40]	@ (8006a10 <prvCacheLookup+0x7c>)
 80069e6:	697b      	ldr	r3, [r7, #20]
 80069e8:	011b      	lsls	r3, r3, #4
 80069ea:	4413      	add	r3, r2
 80069ec:	330c      	adds	r3, #12
 80069ee:	681a      	ldr	r2, [r3, #0]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	601a      	str	r2, [r3, #0]
                    eReturn = eARPCacheHit;
 80069f4:	2301      	movs	r3, #1
 80069f6:	74fb      	strb	r3, [r7, #19]
                break;
 80069f8:	e005      	b.n	8006a06 <prvCacheLookup+0x72>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 80069fa:	697b      	ldr	r3, [r7, #20]
 80069fc:	3301      	adds	r3, #1
 80069fe:	617b      	str	r3, [r7, #20]
 8006a00:	697b      	ldr	r3, [r7, #20]
 8006a02:	2b05      	cmp	r3, #5
 8006a04:	ddd1      	ble.n	80069aa <prvCacheLookup+0x16>
            }
        }

        return eReturn;
 8006a06:	7cfb      	ldrb	r3, [r7, #19]
    }
 8006a08:	4618      	mov	r0, r3
 8006a0a:	3718      	adds	r7, #24
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	bd80      	pop	{r7, pc}
 8006a10:	20000c60 	.word	0x20000c60

08006a14 <vARPAgeCache>:
 *        reply - if we are, then an ARP request will be re-sent.
 *        In case an ARP entry has 'Aged' to 0, it will be removed from the ARP
 *        cache.
 */
    void vARPAgeCache( void )
    {
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
        BaseType_t x;
        TickType_t xTimeNow;

        /* Loop through each entry in the ARP cache. */
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	e048      	b.n	8006ab2 <vARPAgeCache+0x9e>
        {
            /* If the entry is valid (its age is greater than zero). */
            if( xARPCache[ x ].ucAge > 0U )
 8006a20:	4a47      	ldr	r2, [pc, #284]	@ (8006b40 <vARPAgeCache+0x12c>)
 8006a22:	68fb      	ldr	r3, [r7, #12]
 8006a24:	011b      	lsls	r3, r3, #4
 8006a26:	4413      	add	r3, r2
 8006a28:	330a      	adds	r3, #10
 8006a2a:	781b      	ldrb	r3, [r3, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d03d      	beq.n	8006aac <vARPAgeCache+0x98>
            {
                /* Decrement the age value of the entry in this ARP cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xARPCache[ x ].ucAge )--;
 8006a30:	4a43      	ldr	r2, [pc, #268]	@ (8006b40 <vARPAgeCache+0x12c>)
 8006a32:	68fb      	ldr	r3, [r7, #12]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	4413      	add	r3, r2
 8006a38:	330a      	adds	r3, #10
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	3b01      	subs	r3, #1
 8006a3e:	b2d9      	uxtb	r1, r3
 8006a40:	4a3f      	ldr	r2, [pc, #252]	@ (8006b40 <vARPAgeCache+0x12c>)
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	011b      	lsls	r3, r3, #4
 8006a46:	4413      	add	r3, r2
 8006a48:	330a      	adds	r3, #10
 8006a4a:	460a      	mov	r2, r1
 8006a4c:	701a      	strb	r2, [r3, #0]

                /* If the entry is not yet valid, then it is waiting an ARP
                 * reply, and the ARP request should be retransmitted. */
                if( xARPCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 8006a4e:	4a3c      	ldr	r2, [pc, #240]	@ (8006b40 <vARPAgeCache+0x12c>)
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	011b      	lsls	r3, r3, #4
 8006a54:	4413      	add	r3, r2
 8006a56:	330b      	adds	r3, #11
 8006a58:	781b      	ldrb	r3, [r3, #0]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d108      	bne.n	8006a70 <vARPAgeCache+0x5c>
                {
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8006a5e:	4a38      	ldr	r2, [pc, #224]	@ (8006b40 <vARPAgeCache+0x12c>)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	011b      	lsls	r3, r3, #4
 8006a64:	4413      	add	r3, r2
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	4618      	mov	r0, r3
 8006a6a:	f000 f8d7 	bl	8006c1c <FreeRTOS_OutputARPRequest>
 8006a6e:	e00f      	b.n	8006a90 <vARPAgeCache+0x7c>
                }
                else if( xARPCache[ x ].ucAge <= ( uint8_t ) arpMAX_ARP_AGE_BEFORE_NEW_ARP_REQUEST )
 8006a70:	4a33      	ldr	r2, [pc, #204]	@ (8006b40 <vARPAgeCache+0x12c>)
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	011b      	lsls	r3, r3, #4
 8006a76:	4413      	add	r3, r2
 8006a78:	330a      	adds	r3, #10
 8006a7a:	781b      	ldrb	r3, [r3, #0]
 8006a7c:	2b03      	cmp	r3, #3
 8006a7e:	d807      	bhi.n	8006a90 <vARPAgeCache+0x7c>
                {
                    /* This entry will get removed soon.  See if the MAC address is
                     * still valid to prevent this happening. */
                    iptraceARP_TABLE_ENTRY_WILL_EXPIRE( xARPCache[ x ].ulIPAddress );
                    FreeRTOS_OutputARPRequest( xARPCache[ x ].ulIPAddress );
 8006a80:	4a2f      	ldr	r2, [pc, #188]	@ (8006b40 <vARPAgeCache+0x12c>)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	011b      	lsls	r3, r3, #4
 8006a86:	4413      	add	r3, r2
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f000 f8c6 	bl	8006c1c <FreeRTOS_OutputARPRequest>
                else
                {
                    /* The age has just ticked down, with nothing to do. */
                }

                if( xARPCache[ x ].ucAge == 0U )
 8006a90:	4a2b      	ldr	r2, [pc, #172]	@ (8006b40 <vARPAgeCache+0x12c>)
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	4413      	add	r3, r2
 8006a98:	330a      	adds	r3, #10
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d105      	bne.n	8006aac <vARPAgeCache+0x98>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceARP_TABLE_ENTRY_EXPIRED( xARPCache[ x ].ulIPAddress );
                    xARPCache[ x ].ulIPAddress = 0U;
 8006aa0:	4a27      	ldr	r2, [pc, #156]	@ (8006b40 <vARPAgeCache+0x12c>)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	011b      	lsls	r3, r3, #4
 8006aa6:	4413      	add	r3, r2
 8006aa8:	2200      	movs	r2, #0
 8006aaa:	601a      	str	r2, [r3, #0]
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	3301      	adds	r3, #1
 8006ab0:	60fb      	str	r3, [r7, #12]
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	2b05      	cmp	r3, #5
 8006ab6:	ddb3      	ble.n	8006a20 <vARPAgeCache+0xc>
                }
            }
        }

        xTimeNow = xTaskGetTickCount();
 8006ab8:	f7fd f8de 	bl	8003c78 <xTaskGetTickCount>
 8006abc:	6078      	str	r0, [r7, #4]

        if( ( xLastGratuitousARPTime == ( TickType_t ) 0 ) || ( ( xTimeNow - xLastGratuitousARPTime ) > ( TickType_t ) arpGRATUITOUS_ARP_PERIOD ) )
 8006abe:	4b21      	ldr	r3, [pc, #132]	@ (8006b44 <vARPAgeCache+0x130>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d007      	beq.n	8006ad6 <vARPAgeCache+0xc2>
 8006ac6:	4b1f      	ldr	r3, [pc, #124]	@ (8006b44 <vARPAgeCache+0x130>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	1ad3      	subs	r3, r2, r3
 8006ace:	f644 6220 	movw	r2, #20000	@ 0x4e20
 8006ad2:	4293      	cmp	r3, r2
 8006ad4:	d92f      	bls.n	8006b36 <vARPAgeCache+0x122>
        {
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8006ad6:	4b1c      	ldr	r3, [pc, #112]	@ (8006b48 <vARPAgeCache+0x134>)
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60bb      	str	r3, [r7, #8]

            while( pxEndPoint != NULL )
 8006adc:	e025      	b.n	8006b2a <vARPAgeCache+0x116>
            {
                if( ( pxEndPoint->bits.bEndPointUp != pdFALSE_UNSIGNED ) && ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006ae4:	f003 0310 	and.w	r3, r3, #16
 8006ae8:	b2db      	uxtb	r3, r3
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d019      	beq.n	8006b22 <vARPAgeCache+0x10e>
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d015      	beq.n	8006b22 <vARPAgeCache+0x10e>
                {
                    /* Case default is never toggled because IPv6 flag can be TRUE or FALSE */
                    switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8006af6:	68bb      	ldr	r3, [r7, #8]
 8006af8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006afc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8006b00:	b2db      	uxtb	r3, r3
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d002      	beq.n	8006b0c <vARPAgeCache+0xf8>
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d007      	beq.n	8006b1a <vARPAgeCache+0x106>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default: /* LCOV_EXCL_LINE */
                            /* Shouldn't reach here */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8006b0a:	e00a      	b.n	8006b22 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputARPRequest_Multi( pxEndPoint, pxEndPoint->ipv4_settings.ulIPAddress );
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	4619      	mov	r1, r3
 8006b12:	68b8      	ldr	r0, [r7, #8]
 8006b14:	f000 f81a 	bl	8006b4c <FreeRTOS_OutputARPRequest_Multi>
                                break;
 8006b18:	e003      	b.n	8006b22 <vARPAgeCache+0x10e>
                                FreeRTOS_OutputAdvertiseIPv6( pxEndPoint );
 8006b1a:	68b8      	ldr	r0, [r7, #8]
 8006b1c:	f005 f822 	bl	800bb64 <FreeRTOS_OutputAdvertiseIPv6>
                                break;
 8006b20:	bf00      	nop
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8006b28:	60bb      	str	r3, [r7, #8]
            while( pxEndPoint != NULL )
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d1d6      	bne.n	8006ade <vARPAgeCache+0xca>
            }

            xLastGratuitousARPTime = xTimeNow;
 8006b30:	4a04      	ldr	r2, [pc, #16]	@ (8006b44 <vARPAgeCache+0x130>)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	6013      	str	r3, [r2, #0]
        }
    }
 8006b36:	bf00      	nop
 8006b38:	3710      	adds	r7, #16
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	bd80      	pop	{r7, pc}
 8006b3e:	bf00      	nop
 8006b40:	20000c60 	.word	0x20000c60
 8006b44:	20000cc0 	.word	0x20000cc0
 8006b48:	20001224 	.word	0x20001224

08006b4c <FreeRTOS_OutputARPRequest_Multi>:
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest_Multi( NetworkEndPoint_t * pxEndPoint,
                                          uint32_t ulIPAddress )
    {
 8006b4c:	b580      	push	{r7, lr}
 8006b4e:	b086      	sub	sp, #24
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
 8006b54:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8006b5c:	f003 0304 	and.w	r3, r3, #4
 8006b60:	b2db      	uxtb	r3, r3
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d156      	bne.n	8006c14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            ( pxEndPoint->ipv4_settings.ulIPAddress != 0U ) )
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
        if( ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) &&
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d052      	beq.n	8006c14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
        {
            /* This is called from the context of the IP event task, so a block time
             * must not be used. */
            pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( sizeof( ARPPacket_t ), ( TickType_t ) 0U );
 8006b6e:	2100      	movs	r1, #0
 8006b70:	202a      	movs	r0, #42	@ 0x2a
 8006b72:	f00f fdc1 	bl	80166f8 <pxGetNetworkBufferWithDescriptor>
 8006b76:	6138      	str	r0, [r7, #16]

            if( pxNetworkBuffer != NULL )
 8006b78:	693b      	ldr	r3, [r7, #16]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d04a      	beq.n	8006c14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 8006b7e:	693b      	ldr	r3, [r7, #16]
 8006b80:	683a      	ldr	r2, [r7, #0]
 8006b82:	615a      	str	r2, [r3, #20]
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8006b84:	693b      	ldr	r3, [r7, #16]
 8006b86:	687a      	ldr	r2, [r7, #4]
 8006b88:	631a      	str	r2, [r3, #48]	@ 0x30
                pxNetworkBuffer->pxInterface = pxEndPoint->pxNetworkInterface;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	f8d3 2120 	ldr.w	r2, [r3, #288]	@ 0x120
 8006b90:	693b      	ldr	r3, [r7, #16]
 8006b92:	62da      	str	r2, [r3, #44]	@ 0x2c
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8006b94:	6938      	ldr	r0, [r7, #16]
 8006b96:	f000 f855 	bl	8006c44 <vARPGenerateRequestPacket>

                #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
                {
                    if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b9e:	2b3b      	cmp	r3, #59	@ 0x3b
 8006ba0:	d812      	bhi.n	8006bc8 <FreeRTOS_OutputARPRequest_Multi+0x7c>
                    {
                        BaseType_t xIndex;

                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ba6:	617b      	str	r3, [r7, #20]
 8006ba8:	e008      	b.n	8006bbc <FreeRTOS_OutputARPRequest_Multi+0x70>
                        {
                            pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006bae:	697b      	ldr	r3, [r7, #20]
 8006bb0:	4413      	add	r3, r2
 8006bb2:	2200      	movs	r2, #0
 8006bb4:	701a      	strb	r2, [r3, #0]
                        for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8006bb6:	697b      	ldr	r3, [r7, #20]
 8006bb8:	3301      	adds	r3, #1
 8006bba:	617b      	str	r3, [r7, #20]
 8006bbc:	697b      	ldr	r3, [r7, #20]
 8006bbe:	2b3b      	cmp	r3, #59	@ 0x3b
 8006bc0:	ddf3      	ble.n	8006baa <FreeRTOS_OutputARPRequest_Multi+0x5e>
                        }

                        pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	223c      	movs	r2, #60	@ 0x3c
 8006bc6:	629a      	str	r2, [r3, #40]	@ 0x28
                    }
                }
                #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

                if( xIsCallingFromIPTask() != pdFALSE )
 8006bc8:	f002 ff7c 	bl	8009ac4 <xIsCallingFromIPTask>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d00f      	beq.n	8006bf2 <FreeRTOS_OutputARPRequest_Multi+0xa6>
                {
                    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

                    /* Only the IP-task is allowed to call this function directly. */
                    if( pxEndPoint->pxNetworkInterface != NULL )
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d01b      	beq.n	8006c14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    {
                        ( void ) pxEndPoint->pxNetworkInterface->pfOutput( pxEndPoint->pxNetworkInterface, pxNetworkBuffer, pdTRUE );
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8006be2:	68db      	ldr	r3, [r3, #12]
 8006be4:	687a      	ldr	r2, [r7, #4]
 8006be6:	f8d2 0120 	ldr.w	r0, [r2, #288]	@ 0x120
 8006bea:	2201      	movs	r2, #1
 8006bec:	6939      	ldr	r1, [r7, #16]
 8006bee:	4798      	blx	r3
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
                    }
                }
            }
        }
    }
 8006bf0:	e010      	b.n	8006c14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                    xSendEvent.eEventType = eNetworkTxEvent;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	723b      	strb	r3, [r7, #8]
                    xSendEvent.pvData = pxNetworkBuffer;
 8006bf6:	693b      	ldr	r3, [r7, #16]
 8006bf8:	60fb      	str	r3, [r7, #12]
                    if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 8006bfa:	f107 0308 	add.w	r3, r7, #8
 8006bfe:	f04f 31ff 	mov.w	r1, #4294967295
 8006c02:	4618      	mov	r0, r3
 8006c04:	f002 f81c 	bl	8008c40 <xSendEventStructToIPTask>
 8006c08:	4603      	mov	r3, r0
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d102      	bne.n	8006c14 <FreeRTOS_OutputARPRequest_Multi+0xc8>
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8006c0e:	6938      	ldr	r0, [r7, #16]
 8006c10:	f00f fdda 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
    }
 8006c14:	bf00      	nop
 8006c16:	3718      	adds	r7, #24
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	bd80      	pop	{r7, pc}

08006c1c <FreeRTOS_OutputARPRequest>:
 *
 * @param[in] ulIPAddress A 32-bit representation of the IP-address whose
 *                         physical (MAC) address is required.
 */
    void FreeRTOS_OutputARPRequest( uint32_t ulIPAddress )
    {
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]
        /* Its assumed that IPv4 endpoints belonging to different physical interface
         * in the system will have a different subnet, but endpoints on same interface
         * may have it. */
        NetworkEndPoint_t * pxEndPoint = FreeRTOS_FindEndPointOnNetMask( ulIPAddress, 12 );
 8006c24:	210c      	movs	r1, #12
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f006 f82e 	bl	800cc88 <FreeRTOS_FindEndPointOnNetMask>
 8006c2c:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	2b00      	cmp	r3, #0
 8006c32:	d003      	beq.n	8006c3c <FreeRTOS_OutputARPRequest+0x20>
        {
            FreeRTOS_OutputARPRequest_Multi( pxEndPoint, ulIPAddress );
 8006c34:	6879      	ldr	r1, [r7, #4]
 8006c36:	68f8      	ldr	r0, [r7, #12]
 8006c38:	f7ff ff88 	bl	8006b4c <FreeRTOS_OutputARPRequest_Multi>
        }
    }
 8006c3c:	bf00      	nop
 8006c3e:	3710      	adds	r7, #16
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}

08006c44 <vARPGenerateRequestPacket>:
 *
 * @param[in,out] pxNetworkBuffer Pointer to the buffer which has to be filled with
 *                             the ARP request packet details.
 */
    void vARPGenerateRequestPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b086      	sub	sp, #24
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
        void * pvCopyDest;

        /* Buffer allocation ensures that buffers always have space
         * for an ARP packet. See buffer allocation implementations 1
         * and 2 under portable/BufferManagement. */
        configASSERT( pxNetworkBuffer != NULL );
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d104      	bne.n	8006c5c <vARPGenerateRequestPacket+0x18>
 8006c52:	f240 51b1 	movw	r1, #1457	@ 0x5b1
 8006c56:	4828      	ldr	r0, [pc, #160]	@ (8006cf8 <vARPGenerateRequestPacket+0xb4>)
 8006c58:	f7fa fc0a 	bl	8001470 <vAssertCalled>
        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) );
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c60:	2b29      	cmp	r3, #41	@ 0x29
 8006c62:	d804      	bhi.n	8006c6e <vARPGenerateRequestPacket+0x2a>
 8006c64:	f240 51b2 	movw	r1, #1458	@ 0x5b2
 8006c68:	4823      	ldr	r0, [pc, #140]	@ (8006cf8 <vARPGenerateRequestPacket+0xb4>)
 8006c6a:	f7fa fc01 	bl	8001470 <vAssertCalled>
        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d104      	bne.n	8006c80 <vARPGenerateRequestPacket+0x3c>
 8006c76:	f240 51b3 	movw	r1, #1459	@ 0x5b3
 8006c7a:	481f      	ldr	r0, [pc, #124]	@ (8006cf8 <vARPGenerateRequestPacket+0xb4>)
 8006c7c:	f7fa fbf8 	bl	8001470 <vAssertCalled>

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxARPPacket = ( ( ARPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c84:	617b      	str	r3, [r7, #20]
        /*
         * Use helper variables for memcpy() to remain
         * compliant with MISRA Rule 21.15.  These should be
         * optimized away.
         */
        pvCopySource = xDefaultPartARPPacketHeader;
 8006c86:	4b1d      	ldr	r3, [pc, #116]	@ (8006cfc <vARPGenerateRequestPacket+0xb8>)
 8006c88:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket;
 8006c8a:	697b      	ldr	r3, [r7, #20]
 8006c8c:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( xDefaultPartARPPacketHeader ) );
 8006c8e:	2226      	movs	r2, #38	@ 0x26
 8006c90:	6939      	ldr	r1, [r7, #16]
 8006c92:	68f8      	ldr	r0, [r7, #12]
 8006c94:	f01a fa10 	bl	80210b8 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c9c:	33e8      	adds	r3, #232	@ 0xe8
 8006c9e:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xEthernetHeader.xSourceAddress.ucBytes;
 8006ca0:	697b      	ldr	r3, [r7, #20]
 8006ca2:	3306      	adds	r3, #6
 8006ca4:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8006ca6:	2206      	movs	r2, #6
 8006ca8:	6939      	ldr	r1, [r7, #16]
 8006caa:	68f8      	ldr	r0, [r7, #12]
 8006cac:	f01a fa04 	bl	80210b8 <memcpy>

        pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006cb4:	33e8      	adds	r3, #232	@ 0xe8
 8006cb6:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.xSenderHardwareAddress.ucBytes;
 8006cb8:	697b      	ldr	r3, [r7, #20]
 8006cba:	3316      	adds	r3, #22
 8006cbc:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, ipMAC_ADDRESS_LENGTH_BYTES );
 8006cbe:	2206      	movs	r2, #6
 8006cc0:	6939      	ldr	r1, [r7, #16]
 8006cc2:	68f8      	ldr	r0, [r7, #12]
 8006cc4:	f01a f9f8 	bl	80210b8 <memcpy>

        pvCopySource = &( pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress );
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ccc:	613b      	str	r3, [r7, #16]
        pvCopyDest = pxARPPacket->xARPHeader.ucSenderProtocolAddress;
 8006cce:	697b      	ldr	r3, [r7, #20]
 8006cd0:	331c      	adds	r3, #28
 8006cd2:	60fb      	str	r3, [r7, #12]
        ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxARPPacket->xARPHeader.ucSenderProtocolAddress ) );
 8006cd4:	693b      	ldr	r3, [r7, #16]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	461a      	mov	r2, r3
 8006cda:	68fb      	ldr	r3, [r7, #12]
 8006cdc:	601a      	str	r2, [r3, #0]
        pxARPPacket->xARPHeader.ulTargetProtocolAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	695a      	ldr	r2, [r3, #20]
 8006ce2:	697b      	ldr	r3, [r7, #20]
 8006ce4:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26

        pxNetworkBuffer->xDataLength = sizeof( ARPPacket_t );
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	222a      	movs	r2, #42	@ 0x2a
 8006cec:	629a      	str	r2, [r3, #40]	@ 0x28

        iptraceCREATING_ARP_REQUEST( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );
    }
 8006cee:	bf00      	nop
 8006cf0:	3718      	adds	r7, #24
 8006cf2:	46bd      	mov	sp, r7
 8006cf4:	bd80      	pop	{r7, pc}
 8006cf6:	bf00      	nop
 8006cf8:	0802307c 	.word	0x0802307c
 8006cfc:	080262e0 	.word	0x080262e0

08006d00 <FreeRTOS_ClearARP>:
 * @brief A call to this function will clear the ARP cache.
 * @param[in] pxEndPoint only clean entries with this end-point, or when NULL,
 *                        clear the entire ARP cache.
 */
void FreeRTOS_ClearARP( const struct xNetworkEndPoint * pxEndPoint )
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
    if( pxEndPoint != NULL )
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d01b      	beq.n	8006d46 <FreeRTOS_ClearARP+0x46>
    {
        BaseType_t x;

        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006d0e:	2300      	movs	r3, #0
 8006d10:	60fb      	str	r3, [r7, #12]
 8006d12:	e014      	b.n	8006d3e <FreeRTOS_ClearARP+0x3e>
        {
            if( xARPCache[ x ].pxEndPoint == pxEndPoint )
 8006d14:	4a10      	ldr	r2, [pc, #64]	@ (8006d58 <FreeRTOS_ClearARP+0x58>)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	011b      	lsls	r3, r3, #4
 8006d1a:	4413      	add	r3, r2
 8006d1c:	330c      	adds	r3, #12
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	687a      	ldr	r2, [r7, #4]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d108      	bne.n	8006d38 <FreeRTOS_ClearARP+0x38>
            {
                ( void ) memset( &( xARPCache[ x ] ), 0, sizeof( ARPCacheRow_t ) );
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	011b      	lsls	r3, r3, #4
 8006d2a:	4a0b      	ldr	r2, [pc, #44]	@ (8006d58 <FreeRTOS_ClearARP+0x58>)
 8006d2c:	4413      	add	r3, r2
 8006d2e:	2210      	movs	r2, #16
 8006d30:	2100      	movs	r1, #0
 8006d32:	4618      	mov	r0, r3
 8006d34:	f01a facd 	bl	80212d2 <memset>
        for( x = 0; x < ipconfigARP_CACHE_ENTRIES; x++ )
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	3301      	adds	r3, #1
 8006d3c:	60fb      	str	r3, [r7, #12]
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2b05      	cmp	r3, #5
 8006d42:	dde7      	ble.n	8006d14 <FreeRTOS_ClearARP+0x14>
    }
    else
    {
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
    }
}
 8006d44:	e004      	b.n	8006d50 <FreeRTOS_ClearARP+0x50>
        ( void ) memset( xARPCache, 0, sizeof( xARPCache ) );
 8006d46:	2260      	movs	r2, #96	@ 0x60
 8006d48:	2100      	movs	r1, #0
 8006d4a:	4803      	ldr	r0, [pc, #12]	@ (8006d58 <FreeRTOS_ClearARP+0x58>)
 8006d4c:	f01a fac1 	bl	80212d2 <memset>
}
 8006d50:	bf00      	nop
 8006d52:	3710      	adds	r7, #16
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	20000c60 	.word	0x20000c60

08006d5c <vDNSInitialise>:
    #if ( ipconfigDNS_USE_CALLBACKS == 1 )

/** @brief Initialise the list of call-back structures.
 */
        void vDNSInitialise( void )
        {
 8006d5c:	b580      	push	{r7, lr}
 8006d5e:	af00      	add	r7, sp, #0
            vDNSCallbackInitialise();
 8006d60:	f000 fc8a 	bl	8007678 <vDNSCallbackInitialise>
        }
 8006d64:	bf00      	nop
 8006d66:	bd80      	pop	{r7, pc}

08006d68 <pxNew_AddrInfo>:
 * @return A pointer to the newly allocated struct, or NULL in case malloc failed..
 */
    struct freertos_addrinfo * pxNew_AddrInfo( const char * pcName,
                                               BaseType_t xFamily,
                                               const uint8_t * pucAddress )
    {
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	60f8      	str	r0, [r7, #12]
 8006d70:	60b9      	str	r1, [r7, #8]
 8006d72:	607a      	str	r2, [r7, #4]
        struct freertos_addrinfo * pxAddrInfo = NULL;
 8006d74:	2300      	movs	r3, #0
 8006d76:	61fb      	str	r3, [r7, #28]
        void * pvBuffer;

        /* 'xFamily' might not be used when IPv6 is disabled. */
        ( void ) xFamily;
        pvBuffer = pvPortMalloc( sizeof( *pxAddrInfo ) );
 8006d78:	2048      	movs	r0, #72	@ 0x48
 8006d7a:	f7fe fdeb 	bl	8005954 <pvPortMalloc>
 8006d7e:	61b8      	str	r0, [r7, #24]

        if( pvBuffer != NULL )
 8006d80:	69bb      	ldr	r3, [r7, #24]
 8006d82:	2b00      	cmp	r3, #0
 8006d84:	d057      	beq.n	8006e36 <pxNew_AddrInfo+0xce>
        {
            pxAddrInfo = ( struct freertos_addrinfo * ) pvBuffer;
 8006d86:	69bb      	ldr	r3, [r7, #24]
 8006d88:	61fb      	str	r3, [r7, #28]

            ( void ) memset( pxAddrInfo, 0, sizeof( *pxAddrInfo ) );
 8006d8a:	2248      	movs	r2, #72	@ 0x48
 8006d8c:	2100      	movs	r1, #0
 8006d8e:	69f8      	ldr	r0, [r7, #28]
 8006d90:	f01a fa9f 	bl	80212d2 <memset>
            #if ( ipconfigUSE_DNS_CACHE != 0 )
                pxAddrInfo->ai_canonname = pxAddrInfo->xPrivateStorage.ucName;
 8006d94:	69fb      	ldr	r3, [r7, #28]
 8006d96:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8006d9a:	69fb      	ldr	r3, [r7, #28]
 8006d9c:	619a      	str	r2, [r3, #24]
                ( void ) strncpy( pxAddrInfo->xPrivateStorage.ucName, pcName, sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U );
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	3338      	adds	r3, #56	@ 0x38
 8006da2:	220f      	movs	r2, #15
 8006da4:	68f9      	ldr	r1, [r7, #12]
 8006da6:	4618      	mov	r0, r3
 8006da8:	f01b f960 	bl	802206c <strncpy>
                pxAddrInfo->xPrivateStorage.ucName[ sizeof( pxAddrInfo->xPrivateStorage.ucName ) - 1U ] = '\0';
 8006dac:	69fb      	ldr	r3, [r7, #28]
 8006dae:	2200      	movs	r2, #0
 8006db0:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47
            #endif /* (ipconfigUSE_DNS_CACHE != 0 ) */

            pxAddrInfo->ai_addr = ( ( struct freertos_sockaddr * ) &( pxAddrInfo->xPrivateStorage.sockaddr ) );
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	f103 0220 	add.w	r2, r3, #32
 8006dba:	69fb      	ldr	r3, [r7, #28]
 8006dbc:	615a      	str	r2, [r3, #20]

            switch( xFamily )
 8006dbe:	68bb      	ldr	r3, [r7, #8]
 8006dc0:	2b02      	cmp	r3, #2
 8006dc2:	d003      	beq.n	8006dcc <pxNew_AddrInfo+0x64>
 8006dc4:	68bb      	ldr	r3, [r7, #8]
 8006dc6:	2b0a      	cmp	r3, #10
 8006dc8:	d01e      	beq.n	8006e08 <pxNew_AddrInfo+0xa0>
 8006dca:	e02b      	b.n	8006e24 <pxNew_AddrInfo+0xbc>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                       {
                           /* ulChar2u32 reads from big-endian to host-endian. */
                           uint32_t ulIPAddress = ulChar2u32( pucAddress );
 8006dcc:	6878      	ldr	r0, [r7, #4]
 8006dce:	f003 f87d 	bl	8009ecc <ulChar2u32>
 8006dd2:	6178      	str	r0, [r7, #20]
                           /* Translate to network-endian. */
                           pxAddrInfo->ai_addr->sin_address.ulIP_IPv4 = FreeRTOS_htonl( ulIPAddress );
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	061a      	lsls	r2, r3, #24
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	021b      	lsls	r3, r3, #8
 8006ddc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8006de0:	431a      	orrs	r2, r3
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	0a1b      	lsrs	r3, r3, #8
 8006de6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8006dea:	ea42 0103 	orr.w	r1, r2, r3
 8006dee:	697b      	ldr	r3, [r7, #20]
 8006df0:	0e1a      	lsrs	r2, r3, #24
 8006df2:	69fb      	ldr	r3, [r7, #28]
 8006df4:	695b      	ldr	r3, [r3, #20]
 8006df6:	430a      	orrs	r2, r1
 8006df8:	609a      	str	r2, [r3, #8]
                           pxAddrInfo->ai_family = FREERTOS_AF_INET4;
 8006dfa:	69fb      	ldr	r3, [r7, #28]
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	605a      	str	r2, [r3, #4]
                           pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv4_ADDRESS;
 8006e00:	69fb      	ldr	r3, [r7, #28]
 8006e02:	2204      	movs	r2, #4
 8006e04:	611a      	str	r2, [r3, #16]
                       }
                       break;
 8006e06:	e016      	b.n	8006e36 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxAddrInfo->ai_family = FREERTOS_AF_INET6;
 8006e08:	69fb      	ldr	r3, [r7, #28]
 8006e0a:	220a      	movs	r2, #10
 8006e0c:	605a      	str	r2, [r3, #4]
                        pxAddrInfo->ai_addrlen = ipSIZE_OF_IPv6_ADDRESS;
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	2210      	movs	r2, #16
 8006e12:	611a      	str	r2, [r3, #16]
                        ( void ) memcpy( pxAddrInfo->xPrivateStorage.sockaddr.sin_address.xIP_IPv6.ucBytes, pucAddress, ipSIZE_OF_IPv6_ADDRESS );
 8006e14:	69fb      	ldr	r3, [r7, #28]
 8006e16:	3328      	adds	r3, #40	@ 0x28
 8006e18:	2210      	movs	r2, #16
 8006e1a:	6879      	ldr	r1, [r7, #4]
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f01a f94b 	bl	80210b8 <memcpy>
                        break;
 8006e22:	e008      	b.n	8006e36 <pxNew_AddrInfo+0xce>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "pxNew_AddrInfo: Undefined xFamily Type \n" ) );
 8006e24:	4806      	ldr	r0, [pc, #24]	@ (8006e40 <pxNew_AddrInfo+0xd8>)
 8006e26:	f019 ff2b 	bl	8020c80 <lUDPLoggingPrintf>

                    vPortFree( pvBuffer );
 8006e2a:	69b8      	ldr	r0, [r7, #24]
 8006e2c:	f7fe fe66 	bl	8005afc <vPortFree>
                    pxAddrInfo = NULL;
 8006e30:	2300      	movs	r3, #0
 8006e32:	61fb      	str	r3, [r7, #28]

                    break;
 8006e34:	bf00      	nop
            }
        }

        return pxAddrInfo;
 8006e36:	69fb      	ldr	r3, [r7, #28]
    }
 8006e38:	4618      	mov	r0, r3
 8006e3a:	3720      	adds	r7, #32
 8006e3c:	46bd      	mov	sp, r7
 8006e3e:	bd80      	pop	{r7, pc}
 8006e40:	08023120 	.word	0x08023120

08006e44 <FreeRTOS_freeaddrinfo>:
/**
 * @brief Free a chain of structs of type 'freertos_addrinfo'.
 * @param[in] pxInfo The first find result.
 */
    void FreeRTOS_freeaddrinfo( struct freertos_addrinfo * pxInfo )
    {
 8006e44:	b580      	push	{r7, lr}
 8006e46:	b084      	sub	sp, #16
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
        struct freertos_addrinfo * pxNext;
        struct freertos_addrinfo * pxIterator = pxInfo;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	60fb      	str	r3, [r7, #12]

        if( pxInfo != NULL )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d00b      	beq.n	8006e6e <FreeRTOS_freeaddrinfo+0x2a>
        {
            while( pxIterator != NULL )
 8006e56:	e007      	b.n	8006e68 <FreeRTOS_freeaddrinfo+0x24>
            {
                pxNext = pxIterator->ai_next;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	69db      	ldr	r3, [r3, #28]
 8006e5c:	60bb      	str	r3, [r7, #8]
                vPortFree( pxIterator );
 8006e5e:	68f8      	ldr	r0, [r7, #12]
 8006e60:	f7fe fe4c 	bl	8005afc <vPortFree>
                pxIterator = pxNext;
 8006e64:	68bb      	ldr	r3, [r7, #8]
 8006e66:	60fb      	str	r3, [r7, #12]
            while( pxIterator != NULL )
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1f4      	bne.n	8006e58 <FreeRTOS_freeaddrinfo+0x14>
            }
        }
    }
 8006e6e:	bf00      	nop
 8006e70:	3710      	adds	r7, #16
 8006e72:	46bd      	mov	sp, r7
 8006e74:	bd80      	pop	{r7, pc}

08006e76 <ulDNSHandlePacket>:
 * @param[in] pxNetworkBuffer The network buffer to be parsed.
 * @return Always pdFAIL to indicate that the packet was not consumed and must
 *         be released by the caller.
 */
    uint32_t ulDNSHandlePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8006e76:	b580      	push	{r7, lr}
 8006e78:	b088      	sub	sp, #32
 8006e7a:	af02      	add	r7, sp, #8
 8006e7c:	6078      	str	r0, [r7, #4]
        uint8_t * pucPayLoadBuffer;
        size_t uxPayloadSize;
        size_t uxUDPPacketSize = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8006e7e:	6878      	ldr	r0, [r7, #4]
 8006e80:	f002 fa92 	bl	80093a8 <uxIPHeaderSizePacket>
 8006e84:	4603      	mov	r3, r0
 8006e86:	3316      	adds	r3, #22
 8006e88:	617b      	str	r3, [r7, #20]

        /* Only proceed if the payload length indicated in the header
         * appears to be valid. */
        if( pxNetworkBuffer->xDataLength >= uxUDPPacketSize )
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006e8e:	697a      	ldr	r2, [r7, #20]
 8006e90:	429a      	cmp	r2, r3
 8006e92:	d829      	bhi.n	8006ee8 <ulDNSHandlePacket+0x72>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxUDPPacketSize;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	1ad3      	subs	r3, r2, r3
 8006e9c:	613b      	str	r3, [r7, #16]

            if( uxPayloadSize >= sizeof( DNSMessage_t ) )
 8006e9e:	693b      	ldr	r3, [r7, #16]
 8006ea0:	2b0b      	cmp	r3, #11
 8006ea2:	d921      	bls.n	8006ee8 <ulDNSHandlePacket+0x72>
            {
                struct freertos_addrinfo * pxAddressInfo = NULL;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	60bb      	str	r3, [r7, #8]
                pucPayLoadBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPPacketSize ] );
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	4413      	add	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
                /* The parameter pdFALSE indicates that the reply was not expected. */
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
                                            uxPayloadSize,
                                            &( pxAddressInfo ),
                                            pdFALSE,
                                            FreeRTOS_ntohs( pxNetworkBuffer->usPort ) );
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006eb6:	021b      	lsls	r3, r3, #8
 8006eb8:	b21a      	sxth	r2, r3
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8006ebe:	0a1b      	lsrs	r3, r3, #8
 8006ec0:	b29b      	uxth	r3, r3
 8006ec2:	b21b      	sxth	r3, r3
 8006ec4:	4313      	orrs	r3, r2
 8006ec6:	b21b      	sxth	r3, r3
                ( void ) DNS_ParseDNSReply( pucPayLoadBuffer,
 8006ec8:	b29b      	uxth	r3, r3
 8006eca:	f107 0208 	add.w	r2, r7, #8
 8006ece:	9300      	str	r3, [sp, #0]
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	6939      	ldr	r1, [r7, #16]
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 fcb5 	bl	8007844 <DNS_ParseDNSReply>

                if( pxAddressInfo != NULL )
 8006eda:	68bb      	ldr	r3, [r7, #8]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d003      	beq.n	8006ee8 <ulDNSHandlePacket+0x72>
                {
                    FreeRTOS_freeaddrinfo( pxAddressInfo );
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	f7ff ffae 	bl	8006e44 <FreeRTOS_freeaddrinfo>
                }
            }
        }

        /* The packet was not consumed. */
        return pdFAIL;
 8006ee8:	2300      	movs	r3, #0
    }
 8006eea:	4618      	mov	r0, r3
 8006eec:	3718      	adds	r7, #24
 8006eee:	46bd      	mov	sp, r7
 8006ef0:	bd80      	pop	{r7, pc}

08006ef2 <FreeRTOS_dns_update>:
    BaseType_t FreeRTOS_dns_update( const char * pcName,
                                    IPv46_Address_t * pxIP,
                                    uint32_t ulTTL,
                                    BaseType_t xLookUp,
                                    struct freertos_addrinfo ** ppxAddressInfo )
    {
 8006ef2:	b580      	push	{r7, lr}
 8006ef4:	b086      	sub	sp, #24
 8006ef6:	af02      	add	r7, sp, #8
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
 8006efe:	603b      	str	r3, [r7, #0]
        /* _HT_ we can as well remove the parameter 'xLookUp'. */
        ( void ) xLookUp;
        ( void ) FreeRTOS_ProcessDNSCache( pcName,
 8006f00:	69bb      	ldr	r3, [r7, #24]
 8006f02:	9300      	str	r3, [sp, #0]
 8006f04:	2300      	movs	r3, #0
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	68b9      	ldr	r1, [r7, #8]
 8006f0a:	68f8      	ldr	r0, [r7, #12]
 8006f0c:	f000 f818 	bl	8006f40 <FreeRTOS_ProcessDNSCache>
                                           pxIP,
                                           ulTTL,
                                           pdFALSE,
                                           ppxAddressInfo );
        return pdTRUE;
 8006f10:	2301      	movs	r3, #1
    }
 8006f12:	4618      	mov	r0, r3
 8006f14:	3710      	adds	r7, #16
 8006f16:	46bd      	mov	sp, r7
 8006f18:	bd80      	pop	{r7, pc}
	...

08006f1c <FreeRTOS_dnsclear>:
/**
 * @brief perform a dns clear in the local cache
 * @post the global structure \a xDNSCache is modified
 */
    void FreeRTOS_dnsclear( void )
    {
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	af00      	add	r7, sp, #0
        ( void ) memset( xDNSCache, 0x0, sizeof( xDNSCache ) );
 8006f20:	f44f 72d8 	mov.w	r2, #432	@ 0x1b0
 8006f24:	2100      	movs	r1, #0
 8006f26:	4804      	ldr	r0, [pc, #16]	@ (8006f38 <FreeRTOS_dnsclear+0x1c>)
 8006f28:	f01a f9d3 	bl	80212d2 <memset>
        uxFreeEntry = 0U;
 8006f2c:	4b03      	ldr	r3, [pc, #12]	@ (8006f3c <FreeRTOS_dnsclear+0x20>)
 8006f2e:	2200      	movs	r2, #0
 8006f30:	601a      	str	r2, [r3, #0]
    }
 8006f32:	bf00      	nop
 8006f34:	bd80      	pop	{r7, pc}
 8006f36:	bf00      	nop
 8006f38:	20000cd0 	.word	0x20000cd0
 8006f3c:	20000e80 	.word	0x20000e80

08006f40 <FreeRTOS_ProcessDNSCache>:
    BaseType_t FreeRTOS_ProcessDNSCache( const char * pcName,
                                         IPv46_Address_t * pxIP,
                                         uint32_t ulTTL,
                                         BaseType_t xLookUp,
                                         struct freertos_addrinfo ** ppxAddressInfo )
    {
 8006f40:	b590      	push	{r4, r7, lr}
 8006f42:	b09b      	sub	sp, #108	@ 0x6c
 8006f44:	af02      	add	r7, sp, #8
 8006f46:	60f8      	str	r0, [r7, #12]
 8006f48:	60b9      	str	r1, [r7, #8]
 8006f4a:	607a      	str	r2, [r7, #4]
 8006f4c:	603b      	str	r3, [r7, #0]
        UBaseType_t uxIndex;
        BaseType_t xResult;
        /* Get the current time in clock-ticks. */
        TickType_t xCurrentTickCount = xTaskGetTickCount();
 8006f4e:	f7fc fe93 	bl	8003c78 <xTaskGetTickCount>
 8006f52:	65b8      	str	r0, [r7, #88]	@ 0x58
        /* In milliseconds. */
        uint32_t ulCurrentTimeSeconds;

        configASSERT( ( pcName != NULL ) );
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d103      	bne.n	8006f62 <FreeRTOS_ProcessDNSCache+0x22>
 8006f5a:	21d8      	movs	r1, #216	@ 0xd8
 8006f5c:	4841      	ldr	r0, [pc, #260]	@ (8007064 <FreeRTOS_ProcessDNSCache+0x124>)
 8006f5e:	f7fa fa87 	bl	8001470 <vAssertCalled>

        if( xLookUp != pdFALSE )
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <FreeRTOS_ProcessDNSCache+0x2e>
        {
            pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	601a      	str	r2, [r3, #0]
        }

        ulCurrentTimeSeconds = ( uint32_t ) ( ( xCurrentTickCount / portTICK_PERIOD_MS ) / 1000U );
 8006f6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8006f70:	4a3d      	ldr	r2, [pc, #244]	@ (8007068 <FreeRTOS_ProcessDNSCache+0x128>)
 8006f72:	fba2 2303 	umull	r2, r3, r2, r3
 8006f76:	099b      	lsrs	r3, r3, #6
 8006f78:	657b      	str	r3, [r7, #84]	@ 0x54
        xResult = prvFindEntryIndex( pcName, pxIP, &uxIndex );
 8006f7a:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006f7e:	461a      	mov	r2, r3
 8006f80:	68b9      	ldr	r1, [r7, #8]
 8006f82:	68f8      	ldr	r0, [r7, #12]
 8006f84:	f000 f87a 	bl	800707c <prvFindEntryIndex>
 8006f88:	6538      	str	r0, [r7, #80]	@ 0x50

        if( xResult == pdTRUE )
 8006f8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006f8c:	2b01      	cmp	r3, #1
 8006f8e:	d110      	bne.n	8006fb2 <FreeRTOS_ProcessDNSCache+0x72>
        { /* Element found */
            /* Is this function called for a lookup or to add/update an IP address? */
            if( xLookUp == pdTRUE )
 8006f90:	683b      	ldr	r3, [r7, #0]
 8006f92:	2b01      	cmp	r3, #1
 8006f94:	d106      	bne.n	8006fa4 <FreeRTOS_ProcessDNSCache+0x64>
            {
                /* This statement can only be reached when xResult is true; which
                 * implies that the entry is present and a 'get' operation will result
                 * in success. Therefore, it is safe to ignore the return value of the
                 * below function. */
                ( void ) prvGetCacheIPEntry( uxIndex,
 8006f96:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006f98:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006f9a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8006f9c:	68b9      	ldr	r1, [r7, #8]
 8006f9e:	f000 f8b1 	bl	8007104 <prvGetCacheIPEntry>
 8006fa2:	e013      	b.n	8006fcc <FreeRTOS_ProcessDNSCache+0x8c>
                                             ulCurrentTimeSeconds,
                                             ppxAddressInfo );
            }
            else
            {
                prvUpdateCacheEntry( uxIndex,
 8006fa4:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 8006fa6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fa8:	68ba      	ldr	r2, [r7, #8]
 8006faa:	6879      	ldr	r1, [r7, #4]
 8006fac:	f000 f94a 	bl	8007244 <prvUpdateCacheEntry>
 8006fb0:	e00c      	b.n	8006fcc <FreeRTOS_ProcessDNSCache+0x8c>
                                     ulCurrentTimeSeconds );
            }
        }
        else /* Element not Found xResult = pdFALSE */
        {
            if( xLookUp == pdTRUE )
 8006fb2:	683b      	ldr	r3, [r7, #0]
 8006fb4:	2b01      	cmp	r3, #1
 8006fb6:	d103      	bne.n	8006fc0 <FreeRTOS_ProcessDNSCache+0x80>
            {
                pxIP->xIPAddress.ulIP_IPv4 = 0U;
 8006fb8:	68bb      	ldr	r3, [r7, #8]
 8006fba:	2200      	movs	r2, #0
 8006fbc:	601a      	str	r2, [r3, #0]
 8006fbe:	e005      	b.n	8006fcc <FreeRTOS_ProcessDNSCache+0x8c>
            }
            else
            {
                prvInsertCacheEntry( pcName,
 8006fc0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006fc2:	68ba      	ldr	r2, [r7, #8]
 8006fc4:	6879      	ldr	r1, [r7, #4]
 8006fc6:	68f8      	ldr	r0, [r7, #12]
 8006fc8:	f000 f994 	bl	80072f4 <prvInsertCacheEntry>
                                     ulCurrentTimeSeconds );
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( ( xLookUp == pdFALSE ) || ( pxIP->xIPAddress.ulIP_IPv4 != 0U ) )
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d003      	beq.n	8006fda <FreeRTOS_ProcessDNSCache+0x9a>
 8006fd2:	68bb      	ldr	r3, [r7, #8]
 8006fd4:	681b      	ldr	r3, [r3, #0]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d03f      	beq.n	800705a <FreeRTOS_ProcessDNSCache+0x11a>
            {
                char pcAddress[ 40 ];
                IP_Address_t xAddress;
                BaseType_t xFamily = FREERTOS_AF_INET;
 8006fda:	2302      	movs	r3, #2
 8006fdc:	65fb      	str	r3, [r7, #92]	@ 0x5c

                switch( pxIP->xIs_IPv6 )
 8006fde:	68bb      	ldr	r3, [r7, #8]
 8006fe0:	691b      	ldr	r3, [r3, #16]
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d00c      	beq.n	8007000 <FreeRTOS_ProcessDNSCache+0xc0>
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d10e      	bne.n	8007008 <FreeRTOS_ProcessDNSCache+0xc8>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case pdTRUE:
                            ( void ) memcpy( xAddress.xIP_IPv6.ucBytes, pxIP->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	f107 043c 	add.w	r4, r7, #60	@ 0x3c
 8006ff0:	6818      	ldr	r0, [r3, #0]
 8006ff2:	6859      	ldr	r1, [r3, #4]
 8006ff4:	689a      	ldr	r2, [r3, #8]
 8006ff6:	68db      	ldr	r3, [r3, #12]
 8006ff8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                            xFamily = FREERTOS_AF_INET6;
 8006ffa:	230a      	movs	r3, #10
 8006ffc:	65fb      	str	r3, [r7, #92]	@ 0x5c
                            break;
 8006ffe:	e007      	b.n	8007010 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case pdFALSE:
                            xAddress.ulIP_IPv4 = pxIP->xIPAddress.ulIP_IPv4;
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	63fb      	str	r3, [r7, #60]	@ 0x3c
                            break;
 8007006:	e003      	b.n	8007010 <FreeRTOS_ProcessDNSCache+0xd0>
                    #endif /* if ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: Undefined IP Type \n" ) );
 8007008:	4818      	ldr	r0, [pc, #96]	@ (800706c <FreeRTOS_ProcessDNSCache+0x12c>)
 800700a:	f019 fe39 	bl	8020c80 <lUDPLoggingPrintf>
                        break;
 800700e:	bf00      	nop
                }

                ( void ) FreeRTOS_inet_ntop( xFamily,
 8007010:	f107 0214 	add.w	r2, r7, #20
 8007014:	f107 013c 	add.w	r1, r7, #60	@ 0x3c
 8007018:	2328      	movs	r3, #40	@ 0x28
 800701a:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 800701c:	f007 fc62 	bl	800e8e4 <FreeRTOS_inet_ntop>
                                             ( const void * ) xAddress.xIP_IPv6.ucBytes,
                                             pcAddress,
                                             ( socklen_t ) sizeof( pcAddress ) );
                FreeRTOS_debug_printf( ( "FreeRTOS_ProcessDNSCache: %s: '%s' @ %s (TTL %u)\n",
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d001      	beq.n	800702a <FreeRTOS_ProcessDNSCache+0xea>
 8007026:	4912      	ldr	r1, [pc, #72]	@ (8007070 <FreeRTOS_ProcessDNSCache+0x130>)
 8007028:	e000      	b.n	800702c <FreeRTOS_ProcessDNSCache+0xec>
 800702a:	4912      	ldr	r1, [pc, #72]	@ (8007074 <FreeRTOS_ProcessDNSCache+0x134>)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	061a      	lsls	r2, r3, #24
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	021b      	lsls	r3, r3, #8
 8007034:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007038:	431a      	orrs	r2, r3
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	0a1b      	lsrs	r3, r3, #8
 800703e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007042:	431a      	orrs	r2, r3
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	0e1b      	lsrs	r3, r3, #24
 8007048:	4313      	orrs	r3, r2
 800704a:	f107 0214 	add.w	r2, r7, #20
 800704e:	9300      	str	r3, [sp, #0]
 8007050:	4613      	mov	r3, r2
 8007052:	68fa      	ldr	r2, [r7, #12]
 8007054:	4808      	ldr	r0, [pc, #32]	@ (8007078 <FreeRTOS_ProcessDNSCache+0x138>)
 8007056:	f019 fe13 	bl	8020c80 <lUDPLoggingPrintf>
                                         pcAddress,
                                         ( unsigned ) FreeRTOS_ntohl( ulTTL ) ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return xResult;
 800705a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
    }
 800705c:	4618      	mov	r0, r3
 800705e:	3764      	adds	r7, #100	@ 0x64
 8007060:	46bd      	mov	sp, r7
 8007062:	bd90      	pop	{r4, r7, pc}
 8007064:	0802339c 	.word	0x0802339c
 8007068:	10624dd3 	.word	0x10624dd3
 800706c:	080233d0 	.word	0x080233d0
 8007070:	08023400 	.word	0x08023400
 8007074:	08023408 	.word	0x08023408
 8007078:	0802340c 	.word	0x0802340c

0800707c <prvFindEntryIndex>:
 * @returns res pdTRUE if index in found else pdFALSE
 */
    static BaseType_t prvFindEntryIndex( const char * pcName,
                                         const IPv46_Address_t * pxIP,
                                         UBaseType_t * uxResult )
    {
 800707c:	b580      	push	{r7, lr}
 800707e:	b086      	sub	sp, #24
 8007080:	af00      	add	r7, sp, #0
 8007082:	60f8      	str	r0, [r7, #12]
 8007084:	60b9      	str	r1, [r7, #8]
 8007086:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 8007088:	2300      	movs	r3, #0
 800708a:	617b      	str	r3, [r7, #20]
        UBaseType_t uxIndex;

        /* For each entry in the DNS cache table. */
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 800708c:	2300      	movs	r3, #0
 800708e:	613b      	str	r3, [r7, #16]
 8007090:	e02d      	b.n	80070ee <prvFindEntryIndex+0x72>
        {
            if( xDNSCache[ uxIndex ].pcName[ 0 ] == ( char ) 0 )
 8007092:	4a1b      	ldr	r2, [pc, #108]	@ (8007100 <prvFindEntryIndex+0x84>)
 8007094:	693b      	ldr	r3, [r7, #16]
 8007096:	216c      	movs	r1, #108	@ 0x6c
 8007098:	fb01 f303 	mul.w	r3, r1, r3
 800709c:	4413      	add	r3, r2
 800709e:	3350      	adds	r3, #80	@ 0x50
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	2b00      	cmp	r3, #0
 80070a4:	d01f      	beq.n	80070e6 <prvFindEntryIndex+0x6a>
            { /* empty slot */
                continue;
            }

            if( strcmp( xDNSCache[ uxIndex ].pcName, pcName ) == 0 )
 80070a6:	693b      	ldr	r3, [r7, #16]
 80070a8:	226c      	movs	r2, #108	@ 0x6c
 80070aa:	fb02 f303 	mul.w	r3, r2, r3
 80070ae:	3350      	adds	r3, #80	@ 0x50
 80070b0:	4a13      	ldr	r2, [pc, #76]	@ (8007100 <prvFindEntryIndex+0x84>)
 80070b2:	4413      	add	r3, r2
 80070b4:	68f9      	ldr	r1, [r7, #12]
 80070b6:	4618      	mov	r0, r3
 80070b8:	f7f9 f912 	bl	80002e0 <strcmp>
 80070bc:	4603      	mov	r3, r0
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d112      	bne.n	80070e8 <prvFindEntryIndex+0x6c>
            { /* hostname found */
                /* IPv6 is enabled, See if the cache entry has the correct type. */
                if( pxIP->xIs_IPv6 == xDNSCache[ uxIndex ].xAddresses[ 0 ].xIs_IPv6 )
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	691a      	ldr	r2, [r3, #16]
 80070c6:	490e      	ldr	r1, [pc, #56]	@ (8007100 <prvFindEntryIndex+0x84>)
 80070c8:	693b      	ldr	r3, [r7, #16]
 80070ca:	206c      	movs	r0, #108	@ 0x6c
 80070cc:	fb00 f303 	mul.w	r3, r0, r3
 80070d0:	440b      	add	r3, r1
 80070d2:	3310      	adds	r3, #16
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	429a      	cmp	r2, r3
 80070d8:	d106      	bne.n	80070e8 <prvFindEntryIndex+0x6c>
                {
                    xReturn = pdTRUE;
 80070da:	2301      	movs	r3, #1
 80070dc:	617b      	str	r3, [r7, #20]
                    *uxResult = uxIndex;
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	693a      	ldr	r2, [r7, #16]
 80070e2:	601a      	str	r2, [r3, #0]
                    break;
 80070e4:	e006      	b.n	80070f4 <prvFindEntryIndex+0x78>
                continue;
 80070e6:	bf00      	nop
        for( uxIndex = 0; uxIndex < ipconfigDNS_CACHE_ENTRIES; uxIndex++ )
 80070e8:	693b      	ldr	r3, [r7, #16]
 80070ea:	3301      	adds	r3, #1
 80070ec:	613b      	str	r3, [r7, #16]
 80070ee:	693b      	ldr	r3, [r7, #16]
 80070f0:	2b03      	cmp	r3, #3
 80070f2:	d9ce      	bls.n	8007092 <prvFindEntryIndex+0x16>
                }
            }
        }

        return xReturn;
 80070f4:	697b      	ldr	r3, [r7, #20]
    }
 80070f6:	4618      	mov	r0, r3
 80070f8:	3718      	adds	r7, #24
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}
 80070fe:	bf00      	nop
 8007100:	20000cd0 	.word	0x20000cd0

08007104 <prvGetCacheIPEntry>:

    static BaseType_t prvGetCacheIPEntry( UBaseType_t uxIndex,
                                          IPv46_Address_t * pxIP,
                                          uint32_t ulCurrentTimeSeconds,
                                          struct freertos_addrinfo ** ppxAddressInfo )
    {
 8007104:	b580      	push	{r7, lr}
 8007106:	b088      	sub	sp, #32
 8007108:	af00      	add	r7, sp, #0
 800710a:	60f8      	str	r0, [r7, #12]
 800710c:	60b9      	str	r1, [r7, #8]
 800710e:	607a      	str	r2, [r7, #4]
 8007110:	603b      	str	r3, [r7, #0]
        BaseType_t isRead;
        uint32_t ulIPAddressIndex = 0;
 8007112:	2300      	movs	r3, #0
 8007114:	61bb      	str	r3, [r7, #24]
        uint32_t ulAge = ulCurrentTimeSeconds - xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds;
 8007116:	4a4a      	ldr	r2, [pc, #296]	@ (8007240 <prvGetCacheIPEntry+0x13c>)
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	216c      	movs	r1, #108	@ 0x6c
 800711c:	fb01 f303 	mul.w	r3, r1, r3
 8007120:	4413      	add	r3, r2
 8007122:	3364      	adds	r3, #100	@ 0x64
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	687a      	ldr	r2, [r7, #4]
 8007128:	1ad3      	subs	r3, r2, r3
 800712a:	617b      	str	r3, [r7, #20]

        /* Confirm that the record is still fresh.
         * The field ulTTL was stored as network-endian. */
        if( ulAge < FreeRTOS_ntohl( xDNSCache[ uxIndex ].ulTTL ) )
 800712c:	4a44      	ldr	r2, [pc, #272]	@ (8007240 <prvGetCacheIPEntry+0x13c>)
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	216c      	movs	r1, #108	@ 0x6c
 8007132:	fb01 f303 	mul.w	r3, r1, r3
 8007136:	4413      	add	r3, r2
 8007138:	3360      	adds	r3, #96	@ 0x60
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	061a      	lsls	r2, r3, #24
 800713e:	4940      	ldr	r1, [pc, #256]	@ (8007240 <prvGetCacheIPEntry+0x13c>)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	206c      	movs	r0, #108	@ 0x6c
 8007144:	fb00 f303 	mul.w	r3, r0, r3
 8007148:	440b      	add	r3, r1
 800714a:	3360      	adds	r3, #96	@ 0x60
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	021b      	lsls	r3, r3, #8
 8007150:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007154:	431a      	orrs	r2, r3
 8007156:	493a      	ldr	r1, [pc, #232]	@ (8007240 <prvGetCacheIPEntry+0x13c>)
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	206c      	movs	r0, #108	@ 0x6c
 800715c:	fb00 f303 	mul.w	r3, r0, r3
 8007160:	440b      	add	r3, r1
 8007162:	3360      	adds	r3, #96	@ 0x60
 8007164:	681b      	ldr	r3, [r3, #0]
 8007166:	0a1b      	lsrs	r3, r3, #8
 8007168:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800716c:	431a      	orrs	r2, r3
 800716e:	4934      	ldr	r1, [pc, #208]	@ (8007240 <prvGetCacheIPEntry+0x13c>)
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	206c      	movs	r0, #108	@ 0x6c
 8007174:	fb00 f303 	mul.w	r3, r0, r3
 8007178:	440b      	add	r3, r1
 800717a:	3360      	adds	r3, #96	@ 0x60
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	0e1b      	lsrs	r3, r3, #24
 8007180:	4313      	orrs	r3, r2
 8007182:	697a      	ldr	r2, [r7, #20]
 8007184:	429a      	cmp	r2, r3
 8007186:	d24a      	bcs.n	800721e <prvGetCacheIPEntry+0x11a>
                /*  modulo it by the number of IP addresses to keep it in range.     */
                /*  Also perform a final modulo by the max number of IP addresses    */
                /*  per DNS cache entry to prevent out-of-bounds access in the event */
                /*  that ucNumIPAddresses has been corrupted.                        */

                ucIndex = xDNSCache[ uxIndex ].ucCurrentIPAddress % xDNSCache[ uxIndex ].ucNumIPAddresses;
 8007188:	4a2d      	ldr	r2, [pc, #180]	@ (8007240 <prvGetCacheIPEntry+0x13c>)
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	216c      	movs	r1, #108	@ 0x6c
 800718e:	fb01 f303 	mul.w	r3, r1, r3
 8007192:	4413      	add	r3, r2
 8007194:	3369      	adds	r3, #105	@ 0x69
 8007196:	781b      	ldrb	r3, [r3, #0]
 8007198:	4929      	ldr	r1, [pc, #164]	@ (8007240 <prvGetCacheIPEntry+0x13c>)
 800719a:	68fa      	ldr	r2, [r7, #12]
 800719c:	206c      	movs	r0, #108	@ 0x6c
 800719e:	fb00 f202 	mul.w	r2, r0, r2
 80071a2:	440a      	add	r2, r1
 80071a4:	3268      	adds	r2, #104	@ 0x68
 80071a6:	7812      	ldrb	r2, [r2, #0]
 80071a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80071ac:	fb01 f202 	mul.w	r2, r1, r2
 80071b0:	1a9b      	subs	r3, r3, r2
 80071b2:	74fb      	strb	r3, [r7, #19]
                ucIndex = ucIndex % ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 80071b4:	7cfb      	ldrb	r3, [r7, #19]
 80071b6:	f003 0303 	and.w	r3, r3, #3
 80071ba:	74fb      	strb	r3, [r7, #19]
                ulIPAddressIndex = ucIndex;
 80071bc:	7cfb      	ldrb	r3, [r7, #19]
 80071be:	61bb      	str	r3, [r7, #24]

                xDNSCache[ uxIndex ].ucCurrentIPAddress++;
 80071c0:	4a1f      	ldr	r2, [pc, #124]	@ (8007240 <prvGetCacheIPEntry+0x13c>)
 80071c2:	68fb      	ldr	r3, [r7, #12]
 80071c4:	216c      	movs	r1, #108	@ 0x6c
 80071c6:	fb01 f303 	mul.w	r3, r1, r3
 80071ca:	4413      	add	r3, r2
 80071cc:	3369      	adds	r3, #105	@ 0x69
 80071ce:	781b      	ldrb	r3, [r3, #0]
 80071d0:	3301      	adds	r3, #1
 80071d2:	b2d8      	uxtb	r0, r3
 80071d4:	4a1a      	ldr	r2, [pc, #104]	@ (8007240 <prvGetCacheIPEntry+0x13c>)
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	216c      	movs	r1, #108	@ 0x6c
 80071da:	fb01 f303 	mul.w	r3, r1, r3
 80071de:	4413      	add	r3, r2
 80071e0:	3369      	adds	r3, #105	@ 0x69
 80071e2:	4602      	mov	r2, r0
 80071e4:	701a      	strb	r2, [r3, #0]
            #endif /* if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

            ( void ) memcpy( pxIP, &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), sizeof( *pxIP ) );
 80071e6:	69ba      	ldr	r2, [r7, #24]
 80071e8:	4613      	mov	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4413      	add	r3, r2
 80071ee:	009b      	lsls	r3, r3, #2
 80071f0:	68fa      	ldr	r2, [r7, #12]
 80071f2:	216c      	movs	r1, #108	@ 0x6c
 80071f4:	fb01 f202 	mul.w	r2, r1, r2
 80071f8:	4413      	add	r3, r2
 80071fa:	4a11      	ldr	r2, [pc, #68]	@ (8007240 <prvGetCacheIPEntry+0x13c>)
 80071fc:	4413      	add	r3, r2
 80071fe:	2214      	movs	r2, #20
 8007200:	4619      	mov	r1, r3
 8007202:	68b8      	ldr	r0, [r7, #8]
 8007204:	f019 ff58 	bl	80210b8 <memcpy>
            isRead = pdTRUE;
 8007208:	2301      	movs	r3, #1
 800720a:	61fb      	str	r3, [r7, #28]

            if( ppxAddressInfo != NULL )
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d010      	beq.n	8007234 <prvGetCacheIPEntry+0x130>
            {
                /* Copy all entries from position 'uxIndex' to a linked struct addrinfo. */
                prvReadDNSCache( ( BaseType_t ) uxIndex, ppxAddressInfo );
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	4618      	mov	r0, r3
 8007218:	f000 f8dc 	bl	80073d4 <prvReadDNSCache>
 800721c:	e00a      	b.n	8007234 <prvGetCacheIPEntry+0x130>
            }
        }
        else
        {
            /* Age out the old cached record. */
            xDNSCache[ uxIndex ].pcName[ 0 ] = ( char ) 0;
 800721e:	4a08      	ldr	r2, [pc, #32]	@ (8007240 <prvGetCacheIPEntry+0x13c>)
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	216c      	movs	r1, #108	@ 0x6c
 8007224:	fb01 f303 	mul.w	r3, r1, r3
 8007228:	4413      	add	r3, r2
 800722a:	3350      	adds	r3, #80	@ 0x50
 800722c:	2200      	movs	r2, #0
 800722e:	701a      	strb	r2, [r3, #0]
            isRead = pdFALSE;
 8007230:	2300      	movs	r3, #0
 8007232:	61fb      	str	r3, [r7, #28]
        }

        return isRead;
 8007234:	69fb      	ldr	r3, [r7, #28]
    }
 8007236:	4618      	mov	r0, r3
 8007238:	3720      	adds	r7, #32
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
 800723e:	bf00      	nop
 8007240:	20000cd0 	.word	0x20000cd0

08007244 <prvUpdateCacheEntry>:
 */
    static void prvUpdateCacheEntry( UBaseType_t uxIndex,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 8007244:	b580      	push	{r7, lr}
 8007246:	b086      	sub	sp, #24
 8007248:	af00      	add	r7, sp, #0
 800724a:	60f8      	str	r0, [r7, #12]
 800724c:	60b9      	str	r1, [r7, #8]
 800724e:	607a      	str	r2, [r7, #4]
 8007250:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddressIndex = 0;
 8007252:	2300      	movs	r3, #0
 8007254:	617b      	str	r3, [r7, #20]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            if( xDNSCache[ uxIndex ].ucNumIPAddresses <
 8007256:	4a26      	ldr	r2, [pc, #152]	@ (80072f0 <prvUpdateCacheEntry+0xac>)
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	216c      	movs	r1, #108	@ 0x6c
 800725c:	fb01 f303 	mul.w	r3, r1, r3
 8007260:	4413      	add	r3, r2
 8007262:	3368      	adds	r3, #104	@ 0x68
 8007264:	781b      	ldrb	r3, [r3, #0]
 8007266:	2b03      	cmp	r3, #3
 8007268:	d81b      	bhi.n	80072a2 <prvUpdateCacheEntry+0x5e>
                ( uint8_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
            {
                /* If more answers exist than there are IP address storage
                 * slots they will overwrite entry 0 */
                ulIPAddressIndex = xDNSCache[ uxIndex ].ucNumIPAddresses;
 800726a:	4a21      	ldr	r2, [pc, #132]	@ (80072f0 <prvUpdateCacheEntry+0xac>)
 800726c:	68fb      	ldr	r3, [r7, #12]
 800726e:	216c      	movs	r1, #108	@ 0x6c
 8007270:	fb01 f303 	mul.w	r3, r1, r3
 8007274:	4413      	add	r3, r2
 8007276:	3368      	adds	r3, #104	@ 0x68
 8007278:	781b      	ldrb	r3, [r3, #0]
 800727a:	617b      	str	r3, [r7, #20]
                xDNSCache[ uxIndex ].ucNumIPAddresses++;
 800727c:	4a1c      	ldr	r2, [pc, #112]	@ (80072f0 <prvUpdateCacheEntry+0xac>)
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	216c      	movs	r1, #108	@ 0x6c
 8007282:	fb01 f303 	mul.w	r3, r1, r3
 8007286:	4413      	add	r3, r2
 8007288:	3368      	adds	r3, #104	@ 0x68
 800728a:	781b      	ldrb	r3, [r3, #0]
 800728c:	3301      	adds	r3, #1
 800728e:	b2d8      	uxtb	r0, r3
 8007290:	4a17      	ldr	r2, [pc, #92]	@ (80072f0 <prvUpdateCacheEntry+0xac>)
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	216c      	movs	r1, #108	@ 0x6c
 8007296:	fb01 f303 	mul.w	r3, r1, r3
 800729a:	4413      	add	r3, r2
 800729c:	3368      	adds	r3, #104	@ 0x68
 800729e:	4602      	mov	r2, r0
 80072a0:	701a      	strb	r2, [r3, #0]
            }
        #endif
        ( void ) memcpy( &( xDNSCache[ uxIndex ].xAddresses[ ulIPAddressIndex ] ), pxIP, sizeof( *pxIP ) );
 80072a2:	697a      	ldr	r2, [r7, #20]
 80072a4:	4613      	mov	r3, r2
 80072a6:	009b      	lsls	r3, r3, #2
 80072a8:	4413      	add	r3, r2
 80072aa:	009b      	lsls	r3, r3, #2
 80072ac:	68fa      	ldr	r2, [r7, #12]
 80072ae:	216c      	movs	r1, #108	@ 0x6c
 80072b0:	fb01 f202 	mul.w	r2, r1, r2
 80072b4:	4413      	add	r3, r2
 80072b6:	4a0e      	ldr	r2, [pc, #56]	@ (80072f0 <prvUpdateCacheEntry+0xac>)
 80072b8:	4413      	add	r3, r2
 80072ba:	2214      	movs	r2, #20
 80072bc:	6879      	ldr	r1, [r7, #4]
 80072be:	4618      	mov	r0, r3
 80072c0:	f019 fefa 	bl	80210b8 <memcpy>
        xDNSCache[ uxIndex ].ulTTL = ulTTL;
 80072c4:	4a0a      	ldr	r2, [pc, #40]	@ (80072f0 <prvUpdateCacheEntry+0xac>)
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	216c      	movs	r1, #108	@ 0x6c
 80072ca:	fb01 f303 	mul.w	r3, r1, r3
 80072ce:	4413      	add	r3, r2
 80072d0:	3360      	adds	r3, #96	@ 0x60
 80072d2:	68ba      	ldr	r2, [r7, #8]
 80072d4:	601a      	str	r2, [r3, #0]
        xDNSCache[ uxIndex ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 80072d6:	4a06      	ldr	r2, [pc, #24]	@ (80072f0 <prvUpdateCacheEntry+0xac>)
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	216c      	movs	r1, #108	@ 0x6c
 80072dc:	fb01 f303 	mul.w	r3, r1, r3
 80072e0:	4413      	add	r3, r2
 80072e2:	3364      	adds	r3, #100	@ 0x64
 80072e4:	683a      	ldr	r2, [r7, #0]
 80072e6:	601a      	str	r2, [r3, #0]
    }
 80072e8:	bf00      	nop
 80072ea:	3718      	adds	r7, #24
 80072ec:	46bd      	mov	sp, r7
 80072ee:	bd80      	pop	{r7, pc}
 80072f0:	20000cd0 	.word	0x20000cd0

080072f4 <prvInsertCacheEntry>:
 */
    static void prvInsertCacheEntry( const char * pcName,
                                     uint32_t ulTTL,
                                     const IPv46_Address_t * pxIP,
                                     uint32_t ulCurrentTimeSeconds )
    {
 80072f4:	b580      	push	{r7, lr}
 80072f6:	b084      	sub	sp, #16
 80072f8:	af00      	add	r7, sp, #0
 80072fa:	60f8      	str	r0, [r7, #12]
 80072fc:	60b9      	str	r1, [r7, #8]
 80072fe:	607a      	str	r2, [r7, #4]
 8007300:	603b      	str	r3, [r7, #0]
        /* Add or update the item. */
        if( strlen( pcName ) < ( size_t ) ipconfigDNS_CACHE_NAME_LENGTH )
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7f8 fff6 	bl	80002f4 <strlen>
 8007308:	4603      	mov	r3, r0
 800730a:	2b0f      	cmp	r3, #15
 800730c:	d859      	bhi.n	80073c2 <prvInsertCacheEntry+0xce>
        {
            ( void ) strncpy( xDNSCache[ uxFreeEntry ].pcName, pcName, ipconfigDNS_CACHE_NAME_LENGTH );
 800730e:	4b2f      	ldr	r3, [pc, #188]	@ (80073cc <prvInsertCacheEntry+0xd8>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	226c      	movs	r2, #108	@ 0x6c
 8007314:	fb02 f303 	mul.w	r3, r2, r3
 8007318:	3350      	adds	r3, #80	@ 0x50
 800731a:	4a2d      	ldr	r2, [pc, #180]	@ (80073d0 <prvInsertCacheEntry+0xdc>)
 800731c:	4413      	add	r3, r2
 800731e:	2210      	movs	r2, #16
 8007320:	68f9      	ldr	r1, [r7, #12]
 8007322:	4618      	mov	r0, r3
 8007324:	f01a fea2 	bl	802206c <strncpy>
            ( void ) memcpy( &( xDNSCache[ uxFreeEntry ].xAddresses[ 0 ] ), pxIP, sizeof( *pxIP ) );
 8007328:	4b28      	ldr	r3, [pc, #160]	@ (80073cc <prvInsertCacheEntry+0xd8>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	226c      	movs	r2, #108	@ 0x6c
 800732e:	fb02 f303 	mul.w	r3, r2, r3
 8007332:	4a27      	ldr	r2, [pc, #156]	@ (80073d0 <prvInsertCacheEntry+0xdc>)
 8007334:	4413      	add	r3, r2
 8007336:	2214      	movs	r2, #20
 8007338:	6879      	ldr	r1, [r7, #4]
 800733a:	4618      	mov	r0, r3
 800733c:	f019 febc 	bl	80210b8 <memcpy>


            xDNSCache[ uxFreeEntry ].ulTTL = ulTTL;
 8007340:	4b22      	ldr	r3, [pc, #136]	@ (80073cc <prvInsertCacheEntry+0xd8>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a22      	ldr	r2, [pc, #136]	@ (80073d0 <prvInsertCacheEntry+0xdc>)
 8007346:	216c      	movs	r1, #108	@ 0x6c
 8007348:	fb01 f303 	mul.w	r3, r1, r3
 800734c:	4413      	add	r3, r2
 800734e:	3360      	adds	r3, #96	@ 0x60
 8007350:	68ba      	ldr	r2, [r7, #8]
 8007352:	601a      	str	r2, [r3, #0]
            xDNSCache[ uxFreeEntry ].ulTimeWhenAddedInSeconds = ulCurrentTimeSeconds;
 8007354:	4b1d      	ldr	r3, [pc, #116]	@ (80073cc <prvInsertCacheEntry+0xd8>)
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a1d      	ldr	r2, [pc, #116]	@ (80073d0 <prvInsertCacheEntry+0xdc>)
 800735a:	216c      	movs	r1, #108	@ 0x6c
 800735c:	fb01 f303 	mul.w	r3, r1, r3
 8007360:	4413      	add	r3, r2
 8007362:	3364      	adds	r3, #100	@ 0x64
 8007364:	683a      	ldr	r2, [r7, #0]
 8007366:	601a      	str	r2, [r3, #0]
            #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
                xDNSCache[ uxFreeEntry ].ucNumIPAddresses = 1;
 8007368:	4b18      	ldr	r3, [pc, #96]	@ (80073cc <prvInsertCacheEntry+0xd8>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	4a18      	ldr	r2, [pc, #96]	@ (80073d0 <prvInsertCacheEntry+0xdc>)
 800736e:	216c      	movs	r1, #108	@ 0x6c
 8007370:	fb01 f303 	mul.w	r3, r1, r3
 8007374:	4413      	add	r3, r2
 8007376:	3368      	adds	r3, #104	@ 0x68
 8007378:	2201      	movs	r2, #1
 800737a:	701a      	strb	r2, [r3, #0]
                xDNSCache[ uxFreeEntry ].ucCurrentIPAddress = 0;
 800737c:	4b13      	ldr	r3, [pc, #76]	@ (80073cc <prvInsertCacheEntry+0xd8>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	4a13      	ldr	r2, [pc, #76]	@ (80073d0 <prvInsertCacheEntry+0xdc>)
 8007382:	216c      	movs	r1, #108	@ 0x6c
 8007384:	fb01 f303 	mul.w	r3, r1, r3
 8007388:	4413      	add	r3, r2
 800738a:	3369      	adds	r3, #105	@ 0x69
 800738c:	2200      	movs	r2, #0
 800738e:	701a      	strb	r2, [r3, #0]

                /* Initialize all remaining IP addresses in this entry to 0 */
                ( void ) memset( &xDNSCache[ uxFreeEntry ].xAddresses[ 1 ],
 8007390:	4b0e      	ldr	r3, [pc, #56]	@ (80073cc <prvInsertCacheEntry+0xd8>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	226c      	movs	r2, #108	@ 0x6c
 8007396:	fb02 f303 	mul.w	r3, r2, r3
 800739a:	3314      	adds	r3, #20
 800739c:	4a0c      	ldr	r2, [pc, #48]	@ (80073d0 <prvInsertCacheEntry+0xdc>)
 800739e:	4413      	add	r3, r2
 80073a0:	223c      	movs	r2, #60	@ 0x3c
 80073a2:	2100      	movs	r1, #0
 80073a4:	4618      	mov	r0, r3
 80073a6:	f019 ff94 	bl	80212d2 <memset>
                                 0,
                                 sizeof( xDNSCache[ uxFreeEntry ].xAddresses[ 1 ] ) *
                                 ( ( uint32_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY - 1U ) );
            #endif
            uxFreeEntry++;
 80073aa:	4b08      	ldr	r3, [pc, #32]	@ (80073cc <prvInsertCacheEntry+0xd8>)
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	3301      	adds	r3, #1
 80073b0:	4a06      	ldr	r2, [pc, #24]	@ (80073cc <prvInsertCacheEntry+0xd8>)
 80073b2:	6013      	str	r3, [r2, #0]

            if( uxFreeEntry == ipconfigDNS_CACHE_ENTRIES )
 80073b4:	4b05      	ldr	r3, [pc, #20]	@ (80073cc <prvInsertCacheEntry+0xd8>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2b04      	cmp	r3, #4
 80073ba:	d102      	bne.n	80073c2 <prvInsertCacheEntry+0xce>
            {
                uxFreeEntry = 0;
 80073bc:	4b03      	ldr	r3, [pc, #12]	@ (80073cc <prvInsertCacheEntry+0xd8>)
 80073be:	2200      	movs	r2, #0
 80073c0:	601a      	str	r2, [r3, #0]
            }
        }
    }
 80073c2:	bf00      	nop
 80073c4:	3710      	adds	r7, #16
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}
 80073ca:	bf00      	nop
 80073cc:	20000e80 	.word	0x20000e80
 80073d0:	20000cd0 	.word	0x20000cd0

080073d4 <prvReadDNSCache>:
 * @param[in] uxIndex The index from where entries must be copied.
 * @param[out] ppxAddressInfo Target to store the DNS entries.
 */
    static void prvReadDNSCache( BaseType_t uxIndex,
                                 struct freertos_addrinfo ** ppxAddressInfo )
    {
 80073d4:	b580      	push	{r7, lr}
 80073d6:	b088      	sub	sp, #32
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
 80073dc:	6039      	str	r1, [r7, #0]
        size_t uxIPAddressIndex;
        size_t uxNumIPAddresses = 1U;
 80073de:	2301      	movs	r3, #1
 80073e0:	61bb      	str	r3, [r7, #24]
        const IPv46_Address_t * pxAddresses;
        struct freertos_addrinfo * pxNewAddress = NULL;
 80073e2:	2300      	movs	r3, #0
 80073e4:	617b      	str	r3, [r7, #20]
        struct freertos_addrinfo ** ppxLastAddress = ppxAddressInfo;
 80073e6:	683b      	ldr	r3, [r7, #0]
 80073e8:	613b      	str	r3, [r7, #16]

        #if ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 )
            uxNumIPAddresses = ( size_t ) xDNSCache[ uxIndex ].ucNumIPAddresses;
 80073ea:	4a2e      	ldr	r2, [pc, #184]	@ (80074a4 <prvReadDNSCache+0xd0>)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	216c      	movs	r1, #108	@ 0x6c
 80073f0:	fb01 f303 	mul.w	r3, r1, r3
 80073f4:	4413      	add	r3, r2
 80073f6:	3368      	adds	r3, #104	@ 0x68
 80073f8:	781b      	ldrb	r3, [r3, #0]
 80073fa:	61bb      	str	r3, [r7, #24]

            if( uxNumIPAddresses > ( size_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY )
 80073fc:	69bb      	ldr	r3, [r7, #24]
 80073fe:	2b04      	cmp	r3, #4
 8007400:	d901      	bls.n	8007406 <prvReadDNSCache+0x32>
            {
                /* Make this a configASSERT()? */
                uxNumIPAddresses = ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007402:	2304      	movs	r3, #4
 8007404:	61bb      	str	r3, [r7, #24]
            }
        #endif /* ( ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY > 1 ) */

        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 8007406:	2300      	movs	r3, #0
 8007408:	61fb      	str	r3, [r7, #28]
 800740a:	e041      	b.n	8007490 <prvReadDNSCache+0xbc>
        {
            pxAddresses = &( xDNSCache[ uxIndex ].xAddresses[ uxIPAddressIndex ] );
 800740c:	69fa      	ldr	r2, [r7, #28]
 800740e:	4613      	mov	r3, r2
 8007410:	009b      	lsls	r3, r3, #2
 8007412:	4413      	add	r3, r2
 8007414:	009b      	lsls	r3, r3, #2
 8007416:	687a      	ldr	r2, [r7, #4]
 8007418:	216c      	movs	r1, #108	@ 0x6c
 800741a:	fb01 f202 	mul.w	r2, r1, r2
 800741e:	4413      	add	r3, r2
 8007420:	4a20      	ldr	r2, [pc, #128]	@ (80074a4 <prvReadDNSCache+0xd0>)
 8007422:	4413      	add	r3, r2
 8007424:	60fb      	str	r3, [r7, #12]

            switch( pxAddresses->xIs_IPv6 ) /* LCOV_EXCL_BR_LINE - xIs_IPv6 is always either pdFALSE or pdTRUE. */
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	691b      	ldr	r3, [r3, #16]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d002      	beq.n	8007434 <prvReadDNSCache+0x60>
 800742e:	2b01      	cmp	r3, #1
 8007430:	d010      	beq.n	8007454 <prvReadDNSCache+0x80>
 8007432:	e01d      	b.n	8007470 <prvReadDNSCache+0x9c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE:
                       {
                           const uint8_t * ucBytes = ( const uint8_t * ) &( pxAddresses->xIPAddress.ulIP_IPv4 );
 8007434:	68fb      	ldr	r3, [r7, #12]
 8007436:	60bb      	str	r3, [r7, #8]
                           pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET4, ucBytes );
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	226c      	movs	r2, #108	@ 0x6c
 800743c:	fb02 f303 	mul.w	r3, r2, r3
 8007440:	3350      	adds	r3, #80	@ 0x50
 8007442:	4a18      	ldr	r2, [pc, #96]	@ (80074a4 <prvReadDNSCache+0xd0>)
 8007444:	4413      	add	r3, r2
 8007446:	68ba      	ldr	r2, [r7, #8]
 8007448:	2102      	movs	r1, #2
 800744a:	4618      	mov	r0, r3
 800744c:	f7ff fc8c 	bl	8006d68 <pxNew_AddrInfo>
 8007450:	6178      	str	r0, [r7, #20]
                       }
                       break;
 8007452:	e011      	b.n	8007478 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE:
                        pxNewAddress = pxNew_AddrInfo( xDNSCache[ uxIndex ].pcName, FREERTOS_AF_INET6, pxAddresses->xIPAddress.xIP_IPv6.ucBytes );
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	226c      	movs	r2, #108	@ 0x6c
 8007458:	fb02 f303 	mul.w	r3, r2, r3
 800745c:	3350      	adds	r3, #80	@ 0x50
 800745e:	4a11      	ldr	r2, [pc, #68]	@ (80074a4 <prvReadDNSCache+0xd0>)
 8007460:	4413      	add	r3, r2
 8007462:	68fa      	ldr	r2, [r7, #12]
 8007464:	210a      	movs	r1, #10
 8007466:	4618      	mov	r0, r3
 8007468:	f7ff fc7e 	bl	8006d68 <pxNew_AddrInfo>
 800746c:	6178      	str	r0, [r7, #20]
                        break;
 800746e:	e003      	b.n	8007478 <prvReadDNSCache+0xa4>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default: /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
                    /* MISRA 16.4 Compliance */
                    FreeRTOS_debug_printf( ( "prvReadDNSCache: Undefined IP Type \n" ) );
 8007470:	480d      	ldr	r0, [pc, #52]	@ (80074a8 <prvReadDNSCache+0xd4>)
 8007472:	f019 fc05 	bl	8020c80 <lUDPLoggingPrintf>
                    break; /* LCOV_EXCL_LINE - xIs_IPv6 is always either pdFALSE or FREERTOS_AF_INET6. */
 8007476:	bf00      	nop
            }

            if( pxNewAddress == NULL )
 8007478:	697b      	ldr	r3, [r7, #20]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d00d      	beq.n	800749a <prvReadDNSCache+0xc6>
                /* Malloc must has failed. */
                break;
            }

            /* Set either 'ppxAddressInfo' or 'pxNewAddress->ai_next'. */
            *( ppxLastAddress ) = pxNewAddress;
 800747e:	693b      	ldr	r3, [r7, #16]
 8007480:	697a      	ldr	r2, [r7, #20]
 8007482:	601a      	str	r2, [r3, #0]

            ppxLastAddress = &( pxNewAddress->ai_next );
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	331c      	adds	r3, #28
 8007488:	613b      	str	r3, [r7, #16]
        for( uxIPAddressIndex = 0; uxIPAddressIndex < uxNumIPAddresses; uxIPAddressIndex++ )
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	3301      	adds	r3, #1
 800748e:	61fb      	str	r3, [r7, #28]
 8007490:	69fa      	ldr	r2, [r7, #28]
 8007492:	69bb      	ldr	r3, [r7, #24]
 8007494:	429a      	cmp	r2, r3
 8007496:	d3b9      	bcc.n	800740c <prvReadDNSCache+0x38>
        }
    }
 8007498:	e000      	b.n	800749c <prvReadDNSCache+0xc8>
                break;
 800749a:	bf00      	nop
    }
 800749c:	bf00      	nop
 800749e:	3720      	adds	r7, #32
 80074a0:	46bd      	mov	sp, r7
 80074a2:	bd80      	pop	{r7, pc}
 80074a4:	20000cd0 	.word	0x20000cd0
 80074a8:	08023440 	.word	0x08023440

080074ac <xDNSDoCallback>:
 *
 * @return Returns pdTRUE if uxIdentifier was recognized.
 */
    BaseType_t xDNSDoCallback( ParseSet_t * pxSet,
                               struct freertos_addrinfo * pxAddress )
    {
 80074ac:	b580      	push	{r7, lr}
 80074ae:	b08a      	sub	sp, #40	@ 0x28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80074b6:	2300      	movs	r3, #0
 80074b8:	627b      	str	r3, [r7, #36]	@ 0x24
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 80074ba:	4b28      	ldr	r3, [pc, #160]	@ (800755c <xDNSDoCallback+0xb0>)
 80074bc:	617b      	str	r3, [r7, #20]
        TickType_t uxIdentifier = ( TickType_t ) pxSet->pxDNSMessageHeader->usIdentifier;
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	881b      	ldrh	r3, [r3, #0]
 80074c4:	b29b      	uxth	r3, r3
 80074c6:	613b      	str	r3, [r7, #16]

        /* While iterating through the list, the scheduler is suspended.
         * Remember which function shall be called once the scheduler is
         * running again. */
        FOnDNSEvent pCallbackFunction = NULL;
 80074c8:	2300      	movs	r3, #0
 80074ca:	61fb      	str	r3, [r7, #28]
        void * pvSearchID = NULL;
 80074cc:	2300      	movs	r3, #0
 80074ce:	61bb      	str	r3, [r7, #24]

        vTaskSuspendAll();
 80074d0:	f7fc fac0 	bl	8003a54 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80074d4:	697b      	ldr	r3, [r7, #20]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	623b      	str	r3, [r7, #32]
 80074da:	e029      	b.n	8007530 <xDNSDoCallback+0x84>
                 pxIterator != ( const ListItem_t * ) xEnd;
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
            {
                BaseType_t xMatching;
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80074dc:	6a3b      	ldr	r3, [r7, #32]
 80074de:	68db      	ldr	r3, [r3, #12]
 80074e0:	60fb      	str	r3, [r7, #12]
                        xMatching = ( strcasecmp( pxCallback->pcName, pxSet->pcName ) == 0 ) ? pdTRUE : pdFALSE;
                    }
                    else
                #endif /* if ( ipconfigUSE_MDNS == 1 ) */
                {
                    xMatching = ( listGET_LIST_ITEM_VALUE( pxIterator ) == uxIdentifier ) ? pdTRUE : pdFALSE;
 80074e2:	6a3b      	ldr	r3, [r7, #32]
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	693a      	ldr	r2, [r7, #16]
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d101      	bne.n	80074f0 <xDNSDoCallback+0x44>
 80074ec:	2301      	movs	r3, #1
 80074ee:	e000      	b.n	80074f2 <xDNSDoCallback+0x46>
 80074f0:	2300      	movs	r3, #0
 80074f2:	60bb      	str	r3, [r7, #8]
                }

                if( xMatching == pdTRUE )
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	2b01      	cmp	r3, #1
 80074f8:	d117      	bne.n	800752a <xDNSDoCallback+0x7e>
                {
                    pvSearchID = pxCallback->pvSearchID;
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	61bb      	str	r3, [r7, #24]
                    pCallbackFunction = pxCallback->pCallbackFunction;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	685b      	ldr	r3, [r3, #4]
 8007504:	61fb      	str	r3, [r7, #28]
                    ( void ) uxListRemove( &pxCallback->xListItem );
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	3314      	adds	r3, #20
 800750a:	4618      	mov	r0, r3
 800750c:	f7fb fa58 	bl	80029c0 <uxListRemove>
                    vPortFree( pxCallback );
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f7fe faf3 	bl	8005afc <vPortFree>

                    if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8007516:	4b12      	ldr	r3, [pc, #72]	@ (8007560 <xDNSDoCallback+0xb4>)
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	2b00      	cmp	r3, #0
 800751c:	d102      	bne.n	8007524 <xDNSDoCallback+0x78>
                    {
                        /* The list of outstanding requests is empty. No need for periodic polling. */
                        vIPSetDNSTimerEnableState( pdFALSE );
 800751e:	2000      	movs	r0, #0
 8007520:	f002 f9ca 	bl	80098b8 <vIPSetDNSTimerEnableState>
                    }

                    xResult = pdTRUE;
 8007524:	2301      	movs	r3, #1
 8007526:	627b      	str	r3, [r7, #36]	@ 0x24
                    break;
 8007528:	e006      	b.n	8007538 <xDNSDoCallback+0x8c>
                 pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 800752a:	6a3b      	ldr	r3, [r7, #32]
 800752c:	685b      	ldr	r3, [r3, #4]
 800752e:	623b      	str	r3, [r7, #32]
                 pxIterator != ( const ListItem_t * ) xEnd;
 8007530:	6a3a      	ldr	r2, [r7, #32]
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	429a      	cmp	r2, r3
 8007536:	d1d1      	bne.n	80074dc <xDNSDoCallback+0x30>
                }
            }
        }
        ( void ) xTaskResumeAll();
 8007538:	f7fc fa9a 	bl	8003a70 <xTaskResumeAll>

        if( pCallbackFunction != NULL )
 800753c:	69fb      	ldr	r3, [r7, #28]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d006      	beq.n	8007550 <xDNSDoCallback+0xa4>
        {
            pCallbackFunction( pxSet->pcName, pvSearchID, pxAddress );
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f103 0034 	add.w	r0, r3, #52	@ 0x34
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	683a      	ldr	r2, [r7, #0]
 800754c:	69b9      	ldr	r1, [r7, #24]
 800754e:	4798      	blx	r3
        }

        return xResult;
 8007550:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 8007552:	4618      	mov	r0, r3
 8007554:	3728      	adds	r7, #40	@ 0x28
 8007556:	46bd      	mov	sp, r7
 8007558:	bd80      	pop	{r7, pc}
 800755a:	bf00      	nop
 800755c:	20000e8c 	.word	0x20000e8c
 8007560:	20000e84 	.word	0x20000e84

08007564 <vDNSCheckCallBack>:
 * @param[in] pvSearchID The search ID of callback function whose associated
 *                 DNS request is being cancelled. If non-ID specific checking of
 *                 all requests is required, then this field should be kept as NULL.
 */
    void vDNSCheckCallBack( void * pvSearchID )
    {
 8007564:	b580      	push	{r7, lr}
 8007566:	b08c      	sub	sp, #48	@ 0x30
 8007568:	af00      	add	r7, sp, #0
 800756a:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;
        const ListItem_t * xEnd = listGET_END_MARKER( &xCallbackList );
 800756c:	4b40      	ldr	r3, [pc, #256]	@ (8007670 <vDNSCheckCallBack+0x10c>)
 800756e:	62bb      	str	r3, [r7, #40]	@ 0x28
         * be called. Store theses item in a temporary list.
         * Only when the scheduler is running, user functions
         * shall be called. */
        List_t xTempList;

        vListInitialise( &xTempList );
 8007570:	f107 030c 	add.w	r3, r7, #12
 8007574:	4618      	mov	r0, r3
 8007576:	f7fb f999 	bl	80028ac <vListInitialise>

        vTaskSuspendAll();
 800757a:	f7fc fa6b 	bl	8003a54 <vTaskSuspendAll>
        {
            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 800757e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007580:	685b      	ldr	r3, [r3, #4]
 8007582:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007584:	e02e      	b.n	80075e4 <vDNSCheckCallBack+0x80>
                 pxIterator != xEnd; )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007588:	68db      	ldr	r3, [r3, #12]
 800758a:	623b      	str	r3, [r7, #32]
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800758c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( ( pvSearchID != NULL ) && ( pvSearchID == pxCallback->pvSearchID ) )
 8007592:	687b      	ldr	r3, [r7, #4]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d00d      	beq.n	80075b4 <vDNSCheckCallBack+0x50>
 8007598:	6a3b      	ldr	r3, [r7, #32]
 800759a:	691b      	ldr	r3, [r3, #16]
 800759c:	687a      	ldr	r2, [r7, #4]
 800759e:	429a      	cmp	r2, r3
 80075a0:	d108      	bne.n	80075b4 <vDNSCheckCallBack+0x50>
                {
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80075a2:	6a3b      	ldr	r3, [r7, #32]
 80075a4:	3314      	adds	r3, #20
 80075a6:	4618      	mov	r0, r3
 80075a8:	f7fb fa0a 	bl	80029c0 <uxListRemove>
                    vPortFree( pxCallback );
 80075ac:	6a38      	ldr	r0, [r7, #32]
 80075ae:	f7fe faa5 	bl	8005afc <vPortFree>
 80075b2:	e017      	b.n	80075e4 <vDNSCheckCallBack+0x80>
                }
                else if( xTaskCheckForTimeOut( &pxCallback->uxTimeoutState, &( pxCallback->uxRemainingTime ) ) != pdFALSE )
 80075b4:	6a3b      	ldr	r3, [r7, #32]
 80075b6:	3308      	adds	r3, #8
 80075b8:	6a3a      	ldr	r2, [r7, #32]
 80075ba:	4611      	mov	r1, r2
 80075bc:	4618      	mov	r0, r3
 80075be:	f7fc ff3d 	bl	800443c <xTaskCheckForTimeOut>
 80075c2:	4603      	mov	r3, r0
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d00d      	beq.n	80075e4 <vDNSCheckCallBack+0x80>
                {
                    /* A time-out occurred in the asynchronous search.
                     * Remove it from xCallbackList. */
                    ( void ) uxListRemove( &( pxCallback->xListItem ) );
 80075c8:	6a3b      	ldr	r3, [r7, #32]
 80075ca:	3314      	adds	r3, #20
 80075cc:	4618      	mov	r0, r3
 80075ce:	f7fb f9f7 	bl	80029c0 <uxListRemove>

                    /* Insert it in a temporary list. The function will be called
                     * once the scheduler is resumed. */
                    vListInsertEnd( &( xTempList ), &pxCallback->xListItem );
 80075d2:	6a3b      	ldr	r3, [r7, #32]
 80075d4:	f103 0214 	add.w	r2, r3, #20
 80075d8:	f107 030c 	add.w	r3, r7, #12
 80075dc:	4611      	mov	r1, r2
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fb f991 	bl	8002906 <vListInsertEnd>
                 pxIterator != xEnd; )
 80075e4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d1cc      	bne.n	8007586 <vDNSCheckCallBack+0x22>
                {
                    /* This call-back is still waiting for a reply or a time-out. */
                }
            }
        }
        ( void ) xTaskResumeAll();
 80075ec:	f7fc fa40 	bl	8003a70 <xTaskResumeAll>

        if( listLIST_IS_EMPTY( &xTempList ) == pdFALSE )
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2b00      	cmp	r3, #0
 80075f4:	d030      	beq.n	8007658 <vDNSCheckCallBack+0xf4>
        {
            /* There is at least one item in xTempList which must be removed and deleted. */
            xEnd = listGET_END_MARKER( &xTempList );
 80075f6:	f107 030c 	add.w	r3, r7, #12
 80075fa:	3308      	adds	r3, #8
 80075fc:	62bb      	str	r3, [r7, #40]	@ 0x28

            for( pxIterator = ( const ListItem_t * ) listGET_NEXT( xEnd );
 80075fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007600:	685b      	ldr	r3, [r3, #4]
 8007602:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007604:	e024      	b.n	8007650 <vDNSCheckCallBack+0xec>
                 pxIterator != xEnd;
                 )
            {
                DNSCallback_t * pxCallback = ( ( DNSCallback_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8007606:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007608:	68db      	ldr	r3, [r3, #12]
 800760a:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Move to the next item because we might remove this item */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 800760c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800760e:	685b      	ldr	r3, [r3, #4]
 8007610:	62fb      	str	r3, [r7, #44]	@ 0x2c

                /* A time-out occurred in the asynchronous search.
                 * Call the application hook with the proper information. */
                if( pxCallback->xIsIPv6 != 0 )
 8007612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <vDNSCheckCallBack+0xca>
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, NULL );
 800761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761c:	685b      	ldr	r3, [r3, #4]
 800761e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007620:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8007624:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007626:	6911      	ldr	r1, [r2, #16]
 8007628:	2200      	movs	r2, #0
 800762a:	4798      	blx	r3
 800762c:	e008      	b.n	8007640 <vDNSCheckCallBack+0xdc>
                }
                else
                {
                    pxCallback->pCallbackFunction( pxCallback->pcName, pxCallback->pvSearchID, 0U );
 800762e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007634:	f102 002c 	add.w	r0, r2, #44	@ 0x2c
 8007638:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800763a:	6911      	ldr	r1, [r2, #16]
 800763c:	2200      	movs	r2, #0
 800763e:	4798      	blx	r3
                }

                /* Remove it from 'xTempList' and free the memory. */
                ( void ) uxListRemove( &( pxCallback->xListItem ) );
 8007640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007642:	3314      	adds	r3, #20
 8007644:	4618      	mov	r0, r3
 8007646:	f7fb f9bb 	bl	80029c0 <uxListRemove>
                vPortFree( pxCallback );
 800764a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800764c:	f7fe fa56 	bl	8005afc <vPortFree>
                 pxIterator != xEnd;
 8007650:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007652:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007654:	429a      	cmp	r2, r3
 8007656:	d1d6      	bne.n	8007606 <vDNSCheckCallBack+0xa2>
            }
        }

        if( listLIST_IS_EMPTY( &xCallbackList ) != pdFALSE )
 8007658:	4b06      	ldr	r3, [pc, #24]	@ (8007674 <vDNSCheckCallBack+0x110>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d102      	bne.n	8007666 <vDNSCheckCallBack+0x102>
        {
            vIPSetDNSTimerEnableState( pdFALSE );
 8007660:	2000      	movs	r0, #0
 8007662:	f002 f929 	bl	80098b8 <vIPSetDNSTimerEnableState>
        }
    }
 8007666:	bf00      	nop
 8007668:	3730      	adds	r7, #48	@ 0x30
 800766a:	46bd      	mov	sp, r7
 800766c:	bd80      	pop	{r7, pc}
 800766e:	bf00      	nop
 8007670:	20000e8c 	.word	0x20000e8c
 8007674:	20000e84 	.word	0x20000e84

08007678 <vDNSCallbackInitialise>:
/**
 * @brief initialize the cache
 * @post will modify global list xCallbackList
 */
    void vDNSCallbackInitialise()
    {
 8007678:	b580      	push	{r7, lr}
 800767a:	af00      	add	r7, sp, #0
        vListInitialise( &xCallbackList );
 800767c:	4802      	ldr	r0, [pc, #8]	@ (8007688 <vDNSCallbackInitialise+0x10>)
 800767e:	f7fb f915 	bl	80028ac <vListInitialise>
    }
 8007682:	bf00      	nop
 8007684:	bd80      	pop	{r7, pc}
 8007686:	bf00      	nop
 8007688:	20000e84 	.word	0x20000e84

0800768c <DNS_ReadNameField>:
 *
 * @return If a fully formed name was found, then return the number of bytes processed in pucByte.
 */
    size_t DNS_ReadNameField( ParseSet_t * pxSet,
                              size_t uxDestLen )
    {
 800768c:	b480      	push	{r7}
 800768e:	b089      	sub	sp, #36	@ 0x24
 8007690:	af00      	add	r7, sp, #0
 8007692:	6078      	str	r0, [r7, #4]
 8007694:	6039      	str	r1, [r7, #0]
        size_t uxNameLen = 0U;
 8007696:	2300      	movs	r3, #0
 8007698:	61fb      	str	r3, [r7, #28]
        size_t uxIndex = 0U;
 800769a:	2300      	movs	r3, #0
 800769c:	61bb      	str	r3, [r7, #24]
        size_t uxSourceLen = pxSet->uxSourceBytesRemaining;
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	695b      	ldr	r3, [r3, #20]
 80076a2:	613b      	str	r3, [r7, #16]
        const uint8_t * pucByte = pxSet->pucByte;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	60fb      	str	r3, [r7, #12]

        /* uxCount gets the values from pucByte and counts down to 0.
         * No need to have a different type than that of pucByte */
        size_t uxCount;

        if( uxSourceLen == ( size_t ) 0U )
 80076aa:	693b      	ldr	r3, [r7, #16]
 80076ac:	2b00      	cmp	r3, #0
 80076ae:	d102      	bne.n	80076b6 <DNS_ReadNameField+0x2a>
        {
            /* Return 0 value in case of error. */
            uxIndex = 0U;
 80076b0:	2300      	movs	r3, #0
 80076b2:	61bb      	str	r3, [r7, #24]
 80076b4:	e069      	b.n	800778a <DNS_ReadNameField+0xfe>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80076b6:	68fa      	ldr	r2, [r7, #12]
 80076b8:	69bb      	ldr	r3, [r7, #24]
 80076ba:	4413      	add	r3, r2
 80076bc:	781b      	ldrb	r3, [r3, #0]
 80076be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80076c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80076c4:	d144      	bne.n	8007750 <DNS_ReadNameField+0xc4>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLen > sizeof( uint16_t ) )
 80076c6:	693b      	ldr	r3, [r7, #16]
 80076c8:	2b02      	cmp	r3, #2
 80076ca:	d903      	bls.n	80076d4 <DNS_ReadNameField+0x48>
            {
                uxIndex += sizeof( uint16_t );
 80076cc:	69bb      	ldr	r3, [r7, #24]
 80076ce:	3302      	adds	r3, #2
 80076d0:	61bb      	str	r3, [r7, #24]
 80076d2:	e05a      	b.n	800778a <DNS_ReadNameField+0xfe>
            }
            else
            {
                uxIndex = 0U;
 80076d4:	2300      	movs	r3, #0
 80076d6:	61bb      	str	r3, [r7, #24]
 80076d8:	e057      	b.n	800778a <DNS_ReadNameField+0xfe>
            /* 'uxIndex' points to the full name. Walk over the string. */
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
            {
                /* If this is not the first time through the loop, then add a
                 * separator in the output. */
                if( ( uxNameLen > 0U ) )
 80076da:	69fb      	ldr	r3, [r7, #28]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d008      	beq.n	80076f2 <DNS_ReadNameField+0x66>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = '.';
 80076e0:	687a      	ldr	r2, [r7, #4]
 80076e2:	69fb      	ldr	r3, [r7, #28]
 80076e4:	4413      	add	r3, r2
 80076e6:	3334      	adds	r3, #52	@ 0x34
 80076e8:	222e      	movs	r2, #46	@ 0x2e
 80076ea:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	3301      	adds	r3, #1
 80076f0:	61fb      	str	r3, [r7, #28]
                }

                /* Process the first/next sub-string. */
                uxCount = ( size_t ) pucByte[ uxIndex ];
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	4413      	add	r3, r2
 80076f8:	781b      	ldrb	r3, [r3, #0]
 80076fa:	617b      	str	r3, [r7, #20]

                /* uxIndex should point to the first character now, unless uxCount
                 * is an offset field. */
                uxIndex++;
 80076fc:	69bb      	ldr	r3, [r7, #24]
 80076fe:	3301      	adds	r3, #1
 8007700:	61bb      	str	r3, [r7, #24]

                if( ( uxIndex + uxCount ) > uxSourceLen )
 8007702:	69ba      	ldr	r2, [r7, #24]
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	4413      	add	r3, r2
 8007708:	693a      	ldr	r2, [r7, #16]
 800770a:	429a      	cmp	r2, r3
 800770c:	d202      	bcs.n	8007714 <DNS_ReadNameField+0x88>
                {
                    uxIndex = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	61bb      	str	r3, [r7, #24]
                    break;
 8007712:	e027      	b.n	8007764 <DNS_ReadNameField+0xd8>
                }

                if( ( uxNameLen + uxCount ) >= uxDestLen )
 8007714:	69fa      	ldr	r2, [r7, #28]
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	4413      	add	r3, r2
 800771a:	683a      	ldr	r2, [r7, #0]
 800771c:	429a      	cmp	r2, r3
 800771e:	d812      	bhi.n	8007746 <DNS_ReadNameField+0xba>
                {
                    uxIndex = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	61bb      	str	r3, [r7, #24]
                    break;
 8007724:	e01e      	b.n	8007764 <DNS_ReadNameField+0xd8>
                {
                    /*
                     * uxNameLen can never be greater than uxDestLen, since there are checks
                     * outside this condition, so the check is removed.
                     */
                    pxSet->pcName[ uxNameLen ] = ( char ) pucByte[ uxIndex ];
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	69bb      	ldr	r3, [r7, #24]
 800772a:	4413      	add	r3, r2
 800772c:	7819      	ldrb	r1, [r3, #0]
 800772e:	687a      	ldr	r2, [r7, #4]
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	4413      	add	r3, r2
 8007734:	3334      	adds	r3, #52	@ 0x34
 8007736:	460a      	mov	r2, r1
 8007738:	701a      	strb	r2, [r3, #0]
                    uxNameLen++;
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	3301      	adds	r3, #1
 800773e:	61fb      	str	r3, [r7, #28]
                    uxIndex++;
 8007740:	69bb      	ldr	r3, [r7, #24]
 8007742:	3301      	adds	r3, #1
 8007744:	61bb      	str	r3, [r7, #24]
                while( uxCount-- != 0U )
 8007746:	697b      	ldr	r3, [r7, #20]
 8007748:	1e5a      	subs	r2, r3, #1
 800774a:	617a      	str	r2, [r7, #20]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d1ea      	bne.n	8007726 <DNS_ReadNameField+0x9a>
            while( ( uxIndex < uxSourceLen ) && ( pucByte[ uxIndex ] != ( uint8_t ) 0x00U ) )
 8007750:	69ba      	ldr	r2, [r7, #24]
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	429a      	cmp	r2, r3
 8007756:	d205      	bcs.n	8007764 <DNS_ReadNameField+0xd8>
 8007758:	68fa      	ldr	r2, [r7, #12]
 800775a:	69bb      	ldr	r3, [r7, #24]
 800775c:	4413      	add	r3, r2
 800775e:	781b      	ldrb	r3, [r3, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d1ba      	bne.n	80076da <DNS_ReadNameField+0x4e>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8007764:	69bb      	ldr	r3, [r7, #24]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d00f      	beq.n	800778a <DNS_ReadNameField+0xfe>
                 * failing above check. Whenever we exit the loop otherwise, either
                 * pucByte[ uxIndex ] == 0 (which makes the check here unnecessary) or
                 * uxIndex >= uxSourceLen (which makes sure that we do not go in the 'if'
                 * case).
                 */
                if( uxIndex < uxSourceLen )
 800776a:	69ba      	ldr	r2, [r7, #24]
 800776c:	693b      	ldr	r3, [r7, #16]
 800776e:	429a      	cmp	r2, r3
 8007770:	d209      	bcs.n	8007786 <DNS_ReadNameField+0xfa>
                {
                    pxSet->pcName[ uxNameLen ] = '\0';
 8007772:	687a      	ldr	r2, [r7, #4]
 8007774:	69fb      	ldr	r3, [r7, #28]
 8007776:	4413      	add	r3, r2
 8007778:	3334      	adds	r3, #52	@ 0x34
 800777a:	2200      	movs	r2, #0
 800777c:	701a      	strb	r2, [r3, #0]
                    uxIndex++;
 800777e:	69bb      	ldr	r3, [r7, #24]
 8007780:	3301      	adds	r3, #1
 8007782:	61bb      	str	r3, [r7, #24]
 8007784:	e001      	b.n	800778a <DNS_ReadNameField+0xfe>
                }
                else
                {
                    uxIndex = 0U;
 8007786:	2300      	movs	r3, #0
 8007788:	61bb      	str	r3, [r7, #24]
                }
            }
        }

        return uxIndex;
 800778a:	69bb      	ldr	r3, [r7, #24]
    }
 800778c:	4618      	mov	r0, r3
 800778e:	3724      	adds	r7, #36	@ 0x24
 8007790:	46bd      	mov	sp, r7
 8007792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007796:	4770      	bx	lr

08007798 <DNS_SkipNameField>:
 *
 * @return It returns the number of bytes read, or zero when an error has occurred.
 */
    size_t DNS_SkipNameField( const uint8_t * pucByte,
                              size_t uxLength )
    {
 8007798:	b480      	push	{r7}
 800779a:	b087      	sub	sp, #28
 800779c:	af00      	add	r7, sp, #0
 800779e:	6078      	str	r0, [r7, #4]
 80077a0:	6039      	str	r1, [r7, #0]
        size_t uxChunkLength;
        size_t uxSourceLenCpy = uxLength;
 80077a2:	683b      	ldr	r3, [r7, #0]
 80077a4:	617b      	str	r3, [r7, #20]
        size_t uxIndex = 0U;
 80077a6:	2300      	movs	r3, #0
 80077a8:	613b      	str	r3, [r7, #16]

        if( uxSourceLenCpy == 0U )
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	2b00      	cmp	r3, #0
 80077ae:	d102      	bne.n	80077b6 <DNS_SkipNameField+0x1e>
        {
            uxIndex = 0U;
 80077b0:	2300      	movs	r3, #0
 80077b2:	613b      	str	r3, [r7, #16]
 80077b4:	e03f      	b.n	8007836 <DNS_SkipNameField+0x9e>
        }

        /* Determine if the name is the fully coded name, or an offset to the name
         * elsewhere in the message. */
        else if( ( pucByte[ uxIndex ] & dnsNAME_IS_OFFSET ) == dnsNAME_IS_OFFSET )
 80077b6:	687a      	ldr	r2, [r7, #4]
 80077b8:	693b      	ldr	r3, [r7, #16]
 80077ba:	4413      	add	r3, r2
 80077bc:	781b      	ldrb	r3, [r3, #0]
 80077be:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80077c2:	2bc0      	cmp	r3, #192	@ 0xc0
 80077c4:	d11f      	bne.n	8007806 <DNS_SkipNameField+0x6e>
        {
            /* Jump over the two byte offset. */
            if( uxSourceLenCpy > sizeof( uint16_t ) )
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	2b02      	cmp	r3, #2
 80077ca:	d903      	bls.n	80077d4 <DNS_SkipNameField+0x3c>
            {
                uxIndex += sizeof( uint16_t );
 80077cc:	693b      	ldr	r3, [r7, #16]
 80077ce:	3302      	adds	r3, #2
 80077d0:	613b      	str	r3, [r7, #16]
 80077d2:	e030      	b.n	8007836 <DNS_SkipNameField+0x9e>
            }
            else
            {
                uxIndex = 0U;
 80077d4:	2300      	movs	r3, #0
 80077d6:	613b      	str	r3, [r7, #16]
 80077d8:	e02d      	b.n	8007836 <DNS_SkipNameField+0x9e>
            /* pucByte points to the full name. Walk over the string. */
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
            {
                /* Conversion to size_t causes addition to be done
                 * in size_t */
                uxChunkLength = ( ( size_t ) pucByte[ uxIndex ] ) + 1U;
 80077da:	687a      	ldr	r2, [r7, #4]
 80077dc:	693b      	ldr	r3, [r7, #16]
 80077de:	4413      	add	r3, r2
 80077e0:	781b      	ldrb	r3, [r3, #0]
 80077e2:	3301      	adds	r3, #1
 80077e4:	60fb      	str	r3, [r7, #12]

                if( uxSourceLenCpy > uxChunkLength )
 80077e6:	697a      	ldr	r2, [r7, #20]
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	429a      	cmp	r2, r3
 80077ec:	d908      	bls.n	8007800 <DNS_SkipNameField+0x68>
                {
                    uxSourceLenCpy -= uxChunkLength;
 80077ee:	697a      	ldr	r2, [r7, #20]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	617b      	str	r3, [r7, #20]
                    uxIndex += uxChunkLength;
 80077f6:	693a      	ldr	r2, [r7, #16]
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	4413      	add	r3, r2
 80077fc:	613b      	str	r3, [r7, #16]
 80077fe:	e002      	b.n	8007806 <DNS_SkipNameField+0x6e>
                }
                else
                {
                    uxIndex = 0U;
 8007800:	2300      	movs	r3, #0
 8007802:	613b      	str	r3, [r7, #16]
                    break;
 8007804:	e008      	b.n	8007818 <DNS_SkipNameField+0x80>
            while( ( pucByte[ uxIndex ] != 0U ) && ( uxSourceLenCpy > 1U ) )
 8007806:	687a      	ldr	r2, [r7, #4]
 8007808:	693b      	ldr	r3, [r7, #16]
 800780a:	4413      	add	r3, r2
 800780c:	781b      	ldrb	r3, [r3, #0]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d002      	beq.n	8007818 <DNS_SkipNameField+0x80>
 8007812:	697b      	ldr	r3, [r7, #20]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d8e0      	bhi.n	80077da <DNS_SkipNameField+0x42>
                }
            }

            /* Confirm that a fully formed name was found. */
            if( uxIndex > 0U )
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d00b      	beq.n	8007836 <DNS_SkipNameField+0x9e>
            {
                if( pucByte[ uxIndex ] == 0U )
 800781e:	687a      	ldr	r2, [r7, #4]
 8007820:	693b      	ldr	r3, [r7, #16]
 8007822:	4413      	add	r3, r2
 8007824:	781b      	ldrb	r3, [r3, #0]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d103      	bne.n	8007832 <DNS_SkipNameField+0x9a>
                {
                    uxIndex++;
 800782a:	693b      	ldr	r3, [r7, #16]
 800782c:	3301      	adds	r3, #1
 800782e:	613b      	str	r3, [r7, #16]
 8007830:	e001      	b.n	8007836 <DNS_SkipNameField+0x9e>
                }
                else
                {
                    uxIndex = 0U;
 8007832:	2300      	movs	r3, #0
 8007834:	613b      	str	r3, [r7, #16]
                }
            }
        }

        return uxIndex;
 8007836:	693b      	ldr	r3, [r7, #16]
    }
 8007838:	4618      	mov	r0, r3
 800783a:	371c      	adds	r7, #28
 800783c:	46bd      	mov	sp, r7
 800783e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007842:	4770      	bx	lr

08007844 <DNS_ParseDNSReply>:
    uint32_t DNS_ParseDNSReply( uint8_t * pucUDPPayloadBuffer,
                                size_t uxBufferLength,
                                struct freertos_addrinfo ** ppxAddressInfo,
                                BaseType_t xExpected,
                                uint16_t usPort )
    {
 8007844:	b5b0      	push	{r4, r5, r7, lr}
 8007846:	b0f6      	sub	sp, #472	@ 0x1d8
 8007848:	af00      	add	r7, sp, #0
 800784a:	f507 74ec 	add.w	r4, r7, #472	@ 0x1d8
 800784e:	f5a4 74e6 	sub.w	r4, r4, #460	@ 0x1cc
 8007852:	6020      	str	r0, [r4, #0]
 8007854:	f507 70ec 	add.w	r0, r7, #472	@ 0x1d8
 8007858:	f5a0 70e8 	sub.w	r0, r0, #464	@ 0x1d0
 800785c:	6001      	str	r1, [r0, #0]
 800785e:	f507 71ec 	add.w	r1, r7, #472	@ 0x1d8
 8007862:	f5a1 71ea 	sub.w	r1, r1, #468	@ 0x1d4
 8007866:	600a      	str	r2, [r1, #0]
 8007868:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 800786c:	f5a2 72ec 	sub.w	r2, r2, #472	@ 0x1d8
 8007870:	6013      	str	r3, [r2, #0]
        ParseSet_t xSet;
        uint16_t x;
        BaseType_t xReturn = pdTRUE;
 8007872:	2301      	movs	r3, #1
 8007874:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
        uint32_t ulIPAddress = 0U;
 8007878:	2300      	movs	r3, #0
 800787a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        BaseType_t xDNSHookReturn;

        ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800787e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007882:	224c      	movs	r2, #76	@ 0x4c
 8007884:	2100      	movs	r1, #0
 8007886:	4618      	mov	r0, r3
 8007888:	f019 fd23 	bl	80212d2 <memset>
        xSet.usPortNumber = usPort;
 800788c:	f8b7 31e8 	ldrh.w	r3, [r7, #488]	@ 0x1e8
 8007890:	f8a7 3166 	strh.w	r3, [r7, #358]	@ 0x166
        xSet.ppxLastAddress = &( xSet.pxLastAddress );
 8007894:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007898:	3344      	adds	r3, #68	@ 0x44
 800789a:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188

        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
            xSet.xDoStore = xExpected;
 800789e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80078a2:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	f8c7 3170 	str.w	r3, [r7, #368]	@ 0x170
        #endif

        /* Ensure that the buffer is of at least minimal DNS message length. */
        if( uxBufferLength < sizeof( DNSMessage_t ) )
 80078ac:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80078b0:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80078b4:	681b      	ldr	r3, [r3, #0]
 80078b6:	2b0b      	cmp	r3, #11
 80078b8:	d803      	bhi.n	80078c2 <DNS_ParseDNSReply+0x7e>
        {
            ( void ) xDNSHookReturn;
            xReturn = pdFALSE;
 80078ba:	2300      	movs	r3, #0
 80078bc:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
 80078c0:	e35a      	b.n	8007f78 <DNS_ParseDNSReply+0x734>
        }
        else
        {
            xSet.uxBufferLength = uxBufferLength;
 80078c2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80078c6:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
            xSet.uxSourceBytesRemaining = uxBufferLength;
 80078d0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80078d4:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
             * for easier access. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xSet.pxDNSMessageHeader = ( ( DNSMessage_t * )
 80078de:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80078e2:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
                                        pucUDPPayloadBuffer );

            /* Introduce a do {} while (0) to allow the use of breaks. */
            do
            {
                size_t uxBytesRead = 0U;
 80078ec:	2300      	movs	r3, #0
 80078ee:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                size_t uxResult;
                BaseType_t xIsResponse = pdFALSE;
 80078f2:	2300      	movs	r3, #0
 80078f4:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                /* Start at the first byte after the header. */
                xSet.pucUDPPayloadBuffer = pucUDPPayloadBuffer;
 80078f8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 80078fc:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
                /* Skip 12-byte header. */
                xSet.pucByte = &( pucUDPPayloadBuffer[ sizeof( DNSMessage_t ) ] );
 8007906:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 800790a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	330c      	adds	r3, #12
 8007912:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                xSet.uxSourceBytesRemaining -= sizeof( DNSMessage_t );
 8007916:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800791a:	3b0c      	subs	r3, #12
 800791c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                /* The number of questions supplied. */
                xSet.usQuestions = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usQuestions );
 8007920:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007924:	889b      	ldrh	r3, [r3, #4]
 8007926:	b29b      	uxth	r3, r3
 8007928:	021b      	lsls	r3, r3, #8
 800792a:	b21a      	sxth	r2, r3
 800792c:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007930:	889b      	ldrh	r3, [r3, #4]
 8007932:	b29b      	uxth	r3, r3
 8007934:	0a1b      	lsrs	r3, r3, #8
 8007936:	b29b      	uxth	r3, r3
 8007938:	b21b      	sxth	r3, r3
 800793a:	4313      	orrs	r3, r2
 800793c:	b21b      	sxth	r3, r3
 800793e:	b29b      	uxth	r3, r3
 8007940:	f8a7 3144 	strh.w	r3, [r7, #324]	@ 0x144
                /* The number of answer records. */
                xSet.usAnswers = FreeRTOS_ntohs( xSet.pxDNSMessageHeader->usAnswers );
 8007944:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007948:	88db      	ldrh	r3, [r3, #6]
 800794a:	b29b      	uxth	r3, r3
 800794c:	021b      	lsls	r3, r3, #8
 800794e:	b21a      	sxth	r2, r3
 8007950:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007954:	88db      	ldrh	r3, [r3, #6]
 8007956:	b29b      	uxth	r3, r3
 8007958:	0a1b      	lsrs	r3, r3, #8
 800795a:	b29b      	uxth	r3, r3
 800795c:	b21b      	sxth	r3, r3
 800795e:	4313      	orrs	r3, r2
 8007960:	b21b      	sxth	r3, r3
 8007962:	b29b      	uxth	r3, r3
 8007964:	f8a7 3146 	strh.w	r3, [r7, #326]	@ 0x146

                if( ( xSet.pxDNSMessageHeader->usFlags & dnsRX_FLAGS_MASK ) == dnsEXPECTED_RX_FLAGS )
 8007968:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 800796c:	885b      	ldrh	r3, [r3, #2]
 800796e:	b29b      	uxth	r3, r3
 8007970:	f403 6378 	and.w	r3, r3, #3968	@ 0xf80
 8007974:	2b80      	cmp	r3, #128	@ 0x80
 8007976:	d11b      	bne.n	80079b0 <DNS_ParseDNSReply+0x16c>
                {
                    xIsResponse = pdTRUE;
 8007978:	2301      	movs	r3, #1
 800797a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0

                    if( xSet.usAnswers == 0U )
 800797e:	f8b7 3146 	ldrh.w	r3, [r7, #326]	@ 0x146
 8007982:	2b00      	cmp	r3, #0
 8007984:	d103      	bne.n	800798e <DNS_ParseDNSReply+0x14a>
                    {
                        /* This is a response that does not include answers. */
                        xReturn = pdFALSE;
 8007986:	2300      	movs	r3, #0
 8007988:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 800798c:	e2f4      	b.n	8007f78 <DNS_ParseDNSReply+0x734>
                    }

                    if( xSet.usQuestions == 0U )
 800798e:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007992:	2b00      	cmp	r3, #0
 8007994:	d114      	bne.n	80079c0 <DNS_ParseDNSReply+0x17c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 8007996:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800799a:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                        #endif

                        #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                            uxResult = DNS_ReadNameField( &xSet,
 800799e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80079a2:	2110      	movs	r1, #16
 80079a4:	4618      	mov	r0, r3
 80079a6:	f7ff fe71 	bl	800768c <DNS_ReadNameField>
 80079aa:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 80079ae:	e007      	b.n	80079c0 <DNS_ParseDNSReply+0x17c>
                        #endif
                    }
                }
                else
                {
                    if( xSet.usQuestions == 0U )
 80079b0:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d103      	bne.n	80079c0 <DNS_ParseDNSReply+0x17c>
                    {
                        /* This is a query that does not include any question. */
                        xReturn = pdFALSE;
 80079b8:	2300      	movs	r3, #0
 80079ba:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 80079be:	e2db      	b.n	8007f78 <DNS_ParseDNSReply+0x734>
                    }
                }

                for( x = 0U; x < xSet.usQuestions; x++ )
 80079c0:	2300      	movs	r3, #0
 80079c2:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 80079c6:	e064      	b.n	8007a92 <DNS_ParseDNSReply+0x24e>
                {
                    #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                    {
                        if( x == 0U )
 80079c8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d103      	bne.n	80079d8 <DNS_ParseDNSReply+0x194>
                        {
                            xSet.pcRequestedName = ( char * ) xSet.pucByte;
 80079d0:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079d4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                        }
                    }
                    #endif

                    #if ( ipconfigUSE_DNS_CACHE == 1 ) || ( ipconfigDNS_USE_CALLBACKS == 1 )
                        if( x == 0U )
 80079d8:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d108      	bne.n	80079f2 <DNS_ParseDNSReply+0x1ae>
                        {
                            uxResult = DNS_ReadNameField( &xSet,
 80079e0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80079e4:	2110      	movs	r1, #16
 80079e6:	4618      	mov	r0, r3
 80079e8:	f7ff fe50 	bl	800768c <DNS_ReadNameField>
 80079ec:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
 80079f0:	e009      	b.n	8007a06 <DNS_ParseDNSReply+0x1c2>
                        }
                        else
                    #endif /* ipconfigUSE_DNS_CACHE || ipconfigDNS_USE_CALLBACKS */
                    {
                        /* Skip the variable length pcName field. */
                        uxResult = DNS_SkipNameField( xSet.pucByte,
 80079f2:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80079f6:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 80079fa:	4611      	mov	r1, r2
 80079fc:	4618      	mov	r0, r3
 80079fe:	f7ff fecb 	bl	8007798 <DNS_SkipNameField>
 8007a02:	f8c7 01c4 	str.w	r0, [r7, #452]	@ 0x1c4
                                                      xSet.uxSourceBytesRemaining );
                    }

                    /* Check for a malformed response. */
                    if( uxResult == 0U )
 8007a06:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d103      	bne.n	8007a16 <DNS_ParseDNSReply+0x1d2>
                    {
                        xReturn = pdFALSE;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007a14:	e043      	b.n	8007a9e <DNS_ParseDNSReply+0x25a>
                    }

                    uxBytesRead += uxResult;
 8007a16:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8007a1a:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007a1e:	4413      	add	r3, r2
 8007a20:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
                    xSet.pucByte = &( xSet.pucByte[ uxResult ] );
 8007a24:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007a28:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007a2c:	4413      	add	r3, r2
 8007a2e:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                    xSet.uxSourceBytesRemaining -= uxResult;
 8007a32:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8007a36:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8007a3a:	1ad3      	subs	r3, r2, r3
 8007a3c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154

                    /* Check the remaining buffer size. */
                    if( xSet.uxSourceBytesRemaining >= sizeof( uint32_t ) )
 8007a40:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007a44:	2b03      	cmp	r3, #3
 8007a46:	d91b      	bls.n	8007a80 <DNS_ParseDNSReply+0x23c>
                    {
                        #if ( ( ipconfigUSE_LLMNR == 1 ) || ( ipconfigUSE_MDNS == 1 ) )
                        {
                            /* usChar2u16 returns value in host endianness. */
                            xSet.usType = usChar2u16( xSet.pucByte );
 8007a48:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	f002 fa58 	bl	8009f02 <usChar2u16>
 8007a52:	4603      	mov	r3, r0
 8007a54:	f8a7 3158 	strh.w	r3, [r7, #344]	@ 0x158
                            xSet.usClass = usChar2u16( &( xSet.pucByte[ 2 ] ) );
 8007a58:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a5c:	3302      	adds	r3, #2
 8007a5e:	4618      	mov	r0, r3
 8007a60:	f002 fa4f 	bl	8009f02 <usChar2u16>
 8007a64:	4603      	mov	r3, r0
 8007a66:	f8a7 3168 	strh.w	r3, [r7, #360]	@ 0x168
                        }
                        #endif /* ipconfigUSE_LLMNR */

                        /* Skip the type and class fields. */
                        xSet.pucByte = &( xSet.pucByte[ sizeof( uint32_t ) ] );
 8007a6a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007a6e:	3304      	adds	r3, #4
 8007a70:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                        xSet.uxSourceBytesRemaining -= sizeof( uint32_t );
 8007a74:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8007a78:	3b04      	subs	r3, #4
 8007a7a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8007a7e:	e003      	b.n	8007a88 <DNS_ParseDNSReply+0x244>
                    }
                    else
                    {
                        xReturn = pdFALSE;
 8007a80:	2300      	movs	r3, #0
 8007a82:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
                        break;
 8007a86:	e00a      	b.n	8007a9e <DNS_ParseDNSReply+0x25a>
                for( x = 0U; x < xSet.usQuestions; x++ )
 8007a88:	f8b7 31d6 	ldrh.w	r3, [r7, #470]	@ 0x1d6
 8007a8c:	3301      	adds	r3, #1
 8007a8e:	f8a7 31d6 	strh.w	r3, [r7, #470]	@ 0x1d6
 8007a92:	f8b7 3144 	ldrh.w	r3, [r7, #324]	@ 0x144
 8007a96:	f8b7 21d6 	ldrh.w	r2, [r7, #470]	@ 0x1d6
 8007a9a:	429a      	cmp	r2, r3
 8007a9c:	d394      	bcc.n	80079c8 <DNS_ParseDNSReply+0x184>
                    }
                } /* for( x = 0U; x < xSet.usQuestions; x++ ) */

                if( xReturn == pdFALSE )
 8007a9e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f000 8265 	beq.w	8007f72 <DNS_ParseDNSReply+0x72e>
                {
                    /* No need to proceed. Break out of the do-while loop. */
                    break;
                }

                if( xIsResponse == pdTRUE )
 8007aa8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	@ 0x1c0
 8007aac:	2b01      	cmp	r3, #1
 8007aae:	d10d      	bne.n	8007acc <DNS_ParseDNSReply+0x288>
                {
                    /* Search through the answer records. */
                    ulIPAddress = parseDNSAnswer( &( xSet ), ppxAddressInfo, &uxBytesRead );
 8007ab0:	f507 729e 	add.w	r2, r7, #316	@ 0x13c
 8007ab4:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007ab8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8007abc:	f507 70a0 	add.w	r0, r7, #320	@ 0x140
 8007ac0:	6819      	ldr	r1, [r3, #0]
 8007ac2:	f000 fa73 	bl	8007fac <parseDNSAnswer>
 8007ac6:	f8c7 01cc 	str.w	r0, [r7, #460]	@ 0x1cc
 8007aca:	e255      	b.n	8007f78 <DNS_ParseDNSReply+0x734>

                    /* No need to check that pcRequestedName != NULL since sQuestions != 0, then
                     * pcRequestedName is assigned with this statement
                     * "pcRequestedName = ( char * ) pucByte;" */
                    /* No need to check that usQuestions != 0, since the check is done before */
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8007acc:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007ad0:	2b01      	cmp	r3, #1
 8007ad2:	d004      	beq.n	8007ade <DNS_ParseDNSReply+0x29a>
 8007ad4:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007ad8:	2b1c      	cmp	r3, #28
 8007ada:	f040 824d 	bne.w	8007f78 <DNS_ParseDNSReply+0x734>
                             ( xSet.usClass == dnsCLASS_IN ) )
 8007ade:	f8b7 3168 	ldrh.w	r3, [r7, #360]	@ 0x168
                    else if( ( ( xSet.usType == dnsTYPE_A_HOST ) || ( xSet.usType == dnsTYPE_AAAA_HOST ) ) &&
 8007ae2:	2b01      	cmp	r3, #1
 8007ae4:	f040 8248 	bne.w	8007f78 <DNS_ParseDNSReply+0x734>
                    {
                        NetworkBufferDescriptor_t * pxNetworkBuffer;
                        NetworkEndPoint_t * pxEndPoint, xEndPoint;
                        size_t uxUDPOffset;

                        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pucUDPPayloadBuffer );
 8007ae8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007aec:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007af0:	6818      	ldr	r0, [r3, #0]
 8007af2:	f001 ff9f 	bl	8009a34 <pxUDPPayloadBuffer_to_NetworkBuffer>
 8007af6:	f8c7 01bc 	str.w	r0, [r7, #444]	@ 0x1bc

                        /* This test could be replaced with a assert(). */
                        if( pxNetworkBuffer == NULL )
 8007afa:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d103      	bne.n	8007b0a <DNS_ParseDNSReply+0x2c6>
                        {
                            /* _HT_ just while testing. When the program gets here,
                             * pucUDPPayloadBuffer was invalid. */
                            FreeRTOS_printf( ( "DNS_ParseDNSReply: pucUDPPayloadBuffer was invalid\n" ) );
 8007b02:	48c4      	ldr	r0, [pc, #784]	@ (8007e14 <DNS_ParseDNSReply+0x5d0>)
 8007b04:	f019 f8bc 	bl	8020c80 <lUDPLoggingPrintf>
                            break;
 8007b08:	e236      	b.n	8007f78 <DNS_ParseDNSReply+0x734>
                        }

                        uxUDPOffset = ( size_t ) ( pucUDPPayloadBuffer - pxNetworkBuffer->pucEthernetBuffer );
 8007b0a:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007b0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007b10:	f507 72ec 	add.w	r2, r7, #472	@ 0x1d8
 8007b14:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8007b18:	6812      	ldr	r2, [r2, #0]
 8007b1a:	1ad3      	subs	r3, r2, r3
 8007b1c:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
                        configASSERT( ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv4 ) || ( uxUDPOffset == ipUDP_PAYLOAD_OFFSET_IPv6 ) );
 8007b20:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007b24:	2b2a      	cmp	r3, #42	@ 0x2a
 8007b26:	d003      	beq.n	8007b30 <DNS_ParseDNSReply+0x2ec>
 8007b28:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007b2c:	2b3e      	cmp	r3, #62	@ 0x3e
 8007b2e:	d101      	bne.n	8007b34 <DNS_ParseDNSReply+0x2f0>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <DNS_ParseDNSReply+0x2f2>
 8007b34:	2300      	movs	r3, #0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d104      	bne.n	8007b44 <DNS_ParseDNSReply+0x300>
 8007b3a:	f240 11bb 	movw	r1, #443	@ 0x1bb
 8007b3e:	48b6      	ldr	r0, [pc, #728]	@ (8007e18 <DNS_ParseDNSReply+0x5d4>)
 8007b40:	f7f9 fc96 	bl	8001470 <vAssertCalled>

                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8007b44:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	f000 8213 	beq.w	8007f76 <DNS_ParseDNSReply+0x732>
                        {
                            break;
                        }

                        pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8007b50:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007b56:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4

                        /* Make a copy of the end-point because xApplicationDNSQueryHook() is allowed
                         * to write into it. */
                        ( void ) memcpy( &( xEndPoint ), pxEndPoint, sizeof( xEndPoint ) );
 8007b5a:	f107 0314 	add.w	r3, r7, #20
 8007b5e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 8007b62:	f8d7 11a4 	ldr.w	r1, [r7, #420]	@ 0x1a4
 8007b66:	4618      	mov	r0, r3
 8007b68:	f019 faa6 	bl	80210b8 <memcpy>

                        #if ( ipconfigUSE_IPv6 != 0 )
                        {
                            /*logging*/
                            FreeRTOS_printf( ( "prvParseDNS_HandleLLMNRRequest[%s]: type %04X\n", xSet.pcName, xSet.usType ) );
 8007b6c:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007b70:	461a      	mov	r2, r3
 8007b72:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007b76:	3334      	adds	r3, #52	@ 0x34
 8007b78:	4619      	mov	r1, r3
 8007b7a:	48a8      	ldr	r0, [pc, #672]	@ (8007e1c <DNS_ParseDNSReply+0x5d8>)
 8007b7c:	f019 f880 	bl	8020c80 <lUDPLoggingPrintf>

                            xEndPoint.usDNSType = ( uint8_t ) xSet.usType;
 8007b80:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007b84:	b2da      	uxtb	r2, r3
 8007b86:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007b8a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007b8e:	f883 20f4 	strb.w	r2, [r3, #244]	@ 0xf4
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        /* If this is not a reply to our DNS request, it might be an mDNS or an LLMNR
                         * request. Ask the application if it uses the name. */
                        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                            xDNSHookReturn = xApplicationDNSQueryHook( xSet.pcName );
 8007b92:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8007b96:	3334      	adds	r3, #52	@ 0x34
 8007b98:	4618      	mov	r0, r3
 8007b9a:	f7f9 fcfd 	bl	8001598 <xApplicationDNSQueryHook>
 8007b9e:	f8c7 01c8 	str.w	r0, [r7, #456]	@ 0x1c8
                            xDNSHookReturn = xApplicationDNSQueryHook_Multi( &xEndPoint, xSet.pcName );
                        #endif

                        /* During the early stages of boot or after a DHCP lease expires, our end-point
                         * may have an IP address of 0.0.0.0. Do not respond to name queries with that address. */
                        if( ( xDNSHookReturn != pdFALSE ) && ( xEndPoint.bits.bIPv6 == pdFALSE ) && ( xEndPoint.ipv4_settings.ulIPAddress == 0U ) )
 8007ba2:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d014      	beq.n	8007bd4 <DNS_ParseDNSReply+0x390>
 8007baa:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007bae:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007bb2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8007bb6:	f003 0304 	and.w	r3, r3, #4
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d109      	bne.n	8007bd4 <DNS_ParseDNSReply+0x390>
 8007bc0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007bc4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d102      	bne.n	8007bd4 <DNS_ParseDNSReply+0x390>
                        {
                            xDNSHookReturn = pdFALSE;
 8007bce:	2300      	movs	r3, #0
 8007bd0:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
                        }

                        if( xDNSHookReturn != pdFALSE )
 8007bd4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	@ 0x1c8
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 81cd 	beq.w	8007f78 <DNS_ParseDNSReply+0x734>
                        {
                            int16_t usLength;
                            NetworkBufferDescriptor_t * pxNewBuffer = NULL;
 8007bde:	2300      	movs	r3, #0
 8007be0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
                            LLMNRAnswer_t * pxAnswer;
                            uint8_t * pucNewBuffer = NULL;
 8007be4:	2300      	movs	r3, #0
 8007be6:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            size_t uxExtraLength;

                            if( xBufferAllocFixedSize == pdFALSE )
 8007bea:	4b8d      	ldr	r3, [pc, #564]	@ (8007e20 <DNS_ParseDNSReply+0x5dc>)
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d164      	bne.n	8007cbc <DNS_ParseDNSReply+0x478>
                            {
                                size_t uxDataLength = uxBufferLength +
                                                      sizeof( UDPHeader_t ) +
                                                      sizeof( EthernetHeader_t ) +
                                                      uxIPHeaderSizePacket( pxNetworkBuffer );
 8007bf2:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8007bf6:	f001 fbd7 	bl	80093a8 <uxIPHeaderSizePacket>
 8007bfa:	4602      	mov	r2, r0
                                                      sizeof( EthernetHeader_t ) +
 8007bfc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c00:	f5a3 73e8 	sub.w	r3, r3, #464	@ 0x1d0
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	4413      	add	r3, r2
                                size_t uxDataLength = uxBufferLength +
 8007c08:	3316      	adds	r3, #22
 8007c0a:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8007c0e:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007c12:	2b1c      	cmp	r3, #28
 8007c14:	d103      	bne.n	8007c1e <DNS_ParseDNSReply+0x3da>
                                    {
                                        uxExtraLength = sizeof( LLMNRAnswer_t ) + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress );
 8007c16:	231c      	movs	r3, #28
 8007c18:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
 8007c1c:	e002      	b.n	8007c24 <DNS_ParseDNSReply+0x3e0>
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                #if ( ipconfigUSE_IPv4 != 0 )
                                {
                                    uxExtraLength = sizeof( LLMNRAnswer_t );
 8007c1e:	2310      	movs	r3, #16
 8007c20:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
                                    /* do nothing, coverity happy */
                                }
                                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                                /* Set the size of the outgoing packet. */
                                pxNetworkBuffer->xDataLength = uxDataLength;
 8007c24:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007c28:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8007c2c:	629a      	str	r2, [r3, #40]	@ 0x28
                                pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer,
 8007c2e:	f8d7 21a0 	ldr.w	r2, [r7, #416]	@ 0x1a0
 8007c32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8007c36:	4413      	add	r3, r2
 8007c38:	4619      	mov	r1, r3
 8007c3a:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8007c3e:	f001 fe65 	bl	800990c <pxDuplicateNetworkBufferWithDescriptor>
 8007c42:	f8c7 01b4 	str.w	r0, [r7, #436]	@ 0x1b4
                                                                                      uxDataLength +
                                                                                      uxExtraLength );

                                if( pxNewBuffer != NULL )
 8007c46:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d032      	beq.n	8007cb4 <DNS_ParseDNSReply+0x470>
                                {
                                    BaseType_t xOffset1, xOffset2;

                                    xOffset1 = ( BaseType_t ) ( xSet.pucByte - pucUDPPayloadBuffer );
 8007c4e:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007c52:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c56:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	1ad3      	subs	r3, r2, r3
 8007c5e:	f8c7 319c 	str.w	r3, [r7, #412]	@ 0x19c
                                    xOffset2 = ( BaseType_t ) ( ( ( uint8_t * ) xSet.pcRequestedName ) - pucUDPPayloadBuffer );
 8007c62:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8007c66:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007c6a:	f5a3 73e6 	sub.w	r3, r3, #460	@ 0x1cc
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	1ad3      	subs	r3, r2, r3
 8007c72:	f8c7 3198 	str.w	r3, [r7, #408]	@ 0x198

                                    pxNetworkBuffer = pxNewBuffer;
 8007c76:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007c7a:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
                                    pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 8007c7e:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007c82:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007c84:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007c88:	4413      	add	r3, r2
 8007c8a:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0

                                    xSet.pucByte = &( pucNewBuffer[ xOffset1 ] );
 8007c8e:	f8d7 319c 	ldr.w	r3, [r7, #412]	@ 0x19c
 8007c92:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8007c96:	4413      	add	r3, r2
 8007c98:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
                                    xSet.pcRequestedName = ( char * ) &( pucNewBuffer[ xOffset2 ] );
 8007c9c:	f8d7 3198 	ldr.w	r3, [r7, #408]	@ 0x198
 8007ca0:	f8d7 21b0 	ldr.w	r2, [r7, #432]	@ 0x1b0
 8007ca4:	4413      	add	r3, r2
 8007ca6:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
                                    xSet.pxDNSMessageHeader = ( ( DNSMessage_t * ) pucNewBuffer );
 8007caa:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8007cae:	f8c7 3140 	str.w	r3, [r7, #320]	@ 0x140
 8007cb2:	e00b      	b.n	8007ccc <DNS_ParseDNSReply+0x488>
                                }
                                else
                                {
                                    /* Just to indicate that the message may not be answered. */
                                    pxNetworkBuffer = NULL;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	f8c7 31bc 	str.w	r3, [r7, #444]	@ 0x1bc
 8007cba:	e007      	b.n	8007ccc <DNS_ParseDNSReply+0x488>
                                }
                            }
                            else
                            {
                                pucNewBuffer = &( pxNetworkBuffer->pucEthernetBuffer[ uxUDPOffset ] );
 8007cbc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007cc0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007cc2:	f8d7 31a8 	ldr.w	r3, [r7, #424]	@ 0x1a8
 8007cc6:	4413      	add	r3, r2
 8007cc8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
                            }

                            if( ( pxNetworkBuffer != NULL ) )
 8007ccc:	f8d7 31bc 	ldr.w	r3, [r7, #444]	@ 0x1bc
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	f000 8151 	beq.w	8007f78 <DNS_ParseDNSReply+0x734>
                            {
                                pxAnswer = ( ( LLMNRAnswer_t * ) xSet.pucByte );
 8007cd6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8007cda:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
                                /* We leave 'usIdentifier' and 'usQuestions' untouched */
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usFlags, dnsLLMNR_FLAGS_IS_RESPONSE ); /* Set the response flag */
 8007cde:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007ce2:	3302      	adds	r3, #2
 8007ce4:	2280      	movs	r2, #128	@ 0x80
 8007ce6:	701a      	strb	r2, [r3, #0]
 8007ce8:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007cec:	3303      	adds	r3, #3
 8007cee:	2200      	movs	r2, #0
 8007cf0:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAnswers, 1 );                        /* Provide a single answer */
 8007cf2:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007cf6:	3306      	adds	r3, #6
 8007cf8:	2200      	movs	r2, #0
 8007cfa:	701a      	strb	r2, [r3, #0]
 8007cfc:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007d00:	3307      	adds	r3, #7
 8007d02:	2201      	movs	r2, #1
 8007d04:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAuthorityRRs, 0 );                   /* No authority */
 8007d06:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007d0a:	3308      	adds	r3, #8
 8007d0c:	2200      	movs	r2, #0
 8007d0e:	701a      	strb	r2, [r3, #0]
 8007d10:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007d14:	3309      	adds	r3, #9
 8007d16:	2200      	movs	r2, #0
 8007d18:	701a      	strb	r2, [r3, #0]
                                vSetField16( xSet.pxDNSMessageHeader, DNSMessage_t, usAdditionalRRs, 0 );                  /* No additional info */
 8007d1a:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007d1e:	330a      	adds	r3, #10
 8007d20:	2200      	movs	r2, #0
 8007d22:	701a      	strb	r2, [r3, #0]
 8007d24:	f8d7 3140 	ldr.w	r3, [r7, #320]	@ 0x140
 8007d28:	330b      	adds	r3, #11
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	701a      	strb	r2, [r3, #0]

                                pxAnswer->ucNameCode = dnsNAME_IS_OFFSET;
 8007d2e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007d32:	22c0      	movs	r2, #192	@ 0xc0
 8007d34:	701a      	strb	r2, [r3, #0]
                                pxAnswer->ucNameOffset = ( uint8_t ) ( xSet.pcRequestedName - ( char * ) pucNewBuffer );
 8007d36:	f8d7 216c 	ldr.w	r2, [r7, #364]	@ 0x16c
 8007d3a:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8007d3e:	1ad3      	subs	r3, r2, r3
 8007d40:	b2da      	uxtb	r2, r3
 8007d42:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007d46:	705a      	strb	r2, [r3, #1]

                                vSetField16( pxAnswer, LLMNRAnswer_t, usType, xSet.usType );  /* Type A or AAAA: host */
 8007d48:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007d4c:	0a1b      	lsrs	r3, r3, #8
 8007d4e:	b29a      	uxth	r2, r3
 8007d50:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007d54:	3302      	adds	r3, #2
 8007d56:	b2d2      	uxtb	r2, r2
 8007d58:	701a      	strb	r2, [r3, #0]
 8007d5a:	f8b7 2158 	ldrh.w	r2, [r7, #344]	@ 0x158
 8007d5e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007d62:	3303      	adds	r3, #3
 8007d64:	b2d2      	uxtb	r2, r2
 8007d66:	701a      	strb	r2, [r3, #0]
                                vSetField16( pxAnswer, LLMNRAnswer_t, usClass, dnsCLASS_IN ); /* 1: Class IN */
 8007d68:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007d6c:	3304      	adds	r3, #4
 8007d6e:	2200      	movs	r2, #0
 8007d70:	701a      	strb	r2, [r3, #0]
 8007d72:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007d76:	3305      	adds	r3, #5
 8007d78:	2201      	movs	r2, #1
 8007d7a:	701a      	strb	r2, [r3, #0]
                                vSetField32( pxAnswer, LLMNRAnswer_t, ulTTL, dnsLLMNR_TTL_VALUE );
 8007d7c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007d80:	3306      	adds	r3, #6
 8007d82:	2200      	movs	r2, #0
 8007d84:	701a      	strb	r2, [r3, #0]
 8007d86:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007d8a:	3307      	adds	r3, #7
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	701a      	strb	r2, [r3, #0]
 8007d90:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007d94:	3308      	adds	r3, #8
 8007d96:	2201      	movs	r2, #1
 8007d98:	701a      	strb	r2, [r3, #0]
 8007d9a:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007d9e:	3309      	adds	r3, #9
 8007da0:	222c      	movs	r2, #44	@ 0x2c
 8007da2:	701a      	strb	r2, [r3, #0]

                                usLength = ( int16_t ) ( sizeof( *pxAnswer ) + ( size_t ) ( xSet.pucByte - pucNewBuffer ) );
 8007da4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007da8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8007dac:	1ad3      	subs	r3, r2, r3
 8007dae:	b29b      	uxth	r3, r3
 8007db0:	3310      	adds	r3, #16
 8007db2:	b29b      	uxth	r3, r3
 8007db4:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba

                                #if ( ipconfigUSE_IPv6 != 0 )
                                    if( xSet.usType == dnsTYPE_AAAA_HOST )
 8007db8:	f8b7 3158 	ldrh.w	r3, [r7, #344]	@ 0x158
 8007dbc:	2b1c      	cmp	r3, #28
 8007dbe:	d131      	bne.n	8007e24 <DNS_ParseDNSReply+0x5e0>
                                    {
                                        size_t uxDistance;
                                        vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ipSIZE_OF_IPv6_ADDRESS );
 8007dc0:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007dc4:	330a      	adds	r3, #10
 8007dc6:	2200      	movs	r2, #0
 8007dc8:	701a      	strb	r2, [r3, #0]
 8007dca:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007dce:	330b      	adds	r3, #11
 8007dd0:	2210      	movs	r2, #16
 8007dd2:	701a      	strb	r2, [r3, #0]
                                        ( void ) memcpy( &( pxAnswer->ulIPAddress ), xEndPoint.ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8007dd4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007dd8:	f103 020c 	add.w	r2, r3, #12
 8007ddc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007de0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007de4:	4615      	mov	r5, r2
 8007de6:	f103 0438 	add.w	r4, r3, #56	@ 0x38
 8007dea:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8007dec:	6028      	str	r0, [r5, #0]
 8007dee:	6069      	str	r1, [r5, #4]
 8007df0:	60aa      	str	r2, [r5, #8]
 8007df2:	60eb      	str	r3, [r5, #12]
                                        uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8007df4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007df8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
                                        /* An extra 12 bytes will be sent compared to an A-record. */
                                        usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance + ipSIZE_OF_IPv6_ADDRESS - sizeof( pxAnswer->ulIPAddress ) );
 8007e02:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8007e06:	b29b      	uxth	r3, r3
 8007e08:	331c      	adds	r3, #28
 8007e0a:	b29b      	uxth	r3, r3
 8007e0c:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
 8007e10:	e09a      	b.n	8007f48 <DNS_ParseDNSReply+0x704>
 8007e12:	bf00      	nop
 8007e14:	080234e8 	.word	0x080234e8
 8007e18:	0802351c 	.word	0x0802351c
 8007e1c:	08023550 	.word	0x08023550
 8007e20:	08026404 	.word	0x08026404
                                    }
                                    else
                                #endif /* ( ipconfigUSE_IPv6 != 0 ) */
                                {
                                    size_t uxDistance;
                                    vSetField16( pxAnswer, LLMNRAnswer_t, usDataLength, ( uint16_t ) sizeof( pxAnswer->ulIPAddress ) );
 8007e24:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007e28:	330a      	adds	r3, #10
 8007e2a:	2200      	movs	r2, #0
 8007e2c:	701a      	strb	r2, [r3, #0]
 8007e2e:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007e32:	330b      	adds	r3, #11
 8007e34:	2204      	movs	r2, #4
 8007e36:	701a      	strb	r2, [r3, #0]
                                    vSetField32( pxAnswer, LLMNRAnswer_t, ulIPAddress, FreeRTOS_ntohl( xEndPoint.ipv4_settings.ulIPAddress ) );
 8007e38:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e3c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	061a      	lsls	r2, r3, #24
 8007e44:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e48:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	021b      	lsls	r3, r3, #8
 8007e50:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e54:	431a      	orrs	r2, r3
 8007e56:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e5a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	0a1b      	lsrs	r3, r3, #8
 8007e62:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007e66:	431a      	orrs	r2, r3
 8007e68:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e6c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007e70:	681b      	ldr	r3, [r3, #0]
 8007e72:	0e1b      	lsrs	r3, r3, #24
 8007e74:	4313      	orrs	r3, r2
 8007e76:	0e1a      	lsrs	r2, r3, #24
 8007e78:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007e7c:	330c      	adds	r3, #12
 8007e7e:	b2d2      	uxtb	r2, r2
 8007e80:	701a      	strb	r2, [r3, #0]
 8007e82:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e86:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	061a      	lsls	r2, r3, #24
 8007e8e:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007e92:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	021b      	lsls	r3, r3, #8
 8007e9a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007e9e:	431a      	orrs	r2, r3
 8007ea0:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007ea4:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	0a1b      	lsrs	r3, r3, #8
 8007eac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007eb0:	431a      	orrs	r2, r3
 8007eb2:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007eb6:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	0e1b      	lsrs	r3, r3, #24
 8007ebe:	4313      	orrs	r3, r2
 8007ec0:	0c1a      	lsrs	r2, r3, #16
 8007ec2:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007ec6:	330d      	adds	r3, #13
 8007ec8:	b2d2      	uxtb	r2, r2
 8007eca:	701a      	strb	r2, [r3, #0]
 8007ecc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007ed0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	061a      	lsls	r2, r3, #24
 8007ed8:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007edc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	021b      	lsls	r3, r3, #8
 8007ee4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007ee8:	431a      	orrs	r2, r3
 8007eea:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007eee:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007ef2:	681b      	ldr	r3, [r3, #0]
 8007ef4:	0a1b      	lsrs	r3, r3, #8
 8007ef6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8007efa:	431a      	orrs	r2, r3
 8007efc:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f00:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	0e1b      	lsrs	r3, r3, #24
 8007f08:	4313      	orrs	r3, r2
 8007f0a:	0a1a      	lsrs	r2, r3, #8
 8007f0c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007f10:	330e      	adds	r3, #14
 8007f12:	b2d2      	uxtb	r2, r2
 8007f14:	701a      	strb	r2, [r3, #0]
 8007f16:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f1a:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	0e1a      	lsrs	r2, r3, #24
 8007f22:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8007f26:	330f      	adds	r3, #15
 8007f28:	b2d2      	uxtb	r2, r2
 8007f2a:	701a      	strb	r2, [r3, #0]
                                    uxDistance = ( size_t ) ( xSet.pucByte - pucNewBuffer );
 8007f2c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8007f30:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
 8007f34:	1ad3      	subs	r3, r2, r3
 8007f36:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
                                    usLength = ( int16_t ) ( sizeof( *pxAnswer ) + uxDistance );
 8007f3a:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
 8007f3e:	b29b      	uxth	r3, r3
 8007f40:	3310      	adds	r3, #16
 8007f42:	b29b      	uxth	r3, r3
 8007f44:	f8a7 31ba 	strh.w	r3, [r7, #442]	@ 0x1ba
                                }

                                prepareReplyDNSMessage( pxNetworkBuffer, usLength );
 8007f48:	f9b7 31ba 	ldrsh.w	r3, [r7, #442]	@ 0x1ba
 8007f4c:	4619      	mov	r1, r3
 8007f4e:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8007f52:	f000 fa21 	bl	8008398 <prepareReplyDNSMessage>
                                /* This function will fill in the eth addresses and send the packet */
                                vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 8007f56:	2100      	movs	r1, #0
 8007f58:	f8d7 01bc 	ldr.w	r0, [r7, #444]	@ 0x1bc
 8007f5c:	f001 f924 	bl	80091a8 <vReturnEthernetFrame>

                                if( pxNewBuffer != NULL )
 8007f60:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8007f64:	2b00      	cmp	r3, #0
 8007f66:	d007      	beq.n	8007f78 <DNS_ParseDNSReply+0x734>
                                {
                                    vReleaseNetworkBufferAndDescriptor( pxNewBuffer );
 8007f68:	f8d7 01b4 	ldr.w	r0, [r7, #436]	@ 0x1b4
 8007f6c:	f00e fc2c 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
 8007f70:	e002      	b.n	8007f78 <DNS_ParseDNSReply+0x734>
                    break;
 8007f72:	bf00      	nop
 8007f74:	e000      	b.n	8007f78 <DNS_ParseDNSReply+0x734>
                            break;
 8007f76:	bf00      	nop
                #endif /* ipconfigUSE_LLMNR == 1 */
                ( void ) uxBytesRead;
            } while( ipFALSE_BOOL );
        }

        if( xReturn == pdFALSE )
 8007f78:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d103      	bne.n	8007f88 <DNS_ParseDNSReply+0x744>
        {
            /* There was an error while parsing the DNS response. Return error code. */
            ulIPAddress = ( uint32_t ) dnsPARSE_ERROR;
 8007f80:	2300      	movs	r3, #0
 8007f82:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
 8007f86:	e009      	b.n	8007f9c <DNS_ParseDNSReply+0x758>
        }
        else if( xExpected == pdFALSE )
 8007f88:	f507 73ec 	add.w	r3, r7, #472	@ 0x1d8
 8007f8c:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d102      	bne.n	8007f9c <DNS_ParseDNSReply+0x758>
        {
            /* Do not return a valid IP-address in case the reply was not expected. */
            ulIPAddress = 0U;
 8007f96:	2300      	movs	r3, #0
 8007f98:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
        else
        {
            /* The IP-address found will be returned. */
        }

        return ulIPAddress;
 8007f9c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
    }
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f507 77ec 	add.w	r7, r7, #472	@ 0x1d8
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	bdb0      	pop	{r4, r5, r7, pc}
 8007faa:	bf00      	nop

08007fac <parseDNSAnswer>:
 * @return pdTRUE when successful, otherwise pdFALSE.
 */
    uint32_t parseDNSAnswer( ParseSet_t * pxSet,
                             struct freertos_addrinfo ** ppxAddressInfo,
                             size_t * uxBytesRead )
    {
 8007fac:	b590      	push	{r4, r7, lr}
 8007fae:	b0a7      	sub	sp, #156	@ 0x9c
 8007fb0:	af02      	add	r7, sp, #8
 8007fb2:	60f8      	str	r0, [r7, #12]
 8007fb4:	60b9      	str	r1, [r7, #8]
 8007fb6:	607a      	str	r2, [r7, #4]
        uint16_t x;
        size_t uxResult;
        uint32_t ulReturnIPAddress = 0U;
 8007fb8:	2300      	movs	r3, #0
 8007fba:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
        const uint16_t usCount = ( uint16_t ) ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY;
 8007fbe:	2304      	movs	r3, #4
 8007fc0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
        BaseType_t xReturn = pdTRUE;
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
        const DNSAnswerRecord_t * pxDNSAnswerRecord;
        IPv46_Address_t xIP_Address;

        struct freertos_addrinfo * pxNewAddress = NULL;
 8007fca:	2300      	movs	r3, #0
 8007fcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

        for( x = 0U; x < pxSet->usAnswers; x++ )
 8007fd0:	2300      	movs	r3, #0
 8007fd2:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 8007fd6:	e1c1      	b.n	800835c <parseDNSAnswer+0x3b0>
        {
            BaseType_t xDoAccept = pdFALSE;
 8007fd8:	2300      	movs	r3, #0
 8007fda:	67fb      	str	r3, [r7, #124]	@ 0x7c

            if( pxSet->usNumARecordsStored >= usCount )
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007fe0:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 8007fe4:	429a      	cmp	r2, r3
 8007fe6:	f240 81c1 	bls.w	800836c <parseDNSAnswer+0x3c0>
            {
                /* Only count ipconfigDNS_CACHE_ADDRESSES_PER_ENTRY number of records. */
                break;
            }

            uxResult = DNS_SkipNameField( pxSet->pucByte,
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	68da      	ldr	r2, [r3, #12]
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	695b      	ldr	r3, [r3, #20]
 8007ff2:	4619      	mov	r1, r3
 8007ff4:	4610      	mov	r0, r2
 8007ff6:	f7ff fbcf 	bl	8007798 <DNS_SkipNameField>
 8007ffa:	6778      	str	r0, [r7, #116]	@ 0x74
                                          pxSet->uxSourceBytesRemaining );

            /* Check for a malformed response. */
            if( uxResult == 0U )
 8007ffc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007ffe:	2b00      	cmp	r3, #0
 8008000:	d103      	bne.n	800800a <parseDNSAnswer+0x5e>
            {
                xReturn = pdFALSE;
 8008002:	2300      	movs	r3, #0
 8008004:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008008:	e1b1      	b.n	800836e <parseDNSAnswer+0x3c2>
            }

            if( uxBytesRead != NULL )
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d005      	beq.n	800801c <parseDNSAnswer+0x70>
            {
                *uxBytesRead += uxResult;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681a      	ldr	r2, [r3, #0]
 8008014:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008016:	441a      	add	r2, r3
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	601a      	str	r2, [r3, #0]
            }

            pxSet->pucByte = &( pxSet->pucByte[ uxResult ] );
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	68da      	ldr	r2, [r3, #12]
 8008020:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008022:	441a      	add	r2, r3
 8008024:	68fb      	ldr	r3, [r7, #12]
 8008026:	60da      	str	r2, [r3, #12]
            pxSet->uxSourceBytesRemaining -= uxResult;
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	695a      	ldr	r2, [r3, #20]
 800802c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800802e:	1ad2      	subs	r2, r2, r3
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	615a      	str	r2, [r3, #20]

            /* Is there enough data for an IPv4 A record answer and, if so,
             * is this an A record? */
            if( pxSet->uxSourceBytesRemaining < sizeof( uint16_t ) )
 8008034:	68fb      	ldr	r3, [r7, #12]
 8008036:	695b      	ldr	r3, [r3, #20]
 8008038:	2b01      	cmp	r3, #1
 800803a:	d803      	bhi.n	8008044 <parseDNSAnswer+0x98>
            {
                xReturn = pdFALSE;
 800803c:	2300      	movs	r3, #0
 800803e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                break;
 8008042:	e194      	b.n	800836e <parseDNSAnswer+0x3c2>
            }

            pxSet->usType = usChar2u16( pxSet->pucByte );
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	4618      	mov	r0, r3
 800804a:	f001 ff5a 	bl	8009f02 <usChar2u16>
 800804e:	4603      	mov	r3, r0
 8008050:	461a      	mov	r2, r3
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	831a      	strh	r2, [r3, #24]

            if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	8b1b      	ldrh	r3, [r3, #24]
 800805a:	2b1c      	cmp	r3, #28
 800805c:	d10c      	bne.n	8008078 <parseDNSAnswer+0xcc>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv6_ADDRESS;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	2210      	movs	r2, #16
 8008062:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	695a      	ldr	r2, [r3, #20]
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	6a1b      	ldr	r3, [r3, #32]
 800806c:	330a      	adds	r3, #10
 800806e:	429a      	cmp	r2, r3
 8008070:	d323      	bcc.n	80080ba <parseDNSAnswer+0x10e>
                {
                    xDoAccept = pdTRUE;
 8008072:	2301      	movs	r3, #1
 8008074:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008076:	e020      	b.n	80080ba <parseDNSAnswer+0x10e>
                }
            }
            else if( pxSet->usType == ( uint16_t ) dnsTYPE_A_HOST )
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	8b1b      	ldrh	r3, [r3, #24]
 800807c:	2b01      	cmp	r3, #1
 800807e:	d11c      	bne.n	80080ba <parseDNSAnswer+0x10e>
            {
                pxSet->uxAddressLength = ipSIZE_OF_IPv4_ADDRESS;
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	2204      	movs	r2, #4
 8008084:	621a      	str	r2, [r3, #32]

                if( pxSet->uxSourceBytesRemaining >= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ) )
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	695a      	ldr	r2, [r3, #20]
 800808a:	68fb      	ldr	r3, [r7, #12]
 800808c:	6a1b      	ldr	r3, [r3, #32]
 800808e:	330a      	adds	r3, #10
 8008090:	429a      	cmp	r2, r3
 8008092:	d312      	bcc.n	80080ba <parseDNSAnswer+0x10e>
                     * invoke the user callback and also store this invalid address in our cache. */
                    void * pvCopyDest;
                    const void * pvCopySource;
                    uint32_t ulTestAddress;

                    pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	68db      	ldr	r3, [r3, #12]
 8008098:	330a      	adds	r3, #10
 800809a:	673b      	str	r3, [r7, #112]	@ 0x70
                    pvCopyDest = &( ulTestAddress );
 800809c:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80080a0:	66fb      	str	r3, [r7, #108]	@ 0x6c
                    ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	6a1b      	ldr	r3, [r3, #32]
 80080a6:	461a      	mov	r2, r3
 80080a8:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 80080aa:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 80080ac:	f019 f804 	bl	80210b8 <memcpy>

                    if( ulTestAddress != 0U )
 80080b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d001      	beq.n	80080ba <parseDNSAnswer+0x10e>
                    {
                        xDoAccept = pdTRUE;
 80080b6:	2301      	movs	r3, #1
 80080b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
            {
                /* Unknown host type, AAAA nor A.
                 * 'xDoAccept' was already initialised as pdFALSE. */
            }

            if( xDoAccept != pdFALSE )
 80080ba:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80080bc:	2b00      	cmp	r3, #0
 80080be:	f000 810d 	beq.w	80082dc <parseDNSAnswer+0x330>
                 * fields of the structure. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	68db      	ldr	r3, [r3, #12]
 80080c6:	66bb      	str	r3, [r7, #104]	@ 0x68

                /* Sanity check the data length of an IPv4 answer. */
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 80080c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080ca:	891b      	ldrh	r3, [r3, #8]
 80080cc:	b29b      	uxth	r3, r3
 80080ce:	021b      	lsls	r3, r3, #8
 80080d0:	b21a      	sxth	r2, r3
 80080d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80080d4:	891b      	ldrh	r3, [r3, #8]
 80080d6:	b29b      	uxth	r3, r3
 80080d8:	0a1b      	lsrs	r3, r3, #8
 80080da:	b29b      	uxth	r3, r3
 80080dc:	b21b      	sxth	r3, r3
 80080de:	4313      	orrs	r3, r2
 80080e0:	b21a      	sxth	r2, r3
                    ( uint16_t ) pxSet->uxAddressLength )
 80080e2:	68fb      	ldr	r3, [r7, #12]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
                if( FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ) ==
 80080e6:	b21b      	sxth	r3, r3
 80080e8:	429a      	cmp	r2, r3
 80080ea:	f040 80d0 	bne.w	800828e <parseDNSAnswer+0x2e2>
                {
                    if( pxSet->uxAddressLength == ipSIZE_OF_IPv6_ADDRESS ) /*No check needed for pxSet->usType as uxAddressLength is set based on usType*/
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	2b10      	cmp	r3, #16
 80080f4:	d11c      	bne.n	8008130 <parseDNSAnswer+0x184>
                    {
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
                                         &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] ),
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	68db      	ldr	r3, [r3, #12]
 80080fa:	330a      	adds	r3, #10
                        ( void ) memcpy( xIP_Address.xIPAddress.xIP_IPv6.ucBytes,
 80080fc:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8008100:	6818      	ldr	r0, [r3, #0]
 8008102:	6859      	ldr	r1, [r3, #4]
 8008104:	689a      	ldr	r2, [r3, #8]
 8008106:	68db      	ldr	r3, [r3, #12]
 8008108:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                                         ipSIZE_OF_IPv6_ADDRESS );

                        if( ppxAddressInfo != NULL )
 800810a:	68bb      	ldr	r3, [r7, #8]
 800810c:	2b00      	cmp	r3, #0
 800810e:	d009      	beq.n	8008124 <parseDNSAnswer+0x178>
                        {
                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET6, xIP_Address.xIPAddress.xIP_IPv6.ucBytes );
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	3334      	adds	r3, #52	@ 0x34
 8008114:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8008118:	210a      	movs	r1, #10
 800811a:	4618      	mov	r0, r3
 800811c:	f7fe fe24 	bl	8006d68 <pxNew_AddrInfo>
 8008120:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIs_IPv6 = pdTRUE;
 8008124:	2301      	movs	r3, #1
 8008126:	653b      	str	r3, [r7, #80]	@ 0x50

                        /* Return non-zero to inform the caller that a valid
                         * IPv6 address was found. */
                        pxSet->ulIPAddress = 1U;
 8008128:	68fb      	ldr	r3, [r7, #12]
 800812a:	2201      	movs	r2, #1
 800812c:	61da      	str	r2, [r3, #28]
 800812e:	e021      	b.n	8008174 <parseDNSAnswer+0x1c8>
                        /*
                         * Use helper variables for memcpy() to remain
                         * compliant with MISRA Rule 21.15.  These should be
                         * optimized away.
                         */
                        pvCopySource = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	68db      	ldr	r3, [r3, #12]
 8008134:	330a      	adds	r3, #10
 8008136:	663b      	str	r3, [r7, #96]	@ 0x60
                        pvCopyDest = &( pxSet->ulIPAddress );
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	331c      	adds	r3, #28
 800813c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                        ( void ) memcpy( pvCopyDest, pvCopySource, pxSet->uxAddressLength );
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	6a1b      	ldr	r3, [r3, #32]
 8008142:	461a      	mov	r2, r3
 8008144:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8008146:	6df8      	ldr	r0, [r7, #92]	@ 0x5c
 8008148:	f018 ffb6 	bl	80210b8 <memcpy>

                        if( ppxAddressInfo != NULL )
 800814c:	68bb      	ldr	r3, [r7, #8]
 800814e:	2b00      	cmp	r3, #0
 8008150:	d00b      	beq.n	800816a <parseDNSAnswer+0x1be>
                        {
                            const uint8_t * ucBytes = ( uint8_t * ) &( pxSet->ulIPAddress );
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	331c      	adds	r3, #28
 8008156:	65bb      	str	r3, [r7, #88]	@ 0x58

                            pxNewAddress = pxNew_AddrInfo( pxSet->pcName, FREERTOS_AF_INET4, ucBytes );
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3334      	adds	r3, #52	@ 0x34
 800815c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800815e:	2102      	movs	r1, #2
 8008160:	4618      	mov	r0, r3
 8008162:	f7fe fe01 	bl	8006d68 <pxNew_AddrInfo>
 8008166:	f8c7 0080 	str.w	r0, [r7, #128]	@ 0x80
                        }

                        xIP_Address.xIPAddress.ulIP_IPv4 = pxSet->ulIPAddress;
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	69db      	ldr	r3, [r3, #28]
 800816e:	643b      	str	r3, [r7, #64]	@ 0x40
                        xIP_Address.xIs_IPv6 = pdFALSE;
 8008170:	2300      	movs	r3, #0
 8008172:	653b      	str	r3, [r7, #80]	@ 0x50
                    }

                    if( pxNewAddress != NULL )
 8008174:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008178:	2b00      	cmp	r3, #0
 800817a:	d013      	beq.n	80081a4 <parseDNSAnswer+0x1f8>
                    {
                        if( *( ppxAddressInfo ) == NULL )
 800817c:	68bb      	ldr	r3, [r7, #8]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	2b00      	cmp	r3, #0
 8008182:	d104      	bne.n	800818e <parseDNSAnswer+0x1e2>
                        {
                            /* For the first address found. */
                            *( ppxAddressInfo ) = pxNewAddress;
 8008184:	68bb      	ldr	r3, [r7, #8]
 8008186:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800818a:	601a      	str	r2, [r3, #0]
 800818c:	e004      	b.n	8008198 <parseDNSAnswer+0x1ec>
                        }
                        else
                        {
                            /* For the next address found. */
                            *( pxSet->ppxLastAddress ) = pxNewAddress;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008192:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8008196:	601a      	str	r2, [r3, #0]
                        }

                        pxSet->ppxLastAddress = &( pxNewAddress->ai_next );
 8008198:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800819c:	f103 021c 	add.w	r2, r3, #28
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	649a      	str	r2, [r3, #72]	@ 0x48

                    #if ( ipconfigDNS_USE_CALLBACKS == 1 )
                    {
                        BaseType_t xCallbackResult;

                        xCallbackResult = xDNSDoCallback( pxSet, ( ppxAddressInfo != NULL ) ? *( ppxAddressInfo ) : NULL );
 80081a4:	68bb      	ldr	r3, [r7, #8]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d002      	beq.n	80081b0 <parseDNSAnswer+0x204>
 80081aa:	68bb      	ldr	r3, [r7, #8]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	e000      	b.n	80081b2 <parseDNSAnswer+0x206>
 80081b0:	2300      	movs	r3, #0
 80081b2:	4619      	mov	r1, r3
 80081b4:	68f8      	ldr	r0, [r7, #12]
 80081b6:	f7ff f979 	bl	80074ac <xDNSDoCallback>
 80081ba:	6578      	str	r0, [r7, #84]	@ 0x54

                        /* See if any asynchronous call was made to FreeRTOS_gethostbyname_a() */
                        if( xCallbackResult != pdFALSE )
 80081bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80081be:	2b00      	cmp	r3, #0
 80081c0:	d002      	beq.n	80081c8 <parseDNSAnswer+0x21c>
                        {
                            /* This device has requested this DNS look-up.
                             * The result may be stored in the DNS cache. */
                            pxSet->xDoStore = pdTRUE;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	2201      	movs	r2, #1
 80081c6:	631a      	str	r2, [r3, #48]	@ 0x30
                    {
                        char cBuffer[ 40 ];

                        /* The reply will only be stored in the DNS cache when the
                         * request was issued by this device. */
                        if( pxSet->xDoStore != pdFALSE )
 80081c8:	68fb      	ldr	r3, [r7, #12]
 80081ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d011      	beq.n	80081f4 <parseDNSAnswer+0x248>
                        {
                            ( void ) FreeRTOS_dns_update(
                                pxSet->pcName,
 80081d0:	68fb      	ldr	r3, [r7, #12]
 80081d2:	f103 0034 	add.w	r0, r3, #52	@ 0x34
                                &xIP_Address,
                                pxDNSAnswerRecord->ulTTL,
 80081d6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80081d8:	685a      	ldr	r2, [r3, #4]
                            ( void ) FreeRTOS_dns_update(
 80081da:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 80081de:	2300      	movs	r3, #0
 80081e0:	9300      	str	r3, [sp, #0]
 80081e2:	2300      	movs	r3, #0
 80081e4:	f7fe fe85 	bl	8006ef2 <FreeRTOS_dns_update>
                                pdFALSE,
                                NULL );
                            pxSet->usNumARecordsStored++; /* Track # of A records stored */
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80081ec:	3301      	adds	r3, #1
 80081ee:	b29a      	uxth	r2, r3
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	849a      	strh	r2, [r3, #36]	@ 0x24
                        }

                        if( pxSet->usType == ( uint16_t ) dnsTYPE_AAAA_HOST )
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	8b1b      	ldrh	r3, [r3, #24]
 80081f8:	2b1c      	cmp	r3, #28
 80081fa:	d11f      	bne.n	800823c <parseDNSAnswer+0x290>
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) xIP_Address.xIPAddress.xIP_IPv6.ucBytes, cBuffer, sizeof( cBuffer ) );
 80081fc:	f107 0214 	add.w	r2, r7, #20
 8008200:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8008204:	2328      	movs	r3, #40	@ 0x28
 8008206:	200a      	movs	r0, #10
 8008208:	f006 fb6c 	bl	800e8e4 <FreeRTOS_inet_ntop>
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	881b      	ldrh	r3, [r3, #0]
 8008212:	b29b      	uxth	r3, r3
 8008214:	4618      	mov	r0, r3
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <parseDNSAnswer+0x27c>
 8008224:	4b58      	ldr	r3, [pc, #352]	@ (8008388 <parseDNSAnswer+0x3dc>)
 8008226:	e000      	b.n	800822a <parseDNSAnswer+0x27e>
 8008228:	4b58      	ldr	r3, [pc, #352]	@ (800838c <parseDNSAnswer+0x3e0>)
 800822a:	f107 0114 	add.w	r1, r7, #20
 800822e:	9300      	str	r3, [sp, #0]
 8008230:	460b      	mov	r3, r1
 8008232:	4601      	mov	r1, r0
 8008234:	4856      	ldr	r0, [pc, #344]	@ (8008390 <parseDNSAnswer+0x3e4>)
 8008236:	f018 fd23 	bl	8020c80 <lUDPLoggingPrintf>
 800823a:	e01f      	b.n	800827c <parseDNSAnswer+0x2d0>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                        else
                        {
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
                                                         ( const void * ) &( pxSet->ulIPAddress ),
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f103 011c 	add.w	r1, r3, #28
                            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET,
 8008242:	f107 0214 	add.w	r2, r7, #20
 8008246:	2328      	movs	r3, #40	@ 0x28
 8008248:	2002      	movs	r0, #2
 800824a:	f006 fb4b 	bl	800e8e4 <FreeRTOS_inet_ntop>
                                                         cBuffer,
                                                         ( socklen_t ) sizeof( cBuffer ) );
                            /* Show what has happened. */
                            FreeRTOS_printf( ( "DNS[0x%04X]: The answer to '%s' (%s) will%s be stored\n",
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	881b      	ldrh	r3, [r3, #0]
 8008254:	b29b      	uxth	r3, r3
 8008256:	4618      	mov	r0, r3
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	f103 0234 	add.w	r2, r3, #52	@ 0x34
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008262:	2b00      	cmp	r3, #0
 8008264:	d001      	beq.n	800826a <parseDNSAnswer+0x2be>
 8008266:	4b48      	ldr	r3, [pc, #288]	@ (8008388 <parseDNSAnswer+0x3dc>)
 8008268:	e000      	b.n	800826c <parseDNSAnswer+0x2c0>
 800826a:	4b48      	ldr	r3, [pc, #288]	@ (800838c <parseDNSAnswer+0x3e0>)
 800826c:	f107 0114 	add.w	r1, r7, #20
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	460b      	mov	r3, r1
 8008274:	4601      	mov	r1, r0
 8008276:	4846      	ldr	r0, [pc, #280]	@ (8008390 <parseDNSAnswer+0x3e4>)
 8008278:	f018 fd02 	bl	8020c80 <lUDPLoggingPrintf>
                                               ( pxSet->xDoStore != 0 ) ? "" : " NOT" ) );
                        }
                    }
                    #endif /* ipconfigUSE_DNS_CACHE */

                    if( ulReturnIPAddress == 0U )
 800827c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8008280:	2b00      	cmp	r3, #0
 8008282:	d119      	bne.n	80082b8 <parseDNSAnswer+0x30c>
                    {
                        /* Here pxSet->ulIPAddress should be not equal tp 0 since pxSet->ulIPAddress is copied from
                         * pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] and os verified to be non zero above. */
                        /* Remember the first IP-address that is found. */
                        ulReturnIPAddress = pxSet->ulIPAddress;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	69db      	ldr	r3, [r3, #28]
 8008288:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800828c:	e014      	b.n	80082b8 <parseDNSAnswer+0x30c>
                    }
                }
                else
                {
                    FreeRTOS_printf( ( "DNS sanity check failed: %u != %u\n",
 800828e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008290:	891b      	ldrh	r3, [r3, #8]
 8008292:	b29b      	uxth	r3, r3
 8008294:	021b      	lsls	r3, r3, #8
 8008296:	b21a      	sxth	r2, r3
 8008298:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800829a:	891b      	ldrh	r3, [r3, #8]
 800829c:	b29b      	uxth	r3, r3
 800829e:	0a1b      	lsrs	r3, r3, #8
 80082a0:	b29b      	uxth	r3, r3
 80082a2:	b21b      	sxth	r3, r3
 80082a4:	4313      	orrs	r3, r2
 80082a6:	b21b      	sxth	r3, r3
 80082a8:	b29b      	uxth	r3, r3
 80082aa:	4619      	mov	r1, r3
 80082ac:	68fb      	ldr	r3, [r7, #12]
 80082ae:	6a1b      	ldr	r3, [r3, #32]
 80082b0:	461a      	mov	r2, r3
 80082b2:	4838      	ldr	r0, [pc, #224]	@ (8008394 <parseDNSAnswer+0x3e8>)
 80082b4:	f018 fce4 	bl	8020c80 <lUDPLoggingPrintf>
                                       FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength ),
                                       ( unsigned ) pxSet->uxAddressLength ) );
                }

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength ] );
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	68da      	ldr	r2, [r3, #12]
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	6a1b      	ldr	r3, [r3, #32]
 80082c0:	330a      	adds	r3, #10
 80082c2:	441a      	add	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= ( sizeof( DNSAnswerRecord_t ) + pxSet->uxAddressLength );
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	695a      	ldr	r2, [r3, #20]
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6a1b      	ldr	r3, [r3, #32]
 80082d0:	1ad3      	subs	r3, r2, r3
 80082d2:	f1a3 020a 	sub.w	r2, r3, #10
 80082d6:	68fb      	ldr	r3, [r7, #12]
 80082d8:	615a      	str	r2, [r3, #20]
 80082da:	e03a      	b.n	8008352 <parseDNSAnswer+0x3a6>
            }
            else if( pxSet->uxSourceBytesRemaining >= sizeof( DNSAnswerRecord_t ) )
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	695b      	ldr	r3, [r3, #20]
 80082e0:	2b09      	cmp	r3, #9
 80082e2:	d936      	bls.n	8008352 <parseDNSAnswer+0x3a6>
                /* Cast the response to DNSAnswerRecord for easy access to fields of the DNS response. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxDNSAnswerRecord = ( ( DNSAnswerRecord_t * ) pxSet->pucByte );
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	68db      	ldr	r3, [r3, #12]
 80082e8:	66bb      	str	r3, [r7, #104]	@ 0x68

                pxSet->pucByte = &( pxSet->pucByte[ sizeof( DNSAnswerRecord_t ) ] );
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	68db      	ldr	r3, [r3, #12]
 80082ee:	f103 020a 	add.w	r2, r3, #10
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	60da      	str	r2, [r3, #12]
                pxSet->uxSourceBytesRemaining -= sizeof( DNSAnswerRecord_t );
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	695b      	ldr	r3, [r3, #20]
 80082fa:	f1a3 020a 	sub.w	r2, r3, #10
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	615a      	str	r2, [r3, #20]

                /* Determine the length of the answer data from the header. */
                usDataLength = FreeRTOS_ntohs( pxDNSAnswerRecord->usDataLength );
 8008302:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008304:	891b      	ldrh	r3, [r3, #8]
 8008306:	b29b      	uxth	r3, r3
 8008308:	021b      	lsls	r3, r3, #8
 800830a:	b21a      	sxth	r2, r3
 800830c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800830e:	891b      	ldrh	r3, [r3, #8]
 8008310:	b29b      	uxth	r3, r3
 8008312:	0a1b      	lsrs	r3, r3, #8
 8008314:	b29b      	uxth	r3, r3
 8008316:	b21b      	sxth	r3, r3
 8008318:	4313      	orrs	r3, r2
 800831a:	b21b      	sxth	r3, r3
 800831c:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66

                /* Jump over the answer. */
                if( pxSet->uxSourceBytesRemaining >= usDataLength )
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	695a      	ldr	r2, [r3, #20]
 8008324:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008328:	429a      	cmp	r2, r3
 800832a:	d30e      	bcc.n	800834a <parseDNSAnswer+0x39e>
                {
                    pxSet->pucByte = &( pxSet->pucByte[ usDataLength ] );
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	68da      	ldr	r2, [r3, #12]
 8008330:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008334:	441a      	add	r2, r3
 8008336:	68fb      	ldr	r3, [r7, #12]
 8008338:	60da      	str	r2, [r3, #12]
                    pxSet->uxSourceBytesRemaining -= usDataLength;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	695a      	ldr	r2, [r3, #20]
 800833e:	f8b7 3066 	ldrh.w	r3, [r7, #102]	@ 0x66
 8008342:	1ad2      	subs	r2, r2, r3
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	615a      	str	r2, [r3, #20]
 8008348:	e003      	b.n	8008352 <parseDNSAnswer+0x3a6>
                }
                else
                {
                    /* Malformed response. */
                    xReturn = pdFALSE;
 800834a:	2300      	movs	r3, #0
 800834c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
                    break;
 8008350:	e00d      	b.n	800836e <parseDNSAnswer+0x3c2>
        for( x = 0U; x < pxSet->usAnswers; x++ )
 8008352:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8008356:	3301      	adds	r3, #1
 8008358:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	88db      	ldrh	r3, [r3, #6]
 8008360:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8008364:	429a      	cmp	r2, r3
 8008366:	f4ff ae37 	bcc.w	8007fd8 <parseDNSAnswer+0x2c>
 800836a:	e000      	b.n	800836e <parseDNSAnswer+0x3c2>
                break;
 800836c:	bf00      	nop
            {
                /* Do nothing */
            }
        }

        return ( xReturn != 0 ) ? ulReturnIPAddress : 0U;
 800836e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008372:	2b00      	cmp	r3, #0
 8008374:	d002      	beq.n	800837c <parseDNSAnswer+0x3d0>
 8008376:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800837a:	e000      	b.n	800837e <parseDNSAnswer+0x3d2>
 800837c:	2300      	movs	r3, #0
    }
 800837e:	4618      	mov	r0, r3
 8008380:	3794      	adds	r7, #148	@ 0x94
 8008382:	46bd      	mov	sp, r7
 8008384:	bd90      	pop	{r4, r7, pc}
 8008386:	bf00      	nop
 8008388:	08023580 	.word	0x08023580
 800838c:	08023584 	.word	0x08023584
 8008390:	0802358c 	.word	0x0802358c
 8008394:	080235c4 	.word	0x080235c4

08008398 <prepareReplyDNSMessage>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the DNS message.
 * @param[in] lNetLength The length of the DNS message.
 */
        void prepareReplyDNSMessage( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                     BaseType_t lNetLength )
        {
 8008398:	b580      	push	{r7, lr}
 800839a:	b08c      	sub	sp, #48	@ 0x30
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]
 80083a0:	6039      	str	r1, [r7, #0]
            UDPPacket_t * pxUDPPacket;
            IPHeader_t * pxIPHeader;
            UDPHeader_t * pxUDPHeader;
            size_t uxDataLength;
            NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80083a6:	62bb      	str	r3, [r7, #40]	@ 0x28
            const size_t uxIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f000 fffd 	bl	80093a8 <uxIPHeaderSizePacket>
 80083ae:	6278      	str	r0, [r7, #36]	@ 0x24

            configASSERT( pxEndPoint != NULL );
 80083b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	d104      	bne.n	80083c0 <prepareReplyDNSMessage+0x28>
 80083b6:	f240 319f 	movw	r1, #927	@ 0x39f
 80083ba:	4865      	ldr	r0, [pc, #404]	@ (8008550 <prepareReplyDNSMessage+0x1b8>)
 80083bc:	f7f9 f858 	bl	8001470 <vAssertCalled>
            pxUDPPacket = ( ( UDPPacket_t * )
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083c4:	623b      	str	r3, [r7, #32]
                            pxNetworkBuffer->pucEthernetBuffer );
            pxIPHeader = &pxUDPPacket->xIPHeader;
 80083c6:	6a3b      	ldr	r3, [r7, #32]
 80083c8:	330e      	adds	r3, #14
 80083ca:	61fb      	str	r3, [r7, #28]

            #if ( ipconfigUSE_IPv6 != 0 )
                if( ( ( uxIPHeaderLength == ipSIZE_OF_IPv6_HEADER ) && ( ( pxIPHeader->ucVersionHeaderLength & 0xf0U ) == 0x60U ) ) )
 80083cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083ce:	2b28      	cmp	r3, #40	@ 0x28
 80083d0:	d150      	bne.n	8008474 <prepareReplyDNSMessage+0xdc>
 80083d2:	69fb      	ldr	r3, [r7, #28]
 80083d4:	781b      	ldrb	r3, [r3, #0]
 80083d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80083da:	2b60      	cmp	r3, #96	@ 0x60
 80083dc:	d14a      	bne.n	8008474 <prepareReplyDNSMessage+0xdc>
                {
                    UDPPacket_IPv6_t * xUDPPacket_IPv6;
                    IPHeader_IPv6_t * pxIPHeader_IPv6;

                    xUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083e2:	61bb      	str	r3, [r7, #24]
                    pxIPHeader_IPv6 = &( xUDPPacket_IPv6->xIPHeader );
 80083e4:	69bb      	ldr	r3, [r7, #24]
 80083e6:	330e      	adds	r3, #14
 80083e8:	617b      	str	r3, [r7, #20]
                    pxUDPHeader = &xUDPPacket_IPv6->xUDPHeader;
 80083ea:	69bb      	ldr	r3, [r7, #24]
 80083ec:	3336      	adds	r3, #54	@ 0x36
 80083ee:	613b      	str	r3, [r7, #16]

                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	b29b      	uxth	r3, r3
 80083f4:	3308      	adds	r3, #8
 80083f6:	b29b      	uxth	r3, r3
 80083f8:	021b      	lsls	r3, r3, #8
 80083fa:	b29a      	uxth	r2, r3
 80083fc:	683b      	ldr	r3, [r7, #0]
 80083fe:	b29b      	uxth	r3, r3
 8008400:	3308      	adds	r3, #8
 8008402:	0a1b      	lsrs	r3, r3, #8
 8008404:	b29b      	uxth	r3, r3
 8008406:	4313      	orrs	r3, r2
 8008408:	b29a      	uxth	r2, r3
 800840a:	697b      	ldr	r3, [r7, #20]
 800840c:	809a      	strh	r2, [r3, #4]

                    {
                        ( void ) memcpy( pxIPHeader_IPv6->xDestinationAddress.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800840e:	697b      	ldr	r3, [r7, #20]
 8008410:	f103 0018 	add.w	r0, r3, #24
 8008414:	697b      	ldr	r3, [r7, #20]
 8008416:	3308      	adds	r3, #8
 8008418:	2210      	movs	r2, #16
 800841a:	4619      	mov	r1, r3
 800841c:	f018 fe4c 	bl	80210b8 <memcpy>
                        ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8008420:	697b      	ldr	r3, [r7, #20]
 8008422:	f103 0008 	add.w	r0, r3, #8
 8008426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008428:	3338      	adds	r3, #56	@ 0x38
 800842a:	2210      	movs	r2, #16
 800842c:	4619      	mov	r1, r3
 800842e:	f018 fe43 	bl	80210b8 <memcpy>
                    }

                    xUDPPacket_IPv6->xUDPHeader.usLength = FreeRTOS_htons( ( uint16_t ) lNetLength + ipSIZE_OF_UDP_HEADER );
 8008432:	683b      	ldr	r3, [r7, #0]
 8008434:	b29b      	uxth	r3, r3
 8008436:	3308      	adds	r3, #8
 8008438:	b29b      	uxth	r3, r3
 800843a:	021b      	lsls	r3, r3, #8
 800843c:	b29a      	uxth	r2, r3
 800843e:	683b      	ldr	r3, [r7, #0]
 8008440:	b29b      	uxth	r3, r3
 8008442:	3308      	adds	r3, #8
 8008444:	0a1b      	lsrs	r3, r3, #8
 8008446:	b29b      	uxth	r3, r3
 8008448:	4313      	orrs	r3, r2
 800844a:	b29a      	uxth	r2, r3
 800844c:	69bb      	ldr	r3, [r7, #24]
 800844e:	875a      	strh	r2, [r3, #58]	@ 0x3a
                    vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 8008450:	693b      	ldr	r3, [r7, #16]
 8008452:	781a      	ldrb	r2, [r3, #0]
 8008454:	785b      	ldrb	r3, [r3, #1]
 8008456:	021b      	lsls	r3, r3, #8
 8008458:	4313      	orrs	r3, r2
 800845a:	81fb      	strh	r3, [r7, #14]
 800845c:	693b      	ldr	r3, [r7, #16]
 800845e:	885b      	ldrh	r3, [r3, #2]
 8008460:	b29a      	uxth	r2, r3
 8008462:	693b      	ldr	r3, [r7, #16]
 8008464:	801a      	strh	r2, [r3, #0]
 8008466:	693b      	ldr	r3, [r7, #16]
 8008468:	89fa      	ldrh	r2, [r7, #14]
 800846a:	805a      	strh	r2, [r3, #2]
                    uxDataLength = ( size_t ) lNetLength + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 800846c:	683b      	ldr	r3, [r7, #0]
 800846e:	333e      	adds	r3, #62	@ 0x3e
 8008470:	62fb      	str	r3, [r7, #44]	@ 0x2c
                {
 8008472:	e066      	b.n	8008542 <prepareReplyDNSMessage+0x1aa>
                }
                else
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            {
                pxUDPHeader = &pxUDPPacket->xUDPHeader;
 8008474:	6a3b      	ldr	r3, [r7, #32]
 8008476:	3322      	adds	r3, #34	@ 0x22
 8008478:	613b      	str	r3, [r7, #16]
                /* HT: started using defines like 'ipSIZE_OF_xxx' */
                pxIPHeader->usLength = FreeRTOS_htons( ( uint16_t ) lNetLength +
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	b29a      	uxth	r2, r3
 800847e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008480:	b29b      	uxth	r3, r3
 8008482:	4413      	add	r3, r2
 8008484:	b29b      	uxth	r3, r3
 8008486:	3308      	adds	r3, #8
 8008488:	b29b      	uxth	r3, r3
 800848a:	021b      	lsls	r3, r3, #8
 800848c:	b29a      	uxth	r2, r3
 800848e:	683b      	ldr	r3, [r7, #0]
 8008490:	b29b      	uxth	r3, r3
 8008492:	4619      	mov	r1, r3
 8008494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008496:	440b      	add	r3, r1
 8008498:	3308      	adds	r3, #8
 800849a:	0a1b      	lsrs	r3, r3, #8
 800849c:	b29b      	uxth	r3, r3
 800849e:	4313      	orrs	r3, r2
 80084a0:	b29a      	uxth	r2, r3
 80084a2:	69fb      	ldr	r3, [r7, #28]
 80084a4:	805a      	strh	r2, [r3, #2]
                                                       uxIPHeaderLength +
                                                       ipSIZE_OF_UDP_HEADER );

                /* HT:endian: should not be translated, copying from packet to packet */
                if( pxIPHeader->ulDestinationIPAddress == ipMDNS_IP_ADDRESS )
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	691b      	ldr	r3, [r3, #16]
 80084aa:	4a2a      	ldr	r2, [pc, #168]	@ (8008554 <prepareReplyDNSMessage+0x1bc>)
 80084ac:	4293      	cmp	r3, r2
 80084ae:	d103      	bne.n	80084b8 <prepareReplyDNSMessage+0x120>
                {
                    pxIPHeader->ucTimeToLive = ipMDNS_TIME_TO_LIVE;
 80084b0:	69fb      	ldr	r3, [r7, #28]
 80084b2:	22ff      	movs	r2, #255	@ 0xff
 80084b4:	721a      	strb	r2, [r3, #8]
 80084b6:	e006      	b.n	80084c6 <prepareReplyDNSMessage+0x12e>
                }
                else
                {
                    pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80084b8:	69fb      	ldr	r3, [r7, #28]
 80084ba:	68da      	ldr	r2, [r3, #12]
 80084bc:	69fb      	ldr	r3, [r7, #28]
 80084be:	611a      	str	r2, [r3, #16]
                    pxIPHeader->ucTimeToLive = ipconfigUDP_TIME_TO_LIVE;
 80084c0:	69fb      	ldr	r3, [r7, #28]
 80084c2:	2280      	movs	r2, #128	@ 0x80
 80084c4:	721a      	strb	r2, [r3, #8]
                }

                pxIPHeader->ulSourceIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 80084c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084c8:	681a      	ldr	r2, [r3, #0]
 80084ca:	69fb      	ldr	r3, [r7, #28]
 80084cc:	60da      	str	r2, [r3, #12]
                pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 80084ce:	4b22      	ldr	r3, [pc, #136]	@ (8008558 <prepareReplyDNSMessage+0x1c0>)
 80084d0:	881b      	ldrh	r3, [r3, #0]
 80084d2:	021b      	lsls	r3, r3, #8
 80084d4:	b21a      	sxth	r2, r3
 80084d6:	4b20      	ldr	r3, [pc, #128]	@ (8008558 <prepareReplyDNSMessage+0x1c0>)
 80084d8:	881b      	ldrh	r3, [r3, #0]
 80084da:	0a1b      	lsrs	r3, r3, #8
 80084dc:	b29b      	uxth	r3, r3
 80084de:	b21b      	sxth	r3, r3
 80084e0:	4313      	orrs	r3, r2
 80084e2:	b21b      	sxth	r3, r3
 80084e4:	b29a      	uxth	r2, r3
 80084e6:	69fb      	ldr	r3, [r7, #28]
 80084e8:	809a      	strh	r2, [r3, #4]
                 * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
                 */
                #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                    pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
                #else
                    pxIPHeader->usFragmentOffset = 0U;
 80084ea:	69fb      	ldr	r3, [r7, #28]
 80084ec:	2200      	movs	r2, #0
 80084ee:	719a      	strb	r2, [r3, #6]
 80084f0:	2200      	movs	r2, #0
 80084f2:	71da      	strb	r2, [r3, #7]
                #endif
                usPacketIdentifier++;
 80084f4:	4b18      	ldr	r3, [pc, #96]	@ (8008558 <prepareReplyDNSMessage+0x1c0>)
 80084f6:	881b      	ldrh	r3, [r3, #0]
 80084f8:	3301      	adds	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	4b16      	ldr	r3, [pc, #88]	@ (8008558 <prepareReplyDNSMessage+0x1c0>)
 80084fe:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( ( uint32_t ) lNetLength +
 8008500:	683b      	ldr	r3, [r7, #0]
 8008502:	b29b      	uxth	r3, r3
 8008504:	3308      	adds	r3, #8
 8008506:	b29b      	uxth	r3, r3
 8008508:	021b      	lsls	r3, r3, #8
 800850a:	b29a      	uxth	r2, r3
 800850c:	683b      	ldr	r3, [r7, #0]
 800850e:	3308      	adds	r3, #8
 8008510:	0a1b      	lsrs	r3, r3, #8
 8008512:	b29b      	uxth	r3, r3
 8008514:	4313      	orrs	r3, r2
 8008516:	b29a      	uxth	r2, r3
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	809a      	strh	r2, [r3, #4]
                                                        ipSIZE_OF_UDP_HEADER );
                vFlip_16( pxUDPHeader->usSourcePort, pxUDPHeader->usDestinationPort );
 800851c:	693b      	ldr	r3, [r7, #16]
 800851e:	781a      	ldrb	r2, [r3, #0]
 8008520:	785b      	ldrb	r3, [r3, #1]
 8008522:	021b      	lsls	r3, r3, #8
 8008524:	4313      	orrs	r3, r2
 8008526:	81bb      	strh	r3, [r7, #12]
 8008528:	693b      	ldr	r3, [r7, #16]
 800852a:	885b      	ldrh	r3, [r3, #2]
 800852c:	b29a      	uxth	r2, r3
 800852e:	693b      	ldr	r3, [r7, #16]
 8008530:	801a      	strh	r2, [r3, #0]
 8008532:	693b      	ldr	r3, [r7, #16]
 8008534:	89ba      	ldrh	r2, [r7, #12]
 8008536:	805a      	strh	r2, [r3, #2]

                /* Important: tell NIC driver how many bytes must be sent */
                uxDataLength = ( ( size_t ) lNetLength ) + uxIPHeaderLength + ipSIZE_OF_UDP_HEADER + ipSIZE_OF_ETH_HEADER;
 8008538:	683a      	ldr	r2, [r7, #0]
 800853a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800853c:	4413      	add	r3, r2
 800853e:	3316      	adds	r3, #22
 8008540:	62fb      	str	r3, [r7, #44]	@ 0x2c
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxUDPPacket, uxDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = uxDataLength;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008546:	629a      	str	r2, [r3, #40]	@ 0x28
        }
 8008548:	bf00      	nop
 800854a:	3730      	adds	r7, #48	@ 0x30
 800854c:	46bd      	mov	sp, r7
 800854e:	bd80      	pop	{r7, pc}
 8008550:	0802351c 	.word	0x0802351c
 8008554:	fb0000e0 	.word	0xfb0000e0
 8008558:	20000ea0 	.word	0x20000ea0

0800855c <ProcessICMPPacket>:
 *
 * @return eReleaseBuffer when the message buffer should be released, or eReturnEthernetFrame
 *                        when the packet should be returned.
 */
    eFrameProcessingResult_t ProcessICMPPacket( const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
        eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]

        iptraceICMP_PACKET_RECEIVED();

        configASSERT( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) );
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800856c:	2b29      	cmp	r3, #41	@ 0x29
 800856e:	d803      	bhi.n	8008578 <ProcessICMPPacket+0x1c>
 8008570:	2159      	movs	r1, #89	@ 0x59
 8008572:	4811      	ldr	r0, [pc, #68]	@ (80085b8 <ProcessICMPPacket+0x5c>)
 8008574:	f7f8 ff7c 	bl	8001470 <vAssertCalled>

        if( pxNetworkBuffer->xDataLength >= sizeof( ICMPPacket_t ) )
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800857c:	2b29      	cmp	r3, #41	@ 0x29
 800857e:	d915      	bls.n	80085ac <ProcessICMPPacket+0x50>
             * fields of ICMP packet. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            ICMPPacket_t * pxICMPPacket = ( ( ICMPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008584:	60bb      	str	r3, [r7, #8]

            switch( pxICMPPacket->xICMPHeader.ucTypeOfMessage )
 8008586:	68bb      	ldr	r3, [r7, #8]
 8008588:	f893 3022 	ldrb.w	r3, [r3, #34]	@ 0x22
 800858c:	2b00      	cmp	r3, #0
 800858e:	d008      	beq.n	80085a2 <ProcessICMPPacket+0x46>
 8008590:	2b08      	cmp	r3, #8
 8008592:	d10a      	bne.n	80085aa <ProcessICMPPacket+0x4e>
            {
                case ipICMP_ECHO_REQUEST:
                    #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 )
                    {
                        eReturn = prvProcessICMPEchoRequest( pxICMPPacket, pxNetworkBuffer );
 8008594:	6879      	ldr	r1, [r7, #4]
 8008596:	68b8      	ldr	r0, [r7, #8]
 8008598:	f000 f810 	bl	80085bc <prvProcessICMPEchoRequest>
 800859c:	4603      	mov	r3, r0
 800859e:	73fb      	strb	r3, [r7, #15]
                    }
                    #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) */
                    break;
 80085a0:	e004      	b.n	80085ac <ProcessICMPPacket+0x50>

                case ipICMP_ECHO_REPLY:
                    #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                    {
                        prvProcessICMPEchoReply( pxICMPPacket );
 80085a2:	68b8      	ldr	r0, [r7, #8]
 80085a4:	f000 f836 	bl	8008614 <prvProcessICMPEchoReply>
                    }
                    #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
                    break;
 80085a8:	e000      	b.n	80085ac <ProcessICMPPacket+0x50>

                default:
                    /* Only ICMP echo packets are handled. */
                    break;
 80085aa:	bf00      	nop
            }
        }

        return eReturn;
 80085ac:	7bfb      	ldrb	r3, [r7, #15]
    }
 80085ae:	4618      	mov	r0, r3
 80085b0:	3710      	adds	r7, #16
 80085b2:	46bd      	mov	sp, r7
 80085b4:	bd80      	pop	{r7, pc}
 80085b6:	bf00      	nop
 80085b8:	080235e8 	.word	0x080235e8

080085bc <prvProcessICMPEchoRequest>:
 * @param pxNetworkBuffer Pointer to the network buffer containing the ICMP packet.
 * @returns Function returns eReturnEthernetFrame.
 */
    static eFrameProcessingResult_t prvProcessICMPEchoRequest( ICMPPacket_t * const pxICMPPacket,
                                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
 80085c4:	6039      	str	r1, [r7, #0]
        ICMPHeader_t * pxICMPHeader;
        IPHeader_t * pxIPHeader;
        uint32_t ulIPAddress;

        pxICMPHeader = &( pxICMPPacket->xICMPHeader );
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	3322      	adds	r3, #34	@ 0x22
 80085ca:	617b      	str	r3, [r7, #20]
        pxIPHeader = &( pxICMPPacket->xIPHeader );
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	330e      	adds	r3, #14
 80085d0:	613b      	str	r3, [r7, #16]

        /* The checksum can be checked here - but a ping reply should be
         * returned even if the checksum is incorrect so the other end can
         * tell that the ping was received - even if the ping reply contains
         * invalid data. */
        pxICMPHeader->ucTypeOfMessage = ( uint8_t ) ipICMP_ECHO_REPLY;
 80085d2:	697b      	ldr	r3, [r7, #20]
 80085d4:	2200      	movs	r2, #0
 80085d6:	701a      	strb	r2, [r3, #0]
        ulIPAddress = pxIPHeader->ulDestinationIPAddress;
 80085d8:	693b      	ldr	r3, [r7, #16]
 80085da:	691b      	ldr	r3, [r3, #16]
 80085dc:	60fb      	str	r3, [r7, #12]
        pxIPHeader->ulDestinationIPAddress = pxIPHeader->ulSourceIPAddress;
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	68da      	ldr	r2, [r3, #12]
 80085e2:	693b      	ldr	r3, [r7, #16]
 80085e4:	611a      	str	r2, [r3, #16]
        pxIPHeader->ulSourceIPAddress = ulIPAddress;
 80085e6:	693b      	ldr	r3, [r7, #16]
 80085e8:	68fa      	ldr	r2, [r7, #12]
 80085ea:	60da      	str	r2, [r3, #12]
        /* Update the TTL field. */
        pxIPHeader->ucTimeToLive = ipconfigICMP_TIME_TO_LIVE;
 80085ec:	693b      	ldr	r3, [r7, #16]
 80085ee:	2240      	movs	r2, #64	@ 0x40
 80085f0:	721a      	strb	r2, [r3, #8]
         * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
         */
        #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
            pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
        #else
            pxIPHeader->usFragmentOffset = 0U;
 80085f2:	693b      	ldr	r3, [r7, #16]
 80085f4:	2200      	movs	r2, #0
 80085f6:	719a      	strb	r2, [r3, #6]
 80085f8:	2200      	movs	r2, #0
 80085fa:	71da      	strb	r2, [r3, #7]
            /* Just to prevent compiler warnings about unused parameters. */
            ( void ) pxNetworkBuffer;

            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPHeader->usChecksum = 0U;
 80085fc:	697b      	ldr	r3, [r7, #20]
 80085fe:	2200      	movs	r2, #0
 8008600:	709a      	strb	r2, [r3, #2]
 8008602:	2200      	movs	r2, #0
 8008604:	70da      	strb	r2, [r3, #3]
        }
        #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

        return eReturnEthernetFrame;
 8008606:	2302      	movs	r3, #2
    }
 8008608:	4618      	mov	r0, r3
 800860a:	371c      	adds	r7, #28
 800860c:	46bd      	mov	sp, r7
 800860e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008612:	4770      	bx	lr

08008614 <prvProcessICMPEchoReply>:
 * @brief Process an ICMP echo reply.
 *
 * @param[in] pxICMPPacket The IP packet that contains the ICMP message.
 */
    static void prvProcessICMPEchoReply( ICMPPacket_t * const pxICMPPacket )
    {
 8008614:	b580      	push	{r7, lr}
 8008616:	b086      	sub	sp, #24
 8008618:	af00      	add	r7, sp, #0
 800861a:	6078      	str	r0, [r7, #4]
        ePingReplyStatus_t eStatus = eSuccess;
 800861c:	2300      	movs	r3, #0
 800861e:	75fb      	strb	r3, [r7, #23]
        uint16_t usDataLength, usCount;
        uint8_t * pucByte;

        /* Find the total length of the IP packet. */
        usDataLength = pxICMPPacket->xIPHeader.usLength;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	7c1a      	ldrb	r2, [r3, #16]
 8008624:	7c5b      	ldrb	r3, [r3, #17]
 8008626:	021b      	lsls	r3, r3, #8
 8008628:	4313      	orrs	r3, r2
 800862a:	81fb      	strh	r3, [r7, #14]
        usDataLength = FreeRTOS_ntohs( usDataLength );
 800862c:	89fb      	ldrh	r3, [r7, #14]
 800862e:	021b      	lsls	r3, r3, #8
 8008630:	b21a      	sxth	r2, r3
 8008632:	89fb      	ldrh	r3, [r7, #14]
 8008634:	0a1b      	lsrs	r3, r3, #8
 8008636:	b29b      	uxth	r3, r3
 8008638:	b21b      	sxth	r3, r3
 800863a:	4313      	orrs	r3, r2
 800863c:	b21b      	sxth	r3, r3
 800863e:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the IP headers to obtain the length of the ICMP
         * message itself. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_IPv4_HEADER );
 8008640:	89fb      	ldrh	r3, [r7, #14]
 8008642:	3b14      	subs	r3, #20
 8008644:	81fb      	strh	r3, [r7, #14]

        /* Remove the length of the ICMP header, to obtain the length of
         * data contained in the ping. */
        usDataLength = ( uint16_t ) ( ( ( uint32_t ) usDataLength ) - ipSIZE_OF_ICMPv4_HEADER );
 8008646:	89fb      	ldrh	r3, [r7, #14]
 8008648:	3b08      	subs	r3, #8
 800864a:	81fb      	strh	r3, [r7, #14]

        /* Checksum has already been checked before in prvProcessIPPacket */

        /* Find the first byte of the data within the ICMP packet. */
        pucByte = ( uint8_t * ) pxICMPPacket;
 800864c:	687b      	ldr	r3, [r7, #4]
 800864e:	613b      	str	r3, [r7, #16]
        pucByte = &( pucByte[ sizeof( ICMPPacket_t ) ] );
 8008650:	693b      	ldr	r3, [r7, #16]
 8008652:	332a      	adds	r3, #42	@ 0x2a
 8008654:	613b      	str	r3, [r7, #16]

        /* Check each byte. */
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8008656:	2300      	movs	r3, #0
 8008658:	82bb      	strh	r3, [r7, #20]
 800865a:	e00c      	b.n	8008676 <prvProcessICMPEchoReply+0x62>
        {
            if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800865c:	693b      	ldr	r3, [r7, #16]
 800865e:	781b      	ldrb	r3, [r3, #0]
 8008660:	2b78      	cmp	r3, #120	@ 0x78
 8008662:	d002      	beq.n	800866a <prvProcessICMPEchoReply+0x56>
            {
                eStatus = eInvalidData;
 8008664:	2302      	movs	r3, #2
 8008666:	75fb      	strb	r3, [r7, #23]
                break;
 8008668:	e009      	b.n	800867e <prvProcessICMPEchoReply+0x6a>
            }

            pucByte++;
 800866a:	693b      	ldr	r3, [r7, #16]
 800866c:	3301      	adds	r3, #1
 800866e:	613b      	str	r3, [r7, #16]
        for( usCount = 0; usCount < usDataLength; usCount++ )
 8008670:	8abb      	ldrh	r3, [r7, #20]
 8008672:	3301      	adds	r3, #1
 8008674:	82bb      	strh	r3, [r7, #20]
 8008676:	8aba      	ldrh	r2, [r7, #20]
 8008678:	89fb      	ldrh	r3, [r7, #14]
 800867a:	429a      	cmp	r2, r3
 800867c:	d3ee      	bcc.n	800865c <prvProcessICMPEchoReply+0x48>
        }

        /* Call back into the application to pass it the result. */
        vApplicationPingReplyHook( eStatus, pxICMPPacket->xICMPHeader.usIdentifier );
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8008682:	b29a      	uxth	r2, r3
 8008684:	7dfb      	ldrb	r3, [r7, #23]
 8008686:	4611      	mov	r1, r2
 8008688:	4618      	mov	r0, r3
 800868a:	f7f8 ffa7 	bl	80015dc <vApplicationPingReplyHook>
    }
 800868e:	bf00      	nop
 8008690:	3718      	adds	r7, #24
 8008692:	46bd      	mov	sp, r7
 8008694:	bd80      	pop	{r7, pc}
	...

08008698 <prvIPTask>:

/* MISRA Ref 8.13.1 [Not decorating a pointer to const parameter with const] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-813 */
/* coverity[misra_c_2012_rule_8_13_violation] */
static void prvIPTask( void * pvParameters )
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
    /* Just to prevent compiler warnings about unused parameters. */
    ( void ) pvParameters;

    prvIPTask_Initialise();
 80086a0:	f000 f90e 	bl	80088c0 <prvIPTask_Initialise>

    FreeRTOS_debug_printf( ( "prvIPTask started\n" ) );
 80086a4:	4802      	ldr	r0, [pc, #8]	@ (80086b0 <prvIPTask+0x18>)
 80086a6:	f018 faeb 	bl	8020c80 <lUDPLoggingPrintf>

    /* Loop, processing IP events. */
    while( ipFOREVER() == pdTRUE )
    {
        prvProcessIPEventsAndTimers();
 80086aa:	f000 f803 	bl	80086b4 <prvProcessIPEventsAndTimers>
 80086ae:	e7fc      	b.n	80086aa <prvIPTask+0x12>
 80086b0:	08023618 	.word	0x08023618

080086b4 <prvProcessIPEventsAndTimers>:

/**
 * @brief Process the events sent to the IP task and process the timers.
 */
static void prvProcessIPEventsAndTimers( void )
{
 80086b4:	b590      	push	{r4, r7, lr}
 80086b6:	b08d      	sub	sp, #52	@ 0x34
 80086b8:	af00      	add	r7, sp, #0

    ipconfigWATCHDOG_TIMER();

    /* Check the ARP, DHCP and TCP timers to see if there is any periodic
     * or timeout processing to perform. */
    vCheckNetworkTimers();
 80086ba:	f000 ff09 	bl	80094d0 <vCheckNetworkTimers>

    /* Calculate the acceptable maximum sleep time. */
    xNextIPSleep = xCalculateSleepTime();
 80086be:	f000 fea7 	bl	8009410 <xCalculateSleepTime>
 80086c2:	62f8      	str	r0, [r7, #44]	@ 0x2c

    /* Wait until there is something to do. If the following call exits
     * due to a time out rather than a message being received, set a
     * 'NoEvent' value. */
    if( xQueueReceive( xNetworkEventQueue, ( void * ) &xReceivedEvent, xNextIPSleep ) == pdFALSE )
 80086c4:	4b7c      	ldr	r3, [pc, #496]	@ (80088b8 <prvProcessIPEventsAndTimers+0x204>)
 80086c6:	681b      	ldr	r3, [r3, #0]
 80086c8:	f107 0118 	add.w	r1, r7, #24
 80086cc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80086ce:	4618      	mov	r0, r3
 80086d0:	f7fa fbd8 	bl	8002e84 <xQueueReceive>
 80086d4:	4603      	mov	r3, r0
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	d101      	bne.n	80086de <prvProcessIPEventsAndTimers+0x2a>
    {
        xReceivedEvent.eEventType = eNoEvent;
 80086da:	23ff      	movs	r3, #255	@ 0xff
 80086dc:	763b      	strb	r3, [r7, #24]
    }

    #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
    {
        if( xReceivedEvent.eEventType != eNoEvent )
 80086de:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80086e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086e6:	d00d      	beq.n	8008704 <prvProcessIPEventsAndTimers+0x50>
        {
            UBaseType_t uxCount;

            uxCount = uxQueueSpacesAvailable( xNetworkEventQueue );
 80086e8:	4b73      	ldr	r3, [pc, #460]	@ (80088b8 <prvProcessIPEventsAndTimers+0x204>)
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4618      	mov	r0, r3
 80086ee:	f7fa fda1 	bl	8003234 <uxQueueSpacesAvailable>
 80086f2:	62b8      	str	r0, [r7, #40]	@ 0x28

            if( uxQueueMinimumSpace > uxCount )
 80086f4:	4b71      	ldr	r3, [pc, #452]	@ (80088bc <prvProcessIPEventsAndTimers+0x208>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80086fa:	429a      	cmp	r2, r3
 80086fc:	d202      	bcs.n	8008704 <prvProcessIPEventsAndTimers+0x50>
            {
                uxQueueMinimumSpace = uxCount;
 80086fe:	4a6f      	ldr	r2, [pc, #444]	@ (80088bc <prvProcessIPEventsAndTimers+0x208>)
 8008700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008702:	6013      	str	r3, [r2, #0]
    }
    #endif /* ipconfigCHECK_IP_QUEUE_SPACE */

    iptraceNETWORK_EVENT_RECEIVED( xReceivedEvent.eEventType );

    switch( xReceivedEvent.eEventType )
 8008704:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8008708:	3301      	adds	r3, #1
 800870a:	2b0e      	cmp	r3, #14
 800870c:	f200 80ca 	bhi.w	80088a4 <prvProcessIPEventsAndTimers+0x1f0>
 8008710:	a201      	add	r2, pc, #4	@ (adr r2, 8008718 <prvProcessIPEventsAndTimers+0x64>)
 8008712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008716:	bf00      	nop
 8008718:	080088a5 	.word	0x080088a5
 800871c:	08008755 	.word	0x08008755
 8008720:	0800875f 	.word	0x0800875f
 8008724:	08008769 	.word	0x08008769
 8008728:	08008775 	.word	0x08008775
 800872c:	0800883f 	.word	0x0800883f
 8008730:	08008849 	.word	0x08008849
 8008734:	0800885d 	.word	0x0800885d
 8008738:	08008865 	.word	0x08008865
 800873c:	08008889 	.word	0x08008889
 8008740:	0800877f 	.word	0x0800877f
 8008744:	08008835 	.word	0x08008835
 8008748:	08008853 	.word	0x08008853
 800874c:	080088a5 	.word	0x080088a5
 8008750:	0800888f 	.word	0x0800888f
    {
        case eNetworkDownEvent:
            /* Attempt to establish a connection. */
            prvProcessNetworkDownEvent( ( ( NetworkInterface_t * ) xReceivedEvent.pvData ) );
 8008754:	69fb      	ldr	r3, [r7, #28]
 8008756:	4618      	mov	r0, r3
 8008758:	f001 f9cc 	bl	8009af4 <prvProcessNetworkDownEvent>
            break;
 800875c:	e0a5      	b.n	80088aa <prvProcessIPEventsAndTimers+0x1f6>
        case eNetworkRxEvent:

            /* The network hardware driver has received a new packet.  A
             * pointer to the received buffer is located in the pvData member
             * of the received event structure. */
            prvHandleEthernetPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800875e:	69fb      	ldr	r3, [r7, #28]
 8008760:	4618      	mov	r0, r3
 8008762:	f000 f955 	bl	8008a10 <prvHandleEthernetPacket>
            break;
 8008766:	e0a0      	b.n	80088aa <prvProcessIPEventsAndTimers+0x1f6>

        case eNetworkTxEvent:

            /* Send a network packet. The ownership will  be transferred to
             * the driver, which will release it after delivery. */
            prvForwardTxPacket( ( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData ), pdTRUE );
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	2101      	movs	r1, #1
 800876c:	4618      	mov	r0, r3
 800876e:	f000 f95d 	bl	8008a2c <prvForwardTxPacket>
            break;
 8008772:	e09a      	b.n	80088aa <prvProcessIPEventsAndTimers+0x1f6>

        case eARPTimerEvent:
            /* The ARP timer has expired, process the ARP cache. */
            #if ( ipconfigUSE_IPv4 != 0 )
                vARPAgeCache();
 8008774:	f7fe f94e 	bl	8006a14 <vARPAgeCache>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            #if ( ipconfigUSE_IPv6 != 0 )
                vNDAgeCache();
 8008778:	f002 fdb6 	bl	800b2e8 <vNDAgeCache>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            break;
 800877c:	e095      	b.n	80088aa <prvProcessIPEventsAndTimers+0x1f6>
            /* FreeRTOS_bind (a user API) wants the IP-task to bind a socket
             * to a port. The port number is communicated in the socket field
             * usLocalPort. vSocketBind() will actually bind the socket and the
             * API will unblock as soon as the eSOCKET_BOUND event is
             * triggered. */
            pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 800877e:	69fb      	ldr	r3, [r7, #28]
 8008780:	623b      	str	r3, [r7, #32]
            xAddress.sin_len = ( uint8_t ) sizeof( xAddress );
 8008782:	2318      	movs	r3, #24
 8008784:	703b      	strb	r3, [r7, #0]

            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8008786:	6a3b      	ldr	r3, [r7, #32]
 8008788:	7a1b      	ldrb	r3, [r3, #8]
 800878a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800878e:	b2db      	uxtb	r3, r3
 8008790:	2b00      	cmp	r3, #0
 8008792:	d002      	beq.n	800879a <prvProcessIPEventsAndTimers+0xe6>
 8008794:	2b01      	cmp	r3, #1
 8008796:	d01a      	beq.n	80087ce <prvProcessIPEventsAndTimers+0x11a>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 8008798:	e02c      	b.n	80087f4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET;
 800879a:	2302      	movs	r3, #2
 800879c:	707b      	strb	r3, [r7, #1]
                        xAddress.sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800879e:	6a3b      	ldr	r3, [r7, #32]
 80087a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a2:	061a      	lsls	r2, r3, #24
 80087a4:	6a3b      	ldr	r3, [r7, #32]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087a8:	021b      	lsls	r3, r3, #8
 80087aa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80087ae:	431a      	orrs	r2, r3
 80087b0:	6a3b      	ldr	r3, [r7, #32]
 80087b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087b4:	0a1b      	lsrs	r3, r3, #8
 80087b6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80087ba:	431a      	orrs	r2, r3
 80087bc:	6a3b      	ldr	r3, [r7, #32]
 80087be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80087c0:	0e1b      	lsrs	r3, r3, #24
 80087c2:	4313      	orrs	r3, r2
 80087c4:	60bb      	str	r3, [r7, #8]
                        pxSocket->xLocalAddress.ulIP_IPv4 = 0;
 80087c6:	6a3b      	ldr	r3, [r7, #32]
 80087c8:	2200      	movs	r2, #0
 80087ca:	629a      	str	r2, [r3, #40]	@ 0x28
                        break;
 80087cc:	e012      	b.n	80087f4 <prvProcessIPEventsAndTimers+0x140>
                        xAddress.sin_family = FREERTOS_AF_INET6;
 80087ce:	230a      	movs	r3, #10
 80087d0:	707b      	strb	r3, [r7, #1]
                        ( void ) memcpy( xAddress.sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( xAddress.sin_address.xIP_IPv6.ucBytes ) );
 80087d2:	6a3b      	ldr	r3, [r7, #32]
 80087d4:	3328      	adds	r3, #40	@ 0x28
 80087d6:	f107 0408 	add.w	r4, r7, #8
 80087da:	6818      	ldr	r0, [r3, #0]
 80087dc:	6859      	ldr	r1, [r3, #4]
 80087de:	689a      	ldr	r2, [r3, #8]
 80087e0:	68db      	ldr	r3, [r3, #12]
 80087e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 80087e4:	6a3b      	ldr	r3, [r7, #32]
 80087e6:	3328      	adds	r3, #40	@ 0x28
 80087e8:	2210      	movs	r2, #16
 80087ea:	2100      	movs	r1, #0
 80087ec:	4618      	mov	r0, r3
 80087ee:	f018 fd70 	bl	80212d2 <memset>
                        break;
 80087f2:	bf00      	nop
            }

            xAddress.sin_port = FreeRTOS_ntohs( pxSocket->usLocalPort );
 80087f4:	6a3b      	ldr	r3, [r7, #32]
 80087f6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80087f8:	021b      	lsls	r3, r3, #8
 80087fa:	b21a      	sxth	r2, r3
 80087fc:	6a3b      	ldr	r3, [r7, #32]
 80087fe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8008800:	0a1b      	lsrs	r3, r3, #8
 8008802:	b29b      	uxth	r3, r3
 8008804:	b21b      	sxth	r3, r3
 8008806:	4313      	orrs	r3, r2
 8008808:	b21b      	sxth	r3, r3
 800880a:	b29b      	uxth	r3, r3
 800880c:	807b      	strh	r3, [r7, #2]
            /* 'usLocalPort' will be set again by vSocketBind(). */
            pxSocket->usLocalPort = 0U;
 800880e:	6a3b      	ldr	r3, [r7, #32]
 8008810:	2200      	movs	r2, #0
 8008812:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) vSocketBind( pxSocket, &xAddress, sizeof( xAddress ), pdFALSE );
 8008814:	4639      	mov	r1, r7
 8008816:	2300      	movs	r3, #0
 8008818:	2218      	movs	r2, #24
 800881a:	6a38      	ldr	r0, [r7, #32]
 800881c:	f005 fa32 	bl	800dc84 <vSocketBind>

            /* Before 'eSocketBindEvent' was sent it was tested that
             * ( xEventGroup != NULL ) so it can be used now to wake up the
             * user. */
            pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_BOUND;
 8008820:	6a3b      	ldr	r3, [r7, #32]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	f043 0210 	orr.w	r2, r3, #16
 8008828:	6a3b      	ldr	r3, [r7, #32]
 800882a:	601a      	str	r2, [r3, #0]
            vSocketWakeUpUser( pxSocket );
 800882c:	6a38      	ldr	r0, [r7, #32]
 800882e:	f006 f8d8 	bl	800e9e2 <vSocketWakeUpUser>
            break;
 8008832:	e03a      	b.n	80088aa <prvProcessIPEventsAndTimers+0x1f6>

            /* The user API FreeRTOS_closesocket() has sent a message to the
             * IP-task to actually close a socket. This is handled in
             * vSocketClose().  As the socket gets closed, there is no way to
             * report back to the API, so the API won't wait for the result */
            ( void ) vSocketClose( ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData ) );
 8008834:	69fb      	ldr	r3, [r7, #28]
 8008836:	4618      	mov	r0, r3
 8008838:	f005 fad8 	bl	800ddec <vSocketClose>
            break;
 800883c:	e035      	b.n	80088aa <prvProcessIPEventsAndTimers+0x1f6>
        case eStackTxEvent:

            /* The network stack has generated a packet to send.  A
             * pointer to the generated buffer is located in the pvData
             * member of the received event structure. */
            vProcessGeneratedUDPPacket( ( NetworkBufferDescriptor_t * ) xReceivedEvent.pvData );
 800883e:	69fb      	ldr	r3, [r7, #28]
 8008840:	4618      	mov	r0, r3
 8008842:	f00d f9b1 	bl	8015ba8 <vProcessGeneratedUDPPacket>
            break;
 8008846:	e030      	b.n	80088aa <prvProcessIPEventsAndTimers+0x1f6>

        case eDHCPEvent:
            prvCallDHCP_RA_Handler( ( ( NetworkEndPoint_t * ) xReceivedEvent.pvData ) );
 8008848:	69fb      	ldr	r3, [r7, #28]
 800884a:	4618      	mov	r0, r3
 800884c:	f000 f88c 	bl	8008968 <prvCallDHCP_RA_Handler>
            break;
 8008850:	e02b      	b.n	80088aa <prvProcessIPEventsAndTimers+0x1f6>
                    vSocketSelect( pxMessage->pxSocketSet );
                    ( void ) xTaskNotifyGive( pxMessage->xTaskhandle );
                }
            #else
                {
                    vSocketSelect( ( ( SocketSelect_t * ) xReceivedEvent.pvData ) );
 8008852:	69fb      	ldr	r3, [r7, #28]
 8008854:	4618      	mov	r0, r3
 8008856:	f007 fab3 	bl	800fdc0 <vSocketSelect>
                }
            #endif /* ( ipconfigSELECT_USES_NOTIFY != 0 ) */
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 800885a:	e026      	b.n	80088aa <prvProcessIPEventsAndTimers+0x1f6>
        case eTCPTimerEvent:
            #if ( ipconfigUSE_TCP == 1 )

                /* Simply mark the TCP timer as expired so it gets processed
                 * the next time prvCheckNetworkTimers() is called. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 800885c:	2001      	movs	r0, #1
 800885e:	f000 ffab 	bl	80097b8 <vIPSetTCPTimerExpiredState>
            #endif /* ipconfigUSE_TCP */
            break;
 8008862:	e022      	b.n	80088aa <prvProcessIPEventsAndTimers+0x1f6>

            /* The API FreeRTOS_accept() was called, the IP-task will now
             * check if the listening socket (communicated in pvData) actually
             * received a new connection. */
            #if ( ipconfigUSE_TCP == 1 )
                pxSocket = ( ( FreeRTOS_Socket_t * ) xReceivedEvent.pvData );
 8008864:	69fb      	ldr	r3, [r7, #28]
 8008866:	623b      	str	r3, [r7, #32]

                if( xTCPCheckNewClient( pxSocket ) != pdFALSE )
 8008868:	6a38      	ldr	r0, [r7, #32]
 800886a:	f008 fbed 	bl	8011048 <xTCPCheckNewClient>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d019      	beq.n	80088a8 <prvProcessIPEventsAndTimers+0x1f4>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 8008874:	6a3b      	ldr	r3, [r7, #32]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f043 0204 	orr.w	r2, r3, #4
 800887c:	6a3b      	ldr	r3, [r7, #32]
 800887e:	601a      	str	r2, [r3, #0]
                    vSocketWakeUpUser( pxSocket );
 8008880:	6a38      	ldr	r0, [r7, #32]
 8008882:	f006 f8ae 	bl	800e9e2 <vSocketWakeUpUser>
                }
            #endif /* ipconfigUSE_TCP */
            break;
 8008886:	e00f      	b.n	80088a8 <prvProcessIPEventsAndTimers+0x1f4>
        case eTCPNetStat:

            /* FreeRTOS_netstat() was called to have the IP-task print an
             * overview of all sockets and their connections */
            #if ( ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_PRINTF == 1 ) )
                vTCPNetStat();
 8008888:	f007 f984 	bl	800fb94 <vTCPNetStat>
            #endif /* ipconfigUSE_TCP */
            break;
 800888c:	e00d      	b.n	80088aa <prvProcessIPEventsAndTimers+0x1f6>

        case eSocketSetDeleteEvent:
            #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
            {
                SocketSelect_t * pxSocketSet = ( SocketSelect_t * ) ( xReceivedEvent.pvData );
 800888e:	69fb      	ldr	r3, [r7, #28]
 8008890:	627b      	str	r3, [r7, #36]	@ 0x24

                iptraceMEM_STATS_DELETE( pxSocketSet );
                vEventGroupDelete( pxSocketSet->xSelectGroup );
 8008892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	4618      	mov	r0, r3
 8008898:	f7f9 ffb0 	bl	80027fc <vEventGroupDelete>
                vPortFree( ( void * ) pxSocketSet );
 800889c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800889e:	f7fd f92d 	bl	8005afc <vPortFree>
            }
            #endif /* ipconfigSUPPORT_SELECT_FUNCTION == 1 */
            break;
 80088a2:	e002      	b.n	80088aa <prvProcessIPEventsAndTimers+0x1f6>
            /* xQueueReceive() returned because of a normal time-out. */
            break;

        default:
            /* Should not get here. */
            break;
 80088a4:	bf00      	nop
 80088a6:	e000      	b.n	80088aa <prvProcessIPEventsAndTimers+0x1f6>
            break;
 80088a8:	bf00      	nop
    }

    prvIPTask_CheckPendingEvents();
 80088aa:	f000 f833 	bl	8008914 <prvIPTask_CheckPendingEvents>
}
 80088ae:	bf00      	nop
 80088b0:	3734      	adds	r7, #52	@ 0x34
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd90      	pop	{r4, r7, pc}
 80088b6:	bf00      	nop
 80088b8:	20000e9c 	.word	0x20000e9c
 80088bc:	20000014 	.word	0x20000014

080088c0 <prvIPTask_Initialise>:
/**
 * @brief Helper function for prvIPTask, it does the first initializations
 *        at start-up. No parameters, no return type.
 */
static void prvIPTask_Initialise( void )
{
 80088c0:	b580      	push	{r7, lr}
 80088c2:	b082      	sub	sp, #8
 80088c4:	af00      	add	r7, sp, #0
    /* Generate a dummy message to say that the network connection has gone
     * down.  This will cause this task to initialise the network interface.  After
     * this it is the responsibility of the network interface hardware driver to
     * send this message if a previously connected network is disconnected. */

    vNetworkTimerReload( pdMS_TO_TICKS( ipINITIALISATION_RETRY_DELAY ) );
 80088c6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 80088ca:	f000 ff2b 	bl	8009724 <vNetworkTimerReload>

    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80088ce:	4b0f      	ldr	r3, [pc, #60]	@ (800890c <prvIPTask_Initialise+0x4c>)
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	607b      	str	r3, [r7, #4]
 80088d4:	e005      	b.n	80088e2 <prvIPTask_Initialise+0x22>
    {
        /* Post a 'eNetworkDownEvent' for every interface. */
        FreeRTOS_NetworkDown( pxInterface );
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f8be 	bl	8008a58 <FreeRTOS_NetworkDown>
    for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088e0:	607b      	str	r3, [r7, #4]
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d1f6      	bne.n	80088d6 <prvIPTask_Initialise+0x16>
    }

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* Initialise the TCP timer. */
        vTCPTimerReload( pdMS_TO_TICKS( ipTCP_TIMER_PERIOD_MS ) );
 80088e8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80088ec:	f000 fee8 	bl	80096c0 <vTCPTimerReload>
    }
    #endif

    /* Mark the timer as inactive since we are not waiting on any ARP resolution as of now. */
    vIPSetARPResolutionTimerEnableState( pdFALSE );
 80088f0:	2000      	movs	r0, #0
 80088f2:	f000 ff9b 	bl	800982c <vIPSetARPResolutionTimerEnableState>

    #if ( ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        vDNSInitialise();
 80088f6:	f7fe fa31 	bl	8006d5c <vDNSInitialise>
    #endif /* ( ipconfigDNS_USE_CALLBACKS != 0 ) && ( ipconfigUSE_DNS != 0 ) */

    #if ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) )
    {
        /* Clear the DNS cache once only. */
        FreeRTOS_dnsclear();
 80088fa:	f7fe fb0f 	bl	8006f1c <FreeRTOS_dnsclear>
    }
    #endif /* ( ( ipconfigUSE_DNS_CACHE != 0 ) && ( ipconfigUSE_DNS != 0 ) ) */

    /* Initialisation is complete and events can now be processed. */
    xIPTaskInitialised = pdTRUE;
 80088fe:	4b04      	ldr	r3, [pc, #16]	@ (8008910 <prvIPTask_Initialise+0x50>)
 8008900:	2201      	movs	r2, #1
 8008902:	601a      	str	r2, [r3, #0]
}
 8008904:	bf00      	nop
 8008906:	3708      	adds	r7, #8
 8008908:	46bd      	mov	sp, r7
 800890a:	bd80      	pop	{r7, pc}
 800890c:	20001228 	.word	0x20001228
 8008910:	20000eac 	.word	0x20000eac

08008914 <prvIPTask_CheckPendingEvents>:
/**
 * @brief Check the value of 'xNetworkDownEventPending'. When non-zero, pending
 *        network-down events will be handled.
 */
static void prvIPTask_CheckPendingEvents( void )
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b082      	sub	sp, #8
 8008918:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    if( xNetworkDownEventPending != pdFALSE )
 800891a:	4b12      	ldr	r3, [pc, #72]	@ (8008964 <prvIPTask_CheckPendingEvents+0x50>)
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	2b00      	cmp	r3, #0
 8008920:	d01c      	beq.n	800895c <prvIPTask_CheckPendingEvents+0x48>
    {
        /* A network down event could not be posted to the network event
         * queue because the queue was full.
         * As this code runs in the IP-task, it can be done directly by
         * calling prvProcessNetworkDownEvent(). */
        xNetworkDownEventPending = pdFALSE;
 8008922:	4b10      	ldr	r3, [pc, #64]	@ (8008964 <prvIPTask_CheckPendingEvents+0x50>)
 8008924:	2200      	movs	r2, #0
 8008926:	601a      	str	r2, [r3, #0]

        for( pxInterface = FreeRTOS_FirstNetworkInterface();
 8008928:	f004 f836 	bl	800c998 <FreeRTOS_FirstNetworkInterface>
 800892c:	6078      	str	r0, [r7, #4]
 800892e:	e012      	b.n	8008956 <prvIPTask_CheckPendingEvents+0x42>
             pxInterface != NULL;
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
        {
            if( pxInterface->bits.bCallDownEvent != pdFALSE_UNSIGNED )
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	7f1b      	ldrb	r3, [r3, #28]
 8008934:	f003 0302 	and.w	r3, r3, #2
 8008938:	b2db      	uxtb	r3, r3
 800893a:	2b00      	cmp	r3, #0
 800893c:	d007      	beq.n	800894e <prvIPTask_CheckPendingEvents+0x3a>
            {
                prvProcessNetworkDownEvent( pxInterface );
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 f8d8 	bl	8009af4 <prvProcessNetworkDownEvent>
                pxInterface->bits.bCallDownEvent = pdFALSE_UNSIGNED;
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	7f13      	ldrb	r3, [r2, #28]
 8008948:	f36f 0341 	bfc	r3, #1, #1
 800894c:	7713      	strb	r3, [r2, #28]
             pxInterface = FreeRTOS_NextNetworkInterface( pxInterface ) )
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f004 f82e 	bl	800c9b0 <FreeRTOS_NextNetworkInterface>
 8008954:	6078      	str	r0, [r7, #4]
             pxInterface != NULL;
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	2b00      	cmp	r3, #0
 800895a:	d1e9      	bne.n	8008930 <prvIPTask_CheckPendingEvents+0x1c>
            }
        }
    }
}
 800895c:	bf00      	nop
 800895e:	3708      	adds	r7, #8
 8008960:	46bd      	mov	sp, r7
 8008962:	bd80      	pop	{r7, pc}
 8008964:	20000ea4 	.word	0x20000ea4

08008968 <prvCallDHCP_RA_Handler>:
 * @brief Call the state machine of either DHCP, DHCPv6, or RA, whichever is activated.
 *
 * @param[in] pxEndPoint The end-point for which the state-machine will be called.
 */
static void prvCallDHCP_RA_Handler( NetworkEndPoint_t * pxEndPoint )
{
 8008968:	b580      	push	{r7, lr}
 800896a:	b084      	sub	sp, #16
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
    BaseType_t xIsIPv6 = pdFALSE;
 8008970:	2300      	movs	r3, #0
 8008972:	60fb      	str	r3, [r7, #12]

    #if ( ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_DHCPv6 == 1 ) || ( ipconfigUSE_RA == 1 ) )
        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800897a:	f003 0304 	and.w	r3, r3, #4
 800897e:	b2db      	uxtb	r3, r3
 8008980:	2b00      	cmp	r3, #0
 8008982:	d001      	beq.n	8008988 <prvCallDHCP_RA_Handler+0x20>
        {
            xIsIPv6 = pdTRUE;
 8008984:	2301      	movs	r3, #1
 8008986:	60fb      	str	r3, [r7, #12]
        }
    }
    #endif /* ipconfigUSE_DHCPv6 */
    #if ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
    {
        if( ( xIsIPv6 == pdTRUE ) && ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) )
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	2b01      	cmp	r3, #1
 800898c:	d10b      	bne.n	80089a6 <prvCallDHCP_RA_Handler+0x3e>
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008994:	f003 0302 	and.w	r3, r3, #2
 8008998:	b2db      	uxtb	r3, r3
 800899a:	2b00      	cmp	r3, #0
 800899c:	d003      	beq.n	80089a6 <prvCallDHCP_RA_Handler+0x3e>
        {
            /* Process RA messages for a given end-point. */
            vRAProcess( pdFALSE, pxEndPoint );
 800899e:	6879      	ldr	r1, [r7, #4]
 80089a0:	2000      	movs	r0, #0
 80089a2:	f003 fecd 	bl	800c740 <vRAProcess>
    #endif /* ( ( ipconfigUSE_RA == 1 ) && ( ipconfigUSE_IPv6 != 0 ) ) */

    /* Mention pxEndPoint and xIsIPv6 in case they have not been used. */
    ( void ) pxEndPoint;
    ( void ) xIsIPv6;
}
 80089a6:	bf00      	nop
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <FreeRTOS_GetIPTaskHandle>:
 *        gives read-only access to it.
 *
 * @return The handle of the IP-task.
 */
TaskHandle_t FreeRTOS_GetIPTaskHandle( void )
{
 80089b0:	b480      	push	{r7}
 80089b2:	af00      	add	r7, sp, #0
    return xIPTaskHandle;
 80089b4:	4b03      	ldr	r3, [pc, #12]	@ (80089c4 <FreeRTOS_GetIPTaskHandle+0x14>)
 80089b6:	681b      	ldr	r3, [r3, #0]
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	46bd      	mov	sp, r7
 80089bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c0:	4770      	bx	lr
 80089c2:	bf00      	nop
 80089c4:	20000ea8 	.word	0x20000ea8

080089c8 <vIPNetworkUpCalls>:
 * @brief Perform all the required tasks when the network gets connected.
 *
 * @param pxEndPoint The end-point which goes up.
 */
void vIPNetworkUpCalls( struct xNetworkEndPoint * pxEndPoint )
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
    if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80089d6:	f003 0304 	and.w	r3, r3, #4
 80089da:	b2db      	uxtb	r3, r3
 80089dc:	2b00      	cmp	r3, #0
 80089de:	d003      	beq.n	80089e8 <vIPNetworkUpCalls+0x20>
    {
        /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
        #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
            vManageSolicitedNodeAddress( pxEndPoint, pdTRUE );
 80089e0:	2101      	movs	r1, #1
 80089e2:	6878      	ldr	r0, [r7, #4]
 80089e4:	f002 fa7e 	bl	800aee4 <vManageSolicitedNodeAddress>
        #endif
    }

    pxEndPoint->bits.bEndPointUp = pdTRUE_UNSIGNED;
 80089e8:	687a      	ldr	r2, [r7, #4]
 80089ea:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 80089ee:	f043 0310 	orr.w	r3, r3, #16
 80089f2:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

    #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        {
            vApplicationIPNetworkEventHook( eNetworkUp );
 80089f6:	2000      	movs	r0, #0
 80089f8:	f7f8 fd6e 	bl	80014d8 <vApplicationIPNetworkEventHook>
    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* The following function is declared in FreeRTOS_DNS.c and 'private' to
         * this library */
        extern void vDNSInitialise( void );
        vDNSInitialise();
 80089fc:	f7fe f9ae 	bl	8006d5c <vDNSInitialise>
    }
    #endif /* ipconfigDNS_USE_CALLBACKS != 0 */

    /* Set remaining time to 0 so it will become active immediately. */
    vARPTimerReload( pdMS_TO_TICKS( ipARP_TIMER_PERIOD_MS ) );
 8008a00:	f242 7010 	movw	r0, #10000	@ 0x2710
 8008a04:	f000 fe6a 	bl	80096dc <vARPTimerReload>
}
 8008a08:	bf00      	nop
 8008a0a:	3708      	adds	r7, #8
 8008a0c:	46bd      	mov	sp, r7
 8008a0e:	bd80      	pop	{r7, pc}

08008a10 <prvHandleEthernetPacket>:
 *
 * @param[in] pxBuffer Linked/un-linked network buffer descriptor(s)
 *                      to be processed.
 */
static void prvHandleEthernetPacket( NetworkBufferDescriptor_t * pxBuffer )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b082      	sub	sp, #8
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	6078      	str	r0, [r7, #4]
    #if ( ipconfigUSE_LINKED_RX_MESSAGES == 0 )
    {
        /* When ipconfigUSE_LINKED_RX_MESSAGES is set to 0 then only one
         * buffer will be sent at a time.  This is the default way for +TCP to pass
         * messages from the MAC to the TCP/IP stack. */
        if( pxBuffer != NULL )
 8008a18:	687b      	ldr	r3, [r7, #4]
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d002      	beq.n	8008a24 <prvHandleEthernetPacket+0x14>
        {
            prvProcessEthernetPacket( pxBuffer );
 8008a1e:	6878      	ldr	r0, [r7, #4]
 8008a20:	f000 f9c8 	bl	8008db4 <prvProcessEthernetPacket>
            prvProcessEthernetPacket( pxBuffer );
            pxBuffer = pxNextBuffer;
        }
    }
    #endif /* ipconfigUSE_LINKED_RX_MESSAGES */
}
 8008a24:	bf00      	nop
 8008a26:	3708      	adds	r7, #8
 8008a28:	46bd      	mov	sp, r7
 8008a2a:	bd80      	pop	{r7, pc}

08008a2c <prvForwardTxPacket>:
 * @param[in] pxNetworkBuffer The message buffer.
 * @param[in] xReleaseAfterSend When true, the network interface will own the buffer and is responsible for it's release.
 */
static void prvForwardTxPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                BaseType_t xReleaseAfterSend )
{
 8008a2c:	b580      	push	{r7, lr}
 8008a2e:	b082      	sub	sp, #8
 8008a30:	af00      	add	r7, sp, #0
 8008a32:	6078      	str	r0, [r7, #4]
 8008a34:	6039      	str	r1, [r7, #0]
    iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

    if( pxNetworkBuffer->pxInterface != NULL )
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d007      	beq.n	8008a4e <prvForwardTxPacket+0x22>
    {
        ( void ) pxNetworkBuffer->pxInterface->pfOutput( pxNetworkBuffer->pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008a42:	68db      	ldr	r3, [r3, #12]
 8008a44:	687a      	ldr	r2, [r7, #4]
 8008a46:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008a48:	683a      	ldr	r2, [r7, #0]
 8008a4a:	6879      	ldr	r1, [r7, #4]
 8008a4c:	4798      	blx	r3
    }
}
 8008a4e:	bf00      	nop
 8008a50:	3708      	adds	r7, #8
 8008a52:	46bd      	mov	sp, r7
 8008a54:	bd80      	pop	{r7, pc}
	...

08008a58 <FreeRTOS_NetworkDown>:
 *         and later on a 'network-down' event, it will be executed.
 *
 * @param[in] pxNetworkInterface The interface that goes down.
 */
void FreeRTOS_NetworkDown( struct xNetworkInterface * pxNetworkInterface )
{
 8008a58:	b580      	push	{r7, lr}
 8008a5a:	b086      	sub	sp, #24
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
    IPStackEvent_t xNetworkDownEvent;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8008a60:	2300      	movs	r3, #0
 8008a62:	617b      	str	r3, [r7, #20]

    pxNetworkInterface->bits.bInterfaceUp = pdFALSE_UNSIGNED;
 8008a64:	687a      	ldr	r2, [r7, #4]
 8008a66:	7f13      	ldrb	r3, [r2, #28]
 8008a68:	f36f 0300 	bfc	r3, #0, #1
 8008a6c:	7713      	strb	r3, [r2, #28]
    xNetworkDownEvent.eEventType = eNetworkDownEvent;
 8008a6e:	2300      	movs	r3, #0
 8008a70:	733b      	strb	r3, [r7, #12]
    xNetworkDownEvent.pvData = pxNetworkInterface;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	613b      	str	r3, [r7, #16]

    /* Simply send the network task the appropriate event. */
    if( xSendEventStructToIPTask( &xNetworkDownEvent, xDontBlock ) != pdPASS )
 8008a76:	f107 030c 	add.w	r3, r7, #12
 8008a7a:	6979      	ldr	r1, [r7, #20]
 8008a7c:	4618      	mov	r0, r3
 8008a7e:	f000 f8df 	bl	8008c40 <xSendEventStructToIPTask>
 8008a82:	4603      	mov	r3, r0
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d008      	beq.n	8008a9a <FreeRTOS_NetworkDown+0x42>
    {
        /* Could not send the message, so it is still pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdTRUE;
 8008a88:	687a      	ldr	r2, [r7, #4]
 8008a8a:	7f13      	ldrb	r3, [r2, #28]
 8008a8c:	f043 0302 	orr.w	r3, r3, #2
 8008a90:	7713      	strb	r3, [r2, #28]
        xNetworkDownEventPending = pdTRUE;
 8008a92:	4b06      	ldr	r3, [pc, #24]	@ (8008aac <FreeRTOS_NetworkDown+0x54>)
 8008a94:	2201      	movs	r2, #1
 8008a96:	601a      	str	r2, [r3, #0]
        /* Message was sent so it is not pending. */
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
    }

    iptraceNETWORK_DOWN();
}
 8008a98:	e004      	b.n	8008aa4 <FreeRTOS_NetworkDown+0x4c>
        pxNetworkInterface->bits.bCallDownEvent = pdFALSE;
 8008a9a:	687a      	ldr	r2, [r7, #4]
 8008a9c:	7f13      	ldrb	r3, [r2, #28]
 8008a9e:	f36f 0341 	bfc	r3, #1, #1
 8008aa2:	7713      	strb	r3, [r2, #28]
}
 8008aa4:	bf00      	nop
 8008aa6:	3718      	adds	r7, #24
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	bd80      	pop	{r7, pc}
 8008aac:	20000ea4 	.word	0x20000ea4

08008ab0 <FreeRTOS_IPInit_Multi>:
 * @brief Initialise the FreeRTOS-Plus-TCP network stack and initialise the IP-task.
 *        Before calling this function, at least 1 interface and 1 end-point must
 *        have been set-up.
 */
BaseType_t FreeRTOS_IPInit_Multi( void )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b084      	sub	sp, #16
 8008ab4:	af02      	add	r7, sp, #8
    BaseType_t xReturn = pdFALSE;
 8008ab6:	2300      	movs	r3, #0
 8008ab8:	607b      	str	r3, [r7, #4]

    /* There must be at least one interface and one end-point. */
    configASSERT( FreeRTOS_FirstNetworkInterface() != NULL );
 8008aba:	f003 ff6d 	bl	800c998 <FreeRTOS_FirstNetworkInterface>
 8008abe:	4603      	mov	r3, r0
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d104      	bne.n	8008ace <FreeRTOS_IPInit_Multi+0x1e>
 8008ac4:	f240 31b5 	movw	r1, #949	@ 0x3b5
 8008ac8:	4823      	ldr	r0, [pc, #140]	@ (8008b58 <FreeRTOS_IPInit_Multi+0xa8>)
 8008aca:	f7f8 fcd1 	bl	8001470 <vAssertCalled>

    /* Check that the configuration values are correct and that the IP-task has not
     * already been initialized. */
    vPreCheckConfigs();
 8008ace:	f001 f8cb 	bl	8009c68 <vPreCheckConfigs>
                                                 ucNetworkEventQueueStorageArea,
                                                 &xNetworkEventStaticQueue );
    }
    #else
    {
        xNetworkEventQueue = xQueueCreate( ipconfigEVENT_QUEUE_LENGTH, sizeof( IPStackEvent_t ) );
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	2108      	movs	r1, #8
 8008ad6:	2045      	movs	r0, #69	@ 0x45
 8008ad8:	f7fa f822 	bl	8002b20 <xQueueGenericCreate>
 8008adc:	4603      	mov	r3, r0
 8008ade:	4a1f      	ldr	r2, [pc, #124]	@ (8008b5c <FreeRTOS_IPInit_Multi+0xac>)
 8008ae0:	6013      	str	r3, [r2, #0]
        configASSERT( xNetworkEventQueue != NULL );
 8008ae2:	4b1e      	ldr	r3, [pc, #120]	@ (8008b5c <FreeRTOS_IPInit_Multi+0xac>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d104      	bne.n	8008af4 <FreeRTOS_IPInit_Multi+0x44>
 8008aea:	f44f 7172 	mov.w	r1, #968	@ 0x3c8
 8008aee:	481a      	ldr	r0, [pc, #104]	@ (8008b58 <FreeRTOS_IPInit_Multi+0xa8>)
 8008af0:	f7f8 fcbe 	bl	8001470 <vAssertCalled>
    }
    #endif /* configSUPPORT_STATIC_ALLOCATION */

    if( xNetworkEventQueue != NULL )
 8008af4:	4b19      	ldr	r3, [pc, #100]	@ (8008b5c <FreeRTOS_IPInit_Multi+0xac>)
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d025      	beq.n	8008b48 <FreeRTOS_IPInit_Multi+0x98>
        #if ( configQUEUE_REGISTRY_SIZE > 0 )
        {
            /* A queue registry is normally used to assist a kernel aware
             * debugger.  If one is in use then it will be helpful for the debugger
             * to show information about the network event queue. */
            vQueueAddToRegistry( xNetworkEventQueue, "NetEvnt" );
 8008afc:	4b17      	ldr	r3, [pc, #92]	@ (8008b5c <FreeRTOS_IPInit_Multi+0xac>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4917      	ldr	r1, [pc, #92]	@ (8008b60 <FreeRTOS_IPInit_Multi+0xb0>)
 8008b02:	4618      	mov	r0, r3
 8008b04:	f7fa fcf8 	bl	80034f8 <vQueueAddToRegistry>
        }
        #endif /* configQUEUE_REGISTRY_SIZE */

        if( xNetworkBuffersInitialise() == pdPASS )
 8008b08:	f00d fd8c 	bl	8016624 <xNetworkBuffersInitialise>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b01      	cmp	r3, #1
 8008b10:	d10e      	bne.n	8008b30 <FreeRTOS_IPInit_Multi+0x80>
        {
            /* Prepare the sockets interface. */
            vNetworkSocketsInit();
 8008b12:	f004 fc7f 	bl	800d414 <vNetworkSocketsInit>
                    xReturn = pdTRUE;
                }
            }
            #else /* if ( configSUPPORT_STATIC_ALLOCATION == 1 ) */
            {
                xReturn = xTaskCreate( prvIPTask,
 8008b16:	4b13      	ldr	r3, [pc, #76]	@ (8008b64 <FreeRTOS_IPInit_Multi+0xb4>)
 8008b18:	9301      	str	r3, [sp, #4]
 8008b1a:	2304      	movs	r3, #4
 8008b1c:	9300      	str	r3, [sp, #0]
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f44f 52a0 	mov.w	r2, #5120	@ 0x1400
 8008b24:	4910      	ldr	r1, [pc, #64]	@ (8008b68 <FreeRTOS_IPInit_Multi+0xb8>)
 8008b26:	4811      	ldr	r0, [pc, #68]	@ (8008b6c <FreeRTOS_IPInit_Multi+0xbc>)
 8008b28:	f7fa fd9c 	bl	8003664 <xTaskCreate>
 8008b2c:	6078      	str	r0, [r7, #4]
 8008b2e:	e00e      	b.n	8008b4e <FreeRTOS_IPInit_Multi+0x9e>
            }
            #endif /* configSUPPORT_STATIC_ALLOCATION */
        }
        else
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: xNetworkBuffersInitialise() failed\n" ) );
 8008b30:	480f      	ldr	r0, [pc, #60]	@ (8008b70 <FreeRTOS_IPInit_Multi+0xc0>)
 8008b32:	f018 f8a5 	bl	8020c80 <lUDPLoggingPrintf>

            /* Clean up. */
            vQueueDelete( xNetworkEventQueue );
 8008b36:	4b09      	ldr	r3, [pc, #36]	@ (8008b5c <FreeRTOS_IPInit_Multi+0xac>)
 8008b38:	681b      	ldr	r3, [r3, #0]
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	f7fa fb9a 	bl	8003274 <vQueueDelete>
            xNetworkEventQueue = NULL;
 8008b40:	4b06      	ldr	r3, [pc, #24]	@ (8008b5c <FreeRTOS_IPInit_Multi+0xac>)
 8008b42:	2200      	movs	r2, #0
 8008b44:	601a      	str	r2, [r3, #0]
 8008b46:	e002      	b.n	8008b4e <FreeRTOS_IPInit_Multi+0x9e>
        }
    }
    else
    {
        FreeRTOS_debug_printf( ( "FreeRTOS_IPInit_Multi: Network event queue could not be created\n" ) );
 8008b48:	480a      	ldr	r0, [pc, #40]	@ (8008b74 <FreeRTOS_IPInit_Multi+0xc4>)
 8008b4a:	f018 f899 	bl	8020c80 <lUDPLoggingPrintf>
    }

    return xReturn;
 8008b4e:	687b      	ldr	r3, [r7, #4]
}
 8008b50:	4618      	mov	r0, r3
 8008b52:	3708      	adds	r7, #8
 8008b54:	46bd      	mov	sp, r7
 8008b56:	bd80      	pop	{r7, pc}
 8008b58:	0802362c 	.word	0x0802362c
 8008b5c:	20000e9c 	.word	0x20000e9c
 8008b60:	08023658 	.word	0x08023658
 8008b64:	20000ea8 	.word	0x20000ea8
 8008b68:	08023660 	.word	0x08023660
 8008b6c:	08008699 	.word	0x08008699
 8008b70:	08023668 	.word	0x08023668
 8008b74:	080236a4 	.word	0x080236a4

08008b78 <FreeRTOS_GetEndPointConfiguration>:
    void FreeRTOS_GetEndPointConfiguration( uint32_t * pulIPAddress,
                                            uint32_t * pulNetMask,
                                            uint32_t * pulGatewayAddress,
                                            uint32_t * pulDNSServerAddress,
                                            const struct xNetworkEndPoint * pxEndPoint )
    {
 8008b78:	b480      	push	{r7}
 8008b7a:	b085      	sub	sp, #20
 8008b7c:	af00      	add	r7, sp, #0
 8008b7e:	60f8      	str	r0, [r7, #12]
 8008b80:	60b9      	str	r1, [r7, #8]
 8008b82:	607a      	str	r2, [r7, #4]
 8008b84:	603b      	str	r3, [r7, #0]
        if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8008b86:	69bb      	ldr	r3, [r7, #24]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d023      	beq.n	8008bd4 <FreeRTOS_GetEndPointConfiguration+0x5c>
 8008b8c:	69bb      	ldr	r3, [r7, #24]
 8008b8e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8008b92:	f003 0304 	and.w	r3, r3, #4
 8008b96:	b2db      	uxtb	r3, r3
 8008b98:	2b00      	cmp	r3, #0
 8008b9a:	d11b      	bne.n	8008bd4 <FreeRTOS_GetEndPointConfiguration+0x5c>
        {
            /* Return the address configuration to the caller. */

            if( pulIPAddress != NULL )
 8008b9c:	68fb      	ldr	r3, [r7, #12]
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d003      	beq.n	8008baa <FreeRTOS_GetEndPointConfiguration+0x32>
            {
                *pulIPAddress = pxEndPoint->ipv4_settings.ulIPAddress;
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	681a      	ldr	r2, [r3, #0]
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	601a      	str	r2, [r3, #0]
            }

            if( pulNetMask != NULL )
 8008baa:	68bb      	ldr	r3, [r7, #8]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <FreeRTOS_GetEndPointConfiguration+0x40>
            {
                *pulNetMask = pxEndPoint->ipv4_settings.ulNetMask;
 8008bb0:	69bb      	ldr	r3, [r7, #24]
 8008bb2:	685a      	ldr	r2, [r3, #4]
 8008bb4:	68bb      	ldr	r3, [r7, #8]
 8008bb6:	601a      	str	r2, [r3, #0]
            }

            if( pulGatewayAddress != NULL )
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d003      	beq.n	8008bc6 <FreeRTOS_GetEndPointConfiguration+0x4e>
            {
                *pulGatewayAddress = pxEndPoint->ipv4_settings.ulGatewayAddress;
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	689a      	ldr	r2, [r3, #8]
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	601a      	str	r2, [r3, #0]
            }

            if( pulDNSServerAddress != NULL )
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d003      	beq.n	8008bd4 <FreeRTOS_GetEndPointConfiguration+0x5c>
            {
                *pulDNSServerAddress = pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ]; /*_RB_ Only returning the address of the first DNS server. */
 8008bcc:	69bb      	ldr	r3, [r7, #24]
 8008bce:	68da      	ldr	r2, [r3, #12]
 8008bd0:	683b      	ldr	r3, [r7, #0]
 8008bd2:	601a      	str	r2, [r3, #0]
            }
        }
    }
 8008bd4:	bf00      	nop
 8008bd6:	3714      	adds	r7, #20
 8008bd8:	46bd      	mov	sp, r7
 8008bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bde:	4770      	bx	lr

08008be0 <FreeRTOS_GetAddressConfiguration>:
 */
    void FreeRTOS_GetAddressConfiguration( uint32_t * pulIPAddress,
                                           uint32_t * pulNetMask,
                                           uint32_t * pulGatewayAddress,
                                           uint32_t * pulDNSServerAddress )
    {
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b088      	sub	sp, #32
 8008be4:	af02      	add	r7, sp, #8
 8008be6:	60f8      	str	r0, [r7, #12]
 8008be8:	60b9      	str	r1, [r7, #8]
 8008bea:	607a      	str	r2, [r7, #4]
 8008bec:	603b      	str	r3, [r7, #0]
        NetworkEndPoint_t * pxEndPoint;

        /* Get first end point. */
        pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8008bee:	2000      	movs	r0, #0
 8008bf0:	f003 ff72 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 8008bf4:	6178      	str	r0, [r7, #20]

        if( pxEndPoint != NULL )
 8008bf6:	697b      	ldr	r3, [r7, #20]
 8008bf8:	2b00      	cmp	r3, #0
 8008bfa:	d007      	beq.n	8008c0c <FreeRTOS_GetAddressConfiguration+0x2c>
        {
            FreeRTOS_GetEndPointConfiguration( pulIPAddress, pulNetMask,
 8008bfc:	697b      	ldr	r3, [r7, #20]
 8008bfe:	9300      	str	r3, [sp, #0]
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	687a      	ldr	r2, [r7, #4]
 8008c04:	68b9      	ldr	r1, [r7, #8]
 8008c06:	68f8      	ldr	r0, [r7, #12]
 8008c08:	f7ff ffb6 	bl	8008b78 <FreeRTOS_GetEndPointConfiguration>
                                               pulGatewayAddress, pulDNSServerAddress, pxEndPoint );
        }
    }
 8008c0c:	bf00      	nop
 8008c0e:	3718      	adds	r7, #24
 8008c10:	46bd      	mov	sp, r7
 8008c12:	bd80      	pop	{r7, pc}

08008c14 <xSendEventToIPTask>:
 * @param[in] eEvent The event to be sent.
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventToIPTask( eIPEvent_t eEvent )
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b086      	sub	sp, #24
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	4603      	mov	r3, r0
 8008c1c:	71fb      	strb	r3, [r7, #7]
    IPStackEvent_t xEventMessage;
    const TickType_t xDontBlock = ( TickType_t ) 0;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	617b      	str	r3, [r7, #20]

    xEventMessage.eEventType = eEvent;
 8008c22:	79fb      	ldrb	r3, [r7, #7]
 8008c24:	733b      	strb	r3, [r7, #12]
    xEventMessage.pvData = ( void * ) NULL;
 8008c26:	2300      	movs	r3, #0
 8008c28:	613b      	str	r3, [r7, #16]

    return xSendEventStructToIPTask( &xEventMessage, xDontBlock );
 8008c2a:	f107 030c 	add.w	r3, r7, #12
 8008c2e:	6979      	ldr	r1, [r7, #20]
 8008c30:	4618      	mov	r0, r3
 8008c32:	f000 f805 	bl	8008c40 <xSendEventStructToIPTask>
 8008c36:	4603      	mov	r3, r0
}
 8008c38:	4618      	mov	r0, r3
 8008c3a:	3718      	adds	r7, #24
 8008c3c:	46bd      	mov	sp, r7
 8008c3e:	bd80      	pop	{r7, pc}

08008c40 <xSendEventStructToIPTask>:
 *
 * @return pdPASS if the event was sent (or the desired effect was achieved). Else, pdFAIL.
 */
BaseType_t xSendEventStructToIPTask( const IPStackEvent_t * pxEvent,
                                     TickType_t uxTimeout )
{
 8008c40:	b580      	push	{r7, lr}
 8008c42:	b086      	sub	sp, #24
 8008c44:	af00      	add	r7, sp, #0
 8008c46:	6078      	str	r0, [r7, #4]
 8008c48:	6039      	str	r1, [r7, #0]
    BaseType_t xReturn, xSendMessage;
    TickType_t uxUseTimeout = uxTimeout;
 8008c4a:	683b      	ldr	r3, [r7, #0]
 8008c4c:	60fb      	str	r3, [r7, #12]

    if( ( xIPIsNetworkTaskReady() == pdFALSE ) && ( pxEvent->eEventType != eNetworkDownEvent ) )
 8008c4e:	f000 fb93 	bl	8009378 <xIPIsNetworkTaskReady>
 8008c52:	4603      	mov	r3, r0
 8008c54:	2b00      	cmp	r3, #0
 8008c56:	d107      	bne.n	8008c68 <xSendEventStructToIPTask+0x28>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	f993 3000 	ldrsb.w	r3, [r3]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d002      	beq.n	8008c68 <xSendEventStructToIPTask+0x28>
    {
        /* Only allow eNetworkDownEvent events if the IP task is not ready
         * yet.  Not going to attempt to send the message so the send failed. */
        xReturn = pdFAIL;
 8008c62:	2300      	movs	r3, #0
 8008c64:	617b      	str	r3, [r7, #20]
 8008c66:	e035      	b.n	8008cd4 <xSendEventStructToIPTask+0x94>
    }
    else
    {
        xSendMessage = pdTRUE;
 8008c68:	2301      	movs	r3, #1
 8008c6a:	613b      	str	r3, [r7, #16]

        #if ( ipconfigUSE_TCP == 1 )
        {
            if( pxEvent->eEventType == eTCPTimerEvent )
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	f993 3000 	ldrsb.w	r3, [r3]
 8008c72:	2b06      	cmp	r3, #6
 8008c74:	d10c      	bne.n	8008c90 <xSendEventStructToIPTask+0x50>
            {
                /* TCP timer events are sent to wake the timer task when
                 * xTCPTimer has expired, but there is no point sending them if the
                 * IP task is already awake processing other message. */
                vIPSetTCPTimerExpiredState( pdTRUE );
 8008c76:	2001      	movs	r0, #1
 8008c78:	f000 fd9e 	bl	80097b8 <vIPSetTCPTimerExpiredState>

                if( uxQueueMessagesWaiting( xNetworkEventQueue ) != 0U )
 8008c7c:	4b18      	ldr	r3, [pc, #96]	@ (8008ce0 <xSendEventStructToIPTask+0xa0>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4618      	mov	r0, r3
 8008c82:	f7fa fabd 	bl	8003200 <uxQueueMessagesWaiting>
 8008c86:	4603      	mov	r3, r0
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	d001      	beq.n	8008c90 <xSendEventStructToIPTask+0x50>
                {
                    /* Not actually going to send the message but this is not a
                     * failure as the message didn't need to be sent. */
                    xSendMessage = pdFALSE;
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	613b      	str	r3, [r7, #16]
                }
            }
        }
        #endif /* ipconfigUSE_TCP */

        if( xSendMessage != pdFALSE )
 8008c90:	693b      	ldr	r3, [r7, #16]
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d01c      	beq.n	8008cd0 <xSendEventStructToIPTask+0x90>
        {
            /* The IP task cannot block itself while waiting for itself to
             * respond. */
            if( ( xIsCallingFromIPTask() == pdTRUE ) && ( uxUseTimeout > ( TickType_t ) 0U ) )
 8008c96:	f000 ff15 	bl	8009ac4 <xIsCallingFromIPTask>
 8008c9a:	4603      	mov	r3, r0
 8008c9c:	2b01      	cmp	r3, #1
 8008c9e:	d104      	bne.n	8008caa <xSendEventStructToIPTask+0x6a>
 8008ca0:	68fb      	ldr	r3, [r7, #12]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d001      	beq.n	8008caa <xSendEventStructToIPTask+0x6a>
            {
                uxUseTimeout = ( TickType_t ) 0;
 8008ca6:	2300      	movs	r3, #0
 8008ca8:	60fb      	str	r3, [r7, #12]
            }

            xReturn = xQueueSendToBack( xNetworkEventQueue, pxEvent, uxUseTimeout );
 8008caa:	4b0d      	ldr	r3, [pc, #52]	@ (8008ce0 <xSendEventStructToIPTask+0xa0>)
 8008cac:	6818      	ldr	r0, [r3, #0]
 8008cae:	2300      	movs	r3, #0
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	6879      	ldr	r1, [r7, #4]
 8008cb4:	f7f9 fffe 	bl	8002cb4 <xQueueGenericSend>
 8008cb8:	6178      	str	r0, [r7, #20]

            if( xReturn == pdFAIL )
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	2b00      	cmp	r3, #0
 8008cbe:	d109      	bne.n	8008cd4 <xSendEventStructToIPTask+0x94>
            {
                /* A message should have been sent to the IP task, but wasn't. */
                FreeRTOS_debug_printf( ( "xSendEventStructToIPTask: CAN NOT ADD %d\n", pxEvent->eEventType ) );
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f993 3000 	ldrsb.w	r3, [r3]
 8008cc6:	4619      	mov	r1, r3
 8008cc8:	4806      	ldr	r0, [pc, #24]	@ (8008ce4 <xSendEventStructToIPTask+0xa4>)
 8008cca:	f017 ffd9 	bl	8020c80 <lUDPLoggingPrintf>
 8008cce:	e001      	b.n	8008cd4 <xSendEventStructToIPTask+0x94>
        }
        else
        {
            /* It was not necessary to send the message to process the event so
             * even though the message was not sent the call was successful. */
            xReturn = pdPASS;
 8008cd0:	2301      	movs	r3, #1
 8008cd2:	617b      	str	r3, [r7, #20]
        }
    }

    return xReturn;
 8008cd4:	697b      	ldr	r3, [r7, #20]
}
 8008cd6:	4618      	mov	r0, r3
 8008cd8:	3718      	adds	r7, #24
 8008cda:	46bd      	mov	sp, r7
 8008cdc:	bd80      	pop	{r7, pc}
 8008cde:	bf00      	nop
 8008ce0:	20000e9c 	.word	0x20000e9c
 8008ce4:	080236e8 	.word	0x080236e8

08008ce8 <eConsiderFrameForProcessing>:
 * @param[in] pucEthernetBuffer The ethernet packet under consideration.
 *
 * @return Enum saying whether to release or to process the packet.
 */
eFrameProcessingResult_t eConsiderFrameForProcessing( const uint8_t * const pucEthernetBuffer )
{
 8008ce8:	b580      	push	{r7, lr}
 8008cea:	b086      	sub	sp, #24
 8008cec:	af00      	add	r7, sp, #0
 8008cee:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	75fb      	strb	r3, [r7, #23]
    const EthernetHeader_t * pxEthernetHeader = NULL;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	613b      	str	r3, [r7, #16]
    const NetworkEndPoint_t * pxEndPoint = NULL;
 8008cf8:	2300      	movs	r3, #0
 8008cfa:	60fb      	str	r3, [r7, #12]

    if( pucEthernetBuffer == NULL )
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d102      	bne.n	8008d08 <eConsiderFrameForProcessing+0x20>
    {
        eReturn = eReleaseBuffer;
 8008d02:	2300      	movs	r3, #0
 8008d04:	75fb      	strb	r3, [r7, #23]
 8008d06:	e032      	b.n	8008d6e <eConsiderFrameForProcessing+0x86>
        /* Map the buffer onto Ethernet Header struct for easy access to fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	613b      	str	r3, [r7, #16]

        /* Examine the destination MAC from the Ethernet header to see if it matches
         * that of an end point managed by FreeRTOS+TCP. */
        pxEndPoint = FreeRTOS_FindEndPointOnMAC( &( pxEthernetHeader->xDestinationAddress ), NULL );
 8008d0c:	693b      	ldr	r3, [r7, #16]
 8008d0e:	2100      	movs	r1, #0
 8008d10:	4618      	mov	r0, r3
 8008d12:	f003 ff81 	bl	800cc18 <FreeRTOS_FindEndPointOnMAC>
 8008d16:	60f8      	str	r0, [r7, #12]

        if( pxEndPoint != NULL )
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	2b00      	cmp	r3, #0
 8008d1c:	d002      	beq.n	8008d24 <eConsiderFrameForProcessing+0x3c>
        {
            /* The packet was directed to this node - process it. */
            eReturn = eProcessBuffer;
 8008d1e:	2301      	movs	r3, #1
 8008d20:	75fb      	strb	r3, [r7, #23]
 8008d22:	e024      	b.n	8008d6e <eConsiderFrameForProcessing+0x86>
        }
        else if( memcmp( xBroadcastMACAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8008d24:	693b      	ldr	r3, [r7, #16]
 8008d26:	2206      	movs	r2, #6
 8008d28:	4619      	mov	r1, r3
 8008d2a:	4820      	ldr	r0, [pc, #128]	@ (8008dac <eConsiderFrameForProcessing+0xc4>)
 8008d2c:	f019 f959 	bl	8021fe2 <memcmp>
 8008d30:	4603      	mov	r3, r0
 8008d32:	2b00      	cmp	r3, #0
 8008d34:	d102      	bne.n	8008d3c <eConsiderFrameForProcessing+0x54>
        {
            /* The packet was a broadcast - process it. */
            eReturn = eProcessBuffer;
 8008d36:	2301      	movs	r3, #1
 8008d38:	75fb      	strb	r3, [r7, #23]
 8008d3a:	e018      	b.n	8008d6e <eConsiderFrameForProcessing+0x86>
        }
        else
        #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_DNS != 0 ) )
            if( memcmp( xLLMNR_MacAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, sizeof( MACAddress_t ) ) == 0 )
 8008d3c:	693b      	ldr	r3, [r7, #16]
 8008d3e:	2206      	movs	r2, #6
 8008d40:	4619      	mov	r1, r3
 8008d42:	481b      	ldr	r0, [pc, #108]	@ (8008db0 <eConsiderFrameForProcessing+0xc8>)
 8008d44:	f019 f94d 	bl	8021fe2 <memcmp>
 8008d48:	4603      	mov	r3, r0
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d102      	bne.n	8008d54 <eConsiderFrameForProcessing+0x6c>
            {
                /* The packet is a request for LLMNR - process it. */
                eReturn = eProcessBuffer;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	75fb      	strb	r3, [r7, #23]
 8008d52:	e00c      	b.n	8008d6e <eConsiderFrameForProcessing+0x86>
                /* The packet is a request for MDNS - process it. */
                eReturn = eProcessBuffer;
            }
            else
        #endif /* ipconfigUSE_MDNS */
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8008d54:	693b      	ldr	r3, [r7, #16]
 8008d56:	781b      	ldrb	r3, [r3, #0]
 8008d58:	2b33      	cmp	r3, #51	@ 0x33
 8008d5a:	d106      	bne.n	8008d6a <eConsiderFrameForProcessing+0x82>
            ( pxEthernetHeader->xDestinationAddress.ucBytes[ 1 ] == ipMULTICAST_MAC_ADDRESS_IPv6_1 ) )
 8008d5c:	693b      	ldr	r3, [r7, #16]
 8008d5e:	785b      	ldrb	r3, [r3, #1]
        if( ( pxEthernetHeader->xDestinationAddress.ucBytes[ 0 ] == ipMULTICAST_MAC_ADDRESS_IPv6_0 ) &&
 8008d60:	2b33      	cmp	r3, #51	@ 0x33
 8008d62:	d102      	bne.n	8008d6a <eConsiderFrameForProcessing+0x82>
        {
            /* The packet is a request for LLMNR - process it. */
            eReturn = eProcessBuffer;
 8008d64:	2301      	movs	r3, #1
 8008d66:	75fb      	strb	r3, [r7, #23]
 8008d68:	e001      	b.n	8008d6e <eConsiderFrameForProcessing+0x86>
        }
        else
        {
            /* The packet was not a broadcast, or for this node, just release
             * the buffer without taking any other action. */
            eReturn = eReleaseBuffer;
 8008d6a:	2300      	movs	r3, #0
 8008d6c:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1 )
    {
        uint16_t usFrameType;

        if( eReturn == eProcessBuffer )
 8008d6e:	7dfb      	ldrb	r3, [r7, #23]
 8008d70:	2b01      	cmp	r3, #1
 8008d72:	d115      	bne.n	8008da0 <eConsiderFrameForProcessing+0xb8>
        {
            usFrameType = pxEthernetHeader->usFrameType;
 8008d74:	693b      	ldr	r3, [r7, #16]
 8008d76:	7b1a      	ldrb	r2, [r3, #12]
 8008d78:	7b5b      	ldrb	r3, [r3, #13]
 8008d7a:	021b      	lsls	r3, r3, #8
 8008d7c:	4313      	orrs	r3, r2
 8008d7e:	817b      	strh	r3, [r7, #10]
            usFrameType = FreeRTOS_ntohs( usFrameType );
 8008d80:	897b      	ldrh	r3, [r7, #10]
 8008d82:	021b      	lsls	r3, r3, #8
 8008d84:	b21a      	sxth	r2, r3
 8008d86:	897b      	ldrh	r3, [r7, #10]
 8008d88:	0a1b      	lsrs	r3, r3, #8
 8008d8a:	b29b      	uxth	r3, r3
 8008d8c:	b21b      	sxth	r3, r3
 8008d8e:	4313      	orrs	r3, r2
 8008d90:	b21b      	sxth	r3, r3
 8008d92:	817b      	strh	r3, [r7, #10]

            if( usFrameType <= 0x600U )
 8008d94:	897b      	ldrh	r3, [r7, #10]
 8008d96:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8008d9a:	d801      	bhi.n	8008da0 <eConsiderFrameForProcessing+0xb8>
            {
                /* Not an Ethernet II frame. */
                eReturn = eReleaseBuffer;
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #endif /* ipconfigFILTER_OUT_NON_ETHERNET_II_FRAMES == 1  */

    return eReturn;
 8008da0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008da2:	4618      	mov	r0, r3
 8008da4:	3718      	adds	r7, #24
 8008da6:	46bd      	mov	sp, r7
 8008da8:	bd80      	pop	{r7, pc}
 8008daa:	bf00      	nop
 8008dac:	08026318 	.word	0x08026318
 8008db0:	08026308 	.word	0x08026308

08008db4 <prvProcessEthernetPacket>:
 *
 * @param[in,out] pxNetworkBuffer the network buffer containing the ethernet packet. If the
 *                                 buffer is large enough, it may be reused to send a reply.
 */
static void prvProcessEthernetPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b084      	sub	sp, #16
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	6078      	str	r0, [r7, #4]
    const EthernetHeader_t * pxEthernetHeader;
    eFrameProcessingResult_t eReturned = eReleaseBuffer;
 8008dbc:	2300      	movs	r3, #0
 8008dbe:	73fb      	strb	r3, [r7, #15]
    {
        /* prvHandleEthernetPacket() already checked for ( pxNetworkBuffer != NULL ) so
         * it is safe to break out of the do{}while() and let the second half of this
         * function handle the releasing of pxNetworkBuffer */

        if( ( pxNetworkBuffer->pxInterface == NULL ) || ( pxNetworkBuffer->pxEndPoint == NULL ) )
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d03d      	beq.n	8008e44 <prvProcessEthernetPacket+0x90>
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d039      	beq.n	8008e44 <prvProcessEthernetPacket+0x90>
         * None of the above need to be checked again in code that handles incoming packets. */

        iptraceNETWORK_INTERFACE_INPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

        /* Interpret the Ethernet frame. */
        if( pxNetworkBuffer->xDataLength < sizeof( EthernetHeader_t ) )
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008dd4:	2b0d      	cmp	r3, #13
 8008dd6:	d934      	bls.n	8008e42 <prvProcessEthernetPacket+0x8e>
        {
            break;
        }

        eReturned = ipCONSIDER_FRAME_FOR_PROCESSING( pxNetworkBuffer->pucEthernetBuffer );
 8008dd8:	2301      	movs	r3, #1
 8008dda:	73fb      	strb	r3, [r7, #15]
        /* Map the buffer onto the Ethernet Header struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxEthernetHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008de0:	60bb      	str	r3, [r7, #8]
        #if ( ipconfigETHERNET_DRIVER_FILTERS_FRAME_TYPES == 0 )
            if( eReturned == eProcessBuffer )
        #endif
        {
            /* Interpret the received Ethernet packet. */
            switch( pxEthernetHeader->usFrameType )
 8008de2:	68bb      	ldr	r3, [r7, #8]
 8008de4:	899b      	ldrh	r3, [r3, #12]
 8008de6:	b29b      	uxth	r3, r3
 8008de8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008dec:	4293      	cmp	r3, r2
 8008dee:	d015      	beq.n	8008e1c <prvProcessEthernetPacket+0x68>
 8008df0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008df4:	4293      	cmp	r3, r2
 8008df6:	dc21      	bgt.n	8008e3c <prvProcessEthernetPacket+0x88>
 8008df8:	2b08      	cmp	r3, #8
 8008dfa:	d00f      	beq.n	8008e1c <prvProcessEthernetPacket+0x68>
 8008dfc:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 8008e00:	d11c      	bne.n	8008e3c <prvProcessEthernetPacket+0x88>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipARP_FRAME_TYPE:

                        /* The Ethernet frame contains an ARP packet. */
                        if( pxNetworkBuffer->xDataLength >= sizeof( ARPPacket_t ) )
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e06:	2b29      	cmp	r3, #41	@ 0x29
 8008e08:	d905      	bls.n	8008e16 <prvProcessEthernetPacket+0x62>
                        {
                            /* MISRA Ref 11.3.1 [Misaligned access] */
                            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                            /* coverity[misra_c_2012_rule_11_3_violation] */
                            eReturned = eARPProcessPacket( pxNetworkBuffer );
 8008e0a:	6878      	ldr	r0, [r7, #4]
 8008e0c:	f7fc ffe6 	bl	8005ddc <eARPProcessPacket>
 8008e10:	4603      	mov	r3, r0
 8008e12:	73fb      	strb	r3, [r7, #15]
                        }
                        else
                        {
                            eReturned = eReleaseBuffer;
                        }
                        break;
 8008e14:	e016      	b.n	8008e44 <prvProcessEthernetPacket+0x90>
                            eReturned = eReleaseBuffer;
 8008e16:	2300      	movs	r3, #0
 8008e18:	73fb      	strb	r3, [r7, #15]
                        break;
 8008e1a:	e013      	b.n	8008e44 <prvProcessEthernetPacket+0x90>

                case ipIPv4_FRAME_TYPE:
                case ipIPv6_FRAME_TYPE:

                    /* The Ethernet frame contains an IP packet. */
                    if( pxNetworkBuffer->xDataLength >= sizeof( IPPacket_t ) )
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008e20:	2b21      	cmp	r3, #33	@ 0x21
 8008e22:	d908      	bls.n	8008e36 <prvProcessEthernetPacket+0x82>
                    {
                        /* MISRA Ref 11.3.1 [Misaligned access] */
                        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                        /* coverity[misra_c_2012_rule_11_3_violation] */
                        eReturned = prvProcessIPPacket( ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer ), pxNetworkBuffer );
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e28:	6879      	ldr	r1, [r7, #4]
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	f000 f8c6 	bl	8008fbc <prvProcessIPPacket>
 8008e30:	4603      	mov	r3, r0
 8008e32:	73fb      	strb	r3, [r7, #15]
                    else
                    {
                        eReturned = eReleaseBuffer;
                    }

                    break;
 8008e34:	e006      	b.n	8008e44 <prvProcessEthernetPacket+0x90>
                        eReturned = eReleaseBuffer;
 8008e36:	2300      	movs	r3, #0
 8008e38:	73fb      	strb	r3, [r7, #15]
                    break;
 8008e3a:	e003      	b.n	8008e44 <prvProcessEthernetPacket+0x90>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES != 0 )
                        /* Custom frame handler. */
                        eReturned = eApplicationProcessCustomFrameHook( pxNetworkBuffer );
                    #else
                        /* No other packet types are handled.  Nothing to do. */
                        eReturned = eReleaseBuffer;
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	73fb      	strb	r3, [r7, #15]
                    #endif
                    break;
 8008e40:	e000      	b.n	8008e44 <prvProcessEthernetPacket+0x90>
            break;
 8008e42:	bf00      	nop
            } /* switch( pxEthernetHeader->usFrameType ) */
        }
    } while( pdFALSE );

    /* Perform any actions that resulted from processing the Ethernet frame. */
    switch( eReturned )
 8008e44:	7bfb      	ldrb	r3, [r7, #15]
 8008e46:	2b04      	cmp	r3, #4
 8008e48:	d00b      	beq.n	8008e62 <prvProcessEthernetPacket+0xae>
 8008e4a:	2b04      	cmp	r3, #4
 8008e4c:	dc19      	bgt.n	8008e82 <prvProcessEthernetPacket+0xce>
 8008e4e:	2b02      	cmp	r3, #2
 8008e50:	d002      	beq.n	8008e58 <prvProcessEthernetPacket+0xa4>
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d019      	beq.n	8008e8a <prvProcessEthernetPacket+0xd6>
 8008e56:	e014      	b.n	8008e82 <prvProcessEthernetPacket+0xce>
        case eReturnEthernetFrame:

            /* The Ethernet frame will have been updated (maybe it was
             * an ARP request or a PING request?) and should be sent back to
             * its source. */
            vReturnEthernetFrame( pxNetworkBuffer, pdTRUE );
 8008e58:	2101      	movs	r1, #1
 8008e5a:	6878      	ldr	r0, [r7, #4]
 8008e5c:	f000 f9a4 	bl	80091a8 <vReturnEthernetFrame>

            /* parameter pdTRUE: the buffer must be released once
             * the frame has been transmitted */
            break;
 8008e60:	e014      	b.n	8008e8c <prvProcessEthernetPacket+0xd8>
             * yet. */
            break;

        case eWaitingARPResolution:

            if( pxARPWaitingNetworkBuffer == NULL )
 8008e62:	4b0c      	ldr	r3, [pc, #48]	@ (8008e94 <prvProcessEthernetPacket+0xe0>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	d107      	bne.n	8008e7a <prvProcessEthernetPacket+0xc6>
            {
                pxARPWaitingNetworkBuffer = pxNetworkBuffer;
 8008e6a:	4a0a      	ldr	r2, [pc, #40]	@ (8008e94 <prvProcessEthernetPacket+0xe0>)
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	6013      	str	r3, [r2, #0]
                vIPTimerStartARPResolution( ipARP_RESOLUTION_MAX_DELAY );
 8008e70:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8008e74:	f000 fc06 	bl	8009684 <vIPTimerStartARPResolution>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );

                iptraceDELAYED_ARP_BUFFER_FULL();
            }

            break;
 8008e78:	e008      	b.n	8008e8c <prvProcessEthernetPacket+0xd8>
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8008e7a:	6878      	ldr	r0, [r7, #4]
 8008e7c:	f00d fca4 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
            break;
 8008e80:	e004      	b.n	8008e8c <prvProcessEthernetPacket+0xd8>
        default:

            /* The frame is not being used anywhere, and the
             * NetworkBufferDescriptor_t structure containing the frame should
             * just be released back to the list of free buffers. */
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8008e82:	6878      	ldr	r0, [r7, #4]
 8008e84:	f00d fca0 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
            break;
 8008e88:	e000      	b.n	8008e8c <prvProcessEthernetPacket+0xd8>
            break;
 8008e8a:	bf00      	nop
    }
}
 8008e8c:	bf00      	nop
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}
 8008e94:	20000e98 	.word	0x20000e98

08008e98 <prvProcessUDPPacket>:
 * @return eReleaseBuffer ( please release the buffer ).
 *         eFrameConsumed ( the buffer has now been released ).
 */

static eFrameProcessingResult_t prvProcessUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008e98:	b5b0      	push	{r4, r5, r7, lr}
 8008e9a:	b08c      	sub	sp, #48	@ 0x30
 8008e9c:	af00      	add	r7, sp, #0
 8008e9e:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eReleaseBuffer;
 8008ea0:	2300      	movs	r3, #0
 8008ea2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    BaseType_t xIsWaitingARPResolution = pdFALSE;
 8008ea6:	2300      	movs	r3, #0
 8008ea8:	60bb      	str	r3, [r7, #8]
    /* The IP packet contained a UDP frame. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const UDPPacket_t * pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008eae:	627b      	str	r3, [r7, #36]	@ 0x24
    const UDPHeader_t * pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8008eb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008eb2:	3322      	adds	r3, #34	@ 0x22
 8008eb4:	62bb      	str	r3, [r7, #40]	@ 0x28

    size_t uxMinSize = ipSIZE_OF_ETH_HEADER + ( size_t ) uxIPHeaderSizePacket( pxNetworkBuffer ) + ipSIZE_OF_UDP_HEADER;
 8008eb6:	6878      	ldr	r0, [r7, #4]
 8008eb8:	f000 fa76 	bl	80093a8 <uxIPHeaderSizePacket>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	3316      	adds	r3, #22
 8008ec0:	623b      	str	r3, [r7, #32]
    size_t uxLength;
    uint16_t usLength;

    #if ( ipconfigUSE_IPv6 != 0 )
        if( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv6_FRAME_TYPE )
 8008ec2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ec4:	899b      	ldrh	r3, [r3, #12]
 8008ec6:	b29b      	uxth	r3, r3
 8008ec8:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008ecc:	4293      	cmp	r3, r2
 8008ece:	d105      	bne.n	8008edc <prvProcessUDPPacket+0x44>
            const ProtocolHeaders_t * pxProtocolHeaders;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] ) );
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ed4:	3336      	adds	r3, #54	@ 0x36
 8008ed6:	61fb      	str	r3, [r7, #28]
            pxUDPHeader = &( pxProtocolHeaders->xUDPHeader );
 8008ed8:	69fb      	ldr	r3, [r7, #28]
 8008eda:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    usLength = FreeRTOS_ntohs( pxUDPHeader->usLength );
 8008edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ede:	889b      	ldrh	r3, [r3, #4]
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	021b      	lsls	r3, r3, #8
 8008ee4:	b21a      	sxth	r2, r3
 8008ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ee8:	889b      	ldrh	r3, [r3, #4]
 8008eea:	b29b      	uxth	r3, r3
 8008eec:	0a1b      	lsrs	r3, r3, #8
 8008eee:	b29b      	uxth	r3, r3
 8008ef0:	b21b      	sxth	r3, r3
 8008ef2:	4313      	orrs	r3, r2
 8008ef4:	b21b      	sxth	r3, r3
 8008ef6:	837b      	strh	r3, [r7, #26]
    uxLength = ( size_t ) usLength;
 8008ef8:	8b7b      	ldrh	r3, [r7, #26]
 8008efa:	617b      	str	r3, [r7, #20]

    /* Note the header values required prior to the checksum
     * generation as the checksum pseudo header may clobber some of
     * these values. */
    #if ( ipconfigUSE_IPv4 != 0 )
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8008efc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008efe:	899b      	ldrh	r3, [r3, #12]
 8008f00:	b29b      	uxth	r3, r3
 8008f02:	2b08      	cmp	r3, #8
 8008f04:	d11a      	bne.n	8008f3c <prvProcessUDPPacket+0xa4>
            ( usLength > ( FreeRTOS_ntohs( pxUDPPacket->xIPHeader.usLength ) - uxIPHeaderSizePacket( pxNetworkBuffer ) ) ) )
 8008f06:	8b7c      	ldrh	r4, [r7, #26]
 8008f08:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f0a:	8a1b      	ldrh	r3, [r3, #16]
 8008f0c:	b29b      	uxth	r3, r3
 8008f0e:	021b      	lsls	r3, r3, #8
 8008f10:	b21a      	sxth	r2, r3
 8008f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f14:	8a1b      	ldrh	r3, [r3, #16]
 8008f16:	b29b      	uxth	r3, r3
 8008f18:	0a1b      	lsrs	r3, r3, #8
 8008f1a:	b29b      	uxth	r3, r3
 8008f1c:	b21b      	sxth	r3, r3
 8008f1e:	4313      	orrs	r3, r2
 8008f20:	b21b      	sxth	r3, r3
 8008f22:	b29b      	uxth	r3, r3
 8008f24:	461d      	mov	r5, r3
 8008f26:	6878      	ldr	r0, [r7, #4]
 8008f28:	f000 fa3e 	bl	80093a8 <uxIPHeaderSizePacket>
 8008f2c:	4603      	mov	r3, r0
 8008f2e:	1aeb      	subs	r3, r5, r3
        if( ( pxUDPPacket->xEthernetHeader.usFrameType == ipIPv4_FRAME_TYPE ) &&
 8008f30:	429c      	cmp	r4, r3
 8008f32:	d903      	bls.n	8008f3c <prvProcessUDPPacket+0xa4>
        {
            eReturn = eReleaseBuffer;
 8008f34:	2300      	movs	r3, #0
 8008f36:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008f3a:	e038      	b.n	8008fae <prvProcessUDPPacket+0x116>
        }
        else
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    if( ( pxNetworkBuffer->xDataLength >= uxMinSize ) &&
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008f40:	6a3a      	ldr	r2, [r7, #32]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d833      	bhi.n	8008fae <prvProcessUDPPacket+0x116>
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2b07      	cmp	r3, #7
 8008f4a:	d930      	bls.n	8008fae <prvProcessUDPPacket+0x116>
         * size of the UDP header.
         *
         * The size of the UDP packet structure in this implementation
         * includes the size of the Ethernet header, the size of
         * the IP header, and the size of the UDP header. */
        uxPayloadSize_1 = pxNetworkBuffer->xDataLength - uxMinSize;
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008f50:	6a3b      	ldr	r3, [r7, #32]
 8008f52:	1ad3      	subs	r3, r2, r3
 8008f54:	613b      	str	r3, [r7, #16]
        uxPayloadSize_2 = uxLength - ipSIZE_OF_UDP_HEADER;
 8008f56:	697b      	ldr	r3, [r7, #20]
 8008f58:	3b08      	subs	r3, #8
 8008f5a:	60fb      	str	r3, [r7, #12]

        if( uxPayloadSize_1 > uxPayloadSize_2 )
 8008f5c:	693a      	ldr	r2, [r7, #16]
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	429a      	cmp	r2, r3
 8008f62:	d904      	bls.n	8008f6e <prvProcessUDPPacket+0xd6>
        {
            pxNetworkBuffer->xDataLength = uxPayloadSize_2 + uxMinSize;
 8008f64:	68fa      	ldr	r2, [r7, #12]
 8008f66:	6a3b      	ldr	r3, [r7, #32]
 8008f68:	441a      	add	r2, r3
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        pxNetworkBuffer->usPort = pxUDPHeader->usSourcePort;
 8008f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	b29a      	uxth	r2, r3
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulSourceIPAddress;
 8008f78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f7a:	f8d3 201a 	ldr.w	r2, [r3, #26]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	615a      	str	r2, [r3, #20]
         * by the NIC driver. */

        /* Pass the packet payload to the UDP sockets
         * implementation. */
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
                                       pxUDPHeader->usDestinationPort,
 8008f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008f84:	885b      	ldrh	r3, [r3, #2]
 8008f86:	b29b      	uxth	r3, r3
        if( xProcessReceivedUDPPacket( pxNetworkBuffer,
 8008f88:	f107 0208 	add.w	r2, r7, #8
 8008f8c:	4619      	mov	r1, r3
 8008f8e:	6878      	ldr	r0, [r7, #4]
 8008f90:	f00c fe2a 	bl	8015be8 <xProcessReceivedUDPPacket>
 8008f94:	4603      	mov	r3, r0
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d103      	bne.n	8008fa2 <prvProcessUDPPacket+0x10a>
                                       &( xIsWaitingARPResolution ) ) == pdPASS )
        {
            eReturn = eFrameConsumed;
 8008f9a:	2303      	movs	r3, #3
 8008f9c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8008fa0:	e005      	b.n	8008fae <prvProcessUDPPacket+0x116>
        }
        else
        {
            /* Is this packet to be set aside for ARP resolution. */
            if( xIsWaitingARPResolution == pdTRUE )
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2b01      	cmp	r3, #1
 8008fa6:	d102      	bne.n	8008fae <prvProcessUDPPacket+0x116>
            {
                eReturn = eWaitingARPResolution;
 8008fa8:	2304      	movs	r3, #4
 8008faa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    else
    {
        /* Length checks failed, the buffer will be released. */
    }

    return eReturn;
 8008fae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8008fb2:	4618      	mov	r0, r3
 8008fb4:	3730      	adds	r7, #48	@ 0x30
 8008fb6:	46bd      	mov	sp, r7
 8008fb8:	bdb0      	pop	{r4, r5, r7, pc}
	...

08008fbc <prvProcessIPPacket>:
 *
 * @return An enum to show whether the packet should be released/kept/processed etc.
 */
static eFrameProcessingResult_t prvProcessIPPacket( const IPPacket_t * pxIPPacket,
                                                    NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8008fbc:	b580      	push	{r7, lr}
 8008fbe:	b088      	sub	sp, #32
 8008fc0:	af00      	add	r7, sp, #0
 8008fc2:	6078      	str	r0, [r7, #4]
 8008fc4:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eReturn;
    UBaseType_t uxHeaderLength = ipSIZE_OF_IPv4_HEADER;
 8008fc6:	2314      	movs	r3, #20
 8008fc8:	61bb      	str	r3, [r7, #24]
    uint8_t ucProtocol = 0U;
 8008fca:	2300      	movs	r3, #0
 8008fcc:	75fb      	strb	r3, [r7, #23]

    #if ( ipconfigUSE_IPv6 != 0 )
        const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8008fce:	2300      	movs	r3, #0
 8008fd0:	613b      	str	r3, [r7, #16]
    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

    #if ( ipconfigUSE_IPv4 != 0 )
        const IPHeader_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	330e      	adds	r3, #14
 8008fd6:	60fb      	str	r3, [r7, #12]
    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

    switch( pxIPPacket->xEthernetHeader.usFrameType )
 8008fd8:	687b      	ldr	r3, [r7, #4]
 8008fda:	899b      	ldrh	r3, [r3, #12]
 8008fdc:	b29b      	uxth	r3, r3
 8008fde:	2b08      	cmp	r3, #8
 8008fe0:	d023      	beq.n	800902a <prvProcessIPPacket+0x6e>
 8008fe2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8008fe6:	4293      	cmp	r3, r2
 8008fe8:	d144      	bne.n	8009074 <prvProcessIPPacket+0xb8>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case ipIPv6_FRAME_TYPE:

                if( pxNetworkBuffer->xDataLength < sizeof( IPPacket_IPv6_t ) )
 8008fea:	683b      	ldr	r3, [r7, #0]
 8008fec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008fee:	2b35      	cmp	r3, #53	@ 0x35
 8008ff0:	d802      	bhi.n	8008ff8 <prvProcessIPPacket+0x3c>
                {
                    /* The packet size is less than minimum IPv6 packet. */
                    eReturn = eReleaseBuffer;
 8008ff2:	2300      	movs	r3, #0
 8008ff4:	77fb      	strb	r3, [r7, #31]
                    /* The IP-header type is copied to a special reserved location a few bytes before the message
                     * starts. In the case of IPv6, this value is never actually used and the line below can safely be removed
                     * with no ill effects. We only store it to help with debugging. */
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
                }
                break;
 8008ff6:	e043      	b.n	8009080 <prvProcessIPPacket+0xc4>
                    pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008ffc:	330e      	adds	r3, #14
 8008ffe:	613b      	str	r3, [r7, #16]
                    uxHeaderLength = ipSIZE_OF_IPv6_HEADER;
 8009000:	2328      	movs	r3, #40	@ 0x28
 8009002:	61bb      	str	r3, [r7, #24]
                    ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 8009004:	693b      	ldr	r3, [r7, #16]
 8009006:	799b      	ldrb	r3, [r3, #6]
 8009008:	75fb      	strb	r3, [r7, #23]
                    eReturn = prvAllowIPPacketIPv6( ( ( const IPHeader_IPv6_t * ) &( pxIPPacket->xIPHeader ) ), pxNetworkBuffer, uxHeaderLength );
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	330e      	adds	r3, #14
 800900e:	69ba      	ldr	r2, [r7, #24]
 8009010:	6839      	ldr	r1, [r7, #0]
 8009012:	4618      	mov	r0, r3
 8009014:	f001 fb6c 	bl	800a6f0 <prvAllowIPPacketIPv6>
 8009018:	4603      	mov	r3, r0
 800901a:	77fb      	strb	r3, [r7, #31]
                    pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader_IPv6->ucVersionTrafficClass;
 800901c:	683b      	ldr	r3, [r7, #0]
 800901e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009020:	3b06      	subs	r3, #6
 8009022:	693a      	ldr	r2, [r7, #16]
 8009024:	7812      	ldrb	r2, [r2, #0]
 8009026:	701a      	strb	r2, [r3, #0]
                break;
 8009028:	e02a      	b.n	8009080 <prvProcessIPPacket+0xc4>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case ipIPv4_FRAME_TYPE:
               {
                   size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	781b      	ldrb	r3, [r3, #0]
 800902e:	60bb      	str	r3, [r7, #8]

                   /* Check if the IP headers are acceptable and if it has our destination.
                    * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
                    * length in multiples of 4. */
                   uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 8009030:	68bb      	ldr	r3, [r7, #8]
 8009032:	009b      	lsls	r3, r3, #2
 8009034:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8009038:	61bb      	str	r3, [r7, #24]

                   if( ( uxHeaderLength > ( pxNetworkBuffer->xDataLength - ipSIZE_OF_ETH_HEADER ) ) ||
 800903a:	683b      	ldr	r3, [r7, #0]
 800903c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800903e:	3b0e      	subs	r3, #14
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	429a      	cmp	r2, r3
 8009044:	d802      	bhi.n	800904c <prvProcessIPPacket+0x90>
 8009046:	69bb      	ldr	r3, [r7, #24]
 8009048:	2b13      	cmp	r3, #19
 800904a:	d802      	bhi.n	8009052 <prvProcessIPPacket+0x96>
                       ( uxHeaderLength < ipSIZE_OF_IPv4_HEADER ) )
                   {
                       eReturn = eReleaseBuffer;
 800904c:	2300      	movs	r3, #0
 800904e:	77fb      	strb	r3, [r7, #31]
                            * buffer is being used. */
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
                       }
                   }

                   break;
 8009050:	e016      	b.n	8009080 <prvProcessIPPacket+0xc4>
                       ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	7ddb      	ldrb	r3, [r3, #23]
 8009056:	75fb      	strb	r3, [r7, #23]
                       eReturn = prvAllowIPPacketIPv4( pxIPPacket, pxNetworkBuffer, uxHeaderLength );
 8009058:	69ba      	ldr	r2, [r7, #24]
 800905a:	6839      	ldr	r1, [r7, #0]
 800905c:	6878      	ldr	r0, [r7, #4]
 800905e:	f001 f81b 	bl	800a098 <prvAllowIPPacketIPv4>
 8009062:	4603      	mov	r3, r0
 8009064:	77fb      	strb	r3, [r7, #31]
                           pxNetworkBuffer->pucEthernetBuffer[ 0 - ( BaseType_t ) ipIP_TYPE_OFFSET ] = pxIPHeader->ucVersionHeaderLength;
 8009066:	683b      	ldr	r3, [r7, #0]
 8009068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800906a:	3b06      	subs	r3, #6
 800906c:	68fa      	ldr	r2, [r7, #12]
 800906e:	7812      	ldrb	r2, [r2, #0]
 8009070:	701a      	strb	r2, [r3, #0]
                   break;
 8009072:	e005      	b.n	8009080 <prvProcessIPPacket+0xc4>
               }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            eReturn = eReleaseBuffer;
 8009074:	2300      	movs	r3, #0
 8009076:	77fb      	strb	r3, [r7, #31]
            FreeRTOS_debug_printf( ( "prvProcessIPPacket: Undefined Frame Type \n" ) );
 8009078:	484a      	ldr	r0, [pc, #296]	@ (80091a4 <prvProcessIPPacket+0x1e8>)
 800907a:	f017 fe01 	bl	8020c80 <lUDPLoggingPrintf>
            /* MISRA 16.4 Compliance */
            break;
 800907e:	bf00      	nop

    /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
    /* coverity[misra_c_2012_rule_14_3_violation] */
    /* coverity[cond_const] */
    if( eReturn == eProcessBuffer )
 8009080:	7ffb      	ldrb	r3, [r7, #31]
 8009082:	2b01      	cmp	r3, #1
 8009084:	f040 8088 	bne.w	8009198 <prvProcessIPPacket+0x1dc>
    {
        /* Are there IP-options. */
        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
        switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	899b      	ldrh	r3, [r3, #12]
 800908c:	b29b      	uxth	r3, r3
 800908e:	2b08      	cmp	r3, #8
 8009090:	d004      	beq.n	800909c <prvProcessIPPacket+0xe0>
 8009092:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8009096:	4293      	cmp	r3, r2
 8009098:	d009      	beq.n	80090ae <prvProcessIPPacket+0xf2>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 800909a:	e020      	b.n	80090de <prvProcessIPPacket+0x122>
                    if( uxHeaderLength > ipSIZE_OF_IPv4_HEADER )
 800909c:	69bb      	ldr	r3, [r7, #24]
 800909e:	2b14      	cmp	r3, #20
 80090a0:	d91a      	bls.n	80090d8 <prvProcessIPPacket+0x11c>
                        eReturn = prvCheckIP4HeaderOptions( pxNetworkBuffer );
 80090a2:	6838      	ldr	r0, [r7, #0]
 80090a4:	f001 f852 	bl	800a14c <prvCheckIP4HeaderOptions>
 80090a8:	4603      	mov	r3, r0
 80090aa:	77fb      	strb	r3, [r7, #31]
                    break;
 80090ac:	e014      	b.n	80090d8 <prvProcessIPPacket+0x11c>
                    if( xGetExtensionOrder( ucProtocol, 0U ) > 0 )
 80090ae:	7dfb      	ldrb	r3, [r7, #23]
 80090b0:	2100      	movs	r1, #0
 80090b2:	4618      	mov	r0, r3
 80090b4:	f001 fb3a 	bl	800a72c <xGetExtensionOrder>
 80090b8:	4603      	mov	r3, r0
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	dd0e      	ble.n	80090dc <prvProcessIPPacket+0x120>
                        eReturn = eHandleIPv6ExtensionHeaders( pxNetworkBuffer, pdTRUE );
 80090be:	2101      	movs	r1, #1
 80090c0:	6838      	ldr	r0, [r7, #0]
 80090c2:	f001 fb99 	bl	800a7f8 <eHandleIPv6ExtensionHeaders>
 80090c6:	4603      	mov	r3, r0
 80090c8:	77fb      	strb	r3, [r7, #31]
                        if( eReturn != eReleaseBuffer )
 80090ca:	7ffb      	ldrb	r3, [r7, #31]
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d005      	beq.n	80090dc <prvProcessIPPacket+0x120>
                            ucProtocol = pxIPHeader_IPv6->ucNextHeader;
 80090d0:	693b      	ldr	r3, [r7, #16]
 80090d2:	799b      	ldrb	r3, [r3, #6]
 80090d4:	75fb      	strb	r3, [r7, #23]
                    break;
 80090d6:	e001      	b.n	80090dc <prvProcessIPPacket+0x120>
                    break;
 80090d8:	bf00      	nop
 80090da:	e000      	b.n	80090de <prvProcessIPPacket+0x122>
                    break;
 80090dc:	bf00      	nop

        /* MISRA Ref 14.3.1 [Configuration dependent invariant] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-143 */
        /* coverity[misra_c_2012_rule_14_3_violation] */
        /* coverity[const] */
        if( eReturn != eReleaseBuffer )
 80090de:	7ffb      	ldrb	r3, [r7, #31]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d059      	beq.n	8009198 <prvProcessIPPacket+0x1dc>
        {
            /* Add the IP and MAC addresses to the ARP table if they are not
             * already there - otherwise refresh the age of the existing
             * entry. */
            if( ucProtocol != ( uint8_t ) ipPROTOCOL_UDP )
 80090e4:	7dfb      	ldrb	r3, [r7, #23]
 80090e6:	2b11      	cmp	r3, #17
 80090e8:	d026      	beq.n	8009138 <prvProcessIPPacket+0x17c>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 80090ea:	6838      	ldr	r0, [r7, #0]
 80090ec:	f7fd f918 	bl	8006320 <xCheckRequiresARPResolution>
 80090f0:	4603      	mov	r3, r0
 80090f2:	2b01      	cmp	r3, #1
 80090f4:	d102      	bne.n	80090fc <prvProcessIPPacket+0x140>
                {
                    eReturn = eWaitingARPResolution;
 80090f6:	2304      	movs	r3, #4
 80090f8:	77fb      	strb	r3, [r7, #31]
 80090fa:	e01d      	b.n	8009138 <prvProcessIPPacket+0x17c>
                     * packet.  For UDP packets, this will be done later in
                     * xProcessReceivedUDPPacket(), as soon as it's know that the message
                     * will be handled.  This will prevent the ARP cache getting
                     * overwritten with the IP address of useless broadcast packets. */
                    /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                    switch( pxIPPacket->xEthernetHeader.usFrameType ) /* LCOV_EXCL_BR_LINE */
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	899b      	ldrh	r3, [r3, #12]
 8009100:	b29b      	uxth	r3, r3
 8009102:	2b08      	cmp	r3, #8
 8009104:	d00e      	beq.n	8009124 <prvProcessIPPacket+0x168>
 8009106:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800910a:	4293      	cmp	r3, r2
 800910c:	d113      	bne.n	8009136 <prvProcessIPPacket+0x17a>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            case ipIPv6_FRAME_TYPE:
                                vNDRefreshCacheEntry( &( pxIPPacket->xEthernetHeader.xSourceAddress ), &( pxIPHeader_IPv6->xSourceAddress ), pxNetworkBuffer->pxEndPoint );
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	1d98      	adds	r0, r3, #6
 8009112:	693b      	ldr	r3, [r7, #16]
 8009114:	f103 0108 	add.w	r1, r3, #8
 8009118:	683b      	ldr	r3, [r7, #0]
 800911a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800911c:	461a      	mov	r2, r3
 800911e:	f002 f843 	bl	800b1a8 <vNDRefreshCacheEntry>
                                break;
 8009122:	e009      	b.n	8009138 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        #if ( ipconfigUSE_IPv4 != 0 )
                            case ipIPv4_FRAME_TYPE:
                                /* Refresh the age of this cache entry since a packet was received. */
                                vARPRefreshCacheEntryAge( &( pxIPPacket->xEthernetHeader.xSourceAddress ), pxIPHeader->ulSourceIPAddress );
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	1d9a      	adds	r2, r3, #6
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	4619      	mov	r1, r3
 800912e:	4610      	mov	r0, r2
 8009130:	f7fd f9d6 	bl	80064e0 <vARPRefreshCacheEntryAge>
                                break;
 8009134:	e000      	b.n	8009138 <prvProcessIPPacket+0x17c>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        /* Case default is never toggled because eReturn is not eProcessBuffer in previous step. */
                        default:   /* LCOV_EXCL_LINE */
                            /* MISRA 16.4 Compliance */
                            break; /* LCOV_EXCL_LINE */
 8009136:	bf00      	nop
                    }
                }
            }

            if( eReturn != eWaitingARPResolution )
 8009138:	7ffb      	ldrb	r3, [r7, #31]
 800913a:	2b04      	cmp	r3, #4
 800913c:	d02c      	beq.n	8009198 <prvProcessIPPacket+0x1dc>
            {
                switch( ucProtocol )
 800913e:	7dfb      	ldrb	r3, [r7, #23]
 8009140:	2b3a      	cmp	r3, #58	@ 0x3a
 8009142:	d010      	beq.n	8009166 <prvProcessIPPacket+0x1aa>
 8009144:	2b3a      	cmp	r3, #58	@ 0x3a
 8009146:	dc23      	bgt.n	8009190 <prvProcessIPPacket+0x1d4>
 8009148:	2b11      	cmp	r3, #17
 800914a:	d012      	beq.n	8009172 <prvProcessIPPacket+0x1b6>
 800914c:	2b11      	cmp	r3, #17
 800914e:	dc1f      	bgt.n	8009190 <prvProcessIPPacket+0x1d4>
 8009150:	2b01      	cmp	r3, #1
 8009152:	d002      	beq.n	800915a <prvProcessIPPacket+0x19e>
 8009154:	2b06      	cmp	r3, #6
 8009156:	d012      	beq.n	800917e <prvProcessIPPacket+0x1c2>
 8009158:	e01a      	b.n	8009190 <prvProcessIPPacket+0x1d4>
                             * also be returned, and the source of the ping will know something
                             * went wrong because it will not be able to validate what it
                             * receives. */
                            #if ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )
                            {
                                eReturn = ProcessICMPPacket( pxNetworkBuffer );
 800915a:	6838      	ldr	r0, [r7, #0]
 800915c:	f7ff f9fe 	bl	800855c <ProcessICMPPacket>
 8009160:	4603      	mov	r3, r0
 8009162:	77fb      	strb	r3, [r7, #31]
                            }
                            #endif /* ( ipconfigREPLY_TO_INCOMING_PINGS == 1 ) || ( ipconfigSUPPORT_OUTGOING_PINGS == 1 ) */
                            break;
 8009164:	e018      	b.n	8009198 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ipPROTOCOL_ICMP_IPv6:
                            eReturn = prvProcessICMPMessage_IPv6( pxNetworkBuffer );
 8009166:	6838      	ldr	r0, [r7, #0]
 8009168:	f002 fb6e 	bl	800b848 <prvProcessICMPMessage_IPv6>
 800916c:	4603      	mov	r3, r0
 800916e:	77fb      	strb	r3, [r7, #31]
                            break;
 8009170:	e012      	b.n	8009198 <prvProcessIPPacket+0x1dc>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ipPROTOCOL_UDP:
                        /* The IP packet contained a UDP frame. */

                        eReturn = prvProcessUDPPacket( pxNetworkBuffer );
 8009172:	6838      	ldr	r0, [r7, #0]
 8009174:	f7ff fe90 	bl	8008e98 <prvProcessUDPPacket>
 8009178:	4603      	mov	r3, r0
 800917a:	77fb      	strb	r3, [r7, #31]
                        break;
 800917c:	e00c      	b.n	8009198 <prvProcessIPPacket+0x1dc>

                        #if ipconfigUSE_TCP == 1
                            case ipPROTOCOL_TCP:

                                if( xProcessReceivedTCPPacket( pxNetworkBuffer ) == pdPASS )
 800917e:	6838      	ldr	r0, [r7, #0]
 8009180:	f007 fda0 	bl	8010cc4 <xProcessReceivedTCPPacket>
 8009184:	4603      	mov	r3, r0
 8009186:	2b01      	cmp	r3, #1
 8009188:	d105      	bne.n	8009196 <prvProcessIPPacket+0x1da>
                                {
                                    eReturn = eFrameConsumed;
 800918a:	2303      	movs	r3, #3
 800918c:	77fb      	strb	r3, [r7, #31]
                                }
                                break;
 800918e:	e002      	b.n	8009196 <prvProcessIPPacket+0x1da>
                        #endif /* if ipconfigUSE_TCP == 1 */
                    default:
                        /* Not a supported frame type. */
                        eReturn = eReleaseBuffer;
 8009190:	2300      	movs	r3, #0
 8009192:	77fb      	strb	r3, [r7, #31]
                        break;
 8009194:	e000      	b.n	8009198 <prvProcessIPPacket+0x1dc>
                                break;
 8009196:	bf00      	nop
                }
            }
        }
    }

    return eReturn;
 8009198:	7ffb      	ldrb	r3, [r7, #31]
}
 800919a:	4618      	mov	r0, r3
 800919c:	3720      	adds	r7, #32
 800919e:	46bd      	mov	sp, r7
 80091a0:	bd80      	pop	{r7, pc}
 80091a2:	bf00      	nop
 80091a4:	08023714 	.word	0x08023714

080091a8 <vReturnEthernetFrame>:
 * @param[in,out] pxNetworkBuffer The network buffer which is to be sent.
 * @param[in] xReleaseAfterSend Whether this network buffer is to be released or not.
 */
void vReturnEthernetFrame( NetworkBufferDescriptor_t * pxNetworkBuffer,
                           BaseType_t xReleaseAfterSend )
{
 80091a8:	b580      	push	{r7, lr}
 80091aa:	b08e      	sub	sp, #56	@ 0x38
 80091ac:	af00      	add	r7, sp, #0
 80091ae:	6078      	str	r0, [r7, #4]
 80091b0:	6039      	str	r1, [r7, #0]
        NetworkBufferDescriptor_t * pxNewBuffer;
    #endif

    #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
    {
        if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091b6:	2b3b      	cmp	r3, #59	@ 0x3b
 80091b8:	d818      	bhi.n	80091ec <vReturnEthernetFrame+0x44>
        {
            BaseType_t xIndex;

            FreeRTOS_printf( ( "vReturnEthernetFrame: length %u\n", ( unsigned ) pxNetworkBuffer->xDataLength ) );
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091be:	4619      	mov	r1, r3
 80091c0:	486a      	ldr	r0, [pc, #424]	@ (800936c <vReturnEthernetFrame+0x1c4>)
 80091c2:	f017 fd5d 	bl	8020c80 <lUDPLoggingPrintf>

            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80091cc:	e008      	b.n	80091e0 <vReturnEthernetFrame+0x38>
            {
                pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091d4:	4413      	add	r3, r2
 80091d6:	2200      	movs	r2, #0
 80091d8:	701a      	strb	r2, [r3, #0]
            for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80091da:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091dc:	3301      	adds	r3, #1
 80091de:	637b      	str	r3, [r7, #52]	@ 0x34
 80091e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80091e2:	2b3b      	cmp	r3, #59	@ 0x3b
 80091e4:	ddf3      	ble.n	80091ce <vReturnEthernetFrame+0x26>
            }

            pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	223c      	movs	r2, #60	@ 0x3c
 80091ea:	629a      	str	r2, [r3, #40]	@ 0x28
        }
    }
    #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

    #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        if( xReleaseAfterSend == pdFALSE )
 80091ec:	683b      	ldr	r3, [r7, #0]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d111      	bne.n	8009216 <vReturnEthernetFrame+0x6e>
        {
            pxNewBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, pxNetworkBuffer->xDataLength );
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80091f6:	4619      	mov	r1, r3
 80091f8:	6878      	ldr	r0, [r7, #4]
 80091fa:	f000 fb87 	bl	800990c <pxDuplicateNetworkBufferWithDescriptor>
 80091fe:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( pxNewBuffer != NULL )
 8009200:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009202:	2b00      	cmp	r3, #0
 8009204:	d005      	beq.n	8009212 <vReturnEthernetFrame+0x6a>
            {
                xReleaseAfterSend = pdTRUE;
 8009206:	2301      	movs	r3, #1
 8009208:	603b      	str	r3, [r7, #0]
                /* Want no rounding up. */
                pxNewBuffer->xDataLength = pxNetworkBuffer->xDataLength;
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800920e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009210:	629a      	str	r2, [r3, #40]	@ 0x28
            }

            pxNetworkBuffer = pxNewBuffer;
 8009212:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009214:	607b      	str	r3, [r7, #4]
        }

        if( pxNetworkBuffer != NULL )
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 80a3 	beq.w	8009364 <vReturnEthernetFrame+0x1bc>
    #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPPacket_t * pxIPPacket = ( ( IPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009222:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
        const void * pvCopySource = NULL;
 8009224:	2300      	movs	r3, #0
 8009226:	633b      	str	r3, [r7, #48]	@ 0x30
        void * pvCopyDest;

        #if ( ipconfigUSE_IPv4 != 0 )
            MACAddress_t xMACAddress;
            eARPLookupResult_t eResult;
            uint32_t ulDestinationIPAddress = 0U;
 8009228:	2300      	movs	r3, #0
 800922a:	613b      	str	r3, [r7, #16]
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        /* Send! */
        if( pxNetworkBuffer->pxEndPoint == NULL )
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009230:	2b00      	cmp	r3, #0
 8009232:	d12f      	bne.n	8009294 <vReturnEthernetFrame+0xec>
        {
            /* _HT_ I wonder if this ad-hoc search of an end-point it necessary. */
            FreeRTOS_printf( ( "vReturnEthernetFrame: No pxEndPoint yet for %x ip?\n", ( unsigned int ) FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulDestinationIPAddress ) ) );
 8009234:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009236:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800923a:	061a      	lsls	r2, r3, #24
 800923c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800923e:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009242:	021b      	lsls	r3, r3, #8
 8009244:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8009248:	431a      	orrs	r2, r3
 800924a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800924c:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009250:	0a1b      	lsrs	r3, r3, #8
 8009252:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009256:	431a      	orrs	r2, r3
 8009258:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800925a:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800925e:	0e1b      	lsrs	r3, r3, #24
 8009260:	4313      	orrs	r3, r2
 8009262:	4619      	mov	r1, r3
 8009264:	4842      	ldr	r0, [pc, #264]	@ (8009370 <vReturnEthernetFrame+0x1c8>)
 8009266:	f017 fd0b 	bl	8020c80 <lUDPLoggingPrintf>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            switch( ( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer ) )->usFrameType )
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800926e:	899b      	ldrh	r3, [r3, #12]
 8009270:	b29b      	uxth	r3, r3
 8009272:	2b08      	cmp	r3, #8
 8009274:	d003      	beq.n	800927e <vReturnEthernetFrame+0xd6>
 8009276:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800927a:	4293      	cmp	r3, r2
                        break;
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800927c:	e00a      	b.n	8009294 <vReturnEthernetFrame+0xec>
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPPacket->xIPHeader.ulDestinationIPAddress, 7 );
 800927e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009280:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8009284:	2107      	movs	r1, #7
 8009286:	4618      	mov	r0, r3
 8009288:	f003 fcfe 	bl	800cc88 <FreeRTOS_FindEndPointOnNetMask>
 800928c:	4602      	mov	r2, r0
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	631a      	str	r2, [r3, #48]	@ 0x30
                        break;
 8009292:	bf00      	nop
            }
        }

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009298:	2b00      	cmp	r3, #0
 800929a:	d063      	beq.n	8009364 <vReturnEthernetFrame+0x1bc>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface; /*_RB_ Why not use the pxNetworkBuffer->pxNetworkInterface directly? */
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80092a0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80092a4:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Interpret the Ethernet packet being sent. */
            switch( pxIPPacket->xEthernetHeader.usFrameType )
 80092a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092a8:	899b      	ldrh	r3, [r3, #12]
 80092aa:	b29b      	uxth	r3, r3
 80092ac:	2b08      	cmp	r3, #8
 80092ae:	d11c      	bne.n	80092ea <vReturnEthernetFrame+0x142>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipIPv4_FRAME_TYPE:
                        ulDestinationIPAddress = pxIPPacket->xIPHeader.ulDestinationIPAddress;
 80092b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092b2:	f8d3 301e 	ldr.w	r3, [r3, #30]
 80092b6:	613b      	str	r3, [r7, #16]

                        /* Try to find a MAC address corresponding to the destination IP
                         * address. */
                        eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80092be:	f107 0114 	add.w	r1, r7, #20
 80092c2:	f107 0310 	add.w	r3, r7, #16
 80092c6:	4618      	mov	r0, r3
 80092c8:	f7fd fa54 	bl	8006774 <eARPGetCacheEntry>
 80092cc:	4603      	mov	r3, r0
 80092ce:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                        if( eResult == eARPCacheHit )
 80092d2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80092d6:	2b01      	cmp	r3, #1
 80092d8:	d103      	bne.n	80092e2 <vReturnEthernetFrame+0x13a>
                        {
                            /* Best case scenario - an address is found, use it. */
                            pvCopySource = &xMACAddress;
 80092da:	f107 0314 	add.w	r3, r7, #20
 80092de:	633b      	str	r3, [r7, #48]	@ 0x30
                        else
                        {
                            /* If an address is not found, just swap the source and destination MAC addresses. */
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
                        }
                        break;
 80092e0:	e007      	b.n	80092f2 <vReturnEthernetFrame+0x14a>
                            pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 80092e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092e4:	3306      	adds	r3, #6
 80092e6:	633b      	str	r3, [r7, #48]	@ 0x30
                        break;
 80092e8:	e003      	b.n	80092f2 <vReturnEthernetFrame+0x14a>

                case ipIPv6_FRAME_TYPE:
                case ipARP_FRAME_TYPE:
                default:
                    /* In case of ARP frame, just swap the source and destination MAC addresses. */
                    pvCopySource = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 80092ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092ec:	3306      	adds	r3, #6
 80092ee:	633b      	str	r3, [r7, #48]	@ 0x30
                    break;
 80092f0:	bf00      	nop
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xDestinationAddress );
 80092f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80092f4:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxIPPacket->xEthernetHeader.xDestinationAddress ) );
 80092f6:	2206      	movs	r2, #6
 80092f8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80092fa:	69f8      	ldr	r0, [r7, #28]
 80092fc:	f017 fedc 	bl	80210b8 <memcpy>

            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009304:	33e8      	adds	r3, #232	@ 0xe8
 8009306:	633b      	str	r3, [r7, #48]	@ 0x30
            pvCopyDest = &( pxIPPacket->xEthernetHeader.xSourceAddress );
 8009308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800930a:	3306      	adds	r3, #6
 800930c:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 800930e:	2206      	movs	r2, #6
 8009310:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8009312:	69f8      	ldr	r0, [r7, #28]
 8009314:	f017 fed0 	bl	80210b8 <memcpy>

            /* Send! */
            if( xIsCallingFromIPTask() == pdTRUE )
 8009318:	f000 fbd4 	bl	8009ac4 <xIsCallingFromIPTask>
 800931c:	4603      	mov	r3, r0
 800931e:	2b01      	cmp	r3, #1
 8009320:	d106      	bne.n	8009330 <vReturnEthernetFrame+0x188>
            {
                iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xReleaseAfterSend );
 8009322:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009324:	68db      	ldr	r3, [r3, #12]
 8009326:	683a      	ldr	r2, [r7, #0]
 8009328:	6879      	ldr	r1, [r7, #4]
 800932a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800932c:	4798      	blx	r3
                /* This should never reach or the packet is gone. */
                configASSERT( pdFALSE );
            }
        }
    }
}
 800932e:	e019      	b.n	8009364 <vReturnEthernetFrame+0x1bc>
            else if( xReleaseAfterSend != pdFALSE )
 8009330:	683b      	ldr	r3, [r7, #0]
 8009332:	2b00      	cmp	r3, #0
 8009334:	d011      	beq.n	800935a <vReturnEthernetFrame+0x1b2>
                xSendEvent.eEventType = eNetworkTxEvent;
 8009336:	2302      	movs	r3, #2
 8009338:	723b      	strb	r3, [r7, #8]
                xSendEvent.pvData = pxNetworkBuffer;
 800933a:	687b      	ldr	r3, [r7, #4]
 800933c:	60fb      	str	r3, [r7, #12]
                if( xSendEventStructToIPTask( &xSendEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800933e:	f107 0308 	add.w	r3, r7, #8
 8009342:	f04f 31ff 	mov.w	r1, #4294967295
 8009346:	4618      	mov	r0, r3
 8009348:	f7ff fc7a 	bl	8008c40 <xSendEventStructToIPTask>
 800934c:	4603      	mov	r3, r0
 800934e:	2b00      	cmp	r3, #0
 8009350:	d108      	bne.n	8009364 <vReturnEthernetFrame+0x1bc>
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8009352:	6878      	ldr	r0, [r7, #4]
 8009354:	f00d fa38 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
}
 8009358:	e004      	b.n	8009364 <vReturnEthernetFrame+0x1bc>
                configASSERT( pdFALSE );
 800935a:	f640 019f 	movw	r1, #2207	@ 0x89f
 800935e:	4805      	ldr	r0, [pc, #20]	@ (8009374 <vReturnEthernetFrame+0x1cc>)
 8009360:	f7f8 f886 	bl	8001470 <vAssertCalled>
}
 8009364:	bf00      	nop
 8009366:	3738      	adds	r7, #56	@ 0x38
 8009368:	46bd      	mov	sp, r7
 800936a:	bd80      	pop	{r7, pc}
 800936c:	08023740 	.word	0x08023740
 8009370:	08023764 	.word	0x08023764
 8009374:	0802362c 	.word	0x0802362c

08009378 <xIPIsNetworkTaskReady>:
 * @brief Returns whether the IP task is ready.
 *
 * @return pdTRUE if IP task is ready, else pdFALSE.
 */
BaseType_t xIPIsNetworkTaskReady( void )
{
 8009378:	b480      	push	{r7}
 800937a:	af00      	add	r7, sp, #0
    return xIPTaskInitialised;
 800937c:	4b03      	ldr	r3, [pc, #12]	@ (800938c <xIPIsNetworkTaskReady+0x14>)
 800937e:	681b      	ldr	r3, [r3, #0]
}
 8009380:	4618      	mov	r0, r3
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	20000eac 	.word	0x20000eac

08009390 <uxGetMinimumIPQueueSpace>:
 * @brief Get the minimum space in the IP task queue.
 *
 * @return The minimum possible space in the IP task queue.
 */
    UBaseType_t uxGetMinimumIPQueueSpace( void )
    {
 8009390:	b480      	push	{r7}
 8009392:	af00      	add	r7, sp, #0
        return uxQueueMinimumSpace;
 8009394:	4b03      	ldr	r3, [pc, #12]	@ (80093a4 <uxGetMinimumIPQueueSpace+0x14>)
 8009396:	681b      	ldr	r3, [r3, #0]
    }
 8009398:	4618      	mov	r0, r3
 800939a:	46bd      	mov	sp, r7
 800939c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093a0:	4770      	bx	lr
 80093a2:	bf00      	nop
 80093a4:	20000014 	.word	0x20000014

080093a8 <uxIPHeaderSizePacket>:
 * @brief Get the size of the IP-header, by checking the type of the network buffer.
 * @param[in] pxNetworkBuffer The network buffer.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizePacket( const NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80093a8:	b480      	push	{r7}
 80093aa:	b085      	sub	sp, #20
 80093ac:	af00      	add	r7, sp, #0
 80093ae:	6078      	str	r0, [r7, #4]
    size_t uxResult;
    /* Map the buffer onto Ethernet Header struct for easy access to fields. */
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b4:	60bb      	str	r3, [r7, #8]

    if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 80093b6:	68bb      	ldr	r3, [r7, #8]
 80093b8:	899b      	ldrh	r3, [r3, #12]
 80093ba:	b29b      	uxth	r3, r3
 80093bc:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80093c0:	4293      	cmp	r3, r2
 80093c2:	d102      	bne.n	80093ca <uxIPHeaderSizePacket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 80093c4:	2328      	movs	r3, #40	@ 0x28
 80093c6:	60fb      	str	r3, [r7, #12]
 80093c8:	e001      	b.n	80093ce <uxIPHeaderSizePacket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 80093ca:	2314      	movs	r3, #20
 80093cc:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 80093ce:	68fb      	ldr	r3, [r7, #12]
}
 80093d0:	4618      	mov	r0, r3
 80093d2:	3714      	adds	r7, #20
 80093d4:	46bd      	mov	sp, r7
 80093d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093da:	4770      	bx	lr

080093dc <uxIPHeaderSizeSocket>:
 * @brief Get the size of the IP-header, by checking if the socket bIsIPv6 set.
 * @param[in] pxSocket The socket.
 * @return The size of the corresponding IP-header.
 */
size_t uxIPHeaderSizeSocket( const FreeRTOS_Socket_t * pxSocket )
{
 80093dc:	b480      	push	{r7}
 80093de:	b085      	sub	sp, #20
 80093e0:	af00      	add	r7, sp, #0
 80093e2:	6078      	str	r0, [r7, #4]
    size_t uxResult;

    if( ( pxSocket != NULL ) && ( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED ) )
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2b00      	cmp	r3, #0
 80093e8:	d009      	beq.n	80093fe <uxIPHeaderSizeSocket+0x22>
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	7a1b      	ldrb	r3, [r3, #8]
 80093ee:	f003 0301 	and.w	r3, r3, #1
 80093f2:	b2db      	uxtb	r3, r3
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d002      	beq.n	80093fe <uxIPHeaderSizeSocket+0x22>
    {
        uxResult = ipSIZE_OF_IPv6_HEADER;
 80093f8:	2328      	movs	r3, #40	@ 0x28
 80093fa:	60fb      	str	r3, [r7, #12]
 80093fc:	e001      	b.n	8009402 <uxIPHeaderSizeSocket+0x26>
    }
    else
    {
        uxResult = ipSIZE_OF_IPv4_HEADER;
 80093fe:	2314      	movs	r3, #20
 8009400:	60fb      	str	r3, [r7, #12]
    }

    return uxResult;
 8009402:	68fb      	ldr	r3, [r7, #12]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3714      	adds	r7, #20
 8009408:	46bd      	mov	sp, r7
 800940a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800940e:	4770      	bx	lr

08009410 <xCalculateSleepTime>:
 *
 * @return The maximum sleep time or ipconfigMAX_IP_TASK_SLEEP_TIME,
 *         whichever is smaller.
 */
TickType_t xCalculateSleepTime( void )
{
 8009410:	b480      	push	{r7}
 8009412:	b083      	sub	sp, #12
 8009414:	af00      	add	r7, sp, #0
    TickType_t uxMaximumSleepTime;

    /* Start with the maximum sleep time, then check this against the remaining
     * time in any other timers that are active. */
    uxMaximumSleepTime = ipconfigMAX_IP_TASK_SLEEP_TIME;
 8009416:	f242 7310 	movw	r3, #10000	@ 0x2710
 800941a:	607b      	str	r3, [r7, #4]

    if( xARPTimer.bActive != pdFALSE_UNSIGNED )
 800941c:	4b28      	ldr	r3, [pc, #160]	@ (80094c0 <xCalculateSleepTime+0xb0>)
 800941e:	781b      	ldrb	r3, [r3, #0]
 8009420:	f003 0301 	and.w	r3, r3, #1
 8009424:	b2db      	uxtb	r3, r3
 8009426:	2b00      	cmp	r3, #0
 8009428:	d007      	beq.n	800943a <xCalculateSleepTime+0x2a>
    {
        if( xARPTimer.ulRemainingTime < uxMaximumSleepTime )
 800942a:	4b25      	ldr	r3, [pc, #148]	@ (80094c0 <xCalculateSleepTime+0xb0>)
 800942c:	68db      	ldr	r3, [r3, #12]
 800942e:	687a      	ldr	r2, [r7, #4]
 8009430:	429a      	cmp	r2, r3
 8009432:	d902      	bls.n	800943a <xCalculateSleepTime+0x2a>
        {
            uxMaximumSleepTime = xARPTimer.ulRemainingTime;
 8009434:	4b22      	ldr	r3, [pc, #136]	@ (80094c0 <xCalculateSleepTime+0xb0>)
 8009436:	68db      	ldr	r3, [r3, #12]
 8009438:	607b      	str	r3, [r7, #4]
        }
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        const NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800943a:	4b22      	ldr	r3, [pc, #136]	@ (80094c4 <xCalculateSleepTime+0xb4>)
 800943c:	681b      	ldr	r3, [r3, #0]
 800943e:	603b      	str	r3, [r7, #0]

        while( pxEndPoint != NULL )
 8009440:	e015      	b.n	800946e <xCalculateSleepTime+0x5e>
        {
            if( pxEndPoint->xDHCP_RATimer.bActive != pdFALSE_UNSIGNED )
 8009442:	683b      	ldr	r3, [r7, #0]
 8009444:	f893 30f8 	ldrb.w	r3, [r3, #248]	@ 0xf8
 8009448:	f003 0301 	and.w	r3, r3, #1
 800944c:	b2db      	uxtb	r3, r3
 800944e:	2b00      	cmp	r3, #0
 8009450:	d009      	beq.n	8009466 <xCalculateSleepTime+0x56>
            {
                if( pxEndPoint->xDHCP_RATimer.ulRemainingTime < uxMaximumSleepTime )
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009458:	687a      	ldr	r2, [r7, #4]
 800945a:	429a      	cmp	r2, r3
 800945c:	d903      	bls.n	8009466 <xCalculateSleepTime+0x56>
                {
                    uxMaximumSleepTime = pxEndPoint->xDHCP_RATimer.ulRemainingTime;
 800945e:	683b      	ldr	r3, [r7, #0]
 8009460:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8009464:	607b      	str	r3, [r7, #4]
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800946c:	603b      	str	r3, [r7, #0]
        while( pxEndPoint != NULL )
 800946e:	683b      	ldr	r3, [r7, #0]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e6      	bne.n	8009442 <xCalculateSleepTime+0x32>
    }
    #endif /* ipconfigUSE_DHCP */

    #if ( ipconfigUSE_TCP == 1 )
    {
        if( xTCPTimer.bActive != pdFALSE_UNSIGNED )
 8009474:	4b14      	ldr	r3, [pc, #80]	@ (80094c8 <xCalculateSleepTime+0xb8>)
 8009476:	781b      	ldrb	r3, [r3, #0]
 8009478:	f003 0301 	and.w	r3, r3, #1
 800947c:	b2db      	uxtb	r3, r3
 800947e:	2b00      	cmp	r3, #0
 8009480:	d007      	beq.n	8009492 <xCalculateSleepTime+0x82>
        {
            if( xTCPTimer.ulRemainingTime < uxMaximumSleepTime )
 8009482:	4b11      	ldr	r3, [pc, #68]	@ (80094c8 <xCalculateSleepTime+0xb8>)
 8009484:	68db      	ldr	r3, [r3, #12]
 8009486:	687a      	ldr	r2, [r7, #4]
 8009488:	429a      	cmp	r2, r3
 800948a:	d902      	bls.n	8009492 <xCalculateSleepTime+0x82>
            {
                uxMaximumSleepTime = xTCPTimer.ulRemainingTime;
 800948c:	4b0e      	ldr	r3, [pc, #56]	@ (80094c8 <xCalculateSleepTime+0xb8>)
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	607b      	str	r3, [r7, #4]
    }
    #endif

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        if( xDNSTimer.bActive != pdFALSE_UNSIGNED )
 8009492:	4b0e      	ldr	r3, [pc, #56]	@ (80094cc <xCalculateSleepTime+0xbc>)
 8009494:	781b      	ldrb	r3, [r3, #0]
 8009496:	f003 0301 	and.w	r3, r3, #1
 800949a:	b2db      	uxtb	r3, r3
 800949c:	2b00      	cmp	r3, #0
 800949e:	d007      	beq.n	80094b0 <xCalculateSleepTime+0xa0>
        {
            if( xDNSTimer.ulRemainingTime < uxMaximumSleepTime )
 80094a0:	4b0a      	ldr	r3, [pc, #40]	@ (80094cc <xCalculateSleepTime+0xbc>)
 80094a2:	68db      	ldr	r3, [r3, #12]
 80094a4:	687a      	ldr	r2, [r7, #4]
 80094a6:	429a      	cmp	r2, r3
 80094a8:	d902      	bls.n	80094b0 <xCalculateSleepTime+0xa0>
            {
                uxMaximumSleepTime = xDNSTimer.ulRemainingTime;
 80094aa:	4b08      	ldr	r3, [pc, #32]	@ (80094cc <xCalculateSleepTime+0xbc>)
 80094ac:	68db      	ldr	r3, [r3, #12]
 80094ae:	607b      	str	r3, [r7, #4]
            }
        }
    }
    #endif

    return uxMaximumSleepTime;
 80094b0:	687b      	ldr	r3, [r7, #4]
}
 80094b2:	4618      	mov	r0, r3
 80094b4:	370c      	adds	r7, #12
 80094b6:	46bd      	mov	sp, r7
 80094b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094bc:	4770      	bx	lr
 80094be:	bf00      	nop
 80094c0:	20000ec8 	.word	0x20000ec8
 80094c4:	20001224 	.word	0x20001224
 80094c8:	20000edc 	.word	0x20000edc
 80094cc:	20000ef0 	.word	0x20000ef0

080094d0 <vCheckNetworkTimers>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void vCheckNetworkTimers( void )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
    NetworkInterface_t * pxInterface;

    /* Is it time for ARP processing? */
    if( prvIPTimerCheck( &xARPTimer ) != pdFALSE )
 80094d6:	484f      	ldr	r0, [pc, #316]	@ (8009614 <vCheckNetworkTimers+0x144>)
 80094d8:	f000 f932 	bl	8009740 <prvIPTimerCheck>
 80094dc:	4603      	mov	r3, r0
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d002      	beq.n	80094e8 <vCheckNetworkTimers+0x18>
    {
        ( void ) xSendEventToIPTask( eARPTimerEvent );
 80094e2:	2003      	movs	r0, #3
 80094e4:	f7ff fb96 	bl	8008c14 <xSendEventToIPTask>
    }

    /* Is the ARP resolution timer expired? */
    if( prvIPTimerCheck( &xARPResolutionTimer ) != pdFALSE )
 80094e8:	484b      	ldr	r0, [pc, #300]	@ (8009618 <vCheckNetworkTimers+0x148>)
 80094ea:	f000 f929 	bl	8009740 <prvIPTimerCheck>
 80094ee:	4603      	mov	r3, r0
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	d00e      	beq.n	8009512 <vCheckNetworkTimers+0x42>
    {
        if( pxARPWaitingNetworkBuffer != NULL )
 80094f4:	4b49      	ldr	r3, [pc, #292]	@ (800961c <vCheckNetworkTimers+0x14c>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d00a      	beq.n	8009512 <vCheckNetworkTimers+0x42>
        {
            /* Disable the ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 80094fc:	2000      	movs	r0, #0
 80094fe:	f000 f995 	bl	800982c <vIPSetARPResolutionTimerEnableState>

            /* We have waited long enough for the ARP response. Now, free the network
             * buffer. */
            vReleaseNetworkBufferAndDescriptor( pxARPWaitingNetworkBuffer );
 8009502:	4b46      	ldr	r3, [pc, #280]	@ (800961c <vCheckNetworkTimers+0x14c>)
 8009504:	681b      	ldr	r3, [r3, #0]
 8009506:	4618      	mov	r0, r3
 8009508:	f00d f95e 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>

            /* Clear the pointer. */
            pxARPWaitingNetworkBuffer = NULL;
 800950c:	4b43      	ldr	r3, [pc, #268]	@ (800961c <vCheckNetworkTimers+0x14c>)
 800950e:	2200      	movs	r2, #0
 8009510:	601a      	str	r2, [r3, #0]
    }

    #if ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA == 1 )
    {
        /* Is it time for DHCP processing? */
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 8009512:	4b43      	ldr	r3, [pc, #268]	@ (8009620 <vCheckNetworkTimers+0x150>)
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	613b      	str	r3, [r7, #16]

        while( pxEndPoint != NULL )
 8009518:	e01f      	b.n	800955a <vCheckNetworkTimers+0x8a>
        {
            if( prvIPTimerCheck( &( pxEndPoint->xDHCP_RATimer ) ) != pdFALSE )
 800951a:	693b      	ldr	r3, [r7, #16]
 800951c:	33f8      	adds	r3, #248	@ 0xf8
 800951e:	4618      	mov	r0, r3
 8009520:	f000 f90e 	bl	8009740 <prvIPTimerCheck>
 8009524:	4603      	mov	r3, r0
 8009526:	2b00      	cmp	r3, #0
 8009528:	d013      	beq.n	8009552 <vCheckNetworkTimers+0x82>
                        ( void ) xSendDHCPEvent( pxEndPoint );
                    }
                #endif /* ( ipconfigUSE_DHCP == 1 ) */

                #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                    if( END_POINT_USES_RA( pxEndPoint ) )
 800952a:	693b      	ldr	r3, [r7, #16]
 800952c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009530:	f003 0304 	and.w	r3, r3, #4
 8009534:	b2db      	uxtb	r3, r3
 8009536:	2b00      	cmp	r3, #0
 8009538:	d00b      	beq.n	8009552 <vCheckNetworkTimers+0x82>
 800953a:	693b      	ldr	r3, [r7, #16]
 800953c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009540:	f003 0302 	and.w	r3, r3, #2
 8009544:	b2db      	uxtb	r3, r3
 8009546:	2b00      	cmp	r3, #0
 8009548:	d003      	beq.n	8009552 <vCheckNetworkTimers+0x82>
                    {
                        vRAProcess( pdFALSE, pxEndPoint );
 800954a:	6939      	ldr	r1, [r7, #16]
 800954c:	2000      	movs	r0, #0
 800954e:	f003 f8f7 	bl	800c740 <vRAProcess>
                    }
                #endif /* ( ipconfigUSE_RA != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 8009552:	693b      	ldr	r3, [r7, #16]
 8009554:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 8009558:	613b      	str	r3, [r7, #16]
        while( pxEndPoint != NULL )
 800955a:	693b      	ldr	r3, [r7, #16]
 800955c:	2b00      	cmp	r3, #0
 800955e:	d1dc      	bne.n	800951a <vCheckNetworkTimers+0x4a>
    #endif /* ( ipconfigUSE_DHCP == 1 ) || ( ipconfigUSE_RA != 0 ) */

    #if ( ipconfigDNS_USE_CALLBACKS != 0 )
    {
        /* Is it time for DNS processing? */
        if( prvIPTimerCheck( &xDNSTimer ) != pdFALSE )
 8009560:	4830      	ldr	r0, [pc, #192]	@ (8009624 <vCheckNetworkTimers+0x154>)
 8009562:	f000 f8ed 	bl	8009740 <prvIPTimerCheck>
 8009566:	4603      	mov	r3, r0
 8009568:	2b00      	cmp	r3, #0
 800956a:	d002      	beq.n	8009572 <vCheckNetworkTimers+0xa2>
        {
            vDNSCheckCallBack( NULL );
 800956c:	2000      	movs	r0, #0
 800956e:	f7fd fff9 	bl	8007564 <vDNSCheckCallBack>
        TickType_t xNextTime;
        BaseType_t xCheckTCPSockets;

        /* If the IP task has messages waiting to be processed then
         * it will not sleep in any case. */
        if( uxQueueMessagesWaiting( xNetworkEventQueue ) == 0U )
 8009572:	4b2d      	ldr	r3, [pc, #180]	@ (8009628 <vCheckNetworkTimers+0x158>)
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4618      	mov	r0, r3
 8009578:	f7f9 fe42 	bl	8003200 <uxQueueMessagesWaiting>
 800957c:	4603      	mov	r3, r0
 800957e:	2b00      	cmp	r3, #0
 8009580:	d102      	bne.n	8009588 <vCheckNetworkTimers+0xb8>
        {
            xWillSleep = pdTRUE;
 8009582:	2301      	movs	r3, #1
 8009584:	60fb      	str	r3, [r7, #12]
 8009586:	e001      	b.n	800958c <vCheckNetworkTimers+0xbc>
        }
        else
        {
            xWillSleep = pdFALSE;
 8009588:	2300      	movs	r3, #0
 800958a:	60fb      	str	r3, [r7, #12]
        }

        /* Sockets need to be checked if the TCP timer has expired. */
        xCheckTCPSockets = prvIPTimerCheck( &xTCPTimer );
 800958c:	4827      	ldr	r0, [pc, #156]	@ (800962c <vCheckNetworkTimers+0x15c>)
 800958e:	f000 f8d7 	bl	8009740 <prvIPTimerCheck>
 8009592:	60b8      	str	r0, [r7, #8]

        /* Sockets will also be checked if there are TCP messages but the
        * message queue is empty (indicated by xWillSleep being true). */
        if( xWillSleep != pdFALSE )
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	2b00      	cmp	r3, #0
 8009598:	d001      	beq.n	800959e <vCheckNetworkTimers+0xce>
        {
            xCheckTCPSockets = pdTRUE;
 800959a:	2301      	movs	r3, #1
 800959c:	60bb      	str	r3, [r7, #8]
        }

        if( xCheckTCPSockets != pdFALSE )
 800959e:	68bb      	ldr	r3, [r7, #8]
 80095a0:	2b00      	cmp	r3, #0
 80095a2:	d007      	beq.n	80095b4 <vCheckNetworkTimers+0xe4>
        {
            /* Attend to the sockets, returning the period after which the
             * check must be repeated. */
            xNextTime = xTCPTimerCheck( xWillSleep );
 80095a4:	68f8      	ldr	r0, [r7, #12]
 80095a6:	f005 ff3f 	bl	800f428 <xTCPTimerCheck>
 80095aa:	6038      	str	r0, [r7, #0]
            prvIPTimerStart( &xTCPTimer, xNextTime );
 80095ac:	6839      	ldr	r1, [r7, #0]
 80095ae:	481f      	ldr	r0, [pc, #124]	@ (800962c <vCheckNetworkTimers+0x15c>)
 80095b0:	f000 f844 	bl	800963c <prvIPTimerStart>
        }
    }

    /* See if any socket was planned to be closed. */
    vSocketCloseNextTime( NULL );
 80095b4:	2000      	movs	r0, #0
 80095b6:	f006 fe6f 	bl	8010298 <vSocketCloseNextTime>

    /* See if any reusable socket needs to go back to 'eTCP_LISTEN' state. */
    vSocketListenNextTime( NULL );
 80095ba:	2000      	movs	r0, #0
 80095bc:	f006 fe88 	bl	80102d0 <vSocketListenNextTime>
    #endif /* ipconfigUSE_TCP == 1 */

    /* Is it time to trigger the repeated NetworkDown events? */
    if( xAllNetworksUp == pdFALSE )
 80095c0:	4b1b      	ldr	r3, [pc, #108]	@ (8009630 <vCheckNetworkTimers+0x160>)
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d120      	bne.n	800960a <vCheckNetworkTimers+0x13a>
    {
        if( prvIPTimerCheck( &( xNetworkTimer ) ) != pdFALSE )
 80095c8:	481a      	ldr	r0, [pc, #104]	@ (8009634 <vCheckNetworkTimers+0x164>)
 80095ca:	f000 f8b9 	bl	8009740 <prvIPTimerCheck>
 80095ce:	4603      	mov	r3, r0
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d01a      	beq.n	800960a <vCheckNetworkTimers+0x13a>
        {
            BaseType_t xUp = pdTRUE;
 80095d4:	2301      	movs	r3, #1
 80095d6:	607b      	str	r3, [r7, #4]

            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80095d8:	4b17      	ldr	r3, [pc, #92]	@ (8009638 <vCheckNetworkTimers+0x168>)
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	617b      	str	r3, [r7, #20]
 80095de:	e00e      	b.n	80095fe <vCheckNetworkTimers+0x12e>
            {
                if( pxInterface->bits.bInterfaceUp == pdFALSE_UNSIGNED )
 80095e0:	697b      	ldr	r3, [r7, #20]
 80095e2:	7f1b      	ldrb	r3, [r3, #28]
 80095e4:	f003 0301 	and.w	r3, r3, #1
 80095e8:	b2db      	uxtb	r3, r3
 80095ea:	2b00      	cmp	r3, #0
 80095ec:	d104      	bne.n	80095f8 <vCheckNetworkTimers+0x128>
                {
                    xUp = pdFALSE;
 80095ee:	2300      	movs	r3, #0
 80095f0:	607b      	str	r3, [r7, #4]
                    FreeRTOS_NetworkDown( pxInterface );
 80095f2:	6978      	ldr	r0, [r7, #20]
 80095f4:	f7ff fa30 	bl	8008a58 <FreeRTOS_NetworkDown>
            for( pxInterface = pxNetworkInterfaces; pxInterface != NULL; pxInterface = pxInterface->pxNext )
 80095f8:	697b      	ldr	r3, [r7, #20]
 80095fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80095fc:	617b      	str	r3, [r7, #20]
 80095fe:	697b      	ldr	r3, [r7, #20]
 8009600:	2b00      	cmp	r3, #0
 8009602:	d1ed      	bne.n	80095e0 <vCheckNetworkTimers+0x110>
                }
            }

            vSetAllNetworksUp( xUp );
 8009604:	6878      	ldr	r0, [r7, #4]
 8009606:	f000 f971 	bl	80098ec <vSetAllNetworksUp>
        }
    }
}
 800960a:	bf00      	nop
 800960c:	3718      	adds	r7, #24
 800960e:	46bd      	mov	sp, r7
 8009610:	bd80      	pop	{r7, pc}
 8009612:	bf00      	nop
 8009614:	20000ec8 	.word	0x20000ec8
 8009618:	20000eb4 	.word	0x20000eb4
 800961c:	20000e98 	.word	0x20000e98
 8009620:	20001224 	.word	0x20001224
 8009624:	20000ef0 	.word	0x20000ef0
 8009628:	20000e9c 	.word	0x20000e9c
 800962c:	20000edc 	.word	0x20000edc
 8009630:	20000eb0 	.word	0x20000eb0
 8009634:	20000f04 	.word	0x20000f04
 8009638:	20001228 	.word	0x20001228

0800963c <prvIPTimerStart>:
 *                     as expired.
 * @param[in] xTime Time to be loaded into the IP timer.
 */
static void prvIPTimerStart( IPTimer_t * pxTimer,
                             TickType_t xTime )
{
 800963c:	b580      	push	{r7, lr}
 800963e:	b082      	sub	sp, #8
 8009640:	af00      	add	r7, sp, #0
 8009642:	6078      	str	r0, [r7, #4]
 8009644:	6039      	str	r1, [r7, #0]
    vTaskSetTimeOutState( &pxTimer->xTimeOut );
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3304      	adds	r3, #4
 800964a:	4618      	mov	r0, r3
 800964c:	f7fa febe 	bl	80043cc <vTaskSetTimeOutState>
    pxTimer->ulRemainingTime = xTime;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	683a      	ldr	r2, [r7, #0]
 8009654:	60da      	str	r2, [r3, #12]

    if( xTime == ( TickType_t ) 0 )
 8009656:	683b      	ldr	r3, [r7, #0]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d105      	bne.n	8009668 <prvIPTimerStart+0x2c>
    {
        pxTimer->bExpired = pdTRUE_UNSIGNED;
 800965c:	687a      	ldr	r2, [r7, #4]
 800965e:	7813      	ldrb	r3, [r2, #0]
 8009660:	f043 0302 	orr.w	r3, r3, #2
 8009664:	7013      	strb	r3, [r2, #0]
 8009666:	e004      	b.n	8009672 <prvIPTimerStart+0x36>
    }
    else
    {
        pxTimer->bExpired = pdFALSE_UNSIGNED;
 8009668:	687a      	ldr	r2, [r7, #4]
 800966a:	7813      	ldrb	r3, [r2, #0]
 800966c:	f36f 0341 	bfc	r3, #1, #1
 8009670:	7013      	strb	r3, [r2, #0]
    }

    pxTimer->bActive = pdTRUE_UNSIGNED;
 8009672:	687a      	ldr	r2, [r7, #4]
 8009674:	7813      	ldrb	r3, [r2, #0]
 8009676:	f043 0301 	orr.w	r3, r3, #1
 800967a:	7013      	strb	r3, [r2, #0]
}
 800967c:	bf00      	nop
 800967e:	3708      	adds	r7, #8
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}

08009684 <vIPTimerStartARPResolution>:
 * @brief Start an ARP Resolution timer.
 *
 * @param[in] xTime Time to be loaded into the ARP Resolution timer.
 */
void vIPTimerStartARPResolution( TickType_t xTime )
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b082      	sub	sp, #8
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
    prvIPTimerStart( &( xARPResolutionTimer ), xTime );
 800968c:	6879      	ldr	r1, [r7, #4]
 800968e:	4803      	ldr	r0, [pc, #12]	@ (800969c <vIPTimerStartARPResolution+0x18>)
 8009690:	f7ff ffd4 	bl	800963c <prvIPTimerStart>
}
 8009694:	bf00      	nop
 8009696:	3708      	adds	r7, #8
 8009698:	46bd      	mov	sp, r7
 800969a:	bd80      	pop	{r7, pc}
 800969c:	20000eb4 	.word	0x20000eb4

080096a0 <prvIPTimerReload>:
 * @param[in] pxTimer Pointer to the IP timer.
 * @param[in] xTime Time to be reloaded into the IP timer.
 */
static void prvIPTimerReload( IPTimer_t * pxTimer,
                              TickType_t xTime )
{
 80096a0:	b580      	push	{r7, lr}
 80096a2:	b082      	sub	sp, #8
 80096a4:	af00      	add	r7, sp, #0
 80096a6:	6078      	str	r0, [r7, #4]
 80096a8:	6039      	str	r1, [r7, #0]
    pxTimer->ulReloadTime = xTime;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	683a      	ldr	r2, [r7, #0]
 80096ae:	611a      	str	r2, [r3, #16]
    prvIPTimerStart( pxTimer, xTime );
 80096b0:	6839      	ldr	r1, [r7, #0]
 80096b2:	6878      	ldr	r0, [r7, #4]
 80096b4:	f7ff ffc2 	bl	800963c <prvIPTimerStart>
}
 80096b8:	bf00      	nop
 80096ba:	3708      	adds	r7, #8
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <vTCPTimerReload>:
 * @brief Sets the reload time of the TCP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the TCP timer.
 */
    void vTCPTimerReload( TickType_t xTime )
    {
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b082      	sub	sp, #8
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
        prvIPTimerReload( &xTCPTimer, xTime );
 80096c8:	6879      	ldr	r1, [r7, #4]
 80096ca:	4803      	ldr	r0, [pc, #12]	@ (80096d8 <vTCPTimerReload+0x18>)
 80096cc:	f7ff ffe8 	bl	80096a0 <prvIPTimerReload>
    }
 80096d0:	bf00      	nop
 80096d2:	3708      	adds	r7, #8
 80096d4:	46bd      	mov	sp, r7
 80096d6:	bd80      	pop	{r7, pc}
 80096d8:	20000edc 	.word	0x20000edc

080096dc <vARPTimerReload>:
 * @brief Sets the reload time of the ARP timer and restarts it.
 *
 * @param[in] xTime Time to be reloaded into the ARP timer.
 */
void vARPTimerReload( TickType_t xTime )
{
 80096dc:	b580      	push	{r7, lr}
 80096de:	b082      	sub	sp, #8
 80096e0:	af00      	add	r7, sp, #0
 80096e2:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xARPTimer, xTime );
 80096e4:	6879      	ldr	r1, [r7, #4]
 80096e6:	4803      	ldr	r0, [pc, #12]	@ (80096f4 <vARPTimerReload+0x18>)
 80096e8:	f7ff ffda 	bl	80096a0 <prvIPTimerReload>
}
 80096ec:	bf00      	nop
 80096ee:	3708      	adds	r7, #8
 80096f0:	46bd      	mov	sp, r7
 80096f2:	bd80      	pop	{r7, pc}
 80096f4:	20000ec8 	.word	0x20000ec8

080096f8 <vDHCP_RATimerReload>:
 * @param[in] uxClockTicks The number of clock-ticks after which the timer should expire.
 */

    void vDHCP_RATimerReload( NetworkEndPoint_t * pxEndPoint,
                              TickType_t uxClockTicks )
    {
 80096f8:	b580      	push	{r7, lr}
 80096fa:	b082      	sub	sp, #8
 80096fc:	af00      	add	r7, sp, #0
 80096fe:	6078      	str	r0, [r7, #4]
 8009700:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vDHCP_RATimerReload: %lu\n", uxClockTicks ) );
 8009702:	6839      	ldr	r1, [r7, #0]
 8009704:	4806      	ldr	r0, [pc, #24]	@ (8009720 <vDHCP_RATimerReload+0x28>)
 8009706:	f017 fabb 	bl	8020c80 <lUDPLoggingPrintf>
        prvIPTimerReload( &( pxEndPoint->xDHCP_RATimer ), uxClockTicks );
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	33f8      	adds	r3, #248	@ 0xf8
 800970e:	6839      	ldr	r1, [r7, #0]
 8009710:	4618      	mov	r0, r3
 8009712:	f7ff ffc5 	bl	80096a0 <prvIPTimerReload>
    }
 8009716:	bf00      	nop
 8009718:	3708      	adds	r7, #8
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	08023798 	.word	0x08023798

08009724 <vNetworkTimerReload>:
 * @brief Reload the Network timer.
 *
 * @param[in] xTime Time to be reloaded into the Network timer.
 */
void vNetworkTimerReload( TickType_t xTime )
{
 8009724:	b580      	push	{r7, lr}
 8009726:	b082      	sub	sp, #8
 8009728:	af00      	add	r7, sp, #0
 800972a:	6078      	str	r0, [r7, #4]
    prvIPTimerReload( &xNetworkTimer, xTime );
 800972c:	6879      	ldr	r1, [r7, #4]
 800972e:	4803      	ldr	r0, [pc, #12]	@ (800973c <vNetworkTimerReload+0x18>)
 8009730:	f7ff ffb6 	bl	80096a0 <prvIPTimerReload>
}
 8009734:	bf00      	nop
 8009736:	3708      	adds	r7, #8
 8009738:	46bd      	mov	sp, r7
 800973a:	bd80      	pop	{r7, pc}
 800973c:	20000f04 	.word	0x20000f04

08009740 <prvIPTimerCheck>:
 * @param[in] pxTimer Pointer to the IP timer.
 *
 * @return If the timer is expired then pdTRUE is returned. Else pdFALSE.
 */
static BaseType_t prvIPTimerCheck( IPTimer_t * pxTimer )
{
 8009740:	b580      	push	{r7, lr}
 8009742:	b084      	sub	sp, #16
 8009744:	af00      	add	r7, sp, #0
 8009746:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( pxTimer->bActive == pdFALSE_UNSIGNED )
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	781b      	ldrb	r3, [r3, #0]
 800974c:	f003 0301 	and.w	r3, r3, #1
 8009750:	b2db      	uxtb	r3, r3
 8009752:	2b00      	cmp	r3, #0
 8009754:	d102      	bne.n	800975c <prvIPTimerCheck+0x1c>
    {
        /* The timer is not enabled. */
        xReturn = pdFALSE;
 8009756:	2300      	movs	r3, #0
 8009758:	60fb      	str	r3, [r7, #12]
 800975a:	e028      	b.n	80097ae <prvIPTimerCheck+0x6e>
    }
    else
    {
        /* The timer might have set the bExpired flag already, if not, check the
         * value of xTimeOut against ulRemainingTime. */
        if( pxTimer->bExpired == pdFALSE_UNSIGNED )
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	781b      	ldrb	r3, [r3, #0]
 8009760:	f003 0302 	and.w	r3, r3, #2
 8009764:	b2db      	uxtb	r3, r3
 8009766:	2b00      	cmp	r3, #0
 8009768:	d10f      	bne.n	800978a <prvIPTimerCheck+0x4a>
        {
            if( xTaskCheckForTimeOut( &( pxTimer->xTimeOut ), &( pxTimer->ulRemainingTime ) ) != pdFALSE )
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	1d1a      	adds	r2, r3, #4
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	330c      	adds	r3, #12
 8009772:	4619      	mov	r1, r3
 8009774:	4610      	mov	r0, r2
 8009776:	f7fa fe61 	bl	800443c <xTaskCheckForTimeOut>
 800977a:	4603      	mov	r3, r0
 800977c:	2b00      	cmp	r3, #0
 800977e:	d004      	beq.n	800978a <prvIPTimerCheck+0x4a>
            {
                pxTimer->bExpired = pdTRUE_UNSIGNED;
 8009780:	687a      	ldr	r2, [r7, #4]
 8009782:	7813      	ldrb	r3, [r2, #0]
 8009784:	f043 0302 	orr.w	r3, r3, #2
 8009788:	7013      	strb	r3, [r2, #0]
            }
        }

        if( pxTimer->bExpired != pdFALSE_UNSIGNED )
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	781b      	ldrb	r3, [r3, #0]
 800978e:	f003 0302 	and.w	r3, r3, #2
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b00      	cmp	r3, #0
 8009796:	d008      	beq.n	80097aa <prvIPTimerCheck+0x6a>
        {
            prvIPTimerStart( pxTimer, pxTimer->ulReloadTime );
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	691b      	ldr	r3, [r3, #16]
 800979c:	4619      	mov	r1, r3
 800979e:	6878      	ldr	r0, [r7, #4]
 80097a0:	f7ff ff4c 	bl	800963c <prvIPTimerStart>
            xReturn = pdTRUE;
 80097a4:	2301      	movs	r3, #1
 80097a6:	60fb      	str	r3, [r7, #12]
 80097a8:	e001      	b.n	80097ae <prvIPTimerCheck+0x6e>
        }
        else
        {
            xReturn = pdFALSE;
 80097aa:	2300      	movs	r3, #0
 80097ac:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 80097ae:	68fb      	ldr	r3, [r7, #12]
}
 80097b0:	4618      	mov	r0, r3
 80097b2:	3710      	adds	r7, #16
 80097b4:	46bd      	mov	sp, r7
 80097b6:	bd80      	pop	{r7, pc}

080097b8 <vIPSetTCPTimerExpiredState>:
 * @brief Enable/disable the TCP timer.
 *
 * @param[in] xExpiredState pdTRUE - set as expired; pdFALSE - set as non-expired.
 */
    void vIPSetTCPTimerExpiredState( BaseType_t xExpiredState )
    {
 80097b8:	b480      	push	{r7}
 80097ba:	b083      	sub	sp, #12
 80097bc:	af00      	add	r7, sp, #0
 80097be:	6078      	str	r0, [r7, #4]
        xTCPTimer.bActive = pdTRUE_UNSIGNED;
 80097c0:	4a0c      	ldr	r2, [pc, #48]	@ (80097f4 <vIPSetTCPTimerExpiredState+0x3c>)
 80097c2:	7813      	ldrb	r3, [r2, #0]
 80097c4:	f043 0301 	orr.w	r3, r3, #1
 80097c8:	7013      	strb	r3, [r2, #0]

        if( xExpiredState != pdFALSE )
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d005      	beq.n	80097dc <vIPSetTCPTimerExpiredState+0x24>
        {
            xTCPTimer.bExpired = pdTRUE_UNSIGNED;
 80097d0:	4a08      	ldr	r2, [pc, #32]	@ (80097f4 <vIPSetTCPTimerExpiredState+0x3c>)
 80097d2:	7813      	ldrb	r3, [r2, #0]
 80097d4:	f043 0302 	orr.w	r3, r3, #2
 80097d8:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
        }
    }
 80097da:	e004      	b.n	80097e6 <vIPSetTCPTimerExpiredState+0x2e>
            xTCPTimer.bExpired = pdFALSE_UNSIGNED;
 80097dc:	4a05      	ldr	r2, [pc, #20]	@ (80097f4 <vIPSetTCPTimerExpiredState+0x3c>)
 80097de:	7813      	ldrb	r3, [r2, #0]
 80097e0:	f36f 0341 	bfc	r3, #1, #1
 80097e4:	7013      	strb	r3, [r2, #0]
    }
 80097e6:	bf00      	nop
 80097e8:	370c      	adds	r7, #12
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr
 80097f2:	bf00      	nop
 80097f4:	20000edc 	.word	0x20000edc

080097f8 <vIPSetARPTimerEnableState>:
 * @brief Enable/disable the ARP timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
void vIPSetARPTimerEnableState( BaseType_t xEnableState )
{
 80097f8:	b480      	push	{r7}
 80097fa:	b083      	sub	sp, #12
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	2b00      	cmp	r3, #0
 8009804:	d005      	beq.n	8009812 <vIPSetARPTimerEnableState+0x1a>
    {
        xARPTimer.bActive = pdTRUE_UNSIGNED;
 8009806:	4a08      	ldr	r2, [pc, #32]	@ (8009828 <vIPSetARPTimerEnableState+0x30>)
 8009808:	7813      	ldrb	r3, [r2, #0]
 800980a:	f043 0301 	orr.w	r3, r3, #1
 800980e:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 8009810:	e004      	b.n	800981c <vIPSetARPTimerEnableState+0x24>
        xARPTimer.bActive = pdFALSE_UNSIGNED;
 8009812:	4a05      	ldr	r2, [pc, #20]	@ (8009828 <vIPSetARPTimerEnableState+0x30>)
 8009814:	7813      	ldrb	r3, [r2, #0]
 8009816:	f36f 0300 	bfc	r3, #0, #1
 800981a:	7013      	strb	r3, [r2, #0]
}
 800981c:	bf00      	nop
 800981e:	370c      	adds	r7, #12
 8009820:	46bd      	mov	sp, r7
 8009822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009826:	4770      	bx	lr
 8009828:	20000ec8 	.word	0x20000ec8

0800982c <vIPSetARPResolutionTimerEnableState>:
 * @brief Enable or disable the ARP resolution timer.
 *
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
void vIPSetARPResolutionTimerEnableState( BaseType_t xEnableState )
{
 800982c:	b480      	push	{r7}
 800982e:	b083      	sub	sp, #12
 8009830:	af00      	add	r7, sp, #0
 8009832:	6078      	str	r0, [r7, #4]
    if( xEnableState != pdFALSE )
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d005      	beq.n	8009846 <vIPSetARPResolutionTimerEnableState+0x1a>
    {
        xARPResolutionTimer.bActive = pdTRUE_UNSIGNED;
 800983a:	4a08      	ldr	r2, [pc, #32]	@ (800985c <vIPSetARPResolutionTimerEnableState+0x30>)
 800983c:	7813      	ldrb	r3, [r2, #0]
 800983e:	f043 0301 	orr.w	r3, r3, #1
 8009842:	7013      	strb	r3, [r2, #0]
    }
    else
    {
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
    }
}
 8009844:	e004      	b.n	8009850 <vIPSetARPResolutionTimerEnableState+0x24>
        xARPResolutionTimer.bActive = pdFALSE_UNSIGNED;
 8009846:	4a05      	ldr	r2, [pc, #20]	@ (800985c <vIPSetARPResolutionTimerEnableState+0x30>)
 8009848:	7813      	ldrb	r3, [r2, #0]
 800984a:	f36f 0300 	bfc	r3, #0, #1
 800984e:	7013      	strb	r3, [r2, #0]
}
 8009850:	bf00      	nop
 8009852:	370c      	adds	r7, #12
 8009854:	46bd      	mov	sp, r7
 8009856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800985a:	4770      	bx	lr
 800985c:	20000eb4 	.word	0x20000eb4

08009860 <vIPSetDHCP_RATimerEnableState>:
 * @param[in] pxEndPoint The end-point that needs to acquire an IP-address.
 * @param[in] xEnableState pdTRUE if the timer must be enabled, pdFALSE otherwise.
 */
    void vIPSetDHCP_RATimerEnableState( NetworkEndPoint_t * pxEndPoint,
                                        BaseType_t xEnableState )
    {
 8009860:	b580      	push	{r7, lr}
 8009862:	b082      	sub	sp, #8
 8009864:	af00      	add	r7, sp, #0
 8009866:	6078      	str	r0, [r7, #4]
 8009868:	6039      	str	r1, [r7, #0]
        FreeRTOS_printf( ( "vIPSetDHCP_RATimerEnableState: %s\n", ( xEnableState != 0 ) ? "On" : "Off" ) );
 800986a:	683b      	ldr	r3, [r7, #0]
 800986c:	2b00      	cmp	r3, #0
 800986e:	d001      	beq.n	8009874 <vIPSetDHCP_RATimerEnableState+0x14>
 8009870:	4b0e      	ldr	r3, [pc, #56]	@ (80098ac <vIPSetDHCP_RATimerEnableState+0x4c>)
 8009872:	e000      	b.n	8009876 <vIPSetDHCP_RATimerEnableState+0x16>
 8009874:	4b0e      	ldr	r3, [pc, #56]	@ (80098b0 <vIPSetDHCP_RATimerEnableState+0x50>)
 8009876:	4619      	mov	r1, r3
 8009878:	480e      	ldr	r0, [pc, #56]	@ (80098b4 <vIPSetDHCP_RATimerEnableState+0x54>)
 800987a:	f017 fa01 	bl	8020c80 <lUDPLoggingPrintf>

        /* 'xDHCP_RATimer' is shared between DHCP (IPv4) and RA/SLAAC (IPv6). */
        if( xEnableState != 0 )
 800987e:	683b      	ldr	r3, [r7, #0]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d007      	beq.n	8009894 <vIPSetDHCP_RATimerEnableState+0x34>
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdTRUE_UNSIGNED;
 8009884:	687a      	ldr	r2, [r7, #4]
 8009886:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800988a:	f043 0301 	orr.w	r3, r3, #1
 800988e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
        }
        else
        {
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 8009892:	e006      	b.n	80098a2 <vIPSetDHCP_RATimerEnableState+0x42>
            pxEndPoint->xDHCP_RATimer.bActive = pdFALSE_UNSIGNED;
 8009894:	687a      	ldr	r2, [r7, #4]
 8009896:	f892 30f8 	ldrb.w	r3, [r2, #248]	@ 0xf8
 800989a:	f36f 0300 	bfc	r3, #0, #1
 800989e:	f882 30f8 	strb.w	r3, [r2, #248]	@ 0xf8
    }
 80098a2:	bf00      	nop
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	bf00      	nop
 80098ac:	080237b4 	.word	0x080237b4
 80098b0:	080237b8 	.word	0x080237b8
 80098b4:	080237bc 	.word	0x080237bc

080098b8 <vIPSetDNSTimerEnableState>:
 * @brief Enable/disable the DNS timer.
 *
 * @param[in] xEnableState pdTRUE - enable timer; pdFALSE - disable timer.
 */
    void vIPSetDNSTimerEnableState( BaseType_t xEnableState )
    {
 80098b8:	b480      	push	{r7}
 80098ba:	b083      	sub	sp, #12
 80098bc:	af00      	add	r7, sp, #0
 80098be:	6078      	str	r0, [r7, #4]
        if( xEnableState != 0 )
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d005      	beq.n	80098d2 <vIPSetDNSTimerEnableState+0x1a>
        {
            xDNSTimer.bActive = pdTRUE_UNSIGNED;
 80098c6:	4a08      	ldr	r2, [pc, #32]	@ (80098e8 <vIPSetDNSTimerEnableState+0x30>)
 80098c8:	7813      	ldrb	r3, [r2, #0]
 80098ca:	f043 0301 	orr.w	r3, r3, #1
 80098ce:	7013      	strb	r3, [r2, #0]
        }
        else
        {
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
        }
    }
 80098d0:	e004      	b.n	80098dc <vIPSetDNSTimerEnableState+0x24>
            xDNSTimer.bActive = pdFALSE_UNSIGNED;
 80098d2:	4a05      	ldr	r2, [pc, #20]	@ (80098e8 <vIPSetDNSTimerEnableState+0x30>)
 80098d4:	7813      	ldrb	r3, [r2, #0]
 80098d6:	f36f 0300 	bfc	r3, #0, #1
 80098da:	7013      	strb	r3, [r2, #0]
    }
 80098dc:	bf00      	nop
 80098de:	370c      	adds	r7, #12
 80098e0:	46bd      	mov	sp, r7
 80098e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e6:	4770      	bx	lr
 80098e8:	20000ef0 	.word	0x20000ef0

080098ec <vSetAllNetworksUp>:
/**
 * @brief Mark whether all interfaces are up or at least one interface is down.
 *        If all interfaces are up, the 'xNetworkTimer' will not be checked.
 */
void vSetAllNetworksUp( BaseType_t xIsAllNetworksUp )
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
    xAllNetworksUp = xIsAllNetworksUp;
 80098f4:	4a04      	ldr	r2, [pc, #16]	@ (8009908 <vSetAllNetworksUp+0x1c>)
 80098f6:	687b      	ldr	r3, [r7, #4]
 80098f8:	6013      	str	r3, [r2, #0]
}
 80098fa:	bf00      	nop
 80098fc:	370c      	adds	r7, #12
 80098fe:	46bd      	mov	sp, r7
 8009900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009904:	4770      	bx	lr
 8009906:	bf00      	nop
 8009908:	20000eb0 	.word	0x20000eb0

0800990c <pxDuplicateNetworkBufferWithDescriptor>:
 *
 * @return If properly duplicated, then the duplicate network buffer or else, NULL.
 */
NetworkBufferDescriptor_t * pxDuplicateNetworkBufferWithDescriptor( const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                                    size_t uxNewLength )
{
 800990c:	b580      	push	{r7, lr}
 800990e:	b084      	sub	sp, #16
 8009910:	af00      	add	r7, sp, #0
 8009912:	6078      	str	r0, [r7, #4]
 8009914:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxNewBuffer;
    size_t uxLengthToCopy = uxNewLength;
 8009916:	683b      	ldr	r3, [r7, #0]
 8009918:	60fb      	str	r3, [r7, #12]

    /* This function is only used when 'ipconfigZERO_COPY_TX_DRIVER' is set to 1.
     * The transmit routine wants to have ownership of the network buffer
     * descriptor, because it will pass the buffer straight to DMA. */
    pxNewBuffer = pxGetNetworkBufferWithDescriptor( uxNewLength, ( TickType_t ) 0 );
 800991a:	2100      	movs	r1, #0
 800991c:	6838      	ldr	r0, [r7, #0]
 800991e:	f00c feeb 	bl	80166f8 <pxGetNetworkBufferWithDescriptor>
 8009922:	60b8      	str	r0, [r7, #8]

    if( pxNewBuffer != NULL )
 8009924:	68bb      	ldr	r3, [r7, #8]
 8009926:	2b00      	cmp	r3, #0
 8009928:	d03e      	beq.n	80099a8 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
    {
        configASSERT( pxNewBuffer->pucEthernetBuffer != NULL );
 800992a:	68bb      	ldr	r3, [r7, #8]
 800992c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800992e:	2b00      	cmp	r3, #0
 8009930:	d104      	bne.n	800993c <pxDuplicateNetworkBufferWithDescriptor+0x30>
 8009932:	f44f 7186 	mov.w	r1, #268	@ 0x10c
 8009936:	481f      	ldr	r0, [pc, #124]	@ (80099b4 <pxDuplicateNetworkBufferWithDescriptor+0xa8>)
 8009938:	f7f7 fd9a 	bl	8001470 <vAssertCalled>

        /* Get the minimum of both values to copy the data. */
        if( uxLengthToCopy > pxNetworkBuffer->xDataLength )
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009940:	68fa      	ldr	r2, [r7, #12]
 8009942:	429a      	cmp	r2, r3
 8009944:	d902      	bls.n	800994c <pxDuplicateNetworkBufferWithDescriptor+0x40>
        {
            uxLengthToCopy = pxNetworkBuffer->xDataLength;
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800994a:	60fb      	str	r3, [r7, #12]
        }

        /* Set the actual packet size in case a bigger buffer than requested
         * was returned. */
        pxNewBuffer->xDataLength = uxNewLength;
 800994c:	68bb      	ldr	r3, [r7, #8]
 800994e:	683a      	ldr	r2, [r7, #0]
 8009950:	629a      	str	r2, [r3, #40]	@ 0x28

        /* Copy the original packet information. */
        pxNewBuffer->xIPAddress.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	695a      	ldr	r2, [r3, #20]
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	615a      	str	r2, [r3, #20]
        pxNewBuffer->usPort = pxNetworkBuffer->usPort;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	869a      	strh	r2, [r3, #52]	@ 0x34
        pxNewBuffer->usBoundPort = pxNetworkBuffer->usBoundPort;
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	86da      	strh	r2, [r3, #54]	@ 0x36
        pxNewBuffer->pxInterface = pxNetworkBuffer->pxInterface;
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	62da      	str	r2, [r3, #44]	@ 0x2c
        pxNewBuffer->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	631a      	str	r2, [r3, #48]	@ 0x30
        ( void ) memcpy( pxNewBuffer->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, uxLengthToCopy );
 800997a:	68bb      	ldr	r3, [r7, #8]
 800997c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009982:	68fa      	ldr	r2, [r7, #12]
 8009984:	4619      	mov	r1, r3
 8009986:	f017 fb97 	bl	80210b8 <memcpy>

        #if ( ipconfigUSE_IPv6 != 0 )
            if( uxIPHeaderSizePacket( pxNewBuffer ) == ipSIZE_OF_IPv6_HEADER )
 800998a:	68b8      	ldr	r0, [r7, #8]
 800998c:	f7ff fd0c 	bl	80093a8 <uxIPHeaderSizePacket>
 8009990:	4603      	mov	r3, r0
 8009992:	2b28      	cmp	r3, #40	@ 0x28
 8009994:	d108      	bne.n	80099a8 <pxDuplicateNetworkBufferWithDescriptor+0x9c>
            {
                ( void ) memcpy( pxNewBuffer->xIPAddress.xIP_IPv6.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8009996:	68bb      	ldr	r3, [r7, #8]
 8009998:	f103 0014 	add.w	r0, r3, #20
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	3314      	adds	r3, #20
 80099a0:	2210      	movs	r2, #16
 80099a2:	4619      	mov	r1, r3
 80099a4:	f017 fb88 	bl	80210b8 <memcpy>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
    }

    return pxNewBuffer;
 80099a8:	68bb      	ldr	r3, [r7, #8]
}
 80099aa:	4618      	mov	r0, r3
 80099ac:	3710      	adds	r7, #16
 80099ae:	46bd      	mov	sp, r7
 80099b0:	bd80      	pop	{r7, pc}
 80099b2:	bf00      	nop
 80099b4:	080237e0 	.word	0x080237e0

080099b8 <prvPacketBuffer_to_NetworkBuffer>:
 *
 * @return The network buffer descriptor if the alignment is correct. Else a NULL is returned.
 */
static NetworkBufferDescriptor_t * prvPacketBuffer_to_NetworkBuffer( const void * pvBuffer,
                                                                     size_t uxOffset )
{
 80099b8:	b580      	push	{r7, lr}
 80099ba:	b084      	sub	sp, #16
 80099bc:	af00      	add	r7, sp, #0
 80099be:	6078      	str	r0, [r7, #4]
 80099c0:	6039      	str	r1, [r7, #0]
    uintptr_t uxBuffer;
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d102      	bne.n	80099ce <prvPacketBuffer_to_NetworkBuffer+0x16>
    {
        pxResult = NULL;
 80099c8:	2300      	movs	r3, #0
 80099ca:	60fb      	str	r3, [r7, #12]
 80099cc:	e013      	b.n	80099f6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        /* Obtain the network buffer from the zero copy pointer. */

        /* MISRA Ref 11.6.2 [Pointer arithmetic and hidden pointer] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-116 */
        /* coverity[misra_c_2012_rule_11_6_violation] */
        uxBuffer = void_ptr_to_uintptr( pvBuffer );
 80099ce:	6878      	ldr	r0, [r7, #4]
 80099d0:	f000 f816 	bl	8009a00 <void_ptr_to_uintptr>
 80099d4:	60b8      	str	r0, [r7, #8]

        /* The input here is a pointer to a packet buffer plus some offset.  Subtract
         * this offset, and also the size of the header in the network buffer, usually
         * 8 + 2 bytes. */
        uxBuffer -= ( uxOffset + ipBUFFER_PADDING );
 80099d6:	68ba      	ldr	r2, [r7, #8]
 80099d8:	683b      	ldr	r3, [r7, #0]
 80099da:	1ad3      	subs	r3, r2, r3
 80099dc:	3b0a      	subs	r3, #10
 80099de:	60bb      	str	r3, [r7, #8]

        /* Here a pointer was placed to the network descriptor.  As a
         * pointer is dereferenced, make sure it is well aligned. */
        if( ( uxBuffer & ( ( ( uintptr_t ) sizeof( uxBuffer ) ) - 1U ) ) == ( uintptr_t ) 0U )
 80099e0:	68bb      	ldr	r3, [r7, #8]
 80099e2:	f003 0303 	and.w	r3, r3, #3
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d103      	bne.n	80099f2 <prvPacketBuffer_to_NetworkBuffer+0x3a>
        {
            /* MISRA Ref 11.4.2 [Validation of pointer alignment] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            pxResult = *( ( NetworkBufferDescriptor_t ** ) uxBuffer );
 80099ea:	68bb      	ldr	r3, [r7, #8]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	e001      	b.n	80099f6 <prvPacketBuffer_to_NetworkBuffer+0x3e>
        }
        else
        {
            pxResult = NULL;
 80099f2:	2300      	movs	r3, #0
 80099f4:	60fb      	str	r3, [r7, #12]
        }
    }

    return pxResult;
 80099f6:	68fb      	ldr	r3, [r7, #12]
}
 80099f8:	4618      	mov	r0, r3
 80099fa:	3710      	adds	r7, #16
 80099fc:	46bd      	mov	sp, r7
 80099fe:	bd80      	pop	{r7, pc}

08009a00 <void_ptr_to_uintptr>:
 *        using a union as defined here above.
 * @param[in] pvPointer A void pointer to be converted.
 * @return The value of the void pointer as an unsigned number.
 */
static uintptr_t void_ptr_to_uintptr( const void * pvPointer )
{
 8009a00:	b480      	push	{r7}
 8009a02:	b085      	sub	sp, #20
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	6078      	str	r0, [r7, #4]
    /* The type 'uintptr_t' has the same size as a pointer.
     * Therefore, it is safe to use a union to convert it. */
    union uIntPtr intPtr;

    intPtr.pvPtr = pvPointer;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	60fb      	str	r3, [r7, #12]
    return intPtr.uxPtr;
 8009a0c:	68fb      	ldr	r3, [r7, #12]
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3714      	adds	r7, #20
 8009a12:	46bd      	mov	sp, r7
 8009a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a18:	4770      	bx	lr

08009a1a <pxPacketBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the packet buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
    NetworkBufferDescriptor_t * pxPacketBuffer_to_NetworkBuffer( const void * pvBuffer )
    {
 8009a1a:	b580      	push	{r7, lr}
 8009a1c:	b082      	sub	sp, #8
 8009a1e:	af00      	add	r7, sp, #0
 8009a20:	6078      	str	r0, [r7, #4]
        return prvPacketBuffer_to_NetworkBuffer( pvBuffer, 0U );
 8009a22:	2100      	movs	r1, #0
 8009a24:	6878      	ldr	r0, [r7, #4]
 8009a26:	f7ff ffc7 	bl	80099b8 <prvPacketBuffer_to_NetworkBuffer>
 8009a2a:	4603      	mov	r3, r0
    }
 8009a2c:	4618      	mov	r0, r3
 8009a2e:	3708      	adds	r7, #8
 8009a30:	46bd      	mov	sp, r7
 8009a32:	bd80      	pop	{r7, pc}

08009a34 <pxUDPPayloadBuffer_to_NetworkBuffer>:
 * @param[in] pvBuffer Pointer to the UDP payload buffer.
 *
 * @return The network buffer if the alignment is correct. Else a NULL is returned.
 */
NetworkBufferDescriptor_t * pxUDPPayloadBuffer_to_NetworkBuffer( const void * pvBuffer )
{
 8009a34:	b580      	push	{r7, lr}
 8009a36:	b088      	sub	sp, #32
 8009a38:	af00      	add	r7, sp, #0
 8009a3a:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxResult;

    if( pvBuffer == NULL )
 8009a3c:	687b      	ldr	r3, [r7, #4]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d102      	bne.n	8009a48 <pxUDPPayloadBuffer_to_NetworkBuffer+0x14>
    {
        pxResult = NULL;
 8009a42:	2300      	movs	r3, #0
 8009a44:	61fb      	str	r3, [r7, #28]
 8009a46:	e033      	b.n	8009ab0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x7c>
        const uint8_t * pucIPType;
        uint8_t ucIPType;

        /* When IPv6 is supported, find out the type of the packet.
         * It is stored 48 bytes before the payload buffer as 0x40 or 0x60. */
        uxTypeOffset = void_ptr_to_uintptr( pvBuffer );
 8009a48:	6878      	ldr	r0, [r7, #4]
 8009a4a:	f7ff ffd9 	bl	8009a00 <void_ptr_to_uintptr>
 8009a4e:	6178      	str	r0, [r7, #20]
        uxTypeOffset -= ipUDP_PAYLOAD_IP_TYPE_OFFSET;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	3b30      	subs	r3, #48	@ 0x30
 8009a54:	617b      	str	r3, [r7, #20]
        /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
        /* coverity[misra_c_2012_rule_11_4_violation] */
        pucIPType = ( const uint8_t * ) uxTypeOffset;
 8009a56:	697b      	ldr	r3, [r7, #20]
 8009a58:	613b      	str	r3, [r7, #16]

        /* For an IPv4 packet, pucIPType points to 6 bytes before the pucEthernetBuffer,
         * for a IPv6 packet, pucIPType will point to the first byte of the IP-header: 'ucVersionTrafficClass'. */
        ucIPType = pucIPType[ 0 ] & 0xf0U;
 8009a5a:	693b      	ldr	r3, [r7, #16]
 8009a5c:	781b      	ldrb	r3, [r3, #0]
 8009a5e:	f023 030f 	bic.w	r3, r3, #15
 8009a62:	73fb      	strb	r3, [r7, #15]

        /* To help the translation from a UDP payload pointer to a networkBuffer,
         * a byte was stored at a certain negative offset (-48 bytes).
         * It must have a value of either 0x4x or 0x6x. */
        configASSERT( ( ucIPType == ipTYPE_IPv4 ) || ( ucIPType == ipTYPE_IPv6 ) );
 8009a64:	7bfb      	ldrb	r3, [r7, #15]
 8009a66:	2b40      	cmp	r3, #64	@ 0x40
 8009a68:	d002      	beq.n	8009a70 <pxUDPPayloadBuffer_to_NetworkBuffer+0x3c>
 8009a6a:	7bfb      	ldrb	r3, [r7, #15]
 8009a6c:	2b60      	cmp	r3, #96	@ 0x60
 8009a6e:	d101      	bne.n	8009a74 <pxUDPPayloadBuffer_to_NetworkBuffer+0x40>
 8009a70:	2301      	movs	r3, #1
 8009a72:	e000      	b.n	8009a76 <pxUDPPayloadBuffer_to_NetworkBuffer+0x42>
 8009a74:	2300      	movs	r3, #0
 8009a76:	2b00      	cmp	r3, #0
 8009a78:	d104      	bne.n	8009a84 <pxUDPPayloadBuffer_to_NetworkBuffer+0x50>
 8009a7a:	f240 21f1 	movw	r1, #753	@ 0x2f1
 8009a7e:	480f      	ldr	r0, [pc, #60]	@ (8009abc <pxUDPPayloadBuffer_to_NetworkBuffer+0x88>)
 8009a80:	f7f7 fcf6 	bl	8001470 <vAssertCalled>

        switch( ucIPType ) /* LCOV_EXCL_BR_LINE */
 8009a84:	7bfb      	ldrb	r3, [r7, #15]
 8009a86:	2b40      	cmp	r3, #64	@ 0x40
 8009a88:	d004      	beq.n	8009a94 <pxUDPPayloadBuffer_to_NetworkBuffer+0x60>
 8009a8a:	2b60      	cmp	r3, #96	@ 0x60
 8009a8c:	d105      	bne.n	8009a9a <pxUDPPayloadBuffer_to_NetworkBuffer+0x66>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                case ipTYPE_IPv6:
                    uxOffset = sizeof( UDPPacket_IPv6_t );
 8009a8e:	233e      	movs	r3, #62	@ 0x3e
 8009a90:	61bb      	str	r3, [r7, #24]
                    break;
 8009a92:	e008      	b.n	8009aa6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            #if ( ipconfigUSE_IPv4 != 0 )
                case ipTYPE_IPv4:
                    uxOffset = sizeof( UDPPacket_t );
 8009a94:	232a      	movs	r3, #42	@ 0x2a
 8009a96:	61bb      	str	r3, [r7, #24]
                    break;
 8009a98:	e005      	b.n	8009aa6 <pxUDPPayloadBuffer_to_NetworkBuffer+0x72>
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            default:
                FreeRTOS_debug_printf( ( "pxUDPPayloadBuffer_to_NetworkBuffer: Undefined ucIPType \n" ) );
 8009a9a:	4809      	ldr	r0, [pc, #36]	@ (8009ac0 <pxUDPPayloadBuffer_to_NetworkBuffer+0x8c>)
 8009a9c:	f017 f8f0 	bl	8020c80 <lUDPLoggingPrintf>
                uxOffset = sizeof( UDPPacket_t );
 8009aa0:	232a      	movs	r3, #42	@ 0x2a
 8009aa2:	61bb      	str	r3, [r7, #24]
                break;
 8009aa4:	bf00      	nop
        }

        pxResult = prvPacketBuffer_to_NetworkBuffer( pvBuffer, uxOffset );
 8009aa6:	69b9      	ldr	r1, [r7, #24]
 8009aa8:	6878      	ldr	r0, [r7, #4]
 8009aaa:	f7ff ff85 	bl	80099b8 <prvPacketBuffer_to_NetworkBuffer>
 8009aae:	61f8      	str	r0, [r7, #28]
    }

    return pxResult;
 8009ab0:	69fb      	ldr	r3, [r7, #28]
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	3720      	adds	r7, #32
 8009ab6:	46bd      	mov	sp, r7
 8009ab8:	bd80      	pop	{r7, pc}
 8009aba:	bf00      	nop
 8009abc:	080237e0 	.word	0x080237e0
 8009ac0:	080238b8 	.word	0x080238b8

08009ac4 <xIsCallingFromIPTask>:
 *
 * @note Very important: the IP-task is not allowed to call its own API's,
 *        because it would easily get into a dead-lock.
 */
BaseType_t xIsCallingFromIPTask( void )
{
 8009ac4:	b580      	push	{r7, lr}
 8009ac6:	b084      	sub	sp, #16
 8009ac8:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    const struct tskTaskControlBlock * const xCurrentHandle = xTaskGetCurrentTaskHandle();
 8009aca:	f7fa fdd1 	bl	8004670 <xTaskGetCurrentTaskHandle>
 8009ace:	60b8      	str	r0, [r7, #8]
    const struct tskTaskControlBlock * const xCurrentIPTaskHandle = FreeRTOS_GetIPTaskHandle();
 8009ad0:	f7fe ff6e 	bl	80089b0 <FreeRTOS_GetIPTaskHandle>
 8009ad4:	6078      	str	r0, [r7, #4]

    if( xCurrentHandle == xCurrentIPTaskHandle )
 8009ad6:	68ba      	ldr	r2, [r7, #8]
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	429a      	cmp	r2, r3
 8009adc:	d102      	bne.n	8009ae4 <xIsCallingFromIPTask+0x20>
    {
        xReturn = pdTRUE;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	60fb      	str	r3, [r7, #12]
 8009ae2:	e001      	b.n	8009ae8 <xIsCallingFromIPTask+0x24>
    }
    else
    {
        xReturn = pdFALSE;
 8009ae4:	2300      	movs	r3, #0
 8009ae6:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8009ae8:	68fb      	ldr	r3, [r7, #12]
}
 8009aea:	4618      	mov	r0, r3
 8009aec:	3710      	adds	r7, #16
 8009aee:	46bd      	mov	sp, r7
 8009af0:	bd80      	pop	{r7, pc}
	...

08009af4 <prvProcessNetworkDownEvent>:
/* MISRA Ref 8.9.1 [File scoped variables] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
/* coverity[misra_c_2012_rule_8_9_violation] */
/* coverity[single_use] */
void prvProcessNetworkDownEvent( struct xNetworkInterface * pxInterface )
{
 8009af4:	b580      	push	{r7, lr}
 8009af6:	b084      	sub	sp, #16
 8009af8:	af00      	add	r7, sp, #0
 8009afa:	6078      	str	r0, [r7, #4]
    NetworkEndPoint_t * pxEndPoint;

    configASSERT( pxInterface != NULL );
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d104      	bne.n	8009b0c <prvProcessNetworkDownEvent+0x18>
 8009b02:	f240 3137 	movw	r1, #823	@ 0x337
 8009b06:	4857      	ldr	r0, [pc, #348]	@ (8009c64 <prvProcessNetworkDownEvent+0x170>)
 8009b08:	f7f7 fcb2 	bl	8001470 <vAssertCalled>
    configASSERT( pxInterface->pfInitialise != NULL );
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	689b      	ldr	r3, [r3, #8]
 8009b10:	2b00      	cmp	r3, #0
 8009b12:	d104      	bne.n	8009b1e <prvProcessNetworkDownEvent+0x2a>
 8009b14:	f44f 714e 	mov.w	r1, #824	@ 0x338
 8009b18:	4852      	ldr	r0, [pc, #328]	@ (8009c64 <prvProcessNetworkDownEvent+0x170>)
 8009b1a:	f7f7 fca9 	bl	8001470 <vAssertCalled>
    /* Stop the ARP timer while there is no network. */
    vIPSetARPTimerEnableState( pdFALSE );
 8009b1e:	2000      	movs	r0, #0
 8009b20:	f7ff fe6a 	bl	80097f8 <vIPSetARPTimerEnableState>

    /* The first network down event is generated by the IP stack itself to
     * initialise the network hardware, so do not call the network down event
     * the first time through. */

    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8009b24:	6878      	ldr	r0, [r7, #4]
 8009b26:	f002 ffd7 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	e041      	b.n	8009bb2 <prvProcessNetworkDownEvent+0xbe>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
    {
        /* The bit 'bEndPointUp' stays low until vIPNetworkUpCalls() is called. */
        pxEndPoint->bits.bEndPointUp = pdFALSE_UNSIGNED;
 8009b2e:	68fa      	ldr	r2, [r7, #12]
 8009b30:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009b34:	f36f 1304 	bfc	r3, #4, #1
 8009b38:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0

        if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009b42:	f003 0304 	and.w	r3, r3, #4
 8009b46:	b2db      	uxtb	r3, r3
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	d003      	beq.n	8009b54 <prvProcessNetworkDownEvent+0x60>
        {
            /* IPv6 end-points have a solicited-node address that needs extra housekeeping. */
            #if ( ipconfigIS_ENABLED( ipconfigUSE_IPv6 ) )
                vManageSolicitedNodeAddress( pxEndPoint, pdFALSE );
 8009b4c:	2100      	movs	r1, #0
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	f001 f9c8 	bl	800aee4 <vManageSolicitedNodeAddress>
            #endif
        }

        #if ( ipconfigUSE_NETWORK_EVENT_HOOK == 1 )
        {
            if( pxEndPoint->bits.bCallDownHook != pdFALSE_UNSIGNED )
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009b5a:	f003 0308 	and.w	r3, r3, #8
 8009b5e:	b2db      	uxtb	r3, r3
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d003      	beq.n	8009b6c <prvProcessNetworkDownEvent+0x78>
            {
                #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
                {
                    vApplicationIPNetworkEventHook( eNetworkDown );
 8009b64:	2001      	movs	r0, #1
 8009b66:	f7f7 fcb7 	bl	80014d8 <vApplicationIPNetworkEventHook>
 8009b6a:	e006      	b.n	8009b7a <prvProcessNetworkDownEvent+0x86>
                #endif
            }
            else
            {
                /* The next time NetworkEventHook will be called for this end-point. */
                pxEndPoint->bits.bCallDownHook = pdTRUE_UNSIGNED;
 8009b6c:	68fa      	ldr	r2, [r7, #12]
 8009b6e:	f892 30f0 	ldrb.w	r3, [r2, #240]	@ 0xf0
 8009b72:	f043 0308 	orr.w	r3, r3, #8
 8009b76:	f882 30f0 	strb.w	r3, [r2, #240]	@ 0xf0
        #endif /* ipconfigUSE_NETWORK_EVENT_HOOK */

        /* Per the ARP Cache Validation section of https://tools.ietf.org/html/rfc1122
         * treat network down as a "delivery problem" and flush the ARP cache for this
         *  interface. */
        FreeRTOS_ClearARP( pxEndPoint );
 8009b7a:	68f8      	ldr	r0, [r7, #12]
 8009b7c:	f7fd f8c0 	bl	8006d00 <FreeRTOS_ClearARP>
                }
            }
        #endif /* ( ipconfigUSE_DHCP == 1 ) */

        #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
            if( END_POINT_USES_RA( pxEndPoint ) )
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009b86:	f003 0304 	and.w	r3, r3, #4
 8009b8a:	b2db      	uxtb	r3, r3
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d00b      	beq.n	8009ba8 <prvProcessNetworkDownEvent+0xb4>
 8009b90:	68fb      	ldr	r3, [r7, #12]
 8009b92:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009b96:	f003 0302 	and.w	r3, r3, #2
 8009b9a:	b2db      	uxtb	r3, r3
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d003      	beq.n	8009ba8 <prvProcessNetworkDownEvent+0xb4>
            {
                /* Stop the RA/SLAAC process for this end-point. */
                vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 8009ba0:	2100      	movs	r1, #0
 8009ba2:	68f8      	ldr	r0, [r7, #12]
 8009ba4:	f7ff fe5c 	bl	8009860 <vIPSetDHCP_RATimerEnableState>
         pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 8009ba8:	68f9      	ldr	r1, [r7, #12]
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f002 ffb6 	bl	800cb1c <FreeRTOS_NextEndPoint>
 8009bb0:	60f8      	str	r0, [r7, #12]
         pxEndPoint != NULL;
 8009bb2:	68fb      	ldr	r3, [r7, #12]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d1ba      	bne.n	8009b2e <prvProcessNetworkDownEvent+0x3a>

    /* The network has been disconnected (or is being initialised for the first
     * time).  Perform whatever hardware processing is necessary to bring it up
     * again, or wait for it to be available again.  This is hardware dependent. */

    if( pxInterface->pfInitialise( pxInterface ) == pdPASS )
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	689b      	ldr	r3, [r3, #8]
 8009bbc:	6878      	ldr	r0, [r7, #4]
 8009bbe:	4798      	blx	r3
 8009bc0:	4603      	mov	r3, r0
 8009bc2:	2b01      	cmp	r3, #1
 8009bc4:	d147      	bne.n	8009c56 <prvProcessNetworkDownEvent+0x162>
    {
        pxInterface->bits.bInterfaceUp = pdTRUE_UNSIGNED;
 8009bc6:	687a      	ldr	r2, [r7, #4]
 8009bc8:	7f13      	ldrb	r3, [r2, #28]
 8009bca:	f043 0301 	orr.w	r3, r3, #1
 8009bce:	7713      	strb	r3, [r2, #28]
        /* Set remaining time to 0 so it will become active immediately. */

        /* The network is not up until DHCP has completed.
         * Start it now for all associated end-points. */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f002 ff81 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	e039      	b.n	8009c4e <prvProcessNetworkDownEvent+0x15a>
                }
                else /* Yes this else ought to be here. */
            #endif /* ( ipconfigUSE_DHCP == 1 ) */

            #if ( ( ipconfigUSE_RA != 0 ) && ( ipconfigUSE_IPv6 != 0 ) )
                if( END_POINT_USES_RA( pxEndPoint ) )
 8009bda:	68fb      	ldr	r3, [r7, #12]
 8009bdc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009be0:	f003 0304 	and.w	r3, r3, #4
 8009be4:	b2db      	uxtb	r3, r3
 8009be6:	2b00      	cmp	r3, #0
 8009be8:	d00c      	beq.n	8009c04 <prvProcessNetworkDownEvent+0x110>
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009bf0:	f003 0302 	and.w	r3, r3, #2
 8009bf4:	b2db      	uxtb	r3, r3
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d004      	beq.n	8009c04 <prvProcessNetworkDownEvent+0x110>
                {
                    /* Reset the RA/SLAAC process for this end-point. */
                    vRAProcess( pdTRUE, pxEndPoint );
 8009bfa:	68f9      	ldr	r1, [r7, #12]
 8009bfc:	2001      	movs	r0, #1
 8009bfe:	f002 fd9f 	bl	800c740 <vRAProcess>
 8009c02:	e01f      	b.n	8009c44 <prvProcessNetworkDownEvent+0x150>
                }
                else
            #endif /* ( (ipconfigUSE_RA != 0) && ( ipconfigUSE_IPv6 != 0 )) */

            {
                switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 8009c04:	68fb      	ldr	r3, [r7, #12]
 8009c06:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8009c0a:	f3c3 0380 	ubfx	r3, r3, #2, #1
 8009c0e:	b2db      	uxtb	r3, r3
 8009c10:	2b00      	cmp	r3, #0
 8009c12:	d002      	beq.n	8009c1a <prvProcessNetworkDownEvent+0x126>
 8009c14:	2b01      	cmp	r3, #1
 8009c16:	d008      	beq.n	8009c2a <prvProcessNetworkDownEvent+0x136>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 8009c18:	e011      	b.n	8009c3e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv4_settings ), &( pxEndPoint->ipv4_defaults ), sizeof( pxEndPoint->ipv4_settings ) );
 8009c1a:	68f8      	ldr	r0, [r7, #12]
 8009c1c:	68fb      	ldr	r3, [r7, #12]
 8009c1e:	331c      	adds	r3, #28
 8009c20:	221c      	movs	r2, #28
 8009c22:	4619      	mov	r1, r3
 8009c24:	f017 fa48 	bl	80210b8 <memcpy>
                            break;
 8009c28:	e009      	b.n	8009c3e <prvProcessNetworkDownEvent+0x14a>
                            ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 8009c2a:	68fb      	ldr	r3, [r7, #12]
 8009c2c:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 8009c30:	68fb      	ldr	r3, [r7, #12]
 8009c32:	3390      	adds	r3, #144	@ 0x90
 8009c34:	2258      	movs	r2, #88	@ 0x58
 8009c36:	4619      	mov	r1, r3
 8009c38:	f017 fa3e 	bl	80210b8 <memcpy>
                            break;
 8009c3c:	bf00      	nop
                }

                /* DHCP or Router Advertisement are not enabled for this end-point.
                 * Perform any necessary 'network up' processing. */
                vIPNetworkUpCalls( pxEndPoint );
 8009c3e:	68f8      	ldr	r0, [r7, #12]
 8009c40:	f7fe fec2 	bl	80089c8 <vIPNetworkUpCalls>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 8009c44:	68f9      	ldr	r1, [r7, #12]
 8009c46:	6878      	ldr	r0, [r7, #4]
 8009c48:	f002 ff68 	bl	800cb1c <FreeRTOS_NextEndPoint>
 8009c4c:	60f8      	str	r0, [r7, #12]
             pxEndPoint != NULL;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2b00      	cmp	r3, #0
 8009c52:	d1c2      	bne.n	8009bda <prvProcessNetworkDownEvent+0xe6>
        vSetAllNetworksUp( pdFALSE );

        /* Nothing else to do. When the 'xNetworkTimer' expires, all interfaces
         * with bits.bInterfaceUp cleared will get a new 'eNetworkDownEvent' */
    }
}
 8009c54:	e002      	b.n	8009c5c <prvProcessNetworkDownEvent+0x168>
        vSetAllNetworksUp( pdFALSE );
 8009c56:	2000      	movs	r0, #0
 8009c58:	f7ff fe48 	bl	80098ec <vSetAllNetworksUp>
}
 8009c5c:	bf00      	nop
 8009c5e:	3710      	adds	r7, #16
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	080237e0 	.word	0x080237e0

08009c68 <vPreCheckConfigs>:
/**
 * @brief Check the values of configuration options and assert on it. Also verify that the IP-task
 *        has not already been initialized.
 */
void vPreCheckConfigs( void )
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
    /* This function should only be called once. */
    configASSERT( xIPIsNetworkTaskReady() == pdFALSE );
 8009c6e:	f7ff fb83 	bl	8009378 <xIPIsNetworkTaskReady>
 8009c72:	4603      	mov	r3, r0
 8009c74:	2b00      	cmp	r3, #0
 8009c76:	d004      	beq.n	8009c82 <vPreCheckConfigs+0x1a>
 8009c78:	f240 31db 	movw	r1, #987	@ 0x3db
 8009c7c:	4831      	ldr	r0, [pc, #196]	@ (8009d44 <vPreCheckConfigs+0xdc>)
 8009c7e:	f7f7 fbf7 	bl	8001470 <vAssertCalled>
    configASSERT( xNetworkEventQueue == NULL );
 8009c82:	4b31      	ldr	r3, [pc, #196]	@ (8009d48 <vPreCheckConfigs+0xe0>)
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	2b00      	cmp	r3, #0
 8009c88:	d004      	beq.n	8009c94 <vPreCheckConfigs+0x2c>
 8009c8a:	f44f 7177 	mov.w	r1, #988	@ 0x3dc
 8009c8e:	482d      	ldr	r0, [pc, #180]	@ (8009d44 <vPreCheckConfigs+0xdc>)
 8009c90:	f7f7 fbee 	bl	8001470 <vAssertCalled>
    configASSERT( FreeRTOS_GetIPTaskHandle() == NULL );
 8009c94:	f7fe fe8c 	bl	80089b0 <FreeRTOS_GetIPTaskHandle>
 8009c98:	4603      	mov	r3, r0
 8009c9a:	2b00      	cmp	r3, #0
 8009c9c:	d004      	beq.n	8009ca8 <vPreCheckConfigs+0x40>
 8009c9e:	f240 31dd 	movw	r1, #989	@ 0x3dd
 8009ca2:	4828      	ldr	r0, [pc, #160]	@ (8009d44 <vPreCheckConfigs+0xdc>)
 8009ca4:	f7f7 fbe4 	bl	8001470 <vAssertCalled>
         * fields in the protocol headers.
         */
        configASSERT( ( ( ( ipSIZE_OF_ETH_HEADER ) + ( ipBUFFER_PADDING ) ) % 4U ) == 0U );

        /* LCOV_EXCL_BR_START */
        uxSize = ipconfigNETWORK_MTU;
 8009ca8:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 8009cac:	607b      	str	r3, [r7, #4]
        /* Check if MTU is big enough. */
        configASSERT( uxSize >= ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER + ipconfigTCP_MSS ) );
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f240 52db 	movw	r2, #1499	@ 0x5db
 8009cb4:	4293      	cmp	r3, r2
 8009cb6:	d804      	bhi.n	8009cc2 <vPreCheckConfigs+0x5a>
 8009cb8:	f240 31fb 	movw	r1, #1019	@ 0x3fb
 8009cbc:	4821      	ldr	r0, [pc, #132]	@ (8009d44 <vPreCheckConfigs+0xdc>)
 8009cbe:	f7f7 fbd7 	bl	8001470 <vAssertCalled>

        uxSize = sizeof( EthernetHeader_t );
 8009cc2:	230e      	movs	r3, #14
 8009cc4:	607b      	str	r3, [r7, #4]
        /* Check structure packing is correct. */
        configASSERT( uxSize == ipEXPECTED_EthernetHeader_t_SIZE );
 8009cc6:	687b      	ldr	r3, [r7, #4]
 8009cc8:	2b0e      	cmp	r3, #14
 8009cca:	d004      	beq.n	8009cd6 <vPreCheckConfigs+0x6e>
 8009ccc:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8009cd0:	481c      	ldr	r0, [pc, #112]	@ (8009d44 <vPreCheckConfigs+0xdc>)
 8009cd2:	f7f7 fbcd 	bl	8001470 <vAssertCalled>

        uxSize = sizeof( ARPHeader_t );
 8009cd6:	231c      	movs	r3, #28
 8009cd8:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ARPHeader_t_SIZE );
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	2b1c      	cmp	r3, #28
 8009cde:	d004      	beq.n	8009cea <vPreCheckConfigs+0x82>
 8009ce0:	f240 4102 	movw	r1, #1026	@ 0x402
 8009ce4:	4817      	ldr	r0, [pc, #92]	@ (8009d44 <vPreCheckConfigs+0xdc>)
 8009ce6:	f7f7 fbc3 	bl	8001470 <vAssertCalled>

        uxSize = sizeof( IPHeader_t );
 8009cea:	2314      	movs	r3, #20
 8009cec:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_IPHeader_t_SIZE );
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2b14      	cmp	r3, #20
 8009cf2:	d004      	beq.n	8009cfe <vPreCheckConfigs+0x96>
 8009cf4:	f240 4105 	movw	r1, #1029	@ 0x405
 8009cf8:	4812      	ldr	r0, [pc, #72]	@ (8009d44 <vPreCheckConfigs+0xdc>)
 8009cfa:	f7f7 fbb9 	bl	8001470 <vAssertCalled>

        uxSize = sizeof( ICMPHeader_t );
 8009cfe:	2308      	movs	r3, #8
 8009d00:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_ICMPHeader_t_SIZE );
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	2b08      	cmp	r3, #8
 8009d06:	d004      	beq.n	8009d12 <vPreCheckConfigs+0xaa>
 8009d08:	f44f 6181 	mov.w	r1, #1032	@ 0x408
 8009d0c:	480d      	ldr	r0, [pc, #52]	@ (8009d44 <vPreCheckConfigs+0xdc>)
 8009d0e:	f7f7 fbaf 	bl	8001470 <vAssertCalled>

        uxSize = sizeof( UDPHeader_t );
 8009d12:	2308      	movs	r3, #8
 8009d14:	607b      	str	r3, [r7, #4]
        configASSERT( uxSize == ipEXPECTED_UDPHeader_t_SIZE );
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2b08      	cmp	r3, #8
 8009d1a:	d004      	beq.n	8009d26 <vPreCheckConfigs+0xbe>
 8009d1c:	f240 410b 	movw	r1, #1035	@ 0x40b
 8009d20:	4808      	ldr	r0, [pc, #32]	@ (8009d44 <vPreCheckConfigs+0xdc>)
 8009d22:	f7f7 fba5 	bl	8001470 <vAssertCalled>

        #if ipconfigUSE_TCP == 1
        {
            uxSize = sizeof( TCPHeader_t );
 8009d26:	2324      	movs	r3, #36	@ 0x24
 8009d28:	607b      	str	r3, [r7, #4]
            configASSERT( uxSize == ( ipEXPECTED_TCPHeader_t_SIZE + ipSIZE_TCP_OPTIONS ) );
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	2b24      	cmp	r3, #36	@ 0x24
 8009d2e:	d004      	beq.n	8009d3a <vPreCheckConfigs+0xd2>
 8009d30:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8009d34:	4803      	ldr	r0, [pc, #12]	@ (8009d44 <vPreCheckConfigs+0xdc>)
 8009d36:	f7f7 fb9b 	bl	8001470 <vAssertCalled>
         * It's value MUST be > 0. Otherwise, storing the IPv4 version byte
         * will overwrite the Ethernet header. */
        configASSERT( ipIP_TYPE_OFFSET > 0 );
    }
    #endif /* if ( configASSERT_DEFINED == 1 ) */
}
 8009d3a:	bf00      	nop
 8009d3c:	3708      	adds	r7, #8
 8009d3e:	46bd      	mov	sp, r7
 8009d40:	bd80      	pop	{r7, pc}
 8009d42:	bf00      	nop
 8009d44:	080237e0 	.word	0x080237e0
 8009d48:	20000e9c 	.word	0x20000e9c

08009d4c <vPrintResourceStats>:
/**
 * @brief A function that monitors a three resources: the heap, the space in the message
 *        queue of the IP-task, the number of available network buffer descriptors.
 */
    void vPrintResourceStats( void )
    {
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
        /* When setting up and testing a project with FreeRTOS+TCP, it is
         * can be helpful to monitor a few resources: the number of network
         * buffers and the amount of available heap.
         * This function will issue some logging when a minimum value has
         * changed. */
        uxCurrentBufferCount = uxGetMinimumFreeNetworkBuffers();
 8009d52:	f00c fd7f 	bl	8016854 <uxGetMinimumFreeNetworkBuffers>
 8009d56:	60f8      	str	r0, [r7, #12]

        if( uxLastMinBufferCount > uxCurrentBufferCount )
 8009d58:	4b24      	ldr	r3, [pc, #144]	@ (8009dec <vPrintResourceStats+0xa0>)
 8009d5a:	681b      	ldr	r3, [r3, #0]
 8009d5c:	68fa      	ldr	r2, [r7, #12]
 8009d5e:	429a      	cmp	r2, r3
 8009d60:	d20a      	bcs.n	8009d78 <vPrintResourceStats+0x2c>
        {
            /* The logging produced below may be helpful
             * while tuning +TCP: see how many buffers are in use. */
            uxLastMinBufferCount = uxCurrentBufferCount;
 8009d62:	4a22      	ldr	r2, [pc, #136]	@ (8009dec <vPrintResourceStats+0xa0>)
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Network buffers: %lu lowest %lu\n",
 8009d68:	f00c fd80 	bl	801686c <uxGetNumberOfFreeNetworkBuffers>
 8009d6c:	4603      	mov	r3, r0
 8009d6e:	68fa      	ldr	r2, [r7, #12]
 8009d70:	4619      	mov	r1, r3
 8009d72:	481f      	ldr	r0, [pc, #124]	@ (8009df0 <vPrintResourceStats+0xa4>)
 8009d74:	f016 ff84 	bl	8020c80 <lUDPLoggingPrintf>
                               uxGetNumberOfFreeNetworkBuffers(),
                               uxCurrentBufferCount ) );
        }

        uxMinSize = xPortGetMinimumEverFreeHeapSize();
 8009d78:	f7fb ff1e 	bl	8005bb8 <xPortGetMinimumEverFreeHeapSize>
 8009d7c:	60b8      	str	r0, [r7, #8]

        if( uxMinLastSize == 0U )
 8009d7e:	4b1d      	ldr	r3, [pc, #116]	@ (8009df4 <vPrintResourceStats+0xa8>)
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d103      	bne.n	8009d8e <vPrintResourceStats+0x42>
        {
            /* Probably the first time this function is called. */
            uxMinLastSize = uxMinSize;
 8009d86:	4a1b      	ldr	r2, [pc, #108]	@ (8009df4 <vPrintResourceStats+0xa8>)
 8009d88:	68bb      	ldr	r3, [r7, #8]
 8009d8a:	6013      	str	r3, [r2, #0]
 8009d8c:	e019      	b.n	8009dc2 <vPrintResourceStats+0x76>
        }
        else if( uxMinSize >= ipMONITOR_MAX_HEAP )
 8009d8e:	68bb      	ldr	r3, [r7, #8]
 8009d90:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8009d94:	d215      	bcs.n	8009dc2 <vPrintResourceStats+0x76>
        {
            /* There is more than enough heap space. No need for logging. */
        }
        /* Write logging if there is a 10% decrease since the last time logging was written. */
        else if( ( uxMinLastSize * ipMONITOR_PERCENTAGE_90 ) > ( uxMinSize * ipMONITOR_PERCENTAGE_100 ) )
 8009d96:	4b17      	ldr	r3, [pc, #92]	@ (8009df4 <vPrintResourceStats+0xa8>)
 8009d98:	681b      	ldr	r3, [r3, #0]
 8009d9a:	225a      	movs	r2, #90	@ 0x5a
 8009d9c:	fb03 f202 	mul.w	r2, r3, r2
 8009da0:	68bb      	ldr	r3, [r7, #8]
 8009da2:	2164      	movs	r1, #100	@ 0x64
 8009da4:	fb01 f303 	mul.w	r3, r1, r3
 8009da8:	429a      	cmp	r2, r3
 8009daa:	d90a      	bls.n	8009dc2 <vPrintResourceStats+0x76>
        {
            uxMinLastSize = uxMinSize;
 8009dac:	4a11      	ldr	r2, [pc, #68]	@ (8009df4 <vPrintResourceStats+0xa8>)
 8009dae:	68bb      	ldr	r3, [r7, #8]
 8009db0:	6013      	str	r3, [r2, #0]
            FreeRTOS_printf( ( "Heap: current %u lowest %u\n", ( unsigned ) xPortGetFreeHeapSize(), ( unsigned ) uxMinSize ) );
 8009db2:	f7fb fef5 	bl	8005ba0 <xPortGetFreeHeapSize>
 8009db6:	4603      	mov	r3, r0
 8009db8:	68ba      	ldr	r2, [r7, #8]
 8009dba:	4619      	mov	r1, r3
 8009dbc:	480e      	ldr	r0, [pc, #56]	@ (8009df8 <vPrintResourceStats+0xac>)
 8009dbe:	f016 ff5f 	bl	8020c80 <lUDPLoggingPrintf>
            /* Nothing to log. */
        }

        #if ( ipconfigCHECK_IP_QUEUE_SPACE != 0 )
        {
            UBaseType_t uxCurrentCount = 0u;
 8009dc2:	2300      	movs	r3, #0
 8009dc4:	607b      	str	r3, [r7, #4]

            uxCurrentCount = uxGetMinimumIPQueueSpace();
 8009dc6:	f7ff fae3 	bl	8009390 <uxGetMinimumIPQueueSpace>
 8009dca:	6078      	str	r0, [r7, #4]

            if( uxLastMinQueueSpace != uxCurrentCount )
 8009dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8009dfc <vPrintResourceStats+0xb0>)
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	687a      	ldr	r2, [r7, #4]
 8009dd2:	429a      	cmp	r2, r3
 8009dd4:	d006      	beq.n	8009de4 <vPrintResourceStats+0x98>
            {
                /* The logging produced below may be helpful
                 * while tuning +TCP: see how many buffers are in use. */
                uxLastMinQueueSpace = uxCurrentCount;
 8009dd6:	4a09      	ldr	r2, [pc, #36]	@ (8009dfc <vPrintResourceStats+0xb0>)
 8009dd8:	687b      	ldr	r3, [r7, #4]
 8009dda:	6013      	str	r3, [r2, #0]
                FreeRTOS_printf( ( "Queue space: lowest %lu\n", uxCurrentCount ) );
 8009ddc:	6879      	ldr	r1, [r7, #4]
 8009dde:	4808      	ldr	r0, [pc, #32]	@ (8009e00 <vPrintResourceStats+0xb4>)
 8009de0:	f016 ff4e 	bl	8020c80 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigCHECK_IP_QUEUE_SPACE */
    }
 8009de4:	bf00      	nop
 8009de6:	3710      	adds	r7, #16
 8009de8:	46bd      	mov	sp, r7
 8009dea:	bd80      	pop	{r7, pc}
 8009dec:	20000018 	.word	0x20000018
 8009df0:	08023950 	.word	0x08023950
 8009df4:	20000f18 	.word	0x20000f18
 8009df8:	08023974 	.word	0x08023974
 8009dfc:	20000f1c 	.word	0x20000f1c
 8009e00:	08023990 	.word	0x08023990

08009e04 <FreeRTOS_max_size_t>:
 * @param[in] b the second value.
 * @return The highest of the two values.
 */
size_t FreeRTOS_max_size_t( size_t a,
                            size_t b )
{
 8009e04:	b480      	push	{r7}
 8009e06:	b083      	sub	sp, #12
 8009e08:	af00      	add	r7, sp, #0
 8009e0a:	6078      	str	r0, [r7, #4]
 8009e0c:	6039      	str	r1, [r7, #0]
    return ( a >= b ) ? a : b;
 8009e0e:	687a      	ldr	r2, [r7, #4]
 8009e10:	683b      	ldr	r3, [r7, #0]
 8009e12:	4293      	cmp	r3, r2
 8009e14:	bf38      	it	cc
 8009e16:	4613      	movcc	r3, r2
}
 8009e18:	4618      	mov	r0, r3
 8009e1a:	370c      	adds	r7, #12
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e22:	4770      	bx	lr

08009e24 <FreeRTOS_min_int32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
int32_t FreeRTOS_min_int32( int32_t a,
                            int32_t b )
{
 8009e24:	b480      	push	{r7}
 8009e26:	b083      	sub	sp, #12
 8009e28:	af00      	add	r7, sp, #0
 8009e2a:	6078      	str	r0, [r7, #4]
 8009e2c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 8009e2e:	687a      	ldr	r2, [r7, #4]
 8009e30:	683b      	ldr	r3, [r7, #0]
 8009e32:	4293      	cmp	r3, r2
 8009e34:	bfa8      	it	ge
 8009e36:	4613      	movge	r3, r2
}
 8009e38:	4618      	mov	r0, r3
 8009e3a:	370c      	adds	r7, #12
 8009e3c:	46bd      	mov	sp, r7
 8009e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e42:	4770      	bx	lr

08009e44 <FreeRTOS_min_uint32>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
uint32_t FreeRTOS_min_uint32( uint32_t a,
                              uint32_t b )
{
 8009e44:	b480      	push	{r7}
 8009e46:	b083      	sub	sp, #12
 8009e48:	af00      	add	r7, sp, #0
 8009e4a:	6078      	str	r0, [r7, #4]
 8009e4c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 8009e4e:	687a      	ldr	r2, [r7, #4]
 8009e50:	683b      	ldr	r3, [r7, #0]
 8009e52:	4293      	cmp	r3, r2
 8009e54:	bf28      	it	cs
 8009e56:	4613      	movcs	r3, r2
}
 8009e58:	4618      	mov	r0, r3
 8009e5a:	370c      	adds	r7, #12
 8009e5c:	46bd      	mov	sp, r7
 8009e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e62:	4770      	bx	lr

08009e64 <FreeRTOS_min_size_t>:
 * @param[in] b the second value.
 * @return The lowest of the two values.
 */
size_t FreeRTOS_min_size_t( size_t a,
                            size_t b )
{
 8009e64:	b480      	push	{r7}
 8009e66:	b083      	sub	sp, #12
 8009e68:	af00      	add	r7, sp, #0
 8009e6a:	6078      	str	r0, [r7, #4]
 8009e6c:	6039      	str	r1, [r7, #0]
    return ( a <= b ) ? a : b;
 8009e6e:	687a      	ldr	r2, [r7, #4]
 8009e70:	683b      	ldr	r3, [r7, #0]
 8009e72:	4293      	cmp	r3, r2
 8009e74:	bf28      	it	cs
 8009e76:	4613      	movcs	r3, r2
}
 8009e78:	4618      	mov	r0, r3
 8009e7a:	370c      	adds	r7, #12
 8009e7c:	46bd      	mov	sp, r7
 8009e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e82:	4770      	bx	lr

08009e84 <FreeRTOS_round_up>:
 * @param[in] d the second value.
 * @return A multiple of d.
 */
uint32_t FreeRTOS_round_up( uint32_t a,
                            uint32_t d )
{
 8009e84:	b580      	push	{r7, lr}
 8009e86:	b084      	sub	sp, #16
 8009e88:	af00      	add	r7, sp, #0
 8009e8a:	6078      	str	r0, [r7, #4]
 8009e8c:	6039      	str	r1, [r7, #0]
    uint32_t ulResult = a;
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	60fb      	str	r3, [r7, #12]

    configASSERT( d != 0U );
 8009e92:	683b      	ldr	r3, [r7, #0]
 8009e94:	2b00      	cmp	r3, #0
 8009e96:	d104      	bne.n	8009ea2 <FreeRTOS_round_up+0x1e>
 8009e98:	f240 61ac 	movw	r1, #1708	@ 0x6ac
 8009e9c:	480a      	ldr	r0, [pc, #40]	@ (8009ec8 <FreeRTOS_round_up+0x44>)
 8009e9e:	f7f7 fae7 	bl	8001470 <vAssertCalled>

    if( d != 0U )
 8009ea2:	683b      	ldr	r3, [r7, #0]
 8009ea4:	2b00      	cmp	r3, #0
 8009ea6:	d00a      	beq.n	8009ebe <FreeRTOS_round_up+0x3a>
    {
        ulResult = d * ( ( a + d - 1U ) / d );
 8009ea8:	687a      	ldr	r2, [r7, #4]
 8009eaa:	683b      	ldr	r3, [r7, #0]
 8009eac:	4413      	add	r3, r2
 8009eae:	1e5a      	subs	r2, r3, #1
 8009eb0:	683b      	ldr	r3, [r7, #0]
 8009eb2:	fbb2 f2f3 	udiv	r2, r2, r3
 8009eb6:	683b      	ldr	r3, [r7, #0]
 8009eb8:	fb02 f303 	mul.w	r3, r2, r3
 8009ebc:	60fb      	str	r3, [r7, #12]
    }

    return ulResult;
 8009ebe:	68fb      	ldr	r3, [r7, #12]
}
 8009ec0:	4618      	mov	r0, r3
 8009ec2:	3710      	adds	r7, #16
 8009ec4:	46bd      	mov	sp, r7
 8009ec6:	bd80      	pop	{r7, pc}
 8009ec8:	080237e0 	.word	0x080237e0

08009ecc <ulChar2u32>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint32_t ulChar2u32( const uint8_t * pucPtr )
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 8009ed4:	687b      	ldr	r3, [r7, #4]
 8009ed6:	781b      	ldrb	r3, [r3, #0]
 8009ed8:	061a      	lsls	r2, r3, #24
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	3301      	adds	r3, #1
 8009ede:	781b      	ldrb	r3, [r3, #0]
 8009ee0:	041b      	lsls	r3, r3, #16
    return ( ( ( uint32_t ) pucPtr[ 0 ] ) << 24 ) |
 8009ee2:	431a      	orrs	r2, r3
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	3302      	adds	r3, #2
 8009ee8:	781b      	ldrb	r3, [r3, #0]
 8009eea:	021b      	lsls	r3, r3, #8
           ( ( ( uint32_t ) pucPtr[ 1 ] ) << 16 ) |
 8009eec:	4313      	orrs	r3, r2
           ( ( ( uint32_t ) pucPtr[ 3 ] ) );
 8009eee:	687a      	ldr	r2, [r7, #4]
 8009ef0:	3203      	adds	r2, #3
 8009ef2:	7812      	ldrb	r2, [r2, #0]
           ( ( ( uint32_t ) pucPtr[ 2 ] ) << 8 ) |
 8009ef4:	4313      	orrs	r3, r2
}
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	370c      	adds	r7, #12
 8009efa:	46bd      	mov	sp, r7
 8009efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f00:	4770      	bx	lr

08009f02 <usChar2u16>:
 * @note Going by MISRA rules, these utility functions should not be defined
 *        if they are not being used anywhere. But their use depends on the
 *        application and hence these functions are defined unconditionally.
 */
uint16_t usChar2u16( const uint8_t * pucPtr )
{
 8009f02:	b480      	push	{r7}
 8009f04:	b083      	sub	sp, #12
 8009f06:	af00      	add	r7, sp, #0
 8009f08:	6078      	str	r0, [r7, #4]
    return ( uint16_t )
           ( ( ( ( uint32_t ) pucPtr[ 0 ] ) << 8 ) |
 8009f0a:	687b      	ldr	r3, [r7, #4]
 8009f0c:	781b      	ldrb	r3, [r3, #0]
 8009f0e:	021b      	lsls	r3, r3, #8
 8009f10:	b29b      	uxth	r3, r3
             ( ( ( uint32_t ) pucPtr[ 1 ] ) ) );
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	3201      	adds	r2, #1
 8009f16:	7812      	ldrb	r2, [r2, #0]
    return ( uint16_t )
 8009f18:	4313      	orrs	r3, r2
 8009f1a:	b29b      	uxth	r3, r3
}
 8009f1c:	4618      	mov	r0, r3
 8009f1e:	370c      	adds	r7, #12
 8009f20:	46bd      	mov	sp, r7
 8009f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f26:	4770      	bx	lr

08009f28 <xCheckIPv4SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv4SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 8009f28:	b580      	push	{r7, lr}
 8009f2a:	b08a      	sub	sp, #40	@ 0x28
 8009f2c:	af00      	add	r7, sp, #0
 8009f2e:	6078      	str	r0, [r7, #4]
 8009f30:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIPHeaderLength;
        uint8_t ucProtocol;
        uint16_t usLength;
        uint16_t ucVersionHeaderLength;
        size_t uxMinimumLength;
        BaseType_t xResult = pdFAIL;
 8009f32:	2300      	movs	r3, #0
 8009f34:	623b      	str	r3, [r7, #32]

        /* Map the buffer onto a IP-Packet struct to easily access the
         * fields of the IP packet. */
        const IPPacket_t * const pxIPPacket = ( ( const IPPacket_t * const ) pvEthernetBuffer );
 8009f36:	687b      	ldr	r3, [r7, #4]
 8009f38:	61bb      	str	r3, [r7, #24]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 8009f3a:	2300      	movs	r3, #0
 8009f3c:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IP-header, 34 bytes */
            if( uxBufferLength < sizeof( IPPacket_t ) )
 8009f3e:	683b      	ldr	r3, [r7, #0]
 8009f40:	2b21      	cmp	r3, #33	@ 0x21
 8009f42:	d802      	bhi.n	8009f4a <xCheckIPv4SizeFields+0x22>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 8009f44:	2301      	movs	r3, #1
 8009f46:	61fb      	str	r3, [r7, #28]
                break;
 8009f48:	e06f      	b.n	800a02a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = pxIPPacket->xIPHeader.ucVersionHeaderLength;
 8009f4a:	69bb      	ldr	r3, [r7, #24]
 8009f4c:	7b9b      	ldrb	r3, [r3, #14]
 8009f4e:	82fb      	strh	r3, [r7, #22]

            /* Test if the length of the IP-header is between 20 and 60 bytes,
             * and if the IP-version is 4. */
            if( ( ucVersionHeaderLength < ipIPV4_VERSION_HEADER_LENGTH_MIN ) ||
 8009f50:	8afb      	ldrh	r3, [r7, #22]
 8009f52:	2b44      	cmp	r3, #68	@ 0x44
 8009f54:	d902      	bls.n	8009f5c <xCheckIPv4SizeFields+0x34>
 8009f56:	8afb      	ldrh	r3, [r7, #22]
 8009f58:	2b4f      	cmp	r3, #79	@ 0x4f
 8009f5a:	d902      	bls.n	8009f62 <xCheckIPv4SizeFields+0x3a>
                ( ucVersionHeaderLength > ipIPV4_VERSION_HEADER_LENGTH_MAX ) )
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 8009f5c:	2302      	movs	r3, #2
 8009f5e:	61fb      	str	r3, [r7, #28]
                break;
 8009f60:	e063      	b.n	800a02a <xCheckIPv4SizeFields+0x102>
            }

            ucVersionHeaderLength = ( uint16_t ) ( ( ucVersionHeaderLength & ( uint8_t ) 0x0FU ) << 2U );
 8009f62:	8afb      	ldrh	r3, [r7, #22]
 8009f64:	009b      	lsls	r3, r3, #2
 8009f66:	b29b      	uxth	r3, r3
 8009f68:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 8009f6c:	82fb      	strh	r3, [r7, #22]
            uxIPHeaderLength = ( UBaseType_t ) ucVersionHeaderLength;
 8009f6e:	8afb      	ldrh	r3, [r7, #22]
 8009f70:	613b      	str	r3, [r7, #16]

            /* Check if the complete IP-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + uxIPHeaderLength ) )
 8009f72:	693b      	ldr	r3, [r7, #16]
 8009f74:	330e      	adds	r3, #14
 8009f76:	683a      	ldr	r2, [r7, #0]
 8009f78:	429a      	cmp	r2, r3
 8009f7a:	d202      	bcs.n	8009f82 <xCheckIPv4SizeFields+0x5a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 8009f7c:	2303      	movs	r3, #3
 8009f7e:	61fb      	str	r3, [r7, #28]
                break;
 8009f80:	e053      	b.n	800a02a <xCheckIPv4SizeFields+0x102>
            }

            /* Check if the complete IP-header plus protocol data have been transferred: */
            usLength = pxIPPacket->xIPHeader.usLength;
 8009f82:	69bb      	ldr	r3, [r7, #24]
 8009f84:	7c1a      	ldrb	r2, [r3, #16]
 8009f86:	7c5b      	ldrb	r3, [r3, #17]
 8009f88:	021b      	lsls	r3, r3, #8
 8009f8a:	4313      	orrs	r3, r2
 8009f8c:	81fb      	strh	r3, [r7, #14]
            usLength = FreeRTOS_ntohs( usLength );
 8009f8e:	89fb      	ldrh	r3, [r7, #14]
 8009f90:	021b      	lsls	r3, r3, #8
 8009f92:	b21a      	sxth	r2, r3
 8009f94:	89fb      	ldrh	r3, [r7, #14]
 8009f96:	0a1b      	lsrs	r3, r3, #8
 8009f98:	b29b      	uxth	r3, r3
 8009f9a:	b21b      	sxth	r3, r3
 8009f9c:	4313      	orrs	r3, r2
 8009f9e:	b21b      	sxth	r3, r3
 8009fa0:	81fb      	strh	r3, [r7, #14]

            if( uxBufferLength < ( size_t ) ( ipSIZE_OF_ETH_HEADER + ( size_t ) usLength ) )
 8009fa2:	89fb      	ldrh	r3, [r7, #14]
 8009fa4:	330e      	adds	r3, #14
 8009fa6:	683a      	ldr	r2, [r7, #0]
 8009fa8:	429a      	cmp	r2, r3
 8009faa:	d202      	bcs.n	8009fb2 <xCheckIPv4SizeFields+0x8a>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 8009fac:	2304      	movs	r3, #4
 8009fae:	61fb      	str	r3, [r7, #28]
                break;
 8009fb0:	e03b      	b.n	800a02a <xCheckIPv4SizeFields+0x102>
            }

            /* Identify the next protocol. */
            ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 8009fb2:	69bb      	ldr	r3, [r7, #24]
 8009fb4:	7ddb      	ldrb	r3, [r3, #23]
 8009fb6:	737b      	strb	r3, [r7, #13]

            /* Switch on the Layer 3/4 protocol. */
            if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 8009fb8:	7b7b      	ldrb	r3, [r7, #13]
 8009fba:	2b11      	cmp	r3, #17
 8009fbc:	d103      	bne.n	8009fc6 <xCheckIPv4SizeFields+0x9e>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER;
 8009fbe:	693b      	ldr	r3, [r7, #16]
 8009fc0:	3316      	adds	r3, #22
 8009fc2:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fc4:	e013      	b.n	8009fee <xCheckIPv4SizeFields+0xc6>
            }
            else if( ucProtocol == ( uint8_t ) ipPROTOCOL_TCP )
 8009fc6:	7b7b      	ldrb	r3, [r7, #13]
 8009fc8:	2b06      	cmp	r3, #6
 8009fca:	d103      	bne.n	8009fd4 <xCheckIPv4SizeFields+0xac>
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_TCP_HEADER;
 8009fcc:	693b      	ldr	r3, [r7, #16]
 8009fce:	3322      	adds	r3, #34	@ 0x22
 8009fd0:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fd2:	e00c      	b.n	8009fee <xCheckIPv4SizeFields+0xc6>
            }
            else if( ( ucProtocol == ( uint8_t ) ipPROTOCOL_ICMP ) ||
 8009fd4:	7b7b      	ldrb	r3, [r7, #13]
 8009fd6:	2b01      	cmp	r3, #1
 8009fd8:	d002      	beq.n	8009fe0 <xCheckIPv4SizeFields+0xb8>
 8009fda:	7b7b      	ldrb	r3, [r7, #13]
 8009fdc:	2b02      	cmp	r3, #2
 8009fde:	d103      	bne.n	8009fe8 <xCheckIPv4SizeFields+0xc0>
                     ( ucProtocol == ( uint8_t ) ipPROTOCOL_IGMP ) )
            {
                uxMinimumLength = uxIPHeaderLength + ipSIZE_OF_ETH_HEADER + ipSIZE_OF_ICMPv4_HEADER;
 8009fe0:	693b      	ldr	r3, [r7, #16]
 8009fe2:	3316      	adds	r3, #22
 8009fe4:	627b      	str	r3, [r7, #36]	@ 0x24
 8009fe6:	e002      	b.n	8009fee <xCheckIPv4SizeFields+0xc6>
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 8009fe8:	2305      	movs	r3, #5
 8009fea:	61fb      	str	r3, [r7, #28]
                break;
 8009fec:	e01d      	b.n	800a02a <xCheckIPv4SizeFields+0x102>
            }

            if( uxBufferLength < uxMinimumLength )
 8009fee:	683a      	ldr	r2, [r7, #0]
 8009ff0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009ff2:	429a      	cmp	r2, r3
 8009ff4:	d202      	bcs.n	8009ffc <xCheckIPv4SizeFields+0xd4>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 8009ff6:	2306      	movs	r3, #6
 8009ff8:	61fb      	str	r3, [r7, #28]
                break;
 8009ffa:	e016      	b.n	800a02a <xCheckIPv4SizeFields+0x102>
            }

            uxLength = ( size_t ) usLength;
 8009ffc:	89fb      	ldrh	r3, [r7, #14]
 8009ffe:	60bb      	str	r3, [r7, #8]
            uxLength -= ( ( uint16_t ) uxIPHeaderLength ); /* normally, minus 20. */
 800a000:	693b      	ldr	r3, [r7, #16]
 800a002:	b29b      	uxth	r3, r3
 800a004:	461a      	mov	r2, r3
 800a006:	68bb      	ldr	r3, [r7, #8]
 800a008:	1a9b      	subs	r3, r3, r2
 800a00a:	60bb      	str	r3, [r7, #8]

            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	2b07      	cmp	r3, #7
 800a010:	d906      	bls.n	800a020 <xCheckIPv4SizeFields+0xf8>
                ( uxLength > ( ( size_t ) ipconfigNETWORK_MTU - ( size_t ) uxIPHeaderLength ) ) )
 800a012:	693a      	ldr	r2, [r7, #16]
 800a014:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800a018:	1a9b      	subs	r3, r3, r2
            if( ( uxLength < ( ( size_t ) sizeof( UDPHeader_t ) ) ) ||
 800a01a:	68ba      	ldr	r2, [r7, #8]
 800a01c:	429a      	cmp	r2, r3
 800a01e:	d902      	bls.n	800a026 <xCheckIPv4SizeFields+0xfe>
            {
                /* For incoming packets, the length is out of bound: either
                 * too short or too long. For outgoing packets, there is a
                 * serious problem with the format/length. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800a020:	2307      	movs	r3, #7
 800a022:	61fb      	str	r3, [r7, #28]
                break;
 800a024:	e001      	b.n	800a02a <xCheckIPv4SizeFields+0x102>
            }

            xResult = pdPASS;
 800a026:	2301      	movs	r3, #1
 800a028:	623b      	str	r3, [r7, #32]
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800a02a:	6a3b      	ldr	r3, [r7, #32]
 800a02c:	2b01      	cmp	r3, #1
 800a02e:	d003      	beq.n	800a038 <xCheckIPv4SizeFields+0x110>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv4SizeFields: location %ld\n", xLocation ) );
 800a030:	69f9      	ldr	r1, [r7, #28]
 800a032:	4804      	ldr	r0, [pc, #16]	@ (800a044 <xCheckIPv4SizeFields+0x11c>)
 800a034:	f016 fe24 	bl	8020c80 <lUDPLoggingPrintf>
        }

        return xResult;
 800a038:	6a3b      	ldr	r3, [r7, #32]
    }
 800a03a:	4618      	mov	r0, r3
 800a03c:	3728      	adds	r7, #40	@ 0x28
 800a03e:	46bd      	mov	sp, r7
 800a040:	bd80      	pop	{r7, pc}
 800a042:	bf00      	nop
 800a044:	08023a5c 	.word	0x08023a5c

0800a048 <xIsIPv4Multicast>:
 * @param[in] ulIPAddress The IP address being checked.
 *
 * @return pdTRUE if the IP address is a multicast address or else, pdFALSE.
 */
BaseType_t xIsIPv4Multicast( uint32_t ulIPAddress )
{
 800a048:	b480      	push	{r7}
 800a04a:	b085      	sub	sp, #20
 800a04c:	af00      	add	r7, sp, #0
 800a04e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800a050:	687b      	ldr	r3, [r7, #4]
 800a052:	061a      	lsls	r2, r3, #24
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	021b      	lsls	r3, r3, #8
 800a058:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a05c:	431a      	orrs	r2, r3
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	0a1b      	lsrs	r3, r3, #8
 800a062:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a066:	431a      	orrs	r2, r3
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	0e1b      	lsrs	r3, r3, #24
 800a06c:	4313      	orrs	r3, r2
 800a06e:	60bb      	str	r3, [r7, #8]

    if( ( ulIP >= ipFIRST_MULTI_CAST_IPv4 ) && ( ulIP < ipLAST_MULTI_CAST_IPv4 ) )
 800a070:	68bb      	ldr	r3, [r7, #8]
 800a072:	f1b3 4f60 	cmp.w	r3, #3758096384	@ 0xe0000000
 800a076:	d306      	bcc.n	800a086 <xIsIPv4Multicast+0x3e>
 800a078:	68bb      	ldr	r3, [r7, #8]
 800a07a:	f1b3 4f70 	cmp.w	r3, #4026531840	@ 0xf0000000
 800a07e:	d202      	bcs.n	800a086 <xIsIPv4Multicast+0x3e>
    {
        xReturn = pdTRUE;
 800a080:	2301      	movs	r3, #1
 800a082:	60fb      	str	r3, [r7, #12]
 800a084:	e001      	b.n	800a08a <xIsIPv4Multicast+0x42>
    }
    else
    {
        xReturn = pdFALSE;
 800a086:	2300      	movs	r3, #0
 800a088:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a08a:	68fb      	ldr	r3, [r7, #12]
}
 800a08c:	4618      	mov	r0, r3
 800a08e:	3714      	adds	r7, #20
 800a090:	46bd      	mov	sp, r7
 800a092:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a096:	4770      	bx	lr

0800a098 <prvAllowIPPacketIPv4>:
 * @return Whether the packet should be processed or dropped.
 */
enum eFrameProcessingResult prvAllowIPPacketIPv4( const struct xIP_PACKET * const pxIPPacket,
                                                  const struct xNETWORK_BUFFER * const pxNetworkBuffer,
                                                  UBaseType_t uxHeaderLength )
{
 800a098:	b580      	push	{r7, lr}
 800a09a:	b086      	sub	sp, #24
 800a09c:	af00      	add	r7, sp, #0
 800a09e:	60f8      	str	r0, [r7, #12]
 800a0a0:	60b9      	str	r1, [r7, #8]
 800a0a2:	607a      	str	r2, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a0a4:	2301      	movs	r3, #1
 800a0a6:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800a0a8:	7dfb      	ldrb	r3, [r7, #23]
 800a0aa:	2b01      	cmp	r3, #1
 800a0ac:	d10c      	bne.n	800a0c8 <prvAllowIPPacketIPv4+0x30>
        {
            if( xCheckIPv4SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800a0ae:	68bb      	ldr	r3, [r7, #8]
 800a0b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a0b2:	68bb      	ldr	r3, [r7, #8]
 800a0b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a0b6:	4619      	mov	r1, r3
 800a0b8:	4610      	mov	r0, r2
 800a0ba:	f7ff ff35 	bl	8009f28 <xCheckIPv4SizeFields>
 800a0be:	4603      	mov	r3, r0
 800a0c0:	2b01      	cmp	r3, #1
 800a0c2:	d001      	beq.n	800a0c8 <prvAllowIPPacketIPv4+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800a0c4:	2300      	movs	r3, #0
 800a0c6:	75fb      	strb	r3, [r7, #23]
        }

        #if ( ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS == 0 )
        {
            /* Check if this is a UDP packet without a checksum. */
            if( eReturn == eProcessBuffer )
 800a0c8:	7dfb      	ldrb	r3, [r7, #23]
 800a0ca:	2b01      	cmp	r3, #1
 800a0cc:	d134      	bne.n	800a138 <prvAllowIPPacketIPv4+0xa0>
                const ProtocolHeaders_t * pxProtocolHeaders;

                /* ipconfigUDP_PASS_ZERO_CHECKSUM_PACKETS is defined as 0,
                 * and so UDP packets carrying a protocol checksum of 0, will
                 * be dropped. */
                ucProtocol = pxIPPacket->xIPHeader.ucProtocol;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	7ddb      	ldrb	r3, [r3, #23]
 800a0d2:	75bb      	strb	r3, [r7, #22]
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ( size_t ) ipSIZE_OF_IPv4_HEADER ] ) );
 800a0d4:	68bb      	ldr	r3, [r7, #8]
 800a0d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a0d8:	3322      	adds	r3, #34	@ 0x22
 800a0da:	613b      	str	r3, [r7, #16]

                /* Identify the next protocol. */
                if( ucProtocol == ( uint8_t ) ipPROTOCOL_UDP )
 800a0dc:	7dbb      	ldrb	r3, [r7, #22]
 800a0de:	2b11      	cmp	r3, #17
 800a0e0:	d12a      	bne.n	800a138 <prvAllowIPPacketIPv4+0xa0>
                {
                    if( pxProtocolHeaders->xUDPHeader.usChecksum == ( uint16_t ) 0U )
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	88db      	ldrh	r3, [r3, #6]
 800a0e6:	b29b      	uxth	r3, r3
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d125      	bne.n	800a138 <prvAllowIPPacketIPv4+0xa0>
                        #if ( ipconfigHAS_PRINTF != 0 )
                        {
                            static BaseType_t xCount = 0;

                            /* Exclude this from branch coverage as this is only used for debugging. */
                            if( xCount < 5 ) /* LCOV_EXCL_BR_LINE */
 800a0ec:	4b15      	ldr	r3, [pc, #84]	@ (800a144 <prvAllowIPPacketIPv4+0xac>)
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	2b04      	cmp	r3, #4
 800a0f2:	dc1f      	bgt.n	800a134 <prvAllowIPPacketIPv4+0x9c>
                            {
                                FreeRTOS_printf( ( "prvAllowIPPacket: UDP packet from %xip without CRC dropped\n",
 800a0f4:	68fb      	ldr	r3, [r7, #12]
 800a0f6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a0fa:	061a      	lsls	r2, r3, #24
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a102:	021b      	lsls	r3, r3, #8
 800a104:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a108:	431a      	orrs	r2, r3
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a110:	0a1b      	lsrs	r3, r3, #8
 800a112:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a116:	431a      	orrs	r2, r3
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800a11e:	0e1b      	lsrs	r3, r3, #24
 800a120:	4313      	orrs	r3, r2
 800a122:	4619      	mov	r1, r3
 800a124:	4808      	ldr	r0, [pc, #32]	@ (800a148 <prvAllowIPPacketIPv4+0xb0>)
 800a126:	f016 fdab 	bl	8020c80 <lUDPLoggingPrintf>
                                                   FreeRTOS_ntohl( pxIPPacket->xIPHeader.ulSourceIPAddress ) ) );
                                xCount++;
 800a12a:	4b06      	ldr	r3, [pc, #24]	@ (800a144 <prvAllowIPPacketIPv4+0xac>)
 800a12c:	681b      	ldr	r3, [r3, #0]
 800a12e:	3301      	adds	r3, #1
 800a130:	4a04      	ldr	r2, [pc, #16]	@ (800a144 <prvAllowIPPacketIPv4+0xac>)
 800a132:	6013      	str	r3, [r2, #0]
                            }
                        }
                        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

                        /* Protocol checksum not accepted. */
                        eReturn = eReleaseBuffer;
 800a134:	2300      	movs	r3, #0
 800a136:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
        ( void ) uxHeaderLength;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */

    return eReturn;
 800a138:	7dfb      	ldrb	r3, [r7, #23]
}
 800a13a:	4618      	mov	r0, r3
 800a13c:	3718      	adds	r7, #24
 800a13e:	46bd      	mov	sp, r7
 800a140:	bd80      	pop	{r7, pc}
 800a142:	bf00      	nop
 800a144:	20000f20 	.word	0x20000f20
 800a148:	08023a80 	.word	0x08023a80

0800a14c <prvCheckIP4HeaderOptions>:
 * @param[in] pxNetworkBuffer the network buffer that contains the packet.
 *
 * @return Either 'eProcessBuffer' or 'eReleaseBuffer'
 */
enum eFrameProcessingResult prvCheckIP4HeaderOptions( struct xNETWORK_BUFFER * const pxNetworkBuffer )
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b08a      	sub	sp, #40	@ 0x28
 800a150:	af00      	add	r7, sp, #0
 800a152:	6078      	str	r0, [r7, #4]
    eFrameProcessingResult_t eReturn = eProcessBuffer;
 800a154:	2301      	movs	r3, #1
 800a156:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    #if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 )
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a15e:	330e      	adds	r3, #14
 800a160:	623b      	str	r3, [r7, #32]

        /* All structs of headers expect a IP header size of 20 bytes
         * IP header options were included, we'll ignore them and cut them out. */
        size_t uxLength = ( size_t ) pxIPHeader->ucVersionHeaderLength;
 800a162:	6a3b      	ldr	r3, [r7, #32]
 800a164:	781b      	ldrb	r3, [r3, #0]
 800a166:	61fb      	str	r3, [r7, #28]

        /* Check if the IP headers are acceptable and if it has our destination.
         * The lowest four bits of 'ucVersionHeaderLength' indicate the IP-header
         * length in multiples of 4. */
        size_t uxHeaderLength = ( size_t ) ( ( uxLength & 0x0FU ) << 2 );
 800a168:	69fb      	ldr	r3, [r7, #28]
 800a16a:	009b      	lsls	r3, r3, #2
 800a16c:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 800a170:	61bb      	str	r3, [r7, #24]

        /* Number of bytes contained in IPv4 header options. */
        const size_t optlen = ( ( size_t ) uxHeaderLength ) - ipSIZE_OF_IPv4_HEADER;
 800a172:	69bb      	ldr	r3, [r7, #24]
 800a174:	3b14      	subs	r3, #20
 800a176:	617b      	str	r3, [r7, #20]
        /* From: the previous start of UDP/ICMP/TCP data. */
        const uint8_t * pucSource = ( const uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + uxHeaderLength ] );
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a17c:	69bb      	ldr	r3, [r7, #24]
 800a17e:	330e      	adds	r3, #14
 800a180:	4413      	add	r3, r2
 800a182:	613b      	str	r3, [r7, #16]
        /* To: the usual start of UDP/ICMP/TCP data at offset 20 (decimal ) from IP header. */
        uint8_t * pucTarget = ( uint8_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ sizeof( EthernetHeader_t ) + ipSIZE_OF_IPv4_HEADER ] );
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a188:	3322      	adds	r3, #34	@ 0x22
 800a18a:	60fb      	str	r3, [r7, #12]
        /* How many: total length minus the options and the lower headers. */
        const size_t xMoveLen = pxNetworkBuffer->xDataLength - ( optlen + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_ETH_HEADER );
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a190:	697b      	ldr	r3, [r7, #20]
 800a192:	1ad3      	subs	r3, r2, r3
 800a194:	3b22      	subs	r3, #34	@ 0x22
 800a196:	60bb      	str	r3, [r7, #8]

        ( void ) memmove( pucTarget, pucSource, xMoveLen );
 800a198:	68ba      	ldr	r2, [r7, #8]
 800a19a:	6939      	ldr	r1, [r7, #16]
 800a19c:	68f8      	ldr	r0, [r7, #12]
 800a19e:	f017 ff30 	bl	8022002 <memmove>
        pxNetworkBuffer->xDataLength -= optlen;
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a1a6:	697b      	ldr	r3, [r7, #20]
 800a1a8:	1ad2      	subs	r2, r2, r3
 800a1aa:	687b      	ldr	r3, [r7, #4]
 800a1ac:	629a      	str	r2, [r3, #40]	@ 0x28
        /* Update the total length of the IP packet after removing options. */
        pxIPHeader->usLength = FreeRTOS_htons( FreeRTOS_ntohs( pxIPHeader->usLength ) - optlen );
 800a1ae:	6a3b      	ldr	r3, [r7, #32]
 800a1b0:	885b      	ldrh	r3, [r3, #2]
 800a1b2:	b29b      	uxth	r3, r3
 800a1b4:	021b      	lsls	r3, r3, #8
 800a1b6:	b21a      	sxth	r2, r3
 800a1b8:	6a3b      	ldr	r3, [r7, #32]
 800a1ba:	885b      	ldrh	r3, [r3, #2]
 800a1bc:	b29b      	uxth	r3, r3
 800a1be:	0a1b      	lsrs	r3, r3, #8
 800a1c0:	b29b      	uxth	r3, r3
 800a1c2:	b21b      	sxth	r3, r3
 800a1c4:	4313      	orrs	r3, r2
 800a1c6:	b21b      	sxth	r3, r3
 800a1c8:	b29a      	uxth	r2, r3
 800a1ca:	697b      	ldr	r3, [r7, #20]
 800a1cc:	b29b      	uxth	r3, r3
 800a1ce:	1ad3      	subs	r3, r2, r3
 800a1d0:	b29b      	uxth	r3, r3
 800a1d2:	021b      	lsls	r3, r3, #8
 800a1d4:	b29a      	uxth	r2, r3
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	885b      	ldrh	r3, [r3, #2]
 800a1da:	b29b      	uxth	r3, r3
 800a1dc:	021b      	lsls	r3, r3, #8
 800a1de:	b219      	sxth	r1, r3
 800a1e0:	6a3b      	ldr	r3, [r7, #32]
 800a1e2:	885b      	ldrh	r3, [r3, #2]
 800a1e4:	b29b      	uxth	r3, r3
 800a1e6:	0a1b      	lsrs	r3, r3, #8
 800a1e8:	b29b      	uxth	r3, r3
 800a1ea:	b21b      	sxth	r3, r3
 800a1ec:	430b      	orrs	r3, r1
 800a1ee:	b21b      	sxth	r3, r3
 800a1f0:	b29b      	uxth	r3, r3
 800a1f2:	4619      	mov	r1, r3
 800a1f4:	697b      	ldr	r3, [r7, #20]
 800a1f6:	1acb      	subs	r3, r1, r3
 800a1f8:	0a1b      	lsrs	r3, r3, #8
 800a1fa:	b29b      	uxth	r3, r3
 800a1fc:	4313      	orrs	r3, r2
 800a1fe:	b29a      	uxth	r2, r3
 800a200:	6a3b      	ldr	r3, [r7, #32]
 800a202:	805a      	strh	r2, [r3, #2]

        /* Rewrite the Version/IHL byte to indicate that this packet has no IP options. */
        pxIPHeader->ucVersionHeaderLength = ( uint8_t ) ( ( pxIPHeader->ucVersionHeaderLength & 0xF0U ) | /* High nibble is the version. */
 800a204:	6a3b      	ldr	r3, [r7, #32]
 800a206:	781b      	ldrb	r3, [r3, #0]
 800a208:	f023 030f 	bic.w	r3, r3, #15
 800a20c:	b2db      	uxtb	r3, r3
 800a20e:	f043 0305 	orr.w	r3, r3, #5
 800a212:	b2da      	uxtb	r2, r3
 800a214:	6a3b      	ldr	r3, [r7, #32]
 800a216:	701a      	strb	r2, [r3, #0]
         * IP-options will be dropped. */
        eReturn = eReleaseBuffer;
    }
    #endif /* if ( ipconfigIP_PASS_PACKETS_WITH_IP_OPTIONS != 0 ) */

    return eReturn;
 800a218:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800a21c:	4618      	mov	r0, r3
 800a21e:	3728      	adds	r7, #40	@ 0x28
 800a220:	46bd      	mov	sp, r7
 800a222:	bd80      	pop	{r7, pc}

0800a224 <FreeRTOS_inet_ntop4>:
 *         pcDestination, else a NULL is returned.
 */
const char * FreeRTOS_inet_ntop4( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800a224:	b580      	push	{r7, lr}
 800a226:	b088      	sub	sp, #32
 800a228:	af00      	add	r7, sp, #0
 800a22a:	60f8      	str	r0, [r7, #12]
 800a22c:	60b9      	str	r1, [r7, #8]
 800a22e:	607a      	str	r2, [r7, #4]
    uint32_t ulIPAddress;
    void * pvCopyDest;
    const char * pcReturn;

    if( uxSize < 16U )
 800a230:	687b      	ldr	r3, [r7, #4]
 800a232:	2b0f      	cmp	r3, #15
 800a234:	d802      	bhi.n	800a23c <FreeRTOS_inet_ntop4+0x18>
    {
        /* There must be space for "255.255.255.255". */
        pcReturn = NULL;
 800a236:	2300      	movs	r3, #0
 800a238:	61fb      	str	r3, [r7, #28]
 800a23a:	e00e      	b.n	800a25a <FreeRTOS_inet_ntop4+0x36>
    }
    else
    {
        pvCopyDest = ( void * ) &ulIPAddress;
 800a23c:	f107 0314 	add.w	r3, r7, #20
 800a240:	61bb      	str	r3, [r7, #24]
        ( void ) memcpy( pvCopyDest, pvSource, sizeof( ulIPAddress ) );
 800a242:	68fb      	ldr	r3, [r7, #12]
 800a244:	681b      	ldr	r3, [r3, #0]
 800a246:	461a      	mov	r2, r3
 800a248:	69bb      	ldr	r3, [r7, #24]
 800a24a:	601a      	str	r2, [r3, #0]
        ( void ) FreeRTOS_inet_ntoa( ulIPAddress, pcDestination );
 800a24c:	697b      	ldr	r3, [r7, #20]
 800a24e:	68b9      	ldr	r1, [r7, #8]
 800a250:	4618      	mov	r0, r3
 800a252:	f004 fac9 	bl	800e7e8 <FreeRTOS_inet_ntoa>
        pcReturn = pcDestination;
 800a256:	68bb      	ldr	r3, [r7, #8]
 800a258:	61fb      	str	r3, [r7, #28]
    }

    return pcReturn;
 800a25a:	69fb      	ldr	r3, [r7, #28]
}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3720      	adds	r7, #32
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <xSend_UDP_Update_IPv4>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800a264:	b480      	push	{r7}
 800a266:	b085      	sub	sp, #20
 800a268:	af00      	add	r7, sp, #0
 800a26a:	6078      	str	r0, [r7, #4]
 800a26c:	6039      	str	r1, [r7, #0]
    UDPPacket_t * pxUDPPacket;

    if( ( pxNetworkBuffer != NULL ) && ( pxDestinationAddress != NULL ) )
 800a26e:	687b      	ldr	r3, [r7, #4]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d010      	beq.n	800a296 <xSend_UDP_Update_IPv4+0x32>
 800a274:	683b      	ldr	r3, [r7, #0]
 800a276:	2b00      	cmp	r3, #0
 800a278:	d00d      	beq.n	800a296 <xSend_UDP_Update_IPv4+0x32>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a27a:	687b      	ldr	r3, [r7, #4]
 800a27c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a27e:	60fb      	str	r3, [r7, #12]

        pxNetworkBuffer->xIPAddress.ulIP_IPv4 = pxDestinationAddress->sin_address.ulIP_IPv4;
 800a280:	683b      	ldr	r3, [r7, #0]
 800a282:	689a      	ldr	r2, [r3, #8]
 800a284:	687b      	ldr	r3, [r7, #4]
 800a286:	615a      	str	r2, [r3, #20]
        /* Map the UDP packet onto the start of the frame. */
        pxUDPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	2200      	movs	r2, #0
 800a28c:	f042 0208 	orr.w	r2, r2, #8
 800a290:	731a      	strb	r2, [r3, #12]
 800a292:	2200      	movs	r2, #0
 800a294:	735a      	strb	r2, [r3, #13]
    }

    return NULL;
 800a296:	2300      	movs	r3, #0
}
 800a298:	4618      	mov	r0, r3
 800a29a:	3714      	adds	r7, #20
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <vSetMultiCastIPv4MacAddress>:
 * @param[in] ulIPAddress IP address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv4MacAddress( uint32_t ulIPAddress,
                                  MACAddress_t * pxMACAddress )
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b085      	sub	sp, #20
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
 800a2ac:	6039      	str	r1, [r7, #0]
    uint32_t ulIP = FreeRTOS_ntohl( ulIPAddress );
 800a2ae:	687b      	ldr	r3, [r7, #4]
 800a2b0:	061a      	lsls	r2, r3, #24
 800a2b2:	687b      	ldr	r3, [r7, #4]
 800a2b4:	021b      	lsls	r3, r3, #8
 800a2b6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800a2ba:	431a      	orrs	r2, r3
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	0a1b      	lsrs	r3, r3, #8
 800a2c0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800a2c4:	431a      	orrs	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	0e1b      	lsrs	r3, r3, #24
 800a2ca:	4313      	orrs	r3, r2
 800a2cc:	60fb      	str	r3, [r7, #12]

    pxMACAddress->ucBytes[ 0 ] = ( uint8_t ) 0x01U;
 800a2ce:	683b      	ldr	r3, [r7, #0]
 800a2d0:	2201      	movs	r2, #1
 800a2d2:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = ( uint8_t ) 0x00U;
 800a2d4:	683b      	ldr	r3, [r7, #0]
 800a2d6:	2200      	movs	r2, #0
 800a2d8:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = ( uint8_t ) 0x5EU;
 800a2da:	683b      	ldr	r3, [r7, #0]
 800a2dc:	225e      	movs	r2, #94	@ 0x5e
 800a2de:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = ( uint8_t ) ( ( ulIP >> 16 ) & 0x7fU ); /* Use 7 bits. */
 800a2e0:	68fb      	ldr	r3, [r7, #12]
 800a2e2:	0c1b      	lsrs	r3, r3, #16
 800a2e4:	b2db      	uxtb	r3, r3
 800a2e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800a2ea:	b2da      	uxtb	r2, r3
 800a2ec:	683b      	ldr	r3, [r7, #0]
 800a2ee:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = ( uint8_t ) ( ( ulIP >> 8 ) & 0xffU );  /* Use 8 bits. */
 800a2f0:	68fb      	ldr	r3, [r7, #12]
 800a2f2:	0a1b      	lsrs	r3, r3, #8
 800a2f4:	b2da      	uxtb	r2, r3
 800a2f6:	683b      	ldr	r3, [r7, #0]
 800a2f8:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = ( uint8_t ) ( ( ulIP ) & 0xffU );       /* Use 8 bits. */
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	b2da      	uxtb	r2, r3
 800a2fe:	683b      	ldr	r3, [r7, #0]
 800a300:	715a      	strb	r2, [r3, #5]
}
 800a302:	bf00      	nop
 800a304:	3714      	adds	r7, #20
 800a306:	46bd      	mov	sp, r7
 800a308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30c:	4770      	bx	lr
	...

0800a310 <xCheckIPv6SizeFields>:
 * @return pdPASS when the length fields in the packet OK, pdFAIL when the packet
 *         should be dropped.
 */
    static BaseType_t xCheckIPv6SizeFields( const void * const pvEthernetBuffer,
                                            size_t uxBufferLength )
    {
 800a310:	b580      	push	{r7, lr}
 800a312:	b08c      	sub	sp, #48	@ 0x30
 800a314:	af00      	add	r7, sp, #0
 800a316:	6078      	str	r0, [r7, #4]
 800a318:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800a31a:	2300      	movs	r3, #0
 800a31c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        uint16_t ucVersionTrafficClass;
        uint16_t usPayloadLength;
        uint8_t ucNextHeader;
        size_t uxMinimumLength;
        size_t uxExtHeaderLength = 0;
 800a31e:	2300      	movs	r3, #0
 800a320:	623b      	str	r3, [r7, #32]
        const IPExtHeader_IPv6_t * pxExtHeader = NULL;
 800a322:	2300      	movs	r3, #0
 800a324:	61bb      	str	r3, [r7, #24]
        const uint8_t * const pucEthernetBuffer = ( const uint8_t * const ) pvEthernetBuffer;
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	617b      	str	r3, [r7, #20]

        /* Map the buffer onto a IPv6-Packet struct to easily access the
         * fields of the IPv6 packet. */
        const IPPacket_IPv6_t * const pxIPv6Packet = ( const IPPacket_IPv6_t * const ) pucEthernetBuffer;
 800a32a:	697b      	ldr	r3, [r7, #20]
 800a32c:	613b      	str	r3, [r7, #16]

        DEBUG_DECLARE_TRACE_VARIABLE( BaseType_t, xLocation, 0 );
 800a32e:	2300      	movs	r3, #0
 800a330:	61fb      	str	r3, [r7, #28]

        do
        {
            /* Check for minimum packet size: Ethernet header and an IPv6-header, 54 bytes */
            if( uxBufferLength < sizeof( IPHeader_IPv6_t ) )
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	2b27      	cmp	r3, #39	@ 0x27
 800a336:	d802      	bhi.n	800a33e <xCheckIPv6SizeFields+0x2e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 1 );
 800a338:	2301      	movs	r3, #1
 800a33a:	61fb      	str	r3, [r7, #28]
                break;
 800a33c:	e098      	b.n	800a470 <xCheckIPv6SizeFields+0x160>
            }

            ucVersionTrafficClass = pxIPv6Packet->xIPHeader.ucVersionTrafficClass;
 800a33e:	693b      	ldr	r3, [r7, #16]
 800a340:	7b9b      	ldrb	r3, [r3, #14]
 800a342:	81fb      	strh	r3, [r7, #14]

            /* Test if the IP-version is 6. */
            if( ( ( ucVersionTrafficClass & ( uint8_t ) 0xF0U ) >> 4 ) != 6U )
 800a344:	89fb      	ldrh	r3, [r7, #14]
 800a346:	111b      	asrs	r3, r3, #4
 800a348:	f003 030f 	and.w	r3, r3, #15
 800a34c:	2b06      	cmp	r3, #6
 800a34e:	d002      	beq.n	800a356 <xCheckIPv6SizeFields+0x46>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 2 );
 800a350:	2302      	movs	r3, #2
 800a352:	61fb      	str	r3, [r7, #28]
                break;
 800a354:	e08c      	b.n	800a470 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the IPv6-header is transferred. */
            if( uxBufferLength < ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) )
 800a356:	683b      	ldr	r3, [r7, #0]
 800a358:	2b35      	cmp	r3, #53	@ 0x35
 800a35a:	d802      	bhi.n	800a362 <xCheckIPv6SizeFields+0x52>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 3 );
 800a35c:	2303      	movs	r3, #3
 800a35e:	61fb      	str	r3, [r7, #28]
                break;
 800a360:	e086      	b.n	800a470 <xCheckIPv6SizeFields+0x160>
            }

            /* Check if the complete IPv6-header plus protocol data have been transferred: */
            usPayloadLength = FreeRTOS_ntohs( pxIPv6Packet->xIPHeader.usPayloadLength );
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	8a5b      	ldrh	r3, [r3, #18]
 800a366:	b29b      	uxth	r3, r3
 800a368:	021b      	lsls	r3, r3, #8
 800a36a:	b21a      	sxth	r2, r3
 800a36c:	693b      	ldr	r3, [r7, #16]
 800a36e:	8a5b      	ldrh	r3, [r3, #18]
 800a370:	b29b      	uxth	r3, r3
 800a372:	0a1b      	lsrs	r3, r3, #8
 800a374:	b29b      	uxth	r3, r3
 800a376:	b21b      	sxth	r3, r3
 800a378:	4313      	orrs	r3, r2
 800a37a:	b21b      	sxth	r3, r3
 800a37c:	81bb      	strh	r3, [r7, #12]

            if( uxBufferLength != ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ( size_t ) usPayloadLength ) )
 800a37e:	89bb      	ldrh	r3, [r7, #12]
 800a380:	3336      	adds	r3, #54	@ 0x36
 800a382:	683a      	ldr	r2, [r7, #0]
 800a384:	429a      	cmp	r2, r3
 800a386:	d002      	beq.n	800a38e <xCheckIPv6SizeFields+0x7e>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 4 );
 800a388:	2304      	movs	r3, #4
 800a38a:	61fb      	str	r3, [r7, #28]
                break;
 800a38c:	e070      	b.n	800a470 <xCheckIPv6SizeFields+0x160>
            }

            /* Identify the next protocol. */
            ucNextHeader = pxIPv6Packet->xIPHeader.ucNextHeader;
 800a38e:	693b      	ldr	r3, [r7, #16]
 800a390:	7d1b      	ldrb	r3, [r3, #20]
 800a392:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

            while( xIsExtHeader( ucNextHeader ) )
 800a396:	e015      	b.n	800a3c4 <xCheckIPv6SizeFields+0xb4>
            {
                pxExtHeader = ( const IPExtHeader_IPv6_t * ) ( &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength ] ) );
 800a398:	6a3b      	ldr	r3, [r7, #32]
 800a39a:	3336      	adds	r3, #54	@ 0x36
 800a39c:	697a      	ldr	r2, [r7, #20]
 800a39e:	4413      	add	r3, r2
 800a3a0:	61bb      	str	r3, [r7, #24]
                /* The definition of length in extension header - Length of this header in 8-octet units, not including the first 8 octets. */
                uxExtHeaderLength += ( size_t ) ( ( 8 * pxExtHeader->ucHeaderExtLength ) + 8 );
 800a3a2:	69bb      	ldr	r3, [r7, #24]
 800a3a4:	785b      	ldrb	r3, [r3, #1]
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	00db      	lsls	r3, r3, #3
 800a3aa:	461a      	mov	r2, r3
 800a3ac:	6a3b      	ldr	r3, [r7, #32]
 800a3ae:	4413      	add	r3, r2
 800a3b0:	623b      	str	r3, [r7, #32]

                ucNextHeader = pxExtHeader->ucNextHeader;
 800a3b2:	69bb      	ldr	r3, [r7, #24]
 800a3b4:	781b      	ldrb	r3, [r3, #0]
 800a3b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

                if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800a3ba:	6a3b      	ldr	r3, [r7, #32]
 800a3bc:	3336      	adds	r3, #54	@ 0x36
 800a3be:	683a      	ldr	r2, [r7, #0]
 800a3c0:	429a      	cmp	r2, r3
 800a3c2:	d908      	bls.n	800a3d6 <xCheckIPv6SizeFields+0xc6>
            while( xIsExtHeader( ucNextHeader ) )
 800a3c4:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a3c8:	4618      	mov	r0, r3
 800a3ca:	f000 f85f 	bl	800a48c <xIsExtHeader>
 800a3ce:	4603      	mov	r3, r0
 800a3d0:	2b00      	cmp	r3, #0
 800a3d2:	d1e1      	bne.n	800a398 <xCheckIPv6SizeFields+0x88>
 800a3d4:	e000      	b.n	800a3d8 <xCheckIPv6SizeFields+0xc8>
                {
                    break;
 800a3d6:	bf00      	nop
                }
            }

            if( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength >= uxBufferLength )
 800a3d8:	6a3b      	ldr	r3, [r7, #32]
 800a3da:	3336      	adds	r3, #54	@ 0x36
 800a3dc:	683a      	ldr	r2, [r7, #0]
 800a3de:	429a      	cmp	r2, r3
 800a3e0:	d802      	bhi.n	800a3e8 <xCheckIPv6SizeFields+0xd8>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 7 );
 800a3e2:	2307      	movs	r3, #7
 800a3e4:	61fb      	str	r3, [r7, #28]
                break;
 800a3e6:	e043      	b.n	800a470 <xCheckIPv6SizeFields+0x160>
            }

            /* Switch on the Layer 3/4 protocol. */
            if( ucNextHeader == ( uint8_t ) ipPROTOCOL_UDP )
 800a3e8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a3ec:	2b11      	cmp	r3, #17
 800a3ee:	d103      	bne.n	800a3f8 <xCheckIPv6SizeFields+0xe8>
            {
                /* Expect at least a complete UDP header. */
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_UDP_HEADER;
 800a3f0:	6a3b      	ldr	r3, [r7, #32]
 800a3f2:	333e      	adds	r3, #62	@ 0x3e
 800a3f4:	627b      	str	r3, [r7, #36]	@ 0x24
 800a3f6:	e032      	b.n	800a45e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_TCP )
 800a3f8:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a3fc:	2b06      	cmp	r3, #6
 800a3fe:	d103      	bne.n	800a408 <xCheckIPv6SizeFields+0xf8>
            {
                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength + ipSIZE_OF_TCP_HEADER;
 800a400:	6a3b      	ldr	r3, [r7, #32]
 800a402:	334a      	adds	r3, #74	@ 0x4a
 800a404:	627b      	str	r3, [r7, #36]	@ 0x24
 800a406:	e02a      	b.n	800a45e <xCheckIPv6SizeFields+0x14e>
            }
            else if( ucNextHeader == ( uint8_t ) ipPROTOCOL_ICMP_IPv6 )
 800a408:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800a40c:	2b3a      	cmp	r3, #58	@ 0x3a
 800a40e:	d123      	bne.n	800a458 <xCheckIPv6SizeFields+0x148>
            {
                uint8_t ucTypeOfMessage;

                uxMinimumLength = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxExtHeaderLength;
 800a410:	6a3b      	ldr	r3, [r7, #32]
 800a412:	3336      	adds	r3, #54	@ 0x36
 800a414:	627b      	str	r3, [r7, #36]	@ 0x24

                ucTypeOfMessage = pucEthernetBuffer[ uxMinimumLength ];
 800a416:	697a      	ldr	r2, [r7, #20]
 800a418:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a41a:	4413      	add	r3, r2
 800a41c:	781b      	ldrb	r3, [r3, #0]
 800a41e:	72fb      	strb	r3, [r7, #11]

                if( ( ucTypeOfMessage == ipICMP_PING_REQUEST_IPv6 ) ||
 800a420:	7afb      	ldrb	r3, [r7, #11]
 800a422:	2b80      	cmp	r3, #128	@ 0x80
 800a424:	d002      	beq.n	800a42c <xCheckIPv6SizeFields+0x11c>
 800a426:	7afb      	ldrb	r3, [r7, #11]
 800a428:	2b81      	cmp	r3, #129	@ 0x81
 800a42a:	d103      	bne.n	800a434 <xCheckIPv6SizeFields+0x124>
                    ( ucTypeOfMessage == ipICMP_PING_REPLY_IPv6 ) )
                {
                    uxMinimumLength += sizeof( ICMPEcho_IPv6_t );
 800a42c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a42e:	3308      	adds	r3, #8
 800a430:	627b      	str	r3, [r7, #36]	@ 0x24
 800a432:	e014      	b.n	800a45e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_SOLICITATION_IPv6 )
 800a434:	7afb      	ldrb	r3, [r7, #11]
 800a436:	2b85      	cmp	r3, #133	@ 0x85
 800a438:	d103      	bne.n	800a442 <xCheckIPv6SizeFields+0x132>
                {
                    uxMinimumLength += sizeof( ICMPRouterSolicitation_IPv6_t );
 800a43a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a43c:	3308      	adds	r3, #8
 800a43e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a440:	e00d      	b.n	800a45e <xCheckIPv6SizeFields+0x14e>
                }
                else if( ucTypeOfMessage == ipICMP_ROUTER_ADVERTISEMENT_IPv6 )
 800a442:	7afb      	ldrb	r3, [r7, #11]
 800a444:	2b86      	cmp	r3, #134	@ 0x86
 800a446:	d103      	bne.n	800a450 <xCheckIPv6SizeFields+0x140>
                {
                    uxMinimumLength += sizeof( ICMPRouterAdvertisement_IPv6_t );
 800a448:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a44a:	3310      	adds	r3, #16
 800a44c:	627b      	str	r3, [r7, #36]	@ 0x24
 800a44e:	e006      	b.n	800a45e <xCheckIPv6SizeFields+0x14e>
                }
                else
                {
                    uxMinimumLength += ipSIZE_OF_ICMPv6_HEADER;
 800a450:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a452:	3318      	adds	r3, #24
 800a454:	627b      	str	r3, [r7, #36]	@ 0x24
 800a456:	e002      	b.n	800a45e <xCheckIPv6SizeFields+0x14e>
                }
            }
            else
            {
                /* Unhandled protocol, other than ICMP, IGMP, UDP, or TCP. */
                DEBUG_SET_TRACE_VARIABLE( xLocation, 5 );
 800a458:	2305      	movs	r3, #5
 800a45a:	61fb      	str	r3, [r7, #28]
                break;
 800a45c:	e008      	b.n	800a470 <xCheckIPv6SizeFields+0x160>
            }

            if( uxBufferLength < uxMinimumLength )
 800a45e:	683a      	ldr	r2, [r7, #0]
 800a460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a462:	429a      	cmp	r2, r3
 800a464:	d202      	bcs.n	800a46c <xCheckIPv6SizeFields+0x15c>
            {
                DEBUG_SET_TRACE_VARIABLE( xLocation, 6 );
 800a466:	2306      	movs	r3, #6
 800a468:	61fb      	str	r3, [r7, #28]
                break;
 800a46a:	e001      	b.n	800a470 <xCheckIPv6SizeFields+0x160>
            }

            xResult = pdPASS;
 800a46c:	2301      	movs	r3, #1
 800a46e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        } while( ipFALSE_BOOL );

        if( xResult != pdPASS )
 800a470:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a472:	2b01      	cmp	r3, #1
 800a474:	d003      	beq.n	800a47e <xCheckIPv6SizeFields+0x16e>
        {
            /* NOP if ipconfigHAS_PRINTF != 1 */
            FreeRTOS_printf( ( "xCheckIPv6SizeFields: location %ld\n", xLocation ) );
 800a476:	69f9      	ldr	r1, [r7, #28]
 800a478:	4803      	ldr	r0, [pc, #12]	@ (800a488 <xCheckIPv6SizeFields+0x178>)
 800a47a:	f016 fc01 	bl	8020c80 <lUDPLoggingPrintf>
        }

        return xResult;
 800a47e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800a480:	4618      	mov	r0, r3
 800a482:	3730      	adds	r7, #48	@ 0x30
 800a484:	46bd      	mov	sp, r7
 800a486:	bd80      	pop	{r7, pc}
 800a488:	08023abc 	.word	0x08023abc

0800a48c <xIsExtHeader>:
 * @param[in] ucNextHeader Next header, such as ipIPv6_EXT_HEADER_HOP_BY_HOP.
 *
 * @return pdTRUE if it's extension header, otherwise pdFALSE.
 */
    static BaseType_t xIsExtHeader( uint8_t ucNextHeader )
    {
 800a48c:	b480      	push	{r7}
 800a48e:	b085      	sub	sp, #20
 800a490:	af00      	add	r7, sp, #0
 800a492:	4603      	mov	r3, r0
 800a494:	71fb      	strb	r3, [r7, #7]
        BaseType_t xReturn = pdFALSE;
 800a496:	2300      	movs	r3, #0
 800a498:	60fb      	str	r3, [r7, #12]

        switch( ucNextHeader )
 800a49a:	79fb      	ldrb	r3, [r7, #7]
 800a49c:	2b87      	cmp	r3, #135	@ 0x87
 800a49e:	d016      	beq.n	800a4ce <xIsExtHeader+0x42>
 800a4a0:	2b87      	cmp	r3, #135	@ 0x87
 800a4a2:	dc16      	bgt.n	800a4d2 <xIsExtHeader+0x46>
 800a4a4:	2b00      	cmp	r3, #0
 800a4a6:	d012      	beq.n	800a4ce <xIsExtHeader+0x42>
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	db12      	blt.n	800a4d2 <xIsExtHeader+0x46>
 800a4ac:	2b3c      	cmp	r3, #60	@ 0x3c
 800a4ae:	dc10      	bgt.n	800a4d2 <xIsExtHeader+0x46>
 800a4b0:	2b2b      	cmp	r3, #43	@ 0x2b
 800a4b2:	db0e      	blt.n	800a4d2 <xIsExtHeader+0x46>
 800a4b4:	3b2b      	subs	r3, #43	@ 0x2b
 800a4b6:	4a0a      	ldr	r2, [pc, #40]	@ (800a4e0 <xIsExtHeader+0x54>)
 800a4b8:	fa22 f303 	lsr.w	r3, r2, r3
 800a4bc:	f003 0301 	and.w	r3, r3, #1
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	bf14      	ite	ne
 800a4c4:	2301      	movne	r3, #1
 800a4c6:	2300      	moveq	r3, #0
 800a4c8:	b2db      	uxtb	r3, r3
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d001      	beq.n	800a4d2 <xIsExtHeader+0x46>
            case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
                xReturn = pdTRUE;
 800a4ce:	2301      	movs	r3, #1
 800a4d0:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
    }
 800a4d4:	4618      	mov	r0, r3
 800a4d6:	3714      	adds	r7, #20
 800a4d8:	46bd      	mov	sp, r7
 800a4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4de:	4770      	bx	lr
 800a4e0:	00020183 	.word	0x00020183

0800a4e4 <xGetIPv6MulticastGroupID>:
 * @param[in] pxIPv6Address The multicast address to filter group ID.
 * @param[out] pxReturnGroupID The buffer to store group ID.
 */
static void xGetIPv6MulticastGroupID( const IPv6_Address_t * pxIPv6Address,
                                      IPv6_Address_t * pxReturnGroupID )
{
 800a4e4:	b580      	push	{r7, lr}
 800a4e6:	b082      	sub	sp, #8
 800a4e8:	af00      	add	r7, sp, #0
 800a4ea:	6078      	str	r0, [r7, #4]
 800a4ec:	6039      	str	r1, [r7, #0]
    configASSERT( pxIPv6Address != NULL );
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d104      	bne.n	800a4fe <xGetIPv6MulticastGroupID+0x1a>
 800a4f4:	f44f 7189 	mov.w	r1, #274	@ 0x112
 800a4f8:	480e      	ldr	r0, [pc, #56]	@ (800a534 <xGetIPv6MulticastGroupID+0x50>)
 800a4fa:	f7f6 ffb9 	bl	8001470 <vAssertCalled>
    configASSERT( pxReturnGroupID != NULL );
 800a4fe:	683b      	ldr	r3, [r7, #0]
 800a500:	2b00      	cmp	r3, #0
 800a502:	d104      	bne.n	800a50e <xGetIPv6MulticastGroupID+0x2a>
 800a504:	f240 1113 	movw	r1, #275	@ 0x113
 800a508:	480a      	ldr	r0, [pc, #40]	@ (800a534 <xGetIPv6MulticastGroupID+0x50>)
 800a50a:	f7f6 ffb1 	bl	8001470 <vAssertCalled>

    pxReturnGroupID->ucBytes[ 0 ] = 0U;
 800a50e:	683b      	ldr	r3, [r7, #0]
 800a510:	2200      	movs	r2, #0
 800a512:	701a      	strb	r2, [r3, #0]
    pxReturnGroupID->ucBytes[ 1 ] = 0U;
 800a514:	683b      	ldr	r3, [r7, #0]
 800a516:	2200      	movs	r2, #0
 800a518:	705a      	strb	r2, [r3, #1]
    ( void ) memcpy( &( pxReturnGroupID->ucBytes[ 2 ] ), &( pxIPv6Address->ucBytes[ 2 ] ), 14 );
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	1c98      	adds	r0, r3, #2
 800a51e:	687b      	ldr	r3, [r7, #4]
 800a520:	3302      	adds	r3, #2
 800a522:	220e      	movs	r2, #14
 800a524:	4619      	mov	r1, r3
 800a526:	f016 fdc7 	bl	80210b8 <memcpy>
}
 800a52a:	bf00      	nop
 800a52c:	3708      	adds	r7, #8
 800a52e:	46bd      	mov	sp, r7
 800a530:	bd80      	pop	{r7, pc}
 800a532:	bf00      	nop
 800a534:	08023ae0 	.word	0x08023ae0

0800a538 <xIsIPv6Loopback>:
 * @param[in] pxAddress The IP-address being checked.
 *
 * @return pdTRUE if the IP-address is a loopback address or else, pdFALSE.
 */
BaseType_t xIsIPv6Loopback( const IPv6_Address_t * pxAddress )
{
 800a538:	b580      	push	{r7, lr}
 800a53a:	b084      	sub	sp, #16
 800a53c:	af00      	add	r7, sp, #0
 800a53e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a540:	2300      	movs	r3, #0
 800a542:	60fb      	str	r3, [r7, #12]

    if( memcmp( pxAddress->ucBytes, FreeRTOS_in6addr_loopback.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800a544:	687b      	ldr	r3, [r7, #4]
 800a546:	2210      	movs	r2, #16
 800a548:	4906      	ldr	r1, [pc, #24]	@ (800a564 <xIsIPv6Loopback+0x2c>)
 800a54a:	4618      	mov	r0, r3
 800a54c:	f017 fd49 	bl	8021fe2 <memcmp>
 800a550:	4603      	mov	r3, r0
 800a552:	2b00      	cmp	r3, #0
 800a554:	d101      	bne.n	800a55a <xIsIPv6Loopback+0x22>
    {
        xReturn = pdTRUE;
 800a556:	2301      	movs	r3, #1
 800a558:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 800a55a:	68fb      	ldr	r3, [r7, #12]
}
 800a55c:	4618      	mov	r0, r3
 800a55e:	3710      	adds	r7, #16
 800a560:	46bd      	mov	sp, r7
 800a562:	bd80      	pop	{r7, pc}
 800a564:	08026330 	.word	0x08026330

0800a568 <xIsIPv6AllowedMulticast>:
 * @param[in] pxIPAddress The IP address to be checked.
 *
 * @return Returns pdTRUE if pxIPAddress is an allowed multicast address, pdFALSE if not.
 */
BaseType_t xIsIPv6AllowedMulticast( const IPv6_Address_t * pxIPAddress )
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b088      	sub	sp, #32
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 800a570:	2300      	movs	r3, #0
 800a572:	61fb      	str	r3, [r7, #28]
    IPv6_Address_t xGroupIDAddress;

    if( pxIPAddress->ucBytes[ 0 ] == 0xffU )
 800a574:	687b      	ldr	r3, [r7, #4]
 800a576:	781b      	ldrb	r3, [r3, #0]
 800a578:	2bff      	cmp	r3, #255	@ 0xff
 800a57a:	d123      	bne.n	800a5c4 <xIsIPv6AllowedMulticast+0x5c>
    {
        IPv6MC_GET_GROUP_ID( pxIPAddress, &xGroupIDAddress );
 800a57c:	f107 030c 	add.w	r3, r7, #12
 800a580:	4619      	mov	r1, r3
 800a582:	6878      	ldr	r0, [r7, #4]
 800a584:	f7ff ffae 	bl	800a4e4 <xGetIPv6MulticastGroupID>

        /* From RFC4291 - sec 2.7, packets from multicast address whose scope field is 0
         * should be silently dropped. */
        if( IPv6MC_GET_SCOPE_VALUE( pxIPAddress ) == 0U )
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	785b      	ldrb	r3, [r3, #1]
 800a58c:	f003 030f 	and.w	r3, r3, #15
 800a590:	2b00      	cmp	r3, #0
 800a592:	d102      	bne.n	800a59a <xIsIPv6AllowedMulticast+0x32>
        {
            xReturn = pdFALSE;
 800a594:	2300      	movs	r3, #0
 800a596:	61fb      	str	r3, [r7, #28]
 800a598:	e014      	b.n	800a5c4 <xIsIPv6AllowedMulticast+0x5c>
        /* From RFC4291 - sec 2.7.1, packets from predefined multicast address should never be used.
         * - 0xFF00::
         * - 0xFF01::
         * - ..
         * - 0xFF0F:: */
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	785b      	ldrb	r3, [r3, #1]
 800a59e:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d10c      	bne.n	800a5c0 <xIsIPv6AllowedMulticast+0x58>
                 ( memcmp( xGroupIDAddress.ucBytes, FreeRTOS_in6addr_any.ucBytes, sizeof( IPv6_Address_t ) ) == 0 ) )
 800a5a6:	f107 030c 	add.w	r3, r7, #12
 800a5aa:	2210      	movs	r2, #16
 800a5ac:	4908      	ldr	r1, [pc, #32]	@ (800a5d0 <xIsIPv6AllowedMulticast+0x68>)
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f017 fd17 	bl	8021fe2 <memcmp>
 800a5b4:	4603      	mov	r3, r0
        else if( ( IPv6MC_GET_FLAGS_VALUE( pxIPAddress ) == 0U ) &&
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	d102      	bne.n	800a5c0 <xIsIPv6AllowedMulticast+0x58>
        {
            xReturn = pdFALSE;
 800a5ba:	2300      	movs	r3, #0
 800a5bc:	61fb      	str	r3, [r7, #28]
 800a5be:	e001      	b.n	800a5c4 <xIsIPv6AllowedMulticast+0x5c>
        }
        else
        {
            xReturn = pdTRUE;
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800a5c4:	69fb      	ldr	r3, [r7, #28]
}
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	3720      	adds	r7, #32
 800a5ca:	46bd      	mov	sp, r7
 800a5cc:	bd80      	pop	{r7, pc}
 800a5ce:	bf00      	nop
 800a5d0:	08026320 	.word	0x08026320

0800a5d4 <xCompareIPv6_Address>:
 * @return Returns 0 if it can handle it, else non zero .
 */
BaseType_t xCompareIPv6_Address( const IPv6_Address_t * pxLeft,
                                 const IPv6_Address_t * pxRight,
                                 size_t uxPrefixLength )
{
 800a5d4:	b580      	push	{r7, lr}
 800a5d6:	b08a      	sub	sp, #40	@ 0x28
 800a5d8:	af00      	add	r7, sp, #0
 800a5da:	60f8      	str	r0, [r7, #12]
 800a5dc:	60b9      	str	r1, [r7, #8]
 800a5de:	607a      	str	r2, [r7, #4]
    /* This variable is initialized by the system to contain the IPv6 multicast address for all nodes. */
    static const struct xIPv6_Address FreeRTOS_in6addr_allnodes = { { 0xff, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01 } };

    /* 0    2    4    6    8    10   12   14 */
    /* ff02:0000:0000:0000:0000:0001:ff66:4a81 */
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800a5e0:	68bb      	ldr	r3, [r7, #8]
 800a5e2:	781b      	ldrb	r3, [r3, #0]
 800a5e4:	2bff      	cmp	r3, #255	@ 0xff
 800a5e6:	d112      	bne.n	800a60e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800a5e8:	68bb      	ldr	r3, [r7, #8]
 800a5ea:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xffU ) &&
 800a5ec:	2b02      	cmp	r3, #2
 800a5ee:	d10e      	bne.n	800a60e <xCompareIPv6_Address+0x3a>
        ( pxRight->ucBytes[ 12 ] == 0xffU ) )
 800a5f0:	68bb      	ldr	r3, [r7, #8]
 800a5f2:	7b1b      	ldrb	r3, [r3, #12]
        ( pxRight->ucBytes[ 1 ] == 0x02U ) &&
 800a5f4:	2bff      	cmp	r3, #255	@ 0xff
 800a5f6:	d10a      	bne.n	800a60e <xCompareIPv6_Address+0x3a>
    {
        /* This is an LLMNR address. */
        xResult = memcmp( &( pxLeft->ucBytes[ 13 ] ), &( pxRight->ucBytes[ 13 ] ), 3 );
 800a5f8:	68fb      	ldr	r3, [r7, #12]
 800a5fa:	f103 000d 	add.w	r0, r3, #13
 800a5fe:	68bb      	ldr	r3, [r7, #8]
 800a600:	330d      	adds	r3, #13
 800a602:	2203      	movs	r2, #3
 800a604:	4619      	mov	r1, r3
 800a606:	f017 fcec 	bl	8021fe2 <memcmp>
 800a60a:	6278      	str	r0, [r7, #36]	@ 0x24
 800a60c:	e069      	b.n	800a6e2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( memcmp( pxRight->ucBytes, FreeRTOS_in6addr_allnodes.ucBytes, sizeof( IPv6_Address_t ) ) == 0 )
 800a60e:	68bb      	ldr	r3, [r7, #8]
 800a610:	2210      	movs	r2, #16
 800a612:	4936      	ldr	r1, [pc, #216]	@ (800a6ec <xCompareIPv6_Address+0x118>)
 800a614:	4618      	mov	r0, r3
 800a616:	f017 fce4 	bl	8021fe2 <memcmp>
 800a61a:	4603      	mov	r3, r0
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d102      	bne.n	800a626 <xCompareIPv6_Address+0x52>
    {
        /* FF02::1 is all node address to reach out all nodes in the same link. */
        xResult = 0;
 800a620:	2300      	movs	r3, #0
 800a622:	627b      	str	r3, [r7, #36]	@ 0x24
 800a624:	e05d      	b.n	800a6e2 <xCompareIPv6_Address+0x10e>
    }
    else
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800a626:	68bb      	ldr	r3, [r7, #8]
 800a628:	781b      	ldrb	r3, [r3, #0]
 800a62a:	2bfe      	cmp	r3, #254	@ 0xfe
 800a62c:	d10e      	bne.n	800a64c <xCompareIPv6_Address+0x78>
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800a62e:	68bb      	ldr	r3, [r7, #8]
 800a630:	785b      	ldrb	r3, [r3, #1]
    if( ( pxRight->ucBytes[ 0 ] == 0xfeU ) &&
 800a632:	2b80      	cmp	r3, #128	@ 0x80
 800a634:	d10a      	bne.n	800a64c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800a636:	68fb      	ldr	r3, [r7, #12]
 800a638:	781b      	ldrb	r3, [r3, #0]
        ( pxRight->ucBytes[ 1 ] == 0x80U ) &&
 800a63a:	2bfe      	cmp	r3, #254	@ 0xfe
 800a63c:	d106      	bne.n	800a64c <xCompareIPv6_Address+0x78>
        ( pxLeft->ucBytes[ 1 ] == 0x80U ) )
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	785b      	ldrb	r3, [r3, #1]
        ( pxLeft->ucBytes[ 0 ] == 0xfeU ) &&
 800a642:	2b80      	cmp	r3, #128	@ 0x80
 800a644:	d102      	bne.n	800a64c <xCompareIPv6_Address+0x78>
    {
        /* Both are local addresses. */
        xResult = 0;
 800a646:	2300      	movs	r3, #0
 800a648:	627b      	str	r3, [r7, #36]	@ 0x24
 800a64a:	e04a      	b.n	800a6e2 <xCompareIPv6_Address+0x10e>
    }
    else
    {
        if( uxPrefixLength == 0U )
 800a64c:	687b      	ldr	r3, [r7, #4]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d102      	bne.n	800a658 <xCompareIPv6_Address+0x84>
        {
            xResult = 0;
 800a652:	2300      	movs	r3, #0
 800a654:	627b      	str	r3, [r7, #36]	@ 0x24
 800a656:	e044      	b.n	800a6e2 <xCompareIPv6_Address+0x10e>
        }
        else if( uxPrefixLength == ( 8U * ipSIZE_OF_IPv6_ADDRESS ) )
 800a658:	687b      	ldr	r3, [r7, #4]
 800a65a:	2b80      	cmp	r3, #128	@ 0x80
 800a65c:	d107      	bne.n	800a66e <xCompareIPv6_Address+0x9a>
        {
            xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	68b9      	ldr	r1, [r7, #8]
 800a662:	2210      	movs	r2, #16
 800a664:	4618      	mov	r0, r3
 800a666:	f017 fcbc 	bl	8021fe2 <memcmp>
 800a66a:	6278      	str	r0, [r7, #36]	@ 0x24
 800a66c:	e039      	b.n	800a6e2 <xCompareIPv6_Address+0x10e>
        }
        else
        {
            size_t uxLength = uxPrefixLength / 8U;
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	08db      	lsrs	r3, r3, #3
 800a672:	623b      	str	r3, [r7, #32]

            xResult = 0;
 800a674:	2300      	movs	r3, #0
 800a676:	627b      	str	r3, [r7, #36]	@ 0x24

            if( uxLength > 0U )
 800a678:	6a3b      	ldr	r3, [r7, #32]
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d006      	beq.n	800a68c <xCompareIPv6_Address+0xb8>
            {
                xResult = memcmp( pxLeft->ucBytes, pxRight->ucBytes, uxLength );
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	68b9      	ldr	r1, [r7, #8]
 800a682:	6a3a      	ldr	r2, [r7, #32]
 800a684:	4618      	mov	r0, r3
 800a686:	f017 fcac 	bl	8021fe2 <memcmp>
 800a68a:	6278      	str	r0, [r7, #36]	@ 0x24
            }

            if( ( xResult == 0 ) && ( ( uxPrefixLength % 8U ) != 0U ) )
 800a68c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d127      	bne.n	800a6e2 <xCompareIPv6_Address+0x10e>
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	f003 0307 	and.w	r3, r3, #7
 800a698:	2b00      	cmp	r3, #0
 800a69a:	d022      	beq.n	800a6e2 <xCompareIPv6_Address+0x10e>
            {
                /* One byte has both a network- and a host-address. */
                size_t uxBits = uxPrefixLength % 8U;
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	f003 0307 	and.w	r3, r3, #7
 800a6a2:	61fb      	str	r3, [r7, #28]
                size_t uxHostLen = 8U - uxBits;
 800a6a4:	69fb      	ldr	r3, [r7, #28]
 800a6a6:	f1c3 0308 	rsb	r3, r3, #8
 800a6aa:	61bb      	str	r3, [r7, #24]
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800a6ac:	2201      	movs	r2, #1
 800a6ae:	69bb      	ldr	r3, [r7, #24]
 800a6b0:	fa02 f303 	lsl.w	r3, r2, r3
 800a6b4:	3b01      	subs	r3, #1
 800a6b6:	617b      	str	r3, [r7, #20]
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800a6b8:	697b      	ldr	r3, [r7, #20]
 800a6ba:	b2db      	uxtb	r3, r3
 800a6bc:	43db      	mvns	r3, r3
 800a6be:	74fb      	strb	r3, [r7, #19]

                if( ( pxLeft->ucBytes[ uxLength ] & ucNetMask ) != ( pxRight->ucBytes[ uxLength ] & ucNetMask ) )
 800a6c0:	68fa      	ldr	r2, [r7, #12]
 800a6c2:	6a3b      	ldr	r3, [r7, #32]
 800a6c4:	4413      	add	r3, r2
 800a6c6:	781a      	ldrb	r2, [r3, #0]
 800a6c8:	68b9      	ldr	r1, [r7, #8]
 800a6ca:	6a3b      	ldr	r3, [r7, #32]
 800a6cc:	440b      	add	r3, r1
 800a6ce:	781b      	ldrb	r3, [r3, #0]
 800a6d0:	4053      	eors	r3, r2
 800a6d2:	b2da      	uxtb	r2, r3
 800a6d4:	7cfb      	ldrb	r3, [r7, #19]
 800a6d6:	4013      	ands	r3, r2
 800a6d8:	b2db      	uxtb	r3, r3
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <xCompareIPv6_Address+0x10e>
                {
                    xResult = 1;
 800a6de:	2301      	movs	r3, #1
 800a6e0:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }
        }
    }

    return xResult;
 800a6e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	3728      	adds	r7, #40	@ 0x28
 800a6e8:	46bd      	mov	sp, r7
 800a6ea:	bd80      	pop	{r7, pc}
 800a6ec:	08026340 	.word	0x08026340

0800a6f0 <prvAllowIPPacketIPv6>:
 * @return Whether the packet should be processed or dropped.
 */
eFrameProcessingResult_t prvAllowIPPacketIPv6( const IPHeader_IPv6_t * const pxIPv6Header,
                                               const NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                               UBaseType_t uxHeaderLength )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b086      	sub	sp, #24
 800a6f4:	af00      	add	r7, sp, #0
 800a6f6:	60f8      	str	r0, [r7, #12]
 800a6f8:	60b9      	str	r1, [r7, #8]
 800a6fa:	607a      	str	r2, [r7, #4]
    }
    #else /* if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 0 ) */
    {
        ( void ) pxIPv6Header;
        /* The packet has been checked by the network interface. */
        eReturn = eProcessBuffer;
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	75fb      	strb	r3, [r7, #23]
            }
        }
    }
    #else /* if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 ) */
    {
        if( eReturn == eProcessBuffer )
 800a700:	7dfb      	ldrb	r3, [r7, #23]
 800a702:	2b01      	cmp	r3, #1
 800a704:	d10c      	bne.n	800a720 <prvAllowIPPacketIPv6+0x30>
        {
            if( xCheckIPv6SizeFields( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength ) != pdPASS )
 800a706:	68bb      	ldr	r3, [r7, #8]
 800a708:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a70a:	68bb      	ldr	r3, [r7, #8]
 800a70c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a70e:	4619      	mov	r1, r3
 800a710:	4610      	mov	r0, r2
 800a712:	f7ff fdfd 	bl	800a310 <xCheckIPv6SizeFields>
 800a716:	4603      	mov	r3, r0
 800a718:	2b01      	cmp	r3, #1
 800a71a:	d001      	beq.n	800a720 <prvAllowIPPacketIPv6+0x30>
            {
                /* Some of the length checks were not successful. */
                eReturn = eReleaseBuffer;
 800a71c:	2300      	movs	r3, #0
 800a71e:	75fb      	strb	r3, [r7, #23]
        ( void ) pxNetworkBuffer;
    }
    #endif /* ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM == 0 */
    ( void ) uxHeaderLength;

    return eReturn;
 800a720:	7dfb      	ldrb	r3, [r7, #23]
}
 800a722:	4618      	mov	r0, r3
 800a724:	3718      	adds	r7, #24
 800a726:	46bd      	mov	sp, r7
 800a728:	bd80      	pop	{r7, pc}
	...

0800a72c <xGetExtensionOrder>:
 *
 * @return Extension header order in the packet.
 */
BaseType_t xGetExtensionOrder( uint8_t ucProtocol,
                               uint8_t ucNextHeader )
{
 800a72c:	b480      	push	{r7}
 800a72e:	b085      	sub	sp, #20
 800a730:	af00      	add	r7, sp, #0
 800a732:	4603      	mov	r3, r0
 800a734:	460a      	mov	r2, r1
 800a736:	71fb      	strb	r3, [r7, #7]
 800a738:	4613      	mov	r3, r2
 800a73a:	71bb      	strb	r3, [r7, #6]
    BaseType_t xReturn;

    switch( ucProtocol )
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	2b87      	cmp	r3, #135	@ 0x87
 800a740:	d04b      	beq.n	800a7da <xGetExtensionOrder+0xae>
 800a742:	2b87      	cmp	r3, #135	@ 0x87
 800a744:	dc4c      	bgt.n	800a7e0 <xGetExtensionOrder+0xb4>
 800a746:	2b00      	cmp	r3, #0
 800a748:	d030      	beq.n	800a7ac <xGetExtensionOrder+0x80>
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	db48      	blt.n	800a7e0 <xGetExtensionOrder+0xb4>
 800a74e:	2b3c      	cmp	r3, #60	@ 0x3c
 800a750:	dc46      	bgt.n	800a7e0 <xGetExtensionOrder+0xb4>
 800a752:	2b2b      	cmp	r3, #43	@ 0x2b
 800a754:	db44      	blt.n	800a7e0 <xGetExtensionOrder+0xb4>
 800a756:	3b2b      	subs	r3, #43	@ 0x2b
 800a758:	2b11      	cmp	r3, #17
 800a75a:	d841      	bhi.n	800a7e0 <xGetExtensionOrder+0xb4>
 800a75c:	a201      	add	r2, pc, #4	@ (adr r2, 800a764 <xGetExtensionOrder+0x38>)
 800a75e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a762:	bf00      	nop
 800a764:	0800a7c3 	.word	0x0800a7c3
 800a768:	0800a7c9 	.word	0x0800a7c9
 800a76c:	0800a7e1 	.word	0x0800a7e1
 800a770:	0800a7e1 	.word	0x0800a7e1
 800a774:	0800a7e1 	.word	0x0800a7e1
 800a778:	0800a7e1 	.word	0x0800a7e1
 800a77c:	0800a7e1 	.word	0x0800a7e1
 800a780:	0800a7d5 	.word	0x0800a7d5
 800a784:	0800a7cf 	.word	0x0800a7cf
 800a788:	0800a7e1 	.word	0x0800a7e1
 800a78c:	0800a7e1 	.word	0x0800a7e1
 800a790:	0800a7e1 	.word	0x0800a7e1
 800a794:	0800a7e1 	.word	0x0800a7e1
 800a798:	0800a7e1 	.word	0x0800a7e1
 800a79c:	0800a7e1 	.word	0x0800a7e1
 800a7a0:	0800a7e1 	.word	0x0800a7e1
 800a7a4:	0800a7e1 	.word	0x0800a7e1
 800a7a8:	0800a7b3 	.word	0x0800a7b3
    {
        case ipIPv6_EXT_HEADER_HOP_BY_HOP:
            xReturn = 1;
 800a7ac:	2301      	movs	r3, #1
 800a7ae:	60fb      	str	r3, [r7, #12]
            break;
 800a7b0:	e01b      	b.n	800a7ea <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_DESTINATION_OPTIONS:
            xReturn = 7;
 800a7b2:	2307      	movs	r3, #7
 800a7b4:	60fb      	str	r3, [r7, #12]

            if( ucNextHeader == ipIPv6_EXT_HEADER_ROUTING_HEADER )
 800a7b6:	79bb      	ldrb	r3, [r7, #6]
 800a7b8:	2b2b      	cmp	r3, #43	@ 0x2b
 800a7ba:	d115      	bne.n	800a7e8 <xGetExtensionOrder+0xbc>
            {
                xReturn = 2;
 800a7bc:	2302      	movs	r3, #2
 800a7be:	60fb      	str	r3, [r7, #12]
            }

            break;
 800a7c0:	e012      	b.n	800a7e8 <xGetExtensionOrder+0xbc>

        case ipIPv6_EXT_HEADER_ROUTING_HEADER:
            xReturn = 3;
 800a7c2:	2303      	movs	r3, #3
 800a7c4:	60fb      	str	r3, [r7, #12]
            break;
 800a7c6:	e010      	b.n	800a7ea <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_FRAGMENT_HEADER:
            xReturn = 4;
 800a7c8:	2304      	movs	r3, #4
 800a7ca:	60fb      	str	r3, [r7, #12]
            break;
 800a7cc:	e00d      	b.n	800a7ea <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_AUTHEN_HEADER:
            xReturn = 5;
 800a7ce:	2305      	movs	r3, #5
 800a7d0:	60fb      	str	r3, [r7, #12]
            break;
 800a7d2:	e00a      	b.n	800a7ea <xGetExtensionOrder+0xbe>

        case ipIPv6_EXT_HEADER_SECURE_PAYLOAD:
            xReturn = 6;
 800a7d4:	2306      	movs	r3, #6
 800a7d6:	60fb      	str	r3, [r7, #12]
            break;
 800a7d8:	e007      	b.n	800a7ea <xGetExtensionOrder+0xbe>

        /* Destination options may follow here in case there are no routing options. */
        case ipIPv6_EXT_HEADER_MOBILITY_HEADER:
            xReturn = 8;
 800a7da:	2308      	movs	r3, #8
 800a7dc:	60fb      	str	r3, [r7, #12]
            break;
 800a7de:	e004      	b.n	800a7ea <xGetExtensionOrder+0xbe>

        default:
            xReturn = -1;
 800a7e0:	f04f 33ff 	mov.w	r3, #4294967295
 800a7e4:	60fb      	str	r3, [r7, #12]
            break;
 800a7e6:	e000      	b.n	800a7ea <xGetExtensionOrder+0xbe>
            break;
 800a7e8:	bf00      	nop
    }

    return xReturn;
 800a7ea:	68fb      	ldr	r3, [r7, #12]
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3714      	adds	r7, #20
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7f6:	4770      	bx	lr

0800a7f8 <eHandleIPv6ExtensionHeaders>:
 * @return eProcessBuffer in case the options are removed successfully, otherwise
 *         eReleaseBuffer.
 */
eFrameProcessingResult_t eHandleIPv6ExtensionHeaders( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                                      BaseType_t xDoRemove )
{
 800a7f8:	b580      	push	{r7, lr}
 800a7fa:	b08e      	sub	sp, #56	@ 0x38
 800a7fc:	af02      	add	r7, sp, #8
 800a7fe:	6078      	str	r0, [r7, #4]
 800a800:	6039      	str	r1, [r7, #0]
    eFrameProcessingResult_t eResult = eReleaseBuffer;
 800a802:	2300      	movs	r3, #0
 800a804:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    const size_t uxMaxLength = pxNetworkBuffer->xDataLength;
 800a808:	687b      	ldr	r3, [r7, #4]
 800a80a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a80c:	627b      	str	r3, [r7, #36]	@ 0x24
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( IPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a812:	623b      	str	r3, [r7, #32]
    size_t xMoveLen = 0U;
 800a814:	2300      	movs	r3, #0
 800a816:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxRemovedBytes = 0U;
 800a818:	2300      	movs	r3, #0
 800a81a:	61fb      	str	r3, [r7, #28]
    uint8_t ucNextHeader = 0U;
 800a81c:	2300      	movs	r3, #0
 800a81e:	72fb      	strb	r3, [r7, #11]
    size_t uxIndex = 0U;
 800a820:	2300      	movs	r3, #0
 800a822:	61bb      	str	r3, [r7, #24]

    uxRemovedBytes = usGetExtensionHeaderLength( pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength, &ucNextHeader );
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a82c:	f107 020b 	add.w	r2, r7, #11
 800a830:	4619      	mov	r1, r3
 800a832:	f000 faa5 	bl	800ad80 <usGetExtensionHeaderLength>
 800a836:	61f8      	str	r0, [r7, #28]
    uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxRemovedBytes;
 800a838:	69fb      	ldr	r3, [r7, #28]
 800a83a:	3336      	adds	r3, #54	@ 0x36
 800a83c:	61bb      	str	r3, [r7, #24]

    if( uxIndex < uxMaxLength )
 800a83e:	69ba      	ldr	r2, [r7, #24]
 800a840:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a842:	429a      	cmp	r2, r3
 800a844:	d243      	bcs.n	800a8ce <eHandleIPv6ExtensionHeaders+0xd6>
    {
        uint8_t * pucTo;
        const uint8_t * pucFrom;
        uint16_t usPayloadLength = FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength );
 800a846:	6a3b      	ldr	r3, [r7, #32]
 800a848:	8a5b      	ldrh	r3, [r3, #18]
 800a84a:	b29b      	uxth	r3, r3
 800a84c:	021b      	lsls	r3, r3, #8
 800a84e:	b21a      	sxth	r2, r3
 800a850:	6a3b      	ldr	r3, [r7, #32]
 800a852:	8a5b      	ldrh	r3, [r3, #18]
 800a854:	b29b      	uxth	r3, r3
 800a856:	0a1b      	lsrs	r3, r3, #8
 800a858:	b29b      	uxth	r3, r3
 800a85a:	b21b      	sxth	r3, r3
 800a85c:	4313      	orrs	r3, r2
 800a85e:	b21b      	sxth	r3, r3
 800a860:	82fb      	strh	r3, [r7, #22]

        if( uxRemovedBytes >= ( size_t ) usPayloadLength )
 800a862:	8afb      	ldrh	r3, [r7, #22]
 800a864:	69fa      	ldr	r2, [r7, #28]
 800a866:	429a      	cmp	r2, r3
 800a868:	d231      	bcs.n	800a8ce <eHandleIPv6ExtensionHeaders+0xd6>
        {
            /* Can not remove more bytes than the payload length. */
        }
        else if( xDoRemove == pdTRUE )
 800a86a:	683b      	ldr	r3, [r7, #0]
 800a86c:	2b01      	cmp	r3, #1
 800a86e:	d12e      	bne.n	800a8ce <eHandleIPv6ExtensionHeaders+0xd6>
        {
            pxIPPacket_IPv6->xIPHeader.ucNextHeader = ucNextHeader;
 800a870:	7afa      	ldrb	r2, [r7, #11]
 800a872:	6a3b      	ldr	r3, [r7, #32]
 800a874:	751a      	strb	r2, [r3, #20]
            pucTo = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ] );
 800a876:	687b      	ldr	r3, [r7, #4]
 800a878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a87a:	3336      	adds	r3, #54	@ 0x36
 800a87c:	613b      	str	r3, [r7, #16]
            pucFrom = &( pxNetworkBuffer->pucEthernetBuffer[ uxIndex ] );
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800a882:	69bb      	ldr	r3, [r7, #24]
 800a884:	4413      	add	r3, r2
 800a886:	60fb      	str	r3, [r7, #12]
            xMoveLen = uxMaxLength - uxIndex;
 800a888:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a88a:	69bb      	ldr	r3, [r7, #24]
 800a88c:	1ad3      	subs	r3, r2, r3
 800a88e:	62bb      	str	r3, [r7, #40]	@ 0x28
            ( void ) memmove( pucTo, pucFrom, xMoveLen );
 800a890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a892:	68f9      	ldr	r1, [r7, #12]
 800a894:	6938      	ldr	r0, [r7, #16]
 800a896:	f017 fbb4 	bl	8022002 <memmove>
            pxNetworkBuffer->xDataLength -= uxRemovedBytes;
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800a89e:	69fb      	ldr	r3, [r7, #28]
 800a8a0:	1ad2      	subs	r2, r2, r3
 800a8a2:	687b      	ldr	r3, [r7, #4]
 800a8a4:	629a      	str	r2, [r3, #40]	@ 0x28

            usPayloadLength = ( uint16_t ) ( usPayloadLength - uxRemovedBytes );
 800a8a6:	69fb      	ldr	r3, [r7, #28]
 800a8a8:	b29b      	uxth	r3, r3
 800a8aa:	8afa      	ldrh	r2, [r7, #22]
 800a8ac:	1ad3      	subs	r3, r2, r3
 800a8ae:	82fb      	strh	r3, [r7, #22]
            pxIPPacket_IPv6->xIPHeader.usPayloadLength = FreeRTOS_htons( usPayloadLength );
 800a8b0:	8afb      	ldrh	r3, [r7, #22]
 800a8b2:	021b      	lsls	r3, r3, #8
 800a8b4:	b21a      	sxth	r2, r3
 800a8b6:	8afb      	ldrh	r3, [r7, #22]
 800a8b8:	0a1b      	lsrs	r3, r3, #8
 800a8ba:	b29b      	uxth	r3, r3
 800a8bc:	b21b      	sxth	r3, r3
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	b21b      	sxth	r3, r3
 800a8c2:	b29a      	uxth	r2, r3
 800a8c4:	6a3b      	ldr	r3, [r7, #32]
 800a8c6:	825a      	strh	r2, [r3, #18]
            eResult = eProcessBuffer;
 800a8c8:	2301      	movs	r3, #1
 800a8ca:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            /* xDoRemove is false, so the function is not supposed to
             * remove extension headers. */
        }
    }

    FreeRTOS_printf( ( "Extension headers : %s Truncated %u bytes. Removed %u, Payload %u xDataLength now %u\n",
 800a8ce:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800a8d2:	2b01      	cmp	r3, #1
 800a8d4:	d101      	bne.n	800a8da <eHandleIPv6ExtensionHeaders+0xe2>
 800a8d6:	4910      	ldr	r1, [pc, #64]	@ (800a918 <eHandleIPv6ExtensionHeaders+0x120>)
 800a8d8:	e000      	b.n	800a8dc <eHandleIPv6ExtensionHeaders+0xe4>
 800a8da:	4910      	ldr	r1, [pc, #64]	@ (800a91c <eHandleIPv6ExtensionHeaders+0x124>)
 800a8dc:	6a3b      	ldr	r3, [r7, #32]
 800a8de:	8a5b      	ldrh	r3, [r3, #18]
 800a8e0:	b29b      	uxth	r3, r3
 800a8e2:	021b      	lsls	r3, r3, #8
 800a8e4:	b21a      	sxth	r2, r3
 800a8e6:	6a3b      	ldr	r3, [r7, #32]
 800a8e8:	8a5b      	ldrh	r3, [r3, #18]
 800a8ea:	b29b      	uxth	r3, r3
 800a8ec:	0a1b      	lsrs	r3, r3, #8
 800a8ee:	b29b      	uxth	r3, r3
 800a8f0:	b21b      	sxth	r3, r3
 800a8f2:	4313      	orrs	r3, r2
 800a8f4:	b21b      	sxth	r3, r3
 800a8f6:	b29b      	uxth	r3, r3
 800a8f8:	461a      	mov	r2, r3
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a8fe:	9301      	str	r3, [sp, #4]
 800a900:	9200      	str	r2, [sp, #0]
 800a902:	69fb      	ldr	r3, [r7, #28]
 800a904:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a906:	4806      	ldr	r0, [pc, #24]	@ (800a920 <eHandleIPv6ExtensionHeaders+0x128>)
 800a908:	f016 f9ba 	bl	8020c80 <lUDPLoggingPrintf>
                       ( eResult == eProcessBuffer ) ? "good" : "bad",
                       ( unsigned ) xMoveLen,
                       ( unsigned ) uxRemovedBytes,
                       FreeRTOS_ntohs( pxIPPacket_IPv6->xIPHeader.usPayloadLength ),
                       ( unsigned ) pxNetworkBuffer->xDataLength ) );
    return eResult;
 800a90c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800a910:	4618      	mov	r0, r3
 800a912:	3730      	adds	r7, #48	@ 0x30
 800a914:	46bd      	mov	sp, r7
 800a916:	bd80      	pop	{r7, pc}
 800a918:	08023b10 	.word	0x08023b10
 800a91c:	08023b18 	.word	0x08023b18
 800a920:	08023b1c 	.word	0x08023b1c

0800a924 <pxTCPSocketLookup_IPv6>:
 * @param[in] pxAddress The IPv4/IPv6 address.
 * @return The socket in case it is connected to the remote IP-address.
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup_IPv6( FreeRTOS_Socket_t * pxSocket,
                                                const IPv46_Address_t * pxAddress )
    {
 800a924:	b580      	push	{r7, lr}
 800a926:	b084      	sub	sp, #16
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
 800a92c:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxResult = NULL;
 800a92e:	2300      	movs	r3, #0
 800a930:	60fb      	str	r3, [r7, #12]

        if( ( pxSocket != NULL ) && ( pxAddress != NULL ) )
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	2b00      	cmp	r3, #0
 800a936:	d026      	beq.n	800a986 <pxTCPSocketLookup_IPv6+0x62>
 800a938:	683b      	ldr	r3, [r7, #0]
 800a93a:	2b00      	cmp	r3, #0
 800a93c:	d023      	beq.n	800a986 <pxTCPSocketLookup_IPv6+0x62>
        {
            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	7a1b      	ldrb	r3, [r3, #8]
 800a942:	f003 0301 	and.w	r3, r3, #1
 800a946:	b2db      	uxtb	r3, r3
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d010      	beq.n	800a96e <pxTCPSocketLookup_IPv6+0x4a>
            {
                if( pxAddress->xIs_IPv6 != pdFALSE )
 800a94c:	683b      	ldr	r3, [r7, #0]
 800a94e:	691b      	ldr	r3, [r3, #16]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d018      	beq.n	800a986 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( memcmp( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->xIPAddress.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800a954:	687b      	ldr	r3, [r7, #4]
 800a956:	3354      	adds	r3, #84	@ 0x54
 800a958:	6839      	ldr	r1, [r7, #0]
 800a95a:	2210      	movs	r2, #16
 800a95c:	4618      	mov	r0, r3
 800a95e:	f017 fb40 	bl	8021fe2 <memcmp>
 800a962:	4603      	mov	r3, r0
 800a964:	2b00      	cmp	r3, #0
 800a966:	d10e      	bne.n	800a986 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	60fb      	str	r3, [r7, #12]
 800a96c:	e00b      	b.n	800a986 <pxTCPSocketLookup_IPv6+0x62>
                    }
                }
            }
            else
            {
                if( pxAddress->xIs_IPv6 == pdFALSE )
 800a96e:	683b      	ldr	r3, [r7, #0]
 800a970:	691b      	ldr	r3, [r3, #16]
 800a972:	2b00      	cmp	r3, #0
 800a974:	d107      	bne.n	800a986 <pxTCPSocketLookup_IPv6+0x62>
                {
                    if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == pxAddress->xIPAddress.ulIP_IPv4 )
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800a97a:	683b      	ldr	r3, [r7, #0]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	429a      	cmp	r2, r3
 800a980:	d101      	bne.n	800a986 <pxTCPSocketLookup_IPv6+0x62>
                    {
                        /* For sockets not in listening mode, find a match with
                         * uxLocalPort, ulRemoteIP AND uxRemotePort. */
                        pxResult = pxSocket;
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	60fb      	str	r3, [r7, #12]
                    }
                }
            }
        }

        return pxResult;
 800a986:	68fb      	ldr	r3, [r7, #12]
    }
 800a988:	4618      	mov	r0, r3
 800a98a:	3710      	adds	r7, #16
 800a98c:	46bd      	mov	sp, r7
 800a98e:	bd80      	pop	{r7, pc}

0800a990 <xSend_UDP_Update_IPv6>:
 * @param[in] pxDestinationAddress The IPv4 socket address.
 * @return  Returns NULL, always.
 */
void * xSend_UDP_Update_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                              const struct freertos_sockaddr * pxDestinationAddress )
{
 800a990:	b580      	push	{r7, lr}
 800a992:	b084      	sub	sp, #16
 800a994:	af00      	add	r7, sp, #0
 800a996:	6078      	str	r0, [r7, #4]
 800a998:	6039      	str	r1, [r7, #0]
    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    UDPPacket_IPv6_t * pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800a99a:	687b      	ldr	r3, [r7, #4]
 800a99c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a99e:	60fb      	str	r3, [r7, #12]

    pxNetworkBuffer->xIPAddress.ulIP_IPv4 = 0U;
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	2200      	movs	r2, #0
 800a9a4:	615a      	str	r2, [r3, #20]

    configASSERT( pxDestinationAddress != NULL );
 800a9a6:	683b      	ldr	r3, [r7, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d103      	bne.n	800a9b4 <xSend_UDP_Update_IPv6+0x24>
 800a9ac:	2173      	movs	r1, #115	@ 0x73
 800a9ae:	4811      	ldr	r0, [pc, #68]	@ (800a9f4 <xSend_UDP_Update_IPv6+0x64>)
 800a9b0:	f7f6 fd5e 	bl	8001470 <vAssertCalled>
    ( void ) memcpy( pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a9b4:	68fb      	ldr	r3, [r7, #12]
 800a9b6:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800a9ba:	683b      	ldr	r3, [r7, #0]
 800a9bc:	3308      	adds	r3, #8
 800a9be:	2210      	movs	r2, #16
 800a9c0:	4619      	mov	r1, r3
 800a9c2:	f016 fb79 	bl	80210b8 <memcpy>
    ( void ) memcpy( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, pxDestinationAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	f103 0014 	add.w	r0, r3, #20
 800a9cc:	683b      	ldr	r3, [r7, #0]
 800a9ce:	3308      	adds	r3, #8
 800a9d0:	2210      	movs	r2, #16
 800a9d2:	4619      	mov	r1, r3
 800a9d4:	f016 fb70 	bl	80210b8 <memcpy>
    pxUDPPacket_IPv6->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800a9e0:	731a      	strb	r2, [r3, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800a9e8:	735a      	strb	r2, [r3, #13]

    return NULL;
 800a9ea:	2300      	movs	r3, #0
}
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	3710      	adds	r7, #16
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	08023b74 	.word	0x08023b74

0800a9f8 <cHexToChar>:
 * @brief Converts a 4 bit (nibble) value to a readable hex character, e.g. 14 becomes 'e'.
 * @param usValue  The value to be converted, must be between 0 and 15.
 * @return The character, between '0' and '9', or between 'a' and 'f'.
 */
char cHexToChar( uint16_t usValue )
{
 800a9f8:	b580      	push	{r7, lr}
 800a9fa:	b084      	sub	sp, #16
 800a9fc:	af00      	add	r7, sp, #0
 800a9fe:	4603      	mov	r3, r0
 800aa00:	80fb      	strh	r3, [r7, #6]
    char cReturn = '0';
 800aa02:	2330      	movs	r3, #48	@ 0x30
 800aa04:	73fb      	strb	r3, [r7, #15]

    if( usValue <= 9U )
 800aa06:	88fb      	ldrh	r3, [r7, #6]
 800aa08:	2b09      	cmp	r3, #9
 800aa0a:	d805      	bhi.n	800aa18 <cHexToChar+0x20>
    {
        cReturn = ( char ) ( cReturn + usValue );
 800aa0c:	88fb      	ldrh	r3, [r7, #6]
 800aa0e:	b2da      	uxtb	r2, r3
 800aa10:	7bfb      	ldrb	r3, [r7, #15]
 800aa12:	4413      	add	r3, r2
 800aa14:	73fb      	strb	r3, [r7, #15]
 800aa16:	e010      	b.n	800aa3a <cHexToChar+0x42>
    }
    else if( usValue <= 15U )
 800aa18:	88fb      	ldrh	r3, [r7, #6]
 800aa1a:	2b0f      	cmp	r3, #15
 800aa1c:	d809      	bhi.n	800aa32 <cHexToChar+0x3a>
    {
        cReturn = 'a';
 800aa1e:	2361      	movs	r3, #97	@ 0x61
 800aa20:	73fb      	strb	r3, [r7, #15]
        cReturn = ( char ) ( cReturn + ( usValue - ( uint16_t ) 10 ) );
 800aa22:	88fb      	ldrh	r3, [r7, #6]
 800aa24:	b2da      	uxtb	r2, r3
 800aa26:	7bfb      	ldrb	r3, [r7, #15]
 800aa28:	4413      	add	r3, r2
 800aa2a:	b2db      	uxtb	r3, r3
 800aa2c:	3b0a      	subs	r3, #10
 800aa2e:	73fb      	strb	r3, [r7, #15]
 800aa30:	e003      	b.n	800aa3a <cHexToChar+0x42>
    }
    else
    {
        /* The value passed to 'usValue' has been and-ed with 0x0f,
         * so this else clause should never be reached. */
        configASSERT( 0 == 1 );
 800aa32:	21b3      	movs	r1, #179	@ 0xb3
 800aa34:	4803      	ldr	r0, [pc, #12]	@ (800aa44 <cHexToChar+0x4c>)
 800aa36:	f7f6 fd1b 	bl	8001470 <vAssertCalled>
    }

    return cReturn;
 800aa3a:	7bfb      	ldrb	r3, [r7, #15]
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3710      	adds	r7, #16
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	08023b74 	.word	0x08023b74

0800aa48 <uxHexPrintShort>:
 * @return The number of bytes written to 'pcBuffer'.
 */
socklen_t uxHexPrintShort( char * pcBuffer,
                           size_t uxBufferSize,
                           uint16_t usValue )
{
 800aa48:	b590      	push	{r4, r7, lr}
 800aa4a:	b08b      	sub	sp, #44	@ 0x2c
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	4613      	mov	r3, r2
 800aa54:	80fb      	strh	r3, [r7, #6]
    const size_t uxNibbleCount = 4U;
 800aa56:	2304      	movs	r3, #4
 800aa58:	617b      	str	r3, [r7, #20]
    size_t uxNibble;
    socklen_t uxIndex = 0U;
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	623b      	str	r3, [r7, #32]
    uint16_t usShifter = usValue;
 800aa5e:	88fb      	ldrh	r3, [r7, #6]
 800aa60:	83fb      	strh	r3, [r7, #30]
    BaseType_t xHadNonZero = pdFALSE;
 800aa62:	2300      	movs	r3, #0
 800aa64:	61bb      	str	r3, [r7, #24]

    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800aa66:	2300      	movs	r3, #0
 800aa68:	627b      	str	r3, [r7, #36]	@ 0x24
 800aa6a:	e026      	b.n	800aaba <uxHexPrintShort+0x72>
    {
        uint16_t usNibble = ( usShifter >> 12 ) & 0x0FU;
 800aa6c:	8bfb      	ldrh	r3, [r7, #30]
 800aa6e:	0b1b      	lsrs	r3, r3, #12
 800aa70:	827b      	strh	r3, [r7, #18]

        if( usNibble != 0U )
 800aa72:	8a7b      	ldrh	r3, [r7, #18]
 800aa74:	2b00      	cmp	r3, #0
 800aa76:	d001      	beq.n	800aa7c <uxHexPrintShort+0x34>
        {
            xHadNonZero = pdTRUE;
 800aa78:	2301      	movs	r3, #1
 800aa7a:	61bb      	str	r3, [r7, #24]
        }

        if( ( xHadNonZero != pdFALSE ) || ( uxNibble == ( uxNibbleCount - 1U ) ) )
 800aa7c:	69bb      	ldr	r3, [r7, #24]
 800aa7e:	2b00      	cmp	r3, #0
 800aa80:	d104      	bne.n	800aa8c <uxHexPrintShort+0x44>
 800aa82:	697b      	ldr	r3, [r7, #20]
 800aa84:	3b01      	subs	r3, #1
 800aa86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aa88:	429a      	cmp	r2, r3
 800aa8a:	d110      	bne.n	800aaae <uxHexPrintShort+0x66>
        {
            if( uxIndex >= ( uxBufferSize - 1U ) )
 800aa8c:	68bb      	ldr	r3, [r7, #8]
 800aa8e:	3b01      	subs	r3, #1
 800aa90:	6a3a      	ldr	r2, [r7, #32]
 800aa92:	429a      	cmp	r2, r3
 800aa94:	d216      	bcs.n	800aac4 <uxHexPrintShort+0x7c>
            {
                break;
            }

            pcBuffer[ uxIndex ] = cHexToChar( usNibble );
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	6a3b      	ldr	r3, [r7, #32]
 800aa9a:	18d4      	adds	r4, r2, r3
 800aa9c:	8a7b      	ldrh	r3, [r7, #18]
 800aa9e:	4618      	mov	r0, r3
 800aaa0:	f7ff ffaa 	bl	800a9f8 <cHexToChar>
 800aaa4:	4603      	mov	r3, r0
 800aaa6:	7023      	strb	r3, [r4, #0]
            uxIndex++;
 800aaa8:	6a3b      	ldr	r3, [r7, #32]
 800aaaa:	3301      	adds	r3, #1
 800aaac:	623b      	str	r3, [r7, #32]
        }

        usShifter = ( uint16_t ) ( usShifter << 4 );
 800aaae:	8bfb      	ldrh	r3, [r7, #30]
 800aab0:	011b      	lsls	r3, r3, #4
 800aab2:	83fb      	strh	r3, [r7, #30]
    for( uxNibble = 0; uxNibble < uxNibbleCount; uxNibble++ )
 800aab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aab6:	3301      	adds	r3, #1
 800aab8:	627b      	str	r3, [r7, #36]	@ 0x24
 800aaba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800aabc:	697b      	ldr	r3, [r7, #20]
 800aabe:	429a      	cmp	r2, r3
 800aac0:	d3d4      	bcc.n	800aa6c <uxHexPrintShort+0x24>
 800aac2:	e000      	b.n	800aac6 <uxHexPrintShort+0x7e>
                break;
 800aac4:	bf00      	nop
    }

    return uxIndex;
 800aac6:	6a3b      	ldr	r3, [r7, #32]
}
 800aac8:	4618      	mov	r0, r3
 800aaca:	372c      	adds	r7, #44	@ 0x2c
 800aacc:	46bd      	mov	sp, r7
 800aace:	bd90      	pop	{r4, r7, pc}

0800aad0 <prv_ntop6_search_zeros>:
 * @brief Scan the binary IPv6 address and find the longest train of consecutive zero's.
 *        The result of this search will be stored in 'xZeroStart' and 'xZeroLength'.
 * @param pxSet the set of parameters as used by FreeRTOS_inet_ntop6().
 */
void prv_ntop6_search_zeros( struct sNTOP6_Set * pxSet )
{
 800aad0:	b480      	push	{r7}
 800aad2:	b089      	sub	sp, #36	@ 0x24
 800aad4:	af00      	add	r7, sp, #0
 800aad6:	6078      	str	r0, [r7, #4]
    BaseType_t xIndex = 0;            /* The index in the IPv6 address: 0..7. */
 800aad8:	2300      	movs	r3, #0
 800aada:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurStart = 0;         /* The position of the first zero found so far. */
 800aadc:	2300      	movs	r3, #0
 800aade:	61bb      	str	r3, [r7, #24]
    BaseType_t xCurLength = 0;        /* The number of zero's seen so far. */
 800aae0:	2300      	movs	r3, #0
 800aae2:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800aae4:	2308      	movs	r3, #8
 800aae6:	613b      	str	r3, [r7, #16]

    /* Default: when xZeroStart is negative, it won't match with any xIndex. */
    pxSet->xZeroStart = -1;
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	f04f 32ff 	mov.w	r2, #4294967295
 800aaee:	605a      	str	r2, [r3, #4]

    /* Look for the longest train of zero's 0:0:0:... */
    for( ; xIndex < xShortCount; xIndex++ )
 800aaf0:	e02c      	b.n	800ab4c <prv_ntop6_search_zeros+0x7c>
    {
        uint16_t usValue = pxSet->pusAddress[ xIndex ];
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681a      	ldr	r2, [r3, #0]
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	005b      	lsls	r3, r3, #1
 800aafa:	4413      	add	r3, r2
 800aafc:	881b      	ldrh	r3, [r3, #0]
 800aafe:	81fb      	strh	r3, [r7, #14]

        if( usValue == 0U )
 800ab00:	89fb      	ldrh	r3, [r7, #14]
 800ab02:	2b00      	cmp	r3, #0
 800ab04:	d107      	bne.n	800ab16 <prv_ntop6_search_zeros+0x46>
        {
            if( xCurLength == 0 )
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d101      	bne.n	800ab10 <prv_ntop6_search_zeros+0x40>
            {
                /* Remember the position of the first zero. */
                xCurStart = xIndex;
 800ab0c:	69fb      	ldr	r3, [r7, #28]
 800ab0e:	61bb      	str	r3, [r7, #24]
            }

            /* Count consecutive zeros. */
            xCurLength++;
 800ab10:	697b      	ldr	r3, [r7, #20]
 800ab12:	3301      	adds	r3, #1
 800ab14:	617b      	str	r3, [r7, #20]
        }

        if( ( usValue != 0U ) || ( xIndex == ( xShortCount - 1 ) ) )
 800ab16:	89fb      	ldrh	r3, [r7, #14]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d104      	bne.n	800ab26 <prv_ntop6_search_zeros+0x56>
 800ab1c:	693b      	ldr	r3, [r7, #16]
 800ab1e:	3b01      	subs	r3, #1
 800ab20:	69fa      	ldr	r2, [r7, #28]
 800ab22:	429a      	cmp	r2, r3
 800ab24:	d10f      	bne.n	800ab46 <prv_ntop6_search_zeros+0x76>
        {
            /* Has a longer train of zero's been found? */
            if( ( xCurLength > 1 ) && ( pxSet->xZeroLength < xCurLength ) )
 800ab26:	697b      	ldr	r3, [r7, #20]
 800ab28:	2b01      	cmp	r3, #1
 800ab2a:	dd0a      	ble.n	800ab42 <prv_ntop6_search_zeros+0x72>
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	689b      	ldr	r3, [r3, #8]
 800ab30:	697a      	ldr	r2, [r7, #20]
 800ab32:	429a      	cmp	r2, r3
 800ab34:	dd05      	ble.n	800ab42 <prv_ntop6_search_zeros+0x72>
            {
                /* Remember the number of consecutive zeros. */
                pxSet->xZeroLength = xCurLength;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	697a      	ldr	r2, [r7, #20]
 800ab3a:	609a      	str	r2, [r3, #8]
                /* Remember the index of the first zero found. */
                pxSet->xZeroStart = xCurStart;
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	69ba      	ldr	r2, [r7, #24]
 800ab40:	605a      	str	r2, [r3, #4]
            }

            /* Reset the counter of consecutive zeros. */
            xCurLength = 0;
 800ab42:	2300      	movs	r3, #0
 800ab44:	617b      	str	r3, [r7, #20]
    for( ; xIndex < xShortCount; xIndex++ )
 800ab46:	69fb      	ldr	r3, [r7, #28]
 800ab48:	3301      	adds	r3, #1
 800ab4a:	61fb      	str	r3, [r7, #28]
 800ab4c:	69fa      	ldr	r2, [r7, #28]
 800ab4e:	693b      	ldr	r3, [r7, #16]
 800ab50:	429a      	cmp	r2, r3
 800ab52:	dbce      	blt.n	800aaf2 <prv_ntop6_search_zeros+0x22>
        }
    }
}
 800ab54:	bf00      	nop
 800ab56:	bf00      	nop
 800ab58:	3724      	adds	r7, #36	@ 0x24
 800ab5a:	46bd      	mov	sp, r7
 800ab5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab60:	4770      	bx	lr

0800ab62 <prv_ntop6_write_zeros>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_zeros( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800ab62:	b480      	push	{r7}
 800ab64:	b087      	sub	sp, #28
 800ab66:	af00      	add	r7, sp, #0
 800ab68:	60f8      	str	r0, [r7, #12]
 800ab6a:	60b9      	str	r1, [r7, #8]
 800ab6c:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdPASS;
 800ab6e:	2301      	movs	r3, #1
 800ab70:	617b      	str	r3, [r7, #20]
    const BaseType_t xShortCount = 8; /* An IPv6 address consists of 8 shorts. */
 800ab72:	2308      	movs	r3, #8
 800ab74:	613b      	str	r3, [r7, #16]

    if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800ab76:	687b      	ldr	r3, [r7, #4]
 800ab78:	691a      	ldr	r2, [r3, #16]
 800ab7a:	68bb      	ldr	r3, [r7, #8]
 800ab7c:	3b01      	subs	r3, #1
 800ab7e:	429a      	cmp	r2, r3
 800ab80:	d827      	bhi.n	800abd2 <prv_ntop6_write_zeros+0x70>
    {
        pcDestination[ pxSet->uxTargetIndex ] = ':';
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	691b      	ldr	r3, [r3, #16]
 800ab86:	68fa      	ldr	r2, [r7, #12]
 800ab88:	4413      	add	r3, r2
 800ab8a:	223a      	movs	r2, #58	@ 0x3a
 800ab8c:	701a      	strb	r2, [r3, #0]
        pxSet->uxTargetIndex++;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	691b      	ldr	r3, [r3, #16]
 800ab92:	1c5a      	adds	r2, r3, #1
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	611a      	str	r2, [r3, #16]

        if( ( pxSet->xIndex + pxSet->xZeroLength ) == xShortCount )
 800ab98:	687b      	ldr	r3, [r7, #4]
 800ab9a:	68da      	ldr	r2, [r3, #12]
 800ab9c:	687b      	ldr	r3, [r7, #4]
 800ab9e:	689b      	ldr	r3, [r3, #8]
 800aba0:	4413      	add	r3, r2
 800aba2:	693a      	ldr	r2, [r7, #16]
 800aba4:	429a      	cmp	r2, r3
 800aba6:	d116      	bne.n	800abd6 <prv_ntop6_write_zeros+0x74>
        {
            /* Reached the last index, write a second ":". */
            if( pxSet->uxTargetIndex <= ( uxSize - 1U ) )
 800aba8:	687b      	ldr	r3, [r7, #4]
 800abaa:	691a      	ldr	r2, [r3, #16]
 800abac:	68bb      	ldr	r3, [r7, #8]
 800abae:	3b01      	subs	r3, #1
 800abb0:	429a      	cmp	r2, r3
 800abb2:	d80b      	bhi.n	800abcc <prv_ntop6_write_zeros+0x6a>
            {
                pcDestination[ pxSet->uxTargetIndex ] = ':';
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	691b      	ldr	r3, [r3, #16]
 800abb8:	68fa      	ldr	r2, [r7, #12]
 800abba:	4413      	add	r3, r2
 800abbc:	223a      	movs	r2, #58	@ 0x3a
 800abbe:	701a      	strb	r2, [r3, #0]
                pxSet->uxTargetIndex++;
 800abc0:	687b      	ldr	r3, [r7, #4]
 800abc2:	691b      	ldr	r3, [r3, #16]
 800abc4:	1c5a      	adds	r2, r3, #1
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	611a      	str	r2, [r3, #16]
 800abca:	e004      	b.n	800abd6 <prv_ntop6_write_zeros+0x74>
            }
            else
            {
                /* Can not write the second colon. */
                xReturn = pdFAIL;
 800abcc:	2300      	movs	r3, #0
 800abce:	617b      	str	r3, [r7, #20]
 800abd0:	e001      	b.n	800abd6 <prv_ntop6_write_zeros+0x74>
        }
    }
    else
    {
        /* Can not write the first colon. */
        xReturn = pdFAIL;
 800abd2:	2300      	movs	r3, #0
 800abd4:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800abd6:	697b      	ldr	r3, [r7, #20]
}
 800abd8:	4618      	mov	r0, r3
 800abda:	371c      	adds	r7, #28
 800abdc:	46bd      	mov	sp, r7
 800abde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abe2:	4770      	bx	lr

0800abe4 <prv_ntop6_write_short>:
 *       null-terminated later on.
 */
static BaseType_t prv_ntop6_write_short( char * pcDestination,
                                         size_t uxSize,
                                         struct sNTOP6_Set * pxSet )
{
 800abe4:	b590      	push	{r4, r7, lr}
 800abe6:	b089      	sub	sp, #36	@ 0x24
 800abe8:	af00      	add	r7, sp, #0
 800abea:	60f8      	str	r0, [r7, #12]
 800abec:	60b9      	str	r1, [r7, #8]
 800abee:	607a      	str	r2, [r7, #4]
    socklen_t uxLength;
    BaseType_t xReturn = pdPASS;
 800abf0:	2301      	movs	r3, #1
 800abf2:	61fb      	str	r3, [r7, #28]
    const size_t uxBytesPerShortValue = 4U;
 800abf4:	2304      	movs	r3, #4
 800abf6:	61bb      	str	r3, [r7, #24]

    if( pxSet->xIndex > 0 )
 800abf8:	687b      	ldr	r3, [r7, #4]
 800abfa:	68db      	ldr	r3, [r3, #12]
 800abfc:	2b00      	cmp	r3, #0
 800abfe:	dd13      	ble.n	800ac28 <prv_ntop6_write_short+0x44>
    {
        if( pxSet->uxTargetIndex >= ( uxSize - 1U ) )
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	691a      	ldr	r2, [r3, #16]
 800ac04:	68bb      	ldr	r3, [r7, #8]
 800ac06:	3b01      	subs	r3, #1
 800ac08:	429a      	cmp	r2, r3
 800ac0a:	d302      	bcc.n	800ac12 <prv_ntop6_write_short+0x2e>
        {
            xReturn = pdFAIL;
 800ac0c:	2300      	movs	r3, #0
 800ac0e:	61fb      	str	r3, [r7, #28]
 800ac10:	e00a      	b.n	800ac28 <prv_ntop6_write_short+0x44>
        }
        else
        {
            pcDestination[ pxSet->uxTargetIndex ] = ':';
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	691b      	ldr	r3, [r3, #16]
 800ac16:	68fa      	ldr	r2, [r7, #12]
 800ac18:	4413      	add	r3, r2
 800ac1a:	223a      	movs	r2, #58	@ 0x3a
 800ac1c:	701a      	strb	r2, [r3, #0]
            pxSet->uxTargetIndex++;
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	691b      	ldr	r3, [r3, #16]
 800ac22:	1c5a      	adds	r2, r3, #1
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	611a      	str	r2, [r3, #16]
        }
    }

    if( xReturn == pdPASS )
 800ac28:	69fb      	ldr	r3, [r7, #28]
 800ac2a:	2b01      	cmp	r3, #1
 800ac2c:	d130      	bne.n	800ac90 <prv_ntop6_write_short+0xac>
    {
        /* If there is enough space to write a short. */
        if( pxSet->uxTargetIndex <= ( uxSize - uxBytesPerShortValue ) )
 800ac2e:	687b      	ldr	r3, [r7, #4]
 800ac30:	691a      	ldr	r2, [r3, #16]
 800ac32:	68b9      	ldr	r1, [r7, #8]
 800ac34:	69bb      	ldr	r3, [r7, #24]
 800ac36:	1acb      	subs	r3, r1, r3
 800ac38:	429a      	cmp	r2, r3
 800ac3a:	d827      	bhi.n	800ac8c <prv_ntop6_write_short+0xa8>
        {
            /* Write hex value of short. at most 4 + 1 bytes. */
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800ac3c:	687b      	ldr	r3, [r7, #4]
 800ac3e:	691b      	ldr	r3, [r3, #16]
 800ac40:	68fa      	ldr	r2, [r7, #12]
 800ac42:	18d0      	adds	r0, r2, r3
 800ac44:	69bb      	ldr	r3, [r7, #24]
 800ac46:	1c5c      	adds	r4, r3, #1
                                        uxBytesPerShortValue + 1U,
                                        FreeRTOS_ntohs( pxSet->pusAddress[ pxSet->xIndex ] ) );
 800ac48:	687b      	ldr	r3, [r7, #4]
 800ac4a:	681a      	ldr	r2, [r3, #0]
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	68db      	ldr	r3, [r3, #12]
 800ac50:	005b      	lsls	r3, r3, #1
 800ac52:	4413      	add	r3, r2
 800ac54:	881b      	ldrh	r3, [r3, #0]
 800ac56:	021b      	lsls	r3, r3, #8
 800ac58:	b21a      	sxth	r2, r3
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	6819      	ldr	r1, [r3, #0]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	68db      	ldr	r3, [r3, #12]
 800ac62:	005b      	lsls	r3, r3, #1
 800ac64:	440b      	add	r3, r1
 800ac66:	881b      	ldrh	r3, [r3, #0]
 800ac68:	0a1b      	lsrs	r3, r3, #8
 800ac6a:	b29b      	uxth	r3, r3
 800ac6c:	b21b      	sxth	r3, r3
 800ac6e:	4313      	orrs	r3, r2
 800ac70:	b21b      	sxth	r3, r3
            uxLength = uxHexPrintShort( &( pcDestination[ pxSet->uxTargetIndex ] ),
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	461a      	mov	r2, r3
 800ac76:	4621      	mov	r1, r4
 800ac78:	f7ff fee6 	bl	800aa48 <uxHexPrintShort>
 800ac7c:	6178      	str	r0, [r7, #20]

            /* uxLength will be non zero and positive always. */
            pxSet->uxTargetIndex += uxLength;
 800ac7e:	687b      	ldr	r3, [r7, #4]
 800ac80:	691a      	ldr	r2, [r3, #16]
 800ac82:	697b      	ldr	r3, [r7, #20]
 800ac84:	441a      	add	r2, r3
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	611a      	str	r2, [r3, #16]
 800ac8a:	e001      	b.n	800ac90 <prv_ntop6_write_short+0xac>
        }
        else
        {
            xReturn = pdFAIL;
 800ac8c:	2300      	movs	r3, #0
 800ac8e:	61fb      	str	r3, [r7, #28]
        }
    }

    return xReturn;
 800ac90:	69fb      	ldr	r3, [r7, #28]
}
 800ac92:	4618      	mov	r0, r3
 800ac94:	3724      	adds	r7, #36	@ 0x24
 800ac96:	46bd      	mov	sp, r7
 800ac98:	bd90      	pop	{r4, r7, pc}

0800ac9a <FreeRTOS_inet_ntop6>:
 * @return pdPASS if the translation was successful or else pdFAIL.
 */
const char * FreeRTOS_inet_ntop6( const void * pvSource,
                                  char * pcDestination,
                                  socklen_t uxSize )
{
 800ac9a:	b580      	push	{r7, lr}
 800ac9c:	b08a      	sub	sp, #40	@ 0x28
 800ac9e:	af00      	add	r7, sp, #0
 800aca0:	60f8      	str	r0, [r7, #12]
 800aca2:	60b9      	str	r1, [r7, #8]
 800aca4:	607a      	str	r2, [r7, #4]
    const char * pcReturn;  /* The return value, which is either 'pcDestination' or NULL. */
    struct sNTOP6_Set xSet; /* A set of values for easy exchange with the helper functions prv_ntop6_xxx(). */

    ( void ) memset( &( xSet ), 0, sizeof( xSet ) );
 800aca6:	f107 0310 	add.w	r3, r7, #16
 800acaa:	2214      	movs	r2, #20
 800acac:	2100      	movs	r1, #0
 800acae:	4618      	mov	r0, r3
 800acb0:	f016 fb0f 	bl	80212d2 <memset>

    xSet.pusAddress = pvSource;
 800acb4:	68fb      	ldr	r3, [r7, #12]
 800acb6:	613b      	str	r3, [r7, #16]

    if( uxSize < 3U )
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	2b02      	cmp	r3, #2
 800acbc:	d92c      	bls.n	800ad18 <FreeRTOS_inet_ntop6+0x7e>
    {
        /* Can not even print :: */
    }
    else
    {
        prv_ntop6_search_zeros( &( xSet ) );
 800acbe:	f107 0310 	add.w	r3, r7, #16
 800acc2:	4618      	mov	r0, r3
 800acc4:	f7ff ff04 	bl	800aad0 <prv_ntop6_search_zeros>

        while( xSet.xIndex < 8 )
 800acc8:	e01f      	b.n	800ad0a <FreeRTOS_inet_ntop6+0x70>
        {
            if( xSet.xIndex == xSet.xZeroStart )
 800acca:	69fa      	ldr	r2, [r7, #28]
 800accc:	697b      	ldr	r3, [r7, #20]
 800acce:	429a      	cmp	r2, r3
 800acd0:	d10e      	bne.n	800acf0 <FreeRTOS_inet_ntop6+0x56>
            {
                if( prv_ntop6_write_zeros( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800acd2:	f107 0310 	add.w	r3, r7, #16
 800acd6:	461a      	mov	r2, r3
 800acd8:	6879      	ldr	r1, [r7, #4]
 800acda:	68b8      	ldr	r0, [r7, #8]
 800acdc:	f7ff ff41 	bl	800ab62 <prv_ntop6_write_zeros>
 800ace0:	4603      	mov	r3, r0
 800ace2:	2b00      	cmp	r3, #0
 800ace4:	d015      	beq.n	800ad12 <FreeRTOS_inet_ntop6+0x78>
                {
                    break;
                }

                xSet.xIndex += xSet.xZeroLength;
 800ace6:	69fa      	ldr	r2, [r7, #28]
 800ace8:	69bb      	ldr	r3, [r7, #24]
 800acea:	4413      	add	r3, r2
 800acec:	61fb      	str	r3, [r7, #28]
 800acee:	e00c      	b.n	800ad0a <FreeRTOS_inet_ntop6+0x70>
            }
            else
            {
                if( prv_ntop6_write_short( pcDestination, uxSize, &( xSet ) ) == pdFAIL )
 800acf0:	f107 0310 	add.w	r3, r7, #16
 800acf4:	461a      	mov	r2, r3
 800acf6:	6879      	ldr	r1, [r7, #4]
 800acf8:	68b8      	ldr	r0, [r7, #8]
 800acfa:	f7ff ff73 	bl	800abe4 <prv_ntop6_write_short>
 800acfe:	4603      	mov	r3, r0
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d008      	beq.n	800ad16 <FreeRTOS_inet_ntop6+0x7c>
                {
                    break;
                }

                xSet.xIndex++;
 800ad04:	69fb      	ldr	r3, [r7, #28]
 800ad06:	3301      	adds	r3, #1
 800ad08:	61fb      	str	r3, [r7, #28]
        while( xSet.xIndex < 8 )
 800ad0a:	69fb      	ldr	r3, [r7, #28]
 800ad0c:	2b07      	cmp	r3, #7
 800ad0e:	dddc      	ble.n	800acca <FreeRTOS_inet_ntop6+0x30>
 800ad10:	e002      	b.n	800ad18 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800ad12:	bf00      	nop
 800ad14:	e000      	b.n	800ad18 <FreeRTOS_inet_ntop6+0x7e>
                    break;
 800ad16:	bf00      	nop
            }
        }
    }

    if( xSet.xIndex < 8 )
 800ad18:	69fb      	ldr	r3, [r7, #28]
 800ad1a:	2b07      	cmp	r3, #7
 800ad1c:	dc02      	bgt.n	800ad24 <FreeRTOS_inet_ntop6+0x8a>
    {
        /* Didn't reach the last nibble: clear the string. */
        pcReturn = NULL;
 800ad1e:	2300      	movs	r3, #0
 800ad20:	627b      	str	r3, [r7, #36]	@ 0x24
 800ad22:	e006      	b.n	800ad32 <FreeRTOS_inet_ntop6+0x98>
    }
    else
    {
        pcDestination[ xSet.uxTargetIndex ] = '\0';
 800ad24:	6a3b      	ldr	r3, [r7, #32]
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	4413      	add	r3, r2
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	701a      	strb	r2, [r3, #0]
        pcReturn = pcDestination;
 800ad2e:	68bb      	ldr	r3, [r7, #8]
 800ad30:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    return pcReturn;
 800ad32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ad34:	4618      	mov	r0, r3
 800ad36:	3728      	adds	r7, #40	@ 0x28
 800ad38:	46bd      	mov	sp, r7
 800ad3a:	bd80      	pop	{r7, pc}

0800ad3c <vSetMultiCastIPv6MacAddress>:
 * @param[in] pxAddress IPv6 address.
 * @param[out] pxMACAddress Pointer to MAC address.
 */
void vSetMultiCastIPv6MacAddress( const IPv6_Address_t * pxAddress,
                                  MACAddress_t * pxMACAddress )
{
 800ad3c:	b480      	push	{r7}
 800ad3e:	b083      	sub	sp, #12
 800ad40:	af00      	add	r7, sp, #0
 800ad42:	6078      	str	r0, [r7, #4]
 800ad44:	6039      	str	r1, [r7, #0]
    pxMACAddress->ucBytes[ 0 ] = 0x33U;
 800ad46:	683b      	ldr	r3, [r7, #0]
 800ad48:	2233      	movs	r2, #51	@ 0x33
 800ad4a:	701a      	strb	r2, [r3, #0]
    pxMACAddress->ucBytes[ 1 ] = 0x33U;
 800ad4c:	683b      	ldr	r3, [r7, #0]
 800ad4e:	2233      	movs	r2, #51	@ 0x33
 800ad50:	705a      	strb	r2, [r3, #1]
    pxMACAddress->ucBytes[ 2 ] = pxAddress->ucBytes[ 12 ];
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	7b1a      	ldrb	r2, [r3, #12]
 800ad56:	683b      	ldr	r3, [r7, #0]
 800ad58:	709a      	strb	r2, [r3, #2]
    pxMACAddress->ucBytes[ 3 ] = pxAddress->ucBytes[ 13 ];
 800ad5a:	687b      	ldr	r3, [r7, #4]
 800ad5c:	7b5a      	ldrb	r2, [r3, #13]
 800ad5e:	683b      	ldr	r3, [r7, #0]
 800ad60:	70da      	strb	r2, [r3, #3]
    pxMACAddress->ucBytes[ 4 ] = pxAddress->ucBytes[ 14 ];
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	7b9a      	ldrb	r2, [r3, #14]
 800ad66:	683b      	ldr	r3, [r7, #0]
 800ad68:	711a      	strb	r2, [r3, #4]
    pxMACAddress->ucBytes[ 5 ] = pxAddress->ucBytes[ 15 ];
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	7bda      	ldrb	r2, [r3, #15]
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	715a      	strb	r2, [r3, #5]
}
 800ad72:	bf00      	nop
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
	...

0800ad80 <usGetExtensionHeaderLength>:
 * @return The total length of all extension headers, or whole buffer length when error detected.
 */
size_t usGetExtensionHeaderLength( const uint8_t * pucEthernetBuffer,
                                   size_t uxBufferLength,
                                   uint8_t * pucProtocol )
{
 800ad80:	b580      	push	{r7, lr}
 800ad82:	b08e      	sub	sp, #56	@ 0x38
 800ad84:	af02      	add	r7, sp, #8
 800ad86:	60f8      	str	r0, [r7, #12]
 800ad88:	60b9      	str	r1, [r7, #8]
 800ad8a:	607a      	str	r2, [r7, #4]
    uint8_t ucCurrentHeader;
    const IPPacket_IPv6_t * pxIPPacket_IPv6;
    uint8_t ucNextHeader = 0U;
 800ad8c:	2300      	movs	r3, #0
 800ad8e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    size_t uxIndex = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER;
 800ad92:	2336      	movs	r3, #54	@ 0x36
 800ad94:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxHopSize = 0U;
 800ad96:	2300      	movs	r3, #0
 800ad98:	61fb      	str	r3, [r7, #28]
    BaseType_t xCurrentOrder = 0;
 800ad9a:	2300      	movs	r3, #0
 800ad9c:	61bb      	str	r3, [r7, #24]
    BaseType_t xNextOrder = 0;
 800ad9e:	2300      	movs	r3, #0
 800ada0:	617b      	str	r3, [r7, #20]
    size_t uxReturn = uxBufferLength;
 800ada2:	68bb      	ldr	r3, [r7, #8]
 800ada4:	627b      	str	r3, [r7, #36]	@ 0x24

    if( ( pucEthernetBuffer != NULL ) && ( pucProtocol != NULL ) )
 800ada6:	68fb      	ldr	r3, [r7, #12]
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	f000 808c 	beq.w	800aec6 <usGetExtensionHeaderLength+0x146>
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	f000 8088 	beq.w	800aec6 <usGetExtensionHeaderLength+0x146>
    {
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800adb6:	68fb      	ldr	r3, [r7, #12]
 800adb8:	613b      	str	r3, [r7, #16]
        ucCurrentHeader = pxIPPacket_IPv6->xIPHeader.ucNextHeader;
 800adba:	693b      	ldr	r3, [r7, #16]
 800adbc:	7d1b      	ldrb	r3, [r3, #20]
 800adbe:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

        /* Check if packet has extension header. */
        if( xGetExtensionOrder( ucCurrentHeader, 0U ) > 0 )
 800adc2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800adc6:	2100      	movs	r1, #0
 800adc8:	4618      	mov	r0, r3
 800adca:	f7ff fcaf 	bl	800a72c <xGetExtensionOrder>
 800adce:	4603      	mov	r3, r0
 800add0:	2b00      	cmp	r3, #0
 800add2:	dd72      	ble.n	800aeba <usGetExtensionHeaderLength+0x13a>
        {
            while( ( uxIndex + 8U ) < uxBufferLength )
 800add4:	e06b      	b.n	800aeae <usGetExtensionHeaderLength+0x12e>
            {
                ucNextHeader = pucEthernetBuffer[ uxIndex ];
 800add6:	68fa      	ldr	r2, [r7, #12]
 800add8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adda:	4413      	add	r3, r2
 800addc:	781b      	ldrb	r3, [r3, #0]
 800adde:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

                xCurrentOrder = xGetExtensionOrder( ucCurrentHeader, ucNextHeader );
 800ade2:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800ade6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800adea:	4611      	mov	r1, r2
 800adec:	4618      	mov	r0, r3
 800adee:	f7ff fc9d 	bl	800a72c <xGetExtensionOrder>
 800adf2:	61b8      	str	r0, [r7, #24]

                /* To avoid compile warning if debug print is disabled. */
                ( void ) xCurrentOrder;

                /* Read the length expressed in number of octets. */
                uxHopSize = ( size_t ) pucEthernetBuffer[ uxIndex + 1U ];
 800adf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800adf6:	3301      	adds	r3, #1
 800adf8:	68fa      	ldr	r2, [r7, #12]
 800adfa:	4413      	add	r3, r2
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	61fb      	str	r3, [r7, #28]
                /* And multiply by 8 and add the minimum size of 8. */
                uxHopSize = ( uxHopSize * 8U ) + 8U;
 800ae00:	69fb      	ldr	r3, [r7, #28]
 800ae02:	3301      	adds	r3, #1
 800ae04:	00db      	lsls	r3, r3, #3
 800ae06:	61fb      	str	r3, [r7, #28]

                if( ( uxIndex + uxHopSize ) >= uxBufferLength )
 800ae08:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae0a:	69fb      	ldr	r3, [r7, #28]
 800ae0c:	4413      	add	r3, r2
 800ae0e:	68ba      	ldr	r2, [r7, #8]
 800ae10:	429a      	cmp	r2, r3
 800ae12:	d806      	bhi.n	800ae22 <usGetExtensionHeaderLength+0xa2>
                {
                    FreeRTOS_debug_printf( ( "The length %u + %u of extension header is larger than buffer size %u \n", ( unsigned ) uxIndex, ( unsigned ) uxHopSize, ( unsigned ) uxBufferLength ) );
 800ae14:	68bb      	ldr	r3, [r7, #8]
 800ae16:	69fa      	ldr	r2, [r7, #28]
 800ae18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800ae1a:	482d      	ldr	r0, [pc, #180]	@ (800aed0 <usGetExtensionHeaderLength+0x150>)
 800ae1c:	f015 ff30 	bl	8020c80 <lUDPLoggingPrintf>
                    break;
 800ae20:	e051      	b.n	800aec6 <usGetExtensionHeaderLength+0x146>
                }

                uxIndex = uxIndex + uxHopSize;
 800ae22:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	4413      	add	r3, r2
 800ae28:	62bb      	str	r3, [r7, #40]	@ 0x28

                if( ( ucNextHeader == ipPROTOCOL_TCP ) ||
 800ae2a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae2e:	2b06      	cmp	r3, #6
 800ae30:	d007      	beq.n	800ae42 <usGetExtensionHeaderLength+0xc2>
 800ae32:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae36:	2b11      	cmp	r3, #17
 800ae38:	d003      	beq.n	800ae42 <usGetExtensionHeaderLength+0xc2>
                    ( ucNextHeader == ipPROTOCOL_UDP ) ||
 800ae3a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae3e:	2b3a      	cmp	r3, #58	@ 0x3a
 800ae40:	d10d      	bne.n	800ae5e <usGetExtensionHeaderLength+0xde>
                    ( ucNextHeader == ipPROTOCOL_ICMP_IPv6 ) )
                {
                    FreeRTOS_debug_printf( ( "Stop at header %u\n", ucNextHeader ) );
 800ae42:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae46:	4619      	mov	r1, r3
 800ae48:	4822      	ldr	r0, [pc, #136]	@ (800aed4 <usGetExtensionHeaderLength+0x154>)
 800ae4a:	f015 ff19 	bl	8020c80 <lUDPLoggingPrintf>

                    uxReturn = uxIndex - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER );
 800ae4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae50:	3b36      	subs	r3, #54	@ 0x36
 800ae52:	627b      	str	r3, [r7, #36]	@ 0x24
                    *pucProtocol = ucNextHeader;
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800ae5a:	701a      	strb	r2, [r3, #0]
                    break;
 800ae5c:	e033      	b.n	800aec6 <usGetExtensionHeaderLength+0x146>
                }

                xNextOrder = xGetExtensionOrder( ucNextHeader, pucEthernetBuffer[ uxIndex ] );
 800ae5e:	68fa      	ldr	r2, [r7, #12]
 800ae60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae62:	4413      	add	r3, r2
 800ae64:	781a      	ldrb	r2, [r3, #0]
 800ae66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ae6a:	4611      	mov	r1, r2
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	f7ff fc5d 	bl	800a72c <xGetExtensionOrder>
 800ae72:	6178      	str	r0, [r7, #20]

                FreeRTOS_debug_printf( ( "Going from header %2u (%d) to %2u (%d)\n",
 800ae74:	f897 102f 	ldrb.w	r1, [r7, #47]	@ 0x2f
 800ae78:	f897 2023 	ldrb.w	r2, [r7, #35]	@ 0x23
 800ae7c:	697b      	ldr	r3, [r7, #20]
 800ae7e:	9300      	str	r3, [sp, #0]
 800ae80:	4613      	mov	r3, r2
 800ae82:	69ba      	ldr	r2, [r7, #24]
 800ae84:	4814      	ldr	r0, [pc, #80]	@ (800aed8 <usGetExtensionHeaderLength+0x158>)
 800ae86:	f015 fefb 	bl	8020c80 <lUDPLoggingPrintf>
                 * any order and occurring any number of times in the same packet,
                 * except for the Hop-by-Hop Options header which is restricted to
                 * appear immediately after an IPv6 header only. Outlined
                 * by RFC 2460 section 4.1  Extension Header Order.
                 */
                if( xNextOrder == 1 ) /* ipIPv6_EXT_HEADER_HOP_BY_HOP */
 800ae8a:	697b      	ldr	r3, [r7, #20]
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d103      	bne.n	800ae98 <usGetExtensionHeaderLength+0x118>
                {
                    FreeRTOS_printf( ( "Wrong order. Hop-by-Hop Options header restricted to appear immediately after an IPv6 header\n" ) );
 800ae90:	4812      	ldr	r0, [pc, #72]	@ (800aedc <usGetExtensionHeaderLength+0x15c>)
 800ae92:	f015 fef5 	bl	8020c80 <lUDPLoggingPrintf>
                    break;
 800ae96:	e016      	b.n	800aec6 <usGetExtensionHeaderLength+0x146>
                }
                else if( xNextOrder < 0 )
 800ae98:	697b      	ldr	r3, [r7, #20]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	da03      	bge.n	800aea6 <usGetExtensionHeaderLength+0x126>
                {
                    FreeRTOS_printf( ( "Invalid extension header detected\n" ) );
 800ae9e:	4810      	ldr	r0, [pc, #64]	@ (800aee0 <usGetExtensionHeaderLength+0x160>)
 800aea0:	f015 feee 	bl	8020c80 <lUDPLoggingPrintf>
                    break;
 800aea4:	e00f      	b.n	800aec6 <usGetExtensionHeaderLength+0x146>
                else
                {
                    /* Do nothing, coverity happy. */
                }

                ucCurrentHeader = ucNextHeader;
 800aea6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800aeaa:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
            while( ( uxIndex + 8U ) < uxBufferLength )
 800aeae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aeb0:	3308      	adds	r3, #8
 800aeb2:	68ba      	ldr	r2, [r7, #8]
 800aeb4:	429a      	cmp	r2, r3
 800aeb6:	d88e      	bhi.n	800add6 <usGetExtensionHeaderLength+0x56>
 800aeb8:	e005      	b.n	800aec6 <usGetExtensionHeaderLength+0x146>
            }
        }
        else
        {
            /* No extension headers. */
            *pucProtocol = ucCurrentHeader;
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800aec0:	701a      	strb	r2, [r3, #0]
            uxReturn = 0;
 800aec2:	2300      	movs	r3, #0
 800aec4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    return uxReturn;
 800aec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800aec8:	4618      	mov	r0, r3
 800aeca:	3730      	adds	r7, #48	@ 0x30
 800aecc:	46bd      	mov	sp, r7
 800aece:	bd80      	pop	{r7, pc}
 800aed0:	08023bbc 	.word	0x08023bbc
 800aed4:	08023c04 	.word	0x08023c04
 800aed8:	08023c18 	.word	0x08023c18
 800aedc:	08023c40 	.word	0x08023c40
 800aee0:	08023ca0 	.word	0x08023ca0

0800aee4 <vManageSolicitedNodeAddress>:
 * @param[in] pxEndPoint The end-point for which a network up/down event is being handled.
 * @param[in] xNetworkGoingUp pdTRUE when the network goes UP, pdFALSE when the network goes DOWN.
 */
void vManageSolicitedNodeAddress( const struct xNetworkEndPoint * pxEndPoint,
                                  BaseType_t xNetworkGoingUp )
{
 800aee4:	b580      	push	{r7, lr}
 800aee6:	b084      	sub	sp, #16
 800aee8:	af00      	add	r7, sp, #0
 800aeea:	6078      	str	r0, [r7, #4]
 800aeec:	6039      	str	r1, [r7, #0]
    IPv6_Type_t xAddressType;
    MACAddress_t xMACAddress;

    configASSERT( pxEndPoint != NULL );
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	2b00      	cmp	r3, #0
 800aef2:	d104      	bne.n	800aefe <vManageSolicitedNodeAddress+0x1a>
 800aef4:	f44f 7199 	mov.w	r1, #306	@ 0x132
 800aef8:	482d      	ldr	r0, [pc, #180]	@ (800afb0 <vManageSolicitedNodeAddress+0xcc>)
 800aefa:	f7f6 fab9 	bl	8001470 <vAssertCalled>
    configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800af04:	2b00      	cmp	r3, #0
 800af06:	d104      	bne.n	800af12 <vManageSolicitedNodeAddress+0x2e>
 800af08:	f240 1133 	movw	r1, #307	@ 0x133
 800af0c:	4828      	ldr	r0, [pc, #160]	@ (800afb0 <vManageSolicitedNodeAddress+0xcc>)
 800af0e:	f7f6 faaf 	bl	8001470 <vAssertCalled>
         * therefore the calculated MAC address will be incorrect. Nothing bad will happen though, because the address
         * type check below will kick us out before the call to pfRemoveAllowedMAC(). Without the check below, the network
         * driver ends up being called once to register 33:33:FF:00:00:00 and that MAC never gets unregistered. */

        /* Solicited-node multicast addresses only apply to normal unicast non-loopback addresses. */
        xAddressType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	3338      	adds	r3, #56	@ 0x38
 800af16:	4618      	mov	r0, r3
 800af18:	f002 f9c2 	bl	800d2a0 <xIPv6_GetIPType>
 800af1c:	4603      	mov	r3, r0
 800af1e:	73fb      	strb	r3, [r7, #15]

        if( ( xAddressType != eIPv6_LinkLocal ) && ( xAddressType != eIPv6_SiteLocal ) && ( xAddressType != eIPv6_Global ) )
 800af20:	7bfb      	ldrb	r3, [r7, #15]
 800af22:	2b01      	cmp	r3, #1
 800af24:	d005      	beq.n	800af32 <vManageSolicitedNodeAddress+0x4e>
 800af26:	7bfb      	ldrb	r3, [r7, #15]
 800af28:	2b02      	cmp	r3, #2
 800af2a:	d002      	beq.n	800af32 <vManageSolicitedNodeAddress+0x4e>
 800af2c:	7bfb      	ldrb	r3, [r7, #15]
 800af2e:	2b00      	cmp	r3, #0
 800af30:	d138      	bne.n	800afa4 <vManageSolicitedNodeAddress+0xc0>
             * solicited-node multicast address that we need to manage. Do nothing.*/
            break;
        }

        /* Calculate the multicast MAC that corresponds to this endpoint's IPv6 address. */
        xMACAddress.ucBytes[ 0 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800af32:	2333      	movs	r3, #51	@ 0x33
 800af34:	723b      	strb	r3, [r7, #8]
        xMACAddress.ucBytes[ 1 ] = ipMULTICAST_MAC_ADDRESS_IPv6_0;
 800af36:	2333      	movs	r3, #51	@ 0x33
 800af38:	727b      	strb	r3, [r7, #9]
        xMACAddress.ucBytes[ 2 ] = 0xFFU;
 800af3a:	23ff      	movs	r3, #255	@ 0xff
 800af3c:	72bb      	strb	r3, [r7, #10]
        xMACAddress.ucBytes[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 800af3e:	687b      	ldr	r3, [r7, #4]
 800af40:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800af44:	72fb      	strb	r3, [r7, #11]
        xMACAddress.ucBytes[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 800af4c:	733b      	strb	r3, [r7, #12]
        xMACAddress.ucBytes[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 800af4e:	687b      	ldr	r3, [r7, #4]
 800af50:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 800af54:	737b      	strb	r3, [r7, #13]

        /* Update the network driver filter */
        if( xNetworkGoingUp == pdTRUE )
 800af56:	683b      	ldr	r3, [r7, #0]
 800af58:	2b01      	cmp	r3, #1
 800af5a:	d111      	bne.n	800af80 <vManageSolicitedNodeAddress+0x9c>
        {
            if( pxEndPoint->pxNetworkInterface->pfAddAllowedMAC != NULL )
 800af5c:	687b      	ldr	r3, [r7, #4]
 800af5e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800af62:	695b      	ldr	r3, [r3, #20]
 800af64:	2b00      	cmp	r3, #0
 800af66:	d01e      	beq.n	800afa6 <vManageSolicitedNodeAddress+0xc2>
            {
                pxEndPoint->pxNetworkInterface->pfAddAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800af6e:	695b      	ldr	r3, [r3, #20]
 800af70:	687a      	ldr	r2, [r7, #4]
 800af72:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800af76:	f107 0108 	add.w	r1, r7, #8
 800af7a:	4610      	mov	r0, r2
 800af7c:	4798      	blx	r3
            {
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
            }
        }
    } while( pdFALSE );
}
 800af7e:	e012      	b.n	800afa6 <vManageSolicitedNodeAddress+0xc2>
            if( pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC != NULL )
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800af86:	699b      	ldr	r3, [r3, #24]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d00c      	beq.n	800afa6 <vManageSolicitedNodeAddress+0xc2>
                pxEndPoint->pxNetworkInterface->pfRemoveAllowedMAC( pxEndPoint->pxNetworkInterface, xMACAddress.ucBytes );
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800af92:	699b      	ldr	r3, [r3, #24]
 800af94:	687a      	ldr	r2, [r7, #4]
 800af96:	f8d2 2120 	ldr.w	r2, [r2, #288]	@ 0x120
 800af9a:	f107 0108 	add.w	r1, r7, #8
 800af9e:	4610      	mov	r0, r2
 800afa0:	4798      	blx	r3
}
 800afa2:	e000      	b.n	800afa6 <vManageSolicitedNodeAddress+0xc2>
            break;
 800afa4:	bf00      	nop
}
 800afa6:	bf00      	nop
 800afa8:	3710      	adds	r7, #16
 800afaa:	46bd      	mov	sp, r7
 800afac:	bd80      	pop	{r7, pc}
 800afae:	bf00      	nop
 800afb0:	08023cc4 	.word	0x08023cc4

0800afb4 <pxFindLocalEndpoint>:
 * @brief Find the first end-point of type IPv6.
 *
 * @return The first IPv6 end-point found.
 */
    static NetworkEndPoint_t * pxFindLocalEndpoint( void )
    {
 800afb4:	b580      	push	{r7, lr}
 800afb6:	b082      	sub	sp, #8
 800afb8:	af00      	add	r7, sp, #0
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800afba:	2000      	movs	r0, #0
 800afbc:	f001 fd8c 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 800afc0:	6078      	str	r0, [r7, #4]
 800afc2:	e016      	b.n	800aff2 <pxFindLocalEndpoint+0x3e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
        {
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800afc4:	687b      	ldr	r3, [r7, #4]
 800afc6:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800afca:	f003 0304 	and.w	r3, r3, #4
 800afce:	b2db      	uxtb	r3, r3
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	d009      	beq.n	800afe8 <pxFindLocalEndpoint+0x34>
            {
                IPv6_Type_t eType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800afd4:	687b      	ldr	r3, [r7, #4]
 800afd6:	3338      	adds	r3, #56	@ 0x38
 800afd8:	4618      	mov	r0, r3
 800afda:	f002 f961 	bl	800d2a0 <xIPv6_GetIPType>
 800afde:	4603      	mov	r3, r0
 800afe0:	70fb      	strb	r3, [r7, #3]

                if( eType == eIPv6_LinkLocal )
 800afe2:	78fb      	ldrb	r3, [r7, #3]
 800afe4:	2b01      	cmp	r3, #1
 800afe6:	d008      	beq.n	800affa <pxFindLocalEndpoint+0x46>
             pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800afe8:	6879      	ldr	r1, [r7, #4]
 800afea:	2000      	movs	r0, #0
 800afec:	f001 fd96 	bl	800cb1c <FreeRTOS_NextEndPoint>
 800aff0:	6078      	str	r0, [r7, #4]
             pxEndPoint != NULL;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	2b00      	cmp	r3, #0
 800aff6:	d1e5      	bne.n	800afc4 <pxFindLocalEndpoint+0x10>
 800aff8:	e000      	b.n	800affc <pxFindLocalEndpoint+0x48>
                {
                    break;
 800affa:	bf00      	nop
                }
            }
        }

        return pxEndPoint;
 800affc:	687b      	ldr	r3, [r7, #4]
    }
 800affe:	4618      	mov	r0, r3
 800b000:	3708      	adds	r7, #8
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}

0800b006 <prvMACResolve>:
 * @return An enum, either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvMACResolve( const IPv6_Address_t * pxAddressToLookup,
                                             MACAddress_t * const pxMACAddress,
                                             NetworkEndPoint_t ** ppxEndPoint )
    {
 800b006:	b580      	push	{r7, lr}
 800b008:	b086      	sub	sp, #24
 800b00a:	af00      	add	r7, sp, #0
 800b00c:	60f8      	str	r0, [r7, #12]
 800b00e:	60b9      	str	r1, [r7, #8]
 800b010:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;

        /* Mostly used multi-cast address is ff02::. */
        if( xIsIPv6AllowedMulticast( pxAddressToLookup ) != pdFALSE )
 800b012:	68f8      	ldr	r0, [r7, #12]
 800b014:	f7ff faa8 	bl	800a568 <xIsIPv6AllowedMulticast>
 800b018:	4603      	mov	r3, r0
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d00e      	beq.n	800b03c <prvMACResolve+0x36>
        {
            vSetMultiCastIPv6MacAddress( pxAddressToLookup, pxMACAddress );
 800b01e:	68b9      	ldr	r1, [r7, #8]
 800b020:	68f8      	ldr	r0, [r7, #12]
 800b022:	f7ff fe8b 	bl	800ad3c <vSetMultiCastIPv6MacAddress>

            if( ppxEndPoint != NULL )
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	2b00      	cmp	r3, #0
 800b02a:	d004      	beq.n	800b036 <prvMACResolve+0x30>
            {
                *ppxEndPoint = pxFindLocalEndpoint();
 800b02c:	f7ff ffc2 	bl	800afb4 <pxFindLocalEndpoint>
 800b030:	4602      	mov	r2, r0
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	601a      	str	r2, [r3, #0]
            }

            eReturn = eARPCacheHit;
 800b036:	2301      	movs	r3, #1
 800b038:	75fb      	strb	r3, [r7, #23]
 800b03a:	e001      	b.n	800b040 <prvMACResolve+0x3a>
        }
        else
        {
            /* Not a multicast IP address. */
            eReturn = eARPCacheMiss;
 800b03c:	2300      	movs	r3, #0
 800b03e:	75fb      	strb	r3, [r7, #23]
        }

        return eReturn;
 800b040:	7dfb      	ldrb	r3, [r7, #23]
    }
 800b042:	4618      	mov	r0, r3
 800b044:	3718      	adds	r7, #24
 800b046:	46bd      	mov	sp, r7
 800b048:	bd80      	pop	{r7, pc}
	...

0800b04c <eNDGetCacheEntry>:
 * @return An enum which says whether the address was found: eARPCacheHit or eARPCacheMiss.
 */
    eARPLookupResult_t eNDGetCacheEntry( IPv6_Address_t * pxIPAddress,
                                         MACAddress_t * const pxMACAddress,
                                         struct xNetworkEndPoint ** ppxEndPoint )
    {
 800b04c:	b580      	push	{r7, lr}
 800b04e:	b088      	sub	sp, #32
 800b050:	af00      	add	r7, sp, #0
 800b052:	60f8      	str	r0, [r7, #12]
 800b054:	60b9      	str	r1, [r7, #8]
 800b056:	607a      	str	r2, [r7, #4]
        eARPLookupResult_t eReturn;
        NetworkEndPoint_t * pxEndPoint;

        /* Multi-cast addresses can be resolved immediately. */
        eReturn = prvMACResolve( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b058:	687a      	ldr	r2, [r7, #4]
 800b05a:	68b9      	ldr	r1, [r7, #8]
 800b05c:	68f8      	ldr	r0, [r7, #12]
 800b05e:	f7ff ffd2 	bl	800b006 <prvMACResolve>
 800b062:	4603      	mov	r3, r0
 800b064:	77fb      	strb	r3, [r7, #31]

        if( eReturn == eARPCacheMiss )
 800b066:	7ffb      	ldrb	r3, [r7, #31]
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d106      	bne.n	800b07a <eNDGetCacheEntry+0x2e>
        {
            /* See if the IP-address has an entry in the cache. */
            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b06c:	687a      	ldr	r2, [r7, #4]
 800b06e:	68b9      	ldr	r1, [r7, #8]
 800b070:	68f8      	ldr	r0, [r7, #12]
 800b072:	f000 f9a9 	bl	800b3c8 <prvNDCacheLookup>
 800b076:	4603      	mov	r3, r0
 800b078:	77fb      	strb	r3, [r7, #31]
        }

        if( eReturn == eARPCacheMiss )
 800b07a:	7ffb      	ldrb	r3, [r7, #31]
 800b07c:	2b00      	cmp	r3, #0
 800b07e:	d104      	bne.n	800b08a <eNDGetCacheEntry+0x3e>
        {
            FreeRTOS_printf( ( "eNDGetCacheEntry: lookup %pip miss\n", ( void * ) pxIPAddress->ucBytes ) );
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	4619      	mov	r1, r3
 800b084:	4840      	ldr	r0, [pc, #256]	@ (800b188 <eNDGetCacheEntry+0x13c>)
 800b086:	f015 fdfb 	bl	8020c80 <lUDPLoggingPrintf>
        }

        if( eReturn == eARPCacheMiss )
 800b08a:	7ffb      	ldrb	r3, [r7, #31]
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d176      	bne.n	800b17e <eNDGetCacheEntry+0x132>
        {
            IPv6_Type_t eIPType = xIPv6_GetIPType( pxIPAddress );
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f002 f905 	bl	800d2a0 <xIPv6_GetIPType>
 800b096:	4603      	mov	r3, r0
 800b098:	75fb      	strb	r3, [r7, #23]

            pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( pxIPAddress );
 800b09a:	68f8      	ldr	r0, [r7, #12]
 800b09c:	f001 fdae 	bl	800cbfc <FreeRTOS_FindEndPointOnIP_IPv6>
 800b0a0:	61b8      	str	r0, [r7, #24]

            if( pxEndPoint != NULL )
 800b0a2:	69bb      	ldr	r3, [r7, #24]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	d00d      	beq.n	800b0c4 <eNDGetCacheEntry+0x78>
            {
                if( ppxEndPoint != NULL )
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d002      	beq.n	800b0b4 <eNDGetCacheEntry+0x68>
                {
                    *( ppxEndPoint ) = pxEndPoint;
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	69ba      	ldr	r2, [r7, #24]
 800b0b2:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_printf( ( "eNDGetCacheEntry: FindEndPointOnIP failed for %pip (endpoint %pip)\n",
 800b0b4:	68f9      	ldr	r1, [r7, #12]
 800b0b6:	69bb      	ldr	r3, [r7, #24]
 800b0b8:	3338      	adds	r3, #56	@ 0x38
 800b0ba:	461a      	mov	r2, r3
 800b0bc:	4833      	ldr	r0, [pc, #204]	@ (800b18c <eNDGetCacheEntry+0x140>)
 800b0be:	f015 fddf 	bl	8020c80 <lUDPLoggingPrintf>
 800b0c2:	e05c      	b.n	800b17e <eNDGetCacheEntry+0x132>
                                   ( void * ) pxIPAddress->ucBytes,
                                   ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
            }
            else
            {
                if( eIPType == eIPv6_LinkLocal )
 800b0c4:	7dfb      	ldrb	r3, [r7, #23]
 800b0c6:	2b01      	cmp	r3, #1
 800b0c8:	d12b      	bne.n	800b122 <eNDGetCacheEntry+0xd6>
                {
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 800b0ca:	2000      	movs	r0, #0
 800b0cc:	f001 fd04 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 800b0d0:	61b8      	str	r0, [r7, #24]
 800b0d2:	e017      	b.n	800b104 <eNDGetCacheEntry+0xb8>
                         pxEndPoint != NULL;
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
                    {
                        IPv6_Type_t eMyType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800b0d4:	69bb      	ldr	r3, [r7, #24]
 800b0d6:	3338      	adds	r3, #56	@ 0x38
 800b0d8:	4618      	mov	r0, r3
 800b0da:	f002 f8e1 	bl	800d2a0 <xIPv6_GetIPType>
 800b0de:	4603      	mov	r3, r0
 800b0e0:	75bb      	strb	r3, [r7, #22]

                        if( eMyType == eIPType )
 800b0e2:	7dba      	ldrb	r2, [r7, #22]
 800b0e4:	7dfb      	ldrb	r3, [r7, #23]
 800b0e6:	429a      	cmp	r2, r3
 800b0e8:	d107      	bne.n	800b0fa <eNDGetCacheEntry+0xae>
                        {
                            eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b0ea:	687a      	ldr	r2, [r7, #4]
 800b0ec:	68b9      	ldr	r1, [r7, #8]
 800b0ee:	68f8      	ldr	r0, [r7, #12]
 800b0f0:	f000 f96a 	bl	800b3c8 <prvNDCacheLookup>
 800b0f4:	4603      	mov	r3, r0
 800b0f6:	77fb      	strb	r3, [r7, #31]
                            break;
 800b0f8:	e007      	b.n	800b10a <eNDGetCacheEntry+0xbe>
                         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 800b0fa:	69b9      	ldr	r1, [r7, #24]
 800b0fc:	2000      	movs	r0, #0
 800b0fe:	f001 fd0d 	bl	800cb1c <FreeRTOS_NextEndPoint>
 800b102:	61b8      	str	r0, [r7, #24]
                         pxEndPoint != NULL;
 800b104:	69bb      	ldr	r3, [r7, #24]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1e4      	bne.n	800b0d4 <eNDGetCacheEntry+0x88>
                        }
                    }

                    FreeRTOS_printf( ( "eNDGetCacheEntry: LinkLocal %pip \"%s\"\n", ( void * ) pxIPAddress->ucBytes,
 800b10a:	68f9      	ldr	r1, [r7, #12]
 800b10c:	7ffb      	ldrb	r3, [r7, #31]
 800b10e:	2b01      	cmp	r3, #1
 800b110:	d101      	bne.n	800b116 <eNDGetCacheEntry+0xca>
 800b112:	4b1f      	ldr	r3, [pc, #124]	@ (800b190 <eNDGetCacheEntry+0x144>)
 800b114:	e000      	b.n	800b118 <eNDGetCacheEntry+0xcc>
 800b116:	4b1f      	ldr	r3, [pc, #124]	@ (800b194 <eNDGetCacheEntry+0x148>)
 800b118:	461a      	mov	r2, r3
 800b11a:	481f      	ldr	r0, [pc, #124]	@ (800b198 <eNDGetCacheEntry+0x14c>)
 800b11c:	f015 fdb0 	bl	8020c80 <lUDPLoggingPrintf>
 800b120:	e02d      	b.n	800b17e <eNDGetCacheEntry+0x132>
                                       ( eReturn == eARPCacheHit ) ? "hit" : "miss" ) );
                }
                else
                {
                    pxEndPoint = FreeRTOS_FindGateWay( ( BaseType_t ) ipTYPE_IPv6 );
 800b122:	2060      	movs	r0, #96	@ 0x60
 800b124:	f002 f87c 	bl	800d220 <FreeRTOS_FindGateWay>
 800b128:	61b8      	str	r0, [r7, #24]

                    if( pxEndPoint != NULL )
 800b12a:	69bb      	ldr	r3, [r7, #24]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d026      	beq.n	800b17e <eNDGetCacheEntry+0x132>
                    {
                        ( void ) memcpy( pxIPAddress->ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b130:	68f8      	ldr	r0, [r7, #12]
 800b132:	69bb      	ldr	r3, [r7, #24]
 800b134:	335c      	adds	r3, #92	@ 0x5c
 800b136:	2210      	movs	r2, #16
 800b138:	4619      	mov	r1, r3
 800b13a:	f015 ffbd 	bl	80210b8 <memcpy>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: Using gw %pip\n", ( void * ) pxIPAddress->ucBytes ) );
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	4619      	mov	r1, r3
 800b142:	4816      	ldr	r0, [pc, #88]	@ (800b19c <eNDGetCacheEntry+0x150>)
 800b144:	f015 fd9c 	bl	8020c80 <lUDPLoggingPrintf>
                        FreeRTOS_printf( ( "eNDGetCacheEntry: From addr %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800b148:	69bb      	ldr	r3, [r7, #24]
 800b14a:	3338      	adds	r3, #56	@ 0x38
 800b14c:	4619      	mov	r1, r3
 800b14e:	4814      	ldr	r0, [pc, #80]	@ (800b1a0 <eNDGetCacheEntry+0x154>)
 800b150:	f015 fd96 	bl	8020c80 <lUDPLoggingPrintf>

                        /* See if the gateway has an entry in the cache. */
                        eReturn = prvNDCacheLookup( pxIPAddress, pxMACAddress, ppxEndPoint );
 800b154:	687a      	ldr	r2, [r7, #4]
 800b156:	68b9      	ldr	r1, [r7, #8]
 800b158:	68f8      	ldr	r0, [r7, #12]
 800b15a:	f000 f935 	bl	800b3c8 <prvNDCacheLookup>
 800b15e:	4603      	mov	r3, r0
 800b160:	77fb      	strb	r3, [r7, #31]

                        if( *ppxEndPoint != NULL )
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d006      	beq.n	800b178 <eNDGetCacheEntry+0x12c>
                        {
                            FreeRTOS_printf( ( "eNDGetCacheEntry: found end-point %pip\n", ( void * ) ( *ppxEndPoint )->ipv6_settings.xIPAddress.ucBytes ) );
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	681b      	ldr	r3, [r3, #0]
 800b16e:	3338      	adds	r3, #56	@ 0x38
 800b170:	4619      	mov	r1, r3
 800b172:	480c      	ldr	r0, [pc, #48]	@ (800b1a4 <eNDGetCacheEntry+0x158>)
 800b174:	f015 fd84 	bl	8020c80 <lUDPLoggingPrintf>
                        }

                        *( ppxEndPoint ) = pxEndPoint;
 800b178:	687b      	ldr	r3, [r7, #4]
 800b17a:	69ba      	ldr	r2, [r7, #24]
 800b17c:	601a      	str	r2, [r3, #0]
                    }
                }
            }
        }

        return eReturn;
 800b17e:	7ffb      	ldrb	r3, [r7, #31]
    }
 800b180:	4618      	mov	r0, r3
 800b182:	3720      	adds	r7, #32
 800b184:	46bd      	mov	sp, r7
 800b186:	bd80      	pop	{r7, pc}
 800b188:	08023cf8 	.word	0x08023cf8
 800b18c:	08023d1c 	.word	0x08023d1c
 800b190:	08023d60 	.word	0x08023d60
 800b194:	08023d64 	.word	0x08023d64
 800b198:	08023d6c 	.word	0x08023d6c
 800b19c:	08023d94 	.word	0x08023d94
 800b1a0:	08023db8 	.word	0x08023db8
 800b1a4:	08023ddc 	.word	0x08023ddc

0800b1a8 <vNDRefreshCacheEntry>:
 *
 */
    void vNDRefreshCacheEntry( const MACAddress_t * pxMACAddress,
                               const IPv6_Address_t * pxIPAddress,
                               NetworkEndPoint_t * pxEndPoint )
    {
 800b1a8:	b5b0      	push	{r4, r5, r7, lr}
 800b1aa:	b08e      	sub	sp, #56	@ 0x38
 800b1ac:	af04      	add	r7, sp, #16
 800b1ae:	60f8      	str	r0, [r7, #12]
 800b1b0:	60b9      	str	r1, [r7, #8]
 800b1b2:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        BaseType_t xFreeEntry = -1, xEntryFound = -1;
 800b1b4:	f04f 33ff 	mov.w	r3, #4294967295
 800b1b8:	623b      	str	r3, [r7, #32]
 800b1ba:	f04f 33ff 	mov.w	r3, #4294967295
 800b1be:	61fb      	str	r3, [r7, #28]
        uint16_t xOldestValue = ipconfigMAX_ARP_AGE + 1;
 800b1c0:	2397      	movs	r3, #151	@ 0x97
 800b1c2:	837b      	strh	r3, [r7, #26]
        BaseType_t xOldestEntry = 0;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	617b      	str	r3, [r7, #20]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b1c8:	2300      	movs	r3, #0
 800b1ca:	627b      	str	r3, [r7, #36]	@ 0x24
 800b1cc:	e033      	b.n	800b236 <vNDRefreshCacheEntry+0x8e>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b1ce:	4a44      	ldr	r2, [pc, #272]	@ (800b2e0 <vNDRefreshCacheEntry+0x138>)
 800b1d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1d2:	015b      	lsls	r3, r3, #5
 800b1d4:	4413      	add	r3, r2
 800b1d6:	331d      	adds	r3, #29
 800b1d8:	781b      	ldrb	r3, [r3, #0]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	d106      	bne.n	800b1ec <vNDRefreshCacheEntry+0x44>
            {
                if( xFreeEntry == -1 )
 800b1de:	6a3b      	ldr	r3, [r7, #32]
 800b1e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b1e4:	d124      	bne.n	800b230 <vNDRefreshCacheEntry+0x88>
                {
                    xFreeEntry = x;
 800b1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1e8:	623b      	str	r3, [r7, #32]
 800b1ea:	e021      	b.n	800b230 <vNDRefreshCacheEntry+0x88>
                }
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b1ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b1ee:	015b      	lsls	r3, r3, #5
 800b1f0:	4a3b      	ldr	r2, [pc, #236]	@ (800b2e0 <vNDRefreshCacheEntry+0x138>)
 800b1f2:	4413      	add	r3, r2
 800b1f4:	68b9      	ldr	r1, [r7, #8]
 800b1f6:	2210      	movs	r2, #16
 800b1f8:	4618      	mov	r0, r3
 800b1fa:	f016 fef2 	bl	8021fe2 <memcmp>
 800b1fe:	4603      	mov	r3, r0
 800b200:	2b00      	cmp	r3, #0
 800b202:	d102      	bne.n	800b20a <vNDRefreshCacheEntry+0x62>
            {
                xEntryFound = x;
 800b204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b206:	61fb      	str	r3, [r7, #28]
                break;
 800b208:	e018      	b.n	800b23c <vNDRefreshCacheEntry+0x94>
                 * neighbor advertisement needed for that packet. If we don't store this network advertisement in cache,
                 * the parting of the frame from pxARPWaitingNetworkBuffer will cause the sending of neighbor solicitation
                 * and stores the frame in pxARPWaitingNetworkBuffer. This becomes a vicious circle with thousands of
                 * neighbor solicitation/advertisement packets going back and forth because the ND cache is full.
                 * Overwriting the oldest cache entry is not a fool-proof solution, but it's something. */
                if( xNDCache[ x ].ucAge < xOldestValue )
 800b20a:	4a35      	ldr	r2, [pc, #212]	@ (800b2e0 <vNDRefreshCacheEntry+0x138>)
 800b20c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b20e:	015b      	lsls	r3, r3, #5
 800b210:	4413      	add	r3, r2
 800b212:	331c      	adds	r3, #28
 800b214:	781b      	ldrb	r3, [r3, #0]
 800b216:	461a      	mov	r2, r3
 800b218:	8b7b      	ldrh	r3, [r7, #26]
 800b21a:	4293      	cmp	r3, r2
 800b21c:	d908      	bls.n	800b230 <vNDRefreshCacheEntry+0x88>
                {
                    xOldestValue = xNDCache[ x ].ucAge;
 800b21e:	4a30      	ldr	r2, [pc, #192]	@ (800b2e0 <vNDRefreshCacheEntry+0x138>)
 800b220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b222:	015b      	lsls	r3, r3, #5
 800b224:	4413      	add	r3, r2
 800b226:	331c      	adds	r3, #28
 800b228:	781b      	ldrb	r3, [r3, #0]
 800b22a:	837b      	strh	r3, [r7, #26]
                    xOldestEntry = x;
 800b22c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b22e:	617b      	str	r3, [r7, #20]
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b230:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b232:	3301      	adds	r3, #1
 800b234:	627b      	str	r3, [r7, #36]	@ 0x24
 800b236:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b238:	2b17      	cmp	r3, #23
 800b23a:	ddc8      	ble.n	800b1ce <vNDRefreshCacheEntry+0x26>
                }
            }
        }

        if( xEntryFound < 0 )
 800b23c:	69fb      	ldr	r3, [r7, #28]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	da22      	bge.n	800b288 <vNDRefreshCacheEntry+0xe0>
        {
            /* The IP-address was not found, use the first free location. */
            if( xFreeEntry >= 0 )
 800b242:	6a3b      	ldr	r3, [r7, #32]
 800b244:	2b00      	cmp	r3, #0
 800b246:	db02      	blt.n	800b24e <vNDRefreshCacheEntry+0xa6>
            {
                xEntryFound = xFreeEntry;
 800b248:	6a3b      	ldr	r3, [r7, #32]
 800b24a:	61fb      	str	r3, [r7, #28]
 800b24c:	e01c      	b.n	800b288 <vNDRefreshCacheEntry+0xe0>
            }
            else
            {
                /* No free location. Overwrite the oldest. */
                xEntryFound = xOldestEntry;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "vNDRefreshCacheEntry: Cache FULL! Overwriting oldest entry %i with %02X-%02X-%02X-%02X-%02X-%02X\n", ( int ) xEntryFound, pxMACAddress->ucBytes[ 0 ], pxMACAddress->ucBytes[ 1 ], pxMACAddress->ucBytes[ 2 ], pxMACAddress->ucBytes[ 3 ], pxMACAddress->ucBytes[ 4 ], pxMACAddress->ucBytes[ 5 ] ) );
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	781b      	ldrb	r3, [r3, #0]
 800b256:	461c      	mov	r4, r3
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	785b      	ldrb	r3, [r3, #1]
 800b25c:	461d      	mov	r5, r3
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	789b      	ldrb	r3, [r3, #2]
 800b262:	461a      	mov	r2, r3
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	78db      	ldrb	r3, [r3, #3]
 800b268:	4619      	mov	r1, r3
 800b26a:	68fb      	ldr	r3, [r7, #12]
 800b26c:	791b      	ldrb	r3, [r3, #4]
 800b26e:	4618      	mov	r0, r3
 800b270:	68fb      	ldr	r3, [r7, #12]
 800b272:	795b      	ldrb	r3, [r3, #5]
 800b274:	9303      	str	r3, [sp, #12]
 800b276:	9002      	str	r0, [sp, #8]
 800b278:	9101      	str	r1, [sp, #4]
 800b27a:	9200      	str	r2, [sp, #0]
 800b27c:	462b      	mov	r3, r5
 800b27e:	4622      	mov	r2, r4
 800b280:	69f9      	ldr	r1, [r7, #28]
 800b282:	4818      	ldr	r0, [pc, #96]	@ (800b2e4 <vNDRefreshCacheEntry+0x13c>)
 800b284:	f015 fcfc 	bl	8020c80 <lUDPLoggingPrintf>
            }
        }

        /* At this point, xEntryFound is always a valid index. */
        /* Copy the IP-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xIPAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b288:	69fb      	ldr	r3, [r7, #28]
 800b28a:	015b      	lsls	r3, r3, #5
 800b28c:	4a14      	ldr	r2, [pc, #80]	@ (800b2e0 <vNDRefreshCacheEntry+0x138>)
 800b28e:	4413      	add	r3, r2
 800b290:	68b9      	ldr	r1, [r7, #8]
 800b292:	2210      	movs	r2, #16
 800b294:	4618      	mov	r0, r3
 800b296:	f015 ff0f 	bl	80210b8 <memcpy>
        /* Copy the MAC-address. */
        ( void ) memcpy( xNDCache[ xEntryFound ].xMACAddress.ucBytes, pxMACAddress->ucBytes, sizeof( MACAddress_t ) );
 800b29a:	69fb      	ldr	r3, [r7, #28]
 800b29c:	015b      	lsls	r3, r3, #5
 800b29e:	3310      	adds	r3, #16
 800b2a0:	4a0f      	ldr	r2, [pc, #60]	@ (800b2e0 <vNDRefreshCacheEntry+0x138>)
 800b2a2:	4413      	add	r3, r2
 800b2a4:	68f9      	ldr	r1, [r7, #12]
 800b2a6:	2206      	movs	r2, #6
 800b2a8:	4618      	mov	r0, r3
 800b2aa:	f015 ff05 	bl	80210b8 <memcpy>
        xNDCache[ xEntryFound ].pxEndPoint = pxEndPoint;
 800b2ae:	4a0c      	ldr	r2, [pc, #48]	@ (800b2e0 <vNDRefreshCacheEntry+0x138>)
 800b2b0:	69fb      	ldr	r3, [r7, #28]
 800b2b2:	015b      	lsls	r3, r3, #5
 800b2b4:	4413      	add	r3, r2
 800b2b6:	3318      	adds	r3, #24
 800b2b8:	687a      	ldr	r2, [r7, #4]
 800b2ba:	601a      	str	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucAge = ( uint8_t ) ipconfigMAX_ARP_AGE;
 800b2bc:	4a08      	ldr	r2, [pc, #32]	@ (800b2e0 <vNDRefreshCacheEntry+0x138>)
 800b2be:	69fb      	ldr	r3, [r7, #28]
 800b2c0:	015b      	lsls	r3, r3, #5
 800b2c2:	4413      	add	r3, r2
 800b2c4:	331c      	adds	r3, #28
 800b2c6:	2296      	movs	r2, #150	@ 0x96
 800b2c8:	701a      	strb	r2, [r3, #0]
        xNDCache[ xEntryFound ].ucValid = ( uint8_t ) pdTRUE;
 800b2ca:	4a05      	ldr	r2, [pc, #20]	@ (800b2e0 <vNDRefreshCacheEntry+0x138>)
 800b2cc:	69fb      	ldr	r3, [r7, #28]
 800b2ce:	015b      	lsls	r3, r3, #5
 800b2d0:	4413      	add	r3, r2
 800b2d2:	331d      	adds	r3, #29
 800b2d4:	2201      	movs	r2, #1
 800b2d6:	701a      	strb	r2, [r3, #0]
    }
 800b2d8:	bf00      	nop
 800b2da:	3728      	adds	r7, #40	@ 0x28
 800b2dc:	46bd      	mov	sp, r7
 800b2de:	bdb0      	pop	{r4, r5, r7, pc}
 800b2e0:	20000f24 	.word	0x20000f24
 800b2e4:	08023e04 	.word	0x08023e04

0800b2e8 <vNDAgeCache>:
 * @brief Reduce the age counter in each entry within the ND cache.  An entry is no
 * longer considered valid and is deleted if its age reaches zero.
 * Just before getting to zero, 3 times a neighbour solicitation will be sent.
 */
    void vNDAgeCache( void )
    {
 800b2e8:	b580      	push	{r7, lr}
 800b2ea:	b084      	sub	sp, #16
 800b2ec:	af00      	add	r7, sp, #0
        BaseType_t x;

        /* Loop through each entry in the ND cache. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	60fb      	str	r3, [r7, #12]
 800b2f2:	e05f      	b.n	800b3b4 <vNDAgeCache+0xcc>
        {
            BaseType_t xDoSolicitate = pdFALSE;
 800b2f4:	2300      	movs	r3, #0
 800b2f6:	60bb      	str	r3, [r7, #8]

            /* If the entry is valid (its age is greater than zero). */
            if( xNDCache[ x ].ucAge > 0U )
 800b2f8:	4a32      	ldr	r2, [pc, #200]	@ (800b3c4 <vNDAgeCache+0xdc>)
 800b2fa:	68fb      	ldr	r3, [r7, #12]
 800b2fc:	015b      	lsls	r3, r3, #5
 800b2fe:	4413      	add	r3, r2
 800b300:	331c      	adds	r3, #28
 800b302:	781b      	ldrb	r3, [r3, #0]
 800b304:	2b00      	cmp	r3, #0
 800b306:	d052      	beq.n	800b3ae <vNDAgeCache+0xc6>
            {
                /* Decrement the age value of the entry in this ND cache table row.
                 * When the age reaches zero it is no longer considered valid. */
                ( xNDCache[ x ].ucAge )--;
 800b308:	4a2e      	ldr	r2, [pc, #184]	@ (800b3c4 <vNDAgeCache+0xdc>)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	015b      	lsls	r3, r3, #5
 800b30e:	4413      	add	r3, r2
 800b310:	331c      	adds	r3, #28
 800b312:	781b      	ldrb	r3, [r3, #0]
 800b314:	3b01      	subs	r3, #1
 800b316:	b2d9      	uxtb	r1, r3
 800b318:	4a2a      	ldr	r2, [pc, #168]	@ (800b3c4 <vNDAgeCache+0xdc>)
 800b31a:	68fb      	ldr	r3, [r7, #12]
 800b31c:	015b      	lsls	r3, r3, #5
 800b31e:	4413      	add	r3, r2
 800b320:	331c      	adds	r3, #28
 800b322:	460a      	mov	r2, r1
 800b324:	701a      	strb	r2, [r3, #0]

                if( xNDCache[ x ].ucAge == 0U )
 800b326:	4a27      	ldr	r2, [pc, #156]	@ (800b3c4 <vNDAgeCache+0xdc>)
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	015b      	lsls	r3, r3, #5
 800b32c:	4413      	add	r3, r2
 800b32e:	331c      	adds	r3, #28
 800b330:	781b      	ldrb	r3, [r3, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d109      	bne.n	800b34a <vNDAgeCache+0x62>
                {
                    /* The entry is no longer valid.  Wipe it out. */
                    iptraceND_TABLE_ENTRY_EXPIRED( xNDCache[ x ].xIPAddress );
                    ( void ) memset( &( xNDCache[ x ] ), 0, sizeof( xNDCache[ x ] ) );
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	015b      	lsls	r3, r3, #5
 800b33a:	4a22      	ldr	r2, [pc, #136]	@ (800b3c4 <vNDAgeCache+0xdc>)
 800b33c:	4413      	add	r3, r2
 800b33e:	2220      	movs	r2, #32
 800b340:	2100      	movs	r1, #0
 800b342:	4618      	mov	r0, r3
 800b344:	f015 ffc5 	bl	80212d2 <memset>
 800b348:	e031      	b.n	800b3ae <vNDAgeCache+0xc6>
                }
                else
                {
                    /* If the entry is not yet valid, then it is waiting an ND
                     * advertisement, and the ND solicitation should be retransmitted. */
                    if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b34a:	4a1e      	ldr	r2, [pc, #120]	@ (800b3c4 <vNDAgeCache+0xdc>)
 800b34c:	68fb      	ldr	r3, [r7, #12]
 800b34e:	015b      	lsls	r3, r3, #5
 800b350:	4413      	add	r3, r2
 800b352:	331d      	adds	r3, #29
 800b354:	781b      	ldrb	r3, [r3, #0]
 800b356:	2b00      	cmp	r3, #0
 800b358:	d102      	bne.n	800b360 <vNDAgeCache+0x78>
                    {
                        xDoSolicitate = pdTRUE;
 800b35a:	2301      	movs	r3, #1
 800b35c:	60bb      	str	r3, [r7, #8]
 800b35e:	e009      	b.n	800b374 <vNDAgeCache+0x8c>
                    }
                    else if( xNDCache[ x ].ucAge <= ( uint8_t ) ndMAX_CACHE_AGE_BEFORE_NEW_ND_SOLICITATION )
 800b360:	4a18      	ldr	r2, [pc, #96]	@ (800b3c4 <vNDAgeCache+0xdc>)
 800b362:	68fb      	ldr	r3, [r7, #12]
 800b364:	015b      	lsls	r3, r3, #5
 800b366:	4413      	add	r3, r2
 800b368:	331c      	adds	r3, #28
 800b36a:	781b      	ldrb	r3, [r3, #0]
 800b36c:	2b03      	cmp	r3, #3
 800b36e:	d801      	bhi.n	800b374 <vNDAgeCache+0x8c>
                    {
                        /* This entry will get removed soon.  See if the MAC address is
                         * still valid to prevent this happening. */
                        iptraceND_TABLE_ENTRY_WILL_EXPIRE( xNDCache[ x ].xIPAddress );
                        xDoSolicitate = pdTRUE;
 800b370:	2301      	movs	r3, #1
 800b372:	60bb      	str	r3, [r7, #8]
                    else
                    {
                        /* The age has just ticked down, with nothing to do. */
                    }

                    if( xDoSolicitate != pdFALSE )
 800b374:	68bb      	ldr	r3, [r7, #8]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d019      	beq.n	800b3ae <vNDAgeCache+0xc6>
                    {
                        size_t uxNeededSize;
                        NetworkBufferDescriptor_t * pxNetworkBuffer;

                        uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800b37a:	2356      	movs	r3, #86	@ 0x56
 800b37c:	607b      	str	r3, [r7, #4]
                        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 800b37e:	2100      	movs	r1, #0
 800b380:	6878      	ldr	r0, [r7, #4]
 800b382:	f00b f9b9 	bl	80166f8 <pxGetNetworkBufferWithDescriptor>
 800b386:	6038      	str	r0, [r7, #0]

                        if( pxNetworkBuffer != NULL )
 800b388:	683b      	ldr	r3, [r7, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d00f      	beq.n	800b3ae <vNDAgeCache+0xc6>
                        {
                            pxNetworkBuffer->pxEndPoint = xNDCache[ x ].pxEndPoint;
 800b38e:	4a0d      	ldr	r2, [pc, #52]	@ (800b3c4 <vNDAgeCache+0xdc>)
 800b390:	68fb      	ldr	r3, [r7, #12]
 800b392:	015b      	lsls	r3, r3, #5
 800b394:	4413      	add	r3, r2
 800b396:	3318      	adds	r3, #24
 800b398:	681a      	ldr	r2, [r3, #0]
 800b39a:	683b      	ldr	r3, [r7, #0]
 800b39c:	631a      	str	r2, [r3, #48]	@ 0x30
                            /* _HT_ From here I am suspecting a network buffer leak */
                            vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xNDCache[ x ].xIPAddress ) );
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	015b      	lsls	r3, r3, #5
 800b3a2:	4a08      	ldr	r2, [pc, #32]	@ (800b3c4 <vNDAgeCache+0xdc>)
 800b3a4:	4413      	add	r3, r2
 800b3a6:	4619      	mov	r1, r3
 800b3a8:	6838      	ldr	r0, [r7, #0]
 800b3aa:	f000 f8bb 	bl	800b524 <vNDSendNeighbourSolicitation>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	3301      	adds	r3, #1
 800b3b2:	60fb      	str	r3, [r7, #12]
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	2b17      	cmp	r3, #23
 800b3b8:	dd9c      	ble.n	800b2f4 <vNDAgeCache+0xc>
                        }
                    }
                }
            }
        }
    }
 800b3ba:	bf00      	nop
 800b3bc:	bf00      	nop
 800b3be:	3710      	adds	r7, #16
 800b3c0:	46bd      	mov	sp, r7
 800b3c2:	bd80      	pop	{r7, pc}
 800b3c4:	20000f24 	.word	0x20000f24

0800b3c8 <prvNDCacheLookup>:
 * @return An enum: either eARPCacheHit or eARPCacheMiss.
 */
    static eARPLookupResult_t prvNDCacheLookup( const IPv6_Address_t * pxAddressToLookup,
                                                MACAddress_t * const pxMACAddress,
                                                NetworkEndPoint_t ** ppxEndPoint )
    {
 800b3c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b3ca:	b08d      	sub	sp, #52	@ 0x34
 800b3cc:	af06      	add	r7, sp, #24
 800b3ce:	60f8      	str	r0, [r7, #12]
 800b3d0:	60b9      	str	r1, [r7, #8]
 800b3d2:	607a      	str	r2, [r7, #4]
        BaseType_t x;
        eARPLookupResult_t eReturn = eARPCacheMiss;
 800b3d4:	2300      	movs	r3, #0
 800b3d6:	74fb      	strb	r3, [r7, #19]

        /* For each entry in the ND cache table. */
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b3d8:	2300      	movs	r3, #0
 800b3da:	617b      	str	r3, [r7, #20]
 800b3dc:	e04a      	b.n	800b474 <prvNDCacheLookup+0xac>
        {
            if( xNDCache[ x ].ucValid == ( uint8_t ) pdFALSE )
 800b3de:	4a30      	ldr	r2, [pc, #192]	@ (800b4a0 <prvNDCacheLookup+0xd8>)
 800b3e0:	697b      	ldr	r3, [r7, #20]
 800b3e2:	015b      	lsls	r3, r3, #5
 800b3e4:	4413      	add	r3, r2
 800b3e6:	331d      	adds	r3, #29
 800b3e8:	781b      	ldrb	r3, [r3, #0]
 800b3ea:	2b00      	cmp	r3, #0
 800b3ec:	d03f      	beq.n	800b46e <prvNDCacheLookup+0xa6>
            {
                /* Skip invalid entries. */
            }
            else if( memcmp( xNDCache[ x ].xIPAddress.ucBytes, pxAddressToLookup->ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b3ee:	697b      	ldr	r3, [r7, #20]
 800b3f0:	015b      	lsls	r3, r3, #5
 800b3f2:	4a2b      	ldr	r2, [pc, #172]	@ (800b4a0 <prvNDCacheLookup+0xd8>)
 800b3f4:	4413      	add	r3, r2
 800b3f6:	68f9      	ldr	r1, [r7, #12]
 800b3f8:	2210      	movs	r2, #16
 800b3fa:	4618      	mov	r0, r3
 800b3fc:	f016 fdf1 	bl	8021fe2 <memcmp>
 800b400:	4603      	mov	r3, r0
 800b402:	2b00      	cmp	r3, #0
 800b404:	d133      	bne.n	800b46e <prvNDCacheLookup+0xa6>
            {
                ( void ) memcpy( pxMACAddress->ucBytes, xNDCache[ x ].xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800b406:	68b8      	ldr	r0, [r7, #8]
 800b408:	697b      	ldr	r3, [r7, #20]
 800b40a:	015b      	lsls	r3, r3, #5
 800b40c:	3310      	adds	r3, #16
 800b40e:	4a24      	ldr	r2, [pc, #144]	@ (800b4a0 <prvNDCacheLookup+0xd8>)
 800b410:	4413      	add	r3, r2
 800b412:	2206      	movs	r2, #6
 800b414:	4619      	mov	r1, r3
 800b416:	f015 fe4f 	bl	80210b8 <memcpy>
                eReturn = eARPCacheHit;
 800b41a:	2301      	movs	r3, #1
 800b41c:	74fb      	strb	r3, [r7, #19]

                if( ppxEndPoint != NULL )
 800b41e:	687b      	ldr	r3, [r7, #4]
 800b420:	2b00      	cmp	r3, #0
 800b422:	d007      	beq.n	800b434 <prvNDCacheLookup+0x6c>
                {
                    *ppxEndPoint = xNDCache[ x ].pxEndPoint;
 800b424:	4a1e      	ldr	r2, [pc, #120]	@ (800b4a0 <prvNDCacheLookup+0xd8>)
 800b426:	697b      	ldr	r3, [r7, #20]
 800b428:	015b      	lsls	r3, r3, #5
 800b42a:	4413      	add	r3, r2
 800b42c:	3318      	adds	r3, #24
 800b42e:	681a      	ldr	r2, [r3, #0]
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	601a      	str	r2, [r3, #0]
                }

                FreeRTOS_debug_printf( ( "prvCacheLookup6[ %d ] %pip with %02x:%02x:%02x:%02x:%02x:%02x\n",
 800b434:	68fa      	ldr	r2, [r7, #12]
 800b436:	68bb      	ldr	r3, [r7, #8]
 800b438:	781b      	ldrb	r3, [r3, #0]
 800b43a:	461e      	mov	r6, r3
 800b43c:	68bb      	ldr	r3, [r7, #8]
 800b43e:	785b      	ldrb	r3, [r3, #1]
 800b440:	4619      	mov	r1, r3
 800b442:	68bb      	ldr	r3, [r7, #8]
 800b444:	789b      	ldrb	r3, [r3, #2]
 800b446:	4618      	mov	r0, r3
 800b448:	68bb      	ldr	r3, [r7, #8]
 800b44a:	78db      	ldrb	r3, [r3, #3]
 800b44c:	461c      	mov	r4, r3
 800b44e:	68bb      	ldr	r3, [r7, #8]
 800b450:	791b      	ldrb	r3, [r3, #4]
 800b452:	461d      	mov	r5, r3
 800b454:	68bb      	ldr	r3, [r7, #8]
 800b456:	795b      	ldrb	r3, [r3, #5]
 800b458:	9304      	str	r3, [sp, #16]
 800b45a:	9503      	str	r5, [sp, #12]
 800b45c:	9402      	str	r4, [sp, #8]
 800b45e:	9001      	str	r0, [sp, #4]
 800b460:	9100      	str	r1, [sp, #0]
 800b462:	4633      	mov	r3, r6
 800b464:	6979      	ldr	r1, [r7, #20]
 800b466:	480f      	ldr	r0, [pc, #60]	@ (800b4a4 <prvNDCacheLookup+0xdc>)
 800b468:	f015 fc0a 	bl	8020c80 <lUDPLoggingPrintf>
                                         pxMACAddress->ucBytes[ 1 ],
                                         pxMACAddress->ucBytes[ 2 ],
                                         pxMACAddress->ucBytes[ 3 ],
                                         pxMACAddress->ucBytes[ 4 ],
                                         pxMACAddress->ucBytes[ 5 ] ) );
                break;
 800b46c:	e005      	b.n	800b47a <prvNDCacheLookup+0xb2>
        for( x = 0; x < ipconfigND_CACHE_ENTRIES; x++ )
 800b46e:	697b      	ldr	r3, [r7, #20]
 800b470:	3301      	adds	r3, #1
 800b472:	617b      	str	r3, [r7, #20]
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	2b17      	cmp	r3, #23
 800b478:	ddb1      	ble.n	800b3de <prvNDCacheLookup+0x16>
            {
                /* Entry is valid but the MAC-address doesn't match. */
            }
        }

        if( eReturn == eARPCacheMiss )
 800b47a:	7cfb      	ldrb	r3, [r7, #19]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d10a      	bne.n	800b496 <prvNDCacheLookup+0xce>
        {
            FreeRTOS_printf( ( "prvNDCacheLookup %pip Miss\n", ( void * ) pxAddressToLookup->ucBytes ) );
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	4619      	mov	r1, r3
 800b484:	4808      	ldr	r0, [pc, #32]	@ (800b4a8 <prvNDCacheLookup+0xe0>)
 800b486:	f015 fbfb 	bl	8020c80 <lUDPLoggingPrintf>

            if( ppxEndPoint != NULL )
 800b48a:	687b      	ldr	r3, [r7, #4]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d002      	beq.n	800b496 <prvNDCacheLookup+0xce>
            {
                *ppxEndPoint = NULL;
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2200      	movs	r2, #0
 800b494:	601a      	str	r2, [r3, #0]
            }
        }

        return eReturn;
 800b496:	7cfb      	ldrb	r3, [r7, #19]
    }
 800b498:	4618      	mov	r0, r3
 800b49a:	371c      	adds	r7, #28
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b4a0:	20000f24 	.word	0x20000f24
 800b4a4:	08023e68 	.word	0x08023e68
 800b4a8:	08023ea8 	.word	0x08023ea8

0800b4ac <prvReturnICMP_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet.
 * @param[in] uxICMPSize The number of bytes to be sent.
 */
    static void prvReturnICMP_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                    size_t uxICMPSize )
    {
 800b4ac:	b580      	push	{r7, lr}
 800b4ae:	b084      	sub	sp, #16
 800b4b0:	af00      	add	r7, sp, #0
 800b4b2:	6078      	str	r0, [r7, #4]
 800b4b4:	6039      	str	r1, [r7, #0]
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b4ba:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b4bc:	687b      	ldr	r3, [r7, #4]
 800b4be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b4c0:	60bb      	str	r3, [r7, #8]

        ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b4c2:	68bb      	ldr	r3, [r7, #8]
 800b4c4:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 800b4c8:	68bb      	ldr	r3, [r7, #8]
 800b4ca:	3316      	adds	r3, #22
 800b4cc:	2210      	movs	r2, #16
 800b4ce:	4619      	mov	r1, r3
 800b4d0:	f015 fdf2 	bl	80210b8 <memcpy>
        ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	f103 0016 	add.w	r0, r3, #22
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	3338      	adds	r3, #56	@ 0x38
 800b4de:	2210      	movs	r2, #16
 800b4e0:	4619      	mov	r1, r3
 800b4e2:	f015 fde9 	bl	80210b8 <memcpy>
        pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( uxICMPSize );
 800b4e6:	683b      	ldr	r3, [r7, #0]
 800b4e8:	b29b      	uxth	r3, r3
 800b4ea:	021b      	lsls	r3, r3, #8
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	683b      	ldr	r3, [r7, #0]
 800b4f0:	0a1b      	lsrs	r3, r3, #8
 800b4f2:	b29b      	uxth	r3, r3
 800b4f4:	4313      	orrs	r3, r2
 800b4f6:	b29a      	uxth	r2, r3
 800b4f8:	68bb      	ldr	r3, [r7, #8]
 800b4fa:	825a      	strh	r2, [r3, #18]

        /* Important: tell NIC driver how many bytes must be sent */
        pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b4fc:	683b      	ldr	r3, [r7, #0]
 800b4fe:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	629a      	str	r2, [r3, #40]	@ 0x28
        }
        #else
        {
            /* Many EMAC peripherals will only calculate the ICMP checksum
             * correctly if the field is nulled beforehand. */
            pxICMPPacket->xICMPHeaderIPv6.usChecksum = 0;
 800b506:	68bb      	ldr	r3, [r7, #8]
 800b508:	2200      	movs	r2, #0
 800b50a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
 800b50e:	2200      	movs	r2, #0
 800b510:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39
        }
        #endif

        /* This function will fill in the Ethernet addresses and send the packet */
        vReturnEthernetFrame( pxNetworkBuffer, pdFALSE );
 800b514:	2100      	movs	r1, #0
 800b516:	6878      	ldr	r0, [r7, #4]
 800b518:	f7fd fe46 	bl	80091a8 <vReturnEthernetFrame>
    }
 800b51c:	bf00      	nop
 800b51e:	3710      	adds	r7, #16
 800b520:	46bd      	mov	sp, r7
 800b522:	bd80      	pop	{r7, pc}

0800b524 <vNDSendNeighbourSolicitation>:
 * outstanding so re-transmissions can be generated.
 */

    void vNDSendNeighbourSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                       const IPv6_Address_t * pxIPAddress )
    {
 800b524:	b5b0      	push	{r4, r5, r7, lr}
 800b526:	b090      	sub	sp, #64	@ 0x40
 800b528:	af00      	add	r7, sp, #0
 800b52a:	6078      	str	r0, [r7, #4]
 800b52c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b52e:	687b      	ldr	r3, [r7, #4]
 800b530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b532:	637b      	str	r3, [r7, #52]	@ 0x34
        size_t uxNeededSize;
        IPv6_Address_t xTargetIPAddress;
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	63fb      	str	r3, [r7, #60]	@ 0x3c
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800b538:	2300      	movs	r3, #0
 800b53a:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xReleased = pdFALSE;
 800b53c:	2300      	movs	r3, #0
 800b53e:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( ( pxEndPoint != NULL ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800b540:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b542:	2b00      	cmp	r3, #0
 800b544:	f000 80c1 	beq.w	800b6ca <vNDSendNeighbourSolicitation+0x1a6>
 800b548:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b54a:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b54e:	f003 0304 	and.w	r3, r3, #4
 800b552:	b2db      	uxtb	r3, r3
 800b554:	2b00      	cmp	r3, #0
 800b556:	f000 80b8 	beq.w	800b6ca <vNDSendNeighbourSolicitation+0x1a6>
        {
            uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800b55a:	2356      	movs	r3, #86	@ 0x56
 800b55c:	62fb      	str	r3, [r7, #44]	@ 0x2c

            if( pxDescriptor->xDataLength < uxNeededSize )
 800b55e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b560:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b562:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b564:	429a      	cmp	r2, r3
 800b566:	d909      	bls.n	800b57c <vNDSendNeighbourSolicitation+0x58>
            {
                pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800b568:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800b56a:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b56c:	f7fe f9ce 	bl	800990c <pxDuplicateNetworkBufferWithDescriptor>
 800b570:	6338      	str	r0, [r7, #48]	@ 0x30
                vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800b572:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b574:	f00b f928 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
                pxDescriptor = pxNewDescriptor;
 800b578:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b57a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            if( pxDescriptor != NULL )
 800b57c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b57e:	2b00      	cmp	r3, #0
 800b580:	f000 80a3 	beq.w	800b6ca <vNDSendNeighbourSolicitation+0x1a6>
            {
                const uint32_t ulPayloadLength = 32U;
 800b584:	2320      	movs	r3, #32
 800b586:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800b588:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b58a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b58c:	627b      	str	r3, [r7, #36]	@ 0x24
                pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800b58e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b590:	3336      	adds	r3, #54	@ 0x36
 800b592:	623b      	str	r3, [r7, #32]

                pxDescriptor->xDataLength = uxNeededSize;
 800b594:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b596:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b598:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Set the multi-cast MAC-address. */
                xMultiCastMacAddress.ucBytes[ 0 ] = 0x33U;
 800b59a:	2333      	movs	r3, #51	@ 0x33
 800b59c:	723b      	strb	r3, [r7, #8]
                xMultiCastMacAddress.ucBytes[ 1 ] = 0x33U;
 800b59e:	2333      	movs	r3, #51	@ 0x33
 800b5a0:	727b      	strb	r3, [r7, #9]
                xMultiCastMacAddress.ucBytes[ 2 ] = 0xffU;
 800b5a2:	23ff      	movs	r3, #255	@ 0xff
 800b5a4:	72bb      	strb	r3, [r7, #10]
                xMultiCastMacAddress.ucBytes[ 3 ] = pxIPAddress->ucBytes[ 13 ];
 800b5a6:	683b      	ldr	r3, [r7, #0]
 800b5a8:	7b5b      	ldrb	r3, [r3, #13]
 800b5aa:	72fb      	strb	r3, [r7, #11]
                xMultiCastMacAddress.ucBytes[ 4 ] = pxIPAddress->ucBytes[ 14 ];
 800b5ac:	683b      	ldr	r3, [r7, #0]
 800b5ae:	7b9b      	ldrb	r3, [r3, #14]
 800b5b0:	733b      	strb	r3, [r7, #12]
                xMultiCastMacAddress.ucBytes[ 5 ] = pxIPAddress->ucBytes[ 15 ];
 800b5b2:	683b      	ldr	r3, [r7, #0]
 800b5b4:	7bdb      	ldrb	r3, [r3, #15]
 800b5b6:	737b      	strb	r3, [r7, #13]

                /* Set Ethernet header. Source and Destination will be swapped. */
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b5b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ba:	3306      	adds	r3, #6
 800b5bc:	461a      	mov	r2, r3
 800b5be:	f107 0308 	add.w	r3, r7, #8
 800b5c2:	6818      	ldr	r0, [r3, #0]
 800b5c4:	6010      	str	r0, [r2, #0]
 800b5c6:	889b      	ldrh	r3, [r3, #4]
 800b5c8:	8093      	strh	r3, [r2, #4]
                ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b5ca:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800b5cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b5ce:	33e8      	adds	r3, #232	@ 0xe8
 800b5d0:	2206      	movs	r2, #6
 800b5d2:	4619      	mov	r1, r3
 800b5d4:	f015 fd70 	bl	80210b8 <memcpy>
                pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800b5d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5da:	2200      	movs	r2, #0
 800b5dc:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800b5e0:	731a      	strb	r2, [r3, #12]
 800b5e2:	2200      	movs	r2, #0
 800b5e4:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800b5e8:	735a      	strb	r2, [r3, #13]

                /* Set IP-header. */
                pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60U;
 800b5ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5ec:	2260      	movs	r2, #96	@ 0x60
 800b5ee:	739a      	strb	r2, [r3, #14]
                pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800b5f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	73da      	strb	r2, [r3, #15]
                pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800b5f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b5f8:	2200      	movs	r2, #0
 800b5fa:	741a      	strb	r2, [r3, #16]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	745a      	strb	r2, [r3, #17]
                pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( ulPayloadLength );
 800b600:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b602:	b29b      	uxth	r3, r3
 800b604:	021b      	lsls	r3, r3, #8
 800b606:	b29a      	uxth	r2, r3
 800b608:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b60a:	0a1b      	lsrs	r3, r3, #8
 800b60c:	b29b      	uxth	r3, r3
 800b60e:	4313      	orrs	r3, r2
 800b610:	b29a      	uxth	r2, r3
 800b612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b614:	825a      	strh	r2, [r3, #18]
                pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800b616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b618:	223a      	movs	r2, #58	@ 0x3a
 800b61a:	751a      	strb	r2, [r3, #20]
                pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800b61c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b61e:	22ff      	movs	r2, #255	@ 0xff
 800b620:	755a      	strb	r2, [r3, #21]

                /* Source address */
                ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b624:	f103 0016 	add.w	r0, r3, #22
 800b628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b62a:	3338      	adds	r3, #56	@ 0x38
 800b62c:	2210      	movs	r2, #16
 800b62e:	4619      	mov	r1, r3
 800b630:	f015 fd42 	bl	80210b8 <memcpy>

                /*ff02::1:ff5a:afe7 */
                ( void ) memset( xTargetIPAddress.ucBytes, 0, sizeof( xTargetIPAddress.ucBytes ) );
 800b634:	f107 0310 	add.w	r3, r7, #16
 800b638:	2210      	movs	r2, #16
 800b63a:	2100      	movs	r1, #0
 800b63c:	4618      	mov	r0, r3
 800b63e:	f015 fe48 	bl	80212d2 <memset>
                xTargetIPAddress.ucBytes[ 0 ] = 0xff;
 800b642:	23ff      	movs	r3, #255	@ 0xff
 800b644:	743b      	strb	r3, [r7, #16]
                xTargetIPAddress.ucBytes[ 1 ] = 0x02;
 800b646:	2302      	movs	r3, #2
 800b648:	747b      	strb	r3, [r7, #17]
                xTargetIPAddress.ucBytes[ 11 ] = 0x01;
 800b64a:	2301      	movs	r3, #1
 800b64c:	76fb      	strb	r3, [r7, #27]
                xTargetIPAddress.ucBytes[ 12 ] = 0xff;
 800b64e:	23ff      	movs	r3, #255	@ 0xff
 800b650:	773b      	strb	r3, [r7, #28]
                xTargetIPAddress.ucBytes[ 13 ] = pxIPAddress->ucBytes[ 13 ];
 800b652:	683b      	ldr	r3, [r7, #0]
 800b654:	7b5b      	ldrb	r3, [r3, #13]
 800b656:	777b      	strb	r3, [r7, #29]
                xTargetIPAddress.ucBytes[ 14 ] = pxIPAddress->ucBytes[ 14 ];
 800b658:	683b      	ldr	r3, [r7, #0]
 800b65a:	7b9b      	ldrb	r3, [r3, #14]
 800b65c:	77bb      	strb	r3, [r7, #30]
                xTargetIPAddress.ucBytes[ 15 ] = pxIPAddress->ucBytes[ 15 ];
 800b65e:	683b      	ldr	r3, [r7, #0]
 800b660:	7bdb      	ldrb	r3, [r3, #15]
 800b662:	77fb      	strb	r3, [r7, #31]
                ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, xTargetIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b664:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800b666:	3326      	adds	r3, #38	@ 0x26
 800b668:	461d      	mov	r5, r3
 800b66a:	f107 0410 	add.w	r4, r7, #16
 800b66e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800b670:	6028      	str	r0, [r5, #0]
 800b672:	6069      	str	r1, [r5, #4]
 800b674:	60aa      	str	r2, [r5, #8]
 800b676:	60eb      	str	r3, [r5, #12]

                /* Set ICMP header. */
                ( void ) memset( pxICMPHeader_IPv6, 0, sizeof( *pxICMPHeader_IPv6 ) );
 800b678:	2220      	movs	r2, #32
 800b67a:	2100      	movs	r1, #0
 800b67c:	6a38      	ldr	r0, [r7, #32]
 800b67e:	f015 fe28 	bl	80212d2 <memset>
                pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_SOLICITATION_IPv6;
 800b682:	6a3b      	ldr	r3, [r7, #32]
 800b684:	2287      	movs	r2, #135	@ 0x87
 800b686:	701a      	strb	r2, [r3, #0]
                ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800b688:	6a3b      	ldr	r3, [r7, #32]
 800b68a:	3308      	adds	r3, #8
 800b68c:	6839      	ldr	r1, [r7, #0]
 800b68e:	2210      	movs	r2, #16
 800b690:	4618      	mov	r0, r3
 800b692:	f015 fd11 	bl	80210b8 <memcpy>
                pxICMPHeader_IPv6->ucOptionType = ndICMP_SOURCE_LINK_LAYER_ADDRESS;
 800b696:	6a3b      	ldr	r3, [r7, #32]
 800b698:	2201      	movs	r2, #1
 800b69a:	761a      	strb	r2, [r3, #24]
                pxICMPHeader_IPv6->ucOptionLength = 1U; /* times 8 bytes. */
 800b69c:	6a3b      	ldr	r3, [r7, #32]
 800b69e:	2201      	movs	r2, #1
 800b6a0:	765a      	strb	r2, [r3, #25]
                ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800b6a2:	6a3b      	ldr	r3, [r7, #32]
 800b6a4:	f103 001a 	add.w	r0, r3, #26
 800b6a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b6aa:	33e8      	adds	r3, #232	@ 0xe8
 800b6ac:	2206      	movs	r2, #6
 800b6ae:	4619      	mov	r1, r3
 800b6b0:	f015 fd02 	bl	80210b8 <memcpy>
                }
                #else
                {
                    /* Many EMAC peripherals will only calculate the ICMP checksum
                     * correctly if the field is nulled beforehand. */
                    pxICMPHeader_IPv6->usChecksum = 0U;
 800b6b4:	6a3b      	ldr	r3, [r7, #32]
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	709a      	strb	r2, [r3, #2]
 800b6ba:	2200      	movs	r2, #0
 800b6bc:	70da      	strb	r2, [r3, #3]
                }
                #endif

                /* This function will fill in the eth addresses and send the packet */
                vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800b6be:	2101      	movs	r1, #1
 800b6c0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b6c2:	f7fd fd71 	bl	80091a8 <vReturnEthernetFrame>
                xReleased = pdTRUE;
 800b6c6:	2301      	movs	r3, #1
 800b6c8:	63bb      	str	r3, [r7, #56]	@ 0x38
            }
        }

        if( ( pxDescriptor != NULL ) && ( xReleased == pdFALSE ) )
 800b6ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	d005      	beq.n	800b6dc <vNDSendNeighbourSolicitation+0x1b8>
 800b6d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800b6d2:	2b00      	cmp	r3, #0
 800b6d4:	d102      	bne.n	800b6dc <vNDSendNeighbourSolicitation+0x1b8>
        {
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800b6d6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800b6d8:	f00b f876 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
        }
    }
 800b6dc:	bf00      	nop
 800b6de:	3740      	adds	r7, #64	@ 0x40
 800b6e0:	46bd      	mov	sp, r7
 800b6e2:	bdb0      	pop	{r4, r5, r7, pc}

0800b6e4 <pcMessageType>:
 * @param[in] xType The type of message.
 *
 * @return A null-terminated string that represents the type the kind of message.
 */
        static const char * pcMessageType( BaseType_t xType )
        {
 800b6e4:	b480      	push	{r7}
 800b6e6:	b085      	sub	sp, #20
 800b6e8:	af00      	add	r7, sp, #0
 800b6ea:	6078      	str	r0, [r7, #4]
            const char * pcReturn;

            switch( ( uint8_t ) xType )
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	b2db      	uxtb	r3, r3
 800b6f0:	2b04      	cmp	r3, #4
 800b6f2:	dc29      	bgt.n	800b748 <pcMessageType+0x64>
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	dc19      	bgt.n	800b72c <pcMessageType+0x48>
 800b6f8:	e049      	b.n	800b78e <pcMessageType+0xaa>
 800b6fa:	3b80      	subs	r3, #128	@ 0x80
 800b6fc:	2b08      	cmp	r3, #8
 800b6fe:	d846      	bhi.n	800b78e <pcMessageType+0xaa>
 800b700:	a201      	add	r2, pc, #4	@ (adr r2, 800b708 <pcMessageType+0x24>)
 800b702:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b706:	bf00      	nop
 800b708:	0800b76b 	.word	0x0800b76b
 800b70c:	0800b771 	.word	0x0800b771
 800b710:	0800b78f 	.word	0x0800b78f
 800b714:	0800b78f 	.word	0x0800b78f
 800b718:	0800b78f 	.word	0x0800b78f
 800b71c:	0800b777 	.word	0x0800b777
 800b720:	0800b77d 	.word	0x0800b77d
 800b724:	0800b783 	.word	0x0800b783
 800b728:	0800b789 	.word	0x0800b789
 800b72c:	3b01      	subs	r3, #1
 800b72e:	2b03      	cmp	r3, #3
 800b730:	d82d      	bhi.n	800b78e <pcMessageType+0xaa>
 800b732:	a201      	add	r2, pc, #4	@ (adr r2, 800b738 <pcMessageType+0x54>)
 800b734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b738:	0800b753 	.word	0x0800b753
 800b73c:	0800b759 	.word	0x0800b759
 800b740:	0800b75f 	.word	0x0800b75f
 800b744:	0800b765 	.word	0x0800b765
 800b748:	2b88      	cmp	r3, #136	@ 0x88
 800b74a:	dc20      	bgt.n	800b78e <pcMessageType+0xaa>
 800b74c:	2b80      	cmp	r3, #128	@ 0x80
 800b74e:	dad4      	bge.n	800b6fa <pcMessageType+0x16>
 800b750:	e01d      	b.n	800b78e <pcMessageType+0xaa>
            {
                case ipICMP_DEST_UNREACHABLE_IPv6:
                    pcReturn = "DEST_UNREACHABLE";
 800b752:	4b14      	ldr	r3, [pc, #80]	@ (800b7a4 <pcMessageType+0xc0>)
 800b754:	60fb      	str	r3, [r7, #12]
                    break;
 800b756:	e01d      	b.n	800b794 <pcMessageType+0xb0>

                case ipICMP_PACKET_TOO_BIG_IPv6:
                    pcReturn = "PACKET_TOO_BIG";
 800b758:	4b13      	ldr	r3, [pc, #76]	@ (800b7a8 <pcMessageType+0xc4>)
 800b75a:	60fb      	str	r3, [r7, #12]
                    break;
 800b75c:	e01a      	b.n	800b794 <pcMessageType+0xb0>

                case ipICMP_TIME_EXCEEDED_IPv6:
                    pcReturn = "TIME_EXCEEDED";
 800b75e:	4b13      	ldr	r3, [pc, #76]	@ (800b7ac <pcMessageType+0xc8>)
 800b760:	60fb      	str	r3, [r7, #12]
                    break;
 800b762:	e017      	b.n	800b794 <pcMessageType+0xb0>

                case ipICMP_PARAMETER_PROBLEM_IPv6:
                    pcReturn = "PARAMETER_PROBLEM";
 800b764:	4b12      	ldr	r3, [pc, #72]	@ (800b7b0 <pcMessageType+0xcc>)
 800b766:	60fb      	str	r3, [r7, #12]
                    break;
 800b768:	e014      	b.n	800b794 <pcMessageType+0xb0>

                case ipICMP_PING_REQUEST_IPv6:
                    pcReturn = "PING_REQUEST";
 800b76a:	4b12      	ldr	r3, [pc, #72]	@ (800b7b4 <pcMessageType+0xd0>)
 800b76c:	60fb      	str	r3, [r7, #12]
                    break;
 800b76e:	e011      	b.n	800b794 <pcMessageType+0xb0>

                case ipICMP_PING_REPLY_IPv6:
                    pcReturn = "PING_REPLY";
 800b770:	4b11      	ldr	r3, [pc, #68]	@ (800b7b8 <pcMessageType+0xd4>)
 800b772:	60fb      	str	r3, [r7, #12]
                    break;
 800b774:	e00e      	b.n	800b794 <pcMessageType+0xb0>

                case ipICMP_ROUTER_SOLICITATION_IPv6:
                    pcReturn = "ROUTER_SOL";
 800b776:	4b11      	ldr	r3, [pc, #68]	@ (800b7bc <pcMessageType+0xd8>)
 800b778:	60fb      	str	r3, [r7, #12]
                    break;
 800b77a:	e00b      	b.n	800b794 <pcMessageType+0xb0>

                case ipICMP_ROUTER_ADVERTISEMENT_IPv6:
                    pcReturn = "ROUTER_ADV";
 800b77c:	4b10      	ldr	r3, [pc, #64]	@ (800b7c0 <pcMessageType+0xdc>)
 800b77e:	60fb      	str	r3, [r7, #12]
                    break;
 800b780:	e008      	b.n	800b794 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_SOLICITATION_IPv6:
                    pcReturn = "NEIGHBOR_SOL";
 800b782:	4b10      	ldr	r3, [pc, #64]	@ (800b7c4 <pcMessageType+0xe0>)
 800b784:	60fb      	str	r3, [r7, #12]
                    break;
 800b786:	e005      	b.n	800b794 <pcMessageType+0xb0>

                case ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6:
                    pcReturn = "NEIGHBOR_ADV";
 800b788:	4b0f      	ldr	r3, [pc, #60]	@ (800b7c8 <pcMessageType+0xe4>)
 800b78a:	60fb      	str	r3, [r7, #12]
                    break;
 800b78c:	e002      	b.n	800b794 <pcMessageType+0xb0>

                default:
                    pcReturn = "UNKNOWN ICMP";
 800b78e:	4b0f      	ldr	r3, [pc, #60]	@ (800b7cc <pcMessageType+0xe8>)
 800b790:	60fb      	str	r3, [r7, #12]
                    break;
 800b792:	bf00      	nop
            }

            return pcReturn;
 800b794:	68fb      	ldr	r3, [r7, #12]
        }
 800b796:	4618      	mov	r0, r3
 800b798:	3714      	adds	r7, #20
 800b79a:	46bd      	mov	sp, r7
 800b79c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7a0:	4770      	bx	lr
 800b7a2:	bf00      	nop
 800b7a4:	08023f70 	.word	0x08023f70
 800b7a8:	08023f84 	.word	0x08023f84
 800b7ac:	08023f94 	.word	0x08023f94
 800b7b0:	08023fa4 	.word	0x08023fa4
 800b7b4:	08023fb8 	.word	0x08023fb8
 800b7b8:	08023fc8 	.word	0x08023fc8
 800b7bc:	08023fd4 	.word	0x08023fd4
 800b7c0:	08023fe0 	.word	0x08023fe0
 800b7c4:	08023fec 	.word	0x08023fec
 800b7c8:	08023ffc 	.word	0x08023ffc
 800b7cc:	0802400c 	.word	0x0802400c

0800b7d0 <prvCheckWaitingBuffer>:
 * @brief When a neighbour advertisement has been received, check if 'pxARPWaitingNetworkBuffer'
 *        was waiting for this new address look-up. If so, feed it to the IP-task as a new
 *        incoming packet.
 */
    static void prvCheckWaitingBuffer( const IPv6_Address_t * pxIPv6Address )
    {
 800b7d0:	b580      	push	{r7, lr}
 800b7d2:	b088      	sub	sp, #32
 800b7d4:	af00      	add	r7, sp, #0
 800b7d6:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const IPPacket_IPv6_t * pxIPPacket = ( ( IPPacket_IPv6_t * ) pxARPWaitingNetworkBuffer->pucEthernetBuffer );
 800b7d8:	4b19      	ldr	r3, [pc, #100]	@ (800b840 <prvCheckWaitingBuffer+0x70>)
 800b7da:	681b      	ldr	r3, [r3, #0]
 800b7dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b7de:	61fb      	str	r3, [r7, #28]
        const IPHeader_IPv6_t * pxIPHeader = &( pxIPPacket->xIPHeader );
 800b7e0:	69fb      	ldr	r3, [r7, #28]
 800b7e2:	330e      	adds	r3, #14
 800b7e4:	61bb      	str	r3, [r7, #24]

        if( memcmp( pxIPv6Address->ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800b7e6:	6878      	ldr	r0, [r7, #4]
 800b7e8:	69bb      	ldr	r3, [r7, #24]
 800b7ea:	3308      	adds	r3, #8
 800b7ec:	2210      	movs	r2, #16
 800b7ee:	4619      	mov	r1, r3
 800b7f0:	f016 fbf7 	bl	8021fe2 <memcmp>
 800b7f4:	4603      	mov	r3, r0
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d11d      	bne.n	800b836 <prvCheckWaitingBuffer+0x66>
        {
            IPStackEvent_t xEventMessage;
            const TickType_t xDontBlock = ( TickType_t ) 0;
 800b7fa:	2300      	movs	r3, #0
 800b7fc:	617b      	str	r3, [r7, #20]

            FreeRTOS_printf( ( "Waiting done\n" ) );
 800b7fe:	4811      	ldr	r0, [pc, #68]	@ (800b844 <prvCheckWaitingBuffer+0x74>)
 800b800:	f015 fa3e 	bl	8020c80 <lUDPLoggingPrintf>

            xEventMessage.eEventType = eNetworkRxEvent;
 800b804:	2301      	movs	r3, #1
 800b806:	733b      	strb	r3, [r7, #12]
            xEventMessage.pvData = ( void * ) pxARPWaitingNetworkBuffer;
 800b808:	4b0d      	ldr	r3, [pc, #52]	@ (800b840 <prvCheckWaitingBuffer+0x70>)
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	613b      	str	r3, [r7, #16]

            if( xSendEventStructToIPTask( &xEventMessage, xDontBlock ) != pdPASS )
 800b80e:	f107 030c 	add.w	r3, r7, #12
 800b812:	6979      	ldr	r1, [r7, #20]
 800b814:	4618      	mov	r0, r3
 800b816:	f7fd fa13 	bl	8008c40 <xSendEventStructToIPTask>
 800b81a:	4603      	mov	r3, r0
 800b81c:	2b01      	cmp	r3, #1
 800b81e:	d004      	beq.n	800b82a <prvCheckWaitingBuffer+0x5a>
            {
                /* Failed to send the message, so release the network buffer. */
                vReleaseNetworkBufferAndDescriptor( BUFFER_FROM_WHERE_CALL( 140 ) pxARPWaitingNetworkBuffer );
 800b820:	4b07      	ldr	r3, [pc, #28]	@ (800b840 <prvCheckWaitingBuffer+0x70>)
 800b822:	681b      	ldr	r3, [r3, #0]
 800b824:	4618      	mov	r0, r3
 800b826:	f00a ffcf 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
            }

            /* Clear the buffer. */
            pxARPWaitingNetworkBuffer = NULL;
 800b82a:	4b05      	ldr	r3, [pc, #20]	@ (800b840 <prvCheckWaitingBuffer+0x70>)
 800b82c:	2200      	movs	r2, #0
 800b82e:	601a      	str	r2, [r3, #0]

            /* Found an ARP resolution, disable ARP resolution timer. */
            vIPSetARPResolutionTimerEnableState( pdFALSE );
 800b830:	2000      	movs	r0, #0
 800b832:	f7fd fffb 	bl	800982c <vIPSetARPResolutionTimerEnableState>

            iptrace_DELAYED_ARP_REQUEST_REPLIED();
        }
    }
 800b836:	bf00      	nop
 800b838:	3720      	adds	r7, #32
 800b83a:	46bd      	mov	sp, r7
 800b83c:	bd80      	pop	{r7, pc}
 800b83e:	bf00      	nop
 800b840:	20000e98 	.word	0x20000e98
 800b844:	0802401c 	.word	0x0802401c

0800b848 <prvProcessICMPMessage_IPv6>:
 * @param[in] pxNetworkBuffer The Ethernet packet which contains an IPv6 message.
 *
 * @return A const value 'eReleaseBuffer' which means that the network must still be released.
 */
    eFrameProcessingResult_t prvProcessICMPMessage_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
    {
 800b848:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b84c:	b09e      	sub	sp, #120	@ 0x78
 800b84e:	af02      	add	r7, sp, #8
 800b850:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPPacket_IPv6_t * pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800b852:	687b      	ldr	r3, [r7, #4]
 800b854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b856:	65fb      	str	r3, [r7, #92]	@ 0x5c
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800b858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b85a:	3336      	adds	r3, #54	@ 0x36
 800b85c:	65bb      	str	r3, [r7, #88]	@ 0x58
        /* Note: pxNetworkBuffer->pxEndPoint is already verified to be non-NULL in prvProcessEthernetPacket() */
        NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b862:	657b      	str	r3, [r7, #84]	@ 0x54
        size_t uxNeededSize;

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            if( pxICMPHeader_IPv6->ucTypeOfMessage != ipICMP_PING_REQUEST_IPv6 )
 800b864:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b866:	781b      	ldrb	r3, [r3, #0]
 800b868:	2b80      	cmp	r3, #128	@ 0x80
 800b86a:	d01e      	beq.n	800b8aa <prvProcessICMPMessage_IPv6+0x62>
            {
                char pcAddress[ 40 ];
                FreeRTOS_printf( ( "ICMPv6_recv %d (%s) from %pip to %pip end-point = %s\n",
 800b86c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b86e:	781b      	ldrb	r3, [r3, #0]
 800b870:	4698      	mov	r8, r3
 800b872:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b874:	781b      	ldrb	r3, [r3, #0]
 800b876:	4618      	mov	r0, r3
 800b878:	f7ff ff34 	bl	800b6e4 <pcMessageType>
 800b87c:	4606      	mov	r6, r0
 800b87e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b880:	f103 0516 	add.w	r5, r3, #22
 800b884:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b886:	f103 0426 	add.w	r4, r3, #38	@ 0x26
 800b88a:	f107 030c 	add.w	r3, r7, #12
 800b88e:	2228      	movs	r2, #40	@ 0x28
 800b890:	4619      	mov	r1, r3
 800b892:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 800b894:	f001 fd5c 	bl	800d350 <pcEndpointName>
 800b898:	4603      	mov	r3, r0
 800b89a:	9301      	str	r3, [sp, #4]
 800b89c:	9400      	str	r4, [sp, #0]
 800b89e:	462b      	mov	r3, r5
 800b8a0:	4632      	mov	r2, r6
 800b8a2:	4641      	mov	r1, r8
 800b8a4:	48a7      	ldr	r0, [pc, #668]	@ (800bb44 <prvProcessICMPMessage_IPv6+0x2fc>)
 800b8a6:	f015 f9eb 	bl	8020c80 <lUDPLoggingPrintf>
                                   pcEndpointName( pxEndPoint, pcAddress, sizeof( pcAddress ) ) ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800b8aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b8ac:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800b8b0:	f003 0304 	and.w	r3, r3, #4
 800b8b4:	b2db      	uxtb	r3, r3
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	f000 813e 	beq.w	800bb38 <prvProcessICMPMessage_IPv6+0x2f0>
        {
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800b8bc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b8be:	781b      	ldrb	r3, [r3, #0]
 800b8c0:	2b04      	cmp	r3, #4
 800b8c2:	dc1d      	bgt.n	800b900 <prvProcessICMPMessage_IPv6+0xb8>
 800b8c4:	2b00      	cmp	r3, #0
 800b8c6:	f300 8130 	bgt.w	800bb2a <prvProcessICMPMessage_IPv6+0x2e2>
                            break;
                    #endif /* ( ipconfigUSE_RA != 0 ) */

                default:
                    /* All possible values are included here above. */
                    break;
 800b8ca:	e130      	b.n	800bb2e <prvProcessICMPMessage_IPv6+0x2e6>
            switch( pxICMPHeader_IPv6->ucTypeOfMessage )
 800b8cc:	3b80      	subs	r3, #128	@ 0x80
 800b8ce:	2b08      	cmp	r3, #8
 800b8d0:	f200 812d 	bhi.w	800bb2e <prvProcessICMPMessage_IPv6+0x2e6>
 800b8d4:	a201      	add	r2, pc, #4	@ (adr r2, 800b8dc <prvProcessICMPMessage_IPv6+0x94>)
 800b8d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b8da:	bf00      	nop
 800b8dc:	0800b90d 	.word	0x0800b90d
 800b8e0:	0800b955 	.word	0x0800b955
 800b8e4:	0800bb2f 	.word	0x0800bb2f
 800b8e8:	0800bb2f 	.word	0x0800bb2f
 800b8ec:	0800bb2f 	.word	0x0800bb2f
 800b8f0:	0800bb2f 	.word	0x0800bb2f
 800b8f4:	0800bb23 	.word	0x0800bb23
 800b8f8:	0800b9cb 	.word	0x0800b9cb
 800b8fc:	0800badb 	.word	0x0800badb
 800b900:	2b88      	cmp	r3, #136	@ 0x88
 800b902:	f300 8114 	bgt.w	800bb2e <prvProcessICMPMessage_IPv6+0x2e6>
 800b906:	2b80      	cmp	r3, #128	@ 0x80
 800b908:	dae0      	bge.n	800b8cc <prvProcessICMPMessage_IPv6+0x84>
                    break;
 800b90a:	e110      	b.n	800bb2e <prvProcessICMPMessage_IPv6+0x2e6>
                       usICMPSize = FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength );
 800b90c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b90e:	8a5b      	ldrh	r3, [r3, #18]
 800b910:	b29b      	uxth	r3, r3
 800b912:	021b      	lsls	r3, r3, #8
 800b914:	b21a      	sxth	r2, r3
 800b916:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b918:	8a5b      	ldrh	r3, [r3, #18]
 800b91a:	b29b      	uxth	r3, r3
 800b91c:	0a1b      	lsrs	r3, r3, #8
 800b91e:	b29b      	uxth	r3, r3
 800b920:	b21b      	sxth	r3, r3
 800b922:	4313      	orrs	r3, r2
 800b924:	b21b      	sxth	r3, r3
 800b926:	877b      	strh	r3, [r7, #58]	@ 0x3a
                       uxICMPSize = ( size_t ) usICMPSize;
 800b928:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800b92a:	637b      	str	r3, [r7, #52]	@ 0x34
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b92c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b92e:	3336      	adds	r3, #54	@ 0x36
 800b930:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b936:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800b938:	429a      	cmp	r2, r3
 800b93a:	d903      	bls.n	800b944 <prvProcessICMPMessage_IPv6+0xfc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800b93c:	4882      	ldr	r0, [pc, #520]	@ (800bb48 <prvProcessICMPMessage_IPv6+0x300>)
 800b93e:	f015 f99f 	bl	8020c80 <lUDPLoggingPrintf>
                           break;
 800b942:	e0f9      	b.n	800bb38 <prvProcessICMPMessage_IPv6+0x2f0>
                       pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_PING_REPLY_IPv6;
 800b944:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b946:	2281      	movs	r2, #129	@ 0x81
 800b948:	701a      	strb	r2, [r3, #0]
                       prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800b94a:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800b94c:	6878      	ldr	r0, [r7, #4]
 800b94e:	f7ff fdad 	bl	800b4ac <prvReturnICMP_IPv6>
                   break;
 800b952:	e0f1      	b.n	800bb38 <prvProcessICMPMessage_IPv6+0x2f0>
                               ePingReplyStatus_t eStatus = eSuccess;
 800b954:	2300      	movs	r3, #0
 800b956:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                               const ICMPEcho_IPv6_t * pxICMPEchoHeader = ( ( const ICMPEcho_IPv6_t * ) pxICMPHeader_IPv6 );
 800b95a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b95c:	643b      	str	r3, [r7, #64]	@ 0x40
                               uxDataLength = ipNUMERIC_CAST( size_t, FreeRTOS_ntohs( pxICMPPacket->xIPHeader.usPayloadLength ) );
 800b95e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b960:	8a5b      	ldrh	r3, [r3, #18]
 800b962:	b29b      	uxth	r3, r3
 800b964:	021b      	lsls	r3, r3, #8
 800b966:	b21a      	sxth	r2, r3
 800b968:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800b96a:	8a5b      	ldrh	r3, [r3, #18]
 800b96c:	b29b      	uxth	r3, r3
 800b96e:	0a1b      	lsrs	r3, r3, #8
 800b970:	b29b      	uxth	r3, r3
 800b972:	b21b      	sxth	r3, r3
 800b974:	4313      	orrs	r3, r2
 800b976:	b21b      	sxth	r3, r3
 800b978:	b29b      	uxth	r3, r3
 800b97a:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               uxDataLength = uxDataLength - sizeof( *pxICMPEchoHeader );
 800b97c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b97e:	3b08      	subs	r3, #8
 800b980:	63fb      	str	r3, [r7, #60]	@ 0x3c
                               pucByte = ( const uint8_t * ) pxICMPEchoHeader;
 800b982:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b984:	667b      	str	r3, [r7, #100]	@ 0x64
                               pucByte = &( pucByte[ sizeof( *pxICMPEchoHeader ) ] );
 800b986:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b988:	3308      	adds	r3, #8
 800b98a:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800b98c:	2300      	movs	r3, #0
 800b98e:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b990:	e00d      	b.n	800b9ae <prvProcessICMPMessage_IPv6+0x166>
                                   if( *pucByte != ( uint8_t ) ipECHO_DATA_FILL_BYTE )
 800b992:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b994:	781b      	ldrb	r3, [r3, #0]
 800b996:	2b78      	cmp	r3, #120	@ 0x78
 800b998:	d003      	beq.n	800b9a2 <prvProcessICMPMessage_IPv6+0x15a>
                                       eStatus = eInvalidData;
 800b99a:	2302      	movs	r3, #2
 800b99c:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
                                       break;
 800b9a0:	e009      	b.n	800b9b6 <prvProcessICMPMessage_IPv6+0x16e>
                                   pucByte++;
 800b9a2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800b9a4:	3301      	adds	r3, #1
 800b9a6:	667b      	str	r3, [r7, #100]	@ 0x64
                               for( uxCount = 0; uxCount < uxDataLength; uxCount++ )
 800b9a8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800b9aa:	3301      	adds	r3, #1
 800b9ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 800b9ae:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 800b9b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9b2:	429a      	cmp	r2, r3
 800b9b4:	d3ed      	bcc.n	800b992 <prvProcessICMPMessage_IPv6+0x14a>
                               vApplicationPingReplyHook( eStatus, pxICMPEchoHeader->usIdentifier );
 800b9b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800b9b8:	889b      	ldrh	r3, [r3, #4]
 800b9ba:	b29a      	uxth	r2, r3
 800b9bc:	f897 306f 	ldrb.w	r3, [r7, #111]	@ 0x6f
 800b9c0:	4611      	mov	r1, r2
 800b9c2:	4618      	mov	r0, r3
 800b9c4:	f7f5 fe0a 	bl	80015dc <vApplicationPingReplyHook>
                           break;
 800b9c8:	e0b6      	b.n	800bb38 <prvProcessICMPMessage_IPv6+0x2f0>
                       const NetworkEndPoint_t * pxTargetedEndPoint = pxEndPoint;
 800b9ca:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800b9cc:	663b      	str	r3, [r7, #96]	@ 0x60
                       const NetworkEndPoint_t * pxEndPointInSameSubnet = FreeRTOS_InterfaceEPInSameSubnet_IPv6( pxNetworkBuffer->pxInterface, &( pxICMPHeader_IPv6->xIPv6Address ) );
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9d2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9d4:	3308      	adds	r3, #8
 800b9d6:	4619      	mov	r1, r3
 800b9d8:	4610      	mov	r0, r2
 800b9da:	f001 f9cd 	bl	800cd78 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800b9de:	6538      	str	r0, [r7, #80]	@ 0x50
                       if( pxEndPointInSameSubnet != NULL )
 800b9e0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d002      	beq.n	800b9ec <prvProcessICMPMessage_IPv6+0x1a4>
                           pxTargetedEndPoint = pxEndPointInSameSubnet;
 800b9e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800b9e8:	663b      	str	r3, [r7, #96]	@ 0x60
 800b9ea:	e005      	b.n	800b9f8 <prvProcessICMPMessage_IPv6+0x1b0>
                           FreeRTOS_debug_printf( ( "prvProcessICMPMessage_IPv6: No match for %pip\n",
 800b9ec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800b9ee:	3308      	adds	r3, #8
 800b9f0:	4619      	mov	r1, r3
 800b9f2:	4856      	ldr	r0, [pc, #344]	@ (800bb4c <prvProcessICMPMessage_IPv6+0x304>)
 800b9f4:	f015 f944 	bl	8020c80 <lUDPLoggingPrintf>
                       uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800b9f8:	2320      	movs	r3, #32
 800b9fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
                       uxNeededSize = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800b9fc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800b9fe:	3336      	adds	r3, #54	@ 0x36
 800ba00:	64bb      	str	r3, [r7, #72]	@ 0x48
                       if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800ba02:	687b      	ldr	r3, [r7, #4]
 800ba04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ba06:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d903      	bls.n	800ba14 <prvProcessICMPMessage_IPv6+0x1cc>
                           FreeRTOS_printf( ( "Too small\n" ) );
 800ba0c:	484e      	ldr	r0, [pc, #312]	@ (800bb48 <prvProcessICMPMessage_IPv6+0x300>)
 800ba0e:	f015 f937 	bl	8020c80 <lUDPLoggingPrintf>
                           break;
 800ba12:	e091      	b.n	800bb38 <prvProcessICMPMessage_IPv6+0x2f0>
                       xCompare = memcmp( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800ba14:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba16:	f103 0008 	add.w	r0, r3, #8
 800ba1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800ba1c:	3338      	adds	r3, #56	@ 0x38
 800ba1e:	2210      	movs	r2, #16
 800ba20:	4619      	mov	r1, r3
 800ba22:	f016 fade 	bl	8021fe2 <memcmp>
 800ba26:	6478      	str	r0, [r7, #68]	@ 0x44
                       FreeRTOS_printf( ( "ND NS for %pip endpoint %pip %s\n",
 800ba28:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba2a:	f103 0108 	add.w	r1, r3, #8
 800ba2e:	687b      	ldr	r3, [r7, #4]
 800ba30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ba32:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ba36:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba38:	2b00      	cmp	r3, #0
 800ba3a:	d101      	bne.n	800ba40 <prvProcessICMPMessage_IPv6+0x1f8>
 800ba3c:	4b44      	ldr	r3, [pc, #272]	@ (800bb50 <prvProcessICMPMessage_IPv6+0x308>)
 800ba3e:	e000      	b.n	800ba42 <prvProcessICMPMessage_IPv6+0x1fa>
 800ba40:	4b44      	ldr	r3, [pc, #272]	@ (800bb54 <prvProcessICMPMessage_IPv6+0x30c>)
 800ba42:	4845      	ldr	r0, [pc, #276]	@ (800bb58 <prvProcessICMPMessage_IPv6+0x310>)
 800ba44:	f015 f91c 	bl	8020c80 <lUDPLoggingPrintf>
                       if( xCompare == 0 )
 800ba48:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	d171      	bne.n	800bb32 <prvProcessICMPMessage_IPv6+0x2ea>
                           pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800ba4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba50:	2288      	movs	r2, #136	@ 0x88
 800ba52:	701a      	strb	r2, [r3, #0]
                           pxICMPHeader_IPv6->ucTypeOfService = 0U;
 800ba54:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba56:	2200      	movs	r2, #0
 800ba58:	705a      	strb	r2, [r3, #1]
                           pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800ba5a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba5c:	2200      	movs	r2, #0
 800ba5e:	711a      	strb	r2, [r3, #4]
 800ba60:	2200      	movs	r2, #0
 800ba62:	715a      	strb	r2, [r3, #5]
 800ba64:	2200      	movs	r2, #0
 800ba66:	719a      	strb	r2, [r3, #6]
 800ba68:	2200      	movs	r2, #0
 800ba6a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800ba6e:	71da      	strb	r2, [r3, #7]
                           pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800ba70:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba72:	685b      	ldr	r3, [r3, #4]
 800ba74:	061a      	lsls	r2, r3, #24
 800ba76:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba78:	685b      	ldr	r3, [r3, #4]
 800ba7a:	021b      	lsls	r3, r3, #8
 800ba7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ba80:	431a      	orrs	r2, r3
 800ba82:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba84:	685b      	ldr	r3, [r3, #4]
 800ba86:	0a1b      	lsrs	r3, r3, #8
 800ba88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ba8c:	431a      	orrs	r2, r3
 800ba8e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba90:	685b      	ldr	r3, [r3, #4]
 800ba92:	0e1b      	lsrs	r3, r3, #24
 800ba94:	431a      	orrs	r2, r3
 800ba96:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba98:	605a      	str	r2, [r3, #4]
                           pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800ba9a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800ba9c:	2202      	movs	r2, #2
 800ba9e:	761a      	strb	r2, [r3, #24]
                           pxICMPHeader_IPv6->ucOptionLength = 1U;
 800baa0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baa2:	2201      	movs	r2, #1
 800baa4:	765a      	strb	r2, [r3, #25]
                           ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxTargetedEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800baa6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baa8:	f103 001a 	add.w	r0, r3, #26
 800baac:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800baae:	33e8      	adds	r3, #232	@ 0xe8
 800bab0:	2206      	movs	r2, #6
 800bab2:	4619      	mov	r1, r3
 800bab4:	f015 fb00 	bl	80210b8 <memcpy>
                           pxICMPPacket->xIPHeader.ucHopLimit = 255U;
 800bab8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800baba:	22ff      	movs	r2, #255	@ 0xff
 800babc:	755a      	strb	r2, [r3, #21]
                           ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxTargetedEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800babe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bac0:	f103 0008 	add.w	r0, r3, #8
 800bac4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800bac6:	3338      	adds	r3, #56	@ 0x38
 800bac8:	2210      	movs	r2, #16
 800baca:	4619      	mov	r1, r3
 800bacc:	f015 faf4 	bl	80210b8 <memcpy>
                           prvReturnICMP_IPv6( pxNetworkBuffer, uxICMPSize );
 800bad0:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 800bad2:	6878      	ldr	r0, [r7, #4]
 800bad4:	f7ff fcea 	bl	800b4ac <prvReturnICMP_IPv6>
                   break;
 800bad8:	e02b      	b.n	800bb32 <prvProcessICMPMessage_IPv6+0x2ea>
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800bada:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800badc:	f103 001a 	add.w	r0, r3, #26
                                          &( pxICMPHeader_IPv6->xIPv6Address ),
 800bae0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bae2:	3308      	adds	r3, #8
                    vNDRefreshCacheEntry( ( ( const MACAddress_t * ) pxICMPHeader_IPv6->ucOptionBytes ),
 800bae4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800bae6:	4619      	mov	r1, r3
 800bae8:	f7ff fb5e 	bl	800b1a8 <vNDRefreshCacheEntry>
                    FreeRTOS_printf( ( "NEIGHBOR_ADV from %pip\n",
 800baec:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800baee:	3308      	adds	r3, #8
 800baf0:	4619      	mov	r1, r3
 800baf2:	481a      	ldr	r0, [pc, #104]	@ (800bb5c <prvProcessICMPMessage_IPv6+0x314>)
 800baf4:	f015 f8c4 	bl	8020c80 <lUDPLoggingPrintf>
                        vReceiveNA( pxNetworkBuffer );
 800baf8:	6878      	ldr	r0, [r7, #4]
 800bafa:	f000 fa89 	bl	800c010 <vReceiveNA>
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800bafe:	4b18      	ldr	r3, [pc, #96]	@ (800bb60 <prvProcessICMPMessage_IPv6+0x318>)
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d017      	beq.n	800bb36 <prvProcessICMPMessage_IPv6+0x2ee>
                        ( uxIPHeaderSizePacket( pxARPWaitingNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER ) )
 800bb06:	4b16      	ldr	r3, [pc, #88]	@ (800bb60 <prvProcessICMPMessage_IPv6+0x318>)
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4618      	mov	r0, r3
 800bb0c:	f7fd fc4c 	bl	80093a8 <uxIPHeaderSizePacket>
 800bb10:	4603      	mov	r3, r0
                    if( ( pxARPWaitingNetworkBuffer != NULL ) &&
 800bb12:	2b28      	cmp	r3, #40	@ 0x28
 800bb14:	d10f      	bne.n	800bb36 <prvProcessICMPMessage_IPv6+0x2ee>
                        prvCheckWaitingBuffer( &( pxICMPHeader_IPv6->xIPv6Address ) );
 800bb16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800bb18:	3308      	adds	r3, #8
 800bb1a:	4618      	mov	r0, r3
 800bb1c:	f7ff fe58 	bl	800b7d0 <prvCheckWaitingBuffer>
                    break;
 800bb20:	e009      	b.n	800bb36 <prvProcessICMPMessage_IPv6+0x2ee>
                            vReceiveRA( pxNetworkBuffer );
 800bb22:	6878      	ldr	r0, [r7, #4]
 800bb24:	f000 fb9a 	bl	800c25c <vReceiveRA>
                            break;
 800bb28:	e006      	b.n	800bb38 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800bb2a:	bf00      	nop
 800bb2c:	e004      	b.n	800bb38 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800bb2e:	bf00      	nop
 800bb30:	e002      	b.n	800bb38 <prvProcessICMPMessage_IPv6+0x2f0>
                   break;
 800bb32:	bf00      	nop
 800bb34:	e000      	b.n	800bb38 <prvProcessICMPMessage_IPv6+0x2f0>
                    break;
 800bb36:	bf00      	nop
            } /* switch( pxICMPHeader_IPv6->ucTypeOfMessage ) */
        }     /* if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) */

        return eReleaseBuffer;
 800bb38:	2300      	movs	r3, #0
    }
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3770      	adds	r7, #112	@ 0x70
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb44:	0802402c 	.word	0x0802402c
 800bb48:	08024064 	.word	0x08024064
 800bb4c:	08024070 	.word	0x08024070
 800bb50:	080240a0 	.word	0x080240a0
 800bb54:	080240a8 	.word	0x080240a8
 800bb58:	080240b0 	.word	0x080240b0
 800bb5c:	080240d4 	.word	0x080240d4
 800bb60:	20000e98 	.word	0x20000e98

0800bb64 <FreeRTOS_OutputAdvertiseIPv6>:
    /* MISRA Ref 8.9.1 [File scoped variables] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-89 */
    /* coverity[misra_c_2012_rule_8_9_violation] */
    /* coverity[single_use] */
    void FreeRTOS_OutputAdvertiseIPv6( NetworkEndPoint_t * pxEndPoint )
    {
 800bb64:	b5b0      	push	{r4, r5, r7, lr}
 800bb66:	b088      	sub	sp, #32
 800bb68:	af00      	add	r7, sp, #0
 800bb6a:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxInterface;
        ICMPHeader_IPv6_t * pxICMPHeader_IPv6;
        size_t uxICMPSize;
        size_t uxPacketSize;

        uxPacketSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800bb6c:	2356      	movs	r3, #86	@ 0x56
 800bb6e:	61fb      	str	r3, [r7, #28]

        /* This is called from the context of the IP event task, so a block time
         * must not be used. */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPacketSize, ndDONT_BLOCK );
 800bb70:	2100      	movs	r1, #0
 800bb72:	69f8      	ldr	r0, [r7, #28]
 800bb74:	f00a fdc0 	bl	80166f8 <pxGetNetworkBufferWithDescriptor>
 800bb78:	61b8      	str	r0, [r7, #24]

        if( pxNetworkBuffer != NULL )
 800bb7a:	69bb      	ldr	r3, [r7, #24]
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f000 80b1 	beq.w	800bce4 <FreeRTOS_OutputAdvertiseIPv6+0x180>
        {
            ( void ) memset( pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800bb82:	69bb      	ldr	r3, [r7, #24]
 800bb84:	3314      	adds	r3, #20
 800bb86:	2210      	movs	r2, #16
 800bb88:	2100      	movs	r1, #0
 800bb8a:	4618      	mov	r0, r3
 800bb8c:	f015 fba1 	bl	80212d2 <memset>
            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	631a      	str	r2, [r3, #48]	@ 0x30

            pxInterface = pxEndPoint->pxNetworkInterface;
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bb9c:	617b      	str	r3, [r7, #20]

            configASSERT( pxInterface != NULL );
 800bb9e:	697b      	ldr	r3, [r7, #20]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	d104      	bne.n	800bbae <FreeRTOS_OutputAdvertiseIPv6+0x4a>
 800bba4:	f240 419e 	movw	r1, #1182	@ 0x49e
 800bba8:	4850      	ldr	r0, [pc, #320]	@ (800bcec <FreeRTOS_OutputAdvertiseIPv6+0x188>)
 800bbaa:	f7f5 fc61 	bl	8001470 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bbb2:	613b      	str	r3, [r7, #16]
            pxICMPHeader_IPv6 = ( ( ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	3336      	adds	r3, #54	@ 0x36
 800bbb8:	60fb      	str	r3, [r7, #12]

            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_MAC, ipMAC_ADDRESS_LENGTH_BYTES );
 800bbba:	693b      	ldr	r3, [r7, #16]
 800bbbc:	4a4c      	ldr	r2, [pc, #304]	@ (800bcf0 <FreeRTOS_OutputAdvertiseIPv6+0x18c>)
 800bbbe:	6810      	ldr	r0, [r2, #0]
 800bbc0:	6018      	str	r0, [r3, #0]
 800bbc2:	8892      	ldrh	r2, [r2, #4]
 800bbc4:	809a      	strh	r2, [r3, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bbc6:	693b      	ldr	r3, [r7, #16]
 800bbc8:	1d98      	adds	r0, r3, #6
 800bbca:	687b      	ldr	r3, [r7, #4]
 800bbcc:	33e8      	adds	r3, #232	@ 0xe8
 800bbce:	2206      	movs	r2, #6
 800bbd0:	4619      	mov	r1, r3
 800bbd2:	f015 fa71 	bl	80210b8 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE; /* 12 + 2 = 14 */
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	2200      	movs	r2, #0
 800bbda:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800bbde:	731a      	strb	r2, [r3, #12]
 800bbe0:	2200      	movs	r2, #0
 800bbe2:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800bbe6:	735a      	strb	r2, [r3, #13]

            pxICMPPacket->xIPHeader.ucVersionTrafficClass = 0x60;
 800bbe8:	693b      	ldr	r3, [r7, #16]
 800bbea:	2260      	movs	r2, #96	@ 0x60
 800bbec:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0;
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0;
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	2200      	movs	r2, #0
 800bbf8:	741a      	strb	r2, [r3, #16]
 800bbfa:	2200      	movs	r2, #0
 800bbfc:	745a      	strb	r2, [r3, #17]

            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPHeader_IPv6_t ) );
 800bbfe:	693b      	ldr	r3, [r7, #16]
 800bc00:	2200      	movs	r2, #0
 800bc02:	749a      	strb	r2, [r3, #18]
 800bc04:	2200      	movs	r2, #0
 800bc06:	f042 0220 	orr.w	r2, r2, #32
 800bc0a:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800bc0c:	693b      	ldr	r3, [r7, #16]
 800bc0e:	223a      	movs	r2, #58	@ 0x3a
 800bc10:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800bc12:	693b      	ldr	r3, [r7, #16]
 800bc14:	22ff      	movs	r2, #255	@ 0xff
 800bc16:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	f103 0016 	add.w	r0, r3, #22
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	3338      	adds	r3, #56	@ 0x38
 800bc22:	2210      	movs	r2, #16
 800bc24:	4619      	mov	r1, r3
 800bc26:	f015 fa47 	bl	80210b8 <memcpy>
            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pcLOCAL_ALL_NODES_MULTICAST_IP, ipSIZE_OF_IPv6_ADDRESS );
 800bc2a:	693b      	ldr	r3, [r7, #16]
 800bc2c:	3326      	adds	r3, #38	@ 0x26
 800bc2e:	4a31      	ldr	r2, [pc, #196]	@ (800bcf4 <FreeRTOS_OutputAdvertiseIPv6+0x190>)
 800bc30:	461c      	mov	r4, r3
 800bc32:	4615      	mov	r5, r2
 800bc34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800bc36:	6020      	str	r0, [r4, #0]
 800bc38:	6061      	str	r1, [r4, #4]
 800bc3a:	60a2      	str	r2, [r4, #8]
 800bc3c:	60e3      	str	r3, [r4, #12]

            uxICMPSize = sizeof( ICMPHeader_IPv6_t );
 800bc3e:	2320      	movs	r3, #32
 800bc40:	60bb      	str	r3, [r7, #8]
            pxICMPHeader_IPv6->ucTypeOfMessage = ipICMP_NEIGHBOR_ADVERTISEMENT_IPv6;
 800bc42:	68fb      	ldr	r3, [r7, #12]
 800bc44:	2288      	movs	r2, #136	@ 0x88
 800bc46:	701a      	strb	r2, [r3, #0]
            pxICMPHeader_IPv6->ucTypeOfService = 0;
 800bc48:	68fb      	ldr	r3, [r7, #12]
 800bc4a:	2200      	movs	r2, #0
 800bc4c:	705a      	strb	r2, [r3, #1]
            pxICMPHeader_IPv6->ulReserved = ndICMPv6_FLAG_SOLICITED | ndICMPv6_FLAG_UPDATE;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	2200      	movs	r2, #0
 800bc52:	711a      	strb	r2, [r3, #4]
 800bc54:	2200      	movs	r2, #0
 800bc56:	715a      	strb	r2, [r3, #5]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	719a      	strb	r2, [r3, #6]
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800bc62:	71da      	strb	r2, [r3, #7]
            pxICMPHeader_IPv6->ulReserved = FreeRTOS_htonl( pxICMPHeader_IPv6->ulReserved );
 800bc64:	68fb      	ldr	r3, [r7, #12]
 800bc66:	685b      	ldr	r3, [r3, #4]
 800bc68:	061a      	lsls	r2, r3, #24
 800bc6a:	68fb      	ldr	r3, [r7, #12]
 800bc6c:	685b      	ldr	r3, [r3, #4]
 800bc6e:	021b      	lsls	r3, r3, #8
 800bc70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800bc74:	431a      	orrs	r2, r3
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	685b      	ldr	r3, [r3, #4]
 800bc7a:	0a1b      	lsrs	r3, r3, #8
 800bc7c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800bc80:	431a      	orrs	r2, r3
 800bc82:	68fb      	ldr	r3, [r7, #12]
 800bc84:	685b      	ldr	r3, [r3, #4]
 800bc86:	0e1b      	lsrs	r3, r3, #24
 800bc88:	431a      	orrs	r2, r3
 800bc8a:	68fb      	ldr	r3, [r7, #12]
 800bc8c:	605a      	str	r2, [r3, #4]

            /* Type of option. */
            pxICMPHeader_IPv6->ucOptionType = ndICMP_TARGET_LINK_LAYER_ADDRESS;
 800bc8e:	68fb      	ldr	r3, [r7, #12]
 800bc90:	2202      	movs	r2, #2
 800bc92:	761a      	strb	r2, [r3, #24]
            /* Length of option in units of 8 bytes. */
            pxICMPHeader_IPv6->ucOptionLength = 1;
 800bc94:	68fb      	ldr	r3, [r7, #12]
 800bc96:	2201      	movs	r2, #1
 800bc98:	765a      	strb	r2, [r3, #25]
            ( void ) memcpy( pxICMPHeader_IPv6->ucOptionBytes, pxEndPoint->xMACAddress.ucBytes, sizeof( MACAddress_t ) );
 800bc9a:	68fb      	ldr	r3, [r7, #12]
 800bc9c:	f103 001a 	add.w	r0, r3, #26
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	33e8      	adds	r3, #232	@ 0xe8
 800bca4:	2206      	movs	r2, #6
 800bca6:	4619      	mov	r1, r3
 800bca8:	f015 fa06 	bl	80210b8 <memcpy>
            pxICMPPacket->xIPHeader.ucHopLimit = 255;
 800bcac:	693b      	ldr	r3, [r7, #16]
 800bcae:	22ff      	movs	r2, #255	@ 0xff
 800bcb0:	755a      	strb	r2, [r3, #21]
            ( void ) memcpy( pxICMPHeader_IPv6->xIPv6Address.ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, sizeof( pxICMPHeader_IPv6->xIPv6Address.ucBytes ) );
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	f103 0008 	add.w	r0, r3, #8
 800bcb8:	687b      	ldr	r3, [r7, #4]
 800bcba:	3338      	adds	r3, #56	@ 0x38
 800bcbc:	2210      	movs	r2, #16
 800bcbe:	4619      	mov	r1, r3
 800bcc0:	f015 f9fa 	bl	80210b8 <memcpy>

            /* Important: tell NIC driver how many bytes must be sent */
            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize );
 800bcc4:	68bb      	ldr	r3, [r7, #8]
 800bcc6:	f103 0236 	add.w	r2, r3, #54	@ 0x36
 800bcca:	69bb      	ldr	r3, [r7, #24]
 800bccc:	629a      	str	r2, [r3, #40]	@ 0x28
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                pxICMPHeader_IPv6->usChecksum = 0;
 800bcce:	68fb      	ldr	r3, [r7, #12]
 800bcd0:	2200      	movs	r2, #0
 800bcd2:	709a      	strb	r2, [r3, #2]
 800bcd4:	2200      	movs	r2, #0
 800bcd6:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* Set the parameter 'bReleaseAfterSend'. */
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 800bcd8:	697b      	ldr	r3, [r7, #20]
 800bcda:	68db      	ldr	r3, [r3, #12]
 800bcdc:	2201      	movs	r2, #1
 800bcde:	69b9      	ldr	r1, [r7, #24]
 800bce0:	6978      	ldr	r0, [r7, #20]
 800bce2:	4798      	blx	r3
        }
    }
 800bce4:	bf00      	nop
 800bce6:	3720      	adds	r7, #32
 800bce8:	46bd      	mov	sp, r7
 800bcea:	bdb0      	pop	{r4, r5, r7, pc}
 800bcec:	080240ec 	.word	0x080240ec
 800bcf0:	08026360 	.word	0x08026360
 800bcf4:	08026350 	.word	0x08026350

0800bcf8 <FreeRTOS_CreateIPv6Address>:
 */
    BaseType_t FreeRTOS_CreateIPv6Address( IPv6_Address_t * pxIPAddress,
                                           const IPv6_Address_t * pxPrefix,
                                           size_t uxPrefixLength,
                                           BaseType_t xDoRandom )
    {
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b090      	sub	sp, #64	@ 0x40
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
 800bd04:	603b      	str	r3, [r7, #0]
        uint32_t pulRandom[ 4 ];
        uint8_t * pucSource;
        BaseType_t xIndex, xResult = pdPASS;
 800bd06:	2301      	movs	r3, #1
 800bd08:	637b      	str	r3, [r7, #52]	@ 0x34

        if( xDoRandom != pdFALSE )
 800bd0a:	683b      	ldr	r3, [r7, #0]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d017      	beq.n	800bd40 <FreeRTOS_CreateIPv6Address+0x48>
            /* Create an IP-address, based on a net prefix and a
             * random host address.
             * ARRAY_SIZE_X() returns the size of an array as a
             * signed value ( BaseType_t ).
             */
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800bd10:	2300      	movs	r3, #0
 800bd12:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd14:	e010      	b.n	800bd38 <FreeRTOS_CreateIPv6Address+0x40>
            {
                if( xApplicationGetRandomNumber( &( pulRandom[ xIndex ] ) ) == pdFAIL )
 800bd16:	f107 0214 	add.w	r2, r7, #20
 800bd1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd1c:	009b      	lsls	r3, r3, #2
 800bd1e:	4413      	add	r3, r2
 800bd20:	4618      	mov	r0, r3
 800bd22:	f7f5 fc6f 	bl	8001604 <xApplicationGetRandomNumber>
 800bd26:	4603      	mov	r3, r0
 800bd28:	2b00      	cmp	r3, #0
 800bd2a:	d102      	bne.n	800bd32 <FreeRTOS_CreateIPv6Address+0x3a>
                {
                    xResult = pdFAIL;
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800bd30:	e00d      	b.n	800bd4e <FreeRTOS_CreateIPv6Address+0x56>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( pulRandom ); xIndex++ )
 800bd32:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd34:	3301      	adds	r3, #1
 800bd36:	63bb      	str	r3, [r7, #56]	@ 0x38
 800bd38:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bd3a:	2b03      	cmp	r3, #3
 800bd3c:	ddeb      	ble.n	800bd16 <FreeRTOS_CreateIPv6Address+0x1e>
 800bd3e:	e006      	b.n	800bd4e <FreeRTOS_CreateIPv6Address+0x56>
                }
            }
        }
        else
        {
            ( void ) memset( pulRandom, 0, sizeof( pulRandom ) );
 800bd40:	f107 0314 	add.w	r3, r7, #20
 800bd44:	2210      	movs	r2, #16
 800bd46:	2100      	movs	r1, #0
 800bd48:	4618      	mov	r0, r3
 800bd4a:	f015 fac2 	bl	80212d2 <memset>
        }

        if( xResult == pdPASS )
 800bd4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800bd50:	2b01      	cmp	r3, #1
 800bd52:	d167      	bne.n	800be24 <FreeRTOS_CreateIPv6Address+0x12c>
        {
            size_t uxIndex;
            /* A loopback IP-address has a prefix of 128. */
            configASSERT( ( uxPrefixLength > 0U ) && ( uxPrefixLength <= ( 8U * ipSIZE_OF_IPv6_ADDRESS ) ) );
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d004      	beq.n	800bd64 <FreeRTOS_CreateIPv6Address+0x6c>
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	2b80      	cmp	r3, #128	@ 0x80
 800bd5e:	d801      	bhi.n	800bd64 <FreeRTOS_CreateIPv6Address+0x6c>
 800bd60:	2301      	movs	r3, #1
 800bd62:	e000      	b.n	800bd66 <FreeRTOS_CreateIPv6Address+0x6e>
 800bd64:	2300      	movs	r3, #0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d104      	bne.n	800bd74 <FreeRTOS_CreateIPv6Address+0x7c>
 800bd6a:	f240 5105 	movw	r1, #1285	@ 0x505
 800bd6e:	4830      	ldr	r0, [pc, #192]	@ (800be30 <FreeRTOS_CreateIPv6Address+0x138>)
 800bd70:	f7f5 fb7e 	bl	8001470 <vAssertCalled>

            if( uxPrefixLength >= 8U )
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	2b07      	cmp	r3, #7
 800bd78:	d907      	bls.n	800bd8a <FreeRTOS_CreateIPv6Address+0x92>
            {
                ( void ) memcpy( pxIPAddress->ucBytes, pxPrefix->ucBytes, ( uxPrefixLength + 7U ) / 8U );
 800bd7a:	68f8      	ldr	r0, [r7, #12]
 800bd7c:	68b9      	ldr	r1, [r7, #8]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	3307      	adds	r3, #7
 800bd82:	08db      	lsrs	r3, r3, #3
 800bd84:	461a      	mov	r2, r3
 800bd86:	f015 f997 	bl	80210b8 <memcpy>
            }

            pucSource = ( uint8_t * ) pulRandom;
 800bd8a:	f107 0314 	add.w	r3, r7, #20
 800bd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxIndex = uxPrefixLength / 8U;
 800bd90:	687b      	ldr	r3, [r7, #4]
 800bd92:	08db      	lsrs	r3, r3, #3
 800bd94:	633b      	str	r3, [r7, #48]	@ 0x30

            if( ( uxPrefixLength % 8U ) != 0U )
 800bd96:	687b      	ldr	r3, [r7, #4]
 800bd98:	f003 0307 	and.w	r3, r3, #7
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d034      	beq.n	800be0a <FreeRTOS_CreateIPv6Address+0x112>
            {
                /* uxHostLen is between 1 and 7 bits long. */
                size_t uxHostLen = 8U - ( uxPrefixLength % 8U );
 800bda0:	687b      	ldr	r3, [r7, #4]
 800bda2:	f003 0307 	and.w	r3, r3, #7
 800bda6:	f1c3 0308 	rsb	r3, r3, #8
 800bdaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                uint32_t uxHostMask = ( ( ( uint32_t ) 1U ) << uxHostLen ) - 1U;
 800bdac:	2201      	movs	r2, #1
 800bdae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bdb0:	fa02 f303 	lsl.w	r3, r2, r3
 800bdb4:	3b01      	subs	r3, #1
 800bdb6:	62bb      	str	r3, [r7, #40]	@ 0x28
                uint8_t ucNetMask = ( uint8_t ) ~( uxHostMask );
 800bdb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdba:	b2db      	uxtb	r3, r3
 800bdbc:	43db      	mvns	r3, r3
 800bdbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

                pxIPAddress->ucBytes[ uxIndex ] &= ucNetMask;
 800bdc2:	68fa      	ldr	r2, [r7, #12]
 800bdc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdc6:	4413      	add	r3, r2
 800bdc8:	781a      	ldrb	r2, [r3, #0]
 800bdca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800bdce:	4013      	ands	r3, r2
 800bdd0:	b2d9      	uxtb	r1, r3
 800bdd2:	68fa      	ldr	r2, [r7, #12]
 800bdd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdd6:	4413      	add	r3, r2
 800bdd8:	460a      	mov	r2, r1
 800bdda:	701a      	strb	r2, [r3, #0]
                pxIPAddress->ucBytes[ uxIndex ] |= ( pucSource[ 0 ] & ( ( uint8_t ) uxHostMask ) );
 800bddc:	68fa      	ldr	r2, [r7, #12]
 800bdde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bde0:	4413      	add	r3, r2
 800bde2:	781a      	ldrb	r2, [r3, #0]
 800bde4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bde6:	7819      	ldrb	r1, [r3, #0]
 800bde8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bdea:	b2db      	uxtb	r3, r3
 800bdec:	400b      	ands	r3, r1
 800bdee:	b2db      	uxtb	r3, r3
 800bdf0:	4313      	orrs	r3, r2
 800bdf2:	b2d9      	uxtb	r1, r3
 800bdf4:	68fa      	ldr	r2, [r7, #12]
 800bdf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bdf8:	4413      	add	r3, r2
 800bdfa:	460a      	mov	r2, r1
 800bdfc:	701a      	strb	r2, [r3, #0]
                pucSource = &( pucSource[ 1 ] );
 800bdfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800be00:	3301      	adds	r3, #1
 800be02:	63fb      	str	r3, [r7, #60]	@ 0x3c
                uxIndex++;
 800be04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be06:	3301      	adds	r3, #1
 800be08:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            if( uxIndex < ipSIZE_OF_IPv6_ADDRESS )
 800be0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be0c:	2b0f      	cmp	r3, #15
 800be0e:	d809      	bhi.n	800be24 <FreeRTOS_CreateIPv6Address+0x12c>
            {
                ( void ) memcpy( &( pxIPAddress->ucBytes[ uxIndex ] ), pucSource, ipSIZE_OF_IPv6_ADDRESS - uxIndex );
 800be10:	68fa      	ldr	r2, [r7, #12]
 800be12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be14:	18d0      	adds	r0, r2, r3
 800be16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800be18:	f1c3 0310 	rsb	r3, r3, #16
 800be1c:	461a      	mov	r2, r3
 800be1e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800be20:	f015 f94a 	bl	80210b8 <memcpy>
            }
        }

        return xResult;
 800be24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800be26:	4618      	mov	r0, r3
 800be28:	3740      	adds	r7, #64	@ 0x40
 800be2a:	46bd      	mov	sp, r7
 800be2c:	bd80      	pop	{r7, pc}
 800be2e:	bf00      	nop
 800be30:	080240ec 	.word	0x080240ec

0800be34 <xGetLinkLocalAddress>:
 *
 * @return pdPASS in case a link-local address was found, otherwise pdFAIL.
 */
    static BaseType_t xGetLinkLocalAddress( const NetworkInterface_t * pxInterface,
                                            IPv6_Address_t * pxAddress )
    {
 800be34:	b580      	push	{r7, lr}
 800be36:	b084      	sub	sp, #16
 800be38:	af00      	add	r7, sp, #0
 800be3a:	6078      	str	r0, [r7, #4]
 800be3c:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFAIL;
 800be3e:	2300      	movs	r3, #0
 800be40:	60fb      	str	r3, [r7, #12]
        NetworkEndPoint_t * pxEndPoint;

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800be42:	6878      	ldr	r0, [r7, #4]
 800be44:	f000 fe48 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 800be48:	60b8      	str	r0, [r7, #8]
 800be4a:	e01a      	b.n	800be82 <xGetLinkLocalAddress+0x4e>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
        {
            /* Check if it has the link-local prefix FE80::/10 */
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800be52:	2bfe      	cmp	r3, #254	@ 0xfe
 800be54:	d110      	bne.n	800be78 <xGetLinkLocalAddress+0x44>
                ( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 1 ] & 0xc0U ) == 0x80U ) )
 800be56:	68bb      	ldr	r3, [r7, #8]
 800be58:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 800be5c:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
            if( ( pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 0 ] == 0xfeU ) &&
 800be60:	2b80      	cmp	r3, #128	@ 0x80
 800be62:	d109      	bne.n	800be78 <xGetLinkLocalAddress+0x44>
            {
                ( void ) memcpy( pxAddress->ucBytes, pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800be64:	6838      	ldr	r0, [r7, #0]
 800be66:	68bb      	ldr	r3, [r7, #8]
 800be68:	3338      	adds	r3, #56	@ 0x38
 800be6a:	2210      	movs	r2, #16
 800be6c:	4619      	mov	r1, r3
 800be6e:	f015 f923 	bl	80210b8 <memcpy>
                xResult = pdPASS;
 800be72:	2301      	movs	r3, #1
 800be74:	60fb      	str	r3, [r7, #12]
                break;
 800be76:	e007      	b.n	800be88 <xGetLinkLocalAddress+0x54>
             pxEndPoint = FreeRTOS_NextEndPoint( pxInterface, pxEndPoint ) )
 800be78:	68b9      	ldr	r1, [r7, #8]
 800be7a:	6878      	ldr	r0, [r7, #4]
 800be7c:	f000 fe4e 	bl	800cb1c <FreeRTOS_NextEndPoint>
 800be80:	60b8      	str	r0, [r7, #8]
             pxEndPoint != NULL;
 800be82:	68bb      	ldr	r3, [r7, #8]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d1e1      	bne.n	800be4c <xGetLinkLocalAddress+0x18>
            }
        }

        return xResult;
 800be88:	68fb      	ldr	r3, [r7, #12]
    }
 800be8a:	4618      	mov	r0, r3
 800be8c:	3710      	adds	r7, #16
 800be8e:	46bd      	mov	sp, r7
 800be90:	bd80      	pop	{r7, pc}
	...

0800be94 <vNDSendRouterSolicitation>:
 * @param[in] pxIPAddress The target address, normally ff02::2
 *
 */
    void vNDSendRouterSolicitation( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                    IPv6_Address_t * pxIPAddress )
    {
 800be94:	b5b0      	push	{r4, r5, r7, lr}
 800be96:	b090      	sub	sp, #64	@ 0x40
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
        ICMPPacket_IPv6_t * pxICMPPacket;
        ICMPRouterSolicitation_IPv6_t * xRASolicitationRequest;
        const NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800bea2:	63bb      	str	r3, [r7, #56]	@ 0x38
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800bea4:	233e      	movs	r3, #62	@ 0x3e
 800bea6:	637b      	str	r3, [r7, #52]	@ 0x34
        MACAddress_t xMultiCastMacAddress;
        NetworkBufferDescriptor_t * pxDescriptor = pxNetworkBuffer;
 800bea8:	687b      	ldr	r3, [r7, #4]
 800beaa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        IPv6_Address_t xSourceAddress;
        BaseType_t xHasLocal;
        NetworkBufferDescriptor_t * pxNewDescriptor = NULL;
 800beac:	2300      	movs	r3, #0
 800beae:	633b      	str	r3, [r7, #48]	@ 0x30

        configASSERT( pxEndPoint != NULL );
 800beb0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800beb2:	2b00      	cmp	r3, #0
 800beb4:	d103      	bne.n	800bebe <vNDSendRouterSolicitation+0x2a>
 800beb6:	218f      	movs	r1, #143	@ 0x8f
 800beb8:	4852      	ldr	r0, [pc, #328]	@ (800c004 <vNDSendRouterSolicitation+0x170>)
 800beba:	f7f5 fad9 	bl	8001470 <vAssertCalled>
        configASSERT( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED );
 800bebe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bec0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800bec4:	f003 0304 	and.w	r3, r3, #4
 800bec8:	b2db      	uxtb	r3, r3
 800beca:	2b00      	cmp	r3, #0
 800becc:	d103      	bne.n	800bed6 <vNDSendRouterSolicitation+0x42>
 800bece:	2190      	movs	r1, #144	@ 0x90
 800bed0:	484c      	ldr	r0, [pc, #304]	@ (800c004 <vNDSendRouterSolicitation+0x170>)
 800bed2:	f7f5 facd 	bl	8001470 <vAssertCalled>

        xHasLocal = xGetLinkLocalAddress( pxEndPoint->pxNetworkInterface, &( xSourceAddress ) );
 800bed6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bed8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800bedc:	f107 020c 	add.w	r2, r7, #12
 800bee0:	4611      	mov	r1, r2
 800bee2:	4618      	mov	r0, r3
 800bee4:	f7ff ffa6 	bl	800be34 <xGetLinkLocalAddress>
 800bee8:	62f8      	str	r0, [r7, #44]	@ 0x2c

        if( xHasLocal == pdFAIL )
 800beea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800beec:	2b00      	cmp	r3, #0
 800beee:	d10a      	bne.n	800bf06 <vNDSendRouterSolicitation+0x72>
        {
            FreeRTOS_printf( ( "RA: can not find a Link-local address\n" ) );
 800bef0:	4845      	ldr	r0, [pc, #276]	@ (800c008 <vNDSendRouterSolicitation+0x174>)
 800bef2:	f014 fec5 	bl	8020c80 <lUDPLoggingPrintf>
            ( void ) memset( xSourceAddress.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800bef6:	f107 030c 	add.w	r3, r7, #12
 800befa:	2210      	movs	r2, #16
 800befc:	2100      	movs	r1, #0
 800befe:	4618      	mov	r0, r3
 800bf00:	f015 f9e7 	bl	80212d2 <memset>
 800bf04:	e005      	b.n	800bf12 <vNDSendRouterSolicitation+0x7e>
        }
        else
        {
            FreeRTOS_printf( ( "RA: source %pip\n", ( void * ) xSourceAddress.ucBytes ) );
 800bf06:	f107 030c 	add.w	r3, r7, #12
 800bf0a:	4619      	mov	r1, r3
 800bf0c:	483f      	ldr	r0, [pc, #252]	@ (800c00c <vNDSendRouterSolicitation+0x178>)
 800bf0e:	f014 feb7 	bl	8020c80 <lUDPLoggingPrintf>
        }

        if( pxDescriptor->xDataLength < uxNeededSize )
 800bf12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf16:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf18:	429a      	cmp	r2, r3
 800bf1a:	d909      	bls.n	800bf30 <vNDSendRouterSolicitation+0x9c>
        {
            pxNewDescriptor = pxDuplicateNetworkBufferWithDescriptor( pxDescriptor, uxNeededSize );
 800bf1c:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 800bf1e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bf20:	f7fd fcf4 	bl	800990c <pxDuplicateNetworkBufferWithDescriptor>
 800bf24:	6338      	str	r0, [r7, #48]	@ 0x30
            vReleaseNetworkBufferAndDescriptor( pxDescriptor );
 800bf26:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bf28:	f00a fc4e 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
            pxDescriptor = pxNewDescriptor;
 800bf2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800bf2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        if( pxDescriptor != NULL )
 800bf30:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf32:	2b00      	cmp	r3, #0
 800bf34:	d062      	beq.n	800bffc <vNDSendRouterSolicitation+0x168>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxICMPPacket = ( ( ICMPPacket_IPv6_t * ) pxDescriptor->pucEthernetBuffer );
 800bf36:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800bf3a:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            xRASolicitationRequest = ( ( ICMPRouterSolicitation_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800bf3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf3e:	3336      	adds	r3, #54	@ 0x36
 800bf40:	627b      	str	r3, [r7, #36]	@ 0x24

            pxDescriptor->xDataLength = uxNeededSize;
 800bf42:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800bf44:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800bf46:	629a      	str	r2, [r3, #40]	@ 0x28

            ( void ) eNDGetCacheEntry( pxIPAddress, &( xMultiCastMacAddress ), NULL );
 800bf48:	f107 031c 	add.w	r3, r7, #28
 800bf4c:	2200      	movs	r2, #0
 800bf4e:	4619      	mov	r1, r3
 800bf50:	6838      	ldr	r0, [r7, #0]
 800bf52:	f7ff f87b 	bl	800b04c <eNDGetCacheEntry>

            /* Set Ethernet header. Will be swapped. */
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xSourceAddress.ucBytes, xMultiCastMacAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bf56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf58:	3306      	adds	r3, #6
 800bf5a:	461a      	mov	r2, r3
 800bf5c:	f107 031c 	add.w	r3, r7, #28
 800bf60:	6818      	ldr	r0, [r3, #0]
 800bf62:	6010      	str	r0, [r2, #0]
 800bf64:	889b      	ldrh	r3, [r3, #4]
 800bf66:	8093      	strh	r3, [r2, #4]
            ( void ) memcpy( pxICMPPacket->xEthernetHeader.xDestinationAddress.ucBytes, pxEndPoint->xMACAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800bf68:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800bf6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800bf6c:	33e8      	adds	r3, #232	@ 0xe8
 800bf6e:	2206      	movs	r2, #6
 800bf70:	4619      	mov	r1, r3
 800bf72:	f015 f8a1 	bl	80210b8 <memcpy>
            pxICMPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 800bf76:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf78:	2200      	movs	r2, #0
 800bf7a:	f062 0279 	orn	r2, r2, #121	@ 0x79
 800bf7e:	731a      	strb	r2, [r3, #12]
 800bf80:	2200      	movs	r2, #0
 800bf82:	f062 0222 	orn	r2, r2, #34	@ 0x22
 800bf86:	735a      	strb	r2, [r3, #13]

            /* Set IP-header. */
            pxICMPPacket->xIPHeader.ucVersionTrafficClass = raDEFAULT_VERSION_TRAFFIC_CLASS;
 800bf88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf8a:	2260      	movs	r2, #96	@ 0x60
 800bf8c:	739a      	strb	r2, [r3, #14]
            pxICMPPacket->xIPHeader.ucTrafficClassFlow = 0U;
 800bf8e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf90:	2200      	movs	r2, #0
 800bf92:	73da      	strb	r2, [r3, #15]
            pxICMPPacket->xIPHeader.usFlowLabel = 0U;
 800bf94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bf96:	2200      	movs	r2, #0
 800bf98:	741a      	strb	r2, [r3, #16]
 800bf9a:	2200      	movs	r2, #0
 800bf9c:	745a      	strb	r2, [r3, #17]
            pxICMPPacket->xIPHeader.usPayloadLength = FreeRTOS_htons( sizeof( ICMPRouterSolicitation_IPv6_t ) );
 800bf9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	749a      	strb	r2, [r3, #18]
 800bfa4:	2200      	movs	r2, #0
 800bfa6:	f042 0208 	orr.w	r2, r2, #8
 800bfaa:	74da      	strb	r2, [r3, #19]
            pxICMPPacket->xIPHeader.ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 800bfac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfae:	223a      	movs	r2, #58	@ 0x3a
 800bfb0:	751a      	strb	r2, [r3, #20]
            pxICMPPacket->xIPHeader.ucHopLimit = raDEFAULT_HOP_LIMIT;
 800bfb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfb4:	22ff      	movs	r2, #255	@ 0xff
 800bfb6:	755a      	strb	r2, [r3, #21]

            /* Normally, the source address is set as 'ipv6_settings.xIPAddress'.
             * But is some routers will not accept a public IP-address, the original
             * default address will be used. It must be a link-local address. */
            ( void ) memcpy( pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bfb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfba:	3316      	adds	r3, #22
 800bfbc:	461d      	mov	r5, r3
 800bfbe:	f107 040c 	add.w	r4, r7, #12
 800bfc2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800bfc4:	6028      	str	r0, [r5, #0]
 800bfc6:	6069      	str	r1, [r5, #4]
 800bfc8:	60aa      	str	r2, [r5, #8]
 800bfca:	60eb      	str	r3, [r5, #12]

            ( void ) memcpy( pxICMPPacket->xIPHeader.xDestinationAddress.ucBytes, pxIPAddress->ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800bfcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bfce:	3326      	adds	r3, #38	@ 0x26
 800bfd0:	6839      	ldr	r1, [r7, #0]
 800bfd2:	2210      	movs	r2, #16
 800bfd4:	4618      	mov	r0, r3
 800bfd6:	f015 f86f 	bl	80210b8 <memcpy>

            /* Set ICMP header. */
            ( void ) memset( xRASolicitationRequest, 0, sizeof( *xRASolicitationRequest ) );
 800bfda:	2208      	movs	r2, #8
 800bfdc:	2100      	movs	r1, #0
 800bfde:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800bfe0:	f015 f977 	bl	80212d2 <memset>
            xRASolicitationRequest->ucTypeOfMessage = ipICMP_ROUTER_SOLICITATION_IPv6;
 800bfe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfe6:	2285      	movs	r2, #133	@ 0x85
 800bfe8:	701a      	strb	r2, [r3, #0]
            }
            #else
            {
                /* Many EMAC peripherals will only calculate the ICMP checksum
                 * correctly if the field is nulled beforehand. */
                xRASolicitationRequest->usChecksum = 0U;
 800bfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfec:	2200      	movs	r2, #0
 800bfee:	709a      	strb	r2, [r3, #2]
 800bff0:	2200      	movs	r2, #0
 800bff2:	70da      	strb	r2, [r3, #3]
            }
            #endif

            /* This function will fill in the eth addresses and send the packet */
            vReturnEthernetFrame( pxDescriptor, pdTRUE );
 800bff4:	2101      	movs	r1, #1
 800bff6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800bff8:	f7fd f8d6 	bl	80091a8 <vReturnEthernetFrame>
        }
    }
 800bffc:	bf00      	nop
 800bffe:	3740      	adds	r7, #64	@ 0x40
 800c000:	46bd      	mov	sp, r7
 800c002:	bdb0      	pop	{r4, r5, r7, pc}
 800c004:	08024118 	.word	0x08024118
 800c008:	08024144 	.word	0x08024144
 800c00c:	0802416c 	.word	0x0802416c

0800c010 <vReceiveNA>:
 * @brief Receive a NA ( Neighbour Advertisement ) message to see if a chosen IP-address is already in use.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveNA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c010:	b580      	push	{r7, lr}
 800c012:	b086      	sub	sp, #24
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
        const NetworkInterface_t * pxInterface = pxNetworkBuffer->pxInterface;
 800c018:	687b      	ldr	r3, [r7, #4]
 800c01a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c01c:	613b      	str	r3, [r7, #16]
        NetworkEndPoint_t * pxPoint;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c022:	60fb      	str	r3, [r7, #12]
        const ICMPHeader_IPv6_t * pxICMPHeader_IPv6 = ( ( const ICMPHeader_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c024:	68fb      	ldr	r3, [r7, #12]
 800c026:	3336      	adds	r3, #54	@ 0x36
 800c028:	60bb      	str	r3, [r7, #8]

        for( pxPoint = FreeRTOS_FirstEndPoint( pxInterface );
 800c02a:	6938      	ldr	r0, [r7, #16]
 800c02c:	f000 fd54 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 800c030:	6178      	str	r0, [r7, #20]
 800c032:	e028      	b.n	800c086 <vReceiveNA+0x76>
             pxPoint != NULL;
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
        {
            if( ( pxPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxPoint->xRAData.eRAState == eRAStateIPWait ) )
 800c034:	697b      	ldr	r3, [r7, #20]
 800c036:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c03a:	f003 0302 	and.w	r3, r3, #2
 800c03e:	b2db      	uxtb	r3, r3
 800c040:	2b00      	cmp	r3, #0
 800c042:	d01b      	beq.n	800c07c <vReceiveNA+0x6c>
 800c044:	697b      	ldr	r3, [r7, #20]
 800c046:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c04a:	2b03      	cmp	r3, #3
 800c04c:	d116      	bne.n	800c07c <vReceiveNA+0x6c>
            {
                if( memcmp( pxPoint->ipv6_settings.xIPAddress.ucBytes, pxICMPHeader_IPv6->xIPv6Address.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 800c04e:	697b      	ldr	r3, [r7, #20]
 800c050:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c054:	68bb      	ldr	r3, [r7, #8]
 800c056:	3308      	adds	r3, #8
 800c058:	2210      	movs	r2, #16
 800c05a:	4619      	mov	r1, r3
 800c05c:	f015 ffc1 	bl	8021fe2 <memcmp>
 800c060:	4603      	mov	r3, r0
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10a      	bne.n	800c07c <vReceiveNA+0x6c>
                {
                    pxPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c06c:	f043 0302 	orr.w	r3, r3, #2
 800c070:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                    vDHCP_RATimerReload( pxPoint, 100U );
 800c074:	2164      	movs	r1, #100	@ 0x64
 800c076:	6978      	ldr	r0, [r7, #20]
 800c078:	f7fd fb3e 	bl	80096f8 <vDHCP_RATimerReload>
             pxPoint = FreeRTOS_NextEndPoint( pxInterface, pxPoint ) )
 800c07c:	6979      	ldr	r1, [r7, #20]
 800c07e:	6938      	ldr	r0, [r7, #16]
 800c080:	f000 fd4c 	bl	800cb1c <FreeRTOS_NextEndPoint>
 800c084:	6178      	str	r0, [r7, #20]
             pxPoint != NULL;
 800c086:	697b      	ldr	r3, [r7, #20]
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d1d3      	bne.n	800c034 <vReceiveNA+0x24>
                }
            }
        }
    }
 800c08c:	bf00      	nop
 800c08e:	bf00      	nop
 800c090:	3718      	adds	r7, #24
 800c092:	46bd      	mov	sp, r7
 800c094:	bd80      	pop	{r7, pc}
	...

0800c098 <vReceiveRA_ReadReply>:
 *
 * @returns Returns the ICMP prefix option pointer, pointing to its location in the
 *          input RA reply message buffer.
 */
    static ICMPPrefixOption_IPv6_t * vReceiveRA_ReadReply( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c09a:	b091      	sub	sp, #68	@ 0x44
 800c09c:	af04      	add	r7, sp, #16
 800c09e:	6078      	str	r0, [r7, #4]
        size_t uxIndex = 0U;
 800c0a0:	2300      	movs	r3, #0
 800c0a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800c0a4:	2310      	movs	r3, #16
 800c0a6:	627b      	str	r3, [r7, #36]	@ 0x24
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800c0a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0aa:	3336      	adds	r3, #54	@ 0x36
 800c0ac:	623b      	str	r3, [r7, #32]
        /* uxLast points to the first byte after the buffer. */
        const size_t uxLast = pxNetworkBuffer->xDataLength - uxNeededSize;
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c0b2:	6a3b      	ldr	r3, [r7, #32]
 800c0b4:	1ad3      	subs	r3, r2, r3
 800c0b6:	61fb      	str	r3, [r7, #28]
        uint8_t * pucBytes = &( pxNetworkBuffer->pucEthernetBuffer[ uxNeededSize ] );
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0bc:	6a3b      	ldr	r3, [r7, #32]
 800c0be:	4413      	add	r3, r2
 800c0c0:	61bb      	str	r3, [r7, #24]
        ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	62bb      	str	r3, [r7, #40]	@ 0x28

        while( ( uxIndex + 1U ) < uxLast )
 800c0c6:	e0b2      	b.n	800c22e <vReceiveRA_ReadReply+0x196>
        {
            uint8_t ucType = pucBytes[ uxIndex ];
 800c0c8:	69ba      	ldr	r2, [r7, #24]
 800c0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0cc:	4413      	add	r3, r2
 800c0ce:	781b      	ldrb	r3, [r3, #0]
 800c0d0:	75fb      	strb	r3, [r7, #23]
            size_t uxPrefixLength = ( size_t ) pucBytes[ uxIndex + 1U ];
 800c0d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0d4:	3301      	adds	r3, #1
 800c0d6:	69ba      	ldr	r2, [r7, #24]
 800c0d8:	4413      	add	r3, r2
 800c0da:	781b      	ldrb	r3, [r3, #0]
 800c0dc:	613b      	str	r3, [r7, #16]
            size_t uxLength = uxPrefixLength * 8U;
 800c0de:	693b      	ldr	r3, [r7, #16]
 800c0e0:	00db      	lsls	r3, r3, #3
 800c0e2:	60fb      	str	r3, [r7, #12]

            if( uxPrefixLength == 0U )
 800c0e4:	693b      	ldr	r3, [r7, #16]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d103      	bne.n	800c0f2 <vReceiveRA_ReadReply+0x5a>
            {
                /* According to RFC 4861, length of the option value 0 is invalid. Hence returning from here */
                FreeRTOS_printf( ( "RA: Invalid length of the option value as zero. " ) );
 800c0ea:	4856      	ldr	r0, [pc, #344]	@ (800c244 <vReceiveRA_ReadReply+0x1ac>)
 800c0ec:	f014 fdc8 	bl	8020c80 <lUDPLoggingPrintf>
                break;
 800c0f0:	e0a3      	b.n	800c23a <vReceiveRA_ReadReply+0x1a2>
            }

            if( uxLast < ( uxIndex + uxLength ) )
 800c0f2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0f4:	68fb      	ldr	r3, [r7, #12]
 800c0f6:	4413      	add	r3, r2
 800c0f8:	69fa      	ldr	r2, [r7, #28]
 800c0fa:	429a      	cmp	r2, r3
 800c0fc:	d208      	bcs.n	800c110 <vReceiveRA_ReadReply+0x78>
            {
                FreeRTOS_printf( ( "RA: Not enough bytes ( %u > %u )\n", ( unsigned ) ( uxIndex + uxLength ), ( unsigned ) uxLast ) );
 800c0fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c100:	68fb      	ldr	r3, [r7, #12]
 800c102:	4413      	add	r3, r2
 800c104:	69fa      	ldr	r2, [r7, #28]
 800c106:	4619      	mov	r1, r3
 800c108:	484f      	ldr	r0, [pc, #316]	@ (800c248 <vReceiveRA_ReadReply+0x1b0>)
 800c10a:	f014 fdb9 	bl	8020c80 <lUDPLoggingPrintf>
                break;
 800c10e:	e094      	b.n	800c23a <vReceiveRA_ReadReply+0x1a2>
            }

            switch( ucType )
 800c110:	7dfb      	ldrb	r3, [r7, #23]
 800c112:	3b01      	subs	r3, #1
 800c114:	2b04      	cmp	r3, #4
 800c116:	d87f      	bhi.n	800c218 <vReceiveRA_ReadReply+0x180>
 800c118:	a201      	add	r2, pc, #4	@ (adr r2, 800c120 <vReceiveRA_ReadReply+0x88>)
 800c11a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c11e:	bf00      	nop
 800c120:	0800c135 	.word	0x0800c135
 800c124:	0800c225 	.word	0x0800c225
 800c128:	0800c18f 	.word	0x0800c18f
 800c12c:	0800c225 	.word	0x0800c225
 800c130:	0800c1ff 	.word	0x0800c1ff
            {
                case ndICMP_SOURCE_LINK_LAYER_ADDRESS: /* 1 */
                    FreeRTOS_printf( ( "RA: Source = %02x-%02x-%02x-%02x-%02x-%02x\n",
 800c134:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c136:	3302      	adds	r3, #2
 800c138:	69ba      	ldr	r2, [r7, #24]
 800c13a:	4413      	add	r3, r2
 800c13c:	781b      	ldrb	r3, [r3, #0]
 800c13e:	461c      	mov	r4, r3
 800c140:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c142:	3303      	adds	r3, #3
 800c144:	69ba      	ldr	r2, [r7, #24]
 800c146:	4413      	add	r3, r2
 800c148:	781b      	ldrb	r3, [r3, #0]
 800c14a:	461d      	mov	r5, r3
 800c14c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c14e:	3304      	adds	r3, #4
 800c150:	69ba      	ldr	r2, [r7, #24]
 800c152:	4413      	add	r3, r2
 800c154:	781b      	ldrb	r3, [r3, #0]
 800c156:	461e      	mov	r6, r3
 800c158:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c15a:	3305      	adds	r3, #5
 800c15c:	69ba      	ldr	r2, [r7, #24]
 800c15e:	4413      	add	r3, r2
 800c160:	781b      	ldrb	r3, [r3, #0]
 800c162:	4619      	mov	r1, r3
 800c164:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c166:	3306      	adds	r3, #6
 800c168:	69ba      	ldr	r2, [r7, #24]
 800c16a:	4413      	add	r3, r2
 800c16c:	781b      	ldrb	r3, [r3, #0]
 800c16e:	4618      	mov	r0, r3
 800c170:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c172:	3307      	adds	r3, #7
 800c174:	69ba      	ldr	r2, [r7, #24]
 800c176:	4413      	add	r3, r2
 800c178:	781b      	ldrb	r3, [r3, #0]
 800c17a:	9302      	str	r3, [sp, #8]
 800c17c:	9001      	str	r0, [sp, #4]
 800c17e:	9100      	str	r1, [sp, #0]
 800c180:	4633      	mov	r3, r6
 800c182:	462a      	mov	r2, r5
 800c184:	4621      	mov	r1, r4
 800c186:	4831      	ldr	r0, [pc, #196]	@ (800c24c <vReceiveRA_ReadReply+0x1b4>)
 800c188:	f014 fd7a 	bl	8020c80 <lUDPLoggingPrintf>
                                       pucBytes[ uxIndex + 3U ],
                                       pucBytes[ uxIndex + 4U ],
                                       pucBytes[ uxIndex + 5U ],
                                       pucBytes[ uxIndex + 6U ],
                                       pucBytes[ uxIndex + 7U ] ) );
                    break;
 800c18c:	e04b      	b.n	800c226 <vReceiveRA_ReadReply+0x18e>

                case ndICMP_PREFIX_INFORMATION: /* 3 */
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxPrefixOption = ( ( ICMPPrefixOption_IPv6_t * ) &( pucBytes[ uxIndex ] ) );
 800c18e:	69ba      	ldr	r2, [r7, #24]
 800c190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c192:	4413      	add	r3, r2
 800c194:	62bb      	str	r3, [r7, #40]	@ 0x28

                    FreeRTOS_printf( ( "RA: Prefix len %d Life %u, %u (%pip)\n",
 800c196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c198:	789b      	ldrb	r3, [r3, #2]
 800c19a:	4618      	mov	r0, r3
 800c19c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	061a      	lsls	r2, r3, #24
 800c1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a4:	685b      	ldr	r3, [r3, #4]
 800c1a6:	021b      	lsls	r3, r3, #8
 800c1a8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c1ac:	431a      	orrs	r2, r3
 800c1ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b0:	685b      	ldr	r3, [r3, #4]
 800c1b2:	0a1b      	lsrs	r3, r3, #8
 800c1b4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c1b8:	431a      	orrs	r2, r3
 800c1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1bc:	685b      	ldr	r3, [r3, #4]
 800c1be:	0e1b      	lsrs	r3, r3, #24
 800c1c0:	ea42 0103 	orr.w	r1, r2, r3
 800c1c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c6:	689b      	ldr	r3, [r3, #8]
 800c1c8:	061a      	lsls	r2, r3, #24
 800c1ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1cc:	689b      	ldr	r3, [r3, #8]
 800c1ce:	021b      	lsls	r3, r3, #8
 800c1d0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c1d4:	431a      	orrs	r2, r3
 800c1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1d8:	689b      	ldr	r3, [r3, #8]
 800c1da:	0a1b      	lsrs	r3, r3, #8
 800c1dc:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c1e0:	431a      	orrs	r2, r3
 800c1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	0e1b      	lsrs	r3, r3, #24
 800c1e8:	431a      	orrs	r2, r3
 800c1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ec:	3310      	adds	r3, #16
 800c1ee:	9300      	str	r3, [sp, #0]
 800c1f0:	4613      	mov	r3, r2
 800c1f2:	460a      	mov	r2, r1
 800c1f4:	4601      	mov	r1, r0
 800c1f6:	4816      	ldr	r0, [pc, #88]	@ (800c250 <vReceiveRA_ReadReply+0x1b8>)
 800c1f8:	f014 fd42 	bl	8020c80 <lUDPLoggingPrintf>
                                       pxPrefixOption->ucPrefixLength,
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulValidLifeTime ),
                                       ( unsigned ) FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime ),
                                       ( void * ) pxPrefixOption->ucPrefix ) );
                    break;
 800c1fc:	e013      	b.n	800c226 <vReceiveRA_ReadReply+0x18e>
                   {
                       uint32_t ulMTU;
                       ( void ) ulMTU;

                       /* ulChar2u32 returns host-endian numbers. */
                       ulMTU = ulChar2u32( &( pucBytes[ uxIndex + 4U ] ) );
 800c1fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c200:	3304      	adds	r3, #4
 800c202:	69ba      	ldr	r2, [r7, #24]
 800c204:	4413      	add	r3, r2
 800c206:	4618      	mov	r0, r3
 800c208:	f7fd fe60 	bl	8009ecc <ulChar2u32>
 800c20c:	60b8      	str	r0, [r7, #8]
                       FreeRTOS_printf( ( "RA: MTU = %u\n", ( unsigned int ) ulMTU ) );
 800c20e:	68b9      	ldr	r1, [r7, #8]
 800c210:	4810      	ldr	r0, [pc, #64]	@ (800c254 <vReceiveRA_ReadReply+0x1bc>)
 800c212:	f014 fd35 	bl	8020c80 <lUDPLoggingPrintf>
                   }
                   break;
 800c216:	e006      	b.n	800c226 <vReceiveRA_ReadReply+0x18e>

                default:
                    FreeRTOS_printf( ( "RA: Type 0x%02x not implemented\n", ucType ) );
 800c218:	7dfb      	ldrb	r3, [r7, #23]
 800c21a:	4619      	mov	r1, r3
 800c21c:	480e      	ldr	r0, [pc, #56]	@ (800c258 <vReceiveRA_ReadReply+0x1c0>)
 800c21e:	f014 fd2f 	bl	8020c80 <lUDPLoggingPrintf>
                    break;
 800c222:	e000      	b.n	800c226 <vReceiveRA_ReadReply+0x18e>
                    break;
 800c224:	bf00      	nop
            }

            uxIndex = uxIndex + uxLength;
 800c226:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	4413      	add	r3, r2
 800c22c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( ( uxIndex + 1U ) < uxLast )
 800c22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c230:	3301      	adds	r3, #1
 800c232:	69fa      	ldr	r2, [r7, #28]
 800c234:	429a      	cmp	r2, r3
 800c236:	f63f af47 	bhi.w	800c0c8 <vReceiveRA_ReadReply+0x30>
        } /* while( ( uxIndex + 1 ) < uxLast ) */

        return pxPrefixOption;
 800c23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
    }
 800c23c:	4618      	mov	r0, r3
 800c23e:	3734      	adds	r7, #52	@ 0x34
 800c240:	46bd      	mov	sp, r7
 800c242:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c244:	08024180 	.word	0x08024180
 800c248:	080241b4 	.word	0x080241b4
 800c24c:	080241d8 	.word	0x080241d8
 800c250:	08024204 	.word	0x08024204
 800c254:	0802422c 	.word	0x0802422c
 800c258:	0802423c 	.word	0x0802423c

0800c25c <vReceiveRA>:
 *        already exists that uses the same IP-address.
 *
 * @param[in] pxNetworkBuffer The buffer that contains the message.
 */
    void vReceiveRA( const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 800c25c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c25e:	b08d      	sub	sp, #52	@ 0x34
 800c260:	af04      	add	r7, sp, #16
 800c262:	6078      	str	r0, [r7, #4]
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ICMPPacket_IPv6_t * pxICMPPacket = ( ( const ICMPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c268:	61bb      	str	r3, [r7, #24]
        const ICMPPrefixOption_IPv6_t * pxPrefixOption = NULL;
 800c26a:	2300      	movs	r3, #0
 800c26c:	617b      	str	r3, [r7, #20]
        const size_t uxICMPSize = sizeof( ICMPRouterAdvertisement_IPv6_t );
 800c26e:	2310      	movs	r3, #16
 800c270:	613b      	str	r3, [r7, #16]
        const size_t uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + uxICMPSize;
 800c272:	693b      	ldr	r3, [r7, #16]
 800c274:	3336      	adds	r3, #54	@ 0x36
 800c276:	60fb      	str	r3, [r7, #12]

        /* A Router Advertisement was received, handle it here. */
        if( uxNeededSize > pxNetworkBuffer->xDataLength )
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c27c:	68fa      	ldr	r2, [r7, #12]
 800c27e:	429a      	cmp	r2, r3
 800c280:	d903      	bls.n	800c28a <vReceiveRA+0x2e>
        {
            FreeRTOS_printf( ( "vReceiveRA: The buffer provided is too small\n" ) );
 800c282:	485b      	ldr	r0, [pc, #364]	@ (800c3f0 <vReceiveRA+0x194>)
 800c284:	f014 fcfc 	bl	8020c80 <lUDPLoggingPrintf>
            else
            {
                /* The life-time field contains zero. */
            }
        }
    }
 800c288:	e0ae      	b.n	800c3e8 <vReceiveRA+0x18c>
            const ICMPRouterAdvertisement_IPv6_t * pxAdvertisement = ( ( const ICMPRouterAdvertisement_IPv6_t * ) &( pxICMPPacket->xICMPHeaderIPv6 ) );
 800c28a:	69bb      	ldr	r3, [r7, #24]
 800c28c:	3336      	adds	r3, #54	@ 0x36
 800c28e:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "RA: Type %02x Srv %02x Checksum %04x Hops %d Flags %02x Life %d\n",
 800c290:	68bb      	ldr	r3, [r7, #8]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	461c      	mov	r4, r3
 800c296:	68bb      	ldr	r3, [r7, #8]
 800c298:	785b      	ldrb	r3, [r3, #1]
 800c29a:	461d      	mov	r5, r3
 800c29c:	68bb      	ldr	r3, [r7, #8]
 800c29e:	885b      	ldrh	r3, [r3, #2]
 800c2a0:	b29b      	uxth	r3, r3
 800c2a2:	021b      	lsls	r3, r3, #8
 800c2a4:	b21a      	sxth	r2, r3
 800c2a6:	68bb      	ldr	r3, [r7, #8]
 800c2a8:	885b      	ldrh	r3, [r3, #2]
 800c2aa:	b29b      	uxth	r3, r3
 800c2ac:	0a1b      	lsrs	r3, r3, #8
 800c2ae:	b29b      	uxth	r3, r3
 800c2b0:	b21b      	sxth	r3, r3
 800c2b2:	4313      	orrs	r3, r2
 800c2b4:	b21b      	sxth	r3, r3
 800c2b6:	b29b      	uxth	r3, r3
 800c2b8:	461e      	mov	r6, r3
 800c2ba:	68bb      	ldr	r3, [r7, #8]
 800c2bc:	791b      	ldrb	r3, [r3, #4]
 800c2be:	4619      	mov	r1, r3
 800c2c0:	68bb      	ldr	r3, [r7, #8]
 800c2c2:	795b      	ldrb	r3, [r3, #5]
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	68bb      	ldr	r3, [r7, #8]
 800c2c8:	88db      	ldrh	r3, [r3, #6]
 800c2ca:	b29b      	uxth	r3, r3
 800c2cc:	021b      	lsls	r3, r3, #8
 800c2ce:	b21a      	sxth	r2, r3
 800c2d0:	68bb      	ldr	r3, [r7, #8]
 800c2d2:	88db      	ldrh	r3, [r3, #6]
 800c2d4:	b29b      	uxth	r3, r3
 800c2d6:	0a1b      	lsrs	r3, r3, #8
 800c2d8:	b29b      	uxth	r3, r3
 800c2da:	b21b      	sxth	r3, r3
 800c2dc:	4313      	orrs	r3, r2
 800c2de:	b21b      	sxth	r3, r3
 800c2e0:	b29b      	uxth	r3, r3
 800c2e2:	9302      	str	r3, [sp, #8]
 800c2e4:	9001      	str	r0, [sp, #4]
 800c2e6:	9100      	str	r1, [sp, #0]
 800c2e8:	4633      	mov	r3, r6
 800c2ea:	462a      	mov	r2, r5
 800c2ec:	4621      	mov	r1, r4
 800c2ee:	4841      	ldr	r0, [pc, #260]	@ (800c3f4 <vReceiveRA+0x198>)
 800c2f0:	f014 fcc6 	bl	8020c80 <lUDPLoggingPrintf>
            if( pxAdvertisement->usLifetime != 0U )
 800c2f4:	68bb      	ldr	r3, [r7, #8]
 800c2f6:	88db      	ldrh	r3, [r3, #6]
 800c2f8:	b29b      	uxth	r3, r3
 800c2fa:	2b00      	cmp	r3, #0
 800c2fc:	d074      	beq.n	800c3e8 <vReceiveRA+0x18c>
                pxPrefixOption = vReceiveRA_ReadReply( pxNetworkBuffer );
 800c2fe:	6878      	ldr	r0, [r7, #4]
 800c300:	f7ff feca 	bl	800c098 <vReceiveRA_ReadReply>
 800c304:	6178      	str	r0, [r7, #20]
                configASSERT( pxNetworkBuffer->pxInterface != NULL );
 800c306:	687b      	ldr	r3, [r7, #4]
 800c308:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d104      	bne.n	800c318 <vReceiveRA+0xbc>
 800c30e:	f240 118b 	movw	r1, #395	@ 0x18b
 800c312:	4839      	ldr	r0, [pc, #228]	@ (800c3f8 <vReceiveRA+0x19c>)
 800c314:	f7f5 f8ac 	bl	8001470 <vAssertCalled>
                if( pxPrefixOption != NULL )
 800c318:	697b      	ldr	r3, [r7, #20]
 800c31a:	2b00      	cmp	r3, #0
 800c31c:	d064      	beq.n	800c3e8 <vReceiveRA+0x18c>
                    for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkBuffer->pxInterface );
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c322:	4618      	mov	r0, r3
 800c324:	f000 fbd8 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 800c328:	61f8      	str	r0, [r7, #28]
 800c32a:	e05a      	b.n	800c3e2 <vReceiveRA+0x186>
                        if( ( pxEndPoint->bits.bWantRA != pdFALSE_UNSIGNED ) && ( pxEndPoint->xRAData.eRAState == eRAStateWait ) )
 800c32c:	69fb      	ldr	r3, [r7, #28]
 800c32e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800c332:	f003 0302 	and.w	r3, r3, #2
 800c336:	b2db      	uxtb	r3, r3
 800c338:	2b00      	cmp	r3, #0
 800c33a:	d04b      	beq.n	800c3d4 <vReceiveRA+0x178>
 800c33c:	69fb      	ldr	r3, [r7, #28]
 800c33e:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c342:	2b01      	cmp	r3, #1
 800c344:	d146      	bne.n	800c3d4 <vReceiveRA+0x178>
                            pxEndPoint->ipv6_settings.uxPrefixLength = pxPrefixOption->ucPrefixLength;
 800c346:	697b      	ldr	r3, [r7, #20]
 800c348:	789b      	ldrb	r3, [r3, #2]
 800c34a:	461a      	mov	r2, r3
 800c34c:	69fb      	ldr	r3, [r7, #28]
 800c34e:	649a      	str	r2, [r3, #72]	@ 0x48
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xPrefix.ucBytes, pxPrefixOption->ucPrefix, ipSIZE_OF_IPv6_ADDRESS );
 800c350:	69fb      	ldr	r3, [r7, #28]
 800c352:	f103 004c 	add.w	r0, r3, #76	@ 0x4c
 800c356:	697b      	ldr	r3, [r7, #20]
 800c358:	3310      	adds	r3, #16
 800c35a:	2210      	movs	r2, #16
 800c35c:	4619      	mov	r1, r3
 800c35e:	f014 feab 	bl	80210b8 <memcpy>
                            ( void ) memcpy( pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, pxICMPPacket->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800c362:	69fb      	ldr	r3, [r7, #28]
 800c364:	f103 005c 	add.w	r0, r3, #92	@ 0x5c
 800c368:	69bb      	ldr	r3, [r7, #24]
 800c36a:	3316      	adds	r3, #22
 800c36c:	2210      	movs	r2, #16
 800c36e:	4619      	mov	r1, r3
 800c370:	f014 fea2 	bl	80210b8 <memcpy>
                            pxEndPoint->xRAData.bits.bRouterReplied = pdTRUE_UNSIGNED;
 800c374:	69fa      	ldr	r2, [r7, #28]
 800c376:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c37a:	f043 0301 	orr.w	r3, r3, #1
 800c37e:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.uxRetryCount = 0U;
 800c382:	69fb      	ldr	r3, [r7, #28]
 800c384:	2200      	movs	r2, #0
 800c386:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                            pxEndPoint->xRAData.ulPreferredLifeTime = FreeRTOS_ntohl( pxPrefixOption->ulPreferredLifeTime );
 800c38a:	697b      	ldr	r3, [r7, #20]
 800c38c:	689b      	ldr	r3, [r3, #8]
 800c38e:	061a      	lsls	r2, r3, #24
 800c390:	697b      	ldr	r3, [r7, #20]
 800c392:	689b      	ldr	r3, [r3, #8]
 800c394:	021b      	lsls	r3, r3, #8
 800c396:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800c39a:	431a      	orrs	r2, r3
 800c39c:	697b      	ldr	r3, [r7, #20]
 800c39e:	689b      	ldr	r3, [r3, #8]
 800c3a0:	0a1b      	lsrs	r3, r3, #8
 800c3a2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800c3a6:	431a      	orrs	r2, r3
 800c3a8:	697b      	ldr	r3, [r7, #20]
 800c3aa:	689b      	ldr	r3, [r3, #8]
 800c3ac:	0e1b      	lsrs	r3, r3, #24
 800c3ae:	431a      	orrs	r2, r3
 800c3b0:	69fb      	ldr	r3, [r7, #28]
 800c3b2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                            pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c3b6:	69fa      	ldr	r2, [r7, #28]
 800c3b8:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c3bc:	f043 0302 	orr.w	r3, r3, #2
 800c3c0:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                            pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c3c4:	69fb      	ldr	r3, [r7, #28]
 800c3c6:	2202      	movs	r2, #2
 800c3c8:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                            vRAProcess( pdFALSE, pxEndPoint );
 800c3cc:	69f9      	ldr	r1, [r7, #28]
 800c3ce:	2000      	movs	r0, #0
 800c3d0:	f000 f9b6 	bl	800c740 <vRAProcess>
                         pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkBuffer->pxInterface, pxEndPoint ) )
 800c3d4:	687b      	ldr	r3, [r7, #4]
 800c3d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3d8:	69f9      	ldr	r1, [r7, #28]
 800c3da:	4618      	mov	r0, r3
 800c3dc:	f000 fb9e 	bl	800cb1c <FreeRTOS_NextEndPoint>
 800c3e0:	61f8      	str	r0, [r7, #28]
                         pxEndPoint != NULL;
 800c3e2:	69fb      	ldr	r3, [r7, #28]
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d1a1      	bne.n	800c32c <vReceiveRA+0xd0>
    }
 800c3e8:	bf00      	nop
 800c3ea:	3724      	adds	r7, #36	@ 0x24
 800c3ec:	46bd      	mov	sp, r7
 800c3ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3f0:	08024260 	.word	0x08024260
 800c3f4:	08024290 	.word	0x08024290
 800c3f8:	08024118 	.word	0x08024118

0800c3fc <xRAProcess_HandleWaitStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleWaitStates( NetworkEndPoint_t * pxEndPoint,
                                                   TickType_t uxReloadTime )
    {
 800c3fc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c400:	b088      	sub	sp, #32
 800c402:	af00      	add	r7, sp, #0
 800c404:	6178      	str	r0, [r7, #20]
 800c406:	6139      	str	r1, [r7, #16]
        TickType_t uxNewReloadTime = uxReloadTime;
 800c408:	6939      	ldr	r1, [r7, #16]
 800c40a:	61f9      	str	r1, [r7, #28]

        if( pxEndPoint->xRAData.eRAState == eRAStateWait )
 800c40c:	6979      	ldr	r1, [r7, #20]
 800c40e:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800c412:	2901      	cmp	r1, #1
 800c414:	d133      	bne.n	800c47e <xRAProcess_HandleWaitStates+0x82>
        {
            /* A Router Solicitation has been sent, waited for a reply, but no came.
             * All replies will be handled in the function vReceiveRA(). */
            pxEndPoint->xRAData.uxRetryCount++;
 800c416:	697b      	ldr	r3, [r7, #20]
 800c418:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c41c:	1c5a      	adds	r2, r3, #1
 800c41e:	697b      	ldr	r3, [r7, #20]
 800c420:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118

            if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_SEARCH_COUNT )
 800c424:	697b      	ldr	r3, [r7, #20]
 800c426:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c42a:	2b02      	cmp	r3, #2
 800c42c:	d804      	bhi.n	800c438 <xRAProcess_HandleWaitStates+0x3c>
            {
                pxEndPoint->xRAData.eRAState = eRAStateApply;
 800c42e:	697b      	ldr	r3, [r7, #20]
 800c430:	2200      	movs	r2, #0
 800c432:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800c436:	e0bf      	b.n	800c5b8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                FreeRTOS_printf( ( "RA: Giving up waiting for a Router.\n" ) );
 800c438:	4862      	ldr	r0, [pc, #392]	@ (800c5c4 <xRAProcess_HandleWaitStates+0x1c8>)
 800c43a:	f014 fc21 	bl	8020c80 <lUDPLoggingPrintf>
                ( void ) memcpy( &( pxEndPoint->ipv6_settings ), &( pxEndPoint->ipv6_defaults ), sizeof( pxEndPoint->ipv6_settings ) );
 800c43e:	697b      	ldr	r3, [r7, #20]
 800c440:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c444:	697b      	ldr	r3, [r7, #20]
 800c446:	3390      	adds	r3, #144	@ 0x90
 800c448:	2258      	movs	r2, #88	@ 0x58
 800c44a:	4619      	mov	r1, r3
 800c44c:	f014 fe34 	bl	80210b8 <memcpy>

                pxEndPoint->xRAData.bits.bRouterReplied = pdFALSE_UNSIGNED;
 800c450:	697a      	ldr	r2, [r7, #20]
 800c452:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c456:	f36f 0300 	bfc	r3, #0, #1
 800c45a:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800c45e:	697b      	ldr	r3, [r7, #20]
 800c460:	2200      	movs	r2, #0
 800c462:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                /* Force taking a new random IP-address. */
                pxEndPoint->xRAData.bits.bIPAddressInUse = pdTRUE_UNSIGNED;
 800c466:	697a      	ldr	r2, [r7, #20]
 800c468:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c46c:	f043 0302 	orr.w	r3, r3, #2
 800c470:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c474:	697b      	ldr	r3, [r7, #20]
 800c476:	2202      	movs	r2, #2
 800c478:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
 800c47c:	e09c      	b.n	800c5b8 <xRAProcess_HandleWaitStates+0x1bc>
            }
        }
        else if( pxEndPoint->xRAData.eRAState == eRAStateIPWait )
 800c47e:	6979      	ldr	r1, [r7, #20]
 800c480:	f891 111c 	ldrb.w	r1, [r1, #284]	@ 0x11c
 800c484:	2903      	cmp	r1, #3
 800c486:	f040 8097 	bne.w	800c5b8 <xRAProcess_HandleWaitStates+0x1bc>
        {
            /* A Neighbour Solicitation has been sent, waited for a reply.
             * Repeat this 'ipconfigRA_IP_TEST_COUNT' times to be sure. */
            if( pxEndPoint->xRAData.bits.bIPAddressInUse != pdFALSE_UNSIGNED )
 800c48a:	6979      	ldr	r1, [r7, #20]
 800c48c:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800c490:	f001 0102 	and.w	r1, r1, #2
 800c494:	b2c9      	uxtb	r1, r1
 800c496:	2900      	cmp	r1, #0
 800c498:	d00b      	beq.n	800c4b2 <xRAProcess_HandleWaitStates+0xb6>
            {
                /* Another device has responded with the same IPv4 address. */
                pxEndPoint->xRAData.uxRetryCount = 0U;
 800c49a:	697b      	ldr	r3, [r7, #20]
 800c49c:	2200      	movs	r2, #0
 800c49e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c4a2:	697b      	ldr	r3, [r7, #20]
 800c4a4:	2202      	movs	r2, #2
 800c4a6:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800c4aa:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800c4ae:	61fb      	str	r3, [r7, #28]
 800c4b0:	e082      	b.n	800c5b8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else if( pxEndPoint->xRAData.uxRetryCount < ( UBaseType_t ) ipconfigRA_IP_TEST_COUNT )
 800c4b2:	6979      	ldr	r1, [r7, #20]
 800c4b4:	f8d1 1118 	ldr.w	r1, [r1, #280]	@ 0x118
 800c4b8:	2902      	cmp	r1, #2
 800c4ba:	d80e      	bhi.n	800c4da <xRAProcess_HandleWaitStates+0xde>
            {
                /* Try again. */
                pxEndPoint->xRAData.uxRetryCount++;
 800c4bc:	697b      	ldr	r3, [r7, #20]
 800c4be:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c4c2:	1c5a      	adds	r2, r3, #1
 800c4c4:	697b      	ldr	r3, [r7, #20]
 800c4c6:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
                pxEndPoint->xRAData.eRAState = eRAStateIPTest;
 800c4ca:	697b      	ldr	r3, [r7, #20]
 800c4cc:	2202      	movs	r2, #2
 800c4ce:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_IP_TEST_TIME_OUT_MSEC );
 800c4d2:	f240 53dc 	movw	r3, #1500	@ 0x5dc
 800c4d6:	61fb      	str	r3, [r7, #28]
 800c4d8:	e06e      	b.n	800c5b8 <xRAProcess_HandleWaitStates+0x1bc>
            }
            else
            {
                /* Now it is assumed that there is no other device using the same IP-address. */
                if( pxEndPoint->xRAData.bits.bRouterReplied != pdFALSE_UNSIGNED )
 800c4da:	6979      	ldr	r1, [r7, #20]
 800c4dc:	f891 1110 	ldrb.w	r1, [r1, #272]	@ 0x110
 800c4e0:	f001 0101 	and.w	r1, r1, #1
 800c4e4:	b2c9      	uxtb	r1, r1
 800c4e6:	2900      	cmp	r1, #0
 800c4e8:	d057      	beq.n	800c59a <xRAProcess_HandleWaitStates+0x19e>
                {
                    /* Obtained configuration from a router. */
                    uxNewReloadTime = pdMS_TO_TICKS( ( 1000U * ( uint64_t ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
 800c4ea:	6979      	ldr	r1, [r7, #20]
 800c4ec:	f8d1 1114 	ldr.w	r1, [r1, #276]	@ 0x114
 800c4f0:	2000      	movs	r0, #0
 800c4f2:	4688      	mov	r8, r1
 800c4f4:	4681      	mov	r9, r0
 800c4f6:	4640      	mov	r0, r8
 800c4f8:	4649      	mov	r1, r9
 800c4fa:	f04f 0a00 	mov.w	sl, #0
 800c4fe:	f04f 0b00 	mov.w	fp, #0
 800c502:	ea4f 1b41 	mov.w	fp, r1, lsl #5
 800c506:	ea4b 6bd0 	orr.w	fp, fp, r0, lsr #27
 800c50a:	ea4f 1a40 	mov.w	sl, r0, lsl #5
 800c50e:	4650      	mov	r0, sl
 800c510:	4659      	mov	r1, fp
 800c512:	ebb0 0208 	subs.w	r2, r0, r8
 800c516:	eb61 0309 	sbc.w	r3, r1, r9
 800c51a:	f04f 0000 	mov.w	r0, #0
 800c51e:	f04f 0100 	mov.w	r1, #0
 800c522:	0259      	lsls	r1, r3, #9
 800c524:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800c528:	0250      	lsls	r0, r2, #9
 800c52a:	4602      	mov	r2, r0
 800c52c:	460b      	mov	r3, r1
 800c52e:	eb12 0408 	adds.w	r4, r2, r8
 800c532:	eb43 0509 	adc.w	r5, r3, r9
 800c536:	f04f 0200 	mov.w	r2, #0
 800c53a:	f04f 0300 	mov.w	r3, #0
 800c53e:	01ab      	lsls	r3, r5, #6
 800c540:	ea43 6394 	orr.w	r3, r3, r4, lsr #26
 800c544:	01a2      	lsls	r2, r4, #6
 800c546:	1b11      	subs	r1, r2, r4
 800c548:	6039      	str	r1, [r7, #0]
 800c54a:	eb63 0305 	sbc.w	r3, r3, r5
 800c54e:	607b      	str	r3, [r7, #4]
 800c550:	e9d7 1200 	ldrd	r1, r2, [r7]
 800c554:	460b      	mov	r3, r1
 800c556:	eb13 0308 	adds.w	r3, r3, r8
 800c55a:	60bb      	str	r3, [r7, #8]
 800c55c:	4613      	mov	r3, r2
 800c55e:	eb43 0309 	adc.w	r3, r3, r9
 800c562:	60fb      	str	r3, [r7, #12]
 800c564:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800c568:	f04f 0300 	mov.w	r3, #0
 800c56c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800c570:	f7f3 ff1e 	bl	80003b0 <__aeabi_uldivmod>
 800c574:	4602      	mov	r2, r0
 800c576:	460b      	mov	r3, r1
 800c578:	4613      	mov	r3, r2
 800c57a:	61fb      	str	r3, [r7, #28]
                    pxEndPoint->xRAData.eRAState = eRAStatePreLease;
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	2204      	movs	r2, #4
 800c580:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                    iptraceRA_SUCCEEDED( &( pxEndPoint->ipv6_settings.xIPAddress ) );
                    FreeRTOS_printf( ( "RA: succeeded, using IP address %pip Reload after %u seconds\n",
 800c584:	697b      	ldr	r3, [r7, #20]
 800c586:	f103 0138 	add.w	r1, r3, #56	@ 0x38
 800c58a:	697b      	ldr	r3, [r7, #20]
 800c58c:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 800c590:	461a      	mov	r2, r3
 800c592:	480d      	ldr	r0, [pc, #52]	@ (800c5c8 <xRAProcess_HandleWaitStates+0x1cc>)
 800c594:	f014 fb74 	bl	8020c80 <lUDPLoggingPrintf>
 800c598:	e00b      	b.n	800c5b2 <xRAProcess_HandleWaitStates+0x1b6>
                                       ( unsigned ) pxEndPoint->xRAData.ulPreferredLifeTime ) );
                }
                else
                {
                    /* Using the default network parameters. */
                    pxEndPoint->xRAData.eRAState = eRAStateFailed;
 800c59a:	697b      	ldr	r3, [r7, #20]
 800c59c:	2206      	movs	r2, #6
 800c59e:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c

                    iptraceRA_REQUESTS_FAILED_USING_DEFAULT_IP_ADDRESS( &( pxEndPoint->ipv6_settings.xIPAddress ) );

                    FreeRTOS_printf( ( "RA: failed, using default parameters and IP address %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800c5a2:	697b      	ldr	r3, [r7, #20]
 800c5a4:	3338      	adds	r3, #56	@ 0x38
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	4808      	ldr	r0, [pc, #32]	@ (800c5cc <xRAProcess_HandleWaitStates+0x1d0>)
 800c5aa:	f014 fb69 	bl	8020c80 <lUDPLoggingPrintf>
                    /* Disable the timer. */
                    uxNewReloadTime = 0U;
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	61fb      	str	r3, [r7, #28]
                }

                /* Now call vIPNetworkUpCalls() to send the network-up event and
                 * start the ARP timer. */
                vIPNetworkUpCalls( pxEndPoint );
 800c5b2:	6978      	ldr	r0, [r7, #20]
 800c5b4:	f7fc fa08 	bl	80089c8 <vIPNetworkUpCalls>
        else
        {
            /* Do nothing */
        }

        return uxNewReloadTime;
 800c5b8:	69fb      	ldr	r3, [r7, #28]
    }
 800c5ba:	4618      	mov	r0, r3
 800c5bc:	3720      	adds	r7, #32
 800c5be:	46bd      	mov	sp, r7
 800c5c0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c5c4:	080242d4 	.word	0x080242d4
 800c5c8:	080242fc 	.word	0x080242fc
 800c5cc:	0802433c 	.word	0x0802433c

0800c5d0 <xRAProcess_HandleOtherStates>:
 *
 * @return New timer reload value.
 */
    static TickType_t xRAProcess_HandleOtherStates( NetworkEndPoint_t * pxEndPoint,
                                                    TickType_t uxReloadTime )
    {
 800c5d0:	b580      	push	{r7, lr}
 800c5d2:	b08c      	sub	sp, #48	@ 0x30
 800c5d4:	af00      	add	r7, sp, #0
 800c5d6:	6078      	str	r0, [r7, #4]
 800c5d8:	6039      	str	r1, [r7, #0]
        TickType_t uxNewReloadTime = uxReloadTime;
 800c5da:	683b      	ldr	r3, [r7, #0]
 800c5dc:	62fb      	str	r3, [r7, #44]	@ 0x2c

        switch( pxEndPoint->xRAData.eRAState )
 800c5de:	687b      	ldr	r3, [r7, #4]
 800c5e0:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c5e4:	2b06      	cmp	r3, #6
 800c5e6:	f200 808c 	bhi.w	800c702 <xRAProcess_HandleOtherStates+0x132>
 800c5ea:	a201      	add	r2, pc, #4	@ (adr r2, 800c5f0 <xRAProcess_HandleOtherStates+0x20>)
 800c5ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c5f0:	0800c60d 	.word	0x0800c60d
 800c5f4:	0800c703 	.word	0x0800c703
 800c5f8:	0800c66f 	.word	0x0800c66f
 800c5fc:	0800c703 	.word	0x0800c703
 800c600:	0800c6eb 	.word	0x0800c6eb
 800c604:	0800c6f5 	.word	0x0800c6f5
 800c608:	0800c703 	.word	0x0800c703
                   IPv6_Address_t xIPAddress;
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Send a Router Solicitation to ff02::2 */
                   ( void ) memset( xIPAddress.ucBytes, 0, sizeof( xIPAddress.ucBytes ) );
 800c60c:	f107 030c 	add.w	r3, r7, #12
 800c610:	2210      	movs	r2, #16
 800c612:	2100      	movs	r1, #0
 800c614:	4618      	mov	r0, r3
 800c616:	f014 fe5c 	bl	80212d2 <memset>
                   xIPAddress.ucBytes[ 0 ] = 0xffU;
 800c61a:	23ff      	movs	r3, #255	@ 0xff
 800c61c:	733b      	strb	r3, [r7, #12]
                   xIPAddress.ucBytes[ 1 ] = 0x02U;
 800c61e:	2302      	movs	r3, #2
 800c620:	737b      	strb	r3, [r7, #13]
                   xIPAddress.ucBytes[ 15 ] = 0x02U;
 800c622:	2302      	movs	r3, #2
 800c624:	76fb      	strb	r3, [r7, #27]
                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPRouterSolicitation_IPv6_t );
 800c626:	233e      	movs	r3, #62	@ 0x3e
 800c628:	623b      	str	r3, [r7, #32]
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800c62a:	2100      	movs	r1, #0
 800c62c:	6a38      	ldr	r0, [r7, #32]
 800c62e:	f00a f863 	bl	80166f8 <pxGetNetworkBufferWithDescriptor>
 800c632:	61f8      	str	r0, [r7, #28]

                   if( pxNetworkBuffer != NULL )
 800c634:	69fb      	ldr	r3, [r7, #28]
 800c636:	2b00      	cmp	r3, #0
 800c638:	d008      	beq.n	800c64c <xRAProcess_HandleOtherStates+0x7c>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800c63a:	69fb      	ldr	r3, [r7, #28]
 800c63c:	687a      	ldr	r2, [r7, #4]
 800c63e:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendRouterSolicitation( pxNetworkBuffer, &( xIPAddress ) );
 800c640:	f107 030c 	add.w	r3, r7, #12
 800c644:	4619      	mov	r1, r3
 800c646:	69f8      	ldr	r0, [r7, #28]
 800c648:	f7ff fc24 	bl	800be94 <vNDSendRouterSolicitation>
                   }

                   FreeRTOS_printf( ( "vRAProcess: Router Solicitation, attempt %lu/%u\n",
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 800c652:	3301      	adds	r3, #1
 800c654:	2203      	movs	r2, #3
 800c656:	4619      	mov	r1, r3
 800c658:	482d      	ldr	r0, [pc, #180]	@ (800c710 <xRAProcess_HandleOtherStates+0x140>)
 800c65a:	f014 fb11 	bl	8020c80 <lUDPLoggingPrintf>
                                      pxEndPoint->xRAData.uxRetryCount + 1U,
                                      ipconfigRA_SEARCH_COUNT ) );
                   /* Wait a configurable time for a router advertisement. */
                   uxNewReloadTime = pdMS_TO_TICKS( ipconfigRA_SEARCH_TIME_OUT_MSEC );
 800c65e:	f242 7310 	movw	r3, #10000	@ 0x2710
 800c662:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateWait;
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	2201      	movs	r2, #1
 800c668:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800c66c:	e04a      	b.n	800c704 <xRAProcess_HandleOtherStates+0x134>
               {
                   size_t uxNeededSize;
                   NetworkBufferDescriptor_t * pxNetworkBuffer;

                   /* Get an IP-address, using the network prefix and a random host address. */
                   if( pxEndPoint->xRAData.bits.bIPAddressInUse != 0U )
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800c674:	f003 0302 	and.w	r3, r3, #2
 800c678:	b2db      	uxtb	r3, r3
 800c67a:	2b00      	cmp	r3, #0
 800c67c:	d014      	beq.n	800c6a8 <xRAProcess_HandleOtherStates+0xd8>
                   {
                       pxEndPoint->xRAData.bits.bIPAddressInUse = pdFALSE_UNSIGNED;
 800c67e:	687a      	ldr	r2, [r7, #4]
 800c680:	f892 3110 	ldrb.w	r3, [r2, #272]	@ 0x110
 800c684:	f36f 0341 	bfc	r3, #1, #1
 800c688:	f882 3110 	strb.w	r3, [r2, #272]	@ 0x110

                       ( void ) FreeRTOS_CreateIPv6Address( &pxEndPoint->ipv6_settings.xIPAddress, &pxEndPoint->ipv6_settings.xPrefix, pxEndPoint->ipv6_settings.uxPrefixLength, pdTRUE );
 800c68c:	687b      	ldr	r3, [r7, #4]
 800c68e:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	f103 014c 	add.w	r1, r3, #76	@ 0x4c
 800c698:	687b      	ldr	r3, [r7, #4]
 800c69a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800c69c:	2301      	movs	r3, #1
 800c69e:	f7ff fb2b 	bl	800bcf8 <FreeRTOS_CreateIPv6Address>

                       FreeRTOS_printf( ( "RA: Creating a random IP-address\n" ) );
 800c6a2:	481c      	ldr	r0, [pc, #112]	@ (800c714 <xRAProcess_HandleOtherStates+0x144>)
 800c6a4:	f014 faec 	bl	8020c80 <lUDPLoggingPrintf>
                   }

                   FreeRTOS_printf( ( "RA: Neighbour solicitation for %pip\n", ( void * ) pxEndPoint->ipv6_settings.xIPAddress.ucBytes ) );
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	3338      	adds	r3, #56	@ 0x38
 800c6ac:	4619      	mov	r1, r3
 800c6ae:	481a      	ldr	r0, [pc, #104]	@ (800c718 <xRAProcess_HandleOtherStates+0x148>)
 800c6b0:	f014 fae6 	bl	8020c80 <lUDPLoggingPrintf>

                   uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 800c6b4:	2356      	movs	r3, #86	@ 0x56
 800c6b6:	62bb      	str	r3, [r7, #40]	@ 0x28
                   pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, raDONT_BLOCK );
 800c6b8:	2100      	movs	r1, #0
 800c6ba:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c6bc:	f00a f81c 	bl	80166f8 <pxGetNetworkBufferWithDescriptor>
 800c6c0:	6278      	str	r0, [r7, #36]	@ 0x24

                   if( pxNetworkBuffer != NULL )
 800c6c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d008      	beq.n	800c6da <xRAProcess_HandleOtherStates+0x10a>
                   {
                       pxNetworkBuffer->pxEndPoint = pxEndPoint;
 800c6c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c6ca:	687a      	ldr	r2, [r7, #4]
 800c6cc:	631a      	str	r2, [r3, #48]	@ 0x30
                       vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	3338      	adds	r3, #56	@ 0x38
 800c6d2:	4619      	mov	r1, r3
 800c6d4:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800c6d6:	f7fe ff25 	bl	800b524 <vNDSendNeighbourSolicitation>
                   }

                   uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800c6da:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c6de:	62fb      	str	r3, [r7, #44]	@ 0x2c
                   pxEndPoint->xRAData.eRAState = eRAStateIPWait;
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	2203      	movs	r2, #3
 800c6e4:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
               }
               break;
 800c6e8:	e00c      	b.n	800c704 <xRAProcess_HandleOtherStates+0x134>

            case eRAStatePreLease:
                pxEndPoint->xRAData.eRAState = eRAStateLease;
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	2205      	movs	r2, #5
 800c6ee:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
                break;
 800c6f2:	e007      	b.n	800c704 <xRAProcess_HandleOtherStates+0x134>

            case eRAStateLease:

                vRAProcessInit( pxEndPoint );
 800c6f4:	6878      	ldr	r0, [r7, #4]
 800c6f6:	f000 f811 	bl	800c71c <vRAProcessInit>
                uxNewReloadTime = pdMS_TO_TICKS( 1000U );
 800c6fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800c6fe:	62fb      	str	r3, [r7, #44]	@ 0x2c

                break;
 800c700:	e000      	b.n	800c704 <xRAProcess_HandleOtherStates+0x134>
            case eRAStateFailed:
                break;

            default:
                /* All states were handled. */
                break;
 800c702:	bf00      	nop
        }

        return uxNewReloadTime;
 800c704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800c706:	4618      	mov	r0, r3
 800c708:	3730      	adds	r7, #48	@ 0x30
 800c70a:	46bd      	mov	sp, r7
 800c70c:	bd80      	pop	{r7, pc}
 800c70e:	bf00      	nop
 800c710:	08024378 	.word	0x08024378
 800c714:	080243ac 	.word	0x080243ac
 800c718:	080243d0 	.word	0x080243d0

0800c71c <vRAProcessInit>:
 * @brief Initialise the RA state machine.
 *
 * @param[in] pxEndPoint The end-point for which Router Advertisement is required.
 */
    static void vRAProcessInit( NetworkEndPoint_t * pxEndPoint )
    {
 800c71c:	b480      	push	{r7}
 800c71e:	b083      	sub	sp, #12
 800c720:	af00      	add	r7, sp, #0
 800c722:	6078      	str	r0, [r7, #4]
        pxEndPoint->xRAData.uxRetryCount = 0U;
 800c724:	687b      	ldr	r3, [r7, #4]
 800c726:	2200      	movs	r2, #0
 800c728:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxEndPoint->xRAData.eRAState = eRAStateApply;
 800c72c:	687b      	ldr	r3, [r7, #4]
 800c72e:	2200      	movs	r2, #0
 800c730:	f883 211c 	strb.w	r2, [r3, #284]	@ 0x11c
    }
 800c734:	bf00      	nop
 800c736:	370c      	adds	r7, #12
 800c738:	46bd      	mov	sp, r7
 800c73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <vRAProcess>:
 * @param[in] xDoReset pdTRUE if the state machine must be reset.
 * @param[in] pxEndPoint The end-point for which a RA assignment is required.
 */
    void vRAProcess( BaseType_t xDoReset,
                     NetworkEndPoint_t * pxEndPoint )
    {
 800c740:	b590      	push	{r4, r7, lr}
 800c742:	b089      	sub	sp, #36	@ 0x24
 800c744:	af04      	add	r7, sp, #16
 800c746:	6078      	str	r0, [r7, #4]
 800c748:	6039      	str	r1, [r7, #0]
        TickType_t uxReloadTime = pdMS_TO_TICKS( 5000U );
 800c74a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800c74e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
            eRAState_t eRAState;
        #endif

        configASSERT( pxEndPoint != NULL );
 800c750:	683b      	ldr	r3, [r7, #0]
 800c752:	2b00      	cmp	r3, #0
 800c754:	d104      	bne.n	800c760 <vRAProcess+0x20>
 800c756:	f240 2189 	movw	r1, #649	@ 0x289
 800c75a:	4828      	ldr	r0, [pc, #160]	@ (800c7fc <vRAProcess+0xbc>)
 800c75c:	f7f4 fe88 	bl	8001470 <vAssertCalled>

        #if ( ipconfigHAS_PRINTF == 1 )
            /* Remember the initial state, just for logging. */
            eRAState = pxEndPoint->xRAData.eRAState;
 800c760:	683b      	ldr	r3, [r7, #0]
 800c762:	f893 311c 	ldrb.w	r3, [r3, #284]	@ 0x11c
 800c766:	72fb      	strb	r3, [r7, #11]
        #endif

        if( xDoReset != pdFALSE )
 800c768:	687b      	ldr	r3, [r7, #4]
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d002      	beq.n	800c774 <vRAProcess+0x34>
        {
            vRAProcessInit( pxEndPoint );
 800c76e:	6838      	ldr	r0, [r7, #0]
 800c770:	f7ff ffd4 	bl	800c71c <vRAProcessInit>
        }

        /* First handle the states that are limited by a timer. See if some
         * timer has expired. */
        uxReloadTime = xRAProcess_HandleWaitStates( pxEndPoint, uxReloadTime );
 800c774:	68f9      	ldr	r1, [r7, #12]
 800c776:	6838      	ldr	r0, [r7, #0]
 800c778:	f7ff fe40 	bl	800c3fc <xRAProcess_HandleWaitStates>
 800c77c:	60f8      	str	r0, [r7, #12]

        /* Now handle the other states. */
        uxReloadTime = xRAProcess_HandleOtherStates( pxEndPoint, uxReloadTime );
 800c77e:	68f9      	ldr	r1, [r7, #12]
 800c780:	6838      	ldr	r0, [r7, #0]
 800c782:	f7ff ff25 	bl	800c5d0 <xRAProcess_HandleOtherStates>
 800c786:	60f8      	str	r0, [r7, #12]

        #if ( ipconfigHAS_PRINTF == 1 )
        {
            FreeRTOS_printf( ( "vRAProcess( %ld, %pip) bRouterReplied=%d bIPAddressInUse=%d state %d -> %d\n",
 800c788:	683b      	ldr	r3, [r7, #0]
 800c78a:	f103 0190 	add.w	r1, r3, #144	@ 0x90
 800c78e:	683b      	ldr	r3, [r7, #0]
 800c790:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800c794:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800c798:	b2db      	uxtb	r3, r3
 800c79a:	461c      	mov	r4, r3
 800c79c:	683b      	ldr	r3, [r7, #0]
 800c79e:	f893 3110 	ldrb.w	r3, [r3, #272]	@ 0x110
 800c7a2:	f3c3 0340 	ubfx	r3, r3, #1, #1
 800c7a6:	b2db      	uxtb	r3, r3
 800c7a8:	4618      	mov	r0, r3
 800c7aa:	7afb      	ldrb	r3, [r7, #11]
 800c7ac:	683a      	ldr	r2, [r7, #0]
 800c7ae:	f892 211c 	ldrb.w	r2, [r2, #284]	@ 0x11c
 800c7b2:	9202      	str	r2, [sp, #8]
 800c7b4:	9301      	str	r3, [sp, #4]
 800c7b6:	9000      	str	r0, [sp, #0]
 800c7b8:	4623      	mov	r3, r4
 800c7ba:	460a      	mov	r2, r1
 800c7bc:	6879      	ldr	r1, [r7, #4]
 800c7be:	4810      	ldr	r0, [pc, #64]	@ (800c800 <vRAProcess+0xc0>)
 800c7c0:	f014 fa5e 	bl	8020c80 <lUDPLoggingPrintf>
                               eRAState,
                               pxEndPoint->xRAData.eRAState ) );
        }
        #endif /* ( ipconfigHAS_PRINTF == 1 ) */

        if( uxReloadTime != 0U )
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b00      	cmp	r3, #0
 800c7c8:	d00d      	beq.n	800c7e6 <vRAProcess+0xa6>
        {
            FreeRTOS_printf( ( "RA: Reload %u seconds\n", ( unsigned ) ( uxReloadTime / 1000U ) ) );
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	4a0d      	ldr	r2, [pc, #52]	@ (800c804 <vRAProcess+0xc4>)
 800c7ce:	fba2 2303 	umull	r2, r3, r2, r3
 800c7d2:	099b      	lsrs	r3, r3, #6
 800c7d4:	4619      	mov	r1, r3
 800c7d6:	480c      	ldr	r0, [pc, #48]	@ (800c808 <vRAProcess+0xc8>)
 800c7d8:	f014 fa52 	bl	8020c80 <lUDPLoggingPrintf>
            vDHCP_RATimerReload( pxEndPoint, uxReloadTime );
 800c7dc:	68f9      	ldr	r1, [r7, #12]
 800c7de:	6838      	ldr	r0, [r7, #0]
 800c7e0:	f7fc ff8a 	bl	80096f8 <vDHCP_RATimerReload>
        {
            /* Disable the timer, this function vRAProcess() won't be called anymore for this end-point. */
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
        }
    }
 800c7e4:	e006      	b.n	800c7f4 <vRAProcess+0xb4>
            FreeRTOS_printf( ( "RA: Disabled timer.\n" ) );
 800c7e6:	4809      	ldr	r0, [pc, #36]	@ (800c80c <vRAProcess+0xcc>)
 800c7e8:	f014 fa4a 	bl	8020c80 <lUDPLoggingPrintf>
            vIPSetDHCP_RATimerEnableState( pxEndPoint, pdFALSE );
 800c7ec:	2100      	movs	r1, #0
 800c7ee:	6838      	ldr	r0, [r7, #0]
 800c7f0:	f7fd f836 	bl	8009860 <vIPSetDHCP_RATimerEnableState>
    }
 800c7f4:	bf00      	nop
 800c7f6:	3714      	adds	r7, #20
 800c7f8:	46bd      	mov	sp, r7
 800c7fa:	bd90      	pop	{r4, r7, pc}
 800c7fc:	08024118 	.word	0x08024118
 800c800:	080243f8 	.word	0x080243f8
 800c804:	10624dd3 	.word	0x10624dd3
 800c808:	08024444 	.word	0x08024444
 800c80c:	0802445c 	.word	0x0802445c

0800c810 <FreeRTOS_FillEndPoint>:
                                const uint8_t ucIPAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucNetMask[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucGatewayAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucDNSServerAddress[ ipIP_ADDRESS_LENGTH_BYTES ],
                                const uint8_t ucMACAddress[ ipMAC_ADDRESS_LENGTH_BYTES ] )
    {
 800c810:	b580      	push	{r7, lr}
 800c812:	b086      	sub	sp, #24
 800c814:	af00      	add	r7, sp, #0
 800c816:	60f8      	str	r0, [r7, #12]
 800c818:	60b9      	str	r1, [r7, #8]
 800c81a:	607a      	str	r2, [r7, #4]
 800c81c:	603b      	str	r3, [r7, #0]
        uint32_t ulIPAddress;

        if( ( pxNetworkInterface == NULL ) || ( pxEndPoint == NULL ) )
 800c81e:	68fb      	ldr	r3, [r7, #12]
 800c820:	2b00      	cmp	r3, #0
 800c822:	d002      	beq.n	800c82a <FreeRTOS_FillEndPoint+0x1a>
 800c824:	68bb      	ldr	r3, [r7, #8]
 800c826:	2b00      	cmp	r3, #0
 800c828:	d105      	bne.n	800c836 <FreeRTOS_FillEndPoint+0x26>
        {
            /* Invalid input. */
            FreeRTOS_printf( ( "FreeRTOS_FillEndPoint: Invalid input, netif=%p, endpoint=%p\n",
 800c82a:	68ba      	ldr	r2, [r7, #8]
 800c82c:	68f9      	ldr	r1, [r7, #12]
 800c82e:	483f      	ldr	r0, [pc, #252]	@ (800c92c <FreeRTOS_FillEndPoint+0x11c>)
 800c830:	f014 fa26 	bl	8020c80 <lUDPLoggingPrintf>
 800c834:	e075      	b.n	800c922 <FreeRTOS_FillEndPoint+0x112>
             * The user must make sure that the object pointed to by 'pxEndPoint'
             * will remain to exist. */

            /* As the endpoint might be part of a linked list,
             * protect the field pxNext from being overwritten. */
            NetworkEndPoint_t * pxNext = pxEndPoint->pxNext;
 800c836:	68bb      	ldr	r3, [r7, #8]
 800c838:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800c83c:	617b      	str	r3, [r7, #20]
            ( void ) memset( pxEndPoint, 0, sizeof( *pxEndPoint ) );
 800c83e:	f44f 7294 	mov.w	r2, #296	@ 0x128
 800c842:	2100      	movs	r1, #0
 800c844:	68b8      	ldr	r0, [r7, #8]
 800c846:	f014 fd44 	bl	80212d2 <memset>
            pxEndPoint->pxNext = pxNext;
 800c84a:	68bb      	ldr	r3, [r7, #8]
 800c84c:	697a      	ldr	r2, [r7, #20]
 800c84e:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124

            ulIPAddress = FreeRTOS_inet_addr_quick( ucIPAddress[ 0 ], ucIPAddress[ 1 ], ucIPAddress[ 2 ], ucIPAddress[ 3 ] );
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	3303      	adds	r3, #3
 800c856:	781b      	ldrb	r3, [r3, #0]
 800c858:	061a      	lsls	r2, r3, #24
 800c85a:	687b      	ldr	r3, [r7, #4]
 800c85c:	3302      	adds	r3, #2
 800c85e:	781b      	ldrb	r3, [r3, #0]
 800c860:	041b      	lsls	r3, r3, #16
 800c862:	431a      	orrs	r2, r3
 800c864:	687b      	ldr	r3, [r7, #4]
 800c866:	3301      	adds	r3, #1
 800c868:	781b      	ldrb	r3, [r3, #0]
 800c86a:	021b      	lsls	r3, r3, #8
 800c86c:	4313      	orrs	r3, r2
 800c86e:	687a      	ldr	r2, [r7, #4]
 800c870:	7812      	ldrb	r2, [r2, #0]
 800c872:	4313      	orrs	r3, r2
 800c874:	613b      	str	r3, [r7, #16]
            pxEndPoint->ipv4_settings.ulNetMask = FreeRTOS_inet_addr_quick( ucNetMask[ 0 ], ucNetMask[ 1 ], ucNetMask[ 2 ], ucNetMask[ 3 ] );
 800c876:	683b      	ldr	r3, [r7, #0]
 800c878:	3303      	adds	r3, #3
 800c87a:	781b      	ldrb	r3, [r3, #0]
 800c87c:	061a      	lsls	r2, r3, #24
 800c87e:	683b      	ldr	r3, [r7, #0]
 800c880:	3302      	adds	r3, #2
 800c882:	781b      	ldrb	r3, [r3, #0]
 800c884:	041b      	lsls	r3, r3, #16
 800c886:	431a      	orrs	r2, r3
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	3301      	adds	r3, #1
 800c88c:	781b      	ldrb	r3, [r3, #0]
 800c88e:	021b      	lsls	r3, r3, #8
 800c890:	4313      	orrs	r3, r2
 800c892:	683a      	ldr	r2, [r7, #0]
 800c894:	7812      	ldrb	r2, [r2, #0]
 800c896:	431a      	orrs	r2, r3
 800c898:	68bb      	ldr	r3, [r7, #8]
 800c89a:	605a      	str	r2, [r3, #4]
            pxEndPoint->ipv4_settings.ulGatewayAddress = FreeRTOS_inet_addr_quick( ucGatewayAddress[ 0 ], ucGatewayAddress[ 1 ], ucGatewayAddress[ 2 ], ucGatewayAddress[ 3 ] );
 800c89c:	6a3b      	ldr	r3, [r7, #32]
 800c89e:	3303      	adds	r3, #3
 800c8a0:	781b      	ldrb	r3, [r3, #0]
 800c8a2:	061a      	lsls	r2, r3, #24
 800c8a4:	6a3b      	ldr	r3, [r7, #32]
 800c8a6:	3302      	adds	r3, #2
 800c8a8:	781b      	ldrb	r3, [r3, #0]
 800c8aa:	041b      	lsls	r3, r3, #16
 800c8ac:	431a      	orrs	r2, r3
 800c8ae:	6a3b      	ldr	r3, [r7, #32]
 800c8b0:	3301      	adds	r3, #1
 800c8b2:	781b      	ldrb	r3, [r3, #0]
 800c8b4:	021b      	lsls	r3, r3, #8
 800c8b6:	4313      	orrs	r3, r2
 800c8b8:	6a3a      	ldr	r2, [r7, #32]
 800c8ba:	7812      	ldrb	r2, [r2, #0]
 800c8bc:	431a      	orrs	r2, r3
 800c8be:	68bb      	ldr	r3, [r7, #8]
 800c8c0:	609a      	str	r2, [r3, #8]
            pxEndPoint->ipv4_settings.ulDNSServerAddresses[ 0 ] = FreeRTOS_inet_addr_quick( ucDNSServerAddress[ 0 ], ucDNSServerAddress[ 1 ], ucDNSServerAddress[ 2 ], ucDNSServerAddress[ 3 ] );
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c4:	3303      	adds	r3, #3
 800c8c6:	781b      	ldrb	r3, [r3, #0]
 800c8c8:	061a      	lsls	r2, r3, #24
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8cc:	3302      	adds	r3, #2
 800c8ce:	781b      	ldrb	r3, [r3, #0]
 800c8d0:	041b      	lsls	r3, r3, #16
 800c8d2:	431a      	orrs	r2, r3
 800c8d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d6:	3301      	adds	r3, #1
 800c8d8:	781b      	ldrb	r3, [r3, #0]
 800c8da:	021b      	lsls	r3, r3, #8
 800c8dc:	4313      	orrs	r3, r2
 800c8de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8e0:	7812      	ldrb	r2, [r2, #0]
 800c8e2:	431a      	orrs	r2, r3
 800c8e4:	68bb      	ldr	r3, [r7, #8]
 800c8e6:	60da      	str	r2, [r3, #12]
            pxEndPoint->ipv4_settings.ulBroadcastAddress = ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 800c8e8:	68bb      	ldr	r3, [r7, #8]
 800c8ea:	685b      	ldr	r3, [r3, #4]
 800c8ec:	43da      	mvns	r2, r3
 800c8ee:	693b      	ldr	r3, [r7, #16]
 800c8f0:	431a      	orrs	r2, r3
 800c8f2:	68bb      	ldr	r3, [r7, #8]
 800c8f4:	615a      	str	r2, [r3, #20]

            /* Copy the current values to the default values. */
            ( void ) memcpy( &( pxEndPoint->ipv4_defaults ), &( pxEndPoint->ipv4_settings ), sizeof( pxEndPoint->ipv4_defaults ) );
 800c8f6:	68bb      	ldr	r3, [r7, #8]
 800c8f8:	331c      	adds	r3, #28
 800c8fa:	68b9      	ldr	r1, [r7, #8]
 800c8fc:	221c      	movs	r2, #28
 800c8fe:	4618      	mov	r0, r3
 800c900:	f014 fbda 	bl	80210b8 <memcpy>

            /* The default IP-address will be used in case DHCP is not used, or also if DHCP has failed, or
             * when the user chooses to use the default IP-address. */
            pxEndPoint->ipv4_defaults.ulIPAddress = ulIPAddress;
 800c904:	68bb      	ldr	r3, [r7, #8]
 800c906:	693a      	ldr	r2, [r7, #16]
 800c908:	61da      	str	r2, [r3, #28]

            /* The field 'ipv4_settings.ulIPAddress' will be set later on. */

            ( void ) memcpy( pxEndPoint->xMACAddress.ucBytes, ucMACAddress, sizeof( pxEndPoint->xMACAddress ) );
 800c90a:	68bb      	ldr	r3, [r7, #8]
 800c90c:	33e8      	adds	r3, #232	@ 0xe8
 800c90e:	2206      	movs	r2, #6
 800c910:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800c912:	4618      	mov	r0, r3
 800c914:	f014 fbd0 	bl	80210b8 <memcpy>
            ( void ) FreeRTOS_AddEndPoint( pxNetworkInterface, pxEndPoint );
 800c918:	68b9      	ldr	r1, [r7, #8]
 800c91a:	68f8      	ldr	r0, [r7, #12]
 800c91c:	f000 f85c 	bl	800c9d8 <FreeRTOS_AddEndPoint>
        }
    }
 800c920:	bf00      	nop
 800c922:	bf00      	nop
 800c924:	3718      	adds	r7, #24
 800c926:	46bd      	mov	sp, r7
 800c928:	bd80      	pop	{r7, pc}
 800c92a:	bf00      	nop
 800c92c:	08024474 	.word	0x08024474

0800c930 <FreeRTOS_AddNetworkInterface>:
 * @param[in] pxInterface The address of the new interface.
 *
 * @return The value of the parameter 'pxInterface'.
 */
    NetworkInterface_t * FreeRTOS_AddNetworkInterface( NetworkInterface_t * pxInterface )
    {
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxIterator = NULL;
 800c938:	2300      	movs	r3, #0
 800c93a:	60fb      	str	r3, [r7, #12]

        if( pxInterface != NULL )
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d021      	beq.n	800c986 <FreeRTOS_AddNetworkInterface+0x56>
        {
            if( pxNetworkInterfaces == NULL )
 800c942:	4b14      	ldr	r3, [pc, #80]	@ (800c994 <FreeRTOS_AddNetworkInterface+0x64>)
 800c944:	681b      	ldr	r3, [r3, #0]
 800c946:	2b00      	cmp	r3, #0
 800c948:	d106      	bne.n	800c958 <FreeRTOS_AddNetworkInterface+0x28>
            {
                /* No other interfaces are set yet, so this is the first in the list. */
                pxNetworkInterfaces = pxInterface;
 800c94a:	4a12      	ldr	r2, [pc, #72]	@ (800c994 <FreeRTOS_AddNetworkInterface+0x64>)
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	6013      	str	r3, [r2, #0]
                pxInterface->pxNext = NULL;
 800c950:	687b      	ldr	r3, [r7, #4]
 800c952:	2200      	movs	r2, #0
 800c954:	625a      	str	r2, [r3, #36]	@ 0x24
 800c956:	e016      	b.n	800c986 <FreeRTOS_AddNetworkInterface+0x56>
            }
            else
            {
                /* Other interfaces are already defined, so iterate to the end of the
                 * list. */
                pxIterator = pxNetworkInterfaces;
 800c958:	4b0e      	ldr	r3, [pc, #56]	@ (800c994 <FreeRTOS_AddNetworkInterface+0x64>)
 800c95a:	681b      	ldr	r3, [r3, #0]
 800c95c:	60fb      	str	r3, [r7, #12]

                for( ; ; )
                {
                    if( pxIterator == pxInterface )
 800c95e:	68fa      	ldr	r2, [r7, #12]
 800c960:	687b      	ldr	r3, [r7, #4]
 800c962:	429a      	cmp	r2, r3
 800c964:	d00e      	beq.n	800c984 <FreeRTOS_AddNetworkInterface+0x54>
                    {
                        /* This interface was already added. */
                        break;
                    }

                    if( pxIterator->pxNext == NULL )
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c96a:	2b00      	cmp	r3, #0
 800c96c:	d106      	bne.n	800c97c <FreeRTOS_AddNetworkInterface+0x4c>
                    {
                        pxIterator->pxNext = pxInterface;
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	687a      	ldr	r2, [r7, #4]
 800c972:	625a      	str	r2, [r3, #36]	@ 0x24
                        pxInterface->pxNext = NULL;
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2200      	movs	r2, #0
 800c978:	625a      	str	r2, [r3, #36]	@ 0x24
                        break;
 800c97a:	e004      	b.n	800c986 <FreeRTOS_AddNetworkInterface+0x56>
                    }

                    pxIterator = pxIterator->pxNext;
 800c97c:	68fb      	ldr	r3, [r7, #12]
 800c97e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c980:	60fb      	str	r3, [r7, #12]
                    if( pxIterator == pxInterface )
 800c982:	e7ec      	b.n	800c95e <FreeRTOS_AddNetworkInterface+0x2e>
                        break;
 800c984:	bf00      	nop
                }
            }
        }

        return pxInterface;
 800c986:	687b      	ldr	r3, [r7, #4]
    }
 800c988:	4618      	mov	r0, r3
 800c98a:	3714      	adds	r7, #20
 800c98c:	46bd      	mov	sp, r7
 800c98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c992:	4770      	bx	lr
 800c994:	20001228 	.word	0x20001228

0800c998 <FreeRTOS_FirstNetworkInterface>:
 * @brief Get the first Network Interface, or NULL if none has been added.
 *
 * @return The first interface, or NULL if none has been added
 */
    NetworkInterface_t * FreeRTOS_FirstNetworkInterface( void )
    {
 800c998:	b480      	push	{r7}
 800c99a:	af00      	add	r7, sp, #0
        return pxNetworkInterfaces;
 800c99c:	4b03      	ldr	r3, [pc, #12]	@ (800c9ac <FreeRTOS_FirstNetworkInterface+0x14>)
 800c99e:	681b      	ldr	r3, [r3, #0]
    }
 800c9a0:	4618      	mov	r0, r3
 800c9a2:	46bd      	mov	sp, r7
 800c9a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9a8:	4770      	bx	lr
 800c9aa:	bf00      	nop
 800c9ac:	20001228 	.word	0x20001228

0800c9b0 <FreeRTOS_NextNetworkInterface>:
 *
 * @return The interface that comes after 'pxInterface'. NULL when either 'pxInterface'
 *         is NULL, or when 'pxInterface' is the last interface.
 */
    NetworkInterface_t * FreeRTOS_NextNetworkInterface( const NetworkInterface_t * pxInterface )
    {
 800c9b0:	b480      	push	{r7}
 800c9b2:	b085      	sub	sp, #20
 800c9b4:	af00      	add	r7, sp, #0
 800c9b6:	6078      	str	r0, [r7, #4]
        NetworkInterface_t * pxReturn;

        if( pxInterface != NULL )
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d003      	beq.n	800c9c6 <FreeRTOS_NextNetworkInterface+0x16>
        {
            pxReturn = pxInterface->pxNext;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c9c2:	60fb      	str	r3, [r7, #12]
 800c9c4:	e001      	b.n	800c9ca <FreeRTOS_NextNetworkInterface+0x1a>
        }
        else
        {
            pxReturn = NULL;
 800c9c6:	2300      	movs	r3, #0
 800c9c8:	60fb      	str	r3, [r7, #12]
        }

        return pxReturn;
 800c9ca:	68fb      	ldr	r3, [r7, #12]
    }
 800c9cc:	4618      	mov	r0, r3
 800c9ce:	3714      	adds	r7, #20
 800c9d0:	46bd      	mov	sp, r7
 800c9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c9d6:	4770      	bx	lr

0800c9d8 <FreeRTOS_AddEndPoint>:
 *
 * @return The value of the parameter 'pxEndPoint'.
 */
    static NetworkEndPoint_t * FreeRTOS_AddEndPoint( NetworkInterface_t * pxInterface,
                                                     NetworkEndPoint_t * pxEndPoint )
    {
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b084      	sub	sp, #16
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
 800c9e0:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxIterator = NULL;
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	60fb      	str	r3, [r7, #12]

        /* Double link between the NetworkInterface_t that is using the addressing
         * defined by this NetworkEndPoint_t structure. */
        pxEndPoint->pxNetworkInterface = pxInterface;
 800c9e6:	683b      	ldr	r3, [r7, #0]
 800c9e8:	687a      	ldr	r2, [r7, #4]
 800c9ea:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120

        if( pxInterface->pxEndPoint == NULL )
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	6a1b      	ldr	r3, [r3, #32]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d102      	bne.n	800c9fc <FreeRTOS_AddEndPoint+0x24>
        {
            /*_RB_ When would pxInterface->pxEndPoint ever not be NULL unless this is called twice? */
            /*_HT_ It may be called twice. */
            pxInterface->pxEndPoint = pxEndPoint;
 800c9f6:	687b      	ldr	r3, [r7, #4]
 800c9f8:	683a      	ldr	r2, [r7, #0]
 800c9fa:	621a      	str	r2, [r3, #32]
        }

        if( pxNetworkEndPoints == NULL )
 800c9fc:	4b33      	ldr	r3, [pc, #204]	@ (800cacc <FreeRTOS_AddEndPoint+0xf4>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d107      	bne.n	800ca14 <FreeRTOS_AddEndPoint+0x3c>
        {
            /* No other end points are defined yet - so this is the first in the
             * list. */
            pxEndPoint->pxNext = NULL;
 800ca04:	683b      	ldr	r3, [r7, #0]
 800ca06:	2200      	movs	r2, #0
 800ca08:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
            pxNetworkEndPoints = pxEndPoint;
 800ca0c:	4a2f      	ldr	r2, [pc, #188]	@ (800cacc <FreeRTOS_AddEndPoint+0xf4>)
 800ca0e:	683b      	ldr	r3, [r7, #0]
 800ca10:	6013      	str	r3, [r2, #0]
 800ca12:	e01a      	b.n	800ca4a <FreeRTOS_AddEndPoint+0x72>
        }
        else
        {
            /* Other end points are already defined so iterate to the end of the
             * list. */
            pxIterator = pxNetworkEndPoints;
 800ca14:	4b2d      	ldr	r3, [pc, #180]	@ (800cacc <FreeRTOS_AddEndPoint+0xf4>)
 800ca16:	681b      	ldr	r3, [r3, #0]
 800ca18:	60fb      	str	r3, [r7, #12]

            for( ; ; )
            {
                if( pxIterator == pxEndPoint )
 800ca1a:	68fa      	ldr	r2, [r7, #12]
 800ca1c:	683b      	ldr	r3, [r7, #0]
 800ca1e:	429a      	cmp	r2, r3
 800ca20:	d012      	beq.n	800ca48 <FreeRTOS_AddEndPoint+0x70>
                {
                    /* This end-point has already been added to the list. */
                    break;
                }

                if( pxIterator->pxNext == NULL )
 800ca22:	68fb      	ldr	r3, [r7, #12]
 800ca24:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d108      	bne.n	800ca3e <FreeRTOS_AddEndPoint+0x66>
                {
                    pxEndPoint->pxNext = NULL;
 800ca2c:	683b      	ldr	r3, [r7, #0]
 800ca2e:	2200      	movs	r2, #0
 800ca30:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    pxIterator->pxNext = pxEndPoint;
 800ca34:	68fb      	ldr	r3, [r7, #12]
 800ca36:	683a      	ldr	r2, [r7, #0]
 800ca38:	f8c3 2124 	str.w	r2, [r3, #292]	@ 0x124
                    break;
 800ca3c:	e005      	b.n	800ca4a <FreeRTOS_AddEndPoint+0x72>
                }

                pxIterator = pxIterator->pxNext;
 800ca3e:	68fb      	ldr	r3, [r7, #12]
 800ca40:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800ca44:	60fb      	str	r3, [r7, #12]
                if( pxIterator == pxEndPoint )
 800ca46:	e7e8      	b.n	800ca1a <FreeRTOS_AddEndPoint+0x42>
                    break;
 800ca48:	bf00      	nop
            }
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdTRUE_UNSIGNED )
 800ca4a:	683b      	ldr	r3, [r7, #0]
 800ca4c:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ca50:	f003 0304 	and.w	r3, r3, #4
 800ca54:	b2db      	uxtb	r3, r3
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d00c      	beq.n	800ca74 <FreeRTOS_AddEndPoint+0x9c>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv6: %pip\n",
 800ca5a:	683b      	ldr	r3, [r7, #0]
 800ca5c:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800ca60:	4619      	mov	r1, r3
 800ca62:	683b      	ldr	r3, [r7, #0]
 800ca64:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800ca68:	461a      	mov	r2, r3
 800ca6a:	683b      	ldr	r3, [r7, #0]
 800ca6c:	3390      	adds	r3, #144	@ 0x90
 800ca6e:	4818      	ldr	r0, [pc, #96]	@ (800cad0 <FreeRTOS_AddEndPoint+0xf8>)
 800ca70:	f014 f906 	bl	8020c80 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( void * ) pxEndPoint->ipv6_defaults.xIPAddress.ucBytes ) );
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800ca7a:	f003 0304 	and.w	r3, r3, #4
 800ca7e:	b2db      	uxtb	r3, r3
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d11e      	bne.n	800cac2 <FreeRTOS_AddEndPoint+0xea>
            {
                FreeRTOS_printf( ( "FreeRTOS_AddEndPoint: MAC: %02x-%02x IPv4: %xip\n",
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 800ca8a:	4619      	mov	r1, r3
 800ca8c:	683b      	ldr	r3, [r7, #0]
 800ca8e:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 800ca92:	4618      	mov	r0, r3
 800ca94:	683b      	ldr	r3, [r7, #0]
 800ca96:	69db      	ldr	r3, [r3, #28]
 800ca98:	061a      	lsls	r2, r3, #24
 800ca9a:	683b      	ldr	r3, [r7, #0]
 800ca9c:	69db      	ldr	r3, [r3, #28]
 800ca9e:	021b      	lsls	r3, r3, #8
 800caa0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800caa4:	431a      	orrs	r2, r3
 800caa6:	683b      	ldr	r3, [r7, #0]
 800caa8:	69db      	ldr	r3, [r3, #28]
 800caaa:	0a1b      	lsrs	r3, r3, #8
 800caac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cab0:	431a      	orrs	r2, r3
 800cab2:	683b      	ldr	r3, [r7, #0]
 800cab4:	69db      	ldr	r3, [r3, #28]
 800cab6:	0e1b      	lsrs	r3, r3, #24
 800cab8:	4313      	orrs	r3, r2
 800caba:	4602      	mov	r2, r0
 800cabc:	4805      	ldr	r0, [pc, #20]	@ (800cad4 <FreeRTOS_AddEndPoint+0xfc>)
 800cabe:	f014 f8df 	bl	8020c80 <lUDPLoggingPrintf>
                                   pxEndPoint->xMACAddress.ucBytes[ 5 ],
                                   ( unsigned ) FreeRTOS_ntohl( pxEndPoint->ipv4_defaults.ulIPAddress ) ) );
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        return pxEndPoint;
 800cac2:	683b      	ldr	r3, [r7, #0]
    }
 800cac4:	4618      	mov	r0, r3
 800cac6:	3710      	adds	r7, #16
 800cac8:	46bd      	mov	sp, r7
 800caca:	bd80      	pop	{r7, pc}
 800cacc:	20001224 	.word	0x20001224
 800cad0:	080244b4 	.word	0x080244b4
 800cad4:	080244e8 	.word	0x080244e8

0800cad8 <FreeRTOS_FirstEndPoint>:
 *
 * @return The first end-point that is found to the interface, or NULL when the
 *         interface doesn't have any end-point yet.
 */
    NetworkEndPoint_t * FreeRTOS_FirstEndPoint( const NetworkInterface_t * pxInterface )
    {
 800cad8:	b480      	push	{r7}
 800cada:	b085      	sub	sp, #20
 800cadc:	af00      	add	r7, sp, #0
 800cade:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800cae0:	4b0d      	ldr	r3, [pc, #52]	@ (800cb18 <FreeRTOS_FirstEndPoint+0x40>)
 800cae2:	681b      	ldr	r3, [r3, #0]
 800cae4:	60fb      	str	r3, [r7, #12]

        /* Find and return the NetworkEndPoint_t structure that is associated with
         * the pxInterface NetworkInterface_t. *//*_RB_ Could this be made a two way link, so the NetworkEndPoint_t can just be read from the NetworkInterface_t structure?  Looks like there is a pointer in the struct already. */
        while( pxEndPoint != NULL )
 800cae6:	e00c      	b.n	800cb02 <FreeRTOS_FirstEndPoint+0x2a>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	2b00      	cmp	r3, #0
 800caec:	d00c      	beq.n	800cb08 <FreeRTOS_FirstEndPoint+0x30>
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800caf4:	687a      	ldr	r2, [r7, #4]
 800caf6:	429a      	cmp	r2, r3
 800caf8:	d006      	beq.n	800cb08 <FreeRTOS_FirstEndPoint+0x30>
            {
                break;
            }

            pxEndPoint = pxEndPoint->pxNext;
 800cafa:	68fb      	ldr	r3, [r7, #12]
 800cafc:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cb00:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d1ef      	bne.n	800cae8 <FreeRTOS_FirstEndPoint+0x10>
        }

        return pxEndPoint;
 800cb08:	68fb      	ldr	r3, [r7, #12]
    }
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	3714      	adds	r7, #20
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	20001224 	.word	0x20001224

0800cb1c <FreeRTOS_NextEndPoint>:
 *
 * @return The end-point that is found, or NULL when there are no more end-points in the list.
 */
    NetworkEndPoint_t * FreeRTOS_NextEndPoint( const NetworkInterface_t * pxInterface,
                                               NetworkEndPoint_t * pxEndPoint )
    {
 800cb1c:	b580      	push	{r7, lr}
 800cb1e:	b084      	sub	sp, #16
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	6078      	str	r0, [r7, #4]
 800cb24:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxResult = pxEndPoint;
 800cb26:	683b      	ldr	r3, [r7, #0]
 800cb28:	60fb      	str	r3, [r7, #12]

        if( pxResult != NULL )
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	2b00      	cmp	r3, #0
 800cb2e:	d015      	beq.n	800cb5c <FreeRTOS_NextEndPoint+0x40>
        {
            pxResult = pxResult->pxNext;
 800cb30:	68fb      	ldr	r3, [r7, #12]
 800cb32:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cb36:	60fb      	str	r3, [r7, #12]

            while( pxResult != NULL )
 800cb38:	e00c      	b.n	800cb54 <FreeRTOS_NextEndPoint+0x38>
            {
                if( ( pxInterface == NULL ) || ( pxResult->pxNetworkInterface == pxInterface ) )
 800cb3a:	687b      	ldr	r3, [r7, #4]
 800cb3c:	2b00      	cmp	r3, #0
 800cb3e:	d011      	beq.n	800cb64 <FreeRTOS_NextEndPoint+0x48>
 800cb40:	68fb      	ldr	r3, [r7, #12]
 800cb42:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cb46:	687a      	ldr	r2, [r7, #4]
 800cb48:	429a      	cmp	r2, r3
 800cb4a:	d00b      	beq.n	800cb64 <FreeRTOS_NextEndPoint+0x48>
                {
                    break;
                }

                pxResult = pxResult->pxNext;
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cb52:	60fb      	str	r3, [r7, #12]
            while( pxResult != NULL )
 800cb54:	68fb      	ldr	r3, [r7, #12]
 800cb56:	2b00      	cmp	r3, #0
 800cb58:	d1ef      	bne.n	800cb3a <FreeRTOS_NextEndPoint+0x1e>
 800cb5a:	e003      	b.n	800cb64 <FreeRTOS_NextEndPoint+0x48>
            }
        }
        else
        {
            pxResult = FreeRTOS_FirstEndPoint( pxInterface );
 800cb5c:	6878      	ldr	r0, [r7, #4]
 800cb5e:	f7ff ffbb 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 800cb62:	60f8      	str	r0, [r7, #12]
        }

        return pxResult;
 800cb64:	68fb      	ldr	r3, [r7, #12]
    }
 800cb66:	4618      	mov	r0, r3
 800cb68:	3710      	adds	r7, #16
 800cb6a:	46bd      	mov	sp, r7
 800cb6c:	bd80      	pop	{r7, pc}
	...

0800cb70 <FreeRTOS_FindEndPointOnIP_IPv4>:
 *
 * @return The end-point found or NULL.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv4( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800cb70:	b480      	push	{r7}
 800cb72:	b085      	sub	sp, #20
 800cb74:	af00      	add	r7, sp, #0
 800cb76:	6078      	str	r0, [r7, #4]
 800cb78:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800cb7a:	4b1e      	ldr	r3, [pc, #120]	@ (800cbf4 <FreeRTOS_FindEndPointOnIP_IPv4+0x84>)
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocationsIP ) / sizeof( xRoutingStatistics.ulLocationsIP[ 0 ] ) );
 800cb80:	2308      	movs	r3, #8
 800cb82:	60bb      	str	r3, [r7, #8]

            xRoutingStatistics.ulOnIp++;
 800cb84:	4b1c      	ldr	r3, [pc, #112]	@ (800cbf8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800cb86:	681b      	ldr	r3, [r3, #0]
 800cb88:	3301      	adds	r3, #1
 800cb8a:	4a1b      	ldr	r2, [pc, #108]	@ (800cbf8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800cb8c:	6013      	str	r3, [r2, #0]

            if( ulWhere < ulLocationCount )
 800cb8e:	683a      	ldr	r2, [r7, #0]
 800cb90:	68bb      	ldr	r3, [r7, #8]
 800cb92:	429a      	cmp	r2, r3
 800cb94:	d223      	bcs.n	800cbde <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
            {
                xRoutingStatistics.ulLocationsIP[ ulWhere ]++;
 800cb96:	4a18      	ldr	r2, [pc, #96]	@ (800cbf8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	3312      	adds	r3, #18
 800cb9c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800cba0:	1c5a      	adds	r2, r3, #1
 800cba2:	4915      	ldr	r1, [pc, #84]	@ (800cbf8 <FreeRTOS_FindEndPointOnIP_IPv4+0x88>)
 800cba4:	683b      	ldr	r3, [r7, #0]
 800cba6:	3312      	adds	r3, #18
 800cba8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
            }
        #endif /* ( ipconfigHAS_ROUTING_STATISTICS == 1 ) */

        while( pxEndPoint != NULL )
 800cbac:	e017      	b.n	800cbde <FreeRTOS_FindEndPointOnIP_IPv4+0x6e>
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                #if ( ipconfigUSE_IPv6 != 0 )
                    if( pxEndPoint->bits.bIPv6 == 0U )
 800cbae:	68fb      	ldr	r3, [r7, #12]
 800cbb0:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cbb4:	f003 0304 	and.w	r3, r3, #4
 800cbb8:	b2db      	uxtb	r3, r3
 800cbba:	2b00      	cmp	r3, #0
 800cbbc:	d10b      	bne.n	800cbd6 <FreeRTOS_FindEndPointOnIP_IPv4+0x66>
                #endif
                {
                    if( ( ulIPAddress == 0U ) ||
 800cbbe:	687b      	ldr	r3, [r7, #4]
 800cbc0:	2b00      	cmp	r3, #0
 800cbc2:	d00f      	beq.n	800cbe4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	681b      	ldr	r3, [r3, #0]
                    if( ( ulIPAddress == 0U ) ||
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	d00b      	beq.n	800cbe4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        ( pxEndPoint->ipv4_settings.ulIPAddress == ulIPAddress ) )
 800cbcc:	68fb      	ldr	r3, [r7, #12]
 800cbce:	681b      	ldr	r3, [r3, #0]
                        ( pxEndPoint->ipv4_settings.ulIPAddress == 0U ) ||
 800cbd0:	687a      	ldr	r2, [r7, #4]
 800cbd2:	429a      	cmp	r2, r3
 800cbd4:	d006      	beq.n	800cbe4 <FreeRTOS_FindEndPointOnIP_IPv4+0x74>
                        break;
                    }
                }
            #endif /* ( ipconfigUSE_IPv4 != 0 ) */

            pxEndPoint = pxEndPoint->pxNext;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cbdc:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800cbde:	68fb      	ldr	r3, [r7, #12]
 800cbe0:	2b00      	cmp	r3, #0
 800cbe2:	d1e4      	bne.n	800cbae <FreeRTOS_FindEndPointOnIP_IPv4+0x3e>
        }

        ( void ) ulIPAddress;

        return pxEndPoint;
 800cbe4:	68fb      	ldr	r3, [r7, #12]
    }
 800cbe6:	4618      	mov	r0, r3
 800cbe8:	3714      	adds	r7, #20
 800cbea:	46bd      	mov	sp, r7
 800cbec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cbf0:	4770      	bx	lr
 800cbf2:	bf00      	nop
 800cbf4:	20001224 	.word	0x20001224
 800cbf8:	2000122c 	.word	0x2000122c

0800cbfc <FreeRTOS_FindEndPointOnIP_IPv6>:
 * @param[in] pxIPAddress The IP-address of interest.
 *
 * @return The end-point found or NULL.
 */
        NetworkEndPoint_t * FreeRTOS_FindEndPointOnIP_IPv6( const IPv6_Address_t * pxIPAddress )
        {
 800cbfc:	b580      	push	{r7, lr}
 800cbfe:	b082      	sub	sp, #8
 800cc00:	af00      	add	r7, sp, #0
 800cc02:	6078      	str	r0, [r7, #4]
            return FreeRTOS_InterfaceEPInSameSubnet_IPv6( NULL, pxIPAddress );
 800cc04:	6879      	ldr	r1, [r7, #4]
 800cc06:	2000      	movs	r0, #0
 800cc08:	f000 f8b6 	bl	800cd78 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>
 800cc0c:	4603      	mov	r3, r0
        }
 800cc0e:	4618      	mov	r0, r3
 800cc10:	3708      	adds	r7, #8
 800cc12:	46bd      	mov	sp, r7
 800cc14:	bd80      	pop	{r7, pc}
	...

0800cc18 <FreeRTOS_FindEndPointOnMAC>:
 *
 * @return The end-point that has the given MAC-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnMAC( const MACAddress_t * pxMACAddress,
                                                    const NetworkInterface_t * pxInterface )
    {
 800cc18:	b580      	push	{r7, lr}
 800cc1a:	b084      	sub	sp, #16
 800cc1c:	af00      	add	r7, sp, #0
 800cc1e:	6078      	str	r0, [r7, #4]
 800cc20:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800cc22:	4b17      	ldr	r3, [pc, #92]	@ (800cc80 <FreeRTOS_FindEndPointOnMAC+0x68>)
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	60fb      	str	r3, [r7, #12]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            xRoutingStatistics.ulOnMAC++;
 800cc28:	4b16      	ldr	r3, [pc, #88]	@ (800cc84 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800cc2a:	685b      	ldr	r3, [r3, #4]
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	4a15      	ldr	r2, [pc, #84]	@ (800cc84 <FreeRTOS_FindEndPointOnMAC+0x6c>)
 800cc30:	6053      	str	r3, [r2, #4]
        }
        #endif

        /* If input MAC address is NULL, return NULL. */
        if( pxMACAddress == NULL )
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d119      	bne.n	800cc6c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            pxEndPoint = NULL;
 800cc38:	2300      	movs	r3, #0
 800cc3a:	60fb      	str	r3, [r7, #12]
         * uin64_t variables for direct comparison instead of using memcmp()?  [don't
         * know if there is a quick way of creating a 64-bit number from the 48-byte
         * MAC address without getting junk in the top 2 bytes]. */

        /* Find the end-point with given MAC-address. */
        while( pxEndPoint != NULL )
 800cc3c:	e016      	b.n	800cc6c <FreeRTOS_FindEndPointOnMAC+0x54>
        {
            if( ( pxInterface == NULL ) || ( pxInterface == pxEndPoint->pxNetworkInterface ) )
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	d005      	beq.n	800cc50 <FreeRTOS_FindEndPointOnMAC+0x38>
 800cc44:	68fb      	ldr	r3, [r7, #12]
 800cc46:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cc4a:	683a      	ldr	r2, [r7, #0]
 800cc4c:	429a      	cmp	r2, r3
 800cc4e:	d109      	bne.n	800cc64 <FreeRTOS_FindEndPointOnMAC+0x4c>
            {
                if( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 )
 800cc50:	68fb      	ldr	r3, [r7, #12]
 800cc52:	33e8      	adds	r3, #232	@ 0xe8
 800cc54:	6879      	ldr	r1, [r7, #4]
 800cc56:	2206      	movs	r2, #6
 800cc58:	4618      	mov	r0, r3
 800cc5a:	f015 f9c2 	bl	8021fe2 <memcmp>
 800cc5e:	4603      	mov	r3, r0
 800cc60:	2b00      	cmp	r3, #0
 800cc62:	d007      	beq.n	800cc74 <FreeRTOS_FindEndPointOnMAC+0x5c>
                {
                    break;
                }
            }

            pxEndPoint = pxEndPoint->pxNext;
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cc6a:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800cc6c:	68fb      	ldr	r3, [r7, #12]
 800cc6e:	2b00      	cmp	r3, #0
 800cc70:	d1e5      	bne.n	800cc3e <FreeRTOS_FindEndPointOnMAC+0x26>
 800cc72:	e000      	b.n	800cc76 <FreeRTOS_FindEndPointOnMAC+0x5e>
                    break;
 800cc74:	bf00      	nop
        }

        return pxEndPoint;
 800cc76:	68fb      	ldr	r3, [r7, #12]
    }
 800cc78:	4618      	mov	r0, r3
 800cc7a:	3710      	adds	r7, #16
 800cc7c:	46bd      	mov	sp, r7
 800cc7e:	bd80      	pop	{r7, pc}
 800cc80:	20001224 	.word	0x20001224
 800cc84:	2000122c 	.word	0x2000122c

0800cc88 <FreeRTOS_FindEndPointOnNetMask>:
 *
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_FindEndPointOnNetMask( uint32_t ulIPAddress,
                                                        uint32_t ulWhere )
    {
 800cc88:	b580      	push	{r7, lr}
 800cc8a:	b082      	sub	sp, #8
 800cc8c:	af00      	add	r7, sp, #0
 800cc8e:	6078      	str	r0, [r7, #4]
 800cc90:	6039      	str	r1, [r7, #0]
        /* The 'ulWhere' parameter is only for debugging purposes. */
        return FreeRTOS_InterfaceEndPointOnNetMask( NULL, ulIPAddress, ulWhere );
 800cc92:	683a      	ldr	r2, [r7, #0]
 800cc94:	6879      	ldr	r1, [r7, #4]
 800cc96:	2000      	movs	r0, #0
 800cc98:	f000 f806 	bl	800cca8 <FreeRTOS_InterfaceEndPointOnNetMask>
 800cc9c:	4603      	mov	r3, r0
    }
 800cc9e:	4618      	mov	r0, r3
 800cca0:	3708      	adds	r7, #8
 800cca2:	46bd      	mov	sp, r7
 800cca4:	bd80      	pop	{r7, pc}
	...

0800cca8 <FreeRTOS_InterfaceEndPointOnNetMask>:
 * @return An end-point that has the same network mask as the given IP-address.
 */
    NetworkEndPoint_t * FreeRTOS_InterfaceEndPointOnNetMask( const NetworkInterface_t * pxInterface,
                                                             uint32_t ulIPAddress,
                                                             uint32_t ulWhere )
    {
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b086      	sub	sp, #24
 800ccac:	af00      	add	r7, sp, #0
 800ccae:	60f8      	str	r0, [r7, #12]
 800ccb0:	60b9      	str	r1, [r7, #8]
 800ccb2:	607a      	str	r2, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800ccb4:	4b2d      	ldr	r3, [pc, #180]	@ (800cd6c <FreeRTOS_InterfaceEndPointOnNetMask+0xc4>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	617b      	str	r3, [r7, #20]

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
            uint32_t ulLocationCount = ( uint32_t ) ( sizeof( xRoutingStatistics.ulLocations ) / sizeof( xRoutingStatistics.ulLocations[ 0 ] ) );
 800ccba:	230e      	movs	r3, #14
 800ccbc:	613b      	str	r3, [r7, #16]

            xRoutingStatistics.ulOnNetMask++;
 800ccbe:	4b2c      	ldr	r3, [pc, #176]	@ (800cd70 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800ccc0:	689b      	ldr	r3, [r3, #8]
 800ccc2:	3301      	adds	r3, #1
 800ccc4:	4a2a      	ldr	r2, [pc, #168]	@ (800cd70 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800ccc6:	6093      	str	r3, [r2, #8]

            if( ulWhere < ulLocationCount )
 800ccc8:	687a      	ldr	r2, [r7, #4]
 800ccca:	693b      	ldr	r3, [r7, #16]
 800cccc:	429a      	cmp	r2, r3
 800ccce:	d22d      	bcs.n	800cd2c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
            {
                xRoutingStatistics.ulLocations[ ulWhere ]++;
 800ccd0:	4a27      	ldr	r2, [pc, #156]	@ (800cd70 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800ccd2:	687b      	ldr	r3, [r7, #4]
 800ccd4:	3304      	adds	r3, #4
 800ccd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ccda:	1c5a      	adds	r2, r3, #1
 800ccdc:	4924      	ldr	r1, [pc, #144]	@ (800cd70 <FreeRTOS_InterfaceEndPointOnNetMask+0xc8>)
 800ccde:	687b      	ldr	r3, [r7, #4]
 800cce0:	3304      	adds	r3, #4
 800cce2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /*_RB_ Presumably then a broadcast reply could go out on a different end point to that on
         * which the broadcast was received - although that should not be an issue if the nodes are
         * on the same LAN it could be an issue if the nodes are on separate LAN's. */

        while( pxEndPoint != NULL )
 800cce6:	e021      	b.n	800cd2c <FreeRTOS_InterfaceEndPointOnNetMask+0x84>
        {
            if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800cce8:	68fb      	ldr	r3, [r7, #12]
 800ccea:	2b00      	cmp	r3, #0
 800ccec:	d005      	beq.n	800ccfa <FreeRTOS_InterfaceEndPointOnNetMask+0x52>
 800ccee:	697b      	ldr	r3, [r7, #20]
 800ccf0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800ccf4:	68fa      	ldr	r2, [r7, #12]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d114      	bne.n	800cd24 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    #if ( ipconfigUSE_IPv6 != 0 )
                        if( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED )
 800ccfa:	697b      	ldr	r3, [r7, #20]
 800ccfc:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cd00:	f003 0304 	and.w	r3, r3, #4
 800cd04:	b2db      	uxtb	r3, r3
 800cd06:	2b00      	cmp	r3, #0
 800cd08:	d10c      	bne.n	800cd24 <FreeRTOS_InterfaceEndPointOnNetMask+0x7c>
                    #endif
                    {
                        if( ( ulIPAddress == ~0U ) ||
 800cd0a:	68bb      	ldr	r3, [r7, #8]
 800cd0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cd10:	d00f      	beq.n	800cd32 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                            ( ( ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) == ( pxEndPoint->ipv4_settings.ulIPAddress & pxEndPoint->ipv4_settings.ulNetMask ) ) )
 800cd12:	697b      	ldr	r3, [r7, #20]
 800cd14:	681a      	ldr	r2, [r3, #0]
 800cd16:	68bb      	ldr	r3, [r7, #8]
 800cd18:	405a      	eors	r2, r3
 800cd1a:	697b      	ldr	r3, [r7, #20]
 800cd1c:	685b      	ldr	r3, [r3, #4]
 800cd1e:	4013      	ands	r3, r2
                        if( ( ulIPAddress == ~0U ) ||
 800cd20:	2b00      	cmp	r3, #0
 800cd22:	d006      	beq.n	800cd32 <FreeRTOS_InterfaceEndPointOnNetMask+0x8a>
                        }
                    }
                #endif /* if ( ipconfigUSE_IPv4 != 0 ) */
            }

            pxEndPoint = pxEndPoint->pxNext;
 800cd24:	697b      	ldr	r3, [r7, #20]
 800cd26:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cd2a:	617b      	str	r3, [r7, #20]
        while( pxEndPoint != NULL )
 800cd2c:	697b      	ldr	r3, [r7, #20]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d1da      	bne.n	800cce8 <FreeRTOS_InterfaceEndPointOnNetMask+0x40>
        }

        /* This was only for debugging. */
        if( pxEndPoint == NULL )
 800cd32:	697b      	ldr	r3, [r7, #20]
 800cd34:	2b00      	cmp	r3, #0
 800cd36:	d113      	bne.n	800cd60 <FreeRTOS_InterfaceEndPointOnNetMask+0xb8>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_FindEndPointOnNetMask[%d]: No match for %xip\n",
 800cd38:	68bb      	ldr	r3, [r7, #8]
 800cd3a:	061a      	lsls	r2, r3, #24
 800cd3c:	68bb      	ldr	r3, [r7, #8]
 800cd3e:	021b      	lsls	r3, r3, #8
 800cd40:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cd44:	431a      	orrs	r2, r3
 800cd46:	68bb      	ldr	r3, [r7, #8]
 800cd48:	0a1b      	lsrs	r3, r3, #8
 800cd4a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cd4e:	431a      	orrs	r2, r3
 800cd50:	68bb      	ldr	r3, [r7, #8]
 800cd52:	0e1b      	lsrs	r3, r3, #24
 800cd54:	4313      	orrs	r3, r2
 800cd56:	461a      	mov	r2, r3
 800cd58:	6879      	ldr	r1, [r7, #4]
 800cd5a:	4806      	ldr	r0, [pc, #24]	@ (800cd74 <FreeRTOS_InterfaceEndPointOnNetMask+0xcc>)
 800cd5c:	f013 ff90 	bl	8020c80 <lUDPLoggingPrintf>
                                     ( unsigned ) ulWhere, ( unsigned ) FreeRTOS_ntohl( ulIPAddress ) ) );
        }

        return pxEndPoint;
 800cd60:	697b      	ldr	r3, [r7, #20]
    }
 800cd62:	4618      	mov	r0, r3
 800cd64:	3718      	adds	r7, #24
 800cd66:	46bd      	mov	sp, r7
 800cd68:	bd80      	pop	{r7, pc}
 800cd6a:	bf00      	nop
 800cd6c:	20001224 	.word	0x20001224
 800cd70:	2000122c 	.word	0x2000122c
 800cd74:	0802451c 	.word	0x0802451c

0800cd78 <FreeRTOS_InterfaceEPInSameSubnet_IPv6>:
 * @param[in] pxIPAddress The IPv6-address for which an end-point is looked-up.
 * @return An end-point that is in the same subnet as the given IP-address.
 */
        NetworkEndPoint_t * FreeRTOS_InterfaceEPInSameSubnet_IPv6( const NetworkInterface_t * pxInterface,
                                                                   const IPv6_Address_t * pxIPAddress )
        {
 800cd78:	b580      	push	{r7, lr}
 800cd7a:	b084      	sub	sp, #16
 800cd7c:	af00      	add	r7, sp, #0
 800cd7e:	6078      	str	r0, [r7, #4]
 800cd80:	6039      	str	r1, [r7, #0]
            NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800cd82:	4b17      	ldr	r3, [pc, #92]	@ (800cde0 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x68>)
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	60fb      	str	r3, [r7, #12]

            /* Find the best fitting end-point to reach a given IP-address. */

            while( pxEndPoint != NULL )
 800cd88:	e020      	b.n	800cdcc <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x54>
            {
                if( ( pxInterface == NULL ) || ( pxEndPoint->pxNetworkInterface == pxInterface ) )
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	2b00      	cmp	r3, #0
 800cd8e:	d005      	beq.n	800cd9c <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x24>
 800cd90:	68fb      	ldr	r3, [r7, #12]
 800cd92:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 800cd96:	687a      	ldr	r2, [r7, #4]
 800cd98:	429a      	cmp	r2, r3
 800cd9a:	d113      	bne.n	800cdc4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                {
                    if( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED )
 800cd9c:	68fb      	ldr	r3, [r7, #12]
 800cd9e:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cda2:	f003 0304 	and.w	r3, r3, #4
 800cda6:	b2db      	uxtb	r3, r3
 800cda8:	2b00      	cmp	r3, #0
 800cdaa:	d00b      	beq.n	800cdc4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x4c>
                    {
                        if( xCompareIPv6_Address( &( pxEndPoint->ipv6_settings.xIPAddress ), pxIPAddress, pxEndPoint->ipv6_settings.uxPrefixLength ) == 0 )
 800cdac:	68fb      	ldr	r3, [r7, #12]
 800cdae:	f103 0038 	add.w	r0, r3, #56	@ 0x38
 800cdb2:	68fb      	ldr	r3, [r7, #12]
 800cdb4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800cdb6:	461a      	mov	r2, r3
 800cdb8:	6839      	ldr	r1, [r7, #0]
 800cdba:	f7fd fc0b 	bl	800a5d4 <xCompareIPv6_Address>
 800cdbe:	4603      	mov	r3, r0
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d007      	beq.n	800cdd4 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5c>
                            break;
                        }
                    }
                }

                pxEndPoint = pxEndPoint->pxNext;
 800cdc4:	68fb      	ldr	r3, [r7, #12]
 800cdc6:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800cdca:	60fb      	str	r3, [r7, #12]
            while( pxEndPoint != NULL )
 800cdcc:	68fb      	ldr	r3, [r7, #12]
 800cdce:	2b00      	cmp	r3, #0
 800cdd0:	d1db      	bne.n	800cd8a <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x12>
 800cdd2:	e000      	b.n	800cdd6 <FreeRTOS_InterfaceEPInSameSubnet_IPv6+0x5e>
                            break;
 800cdd4:	bf00      	nop
            }

            return pxEndPoint;
 800cdd6:	68fb      	ldr	r3, [r7, #12]
        }
 800cdd8:	4618      	mov	r0, r3
 800cdda:	3710      	adds	r7, #16
 800cddc:	46bd      	mov	sp, r7
 800cdde:	bd80      	pop	{r7, pc}
 800cde0:	20001224 	.word	0x20001224

0800cde4 <pxEasyFit>:
    NetworkEndPoint_t * pxEasyFit( const NetworkInterface_t * pxNetworkInterface,
                                   const uint16_t usFrameType,
                                   const IP_Address_t * pxIPAddressFrom,
                                   const IP_Address_t * pxIPAddressTo,
                                   const MACAddress_t * pxMACAddress )
    {
 800cde4:	b5b0      	push	{r4, r5, r7, lr}
 800cde6:	b0b0      	sub	sp, #192	@ 0xc0
 800cde8:	af04      	add	r7, sp, #16
 800cdea:	60f8      	str	r0, [r7, #12]
 800cdec:	607a      	str	r2, [r7, #4]
 800cdee:	603b      	str	r3, [r7, #0]
 800cdf0:	460b      	mov	r3, r1
 800cdf2:	817b      	strh	r3, [r7, #10]
        NetworkEndPoint_t * pxEndPoint;
        NetworkEndPoint_t * pxReturn = NULL;
 800cdf4:	2300      	movs	r3, #0
 800cdf6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
        /* endpoints found for IP-type, IP-address, and MAC-address. */
        NetworkEndPoint_t * pxFound[ rMATCH_COUNT ] = { NULL, NULL, NULL, NULL };
 800cdfa:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 800cdfe:	2200      	movs	r2, #0
 800ce00:	601a      	str	r2, [r3, #0]
 800ce02:	605a      	str	r2, [r3, #4]
 800ce04:	609a      	str	r2, [r3, #8]
 800ce06:	60da      	str	r2, [r3, #12]
        BaseType_t xCount[ rMATCH_COUNT ] = { 0, 0, 0, 0 };
 800ce08:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	601a      	str	r2, [r3, #0]
 800ce10:	605a      	str	r2, [r3, #4]
 800ce12:	609a      	str	r2, [r3, #8]
 800ce14:	60da      	str	r2, [r3, #12]
        BaseType_t xIndex;
        BaseType_t xIsIPv6 = ( usFrameType == ipIPv6_FRAME_TYPE ) ? pdTRUE : pdFALSE;
 800ce16:	897b      	ldrh	r3, [r7, #10]
 800ce18:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d101      	bne.n	800ce24 <pxEasyFit+0x40>
 800ce20:	2301      	movs	r3, #1
 800ce22:	e000      	b.n	800ce26 <pxEasyFit+0x42>
 800ce24:	2300      	movs	r3, #0
 800ce26:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
        BaseType_t xGatewayTarget = pdFALSE;
 800ce2a:	2300      	movs	r3, #0
 800ce2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
        BaseType_t xTargetGlobal = pdFALSE;
 800ce30:	2300      	movs	r3, #0
 800ce32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
        ( void ) pxIPAddressFrom;
        ( void ) xGatewayTarget;
        ( void ) xTargetGlobal;

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 800ce36:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800ce3a:	2b01      	cmp	r3, #1
 800ce3c:	d123      	bne.n	800ce86 <pxEasyFit+0xa2>
                    0xfe, 0x80, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x00,
                    0x00, 0x00, 0x00, 0x01
                };
                xGatewayTarget = ( memcmp( ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, 16 ) == 0 ) ? pdTRUE : pdFALSE;
 800ce3e:	683b      	ldr	r3, [r7, #0]
 800ce40:	2210      	movs	r2, #16
 800ce42:	4619      	mov	r1, r3
 800ce44:	4888      	ldr	r0, [pc, #544]	@ (800d068 <pxEasyFit+0x284>)
 800ce46:	f015 f8cc 	bl	8021fe2 <memcmp>
 800ce4a:	4603      	mov	r3, r0
 800ce4c:	2b00      	cmp	r3, #0
 800ce4e:	d101      	bne.n	800ce54 <pxEasyFit+0x70>
 800ce50:	2301      	movs	r3, #1
 800ce52:	e000      	b.n	800ce56 <pxEasyFit+0x72>
 800ce54:	2300      	movs	r3, #0
 800ce56:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

                if( xGatewayTarget == pdTRUE )
 800ce5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800ce5e:	2b01      	cmp	r3, #1
 800ce60:	d105      	bne.n	800ce6e <pxEasyFit+0x8a>
                {
                    FreeRTOS_debug_printf( ( " GW address %pip to %pip\n",
 800ce62:	687b      	ldr	r3, [r7, #4]
 800ce64:	683a      	ldr	r2, [r7, #0]
 800ce66:	4619      	mov	r1, r3
 800ce68:	4880      	ldr	r0, [pc, #512]	@ (800d06c <pxEasyFit+0x288>)
 800ce6a:	f013 ff09 	bl	8020c80 <lUDPLoggingPrintf>
                                             ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
                                             ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes ) );
                }

                xTargetGlobal = ( xIPv6_GetIPType( &( pxIPAddressTo->xIP_IPv6 ) ) == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800ce6e:	683b      	ldr	r3, [r7, #0]
 800ce70:	4618      	mov	r0, r3
 800ce72:	f000 fa15 	bl	800d2a0 <xIPv6_GetIPType>
 800ce76:	4603      	mov	r3, r0
 800ce78:	2b00      	cmp	r3, #0
 800ce7a:	d101      	bne.n	800ce80 <pxEasyFit+0x9c>
 800ce7c:	2301      	movs	r3, #1
 800ce7e:	e000      	b.n	800ce82 <pxEasyFit+0x9e>
 800ce80:	2300      	movs	r3, #0
 800ce82:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        for( pxEndPoint = FreeRTOS_FirstEndPoint( pxNetworkInterface );
 800ce86:	68f8      	ldr	r0, [r7, #12]
 800ce88:	f7ff fe26 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 800ce8c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 800ce90:	e07d      	b.n	800cf8e <pxEasyFit+0x1aa>
             pxEndPoint != NULL;
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
        {
            BaseType_t xSameMACAddress = ( memcmp( pxEndPoint->xMACAddress.ucBytes, pxMACAddress->ucBytes, ipMAC_ADDRESS_LENGTH_BYTES ) == 0 ) ? pdTRUE : pdFALSE;
 800ce92:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ce96:	33e8      	adds	r3, #232	@ 0xe8
 800ce98:	f8d7 10c0 	ldr.w	r1, [r7, #192]	@ 0xc0
 800ce9c:	2206      	movs	r2, #6
 800ce9e:	4618      	mov	r0, r3
 800cea0:	f015 f89f 	bl	8021fe2 <memcmp>
 800cea4:	4603      	mov	r3, r0
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d101      	bne.n	800ceae <pxEasyFit+0xca>
 800ceaa:	2301      	movs	r3, #1
 800ceac:	e000      	b.n	800ceb0 <pxEasyFit+0xcc>
 800ceae:	2300      	movs	r3, #0
 800ceb0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

            if( xIsIPv6 == ( BaseType_t ) pxEndPoint->bits.bIPv6 )
 800ceb4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ceb8:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800cebc:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800cec0:	b2db      	uxtb	r3, r3
 800cec2:	461a      	mov	r2, r3
 800cec4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cec8:	4293      	cmp	r3, r2
 800ceca:	d159      	bne.n	800cf80 <pxEasyFit+0x19c>
            {
                pxFound[ rMATCH_IP_TYPE ] = pxEndPoint;
 800cecc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800ced0:	67fb      	str	r3, [r7, #124]	@ 0x7c
                xCount[ rMATCH_IP_TYPE ]++;
 800ced2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800ced4:	3301      	adds	r3, #1
 800ced6:	66fb      	str	r3, [r7, #108]	@ 0x6c

                /* Case default is impossible to reach because no endpoints for disabled IP type. */
                switch( xIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 800ced8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800cedc:	2b01      	cmp	r3, #1
 800cede:	d134      	bne.n	800cf4a <pxEasyFit+0x166>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case ( BaseType_t ) pdTRUE:
                           {
                               IPv6_Type_t xEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 800cee0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cee4:	3338      	adds	r3, #56	@ 0x38
 800cee6:	4618      	mov	r0, r3
 800cee8:	f000 f9da 	bl	800d2a0 <xIPv6_GetIPType>
 800ceec:	4603      	mov	r3, r0
 800ceee:	f887 3087 	strb.w	r3, [r7, #135]	@ 0x87

                               if( xEndpointType != eIPv6_Unknown )
 800cef2:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cef6:	2b05      	cmp	r3, #5
 800cef8:	d035      	beq.n	800cf66 <pxEasyFit+0x182>
                               {
                                   BaseType_t xEndpointGlobal = ( xEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 800cefa:	f897 3087 	ldrb.w	r3, [r7, #135]	@ 0x87
 800cefe:	2b00      	cmp	r3, #0
 800cf00:	d101      	bne.n	800cf06 <pxEasyFit+0x122>
 800cf02:	2301      	movs	r3, #1
 800cf04:	e000      	b.n	800cf08 <pxEasyFit+0x124>
 800cf06:	2300      	movs	r3, #0
 800cf08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

                                   if( ( memcmp( pxEndPoint->ipv6_settings.xIPAddress.ucBytes, pxIPAddressTo->xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 ) )
 800cf0c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf10:	3338      	adds	r3, #56	@ 0x38
 800cf12:	6839      	ldr	r1, [r7, #0]
 800cf14:	2210      	movs	r2, #16
 800cf16:	4618      	mov	r0, r3
 800cf18:	f015 f863 	bl	8021fe2 <memcmp>
 800cf1c:	4603      	mov	r3, r0
 800cf1e:	2b00      	cmp	r3, #0
 800cf20:	d106      	bne.n	800cf30 <pxEasyFit+0x14c>
                                   {
                                       pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800cf22:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf26:	673b      	str	r3, [r7, #112]	@ 0x70
                                       xCount[ rMATCH_IP_ADDR ]++;
 800cf28:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf2a:	3301      	adds	r3, #1
 800cf2c:	663b      	str	r3, [r7, #96]	@ 0x60
                               else
                               {
                                   /* do nothing, coverity happy */
                               }
                           }
                           break;
 800cf2e:	e01a      	b.n	800cf66 <pxEasyFit+0x182>
                                   else if( xTargetGlobal == xEndpointGlobal )
 800cf30:	f8d7 20a0 	ldr.w	r2, [r7, #160]	@ 0xa0
 800cf34:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800cf38:	429a      	cmp	r2, r3
 800cf3a:	d114      	bne.n	800cf66 <pxEasyFit+0x182>
                                       pxFound[ rMATCH_IPv6_TYPE ] = pxEndPoint;
 800cf3c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf40:	677b      	str	r3, [r7, #116]	@ 0x74
                                       xCount[ rMATCH_IPv6_TYPE ]++;
 800cf42:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800cf44:	3301      	adds	r3, #1
 800cf46:	667b      	str	r3, [r7, #100]	@ 0x64
                           break;
 800cf48:	e00d      	b.n	800cf66 <pxEasyFit+0x182>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    case ( BaseType_t ) pdFALSE:
                    default:
                        #if ( ipconfigUSE_IPv4 != 0 )
                            if( pxEndPoint->ipv4_settings.ulIPAddress == pxIPAddressTo->ulIP_IPv4 )
 800cf4a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf4e:	681a      	ldr	r2, [r3, #0]
 800cf50:	683b      	ldr	r3, [r7, #0]
 800cf52:	681b      	ldr	r3, [r3, #0]
 800cf54:	429a      	cmp	r2, r3
 800cf56:	d108      	bne.n	800cf6a <pxEasyFit+0x186>
                            {
                                pxFound[ rMATCH_IP_ADDR ] = pxEndPoint;
 800cf58:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf5c:	673b      	str	r3, [r7, #112]	@ 0x70
                                xCount[ rMATCH_IP_ADDR ]++;
 800cf5e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800cf60:	3301      	adds	r3, #1
 800cf62:	663b      	str	r3, [r7, #96]	@ 0x60
                            {
                                /* do nothing, coverity happy */
                            }
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                        break;
 800cf64:	e001      	b.n	800cf6a <pxEasyFit+0x186>
                           break;
 800cf66:	bf00      	nop
 800cf68:	e000      	b.n	800cf6c <pxEasyFit+0x188>
                        break;
 800cf6a:	bf00      	nop
                }

                if( xSameMACAddress == pdTRUE )
 800cf6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800cf70:	2b01      	cmp	r3, #1
 800cf72:	d105      	bne.n	800cf80 <pxEasyFit+0x19c>
                {
                    xCount[ rMATCH_MAC_ADDR ]++;
 800cf74:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800cf76:	3301      	adds	r3, #1
 800cf78:	66bb      	str	r3, [r7, #104]	@ 0x68
                    pxFound[ rMATCH_MAC_ADDR ] = pxEndPoint;
 800cf7a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf7e:	67bb      	str	r3, [r7, #120]	@ 0x78
             pxEndPoint = FreeRTOS_NextEndPoint( pxNetworkInterface, pxEndPoint ) )
 800cf80:	f8d7 10ac 	ldr.w	r1, [r7, #172]	@ 0xac
 800cf84:	68f8      	ldr	r0, [r7, #12]
 800cf86:	f7ff fdc9 	bl	800cb1c <FreeRTOS_NextEndPoint>
 800cf8a:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
             pxEndPoint != NULL;
 800cf8e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800cf92:	2b00      	cmp	r3, #0
 800cf94:	f47f af7d 	bne.w	800ce92 <pxEasyFit+0xae>
                }
            }
        }

        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800cf98:	2300      	movs	r3, #0
 800cf9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cf9e:	e017      	b.n	800cfd0 <pxEasyFit+0x1ec>
        {
            if( xCount[ xIndex ] >= 1 )
 800cfa0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cfa4:	009b      	lsls	r3, r3, #2
 800cfa6:	33b0      	adds	r3, #176	@ 0xb0
 800cfa8:	443b      	add	r3, r7
 800cfaa:	f853 3c50 	ldr.w	r3, [r3, #-80]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	dd09      	ble.n	800cfc6 <pxEasyFit+0x1e2>
            {
                pxReturn = pxFound[ xIndex ];
 800cfb2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cfb6:	009b      	lsls	r3, r3, #2
 800cfb8:	33b0      	adds	r3, #176	@ 0xb0
 800cfba:	443b      	add	r3, r7
 800cfbc:	f853 3c40 	ldr.w	r3, [r3, #-64]
 800cfc0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
                break;
 800cfc4:	e008      	b.n	800cfd8 <pxEasyFit+0x1f4>
        for( xIndex = 0; xIndex < rMATCH_COUNT; xIndex++ )
 800cfc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cfca:	3301      	adds	r3, #1
 800cfcc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800cfd0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800cfd4:	2b03      	cmp	r3, #3
 800cfd6:	dde3      	ble.n	800cfa0 <pxEasyFit+0x1bc>
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            if( pxReturn == NULL )
 800cfd8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800cfdc:	2b00      	cmp	r3, #0
 800cfde:	d13c      	bne.n	800d05a <pxEasyFit+0x276>
            {
                char pcBufferFrom[ 40 ];
                char pcBufferTo[ 40 ];
                BaseType_t xFamily = ( usFrameType == ipIPv6_FRAME_TYPE ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET4;
 800cfe0:	897b      	ldrh	r3, [r7, #10]
 800cfe2:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800cfe6:	4293      	cmp	r3, r2
 800cfe8:	d101      	bne.n	800cfee <pxEasyFit+0x20a>
 800cfea:	230a      	movs	r3, #10
 800cfec:	e000      	b.n	800cff0 <pxEasyFit+0x20c>
 800cfee:	2302      	movs	r3, #2
 800cff0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
                const char * xRetNtopTo;
                const char * xRetNtopFrom;
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
                                                 ( void * ) pxIPAddressTo->xIP_IPv6.ucBytes,
 800cff4:	6839      	ldr	r1, [r7, #0]
                xRetNtopTo = FreeRTOS_inet_ntop( xFamily,
 800cff6:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800cffa:	2328      	movs	r3, #40	@ 0x28
 800cffc:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d000:	f001 fc70 	bl	800e8e4 <FreeRTOS_inet_ntop>
 800d004:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90
                                                 pcBufferTo,
                                                 sizeof( pcBufferTo ) );
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
                                                   ( void * ) pxIPAddressFrom->xIP_IPv6.ucBytes,
 800d008:	6879      	ldr	r1, [r7, #4]
                xRetNtopFrom = FreeRTOS_inet_ntop( xFamily,
 800d00a:	f107 0210 	add.w	r2, r7, #16
 800d00e:	2328      	movs	r3, #40	@ 0x28
 800d010:	f8d7 0094 	ldr.w	r0, [r7, #148]	@ 0x94
 800d014:	f001 fc66 	bl	800e8e4 <FreeRTOS_inet_ntop>
 800d018:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
                                                   pcBufferFrom,
                                                   sizeof( pcBufferFrom ) );

                FreeRTOS_debug_printf( ( "EasyFit[%x]: %d %d %d ( %s ->%s ) BAD\n",
 800d01c:	8979      	ldrh	r1, [r7, #10]
 800d01e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800d020:	461c      	mov	r4, r3
 800d022:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800d024:	461d      	mov	r5, r3
 800d026:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800d028:	4618      	mov	r0, r3
 800d02a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800d02e:	2b00      	cmp	r3, #0
 800d030:	d002      	beq.n	800d038 <pxEasyFit+0x254>
 800d032:	f107 0310 	add.w	r3, r7, #16
 800d036:	e000      	b.n	800d03a <pxEasyFit+0x256>
 800d038:	4b0d      	ldr	r3, [pc, #52]	@ (800d070 <pxEasyFit+0x28c>)
 800d03a:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 800d03e:	2a00      	cmp	r2, #0
 800d040:	d002      	beq.n	800d048 <pxEasyFit+0x264>
 800d042:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 800d046:	e000      	b.n	800d04a <pxEasyFit+0x266>
 800d048:	4a09      	ldr	r2, [pc, #36]	@ (800d070 <pxEasyFit+0x28c>)
 800d04a:	9202      	str	r2, [sp, #8]
 800d04c:	9301      	str	r3, [sp, #4]
 800d04e:	9000      	str	r0, [sp, #0]
 800d050:	462b      	mov	r3, r5
 800d052:	4622      	mov	r2, r4
 800d054:	4807      	ldr	r0, [pc, #28]	@ (800d074 <pxEasyFit+0x290>)
 800d056:	f013 fe13 	bl	8020c80 <lUDPLoggingPrintf>
                                         ( xRetNtopFrom == NULL ) ? "INVALID" : pcBufferFrom,
                                         ( xRetNtopTo == NULL ) ? "INVALID" : pcBufferTo ) );
            }
        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

        return pxReturn;
 800d05a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
    }
 800d05e:	4618      	mov	r0, r3
 800d060:	37b0      	adds	r7, #176	@ 0xb0
 800d062:	46bd      	mov	sp, r7
 800d064:	bdb0      	pop	{r4, r5, r7, pc}
 800d066:	bf00      	nop
 800d068:	08026368 	.word	0x08026368
 800d06c:	080245b8 	.word	0x080245b8
 800d070:	080245d4 	.word	0x080245d4
 800d074:	080245dc 	.word	0x080245dc

0800d078 <FreeRTOS_MatchingEndpoint>:
 *
 * @return The end-point that should handle the incoming Ethernet packet.
 */
    NetworkEndPoint_t * FreeRTOS_MatchingEndpoint( const NetworkInterface_t * pxNetworkInterface,
                                                   const uint8_t * pucEthernetBuffer )
    {
 800d078:	b590      	push	{r4, r7, lr}
 800d07a:	b097      	sub	sp, #92	@ 0x5c
 800d07c:	af02      	add	r7, sp, #8
 800d07e:	6078      	str	r0, [r7, #4]
 800d080:	6039      	str	r1, [r7, #0]
        NetworkEndPoint_t * pxEndPoint = NULL;
 800d082:	2300      	movs	r3, #0
 800d084:	64fb      	str	r3, [r7, #76]	@ 0x4c
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolPacket_t * pxPacket = ( ( const ProtocolPacket_t * ) pucEthernetBuffer );
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	647b      	str	r3, [r7, #68]	@ 0x44

        #if ( ipconfigUSE_IPv6 != 0 )
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPPacket_IPv6_t * pxIPPacket_IPv6 = ( ( const IPPacket_IPv6_t * ) pucEthernetBuffer );
 800d08a:	683b      	ldr	r3, [r7, #0]
 800d08c:	643b      	str	r3, [r7, #64]	@ 0x40
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        configASSERT( pucEthernetBuffer != NULL );
 800d08e:	683b      	ldr	r3, [r7, #0]
 800d090:	2b00      	cmp	r3, #0
 800d092:	d104      	bne.n	800d09e <FreeRTOS_MatchingEndpoint+0x26>
 800d094:	f44f 7164 	mov.w	r1, #912	@ 0x390
 800d098:	485e      	ldr	r0, [pc, #376]	@ (800d214 <FreeRTOS_MatchingEndpoint+0x19c>)
 800d09a:	f7f4 f9e9 	bl	8001470 <vAssertCalled>
        #ifndef _lint
        {
            /* MISRA Ref 11.4.3 [Casting pointer to int for verification] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            uintptr_t uxAddress = ( uintptr_t ) pucEthernetBuffer;
 800d09e:	683b      	ldr	r3, [r7, #0]
 800d0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
            uxAddress += 2U;
 800d0a2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0a4:	3302      	adds	r3, #2
 800d0a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
            configASSERT( ( uxAddress % 4U ) == 0U );
 800d0a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800d0aa:	f003 0303 	and.w	r3, r3, #3
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d004      	beq.n	800d0bc <FreeRTOS_MatchingEndpoint+0x44>
 800d0b2:	f240 319b 	movw	r1, #923	@ 0x39b
 800d0b6:	4857      	ldr	r0, [pc, #348]	@ (800d214 <FreeRTOS_MatchingEndpoint+0x19c>)
 800d0b8:	f7f4 f9da 	bl	8001470 <vAssertCalled>
         */

        #if ( ipconfigHAS_ROUTING_STATISTICS == 1 )
        {
            /* Some stats while developing. */
            xRoutingStatistics.ulMatching++;
 800d0bc:	4b56      	ldr	r3, [pc, #344]	@ (800d218 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800d0be:	68db      	ldr	r3, [r3, #12]
 800d0c0:	3301      	adds	r3, #1
 800d0c2:	4a55      	ldr	r2, [pc, #340]	@ (800d218 <FreeRTOS_MatchingEndpoint+0x1a0>)
 800d0c4:	60d3      	str	r3, [r2, #12]
        }
        #endif
        {
            uint16_t usFrameType = pxPacket->xUDPPacket.xEthernetHeader.usFrameType;
 800d0c6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d0c8:	7b1a      	ldrb	r2, [r3, #12]
 800d0ca:	7b5b      	ldrb	r3, [r3, #13]
 800d0cc:	021b      	lsls	r3, r3, #8
 800d0ce:	4313      	orrs	r3, r2
 800d0d0:	877b      	strh	r3, [r7, #58]	@ 0x3a
            IP_Address_t xIPAddressFrom;
            IP_Address_t xIPAddressTo;
            MACAddress_t xMACAddress;
            BaseType_t xDoProcessPacket = pdFALSE;
 800d0d2:	2300      	movs	r3, #0
 800d0d4:	64bb      	str	r3, [r7, #72]	@ 0x48

            ( void ) memset( xIPAddressFrom.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800d0d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800d0da:	2210      	movs	r2, #16
 800d0dc:	2100      	movs	r1, #0
 800d0de:	4618      	mov	r0, r3
 800d0e0:	f014 f8f7 	bl	80212d2 <memset>
            ( void ) memset( xIPAddressTo.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 800d0e4:	f107 0314 	add.w	r3, r7, #20
 800d0e8:	2210      	movs	r2, #16
 800d0ea:	2100      	movs	r1, #0
 800d0ec:	4618      	mov	r0, r3
 800d0ee:	f014 f8f0 	bl	80212d2 <memset>

            switch( usFrameType )
 800d0f2:	8f7b      	ldrh	r3, [r7, #58]	@ 0x3a
 800d0f4:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d0f8:	4293      	cmp	r3, r2
 800d0fa:	d009      	beq.n	800d110 <FreeRTOS_MatchingEndpoint+0x98>
 800d0fc:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 800d100:	4293      	cmp	r3, r2
 800d102:	dc6a      	bgt.n	800d1da <FreeRTOS_MatchingEndpoint+0x162>
 800d104:	2b08      	cmp	r3, #8
 800d106:	d05d      	beq.n	800d1c4 <FreeRTOS_MatchingEndpoint+0x14c>
 800d108:	f5b3 6fc1 	cmp.w	r3, #1544	@ 0x608
 800d10c:	d015      	beq.n	800d13a <FreeRTOS_MatchingEndpoint+0xc2>
                    #if ( ipconfigPROCESS_CUSTOM_ETHERNET_FRAMES == 1 )
                        /* Custom frame types, match by MAC address only. */
                        xDoProcessPacket = pdTRUE;
                    #endif

                    break;
 800d10e:	e064      	b.n	800d1da <FreeRTOS_MatchingEndpoint+0x162>
                        ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d110:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d112:	3316      	adds	r3, #22
 800d114:	f107 0424 	add.w	r4, r7, #36	@ 0x24
 800d118:	6818      	ldr	r0, [r3, #0]
 800d11a:	6859      	ldr	r1, [r3, #4]
 800d11c:	689a      	ldr	r2, [r3, #8]
 800d11e:	68db      	ldr	r3, [r3, #12]
 800d120:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxIPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800d122:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d124:	3326      	adds	r3, #38	@ 0x26
 800d126:	f107 0414 	add.w	r4, r7, #20
 800d12a:	6818      	ldr	r0, [r3, #0]
 800d12c:	6859      	ldr	r1, [r3, #4]
 800d12e:	689a      	ldr	r2, [r3, #8]
 800d130:	68db      	ldr	r3, [r3, #12]
 800d132:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                        xDoProcessPacket = pdTRUE;
 800d134:	2301      	movs	r3, #1
 800d136:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d138:	e050      	b.n	800d1dc <FreeRTOS_MatchingEndpoint+0x164>
                        const ARPPacket_t * pxARPFrame = ( const ARPPacket_t * ) pucEthernetBuffer;
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	637b      	str	r3, [r7, #52]	@ 0x34
                        if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REQUEST )
 800d13e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d140:	8a9b      	ldrh	r3, [r3, #20]
 800d142:	b29b      	uxth	r3, r3
 800d144:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d148:	d108      	bne.n	800d15c <FreeRTOS_MatchingEndpoint+0xe4>
                            ( void ) memcpy( xIPAddressFrom.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800d14a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d14c:	331c      	adds	r3, #28
 800d14e:	681b      	ldr	r3, [r3, #0]
 800d150:	627b      	str	r3, [r7, #36]	@ 0x24
                            xIPAddressTo.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800d152:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d154:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800d158:	617b      	str	r3, [r7, #20]
 800d15a:	e00d      	b.n	800d178 <FreeRTOS_MatchingEndpoint+0x100>
                        else if( pxARPFrame->xARPHeader.usOperation == ( uint16_t ) ipARP_REPLY )
 800d15c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d15e:	8a9b      	ldrh	r3, [r3, #20]
 800d160:	b29b      	uxth	r3, r3
 800d162:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d166:	d107      	bne.n	800d178 <FreeRTOS_MatchingEndpoint+0x100>
                            ( void ) memcpy( xIPAddressTo.xIP_IPv6.ucBytes, pxPacket->xARPPacket.xARPHeader.ucSenderProtocolAddress, sizeof( uint32_t ) );
 800d168:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d16a:	331c      	adds	r3, #28
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	617b      	str	r3, [r7, #20]
                            xIPAddressFrom.ulIP_IPv4 = pxPacket->xARPPacket.xARPHeader.ulTargetProtocolAddress;
 800d170:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d172:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 800d176:	627b      	str	r3, [r7, #36]	@ 0x24
                        FreeRTOS_debug_printf( ( "pxEasyFit: ARP %xip -> %xip\n", ( unsigned ) FreeRTOS_ntohl( xIPAddressFrom.ulIP_IPv4 ), ( unsigned ) FreeRTOS_ntohl( xIPAddressTo.ulIP_IPv4 ) ) );
 800d178:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17a:	061a      	lsls	r2, r3, #24
 800d17c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d17e:	021b      	lsls	r3, r3, #8
 800d180:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d184:	431a      	orrs	r2, r3
 800d186:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d188:	0a1b      	lsrs	r3, r3, #8
 800d18a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d18e:	431a      	orrs	r2, r3
 800d190:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d192:	0e1b      	lsrs	r3, r3, #24
 800d194:	ea42 0103 	orr.w	r1, r2, r3
 800d198:	697b      	ldr	r3, [r7, #20]
 800d19a:	061a      	lsls	r2, r3, #24
 800d19c:	697b      	ldr	r3, [r7, #20]
 800d19e:	021b      	lsls	r3, r3, #8
 800d1a0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800d1a4:	431a      	orrs	r2, r3
 800d1a6:	697b      	ldr	r3, [r7, #20]
 800d1a8:	0a1b      	lsrs	r3, r3, #8
 800d1aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800d1ae:	431a      	orrs	r2, r3
 800d1b0:	697b      	ldr	r3, [r7, #20]
 800d1b2:	0e1b      	lsrs	r3, r3, #24
 800d1b4:	4313      	orrs	r3, r2
 800d1b6:	461a      	mov	r2, r3
 800d1b8:	4818      	ldr	r0, [pc, #96]	@ (800d21c <FreeRTOS_MatchingEndpoint+0x1a4>)
 800d1ba:	f013 fd61 	bl	8020c80 <lUDPLoggingPrintf>
                    xDoProcessPacket = pdTRUE;
 800d1be:	2301      	movs	r3, #1
 800d1c0:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d1c2:	e00b      	b.n	800d1dc <FreeRTOS_MatchingEndpoint+0x164>
                        xIPAddressFrom.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulSourceIPAddress;
 800d1c4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1c6:	f8d3 301a 	ldr.w	r3, [r3, #26]
 800d1ca:	627b      	str	r3, [r7, #36]	@ 0x24
                        xIPAddressTo.ulIP_IPv4 = pxPacket->xUDPPacket.xIPHeader.ulDestinationIPAddress;
 800d1cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800d1ce:	f8d3 301e 	ldr.w	r3, [r3, #30]
 800d1d2:	617b      	str	r3, [r7, #20]
                        xDoProcessPacket = pdTRUE;
 800d1d4:	2301      	movs	r3, #1
 800d1d6:	64bb      	str	r3, [r7, #72]	@ 0x48
                    break;
 800d1d8:	e000      	b.n	800d1dc <FreeRTOS_MatchingEndpoint+0x164>
                    break;
 800d1da:	bf00      	nop
            }

            if( xDoProcessPacket == pdTRUE )
 800d1dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800d1de:	2b01      	cmp	r3, #1
 800d1e0:	d113      	bne.n	800d20a <FreeRTOS_MatchingEndpoint+0x192>
            {
                ( void ) memcpy( xMACAddress.ucBytes, pxPacket->xUDPPacket.xEthernetHeader.xDestinationAddress.ucBytes, ipMAC_ADDRESS_LENGTH_BYTES );
 800d1e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800d1e4:	f107 030c 	add.w	r3, r7, #12
 800d1e8:	6810      	ldr	r0, [r2, #0]
 800d1ea:	6018      	str	r0, [r3, #0]
 800d1ec:	8892      	ldrh	r2, [r2, #4]
 800d1ee:	809a      	strh	r2, [r3, #4]
                pxEndPoint = pxEasyFit( pxNetworkInterface,
 800d1f0:	f107 0014 	add.w	r0, r7, #20
 800d1f4:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800d1f8:	8f79      	ldrh	r1, [r7, #58]	@ 0x3a
 800d1fa:	f107 030c 	add.w	r3, r7, #12
 800d1fe:	9300      	str	r3, [sp, #0]
 800d200:	4603      	mov	r3, r0
 800d202:	6878      	ldr	r0, [r7, #4]
 800d204:	f7ff fdee 	bl	800cde4 <pxEasyFit>
 800d208:	64f8      	str	r0, [r7, #76]	@ 0x4c
                                        &xIPAddressFrom,
                                        &xIPAddressTo,
                                        &xMACAddress );
            }
        }
        return pxEndPoint;
 800d20a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 800d20c:	4618      	mov	r0, r3
 800d20e:	3754      	adds	r7, #84	@ 0x54
 800d210:	46bd      	mov	sp, r7
 800d212:	bd90      	pop	{r4, r7, pc}
 800d214:	08024604 	.word	0x08024604
 800d218:	2000122c 	.word	0x2000122c
 800d21c:	08024634 	.word	0x08024634

0800d220 <FreeRTOS_FindGateWay>:
 * @param[in] xIPType The type of Gateway to look for ( ipTYPE_IPv4 or ipTYPE_IPv6 ).
 *
 * @return The end-point that will lead to the gateway, or NULL when no gateway was found.
 */
    NetworkEndPoint_t * FreeRTOS_FindGateWay( BaseType_t xIPType )
    {
 800d220:	b580      	push	{r7, lr}
 800d222:	b084      	sub	sp, #16
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
        NetworkEndPoint_t * pxEndPoint = pxNetworkEndPoints;
 800d228:	4b1b      	ldr	r3, [pc, #108]	@ (800d298 <FreeRTOS_FindGateWay+0x78>)
 800d22a:	681b      	ldr	r3, [r3, #0]
 800d22c:	60fb      	str	r3, [r7, #12]

        while( pxEndPoint != NULL )
 800d22e:	e028      	b.n	800d282 <FreeRTOS_FindGateWay+0x62>
                if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U ) /* access to ipv4_settings is checked. */
                {
                    break;
                }
            #else
                if( ( xIPType == ( BaseType_t ) ipTYPE_IPv6 ) && ( pxEndPoint->bits.bIPv6 != pdFALSE_UNSIGNED ) )
 800d230:	687b      	ldr	r3, [r7, #4]
 800d232:	2b60      	cmp	r3, #96	@ 0x60
 800d234:	d112      	bne.n	800d25c <FreeRTOS_FindGateWay+0x3c>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d23c:	f003 0304 	and.w	r3, r3, #4
 800d240:	b2db      	uxtb	r3, r3
 800d242:	2b00      	cmp	r3, #0
 800d244:	d00a      	beq.n	800d25c <FreeRTOS_FindGateWay+0x3c>
                {
                    /* Check if the IP-address is non-zero. */
                    if( memcmp( FreeRTOS_in6addr_any.ucBytes, pxEndPoint->ipv6_settings.xGatewayAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) != 0 )
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	335c      	adds	r3, #92	@ 0x5c
 800d24a:	2210      	movs	r2, #16
 800d24c:	4619      	mov	r1, r3
 800d24e:	4813      	ldr	r0, [pc, #76]	@ (800d29c <FreeRTOS_FindGateWay+0x7c>)
 800d250:	f014 fec7 	bl	8021fe2 <memcmp>
 800d254:	4603      	mov	r3, r0
 800d256:	2b00      	cmp	r3, #0
 800d258:	d00f      	beq.n	800d27a <FreeRTOS_FindGateWay+0x5a>
                    {
                        break;
 800d25a:	e017      	b.n	800d28c <FreeRTOS_FindGateWay+0x6c>
                    }
                }

                #if ( ipconfigUSE_IPv4 != 0 )
                    else
                    if( ( xIPType == ( BaseType_t ) ipTYPE_IPv4 ) && ( pxEndPoint->bits.bIPv6 == pdFALSE_UNSIGNED ) )
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	2b40      	cmp	r3, #64	@ 0x40
 800d260:	d10b      	bne.n	800d27a <FreeRTOS_FindGateWay+0x5a>
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d268:	f003 0304 	and.w	r3, r3, #4
 800d26c:	b2db      	uxtb	r3, r3
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d103      	bne.n	800d27a <FreeRTOS_FindGateWay+0x5a>
                    {
                        if( pxEndPoint->ipv4_settings.ulGatewayAddress != 0U )
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	689b      	ldr	r3, [r3, #8]
 800d276:	2b00      	cmp	r3, #0
 800d278:	d107      	bne.n	800d28a <FreeRTOS_FindGateWay+0x6a>
                else
                {
                    /* This end-point is not the right IP-type. */
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
            pxEndPoint = pxEndPoint->pxNext;
 800d27a:	68fb      	ldr	r3, [r7, #12]
 800d27c:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
 800d280:	60fb      	str	r3, [r7, #12]
        while( pxEndPoint != NULL )
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d1d3      	bne.n	800d230 <FreeRTOS_FindGateWay+0x10>
 800d288:	e000      	b.n	800d28c <FreeRTOS_FindGateWay+0x6c>
                            break;
 800d28a:	bf00      	nop
        }

        return pxEndPoint;
 800d28c:	68fb      	ldr	r3, [r7, #12]
    }
 800d28e:	4618      	mov	r0, r3
 800d290:	3710      	adds	r7, #16
 800d292:	46bd      	mov	sp, r7
 800d294:	bd80      	pop	{r7, pc}
 800d296:	bf00      	nop
 800d298:	20001224 	.word	0x20001224
 800d29c:	08026320 	.word	0x08026320

0800d2a0 <xIPv6_GetIPType>:
 * @param[in] pxAddress The IPv6 address whose type needs to be returned.
 * @returns The IP type of the given address.
 */
#if ( ipconfigUSE_IPv6 != 0 )
    IPv6_Type_t xIPv6_GetIPType( const IPv6_Address_t * pxAddress )
    {
 800d2a0:	b580      	push	{r7, lr}
 800d2a2:	b086      	sub	sp, #24
 800d2a4:	af00      	add	r7, sp, #0
 800d2a6:	6078      	str	r0, [r7, #4]
        IPv6_Type_t eResult = eIPv6_Unknown;
 800d2a8:	2305      	movs	r3, #5
 800d2aa:	75fb      	strb	r3, [r7, #23]
            { eIPv6_SiteLocal, 0xFFC0U, 0xFEC0U }, /* 1111 1110 11 */
            { eIPv6_Multicast, 0xFF00U, 0xFF00U }, /* 1111 1111 */
            { eIPv6_Loopback,  0xFFFFU, 0x0000U }, /* 0000 0000 ::1 */
        };

        if( pxAddress != NULL )
 800d2ac:	687b      	ldr	r3, [r7, #4]
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d046      	beq.n	800d340 <xIPv6_GetIPType+0xa0>
        {
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	613b      	str	r3, [r7, #16]
 800d2b6:	e040      	b.n	800d33a <xIPv6_GetIPType+0x9a>
            {
                uint16_t usAddress =
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	781b      	ldrb	r3, [r3, #0]
 800d2bc:	021b      	lsls	r3, r3, #8
 800d2be:	b21a      	sxth	r2, r3
                                   ( ( uint16_t ) pxAddress->ucBytes[ 1 ] ) );
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	785b      	ldrb	r3, [r3, #1]
 800d2c4:	b21b      	sxth	r3, r3
                    ( uint16_t ) ( ( ( ( uint16_t ) pxAddress->ucBytes[ 0 ] ) << 8 ) |
 800d2c6:	4313      	orrs	r3, r2
 800d2c8:	b21b      	sxth	r3, r3
                uint16_t usAddress =
 800d2ca:	81fb      	strh	r3, [r7, #14]

                if( xIPCouples[ xIndex ].eType == eIPv6_Loopback )
 800d2cc:	491f      	ldr	r1, [pc, #124]	@ (800d34c <xIPv6_GetIPType+0xac>)
 800d2ce:	693a      	ldr	r2, [r7, #16]
 800d2d0:	4613      	mov	r3, r2
 800d2d2:	005b      	lsls	r3, r3, #1
 800d2d4:	4413      	add	r3, r2
 800d2d6:	005b      	lsls	r3, r3, #1
 800d2d8:	440b      	add	r3, r1
 800d2da:	781b      	ldrb	r3, [r3, #0]
 800d2dc:	2b04      	cmp	r3, #4
 800d2de:	d108      	bne.n	800d2f2 <xIPv6_GetIPType+0x52>
                {
                    if( xIsIPv6Loopback( pxAddress ) != pdFALSE )
 800d2e0:	6878      	ldr	r0, [r7, #4]
 800d2e2:	f7fd f929 	bl	800a538 <xIsIPv6Loopback>
 800d2e6:	4603      	mov	r3, r0
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	d002      	beq.n	800d2f2 <xIPv6_GetIPType+0x52>
                    {
                        eResult = eIPv6_Loopback;
 800d2ec:	2304      	movs	r3, #4
 800d2ee:	75fb      	strb	r3, [r7, #23]
                        break;
 800d2f0:	e026      	b.n	800d340 <xIPv6_GetIPType+0xa0>
                    }
                }

                if( ( usAddress & xIPCouples[ xIndex ].usMask ) == xIPCouples[ xIndex ].usExpected )
 800d2f2:	4916      	ldr	r1, [pc, #88]	@ (800d34c <xIPv6_GetIPType+0xac>)
 800d2f4:	693a      	ldr	r2, [r7, #16]
 800d2f6:	4613      	mov	r3, r2
 800d2f8:	005b      	lsls	r3, r3, #1
 800d2fa:	4413      	add	r3, r2
 800d2fc:	005b      	lsls	r3, r3, #1
 800d2fe:	440b      	add	r3, r1
 800d300:	3302      	adds	r3, #2
 800d302:	881a      	ldrh	r2, [r3, #0]
 800d304:	89fb      	ldrh	r3, [r7, #14]
 800d306:	4013      	ands	r3, r2
 800d308:	b299      	uxth	r1, r3
 800d30a:	4810      	ldr	r0, [pc, #64]	@ (800d34c <xIPv6_GetIPType+0xac>)
 800d30c:	693a      	ldr	r2, [r7, #16]
 800d30e:	4613      	mov	r3, r2
 800d310:	005b      	lsls	r3, r3, #1
 800d312:	4413      	add	r3, r2
 800d314:	005b      	lsls	r3, r3, #1
 800d316:	4403      	add	r3, r0
 800d318:	3304      	adds	r3, #4
 800d31a:	881b      	ldrh	r3, [r3, #0]
 800d31c:	4299      	cmp	r1, r3
 800d31e:	d109      	bne.n	800d334 <xIPv6_GetIPType+0x94>
                {
                    eResult = xIPCouples[ xIndex ].eType;
 800d320:	490a      	ldr	r1, [pc, #40]	@ (800d34c <xIPv6_GetIPType+0xac>)
 800d322:	693a      	ldr	r2, [r7, #16]
 800d324:	4613      	mov	r3, r2
 800d326:	005b      	lsls	r3, r3, #1
 800d328:	4413      	add	r3, r2
 800d32a:	005b      	lsls	r3, r3, #1
 800d32c:	440b      	add	r3, r1
 800d32e:	781b      	ldrb	r3, [r3, #0]
 800d330:	75fb      	strb	r3, [r7, #23]
                    break;
 800d332:	e005      	b.n	800d340 <xIPv6_GetIPType+0xa0>
            for( xIndex = 0; xIndex < ARRAY_SIZE_X( xIPCouples ); xIndex++ )
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	3301      	adds	r3, #1
 800d338:	613b      	str	r3, [r7, #16]
 800d33a:	693b      	ldr	r3, [r7, #16]
 800d33c:	2b04      	cmp	r3, #4
 800d33e:	ddbb      	ble.n	800d2b8 <xIPv6_GetIPType+0x18>
                }
            }
        }

        return eResult;
 800d340:	7dfb      	ldrb	r3, [r7, #23]
    }
 800d342:	4618      	mov	r0, r3
 800d344:	3718      	adds	r7, #24
 800d346:	46bd      	mov	sp, r7
 800d348:	bd80      	pop	{r7, pc}
 800d34a:	bf00      	nop
 800d34c:	08026378 	.word	0x08026378

0800d350 <pcEndpointName>:
 *          The string will be "NULL" if the end point pointer is NULL.
 */
    const char * pcEndpointName( const NetworkEndPoint_t * pxEndPoint,
                                 char * pcBuffer,
                                 size_t uxSize )
    {
 800d350:	b580      	push	{r7, lr}
 800d352:	b084      	sub	sp, #16
 800d354:	af00      	add	r7, sp, #0
 800d356:	60f8      	str	r0, [r7, #12]
 800d358:	60b9      	str	r1, [r7, #8]
 800d35a:	607a      	str	r2, [r7, #4]
        if( pxEndPoint == NULL )
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	2b00      	cmp	r3, #0
 800d360:	d105      	bne.n	800d36e <pcEndpointName+0x1e>
        {
            /* MISRA Ref 21.6.1 [snprintf and logging] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
            /* coverity[misra_c_2012_rule_21_6_violation] */
            ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800d362:	4a16      	ldr	r2, [pc, #88]	@ (800d3bc <pcEndpointName+0x6c>)
 800d364:	6879      	ldr	r1, [r7, #4]
 800d366:	68b8      	ldr	r0, [r7, #8]
 800d368:	f014 fcb6 	bl	8021cd8 <snprintf>
 800d36c:	e020      	b.n	800d3b0 <pcEndpointName+0x60>
        }
        else
        {
            switch( pxEndPoint->bits.bIPv6 ) /* LCOV_EXCL_BR_LINE */
 800d36e:	68fb      	ldr	r3, [r7, #12]
 800d370:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 800d374:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800d378:	b2db      	uxtb	r3, r3
 800d37a:	2b00      	cmp	r3, #0
 800d37c:	d002      	beq.n	800d384 <pcEndpointName+0x34>
 800d37e:	2b01      	cmp	r3, #1
 800d380:	d007      	beq.n	800d392 <pcEndpointName+0x42>
 800d382:	e00f      	b.n	800d3a4 <pcEndpointName+0x54>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case pdFALSE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
                                                     ( const void * ) &( pxEndPoint->ipv4_settings.ulIPAddress ),
 800d384:	68f9      	ldr	r1, [r7, #12]
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	68ba      	ldr	r2, [r7, #8]
 800d38a:	2002      	movs	r0, #2
 800d38c:	f001 faaa 	bl	800e8e4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800d390:	e00e      	b.n	800d3b0 <pcEndpointName+0x60>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case pdTRUE_UNSIGNED:
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
                                                     pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f103 0138 	add.w	r1, r3, #56	@ 0x38
                        ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	68ba      	ldr	r2, [r7, #8]
 800d39c:	200a      	movs	r0, #10
 800d39e:	f001 faa1 	bl	800e8e4 <FreeRTOS_inet_ntop>
                                                     pcBuffer,
                                                     ( socklen_t ) uxSize );
                        break;
 800d3a2:	e005      	b.n	800d3b0 <pcEndpointName+0x60>
                default:
                    /* MISRA 16.4 Compliance */
                    /* MISRA Ref 21.6.1 [snprintf and logging] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-216 */
                    /* coverity[misra_c_2012_rule_21_6_violation] */
                    ( void ) snprintf( pcBuffer, uxSize, "NULL" );
 800d3a4:	4a05      	ldr	r2, [pc, #20]	@ (800d3bc <pcEndpointName+0x6c>)
 800d3a6:	6879      	ldr	r1, [r7, #4]
 800d3a8:	68b8      	ldr	r0, [r7, #8]
 800d3aa:	f014 fc95 	bl	8021cd8 <snprintf>
                    break;
 800d3ae:	bf00      	nop
            }
        }

        return pcBuffer;
 800d3b0:	68bb      	ldr	r3, [r7, #8]
    }
 800d3b2:	4618      	mov	r0, r3
 800d3b4:	3710      	adds	r7, #16
 800d3b6:	46bd      	mov	sp, r7
 800d3b8:	bd80      	pop	{r7, pc}
 800d3ba:	bf00      	nop
 800d3bc:	08024654 	.word	0x08024654

0800d3c0 <prvValidSocket>:
 *         is returned.
 */
static BaseType_t prvValidSocket( const FreeRTOS_Socket_t * pxSocket,
                                  BaseType_t xProtocol,
                                  BaseType_t xIsBound )
{
 800d3c0:	b580      	push	{r7, lr}
 800d3c2:	b086      	sub	sp, #24
 800d3c4:	af00      	add	r7, sp, #0
 800d3c6:	60f8      	str	r0, [r7, #12]
 800d3c8:	60b9      	str	r1, [r7, #8]
 800d3ca:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn;

    if( xSocketValid( pxSocket ) == pdFALSE )
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f002 fb21 	bl	800fa14 <xSocketValid>
 800d3d2:	4603      	mov	r3, r0
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d102      	bne.n	800d3de <prvValidSocket+0x1e>
    {
        xReturn = pdFALSE;
 800d3d8:	2300      	movs	r3, #0
 800d3da:	617b      	str	r3, [r7, #20]
 800d3dc:	e015      	b.n	800d40a <prvValidSocket+0x4a>
    }
    else if( ( xIsBound != pdFALSE ) && !socketSOCKET_IS_BOUND( pxSocket ) )
 800d3de:	687b      	ldr	r3, [r7, #4]
 800d3e0:	2b00      	cmp	r3, #0
 800d3e2:	d006      	beq.n	800d3f2 <prvValidSocket+0x32>
 800d3e4:	68fb      	ldr	r3, [r7, #12]
 800d3e6:	69db      	ldr	r3, [r3, #28]
 800d3e8:	2b00      	cmp	r3, #0
 800d3ea:	d102      	bne.n	800d3f2 <prvValidSocket+0x32>
    {
        /* The caller expects the socket to be bound, but it isn't. */
        xReturn = pdFALSE;
 800d3ec:	2300      	movs	r3, #0
 800d3ee:	617b      	str	r3, [r7, #20]
 800d3f0:	e00b      	b.n	800d40a <prvValidSocket+0x4a>
    }
    else if( pxSocket->ucProtocol != ( uint8_t ) xProtocol )
 800d3f2:	68fb      	ldr	r3, [r7, #12]
 800d3f4:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800d3f8:	68bb      	ldr	r3, [r7, #8]
 800d3fa:	b2db      	uxtb	r3, r3
 800d3fc:	429a      	cmp	r2, r3
 800d3fe:	d002      	beq.n	800d406 <prvValidSocket+0x46>
    {
        /* Socket has a wrong type (UDP != TCP). */
        xReturn = pdFALSE;
 800d400:	2300      	movs	r3, #0
 800d402:	617b      	str	r3, [r7, #20]
 800d404:	e001      	b.n	800d40a <prvValidSocket+0x4a>
    }
    else
    {
        xReturn = pdTRUE;
 800d406:	2301      	movs	r3, #1
 800d408:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800d40a:	697b      	ldr	r3, [r7, #20]
}
 800d40c:	4618      	mov	r0, r3
 800d40e:	3718      	adds	r7, #24
 800d410:	46bd      	mov	sp, r7
 800d412:	bd80      	pop	{r7, pc}

0800d414 <vNetworkSocketsInit>:

/**
 * @brief Initialise the bound TCP/UDP socket lists.
 */
void vNetworkSocketsInit( void )
{
 800d414:	b580      	push	{r7, lr}
 800d416:	af00      	add	r7, sp, #0
    vListInitialise( &xBoundUDPSocketsList );
 800d418:	4803      	ldr	r0, [pc, #12]	@ (800d428 <vNetworkSocketsInit+0x14>)
 800d41a:	f7f5 fa47 	bl	80028ac <vListInitialise>

    #if ( ipconfigUSE_TCP == 1 )
    {
        vListInitialise( &xBoundTCPSocketsList );
 800d41e:	4803      	ldr	r0, [pc, #12]	@ (800d42c <vNetworkSocketsInit+0x18>)
 800d420:	f7f5 fa44 	bl	80028ac <vListInitialise>
    }
    #endif /* ipconfigUSE_TCP == 1 */
}
 800d424:	bf00      	nop
 800d426:	bd80      	pop	{r7, pc}
 800d428:	200012f0 	.word	0x200012f0
 800d42c:	20001304 	.word	0x20001304

0800d430 <prvDetermineSocketSize>:
 */
static BaseType_t prvDetermineSocketSize( BaseType_t xDomain,
                                          BaseType_t xType,
                                          BaseType_t xProtocol,
                                          size_t * pxSocketSize )
{
 800d430:	b580      	push	{r7, lr}
 800d432:	b086      	sub	sp, #24
 800d434:	af00      	add	r7, sp, #0
 800d436:	60f8      	str	r0, [r7, #12]
 800d438:	60b9      	str	r1, [r7, #8]
 800d43a:	607a      	str	r2, [r7, #4]
 800d43c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = pdPASS;
 800d43e:	2301      	movs	r3, #1
 800d440:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t const * pxSocket = NULL;
 800d442:	2300      	movs	r3, #0
 800d444:	613b      	str	r3, [r7, #16]

    /* Asserts must not appear before it has been determined that the network
     * task is ready - otherwise the asserts will fail. */
    if( xIPIsNetworkTaskReady() == pdFALSE )
 800d446:	f7fb ff97 	bl	8009378 <xIPIsNetworkTaskReady>
 800d44a:	4603      	mov	r3, r0
 800d44c:	2b00      	cmp	r3, #0
 800d44e:	d102      	bne.n	800d456 <prvDetermineSocketSize+0x26>
    {
        xReturn = pdFAIL;
 800d450:	2300      	movs	r3, #0
 800d452:	617b      	str	r3, [r7, #20]
 800d454:	e05e      	b.n	800d514 <prvDetermineSocketSize+0xe4>

            configASSERT( xDomain == FREERTOS_AF_INET6 );
        }
        #else /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */
        {
            if( ( xDomain != FREERTOS_AF_INET ) && ( xDomain != FREERTOS_AF_INET6 ) )
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	2b02      	cmp	r3, #2
 800d45a:	d004      	beq.n	800d466 <prvDetermineSocketSize+0x36>
 800d45c:	68fb      	ldr	r3, [r7, #12]
 800d45e:	2b0a      	cmp	r3, #10
 800d460:	d001      	beq.n	800d466 <prvDetermineSocketSize+0x36>
            {
                xReturn = pdFAIL;
 800d462:	2300      	movs	r3, #0
 800d464:	617b      	str	r3, [r7, #20]
            }

            configASSERT( ( xDomain == FREERTOS_AF_INET ) || ( xDomain == FREERTOS_AF_INET6 ) );
 800d466:	68fb      	ldr	r3, [r7, #12]
 800d468:	2b02      	cmp	r3, #2
 800d46a:	d002      	beq.n	800d472 <prvDetermineSocketSize+0x42>
 800d46c:	68fb      	ldr	r3, [r7, #12]
 800d46e:	2b0a      	cmp	r3, #10
 800d470:	d101      	bne.n	800d476 <prvDetermineSocketSize+0x46>
 800d472:	2301      	movs	r3, #1
 800d474:	e000      	b.n	800d478 <prvDetermineSocketSize+0x48>
 800d476:	2300      	movs	r3, #0
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d104      	bne.n	800d486 <prvDetermineSocketSize+0x56>
 800d47c:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 800d480:	4827      	ldr	r0, [pc, #156]	@ (800d520 <prvDetermineSocketSize+0xf0>)
 800d482:	f7f3 fff5 	bl	8001470 <vAssertCalled>
        }
        #endif /* if ( ( ipconfigUSE_IPv4 != 0 ) && ( ipconfigUSE_IPv6 == 0 ) ) */

        /* Check if the UDP socket-list has been initialised. */
        configASSERT( listLIST_IS_INITIALISED( &xBoundUDPSocketsList ) );
 800d486:	4b27      	ldr	r3, [pc, #156]	@ (800d524 <prvDetermineSocketSize+0xf4>)
 800d488:	689b      	ldr	r3, [r3, #8]
 800d48a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d48e:	d004      	beq.n	800d49a <prvDetermineSocketSize+0x6a>
 800d490:	f240 11f9 	movw	r1, #505	@ 0x1f9
 800d494:	4822      	ldr	r0, [pc, #136]	@ (800d520 <prvDetermineSocketSize+0xf0>)
 800d496:	f7f3 ffeb 	bl	8001470 <vAssertCalled>
        #if ( ipconfigUSE_TCP == 1 )
        {
            /* Check if the TCP socket-list has been initialised. */
            configASSERT( listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) );
 800d49a:	4b23      	ldr	r3, [pc, #140]	@ (800d528 <prvDetermineSocketSize+0xf8>)
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d4a2:	d004      	beq.n	800d4ae <prvDetermineSocketSize+0x7e>
 800d4a4:	f240 11fd 	movw	r1, #509	@ 0x1fd
 800d4a8:	481d      	ldr	r0, [pc, #116]	@ (800d520 <prvDetermineSocketSize+0xf0>)
 800d4aa:	f7f3 ffe1 	bl	8001470 <vAssertCalled>
        }
        #endif /* ipconfigUSE_TCP == 1 */

        if( xProtocol == FREERTOS_IPPROTO_UDP )
 800d4ae:	687b      	ldr	r3, [r7, #4]
 800d4b0:	2b11      	cmp	r3, #17
 800d4b2:	d110      	bne.n	800d4d6 <prvDetermineSocketSize+0xa6>
        {
            if( xType != FREERTOS_SOCK_DGRAM )
 800d4b4:	68bb      	ldr	r3, [r7, #8]
 800d4b6:	2b02      	cmp	r3, #2
 800d4b8:	d009      	beq.n	800d4ce <prvDetermineSocketSize+0x9e>
            {
                xReturn = pdFAIL;
 800d4ba:	2300      	movs	r3, #0
 800d4bc:	617b      	str	r3, [r7, #20]
                configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d4be:	697b      	ldr	r3, [r7, #20]
 800d4c0:	2b01      	cmp	r3, #1
 800d4c2:	d004      	beq.n	800d4ce <prvDetermineSocketSize+0x9e>
 800d4c4:	f240 2106 	movw	r1, #518	@ 0x206
 800d4c8:	4815      	ldr	r0, [pc, #84]	@ (800d520 <prvDetermineSocketSize+0xf0>)
 800d4ca:	f7f3 ffd1 	bl	8001470 <vAssertCalled>
            }

            /* In case a UDP socket is created, do not allocate space for TCP data. */
            *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xUDP );
 800d4ce:	683b      	ldr	r3, [r7, #0]
 800d4d0:	2270      	movs	r2, #112	@ 0x70
 800d4d2:	601a      	str	r2, [r3, #0]
 800d4d4:	e01e      	b.n	800d514 <prvDetermineSocketSize+0xe4>
        }

        #if ( ipconfigUSE_TCP == 1 )
            else if( xProtocol == FREERTOS_IPPROTO_TCP )
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	2b06      	cmp	r3, #6
 800d4da:	d111      	bne.n	800d500 <prvDetermineSocketSize+0xd0>
            {
                if( xType != FREERTOS_SOCK_STREAM )
 800d4dc:	68bb      	ldr	r3, [r7, #8]
 800d4de:	2b01      	cmp	r3, #1
 800d4e0:	d009      	beq.n	800d4f6 <prvDetermineSocketSize+0xc6>
                {
                    xReturn = pdFAIL;
 800d4e2:	2300      	movs	r3, #0
 800d4e4:	617b      	str	r3, [r7, #20]
                    configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d4e6:	697b      	ldr	r3, [r7, #20]
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d004      	beq.n	800d4f6 <prvDetermineSocketSize+0xc6>
 800d4ec:	f240 2113 	movw	r1, #531	@ 0x213
 800d4f0:	480b      	ldr	r0, [pc, #44]	@ (800d520 <prvDetermineSocketSize+0xf0>)
 800d4f2:	f7f3 ffbd 	bl	8001470 <vAssertCalled>
                }

                *pxSocketSize = ( sizeof( *pxSocket ) - sizeof( pxSocket->u ) ) + sizeof( pxSocket->u.xTCP );
 800d4f6:	683b      	ldr	r3, [r7, #0]
 800d4f8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800d4fc:	601a      	str	r2, [r3, #0]
 800d4fe:	e009      	b.n	800d514 <prvDetermineSocketSize+0xe4>
            }
        #endif /* ipconfigUSE_TCP == 1 */
        else
        {
            xReturn = pdFAIL;
 800d500:	2300      	movs	r3, #0
 800d502:	617b      	str	r3, [r7, #20]
            configASSERT( xReturn == pdPASS ); /* LCOV_EXCL_BR_LINE Exclude this line from branch coverage as the not-taken condition will never happen. */
 800d504:	697b      	ldr	r3, [r7, #20]
 800d506:	2b01      	cmp	r3, #1
 800d508:	d004      	beq.n	800d514 <prvDetermineSocketSize+0xe4>
 800d50a:	f44f 7107 	mov.w	r1, #540	@ 0x21c
 800d50e:	4804      	ldr	r0, [pc, #16]	@ (800d520 <prvDetermineSocketSize+0xf0>)
 800d510:	f7f3 ffae 	bl	8001470 <vAssertCalled>
    }

    /* In case configASSERT() is not used */
    ( void ) xDomain;
    ( void ) pxSocket; /* Was only used for sizeof. */
    return xReturn;
 800d514:	697b      	ldr	r3, [r7, #20]
}
 800d516:	4618      	mov	r0, r3
 800d518:	3718      	adds	r7, #24
 800d51a:	46bd      	mov	sp, r7
 800d51c:	bd80      	pop	{r7, pc}
 800d51e:	bf00      	nop
 800d520:	0802465c 	.word	0x0802465c
 800d524:	200012f0 	.word	0x200012f0
 800d528:	20001304 	.word	0x20001304

0800d52c <prvInitialiseTCPFields>:
 * @param[in] uxSocketSize The calculated size of the socket, only used to
 *                          gather memory usage statistics.
 */
    static void prvInitialiseTCPFields( FreeRTOS_Socket_t * pxSocket,
                                        size_t uxSocketSize )
    {
 800d52c:	b580      	push	{r7, lr}
 800d52e:	b084      	sub	sp, #16
 800d530:	af00      	add	r7, sp, #0
 800d532:	6078      	str	r0, [r7, #4]
 800d534:	6039      	str	r1, [r7, #0]
        ( void ) uxSocketSize;
        /* Lint wants at least a comment, in case the macro is empty. */
        iptraceMEM_STATS_CREATE( tcpSOCKET_TCP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );
        /* StreamSize is expressed in number of bytes */
        /* Round up buffer sizes to nearest multiple of MSS */
        pxSocket->u.xTCP.usMSS = ( uint16_t ) ipconfigTCP_MSS;
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 800d53c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxSocket->bits.bIsIPv6 != 0U )
 800d540:	687b      	ldr	r3, [r7, #4]
 800d542:	7a1b      	ldrb	r3, [r3, #8]
 800d544:	f003 0301 	and.w	r3, r3, #1
 800d548:	b2db      	uxtb	r3, r3
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	d00a      	beq.n	800d564 <prvInitialiseTCPFields+0x38>
            {
                uint16_t usDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 800d54e:	2314      	movs	r3, #20
 800d550:	81fb      	strh	r3, [r7, #14]

                /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
                 * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
                pxSocket->u.xTCP.usMSS = ( uint16_t ) ( pxSocket->u.xTCP.usMSS - usDifference );
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	f8b3 2072 	ldrh.w	r2, [r3, #114]	@ 0x72
 800d558:	89fb      	ldrh	r3, [r7, #14]
 800d55a:	1ad3      	subs	r3, r2, r3
 800d55c:	b29a      	uxth	r2, r3
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
            }
        #endif /* ipconfigUSE_IPv6 != 0 */

        pxSocket->u.xTCP.uxRxStreamSize = ( size_t ) ipconfigTCP_RX_BUFFER_LENGTH;
 800d564:	687b      	ldr	r3, [r7, #4]
 800d566:	f241 121c 	movw	r2, #4380	@ 0x111c
 800d56a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxSocket->u.xTCP.uxTxStreamSize = ( size_t ) FreeRTOS_round_up( ipconfigTCP_TX_BUFFER_LENGTH, ipconfigTCP_MSS );
 800d56e:	f240 51b4 	movw	r1, #1460	@ 0x5b4
 800d572:	f640 3068 	movw	r0, #2920	@ 0xb68
 800d576:	f7fc fc85 	bl	8009e84 <FreeRTOS_round_up>
 800d57a:	4602      	mov	r2, r0
 800d57c:	687b      	ldr	r3, [r7, #4]
 800d57e:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        /* Use half of the buffer size of the TCP windows */
        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            pxSocket->u.xTCP.uxRxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxRxStreamSize / 2U ) / ipconfigTCP_MSS );
 800d582:	687b      	ldr	r3, [r7, #4]
 800d584:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d588:	08db      	lsrs	r3, r3, #3
 800d58a:	4a10      	ldr	r2, [pc, #64]	@ (800d5cc <prvInitialiseTCPFields+0xa0>)
 800d58c:	fba2 2303 	umull	r2, r3, r2, r3
 800d590:	099b      	lsrs	r3, r3, #6
 800d592:	4619      	mov	r1, r3
 800d594:	2001      	movs	r0, #1
 800d596:	f7fc fc35 	bl	8009e04 <FreeRTOS_max_size_t>
 800d59a:	4602      	mov	r2, r0
 800d59c:	687b      	ldr	r3, [r7, #4]
 800d59e:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
            pxSocket->u.xTCP.uxTxWinSize = FreeRTOS_max_size_t( 1U, ( pxSocket->u.xTCP.uxTxStreamSize / 2U ) / ipconfigTCP_MSS );
 800d5a2:	687b      	ldr	r3, [r7, #4]
 800d5a4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d5a8:	08db      	lsrs	r3, r3, #3
 800d5aa:	4a08      	ldr	r2, [pc, #32]	@ (800d5cc <prvInitialiseTCPFields+0xa0>)
 800d5ac:	fba2 2303 	umull	r2, r3, r2, r3
 800d5b0:	099b      	lsrs	r3, r3, #6
 800d5b2:	4619      	mov	r1, r3
 800d5b4:	2001      	movs	r0, #1
 800d5b6:	f7fc fc25 	bl	8009e04 <FreeRTOS_max_size_t>
 800d5ba:	4602      	mov	r2, r0
 800d5bc:	687b      	ldr	r3, [r7, #4]
 800d5be:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c
        #endif

        /* The above values are just defaults, and can be overridden by
         * calling FreeRTOS_setsockopt().  No buffers will be allocated until a
         * socket is connected and data is exchanged. */
    }
 800d5c2:	bf00      	nop
 800d5c4:	3710      	adds	r7, #16
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}
 800d5ca:	bf00      	nop
 800d5cc:	2ce33e6d 	.word	0x2ce33e6d

0800d5d0 <FreeRTOS_socket>:
 *         a parameter error, otherwise a valid socket.
 */
Socket_t FreeRTOS_socket( BaseType_t xDomain,
                          BaseType_t xType,
                          BaseType_t xProtocol )
{
 800d5d0:	b580      	push	{r7, lr}
 800d5d2:	b08a      	sub	sp, #40	@ 0x28
 800d5d4:	af00      	add	r7, sp, #0
 800d5d6:	60f8      	str	r0, [r7, #12]
 800d5d8:	60b9      	str	r1, [r7, #8]
 800d5da:	607a      	str	r2, [r7, #4]
    FreeRTOS_Socket_t * pxSocket;

/* Note that this value will be over-written by the call to prvDetermineSocketSize. */
    size_t uxSocketSize = 1;
 800d5dc:	2301      	movs	r3, #1
 800d5de:	617b      	str	r3, [r7, #20]
    EventGroupHandle_t xEventGroup;
    Socket_t xReturn;
    BaseType_t xProtocolCpy = xProtocol;
 800d5e0:	687b      	ldr	r3, [r7, #4]
 800d5e2:	623b      	str	r3, [r7, #32]

    configASSERT( ( xDomain == FREERTOS_AF_INET6 ) || ( xDomain == FREERTOS_AF_INET ) );
 800d5e4:	68fb      	ldr	r3, [r7, #12]
 800d5e6:	2b0a      	cmp	r3, #10
 800d5e8:	d002      	beq.n	800d5f0 <FreeRTOS_socket+0x20>
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	2b02      	cmp	r3, #2
 800d5ee:	d101      	bne.n	800d5f4 <FreeRTOS_socket+0x24>
 800d5f0:	2301      	movs	r3, #1
 800d5f2:	e000      	b.n	800d5f6 <FreeRTOS_socket+0x26>
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	2b00      	cmp	r3, #0
 800d5f8:	d104      	bne.n	800d604 <FreeRTOS_socket+0x34>
 800d5fa:	f240 2171 	movw	r1, #625	@ 0x271
 800d5fe:	4845      	ldr	r0, [pc, #276]	@ (800d714 <FreeRTOS_socket+0x144>)
 800d600:	f7f3 ff36 	bl	8001470 <vAssertCalled>
         * to passing 0 as defined by POSIX, indicates to the socket layer that it
         * should pick a sensible default protocol based off the given socket type.
         * If we can't, prvDetermineSocketSize will catch it as an invalid
         * type/protocol combo.
         */
        if( xProtocol == FREERTOS_SOCK_DEPENDENT_PROTO )
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	2b00      	cmp	r3, #0
 800d608:	d10c      	bne.n	800d624 <FreeRTOS_socket+0x54>
        {
            switch( xType )
 800d60a:	68bb      	ldr	r3, [r7, #8]
 800d60c:	2b01      	cmp	r3, #1
 800d60e:	d005      	beq.n	800d61c <FreeRTOS_socket+0x4c>
 800d610:	68bb      	ldr	r3, [r7, #8]
 800d612:	2b02      	cmp	r3, #2
 800d614:	d105      	bne.n	800d622 <FreeRTOS_socket+0x52>
            {
                case FREERTOS_SOCK_DGRAM:
                    xProtocolCpy = FREERTOS_IPPROTO_UDP;
 800d616:	2311      	movs	r3, #17
 800d618:	623b      	str	r3, [r7, #32]
                    break;
 800d61a:	e003      	b.n	800d624 <FreeRTOS_socket+0x54>

                case FREERTOS_SOCK_STREAM:
                    xProtocolCpy = FREERTOS_IPPROTO_TCP;
 800d61c:	2306      	movs	r3, #6
 800d61e:	623b      	str	r3, [r7, #32]
                    break;
 800d620:	e000      	b.n	800d624 <FreeRTOS_socket+0x54>
                default:

                    /* incorrect xType. this will be caught by
                     * prvDetermineSocketSize.
                     */
                    break;
 800d622:	bf00      	nop
            }
        }

        if( prvDetermineSocketSize( xDomain, xType, xProtocolCpy, &uxSocketSize ) == pdFAIL )
 800d624:	f107 0314 	add.w	r3, r7, #20
 800d628:	6a3a      	ldr	r2, [r7, #32]
 800d62a:	68b9      	ldr	r1, [r7, #8]
 800d62c:	68f8      	ldr	r0, [r7, #12]
 800d62e:	f7ff feff 	bl	800d430 <prvDetermineSocketSize>
 800d632:	4603      	mov	r3, r0
 800d634:	2b00      	cmp	r3, #0
 800d636:	d103      	bne.n	800d640 <FreeRTOS_socket+0x70>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d638:	f04f 33ff 	mov.w	r3, #4294967295
 800d63c:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 800d63e:	e063      	b.n	800d708 <FreeRTOS_socket+0x138>
        * By default it points to the FreeRTOS function 'pvPortMalloc()'. */

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxSocket = ( ( FreeRTOS_Socket_t * ) pvPortMallocSocket( uxSocketSize ) );
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	4618      	mov	r0, r3
 800d644:	f7f8 f986 	bl	8005954 <pvPortMalloc>
 800d648:	61f8      	str	r0, [r7, #28]

        if( pxSocket == NULL )
 800d64a:	69fb      	ldr	r3, [r7, #28]
 800d64c:	2b00      	cmp	r3, #0
 800d64e:	d103      	bne.n	800d658 <FreeRTOS_socket+0x88>
        {
            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d650:	f04f 33ff 	mov.w	r3, #4294967295
 800d654:	627b      	str	r3, [r7, #36]	@ 0x24
            iptraceFAILED_TO_CREATE_SOCKET();
            break;
 800d656:	e057      	b.n	800d708 <FreeRTOS_socket+0x138>
        }

        xEventGroup = xEventGroupCreate();
 800d658:	f7f4 ff53 	bl	8002502 <xEventGroupCreate>
 800d65c:	61b8      	str	r0, [r7, #24]

        if( xEventGroup == NULL )
 800d65e:	69bb      	ldr	r3, [r7, #24]
 800d660:	2b00      	cmp	r3, #0
 800d662:	d106      	bne.n	800d672 <FreeRTOS_socket+0xa2>
        {
            vPortFreeSocket( pxSocket );
 800d664:	69f8      	ldr	r0, [r7, #28]
 800d666:	f7f8 fa49 	bl	8005afc <vPortFree>

            /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
            /* coverity[misra_c_2012_rule_11_4_violation] */
            xReturn = FREERTOS_INVALID_SOCKET;
 800d66a:	f04f 33ff 	mov.w	r3, #4294967295
 800d66e:	627b      	str	r3, [r7, #36]	@ 0x24
 800d670:	e04a      	b.n	800d708 <FreeRTOS_socket+0x138>
            iptraceFAILED_TO_CREATE_EVENT_GROUP();
        }
        else
        {
            /* Clear the entire space to avoid nulling individual entries. */
            ( void ) memset( pxSocket, 0, uxSocketSize );
 800d672:	697b      	ldr	r3, [r7, #20]
 800d674:	461a      	mov	r2, r3
 800d676:	2100      	movs	r1, #0
 800d678:	69f8      	ldr	r0, [r7, #28]
 800d67a:	f013 fe2a 	bl	80212d2 <memset>

            pxSocket->xEventGroup = xEventGroup;
 800d67e:	69fb      	ldr	r3, [r7, #28]
 800d680:	69ba      	ldr	r2, [r7, #24]
 800d682:	605a      	str	r2, [r3, #4]

            switch( xDomain ) /* LCOV_EXCL_BR_LINE Exclude this because domain is checked at the begin of this function. */
 800d684:	68fb      	ldr	r3, [r7, #12]
 800d686:	2b02      	cmp	r3, #2
 800d688:	d008      	beq.n	800d69c <FreeRTOS_socket+0xcc>
 800d68a:	68fb      	ldr	r3, [r7, #12]
 800d68c:	2b0a      	cmp	r3, #10
 800d68e:	d10b      	bne.n	800d6a8 <FreeRTOS_socket+0xd8>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800d690:	69fa      	ldr	r2, [r7, #28]
 800d692:	7a13      	ldrb	r3, [r2, #8]
 800d694:	f043 0301 	orr.w	r3, r3, #1
 800d698:	7213      	strb	r3, [r2, #8]
                        break;
 800d69a:	e009      	b.n	800d6b0 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET:
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800d69c:	69fa      	ldr	r2, [r7, #28]
 800d69e:	7a13      	ldrb	r3, [r2, #8]
 800d6a0:	f36f 0300 	bfc	r3, #0, #1
 800d6a4:	7213      	strb	r3, [r2, #8]
                        break;
 800d6a6:	e003      	b.n	800d6b0 <FreeRTOS_socket+0xe0>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default: /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
                    FreeRTOS_debug_printf( ( "FreeRTOS_socket: Undefined xDomain \n" ) );
 800d6a8:	481b      	ldr	r0, [pc, #108]	@ (800d718 <FreeRTOS_socket+0x148>)
 800d6aa:	f013 fae9 	bl	8020c80 <lUDPLoggingPrintf>

                    /* MISRA 16.4 Compliance */
                    break; /* LCOV_EXCL_LINE Exclude this because domain is checked at the begin of this function. */
 800d6ae:	bf00      	nop
            }

            /* Initialise the socket's members.  The semaphore will be created
             * if the socket is bound to an address, for now the pointer to the
             * semaphore is just set to NULL to show it has not been created. */
            if( xProtocolCpy == FREERTOS_IPPROTO_UDP )
 800d6b0:	6a3b      	ldr	r3, [r7, #32]
 800d6b2:	2b11      	cmp	r3, #17
 800d6b4:	d105      	bne.n	800d6c2 <FreeRTOS_socket+0xf2>
            {
                iptraceMEM_STATS_CREATE( tcpSOCKET_UDP, pxSocket, uxSocketSize + sizeof( StaticEventGroup_t ) );

                vListInitialise( &( pxSocket->u.xUDP.xWaitingPacketsList ) );
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	3354      	adds	r3, #84	@ 0x54
 800d6ba:	4618      	mov	r0, r3
 800d6bc:	f7f5 f8f6 	bl	80028ac <vListInitialise>
 800d6c0:	e007      	b.n	800d6d2 <FreeRTOS_socket+0x102>
                }
                #endif /* ipconfigUDP_MAX_RX_PACKETS > 0 */
            }

            #if ( ipconfigUSE_TCP == 1 )
                else if( xProtocolCpy == FREERTOS_IPPROTO_TCP ) /* LCOV_EXCL_BR_LINE Exclude else case because protocol is checked in prvDetermineSocketSize */
 800d6c2:	6a3b      	ldr	r3, [r7, #32]
 800d6c4:	2b06      	cmp	r3, #6
 800d6c6:	d104      	bne.n	800d6d2 <FreeRTOS_socket+0x102>
                {
                    prvInitialiseTCPFields( pxSocket, uxSocketSize );
 800d6c8:	697b      	ldr	r3, [r7, #20]
 800d6ca:	4619      	mov	r1, r3
 800d6cc:	69f8      	ldr	r0, [r7, #28]
 800d6ce:	f7ff ff2d 	bl	800d52c <prvInitialiseTCPFields>
                {
                    /* MISRA wants to see an unconditional else clause. */
                }
            #endif /* ipconfigUSE_TCP == 1 */

            vListInitialiseItem( &( pxSocket->xBoundSocketListItem ) );
 800d6d2:	69fb      	ldr	r3, [r7, #28]
 800d6d4:	330c      	adds	r3, #12
 800d6d6:	4618      	mov	r0, r3
 800d6d8:	f7f5 f908 	bl	80028ec <vListInitialiseItem>
            listSET_LIST_ITEM_OWNER( &( pxSocket->xBoundSocketListItem ), ( void * ) pxSocket );
 800d6dc:	69fb      	ldr	r3, [r7, #28]
 800d6de:	69fa      	ldr	r2, [r7, #28]
 800d6e0:	619a      	str	r2, [r3, #24]

            pxSocket->xReceiveBlockTime = ipconfigSOCK_DEFAULT_RECEIVE_BLOCK_TIME;
 800d6e2:	69fb      	ldr	r3, [r7, #28]
 800d6e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6e8:	621a      	str	r2, [r3, #32]
            pxSocket->xSendBlockTime = ipconfigSOCK_DEFAULT_SEND_BLOCK_TIME;
 800d6ea:	69fb      	ldr	r3, [r7, #28]
 800d6ec:	f241 3288 	movw	r2, #5000	@ 0x1388
 800d6f0:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->ucSocketOptions = ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800d6f2:	69fb      	ldr	r3, [r7, #28]
 800d6f4:	2202      	movs	r2, #2
 800d6f6:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
            pxSocket->ucProtocol = ( uint8_t ) xProtocolCpy; /* protocol: UDP or TCP */
 800d6fa:	6a3b      	ldr	r3, [r7, #32]
 800d6fc:	b2da      	uxtb	r2, r3
 800d6fe:	69fb      	ldr	r3, [r7, #28]
 800d700:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b

            xReturn = pxSocket;
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 800d708:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d70a:	4618      	mov	r0, r3
 800d70c:	3728      	adds	r7, #40	@ 0x28
 800d70e:	46bd      	mov	sp, r7
 800d710:	bd80      	pop	{r7, pc}
 800d712:	bf00      	nop
 800d714:	0802465c 	.word	0x0802465c
 800d718:	0802468c 	.word	0x0802468c

0800d71c <prvMakeSureSocketIsBound>:
 * @param[in] pxSocket The socket that must be bound to a port number.
 * @return Returns pdTRUE if the socket was already bound, or if the
 *         socket has been bound successfully.
 */
static BaseType_t prvMakeSureSocketIsBound( FreeRTOS_Socket_t * pxSocket )
{
 800d71c:	b580      	push	{r7, lr}
 800d71e:	b084      	sub	sp, #16
 800d720:	af00      	add	r7, sp, #0
 800d722:	6078      	str	r0, [r7, #4]
    /* Check if this is a valid UDP socket, does not have to be bound yet. */
    BaseType_t xReturn = prvValidSocket( pxSocket, FREERTOS_IPPROTO_UDP, pdFALSE );
 800d724:	2200      	movs	r2, #0
 800d726:	2111      	movs	r1, #17
 800d728:	6878      	ldr	r0, [r7, #4]
 800d72a:	f7ff fe49 	bl	800d3c0 <prvValidSocket>
 800d72e:	60f8      	str	r0, [r7, #12]

    if( ( xReturn == pdTRUE ) && ( !socketSOCKET_IS_BOUND( pxSocket ) ) )
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2b01      	cmp	r3, #1
 800d734:	d10d      	bne.n	800d752 <prvMakeSureSocketIsBound+0x36>
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	69db      	ldr	r3, [r3, #28]
 800d73a:	2b00      	cmp	r3, #0
 800d73c:	d109      	bne.n	800d752 <prvMakeSureSocketIsBound+0x36>
    {
        /* The socket is valid but it is not yet bound. */
        if( FreeRTOS_bind( pxSocket, NULL, 0U ) != 0 )
 800d73e:	2200      	movs	r2, #0
 800d740:	2100      	movs	r1, #0
 800d742:	6878      	ldr	r0, [r7, #4]
 800d744:	f000 f934 	bl	800d9b0 <FreeRTOS_bind>
 800d748:	4603      	mov	r3, r0
 800d74a:	2b00      	cmp	r3, #0
 800d74c:	d001      	beq.n	800d752 <prvMakeSureSocketIsBound+0x36>
        {
            /* The socket was not yet bound, and binding it has failed. */
            xReturn = pdFALSE;
 800d74e:	2300      	movs	r3, #0
 800d750:	60fb      	str	r3, [r7, #12]
        }
    }

    return xReturn;
 800d752:	68fb      	ldr	r3, [r7, #12]
}
 800d754:	4618      	mov	r0, r3
 800d756:	3710      	adds	r7, #16
 800d758:	46bd      	mov	sp, r7
 800d75a:	bd80      	pop	{r7, pc}

0800d75c <prvSendUDPPacket>:
                                 size_t uxTotalDataLength,
                                 BaseType_t xFlags,
                                 const struct freertos_sockaddr * pxDestinationAddress,
                                 TickType_t xTicksToWait,
                                 size_t uxPayloadOffset )
{
 800d75c:	b580      	push	{r7, lr}
 800d75e:	b088      	sub	sp, #32
 800d760:	af00      	add	r7, sp, #0
 800d762:	60f8      	str	r0, [r7, #12]
 800d764:	60b9      	str	r1, [r7, #8]
 800d766:	607a      	str	r2, [r7, #4]
 800d768:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800d76a:	2300      	movs	r3, #0
 800d76c:	61fb      	str	r3, [r7, #28]
    IPStackEvent_t xStackTxEvent = { eStackTxEvent, NULL };
 800d76e:	2304      	movs	r3, #4
 800d770:	753b      	strb	r3, [r7, #20]
 800d772:	2300      	movs	r3, #0
 800d774:	61bb      	str	r3, [r7, #24]

    switch( pxDestinationAddress->sin_family ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800d776:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d778:	785b      	ldrb	r3, [r3, #1]
 800d77a:	2b02      	cmp	r3, #2
 800d77c:	d006      	beq.n	800d78c <prvSendUDPPacket+0x30>
 800d77e:	2b0a      	cmp	r3, #10
 800d780:	d109      	bne.n	800d796 <prvSendUDPPacket+0x3a>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                ( void ) xSend_UDP_Update_IPv6( pxNetworkBuffer, pxDestinationAddress );
 800d782:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d784:	68b8      	ldr	r0, [r7, #8]
 800d786:	f7fd f903 	bl	800a990 <xSend_UDP_Update_IPv6>
                break;
 800d78a:	e005      	b.n	800d798 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                ( void ) xSend_UDP_Update_IPv4( pxNetworkBuffer, pxDestinationAddress );
 800d78c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800d78e:	68b8      	ldr	r0, [r7, #8]
 800d790:	f7fc fd68 	bl	800a264 <xSend_UDP_Update_IPv4>
                break;
 800d794:	e000      	b.n	800d798 <prvSendUDPPacket+0x3c>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:   /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
            /* MISRA 16.4 Compliance */
            break; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800d796:	bf00      	nop
    }

    pxNetworkBuffer->xDataLength = uxTotalDataLength + uxPayloadOffset;
 800d798:	687a      	ldr	r2, [r7, #4]
 800d79a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d79c:	441a      	add	r2, r3
 800d79e:	68bb      	ldr	r3, [r7, #8]
 800d7a0:	629a      	str	r2, [r3, #40]	@ 0x28
    pxNetworkBuffer->usPort = pxDestinationAddress->sin_port;
 800d7a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800d7a4:	885a      	ldrh	r2, [r3, #2]
 800d7a6:	68bb      	ldr	r3, [r7, #8]
 800d7a8:	869a      	strh	r2, [r3, #52]	@ 0x34
    pxNetworkBuffer->usBoundPort = ( uint16_t ) socketGET_SOCKET_PORT( pxSocket );
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	68db      	ldr	r3, [r3, #12]
 800d7ae:	b29a      	uxth	r2, r3
 800d7b0:	68bb      	ldr	r3, [r7, #8]
 800d7b2:	86da      	strh	r2, [r3, #54]	@ 0x36

    /* The socket options are passed to the IP layer in the
     * space that will eventually get used by the Ethernet header. */
    pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ] = pxSocket->ucSocketOptions;
 800d7b4:	68bb      	ldr	r3, [r7, #8]
 800d7b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d7b8:	3306      	adds	r3, #6
 800d7ba:	68fa      	ldr	r2, [r7, #12]
 800d7bc:	f892 203a 	ldrb.w	r2, [r2, #58]	@ 0x3a
 800d7c0:	701a      	strb	r2, [r3, #0]

    /* Tell the networking task that the packet needs sending. */
    xStackTxEvent.pvData = pxNetworkBuffer;
 800d7c2:	68bb      	ldr	r3, [r7, #8]
 800d7c4:	61bb      	str	r3, [r7, #24]

    /* Ask the IP-task to send this packet */
    if( xSendEventStructToIPTask( &xStackTxEvent, xTicksToWait ) == pdPASS )
 800d7c6:	f107 0314 	add.w	r3, r7, #20
 800d7ca:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800d7cc:	4618      	mov	r0, r3
 800d7ce:	f7fb fa37 	bl	8008c40 <xSendEventStructToIPTask>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d10b      	bne.n	800d7f0 <prvSendUDPPacket+0x94>
    {
        /* The packet was successfully sent to the IP task. */
        lReturn = ( int32_t ) uxTotalDataLength;
 800d7d8:	687b      	ldr	r3, [r7, #4]
 800d7da:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleSent ) )
 800d7dc:	68fb      	ldr	r3, [r7, #12]
 800d7de:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7e0:	2b00      	cmp	r3, #0
 800d7e2:	d00d      	beq.n	800d800 <prvSendUDPPacket+0xa4>
            {
                pxSocket->u.xUDP.pxHandleSent( ( FreeRTOS_Socket_t * ) pxSocket, uxTotalDataLength );
 800d7e4:	68fb      	ldr	r3, [r7, #12]
 800d7e6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800d7e8:	6879      	ldr	r1, [r7, #4]
 800d7ea:	68f8      	ldr	r0, [r7, #12]
 800d7ec:	4798      	blx	r3
 800d7ee:	e007      	b.n	800d800 <prvSendUDPPacket+0xa4>
    }
    else
    {
        /* If the buffer was allocated in this function, release
         * it. */
        if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800d7f0:	683b      	ldr	r3, [r7, #0]
 800d7f2:	f003 0301 	and.w	r3, r3, #1
 800d7f6:	2b00      	cmp	r3, #0
 800d7f8:	d102      	bne.n	800d800 <prvSendUDPPacket+0xa4>
        {
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800d7fa:	68b8      	ldr	r0, [r7, #8]
 800d7fc:	f008 ffe4 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
        }

        iptraceSTACK_TX_EVENT_LOST( ipSTACK_TX_EVENT );
    }

    return lReturn;
 800d800:	69fb      	ldr	r3, [r7, #28]
}
 800d802:	4618      	mov	r0, r3
 800d804:	3720      	adds	r7, #32
 800d806:	46bd      	mov	sp, r7
 800d808:	bd80      	pop	{r7, pc}

0800d80a <prvSendTo_ActualSend>:
                                     const void * pvBuffer,
                                     size_t uxTotalDataLength,
                                     BaseType_t xFlags,
                                     const struct freertos_sockaddr * pxDestinationAddress,
                                     size_t uxPayloadOffset )
{
 800d80a:	b580      	push	{r7, lr}
 800d80c:	b08e      	sub	sp, #56	@ 0x38
 800d80e:	af04      	add	r7, sp, #16
 800d810:	60f8      	str	r0, [r7, #12]
 800d812:	60b9      	str	r1, [r7, #8]
 800d814:	607a      	str	r2, [r7, #4]
 800d816:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800d818:	2300      	movs	r3, #0
 800d81a:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xTicksToWait = pxSocket->xSendBlockTime;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800d820:	61bb      	str	r3, [r7, #24]
    TimeOut_t xTimeOut;
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800d822:	683b      	ldr	r3, [r7, #0]
 800d824:	f003 0310 	and.w	r3, r3, #16
 800d828:	2b00      	cmp	r3, #0
 800d82a:	d104      	bne.n	800d836 <prvSendTo_ActualSend+0x2c>
        ( xIsCallingFromIPTask() != pdFALSE ) )
 800d82c:	f7fc f94a 	bl	8009ac4 <xIsCallingFromIPTask>
 800d830:	4603      	mov	r3, r0
    if( ( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_MSG_DONTWAIT ) != 0U ) ||
 800d832:	2b00      	cmp	r3, #0
 800d834:	d001      	beq.n	800d83a <prvSendTo_ActualSend+0x30>
    {
        /* The caller wants a non-blocking operation. When called by the IP-task,
         * the operation should always be non-blocking. */
        xTicksToWait = ( TickType_t ) 0U;
 800d836:	2300      	movs	r3, #0
 800d838:	61bb      	str	r3, [r7, #24]
    }

    if( ( ( UBaseType_t ) xFlags & ( UBaseType_t ) FREERTOS_ZERO_COPY ) == 0U )
 800d83a:	683b      	ldr	r3, [r7, #0]
 800d83c:	f003 0301 	and.w	r3, r3, #1
 800d840:	2b00      	cmp	r3, #0
 800d842:	d128      	bne.n	800d896 <prvSendTo_ActualSend+0x8c>
    {
        /* Zero copy is not set, so obtain a network buffer into
         * which the payload will be copied. */
        vTaskSetTimeOutState( &xTimeOut );
 800d844:	f107 0310 	add.w	r3, r7, #16
 800d848:	4618      	mov	r0, r3
 800d84a:	f7f6 fdbf 	bl	80043cc <vTaskSetTimeOutState>

        /* Block until a buffer becomes available, or until a
         * timeout has been reached */
        pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxPayloadOffset + uxTotalDataLength, xTicksToWait );
 800d84e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d850:	687b      	ldr	r3, [r7, #4]
 800d852:	4413      	add	r3, r2
 800d854:	69ba      	ldr	r2, [r7, #24]
 800d856:	4611      	mov	r1, r2
 800d858:	4618      	mov	r0, r3
 800d85a:	f008 ff4d 	bl	80166f8 <pxGetNetworkBufferWithDescriptor>
 800d85e:	6238      	str	r0, [r7, #32]

        if( pxNetworkBuffer != NULL )
 800d860:	6a3b      	ldr	r3, [r7, #32]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d01b      	beq.n	800d89e <prvSendTo_ActualSend+0x94>
        {
            void * pvCopyDest = ( void * ) &( pxNetworkBuffer->pucEthernetBuffer[ uxPayloadOffset ] );
 800d866:	6a3b      	ldr	r3, [r7, #32]
 800d868:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d86a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d86c:	4413      	add	r3, r2
 800d86e:	61fb      	str	r3, [r7, #28]
            ( void ) memcpy( pvCopyDest, pvBuffer, uxTotalDataLength );
 800d870:	687a      	ldr	r2, [r7, #4]
 800d872:	68b9      	ldr	r1, [r7, #8]
 800d874:	69f8      	ldr	r0, [r7, #28]
 800d876:	f013 fc1f 	bl	80210b8 <memcpy>

            if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdTRUE )
 800d87a:	f107 0218 	add.w	r2, r7, #24
 800d87e:	f107 0310 	add.w	r3, r7, #16
 800d882:	4611      	mov	r1, r2
 800d884:	4618      	mov	r0, r3
 800d886:	f7f6 fdd9 	bl	800443c <xTaskCheckForTimeOut>
 800d88a:	4603      	mov	r3, r0
 800d88c:	2b01      	cmp	r3, #1
 800d88e:	d106      	bne.n	800d89e <prvSendTo_ActualSend+0x94>
            {
                /* The entire block time has been used up. */
                xTicksToWait = ( TickType_t ) 0;
 800d890:	2300      	movs	r3, #0
 800d892:	61bb      	str	r3, [r7, #24]
 800d894:	e003      	b.n	800d89e <prvSendTo_ActualSend+0x94>
    else
    {
        /* When zero copy is used, pvBuffer is a pointer to the
         * payload of a buffer that has already been obtained from the
         * stack.  Obtain the network buffer pointer from the buffer. */
        pxNetworkBuffer = pxUDPPayloadBuffer_to_NetworkBuffer( pvBuffer );
 800d896:	68b8      	ldr	r0, [r7, #8]
 800d898:	f7fc f8cc 	bl	8009a34 <pxUDPPayloadBuffer_to_NetworkBuffer>
 800d89c:	6238      	str	r0, [r7, #32]
    }

    if( pxNetworkBuffer != NULL )
 800d89e:	6a3b      	ldr	r3, [r7, #32]
 800d8a0:	2b00      	cmp	r3, #0
 800d8a2:	d010      	beq.n	800d8c6 <prvSendTo_ActualSend+0xbc>
    {
        pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 800d8a4:	68fb      	ldr	r3, [r7, #12]
 800d8a6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d8a8:	6a3b      	ldr	r3, [r7, #32]
 800d8aa:	631a      	str	r2, [r3, #48]	@ 0x30
        lReturn = prvSendUDPPacket( pxSocket,
 800d8ac:	69bb      	ldr	r3, [r7, #24]
 800d8ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800d8b0:	9202      	str	r2, [sp, #8]
 800d8b2:	9301      	str	r3, [sp, #4]
 800d8b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d8b6:	9300      	str	r3, [sp, #0]
 800d8b8:	683b      	ldr	r3, [r7, #0]
 800d8ba:	687a      	ldr	r2, [r7, #4]
 800d8bc:	6a39      	ldr	r1, [r7, #32]
 800d8be:	68f8      	ldr	r0, [r7, #12]
 800d8c0:	f7ff ff4c 	bl	800d75c <prvSendUDPPacket>
 800d8c4:	6278      	str	r0, [r7, #36]	@ 0x24
         * number of transmitted bytes, so the calling function knows
         * how  much data was actually sent. */
        iptraceNO_BUFFER_FOR_SENDTO();
    }

    return lReturn;
 800d8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800d8c8:	4618      	mov	r0, r3
 800d8ca:	3728      	adds	r7, #40	@ 0x28
 800d8cc:	46bd      	mov	sp, r7
 800d8ce:	bd80      	pop	{r7, pc}

0800d8d0 <FreeRTOS_sendto>:
                         const void * pvBuffer,
                         size_t uxTotalDataLength,
                         BaseType_t xFlags,
                         const struct freertos_sockaddr * pxDestinationAddress,
                         socklen_t xDestinationAddressLength )
{
 800d8d0:	b580      	push	{r7, lr}
 800d8d2:	b090      	sub	sp, #64	@ 0x40
 800d8d4:	af02      	add	r7, sp, #8
 800d8d6:	60f8      	str	r0, [r7, #12]
 800d8d8:	60b9      	str	r1, [r7, #8]
 800d8da:	607a      	str	r2, [r7, #4]
 800d8dc:	603b      	str	r3, [r7, #0]
    int32_t lReturn = 0;
 800d8de:	2300      	movs	r3, #0
 800d8e0:	637b      	str	r3, [r7, #52]	@ 0x34
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800d8e2:	68fb      	ldr	r3, [r7, #12]
 800d8e4:	62bb      	str	r3, [r7, #40]	@ 0x28
    size_t uxMaxPayloadLength = 0;
 800d8e6:	2300      	movs	r3, #0
 800d8e8:	633b      	str	r3, [r7, #48]	@ 0x30
    size_t uxPayloadOffset = 0;
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempDestinationAddress;

        if( ( pxDestinationAddress != NULL ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxDestinationAddress->sin_family != FREERTOS_AF_INET ) )
 800d8ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8f0:	2b00      	cmp	r3, #0
 800d8f2:	d013      	beq.n	800d91c <FreeRTOS_sendto+0x4c>
 800d8f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8f6:	785b      	ldrb	r3, [r3, #1]
 800d8f8:	2b0a      	cmp	r3, #10
 800d8fa:	d00f      	beq.n	800d91c <FreeRTOS_sendto+0x4c>
 800d8fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d8fe:	785b      	ldrb	r3, [r3, #1]
 800d900:	2b02      	cmp	r3, #2
 800d902:	d00b      	beq.n	800d91c <FreeRTOS_sendto+0x4c>
        {
            ( void ) memcpy( &xTempDestinationAddress, pxDestinationAddress, sizeof( struct freertos_sockaddr ) );
 800d904:	f107 0310 	add.w	r3, r7, #16
 800d908:	2218      	movs	r2, #24
 800d90a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800d90c:	4618      	mov	r0, r3
 800d90e:	f013 fbd3 	bl	80210b8 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempDestinationAddress.sin_family = FREERTOS_AF_INET;
 800d912:	2302      	movs	r3, #2
 800d914:	747b      	strb	r3, [r7, #17]
            pxDestinationAddress = &xTempDestinationAddress;
 800d916:	f107 0310 	add.w	r3, r7, #16
 800d91a:	643b      	str	r3, [r7, #64]	@ 0x40

    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the
     * parameters. */
    ( void ) xDestinationAddressLength;
    configASSERT( pxDestinationAddress != NULL );
 800d91c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d91e:	2b00      	cmp	r3, #0
 800d920:	d104      	bne.n	800d92c <FreeRTOS_sendto+0x5c>
 800d922:	f240 6143 	movw	r1, #1603	@ 0x643
 800d926:	4820      	ldr	r0, [pc, #128]	@ (800d9a8 <FreeRTOS_sendto+0xd8>)
 800d928:	f7f3 fda2 	bl	8001470 <vAssertCalled>
    configASSERT( pvBuffer != NULL );
 800d92c:	68bb      	ldr	r3, [r7, #8]
 800d92e:	2b00      	cmp	r3, #0
 800d930:	d104      	bne.n	800d93c <FreeRTOS_sendto+0x6c>
 800d932:	f240 6144 	movw	r1, #1604	@ 0x644
 800d936:	481c      	ldr	r0, [pc, #112]	@ (800d9a8 <FreeRTOS_sendto+0xd8>)
 800d938:	f7f3 fd9a 	bl	8001470 <vAssertCalled>

    switch( pxDestinationAddress->sin_family )
 800d93c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d93e:	785b      	ldrb	r3, [r3, #1]
 800d940:	2b02      	cmp	r3, #2
 800d942:	d007      	beq.n	800d954 <FreeRTOS_sendto+0x84>
 800d944:	2b0a      	cmp	r3, #10
 800d946:	d10b      	bne.n	800d960 <FreeRTOS_sendto+0x90>
    {
        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER );
 800d948:	f240 53ac 	movw	r3, #1452	@ 0x5ac
 800d94c:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_UDP_HEADER;
 800d94e:	233e      	movs	r3, #62	@ 0x3e
 800d950:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800d952:	e00c      	b.n	800d96e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                uxMaxPayloadLength = ipconfigNETWORK_MTU - ( ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER );
 800d954:	f44f 63b8 	mov.w	r3, #1472	@ 0x5c0
 800d958:	633b      	str	r3, [r7, #48]	@ 0x30
                uxPayloadOffset = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_UDP_HEADER;
 800d95a:	232a      	movs	r3, #42	@ 0x2a
 800d95c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                break;
 800d95e:	e006      	b.n	800d96e <FreeRTOS_sendto+0x9e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        default:
            FreeRTOS_debug_printf( ( "FreeRTOS_sendto: Undefined sin_family \n" ) );
 800d960:	4812      	ldr	r0, [pc, #72]	@ (800d9ac <FreeRTOS_sendto+0xdc>)
 800d962:	f013 f98d 	bl	8020c80 <lUDPLoggingPrintf>
            lReturn = -pdFREERTOS_ERRNO_EINVAL;
 800d966:	f06f 0315 	mvn.w	r3, #21
 800d96a:	637b      	str	r3, [r7, #52]	@ 0x34
            break;
 800d96c:	bf00      	nop
    }

    if( lReturn == 0 )
 800d96e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d970:	2b00      	cmp	r3, #0
 800d972:	d114      	bne.n	800d99e <FreeRTOS_sendto+0xce>
    {
        if( uxTotalDataLength <= ( size_t ) uxMaxPayloadLength )
 800d974:	687a      	ldr	r2, [r7, #4]
 800d976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d978:	429a      	cmp	r2, r3
 800d97a:	d810      	bhi.n	800d99e <FreeRTOS_sendto+0xce>
        {
            /* If the socket is not already bound to an address, bind it now.
             * Passing NULL as the address parameter tells FreeRTOS_bind() to select
             * the address to bind to. */
            if( prvMakeSureSocketIsBound( pxSocket ) == pdTRUE )
 800d97c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d97e:	f7ff fecd 	bl	800d71c <prvMakeSureSocketIsBound>
 800d982:	4603      	mov	r3, r0
 800d984:	2b01      	cmp	r3, #1
 800d986:	d10a      	bne.n	800d99e <FreeRTOS_sendto+0xce>
            {
                lReturn = prvSendTo_ActualSend( pxSocket, pvBuffer, uxTotalDataLength, xFlags, pxDestinationAddress, uxPayloadOffset );
 800d988:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800d98a:	9301      	str	r3, [sp, #4]
 800d98c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800d98e:	9300      	str	r3, [sp, #0]
 800d990:	683b      	ldr	r3, [r7, #0]
 800d992:	687a      	ldr	r2, [r7, #4]
 800d994:	68b9      	ldr	r1, [r7, #8]
 800d996:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800d998:	f7ff ff37 	bl	800d80a <prvSendTo_ActualSend>
 800d99c:	6378      	str	r0, [r7, #52]	@ 0x34
            /* The data is longer than the available buffer space. */
            iptraceSENDTO_DATA_TOO_LONG();
        }
    }

    return lReturn;
 800d99e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800d9a0:	4618      	mov	r0, r3
 800d9a2:	3738      	adds	r7, #56	@ 0x38
 800d9a4:	46bd      	mov	sp, r7
 800d9a6:	bd80      	pop	{r7, pc}
 800d9a8:	0802465c 	.word	0x0802465c
 800d9ac:	08024710 	.word	0x08024710

0800d9b0 <FreeRTOS_bind>:
 *         If some error occurred, then a negative value is returned.
 */
BaseType_t FreeRTOS_bind( Socket_t xSocket,
                          struct freertos_sockaddr const * pxAddress,
                          socklen_t xAddressLength )
{
 800d9b0:	b580      	push	{r7, lr}
 800d9b2:	b090      	sub	sp, #64	@ 0x40
 800d9b4:	af02      	add	r7, sp, #8
 800d9b6:	60f8      	str	r0, [r7, #12]
 800d9b8:	60b9      	str	r1, [r7, #8]
 800d9ba:	607a      	str	r2, [r7, #4]
    IPStackEvent_t xBindEvent;
    FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	633b      	str	r3, [r7, #48]	@ 0x30
    BaseType_t xReturn = 0;
 800d9c0:	2300      	movs	r3, #0
 800d9c2:	637b      	str	r3, [r7, #52]	@ 0x34

    #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
        struct freertos_sockaddr xTempAddress;

        if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800d9c4:	68bb      	ldr	r3, [r7, #8]
 800d9c6:	2b00      	cmp	r3, #0
 800d9c8:	d013      	beq.n	800d9f2 <FreeRTOS_bind+0x42>
 800d9ca:	68bb      	ldr	r3, [r7, #8]
 800d9cc:	785b      	ldrb	r3, [r3, #1]
 800d9ce:	2b0a      	cmp	r3, #10
 800d9d0:	d00f      	beq.n	800d9f2 <FreeRTOS_bind+0x42>
 800d9d2:	68bb      	ldr	r3, [r7, #8]
 800d9d4:	785b      	ldrb	r3, [r3, #1]
 800d9d6:	2b02      	cmp	r3, #2
 800d9d8:	d00b      	beq.n	800d9f2 <FreeRTOS_bind+0x42>
        {
            ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800d9da:	f107 0310 	add.w	r3, r7, #16
 800d9de:	2218      	movs	r2, #24
 800d9e0:	68b9      	ldr	r1, [r7, #8]
 800d9e2:	4618      	mov	r0, r3
 800d9e4:	f013 fb68 	bl	80210b8 <memcpy>

            /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
             *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
            xTempAddress.sin_family = FREERTOS_AF_INET;
 800d9e8:	2302      	movs	r3, #2
 800d9ea:	747b      	strb	r3, [r7, #17]
            pxAddress = &xTempAddress;
 800d9ec:	f107 0310 	add.w	r3, r7, #16
 800d9f0:	60bb      	str	r3, [r7, #8]
        }
    #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

    ( void ) xAddressLength;

    configASSERT( xIsCallingFromIPTask() == pdFALSE );
 800d9f2:	f7fc f867 	bl	8009ac4 <xIsCallingFromIPTask>
 800d9f6:	4603      	mov	r3, r0
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d004      	beq.n	800da06 <FreeRTOS_bind+0x56>
 800d9fc:	f240 61a1 	movw	r1, #1697	@ 0x6a1
 800da00:	484b      	ldr	r0, [pc, #300]	@ (800db30 <FreeRTOS_bind+0x180>)
 800da02:	f7f3 fd35 	bl	8001470 <vAssertCalled>

    if( xSocketValid( pxSocket ) == pdFALSE )
 800da06:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800da08:	f002 f804 	bl	800fa14 <xSocketValid>
 800da0c:	4603      	mov	r3, r0
 800da0e:	2b00      	cmp	r3, #0
 800da10:	d103      	bne.n	800da1a <FreeRTOS_bind+0x6a>
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800da12:	f06f 0315 	mvn.w	r3, #21
 800da16:	637b      	str	r3, [r7, #52]	@ 0x34
 800da18:	e084      	b.n	800db24 <FreeRTOS_bind+0x174>
    }

    /* Once a socket is bound to a port, it can not be bound to a different
     * port number */
    else if( socketSOCKET_IS_BOUND( pxSocket ) )
 800da1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da1c:	69db      	ldr	r3, [r3, #28]
 800da1e:	2b00      	cmp	r3, #0
 800da20:	d009      	beq.n	800da36 <FreeRTOS_bind+0x86>
    {
        /* The socket is already bound. */
        FreeRTOS_debug_printf( ( "vSocketBind: Socket already bound to %d\n", pxSocket->usLocalPort ) );
 800da22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da24:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800da26:	4619      	mov	r1, r3
 800da28:	4842      	ldr	r0, [pc, #264]	@ (800db34 <FreeRTOS_bind+0x184>)
 800da2a:	f013 f929 	bl	8020c80 <lUDPLoggingPrintf>
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800da2e:	f06f 0315 	mvn.w	r3, #21
 800da32:	637b      	str	r3, [r7, #52]	@ 0x34
 800da34:	e076      	b.n	800db24 <FreeRTOS_bind+0x174>
    }
    else
    {
        /* Prepare a messages to the IP-task in order to perform the binding.
         * The desired port number will be passed in usLocalPort. */
        xBindEvent.eEventType = eSocketBindEvent;
 800da36:	2309      	movs	r3, #9
 800da38:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
        xBindEvent.pvData = xSocket;
 800da3c:	68fb      	ldr	r3, [r7, #12]
 800da3e:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxAddress != NULL )
 800da40:	68bb      	ldr	r3, [r7, #8]
 800da42:	2b00      	cmp	r3, #0
 800da44:	d042      	beq.n	800dacc <FreeRTOS_bind+0x11c>
        {
            switch( pxAddress->sin_family )
 800da46:	68bb      	ldr	r3, [r7, #8]
 800da48:	785b      	ldrb	r3, [r3, #1]
 800da4a:	2b02      	cmp	r3, #2
 800da4c:	d010      	beq.n	800da70 <FreeRTOS_bind+0xc0>
 800da4e:	2b0a      	cmp	r3, #10
 800da50:	d129      	bne.n	800daa6 <FreeRTOS_bind+0xf6>
            {
                #if ( ipconfigUSE_IPv6 != 0 )
                    case FREERTOS_AF_INET6:
                        ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800da52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da54:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800da58:	68bb      	ldr	r3, [r7, #8]
 800da5a:	3308      	adds	r3, #8
 800da5c:	2210      	movs	r2, #16
 800da5e:	4619      	mov	r1, r3
 800da60:	f013 fb2a 	bl	80210b8 <memcpy>
                        pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800da64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da66:	7a13      	ldrb	r3, [r2, #8]
 800da68:	f043 0301 	orr.w	r3, r3, #1
 800da6c:	7213      	strb	r3, [r2, #8]
                        break;
 800da6e:	e01e      	b.n	800daae <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                #if ( ipconfigUSE_IPv4 != 0 )
                    case FREERTOS_AF_INET4:
                        pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	689b      	ldr	r3, [r3, #8]
 800da74:	061a      	lsls	r2, r3, #24
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	689b      	ldr	r3, [r3, #8]
 800da7a:	021b      	lsls	r3, r3, #8
 800da7c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800da80:	431a      	orrs	r2, r3
 800da82:	68bb      	ldr	r3, [r7, #8]
 800da84:	689b      	ldr	r3, [r3, #8]
 800da86:	0a1b      	lsrs	r3, r3, #8
 800da88:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800da8c:	431a      	orrs	r2, r3
 800da8e:	68bb      	ldr	r3, [r7, #8]
 800da90:	689b      	ldr	r3, [r3, #8]
 800da92:	0e1b      	lsrs	r3, r3, #24
 800da94:	431a      	orrs	r2, r3
 800da96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da98:	629a      	str	r2, [r3, #40]	@ 0x28
                        pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800da9a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800da9c:	7a13      	ldrb	r3, [r2, #8]
 800da9e:	f36f 0300 	bfc	r3, #0, #1
 800daa2:	7213      	strb	r3, [r2, #8]
                        break;
 800daa4:	e003      	b.n	800daae <FreeRTOS_bind+0xfe>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                default:
                    FreeRTOS_debug_printf( ( "FreeRTOS_bind: Undefined sin_family \n" ) );
 800daa6:	4824      	ldr	r0, [pc, #144]	@ (800db38 <FreeRTOS_bind+0x188>)
 800daa8:	f013 f8ea 	bl	8020c80 <lUDPLoggingPrintf>
                    break;
 800daac:	bf00      	nop
            }

            pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800daae:	68bb      	ldr	r3, [r7, #8]
 800dab0:	885b      	ldrh	r3, [r3, #2]
 800dab2:	021b      	lsls	r3, r3, #8
 800dab4:	b21a      	sxth	r2, r3
 800dab6:	68bb      	ldr	r3, [r7, #8]
 800dab8:	885b      	ldrh	r3, [r3, #2]
 800daba:	0a1b      	lsrs	r3, r3, #8
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	b21b      	sxth	r3, r3
 800dac0:	4313      	orrs	r3, r2
 800dac2:	b21b      	sxth	r3, r3
 800dac4:	b29a      	uxth	r2, r3
 800dac6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dac8:	871a      	strh	r2, [r3, #56]	@ 0x38
 800daca:	e009      	b.n	800dae0 <FreeRTOS_bind+0x130>
        }
        else
        {
            /* Caller wants to bind to a random port number. */
            pxSocket->usLocalPort = 0U;
 800dacc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dace:	2200      	movs	r2, #0
 800dad0:	871a      	strh	r2, [r3, #56]	@ 0x38
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800dad2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dad4:	3328      	adds	r3, #40	@ 0x28
 800dad6:	2210      	movs	r2, #16
 800dad8:	2100      	movs	r1, #0
 800dada:	4618      	mov	r0, r3
 800dadc:	f013 fbf9 	bl	80212d2 <memset>
        }

        /* portMAX_DELAY is used as a the time-out parameter, as binding *must*
         * succeed before the socket can be used.  _RB_ The use of an infinite
         * block time needs be changed as it could result in the task hanging. */
        if( xSendEventStructToIPTask( &xBindEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800dae0:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800dae4:	f04f 31ff 	mov.w	r1, #4294967295
 800dae8:	4618      	mov	r0, r3
 800daea:	f7fb f8a9 	bl	8008c40 <xSendEventStructToIPTask>
 800daee:	4603      	mov	r3, r0
 800daf0:	2b00      	cmp	r3, #0
 800daf2:	d106      	bne.n	800db02 <FreeRTOS_bind+0x152>
        {
            /* Failed to wake-up the IP-task, no use to wait for it */
            FreeRTOS_debug_printf( ( "FreeRTOS_bind: send event failed\n" ) );
 800daf4:	4811      	ldr	r0, [pc, #68]	@ (800db3c <FreeRTOS_bind+0x18c>)
 800daf6:	f013 f8c3 	bl	8020c80 <lUDPLoggingPrintf>
            xReturn = -pdFREERTOS_ERRNO_ECANCELED;
 800dafa:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800dafe:	637b      	str	r3, [r7, #52]	@ 0x34
 800db00:	e010      	b.n	800db24 <FreeRTOS_bind+0x174>
        }
        else
        {
            /* The IP-task will set the 'eSOCKET_BOUND' bit when it has done its
             * job. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_BOUND, pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, portMAX_DELAY );
 800db02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db04:	6858      	ldr	r0, [r3, #4]
 800db06:	f04f 33ff 	mov.w	r3, #4294967295
 800db0a:	9300      	str	r3, [sp, #0]
 800db0c:	2300      	movs	r3, #0
 800db0e:	2201      	movs	r2, #1
 800db10:	2110      	movs	r1, #16
 800db12:	f7f4 fd0d 	bl	8002530 <xEventGroupWaitBits>

            if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800db16:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800db18:	69db      	ldr	r3, [r3, #28]
 800db1a:	2b00      	cmp	r3, #0
 800db1c:	d102      	bne.n	800db24 <FreeRTOS_bind+0x174>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800db1e:	f06f 0315 	mvn.w	r3, #21
 800db22:	637b      	str	r3, [r7, #52]	@ 0x34
            }
        }
    }

    return xReturn;
 800db24:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800db26:	4618      	mov	r0, r3
 800db28:	3738      	adds	r7, #56	@ 0x38
 800db2a:	46bd      	mov	sp, r7
 800db2c:	bd80      	pop	{r7, pc}
 800db2e:	bf00      	nop
 800db30:	0802465c 	.word	0x0802465c
 800db34:	08024738 	.word	0x08024738
 800db38:	08024764 	.word	0x08024764
 800db3c:	0802478c 	.word	0x0802478c

0800db40 <prvSocketBindAdd>:
 */
static BaseType_t prvSocketBindAdd( FreeRTOS_Socket_t * pxSocket,
                                    const struct freertos_sockaddr * pxAddress,
                                    List_t * pxSocketList,
                                    BaseType_t xInternal )
{
 800db40:	b580      	push	{r7, lr}
 800db42:	b086      	sub	sp, #24
 800db44:	af00      	add	r7, sp, #0
 800db46:	60f8      	str	r0, [r7, #12]
 800db48:	60b9      	str	r1, [r7, #8]
 800db4a:	607a      	str	r2, [r7, #4]
 800db4c:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0;
 800db4e:	2300      	movs	r3, #0
 800db50:	617b      	str	r3, [r7, #20]

    /* Check to ensure the port is not already in use.  If the bind is
     * called internally, a port MAY be used by more than one socket. */
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800db52:	683b      	ldr	r3, [r7, #0]
 800db54:	2b00      	cmp	r3, #0
 800db56:	d004      	beq.n	800db62 <prvSocketBindAdd+0x22>
 800db58:	68fb      	ldr	r3, [r7, #12]
 800db5a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800db5e:	2b06      	cmp	r3, #6
 800db60:	d024      	beq.n	800dbac <prvSocketBindAdd+0x6c>
        ( pxListFindListItemWithValue( pxSocketList, ( TickType_t ) pxAddress->sin_port ) != NULL ) )
 800db62:	68bb      	ldr	r3, [r7, #8]
 800db64:	885b      	ldrh	r3, [r3, #2]
 800db66:	4619      	mov	r1, r3
 800db68:	6878      	ldr	r0, [r7, #4]
 800db6a:	f000 fdf1 	bl	800e750 <pxListFindListItemWithValue>
 800db6e:	4603      	mov	r3, r0
    if( ( ( xInternal == pdFALSE ) || ( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP ) ) &&
 800db70:	2b00      	cmp	r3, #0
 800db72:	d01b      	beq.n	800dbac <prvSocketBindAdd+0x6c>
    {
        FreeRTOS_debug_printf( ( "vSocketBind: %sP port %d in use\n",
 800db74:	68fb      	ldr	r3, [r7, #12]
 800db76:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800db7a:	2b06      	cmp	r3, #6
 800db7c:	d101      	bne.n	800db82 <prvSocketBindAdd+0x42>
 800db7e:	493e      	ldr	r1, [pc, #248]	@ (800dc78 <prvSocketBindAdd+0x138>)
 800db80:	e000      	b.n	800db84 <prvSocketBindAdd+0x44>
 800db82:	493e      	ldr	r1, [pc, #248]	@ (800dc7c <prvSocketBindAdd+0x13c>)
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	885b      	ldrh	r3, [r3, #2]
 800db88:	021b      	lsls	r3, r3, #8
 800db8a:	b21a      	sxth	r2, r3
 800db8c:	68bb      	ldr	r3, [r7, #8]
 800db8e:	885b      	ldrh	r3, [r3, #2]
 800db90:	0a1b      	lsrs	r3, r3, #8
 800db92:	b29b      	uxth	r3, r3
 800db94:	b21b      	sxth	r3, r3
 800db96:	4313      	orrs	r3, r2
 800db98:	b21b      	sxth	r3, r3
 800db9a:	b29b      	uxth	r3, r3
 800db9c:	461a      	mov	r2, r3
 800db9e:	4838      	ldr	r0, [pc, #224]	@ (800dc80 <prvSocketBindAdd+0x140>)
 800dba0:	f013 f86e 	bl	8020c80 <lUDPLoggingPrintf>
                                 ( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) ? "TC" : "UD",
                                 FreeRTOS_ntohs( pxAddress->sin_port ) ) );
        xReturn = -pdFREERTOS_ERRNO_EADDRINUSE;
 800dba4:	f06f 036f 	mvn.w	r3, #111	@ 0x6f
 800dba8:	617b      	str	r3, [r7, #20]
 800dbaa:	e060      	b.n	800dc6e <prvSocketBindAdd+0x12e>
    }
    else
    {
        /* Allocate the port number to the socket.
         * This macro will set 'xBoundSocketListItem->xItemValue' */
        socketSET_SOCKET_PORT( pxSocket, pxAddress->sin_port );
 800dbac:	68bb      	ldr	r3, [r7, #8]
 800dbae:	885b      	ldrh	r3, [r3, #2]
 800dbb0:	461a      	mov	r2, r3
 800dbb2:	68fb      	ldr	r3, [r7, #12]
 800dbb4:	60da      	str	r2, [r3, #12]

        /* And also store it in a socket field 'usLocalPort' in host-byte-order,
         * mostly used for logging and debugging purposes */
        pxSocket->usLocalPort = FreeRTOS_ntohs( pxAddress->sin_port );
 800dbb6:	68bb      	ldr	r3, [r7, #8]
 800dbb8:	885b      	ldrh	r3, [r3, #2]
 800dbba:	021b      	lsls	r3, r3, #8
 800dbbc:	b21a      	sxth	r2, r3
 800dbbe:	68bb      	ldr	r3, [r7, #8]
 800dbc0:	885b      	ldrh	r3, [r3, #2]
 800dbc2:	0a1b      	lsrs	r3, r3, #8
 800dbc4:	b29b      	uxth	r3, r3
 800dbc6:	b21b      	sxth	r3, r3
 800dbc8:	4313      	orrs	r3, r2
 800dbca:	b21b      	sxth	r3, r3
 800dbcc:	b29a      	uxth	r2, r3
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	871a      	strh	r2, [r3, #56]	@ 0x38

        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800dbd2:	68bb      	ldr	r3, [r7, #8]
 800dbd4:	785b      	ldrb	r3, [r3, #1]
 800dbd6:	2b0a      	cmp	r3, #10
 800dbd8:	d109      	bne.n	800dbee <prvSocketBindAdd+0xae>
            {
                ( void ) memcpy( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	f103 0028 	add.w	r0, r3, #40	@ 0x28
 800dbe0:	68bb      	ldr	r3, [r7, #8]
 800dbe2:	3308      	adds	r3, #8
 800dbe4:	2210      	movs	r2, #16
 800dbe6:	4619      	mov	r1, r3
 800dbe8:	f013 fa66 	bl	80210b8 <memcpy>
 800dbec:	e00c      	b.n	800dc08 <prvSocketBindAdd+0xc8>
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            #if ( ipconfigUSE_IPv4 != 0 )
                if( pxAddress->sin_address.ulIP_IPv4 != FREERTOS_INADDR_ANY )
 800dbee:	68bb      	ldr	r3, [r7, #8]
 800dbf0:	689b      	ldr	r3, [r3, #8]
 800dbf2:	2b00      	cmp	r3, #0
 800dbf4:	d008      	beq.n	800dc08 <prvSocketBindAdd+0xc8>
                {
                    pxSocket->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv4( pxAddress->sin_address.ulIP_IPv4, 7 );
 800dbf6:	68bb      	ldr	r3, [r7, #8]
 800dbf8:	689b      	ldr	r3, [r3, #8]
 800dbfa:	2107      	movs	r1, #7
 800dbfc:	4618      	mov	r0, r3
 800dbfe:	f7fe ffb7 	bl	800cb70 <FreeRTOS_FindEndPointOnIP_IPv4>
 800dc02:	4602      	mov	r2, r0
 800dc04:	68fb      	ldr	r3, [r7, #12]
 800dc06:	64da      	str	r2, [r3, #76]	@ 0x4c
                /* Place holder, do nothing, MISRA compliance */
            }
        }

        #if ( ipconfigUSE_IPv4 != 0 )
            if( pxSocket->pxEndPoint != NULL )
 800dc08:	68fb      	ldr	r3, [r7, #12]
 800dc0a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc0c:	2b00      	cmp	r3, #0
 800dc0e:	d019      	beq.n	800dc44 <prvSocketBindAdd+0x104>
            {
                pxSocket->xLocalAddress.ulIP_IPv4 = FreeRTOS_ntohl( pxSocket->pxEndPoint->ipv4_settings.ulIPAddress );
 800dc10:	68fb      	ldr	r3, [r7, #12]
 800dc12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	061a      	lsls	r2, r3, #24
 800dc18:	68fb      	ldr	r3, [r7, #12]
 800dc1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc1c:	681b      	ldr	r3, [r3, #0]
 800dc1e:	021b      	lsls	r3, r3, #8
 800dc20:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800dc24:	431a      	orrs	r2, r3
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc2a:	681b      	ldr	r3, [r3, #0]
 800dc2c:	0a1b      	lsrs	r3, r3, #8
 800dc2e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800dc32:	431a      	orrs	r2, r3
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dc38:	681b      	ldr	r3, [r3, #0]
 800dc3a:	0e1b      	lsrs	r3, r3, #24
 800dc3c:	431a      	orrs	r2, r3
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	629a      	str	r2, [r3, #40]	@ 0x28
 800dc42:	e00a      	b.n	800dc5a <prvSocketBindAdd+0x11a>
            }
            else
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
        #if ( ipconfigUSE_IPv6 != 0 )
            if( pxAddress->sin_family == ( uint8_t ) FREERTOS_AF_INET6 )
 800dc44:	68bb      	ldr	r3, [r7, #8]
 800dc46:	785b      	ldrb	r3, [r3, #1]
 800dc48:	2b0a      	cmp	r3, #10
 800dc4a:	d006      	beq.n	800dc5a <prvSocketBindAdd+0x11a>
                /* Socket address was set, do nothing for IPv6. */
            }
            else
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        {
            ( void ) memset( pxSocket->xLocalAddress.xIP_IPv6.ucBytes, 0, sizeof( pxSocket->xLocalAddress.xIP_IPv6.ucBytes ) );
 800dc4c:	68fb      	ldr	r3, [r7, #12]
 800dc4e:	3328      	adds	r3, #40	@ 0x28
 800dc50:	2210      	movs	r2, #16
 800dc52:	2100      	movs	r1, #0
 800dc54:	4618      	mov	r0, r3
 800dc56:	f013 fb3c 	bl	80212d2 <memset>
            /* If the network driver can iterate through 'xBoundUDPSocketsList',
             * by calling xPortHasUDPSocket() then the IP-task must temporarily
             * suspend the scheduler to keep the list in a consistent state. */
            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                vTaskSuspendAll();
 800dc5a:	f7f5 fefb 	bl	8003a54 <vTaskSuspendAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

            /* Add the socket to 'xBoundUDPSocketsList' or 'xBoundTCPSocketsList' */
            vListInsertEnd( pxSocketList, &( pxSocket->xBoundSocketListItem ) );
 800dc5e:	68fb      	ldr	r3, [r7, #12]
 800dc60:	330c      	adds	r3, #12
 800dc62:	4619      	mov	r1, r3
 800dc64:	6878      	ldr	r0, [r7, #4]
 800dc66:	f7f4 fe4e 	bl	8002906 <vListInsertEnd>

            #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
            {
                ( void ) xTaskResumeAll();
 800dc6a:	f7f5 ff01 	bl	8003a70 <xTaskResumeAll>
            }
            #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
        }
    }

    return xReturn;
 800dc6e:	697b      	ldr	r3, [r7, #20]
}
 800dc70:	4618      	mov	r0, r3
 800dc72:	3718      	adds	r7, #24
 800dc74:	46bd      	mov	sp, r7
 800dc76:	bd80      	pop	{r7, pc}
 800dc78:	080247b0 	.word	0x080247b0
 800dc7c:	080247b4 	.word	0x080247b4
 800dc80:	080247b8 	.word	0x080247b8

0800dc84 <vSocketBind>:
 */
BaseType_t vSocketBind( FreeRTOS_Socket_t * pxSocket,
                        struct freertos_sockaddr * pxBindAddress,
                        size_t uxAddressLength,
                        BaseType_t xInternal )
{
 800dc84:	b580      	push	{r7, lr}
 800dc86:	b08e      	sub	sp, #56	@ 0x38
 800dc88:	af00      	add	r7, sp, #0
 800dc8a:	60f8      	str	r0, [r7, #12]
 800dc8c:	60b9      	str	r1, [r7, #8]
 800dc8e:	607a      	str	r2, [r7, #4]
 800dc90:	603b      	str	r3, [r7, #0]
    BaseType_t xReturn = 0; /* In Berkeley sockets, 0 means pass for bind(). */
 800dc92:	2300      	movs	r3, #0
 800dc94:	637b      	str	r3, [r7, #52]	@ 0x34
    List_t * pxSocketList;
    struct freertos_sockaddr * pxAddress = pxBindAddress;
 800dc96:	68bb      	ldr	r3, [r7, #8]
 800dc98:	62fb      	str	r3, [r7, #44]	@ 0x2c

    #if ( ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 )
        struct freertos_sockaddr xAddress;
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND */

    configASSERT( xSocketValid( pxSocket ) == pdTRUE );
 800dc9a:	68f8      	ldr	r0, [r7, #12]
 800dc9c:	f001 feba 	bl	800fa14 <xSocketValid>
 800dca0:	4603      	mov	r3, r0
 800dca2:	2b01      	cmp	r3, #1
 800dca4:	d004      	beq.n	800dcb0 <vSocketBind+0x2c>
 800dca6:	f240 716f 	movw	r1, #1903	@ 0x76f
 800dcaa:	4828      	ldr	r0, [pc, #160]	@ (800dd4c <vSocketBind+0xc8>)
 800dcac:	f7f3 fbe0 	bl	8001470 <vAssertCalled>

    #if ( ipconfigUSE_TCP == 1 )
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800dcb6:	2b06      	cmp	r3, #6
 800dcb8:	d102      	bne.n	800dcc0 <vSocketBind+0x3c>
        {
            pxSocketList = &xBoundTCPSocketsList;
 800dcba:	4b25      	ldr	r3, [pc, #148]	@ (800dd50 <vSocketBind+0xcc>)
 800dcbc:	633b      	str	r3, [r7, #48]	@ 0x30
 800dcbe:	e001      	b.n	800dcc4 <vSocketBind+0x40>
        }
        else
    #endif /* ipconfigUSE_TCP == 1 */
    {
        pxSocketList = &xBoundUDPSocketsList;
 800dcc0:	4b24      	ldr	r3, [pc, #144]	@ (800dd54 <vSocketBind+0xd0>)
 800dcc2:	633b      	str	r3, [r7, #48]	@ 0x30
        /* pxAddress will be NULL if sendto() was called on a socket without the
         * socket being bound to an address. In this case, automatically allocate
         * an address to the socket.  There is a small chance that the allocated
         * port will already be in use - if that is the case, then the check below
         * [pxListFindListItemWithValue()] will result in an error being returned. */
        if( pxAddress == NULL )
 800dcc4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcc6:	2b00      	cmp	r3, #0
 800dcc8:	d115      	bne.n	800dcf6 <vSocketBind+0x72>
        {
            pxAddress = &xAddress;
 800dcca:	f107 0314 	add.w	r3, r7, #20
 800dcce:	62fb      	str	r3, [r7, #44]	@ 0x2c
            /* Clear the address: */
            ( void ) memset( pxAddress, 0, sizeof( struct freertos_sockaddr ) );
 800dcd0:	2218      	movs	r2, #24
 800dcd2:	2100      	movs	r1, #0
 800dcd4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800dcd6:	f013 fafc 	bl	80212d2 <memset>

            if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 800dcda:	68fb      	ldr	r3, [r7, #12]
 800dcdc:	7a1b      	ldrb	r3, [r3, #8]
 800dcde:	f003 0301 	and.w	r3, r3, #1
 800dce2:	b2db      	uxtb	r3, r3
 800dce4:	2b00      	cmp	r3, #0
 800dce6:	d003      	beq.n	800dcf0 <vSocketBind+0x6c>
            {
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800dce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcea:	220a      	movs	r2, #10
 800dcec:	705a      	strb	r2, [r3, #1]
 800dcee:	e002      	b.n	800dcf6 <vSocketBind+0x72>
            }
            else
            {
                pxAddress->sin_family = FREERTOS_AF_INET;
 800dcf0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf2:	2202      	movs	r2, #2
 800dcf4:	705a      	strb	r2, [r3, #1]
    }
    #endif /* ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND == 1 */

    /* Sockets must be bound before calling FreeRTOS_sendto() if
    * ipconfigALLOW_SOCKET_SEND_WITHOUT_BIND is not set to 1. */
    configASSERT( pxAddress != NULL );
 800dcf6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dcf8:	2b00      	cmp	r3, #0
 800dcfa:	d104      	bne.n	800dd06 <vSocketBind+0x82>
 800dcfc:	f240 719b 	movw	r1, #1947	@ 0x79b
 800dd00:	4812      	ldr	r0, [pc, #72]	@ (800dd4c <vSocketBind+0xc8>)
 800dd02:	f7f3 fbb5 	bl	8001470 <vAssertCalled>
    #endif
    {
        /* Add a do-while loop to facilitate use of 'break' statements. */
        do
        {
            if( pxAddress->sin_port == 0U )
 800dd06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd08:	885b      	ldrh	r3, [r3, #2]
 800dd0a:	2b00      	cmp	r3, #0
 800dd0c:	d111      	bne.n	800dd32 <vSocketBind+0xae>
            {
                pxAddress->sin_port = prvGetPrivatePortNumber( ( BaseType_t ) pxSocket->ucProtocol );
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800dd14:	4618      	mov	r0, r3
 800dd16:	f000 fcc3 	bl	800e6a0 <prvGetPrivatePortNumber>
 800dd1a:	4603      	mov	r3, r0
 800dd1c:	461a      	mov	r2, r3
 800dd1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd20:	805a      	strh	r2, [r3, #2]

                if( pxAddress->sin_port == ( uint16_t ) 0U )
 800dd22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dd24:	885b      	ldrh	r3, [r3, #2]
 800dd26:	2b00      	cmp	r3, #0
 800dd28:	d103      	bne.n	800dd32 <vSocketBind+0xae>
                {
                    xReturn = -pdFREERTOS_ERRNO_EADDRNOTAVAIL;
 800dd2a:	f06f 037c 	mvn.w	r3, #124	@ 0x7c
 800dd2e:	637b      	str	r3, [r7, #52]	@ 0x34
                    break;
 800dd30:	e006      	b.n	800dd40 <vSocketBind+0xbc>

            /* If vSocketBind() is called from the API FreeRTOS_bind() it has been
             * confirmed that the socket was not yet bound to a port.  If it is called
             * from the IP-task, no such check is necessary. */

            xReturn = prvSocketBindAdd( pxSocket, pxAddress, pxSocketList, xInternal );
 800dd32:	683b      	ldr	r3, [r7, #0]
 800dd34:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800dd36:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800dd38:	68f8      	ldr	r0, [r7, #12]
 800dd3a:	f7ff ff01 	bl	800db40 <prvSocketBindAdd>
 800dd3e:	6378      	str	r0, [r7, #52]	@ 0x34
    if( xReturn != 0 )
    {
        iptraceBIND_FAILED( xSocket, ( FreeRTOS_ntohs( pxAddress->sin_port ) ) );
    }

    return xReturn;
 800dd40:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
} /* Tested */
 800dd42:	4618      	mov	r0, r3
 800dd44:	3738      	adds	r7, #56	@ 0x38
 800dd46:	46bd      	mov	sp, r7
 800dd48:	bd80      	pop	{r7, pc}
 800dd4a:	bf00      	nop
 800dd4c:	0802465c 	.word	0x0802465c
 800dd50:	20001304 	.word	0x20001304
 800dd54:	200012f0 	.word	0x200012f0

0800dd58 <FreeRTOS_closesocket>:
 *         1: If the socket was successfully closed (read the brief above).
 *        -1: If the socket was valid but could not be closed because the message
 *            could not be delivered to the IP-task. Try again later.
 */
BaseType_t FreeRTOS_closesocket( Socket_t xSocket )
{
 800dd58:	b580      	push	{r7, lr}
 800dd5a:	b086      	sub	sp, #24
 800dd5c:	af00      	add	r7, sp, #0
 800dd5e:	6078      	str	r0, [r7, #4]
    BaseType_t xResult;

    #if ( ipconfigUSE_CALLBACKS == 1 )
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800dd60:	687b      	ldr	r3, [r7, #4]
 800dd62:	613b      	str	r3, [r7, #16]
    #endif /* ipconfigUSE_CALLBACKS == 1 */
    IPStackEvent_t xCloseEvent;
    xCloseEvent.eEventType = eSocketCloseEvent;
 800dd64:	230a      	movs	r3, #10
 800dd66:	723b      	strb	r3, [r7, #8]
    xCloseEvent.pvData = xSocket;
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	60fb      	str	r3, [r7, #12]

    if( xSocketValid( xSocket ) == pdFALSE )
 800dd6c:	6878      	ldr	r0, [r7, #4]
 800dd6e:	f001 fe51 	bl	800fa14 <xSocketValid>
 800dd72:	4603      	mov	r3, r0
 800dd74:	2b00      	cmp	r3, #0
 800dd76:	d102      	bne.n	800dd7e <FreeRTOS_closesocket+0x26>
    {
        xResult = 0;
 800dd78:	2300      	movs	r3, #0
 800dd7a:	617b      	str	r3, [r7, #20]
 800dd7c:	e02f      	b.n	800ddde <FreeRTOS_closesocket+0x86>
    else
    {
        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            #if ( ipconfigUSE_TCP == 1 )
                if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dd7e:	693b      	ldr	r3, [r7, #16]
 800dd80:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800dd84:	2b06      	cmp	r3, #6
 800dd86:	d10c      	bne.n	800dda2 <FreeRTOS_closesocket+0x4a>
                {
                    /* Make sure that IP-task won't call the user callback's anymore */
                    pxSocket->u.xTCP.pxHandleConnected = NULL;
 800dd88:	693b      	ldr	r3, [r7, #16]
 800dd8a:	2200      	movs	r2, #0
 800dd8c:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                    pxSocket->u.xTCP.pxHandleReceive = NULL;
 800dd90:	693b      	ldr	r3, [r7, #16]
 800dd92:	2200      	movs	r2, #0
 800dd94:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                    pxSocket->u.xTCP.pxHandleSent = NULL;
 800dd98:	693b      	ldr	r3, [r7, #16]
 800dd9a:	2200      	movs	r2, #0
 800dd9c:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
 800dda0:	e00a      	b.n	800ddb8 <FreeRTOS_closesocket+0x60>
                }
                else
            #endif /* ipconfigUSE_TCP == 1 */

            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800dda2:	693b      	ldr	r3, [r7, #16]
 800dda4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800dda8:	2b11      	cmp	r3, #17
 800ddaa:	d105      	bne.n	800ddb8 <FreeRTOS_closesocket+0x60>
            {
                /* Clear the two UDP handlers. */
                pxSocket->u.xUDP.pxHandleReceive = NULL;
 800ddac:	693b      	ldr	r3, [r7, #16]
 800ddae:	2200      	movs	r2, #0
 800ddb0:	669a      	str	r2, [r3, #104]	@ 0x68
                pxSocket->u.xUDP.pxHandleSent = NULL;
 800ddb2:	693b      	ldr	r3, [r7, #16]
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* The timeout value below is only used if this function is called from
         * a user task. If this function is called by the IP-task, it may fail
         * to close the socket when the event queue is full.
         * This should only happen in case of a user call-back. */
        if( xSendEventStructToIPTask( &xCloseEvent, ( TickType_t ) portMAX_DELAY ) == pdFAIL )
 800ddb8:	f107 0308 	add.w	r3, r7, #8
 800ddbc:	f04f 31ff 	mov.w	r1, #4294967295
 800ddc0:	4618      	mov	r0, r3
 800ddc2:	f7fa ff3d 	bl	8008c40 <xSendEventStructToIPTask>
 800ddc6:	4603      	mov	r3, r0
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d106      	bne.n	800ddda <FreeRTOS_closesocket+0x82>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket: failed\n" ) );
 800ddcc:	4806      	ldr	r0, [pc, #24]	@ (800dde8 <FreeRTOS_closesocket+0x90>)
 800ddce:	f012 ff57 	bl	8020c80 <lUDPLoggingPrintf>
            xResult = -1;
 800ddd2:	f04f 33ff 	mov.w	r3, #4294967295
 800ddd6:	617b      	str	r3, [r7, #20]
 800ddd8:	e001      	b.n	800ddde <FreeRTOS_closesocket+0x86>
        }
        else
        {
            xResult = 1;
 800ddda:	2301      	movs	r3, #1
 800dddc:	617b      	str	r3, [r7, #20]
        }
    }

    return xResult;
 800ddde:	697b      	ldr	r3, [r7, #20]
}
 800dde0:	4618      	mov	r0, r3
 800dde2:	3718      	adds	r7, #24
 800dde4:	46bd      	mov	sp, r7
 800dde6:	bd80      	pop	{r7, pc}
 800dde8:	080247dc 	.word	0x080247dc

0800ddec <vSocketClose>:
 */
/* MISRA Ref 17.2.1 [Sockets and limited recursion] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
/* coverity[misra_c_2012_rule_17_2_violation] */
void * vSocketClose( FreeRTOS_Socket_t * pxSocket )
{
 800ddec:	b590      	push	{r4, r7, lr}
 800ddee:	b085      	sub	sp, #20
 800ddf0:	af00      	add	r7, sp, #0
 800ddf2:	6078      	str	r0, [r7, #4]
    NetworkBufferDescriptor_t * pxNetworkBuffer;

    #if ( ipconfigUSE_TCP == 1 )
    {
        /* For TCP: clean up a little more. */
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800ddfa:	2b06      	cmp	r3, #6
 800ddfc:	d129      	bne.n	800de52 <vSocketClose+0x66>
        {
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 800ddfe:	687b      	ldr	r3, [r7, #4]
 800de00:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800de04:	2b00      	cmp	r3, #0
 800de06:	d005      	beq.n	800de14 <vSocketClose+0x28>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 800de08:	687b      	ldr	r3, [r7, #4]
 800de0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800de0e:	4618      	mov	r0, r3
 800de10:	f008 fcda 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
                }

                /* Free the resources which were claimed by the tcpWin member */
                vTCPWindowDestroy( &pxSocket->u.xTCP.xTCPWindow );
 800de14:	687b      	ldr	r3, [r7, #4]
 800de16:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800de1a:	4618      	mov	r0, r3
 800de1c:	f006 fee6 	bl	8014bec <vTCPWindowDestroy>
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* Free the input and output streams */
            if( pxSocket->u.xTCP.rxStream != NULL )
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800de26:	2b00      	cmp	r3, #0
 800de28:	d005      	beq.n	800de36 <vSocketClose+0x4a>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.rxStream );
                vPortFreeLarge( pxSocket->u.xTCP.rxStream );
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800de30:	4618      	mov	r0, r3
 800de32:	f7f7 fe63 	bl	8005afc <vPortFree>
            }

            if( pxSocket->u.xTCP.txStream != NULL )
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800de3c:	2b00      	cmp	r3, #0
 800de3e:	d005      	beq.n	800de4c <vSocketClose+0x60>
            {
                iptraceMEM_STATS_DELETE( pxSocket->u.xTCP.txStream );
                vPortFreeLarge( pxSocket->u.xTCP.txStream );
 800de40:	687b      	ldr	r3, [r7, #4]
 800de42:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800de46:	4618      	mov	r0, r3
 800de48:	f7f7 fe58 	bl	8005afc <vPortFree>
            }

            /* In case this is a child socket, make sure the child-count of the
             * parent socket is decreased. */
            prvTCPSetSocketCount( pxSocket );
 800de4c:	6878      	ldr	r0, [r7, #4]
 800de4e:	f000 f8bd 	bl	800dfcc <prvTCPSetSocketCount>
    }
    #endif /* ipconfigUSE_TCP == 1 */

    /* Socket must be unbound first, to ensure no more packets are queued on
     * it. */
    if( socketSOCKET_IS_BOUND( pxSocket ) )
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	69db      	ldr	r3, [r3, #28]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d008      	beq.n	800de6c <vSocketClose+0x80>
        /* If the network driver can iterate through 'xBoundUDPSocketsList',
         * by calling xPortHasUDPSocket(), then the IP-task must temporarily
         * suspend the scheduler to keep the list in a consistent state. */
        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            vTaskSuspendAll();
 800de5a:	f7f5 fdfb 	bl	8003a54 <vTaskSuspendAll>
        }
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */

        ( void ) uxListRemove( &( pxSocket->xBoundSocketListItem ) );
 800de5e:	687b      	ldr	r3, [r7, #4]
 800de60:	330c      	adds	r3, #12
 800de62:	4618      	mov	r0, r3
 800de64:	f7f4 fdac 	bl	80029c0 <uxListRemove>

        #if ( ipconfigETHERNET_DRIVER_FILTERS_PACKETS == 1 )
        {
            ( void ) xTaskResumeAll();
 800de68:	f7f5 fe02 	bl	8003a70 <xTaskResumeAll>
        #endif /* ipconfigETHERNET_DRIVER_FILTERS_PACKETS */
    }

    /* Now the socket is not bound the list of waiting packets can be
     * drained. */
    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800de72:	2b11      	cmp	r3, #17
 800de74:	d10f      	bne.n	800de96 <vSocketClose+0xaa>
    {
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800de76:	e00a      	b.n	800de8e <vSocketClose+0xa2>
        {
            pxNetworkBuffer = ( ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) );
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800de7c:	68db      	ldr	r3, [r3, #12]
 800de7e:	60fb      	str	r3, [r7, #12]
            ( void ) uxListRemove( &( pxNetworkBuffer->xBufferListItem ) );
 800de80:	68fb      	ldr	r3, [r7, #12]
 800de82:	4618      	mov	r0, r3
 800de84:	f7f4 fd9c 	bl	80029c0 <uxListRemove>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 800de88:	68f8      	ldr	r0, [r7, #12]
 800de8a:	f008 fc9d 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
        while( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U )
 800de8e:	687b      	ldr	r3, [r7, #4]
 800de90:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800de92:	2b00      	cmp	r3, #0
 800de94:	d1f0      	bne.n	800de78 <vSocketClose+0x8c>
        }
    }

    if( pxSocket->xEventGroup != NULL )
 800de96:	687b      	ldr	r3, [r7, #4]
 800de98:	685b      	ldr	r3, [r3, #4]
 800de9a:	2b00      	cmp	r3, #0
 800de9c:	d004      	beq.n	800dea8 <vSocketClose+0xbc>
    {
        vEventGroupDelete( pxSocket->xEventGroup );
 800de9e:	687b      	ldr	r3, [r7, #4]
 800dea0:	685b      	ldr	r3, [r3, #4]
 800dea2:	4618      	mov	r0, r3
 800dea4:	f7f4 fcaa 	bl	80027fc <vEventGroupDelete>
    }

    #if ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 )
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800deae:	2b06      	cmp	r3, #6
 800deb0:	d10c      	bne.n	800decc <vSocketClose+0xe0>
        {
            FreeRTOS_debug_printf( ( "FreeRTOS_closesocket[%s]: buffers %lu socks %lu\n",
 800deb2:	6878      	ldr	r0, [r7, #4]
 800deb4:	f000 f816 	bl	800dee4 <prvSocketProps>
 800deb8:	4604      	mov	r4, r0
 800deba:	f008 fcd7 	bl	801686c <uxGetNumberOfFreeNetworkBuffers>
 800debe:	4602      	mov	r2, r0
 800dec0:	4b06      	ldr	r3, [pc, #24]	@ (800dedc <vSocketClose+0xf0>)
 800dec2:	681b      	ldr	r3, [r3, #0]
 800dec4:	4621      	mov	r1, r4
 800dec6:	4806      	ldr	r0, [pc, #24]	@ (800dee0 <vSocketClose+0xf4>)
 800dec8:	f012 feda 	bl	8020c80 <lUDPLoggingPrintf>
    }
    #endif /* ( ipconfigUSE_TCP == 1 ) && ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

    /* And finally, after all resources have been freed, free the socket space */
    iptraceMEM_STATS_DELETE( pxSocket );
    vPortFreeSocket( pxSocket );
 800decc:	6878      	ldr	r0, [r7, #4]
 800dece:	f7f7 fe15 	bl	8005afc <vPortFree>

    return NULL;
 800ded2:	2300      	movs	r3, #0
} /* Tested */
 800ded4:	4618      	mov	r0, r3
 800ded6:	3714      	adds	r7, #20
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd90      	pop	{r4, r7, pc}
 800dedc:	20001304 	.word	0x20001304
 800dee0:	080247fc 	.word	0x080247fc

0800dee4 <prvSocketProps>:
/*-----------------------------------------------------------*/

#if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )
    const char * prvSocketProps( FreeRTOS_Socket_t * pxSocket )
    {
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b086      	sub	sp, #24
 800dee8:	af04      	add	r7, sp, #16
 800deea:	6078      	str	r0, [r7, #4]
        /* For debugging purposes only: show some properties of a socket:
         * IP-addresses and port numbers. */
        #if ipconfigUSE_TCP == 1
            if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800def2:	2b06      	cmp	r3, #6
 800def4:	d132      	bne.n	800df5c <prvSocketProps+0x78>
            {
                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	7a1b      	ldrb	r3, [r3, #8]
 800defa:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800defe:	b2db      	uxtb	r3, r3
 800df00:	2b00      	cmp	r3, #0
 800df02:	d002      	beq.n	800df0a <prvSocketProps+0x26>
 800df04:	2b01      	cmp	r3, #1
 800df06:	d014      	beq.n	800df32 <prvSocketProps+0x4e>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:
                        /* MISRA 16.4 Compliance */
                        break;
 800df08:	e050      	b.n	800dfac <prvSocketProps+0xc8>
                                               ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800df0a:	687b      	ldr	r3, [r7, #4]
 800df0c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
                                               pxSocket->usLocalPort,
 800df0e:	687b      	ldr	r3, [r7, #4]
 800df10:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800df12:	4618      	mov	r0, r3
                                               ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
 800df14:	687b      	ldr	r3, [r7, #4]
 800df16:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800df18:	687a      	ldr	r2, [r7, #4]
 800df1a:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%xip port %u to %xip port %u",
 800df1e:	9202      	str	r2, [sp, #8]
 800df20:	9301      	str	r3, [sp, #4]
 800df22:	9000      	str	r0, [sp, #0]
 800df24:	460b      	mov	r3, r1
 800df26:	4a24      	ldr	r2, [pc, #144]	@ (800dfb8 <prvSocketProps+0xd4>)
 800df28:	215c      	movs	r1, #92	@ 0x5c
 800df2a:	4824      	ldr	r0, [pc, #144]	@ (800dfbc <prvSocketProps+0xd8>)
 800df2c:	f013 fed4 	bl	8021cd8 <snprintf>
                            break;
 800df30:	e03c      	b.n	800dfac <prvSocketProps+0xc8>
                                               ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800df32:	687b      	ldr	r3, [r7, #4]
 800df34:	f103 0128 	add.w	r1, r3, #40	@ 0x28
                                               pxSocket->usLocalPort,
 800df38:	687b      	ldr	r3, [r7, #4]
 800df3a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800df3c:	4618      	mov	r0, r3
                                               ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 800df3e:	687b      	ldr	r3, [r7, #4]
 800df40:	3354      	adds	r3, #84	@ 0x54
                                               pxSocket->u.xTCP.usRemotePort );
 800df42:	687a      	ldr	r2, [r7, #4]
 800df44:	f8b2 2064 	ldrh.w	r2, [r2, #100]	@ 0x64
                            ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ), "%pip port %u to %pip port %u",
 800df48:	9202      	str	r2, [sp, #8]
 800df4a:	9301      	str	r3, [sp, #4]
 800df4c:	9000      	str	r0, [sp, #0]
 800df4e:	460b      	mov	r3, r1
 800df50:	4a1b      	ldr	r2, [pc, #108]	@ (800dfc0 <prvSocketProps+0xdc>)
 800df52:	215c      	movs	r1, #92	@ 0x5c
 800df54:	4819      	ldr	r0, [pc, #100]	@ (800dfbc <prvSocketProps+0xd8>)
 800df56:	f013 febf 	bl	8021cd8 <snprintf>
                            break;
 800df5a:	e027      	b.n	800dfac <prvSocketProps+0xc8>
                }
            }
            else
        #endif /* if ipconfigUSE_TCP == 1 */

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800df5c:	687b      	ldr	r3, [r7, #4]
 800df5e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800df62:	2b11      	cmp	r3, #17
 800df64:	d122      	bne.n	800dfac <prvSocketProps+0xc8>
        {
            switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800df66:	687b      	ldr	r3, [r7, #4]
 800df68:	7a1b      	ldrb	r3, [r3, #8]
 800df6a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800df6e:	b2db      	uxtb	r3, r3
 800df70:	2b00      	cmp	r3, #0
 800df72:	d002      	beq.n	800df7a <prvSocketProps+0x96>
 800df74:	2b01      	cmp	r3, #1
 800df76:	d00c      	beq.n	800df92 <prvSocketProps+0xae>
                        break;
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    /* MISRA 16.4 Compliance */
                    break;
 800df78:	e018      	b.n	800dfac <prvSocketProps+0xc8>
                                           ( unsigned ) pxSocket->xLocalAddress.ulIP_IPv4,
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
                                           pxSocket->usLocalPort );
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800df82:	9300      	str	r3, [sp, #0]
 800df84:	4613      	mov	r3, r2
 800df86:	4a0f      	ldr	r2, [pc, #60]	@ (800dfc4 <prvSocketProps+0xe0>)
 800df88:	215c      	movs	r1, #92	@ 0x5c
 800df8a:	480c      	ldr	r0, [pc, #48]	@ (800dfbc <prvSocketProps+0xd8>)
 800df8c:	f013 fea4 	bl	8021cd8 <snprintf>
                        break;
 800df90:	e00c      	b.n	800dfac <prvSocketProps+0xc8>
                                           ( void * ) pxSocket->xLocalAddress.xIP_IPv6.ucBytes,
 800df92:	687b      	ldr	r3, [r7, #4]
 800df94:	f103 0228 	add.w	r2, r3, #40	@ 0x28
                                           pxSocket->usLocalPort );
 800df98:	687b      	ldr	r3, [r7, #4]
 800df9a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                        ( void ) snprintf( pucSocketProps, sizeof( pucSocketProps ),
 800df9c:	9300      	str	r3, [sp, #0]
 800df9e:	4613      	mov	r3, r2
 800dfa0:	4a09      	ldr	r2, [pc, #36]	@ (800dfc8 <prvSocketProps+0xe4>)
 800dfa2:	215c      	movs	r1, #92	@ 0x5c
 800dfa4:	4805      	ldr	r0, [pc, #20]	@ (800dfbc <prvSocketProps+0xd8>)
 800dfa6:	f013 fe97 	bl	8021cd8 <snprintf>
                        break;
 800dfaa:	bf00      	nop
        else
        {
            /* Protocol not handled. */
        }

        return pucSocketProps;
 800dfac:	4b03      	ldr	r3, [pc, #12]	@ (800dfbc <prvSocketProps+0xd8>)
    }
 800dfae:	4618      	mov	r0, r3
 800dfb0:	3708      	adds	r7, #8
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	08024830 	.word	0x08024830
 800dfbc:	20001294 	.word	0x20001294
 800dfc0:	08024850 	.word	0x08024850
 800dfc4:	08024870 	.word	0x08024870
 800dfc8:	08024880 	.word	0x08024880

0800dfcc <prvTCPSetSocketCount>:
    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    static void prvTCPSetSocketCount( FreeRTOS_Socket_t const * pxSocketToDelete )
    {
 800dfcc:	b580      	push	{r7, lr}
 800dfce:	b088      	sub	sp, #32
 800dfd0:	af02      	add	r7, sp, #8
 800dfd2:	6078      	str	r0, [r7, #4]
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800dfd4:	4b3c      	ldr	r3, [pc, #240]	@ (800e0c8 <prvTCPSetSocketCount+0xfc>)
 800dfd6:	613b      	str	r3, [r7, #16]
        FreeRTOS_Socket_t * pxOtherSocket;
        uint16_t usLocalPort = pxSocketToDelete->usLocalPort;
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800dfdc:	81fb      	strh	r3, [r7, #14]

        if( pxSocketToDelete->u.xTCP.eTCPState == eTCP_LISTEN )
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800dfe4:	2b01      	cmp	r3, #1
 800dfe6:	d12b      	bne.n	800e040 <prvTCPSetSocketCount+0x74>
        {
            pxIterator = listGET_NEXT( pxEnd );
 800dfe8:	693b      	ldr	r3, [r7, #16]
 800dfea:	685b      	ldr	r3, [r3, #4]
 800dfec:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 800dfee:	e022      	b.n	800e036 <prvTCPSetSocketCount+0x6a>
            {
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800dff0:	697b      	ldr	r3, [r7, #20]
 800dff2:	68db      	ldr	r3, [r3, #12]
 800dff4:	60bb      	str	r3, [r7, #8]

                /* This needs to be done here, before calling vSocketClose. */
                pxIterator = listGET_NEXT( pxIterator );
 800dff6:	697b      	ldr	r3, [r7, #20]
 800dff8:	685b      	ldr	r3, [r3, #4]
 800dffa:	617b      	str	r3, [r7, #20]

                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800dffc:	68bb      	ldr	r3, [r7, #8]
 800dffe:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e002:	2b01      	cmp	r3, #1
 800e004:	d017      	beq.n	800e036 <prvTCPSetSocketCount+0x6a>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e006:	68bb      	ldr	r3, [r7, #8]
 800e008:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState != eTCP_LISTEN ) &&
 800e00a:	89fa      	ldrh	r2, [r7, #14]
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d112      	bne.n	800e036 <prvTCPSetSocketCount+0x6a>
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800e010:	68bb      	ldr	r3, [r7, #8]
 800e012:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e016:	f003 0304 	and.w	r3, r3, #4
 800e01a:	b2db      	uxtb	r3, r3
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d107      	bne.n	800e030 <prvTCPSetSocketCount+0x64>
                      ( pxOtherSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) ) )
 800e020:	68bb      	ldr	r3, [r7, #8]
 800e022:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800e026:	f003 0302 	and.w	r3, r3, #2
 800e02a:	b2db      	uxtb	r3, r3
                    ( ( pxOtherSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 800e02c:	2b00      	cmp	r3, #0
 800e02e:	d002      	beq.n	800e036 <prvTCPSetSocketCount+0x6a>
                {
                    /* MISRA Ref 17.2.1 [Sockets and limited recursion] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
                    /* coverity[misra_c_2012_rule_17_2_violation] */
                    /* coverity[recursive_step] */
                    ( void ) vSocketClose( pxOtherSocket );
 800e030:	68b8      	ldr	r0, [r7, #8]
 800e032:	f7ff fedb 	bl	800ddec <vSocketClose>
            while( pxIterator != pxEnd )
 800e036:	697a      	ldr	r2, [r7, #20]
 800e038:	693b      	ldr	r3, [r7, #16]
 800e03a:	429a      	cmp	r2, r3
 800e03c:	d1d8      	bne.n	800dff0 <prvTCPSetSocketCount+0x24>
                                             ( pxOtherSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                    break;
                }
            }
        }
    }
 800e03e:	e03e      	b.n	800e0be <prvTCPSetSocketCount+0xf2>
            for( pxIterator = listGET_NEXT( pxEnd );
 800e040:	693b      	ldr	r3, [r7, #16]
 800e042:	685b      	ldr	r3, [r3, #4]
 800e044:	617b      	str	r3, [r7, #20]
 800e046:	e036      	b.n	800e0b6 <prvTCPSetSocketCount+0xea>
                pxOtherSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800e048:	697b      	ldr	r3, [r7, #20]
 800e04a:	68db      	ldr	r3, [r3, #12]
 800e04c:	60bb      	str	r3, [r7, #8]
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800e04e:	68bb      	ldr	r3, [r7, #8]
 800e050:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e054:	2b01      	cmp	r3, #1
 800e056:	d12b      	bne.n	800e0b0 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e058:	68bb      	ldr	r3, [r7, #8]
 800e05a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
                if( ( pxOtherSocket->u.xTCP.eTCPState == eTCP_LISTEN ) &&
 800e05c:	89fa      	ldrh	r2, [r7, #14]
 800e05e:	429a      	cmp	r2, r3
 800e060:	d126      	bne.n	800e0b0 <prvTCPSetSocketCount+0xe4>
                    ( pxOtherSocket->u.xTCP.usChildCount != 0U ) )
 800e062:	68bb      	ldr	r3, [r7, #8]
 800e064:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
                    ( pxOtherSocket->usLocalPort == usLocalPort ) &&
 800e068:	2b00      	cmp	r3, #0
 800e06a:	d021      	beq.n	800e0b0 <prvTCPSetSocketCount+0xe4>
                    pxOtherSocket->u.xTCP.usChildCount--;
 800e06c:	68bb      	ldr	r3, [r7, #8]
 800e06e:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e072:	3b01      	subs	r3, #1
 800e074:	b29a      	uxth	r2, r3
 800e076:	68bb      	ldr	r3, [r7, #8]
 800e078:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
                    FreeRTOS_debug_printf( ( "Lost: Socket %u now has %u / %u child%s\n",
 800e07c:	68bb      	ldr	r3, [r7, #8]
 800e07e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e080:	4619      	mov	r1, r3
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e088:	461a      	mov	r2, r3
 800e08a:	68bb      	ldr	r3, [r7, #8]
 800e08c:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 800e090:	4618      	mov	r0, r3
 800e092:	68bb      	ldr	r3, [r7, #8]
 800e094:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 800e098:	2b01      	cmp	r3, #1
 800e09a:	d101      	bne.n	800e0a0 <prvTCPSetSocketCount+0xd4>
 800e09c:	4b0b      	ldr	r3, [pc, #44]	@ (800e0cc <prvTCPSetSocketCount+0x100>)
 800e09e:	e000      	b.n	800e0a2 <prvTCPSetSocketCount+0xd6>
 800e0a0:	4b0b      	ldr	r3, [pc, #44]	@ (800e0d0 <prvTCPSetSocketCount+0x104>)
 800e0a2:	9300      	str	r3, [sp, #0]
 800e0a4:	4603      	mov	r3, r0
 800e0a6:	480b      	ldr	r0, [pc, #44]	@ (800e0d4 <prvTCPSetSocketCount+0x108>)
 800e0a8:	f012 fdea 	bl	8020c80 <lUDPLoggingPrintf>
                    break;
 800e0ac:	bf00      	nop
    }
 800e0ae:	e006      	b.n	800e0be <prvTCPSetSocketCount+0xf2>
                 pxIterator = listGET_NEXT( pxIterator ) )
 800e0b0:	697b      	ldr	r3, [r7, #20]
 800e0b2:	685b      	ldr	r3, [r3, #4]
 800e0b4:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 800e0b6:	697a      	ldr	r2, [r7, #20]
 800e0b8:	693b      	ldr	r3, [r7, #16]
 800e0ba:	429a      	cmp	r2, r3
 800e0bc:	d1c4      	bne.n	800e048 <prvTCPSetSocketCount+0x7c>
    }
 800e0be:	bf00      	nop
 800e0c0:	3718      	adds	r7, #24
 800e0c2:	46bd      	mov	sp, r7
 800e0c4:	bd80      	pop	{r7, pc}
 800e0c6:	bf00      	nop
 800e0c8:	2000130c 	.word	0x2000130c
 800e0cc:	08024890 	.word	0x08024890
 800e0d0:	08024894 	.word	0x08024894
 800e0d4:	08024898 	.word	0x08024898

0800e0d8 <prvSockopt_so_buffer>:
 *         value is returned.
 */
    static BaseType_t prvSockopt_so_buffer( FreeRTOS_Socket_t * pxSocket,
                                            int32_t lOptionName,
                                            const void * pvOptionValue )
    {
 800e0d8:	b580      	push	{r7, lr}
 800e0da:	b086      	sub	sp, #24
 800e0dc:	af00      	add	r7, sp, #0
 800e0de:	60f8      	str	r0, [r7, #12]
 800e0e0:	60b9      	str	r1, [r7, #8]
 800e0e2:	607a      	str	r2, [r7, #4]
        uint32_t ulNewValue;
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e0ea:	2b06      	cmp	r3, #6
 800e0ec:	d00d      	beq.n	800e10a <prvSockopt_so_buffer+0x32>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: wrong socket type\n",
 800e0ee:	68bb      	ldr	r3, [r7, #8]
 800e0f0:	2b04      	cmp	r3, #4
 800e0f2:	d101      	bne.n	800e0f8 <prvSockopt_so_buffer+0x20>
 800e0f4:	4b23      	ldr	r3, [pc, #140]	@ (800e184 <prvSockopt_so_buffer+0xac>)
 800e0f6:	e000      	b.n	800e0fa <prvSockopt_so_buffer+0x22>
 800e0f8:	4b23      	ldr	r3, [pc, #140]	@ (800e188 <prvSockopt_so_buffer+0xb0>)
 800e0fa:	4619      	mov	r1, r3
 800e0fc:	4823      	ldr	r0, [pc, #140]	@ (800e18c <prvSockopt_so_buffer+0xb4>)
 800e0fe:	f012 fdbf 	bl	8020c80 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e102:	f06f 0315 	mvn.w	r3, #21
 800e106:	617b      	str	r3, [r7, #20]
 800e108:	e036      	b.n	800e178 <prvSockopt_so_buffer+0xa0>
        }
        else if( ( ( lOptionName == FREERTOS_SO_SNDBUF ) && ( pxSocket->u.xTCP.txStream != NULL ) ) ||
 800e10a:	68bb      	ldr	r3, [r7, #8]
 800e10c:	2b04      	cmp	r3, #4
 800e10e:	d104      	bne.n	800e11a <prvSockopt_so_buffer+0x42>
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800e116:	2b00      	cmp	r3, #0
 800e118:	d107      	bne.n	800e12a <prvSockopt_so_buffer+0x52>
 800e11a:	68bb      	ldr	r3, [r7, #8]
 800e11c:	2b05      	cmp	r3, #5
 800e11e:	d112      	bne.n	800e146 <prvSockopt_so_buffer+0x6e>
                 ( ( lOptionName == FREERTOS_SO_RCVBUF ) && ( pxSocket->u.xTCP.rxStream != NULL ) ) )
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800e126:	2b00      	cmp	r3, #0
 800e128:	d00d      	beq.n	800e146 <prvSockopt_so_buffer+0x6e>
        {
            FreeRTOS_debug_printf( ( "Set SO_%sBUF: buffer already created\n",
 800e12a:	68bb      	ldr	r3, [r7, #8]
 800e12c:	2b04      	cmp	r3, #4
 800e12e:	d101      	bne.n	800e134 <prvSockopt_so_buffer+0x5c>
 800e130:	4b14      	ldr	r3, [pc, #80]	@ (800e184 <prvSockopt_so_buffer+0xac>)
 800e132:	e000      	b.n	800e136 <prvSockopt_so_buffer+0x5e>
 800e134:	4b14      	ldr	r3, [pc, #80]	@ (800e188 <prvSockopt_so_buffer+0xb0>)
 800e136:	4619      	mov	r1, r3
 800e138:	4815      	ldr	r0, [pc, #84]	@ (800e190 <prvSockopt_so_buffer+0xb8>)
 800e13a:	f012 fda1 	bl	8020c80 <lUDPLoggingPrintf>
                                     ( lOptionName == FREERTOS_SO_SNDBUF ) ? "SND" : "RCV" ) );
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e13e:	f06f 0315 	mvn.w	r3, #21
 800e142:	617b      	str	r3, [r7, #20]
 800e144:	e018      	b.n	800e178 <prvSockopt_so_buffer+0xa0>
        }
        else
        {
            ulNewValue = *( ( const uint32_t * ) pvOptionValue );
 800e146:	687b      	ldr	r3, [r7, #4]
 800e148:	681b      	ldr	r3, [r3, #0]
 800e14a:	613b      	str	r3, [r7, #16]

            if( lOptionName == FREERTOS_SO_SNDBUF )
 800e14c:	68bb      	ldr	r3, [r7, #8]
 800e14e:	2b04      	cmp	r3, #4
 800e150:	d10c      	bne.n	800e16c <prvSockopt_so_buffer+0x94>
            {
                /* Round up to nearest MSS size */
                ulNewValue = FreeRTOS_round_up( ulNewValue, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 800e152:	68fb      	ldr	r3, [r7, #12]
 800e154:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 800e158:	4619      	mov	r1, r3
 800e15a:	6938      	ldr	r0, [r7, #16]
 800e15c:	f7fb fe92 	bl	8009e84 <FreeRTOS_round_up>
 800e160:	6138      	str	r0, [r7, #16]
                pxSocket->u.xTCP.uxTxStreamSize = ulNewValue;
 800e162:	68fb      	ldr	r3, [r7, #12]
 800e164:	693a      	ldr	r2, [r7, #16]
 800e166:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
 800e16a:	e003      	b.n	800e174 <prvSockopt_so_buffer+0x9c>
            }
            else
            {
                pxSocket->u.xTCP.uxRxStreamSize = ulNewValue;
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	693a      	ldr	r2, [r7, #16]
 800e170:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
            }

            xReturn = 0;
 800e174:	2300      	movs	r3, #0
 800e176:	617b      	str	r3, [r7, #20]
        }

        return xReturn;
 800e178:	697b      	ldr	r3, [r7, #20]
    }
 800e17a:	4618      	mov	r0, r3
 800e17c:	3718      	adds	r7, #24
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	080248c4 	.word	0x080248c4
 800e188:	080248c8 	.word	0x080248c8
 800e18c:	080248cc 	.word	0x080248cc
 800e190:	080248f0 	.word	0x080248f0

0800e194 <prvSetOptionCallback>:
 *         value is returned.
 */
    BaseType_t prvSetOptionCallback( FreeRTOS_Socket_t * pxSocket,
                                     int32_t lOptionName,
                                     const void * pvOptionValue )
    {
 800e194:	b480      	push	{r7}
 800e196:	b087      	sub	sp, #28
 800e198:	af00      	add	r7, sp, #0
 800e19a:	60f8      	str	r0, [r7, #12]
 800e19c:	60b9      	str	r1, [r7, #8]
 800e19e:	607a      	str	r2, [r7, #4]
        BaseType_t xReturn = 0;
 800e1a0:	2300      	movs	r3, #0
 800e1a2:	617b      	str	r3, [r7, #20]

        #if ( ipconfigUSE_TCP == 1 )
        {
            UBaseType_t uxProtocol;

            if( ( lOptionName == FREERTOS_SO_UDP_RECV_HANDLER ) ||
 800e1a4:	68bb      	ldr	r3, [r7, #8]
 800e1a6:	2b09      	cmp	r3, #9
 800e1a8:	d002      	beq.n	800e1b0 <prvSetOptionCallback+0x1c>
 800e1aa:	68bb      	ldr	r3, [r7, #8]
 800e1ac:	2b0a      	cmp	r3, #10
 800e1ae:	d102      	bne.n	800e1b6 <prvSetOptionCallback+0x22>
                ( lOptionName == FREERTOS_SO_UDP_SENT_HANDLER ) )
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_UDP;
 800e1b0:	2311      	movs	r3, #17
 800e1b2:	613b      	str	r3, [r7, #16]
 800e1b4:	e001      	b.n	800e1ba <prvSetOptionCallback+0x26>
            }
            else
            {
                uxProtocol = ( UBaseType_t ) FREERTOS_IPPROTO_TCP;
 800e1b6:	2306      	movs	r3, #6
 800e1b8:	613b      	str	r3, [r7, #16]
            }

            if( pxSocket->ucProtocol != ( uint8_t ) uxProtocol )
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	f893 203b 	ldrb.w	r2, [r3, #59]	@ 0x3b
 800e1c0:	693b      	ldr	r3, [r7, #16]
 800e1c2:	b2db      	uxtb	r3, r3
 800e1c4:	429a      	cmp	r2, r3
 800e1c6:	d002      	beq.n	800e1ce <prvSetOptionCallback+0x3a>
            {
                xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e1c8:	f06f 0315 	mvn.w	r3, #21
 800e1cc:	617b      	str	r3, [r7, #20]
            /* No need to check if the socket has the right
             * protocol, because only UDP sockets can be created. */
        }
        #endif /* ipconfigUSE_TCP */

        if( xReturn == 0 )
 800e1ce:	697b      	ldr	r3, [r7, #20]
 800e1d0:	2b00      	cmp	r3, #0
 800e1d2:	d131      	bne.n	800e238 <prvSetOptionCallback+0xa4>
        {
            switch( lOptionName ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is checked before calling. */
 800e1d4:	68bb      	ldr	r3, [r7, #8]
 800e1d6:	3b06      	subs	r3, #6
 800e1d8:	2b04      	cmp	r3, #4
 800e1da:	d829      	bhi.n	800e230 <prvSetOptionCallback+0x9c>
 800e1dc:	a201      	add	r2, pc, #4	@ (adr r2, 800e1e4 <prvSetOptionCallback+0x50>)
 800e1de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e1e2:	bf00      	nop
 800e1e4:	0800e1f9 	.word	0x0800e1f9
 800e1e8:	0800e205 	.word	0x0800e205
 800e1ec:	0800e211 	.word	0x0800e211
 800e1f0:	0800e21d 	.word	0x0800e21d
 800e1f4:	0800e227 	.word	0x0800e227
            {
                #if ipconfigUSE_TCP == 1
                    case FREERTOS_SO_TCP_CONN_HANDLER:
                        pxSocket->u.xTCP.pxHandleConnected = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPConnected;
 800e1f8:	687b      	ldr	r3, [r7, #4]
 800e1fa:	681a      	ldr	r2, [r3, #0]
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
                        break;
 800e202:	e019      	b.n	800e238 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_RECV_HANDLER:
                        pxSocket->u.xTCP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPReceive;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	685a      	ldr	r2, [r3, #4]
 800e208:	68fb      	ldr	r3, [r7, #12]
 800e20a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
                        break;
 800e20e:	e013      	b.n	800e238 <prvSetOptionCallback+0xa4>

                    case FREERTOS_SO_TCP_SENT_HANDLER:
                        pxSocket->u.xTCP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnTCPSent;
 800e210:	687b      	ldr	r3, [r7, #4]
 800e212:	689a      	ldr	r2, [r3, #8]
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c
                        break;
 800e21a:	e00d      	b.n	800e238 <prvSetOptionCallback+0xa4>
                #endif /* ipconfigUSE_TCP */
                case FREERTOS_SO_UDP_RECV_HANDLER:
                    pxSocket->u.xUDP.pxHandleReceive = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPReceive;
 800e21c:	687b      	ldr	r3, [r7, #4]
 800e21e:	68da      	ldr	r2, [r3, #12]
 800e220:	68fb      	ldr	r3, [r7, #12]
 800e222:	669a      	str	r2, [r3, #104]	@ 0x68
                    break;
 800e224:	e008      	b.n	800e238 <prvSetOptionCallback+0xa4>

                case FREERTOS_SO_UDP_SENT_HANDLER:
                    pxSocket->u.xUDP.pxHandleSent = ( ( const F_TCP_UDP_Handler_t * ) pvOptionValue )->pxOnUDPSent;
 800e226:	687b      	ldr	r3, [r7, #4]
 800e228:	691a      	ldr	r2, [r3, #16]
 800e22a:	68fb      	ldr	r3, [r7, #12]
 800e22c:	66da      	str	r2, [r3, #108]	@ 0x6c
                    break;
 800e22e:	e003      	b.n	800e238 <prvSetOptionCallback+0xa4>

                default:                                /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
                    xReturn = -pdFREERTOS_ERRNO_EINVAL; /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e230:	f06f 0315 	mvn.w	r3, #21
 800e234:	617b      	str	r3, [r7, #20]
                    break;                              /* LCOV_EXCL_LINE Exclude this line because default case is checked before calling. */
 800e236:	bf00      	nop
            }
        }

        return xReturn;
 800e238:	697b      	ldr	r3, [r7, #20]
    }
 800e23a:	4618      	mov	r0, r3
 800e23c:	371c      	adds	r7, #28
 800e23e:	46bd      	mov	sp, r7
 800e240:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e244:	4770      	bx	lr
 800e246:	bf00      	nop

0800e248 <prvSetOptionTCPWindows>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionTCPWindows( FreeRTOS_Socket_t * pxSocket,
                                              const void * pvOptionValue )
    {
 800e248:	b580      	push	{r7, lr}
 800e24a:	b086      	sub	sp, #24
 800e24c:	af00      	add	r7, sp, #0
 800e24e:	6078      	str	r0, [r7, #4]
 800e250:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e252:	f06f 0315 	mvn.w	r3, #21
 800e256:	617b      	str	r3, [r7, #20]
        const WinProperties_t * pxProps;

        do
        {
            IPTCPSocket_t * pxTCP = &( pxSocket->u.xTCP );
 800e258:	687b      	ldr	r3, [r7, #4]
 800e25a:	3354      	adds	r3, #84	@ 0x54
 800e25c:	613b      	str	r3, [r7, #16]

            if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e25e:	687b      	ldr	r3, [r7, #4]
 800e260:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e264:	2b06      	cmp	r3, #6
 800e266:	d003      	beq.n	800e270 <prvSetOptionTCPWindows+0x28>
            {
                FreeRTOS_debug_printf( ( "Set SO_WIN_PROP: wrong socket type\n" ) );
 800e268:	4825      	ldr	r0, [pc, #148]	@ (800e300 <prvSetOptionTCPWindows+0xb8>)
 800e26a:	f012 fd09 	bl	8020c80 <lUDPLoggingPrintf>
                break; /* will return -pdFREERTOS_ERRNO_EINVAL */
 800e26e:	e042      	b.n	800e2f6 <prvSetOptionTCPWindows+0xae>
            }

            pxProps = ( const WinProperties_t * ) pvOptionValue;
 800e270:	683b      	ldr	r3, [r7, #0]
 800e272:	60fb      	str	r3, [r7, #12]

            /* Validity of txStream will be checked by the function below. */
            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_SNDBUF, &( pxProps->lTxBufSize ) );
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	461a      	mov	r2, r3
 800e278:	2104      	movs	r1, #4
 800e27a:	6878      	ldr	r0, [r7, #4]
 800e27c:	f7ff ff2c 	bl	800e0d8 <prvSockopt_so_buffer>
 800e280:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800e282:	697b      	ldr	r3, [r7, #20]
 800e284:	2b00      	cmp	r3, #0
 800e286:	d133      	bne.n	800e2f0 <prvSetOptionTCPWindows+0xa8>
            {
                break; /* will return an error. */
            }

            xReturn = prvSockopt_so_buffer( pxSocket, FREERTOS_SO_RCVBUF, &( pxProps->lRxBufSize ) );
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	3308      	adds	r3, #8
 800e28c:	461a      	mov	r2, r3
 800e28e:	2105      	movs	r1, #5
 800e290:	6878      	ldr	r0, [r7, #4]
 800e292:	f7ff ff21 	bl	800e0d8 <prvSockopt_so_buffer>
 800e296:	6178      	str	r0, [r7, #20]

            if( xReturn != 0 )
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d12a      	bne.n	800e2f4 <prvSetOptionTCPWindows+0xac>
                break; /* will return an error. */
            }

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                pxTCP->uxRxWinSize = ( uint32_t ) pxProps->lRxWinSize; /* Fixed value: size of the TCP reception window */
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	68db      	ldr	r3, [r3, #12]
 800e2a2:	461a      	mov	r2, r3
 800e2a4:	693b      	ldr	r3, [r7, #16]
 800e2a6:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
                pxTCP->uxTxWinSize = ( uint32_t ) pxProps->lTxWinSize; /* Fixed value: size of the TCP transmit window */
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	685b      	ldr	r3, [r3, #4]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	693b      	ldr	r3, [r7, #16]
 800e2b2:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
            }
            #endif

            /* In case the socket has already initialised its tcpWin,
             * adapt the window size parameters */
            if( pxTCP->xTCPWindow.u.bits.bHasInit != pdFALSE_UNSIGNED )
 800e2b6:	693b      	ldr	r3, [r7, #16]
 800e2b8:	f893 30cc 	ldrb.w	r3, [r3, #204]	@ 0xcc
 800e2bc:	f003 0301 	and.w	r3, r3, #1
 800e2c0:	b2db      	uxtb	r3, r3
 800e2c2:	2b00      	cmp	r3, #0
 800e2c4:	d017      	beq.n	800e2f6 <prvSetOptionTCPWindows+0xae>
            {
                pxTCP->xTCPWindow.xSize.ulRxWindowLength = ( uint32_t ) ( pxTCP->uxRxWinSize * pxTCP->usMSS );
 800e2c6:	693b      	ldr	r3, [r7, #16]
 800e2c8:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e2cc:	693a      	ldr	r2, [r7, #16]
 800e2ce:	8bd2      	ldrh	r2, [r2, #30]
 800e2d0:	fb03 f202 	mul.w	r2, r3, r2
 800e2d4:	693b      	ldr	r3, [r7, #16]
 800e2d6:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
                pxTCP->xTCPWindow.xSize.ulTxWindowLength = ( uint32_t ) ( pxTCP->uxTxWinSize * pxTCP->usMSS );
 800e2da:	693b      	ldr	r3, [r7, #16]
 800e2dc:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800e2e0:	693a      	ldr	r2, [r7, #16]
 800e2e2:	8bd2      	ldrh	r2, [r2, #30]
 800e2e4:	fb03 f202 	mul.w	r2, r3, r2
 800e2e8:	693b      	ldr	r3, [r7, #16]
 800e2ea:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800e2ee:	e002      	b.n	800e2f6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800e2f0:	bf00      	nop
 800e2f2:	e000      	b.n	800e2f6 <prvSetOptionTCPWindows+0xae>
                break; /* will return an error. */
 800e2f4:	bf00      	nop
            }
        }
        while( ipFALSE_BOOL );

        return xReturn;
 800e2f6:	697b      	ldr	r3, [r7, #20]
    }
 800e2f8:	4618      	mov	r0, r3
 800e2fa:	3718      	adds	r7, #24
 800e2fc:	46bd      	mov	sp, r7
 800e2fe:	bd80      	pop	{r7, pc}
 800e300:	08024918 	.word	0x08024918

0800e304 <prvSetOptionLowHighWater>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The pointer that is passed by the application.
 */
    static BaseType_t prvSetOptionLowHighWater( FreeRTOS_Socket_t * pxSocket,
                                                const void * pvOptionValue )
    {
 800e304:	b580      	push	{r7, lr}
 800e306:	b084      	sub	sp, #16
 800e308:	af00      	add	r7, sp, #0
 800e30a:	6078      	str	r0, [r7, #4]
 800e30c:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e30e:	f06f 0315 	mvn.w	r3, #21
 800e312:	60fb      	str	r3, [r7, #12]
        const LowHighWater_t * pxLowHighWater = ( const LowHighWater_t * ) pvOptionValue;
 800e314:	683b      	ldr	r3, [r7, #0]
 800e316:	60bb      	str	r3, [r7, #8]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e318:	687b      	ldr	r3, [r7, #4]
 800e31a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e31e:	2b06      	cmp	r3, #6
 800e320:	d003      	beq.n	800e32a <prvSetOptionLowHighWater+0x26>
        {
            /* It is not allowed to access 'pxSocket->u.xTCP'. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: wrong socket type\n" ) );
 800e322:	4813      	ldr	r0, [pc, #76]	@ (800e370 <prvSetOptionLowHighWater+0x6c>)
 800e324:	f012 fcac 	bl	8020c80 <lUDPLoggingPrintf>
 800e328:	e01c      	b.n	800e364 <prvSetOptionLowHighWater+0x60>
        }
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800e32a:	68bb      	ldr	r3, [r7, #8]
 800e32c:	681a      	ldr	r2, [r3, #0]
 800e32e:	68bb      	ldr	r3, [r7, #8]
 800e330:	685b      	ldr	r3, [r3, #4]
 800e332:	429a      	cmp	r2, r3
 800e334:	d206      	bcs.n	800e344 <prvSetOptionLowHighWater+0x40>
                 ( pxLowHighWater->uxEnoughSpace > pxSocket->u.xTCP.uxRxStreamSize ) )
 800e336:	68bb      	ldr	r3, [r7, #8]
 800e338:	685a      	ldr	r2, [r3, #4]
 800e33a:	687b      	ldr	r3, [r7, #4]
 800e33c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
        else if( ( pxLowHighWater->uxLittleSpace >= pxLowHighWater->uxEnoughSpace ) ||
 800e340:	429a      	cmp	r2, r3
 800e342:	d903      	bls.n	800e34c <prvSetOptionLowHighWater+0x48>
        {
            /* Impossible values. */
            FreeRTOS_debug_printf( ( "FREERTOS_SO_SET_LOW_HIGH_WATER: bad values\n" ) );
 800e344:	480b      	ldr	r0, [pc, #44]	@ (800e374 <prvSetOptionLowHighWater+0x70>)
 800e346:	f012 fc9b 	bl	8020c80 <lUDPLoggingPrintf>
 800e34a:	e00b      	b.n	800e364 <prvSetOptionLowHighWater+0x60>
        }
        else
        {
            /* Send a STOP when buffer space drops below 'uxLittleSpace' bytes. */
            pxSocket->u.xTCP.uxLittleSpace = pxLowHighWater->uxLittleSpace;
 800e34c:	68bb      	ldr	r3, [r7, #8]
 800e34e:	681a      	ldr	r2, [r3, #0]
 800e350:	687b      	ldr	r3, [r7, #4]
 800e352:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            /* Send a GO when buffer space grows above 'uxEnoughSpace' bytes. */
            pxSocket->u.xTCP.uxEnoughSpace = pxLowHighWater->uxEnoughSpace;
 800e356:	68bb      	ldr	r3, [r7, #8]
 800e358:	685a      	ldr	r2, [r3, #4]
 800e35a:	687b      	ldr	r3, [r7, #4]
 800e35c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
            xReturn = 0;
 800e360:	2300      	movs	r3, #0
 800e362:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e364:	68fb      	ldr	r3, [r7, #12]
    }
 800e366:	4618      	mov	r0, r3
 800e368:	3710      	adds	r7, #16
 800e36a:	46bd      	mov	sp, r7
 800e36c:	bd80      	pop	{r7, pc}
 800e36e:	bf00      	nop
 800e370:	0802493c 	.word	0x0802493c
 800e374:	08024970 	.word	0x08024970

0800e378 <prvSetOptionSetFullSize>:
 * @param[in] pxSocket The socket whose options are being set.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionSetFullSize( FreeRTOS_Socket_t * pxSocket,
                                               const void * pvOptionValue )
    {
 800e378:	b580      	push	{r7, lr}
 800e37a:	b084      	sub	sp, #16
 800e37c:	af00      	add	r7, sp, #0
 800e37e:	6078      	str	r0, [r7, #4]
 800e380:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e382:	f06f 0315 	mvn.w	r3, #21
 800e386:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e388:	687b      	ldr	r3, [r7, #4]
 800e38a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e38e:	2b06      	cmp	r3, #6
 800e390:	d126      	bne.n	800e3e0 <prvSetOptionSetFullSize+0x68>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e392:	683b      	ldr	r3, [r7, #0]
 800e394:	681b      	ldr	r3, [r3, #0]
 800e396:	2b00      	cmp	r3, #0
 800e398:	d007      	beq.n	800e3aa <prvSetOptionSetFullSize+0x32>
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdTRUE_UNSIGNED;
 800e39a:	687a      	ldr	r2, [r7, #4]
 800e39c:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800e3a0:	f043 0302 	orr.w	r3, r3, #2
 800e3a4:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
 800e3a8:	e006      	b.n	800e3b8 <prvSetOptionSetFullSize+0x40>
            }
            else
            {
                pxSocket->u.xTCP.xTCPWindow.u.bits.bSendFullSize = pdFALSE_UNSIGNED;
 800e3aa:	687a      	ldr	r2, [r7, #4]
 800e3ac:	f892 3120 	ldrb.w	r3, [r2, #288]	@ 0x120
 800e3b0:	f36f 0341 	bfc	r3, #1, #1
 800e3b4:	f882 3120 	strb.w	r3, [r2, #288]	@ 0x120
            }

            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800e3b8:	687b      	ldr	r3, [r7, #4]
 800e3ba:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800e3be:	2b04      	cmp	r3, #4
 800e3c0:	d90c      	bls.n	800e3dc <prvSetOptionSetFullSize+0x64>
                ( FreeRTOS_outstanding( pxSocket ) != 0 ) )
 800e3c2:	6878      	ldr	r0, [r7, #4]
 800e3c4:	f001 faba 	bl	800f93c <FreeRTOS_tx_size>
 800e3c8:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800e3ca:	2b00      	cmp	r3, #0
 800e3cc:	d006      	beq.n	800e3dc <prvSetOptionSetFullSize+0x64>
            {
                /* There might be some data in the TX-stream, less than full-size,
                 * which equals a MSS.  Wake-up the IP-task to check this. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	2201      	movs	r2, #1
 800e3d2:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800e3d6:	2006      	movs	r0, #6
 800e3d8:	f7fa fc1c 	bl	8008c14 <xSendEventToIPTask>
            }

            xReturn = 0;
 800e3dc:	2300      	movs	r3, #0
 800e3de:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e3e0:	68fb      	ldr	r3, [r7, #12]
    }
 800e3e2:	4618      	mov	r0, r3
 800e3e4:	3710      	adds	r7, #16
 800e3e6:	46bd      	mov	sp, r7
 800e3e8:	bd80      	pop	{r7, pc}

0800e3ea <prvSetOptionStopRX>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionStopRX( FreeRTOS_Socket_t * pxSocket,
                                          const void * pvOptionValue )
    {
 800e3ea:	b580      	push	{r7, lr}
 800e3ec:	b084      	sub	sp, #16
 800e3ee:	af00      	add	r7, sp, #0
 800e3f0:	6078      	str	r0, [r7, #4]
 800e3f2:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e3f4:	f06f 0315 	mvn.w	r3, #21
 800e3f8:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e3fa:	687b      	ldr	r3, [r7, #4]
 800e3fc:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e400:	2b06      	cmp	r3, #6
 800e402:	d122      	bne.n	800e44a <prvSetOptionStopRX+0x60>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e404:	683b      	ldr	r3, [r7, #0]
 800e406:	681b      	ldr	r3, [r3, #0]
 800e408:	2b00      	cmp	r3, #0
 800e40a:	d007      	beq.n	800e41c <prvSetOptionStopRX+0x32>
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdTRUE_UNSIGNED;
 800e40c:	687a      	ldr	r2, [r7, #4]
 800e40e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800e412:	f043 0304 	orr.w	r3, r3, #4
 800e416:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
 800e41a:	e006      	b.n	800e42a <prvSetOptionStopRX+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bRxStopped = pdFALSE_UNSIGNED;
 800e41c:	687a      	ldr	r2, [r7, #4]
 800e41e:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800e422:	f36f 0382 	bfc	r3, #2, #1
 800e426:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }

            pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800e42a:	687a      	ldr	r2, [r7, #4]
 800e42c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800e430:	f043 0301 	orr.w	r3, r3, #1
 800e434:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.usTimeout = 1U; /* to set/clear bRxStopped */
 800e438:	687b      	ldr	r3, [r7, #4]
 800e43a:	2201      	movs	r2, #1
 800e43c:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800e440:	2006      	movs	r0, #6
 800e442:	f7fa fbe7 	bl	8008c14 <xSendEventToIPTask>
            xReturn = 0;
 800e446:	2300      	movs	r3, #0
 800e448:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e44a:	68fb      	ldr	r3, [r7, #12]
    }
 800e44c:	4618      	mov	r0, r3
 800e44e:	3710      	adds	r7, #16
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}

0800e454 <prvSetOptionTimeout>:
 *            otherwise handle the option `FREERTOS_SO_RCVTIMEO`.
 */
static void prvSetOptionTimeout( FreeRTOS_Socket_t * pxSocket,
                                 const void * pvOptionValue,
                                 BaseType_t xForSend )
{
 800e454:	b480      	push	{r7}
 800e456:	b087      	sub	sp, #28
 800e458:	af00      	add	r7, sp, #0
 800e45a:	60f8      	str	r0, [r7, #12]
 800e45c:	60b9      	str	r1, [r7, #8]
 800e45e:	607a      	str	r2, [r7, #4]
    TickType_t xBlockTime = *( ( const TickType_t * ) pvOptionValue );
 800e460:	68bb      	ldr	r3, [r7, #8]
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	617b      	str	r3, [r7, #20]

    if( xForSend == pdTRUE )
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2b01      	cmp	r3, #1
 800e46a:	d110      	bne.n	800e48e <prvSetOptionTimeout+0x3a>
    {
        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_UDP )
 800e46c:	68fb      	ldr	r3, [r7, #12]
 800e46e:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e472:	2b11      	cmp	r3, #17
 800e474:	d107      	bne.n	800e486 <prvSetOptionTimeout+0x32>
        {
            /* The send time out is capped for the reason stated in the
             * comments where ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS is defined
             * in FreeRTOSIPConfig.h (assuming an official configuration file
             * is being used. */
            if( xBlockTime > ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS )
 800e476:	697b      	ldr	r3, [r7, #20]
 800e478:	f241 3288 	movw	r2, #5000	@ 0x1388
 800e47c:	4293      	cmp	r3, r2
 800e47e:	d902      	bls.n	800e486 <prvSetOptionTimeout+0x32>
            {
                xBlockTime = ipconfigUDP_MAX_SEND_BLOCK_TIME_TICKS;
 800e480:	f241 3388 	movw	r3, #5000	@ 0x1388
 800e484:	617b      	str	r3, [r7, #20]
            /* For TCP socket, it isn't necessary to limit the blocking time
             * because  the FreeRTOS_send() function does not wait for a network
             * buffer to become available. */
        }

        pxSocket->xSendBlockTime = xBlockTime;
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	697a      	ldr	r2, [r7, #20]
 800e48a:	625a      	str	r2, [r3, #36]	@ 0x24
    }
    else
    {
        pxSocket->xReceiveBlockTime = xBlockTime;
    }
}
 800e48c:	e002      	b.n	800e494 <prvSetOptionTimeout+0x40>
        pxSocket->xReceiveBlockTime = xBlockTime;
 800e48e:	68fb      	ldr	r3, [r7, #12]
 800e490:	697a      	ldr	r2, [r7, #20]
 800e492:	621a      	str	r2, [r3, #32]
}
 800e494:	bf00      	nop
 800e496:	371c      	adds	r7, #28
 800e498:	46bd      	mov	sp, r7
 800e49a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49e:	4770      	bx	lr

0800e4a0 <prvSetOptionReuseListenSocket>:
 * @param[in] pxSocket The TCP socket used for the connection.
 * @param[in] pvOptionValue The option name like FREERTOS_SO_xxx_HANDLER.
 */
    static BaseType_t prvSetOptionReuseListenSocket( FreeRTOS_Socket_t * pxSocket,
                                                     const void * pvOptionValue )
    {
 800e4a0:	b480      	push	{r7}
 800e4a2:	b085      	sub	sp, #20
 800e4a4:	af00      	add	r7, sp, #0
 800e4a6:	6078      	str	r0, [r7, #4]
 800e4a8:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e4aa:	f06f 0315 	mvn.w	r3, #21
 800e4ae:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e4b0:	687b      	ldr	r3, [r7, #4]
 800e4b2:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e4b6:	2b06      	cmp	r3, #6
 800e4b8:	d114      	bne.n	800e4e4 <prvSetOptionReuseListenSocket+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e4ba:	683b      	ldr	r3, [r7, #0]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	2b00      	cmp	r3, #0
 800e4c0:	d007      	beq.n	800e4d2 <prvSetOptionReuseListenSocket+0x32>
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE_UNSIGNED;
 800e4c2:	687a      	ldr	r2, [r7, #4]
 800e4c4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e4c8:	f043 0308 	orr.w	r3, r3, #8
 800e4cc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800e4d0:	e006      	b.n	800e4e0 <prvSetOptionReuseListenSocket+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bReuseSocket = pdFALSE_UNSIGNED;
 800e4d2:	687a      	ldr	r2, [r7, #4]
 800e4d4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e4d8:	f36f 03c3 	bfc	r3, #3, #1
 800e4dc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800e4e0:	2300      	movs	r3, #0
 800e4e2:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e4e4:	68fb      	ldr	r3, [r7, #12]
    }
 800e4e6:	4618      	mov	r0, r3
 800e4e8:	3714      	adds	r7, #20
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr

0800e4f2 <prvSetOptionCloseAfterSend>:
 * @param[in] pvOptionValue A pointer to a binary value of size
 *            BaseType_t.
 */
    static BaseType_t prvSetOptionCloseAfterSend( FreeRTOS_Socket_t * pxSocket,
                                                  const void * pvOptionValue )
    {
 800e4f2:	b480      	push	{r7}
 800e4f4:	b085      	sub	sp, #20
 800e4f6:	af00      	add	r7, sp, #0
 800e4f8:	6078      	str	r0, [r7, #4]
 800e4fa:	6039      	str	r1, [r7, #0]
        BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e4fc:	f06f 0315 	mvn.w	r3, #21
 800e500:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800e502:	687b      	ldr	r3, [r7, #4]
 800e504:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800e508:	2b06      	cmp	r3, #6
 800e50a:	d114      	bne.n	800e536 <prvSetOptionCloseAfterSend+0x44>
        {
            if( *( ( const BaseType_t * ) pvOptionValue ) != 0 )
 800e50c:	683b      	ldr	r3, [r7, #0]
 800e50e:	681b      	ldr	r3, [r3, #0]
 800e510:	2b00      	cmp	r3, #0
 800e512:	d007      	beq.n	800e524 <prvSetOptionCloseAfterSend+0x32>
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdTRUE_UNSIGNED;
 800e514:	687a      	ldr	r2, [r7, #4]
 800e516:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e51a:	f043 0310 	orr.w	r3, r3, #16
 800e51e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 800e522:	e006      	b.n	800e532 <prvSetOptionCloseAfterSend+0x40>
            }
            else
            {
                pxSocket->u.xTCP.bits.bCloseAfterSend = pdFALSE_UNSIGNED;
 800e524:	687a      	ldr	r2, [r7, #4]
 800e526:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800e52a:	f36f 1304 	bfc	r3, #4, #1
 800e52e:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            xReturn = 0;
 800e532:	2300      	movs	r3, #0
 800e534:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800e536:	68fb      	ldr	r3, [r7, #12]
    }
 800e538:	4618      	mov	r0, r3
 800e53a:	3714      	adds	r7, #20
 800e53c:	46bd      	mov	sp, r7
 800e53e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e542:	4770      	bx	lr

0800e544 <FreeRTOS_setsockopt>:
BaseType_t FreeRTOS_setsockopt( Socket_t xSocket,
                                int32_t lLevel,
                                int32_t lOptionName,
                                const void * pvOptionValue,
                                size_t uxOptionLength )
{
 800e544:	b580      	push	{r7, lr}
 800e546:	b086      	sub	sp, #24
 800e548:	af00      	add	r7, sp, #0
 800e54a:	60f8      	str	r0, [r7, #12]
 800e54c:	60b9      	str	r1, [r7, #8]
 800e54e:	607a      	str	r2, [r7, #4]
 800e550:	603b      	str	r3, [r7, #0]
/* The standard Berkeley function returns 0 for success. */
    BaseType_t xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e552:	f06f 0315 	mvn.w	r3, #21
 800e556:	617b      	str	r3, [r7, #20]
    FreeRTOS_Socket_t * pxSocket;

    pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800e558:	68fb      	ldr	r3, [r7, #12]
 800e55a:	613b      	str	r3, [r7, #16]
    /* The function prototype is designed to maintain the expected Berkeley
     * sockets standard, but this implementation does not use all the parameters. */
    ( void ) lLevel;
    ( void ) uxOptionLength;

    if( xSocketValid( pxSocket ) == pdTRUE )
 800e55c:	6938      	ldr	r0, [r7, #16]
 800e55e:	f001 fa59 	bl	800fa14 <xSocketValid>
 800e562:	4603      	mov	r3, r0
 800e564:	2b01      	cmp	r3, #1
 800e566:	f040 8093 	bne.w	800e690 <FreeRTOS_setsockopt+0x14c>
    {
        switch( lOptionName )
 800e56a:	687b      	ldr	r3, [r7, #4]
 800e56c:	2b12      	cmp	r3, #18
 800e56e:	f200 808b 	bhi.w	800e688 <FreeRTOS_setsockopt+0x144>
 800e572:	a201      	add	r2, pc, #4	@ (adr r2, 800e578 <FreeRTOS_setsockopt+0x34>)
 800e574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e578:	0800e5c5 	.word	0x0800e5c5
 800e57c:	0800e5d5 	.word	0x0800e5d5
 800e580:	0800e5e5 	.word	0x0800e5e5
 800e584:	0800e625 	.word	0x0800e625
 800e588:	0800e63f 	.word	0x0800e63f
 800e58c:	0800e63f 	.word	0x0800e63f
 800e590:	0800e617 	.word	0x0800e617
 800e594:	0800e617 	.word	0x0800e617
 800e598:	0800e617 	.word	0x0800e617
 800e59c:	0800e617 	.word	0x0800e617
 800e5a0:	0800e617 	.word	0x0800e617
 800e5a4:	0800e659 	.word	0x0800e659
 800e5a8:	0800e665 	.word	0x0800e665
 800e5ac:	0800e64d 	.word	0x0800e64d
 800e5b0:	0800e671 	.word	0x0800e671
 800e5b4:	0800e67d 	.word	0x0800e67d
 800e5b8:	0800e689 	.word	0x0800e689
 800e5bc:	0800e689 	.word	0x0800e689
 800e5c0:	0800e633 	.word	0x0800e633
        {
            case FREERTOS_SO_RCVTIMEO:
                /* Receive time out. */
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdFALSE );
 800e5c4:	2200      	movs	r2, #0
 800e5c6:	6839      	ldr	r1, [r7, #0]
 800e5c8:	6938      	ldr	r0, [r7, #16]
 800e5ca:	f7ff ff43 	bl	800e454 <prvSetOptionTimeout>
                xReturn = 0;
 800e5ce:	2300      	movs	r3, #0
 800e5d0:	617b      	str	r3, [r7, #20]
                break;
 800e5d2:	e060      	b.n	800e696 <FreeRTOS_setsockopt+0x152>

            case FREERTOS_SO_SNDTIMEO:
                prvSetOptionTimeout( pxSocket, pvOptionValue, pdTRUE );
 800e5d4:	2201      	movs	r2, #1
 800e5d6:	6839      	ldr	r1, [r7, #0]
 800e5d8:	6938      	ldr	r0, [r7, #16]
 800e5da:	f7ff ff3b 	bl	800e454 <prvSetOptionTimeout>
                xReturn = 0;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	617b      	str	r3, [r7, #20]
                break;
 800e5e2:	e058      	b.n	800e696 <FreeRTOS_setsockopt+0x152>
            case FREERTOS_SO_UDPCKSUM_OUT:

                /* Turn calculating of the UDP checksum on/off for this socket. If pvOptionValue
                 * is anything else than NULL, the checksum generation will be turned on. */

                if( pvOptionValue == NULL )
 800e5e4:	683b      	ldr	r3, [r7, #0]
 800e5e6:	2b00      	cmp	r3, #0
 800e5e8:	d109      	bne.n	800e5fe <FreeRTOS_setsockopt+0xba>
                {
                    pxSocket->ucSocketOptions &= ( ( uint8_t ) ~( ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT ) );
 800e5ea:	693b      	ldr	r3, [r7, #16]
 800e5ec:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e5f0:	f023 0302 	bic.w	r3, r3, #2
 800e5f4:	b2da      	uxtb	r2, r3
 800e5f6:	693b      	ldr	r3, [r7, #16]
 800e5f8:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 800e5fc:	e008      	b.n	800e610 <FreeRTOS_setsockopt+0xcc>
                }
                else
                {
                    pxSocket->ucSocketOptions |= ( uint8_t ) FREERTOS_SO_UDPCKSUM_OUT;
 800e5fe:	693b      	ldr	r3, [r7, #16]
 800e600:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 800e604:	f043 0302 	orr.w	r3, r3, #2
 800e608:	b2da      	uxtb	r2, r3
 800e60a:	693b      	ldr	r3, [r7, #16]
 800e60c:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
                }

                xReturn = 0;
 800e610:	2300      	movs	r3, #0
 800e612:	617b      	str	r3, [r7, #20]
                break;
 800e614:	e03f      	b.n	800e696 <FreeRTOS_setsockopt+0x152>
                        case FREERTOS_SO_TCP_RECV_HANDLER: /* Install a callback for receiving TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        case FREERTOS_SO_TCP_SENT_HANDLER: /* Install a callback for sending TCP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    #endif /* ipconfigUSE_TCP */
                    case FREERTOS_SO_UDP_RECV_HANDLER:     /* Install a callback for receiving UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                    case FREERTOS_SO_UDP_SENT_HANDLER:     /* Install a callback for sending UDP data. Supply pointer to 'F_TCP_UDP_Handler_t' (see below) */
                        xReturn = prvSetOptionCallback( pxSocket, lOptionName, pvOptionValue );
 800e616:	683a      	ldr	r2, [r7, #0]
 800e618:	6879      	ldr	r1, [r7, #4]
 800e61a:	6938      	ldr	r0, [r7, #16]
 800e61c:	f7ff fdba 	bl	800e194 <prvSetOptionCallback>
 800e620:	6178      	str	r0, [r7, #20]
                        break;
 800e622:	e038      	b.n	800e696 <FreeRTOS_setsockopt+0x152>
                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE != 0 )

                    /* Each socket has a semaphore on which the using task normally
                     * sleeps. */
                    case FREERTOS_SO_SET_SEMAPHORE:
                        pxSocket->pxUserSemaphore = *( ( SemaphoreHandle_t * ) pvOptionValue );
 800e624:	683b      	ldr	r3, [r7, #0]
 800e626:	681a      	ldr	r2, [r3, #0]
 800e628:	693b      	ldr	r3, [r7, #16]
 800e62a:	63da      	str	r2, [r3, #60]	@ 0x3c
                        xReturn = 0;
 800e62c:	2300      	movs	r3, #0
 800e62e:	617b      	str	r3, [r7, #20]
                        break;
 800e630:	e031      	b.n	800e696 <FreeRTOS_setsockopt+0x152>
                        break;
                #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

                #if ( ipconfigUSE_TCP != 0 )
                    case FREERTOS_SO_SET_LOW_HIGH_WATER:
                        xReturn = prvSetOptionLowHighWater( pxSocket, pvOptionValue );
 800e632:	6839      	ldr	r1, [r7, #0]
 800e634:	6938      	ldr	r0, [r7, #16]
 800e636:	f7ff fe65 	bl	800e304 <prvSetOptionLowHighWater>
 800e63a:	6178      	str	r0, [r7, #20]
                        break;
 800e63c:	e02b      	b.n	800e696 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SNDBUF: /* Set the size of the send buffer, in units of MSS (TCP only) */
                    case FREERTOS_SO_RCVBUF: /* Set the size of the receive buffer, in units of MSS (TCP only) */
                        xReturn = prvSockopt_so_buffer( pxSocket, lOptionName, pvOptionValue );
 800e63e:	683a      	ldr	r2, [r7, #0]
 800e640:	6879      	ldr	r1, [r7, #4]
 800e642:	6938      	ldr	r0, [r7, #16]
 800e644:	f7ff fd48 	bl	800e0d8 <prvSockopt_so_buffer>
 800e648:	6178      	str	r0, [r7, #20]
                        break;
 800e64a:	e024      	b.n	800e696 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_WIN_PROPERTIES: /* Set all buffer and window properties in one call, parameter is pointer to WinProperties_t */
                        xReturn = prvSetOptionTCPWindows( pxSocket, pvOptionValue );
 800e64c:	6839      	ldr	r1, [r7, #0]
 800e64e:	6938      	ldr	r0, [r7, #16]
 800e650:	f7ff fdfa 	bl	800e248 <prvSetOptionTCPWindows>
 800e654:	6178      	str	r0, [r7, #20]
                        break;
 800e656:	e01e      	b.n	800e696 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_REUSE_LISTEN_SOCKET: /* If true, the server-socket will turn into a connected socket */
                        xReturn = prvSetOptionReuseListenSocket( pxSocket, pvOptionValue );
 800e658:	6839      	ldr	r1, [r7, #0]
 800e65a:	6938      	ldr	r0, [r7, #16]
 800e65c:	f7ff ff20 	bl	800e4a0 <prvSetOptionReuseListenSocket>
 800e660:	6178      	str	r0, [r7, #20]
                        break;
 800e662:	e018      	b.n	800e696 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_CLOSE_AFTER_SEND: /* As soon as the last byte has been transmitted, finalise the connection */
                        xReturn = prvSetOptionCloseAfterSend( pxSocket, pvOptionValue );
 800e664:	6839      	ldr	r1, [r7, #0]
 800e666:	6938      	ldr	r0, [r7, #16]
 800e668:	f7ff ff43 	bl	800e4f2 <prvSetOptionCloseAfterSend>
 800e66c:	6178      	str	r0, [r7, #20]
                        break;
 800e66e:	e012      	b.n	800e696 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_SET_FULL_SIZE: /* Refuse to send packets smaller than MSS  */
                        xReturn = prvSetOptionSetFullSize( pxSocket, pvOptionValue );
 800e670:	6839      	ldr	r1, [r7, #0]
 800e672:	6938      	ldr	r0, [r7, #16]
 800e674:	f7ff fe80 	bl	800e378 <prvSetOptionSetFullSize>
 800e678:	6178      	str	r0, [r7, #20]
                        break;
 800e67a:	e00c      	b.n	800e696 <FreeRTOS_setsockopt+0x152>

                    case FREERTOS_SO_STOP_RX: /* Refuse to receive more packets. */
                        xReturn = prvSetOptionStopRX( pxSocket, pvOptionValue );
 800e67c:	6839      	ldr	r1, [r7, #0]
 800e67e:	6938      	ldr	r0, [r7, #16]
 800e680:	f7ff feb3 	bl	800e3ea <prvSetOptionStopRX>
 800e684:	6178      	str	r0, [r7, #20]
                        break;
 800e686:	e006      	b.n	800e696 <FreeRTOS_setsockopt+0x152>
                #endif /* ipconfigUSE_TCP == 1 */

            default:
                /* No other options are handled. */
                xReturn = -pdFREERTOS_ERRNO_ENOPROTOOPT;
 800e688:	f06f 036c 	mvn.w	r3, #108	@ 0x6c
 800e68c:	617b      	str	r3, [r7, #20]
                break;
 800e68e:	e002      	b.n	800e696 <FreeRTOS_setsockopt+0x152>
        }
    }
    else
    {
        xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800e690:	f06f 0315 	mvn.w	r3, #21
 800e694:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 800e696:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800e698:	4618      	mov	r0, r3
 800e69a:	3718      	adds	r7, #24
 800e69c:	46bd      	mov	sp, r7
 800e69e:	bd80      	pop	{r7, pc}

0800e6a0 <prvGetPrivatePortNumber>:
 *
 * @return If an available protocol port is found then that port number is returned.
 *         Or else, 0 is returned.
 */
static uint16_t prvGetPrivatePortNumber( BaseType_t xProtocol )
{
 800e6a0:	b580      	push	{r7, lr}
 800e6a2:	b086      	sub	sp, #24
 800e6a4:	af00      	add	r7, sp, #0
 800e6a6:	6078      	str	r0, [r7, #4]
    const uint16_t usEphemeralPortCount =
 800e6a8:	f44f 437c 	mov.w	r3, #64512	@ 0xfc00
 800e6ac:	81fb      	strh	r3, [r7, #14]
        socketAUTO_PORT_ALLOCATION_MAX_NUMBER - ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER - 1U );
    uint16_t usIterations = usEphemeralPortCount;
 800e6ae:	89fb      	ldrh	r3, [r7, #14]
 800e6b0:	82fb      	strh	r3, [r7, #22]
    uint32_t ulRandomSeed = 0;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	60bb      	str	r3, [r7, #8]
    uint16_t usResult = 0;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	82bb      	strh	r3, [r7, #20]
    const List_t * pxList;

    #if ipconfigUSE_TCP == 1
        if( xProtocol == ( BaseType_t ) FREERTOS_IPPROTO_TCP )
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	2b06      	cmp	r3, #6
 800e6be:	d102      	bne.n	800e6c6 <prvGetPrivatePortNumber+0x26>
        {
            pxList = &xBoundTCPSocketsList;
 800e6c0:	4b21      	ldr	r3, [pc, #132]	@ (800e748 <prvGetPrivatePortNumber+0xa8>)
 800e6c2:	613b      	str	r3, [r7, #16]
 800e6c4:	e001      	b.n	800e6ca <prvGetPrivatePortNumber+0x2a>
        }
        else
    #endif
    {
        pxList = &xBoundUDPSocketsList;
 800e6c6:	4b21      	ldr	r3, [pc, #132]	@ (800e74c <prvGetPrivatePortNumber+0xac>)
 800e6c8:	613b      	str	r3, [r7, #16]
    /* Find the next available port using the random seed as a starting
     * point. */
    do
    {
        /* Only proceed if the random number generator succeeded. */
        if( xApplicationGetRandomNumber( &( ulRandomSeed ) ) == pdFALSE )
 800e6ca:	f107 0308 	add.w	r3, r7, #8
 800e6ce:	4618      	mov	r0, r3
 800e6d0:	f7f2 ff98 	bl	8001604 <xApplicationGetRandomNumber>
 800e6d4:	4603      	mov	r3, r0
 800e6d6:	2b00      	cmp	r3, #0
 800e6d8:	d030      	beq.n	800e73c <prvGetPrivatePortNumber+0x9c>
            break;
        }

        /* Map the random to a candidate port. */
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
                                  ( ( ( uint16_t ) ulRandomSeed ) % usEphemeralPortCount ) );
 800e6da:	68bb      	ldr	r3, [r7, #8]
 800e6dc:	b29b      	uxth	r3, r3
        usResult = ( uint16_t ) ( socketAUTO_PORT_ALLOCATION_START_NUMBER +
 800e6de:	89fa      	ldrh	r2, [r7, #14]
 800e6e0:	fbb3 f1f2 	udiv	r1, r3, r2
 800e6e4:	fb01 f202 	mul.w	r2, r1, r2
 800e6e8:	1a9b      	subs	r3, r3, r2
 800e6ea:	b29b      	uxth	r3, r3
 800e6ec:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800e6f0:	82bb      	strh	r3, [r7, #20]

        /* Check if there's already an open socket with the same protocol
         * and port. */
        if( NULL == pxListFindListItemWithValue(
                pxList,
                ( TickType_t ) FreeRTOS_htons( usResult ) ) )
 800e6f2:	8abb      	ldrh	r3, [r7, #20]
 800e6f4:	021b      	lsls	r3, r3, #8
 800e6f6:	b21a      	sxth	r2, r3
 800e6f8:	8abb      	ldrh	r3, [r7, #20]
 800e6fa:	0a1b      	lsrs	r3, r3, #8
 800e6fc:	b29b      	uxth	r3, r3
 800e6fe:	b21b      	sxth	r3, r3
 800e700:	4313      	orrs	r3, r2
 800e702:	b21b      	sxth	r3, r3
 800e704:	b29b      	uxth	r3, r3
        if( NULL == pxListFindListItemWithValue(
 800e706:	4619      	mov	r1, r3
 800e708:	6938      	ldr	r0, [r7, #16]
 800e70a:	f000 f821 	bl	800e750 <pxListFindListItemWithValue>
 800e70e:	4603      	mov	r3, r0
 800e710:	2b00      	cmp	r3, #0
 800e712:	d10a      	bne.n	800e72a <prvGetPrivatePortNumber+0x8a>
        {
            usResult = FreeRTOS_htons( usResult );
 800e714:	8abb      	ldrh	r3, [r7, #20]
 800e716:	021b      	lsls	r3, r3, #8
 800e718:	b21a      	sxth	r2, r3
 800e71a:	8abb      	ldrh	r3, [r7, #20]
 800e71c:	0a1b      	lsrs	r3, r3, #8
 800e71e:	b29b      	uxth	r3, r3
 800e720:	b21b      	sxth	r3, r3
 800e722:	4313      	orrs	r3, r2
 800e724:	b21b      	sxth	r3, r3
 800e726:	82bb      	strh	r3, [r7, #20]
            break;
 800e728:	e009      	b.n	800e73e <prvGetPrivatePortNumber+0x9e>
        }
        else
        {
            usResult = 0;
 800e72a:	2300      	movs	r3, #0
 800e72c:	82bb      	strh	r3, [r7, #20]
        }

        usIterations--;
 800e72e:	8afb      	ldrh	r3, [r7, #22]
 800e730:	3b01      	subs	r3, #1
 800e732:	82fb      	strh	r3, [r7, #22]
    }
    while( usIterations > 0U );
 800e734:	8afb      	ldrh	r3, [r7, #22]
 800e736:	2b00      	cmp	r3, #0
 800e738:	d1c7      	bne.n	800e6ca <prvGetPrivatePortNumber+0x2a>
 800e73a:	e000      	b.n	800e73e <prvGetPrivatePortNumber+0x9e>
            break;
 800e73c:	bf00      	nop

    return usResult;
 800e73e:	8abb      	ldrh	r3, [r7, #20]
}
 800e740:	4618      	mov	r0, r3
 800e742:	3718      	adds	r7, #24
 800e744:	46bd      	mov	sp, r7
 800e746:	bd80      	pop	{r7, pc}
 800e748:	20001304 	.word	0x20001304
 800e74c:	200012f0 	.word	0x200012f0

0800e750 <pxListFindListItemWithValue>:
 * @return The list item holding the value being searched for. If nothing is found,
 *         then a NULL is returned.
 */
static const ListItem_t * pxListFindListItemWithValue( const List_t * pxList,
                                                       TickType_t xWantedItemValue )
{
 800e750:	b580      	push	{r7, lr}
 800e752:	b086      	sub	sp, #24
 800e754:	af00      	add	r7, sp, #0
 800e756:	6078      	str	r0, [r7, #4]
 800e758:	6039      	str	r1, [r7, #0]
    const ListItem_t * pxResult = NULL;
 800e75a:	2300      	movs	r3, #0
 800e75c:	617b      	str	r3, [r7, #20]

    if( ( xIPIsNetworkTaskReady() != pdFALSE ) && ( pxList != NULL ) )
 800e75e:	f7fa fe0b 	bl	8009378 <xIPIsNetworkTaskReady>
 800e762:	4603      	mov	r3, r0
 800e764:	2b00      	cmp	r3, #0
 800e766:	d018      	beq.n	800e79a <pxListFindListItemWithValue+0x4a>
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	d015      	beq.n	800e79a <pxListFindListItemWithValue+0x4a>
        const ListItem_t * pxIterator;

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxList->xListEnd ) );
 800e76e:	687b      	ldr	r3, [r7, #4]
 800e770:	3308      	adds	r3, #8
 800e772:	60fb      	str	r3, [r7, #12]

        for( pxIterator = listGET_NEXT( pxEnd );
 800e774:	68fb      	ldr	r3, [r7, #12]
 800e776:	685b      	ldr	r3, [r3, #4]
 800e778:	613b      	str	r3, [r7, #16]
 800e77a:	e00a      	b.n	800e792 <pxListFindListItemWithValue+0x42>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == xWantedItemValue )
 800e77c:	693b      	ldr	r3, [r7, #16]
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	683a      	ldr	r2, [r7, #0]
 800e782:	429a      	cmp	r2, r3
 800e784:	d102      	bne.n	800e78c <pxListFindListItemWithValue+0x3c>
            {
                pxResult = pxIterator;
 800e786:	693b      	ldr	r3, [r7, #16]
 800e788:	617b      	str	r3, [r7, #20]
                break;
 800e78a:	e006      	b.n	800e79a <pxListFindListItemWithValue+0x4a>
             pxIterator = listGET_NEXT( pxIterator ) )
 800e78c:	693b      	ldr	r3, [r7, #16]
 800e78e:	685b      	ldr	r3, [r3, #4]
 800e790:	613b      	str	r3, [r7, #16]
             pxIterator != pxEnd;
 800e792:	693a      	ldr	r2, [r7, #16]
 800e794:	68fb      	ldr	r3, [r7, #12]
 800e796:	429a      	cmp	r2, r3
 800e798:	d1f0      	bne.n	800e77c <pxListFindListItemWithValue+0x2c>
            }
        }
    }

    return pxResult;
 800e79a:	697b      	ldr	r3, [r7, #20]
} /* Tested */
 800e79c:	4618      	mov	r0, r3
 800e79e:	3718      	adds	r7, #24
 800e7a0:	46bd      	mov	sp, r7
 800e7a2:	bd80      	pop	{r7, pc}

0800e7a4 <pxUDPSocketLookup>:
 *                         is to be found.
 *
 * @return The socket owning the port if found or else NULL.
 */
FreeRTOS_Socket_t * pxUDPSocketLookup( UBaseType_t uxLocalPort )
{
 800e7a4:	b580      	push	{r7, lr}
 800e7a6:	b084      	sub	sp, #16
 800e7a8:	af00      	add	r7, sp, #0
 800e7aa:	6078      	str	r0, [r7, #4]
    const ListItem_t * pxListItem;
    FreeRTOS_Socket_t * pxSocket = NULL;
 800e7ac:	2300      	movs	r3, #0
 800e7ae:	60fb      	str	r3, [r7, #12]

    /* Looking up a socket is quite simple, find a match with the local port.
     *
     * See if there is a list item associated with the port number on the
     * list of bound sockets. */
    pxListItem = pxListFindListItemWithValue( &xBoundUDPSocketsList, ( TickType_t ) uxLocalPort );
 800e7b0:	6879      	ldr	r1, [r7, #4]
 800e7b2:	480b      	ldr	r0, [pc, #44]	@ (800e7e0 <pxUDPSocketLookup+0x3c>)
 800e7b4:	f7ff ffcc 	bl	800e750 <pxListFindListItemWithValue>
 800e7b8:	60b8      	str	r0, [r7, #8]

    if( pxListItem != NULL )
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	d00a      	beq.n	800e7d6 <pxUDPSocketLookup+0x32>
    {
        /* The owner of the list item is the socket itself. */
        pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxListItem ) );
 800e7c0:	68bb      	ldr	r3, [r7, #8]
 800e7c2:	68db      	ldr	r3, [r3, #12]
 800e7c4:	60fb      	str	r3, [r7, #12]
        configASSERT( pxSocket != NULL );
 800e7c6:	68fb      	ldr	r3, [r7, #12]
 800e7c8:	2b00      	cmp	r3, #0
 800e7ca:	d104      	bne.n	800e7d6 <pxUDPSocketLookup+0x32>
 800e7cc:	f640 4111 	movw	r1, #3089	@ 0xc11
 800e7d0:	4804      	ldr	r0, [pc, #16]	@ (800e7e4 <pxUDPSocketLookup+0x40>)
 800e7d2:	f7f2 fe4d 	bl	8001470 <vAssertCalled>
    }

    return pxSocket;
 800e7d6:	68fb      	ldr	r3, [r7, #12]
}
 800e7d8:	4618      	mov	r0, r3
 800e7da:	3710      	adds	r7, #16
 800e7dc:	46bd      	mov	sp, r7
 800e7de:	bd80      	pop	{r7, pc}
 800e7e0:	200012f0 	.word	0x200012f0
 800e7e4:	0802465c 	.word	0x0802465c

0800e7e8 <FreeRTOS_inet_ntoa>:
 * @return The pointer returned will be same as pcBuffer and will have the address
 *         stored in the location.
 */
const char * FreeRTOS_inet_ntoa( uint32_t ulIPAddress,
                                 char * pcBuffer )
{
 800e7e8:	b480      	push	{r7}
 800e7ea:	b08b      	sub	sp, #44	@ 0x2c
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
    socklen_t uxNibble;
    socklen_t uxIndex = 0;
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	623b      	str	r3, [r7, #32]
    const uint8_t * pucAddress = ( const uint8_t * ) &( ulIPAddress );
 800e7f6:	1d3b      	adds	r3, r7, #4
 800e7f8:	617b      	str	r3, [r7, #20]
    const char * pcResult = pcBuffer;
 800e7fa:	683b      	ldr	r3, [r7, #0]
 800e7fc:	613b      	str	r3, [r7, #16]

    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800e7fe:	2300      	movs	r3, #0
 800e800:	627b      	str	r3, [r7, #36]	@ 0x24
 800e802:	e062      	b.n	800e8ca <FreeRTOS_inet_ntoa+0xe2>
    {
        uint8_t pucDigits[ sockDIGIT_COUNT ];
        uint8_t ucValue = pucAddress[ uxNibble ];
 800e804:	697a      	ldr	r2, [r7, #20]
 800e806:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e808:	4413      	add	r3, r2
 800e80a:	781b      	ldrb	r3, [r3, #0]
 800e80c:	77fb      	strb	r3, [r7, #31]
        socklen_t uxSource = ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U;
 800e80e:	2302      	movs	r3, #2
 800e810:	61bb      	str	r3, [r7, #24]

        for( ; ; )
        {
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800e812:	7ffa      	ldrb	r2, [r7, #31]
 800e814:	4b32      	ldr	r3, [pc, #200]	@ (800e8e0 <FreeRTOS_inet_ntoa+0xf8>)
 800e816:	fba3 1302 	umull	r1, r3, r3, r2
 800e81a:	08d9      	lsrs	r1, r3, #3
 800e81c:	460b      	mov	r3, r1
 800e81e:	009b      	lsls	r3, r3, #2
 800e820:	440b      	add	r3, r1
 800e822:	005b      	lsls	r3, r3, #1
 800e824:	1ad3      	subs	r3, r2, r3
 800e826:	b2d9      	uxtb	r1, r3
 800e828:	f107 020c 	add.w	r2, r7, #12
 800e82c:	69bb      	ldr	r3, [r7, #24]
 800e82e:	4413      	add	r3, r2
 800e830:	460a      	mov	r2, r1
 800e832:	701a      	strb	r2, [r3, #0]
            ucValue /= ( uint8_t ) 10U;
 800e834:	7ffb      	ldrb	r3, [r7, #31]
 800e836:	4a2a      	ldr	r2, [pc, #168]	@ (800e8e0 <FreeRTOS_inet_ntoa+0xf8>)
 800e838:	fba2 2303 	umull	r2, r3, r2, r3
 800e83c:	08db      	lsrs	r3, r3, #3
 800e83e:	77fb      	strb	r3, [r7, #31]

            if( uxSource == 1U )
 800e840:	69bb      	ldr	r3, [r7, #24]
 800e842:	2b01      	cmp	r3, #1
 800e844:	d003      	beq.n	800e84e <FreeRTOS_inet_ntoa+0x66>
            {
                break;
            }

            uxSource--;
 800e846:	69bb      	ldr	r3, [r7, #24]
 800e848:	3b01      	subs	r3, #1
 800e84a:	61bb      	str	r3, [r7, #24]
            pucDigits[ uxSource ] = ucValue % ( uint8_t ) 10U;
 800e84c:	e7e1      	b.n	800e812 <FreeRTOS_inet_ntoa+0x2a>
                break;
 800e84e:	bf00      	nop
        }

        pucDigits[ 0 ] = ucValue;
 800e850:	7ffb      	ldrb	r3, [r7, #31]
 800e852:	733b      	strb	r3, [r7, #12]

        /* Skip leading zeros. */
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800e854:	2300      	movs	r3, #0
 800e856:	61bb      	str	r3, [r7, #24]
 800e858:	e009      	b.n	800e86e <FreeRTOS_inet_ntoa+0x86>
        {
            if( pucDigits[ uxSource ] != 0U )
 800e85a:	f107 020c 	add.w	r2, r7, #12
 800e85e:	69bb      	ldr	r3, [r7, #24]
 800e860:	4413      	add	r3, r2
 800e862:	781b      	ldrb	r3, [r3, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d106      	bne.n	800e876 <FreeRTOS_inet_ntoa+0x8e>
        for( uxSource = 0; uxSource < ( ( socklen_t ) sockDIGIT_COUNT - ( socklen_t ) 1U ); uxSource++ )
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	3301      	adds	r3, #1
 800e86c:	61bb      	str	r3, [r7, #24]
 800e86e:	69bb      	ldr	r3, [r7, #24]
 800e870:	2b01      	cmp	r3, #1
 800e872:	d9f2      	bls.n	800e85a <FreeRTOS_inet_ntoa+0x72>
 800e874:	e012      	b.n	800e89c <FreeRTOS_inet_ntoa+0xb4>
            {
                break;
 800e876:	bf00      	nop
            }
        }

        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800e878:	e010      	b.n	800e89c <FreeRTOS_inet_ntoa+0xb4>
        {
            pcBuffer[ uxIndex ] = ( char ) ( pucDigits[ uxSource ] + ( char ) '0' );
 800e87a:	f107 020c 	add.w	r2, r7, #12
 800e87e:	69bb      	ldr	r3, [r7, #24]
 800e880:	4413      	add	r3, r2
 800e882:	781a      	ldrb	r2, [r3, #0]
 800e884:	6839      	ldr	r1, [r7, #0]
 800e886:	6a3b      	ldr	r3, [r7, #32]
 800e888:	440b      	add	r3, r1
 800e88a:	3230      	adds	r2, #48	@ 0x30
 800e88c:	b2d2      	uxtb	r2, r2
 800e88e:	701a      	strb	r2, [r3, #0]
            uxIndex++;
 800e890:	6a3b      	ldr	r3, [r7, #32]
 800e892:	3301      	adds	r3, #1
 800e894:	623b      	str	r3, [r7, #32]
        for( ; uxSource < ( socklen_t ) sockDIGIT_COUNT; uxSource++ )
 800e896:	69bb      	ldr	r3, [r7, #24]
 800e898:	3301      	adds	r3, #1
 800e89a:	61bb      	str	r3, [r7, #24]
 800e89c:	69bb      	ldr	r3, [r7, #24]
 800e89e:	2b02      	cmp	r3, #2
 800e8a0:	d9eb      	bls.n	800e87a <FreeRTOS_inet_ntoa+0x92>
        }

        if( uxNibble < ( ipSIZE_OF_IPv4_ADDRESS - 1U ) )
 800e8a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8a4:	2b02      	cmp	r3, #2
 800e8a6:	d805      	bhi.n	800e8b4 <FreeRTOS_inet_ntoa+0xcc>
        {
            pcBuffer[ uxIndex ] = '.';
 800e8a8:	683a      	ldr	r2, [r7, #0]
 800e8aa:	6a3b      	ldr	r3, [r7, #32]
 800e8ac:	4413      	add	r3, r2
 800e8ae:	222e      	movs	r2, #46	@ 0x2e
 800e8b0:	701a      	strb	r2, [r3, #0]
 800e8b2:	e004      	b.n	800e8be <FreeRTOS_inet_ntoa+0xd6>
        }
        else
        {
            pcBuffer[ uxIndex ] = '\0';
 800e8b4:	683a      	ldr	r2, [r7, #0]
 800e8b6:	6a3b      	ldr	r3, [r7, #32]
 800e8b8:	4413      	add	r3, r2
 800e8ba:	2200      	movs	r2, #0
 800e8bc:	701a      	strb	r2, [r3, #0]
        }

        uxIndex++;
 800e8be:	6a3b      	ldr	r3, [r7, #32]
 800e8c0:	3301      	adds	r3, #1
 800e8c2:	623b      	str	r3, [r7, #32]
    for( uxNibble = 0; uxNibble < ipSIZE_OF_IPv4_ADDRESS; uxNibble++ )
 800e8c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8c6:	3301      	adds	r3, #1
 800e8c8:	627b      	str	r3, [r7, #36]	@ 0x24
 800e8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800e8cc:	2b03      	cmp	r3, #3
 800e8ce:	d999      	bls.n	800e804 <FreeRTOS_inet_ntoa+0x1c>
    }

    return pcResult;
 800e8d0:	693b      	ldr	r3, [r7, #16]
}
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	372c      	adds	r7, #44	@ 0x2c
 800e8d6:	46bd      	mov	sp, r7
 800e8d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e8dc:	4770      	bx	lr
 800e8de:	bf00      	nop
 800e8e0:	cccccccd 	.word	0xcccccccd

0800e8e4 <FreeRTOS_inet_ntop>:
 */
const char * FreeRTOS_inet_ntop( BaseType_t xAddressFamily,
                                 const void * pvSource,
                                 char * pcDestination,
                                 socklen_t uxSize )
{
 800e8e4:	b580      	push	{r7, lr}
 800e8e6:	b086      	sub	sp, #24
 800e8e8:	af00      	add	r7, sp, #0
 800e8ea:	60f8      	str	r0, [r7, #12]
 800e8ec:	60b9      	str	r1, [r7, #8]
 800e8ee:	607a      	str	r2, [r7, #4]
 800e8f0:	603b      	str	r3, [r7, #0]
    const char * pcResult;

    /* Printable struct sockaddr to string. */
    switch( xAddressFamily )
 800e8f2:	68fb      	ldr	r3, [r7, #12]
 800e8f4:	2b02      	cmp	r3, #2
 800e8f6:	d003      	beq.n	800e900 <FreeRTOS_inet_ntop+0x1c>
 800e8f8:	68fb      	ldr	r3, [r7, #12]
 800e8fa:	2b0a      	cmp	r3, #10
 800e8fc:	d007      	beq.n	800e90e <FreeRTOS_inet_ntop+0x2a>
 800e8fe:	e00d      	b.n	800e91c <FreeRTOS_inet_ntop+0x38>
    {
        #if ( ipconfigUSE_IPv4 != 0 )
            case FREERTOS_AF_INET4:
                pcResult = FreeRTOS_inet_ntop4( pvSource, pcDestination, uxSize );
 800e900:	683a      	ldr	r2, [r7, #0]
 800e902:	6879      	ldr	r1, [r7, #4]
 800e904:	68b8      	ldr	r0, [r7, #8]
 800e906:	f7fb fc8d 	bl	800a224 <FreeRTOS_inet_ntop4>
 800e90a:	6178      	str	r0, [r7, #20]
                break;
 800e90c:	e009      	b.n	800e922 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */

        #if ( ipconfigUSE_IPv6 != 0 )
            case FREERTOS_AF_INET6:
                pcResult = FreeRTOS_inet_ntop6( pvSource, pcDestination, uxSize );
 800e90e:	683a      	ldr	r2, [r7, #0]
 800e910:	6879      	ldr	r1, [r7, #4]
 800e912:	68b8      	ldr	r0, [r7, #8]
 800e914:	f7fc f9c1 	bl	800ac9a <FreeRTOS_inet_ntop6>
 800e918:	6178      	str	r0, [r7, #20]
                break;
 800e91a:	e002      	b.n	800e922 <FreeRTOS_inet_ntop+0x3e>
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* errno should be set to pdFREERTOS_ERRNO_EAFNOSUPPORT. */
            pcResult = NULL;
 800e91c:	2300      	movs	r3, #0
 800e91e:	617b      	str	r3, [r7, #20]
            break;
 800e920:	bf00      	nop
    }

    return pcResult;
 800e922:	697b      	ldr	r3, [r7, #20]
}
 800e924:	4618      	mov	r0, r3
 800e926:	3718      	adds	r7, #24
 800e928:	46bd      	mov	sp, r7
 800e92a:	bd80      	pop	{r7, pc}

0800e92c <FreeRTOS_GetLocalAddress>:
 *
 * @return Size of the freertos_sockaddr structure.
 */
size_t FreeRTOS_GetLocalAddress( ConstSocket_t xSocket,
                                 struct freertos_sockaddr * pxAddress )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b084      	sub	sp, #16
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
    const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	60fb      	str	r3, [r7, #12]

    switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800e93a:	68fb      	ldr	r3, [r7, #12]
 800e93c:	7a1b      	ldrb	r3, [r3, #8]
 800e93e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800e942:	b2db      	uxtb	r3, r3
 800e944:	2b00      	cmp	r3, #0
 800e946:	d002      	beq.n	800e94e <FreeRTOS_GetLocalAddress+0x22>
 800e948:	2b01      	cmp	r3, #1
 800e94a:	d02a      	beq.n	800e9a2 <FreeRTOS_GetLocalAddress+0x76>
                break;
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        default:
            /* MISRA 16.4 Compliance */
            break;
 800e94c:	e044      	b.n	800e9d8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET;
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	2202      	movs	r2, #2
 800e952:	705a      	strb	r2, [r3, #1]
                pxAddress->sin_len = ( uint8_t ) sizeof( *pxAddress );
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	2218      	movs	r2, #24
 800e958:	701a      	strb	r2, [r3, #0]
                pxAddress->sin_address.ulIP_IPv4 = FreeRTOS_htonl( pxSocket->xLocalAddress.ulIP_IPv4 );
 800e95a:	68fb      	ldr	r3, [r7, #12]
 800e95c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e95e:	061a      	lsls	r2, r3, #24
 800e960:	68fb      	ldr	r3, [r7, #12]
 800e962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e964:	021b      	lsls	r3, r3, #8
 800e966:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800e96a:	431a      	orrs	r2, r3
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e970:	0a1b      	lsrs	r3, r3, #8
 800e972:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800e976:	431a      	orrs	r2, r3
 800e978:	68fb      	ldr	r3, [r7, #12]
 800e97a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e97c:	0e1b      	lsrs	r3, r3, #24
 800e97e:	431a      	orrs	r2, r3
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	609a      	str	r2, [r3, #8]
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800e984:	68fb      	ldr	r3, [r7, #12]
 800e986:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e988:	021b      	lsls	r3, r3, #8
 800e98a:	b21a      	sxth	r2, r3
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e990:	0a1b      	lsrs	r3, r3, #8
 800e992:	b29b      	uxth	r3, r3
 800e994:	b21b      	sxth	r3, r3
 800e996:	4313      	orrs	r3, r2
 800e998:	b21b      	sxth	r3, r3
 800e99a:	b29a      	uxth	r2, r3
 800e99c:	683b      	ldr	r3, [r7, #0]
 800e99e:	805a      	strh	r2, [r3, #2]
                break;
 800e9a0:	e01a      	b.n	800e9d8 <FreeRTOS_GetLocalAddress+0xac>
                pxAddress->sin_family = FREERTOS_AF_INET6;
 800e9a2:	683b      	ldr	r3, [r7, #0]
 800e9a4:	220a      	movs	r2, #10
 800e9a6:	705a      	strb	r2, [r3, #1]
                ( void ) memcpy( pxAddress->sin_address.xIP_IPv6.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxAddress->sin_address.xIP_IPv6.ucBytes ) );
 800e9a8:	683b      	ldr	r3, [r7, #0]
 800e9aa:	f103 0008 	add.w	r0, r3, #8
 800e9ae:	68fb      	ldr	r3, [r7, #12]
 800e9b0:	3328      	adds	r3, #40	@ 0x28
 800e9b2:	2210      	movs	r2, #16
 800e9b4:	4619      	mov	r1, r3
 800e9b6:	f012 fb7f 	bl	80210b8 <memcpy>
                pxAddress->sin_port = FreeRTOS_htons( pxSocket->usLocalPort );
 800e9ba:	68fb      	ldr	r3, [r7, #12]
 800e9bc:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e9be:	021b      	lsls	r3, r3, #8
 800e9c0:	b21a      	sxth	r2, r3
 800e9c2:	68fb      	ldr	r3, [r7, #12]
 800e9c4:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800e9c6:	0a1b      	lsrs	r3, r3, #8
 800e9c8:	b29b      	uxth	r3, r3
 800e9ca:	b21b      	sxth	r3, r3
 800e9cc:	4313      	orrs	r3, r2
 800e9ce:	b21b      	sxth	r3, r3
 800e9d0:	b29a      	uxth	r2, r3
 800e9d2:	683b      	ldr	r3, [r7, #0]
 800e9d4:	805a      	strh	r2, [r3, #2]
                break;
 800e9d6:	bf00      	nop
    }

    return sizeof( *pxAddress );
 800e9d8:	2318      	movs	r3, #24
}
 800e9da:	4618      	mov	r0, r3
 800e9dc:	3710      	adds	r7, #16
 800e9de:	46bd      	mov	sp, r7
 800e9e0:	bd80      	pop	{r7, pc}

0800e9e2 <vSocketWakeUpUser>:
 * @brief Wake up the user of the given socket through event-groups.
 *
 * @param[in] pxSocket The socket whose user is to be woken up.
 */
void vSocketWakeUpUser( FreeRTOS_Socket_t * pxSocket )
{
 800e9e2:	b580      	push	{r7, lr}
 800e9e4:	b084      	sub	sp, #16
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	6078      	str	r0, [r7, #4]
/* _HT_ must work this out, now vSocketWakeUpUser will be called for any important
 * event or transition */
    #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
    {
        if( pxSocket->pxUserSemaphore != NULL )
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e9ee:	2b00      	cmp	r3, #0
 800e9f0:	d006      	beq.n	800ea00 <vSocketWakeUpUser+0x1e>
        {
            ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800e9f6:	2300      	movs	r3, #0
 800e9f8:	2200      	movs	r2, #0
 800e9fa:	2100      	movs	r1, #0
 800e9fc:	f7f4 f95a 	bl	8002cb4 <xQueueGenericSend>
    }
    #endif /* ipconfigSOCKET_HAS_USER_WAKE_CALLBACK */

    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
    {
        if( pxSocket->pxSocketSet != NULL )
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d015      	beq.n	800ea34 <vSocketWakeUpUser+0x52>
        {
            EventBits_t xSelectBits = ( pxSocket->xEventBits >> SOCKET_EVENT_BIT_COUNT ) & ( ( EventBits_t ) eSELECT_ALL );
 800ea08:	687b      	ldr	r3, [r7, #4]
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	0a1b      	lsrs	r3, r3, #8
 800ea0e:	f003 030f 	and.w	r3, r3, #15
 800ea12:	60fb      	str	r3, [r7, #12]

            if( xSelectBits != 0U )
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	2b00      	cmp	r3, #0
 800ea18:	d00c      	beq.n	800ea34 <vSocketWakeUpUser+0x52>
            {
                pxSocket->xSocketBits |= xSelectBits;
 800ea1a:	687b      	ldr	r3, [r7, #4]
 800ea1c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	431a      	orrs	r2, r3
 800ea22:	687b      	ldr	r3, [r7, #4]
 800ea24:	649a      	str	r2, [r3, #72]	@ 0x48
                ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, xSelectBits );
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	68f9      	ldr	r1, [r7, #12]
 800ea2e:	4618      	mov	r0, r3
 800ea30:	f7f3 fe64 	bl	80026fc <xEventGroupSetBits>
            }
        }

        pxSocket->xEventBits &= ( EventBits_t ) eSOCKET_ALL;
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800ea3c:	687b      	ldr	r3, [r7, #4]
 800ea3e:	601a      	str	r2, [r3, #0]
    }
    #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

    if( ( pxSocket->xEventGroup != NULL ) && ( pxSocket->xEventBits != 0U ) )
 800ea40:	687b      	ldr	r3, [r7, #4]
 800ea42:	685b      	ldr	r3, [r3, #4]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d00b      	beq.n	800ea60 <vSocketWakeUpUser+0x7e>
 800ea48:	687b      	ldr	r3, [r7, #4]
 800ea4a:	681b      	ldr	r3, [r3, #0]
 800ea4c:	2b00      	cmp	r3, #0
 800ea4e:	d007      	beq.n	800ea60 <vSocketWakeUpUser+0x7e>
    {
        ( void ) xEventGroupSetBits( pxSocket->xEventGroup, pxSocket->xEventBits );
 800ea50:	687b      	ldr	r3, [r7, #4]
 800ea52:	685a      	ldr	r2, [r3, #4]
 800ea54:	687b      	ldr	r3, [r7, #4]
 800ea56:	681b      	ldr	r3, [r3, #0]
 800ea58:	4619      	mov	r1, r3
 800ea5a:	4610      	mov	r0, r2
 800ea5c:	f7f3 fe4e 	bl	80026fc <xEventGroupSetBits>
    }

    pxSocket->xEventBits = 0U;
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	2200      	movs	r2, #0
 800ea64:	601a      	str	r2, [r3, #0]
}
 800ea66:	bf00      	nop
 800ea68:	3710      	adds	r7, #16
 800ea6a:	46bd      	mov	sp, r7
 800ea6c:	bd80      	pop	{r7, pc}

0800ea6e <bMayConnect>:
 * @param[in] pxSocket The socket trying to connect.
 *
 * @return It may return: -EINPROGRESS, -EAGAIN, or 0 for OK.
 */
    static BaseType_t bMayConnect( FreeRTOS_Socket_t const * pxSocket )
    {
 800ea6e:	b480      	push	{r7}
 800ea70:	b085      	sub	sp, #20
 800ea72:	af00      	add	r7, sp, #0
 800ea74:	6078      	str	r0, [r7, #4]
        BaseType_t xResult;

        eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ea7c:	72fb      	strb	r3, [r7, #11]

        switch( eState )
 800ea7e:	7afb      	ldrb	r3, [r7, #11]
 800ea80:	2b08      	cmp	r3, #8
 800ea82:	d006      	beq.n	800ea92 <bMayConnect+0x24>
 800ea84:	2b08      	cmp	r3, #8
 800ea86:	dc0b      	bgt.n	800eaa0 <bMayConnect+0x32>
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d002      	beq.n	800ea92 <bMayConnect+0x24>
 800ea8c:	2b02      	cmp	r3, #2
 800ea8e:	d003      	beq.n	800ea98 <bMayConnect+0x2a>
 800ea90:	e006      	b.n	800eaa0 <bMayConnect+0x32>
        {
            case eCLOSED:
            case eCLOSE_WAIT:
                xResult = 0;
 800ea92:	2300      	movs	r3, #0
 800ea94:	60fb      	str	r3, [r7, #12]
                break;
 800ea96:	e007      	b.n	800eaa8 <bMayConnect+0x3a>

            case eCONNECT_SYN:
                xResult = -pdFREERTOS_ERRNO_EINPROGRESS;
 800ea98:	f06f 0376 	mvn.w	r3, #118	@ 0x76
 800ea9c:	60fb      	str	r3, [r7, #12]
                break;
 800ea9e:	e003      	b.n	800eaa8 <bMayConnect+0x3a>
            case eFIN_WAIT_2:
            case eCLOSING:
            case eLAST_ACK:
            case eTIME_WAIT:
            default:
                xResult = -pdFREERTOS_ERRNO_EAGAIN;
 800eaa0:	f06f 030a 	mvn.w	r3, #10
 800eaa4:	60fb      	str	r3, [r7, #12]
                break;
 800eaa6:	bf00      	nop
        }

        return xResult;
 800eaa8:	68fb      	ldr	r3, [r7, #12]
    }
 800eaaa:	4618      	mov	r0, r3
 800eaac:	3714      	adds	r7, #20
 800eaae:	46bd      	mov	sp, r7
 800eab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab4:	4770      	bx	lr
	...

0800eab8 <prvTCPConnectStart>:
 *
 * @return 0 on successful checks or a negative error code.
 */
    static BaseType_t prvTCPConnectStart( FreeRTOS_Socket_t * pxSocket,
                                          struct freertos_sockaddr const * pxAddress )
    {
 800eab8:	b580      	push	{r7, lr}
 800eaba:	b084      	sub	sp, #16
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = 0;
 800eac2:	2300      	movs	r3, #0
 800eac4:	60fb      	str	r3, [r7, #12]

        if( pxAddress == NULL )
 800eac6:	683b      	ldr	r3, [r7, #0]
 800eac8:	2b00      	cmp	r3, #0
 800eaca:	d103      	bne.n	800ead4 <prvTCPConnectStart+0x1c>
        {
            /* NULL address passed to the function. Invalid value. */
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800eacc:	f06f 0315 	mvn.w	r3, #21
 800ead0:	60fb      	str	r3, [r7, #12]
 800ead2:	e01f      	b.n	800eb14 <prvTCPConnectStart+0x5c>
        }
        else if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdFALSE )
 800ead4:	2200      	movs	r2, #0
 800ead6:	2106      	movs	r1, #6
 800ead8:	6878      	ldr	r0, [r7, #4]
 800eada:	f7fe fc71 	bl	800d3c0 <prvValidSocket>
 800eade:	4603      	mov	r3, r0
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d103      	bne.n	800eaec <prvTCPConnectStart+0x34>
        {
            /* Not a valid socket or wrong type */
            xResult = -pdFREERTOS_ERRNO_EBADF;
 800eae4:	f06f 0308 	mvn.w	r3, #8
 800eae8:	60fb      	str	r3, [r7, #12]
 800eaea:	e013      	b.n	800eb14 <prvTCPConnectStart+0x5c>
        }
        else if( FreeRTOS_issocketconnected( pxSocket ) > 0 )
 800eaec:	6878      	ldr	r0, [r7, #4]
 800eaee:	f000 ff49 	bl	800f984 <FreeRTOS_issocketconnected>
 800eaf2:	4603      	mov	r3, r0
 800eaf4:	2b00      	cmp	r3, #0
 800eaf6:	dd03      	ble.n	800eb00 <prvTCPConnectStart+0x48>
        {
            /* The socket is already connected. */
            xResult = -pdFREERTOS_ERRNO_EISCONN;
 800eaf8:	f06f 037e 	mvn.w	r3, #126	@ 0x7e
 800eafc:	60fb      	str	r3, [r7, #12]
 800eafe:	e009      	b.n	800eb14 <prvTCPConnectStart+0x5c>
        }
        else if( !socketSOCKET_IS_BOUND( pxSocket ) )
 800eb00:	687b      	ldr	r3, [r7, #4]
 800eb02:	69db      	ldr	r3, [r3, #28]
 800eb04:	2b00      	cmp	r3, #0
 800eb06:	d105      	bne.n	800eb14 <prvTCPConnectStart+0x5c>
        {
            /* Bind the socket to the port that the client task will send from.
             * Non-standard, so the error returned is that returned by bind(). */
            xResult = FreeRTOS_bind( pxSocket, NULL, 0U );
 800eb08:	2200      	movs	r2, #0
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	6878      	ldr	r0, [r7, #4]
 800eb0e:	f7fe ff4f 	bl	800d9b0 <FreeRTOS_bind>
 800eb12:	60f8      	str	r0, [r7, #12]
        else
        {
            /* The socket is valid, not yet connected, and already bound to a port number. */
        }

        if( xResult == 0 )
 800eb14:	68fb      	ldr	r3, [r7, #12]
 800eb16:	2b00      	cmp	r3, #0
 800eb18:	f040 80a6 	bne.w	800ec68 <prvTCPConnectStart+0x1b0>
        {
            /* Check if it makes any sense to wait for a connect event, this condition
             * might change while sleeping, so it must be checked within each loop */
            xResult = bMayConnect( pxSocket ); /* -EINPROGRESS, -EAGAIN, or 0 for OK */
 800eb1c:	6878      	ldr	r0, [r7, #4]
 800eb1e:	f7ff ffa6 	bl	800ea6e <bMayConnect>
 800eb22:	60f8      	str	r0, [r7, #12]

            /* Start the connect procedure, kernel will start working on it */
            if( xResult == 0 )
 800eb24:	68fb      	ldr	r3, [r7, #12]
 800eb26:	2b00      	cmp	r3, #0
 800eb28:	f040 809e 	bne.w	800ec68 <prvTCPConnectStart+0x1b0>
            {
                pxSocket->u.xTCP.bits.bConnPrepared = pdFALSE;
 800eb2c:	687a      	ldr	r2, [r7, #4]
 800eb2e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800eb32:	f36f 03c3 	bfc	r3, #3, #1
 800eb36:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.ucRepCount = 0U;
 800eb3a:	687b      	ldr	r3, [r7, #4]
 800eb3c:	2200      	movs	r2, #0
 800eb3e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                switch( pxAddress->sin_family )
 800eb42:	683b      	ldr	r3, [r7, #0]
 800eb44:	785b      	ldrb	r3, [r3, #1]
 800eb46:	2b02      	cmp	r3, #2
 800eb48:	d027      	beq.n	800eb9a <prvTCPConnectStart+0xe2>
 800eb4a:	2b0a      	cmp	r3, #10
 800eb4c:	d168      	bne.n	800ec20 <prvTCPConnectStart+0x168>
                {
                    #if ( ipconfigUSE_IPv6 != 0 )
                        case FREERTOS_AF_INET6:
                            pxSocket->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 800eb4e:	687a      	ldr	r2, [r7, #4]
 800eb50:	7a13      	ldrb	r3, [r2, #8]
 800eb52:	f043 0301 	orr.w	r3, r3, #1
 800eb56:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %pip port %u\n",
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800eb5c:	4618      	mov	r0, r3
 800eb5e:	683b      	ldr	r3, [r7, #0]
 800eb60:	f103 0108 	add.w	r1, r3, #8
 800eb64:	683b      	ldr	r3, [r7, #0]
 800eb66:	885b      	ldrh	r3, [r3, #2]
 800eb68:	021b      	lsls	r3, r3, #8
 800eb6a:	b21a      	sxth	r2, r3
 800eb6c:	683b      	ldr	r3, [r7, #0]
 800eb6e:	885b      	ldrh	r3, [r3, #2]
 800eb70:	0a1b      	lsrs	r3, r3, #8
 800eb72:	b29b      	uxth	r3, r3
 800eb74:	b21b      	sxth	r3, r3
 800eb76:	4313      	orrs	r3, r2
 800eb78:	b21b      	sxth	r3, r3
 800eb7a:	b29b      	uxth	r3, r3
 800eb7c:	460a      	mov	r2, r1
 800eb7e:	4601      	mov	r1, r0
 800eb80:	483c      	ldr	r0, [pc, #240]	@ (800ec74 <prvTCPConnectStart+0x1bc>)
 800eb82:	f012 f87d 	bl	8020c80 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( void * ) pxAddress->sin_address.xIP_IPv6.ucBytes,
                                               FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            ( void ) memcpy( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxAddress->sin_address.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 800eb86:	687b      	ldr	r3, [r7, #4]
 800eb88:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 800eb8c:	683b      	ldr	r3, [r7, #0]
 800eb8e:	3308      	adds	r3, #8
 800eb90:	2210      	movs	r2, #16
 800eb92:	4619      	mov	r1, r3
 800eb94:	f012 fa90 	bl	80210b8 <memcpy>
                            break;
 800eb98:	e046      	b.n	800ec28 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    #if ( ipconfigUSE_IPv4 != 0 )
                        case FREERTOS_AF_INET4:
                            pxSocket->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 800eb9a:	687a      	ldr	r2, [r7, #4]
 800eb9c:	7a13      	ldrb	r3, [r2, #8]
 800eb9e:	f36f 0300 	bfc	r3, #0, #1
 800eba2:	7213      	strb	r3, [r2, #8]
                            FreeRTOS_printf( ( "FreeRTOS_connect: %u to %xip:%u\n",
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800eba8:	4618      	mov	r0, r3
 800ebaa:	683b      	ldr	r3, [r7, #0]
 800ebac:	689b      	ldr	r3, [r3, #8]
 800ebae:	061a      	lsls	r2, r3, #24
 800ebb0:	683b      	ldr	r3, [r7, #0]
 800ebb2:	689b      	ldr	r3, [r3, #8]
 800ebb4:	021b      	lsls	r3, r3, #8
 800ebb6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ebba:	431a      	orrs	r2, r3
 800ebbc:	683b      	ldr	r3, [r7, #0]
 800ebbe:	689b      	ldr	r3, [r3, #8]
 800ebc0:	0a1b      	lsrs	r3, r3, #8
 800ebc2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ebc6:	431a      	orrs	r2, r3
 800ebc8:	683b      	ldr	r3, [r7, #0]
 800ebca:	689b      	ldr	r3, [r3, #8]
 800ebcc:	0e1b      	lsrs	r3, r3, #24
 800ebce:	ea42 0103 	orr.w	r1, r2, r3
 800ebd2:	683b      	ldr	r3, [r7, #0]
 800ebd4:	885b      	ldrh	r3, [r3, #2]
 800ebd6:	021b      	lsls	r3, r3, #8
 800ebd8:	b21a      	sxth	r2, r3
 800ebda:	683b      	ldr	r3, [r7, #0]
 800ebdc:	885b      	ldrh	r3, [r3, #2]
 800ebde:	0a1b      	lsrs	r3, r3, #8
 800ebe0:	b29b      	uxth	r3, r3
 800ebe2:	b21b      	sxth	r3, r3
 800ebe4:	4313      	orrs	r3, r2
 800ebe6:	b21b      	sxth	r3, r3
 800ebe8:	b29b      	uxth	r3, r3
 800ebea:	460a      	mov	r2, r1
 800ebec:	4601      	mov	r1, r0
 800ebee:	4822      	ldr	r0, [pc, #136]	@ (800ec78 <prvTCPConnectStart+0x1c0>)
 800ebf0:	f012 f846 	bl	8020c80 <lUDPLoggingPrintf>
                                               pxSocket->usLocalPort, ( unsigned int ) FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 ), FreeRTOS_ntohs( pxAddress->sin_port ) ) );
                            pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_ntohl( pxAddress->sin_address.ulIP_IPv4 );
 800ebf4:	683b      	ldr	r3, [r7, #0]
 800ebf6:	689b      	ldr	r3, [r3, #8]
 800ebf8:	061a      	lsls	r2, r3, #24
 800ebfa:	683b      	ldr	r3, [r7, #0]
 800ebfc:	689b      	ldr	r3, [r3, #8]
 800ebfe:	021b      	lsls	r3, r3, #8
 800ec00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800ec04:	431a      	orrs	r2, r3
 800ec06:	683b      	ldr	r3, [r7, #0]
 800ec08:	689b      	ldr	r3, [r3, #8]
 800ec0a:	0a1b      	lsrs	r3, r3, #8
 800ec0c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800ec10:	431a      	orrs	r2, r3
 800ec12:	683b      	ldr	r3, [r7, #0]
 800ec14:	689b      	ldr	r3, [r3, #8]
 800ec16:	0e1b      	lsrs	r3, r3, #24
 800ec18:	431a      	orrs	r2, r3
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	655a      	str	r2, [r3, #84]	@ 0x54
                            break;
 800ec1e:	e003      	b.n	800ec28 <prvTCPConnectStart+0x170>
                    #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                    default:
                        FreeRTOS_debug_printf( ( "FreeRTOS_connect: Undefined sin_family \n" ) );
 800ec20:	4816      	ldr	r0, [pc, #88]	@ (800ec7c <prvTCPConnectStart+0x1c4>)
 800ec22:	f012 f82d 	bl	8020c80 <lUDPLoggingPrintf>
                        break;
 800ec26:	bf00      	nop
                }

                /* Port on remote machine. */
                pxSocket->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxAddress->sin_port );
 800ec28:	683b      	ldr	r3, [r7, #0]
 800ec2a:	885b      	ldrh	r3, [r3, #2]
 800ec2c:	021b      	lsls	r3, r3, #8
 800ec2e:	b21a      	sxth	r2, r3
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	885b      	ldrh	r3, [r3, #2]
 800ec34:	0a1b      	lsrs	r3, r3, #8
 800ec36:	b29b      	uxth	r3, r3
 800ec38:	b21b      	sxth	r3, r3
 800ec3a:	4313      	orrs	r3, r2
 800ec3c:	b21b      	sxth	r3, r3
 800ec3e:	b29a      	uxth	r2, r3
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64

                /* (client) internal state: socket wants to send a connect. */
                vTCPStateChange( pxSocket, eCONNECT_SYN );
 800ec46:	2102      	movs	r1, #2
 800ec48:	6878      	ldr	r0, [r7, #4]
 800ec4a:	f001 fc59 	bl	8010500 <vTCPStateChange>

                /* To start an active connect. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	2201      	movs	r2, #1
 800ec52:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xSendEventToIPTask( eTCPTimerEvent ) != pdPASS )
 800ec56:	2006      	movs	r0, #6
 800ec58:	f7f9 ffdc 	bl	8008c14 <xSendEventToIPTask>
 800ec5c:	4603      	mov	r3, r0
 800ec5e:	2b01      	cmp	r3, #1
 800ec60:	d002      	beq.n	800ec68 <prvTCPConnectStart+0x1b0>
                {
                    xResult = -pdFREERTOS_ERRNO_ECANCELED;
 800ec62:	f06f 038b 	mvn.w	r3, #139	@ 0x8b
 800ec66:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xResult;
 800ec68:	68fb      	ldr	r3, [r7, #12]
    }
 800ec6a:	4618      	mov	r0, r3
 800ec6c:	3710      	adds	r7, #16
 800ec6e:	46bd      	mov	sp, r7
 800ec70:	bd80      	pop	{r7, pc}
 800ec72:	bf00      	nop
 800ec74:	0802499c 	.word	0x0802499c
 800ec78:	080249c4 	.word	0x080249c4
 800ec7c:	080249e8 	.word	0x080249e8

0800ec80 <FreeRTOS_connect>:
 *         error code is returned.
 */
    BaseType_t FreeRTOS_connect( Socket_t xClientSocket,
                                 const struct freertos_sockaddr * pxAddress,
                                 socklen_t xAddressLength )
    {
 800ec80:	b580      	push	{r7, lr}
 800ec82:	b094      	sub	sp, #80	@ 0x50
 800ec84:	af02      	add	r7, sp, #8
 800ec86:	60f8      	str	r0, [r7, #12]
 800ec88:	60b9      	str	r1, [r7, #8]
 800ec8a:	607a      	str	r2, [r7, #4]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xClientSocket;
 800ec8c:	68fb      	ldr	r3, [r7, #12]
 800ec8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800ec90:	2300      	movs	r3, #0
 800ec92:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xResult = -pdFREERTOS_ERRNO_EINVAL;
 800ec94:	f06f 0315 	mvn.w	r3, #21
 800ec98:	643b      	str	r3, [r7, #64]	@ 0x40
        TimeOut_t xTimeOut;

        #if ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 )
            struct freertos_sockaddr xTempAddress;

            if( ( pxAddress != NULL ) && ( pxAddress->sin_family != FREERTOS_AF_INET6 ) && ( pxAddress->sin_family != FREERTOS_AF_INET ) )
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	2b00      	cmp	r3, #0
 800ec9e:	d013      	beq.n	800ecc8 <FreeRTOS_connect+0x48>
 800eca0:	68bb      	ldr	r3, [r7, #8]
 800eca2:	785b      	ldrb	r3, [r3, #1]
 800eca4:	2b0a      	cmp	r3, #10
 800eca6:	d00f      	beq.n	800ecc8 <FreeRTOS_connect+0x48>
 800eca8:	68bb      	ldr	r3, [r7, #8]
 800ecaa:	785b      	ldrb	r3, [r3, #1]
 800ecac:	2b02      	cmp	r3, #2
 800ecae:	d00b      	beq.n	800ecc8 <FreeRTOS_connect+0x48>
            {
                ( void ) memcpy( &xTempAddress, pxAddress, sizeof( struct freertos_sockaddr ) );
 800ecb0:	f107 0314 	add.w	r3, r7, #20
 800ecb4:	2218      	movs	r2, #24
 800ecb6:	68b9      	ldr	r1, [r7, #8]
 800ecb8:	4618      	mov	r0, r3
 800ecba:	f012 f9fd 	bl	80210b8 <memcpy>

                /* Default to FREERTOS_AF_INET family if either FREERTOS_AF_INET6/FREERTOS_AF_INET
                 *  is not specified in sin_family, if ipconfigIPv4_BACKWARD_COMPATIBLE is enabled. */
                xTempAddress.sin_family = FREERTOS_AF_INET;
 800ecbe:	2302      	movs	r3, #2
 800ecc0:	757b      	strb	r3, [r7, #21]
                pxAddress = &xTempAddress;
 800ecc2:	f107 0314 	add.w	r3, r7, #20
 800ecc6:	60bb      	str	r3, [r7, #8]
            }
        #endif /* ( ipconfigIPv4_BACKWARD_COMPATIBLE == 1 ) */

        ( void ) xAddressLength;

        xResult = prvTCPConnectStart( pxSocket, pxAddress );
 800ecc8:	68b9      	ldr	r1, [r7, #8]
 800ecca:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800eccc:	f7ff fef4 	bl	800eab8 <prvTCPConnectStart>
 800ecd0:	6438      	str	r0, [r7, #64]	@ 0x40

        if( xResult == 0 )
 800ecd2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ecd4:	2b00      	cmp	r3, #0
 800ecd6:	d146      	bne.n	800ed66 <FreeRTOS_connect+0xe6>
            /* And wait for the result */
            for( ; ; )
            {
                EventBits_t uxEvents;

                if( xTimed == pdFALSE )
 800ecd8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800ecda:	2b00      	cmp	r3, #0
 800ecdc:	d110      	bne.n	800ed00 <FreeRTOS_connect+0x80>
                {
                    /* Only in the first round, check for non-blocking */
                    xRemainingTime = pxSocket->xReceiveBlockTime;
 800ecde:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ece0:	6a1b      	ldr	r3, [r3, #32]
 800ece2:	637b      	str	r3, [r7, #52]	@ 0x34

                    if( xRemainingTime == ( TickType_t ) 0 )
 800ece4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ece6:	2b00      	cmp	r3, #0
 800ece8:	d103      	bne.n	800ecf2 <FreeRTOS_connect+0x72>
                    {
                        /* Not yet connected, correct state, non-blocking. */
                        xResult = -pdFREERTOS_ERRNO_EWOULDBLOCK;
 800ecea:	f06f 030a 	mvn.w	r3, #10
 800ecee:	643b      	str	r3, [r7, #64]	@ 0x40
                        break;
 800ecf0:	e039      	b.n	800ed66 <FreeRTOS_connect+0xe6>
                    }

                    /* Don't get here a second time. */
                    xTimed = pdTRUE;
 800ecf2:	2301      	movs	r3, #1
 800ecf4:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* Fetch the current time */
                    vTaskSetTimeOutState( &xTimeOut );
 800ecf6:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ecfa:	4618      	mov	r0, r3
 800ecfc:	f7f5 fb66 	bl	80043cc <vTaskSetTimeOutState>
                }

                /* Did it get connected while sleeping ? */
                xResult = FreeRTOS_issocketconnected( pxSocket );
 800ed00:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800ed02:	f000 fe3f 	bl	800f984 <FreeRTOS_issocketconnected>
 800ed06:	6438      	str	r0, [r7, #64]	@ 0x40

                /* Returns positive when connected, negative means an error */
                if( xResult < 0 )
 800ed08:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed0a:	2b00      	cmp	r3, #0
 800ed0c:	db2a      	blt.n	800ed64 <FreeRTOS_connect+0xe4>
                {
                    /* Return the error */
                    break;
                }

                if( xResult > 0 )
 800ed0e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed10:	2b00      	cmp	r3, #0
 800ed12:	dd02      	ble.n	800ed1a <FreeRTOS_connect+0x9a>
                {
                    /* Socket now connected, return a zero */
                    xResult = 0;
 800ed14:	2300      	movs	r3, #0
 800ed16:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800ed18:	e025      	b.n	800ed66 <FreeRTOS_connect+0xe6>
                }

                /* Is it allowed to sleep more? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800ed1a:	f107 0234 	add.w	r2, r7, #52	@ 0x34
 800ed1e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800ed22:	4611      	mov	r1, r2
 800ed24:	4618      	mov	r0, r3
 800ed26:	f7f5 fb89 	bl	800443c <xTaskCheckForTimeOut>
 800ed2a:	4603      	mov	r3, r0
 800ed2c:	2b00      	cmp	r3, #0
 800ed2e:	d003      	beq.n	800ed38 <FreeRTOS_connect+0xb8>
                {
                    xResult = -pdFREERTOS_ERRNO_ETIMEDOUT;
 800ed30:	f06f 0373 	mvn.w	r3, #115	@ 0x73
 800ed34:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 800ed36:	e016      	b.n	800ed66 <FreeRTOS_connect+0xe6>
                }

                /* Go sleeping until we get any down-stream event */
                uxEvents = xEventGroupWaitBits( pxSocket->xEventGroup,
 800ed38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ed3a:	6858      	ldr	r0, [r3, #4]
 800ed3c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed3e:	9300      	str	r3, [sp, #0]
 800ed40:	2300      	movs	r3, #0
 800ed42:	2201      	movs	r2, #1
 800ed44:	2128      	movs	r1, #40	@ 0x28
 800ed46:	f7f3 fbf3 	bl	8002530 <xEventGroupWaitBits>
 800ed4a:	63b8      	str	r0, [r7, #56]	@ 0x38
                                                ( EventBits_t ) eSOCKET_CONNECT | ( EventBits_t ) eSOCKET_CLOSED,
                                                pdTRUE /*xClearOnExit*/,
                                                pdFALSE /*xWaitAllBits*/,
                                                xRemainingTime );

                if( ( uxEvents & ( EventBits_t ) eSOCKET_CLOSED ) != 0U )
 800ed4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed4e:	f003 0320 	and.w	r3, r3, #32
 800ed52:	2b00      	cmp	r3, #0
 800ed54:	d0c0      	beq.n	800ecd8 <FreeRTOS_connect+0x58>
                {
                    xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800ed56:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ed5a:	643b      	str	r3, [r7, #64]	@ 0x40
                    FreeRTOS_debug_printf( ( "FreeRTOS_connect() stopped due to an error\n" ) );
 800ed5c:	4804      	ldr	r0, [pc, #16]	@ (800ed70 <FreeRTOS_connect+0xf0>)
 800ed5e:	f011 ff8f 	bl	8020c80 <lUDPLoggingPrintf>
                    break;
 800ed62:	e000      	b.n	800ed66 <FreeRTOS_connect+0xe6>
                    break;
 800ed64:	bf00      	nop
                }
            }
        }

        return xResult;
 800ed66:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    }
 800ed68:	4618      	mov	r0, r3
 800ed6a:	3748      	adds	r7, #72	@ 0x48
 800ed6c:	46bd      	mov	sp, r7
 800ed6e:	bd80      	pop	{r7, pc}
 800ed70:	08024a14 	.word	0x08024a14

0800ed74 <prvRecvData>:
 */
    static BaseType_t prvRecvData( FreeRTOS_Socket_t * pxSocket,
                                   void * pvBuffer,
                                   size_t uxBufferLength,
                                   BaseType_t xFlags )
    {
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b08a      	sub	sp, #40	@ 0x28
 800ed78:	af02      	add	r7, sp, #8
 800ed7a:	60f8      	str	r0, [r7, #12]
 800ed7c:	60b9      	str	r1, [r7, #8]
 800ed7e:	607a      	str	r2, [r7, #4]
 800ed80:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;

        if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) == 0U )
 800ed82:	683b      	ldr	r3, [r7, #0]
 800ed84:	f003 0301 	and.w	r3, r3, #1
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d13b      	bne.n	800ee04 <prvRecvData+0x90>
        {
            BaseType_t xIsPeek = ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_PEEK ) != 0U ) ? 1L : 0L;
 800ed8c:	683b      	ldr	r3, [r7, #0]
 800ed8e:	089b      	lsrs	r3, r3, #2
 800ed90:	f003 0301 	and.w	r3, r3, #1
 800ed94:	61bb      	str	r3, [r7, #24]

            xByteCount = ( BaseType_t )
                         uxStreamBufferGet( pxSocket->u.xTCP.rxStream,
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800ed9c:	69bb      	ldr	r3, [r7, #24]
 800ed9e:	9300      	str	r3, [sp, #0]
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	68ba      	ldr	r2, [r7, #8]
 800eda4:	2100      	movs	r1, #0
 800eda6:	f001 fa04 	bl	80101b2 <uxStreamBufferGet>
 800edaa:	4603      	mov	r3, r0
            xByteCount = ( BaseType_t )
 800edac:	61fb      	str	r3, [r7, #28]
                                            0U,
                                            ( uint8_t * ) pvBuffer,
                                            ( size_t ) uxBufferLength,
                                            xIsPeek );

            if( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED )
 800edae:	68fb      	ldr	r3, [r7, #12]
 800edb0:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800edb4:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800edb8:	b2db      	uxtb	r3, r3
 800edba:	2b00      	cmp	r3, #0
 800edbc:	d02b      	beq.n	800ee16 <prvRecvData+0xa2>
            {
                /* We had reached the low-water mark, now see if the flag
                 * can be cleared */
                size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800edbe:	68fb      	ldr	r3, [r7, #12]
 800edc0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800edc4:	4618      	mov	r0, r3
 800edc6:	f001 f8c5 	bl	800ff54 <uxStreamBufferFrontSpace>
 800edca:	6178      	str	r0, [r7, #20]

                if( uxFrontSpace >= pxSocket->u.xTCP.uxEnoughSpace )
 800edcc:	68fb      	ldr	r3, [r7, #12]
 800edce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800edd2:	697a      	ldr	r2, [r7, #20]
 800edd4:	429a      	cmp	r2, r3
 800edd6:	d31e      	bcc.n	800ee16 <prvRecvData+0xa2>
                {
                    pxSocket->u.xTCP.bits.bLowWater = pdFALSE_UNSIGNED;
 800edd8:	68fa      	ldr	r2, [r7, #12]
 800edda:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800edde:	f36f 13c7 	bfc	r3, #7, #1
 800ede2:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                    pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800ede6:	68fa      	ldr	r2, [r7, #12]
 800ede8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800edec:	f043 0301 	orr.w	r3, r3, #1
 800edf0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    pxSocket->u.xTCP.usTimeout = 1U; /* because bLowWater is cleared. */
 800edf4:	68fb      	ldr	r3, [r7, #12]
 800edf6:	2201      	movs	r2, #1
 800edf8:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800edfc:	2006      	movs	r0, #6
 800edfe:	f7f9 ff09 	bl	8008c14 <xSendEventToIPTask>
 800ee02:	e008      	b.n	800ee16 <prvRecvData+0xa2>
            }
        }
        else
        {
            /* Zero-copy reception of data: pvBuffer is a pointer to a pointer. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, ( uint8_t ** ) pvBuffer );
 800ee04:	68fb      	ldr	r3, [r7, #12]
 800ee06:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee0a:	68b9      	ldr	r1, [r7, #8]
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	f001 f930 	bl	8010072 <uxStreamBufferGetPtr>
 800ee12:	4603      	mov	r3, r0
 800ee14:	61fb      	str	r3, [r7, #28]
        }

        return xByteCount;
 800ee16:	69fb      	ldr	r3, [r7, #28]
    }
 800ee18:	4618      	mov	r0, r3
 800ee1a:	3720      	adds	r7, #32
 800ee1c:	46bd      	mov	sp, r7
 800ee1e:	bd80      	pop	{r7, pc}

0800ee20 <prvRecvWait>:
 *            is checked in this function.
 */
    static BaseType_t prvRecvWait( const FreeRTOS_Socket_t * pxSocket,
                                   EventBits_t * pxEventBits,
                                   BaseType_t xFlags )
    {
 800ee20:	b580      	push	{r7, lr}
 800ee22:	b08e      	sub	sp, #56	@ 0x38
 800ee24:	af02      	add	r7, sp, #8
 800ee26:	60f8      	str	r0, [r7, #12]
 800ee28:	60b9      	str	r1, [r7, #8]
 800ee2a:	607a      	str	r2, [r7, #4]
        BaseType_t xByteCount = 0;
 800ee2c:	2300      	movs	r3, #0
 800ee2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800ee30:	2300      	movs	r3, #0
 800ee32:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800ee34:	2300      	movs	r3, #0
 800ee36:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxSocket->u.xTCP.rxStream != NULL )
 800ee38:	68fb      	ldr	r3, [r7, #12]
 800ee3a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee3e:	2b00      	cmp	r3, #0
 800ee40:	d05f      	beq.n	800ef02 <prvRecvWait+0xe2>
        {
            xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800ee48:	4618      	mov	r0, r3
 800ee4a:	f001 f894 	bl	800ff76 <uxStreamBufferGetSize>
 800ee4e:	4603      	mov	r3, r0
 800ee50:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }

        while( xByteCount == 0 )
 800ee52:	e056      	b.n	800ef02 <prvRecvWait+0xe2>
        {
            eIPTCPState_t eType = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 800ee54:	68fb      	ldr	r3, [r7, #12]
 800ee56:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800ee5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

            if( ( eType == eCLOSED ) ||
 800ee5e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ee62:	2b00      	cmp	r3, #0
 800ee64:	d007      	beq.n	800ee76 <prvRecvWait+0x56>
 800ee66:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ee6a:	2b08      	cmp	r3, #8
 800ee6c:	d003      	beq.n	800ee76 <prvRecvWait+0x56>
                ( eType == eCLOSE_WAIT ) || /* (server + client) waiting for a connection termination request from the local user. */
 800ee6e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800ee72:	2b09      	cmp	r3, #9
 800ee74:	d10e      	bne.n	800ee94 <prvRecvWait+0x74>
                ( eType == eCLOSING ) )     /* (server + client) waiting for a connection termination request acknowledgement from the remote TCP. */
            {
                /* Return -ENOTCONN, unless there was a malloc failure. */
                xByteCount = -pdFREERTOS_ERRNO_ENOTCONN;
 800ee76:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800ee7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800ee7c:	68fb      	ldr	r3, [r7, #12]
 800ee7e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800ee82:	f003 0308 	and.w	r3, r3, #8
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	2b00      	cmp	r3, #0
 800ee8a:	d03e      	beq.n	800ef0a <prvRecvWait+0xea>
                {
                    /* The no-memory error has priority above the non-connected error.
                     * Both are fatal and will lead to closing the socket. */
                    xByteCount = -pdFREERTOS_ERRNO_ENOMEM;
 800ee8c:	f06f 030b 	mvn.w	r3, #11
 800ee90:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                break;
 800ee92:	e03a      	b.n	800ef0a <prvRecvWait+0xea>
            }

            if( xTimed == pdFALSE )
 800ee94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ee96:	2b00      	cmp	r3, #0
 800ee98:	d111      	bne.n	800eebe <prvRecvWait+0x9e>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xReceiveBlockTime;
 800ee9a:	68fb      	ldr	r3, [r7, #12]
 800ee9c:	6a1b      	ldr	r3, [r3, #32]
 800ee9e:	61fb      	str	r3, [r7, #28]

                if( xRemainingTime == ( TickType_t ) 0U )
 800eea0:	69fb      	ldr	r3, [r7, #28]
 800eea2:	2b00      	cmp	r3, #0
 800eea4:	d033      	beq.n	800ef0e <prvRecvWait+0xee>
                    }
                    #endif /* ipconfigSUPPORT_SIGNALS */
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	f003 0310 	and.w	r3, r3, #16
 800eeac:	2b00      	cmp	r3, #0
 800eeae:	d130      	bne.n	800ef12 <prvRecvWait+0xf2>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800eeb0:	2301      	movs	r3, #1
 800eeb2:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800eeb4:	f107 0314 	add.w	r3, r7, #20
 800eeb8:	4618      	mov	r0, r3
 800eeba:	f7f5 fa87 	bl	80043cc <vTaskSetTimeOutState>
            }

            /* Has the timeout been reached? */
            if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800eebe:	f107 021c 	add.w	r2, r7, #28
 800eec2:	f107 0314 	add.w	r3, r7, #20
 800eec6:	4611      	mov	r1, r2
 800eec8:	4618      	mov	r0, r3
 800eeca:	f7f5 fab7 	bl	800443c <xTaskCheckForTimeOut>
 800eece:	4603      	mov	r3, r0
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d120      	bne.n	800ef16 <prvRecvWait+0xf6>
            {
                break;
            }

            /* Block until there is a down-stream event. */
            xEventBits = xEventGroupWaitBits( pxSocket->xEventGroup,
 800eed4:	68fb      	ldr	r3, [r7, #12]
 800eed6:	6858      	ldr	r0, [r3, #4]
 800eed8:	69fb      	ldr	r3, [r7, #28]
 800eeda:	9300      	str	r3, [sp, #0]
 800eedc:	2300      	movs	r3, #0
 800eede:	2201      	movs	r2, #1
 800eee0:	2161      	movs	r1, #97	@ 0x61
 800eee2:	f7f3 fb25 	bl	8002530 <xEventGroupWaitBits>
 800eee6:	6278      	str	r0, [r7, #36]	@ 0x24
            {
                ( void ) xEventBits;
            }
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( pxSocket->u.xTCP.rxStream != NULL )
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eeee:	2b00      	cmp	r3, #0
 800eef0:	d007      	beq.n	800ef02 <prvRecvWait+0xe2>
            {
                xByteCount = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800eef8:	4618      	mov	r0, r3
 800eefa:	f001 f83c 	bl	800ff76 <uxStreamBufferGetSize>
 800eefe:	4603      	mov	r3, r0
 800ef00:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xByteCount == 0 )
 800ef02:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ef04:	2b00      	cmp	r3, #0
 800ef06:	d0a5      	beq.n	800ee54 <prvRecvWait+0x34>
 800ef08:	e006      	b.n	800ef18 <prvRecvWait+0xf8>
                break;
 800ef0a:	bf00      	nop
 800ef0c:	e004      	b.n	800ef18 <prvRecvWait+0xf8>
                    break;
 800ef0e:	bf00      	nop
 800ef10:	e002      	b.n	800ef18 <prvRecvWait+0xf8>
                    break;
 800ef12:	bf00      	nop
 800ef14:	e000      	b.n	800ef18 <prvRecvWait+0xf8>
                break;
 800ef16:	bf00      	nop
            }
        } /* while( xByteCount == 0 ) */

        *( pxEventBits ) = xEventBits;
 800ef18:	68bb      	ldr	r3, [r7, #8]
 800ef1a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ef1c:	601a      	str	r2, [r3, #0]

        return xByteCount;
 800ef1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
 800ef20:	4618      	mov	r0, r3
 800ef22:	3730      	adds	r7, #48	@ 0x30
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}

0800ef28 <FreeRTOS_recv>:
 */
    BaseType_t FreeRTOS_recv( Socket_t xSocket,
                              void * pvBuffer,
                              size_t uxBufferLength,
                              BaseType_t xFlags )
    {
 800ef28:	b580      	push	{r7, lr}
 800ef2a:	b088      	sub	sp, #32
 800ef2c:	af00      	add	r7, sp, #0
 800ef2e:	60f8      	str	r0, [r7, #12]
 800ef30:	60b9      	str	r1, [r7, #8]
 800ef32:	607a      	str	r2, [r7, #4]
 800ef34:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount = 0;
 800ef36:	2300      	movs	r3, #0
 800ef38:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800ef3a:	68fb      	ldr	r3, [r7, #12]
 800ef3c:	61bb      	str	r3, [r7, #24]
        EventBits_t xEventBits = ( EventBits_t ) 0U;
 800ef3e:	2300      	movs	r3, #0
 800ef40:	617b      	str	r3, [r7, #20]

        /* Check if the socket is valid, has type TCP and if it is bound to a
         * port. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800ef42:	2201      	movs	r2, #1
 800ef44:	2106      	movs	r1, #6
 800ef46:	69b8      	ldr	r0, [r7, #24]
 800ef48:	f7fe fa3a 	bl	800d3c0 <prvValidSocket>
 800ef4c:	4603      	mov	r3, r0
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	d103      	bne.n	800ef5a <FreeRTOS_recv+0x32>
        {
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800ef52:	f06f 0315 	mvn.w	r3, #21
 800ef56:	61fb      	str	r3, [r7, #28]
 800ef58:	e01d      	b.n	800ef96 <FreeRTOS_recv+0x6e>
        }
        else if( ( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_ZERO_COPY ) != 0U ) &&
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	f003 0301 	and.w	r3, r3, #1
 800ef60:	2b00      	cmp	r3, #0
 800ef62:	d006      	beq.n	800ef72 <FreeRTOS_recv+0x4a>
 800ef64:	68bb      	ldr	r3, [r7, #8]
 800ef66:	2b00      	cmp	r3, #0
 800ef68:	d103      	bne.n	800ef72 <FreeRTOS_recv+0x4a>
                 ( pvBuffer == NULL ) )
        {
            /* In zero-copy mode, pvBuffer is a pointer to a pointer ( not NULL ). */
            xByteCount = -pdFREERTOS_ERRNO_EINVAL;
 800ef6a:	f06f 0315 	mvn.w	r3, #21
 800ef6e:	61fb      	str	r3, [r7, #28]
 800ef70:	e011      	b.n	800ef96 <FreeRTOS_recv+0x6e>
        }
        else
        {
            /* The function parameters have been checked, now wait for incoming data. */
            xByteCount = prvRecvWait( pxSocket, &( xEventBits ), xFlags );
 800ef72:	f107 0314 	add.w	r3, r7, #20
 800ef76:	683a      	ldr	r2, [r7, #0]
 800ef78:	4619      	mov	r1, r3
 800ef7a:	69b8      	ldr	r0, [r7, #24]
 800ef7c:	f7ff ff50 	bl	800ee20 <prvRecvWait>
 800ef80:	61f8      	str	r0, [r7, #28]
                    xByteCount = -pdFREERTOS_ERRNO_EINTR;
                }
                else
            #endif /* ipconfigSUPPORT_SIGNALS */

            if( xByteCount > 0 )
 800ef82:	69fb      	ldr	r3, [r7, #28]
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	dd06      	ble.n	800ef96 <FreeRTOS_recv+0x6e>
            {
                /* Get the actual data from the buffer, or in case of zero-copy,
                 * let *pvBuffer point to the RX-stream of the socket. */
                xByteCount = prvRecvData( pxSocket, pvBuffer, uxBufferLength, xFlags );
 800ef88:	683b      	ldr	r3, [r7, #0]
 800ef8a:	687a      	ldr	r2, [r7, #4]
 800ef8c:	68b9      	ldr	r1, [r7, #8]
 800ef8e:	69b8      	ldr	r0, [r7, #24]
 800ef90:	f7ff fef0 	bl	800ed74 <prvRecvData>
 800ef94:	61f8      	str	r0, [r7, #28]
            }
        } /* prvValidSocket() */

        return xByteCount;
 800ef96:	69fb      	ldr	r3, [r7, #28]
    }
 800ef98:	4618      	mov	r0, r3
 800ef9a:	3720      	adds	r7, #32
 800ef9c:	46bd      	mov	sp, r7
 800ef9e:	bd80      	pop	{r7, pc}

0800efa0 <prvTCPSendCheck>:
 *
 * @return 0: representing OK, else a negative error code will be returned.
 */
    static int32_t prvTCPSendCheck( FreeRTOS_Socket_t * pxSocket,
                                    size_t uxDataLength )
    {
 800efa0:	b580      	push	{r7, lr}
 800efa2:	b084      	sub	sp, #16
 800efa4:	af00      	add	r7, sp, #0
 800efa6:	6078      	str	r0, [r7, #4]
 800efa8:	6039      	str	r1, [r7, #0]
        int32_t xResult = 1;
 800efaa:	2301      	movs	r3, #1
 800efac:	60fb      	str	r3, [r7, #12]

        /* Is this a socket of type TCP and is it already bound to a port number ? */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800efae:	2201      	movs	r2, #1
 800efb0:	2106      	movs	r1, #6
 800efb2:	6878      	ldr	r0, [r7, #4]
 800efb4:	f7fe fa04 	bl	800d3c0 <prvValidSocket>
 800efb8:	4603      	mov	r3, r0
 800efba:	2b00      	cmp	r3, #0
 800efbc:	d103      	bne.n	800efc6 <prvTCPSendCheck+0x26>
        {
            xResult = -pdFREERTOS_ERRNO_EINVAL;
 800efbe:	f06f 0315 	mvn.w	r3, #21
 800efc2:	60fb      	str	r3, [r7, #12]
 800efc4:	e040      	b.n	800f048 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bMallocError != pdFALSE_UNSIGNED )
 800efc6:	687b      	ldr	r3, [r7, #4]
 800efc8:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800efcc:	f003 0308 	and.w	r3, r3, #8
 800efd0:	b2db      	uxtb	r3, r3
 800efd2:	2b00      	cmp	r3, #0
 800efd4:	d003      	beq.n	800efde <prvTCPSendCheck+0x3e>
        {
            xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800efd6:	f06f 030b 	mvn.w	r3, #11
 800efda:	60fb      	str	r3, [r7, #12]
 800efdc:	e034      	b.n	800f048 <prvTCPSendCheck+0xa8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800efde:	687b      	ldr	r3, [r7, #4]
 800efe0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800efe4:	2b00      	cmp	r3, #0
 800efe6:	d009      	beq.n	800effc <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800efe8:	687b      	ldr	r3, [r7, #4]
 800efea:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
        else if( ( pxSocket->u.xTCP.eTCPState == eCLOSED ) ||
 800efee:	2b08      	cmp	r3, #8
 800eff0:	d004      	beq.n	800effc <prvTCPSendCheck+0x5c>
                 ( pxSocket->u.xTCP.eTCPState == eCLOSING ) )
 800eff2:	687b      	ldr	r3, [r7, #4]
 800eff4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                 ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) ||
 800eff8:	2b09      	cmp	r3, #9
 800effa:	d103      	bne.n	800f004 <prvTCPSendCheck+0x64>
        {
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800effc:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f000:	60fb      	str	r3, [r7, #12]
 800f002:	e021      	b.n	800f048 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 800f004:	687b      	ldr	r3, [r7, #4]
 800f006:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800f00a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800f00e:	b2db      	uxtb	r3, r3
 800f010:	2b00      	cmp	r3, #0
 800f012:	d002      	beq.n	800f01a <prvTCPSendCheck+0x7a>
        {
            /* This TCP connection is closing already, the FIN flag has been sent.
             * Maybe it is still delivering or receiving data.
             * Return OK in order not to get closed/deleted too quickly */
            xResult = 0;
 800f014:	2300      	movs	r3, #0
 800f016:	60fb      	str	r3, [r7, #12]
 800f018:	e016      	b.n	800f048 <prvTCPSendCheck+0xa8>
        }
        else if( uxDataLength == 0U )
 800f01a:	683b      	ldr	r3, [r7, #0]
 800f01c:	2b00      	cmp	r3, #0
 800f01e:	d102      	bne.n	800f026 <prvTCPSendCheck+0x86>
        {
            /* send() is being called to send zero bytes */
            xResult = 0;
 800f020:	2300      	movs	r3, #0
 800f022:	60fb      	str	r3, [r7, #12]
 800f024:	e010      	b.n	800f048 <prvTCPSendCheck+0xa8>
        }
        else if( pxSocket->u.xTCP.txStream == NULL )
 800f026:	687b      	ldr	r3, [r7, #4]
 800f028:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f02c:	2b00      	cmp	r3, #0
 800f02e:	d10b      	bne.n	800f048 <prvTCPSendCheck+0xa8>
        {
            /* Create the outgoing stream only when it is needed */
            ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800f030:	2100      	movs	r1, #0
 800f032:	6878      	ldr	r0, [r7, #4]
 800f034:	f000 fac6 	bl	800f5c4 <prvTCPCreateStream>

            if( pxSocket->u.xTCP.txStream == NULL )
 800f038:	687b      	ldr	r3, [r7, #4]
 800f03a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f03e:	2b00      	cmp	r3, #0
 800f040:	d102      	bne.n	800f048 <prvTCPSendCheck+0xa8>
            {
                xResult = -pdFREERTOS_ERRNO_ENOMEM;
 800f042:	f06f 030b 	mvn.w	r3, #11
 800f046:	60fb      	str	r3, [r7, #12]
        else
        {
            /* Nothing. */
        }

        return xResult;
 800f048:	68fb      	ldr	r3, [r7, #12]
    }
 800f04a:	4618      	mov	r0, r3
 800f04c:	3710      	adds	r7, #16
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}

0800f052 <FreeRTOS_get_tx_head>:
 * @return Head of the circular transmit buffer if all checks pass. Or else, NULL
 *         is returned.
 */
    uint8_t * FreeRTOS_get_tx_head( Socket_t xSocket,
                                    BaseType_t * pxLength )
    {
 800f052:	b580      	push	{r7, lr}
 800f054:	b088      	sub	sp, #32
 800f056:	af00      	add	r7, sp, #0
 800f058:	6078      	str	r0, [r7, #4]
 800f05a:	6039      	str	r1, [r7, #0]
        uint8_t * pucReturn = NULL;
 800f05c:	2300      	movs	r3, #0
 800f05e:	61fb      	str	r3, [r7, #28]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f060:	687b      	ldr	r3, [r7, #4]
 800f062:	617b      	str	r3, [r7, #20]
        StreamBuffer_t * pxBuffer = NULL;
 800f064:	2300      	movs	r3, #0
 800f066:	61bb      	str	r3, [r7, #24]

        *pxLength = 0;
 800f068:	683b      	ldr	r3, [r7, #0]
 800f06a:	2200      	movs	r2, #0
 800f06c:	601a      	str	r2, [r3, #0]

        /* Confirm that this is a TCP socket before dereferencing structure
         * member pointers. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdFALSE ) == pdTRUE )
 800f06e:	2200      	movs	r2, #0
 800f070:	2106      	movs	r1, #6
 800f072:	6978      	ldr	r0, [r7, #20]
 800f074:	f7fe f9a4 	bl	800d3c0 <prvValidSocket>
 800f078:	4603      	mov	r3, r0
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d135      	bne.n	800f0ea <FreeRTOS_get_tx_head+0x98>
        {
            pxBuffer = pxSocket->u.xTCP.txStream;
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f084:	61bb      	str	r3, [r7, #24]

            /* If the TX buffer hasn't been created yet,
             * and if no malloc error has occurred on this socket yet. */
            if( ( pxBuffer == NULL ) &&
 800f086:	69bb      	ldr	r3, [r7, #24]
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d10f      	bne.n	800f0ac <FreeRTOS_get_tx_head+0x5a>
                ( pxSocket->u.xTCP.bits.bMallocError == pdFALSE_UNSIGNED ) )
 800f08c:	697b      	ldr	r3, [r7, #20]
 800f08e:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 800f092:	f003 0308 	and.w	r3, r3, #8
 800f096:	b2db      	uxtb	r3, r3
            if( ( pxBuffer == NULL ) &&
 800f098:	2b00      	cmp	r3, #0
 800f09a:	d107      	bne.n	800f0ac <FreeRTOS_get_tx_head+0x5a>
            {
                /* Create the outgoing stream only when it is needed */
                ( void ) prvTCPCreateStream( pxSocket, pdFALSE );
 800f09c:	2100      	movs	r1, #0
 800f09e:	6978      	ldr	r0, [r7, #20]
 800f0a0:	f000 fa90 	bl	800f5c4 <prvTCPCreateStream>
                pxBuffer = pxSocket->u.xTCP.txStream;
 800f0a4:	697b      	ldr	r3, [r7, #20]
 800f0a6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f0aa:	61bb      	str	r3, [r7, #24]
            }

            if( pxBuffer != NULL )
 800f0ac:	69bb      	ldr	r3, [r7, #24]
 800f0ae:	2b00      	cmp	r3, #0
 800f0b0:	d01b      	beq.n	800f0ea <FreeRTOS_get_tx_head+0x98>
            {
                size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 800f0b2:	69b8      	ldr	r0, [r7, #24]
 800f0b4:	f000 ff3d 	bl	800ff32 <uxStreamBufferGetSpace>
 800f0b8:	6138      	str	r0, [r7, #16]
                size_t uxRemain = pxBuffer->LENGTH - pxBuffer->uxHead;
 800f0ba:	69bb      	ldr	r3, [r7, #24]
 800f0bc:	691a      	ldr	r2, [r3, #16]
 800f0be:	69bb      	ldr	r3, [r7, #24]
 800f0c0:	689b      	ldr	r3, [r3, #8]
 800f0c2:	1ad3      	subs	r3, r2, r3
 800f0c4:	60fb      	str	r3, [r7, #12]

                if( uxRemain <= uxSpace )
 800f0c6:	68fa      	ldr	r2, [r7, #12]
 800f0c8:	693b      	ldr	r3, [r7, #16]
 800f0ca:	429a      	cmp	r2, r3
 800f0cc:	d803      	bhi.n	800f0d6 <FreeRTOS_get_tx_head+0x84>
                {
                    *pxLength = ( BaseType_t ) uxRemain;
 800f0ce:	68fa      	ldr	r2, [r7, #12]
 800f0d0:	683b      	ldr	r3, [r7, #0]
 800f0d2:	601a      	str	r2, [r3, #0]
 800f0d4:	e002      	b.n	800f0dc <FreeRTOS_get_tx_head+0x8a>
                }
                else
                {
                    *pxLength = ( BaseType_t ) uxSpace;
 800f0d6:	693a      	ldr	r2, [r7, #16]
 800f0d8:	683b      	ldr	r3, [r7, #0]
 800f0da:	601a      	str	r2, [r3, #0]
                }

                pucReturn = &( pxBuffer->ucArray[ pxBuffer->uxHead ] );
 800f0dc:	69bb      	ldr	r3, [r7, #24]
 800f0de:	689b      	ldr	r3, [r3, #8]
 800f0e0:	3310      	adds	r3, #16
 800f0e2:	69ba      	ldr	r2, [r7, #24]
 800f0e4:	4413      	add	r3, r2
 800f0e6:	3304      	adds	r3, #4
 800f0e8:	61fb      	str	r3, [r7, #28]
            }
        }

        return pucReturn;
 800f0ea:	69fb      	ldr	r3, [r7, #28]
    }
 800f0ec:	4618      	mov	r0, r3
 800f0ee:	3720      	adds	r7, #32
 800f0f0:	46bd      	mov	sp, r7
 800f0f2:	bd80      	pop	{r7, pc}

0800f0f4 <prvTCPSendLoop>:
 */
    static BaseType_t prvTCPSendLoop( FreeRTOS_Socket_t * pxSocket,
                                      const void * pvBuffer,
                                      size_t uxDataLength,
                                      BaseType_t xFlags )
    {
 800f0f4:	b580      	push	{r7, lr}
 800f0f6:	b090      	sub	sp, #64	@ 0x40
 800f0f8:	af02      	add	r7, sp, #8
 800f0fa:	60f8      	str	r0, [r7, #12]
 800f0fc:	60b9      	str	r1, [r7, #8]
 800f0fe:	607a      	str	r2, [r7, #4]
 800f100:	603b      	str	r3, [r7, #0]
        /* The number of bytes sent. */
        BaseType_t xBytesSent = 0;
 800f102:	2300      	movs	r3, #0
 800f104:	637b      	str	r3, [r7, #52]	@ 0x34
        /* xBytesLeft is the number of bytes that still must be sent. */
        BaseType_t xBytesLeft = ( BaseType_t ) uxDataLength;
 800f106:	687b      	ldr	r3, [r7, #4]
 800f108:	633b      	str	r3, [r7, #48]	@ 0x30
        /* xByteCount is number of bytes that can be sent now. */
        BaseType_t xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f110:	4618      	mov	r0, r3
 800f112:	f000 ff0e 	bl	800ff32 <uxStreamBufferGetSpace>
 800f116:	4603      	mov	r3, r0
 800f118:	62fb      	str	r3, [r7, #44]	@ 0x2c
        TickType_t xRemainingTime;
        BaseType_t xTimed = pdFALSE;
 800f11a:	2300      	movs	r3, #0
 800f11c:	62bb      	str	r3, [r7, #40]	@ 0x28
        TimeOut_t xTimeOut;
        const uint8_t * pucSource = ( const uint8_t * ) pvBuffer;
 800f11e:	68bb      	ldr	r3, [r7, #8]
 800f120:	627b      	str	r3, [r7, #36]	@ 0x24

        /* While there are still bytes to be sent. */
        while( xBytesLeft > 0 )
 800f122:	e08f      	b.n	800f244 <prvTCPSendLoop+0x150>
        {
            /* If txStream has space. */
            if( xByteCount > 0 )
 800f124:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f126:	2b00      	cmp	r3, #0
 800f128:	dd4b      	ble.n	800f1c2 <prvTCPSendLoop+0xce>
            {
                BaseType_t xCloseAfterSend = pdFALSE;
 800f12a:	2300      	movs	r3, #0
 800f12c:	623b      	str	r3, [r7, #32]

                /* Don't send more than necessary. */
                if( xByteCount > xBytesLeft )
 800f12e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f132:	429a      	cmp	r2, r3
 800f134:	dd01      	ble.n	800f13a <prvTCPSendLoop+0x46>
                {
                    xByteCount = xBytesLeft;
 800f136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f138:	62fb      	str	r3, [r7, #44]	@ 0x2c
                }

                if( ( pxSocket->u.xTCP.bits.bCloseAfterSend != pdFALSE_UNSIGNED ) &&
 800f13a:	68fb      	ldr	r3, [r7, #12]
 800f13c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f140:	f003 0310 	and.w	r3, r3, #16
 800f144:	b2db      	uxtb	r3, r3
 800f146:	2b00      	cmp	r3, #0
 800f148:	d00e      	beq.n	800f168 <prvTCPSendLoop+0x74>
 800f14a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f14c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f14e:	429a      	cmp	r2, r3
 800f150:	d10a      	bne.n	800f168 <prvTCPSendLoop+0x74>
                    ( xByteCount == xBytesLeft ) )
                {
                    xCloseAfterSend = pdTRUE;
 800f152:	2301      	movs	r3, #1
 800f154:	623b      	str	r3, [r7, #32]

                    /* Now suspend the scheduler: sending the last data and
                     * setting bCloseRequested must be done together */
                    vTaskSuspendAll();
 800f156:	f7f4 fc7d 	bl	8003a54 <vTaskSuspendAll>
                    pxSocket->u.xTCP.bits.bCloseRequested = pdTRUE_UNSIGNED;
 800f15a:	68fa      	ldr	r2, [r7, #12]
 800f15c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f160:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f164:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                     * expected.  The use of 'bCloseAfterSend' is not mandatory, it
                     * is just a faster way of transferring files (e.g. when using
                     * FTP). */
                }

                xByteCount = ( BaseType_t ) uxStreamBufferAdd( pxSocket->u.xTCP.txStream, 0U, pucSource, ( size_t ) xByteCount );
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 800f16e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f170:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f172:	2100      	movs	r1, #0
 800f174:	f000 ff9d 	bl	80100b2 <uxStreamBufferAdd>
 800f178:	4603      	mov	r3, r0
 800f17a:	62fb      	str	r3, [r7, #44]	@ 0x2c

                if( xCloseAfterSend == pdTRUE )
 800f17c:	6a3b      	ldr	r3, [r7, #32]
 800f17e:	2b01      	cmp	r3, #1
 800f180:	d101      	bne.n	800f186 <prvTCPSendLoop+0x92>
                {
                    /* Now when the IP-task transmits the data, it will also
                     * see that bCloseRequested is true and include the FIN
                     * flag to start closure of the connection. */
                    ( void ) xTaskResumeAll();
 800f182:	f7f4 fc75 	bl	8003a70 <xTaskResumeAll>
                }

                /* Send a message to the IP-task so it can work on this
                * socket.  Data is sent, let the IP-task work on it. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	2201      	movs	r2, #1
 800f18a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                if( xIsCallingFromIPTask() == pdFALSE )
 800f18e:	f7fa fc99 	bl	8009ac4 <xIsCallingFromIPTask>
 800f192:	4603      	mov	r3, r0
 800f194:	2b00      	cmp	r3, #0
 800f196:	d102      	bne.n	800f19e <prvTCPSendLoop+0xaa>
                {
                    /* Only send a TCP timer event when not called from the
                     * IP-task. */
                    ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f198:	2006      	movs	r0, #6
 800f19a:	f7f9 fd3b 	bl	8008c14 <xSendEventToIPTask>
                }

                xBytesLeft -= xByteCount;
 800f19e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800f1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1a2:	1ad3      	subs	r3, r2, r3
 800f1a4:	633b      	str	r3, [r7, #48]	@ 0x30
                xBytesSent += xByteCount;
 800f1a6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800f1a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1aa:	4413      	add	r3, r2
 800f1ac:	637b      	str	r3, [r7, #52]	@ 0x34

                if( ( xBytesLeft == 0 ) || ( pvBuffer == NULL ) )
 800f1ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f1b0:	2b00      	cmp	r3, #0
 800f1b2:	d053      	beq.n	800f25c <prvTCPSendLoop+0x168>
 800f1b4:	68bb      	ldr	r3, [r7, #8]
 800f1b6:	2b00      	cmp	r3, #0
 800f1b8:	d050      	beq.n	800f25c <prvTCPSendLoop+0x168>
                    break;
                }

                /* As there are still bytes left to be sent, increase the
                 * data pointer. */
                pucSource = &( pucSource[ xByteCount ] );
 800f1ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f1bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800f1be:	4413      	add	r3, r2
 800f1c0:	627b      	str	r3, [r7, #36]	@ 0x24
            } /* if( xByteCount > 0 ) */

            /* Not all bytes have been sent. In case the socket is marked as
             * blocking sleep for a while. */
            if( xTimed == pdFALSE )
 800f1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f1c4:	2b00      	cmp	r3, #0
 800f1c6:	d119      	bne.n	800f1fc <prvTCPSendLoop+0x108>
            {
                /* Only in the first round, check for non-blocking. */
                xRemainingTime = pxSocket->xSendBlockTime;
 800f1c8:	68fb      	ldr	r3, [r7, #12]
 800f1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f1cc:	61fb      	str	r3, [r7, #28]

                if( xIsCallingFromIPTask() != pdFALSE )
 800f1ce:	f7fa fc79 	bl	8009ac4 <xIsCallingFromIPTask>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d001      	beq.n	800f1dc <prvTCPSendLoop+0xe8>
                {
                    /* If this send function is called from within a
                     * call-back handler it may not block, otherwise
                     * chances would be big to get a deadlock: the IP-task
                     * waiting for itself. */
                    xRemainingTime = ( TickType_t ) 0U;
 800f1d8:	2300      	movs	r3, #0
 800f1da:	61fb      	str	r3, [r7, #28]
                }

                if( xRemainingTime == ( TickType_t ) 0U )
 800f1dc:	69fb      	ldr	r3, [r7, #28]
 800f1de:	2b00      	cmp	r3, #0
 800f1e0:	d035      	beq.n	800f24e <prvTCPSendLoop+0x15a>
                {
                    break;
                }

                if( ( ( uint32_t ) xFlags & ( uint32_t ) FREERTOS_MSG_DONTWAIT ) != 0U )
 800f1e2:	683b      	ldr	r3, [r7, #0]
 800f1e4:	f003 0310 	and.w	r3, r3, #16
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d132      	bne.n	800f252 <prvTCPSendLoop+0x15e>
                {
                    break;
                }

                /* Don't get here a second time. */
                xTimed = pdTRUE;
 800f1ec:	2301      	movs	r3, #1
 800f1ee:	62bb      	str	r3, [r7, #40]	@ 0x28

                /* Fetch the current time. */
                vTaskSetTimeOutState( &xTimeOut );
 800f1f0:	f107 0314 	add.w	r3, r7, #20
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f7f5 f8e9 	bl	80043cc <vTaskSetTimeOutState>
 800f1fa:	e00a      	b.n	800f212 <prvTCPSendLoop+0x11e>
            }
            else
            {
                /* Has the timeout been reached? */
                if( xTaskCheckForTimeOut( &xTimeOut, &xRemainingTime ) != pdFALSE )
 800f1fc:	f107 021c 	add.w	r2, r7, #28
 800f200:	f107 0314 	add.w	r3, r7, #20
 800f204:	4611      	mov	r1, r2
 800f206:	4618      	mov	r0, r3
 800f208:	f7f5 f918 	bl	800443c <xTaskCheckForTimeOut>
 800f20c:	4603      	mov	r3, r0
 800f20e:	2b00      	cmp	r3, #0
 800f210:	d121      	bne.n	800f256 <prvTCPSendLoop+0x162>
                    break;
                }
            }

            /* Go sleeping until a SEND or a CLOSE event is received. */
            ( void ) xEventGroupWaitBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_SEND | ( EventBits_t ) eSOCKET_CLOSED,
 800f212:	68fb      	ldr	r3, [r7, #12]
 800f214:	6858      	ldr	r0, [r3, #4]
 800f216:	69fb      	ldr	r3, [r7, #28]
 800f218:	9300      	str	r3, [sp, #0]
 800f21a:	2300      	movs	r3, #0
 800f21c:	2201      	movs	r2, #1
 800f21e:	2122      	movs	r1, #34	@ 0x22
 800f220:	f7f3 f986 	bl	8002530 <xEventGroupWaitBits>
                                          pdTRUE /*xClearOnExit*/, pdFALSE /*xWaitAllBits*/, xRemainingTime );

            xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800f224:	6879      	ldr	r1, [r7, #4]
 800f226:	68f8      	ldr	r0, [r7, #12]
 800f228:	f7ff feba 	bl	800efa0 <prvTCPSendCheck>
 800f22c:	62f8      	str	r0, [r7, #44]	@ 0x2c

            if( xByteCount < 0 )
 800f22e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f230:	2b00      	cmp	r3, #0
 800f232:	db12      	blt.n	800f25a <prvTCPSendLoop+0x166>
                /* In a meanwhile, the connection has dropped, stop iterating. */
                break;
            }

            /* See if in a meanwhile there is space in the TX-stream. */
            xByteCount = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800f234:	68fb      	ldr	r3, [r7, #12]
 800f236:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f23a:	4618      	mov	r0, r3
 800f23c:	f000 fe79 	bl	800ff32 <uxStreamBufferGetSpace>
 800f240:	4603      	mov	r3, r0
 800f242:	62fb      	str	r3, [r7, #44]	@ 0x2c
        while( xBytesLeft > 0 )
 800f244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800f246:	2b00      	cmp	r3, #0
 800f248:	f73f af6c 	bgt.w	800f124 <prvTCPSendLoop+0x30>
 800f24c:	e006      	b.n	800f25c <prvTCPSendLoop+0x168>
                    break;
 800f24e:	bf00      	nop
 800f250:	e004      	b.n	800f25c <prvTCPSendLoop+0x168>
                    break;
 800f252:	bf00      	nop
 800f254:	e002      	b.n	800f25c <prvTCPSendLoop+0x168>
                    break;
 800f256:	bf00      	nop
 800f258:	e000      	b.n	800f25c <prvTCPSendLoop+0x168>
                break;
 800f25a:	bf00      	nop
        } /* while( xBytesLeft > 0 ) */

        return xBytesSent;
 800f25c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 800f25e:	4618      	mov	r0, r3
 800f260:	3738      	adds	r7, #56	@ 0x38
 800f262:	46bd      	mov	sp, r7
 800f264:	bd80      	pop	{r7, pc}
	...

0800f268 <FreeRTOS_send>:
 */
    BaseType_t FreeRTOS_send( Socket_t xSocket,
                              const void * pvBuffer,
                              size_t uxDataLength,
                              BaseType_t xFlags )
    {
 800f268:	b580      	push	{r7, lr}
 800f26a:	b086      	sub	sp, #24
 800f26c:	af00      	add	r7, sp, #0
 800f26e:	60f8      	str	r0, [r7, #12]
 800f270:	60b9      	str	r1, [r7, #8]
 800f272:	607a      	str	r2, [r7, #4]
 800f274:	603b      	str	r3, [r7, #0]
        BaseType_t xByteCount;
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	613b      	str	r3, [r7, #16]

        xByteCount = ( BaseType_t ) prvTCPSendCheck( pxSocket, uxDataLength );
 800f27a:	6879      	ldr	r1, [r7, #4]
 800f27c:	6938      	ldr	r0, [r7, #16]
 800f27e:	f7ff fe8f 	bl	800efa0 <prvTCPSendCheck>
 800f282:	6178      	str	r0, [r7, #20]

        if( xByteCount > 0 )
 800f284:	697b      	ldr	r3, [r7, #20]
 800f286:	2b00      	cmp	r3, #0
 800f288:	dd24      	ble.n	800f2d4 <FreeRTOS_send+0x6c>
        {
            /* prvTCPSendLoop() will try to send as many bytes as possible,
             * returning number of bytes that have been queued for transmission.. */
            xByteCount = prvTCPSendLoop( pxSocket, pvBuffer, uxDataLength, xFlags );
 800f28a:	683b      	ldr	r3, [r7, #0]
 800f28c:	687a      	ldr	r2, [r7, #4]
 800f28e:	68b9      	ldr	r1, [r7, #8]
 800f290:	6938      	ldr	r0, [r7, #16]
 800f292:	f7ff ff2f 	bl	800f0f4 <prvTCPSendLoop>
 800f296:	6178      	str	r0, [r7, #20]

            if( xByteCount == 0 )
 800f298:	697b      	ldr	r3, [r7, #20]
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d11a      	bne.n	800f2d4 <FreeRTOS_send+0x6c>
            {
                if( pxSocket->u.xTCP.eTCPState > eESTABLISHED )
 800f29e:	693b      	ldr	r3, [r7, #16]
 800f2a0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f2a4:	2b05      	cmp	r3, #5
 800f2a6:	d903      	bls.n	800f2b0 <FreeRTOS_send+0x48>
                {
                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOTCONN;
 800f2a8:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f2ac:	617b      	str	r3, [r7, #20]
 800f2ae:	e011      	b.n	800f2d4 <FreeRTOS_send+0x6c>
                }
                else
                {
                    if( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 800f2b0:	693b      	ldr	r3, [r7, #16]
 800f2b2:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f2b4:	2b17      	cmp	r3, #23
 800f2b6:	d00a      	beq.n	800f2ce <FreeRTOS_send+0x66>
                    {
                        FreeRTOS_debug_printf( ( "FreeRTOS_send: %u -> %xip:%d: no space\n",
 800f2b8:	693b      	ldr	r3, [r7, #16]
 800f2ba:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800f2bc:	4619      	mov	r1, r3
 800f2be:	693b      	ldr	r3, [r7, #16]
 800f2c0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f2c2:	693b      	ldr	r3, [r7, #16]
 800f2c4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800f2c8:	4805      	ldr	r0, [pc, #20]	@ (800f2e0 <FreeRTOS_send+0x78>)
 800f2ca:	f011 fcd9 	bl	8020c80 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                 pxSocket->u.xTCP.usRemotePort ) );
                    }

                    xByteCount = ( BaseType_t ) -pdFREERTOS_ERRNO_ENOSPC;
 800f2ce:	f06f 031b 	mvn.w	r3, #27
 800f2d2:	617b      	str	r3, [r7, #20]
                }
            }
        }

        return xByteCount;
 800f2d4:	697b      	ldr	r3, [r7, #20]
    }
 800f2d6:	4618      	mov	r0, r3
 800f2d8:	3718      	adds	r7, #24
 800f2da:	46bd      	mov	sp, r7
 800f2dc:	bd80      	pop	{r7, pc}
 800f2de:	bf00      	nop
 800f2e0:	08024a6c 	.word	0x08024a6c

0800f2e4 <FreeRTOS_listen>:
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-172 */
    /* coverity[misra_c_2012_rule_17_2_violation] */
    /* coverity[recursive_step] */
    BaseType_t FreeRTOS_listen( Socket_t xSocket,
                                BaseType_t xBacklog )
    {
 800f2e4:	b580      	push	{r7, lr}
 800f2e6:	b084      	sub	sp, #16
 800f2e8:	af00      	add	r7, sp, #0
 800f2ea:	6078      	str	r0, [r7, #4]
 800f2ec:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket;
        BaseType_t xResult = 0;
 800f2ee:	2300      	movs	r3, #0
 800f2f0:	60fb      	str	r3, [r7, #12]

        pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	60bb      	str	r3, [r7, #8]

        /* listen() is allowed for a valid TCP socket in Closed state and already
         * bound. */
        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f2f6:	2201      	movs	r2, #1
 800f2f8:	2106      	movs	r1, #6
 800f2fa:	68b8      	ldr	r0, [r7, #8]
 800f2fc:	f7fe f860 	bl	800d3c0 <prvValidSocket>
 800f300:	4603      	mov	r3, r0
 800f302:	2b00      	cmp	r3, #0
 800f304:	d103      	bne.n	800f30e <FreeRTOS_listen+0x2a>
        {
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f306:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f30a:	60fb      	str	r3, [r7, #12]
 800f30c:	e056      	b.n	800f3bc <FreeRTOS_listen+0xd8>
        }
        else if( ( pxSocket->u.xTCP.eTCPState != eCLOSED ) && ( pxSocket->u.xTCP.eTCPState != eCLOSE_WAIT ) )
 800f30e:	68bb      	ldr	r3, [r7, #8]
 800f310:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f314:	2b00      	cmp	r3, #0
 800f316:	d008      	beq.n	800f32a <FreeRTOS_listen+0x46>
 800f318:	68bb      	ldr	r3, [r7, #8]
 800f31a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f31e:	2b08      	cmp	r3, #8
 800f320:	d003      	beq.n	800f32a <FreeRTOS_listen+0x46>
        {
            /* Socket is in a wrong state. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f322:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f326:	60fb      	str	r3, [r7, #12]
 800f328:	e048      	b.n	800f3bc <FreeRTOS_listen+0xd8>
        }
        else
        {
            /* Backlog is interpreted here as "the maximum number of child
             * sockets. */
            pxSocket->u.xTCP.usBacklog = ( uint16_t ) FreeRTOS_min_int32( ( int32_t ) 0xffff, ( int32_t ) xBacklog );
 800f32a:	6839      	ldr	r1, [r7, #0]
 800f32c:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 800f330:	f7fa fd78 	bl	8009e24 <FreeRTOS_min_int32>
 800f334:	4603      	mov	r3, r0
 800f336:	b29a      	uxth	r2, r3
 800f338:	68bb      	ldr	r3, [r7, #8]
 800f33a:	f8a3 2076 	strh.w	r2, [r3, #118]	@ 0x76

            /* This cleaning is necessary only if a listening socket is being
             * reused as it might have had a previous connection. */
            if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 800f33e:	68bb      	ldr	r3, [r7, #8]
 800f340:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f344:	f003 0308 	and.w	r3, r3, #8
 800f348:	b2db      	uxtb	r3, r3
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d032      	beq.n	800f3b4 <FreeRTOS_listen+0xd0>
            {
                if( pxSocket->u.xTCP.rxStream != NULL )
 800f34e:	68bb      	ldr	r3, [r7, #8]
 800f350:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f354:	2b00      	cmp	r3, #0
 800f356:	d005      	beq.n	800f364 <FreeRTOS_listen+0x80>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.rxStream );
 800f358:	68bb      	ldr	r3, [r7, #8]
 800f35a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f35e:	4618      	mov	r0, r3
 800f360:	f000 fe2b 	bl	800ffba <vStreamBufferClear>
                }

                if( pxSocket->u.xTCP.txStream != NULL )
 800f364:	68bb      	ldr	r3, [r7, #8]
 800f366:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f36a:	2b00      	cmp	r3, #0
 800f36c:	d005      	beq.n	800f37a <FreeRTOS_listen+0x96>
                {
                    vStreamBufferClear( pxSocket->u.xTCP.txStream );
 800f36e:	68bb      	ldr	r3, [r7, #8]
 800f370:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f374:	4618      	mov	r0, r3
 800f376:	f000 fe20 	bl	800ffba <vStreamBufferClear>
                }

                ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 800f37a:	68bb      	ldr	r3, [r7, #8]
 800f37c:	33aa      	adds	r3, #170	@ 0xaa
 800f37e:	225a      	movs	r2, #90	@ 0x5a
 800f380:	2100      	movs	r1, #0
 800f382:	4618      	mov	r0, r3
 800f384:	f011 ffa5 	bl	80212d2 <memset>
                ( void ) memset( &pxSocket->u.xTCP.xTCPWindow, 0, sizeof( pxSocket->u.xTCP.xTCPWindow ) );
 800f388:	68bb      	ldr	r3, [r7, #8]
 800f38a:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 800f38e:	22c0      	movs	r2, #192	@ 0xc0
 800f390:	2100      	movs	r1, #0
 800f392:	4618      	mov	r0, r3
 800f394:	f011 ff9d 	bl	80212d2 <memset>
                ( void ) memset( &pxSocket->u.xTCP.bits, 0, sizeof( pxSocket->u.xTCP.bits ) );
 800f398:	68bb      	ldr	r3, [r7, #8]
 800f39a:	3368      	adds	r3, #104	@ 0x68
 800f39c:	2204      	movs	r2, #4
 800f39e:	2100      	movs	r1, #0
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	f011 ff96 	bl	80212d2 <memset>

                /* Now set the bReuseSocket flag again, because the bits have
                 * just been cleared. */
                pxSocket->u.xTCP.bits.bReuseSocket = pdTRUE;
 800f3a6:	68ba      	ldr	r2, [r7, #8]
 800f3a8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f3ac:	f043 0308 	orr.w	r3, r3, #8
 800f3b0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            }

            vTCPStateChange( pxSocket, eTCP_LISTEN );
 800f3b4:	2101      	movs	r1, #1
 800f3b6:	68b8      	ldr	r0, [r7, #8]
 800f3b8:	f001 f8a2 	bl	8010500 <vTCPStateChange>
        }

        return xResult;
 800f3bc:	68fb      	ldr	r3, [r7, #12]
    }
 800f3be:	4618      	mov	r0, r3
 800f3c0:	3710      	adds	r7, #16
 800f3c2:	46bd      	mov	sp, r7
 800f3c4:	bd80      	pop	{r7, pc}

0800f3c6 <FreeRTOS_shutdown>:
 *
 * @return 0 on successful shutdown or else a negative error code.
 */
    BaseType_t FreeRTOS_shutdown( Socket_t xSocket,
                                  BaseType_t xHow )
    {
 800f3c6:	b580      	push	{r7, lr}
 800f3c8:	b084      	sub	sp, #16
 800f3ca:	af00      	add	r7, sp, #0
 800f3cc:	6078      	str	r0, [r7, #4]
 800f3ce:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxSocket = ( FreeRTOS_Socket_t * ) xSocket;
 800f3d0:	687b      	ldr	r3, [r7, #4]
 800f3d2:	60bb      	str	r3, [r7, #8]
        BaseType_t xResult;

        if( prvValidSocket( pxSocket, FREERTOS_IPPROTO_TCP, pdTRUE ) == pdFALSE )
 800f3d4:	2201      	movs	r2, #1
 800f3d6:	2106      	movs	r1, #6
 800f3d8:	68b8      	ldr	r0, [r7, #8]
 800f3da:	f7fd fff1 	bl	800d3c0 <prvValidSocket>
 800f3de:	4603      	mov	r3, r0
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	d103      	bne.n	800f3ec <FreeRTOS_shutdown+0x26>
        {
            /*_RB_ Is this comment correct?  The socket is not of a type that
             * supports the listen() operation. */
            xResult = -pdFREERTOS_ERRNO_EOPNOTSUPP;
 800f3e4:	f06f 035e 	mvn.w	r3, #94	@ 0x5e
 800f3e8:	60fb      	str	r3, [r7, #12]
 800f3ea:	e018      	b.n	800f41e <FreeRTOS_shutdown+0x58>
        }
        else if( pxSocket->u.xTCP.eTCPState != eESTABLISHED )
 800f3ec:	68bb      	ldr	r3, [r7, #8]
 800f3ee:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f3f2:	2b05      	cmp	r3, #5
 800f3f4:	d003      	beq.n	800f3fe <FreeRTOS_shutdown+0x38>
        {
            /* The socket is not connected. */
            xResult = -pdFREERTOS_ERRNO_ENOTCONN;
 800f3f6:	f06f 037f 	mvn.w	r3, #127	@ 0x7f
 800f3fa:	60fb      	str	r3, [r7, #12]
 800f3fc:	e00f      	b.n	800f41e <FreeRTOS_shutdown+0x58>
        }
        else
        {
            pxSocket->u.xTCP.bits.bUserShutdown = pdTRUE_UNSIGNED;
 800f3fe:	68ba      	ldr	r2, [r7, #8]
 800f400:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f404:	f043 0320 	orr.w	r3, r3, #32
 800f408:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            /* Let the IP-task perform the shutdown of the connection. */
            pxSocket->u.xTCP.usTimeout = 1U;
 800f40c:	68bb      	ldr	r3, [r7, #8]
 800f40e:	2201      	movs	r2, #1
 800f410:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f414:	2006      	movs	r0, #6
 800f416:	f7f9 fbfd 	bl	8008c14 <xSendEventToIPTask>
            xResult = 0;
 800f41a:	2300      	movs	r3, #0
 800f41c:	60fb      	str	r3, [r7, #12]
        }

        ( void ) xHow;

        return xResult;
 800f41e:	68fb      	ldr	r3, [r7, #12]
    }
 800f420:	4618      	mov	r0, r3
 800f422:	3710      	adds	r7, #16
 800f424:	46bd      	mov	sp, r7
 800f426:	bd80      	pop	{r7, pc}

0800f428 <xTCPTimerCheck>:
 * @param[in] xWillSleep Whether the calling task is going to sleep.
 *
 * @return Minimum amount of time before the timer shall expire.
 */
    TickType_t xTCPTimerCheck( BaseType_t xWillSleep )
    {
 800f428:	b580      	push	{r7, lr}
 800f42a:	b08a      	sub	sp, #40	@ 0x28
 800f42c:	af00      	add	r7, sp, #0
 800f42e:	6078      	str	r0, [r7, #4]
        FreeRTOS_Socket_t * pxSocket;
        TickType_t xShortest = pdMS_TO_TICKS( ( TickType_t ) ipTCP_TIMER_PERIOD_MS );
 800f430:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800f434:	627b      	str	r3, [r7, #36]	@ 0x24
        TickType_t xNow = xTaskGetTickCount();
 800f436:	f7f4 fc1f 	bl	8003c78 <xTaskGetTickCount>
 800f43a:	61b8      	str	r0, [r7, #24]
        static TickType_t xLastTime = 0U;
        TickType_t xDelta = xNow - xLastTime;
 800f43c:	4b32      	ldr	r3, [pc, #200]	@ (800f508 <xTCPTimerCheck+0xe0>)
 800f43e:	681b      	ldr	r3, [r3, #0]
 800f440:	69ba      	ldr	r2, [r7, #24]
 800f442:	1ad3      	subs	r3, r2, r3
 800f444:	623b      	str	r3, [r7, #32]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f446:	4b31      	ldr	r3, [pc, #196]	@ (800f50c <xTCPTimerCheck+0xe4>)
 800f448:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800f44a:	4b31      	ldr	r3, [pc, #196]	@ (800f510 <xTCPTimerCheck+0xe8>)
 800f44c:	68db      	ldr	r3, [r3, #12]
 800f44e:	61fb      	str	r3, [r7, #28]

        xLastTime = xNow;
 800f450:	4a2d      	ldr	r2, [pc, #180]	@ (800f508 <xTCPTimerCheck+0xe0>)
 800f452:	69bb      	ldr	r3, [r7, #24]
 800f454:	6013      	str	r3, [r2, #0]

        if( xDelta == 0U )
 800f456:	6a3b      	ldr	r3, [r7, #32]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d14b      	bne.n	800f4f4 <xTCPTimerCheck+0xcc>
        {
            xDelta = 1U;
 800f45c:	2301      	movs	r3, #1
 800f45e:	623b      	str	r3, [r7, #32]
        }

        while( pxIterator != pxEnd )
 800f460:	e048      	b.n	800f4f4 <xTCPTimerCheck+0xcc>
        {
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f462:	69fb      	ldr	r3, [r7, #28]
 800f464:	68db      	ldr	r3, [r3, #12]
 800f466:	613b      	str	r3, [r7, #16]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 800f468:	69fb      	ldr	r3, [r7, #28]
 800f46a:	685b      	ldr	r3, [r3, #4]
 800f46c:	61fb      	str	r3, [r7, #28]

            /* Sockets with 'timeout == 0' do not need any regular attention. */
            if( pxSocket->u.xTCP.usTimeout == 0U )
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f474:	2b00      	cmp	r3, #0
 800f476:	d03a      	beq.n	800f4ee <xTCPTimerCheck+0xc6>
            {
                continue;
            }

            if( xDelta < ( TickType_t ) pxSocket->u.xTCP.usTimeout )
 800f478:	693b      	ldr	r3, [r7, #16]
 800f47a:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f47e:	461a      	mov	r2, r3
 800f480:	6a3b      	ldr	r3, [r7, #32]
 800f482:	4293      	cmp	r3, r2
 800f484:	d20a      	bcs.n	800f49c <xTCPTimerCheck+0x74>
            {
                pxSocket->u.xTCP.usTimeout = ( uint16_t ) ( ( ( TickType_t ) pxSocket->u.xTCP.usTimeout ) - xDelta );
 800f486:	693b      	ldr	r3, [r7, #16]
 800f488:	f8b3 2070 	ldrh.w	r2, [r3, #112]	@ 0x70
 800f48c:	6a3b      	ldr	r3, [r7, #32]
 800f48e:	b29b      	uxth	r3, r3
 800f490:	1ad3      	subs	r3, r2, r3
 800f492:	b29a      	uxth	r2, r3
 800f494:	693b      	ldr	r3, [r7, #16]
 800f496:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 800f49a:	e00a      	b.n	800f4b2 <xTCPTimerCheck+0x8a>
            }
            else
            {
                BaseType_t xRc;

                pxSocket->u.xTCP.usTimeout = 0U;
 800f49c:	693b      	ldr	r3, [r7, #16]
 800f49e:	2200      	movs	r2, #0
 800f4a0:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                xRc = xTCPSocketCheck( pxSocket );
 800f4a4:	6938      	ldr	r0, [r7, #16]
 800f4a6:	f000 ff33 	bl	8010310 <xTCPSocketCheck>
 800f4aa:	60f8      	str	r0, [r7, #12]

                /* Within this function, the socket might want to send a delayed
                 * ack or send out data or whatever it needs to do. */
                if( xRc < 0 )
 800f4ac:	68fb      	ldr	r3, [r7, #12]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	db1f      	blt.n	800f4f2 <xTCPTimerCheck+0xca>
            }

            /* In xEventBits the driver may indicate that the socket has
             * important events for the user.  These are only done just before the
             * IP-task goes to sleep. */
            if( pxSocket->xEventBits != 0U )
 800f4b2:	693b      	ldr	r3, [r7, #16]
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	2b00      	cmp	r3, #0
 800f4b8:	d008      	beq.n	800f4cc <xTCPTimerCheck+0xa4>
            {
                if( xWillSleep != pdFALSE )
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	2b00      	cmp	r3, #0
 800f4be:	d003      	beq.n	800f4c8 <xTCPTimerCheck+0xa0>
                {
                    /* The IP-task is about to go to sleep, so messages can be
                     * sent to the socket owners. */
                    vSocketWakeUpUser( pxSocket );
 800f4c0:	6938      	ldr	r0, [r7, #16]
 800f4c2:	f7ff fa8e 	bl	800e9e2 <vSocketWakeUpUser>
 800f4c6:	e001      	b.n	800f4cc <xTCPTimerCheck+0xa4>
                }
                else
                {
                    /* Or else make sure this will be called again to wake-up
                     * the sockets' owner. */
                    xShortest = ( TickType_t ) 0;
 800f4c8:	2300      	movs	r3, #0
 800f4ca:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            if( ( pxSocket->u.xTCP.usTimeout != 0U ) && ( xShortest > ( TickType_t ) pxSocket->u.xTCP.usTimeout ) )
 800f4cc:	693b      	ldr	r3, [r7, #16]
 800f4ce:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f4d2:	2b00      	cmp	r3, #0
 800f4d4:	d00e      	beq.n	800f4f4 <xTCPTimerCheck+0xcc>
 800f4d6:	693b      	ldr	r3, [r7, #16]
 800f4d8:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f4dc:	461a      	mov	r2, r3
 800f4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f4e0:	4293      	cmp	r3, r2
 800f4e2:	d907      	bls.n	800f4f4 <xTCPTimerCheck+0xcc>
            {
                xShortest = ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 800f4e4:	693b      	ldr	r3, [r7, #16]
 800f4e6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 800f4ea:	627b      	str	r3, [r7, #36]	@ 0x24
 800f4ec:	e002      	b.n	800f4f4 <xTCPTimerCheck+0xcc>
                continue;
 800f4ee:	bf00      	nop
 800f4f0:	e000      	b.n	800f4f4 <xTCPTimerCheck+0xcc>
                    continue;
 800f4f2:	bf00      	nop
        while( pxIterator != pxEnd )
 800f4f4:	69fa      	ldr	r2, [r7, #28]
 800f4f6:	697b      	ldr	r3, [r7, #20]
 800f4f8:	429a      	cmp	r2, r3
 800f4fa:	d1b2      	bne.n	800f462 <xTCPTimerCheck+0x3a>
            }
        }

        return xShortest;
 800f4fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 800f4fe:	4618      	mov	r0, r3
 800f500:	3728      	adds	r7, #40	@ 0x28
 800f502:	46bd      	mov	sp, r7
 800f504:	bd80      	pop	{r7, pc}
 800f506:	bf00      	nop
 800f508:	20001318 	.word	0x20001318
 800f50c:	2000130c 	.word	0x2000130c
 800f510:	20001304 	.word	0x20001304

0800f514 <pxTCPSocketLookup>:
 */
    FreeRTOS_Socket_t * pxTCPSocketLookup( uint32_t ulLocalIP,
                                           UBaseType_t uxLocalPort,
                                           IPv46_Address_t xRemoteIP,
                                           UBaseType_t uxRemotePort )
    {
 800f514:	b082      	sub	sp, #8
 800f516:	b580      	push	{r7, lr}
 800f518:	b088      	sub	sp, #32
 800f51a:	af00      	add	r7, sp, #0
 800f51c:	6078      	str	r0, [r7, #4]
 800f51e:	6039      	str	r1, [r7, #0]
 800f520:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f524:	e881 000c 	stmia.w	r1, {r2, r3}
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxResult = NULL, * pxListenSocket = NULL;
 800f528:	2300      	movs	r3, #0
 800f52a:	61bb      	str	r3, [r7, #24]
 800f52c:	2300      	movs	r3, #0
 800f52e:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800f530:	4b23      	ldr	r3, [pc, #140]	@ (800f5c0 <pxTCPSocketLookup+0xac>)
 800f532:	613b      	str	r3, [r7, #16]

        ( void ) ulLocalIP;

        for( pxIterator = listGET_NEXT( pxEnd );
 800f534:	693b      	ldr	r3, [r7, #16]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	61fb      	str	r3, [r7, #28]
 800f53a:	e02e      	b.n	800f59a <pxTCPSocketLookup+0x86>
             pxIterator != pxEnd;
             pxIterator = listGET_NEXT( pxIterator ) )
        {
            FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800f53c:	69fb      	ldr	r3, [r7, #28]
 800f53e:	68db      	ldr	r3, [r3, #12]
 800f540:	60fb      	str	r3, [r7, #12]

            if( pxSocket->usLocalPort == ( uint16_t ) uxLocalPort )
 800f542:	68fb      	ldr	r3, [r7, #12]
 800f544:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 800f546:	683b      	ldr	r3, [r7, #0]
 800f548:	b29b      	uxth	r3, r3
 800f54a:	429a      	cmp	r2, r3
 800f54c:	d122      	bne.n	800f594 <pxTCPSocketLookup+0x80>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800f54e:	68fb      	ldr	r3, [r7, #12]
 800f550:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f554:	2b01      	cmp	r3, #1
 800f556:	d102      	bne.n	800f55e <pxTCPSocketLookup+0x4a>
                {
                    /* If this is a socket listening to uxLocalPort, remember it
                     * in case there is no perfect match. */
                    pxListenSocket = pxSocket;
 800f558:	68fb      	ldr	r3, [r7, #12]
 800f55a:	617b      	str	r3, [r7, #20]
 800f55c:	e01a      	b.n	800f594 <pxTCPSocketLookup+0x80>
                }
                else if( pxSocket->u.xTCP.usRemotePort == ( uint16_t ) uxRemotePort )
 800f55e:	68fb      	ldr	r3, [r7, #12]
 800f560:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 800f564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800f566:	b29b      	uxth	r3, r3
 800f568:	429a      	cmp	r2, r3
 800f56a:	d113      	bne.n	800f594 <pxTCPSocketLookup+0x80>
                {
                    if( xRemoteIP.xIs_IPv6 != pdFALSE )
 800f56c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800f56e:	2b00      	cmp	r3, #0
 800f570:	d006      	beq.n	800f580 <pxTCPSocketLookup+0x6c>
                    {
                        #if ( ipconfigUSE_IPv6 != 0 )
                            pxResult = pxTCPSocketLookup_IPv6( pxSocket, &xRemoteIP );
 800f572:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 800f576:	68f8      	ldr	r0, [r7, #12]
 800f578:	f7fb f9d4 	bl	800a924 <pxTCPSocketLookup_IPv6>
 800f57c:	61b8      	str	r0, [r7, #24]
 800f57e:	e006      	b.n	800f58e <pxTCPSocketLookup+0x7a>
                        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
                    }
                    else
                    {
                        if( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 == xRemoteIP.xIPAddress.ulIP_IPv4 )
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800f584:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f586:	429a      	cmp	r2, r3
 800f588:	d101      	bne.n	800f58e <pxTCPSocketLookup+0x7a>
                        {
                            /* For sockets not in listening mode, find a match with
                             * xLocalPort, ulRemoteIP AND xRemotePort. */
                            pxResult = pxSocket;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	61bb      	str	r3, [r7, #24]
                        }
                    }

                    if( pxResult != NULL )
 800f58e:	69bb      	ldr	r3, [r7, #24]
 800f590:	2b00      	cmp	r3, #0
 800f592:	d107      	bne.n	800f5a4 <pxTCPSocketLookup+0x90>
             pxIterator = listGET_NEXT( pxIterator ) )
 800f594:	69fb      	ldr	r3, [r7, #28]
 800f596:	685b      	ldr	r3, [r3, #4]
 800f598:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEnd;
 800f59a:	69fa      	ldr	r2, [r7, #28]
 800f59c:	693b      	ldr	r3, [r7, #16]
 800f59e:	429a      	cmp	r2, r3
 800f5a0:	d1cc      	bne.n	800f53c <pxTCPSocketLookup+0x28>
 800f5a2:	e000      	b.n	800f5a6 <pxTCPSocketLookup+0x92>
                    {
                        break;
 800f5a4:	bf00      	nop
                    /* This 'pxSocket' doesn't match. */
                }
            }
        }

        if( pxResult == NULL )
 800f5a6:	69bb      	ldr	r3, [r7, #24]
 800f5a8:	2b00      	cmp	r3, #0
 800f5aa:	d101      	bne.n	800f5b0 <pxTCPSocketLookup+0x9c>
        {
            /* An exact match was not found, maybe a listening socket was
             * found. */
            pxResult = pxListenSocket;
 800f5ac:	697b      	ldr	r3, [r7, #20]
 800f5ae:	61bb      	str	r3, [r7, #24]
        }

        return pxResult;
 800f5b0:	69bb      	ldr	r3, [r7, #24]
    }
 800f5b2:	4618      	mov	r0, r3
 800f5b4:	3720      	adds	r7, #32
 800f5b6:	46bd      	mov	sp, r7
 800f5b8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800f5bc:	b002      	add	sp, #8
 800f5be:	4770      	bx	lr
 800f5c0:	2000130c 	.word	0x2000130c

0800f5c4 <prvTCPCreateStream>:
 *
 * @return The stream buffer.
 */
    static StreamBuffer_t * prvTCPCreateStream( FreeRTOS_Socket_t * pxSocket,
                                                BaseType_t xIsInputStream )
    {
 800f5c4:	b580      	push	{r7, lr}
 800f5c6:	b088      	sub	sp, #32
 800f5c8:	af00      	add	r7, sp, #0
 800f5ca:	6078      	str	r0, [r7, #4]
 800f5cc:	6039      	str	r1, [r7, #0]
        size_t uxLength;
        size_t uxSize;

        /* Now that a stream is created, the maximum size is fixed before
         * creation, it could still be changed with setsockopt(). */
        if( xIsInputStream != pdFALSE )
 800f5ce:	683b      	ldr	r3, [r7, #0]
 800f5d0:	2b00      	cmp	r3, #0
 800f5d2:	d048      	beq.n	800f666 <prvTCPCreateStream+0xa2>
        {
            size_t uxLittlePerc = sock20_PERCENT;
 800f5d4:	2314      	movs	r3, #20
 800f5d6:	61bb      	str	r3, [r7, #24]
            size_t uxEnoughPerc = sock80_PERCENT;
 800f5d8:	2350      	movs	r3, #80	@ 0x50
 800f5da:	617b      	str	r3, [r7, #20]
            size_t uxSegmentCount = pxSocket->u.xTCP.uxRxStreamSize / pxSocket->u.xTCP.usMSS;
 800f5dc:	687b      	ldr	r3, [r7, #4]
 800f5de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f5e2:	687a      	ldr	r2, [r7, #4]
 800f5e4:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 800f5e8:	fbb3 f3f2 	udiv	r3, r3, r2
 800f5ec:	613b      	str	r3, [r7, #16]
                { 50U, 100U }, /* 2 segments. */
                { 34U, 100U }, /* 3 segments. */
                { 25U, 100U }, /* 4 segments. */
            };

            if( ( uxSegmentCount > 0U ) &&
 800f5ee:	693b      	ldr	r3, [r7, #16]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d00f      	beq.n	800f614 <prvTCPCreateStream+0x50>
 800f5f4:	693b      	ldr	r3, [r7, #16]
 800f5f6:	2b04      	cmp	r3, #4
 800f5f8:	d80c      	bhi.n	800f614 <prvTCPCreateStream+0x50>
                ( uxSegmentCount <= ARRAY_USIZE( xPercTable ) ) )
            {
                uxLittlePerc = xPercTable[ uxSegmentCount - 1U ].uxPercLittle;
 800f5fa:	693b      	ldr	r3, [r7, #16]
 800f5fc:	3b01      	subs	r3, #1
 800f5fe:	4a40      	ldr	r2, [pc, #256]	@ (800f700 <prvTCPCreateStream+0x13c>)
 800f600:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f604:	61bb      	str	r3, [r7, #24]
                uxEnoughPerc = xPercTable[ uxSegmentCount - 1U ].uxPercEnough;
 800f606:	693b      	ldr	r3, [r7, #16]
 800f608:	3b01      	subs	r3, #1
 800f60a:	4a3d      	ldr	r2, [pc, #244]	@ (800f700 <prvTCPCreateStream+0x13c>)
 800f60c:	00db      	lsls	r3, r3, #3
 800f60e:	4413      	add	r3, r2
 800f610:	685b      	ldr	r3, [r3, #4]
 800f612:	617b      	str	r3, [r7, #20]
            }

            uxLength = pxSocket->u.xTCP.uxRxStreamSize;
 800f614:	687b      	ldr	r3, [r7, #4]
 800f616:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f61a:	61fb      	str	r3, [r7, #28]

            if( pxSocket->u.xTCP.uxLittleSpace == 0U )
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f622:	2b00      	cmp	r3, #0
 800f624:	d10c      	bne.n	800f640 <prvTCPCreateStream+0x7c>
            {
                pxSocket->u.xTCP.uxLittleSpace = ( uxLittlePerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800f626:	687b      	ldr	r3, [r7, #4]
 800f628:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f62c:	69ba      	ldr	r2, [r7, #24]
 800f62e:	fb02 f303 	mul.w	r3, r2, r3
 800f632:	4a34      	ldr	r2, [pc, #208]	@ (800f704 <prvTCPCreateStream+0x140>)
 800f634:	fba2 2303 	umull	r2, r3, r2, r3
 800f638:	095a      	lsrs	r2, r3, #5
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
            }

            if( pxSocket->u.xTCP.uxEnoughSpace == 0U )
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800f646:	2b00      	cmp	r3, #0
 800f648:	d111      	bne.n	800f66e <prvTCPCreateStream+0xaa>
            {
                pxSocket->u.xTCP.uxEnoughSpace = ( uxEnoughPerc * pxSocket->u.xTCP.uxRxStreamSize ) / sock100_PERCENT;
 800f64a:	687b      	ldr	r3, [r7, #4]
 800f64c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800f650:	697a      	ldr	r2, [r7, #20]
 800f652:	fb02 f303 	mul.w	r3, r2, r3
 800f656:	4a2b      	ldr	r2, [pc, #172]	@ (800f704 <prvTCPCreateStream+0x140>)
 800f658:	fba2 2303 	umull	r2, r3, r2, r3
 800f65c:	095a      	lsrs	r2, r3, #5
 800f65e:	687b      	ldr	r3, [r7, #4]
 800f660:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
 800f664:	e003      	b.n	800f66e <prvTCPCreateStream+0xaa>
            }
        }
        else
        {
            uxLength = pxSocket->u.xTCP.uxTxStreamSize;
 800f666:	687b      	ldr	r3, [r7, #4]
 800f668:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f66c:	61fb      	str	r3, [r7, #28]
        }

        /* Add an extra 4 (or 8) bytes. */
        uxLength += sizeof( size_t );
 800f66e:	69fb      	ldr	r3, [r7, #28]
 800f670:	3304      	adds	r3, #4
 800f672:	61fb      	str	r3, [r7, #28]

        /* And make the length a multiple of sizeof( size_t ). */
        uxLength &= ~( sizeof( size_t ) - 1U );
 800f674:	69fb      	ldr	r3, [r7, #28]
 800f676:	f023 0303 	bic.w	r3, r3, #3
 800f67a:	61fb      	str	r3, [r7, #28]

        uxSize = ( sizeof( *pxBuffer ) + uxLength ) - sizeof( pxBuffer->ucArray );
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	3314      	adds	r3, #20
 800f680:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 4.12.1 [Use of dynamic memory]. */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#directive-412. */
        /* coverity[misra_c_2012_directive_4_12_violation] */
        pxBuffer = ( ( StreamBuffer_t * ) pvPortMallocLarge( uxSize ) );
 800f682:	68f8      	ldr	r0, [r7, #12]
 800f684:	f7f6 f966 	bl	8005954 <pvPortMalloc>
 800f688:	60b8      	str	r0, [r7, #8]

        if( pxBuffer == NULL )
 800f68a:	68bb      	ldr	r3, [r7, #8]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d10e      	bne.n	800f6ae <prvTCPCreateStream+0xea>
        {
            FreeRTOS_debug_printf( ( "prvTCPCreateStream: malloc failed\n" ) );
 800f690:	481d      	ldr	r0, [pc, #116]	@ (800f708 <prvTCPCreateStream+0x144>)
 800f692:	f011 faf5 	bl	8020c80 <lUDPLoggingPrintf>
            pxSocket->u.xTCP.bits.bMallocError = pdTRUE_UNSIGNED;
 800f696:	687a      	ldr	r2, [r7, #4]
 800f698:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 800f69c:	f043 0308 	orr.w	r3, r3, #8
 800f6a0:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 800f6a4:	2108      	movs	r1, #8
 800f6a6:	6878      	ldr	r0, [r7, #4]
 800f6a8:	f000 ff2a 	bl	8010500 <vTCPStateChange>
 800f6ac:	e022      	b.n	800f6f4 <prvTCPCreateStream+0x130>
        }
        else
        {
            /* Clear the markers of the stream */
            ( void ) memset( pxBuffer, 0, sizeof( *pxBuffer ) - sizeof( pxBuffer->ucArray ) );
 800f6ae:	2214      	movs	r2, #20
 800f6b0:	2100      	movs	r1, #0
 800f6b2:	68b8      	ldr	r0, [r7, #8]
 800f6b4:	f011 fe0d 	bl	80212d2 <memset>
            pxBuffer->LENGTH = ( size_t ) uxLength;
 800f6b8:	68bb      	ldr	r3, [r7, #8]
 800f6ba:	69fa      	ldr	r2, [r7, #28]
 800f6bc:	611a      	str	r2, [r3, #16]

            if( xTCPWindowLoggingLevel != 0 )
 800f6be:	4b13      	ldr	r3, [pc, #76]	@ (800f70c <prvTCPCreateStream+0x148>)
 800f6c0:	681b      	ldr	r3, [r3, #0]
 800f6c2:	2b00      	cmp	r3, #0
 800f6c4:	d00a      	beq.n	800f6dc <prvTCPCreateStream+0x118>
            {
                FreeRTOS_debug_printf( ( "prvTCPCreateStream: %cxStream created %u bytes (total %u)\n", ( xIsInputStream != 0 ) ? 'R' : 'T', ( unsigned ) uxLength, ( unsigned ) uxSize ) );
 800f6c6:	683b      	ldr	r3, [r7, #0]
 800f6c8:	2b00      	cmp	r3, #0
 800f6ca:	d001      	beq.n	800f6d0 <prvTCPCreateStream+0x10c>
 800f6cc:	2152      	movs	r1, #82	@ 0x52
 800f6ce:	e000      	b.n	800f6d2 <prvTCPCreateStream+0x10e>
 800f6d0:	2154      	movs	r1, #84	@ 0x54
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	69fa      	ldr	r2, [r7, #28]
 800f6d6:	480e      	ldr	r0, [pc, #56]	@ (800f710 <prvTCPCreateStream+0x14c>)
 800f6d8:	f011 fad2 	bl	8020c80 <lUDPLoggingPrintf>
            }

            if( xIsInputStream != 0 )
 800f6dc:	683b      	ldr	r3, [r7, #0]
 800f6de:	2b00      	cmp	r3, #0
 800f6e0:	d004      	beq.n	800f6ec <prvTCPCreateStream+0x128>
            {
                iptraceMEM_STATS_CREATE( tcpRX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.rxStream = pxBuffer;
 800f6e2:	687b      	ldr	r3, [r7, #4]
 800f6e4:	68ba      	ldr	r2, [r7, #8]
 800f6e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
 800f6ea:	e003      	b.n	800f6f4 <prvTCPCreateStream+0x130>
            }
            else
            {
                iptraceMEM_STATS_CREATE( tcpTX_STREAM_BUFFER, pxBuffer, uxSize );
                pxSocket->u.xTCP.txStream = pxBuffer;
 800f6ec:	687b      	ldr	r3, [r7, #4]
 800f6ee:	68ba      	ldr	r2, [r7, #8]
 800f6f0:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
            }
        }

        return pxBuffer;
 800f6f4:	68bb      	ldr	r3, [r7, #8]
    }
 800f6f6:	4618      	mov	r0, r3
 800f6f8:	3720      	adds	r7, #32
 800f6fa:	46bd      	mov	sp, r7
 800f6fc:	bd80      	pop	{r7, pc}
 800f6fe:	bf00      	nop
 800f700:	08026398 	.word	0x08026398
 800f704:	51eb851f 	.word	0x51eb851f
 800f708:	08024a94 	.word	0x08024a94
 800f70c:	20001348 	.word	0x20001348
 800f710:	08024ab8 	.word	0x08024ab8

0800f714 <vTCPAddRxdata_Callback>:
 * @param[in] ulByteCount The number of bytes that were received.
 */
    static void vTCPAddRxdata_Callback( FreeRTOS_Socket_t * pxSocket,
                                        const uint8_t * pcData,
                                        uint32_t ulByteCount )
    {
 800f714:	b580      	push	{r7, lr}
 800f716:	b08a      	sub	sp, #40	@ 0x28
 800f718:	af02      	add	r7, sp, #8
 800f71a:	60f8      	str	r0, [r7, #12]
 800f71c:	60b9      	str	r1, [r7, #8]
 800f71e:	607a      	str	r2, [r7, #4]
        const uint8_t * pucBuffer = pcData;
 800f720:	68bb      	ldr	r3, [r7, #8]
 800f722:	61fb      	str	r3, [r7, #28]

        /* The socket owner has installed an OnReceive handler. Pass the
         * Rx data, without copying from the rxStream, to the user. */
        for( ; ; )
        {
            uint8_t * ucReadPtr = NULL;
 800f724:	2300      	movs	r3, #0
 800f726:	617b      	str	r3, [r7, #20]
            uint32_t ulCount;

            if( pucBuffer != NULL )
 800f728:	69fb      	ldr	r3, [r7, #28]
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d006      	beq.n	800f73c <vTCPAddRxdata_Callback+0x28>
            {
                ucReadPtr = ( uint8_t * ) pucBuffer;
 800f72e:	69fb      	ldr	r3, [r7, #28]
 800f730:	617b      	str	r3, [r7, #20]
                ulCount = ulByteCount;
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	61bb      	str	r3, [r7, #24]
                pucBuffer = NULL;
 800f736:	2300      	movs	r3, #0
 800f738:	61fb      	str	r3, [r7, #28]
 800f73a:	e009      	b.n	800f750 <vTCPAddRxdata_Callback+0x3c>
            }
            else
            {
                ulCount = ( uint32_t ) uxStreamBufferGetPtr( pxSocket->u.xTCP.rxStream, &( ucReadPtr ) );
 800f73c:	68fb      	ldr	r3, [r7, #12]
 800f73e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f742:	f107 0214 	add.w	r2, r7, #20
 800f746:	4611      	mov	r1, r2
 800f748:	4618      	mov	r0, r3
 800f74a:	f000 fc92 	bl	8010072 <uxStreamBufferGetPtr>
 800f74e:	61b8      	str	r0, [r7, #24]
            }

            if( ulCount == 0U )
 800f750:	69bb      	ldr	r3, [r7, #24]
 800f752:	2b00      	cmp	r3, #0
 800f754:	d011      	beq.n	800f77a <vTCPAddRxdata_Callback+0x66>
                break;
            }

            /* For advanced users only: here a pointer to the RX-stream of a socket
             * is passed to an application hook. */
            ( void ) pxSocket->u.xTCP.pxHandleReceive( pxSocket, ucReadPtr, ( size_t ) ulCount );
 800f756:	68fb      	ldr	r3, [r7, #12]
 800f758:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f75c:	6979      	ldr	r1, [r7, #20]
 800f75e:	69ba      	ldr	r2, [r7, #24]
 800f760:	68f8      	ldr	r0, [r7, #12]
 800f762:	4798      	blx	r3
            /* Forward the tail in the RX stream. */
            ( void ) uxStreamBufferGet( pxSocket->u.xTCP.rxStream, 0U, NULL, ( size_t ) ulCount, pdFALSE );
 800f764:	68fb      	ldr	r3, [r7, #12]
 800f766:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
 800f76a:	2300      	movs	r3, #0
 800f76c:	9300      	str	r3, [sp, #0]
 800f76e:	69bb      	ldr	r3, [r7, #24]
 800f770:	2200      	movs	r2, #0
 800f772:	2100      	movs	r1, #0
 800f774:	f000 fd1d 	bl	80101b2 <uxStreamBufferGet>
        {
 800f778:	e7d4      	b.n	800f724 <vTCPAddRxdata_Callback+0x10>
        }
    }
 800f77a:	bf00      	nop
 800f77c:	3720      	adds	r7, #32
 800f77e:	46bd      	mov	sp, r7
 800f780:	bd80      	pop	{r7, pc}

0800f782 <vTCPAddRxdata_Stored>:
 *        RX-stream. When the space is dropped below a threshold, it may set the
 *        bit field 'bLowWater'. Also the socket's events bits for READ will be set.
 * @param[in] pxSocket the socket that has received new data.
 */
    static void vTCPAddRxdata_Stored( FreeRTOS_Socket_t * pxSocket )
    {
 800f782:	b580      	push	{r7, lr}
 800f784:	b084      	sub	sp, #16
 800f786:	af00      	add	r7, sp, #0
 800f788:	6078      	str	r0, [r7, #4]
        /* See if running out of space. */
        if( pxSocket->u.xTCP.bits.bLowWater == pdFALSE_UNSIGNED )
 800f78a:	687b      	ldr	r3, [r7, #4]
 800f78c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800f790:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 800f794:	b2db      	uxtb	r3, r3
 800f796:	2b00      	cmp	r3, #0
 800f798:	d121      	bne.n	800f7de <vTCPAddRxdata_Stored+0x5c>
        {
            size_t uxFrontSpace = uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f7a0:	4618      	mov	r0, r3
 800f7a2:	f000 fbd7 	bl	800ff54 <uxStreamBufferFrontSpace>
 800f7a6:	60f8      	str	r0, [r7, #12]

            if( uxFrontSpace <= pxSocket->u.xTCP.uxLittleSpace )
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800f7ae:	68fa      	ldr	r2, [r7, #12]
 800f7b0:	429a      	cmp	r2, r3
 800f7b2:	d814      	bhi.n	800f7de <vTCPAddRxdata_Stored+0x5c>
            {
                pxSocket->u.xTCP.bits.bLowWater = pdTRUE_UNSIGNED;
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 800f7ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7be:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 800f7c2:	687a      	ldr	r2, [r7, #4]
 800f7c4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800f7c8:	f043 0301 	orr.w	r3, r3, #1
 800f7cc:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* bLowWater was reached, send the changed window size. */
                pxSocket->u.xTCP.usTimeout = 1U;
 800f7d0:	687b      	ldr	r3, [r7, #4]
 800f7d2:	2201      	movs	r2, #1
 800f7d4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                ( void ) xSendEventToIPTask( eTCPTimerEvent );
 800f7d8:	2006      	movs	r0, #6
 800f7da:	f7f9 fa1b 	bl	8008c14 <xSendEventToIPTask>
            }
        }

        /* New incoming data is available, wake up the user.   User's
         * semaphores will be set just before the IP-task goes asleep. */
        pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_RECEIVE;
 800f7de:	687b      	ldr	r3, [r7, #4]
 800f7e0:	681b      	ldr	r3, [r3, #0]
 800f7e2:	f043 0201 	orr.w	r2, r3, #1
 800f7e6:	687b      	ldr	r3, [r7, #4]
 800f7e8:	601a      	str	r2, [r3, #0]

        #if ipconfigSUPPORT_SELECT_FUNCTION == 1
        {
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U )
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f7ee:	f003 0301 	and.w	r3, r3, #1
 800f7f2:	2b00      	cmp	r3, #0
 800f7f4:	d005      	beq.n	800f802 <vTCPAddRxdata_Stored+0x80>
            {
                pxSocket->xEventBits |= ( ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT );
 800f7f6:	687b      	ldr	r3, [r7, #4]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 800f7fe:	687b      	ldr	r3, [r7, #4]
 800f800:	601a      	str	r2, [r3, #0]
            }
        }
        #endif
    }
 800f802:	bf00      	nop
 800f804:	3710      	adds	r7, #16
 800f806:	46bd      	mov	sp, r7
 800f808:	bd80      	pop	{r7, pc}
	...

0800f80c <lTCPAddRxdata>:
 */
    int32_t lTCPAddRxdata( FreeRTOS_Socket_t * pxSocket,
                           size_t uxOffset,
                           const uint8_t * pcData,
                           uint32_t ulByteCount )
    {
 800f80c:	b5b0      	push	{r4, r5, r7, lr}
 800f80e:	b08c      	sub	sp, #48	@ 0x30
 800f810:	af04      	add	r7, sp, #16
 800f812:	60f8      	str	r0, [r7, #12]
 800f814:	60b9      	str	r1, [r7, #8]
 800f816:	607a      	str	r2, [r7, #4]
 800f818:	603b      	str	r3, [r7, #0]
        StreamBuffer_t * pxStream = pxSocket->u.xTCP.rxStream;
 800f81a:	68fb      	ldr	r3, [r7, #12]
 800f81c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f820:	61fb      	str	r3, [r7, #28]
        int32_t xResult = 0;
 800f822:	2300      	movs	r3, #0
 800f824:	61bb      	str	r3, [r7, #24]

        #if ( ipconfigUSE_CALLBACKS == 1 )
            BaseType_t bHasHandler = ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleReceive ) ? pdTRUE : pdFALSE;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 800f82c:	2b00      	cmp	r3, #0
 800f82e:	d001      	beq.n	800f834 <lTCPAddRxdata+0x28>
 800f830:	2301      	movs	r3, #1
 800f832:	e000      	b.n	800f836 <lTCPAddRxdata+0x2a>
 800f834:	2300      	movs	r3, #0
 800f836:	613b      	str	r3, [r7, #16]
            const uint8_t * pucBuffer = NULL;
 800f838:	2300      	movs	r3, #0
 800f83a:	617b      	str	r3, [r7, #20]
        /* int32_t uxStreamBufferAdd( pxBuffer, uxOffset, pucData, aCount )
         * if( pucData != NULL ) copy data the the buffer
         * if( pucData == NULL ) no copying, just advance rxHead
         * if( uxOffset != 0 ) Just store data which has come out-of-order
         * if( uxOffset == 0 ) Also advance rxHead */
        if( pxStream == NULL )
 800f83c:	69fb      	ldr	r3, [r7, #28]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d10a      	bne.n	800f858 <lTCPAddRxdata+0x4c>
        {
            pxStream = prvTCPCreateStream( pxSocket, pdTRUE );
 800f842:	2101      	movs	r1, #1
 800f844:	68f8      	ldr	r0, [r7, #12]
 800f846:	f7ff febd 	bl	800f5c4 <prvTCPCreateStream>
 800f84a:	61f8      	str	r0, [r7, #28]

            if( pxStream == NULL )
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	2b00      	cmp	r3, #0
 800f850:	d102      	bne.n	800f858 <lTCPAddRxdata+0x4c>
            {
                xResult = -1;
 800f852:	f04f 33ff 	mov.w	r3, #4294967295
 800f856:	61bb      	str	r3, [r7, #24]
            }
        }

        if( xResult >= 0 )
 800f858:	69bb      	ldr	r3, [r7, #24]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	db41      	blt.n	800f8e2 <lTCPAddRxdata+0xd6>
        {
            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( bHasHandler != pdFALSE ) && ( uxStreamBufferGetSize( pxStream ) == 0U ) && ( uxOffset == 0U ) && ( pcData != NULL ) )
 800f85e:	693b      	ldr	r3, [r7, #16]
 800f860:	2b00      	cmp	r3, #0
 800f862:	d00f      	beq.n	800f884 <lTCPAddRxdata+0x78>
 800f864:	69f8      	ldr	r0, [r7, #28]
 800f866:	f000 fb86 	bl	800ff76 <uxStreamBufferGetSize>
 800f86a:	4603      	mov	r3, r0
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d109      	bne.n	800f884 <lTCPAddRxdata+0x78>
 800f870:	68bb      	ldr	r3, [r7, #8]
 800f872:	2b00      	cmp	r3, #0
 800f874:	d106      	bne.n	800f884 <lTCPAddRxdata+0x78>
 800f876:	687b      	ldr	r3, [r7, #4]
 800f878:	2b00      	cmp	r3, #0
 800f87a:	d003      	beq.n	800f884 <lTCPAddRxdata+0x78>
                {
                    /* Data can be passed directly to the user because there is
                     * no data in the RX-stream, it the new data must be stored
                     * at offset zero, and a buffer 'pcData' is provided.
                     */
                    pucBuffer = pcData;
 800f87c:	687b      	ldr	r3, [r7, #4]
 800f87e:	617b      	str	r3, [r7, #20]

                    /* Zero-copy for call-back: no need to add the bytes to the
                     * stream, only the pointer will be advanced by uxStreamBufferAdd(). */
                    pcData = NULL;
 800f880:	2300      	movs	r3, #0
 800f882:	607b      	str	r3, [r7, #4]
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            xResult = ( int32_t ) uxStreamBufferAdd( pxStream, uxOffset, pcData, ( size_t ) ulByteCount );
 800f884:	683b      	ldr	r3, [r7, #0]
 800f886:	687a      	ldr	r2, [r7, #4]
 800f888:	68b9      	ldr	r1, [r7, #8]
 800f88a:	69f8      	ldr	r0, [r7, #28]
 800f88c:	f000 fc11 	bl	80100b2 <uxStreamBufferAdd>
 800f890:	4603      	mov	r3, r0
 800f892:	61bb      	str	r3, [r7, #24]

            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
            {
                if( xResult != ( int32_t ) ulByteCount )
 800f894:	683b      	ldr	r3, [r7, #0]
 800f896:	69ba      	ldr	r2, [r7, #24]
 800f898:	429a      	cmp	r2, r3
 800f89a:	d013      	beq.n	800f8c4 <lTCPAddRxdata+0xb8>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: at %u: %d/%u bytes (tail %u head %u space %u front %u)\n",
 800f89c:	69fb      	ldr	r3, [r7, #28]
 800f89e:	681c      	ldr	r4, [r3, #0]
 800f8a0:	69fb      	ldr	r3, [r7, #28]
 800f8a2:	689d      	ldr	r5, [r3, #8]
 800f8a4:	69f8      	ldr	r0, [r7, #28]
 800f8a6:	f000 fb55 	bl	800ff54 <uxStreamBufferFrontSpace>
 800f8aa:	4602      	mov	r2, r0
 800f8ac:	69fb      	ldr	r3, [r7, #28]
 800f8ae:	68db      	ldr	r3, [r3, #12]
 800f8b0:	9303      	str	r3, [sp, #12]
 800f8b2:	9202      	str	r2, [sp, #8]
 800f8b4:	9501      	str	r5, [sp, #4]
 800f8b6:	9400      	str	r4, [sp, #0]
 800f8b8:	683b      	ldr	r3, [r7, #0]
 800f8ba:	69ba      	ldr	r2, [r7, #24]
 800f8bc:	68b9      	ldr	r1, [r7, #8]
 800f8be:	480b      	ldr	r0, [pc, #44]	@ (800f8ec <lTCPAddRxdata+0xe0>)
 800f8c0:	f011 f9de 	bl	8020c80 <lUDPLoggingPrintf>
                                             ( unsigned int ) pxStream->uxFront ) );
                }
            }
            #endif /* ipconfigHAS_DEBUG_PRINTF */

            if( uxOffset == 0U )
 800f8c4:	68bb      	ldr	r3, [r7, #8]
 800f8c6:	2b00      	cmp	r3, #0
 800f8c8:	d10b      	bne.n	800f8e2 <lTCPAddRxdata+0xd6>
            {
                /* Data is being added to rxStream at the head (offs = 0) */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                    if( bHasHandler != pdFALSE )
 800f8ca:	693b      	ldr	r3, [r7, #16]
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d005      	beq.n	800f8dc <lTCPAddRxdata+0xd0>
                    {
                        vTCPAddRxdata_Callback( pxSocket, pucBuffer, ulByteCount );
 800f8d0:	683a      	ldr	r2, [r7, #0]
 800f8d2:	6979      	ldr	r1, [r7, #20]
 800f8d4:	68f8      	ldr	r0, [r7, #12]
 800f8d6:	f7ff ff1d 	bl	800f714 <vTCPAddRxdata_Callback>
 800f8da:	e002      	b.n	800f8e2 <lTCPAddRxdata+0xd6>
                    }
                    else
                #endif /* ipconfigUSE_CALLBACKS */
                {
                    vTCPAddRxdata_Stored( pxSocket );
 800f8dc:	68f8      	ldr	r0, [r7, #12]
 800f8de:	f7ff ff50 	bl	800f782 <vTCPAddRxdata_Stored>
                }
            }
        }

        return xResult;
 800f8e2:	69bb      	ldr	r3, [r7, #24]
    }
 800f8e4:	4618      	mov	r0, r3
 800f8e6:	3720      	adds	r7, #32
 800f8e8:	46bd      	mov	sp, r7
 800f8ea:	bdb0      	pop	{r4, r5, r7, pc}
 800f8ec:	08024af4 	.word	0x08024af4

0800f8f0 <FreeRTOS_tx_space>:
 * @param[in] xSocket the socket to be checked.
 *
 * @return The bytes that can be written. Or else an error code.
 */
    BaseType_t FreeRTOS_tx_space( ConstSocket_t xSocket )
    {
 800f8f0:	b580      	push	{r7, lr}
 800f8f2:	b084      	sub	sp, #16
 800f8f4:	af00      	add	r7, sp, #0
 800f8f6:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f8f8:	687b      	ldr	r3, [r7, #4]
 800f8fa:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f8fc:	68bb      	ldr	r3, [r7, #8]
 800f8fe:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f902:	2b06      	cmp	r3, #6
 800f904:	d003      	beq.n	800f90e <FreeRTOS_tx_space+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f906:	f06f 0315 	mvn.w	r3, #21
 800f90a:	60fb      	str	r3, [r7, #12]
 800f90c:	e011      	b.n	800f932 <FreeRTOS_tx_space+0x42>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800f90e:	68bb      	ldr	r3, [r7, #8]
 800f910:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f914:	2b00      	cmp	r3, #0
 800f916:	d008      	beq.n	800f92a <FreeRTOS_tx_space+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.txStream );
 800f918:	68bb      	ldr	r3, [r7, #8]
 800f91a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f91e:	4618      	mov	r0, r3
 800f920:	f000 fb07 	bl	800ff32 <uxStreamBufferGetSpace>
 800f924:	4603      	mov	r3, r0
 800f926:	60fb      	str	r3, [r7, #12]
 800f928:	e003      	b.n	800f932 <FreeRTOS_tx_space+0x42>
            }
            else
            {
                xReturn = ( BaseType_t ) pxSocket->u.xTCP.uxTxStreamSize;
 800f92a:	68bb      	ldr	r3, [r7, #8]
 800f92c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800f930:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800f932:	68fb      	ldr	r3, [r7, #12]
    }
 800f934:	4618      	mov	r0, r3
 800f936:	3710      	adds	r7, #16
 800f938:	46bd      	mov	sp, r7
 800f93a:	bd80      	pop	{r7, pc}

0800f93c <FreeRTOS_tx_size>:
 *
 * @return The number of bytes stored in the Tx buffer of the socket.
 *         Or an error code.
 */
    BaseType_t FreeRTOS_tx_size( ConstSocket_t xSocket )
    {
 800f93c:	b580      	push	{r7, lr}
 800f93e:	b084      	sub	sp, #16
 800f940:	af00      	add	r7, sp, #0
 800f942:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f944:	687b      	ldr	r3, [r7, #4]
 800f946:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f948:	68bb      	ldr	r3, [r7, #8]
 800f94a:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f94e:	2b06      	cmp	r3, #6
 800f950:	d003      	beq.n	800f95a <FreeRTOS_tx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f952:	f06f 0315 	mvn.w	r3, #21
 800f956:	60fb      	str	r3, [r7, #12]
 800f958:	e00f      	b.n	800f97a <FreeRTOS_tx_size+0x3e>
        }
        else
        {
            if( pxSocket->u.xTCP.txStream != NULL )
 800f95a:	68bb      	ldr	r3, [r7, #8]
 800f95c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f960:	2b00      	cmp	r3, #0
 800f962:	d008      	beq.n	800f976 <FreeRTOS_tx_size+0x3a>
            {
                xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.txStream );
 800f964:	68bb      	ldr	r3, [r7, #8]
 800f966:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800f96a:	4618      	mov	r0, r3
 800f96c:	f000 fb03 	bl	800ff76 <uxStreamBufferGetSize>
 800f970:	4603      	mov	r3, r0
 800f972:	60fb      	str	r3, [r7, #12]
 800f974:	e001      	b.n	800f97a <FreeRTOS_tx_size+0x3e>
            }
            else
            {
                xReturn = 0;
 800f976:	2300      	movs	r3, #0
 800f978:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 800f97a:	68fb      	ldr	r3, [r7, #12]
    }
 800f97c:	4618      	mov	r0, r3
 800f97e:	3710      	adds	r7, #16
 800f980:	46bd      	mov	sp, r7
 800f982:	bd80      	pop	{r7, pc}

0800f984 <FreeRTOS_issocketconnected>:
 * @param[in] xSocket The socket being checked.
 *
 * @return pdTRUE if TCP socket is connected.
 */
    BaseType_t FreeRTOS_issocketconnected( ConstSocket_t xSocket )
    {
 800f984:	b480      	push	{r7}
 800f986:	b085      	sub	sp, #20
 800f988:	af00      	add	r7, sp, #0
 800f98a:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f98c:	687b      	ldr	r3, [r7, #4]
 800f98e:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn = pdFALSE;
 800f990:	2300      	movs	r3, #0
 800f992:	60fb      	str	r3, [r7, #12]

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f994:	68bb      	ldr	r3, [r7, #8]
 800f996:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f99a:	2b06      	cmp	r3, #6
 800f99c:	d003      	beq.n	800f9a6 <FreeRTOS_issocketconnected+0x22>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f99e:	f06f 0315 	mvn.w	r3, #21
 800f9a2:	60fb      	str	r3, [r7, #12]
 800f9a4:	e00b      	b.n	800f9be <FreeRTOS_issocketconnected+0x3a>
        }
        else
        {
            if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 800f9a6:	68bb      	ldr	r3, [r7, #8]
 800f9a8:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f9ac:	2b04      	cmp	r3, #4
 800f9ae:	d906      	bls.n	800f9be <FreeRTOS_issocketconnected+0x3a>
            {
                if( pxSocket->u.xTCP.eTCPState < eCLOSE_WAIT )
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800f9b6:	2b07      	cmp	r3, #7
 800f9b8:	d801      	bhi.n	800f9be <FreeRTOS_issocketconnected+0x3a>
                {
                    xReturn = pdTRUE;
 800f9ba:	2301      	movs	r3, #1
 800f9bc:	60fb      	str	r3, [r7, #12]
                }
            }
        }

        return xReturn;
 800f9be:	68fb      	ldr	r3, [r7, #12]
    }
 800f9c0:	4618      	mov	r0, r3
 800f9c2:	3714      	adds	r7, #20
 800f9c4:	46bd      	mov	sp, r7
 800f9c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f9ca:	4770      	bx	lr

0800f9cc <FreeRTOS_rx_size>:
 *
 * @return Returns the number of bytes which can be read. Or an error
 *         code is returned.
 */
    BaseType_t FreeRTOS_rx_size( ConstSocket_t xSocket )
    {
 800f9cc:	b580      	push	{r7, lr}
 800f9ce:	b084      	sub	sp, #16
 800f9d0:	af00      	add	r7, sp, #0
 800f9d2:	6078      	str	r0, [r7, #4]
        const FreeRTOS_Socket_t * pxSocket = ( const FreeRTOS_Socket_t * ) xSocket;
 800f9d4:	687b      	ldr	r3, [r7, #4]
 800f9d6:	60bb      	str	r3, [r7, #8]
        BaseType_t xReturn;

        if( pxSocket->ucProtocol != ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800f9d8:	68bb      	ldr	r3, [r7, #8]
 800f9da:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800f9de:	2b06      	cmp	r3, #6
 800f9e0:	d003      	beq.n	800f9ea <FreeRTOS_rx_size+0x1e>
        {
            xReturn = -pdFREERTOS_ERRNO_EINVAL;
 800f9e2:	f06f 0315 	mvn.w	r3, #21
 800f9e6:	60fb      	str	r3, [r7, #12]
 800f9e8:	e00f      	b.n	800fa0a <FreeRTOS_rx_size+0x3e>
        }
        else if( pxSocket->u.xTCP.rxStream != NULL )
 800f9ea:	68bb      	ldr	r3, [r7, #8]
 800f9ec:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f9f0:	2b00      	cmp	r3, #0
 800f9f2:	d008      	beq.n	800fa06 <FreeRTOS_rx_size+0x3a>
        {
            xReturn = ( BaseType_t ) uxStreamBufferGetSize( pxSocket->u.xTCP.rxStream );
 800f9f4:	68bb      	ldr	r3, [r7, #8]
 800f9f6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800f9fa:	4618      	mov	r0, r3
 800f9fc:	f000 fabb 	bl	800ff76 <uxStreamBufferGetSize>
 800fa00:	4603      	mov	r3, r0
 800fa02:	60fb      	str	r3, [r7, #12]
 800fa04:	e001      	b.n	800fa0a <FreeRTOS_rx_size+0x3e>
        }
        else
        {
            xReturn = 0;
 800fa06:	2300      	movs	r3, #0
 800fa08:	60fb      	str	r3, [r7, #12]
        }

        return xReturn;
 800fa0a:	68fb      	ldr	r3, [r7, #12]
    }
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	3710      	adds	r7, #16
 800fa10:	46bd      	mov	sp, r7
 800fa12:	bd80      	pop	{r7, pc}

0800fa14 <xSocketValid>:
 * @param[in] xSocket The socket to be checked.
 * @return pdTRUE if the socket is valid, else pdFALSE.
 *
 */
BaseType_t xSocketValid( const ConstSocket_t xSocket )
{
 800fa14:	b480      	push	{r7}
 800fa16:	b085      	sub	sp, #20
 800fa18:	af00      	add	r7, sp, #0
 800fa1a:	6078      	str	r0, [r7, #4]
    BaseType_t xReturnValue = pdFALSE;
 800fa1c:	2300      	movs	r3, #0
 800fa1e:	60fb      	str	r3, [r7, #12]
     */

    /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
    /* coverity[misra_c_2012_rule_11_4_violation] */
    if( ( xSocket != FREERTOS_INVALID_SOCKET ) && ( xSocket != NULL ) )
 800fa20:	687b      	ldr	r3, [r7, #4]
 800fa22:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fa26:	d004      	beq.n	800fa32 <xSocketValid+0x1e>
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	2b00      	cmp	r3, #0
 800fa2c:	d001      	beq.n	800fa32 <xSocketValid+0x1e>
    {
        xReturnValue = pdTRUE;
 800fa2e:	2301      	movs	r3, #1
 800fa30:	60fb      	str	r3, [r7, #12]
    }

    return xReturnValue;
 800fa32:	68fb      	ldr	r3, [r7, #12]
}
 800fa34:	4618      	mov	r0, r3
 800fa36:	3714      	adds	r7, #20
 800fa38:	46bd      	mov	sp, r7
 800fa3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa3e:	4770      	bx	lr

0800fa40 <vTCPNetStat_TCPSocket>:
 * @brief A helper function of vTCPNetStat(), see below.
 *
 * @param[in] pxSocket The socket that needs logging.
 */
    static void vTCPNetStat_TCPSocket( const FreeRTOS_Socket_t * pxSocket )
    {
 800fa40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa44:	b09c      	sub	sp, #112	@ 0x70
 800fa46:	af08      	add	r7, sp, #32
 800fa48:	6078      	str	r0, [r7, #4]
        char pcRemoteIp[ 40 ];
        int xIPWidth = 32;
 800fa4a:	2320      	movs	r3, #32
 800fa4c:	64bb      	str	r3, [r7, #72]	@ 0x48

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            TickType_t age = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 800fa4e:	f7f4 f913 	bl	8003c78 <xTaskGetTickCount>
 800fa52:	4602      	mov	r2, r0
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800fa5a:	1ad3      	subs	r3, r2, r3
 800fa5c:	64fb      	str	r3, [r7, #76]	@ 0x4c
        #else
            TickType_t age = 0U;
        #endif

        char ucChildText[ 16 ] = "";
 800fa5e:	2300      	movs	r3, #0
 800fa60:	60fb      	str	r3, [r7, #12]
 800fa62:	f107 0310 	add.w	r3, r7, #16
 800fa66:	2200      	movs	r2, #0
 800fa68:	601a      	str	r2, [r3, #0]
 800fa6a:	605a      	str	r2, [r3, #4]
 800fa6c:	609a      	str	r2, [r3, #8]

        if( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eTCP_LISTEN )
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fa74:	2b01      	cmp	r3, #1
 800fa76:	d11f      	bne.n	800fab8 <vTCPNetStat_TCPSocket+0x78>
        {
            /* Using function "snprintf". */
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
                                                 pxSocket->u.xTCP.usChildCount,
 800fa78:	687b      	ldr	r3, [r7, #4]
 800fa7a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800fa7e:	461a      	mov	r2, r3
                                                 pxSocket->u.xTCP.usBacklog );
 800fa80:	687b      	ldr	r3, [r7, #4]
 800fa82:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
            const int32_t copied_len = snprintf( ucChildText, sizeof( ucChildText ), " %d/%d",
 800fa86:	f107 000c 	add.w	r0, r7, #12
 800fa8a:	9300      	str	r3, [sp, #0]
 800fa8c:	4613      	mov	r3, r2
 800fa8e:	4a3b      	ldr	r2, [pc, #236]	@ (800fb7c <vTCPNetStat_TCPSocket+0x13c>)
 800fa90:	2110      	movs	r1, #16
 800fa92:	f012 f921 	bl	8021cd8 <snprintf>
 800fa96:	6478      	str	r0, [r7, #68]	@ 0x44
            ( void ) copied_len;
            /* These should never evaluate to false since the buffers are both shorter than 5-6 characters (<=65535) */
            configASSERT( copied_len >= 0 );                                /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800fa98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800fa9a:	2b00      	cmp	r3, #0
 800fa9c:	da04      	bge.n	800faa8 <vTCPNetStat_TCPSocket+0x68>
 800fa9e:	f241 61df 	movw	r1, #5855	@ 0x16df
 800faa2:	4837      	ldr	r0, [pc, #220]	@ (800fb80 <vTCPNetStat_TCPSocket+0x140>)
 800faa4:	f7f1 fce4 	bl	8001470 <vAssertCalled>
            configASSERT( copied_len < ( int32_t ) sizeof( ucChildText ) ); /* LCOV_EXCL_BR_LINE the 'taken' branch will never execute. See the above comment. */
 800faa8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800faaa:	2b0f      	cmp	r3, #15
 800faac:	dd04      	ble.n	800fab8 <vTCPNetStat_TCPSocket+0x78>
 800faae:	f44f 51b7 	mov.w	r1, #5856	@ 0x16e0
 800fab2:	4833      	ldr	r0, [pc, #204]	@ (800fb80 <vTCPNetStat_TCPSocket+0x140>)
 800fab4:	f7f1 fcdc 	bl	8001470 <vAssertCalled>
        }

        if( age > 999999U )
 800fab8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800faba:	4a32      	ldr	r2, [pc, #200]	@ (800fb84 <vTCPNetStat_TCPSocket+0x144>)
 800fabc:	4293      	cmp	r3, r2
 800fabe:	d901      	bls.n	800fac4 <vTCPNetStat_TCPSocket+0x84>
        {
            age = 999999U;
 800fac0:	4b30      	ldr	r3, [pc, #192]	@ (800fb84 <vTCPNetStat_TCPSocket+0x144>)
 800fac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        }

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE Exclude this line because default case is not counted. */
 800fac4:	687b      	ldr	r3, [r7, #4]
 800fac6:	7a1b      	ldrb	r3, [r3, #8]
 800fac8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800facc:	b2db      	uxtb	r3, r3
 800face:	2b00      	cmp	r3, #0
 800fad0:	d002      	beq.n	800fad8 <vTCPNetStat_TCPSocket+0x98>
 800fad2:	2b01      	cmp	r3, #1
 800fad4:	d009      	beq.n	800faea <vTCPNetStat_TCPSocket+0xaa>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* MISRA 16.4 Compliance */
                break;
 800fad6:	e011      	b.n	800fafc <vTCPNetStat_TCPSocket+0xbc>
                    ( void ) snprintf( pcRemoteIp, sizeof( pcRemoteIp ), "%xip", ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 800fad8:	687b      	ldr	r3, [r7, #4]
 800fada:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fadc:	f107 001c 	add.w	r0, r7, #28
 800fae0:	4a29      	ldr	r2, [pc, #164]	@ (800fb88 <vTCPNetStat_TCPSocket+0x148>)
 800fae2:	2128      	movs	r1, #40	@ 0x28
 800fae4:	f012 f8f8 	bl	8021cd8 <snprintf>
                    break;
 800fae8:	e008      	b.n	800fafc <vTCPNetStat_TCPSocket+0xbc>
                                       "%pip", ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes );
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	3354      	adds	r3, #84	@ 0x54
                    ( void ) snprintf( pcRemoteIp,
 800faee:	f107 001c 	add.w	r0, r7, #28
 800faf2:	4a26      	ldr	r2, [pc, #152]	@ (800fb8c <vTCPNetStat_TCPSocket+0x14c>)
 800faf4:	2128      	movs	r1, #40	@ 0x28
 800faf6:	f012 f8ef 	bl	8021cd8 <snprintf>
                    break;
 800fafa:	bf00      	nop
        }

        FreeRTOS_printf( ( "TCP %5d %-*s:%5d %d/%d %-13.13s %6u %6u%s\n",
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 800fb00:	4698      	mov	r8, r3
 800fb02:	687b      	ldr	r3, [r7, #4]
 800fb04:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 800fb08:	461c      	mov	r4, r3
 800fb0a:	687b      	ldr	r3, [r7, #4]
 800fb0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800fb10:	2b00      	cmp	r3, #0
 800fb12:	bf14      	ite	ne
 800fb14:	2301      	movne	r3, #1
 800fb16:	2300      	moveq	r3, #0
 800fb18:	b2db      	uxtb	r3, r3
 800fb1a:	461d      	mov	r5, r3
 800fb1c:	687b      	ldr	r3, [r7, #4]
 800fb1e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800fb22:	2b00      	cmp	r3, #0
 800fb24:	bf14      	ite	ne
 800fb26:	2301      	movne	r3, #1
 800fb28:	2300      	moveq	r3, #0
 800fb2a:	b2db      	uxtb	r3, r3
 800fb2c:	461e      	mov	r6, r3
 800fb2e:	687b      	ldr	r3, [r7, #4]
 800fb30:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fb34:	4618      	mov	r0, r3
 800fb36:	f002 fbf5 	bl	8012324 <FreeRTOS_GetTCPStateName>
 800fb3a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800fb3c:	4a11      	ldr	r2, [pc, #68]	@ (800fb84 <vTCPNetStat_TCPSocket+0x144>)
 800fb3e:	4293      	cmp	r3, r2
 800fb40:	bf28      	it	cs
 800fb42:	4613      	movcs	r3, r2
 800fb44:	687a      	ldr	r2, [r7, #4]
 800fb46:	f8b2 2070 	ldrh.w	r2, [r2, #112]	@ 0x70
 800fb4a:	603a      	str	r2, [r7, #0]
 800fb4c:	f107 011c 	add.w	r1, r7, #28
 800fb50:	f107 020c 	add.w	r2, r7, #12
 800fb54:	9206      	str	r2, [sp, #24]
 800fb56:	683a      	ldr	r2, [r7, #0]
 800fb58:	9205      	str	r2, [sp, #20]
 800fb5a:	9304      	str	r3, [sp, #16]
 800fb5c:	9003      	str	r0, [sp, #12]
 800fb5e:	9602      	str	r6, [sp, #8]
 800fb60:	9501      	str	r5, [sp, #4]
 800fb62:	9400      	str	r4, [sp, #0]
 800fb64:	460b      	mov	r3, r1
 800fb66:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800fb68:	4641      	mov	r1, r8
 800fb6a:	4809      	ldr	r0, [pc, #36]	@ (800fb90 <vTCPNetStat_TCPSocket+0x150>)
 800fb6c:	f011 f888 	bl	8020c80 <lUDPLoggingPrintf>
                           ( pxSocket->u.xTCP.txStream != NULL ) ? 1 : 0,
                           FreeRTOS_GetTCPStateName( pxSocket->u.xTCP.eTCPState ),
                           ( unsigned ) ( ( age > 999999U ) ? 999999U : age ), /* Format 'age' for printing */
                           pxSocket->u.xTCP.usTimeout,
                           ucChildText ) );
    }
 800fb70:	bf00      	nop
 800fb72:	3750      	adds	r7, #80	@ 0x50
 800fb74:	46bd      	mov	sp, r7
 800fb76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fb7a:	bf00      	nop
 800fb7c:	08024b3c 	.word	0x08024b3c
 800fb80:	0802465c 	.word	0x0802465c
 800fb84:	000f423f 	.word	0x000f423f
 800fb88:	08024b44 	.word	0x08024b44
 800fb8c:	08024b4c 	.word	0x08024b4c
 800fb90:	08024b54 	.word	0x08024b54

0800fb94 <vTCPNetStat>:

/**
 * @brief Print a summary of all sockets and their connections.
 */
    void vTCPNetStat( void )
    {
 800fb94:	b580      	push	{r7, lr}
 800fb96:	b08a      	sub	sp, #40	@ 0x28
 800fb98:	af02      	add	r7, sp, #8
        /* Show a simple listing of all created sockets and their connections */
        const ListItem_t * pxIterator;
        BaseType_t count = 0;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	61bb      	str	r3, [r7, #24]
        size_t uxMinimum = uxGetMinimumFreeNetworkBuffers();
 800fb9e:	f006 fe59 	bl	8016854 <uxGetMinimumFreeNetworkBuffers>
 800fba2:	6178      	str	r0, [r7, #20]
        size_t uxCurrent = uxGetNumberOfFreeNetworkBuffers();
 800fba4:	f006 fe62 	bl	801686c <uxGetNumberOfFreeNetworkBuffers>
 800fba8:	6138      	str	r0, [r7, #16]

        if( !listLIST_IS_INITIALISED( &xBoundTCPSocketsList ) )
 800fbaa:	4b26      	ldr	r3, [pc, #152]	@ (800fc44 <vTCPNetStat+0xb0>)
 800fbac:	689b      	ldr	r3, [r3, #8]
 800fbae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fbb2:	d003      	beq.n	800fbbc <vTCPNetStat+0x28>
        {
            FreeRTOS_printf( ( "PLUS-TCP not initialized\n" ) );
 800fbb4:	4824      	ldr	r0, [pc, #144]	@ (800fc48 <vTCPNetStat+0xb4>)
 800fbb6:	f011 f863 	bl	8020c80 <lUDPLoggingPrintf>
                               ( int ) count,
                               ( unsigned ) uxMinimum,
                               ( unsigned ) uxCurrent,
                               ( unsigned ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ) );
        }
    }
 800fbba:	e03f      	b.n	800fc3c <vTCPNetStat+0xa8>
            const ListItem_t * pxEndTCP = listGET_END_MARKER( &xBoundTCPSocketsList );
 800fbbc:	4b23      	ldr	r3, [pc, #140]	@ (800fc4c <vTCPNetStat+0xb8>)
 800fbbe:	60fb      	str	r3, [r7, #12]
            const ListItem_t * pxEndUDP = listGET_END_MARKER( &xBoundUDPSocketsList );
 800fbc0:	4b23      	ldr	r3, [pc, #140]	@ (800fc50 <vTCPNetStat+0xbc>)
 800fbc2:	60bb      	str	r3, [r7, #8]
            FreeRTOS_printf( ( "Prot Port IP-Remote       : Port  R/T Status       Alive  tmout Child\n" ) );
 800fbc4:	4823      	ldr	r0, [pc, #140]	@ (800fc54 <vTCPNetStat+0xc0>)
 800fbc6:	f011 f85b 	bl	8020c80 <lUDPLoggingPrintf>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 800fbca:	4b1e      	ldr	r3, [pc, #120]	@ (800fc44 <vTCPNetStat+0xb0>)
 800fbcc:	68db      	ldr	r3, [r3, #12]
 800fbce:	61fb      	str	r3, [r7, #28]
 800fbd0:	e00b      	b.n	800fbea <vTCPNetStat+0x56>
                const FreeRTOS_Socket_t * pxSocket = ( ( const FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800fbd2:	69fb      	ldr	r3, [r7, #28]
 800fbd4:	68db      	ldr	r3, [r3, #12]
 800fbd6:	607b      	str	r3, [r7, #4]
                vTCPNetStat_TCPSocket( pxSocket );
 800fbd8:	6878      	ldr	r0, [r7, #4]
 800fbda:	f7ff ff31 	bl	800fa40 <vTCPNetStat_TCPSocket>
                count++;
 800fbde:	69bb      	ldr	r3, [r7, #24]
 800fbe0:	3301      	adds	r3, #1
 800fbe2:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800fbe4:	69fb      	ldr	r3, [r7, #28]
 800fbe6:	685b      	ldr	r3, [r3, #4]
 800fbe8:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndTCP;
 800fbea:	69fa      	ldr	r2, [r7, #28]
 800fbec:	68fb      	ldr	r3, [r7, #12]
 800fbee:	429a      	cmp	r2, r3
 800fbf0:	d1ef      	bne.n	800fbd2 <vTCPNetStat+0x3e>
            for( pxIterator = listGET_HEAD_ENTRY( &xBoundUDPSocketsList );
 800fbf2:	4b19      	ldr	r3, [pc, #100]	@ (800fc58 <vTCPNetStat+0xc4>)
 800fbf4:	68db      	ldr	r3, [r3, #12]
 800fbf6:	61fb      	str	r3, [r7, #28]
 800fbf8:	e014      	b.n	800fc24 <vTCPNetStat+0x90>
                FreeRTOS_printf( ( "UDP Port %5u\n",
 800fbfa:	69fb      	ldr	r3, [r7, #28]
 800fbfc:	681b      	ldr	r3, [r3, #0]
 800fbfe:	b29b      	uxth	r3, r3
 800fc00:	021b      	lsls	r3, r3, #8
 800fc02:	b29a      	uxth	r2, r3
 800fc04:	69fb      	ldr	r3, [r7, #28]
 800fc06:	681b      	ldr	r3, [r3, #0]
 800fc08:	0a1b      	lsrs	r3, r3, #8
 800fc0a:	b29b      	uxth	r3, r3
 800fc0c:	4313      	orrs	r3, r2
 800fc0e:	b29b      	uxth	r3, r3
 800fc10:	4619      	mov	r1, r3
 800fc12:	4812      	ldr	r0, [pc, #72]	@ (800fc5c <vTCPNetStat+0xc8>)
 800fc14:	f011 f834 	bl	8020c80 <lUDPLoggingPrintf>
                count++;
 800fc18:	69bb      	ldr	r3, [r7, #24]
 800fc1a:	3301      	adds	r3, #1
 800fc1c:	61bb      	str	r3, [r7, #24]
                 pxIterator = listGET_NEXT( pxIterator ) )
 800fc1e:	69fb      	ldr	r3, [r7, #28]
 800fc20:	685b      	ldr	r3, [r3, #4]
 800fc22:	61fb      	str	r3, [r7, #28]
                 pxIterator != pxEndUDP;
 800fc24:	69fa      	ldr	r2, [r7, #28]
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d1e6      	bne.n	800fbfa <vTCPNetStat+0x66>
            FreeRTOS_printf( ( "FreeRTOS_netstat: %d sockets %u < %u < %u buffers free\n",
 800fc2c:	2340      	movs	r3, #64	@ 0x40
 800fc2e:	9300      	str	r3, [sp, #0]
 800fc30:	693b      	ldr	r3, [r7, #16]
 800fc32:	697a      	ldr	r2, [r7, #20]
 800fc34:	69b9      	ldr	r1, [r7, #24]
 800fc36:	480a      	ldr	r0, [pc, #40]	@ (800fc60 <vTCPNetStat+0xcc>)
 800fc38:	f011 f822 	bl	8020c80 <lUDPLoggingPrintf>
    }
 800fc3c:	bf00      	nop
 800fc3e:	3720      	adds	r7, #32
 800fc40:	46bd      	mov	sp, r7
 800fc42:	bd80      	pop	{r7, pc}
 800fc44:	20001304 	.word	0x20001304
 800fc48:	08024b80 	.word	0x08024b80
 800fc4c:	2000130c 	.word	0x2000130c
 800fc50:	200012f8 	.word	0x200012f8
 800fc54:	08024b9c 	.word	0x08024b9c
 800fc58:	200012f0 	.word	0x200012f0
 800fc5c:	08024be4 	.word	0x08024be4
 800fc60:	08024bf4 	.word	0x08024bf4

0800fc64 <vSocketSelectTCP>:
 *
 * @param[in] pxSocket The socket which needs to be checked.
 * @return An event mask of events that are active for this socket.
 */
        static EventBits_t vSocketSelectTCP( FreeRTOS_Socket_t * pxSocket )
        {
 800fc64:	b580      	push	{r7, lr}
 800fc66:	b086      	sub	sp, #24
 800fc68:	af00      	add	r7, sp, #0
 800fc6a:	6078      	str	r0, [r7, #4]
            /* Check if the TCP socket has already been accepted by
             * the owner.  If not, it is useless to return it from a
             * select(). */
            BaseType_t bAccepted = pdFALSE;
 800fc6c:	2300      	movs	r3, #0
 800fc6e:	617b      	str	r3, [r7, #20]
            EventBits_t xSocketBits = 0U;
 800fc70:	2300      	movs	r3, #0
 800fc72:	613b      	str	r3, [r7, #16]

            if( pxSocket->u.xTCP.bits.bPassQueued == pdFALSE_UNSIGNED )
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fc7a:	f003 0304 	and.w	r3, r3, #4
 800fc7e:	b2db      	uxtb	r3, r3
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d109      	bne.n	800fc98 <vSocketSelectTCP+0x34>
            {
                if( pxSocket->u.xTCP.bits.bPassAccept == pdFALSE_UNSIGNED )
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fc8a:	f003 0302 	and.w	r3, r3, #2
 800fc8e:	b2db      	uxtb	r3, r3
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d101      	bne.n	800fc98 <vSocketSelectTCP+0x34>
                {
                    bAccepted = pdTRUE;
 800fc94:	2301      	movs	r3, #1
 800fc96:	617b      	str	r3, [r7, #20]
                }
            }

            /* Is the set owner interested in READ events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != ( EventBits_t ) 0U )
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc9c:	f003 0301 	and.w	r3, r3, #1
 800fca0:	2b00      	cmp	r3, #0
 800fca2:	d038      	beq.n	800fd16 <vSocketSelectTCP+0xb2>
            {
                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fcaa:	2b01      	cmp	r3, #1
 800fcac:	d111      	bne.n	800fcd2 <vSocketSelectTCP+0x6e>
                {
                    if( ( pxSocket->u.xTCP.pxPeerSocket != NULL ) && ( pxSocket->u.xTCP.pxPeerSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800fcae:	687b      	ldr	r3, [r7, #4]
 800fcb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d02f      	beq.n	800fd16 <vSocketSelectTCP+0xb2>
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcba:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fcbe:	f003 0302 	and.w	r3, r3, #2
 800fcc2:	b2db      	uxtb	r3, r3
 800fcc4:	2b00      	cmp	r3, #0
 800fcc6:	d026      	beq.n	800fd16 <vSocketSelectTCP+0xb2>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	f043 0301 	orr.w	r3, r3, #1
 800fcce:	613b      	str	r3, [r7, #16]
 800fcd0:	e021      	b.n	800fd16 <vSocketSelectTCP+0xb2>
                    }
                }
                else if( ( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED ) && ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fcd8:	f003 0308 	and.w	r3, r3, #8
 800fcdc:	b2db      	uxtb	r3, r3
 800fcde:	2b00      	cmp	r3, #0
 800fce0:	d00c      	beq.n	800fcfc <vSocketSelectTCP+0x98>
 800fce2:	687b      	ldr	r3, [r7, #4]
 800fce4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 800fce8:	f003 0302 	and.w	r3, r3, #2
 800fcec:	b2db      	uxtb	r3, r3
 800fcee:	2b00      	cmp	r3, #0
 800fcf0:	d004      	beq.n	800fcfc <vSocketSelectTCP+0x98>
                {
                    /* This socket has the re-use flag. After connecting it turns into
                     * a connected socket. Set the READ event, so that accept() will be called. */
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800fcf2:	693b      	ldr	r3, [r7, #16]
 800fcf4:	f043 0301 	orr.w	r3, r3, #1
 800fcf8:	613b      	str	r3, [r7, #16]
 800fcfa:	e00c      	b.n	800fd16 <vSocketSelectTCP+0xb2>
                }
                else if( ( bAccepted != 0 ) && ( FreeRTOS_recvcount( pxSocket ) > 0 ) )
 800fcfc:	697b      	ldr	r3, [r7, #20]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d009      	beq.n	800fd16 <vSocketSelectTCP+0xb2>
 800fd02:	6878      	ldr	r0, [r7, #4]
 800fd04:	f7ff fe62 	bl	800f9cc <FreeRTOS_rx_size>
 800fd08:	4603      	mov	r3, r0
 800fd0a:	2b00      	cmp	r3, #0
 800fd0c:	dd03      	ble.n	800fd16 <vSocketSelectTCP+0xb2>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800fd0e:	693b      	ldr	r3, [r7, #16]
 800fd10:	f043 0301 	orr.w	r3, r3, #1
 800fd14:	613b      	str	r3, [r7, #16]
                    /* Nothing. */
                }
            }

            /* Is the set owner interested in EXCEPTION events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 800fd16:	687b      	ldr	r3, [r7, #4]
 800fd18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd1a:	f003 0304 	and.w	r3, r3, #4
 800fd1e:	2b00      	cmp	r3, #0
 800fd20:	d00d      	beq.n	800fd3e <vSocketSelectTCP+0xda>
            {
                if( ( pxSocket->u.xTCP.eTCPState == eCLOSE_WAIT ) || ( pxSocket->u.xTCP.eTCPState == eCLOSED ) )
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fd28:	2b08      	cmp	r3, #8
 800fd2a:	d004      	beq.n	800fd36 <vSocketSelectTCP+0xd2>
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d103      	bne.n	800fd3e <vSocketSelectTCP+0xda>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_EXCEPT;
 800fd36:	693b      	ldr	r3, [r7, #16]
 800fd38:	f043 0304 	orr.w	r3, r3, #4
 800fd3c:	613b      	str	r3, [r7, #16]
                }
            }

            /* Is the set owner interested in WRITE events? */
            if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 800fd3e:	687b      	ldr	r3, [r7, #4]
 800fd40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd42:	f003 0302 	and.w	r3, r3, #2
 800fd46:	2b00      	cmp	r3, #0
 800fd48:	d034      	beq.n	800fdb4 <vSocketSelectTCP+0x150>
            {
                BaseType_t bMatch = pdFALSE;
 800fd4a:	2300      	movs	r3, #0
 800fd4c:	60fb      	str	r3, [r7, #12]

                if( bAccepted != 0 )
 800fd4e:	697b      	ldr	r3, [r7, #20]
 800fd50:	2b00      	cmp	r3, #0
 800fd52:	d007      	beq.n	800fd64 <vSocketSelectTCP+0x100>
                {
                    if( FreeRTOS_tx_space( pxSocket ) > 0 )
 800fd54:	6878      	ldr	r0, [r7, #4]
 800fd56:	f7ff fdcb 	bl	800f8f0 <FreeRTOS_tx_space>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	dd01      	ble.n	800fd64 <vSocketSelectTCP+0x100>
                    {
                        bMatch = pdTRUE;
 800fd60:	2301      	movs	r3, #1
 800fd62:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch == pdFALSE )
 800fd64:	68fb      	ldr	r3, [r7, #12]
 800fd66:	2b00      	cmp	r3, #0
 800fd68:	d11d      	bne.n	800fda6 <vSocketSelectTCP+0x142>
                {
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800fd6a:	687b      	ldr	r3, [r7, #4]
 800fd6c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800fd70:	f003 0308 	and.w	r3, r3, #8
 800fd74:	b2db      	uxtb	r3, r3
 800fd76:	2b00      	cmp	r3, #0
 800fd78:	d015      	beq.n	800fda6 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800fd7a:	687b      	ldr	r3, [r7, #4]
 800fd7c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                    if( ( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED ) &&
 800fd80:	2b04      	cmp	r3, #4
 800fd82:	d910      	bls.n	800fda6 <vSocketSelectTCP+0x142>
                        ( pxSocket->u.xTCP.bits.bConnPassed == pdFALSE_UNSIGNED ) )
 800fd84:	687b      	ldr	r3, [r7, #4]
 800fd86:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 800fd8a:	f003 0310 	and.w	r3, r3, #16
 800fd8e:	b2db      	uxtb	r3, r3
                        ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) &&
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d108      	bne.n	800fda6 <vSocketSelectTCP+0x142>
                    {
                        pxSocket->u.xTCP.bits.bConnPassed = pdTRUE_UNSIGNED;
 800fd94:	687a      	ldr	r2, [r7, #4]
 800fd96:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 800fd9a:	f043 0310 	orr.w	r3, r3, #16
 800fd9e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        bMatch = pdTRUE;
 800fda2:	2301      	movs	r3, #1
 800fda4:	60fb      	str	r3, [r7, #12]
                    }
                }

                if( bMatch != pdFALSE )
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	2b00      	cmp	r3, #0
 800fdaa:	d003      	beq.n	800fdb4 <vSocketSelectTCP+0x150>
                {
                    xSocketBits |= ( EventBits_t ) eSELECT_WRITE;
 800fdac:	693b      	ldr	r3, [r7, #16]
 800fdae:	f043 0302 	orr.w	r3, r3, #2
 800fdb2:	613b      	str	r3, [r7, #16]
                }
            }

            return xSocketBits;
 800fdb4:	693b      	ldr	r3, [r7, #16]
        }
 800fdb6:	4618      	mov	r0, r3
 800fdb8:	3718      	adds	r7, #24
 800fdba:	46bd      	mov	sp, r7
 800fdbc:	bd80      	pop	{r7, pc}
	...

0800fdc0 <vSocketSelect>:
 *        event has occurred.
 *
 * @param[in] pxSocketSet The socket-set which is to be waited on for change.
 */
    void vSocketSelect( const SocketSelect_t * pxSocketSet )
    {
 800fdc0:	b580      	push	{r7, lr}
 800fdc2:	b08a      	sub	sp, #40	@ 0x28
 800fdc4:	af00      	add	r7, sp, #0
 800fdc6:	6078      	str	r0, [r7, #4]
        BaseType_t xRound;
        EventBits_t xSocketBits, xBitsToClear;

        #if ipconfigUSE_TCP == 1
            BaseType_t xLastRound = 1;
 800fdc8:	2301      	movs	r3, #1
 800fdca:	613b      	str	r3, [r7, #16]
        #else
            BaseType_t xLastRound = 0;
        #endif

        /* These flags will be switched on after checking the socket status. */
        EventBits_t xGroupBits = 0;
 800fdcc:	2300      	movs	r3, #0
 800fdce:	61fb      	str	r3, [r7, #28]

        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	627b      	str	r3, [r7, #36]	@ 0x24
 800fdd4:	e043      	b.n	800fe5e <vSocketSelect+0x9e>
        {
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;

            if( xRound == 0 )
 800fdd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	d102      	bne.n	800fde2 <vSocketSelect+0x22>
            {
                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxEnd = ( ( const ListItem_t * ) &( xBoundUDPSocketsList.xListEnd ) );
 800fddc:	4b34      	ldr	r3, [pc, #208]	@ (800feb0 <vSocketSelect+0xf0>)
 800fdde:	617b      	str	r3, [r7, #20]
 800fde0:	e001      	b.n	800fde6 <vSocketSelect+0x26>
                else
                {
                    /* MISRA Ref 11.3.1 [Misaligned access] */
                    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 800fde2:	4b34      	ldr	r3, [pc, #208]	@ (800feb4 <vSocketSelect+0xf4>)
 800fde4:	617b      	str	r3, [r7, #20]
                }
            #endif /* ipconfigUSE_TCP == 1 */

            for( pxIterator = listGET_NEXT( pxEnd );
 800fde6:	697b      	ldr	r3, [r7, #20]
 800fde8:	685b      	ldr	r3, [r3, #4]
 800fdea:	61bb      	str	r3, [r7, #24]
 800fdec:	e030      	b.n	800fe50 <vSocketSelect+0x90>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                FreeRTOS_Socket_t * pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 800fdee:	69bb      	ldr	r3, [r7, #24]
 800fdf0:	68db      	ldr	r3, [r3, #12]
 800fdf2:	60bb      	str	r3, [r7, #8]

                if( pxSocket->pxSocketSet != pxSocketSet )
 800fdf4:	68bb      	ldr	r3, [r7, #8]
 800fdf6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fdf8:	687a      	ldr	r2, [r7, #4]
 800fdfa:	429a      	cmp	r2, r3
 800fdfc:	d124      	bne.n	800fe48 <vSocketSelect+0x88>
                {
                    /* Socket does not belong to this select group. */
                    continue;
                }

                xSocketBits = 0;
 800fdfe:	2300      	movs	r3, #0
 800fe00:	623b      	str	r3, [r7, #32]

                #if ( ipconfigUSE_TCP == 1 )
                    if( pxSocket->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP )
 800fe02:	68bb      	ldr	r3, [r7, #8]
 800fe04:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 800fe08:	2b06      	cmp	r3, #6
 800fe0a:	d107      	bne.n	800fe1c <vSocketSelect+0x5c>
                    {
                        xSocketBits |= vSocketSelectTCP( pxSocket );
 800fe0c:	68b8      	ldr	r0, [r7, #8]
 800fe0e:	f7ff ff29 	bl	800fc64 <vSocketSelectTCP>
 800fe12:	4602      	mov	r2, r0
 800fe14:	6a3b      	ldr	r3, [r7, #32]
 800fe16:	4313      	orrs	r3, r2
 800fe18:	623b      	str	r3, [r7, #32]
 800fe1a:	e00d      	b.n	800fe38 <vSocketSelect+0x78>
                    }
                    else
                #endif /* ipconfigUSE_TCP == 1 */
                {
                    /* Select events for UDP are simpler. */
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800fe1c:	68bb      	ldr	r3, [r7, #8]
 800fe1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fe20:	f003 0301 	and.w	r3, r3, #1
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d007      	beq.n	800fe38 <vSocketSelect+0x78>
                        ( listCURRENT_LIST_LENGTH( &( pxSocket->u.xUDP.xWaitingPacketsList ) ) > 0U ) )
 800fe28:	68bb      	ldr	r3, [r7, #8]
 800fe2a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
                    if( ( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_READ ) != 0U ) &&
 800fe2c:	2b00      	cmp	r3, #0
 800fe2e:	d003      	beq.n	800fe38 <vSocketSelect+0x78>
                    {
                        xSocketBits |= ( EventBits_t ) eSELECT_READ;
 800fe30:	6a3b      	ldr	r3, [r7, #32]
 800fe32:	f043 0301 	orr.w	r3, r3, #1
 800fe36:	623b      	str	r3, [r7, #32]
                    /* The WRITE and EXCEPT bits are not used for UDP */
                } /* if( pxSocket->ucProtocol == FREERTOS_IPPROTO_TCP ) */

                /* Each socket keeps its own event flags, which are looked-up
                 * by FreeRTOS_FD_ISSSET() */
                pxSocket->xSocketBits = xSocketBits;
 800fe38:	68bb      	ldr	r3, [r7, #8]
 800fe3a:	6a3a      	ldr	r2, [r7, #32]
 800fe3c:	649a      	str	r2, [r3, #72]	@ 0x48

                /* The ORed value will be used to set the bits in the event
                 * group. */
                xGroupBits |= xSocketBits;
 800fe3e:	69fa      	ldr	r2, [r7, #28]
 800fe40:	6a3b      	ldr	r3, [r7, #32]
 800fe42:	4313      	orrs	r3, r2
 800fe44:	61fb      	str	r3, [r7, #28]
 800fe46:	e000      	b.n	800fe4a <vSocketSelect+0x8a>
                    continue;
 800fe48:	bf00      	nop
                 pxIterator = listGET_NEXT( pxIterator ) )
 800fe4a:	69bb      	ldr	r3, [r7, #24]
 800fe4c:	685b      	ldr	r3, [r3, #4]
 800fe4e:	61bb      	str	r3, [r7, #24]
                 pxIterator != pxEnd;
 800fe50:	69ba      	ldr	r2, [r7, #24]
 800fe52:	697b      	ldr	r3, [r7, #20]
 800fe54:	429a      	cmp	r2, r3
 800fe56:	d1ca      	bne.n	800fdee <vSocketSelect+0x2e>
        for( xRound = 0; xRound <= xLastRound; xRound++ )
 800fe58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe5a:	3301      	adds	r3, #1
 800fe5c:	627b      	str	r3, [r7, #36]	@ 0x24
 800fe5e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fe60:	693b      	ldr	r3, [r7, #16]
 800fe62:	429a      	cmp	r2, r3
 800fe64:	ddb7      	ble.n	800fdd6 <vSocketSelect+0x16>
            } /* for( pxIterator ... ) */
        }     /* for( xRound = 0; xRound <= xLastRound; xRound++ ) */

        xBitsToClear = xEventGroupGetBits( pxSocketSet->xSelectGroup );
 800fe66:	687b      	ldr	r3, [r7, #4]
 800fe68:	681b      	ldr	r3, [r3, #0]
 800fe6a:	2100      	movs	r1, #0
 800fe6c:	4618      	mov	r0, r3
 800fe6e:	f7f2 fc17 	bl	80026a0 <xEventGroupClearBits>
 800fe72:	60f8      	str	r0, [r7, #12]

        /* Now set the necessary bits. */
        xBitsToClear = ( xBitsToClear & ~xGroupBits ) & ( ( EventBits_t ) eSELECT_ALL );
 800fe74:	69fb      	ldr	r3, [r7, #28]
 800fe76:	43da      	mvns	r2, r3
 800fe78:	68fb      	ldr	r3, [r7, #12]
 800fe7a:	4013      	ands	r3, r2
 800fe7c:	f003 030f 	and.w	r3, r3, #15
 800fe80:	60fb      	str	r3, [r7, #12]
             * and cleared in FreeRTOS_select(). */
            xBitsToClear &= ~( ( EventBits_t ) eSELECT_INTR );
        }
        #endif /* ipconfigSUPPORT_SIGNALS */

        if( xBitsToClear != 0U )
 800fe82:	68fb      	ldr	r3, [r7, #12]
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	d005      	beq.n	800fe94 <vSocketSelect+0xd4>
        {
            ( void ) xEventGroupClearBits( pxSocketSet->xSelectGroup, xBitsToClear );
 800fe88:	687b      	ldr	r3, [r7, #4]
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	68f9      	ldr	r1, [r7, #12]
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f7f2 fc06 	bl	80026a0 <xEventGroupClearBits>
        }

        /* Now include eSELECT_CALL_IP to wakeup the caller. */
        ( void ) xEventGroupSetBits( pxSocketSet->xSelectGroup, xGroupBits | ( EventBits_t ) eSELECT_CALL_IP );
 800fe94:	687b      	ldr	r3, [r7, #4]
 800fe96:	681a      	ldr	r2, [r3, #0]
 800fe98:	69fb      	ldr	r3, [r7, #28]
 800fe9a:	f043 0310 	orr.w	r3, r3, #16
 800fe9e:	4619      	mov	r1, r3
 800fea0:	4610      	mov	r0, r2
 800fea2:	f7f2 fc2b 	bl	80026fc <xEventGroupSetBits>
    }
 800fea6:	bf00      	nop
 800fea8:	3728      	adds	r7, #40	@ 0x28
 800feaa:	46bd      	mov	sp, r7
 800feac:	bd80      	pop	{r7, pc}
 800feae:	bf00      	nop
 800feb0:	200012f8 	.word	0x200012f8
 800feb4:	2000130c 	.word	0x2000130c

0800feb8 <uxStreamBufferSpace>:
 *         minus 1.
 */
size_t uxStreamBufferSpace( const StreamBuffer_t * const pxBuffer,
                            size_t uxLower,
                            size_t uxUpper )
{
 800feb8:	b480      	push	{r7}
 800feba:	b087      	sub	sp, #28
 800febc:	af00      	add	r7, sp, #0
 800febe:	60f8      	str	r0, [r7, #12]
 800fec0:	60b9      	str	r1, [r7, #8]
 800fec2:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 800fec4:	68fb      	ldr	r3, [r7, #12]
 800fec6:	691b      	ldr	r3, [r3, #16]
 800fec8:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower - 1U;
 800feca:	693a      	ldr	r2, [r7, #16]
 800fecc:	687b      	ldr	r3, [r7, #4]
 800fece:	441a      	add	r2, r3
 800fed0:	68bb      	ldr	r3, [r7, #8]
 800fed2:	1ad3      	subs	r3, r2, r3
 800fed4:	3b01      	subs	r3, #1
 800fed6:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 800fed8:	697a      	ldr	r2, [r7, #20]
 800feda:	693b      	ldr	r3, [r7, #16]
 800fedc:	429a      	cmp	r2, r3
 800fede:	d303      	bcc.n	800fee8 <uxStreamBufferSpace+0x30>
    {
        uxCount -= uxLength;
 800fee0:	697a      	ldr	r2, [r7, #20]
 800fee2:	693b      	ldr	r3, [r7, #16]
 800fee4:	1ad3      	subs	r3, r2, r3
 800fee6:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800fee8:	697b      	ldr	r3, [r7, #20]
}
 800feea:	4618      	mov	r0, r3
 800feec:	371c      	adds	r7, #28
 800feee:	46bd      	mov	sp, r7
 800fef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fef4:	4770      	bx	lr

0800fef6 <uxStreamBufferDistance>:
 * @return The distance between uxLower and uxUpper.
 */
size_t uxStreamBufferDistance( const StreamBuffer_t * const pxBuffer,
                               size_t uxLower,
                               size_t uxUpper )
{
 800fef6:	b480      	push	{r7}
 800fef8:	b087      	sub	sp, #28
 800fefa:	af00      	add	r7, sp, #0
 800fefc:	60f8      	str	r0, [r7, #12]
 800fefe:	60b9      	str	r1, [r7, #8]
 800ff00:	607a      	str	r2, [r7, #4]
    const size_t uxLength = pxBuffer->LENGTH;
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	691b      	ldr	r3, [r3, #16]
 800ff06:	613b      	str	r3, [r7, #16]
    size_t uxCount = uxLength + uxUpper - uxLower;
 800ff08:	693a      	ldr	r2, [r7, #16]
 800ff0a:	687b      	ldr	r3, [r7, #4]
 800ff0c:	441a      	add	r2, r3
 800ff0e:	68bb      	ldr	r3, [r7, #8]
 800ff10:	1ad3      	subs	r3, r2, r3
 800ff12:	617b      	str	r3, [r7, #20]

    if( uxCount >= uxLength )
 800ff14:	697a      	ldr	r2, [r7, #20]
 800ff16:	693b      	ldr	r3, [r7, #16]
 800ff18:	429a      	cmp	r2, r3
 800ff1a:	d303      	bcc.n	800ff24 <uxStreamBufferDistance+0x2e>
    {
        uxCount -= uxLength;
 800ff1c:	697a      	ldr	r2, [r7, #20]
 800ff1e:	693b      	ldr	r3, [r7, #16]
 800ff20:	1ad3      	subs	r3, r2, r3
 800ff22:	617b      	str	r3, [r7, #20]
    }

    return uxCount;
 800ff24:	697b      	ldr	r3, [r7, #20]
}
 800ff26:	4618      	mov	r0, r3
 800ff28:	371c      	adds	r7, #28
 800ff2a:	46bd      	mov	sp, r7
 800ff2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff30:	4770      	bx	lr

0800ff32 <uxStreamBufferGetSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can still be added to uxHead
 *         before hitting on uxTail
 */
size_t uxStreamBufferGetSpace( const StreamBuffer_t * const pxBuffer )
{
 800ff32:	b580      	push	{r7, lr}
 800ff34:	b082      	sub	sp, #8
 800ff36:	af00      	add	r7, sp, #0
 800ff38:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxHead, pxBuffer->uxTail );
 800ff3a:	687b      	ldr	r3, [r7, #4]
 800ff3c:	6899      	ldr	r1, [r3, #8]
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	461a      	mov	r2, r3
 800ff44:	6878      	ldr	r0, [r7, #4]
 800ff46:	f7ff ffb7 	bl	800feb8 <uxStreamBufferSpace>
 800ff4a:	4603      	mov	r3, r0
}
 800ff4c:	4618      	mov	r0, r3
 800ff4e:	3708      	adds	r7, #8
 800ff50:	46bd      	mov	sp, r7
 800ff52:	bd80      	pop	{r7, pc}

0800ff54 <uxStreamBufferFrontSpace>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return Distance between uxFront and uxTail or the number of items
 *         which can still be added to uxFront, before hitting on uxTail.
 */
size_t uxStreamBufferFrontSpace( const StreamBuffer_t * const pxBuffer )
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b082      	sub	sp, #8
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
    return uxStreamBufferSpace( pxBuffer, pxBuffer->uxFront, pxBuffer->uxTail );
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	68d9      	ldr	r1, [r3, #12]
 800ff60:	687b      	ldr	r3, [r7, #4]
 800ff62:	681b      	ldr	r3, [r3, #0]
 800ff64:	461a      	mov	r2, r3
 800ff66:	6878      	ldr	r0, [r7, #4]
 800ff68:	f7ff ffa6 	bl	800feb8 <uxStreamBufferSpace>
 800ff6c:	4603      	mov	r3, r0
}
 800ff6e:	4618      	mov	r0, r3
 800ff70:	3708      	adds	r7, #8
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd80      	pop	{r7, pc}

0800ff76 <uxStreamBufferGetSize>:
 * @param[in] pxBuffer The circular stream buffer.
 * @return The number of items which can be read from the tail before
 *        reaching the head.
 */
size_t uxStreamBufferGetSize( const StreamBuffer_t * const pxBuffer )
{
 800ff76:	b580      	push	{r7, lr}
 800ff78:	b082      	sub	sp, #8
 800ff7a:	af00      	add	r7, sp, #0
 800ff7c:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxTail, pxBuffer->uxHead );
 800ff7e:	687b      	ldr	r3, [r7, #4]
 800ff80:	6819      	ldr	r1, [r3, #0]
 800ff82:	687b      	ldr	r3, [r7, #4]
 800ff84:	689b      	ldr	r3, [r3, #8]
 800ff86:	461a      	mov	r2, r3
 800ff88:	6878      	ldr	r0, [r7, #4]
 800ff8a:	f7ff ffb4 	bl	800fef6 <uxStreamBufferDistance>
 800ff8e:	4603      	mov	r3, r0
}
 800ff90:	4618      	mov	r0, r3
 800ff92:	3708      	adds	r7, #8
 800ff94:	46bd      	mov	sp, r7
 800ff96:	bd80      	pop	{r7, pc}

0800ff98 <uxStreamBufferMidSpace>:
 *        buffer.
 * @param[in] pxBuffer The circular stream buffer.
 * @return The space between the mid pointer and the head.
 */
size_t uxStreamBufferMidSpace( const StreamBuffer_t * const pxBuffer )
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b082      	sub	sp, #8
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
    return uxStreamBufferDistance( pxBuffer, pxBuffer->uxMid, pxBuffer->uxHead );
 800ffa0:	687b      	ldr	r3, [r7, #4]
 800ffa2:	6859      	ldr	r1, [r3, #4]
 800ffa4:	687b      	ldr	r3, [r7, #4]
 800ffa6:	689b      	ldr	r3, [r3, #8]
 800ffa8:	461a      	mov	r2, r3
 800ffaa:	6878      	ldr	r0, [r7, #4]
 800ffac:	f7ff ffa3 	bl	800fef6 <uxStreamBufferDistance>
 800ffb0:	4603      	mov	r3, r0
}
 800ffb2:	4618      	mov	r0, r3
 800ffb4:	3708      	adds	r7, #8
 800ffb6:	46bd      	mov	sp, r7
 800ffb8:	bd80      	pop	{r7, pc}

0800ffba <vStreamBufferClear>:
/**
 * @brief Clear the stream buffer.
 * @param[in] pxBuffer The circular stream buffer.
 */
void vStreamBufferClear( StreamBuffer_t * const pxBuffer )
{
 800ffba:	b480      	push	{r7}
 800ffbc:	b083      	sub	sp, #12
 800ffbe:	af00      	add	r7, sp, #0
 800ffc0:	6078      	str	r0, [r7, #4]
    /* Make the circular buffer empty */
    pxBuffer->uxHead = 0U;
 800ffc2:	687b      	ldr	r3, [r7, #4]
 800ffc4:	2200      	movs	r2, #0
 800ffc6:	609a      	str	r2, [r3, #8]
    pxBuffer->uxTail = 0U;
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	2200      	movs	r2, #0
 800ffcc:	601a      	str	r2, [r3, #0]
    pxBuffer->uxFront = 0U;
 800ffce:	687b      	ldr	r3, [r7, #4]
 800ffd0:	2200      	movs	r2, #0
 800ffd2:	60da      	str	r2, [r3, #12]
    pxBuffer->uxMid = 0U;
 800ffd4:	687b      	ldr	r3, [r7, #4]
 800ffd6:	2200      	movs	r2, #0
 800ffd8:	605a      	str	r2, [r3, #4]
}
 800ffda:	bf00      	nop
 800ffdc:	370c      	adds	r7, #12
 800ffde:	46bd      	mov	sp, r7
 800ffe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ffe4:	4770      	bx	lr

0800ffe6 <vStreamBufferMoveMid>:
 * @param[in] pxBuffer The circular stream buffer.
 * @param[in] uxCount The byte count by which the mid pointer is to be moved.
 */
void vStreamBufferMoveMid( StreamBuffer_t * const pxBuffer,
                           const size_t uxCount )
{
 800ffe6:	b580      	push	{r7, lr}
 800ffe8:	b086      	sub	sp, #24
 800ffea:	af00      	add	r7, sp, #0
 800ffec:	6078      	str	r0, [r7, #4]
 800ffee:	6039      	str	r1, [r7, #0]
    /* Increment uxMid, but no further than uxHead */
    const size_t uxLength = pxBuffer->LENGTH;
 800fff0:	687b      	ldr	r3, [r7, #4]
 800fff2:	691b      	ldr	r3, [r3, #16]
 800fff4:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferMidSpace( pxBuffer );
 800fff6:	6878      	ldr	r0, [r7, #4]
 800fff8:	f7ff ffce 	bl	800ff98 <uxStreamBufferMidSpace>
 800fffc:	60b8      	str	r0, [r7, #8]
    size_t uxMid = pxBuffer->uxMid;
 800fffe:	687b      	ldr	r3, [r7, #4]
 8010000:	685b      	ldr	r3, [r3, #4]
 8010002:	617b      	str	r3, [r7, #20]
    size_t uxMoveCount = uxCount;
 8010004:	683b      	ldr	r3, [r7, #0]
 8010006:	613b      	str	r3, [r7, #16]

    if( uxMoveCount > uxSize )
 8010008:	693a      	ldr	r2, [r7, #16]
 801000a:	68bb      	ldr	r3, [r7, #8]
 801000c:	429a      	cmp	r2, r3
 801000e:	d901      	bls.n	8010014 <vStreamBufferMoveMid+0x2e>
    {
        uxMoveCount = uxSize;
 8010010:	68bb      	ldr	r3, [r7, #8]
 8010012:	613b      	str	r3, [r7, #16]
    }

    uxMid += uxMoveCount;
 8010014:	697a      	ldr	r2, [r7, #20]
 8010016:	693b      	ldr	r3, [r7, #16]
 8010018:	4413      	add	r3, r2
 801001a:	617b      	str	r3, [r7, #20]

    if( uxMid >= uxLength )
 801001c:	697a      	ldr	r2, [r7, #20]
 801001e:	68fb      	ldr	r3, [r7, #12]
 8010020:	429a      	cmp	r2, r3
 8010022:	d303      	bcc.n	801002c <vStreamBufferMoveMid+0x46>
    {
        uxMid -= uxLength;
 8010024:	697a      	ldr	r2, [r7, #20]
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	1ad3      	subs	r3, r2, r3
 801002a:	617b      	str	r3, [r7, #20]
    }

    pxBuffer->uxMid = uxMid;
 801002c:	687b      	ldr	r3, [r7, #4]
 801002e:	697a      	ldr	r2, [r7, #20]
 8010030:	605a      	str	r2, [r3, #4]
}
 8010032:	bf00      	nop
 8010034:	3718      	adds	r7, #24
 8010036:	46bd      	mov	sp, r7
 8010038:	bd80      	pop	{r7, pc}

0801003a <xStreamBufferLessThenEqual>:
 * @return pdTRUE if uxLeft <= uxRight, else pdFALSE.
 */
BaseType_t xStreamBufferLessThenEqual( const StreamBuffer_t * const pxBuffer,
                                       size_t uxLeft,
                                       size_t uxRight )
{
 801003a:	b480      	push	{r7}
 801003c:	b087      	sub	sp, #28
 801003e:	af00      	add	r7, sp, #0
 8010040:	60f8      	str	r0, [r7, #12]
 8010042:	60b9      	str	r1, [r7, #8]
 8010044:	607a      	str	r2, [r7, #4]
    BaseType_t xReturn = pdFALSE;
 8010046:	2300      	movs	r3, #0
 8010048:	617b      	str	r3, [r7, #20]
    const size_t uxTail = pxBuffer->uxTail;
 801004a:	68fb      	ldr	r3, [r7, #12]
 801004c:	681b      	ldr	r3, [r3, #0]
 801004e:	613b      	str	r3, [r7, #16]

    if( ( uxLeft - uxTail ) <= ( uxRight - uxTail ) )
 8010050:	68ba      	ldr	r2, [r7, #8]
 8010052:	693b      	ldr	r3, [r7, #16]
 8010054:	1ad2      	subs	r2, r2, r3
 8010056:	6879      	ldr	r1, [r7, #4]
 8010058:	693b      	ldr	r3, [r7, #16]
 801005a:	1acb      	subs	r3, r1, r3
 801005c:	429a      	cmp	r2, r3
 801005e:	d801      	bhi.n	8010064 <xStreamBufferLessThenEqual+0x2a>
    {
        xReturn = pdTRUE;
 8010060:	2301      	movs	r3, #1
 8010062:	617b      	str	r3, [r7, #20]
    }

    return xReturn;
 8010064:	697b      	ldr	r3, [r7, #20]
}
 8010066:	4618      	mov	r0, r3
 8010068:	371c      	adds	r7, #28
 801006a:	46bd      	mov	sp, r7
 801006c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010070:	4770      	bx	lr

08010072 <uxStreamBufferGetPtr>:
 *         actual number of available bytes since this is a circular buffer and tail
 *         can loop back to the start of the buffer).
 */
size_t uxStreamBufferGetPtr( StreamBuffer_t * const pxBuffer,
                             uint8_t ** const ppucData )
{
 8010072:	b580      	push	{r7, lr}
 8010074:	b084      	sub	sp, #16
 8010076:	af00      	add	r7, sp, #0
 8010078:	6078      	str	r0, [r7, #4]
 801007a:	6039      	str	r1, [r7, #0]
    const size_t uxNextTail = pxBuffer->uxTail;
 801007c:	687b      	ldr	r3, [r7, #4]
 801007e:	681b      	ldr	r3, [r3, #0]
 8010080:	60fb      	str	r3, [r7, #12]
    const size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 8010082:	6878      	ldr	r0, [r7, #4]
 8010084:	f7ff ff77 	bl	800ff76 <uxStreamBufferGetSize>
 8010088:	60b8      	str	r0, [r7, #8]

    /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
    /* coverity[misra_c_2012_rule_18_4_violation] */
    *ppucData = pxBuffer->ucArray + uxNextTail;
 801008a:	687b      	ldr	r3, [r7, #4]
 801008c:	f103 0214 	add.w	r2, r3, #20
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	441a      	add	r2, r3
 8010094:	683b      	ldr	r3, [r7, #0]
 8010096:	601a      	str	r2, [r3, #0]

    return FreeRTOS_min_size_t( uxSize, pxBuffer->LENGTH - uxNextTail );
 8010098:	687b      	ldr	r3, [r7, #4]
 801009a:	691a      	ldr	r2, [r3, #16]
 801009c:	68fb      	ldr	r3, [r7, #12]
 801009e:	1ad3      	subs	r3, r2, r3
 80100a0:	4619      	mov	r1, r3
 80100a2:	68b8      	ldr	r0, [r7, #8]
 80100a4:	f7f9 fede 	bl	8009e64 <FreeRTOS_min_size_t>
 80100a8:	4603      	mov	r3, r0
}
 80100aa:	4618      	mov	r0, r3
 80100ac:	3710      	adds	r7, #16
 80100ae:	46bd      	mov	sp, r7
 80100b0:	bd80      	pop	{r7, pc}

080100b2 <uxStreamBufferAdd>:
 */
size_t uxStreamBufferAdd( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          const uint8_t * const pucData,
                          size_t uxByteCount )
{
 80100b2:	b580      	push	{r7, lr}
 80100b4:	b08a      	sub	sp, #40	@ 0x28
 80100b6:	af00      	add	r7, sp, #0
 80100b8:	60f8      	str	r0, [r7, #12]
 80100ba:	60b9      	str	r1, [r7, #8]
 80100bc:	607a      	str	r2, [r7, #4]
 80100be:	603b      	str	r3, [r7, #0]
    size_t uxCount;
    size_t uxSpace = uxStreamBufferGetSpace( pxBuffer );
 80100c0:	68f8      	ldr	r0, [r7, #12]
 80100c2:	f7ff ff36 	bl	800ff32 <uxStreamBufferGetSpace>
 80100c6:	6278      	str	r0, [r7, #36]	@ 0x24

    /* If uxOffset > 0, items can be placed in front of uxHead */
    if( uxSpace > uxOffset )
 80100c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100ca:	68bb      	ldr	r3, [r7, #8]
 80100cc:	429a      	cmp	r2, r3
 80100ce:	d904      	bls.n	80100da <uxStreamBufferAdd+0x28>
    {
        uxSpace -= uxOffset;
 80100d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	1ad3      	subs	r3, r2, r3
 80100d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80100d8:	e001      	b.n	80100de <uxStreamBufferAdd+0x2c>
    }
    else
    {
        uxSpace = 0U;
 80100da:	2300      	movs	r3, #0
 80100dc:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* The number of bytes that can be written is the minimum of the number of
     * bytes requested and the number available. */
    uxCount = FreeRTOS_min_size_t( uxSpace, uxByteCount );
 80100de:	6839      	ldr	r1, [r7, #0]
 80100e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80100e2:	f7f9 febf 	bl	8009e64 <FreeRTOS_min_size_t>
 80100e6:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 80100e8:	69fb      	ldr	r3, [r7, #28]
 80100ea:	2b00      	cmp	r3, #0
 80100ec:	d05c      	beq.n	80101a8 <uxStreamBufferAdd+0xf6>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	691b      	ldr	r3, [r3, #16]
 80100f2:	61bb      	str	r3, [r7, #24]
        size_t uxNextHead = pxBuffer->uxHead;
 80100f4:	68fb      	ldr	r3, [r7, #12]
 80100f6:	689b      	ldr	r3, [r3, #8]
 80100f8:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 80100fa:	68bb      	ldr	r3, [r7, #8]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d00b      	beq.n	8010118 <uxStreamBufferAdd+0x66>
        {
            /* ( uxOffset > 0 ) means: write in front if the uxHead marker */
            uxNextHead += uxOffset;
 8010100:	6a3a      	ldr	r2, [r7, #32]
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	4413      	add	r3, r2
 8010106:	623b      	str	r3, [r7, #32]

            if( uxNextHead >= uxLength )
 8010108:	6a3a      	ldr	r2, [r7, #32]
 801010a:	69bb      	ldr	r3, [r7, #24]
 801010c:	429a      	cmp	r2, r3
 801010e:	d303      	bcc.n	8010118 <uxStreamBufferAdd+0x66>
            {
                uxNextHead -= uxLength;
 8010110:	6a3a      	ldr	r2, [r7, #32]
 8010112:	69bb      	ldr	r3, [r7, #24]
 8010114:	1ad3      	subs	r3, r2, r3
 8010116:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2b00      	cmp	r3, #0
 801011c:	d021      	beq.n	8010162 <uxStreamBufferAdd+0xb0>
        {
            /* Calculate the number of bytes that can be added in the first
            * write - which may be less than the total number of bytes that need
            * to be added if the buffer will wrap back to the beginning. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextHead, uxCount );
 801011e:	69ba      	ldr	r2, [r7, #24]
 8010120:	6a3b      	ldr	r3, [r7, #32]
 8010122:	1ad3      	subs	r3, r2, r3
 8010124:	69f9      	ldr	r1, [r7, #28]
 8010126:	4618      	mov	r0, r3
 8010128:	f7f9 fe9c 	bl	8009e64 <FreeRTOS_min_size_t>
 801012c:	6178      	str	r0, [r7, #20]

            /* Write as many bytes as can be written in the first write. */
            ( void ) memcpy( &( pxBuffer->ucArray[ uxNextHead ] ), pucData, uxFirst );
 801012e:	6a3b      	ldr	r3, [r7, #32]
 8010130:	3310      	adds	r3, #16
 8010132:	68fa      	ldr	r2, [r7, #12]
 8010134:	4413      	add	r3, r2
 8010136:	3304      	adds	r3, #4
 8010138:	697a      	ldr	r2, [r7, #20]
 801013a:	6879      	ldr	r1, [r7, #4]
 801013c:	4618      	mov	r0, r3
 801013e:	f010 ffbb 	bl	80210b8 <memcpy>

            /* If the number of bytes written was less than the number that
             * could be written in the first write... */
            if( uxCount > uxFirst )
 8010142:	69fa      	ldr	r2, [r7, #28]
 8010144:	697b      	ldr	r3, [r7, #20]
 8010146:	429a      	cmp	r2, r3
 8010148:	d90b      	bls.n	8010162 <uxStreamBufferAdd+0xb0>
            {
                /* ...then write the remaining bytes to the start of the
                 * buffer. */
                ( void ) memcpy( pxBuffer->ucArray, &( pucData[ uxFirst ] ), uxCount - uxFirst );
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	f103 0014 	add.w	r0, r3, #20
 8010150:	687a      	ldr	r2, [r7, #4]
 8010152:	697b      	ldr	r3, [r7, #20]
 8010154:	18d1      	adds	r1, r2, r3
 8010156:	69fa      	ldr	r2, [r7, #28]
 8010158:	697b      	ldr	r3, [r7, #20]
 801015a:	1ad3      	subs	r3, r2, r3
 801015c:	461a      	mov	r2, r3
 801015e:	f010 ffab 	bl	80210b8 <memcpy>
            }
        }

        /* The below update to the stream buffer members must happen
         * atomically. */
        vTaskSuspendAll();
 8010162:	f7f3 fc77 	bl	8003a54 <vTaskSuspendAll>
        {
            if( uxOffset == 0U )
 8010166:	68bb      	ldr	r3, [r7, #8]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d10e      	bne.n	801018a <uxStreamBufferAdd+0xd8>
            {
                /* ( uxOffset == 0 ) means: write at uxHead position */
                uxNextHead += uxCount;
 801016c:	6a3a      	ldr	r2, [r7, #32]
 801016e:	69fb      	ldr	r3, [r7, #28]
 8010170:	4413      	add	r3, r2
 8010172:	623b      	str	r3, [r7, #32]

                if( uxNextHead >= uxLength )
 8010174:	6a3a      	ldr	r2, [r7, #32]
 8010176:	69bb      	ldr	r3, [r7, #24]
 8010178:	429a      	cmp	r2, r3
 801017a:	d303      	bcc.n	8010184 <uxStreamBufferAdd+0xd2>
                {
                    uxNextHead -= uxLength;
 801017c:	6a3a      	ldr	r2, [r7, #32]
 801017e:	69bb      	ldr	r3, [r7, #24]
 8010180:	1ad3      	subs	r3, r2, r3
 8010182:	623b      	str	r3, [r7, #32]
                }

                pxBuffer->uxHead = uxNextHead;
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	6a3a      	ldr	r2, [r7, #32]
 8010188:	609a      	str	r2, [r3, #8]
            }

            if( xStreamBufferLessThenEqual( pxBuffer, pxBuffer->uxFront, uxNextHead ) != pdFALSE )
 801018a:	68fb      	ldr	r3, [r7, #12]
 801018c:	68db      	ldr	r3, [r3, #12]
 801018e:	6a3a      	ldr	r2, [r7, #32]
 8010190:	4619      	mov	r1, r3
 8010192:	68f8      	ldr	r0, [r7, #12]
 8010194:	f7ff ff51 	bl	801003a <xStreamBufferLessThenEqual>
 8010198:	4603      	mov	r3, r0
 801019a:	2b00      	cmp	r3, #0
 801019c:	d002      	beq.n	80101a4 <uxStreamBufferAdd+0xf2>
            {
                /* Advance the front pointer */
                pxBuffer->uxFront = uxNextHead;
 801019e:	68fb      	ldr	r3, [r7, #12]
 80101a0:	6a3a      	ldr	r2, [r7, #32]
 80101a2:	60da      	str	r2, [r3, #12]
            }
        }
        ( void ) xTaskResumeAll();
 80101a4:	f7f3 fc64 	bl	8003a70 <xTaskResumeAll>
    }

    return uxCount;
 80101a8:	69fb      	ldr	r3, [r7, #28]
}
 80101aa:	4618      	mov	r0, r3
 80101ac:	3728      	adds	r7, #40	@ 0x28
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}

080101b2 <uxStreamBufferGet>:
size_t uxStreamBufferGet( StreamBuffer_t * const pxBuffer,
                          size_t uxOffset,
                          uint8_t * const pucData,
                          size_t uxMaxCount,
                          BaseType_t xPeek )
{
 80101b2:	b580      	push	{r7, lr}
 80101b4:	b08a      	sub	sp, #40	@ 0x28
 80101b6:	af00      	add	r7, sp, #0
 80101b8:	60f8      	str	r0, [r7, #12]
 80101ba:	60b9      	str	r1, [r7, #8]
 80101bc:	607a      	str	r2, [r7, #4]
 80101be:	603b      	str	r3, [r7, #0]
    size_t uxCount;

    /* How much data is available? */
    size_t uxSize = uxStreamBufferGetSize( pxBuffer );
 80101c0:	68f8      	ldr	r0, [r7, #12]
 80101c2:	f7ff fed8 	bl	800ff76 <uxStreamBufferGetSize>
 80101c6:	6278      	str	r0, [r7, #36]	@ 0x24

    if( uxSize > uxOffset )
 80101c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101ca:	68bb      	ldr	r3, [r7, #8]
 80101cc:	429a      	cmp	r2, r3
 80101ce:	d904      	bls.n	80101da <uxStreamBufferGet+0x28>
    {
        uxSize -= uxOffset;
 80101d0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80101d2:	68bb      	ldr	r3, [r7, #8]
 80101d4:	1ad3      	subs	r3, r2, r3
 80101d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80101d8:	e001      	b.n	80101de <uxStreamBufferGet+0x2c>
    }
    else
    {
        uxSize = 0U;
 80101da:	2300      	movs	r3, #0
 80101dc:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* Use the minimum of the wanted bytes and the available bytes. */
    uxCount = FreeRTOS_min_size_t( uxSize, uxMaxCount );
 80101de:	6839      	ldr	r1, [r7, #0]
 80101e0:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80101e2:	f7f9 fe3f 	bl	8009e64 <FreeRTOS_min_size_t>
 80101e6:	61f8      	str	r0, [r7, #28]

    if( uxCount != 0U )
 80101e8:	69fb      	ldr	r3, [r7, #28]
 80101ea:	2b00      	cmp	r3, #0
 80101ec:	d04e      	beq.n	801028c <uxStreamBufferGet+0xda>
    {
        const size_t uxLength = pxBuffer->LENGTH;
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	691b      	ldr	r3, [r3, #16]
 80101f2:	61bb      	str	r3, [r7, #24]
        size_t uxNextTail = pxBuffer->uxTail;
 80101f4:	68fb      	ldr	r3, [r7, #12]
 80101f6:	681b      	ldr	r3, [r3, #0]
 80101f8:	623b      	str	r3, [r7, #32]

        if( uxOffset != 0U )
 80101fa:	68bb      	ldr	r3, [r7, #8]
 80101fc:	2b00      	cmp	r3, #0
 80101fe:	d00b      	beq.n	8010218 <uxStreamBufferGet+0x66>
        {
            uxNextTail += uxOffset;
 8010200:	6a3a      	ldr	r2, [r7, #32]
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	4413      	add	r3, r2
 8010206:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8010208:	6a3a      	ldr	r2, [r7, #32]
 801020a:	69bb      	ldr	r3, [r7, #24]
 801020c:	429a      	cmp	r2, r3
 801020e:	d303      	bcc.n	8010218 <uxStreamBufferGet+0x66>
            {
                uxNextTail -= uxLength;
 8010210:	6a3a      	ldr	r2, [r7, #32]
 8010212:	69bb      	ldr	r3, [r7, #24]
 8010214:	1ad3      	subs	r3, r2, r3
 8010216:	623b      	str	r3, [r7, #32]
            }
        }

        if( pucData != NULL )
 8010218:	687b      	ldr	r3, [r7, #4]
 801021a:	2b00      	cmp	r3, #0
 801021c:	d021      	beq.n	8010262 <uxStreamBufferGet+0xb0>
        {
            /* Calculate the number of bytes that can be read - which may be
             * less than the number wanted if the data wraps around to the start of
             * the buffer. */
            const size_t uxFirst = FreeRTOS_min_size_t( uxLength - uxNextTail, uxCount );
 801021e:	69ba      	ldr	r2, [r7, #24]
 8010220:	6a3b      	ldr	r3, [r7, #32]
 8010222:	1ad3      	subs	r3, r2, r3
 8010224:	69f9      	ldr	r1, [r7, #28]
 8010226:	4618      	mov	r0, r3
 8010228:	f7f9 fe1c 	bl	8009e64 <FreeRTOS_min_size_t>
 801022c:	6178      	str	r0, [r7, #20]

            /* Obtain the number of bytes it is possible to obtain in the first
             * read. */
            ( void ) memcpy( pucData, &( pxBuffer->ucArray[ uxNextTail ] ), uxFirst );
 801022e:	6a3b      	ldr	r3, [r7, #32]
 8010230:	3310      	adds	r3, #16
 8010232:	68fa      	ldr	r2, [r7, #12]
 8010234:	4413      	add	r3, r2
 8010236:	3304      	adds	r3, #4
 8010238:	697a      	ldr	r2, [r7, #20]
 801023a:	4619      	mov	r1, r3
 801023c:	6878      	ldr	r0, [r7, #4]
 801023e:	f010 ff3b 	bl	80210b8 <memcpy>

            /* If the total number of wanted bytes is greater than the number
             * that could be read in the first read... */
            if( uxCount > uxFirst )
 8010242:	69fa      	ldr	r2, [r7, #28]
 8010244:	697b      	ldr	r3, [r7, #20]
 8010246:	429a      	cmp	r2, r3
 8010248:	d90b      	bls.n	8010262 <uxStreamBufferGet+0xb0>
            {
                /* ...then read the remaining bytes from the start of the buffer. */
                ( void ) memcpy( &( pucData[ uxFirst ] ), pxBuffer->ucArray, uxCount - uxFirst );
 801024a:	687a      	ldr	r2, [r7, #4]
 801024c:	697b      	ldr	r3, [r7, #20]
 801024e:	18d0      	adds	r0, r2, r3
 8010250:	68fb      	ldr	r3, [r7, #12]
 8010252:	f103 0114 	add.w	r1, r3, #20
 8010256:	69fa      	ldr	r2, [r7, #28]
 8010258:	697b      	ldr	r3, [r7, #20]
 801025a:	1ad3      	subs	r3, r2, r3
 801025c:	461a      	mov	r2, r3
 801025e:	f010 ff2b 	bl	80210b8 <memcpy>
            }
        }

        if( ( xPeek == pdFALSE ) && ( uxOffset == 0U ) )
 8010262:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010264:	2b00      	cmp	r3, #0
 8010266:	d111      	bne.n	801028c <uxStreamBufferGet+0xda>
 8010268:	68bb      	ldr	r3, [r7, #8]
 801026a:	2b00      	cmp	r3, #0
 801026c:	d10e      	bne.n	801028c <uxStreamBufferGet+0xda>
        {
            /* Move the tail pointer to effectively remove the data read from
             * the buffer. */
            uxNextTail += uxCount;
 801026e:	6a3a      	ldr	r2, [r7, #32]
 8010270:	69fb      	ldr	r3, [r7, #28]
 8010272:	4413      	add	r3, r2
 8010274:	623b      	str	r3, [r7, #32]

            if( uxNextTail >= uxLength )
 8010276:	6a3a      	ldr	r2, [r7, #32]
 8010278:	69bb      	ldr	r3, [r7, #24]
 801027a:	429a      	cmp	r2, r3
 801027c:	d303      	bcc.n	8010286 <uxStreamBufferGet+0xd4>
            {
                uxNextTail -= uxLength;
 801027e:	6a3a      	ldr	r2, [r7, #32]
 8010280:	69bb      	ldr	r3, [r7, #24]
 8010282:	1ad3      	subs	r3, r2, r3
 8010284:	623b      	str	r3, [r7, #32]
            }

            pxBuffer->uxTail = uxNextTail;
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	6a3a      	ldr	r2, [r7, #32]
 801028a:	601a      	str	r2, [r3, #0]
        }
    }

    return uxCount;
 801028c:	69fb      	ldr	r3, [r7, #28]
}
 801028e:	4618      	mov	r0, r3
 8010290:	3728      	adds	r7, #40	@ 0x28
 8010292:	46bd      	mov	sp, r7
 8010294:	bd80      	pop	{r7, pc}
	...

08010298 <vSocketCloseNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketCloseNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 8010298:	b580      	push	{r7, lr}
 801029a:	b082      	sub	sp, #8
 801029c:	af00      	add	r7, sp, #0
 801029e:	6078      	str	r0, [r7, #4]
        if( ( xSocketToClose != NULL ) && ( xSocketToClose != pxSocket ) )
 80102a0:	4b0a      	ldr	r3, [pc, #40]	@ (80102cc <vSocketCloseNextTime+0x34>)
 80102a2:	681b      	ldr	r3, [r3, #0]
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	d009      	beq.n	80102bc <vSocketCloseNextTime+0x24>
 80102a8:	4b08      	ldr	r3, [pc, #32]	@ (80102cc <vSocketCloseNextTime+0x34>)
 80102aa:	681b      	ldr	r3, [r3, #0]
 80102ac:	687a      	ldr	r2, [r7, #4]
 80102ae:	429a      	cmp	r2, r3
 80102b0:	d004      	beq.n	80102bc <vSocketCloseNextTime+0x24>
        {
            ( void ) vSocketClose( xSocketToClose );
 80102b2:	4b06      	ldr	r3, [pc, #24]	@ (80102cc <vSocketCloseNextTime+0x34>)
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7fd fd98 	bl	800ddec <vSocketClose>
        }

        xSocketToClose = pxSocket;
 80102bc:	4a03      	ldr	r2, [pc, #12]	@ (80102cc <vSocketCloseNextTime+0x34>)
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	6013      	str	r3, [r2, #0]
    }
 80102c2:	bf00      	nop
 80102c4:	3708      	adds	r7, #8
 80102c6:	46bd      	mov	sp, r7
 80102c8:	bd80      	pop	{r7, pc}
 80102ca:	bf00      	nop
 80102cc:	2000131c 	.word	0x2000131c

080102d0 <vSocketListenNextTime>:
 *
 * @param[in] pxSocket The socket to be checked.
 */
    /* coverity[single_use] */
    void vSocketListenNextTime( FreeRTOS_Socket_t * pxSocket )
    {
 80102d0:	b580      	push	{r7, lr}
 80102d2:	b082      	sub	sp, #8
 80102d4:	af00      	add	r7, sp, #0
 80102d6:	6078      	str	r0, [r7, #4]
        if( ( xSocketToListen != NULL ) && ( xSocketToListen != pxSocket ) )
 80102d8:	4b0c      	ldr	r3, [pc, #48]	@ (801030c <vSocketListenNextTime+0x3c>)
 80102da:	681b      	ldr	r3, [r3, #0]
 80102dc:	2b00      	cmp	r3, #0
 80102de:	d00e      	beq.n	80102fe <vSocketListenNextTime+0x2e>
 80102e0:	4b0a      	ldr	r3, [pc, #40]	@ (801030c <vSocketListenNextTime+0x3c>)
 80102e2:	681b      	ldr	r3, [r3, #0]
 80102e4:	687a      	ldr	r2, [r7, #4]
 80102e6:	429a      	cmp	r2, r3
 80102e8:	d009      	beq.n	80102fe <vSocketListenNextTime+0x2e>
        {
            ( void ) FreeRTOS_listen( ( Socket_t ) xSocketToListen, ( BaseType_t ) ( xSocketToListen->u.xTCP.usBacklog ) );
 80102ea:	4b08      	ldr	r3, [pc, #32]	@ (801030c <vSocketListenNextTime+0x3c>)
 80102ec:	681a      	ldr	r2, [r3, #0]
 80102ee:	4b07      	ldr	r3, [pc, #28]	@ (801030c <vSocketListenNextTime+0x3c>)
 80102f0:	681b      	ldr	r3, [r3, #0]
 80102f2:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80102f6:	4619      	mov	r1, r3
 80102f8:	4610      	mov	r0, r2
 80102fa:	f7fe fff3 	bl	800f2e4 <FreeRTOS_listen>
        }

        xSocketToListen = pxSocket;
 80102fe:	4a03      	ldr	r2, [pc, #12]	@ (801030c <vSocketListenNextTime+0x3c>)
 8010300:	687b      	ldr	r3, [r7, #4]
 8010302:	6013      	str	r3, [r2, #0]
    }
 8010304:	bf00      	nop
 8010306:	3708      	adds	r7, #8
 8010308:	46bd      	mov	sp, r7
 801030a:	bd80      	pop	{r7, pc}
 801030c:	20001320 	.word	0x20001320

08010310 <xTCPSocketCheck>:
 *      prvTCPSendRepeated()            // Send at most 8 messages on a row
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC ( declared in portable/NetworkInterface/xxx )
 */
    BaseType_t xTCPSocketCheck( FreeRTOS_Socket_t * pxSocket )
    {
 8010310:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010314:	b086      	sub	sp, #24
 8010316:	af02      	add	r7, sp, #8
 8010318:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = 0;
 801031a:	2300      	movs	r3, #0
 801031c:	60fb      	str	r3, [r7, #12]
        BaseType_t xReady = pdFALSE;
 801031e:	2300      	movs	r3, #0
 8010320:	60bb      	str	r3, [r7, #8]

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.txStream != NULL ) )
 8010322:	687b      	ldr	r3, [r7, #4]
 8010324:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010328:	2b04      	cmp	r3, #4
 801032a:	d907      	bls.n	801033c <xTCPSocketCheck+0x2c>
 801032c:	687b      	ldr	r3, [r7, #4]
 801032e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010332:	2b00      	cmp	r3, #0
 8010334:	d002      	beq.n	801033c <xTCPSocketCheck+0x2c>
        {
            /* The API FreeRTOS_send() might have added data to the TX stream.  Add
             * this data to the windowing system so it can be transmitted. */
            prvTCPAddTxData( pxSocket );
 8010336:	6878      	ldr	r0, [r7, #4]
 8010338:	f003 f834 	bl	80133a4 <prvTCPAddTxData>
        }

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( pxSocket->u.xTCP.pxAckMessage != NULL )
 801033c:	687b      	ldr	r3, [r7, #4]
 801033e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8010342:	2b00      	cmp	r3, #0
 8010344:	d05f      	beq.n	8010406 <xTCPSocketCheck+0xf6>
            {
                /* The first task of this regular socket check is to send-out delayed
                 * ACK's. */
                if( pxSocket->u.xTCP.bits.bUserShutdown == pdFALSE_UNSIGNED )
 8010346:	687b      	ldr	r3, [r7, #4]
 8010348:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801034c:	f003 0320 	and.w	r3, r3, #32
 8010350:	b2db      	uxtb	r3, r3
 8010352:	2b00      	cmp	r3, #0
 8010354:	d148      	bne.n	80103e8 <xTCPSocketCheck+0xd8>
                {
                    /* Earlier data was received but not yet acknowledged.  This
                     * function is called when the TCP timer for the socket expires, the
                     * ACK may be sent now. */
                    if( pxSocket->u.xTCP.eTCPState != eCLOSED )
 8010356:	687b      	ldr	r3, [r7, #4]
 8010358:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801035c:	2b00      	cmp	r3, #0
 801035e:	d03b      	beq.n	80103d8 <xTCPSocketCheck+0xc8>
                    {
                        if( ( xTCPWindowLoggingLevel > 1 ) && ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) )
 8010360:	4b37      	ldr	r3, [pc, #220]	@ (8010440 <xTCPSocketCheck+0x130>)
 8010362:	681b      	ldr	r3, [r3, #0]
 8010364:	2b01      	cmp	r3, #1
 8010366:	dd25      	ble.n	80103b4 <xTCPSocketCheck+0xa4>
 8010368:	687b      	ldr	r3, [r7, #4]
 801036a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801036c:	2b17      	cmp	r3, #23
 801036e:	d021      	beq.n	80103b4 <xTCPSocketCheck+0xa4>
                        {
                            FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u)\n",
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010374:	461e      	mov	r6, r3
 8010376:	687b      	ldr	r3, [r7, #4]
 8010378:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801037c:	4698      	mov	r8, r3
 801037e:	687b      	ldr	r3, [r7, #4]
 8010380:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
 8010384:	687b      	ldr	r3, [r7, #4]
 8010386:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 801038a:	1ad5      	subs	r5, r2, r3
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 8010392:	687b      	ldr	r3, [r7, #4]
 8010394:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8010398:	1ad4      	subs	r4, r2, r3
 801039a:	6878      	ldr	r0, [r7, #4]
 801039c:	f7f9 f81e 	bl	80093dc <uxIPHeaderSizeSocket>
 80103a0:	4603      	mov	r3, r0
 80103a2:	3314      	adds	r3, #20
 80103a4:	9301      	str	r3, [sp, #4]
 80103a6:	9400      	str	r4, [sp, #0]
 80103a8:	462b      	mov	r3, r5
 80103aa:	4642      	mov	r2, r8
 80103ac:	4631      	mov	r1, r6
 80103ae:	4825      	ldr	r0, [pc, #148]	@ (8010444 <xTCPSocketCheck+0x134>)
 80103b0:	f010 fc66 	bl	8020c80 <lUDPLoggingPrintf>
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ) ) );
                        }

                        prvTCPReturnPacket( pxSocket, pxSocket->u.xTCP.pxAckMessage, ( uint32_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER ), ipconfigZERO_COPY_TX_DRIVER );
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	f8d3 40a4 	ldr.w	r4, [r3, #164]	@ 0xa4
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f7f9 f80e 	bl	80093dc <uxIPHeaderSizeSocket>
 80103c0:	4603      	mov	r3, r0
 80103c2:	f103 0214 	add.w	r2, r3, #20
 80103c6:	2301      	movs	r3, #1
 80103c8:	4621      	mov	r1, r4
 80103ca:	6878      	ldr	r0, [r7, #4]
 80103cc:	f002 fac8 	bl	8012960 <prvTCPReturnPacket>

                        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                        {
                            /* The ownership has been passed to the SEND routine,
                             * clear the pointer to it. */
                            pxSocket->u.xTCP.pxAckMessage = NULL;
 80103d0:	687b      	ldr	r3, [r7, #4]
 80103d2:	2200      	movs	r2, #0
 80103d4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                        }
                        #endif /* ipconfigZERO_COPY_TX_DRIVER */
                    }

                    if( prvTCPNextTimeout( pxSocket ) > 1U )
 80103d8:	6878      	ldr	r0, [r7, #4]
 80103da:	f000 faa1 	bl	8010920 <prvTCPNextTimeout>
 80103de:	4603      	mov	r3, r0
 80103e0:	2b01      	cmp	r3, #1
 80103e2:	d901      	bls.n	80103e8 <xTCPSocketCheck+0xd8>
                    {
                        /* Tell the code below that this function is ready. */
                        xReady = pdTRUE;
 80103e4:	2301      	movs	r3, #1
 80103e6:	60bb      	str	r3, [r7, #8]
                    /* The user wants to perform an active shutdown(), skip sending
                     * the delayed ACK.  The function prvTCPSendPacket() will send the
                     * FIN along with the ACK's. */
                }

                if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80103e8:	687b      	ldr	r3, [r7, #4]
 80103ea:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d009      	beq.n	8010406 <xTCPSocketCheck+0xf6>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80103f2:	687b      	ldr	r3, [r7, #4]
 80103f4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80103f8:	4618      	mov	r0, r3
 80103fa:	f006 f9e5 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
                    pxSocket->u.xTCP.pxAckMessage = NULL;
 80103fe:	687b      	ldr	r3, [r7, #4]
 8010400:	2200      	movs	r2, #0
 8010402:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }
            }
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xReady == pdFALSE )
 8010406:	68bb      	ldr	r3, [r7, #8]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d113      	bne.n	8010434 <xTCPSocketCheck+0x124>
        {
            /* The second task of this regular socket check is sending out data. */
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 801040c:	687b      	ldr	r3, [r7, #4]
 801040e:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010412:	2b04      	cmp	r3, #4
 8010414:	d804      	bhi.n	8010420 <xTCPSocketCheck+0x110>
                ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) )
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
            if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) ||
 801041c:	2b02      	cmp	r3, #2
 801041e:	d102      	bne.n	8010426 <xTCPSocketCheck+0x116>
            {
                ( void ) prvTCPSendPacket( pxSocket );
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f002 f9ff 	bl	8012824 <prvTCPSendPacket>
            }

            /* Set the time-out for the next wakeup for this socket. */
            ( void ) prvTCPNextTimeout( pxSocket );
 8010426:	6878      	ldr	r0, [r7, #4]
 8010428:	f000 fa7a 	bl	8010920 <prvTCPNextTimeout>

            #if ( ipconfigTCP_HANG_PROTECTION == 1 )
            {
                /* In all (non-connected) states in which keep-alive messages can not be sent
                 * the anti-hang protocol will close sockets that are 'hanging'. */
                xResult = prvTCPStatusAgeCheck( pxSocket );
 801042c:	6878      	ldr	r0, [r7, #4]
 801042e:	f001 f973 	bl	8011718 <prvTCPStatusAgeCheck>
 8010432:	60f8      	str	r0, [r7, #12]
            }
            #endif
        }

        return xResult;
 8010434:	68fb      	ldr	r3, [r7, #12]
    }
 8010436:	4618      	mov	r0, r3
 8010438:	3710      	adds	r7, #16
 801043a:	46bd      	mov	sp, r7
 801043c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010440:	20001348 	.word	0x20001348
 8010444:	08024c2c 	.word	0x08024c2c

08010448 <prvTCPTouchSocket>:
 * @note This is used for anti-hanging protection and TCP keep-alive messages.
 *       Called in two places: after receiving a packet and after a state change.
 *       The socket's alive timer may be reset.
 */
    void prvTCPTouchSocket( struct xSOCKET * pxSocket )
    {
 8010448:	b580      	push	{r7, lr}
 801044a:	b082      	sub	sp, #8
 801044c:	af00      	add	r7, sp, #0
 801044e:	6078      	str	r0, [r7, #4]
        #if ( ipconfigTCP_HANG_PROTECTION == 1 )
        {
            pxSocket->u.xTCP.xLastActTime = xTaskGetTickCount();
 8010450:	f7f3 fc12 	bl	8003c78 <xTaskGetTickCount>
 8010454:	4602      	mov	r2, r0
 8010456:	687b      	ldr	r3, [r7, #4]
 8010458:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
        }
        #endif

        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
        {
            pxSocket->u.xTCP.bits.bWaitKeepAlive = pdFALSE_UNSIGNED;
 801045c:	687a      	ldr	r2, [r7, #4]
 801045e:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010462:	f36f 0382 	bfc	r3, #2, #1
 8010466:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 801046a:	687a      	ldr	r2, [r7, #4]
 801046c:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8010470:	f36f 0341 	bfc	r3, #1, #1
 8010474:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            pxSocket->u.xTCP.ucKeepRepCount = 0U;
 8010478:	687b      	ldr	r3, [r7, #4]
 801047a:	2200      	movs	r2, #0
 801047c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
            pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 8010480:	f7f3 fbfa 	bl	8003c78 <xTaskGetTickCount>
 8010484:	4602      	mov	r2, r0
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
        }
        #endif

        ( void ) pxSocket;
    }
 801048c:	bf00      	nop
 801048e:	3708      	adds	r7, #8
 8010490:	46bd      	mov	sp, r7
 8010492:	bd80      	pop	{r7, pc}

08010494 <vTCPRemoveTCPChild>:
    /*-----------------------------------------------------------*/

    static BaseType_t vTCPRemoveTCPChild( const FreeRTOS_Socket_t * pxChildSocket )
    {
 8010494:	b480      	push	{r7}
 8010496:	b087      	sub	sp, #28
 8010498:	af00      	add	r7, sp, #0
 801049a:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdFALSE;
 801049c:	2300      	movs	r3, #0
 801049e:	617b      	str	r3, [r7, #20]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 80104a0:	4b15      	ldr	r3, [pc, #84]	@ (80104f8 <vTCPRemoveTCPChild+0x64>)
 80104a2:	60fb      	str	r3, [r7, #12]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 80104a4:	4b15      	ldr	r3, [pc, #84]	@ (80104fc <vTCPRemoveTCPChild+0x68>)
 80104a6:	68db      	ldr	r3, [r3, #12]
 80104a8:	613b      	str	r3, [r7, #16]

        while( pxIterator != pxEnd )
 80104aa:	e01a      	b.n	80104e2 <vTCPRemoveTCPChild+0x4e>
        {
            FreeRTOS_Socket_t * pxSocket;
            pxSocket = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80104ac:	693b      	ldr	r3, [r7, #16]
 80104ae:	68db      	ldr	r3, [r3, #12]
 80104b0:	60bb      	str	r3, [r7, #8]
            pxIterator = ( ListItem_t * ) listGET_NEXT( pxIterator );
 80104b2:	693b      	ldr	r3, [r7, #16]
 80104b4:	685b      	ldr	r3, [r3, #4]
 80104b6:	613b      	str	r3, [r7, #16]

            if( ( pxSocket != pxChildSocket ) && ( pxSocket->usLocalPort == pxChildSocket->usLocalPort ) )
 80104b8:	68ba      	ldr	r2, [r7, #8]
 80104ba:	687b      	ldr	r3, [r7, #4]
 80104bc:	429a      	cmp	r2, r3
 80104be:	d010      	beq.n	80104e2 <vTCPRemoveTCPChild+0x4e>
 80104c0:	68bb      	ldr	r3, [r7, #8]
 80104c2:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 80104c4:	687b      	ldr	r3, [r7, #4]
 80104c6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80104c8:	429a      	cmp	r2, r3
 80104ca:	d10a      	bne.n	80104e2 <vTCPRemoveTCPChild+0x4e>
            {
                if( pxSocket->u.xTCP.pxPeerSocket == pxChildSocket ) /**< for server socket: child, for child socket: parent */
 80104cc:	68bb      	ldr	r3, [r7, #8]
 80104ce:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80104d0:	687a      	ldr	r2, [r7, #4]
 80104d2:	429a      	cmp	r2, r3
 80104d4:	d105      	bne.n	80104e2 <vTCPRemoveTCPChild+0x4e>
                {
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 80104d6:	68bb      	ldr	r3, [r7, #8]
 80104d8:	2200      	movs	r2, #0
 80104da:	67da      	str	r2, [r3, #124]	@ 0x7c
                    xReturn = pdTRUE;
 80104dc:	2301      	movs	r3, #1
 80104de:	617b      	str	r3, [r7, #20]
                    break;
 80104e0:	e003      	b.n	80104ea <vTCPRemoveTCPChild+0x56>
        while( pxIterator != pxEnd )
 80104e2:	693a      	ldr	r2, [r7, #16]
 80104e4:	68fb      	ldr	r3, [r7, #12]
 80104e6:	429a      	cmp	r2, r3
 80104e8:	d1e0      	bne.n	80104ac <vTCPRemoveTCPChild+0x18>
                }
            }
        }

        return xReturn;
 80104ea:	697b      	ldr	r3, [r7, #20]
    }
 80104ec:	4618      	mov	r0, r3
 80104ee:	371c      	adds	r7, #28
 80104f0:	46bd      	mov	sp, r7
 80104f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104f6:	4770      	bx	lr
 80104f8:	2000130c 	.word	0x2000130c
 80104fc:	20001304 	.word	0x20001304

08010500 <vTCPStateChange>:
 * @param[in] pxSocket The socket whose state we are trying to change.
 * @param[in] eTCPState The state to which we want to change to.
 */
    void vTCPStateChange( FreeRTOS_Socket_t * pxSocket,
                          enum eTCP_STATE eTCPState )
    {
 8010500:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010502:	b097      	sub	sp, #92	@ 0x5c
 8010504:	af02      	add	r7, sp, #8
 8010506:	6078      	str	r0, [r7, #4]
 8010508:	460b      	mov	r3, r1
 801050a:	70fb      	strb	r3, [r7, #3]
        FreeRTOS_Socket_t * xParent = pxSocket;
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        BaseType_t bBefore = tcpNOW_CONNECTED( ( BaseType_t ) pxSocket->u.xTCP.eTCPState ); /* Was it connected ? */
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010516:	2b04      	cmp	r3, #4
 8010518:	d906      	bls.n	8010528 <vTCPStateChange+0x28>
 801051a:	687b      	ldr	r3, [r7, #4]
 801051c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010520:	2b08      	cmp	r3, #8
 8010522:	d001      	beq.n	8010528 <vTCPStateChange+0x28>
 8010524:	2301      	movs	r3, #1
 8010526:	e000      	b.n	801052a <vTCPStateChange+0x2a>
 8010528:	2300      	movs	r3, #0
 801052a:	64bb      	str	r3, [r7, #72]	@ 0x48
        BaseType_t bAfter = tcpNOW_CONNECTED( ( BaseType_t ) eTCPState );                   /* Is it connected now ? */
 801052c:	78fb      	ldrb	r3, [r7, #3]
 801052e:	2b04      	cmp	r3, #4
 8010530:	d904      	bls.n	801053c <vTCPStateChange+0x3c>
 8010532:	78fb      	ldrb	r3, [r7, #3]
 8010534:	2b08      	cmp	r3, #8
 8010536:	d001      	beq.n	801053c <vTCPStateChange+0x3c>
 8010538:	2301      	movs	r3, #1
 801053a:	e000      	b.n	801053e <vTCPStateChange+0x3e>
 801053c:	2300      	movs	r3, #0
 801053e:	63bb      	str	r3, [r7, #56]	@ 0x38

        eIPTCPState_t xPreviousState = pxSocket->u.xTCP.eTCPState;
 8010540:	687b      	ldr	r3, [r7, #4]
 8010542:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010546:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

        #if ( ipconfigUSE_CALLBACKS == 1 )
            FreeRTOS_Socket_t * xConnected = NULL;
 801054a:	2300      	movs	r3, #0
 801054c:	647b      	str	r3, [r7, #68]	@ 0x44
        #endif

        if( ( ( xPreviousState == eCONNECT_SYN ) ||
 801054e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010552:	2b02      	cmp	r3, #2
 8010554:	d007      	beq.n	8010566 <vTCPStateChange+0x66>
 8010556:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 801055a:	2b03      	cmp	r3, #3
 801055c:	d003      	beq.n	8010566 <vTCPStateChange+0x66>
              ( xPreviousState == eSYN_FIRST ) ||
 801055e:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010562:	2b04      	cmp	r3, #4
 8010564:	d114      	bne.n	8010590 <vTCPStateChange+0x90>
              ( xPreviousState == eSYN_RECEIVED ) ) &&
 8010566:	78fb      	ldrb	r3, [r7, #3]
 8010568:	2b08      	cmp	r3, #8
 801056a:	d111      	bne.n	8010590 <vTCPStateChange+0x90>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            /* A socket was in the connecting phase but something
             * went wrong and it should be closed. */
            #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                FreeRTOS_debug_printf( ( "Move from %s to %s\n",
 801056c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010570:	4618      	mov	r0, r3
 8010572:	f001 fed7 	bl	8012324 <FreeRTOS_GetTCPStateName>
 8010576:	4604      	mov	r4, r0
 8010578:	78fb      	ldrb	r3, [r7, #3]
 801057a:	4618      	mov	r0, r3
 801057c:	f001 fed2 	bl	8012324 <FreeRTOS_GetTCPStateName>
 8010580:	4603      	mov	r3, r0
 8010582:	461a      	mov	r2, r3
 8010584:	4621      	mov	r1, r4
 8010586:	4875      	ldr	r0, [pc, #468]	@ (801075c <vTCPStateChange+0x25c>)
 8010588:	f010 fb7a 	bl	8020c80 <lUDPLoggingPrintf>
            #endif

            /* Set the flag to show that it was connected before and that the
             * status has changed now. This will cause the control flow to go
             * in the below if condition.*/
            bBefore = pdTRUE;
 801058c:	2301      	movs	r3, #1
 801058e:	64bb      	str	r3, [r7, #72]	@ 0x48
        }

        /* Has the connected status changed? */
        if( bBefore != bAfter )
 8010590:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8010592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010594:	429a      	cmp	r2, r3
 8010596:	f000 809f 	beq.w	80106d8 <vTCPStateChange+0x1d8>
        {
            /* if bPassQueued is true, this socket is an orphan until it gets connected. */
            if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80105a0:	f003 0304 	and.w	r3, r3, #4
 80105a4:	b2db      	uxtb	r3, r3
 80105a6:	2b00      	cmp	r3, #0
 80105a8:	d012      	beq.n	80105d0 <vTCPStateChange+0xd0>
            {
                /* Find it's parent if the reuse bit is not set. */
                if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 80105aa:	687b      	ldr	r3, [r7, #4]
 80105ac:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80105b0:	f003 0308 	and.w	r3, r3, #8
 80105b4:	b2db      	uxtb	r3, r3
 80105b6:	2b00      	cmp	r3, #0
 80105b8:	d10a      	bne.n	80105d0 <vTCPStateChange+0xd0>
                {
                    xParent = pxSocket->u.xTCP.pxPeerSocket;
 80105ba:	687b      	ldr	r3, [r7, #4]
 80105bc:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105be:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    configASSERT( xParent != NULL );
 80105c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105c2:	2b00      	cmp	r3, #0
 80105c4:	d104      	bne.n	80105d0 <vTCPStateChange+0xd0>
 80105c6:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 80105ca:	4865      	ldr	r0, [pc, #404]	@ (8010760 <vTCPStateChange+0x260>)
 80105cc:	f7f0 ff50 	bl	8001470 <vAssertCalled>
                }
            }

            /* Is the socket connected now ? */
            if( bAfter != pdFALSE )
 80105d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	d057      	beq.n	8010686 <vTCPStateChange+0x186>
            {
                /* if bPassQueued is true, this socket is an orphan until it gets connected. */
                if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80105d6:	687b      	ldr	r3, [r7, #4]
 80105d8:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80105dc:	f003 0304 	and.w	r3, r3, #4
 80105e0:	b2db      	uxtb	r3, r3
 80105e2:	2b00      	cmp	r3, #0
 80105e4:	d03c      	beq.n	8010660 <vTCPStateChange+0x160>
                {
                    if( xParent != NULL )
 80105e6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	d027      	beq.n	801063c <vTCPStateChange+0x13c>
                        /* The child socket has got connected.  See if the parent
                         * ( the listening socket ) should be signalled, or if a
                         * call-back must be made, in which case 'xConnected' will
                         * be set to the parent socket. */

                        if( xParent->u.xTCP.pxPeerSocket == NULL )
 80105ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105ee:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105f0:	2b00      	cmp	r3, #0
 80105f2:	d102      	bne.n	80105fa <vTCPStateChange+0xfa>
                        {
                            xParent->u.xTCP.pxPeerSocket = pxSocket;
 80105f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105f6:	687a      	ldr	r2, [r7, #4]
 80105f8:	67da      	str	r2, [r3, #124]	@ 0x7c
                        }

                        xParent->xEventBits |= ( EventBits_t ) eSOCKET_ACCEPT;
 80105fa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80105fc:	681b      	ldr	r3, [r3, #0]
 80105fe:	f043 0204 	orr.w	r2, r3, #4
 8010602:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010604:	601a      	str	r2, [r3, #0]

                        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                        {
                            /* Library support FreeRTOS_select().  Receiving a new
                             * connection is being translated as a READ event. */
                            if( ( xParent->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U )
 8010606:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010608:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801060a:	f003 0301 	and.w	r3, r3, #1
 801060e:	2b00      	cmp	r3, #0
 8010610:	d005      	beq.n	801061e <vTCPStateChange+0x11e>
                            {
                                xParent->xEventBits |= ( ( EventBits_t ) eSELECT_READ ) << SOCKET_EVENT_BIT_COUNT;
 8010612:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 801061a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801061c:	601a      	str	r2, [r3, #0]
                        }
                        #endif

                        #if ( ipconfigUSE_CALLBACKS == 1 )
                        {
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 801061e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010620:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 8010624:	2b00      	cmp	r3, #0
 8010626:	d009      	beq.n	801063c <vTCPStateChange+0x13c>
                                ( xParent->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED ) )
 8010628:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801062a:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801062e:	f003 0308 	and.w	r3, r3, #8
 8010632:	b2db      	uxtb	r3, r3
                            if( ( ipconfigIS_VALID_PROG_ADDRESS( xParent->u.xTCP.pxHandleConnected ) ) &&
 8010634:	2b00      	cmp	r3, #0
 8010636:	d101      	bne.n	801063c <vTCPStateChange+0x13c>
                            {
                                /* The listening socket does not become connected itself, in stead
                                 * a child socket is created.
                                 * Postpone a call the OnConnect event until the end of this function. */
                                xConnected = xParent;
 8010638:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801063a:	647b      	str	r3, [r7, #68]	@ 0x44
                        #endif
                    }

                    /* Don't need to access the parent socket anymore, so the
                     * reference 'pxPeerSocket' may be cleared. */
                    pxSocket->u.xTCP.pxPeerSocket = NULL;
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	2200      	movs	r2, #0
 8010640:	67da      	str	r2, [r3, #124]	@ 0x7c
                    pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 8010642:	687a      	ldr	r2, [r7, #4]
 8010644:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010648:	f36f 0382 	bfc	r3, #2, #1
 801064c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                    /* When true, this socket may be returned in a call to accept(). */
                    pxSocket->u.xTCP.bits.bPassAccept = pdTRUE_UNSIGNED;
 8010650:	687a      	ldr	r2, [r7, #4]
 8010652:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8010656:	f043 0302 	orr.w	r3, r3, #2
 801065a:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
 801065e:	e024      	b.n	80106aa <vTCPStateChange+0x1aa>
                else
                {
                    /* An active connect() has succeeded. In this case there is no
                     * ( listening ) parent socket. Signal the now connected socket. */

                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_CONNECT;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	681b      	ldr	r3, [r3, #0]
 8010664:	f043 0208 	orr.w	r2, r3, #8
 8010668:	687b      	ldr	r3, [r7, #4]
 801066a:	601a      	str	r2, [r3, #0]

                    #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010670:	f003 0302 	and.w	r3, r3, #2
 8010674:	2b00      	cmp	r3, #0
 8010676:	d018      	beq.n	80106aa <vTCPStateChange+0x1aa>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8010678:	687b      	ldr	r3, [r7, #4]
 801067a:	681b      	ldr	r3, [r3, #0]
 801067c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8010680:	687b      	ldr	r3, [r7, #4]
 8010682:	601a      	str	r2, [r3, #0]
 8010684:	e011      	b.n	80106aa <vTCPStateChange+0x1aa>
                }
            }
            else /* bAfter == pdFALSE, connection is closed. */
            {
                /* Notify/wake-up the socket-owner by setting the event bits. */
                xParent->xEventBits |= ( EventBits_t ) eSOCKET_CLOSED;
 8010686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010688:	681b      	ldr	r3, [r3, #0]
 801068a:	f043 0220 	orr.w	r2, r3, #32
 801068e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010690:	601a      	str	r2, [r3, #0]

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( xParent->xSelectBits & ( EventBits_t ) eSELECT_EXCEPT ) != 0U )
 8010692:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010694:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8010696:	f003 0304 	and.w	r3, r3, #4
 801069a:	2b00      	cmp	r3, #0
 801069c:	d005      	beq.n	80106aa <vTCPStateChange+0x1aa>
                    {
                        xParent->xEventBits |= ( ( EventBits_t ) eSELECT_EXCEPT ) << SOCKET_EVENT_BIT_COUNT;
 801069e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106a0:	681b      	ldr	r3, [r3, #0]
 80106a2:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80106a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80106a8:	601a      	str	r2, [r3, #0]
                #endif
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                if( ( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleConnected ) ) && ( xConnected == NULL ) )
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80106b0:	2b00      	cmp	r3, #0
 80106b2:	d004      	beq.n	80106be <vTCPStateChange+0x1be>
 80106b4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80106b6:	2b00      	cmp	r3, #0
 80106b8:	d101      	bne.n	80106be <vTCPStateChange+0x1be>
                {
                    /* The 'connected' state has changed, call the user handler. */
                    xConnected = pxSocket;
 80106ba:	687b      	ldr	r3, [r7, #4]
 80106bc:	647b      	str	r3, [r7, #68]	@ 0x44
                }
            }
            #endif /* ipconfigUSE_CALLBACKS */

            if( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == 0 )
 80106be:	687b      	ldr	r3, [r7, #4]
 80106c0:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80106c4:	4618      	mov	r0, r3
 80106c6:	f000 ffff 	bl	80116c8 <prvTCPSocketIsActive>
 80106ca:	4603      	mov	r3, r0
 80106cc:	2b00      	cmp	r3, #0
 80106ce:	d103      	bne.n	80106d8 <vTCPStateChange+0x1d8>
            {
                /* Now the socket isn't in an active state anymore so it
                 * won't need further attention of the IP-task.
                 * Setting time-out to zero means that the socket won't get checked during
                 * timer events. */
                pxSocket->u.xTCP.usTimeout = 0U;
 80106d0:	687b      	ldr	r3, [r7, #4]
 80106d2:	2200      	movs	r2, #0
 80106d4:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            }
        }

        /* Fill in the new state. */
        pxSocket->u.xTCP.eTCPState = eTCPState;
 80106d8:	687b      	ldr	r3, [r7, #4]
 80106da:	78fa      	ldrb	r2, [r7, #3]
 80106dc:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

        if( ( eTCPState == eCLOSED ) ||
 80106e0:	78fb      	ldrb	r3, [r7, #3]
 80106e2:	2b00      	cmp	r3, #0
 80106e4:	d003      	beq.n	80106ee <vTCPStateChange+0x1ee>
 80106e6:	78fb      	ldrb	r3, [r7, #3]
 80106e8:	2b08      	cmp	r3, #8
 80106ea:	f040 8084 	bne.w	80107f6 <vTCPStateChange+0x2f6>
            ( eTCPState == eCLOSE_WAIT ) )
        {
            BaseType_t xMustClear = pdFALSE;
 80106ee:	2300      	movs	r3, #0
 80106f0:	643b      	str	r3, [r7, #64]	@ 0x40
            BaseType_t xHasCleared = pdFALSE;
 80106f2:	2300      	movs	r3, #0
 80106f4:	63fb      	str	r3, [r7, #60]	@ 0x3c

            if( ( xParent == pxSocket ) && ( pxSocket->u.xTCP.pxPeerSocket != NULL ) )
 80106f6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80106f8:	687b      	ldr	r3, [r7, #4]
 80106fa:	429a      	cmp	r2, r3
 80106fc:	d106      	bne.n	801070c <vTCPStateChange+0x20c>
 80106fe:	687b      	ldr	r3, [r7, #4]
 8010700:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010702:	2b00      	cmp	r3, #0
 8010704:	d002      	beq.n	801070c <vTCPStateChange+0x20c>
            {
                xParent = pxSocket->u.xTCP.pxPeerSocket;
 8010706:	687b      	ldr	r3, [r7, #4]
 8010708:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801070a:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 801070c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801070e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010710:	2b00      	cmp	r3, #0
 8010712:	d006      	beq.n	8010722 <vTCPStateChange+0x222>
                ( xParent->u.xTCP.pxPeerSocket == pxSocket ) )
 8010714:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010716:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
            if( ( xParent->u.xTCP.pxPeerSocket != NULL ) &&
 8010718:	687a      	ldr	r2, [r7, #4]
 801071a:	429a      	cmp	r2, r3
 801071c:	d101      	bne.n	8010722 <vTCPStateChange+0x222>
            {
                xMustClear = pdTRUE;
 801071e:	2301      	movs	r3, #1
 8010720:	643b      	str	r3, [r7, #64]	@ 0x40
                ( void ) xMustClear;
            }

            /* Socket goes to status eCLOSED because of a RST.
             * When nobody owns the socket yet, delete it. */
            FreeRTOS_printf( ( "vTCPStateChange: Closing (Queued %d, Accept %d Reuse %d)\n",
 8010722:	687b      	ldr	r3, [r7, #4]
 8010724:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010728:	f3c3 0380 	ubfx	r3, r3, #2, #1
 801072c:	b2db      	uxtb	r3, r3
 801072e:	4619      	mov	r1, r3
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010736:	f3c3 0340 	ubfx	r3, r3, #1, #1
 801073a:	b2db      	uxtb	r3, r3
 801073c:	461a      	mov	r2, r3
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010744:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8010748:	b2db      	uxtb	r3, r3
 801074a:	4806      	ldr	r0, [pc, #24]	@ (8010764 <vTCPStateChange+0x264>)
 801074c:	f010 fa98 	bl	8020c80 <lUDPLoggingPrintf>
                               pxSocket->u.xTCP.bits.bPassQueued,
                               pxSocket->u.xTCP.bits.bPassAccept,
                               pxSocket->u.xTCP.bits.bReuseSocket ) );
            FreeRTOS_printf( ( "vTCPStateChange: me %p parent %p peer %p clear %d\n",
 8010750:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010752:	2b00      	cmp	r3, #0
 8010754:	d008      	beq.n	8010768 <vTCPStateChange+0x268>
 8010756:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010758:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801075a:	e006      	b.n	801076a <vTCPStateChange+0x26a>
 801075c:	08024c58 	.word	0x08024c58
 8010760:	08024c6c 	.word	0x08024c6c
 8010764:	08024c9c 	.word	0x08024c9c
 8010768:	2300      	movs	r3, #0
 801076a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801076c:	9200      	str	r2, [sp, #0]
 801076e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8010770:	6879      	ldr	r1, [r7, #4]
 8010772:	4865      	ldr	r0, [pc, #404]	@ (8010908 <vTCPStateChange+0x408>)
 8010774:	f010 fa84 	bl	8020c80 <lUDPLoggingPrintf>
                               ( void * ) pxSocket,
                               ( void * ) xParent,
                               xParent ? ( void * ) xParent->u.xTCP.pxPeerSocket : NULL,
                               ( int ) xMustClear ) );

            vTaskSuspendAll();
 8010778:	f7f3 f96c 	bl	8003a54 <vTaskSuspendAll>
            {
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 801077c:	687b      	ldr	r3, [r7, #4]
 801077e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010782:	f003 0304 	and.w	r3, r3, #4
 8010786:	b2db      	uxtb	r3, r3
 8010788:	2b00      	cmp	r3, #0
 801078a:	d107      	bne.n	801079c <vTCPStateChange+0x29c>
                    ( pxSocket->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010792:	f003 0302 	and.w	r3, r3, #2
 8010796:	b2db      	uxtb	r3, r3
                if( ( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED ) ||
 8010798:	2b00      	cmp	r3, #0
 801079a:	d026      	beq.n	80107ea <vTCPStateChange+0x2ea>
                {
                    if( pxSocket->u.xTCP.bits.bReuseSocket == pdFALSE_UNSIGNED )
 801079c:	687b      	ldr	r3, [r7, #4]
 801079e:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80107a2:	f003 0308 	and.w	r3, r3, #8
 80107a6:	b2db      	uxtb	r3, r3
 80107a8:	2b00      	cmp	r3, #0
 80107aa:	d11e      	bne.n	80107ea <vTCPStateChange+0x2ea>
                    {
                        xHasCleared = vTCPRemoveTCPChild( pxSocket );
 80107ac:	6878      	ldr	r0, [r7, #4]
 80107ae:	f7ff fe71 	bl	8010494 <vTCPRemoveTCPChild>
 80107b2:	63f8      	str	r0, [r7, #60]	@ 0x3c
                        ( void ) xHasCleared;

                        pxSocket->u.xTCP.bits.bPassQueued = pdFALSE_UNSIGNED;
 80107b4:	687a      	ldr	r2, [r7, #4]
 80107b6:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80107ba:	f36f 0382 	bfc	r3, #2, #1
 80107be:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        pxSocket->u.xTCP.bits.bPassAccept = pdFALSE_UNSIGNED;
 80107c2:	687a      	ldr	r2, [r7, #4]
 80107c4:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80107c8:	f36f 0341 	bfc	r3, #1, #1
 80107cc:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                        configASSERT( xIsCallingFromIPTask() != pdFALSE );
 80107d0:	f7f9 f978 	bl	8009ac4 <xIsCallingFromIPTask>
 80107d4:	4603      	mov	r3, r0
 80107d6:	2b00      	cmp	r3, #0
 80107d8:	d104      	bne.n	80107e4 <vTCPStateChange+0x2e4>
 80107da:	f44f 7101 	mov.w	r1, #516	@ 0x204
 80107de:	484b      	ldr	r0, [pc, #300]	@ (801090c <vTCPStateChange+0x40c>)
 80107e0:	f7f0 fe46 	bl	8001470 <vAssertCalled>
                        vSocketCloseNextTime( pxSocket );
 80107e4:	6878      	ldr	r0, [r7, #4]
 80107e6:	f7ff fd57 	bl	8010298 <vSocketCloseNextTime>
                    }
                }
            }
            ( void ) xTaskResumeAll();
 80107ea:	f7f3 f941 	bl	8003a70 <xTaskResumeAll>
            FreeRTOS_printf( ( "vTCPStateChange: xHasCleared = %d\n",
 80107ee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80107f0:	4847      	ldr	r0, [pc, #284]	@ (8010910 <vTCPStateChange+0x410>)
 80107f2:	f010 fa45 	bl	8020c80 <lUDPLoggingPrintf>
                               ( int ) xHasCleared ) );
        }

        if( ( eTCPState == eCLOSE_WAIT ) && ( pxSocket->u.xTCP.bits.bReuseSocket == pdTRUE_UNSIGNED ) )
 80107f6:	78fb      	ldrb	r3, [r7, #3]
 80107f8:	2b08      	cmp	r3, #8
 80107fa:	d11b      	bne.n	8010834 <vTCPStateChange+0x334>
 80107fc:	687b      	ldr	r3, [r7, #4]
 80107fe:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8010802:	f003 0308 	and.w	r3, r3, #8
 8010806:	b2db      	uxtb	r3, r3
 8010808:	2b00      	cmp	r3, #0
 801080a:	d013      	beq.n	8010834 <vTCPStateChange+0x334>
        {
            switch( xPreviousState )
 801080c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8010810:	3b03      	subs	r3, #3
 8010812:	2b01      	cmp	r3, #1
 8010814:	d80d      	bhi.n	8010832 <vTCPStateChange+0x332>
            {
                case eSYN_FIRST:    /* 3 (server) Just created, must ACK the SYN request */
                case eSYN_RECEIVED: /* 4 (server) waiting for a confirming connection request */
                    FreeRTOS_debug_printf( ( "Restoring a reuse socket port %u\n", pxSocket->usLocalPort ) );
 8010816:	687b      	ldr	r3, [r7, #4]
 8010818:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801081a:	4619      	mov	r1, r3
 801081c:	483d      	ldr	r0, [pc, #244]	@ (8010914 <vTCPStateChange+0x414>)
 801081e:	f010 fa2f 	bl	8020c80 <lUDPLoggingPrintf>

                    /* Go back into listening mode. Set the TCP status to 'eCLOSED',
                     * otherwise FreeRTOS_listen() will refuse the action. */
                    pxSocket->u.xTCP.eTCPState = eCLOSED;
 8010822:	687b      	ldr	r3, [r7, #4]
 8010824:	2200      	movs	r2, #0
 8010826:	f883 2079 	strb.w	r2, [r3, #121]	@ 0x79

                    /* vSocketListenNextTime() makes sure that FreeRTOS_listen() will be called
                     * before the IP-task handles any new message. */
                    vSocketListenNextTime( pxSocket );
 801082a:	6878      	ldr	r0, [r7, #4]
 801082c:	f7ff fd50 	bl	80102d0 <vSocketListenNextTime>
                    break;
 8010830:	e000      	b.n	8010834 <vTCPStateChange+0x334>

                default:
                    /* Nothing to do. */
                    break;
 8010832:	bf00      	nop
            }
        }

        /* Touch the alive timers because moving to another state. */
        prvTCPTouchSocket( pxSocket );
 8010834:	6878      	ldr	r0, [r7, #4]
 8010836:	f7ff fe07 	bl	8010448 <prvTCPTouchSocket>

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801083a:	4b37      	ldr	r3, [pc, #220]	@ (8010918 <vTCPStateChange+0x418>)
 801083c:	681b      	ldr	r3, [r3, #0]
 801083e:	2b00      	cmp	r3, #0
 8010840:	db4f      	blt.n	80108e2 <vTCPStateChange+0x3e2>
 8010842:	687b      	ldr	r3, [r7, #4]
 8010844:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8010846:	2b17      	cmp	r3, #23
 8010848:	d04b      	beq.n	80108e2 <vTCPStateChange+0x3e2>
            {
                char pcBuffer[ 40 ];

                switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801084a:	687b      	ldr	r3, [r7, #4]
 801084c:	7a1b      	ldrb	r3, [r3, #8]
 801084e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8010852:	b2db      	uxtb	r3, r3
 8010854:	2b00      	cmp	r3, #0
 8010856:	d002      	beq.n	801085e <vTCPStateChange+0x35e>
 8010858:	2b01      	cmp	r3, #1
 801085a:	d01d      	beq.n	8010898 <vTCPStateChange+0x398>
                            break;
                    #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                    default:   /* LCOV_EXCL_LINE */
                        /* MISRA 16.4 Compliance */
                        break; /* LCOV_EXCL_LINE */
 801085c:	e026      	b.n	80108ac <vTCPStateChange+0x3ac>
                               uint32_t ulIPAddress = FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 801085e:	687b      	ldr	r3, [r7, #4]
 8010860:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010862:	061a      	lsls	r2, r3, #24
 8010864:	687b      	ldr	r3, [r7, #4]
 8010866:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010868:	021b      	lsls	r3, r3, #8
 801086a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801086e:	431a      	orrs	r2, r3
 8010870:	687b      	ldr	r3, [r7, #4]
 8010872:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010874:	0a1b      	lsrs	r3, r3, #8
 8010876:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801087a:	431a      	orrs	r2, r3
 801087c:	687b      	ldr	r3, [r7, #4]
 801087e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8010880:	0e1b      	lsrs	r3, r3, #24
 8010882:	4313      	orrs	r3, r2
 8010884:	633b      	str	r3, [r7, #48]	@ 0x30
                               FreeRTOS_inet_ntop( FREERTOS_AF_INET4,
 8010886:	f107 0208 	add.w	r2, r7, #8
 801088a:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 801088e:	2328      	movs	r3, #40	@ 0x28
 8010890:	2002      	movs	r0, #2
 8010892:	f7fe f827 	bl	800e8e4 <FreeRTOS_inet_ntop>
                           break;
 8010896:	e009      	b.n	80108ac <vTCPStateChange+0x3ac>
                                                pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8010898:	687b      	ldr	r3, [r7, #4]
 801089a:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                            FreeRTOS_inet_ntop( FREERTOS_AF_INET6,
 801089e:	f107 0208 	add.w	r2, r7, #8
 80108a2:	2328      	movs	r3, #40	@ 0x28
 80108a4:	200a      	movs	r0, #10
 80108a6:	f7fe f81d 	bl	800e8e4 <FreeRTOS_inet_ntop>
                            break;
 80108aa:	bf00      	nop
                }

                FreeRTOS_debug_printf( ( "Socket %u -> [%s]:%u State %s->%s\n",
 80108ac:	687b      	ldr	r3, [r7, #4]
 80108ae:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80108b0:	461d      	mov	r5, r3
 80108b2:	687b      	ldr	r3, [r7, #4]
 80108b4:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80108b8:	461e      	mov	r6, r3
 80108ba:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80108be:	4618      	mov	r0, r3
 80108c0:	f001 fd30 	bl	8012324 <FreeRTOS_GetTCPStateName>
 80108c4:	4604      	mov	r4, r0
 80108c6:	78fb      	ldrb	r3, [r7, #3]
 80108c8:	4618      	mov	r0, r3
 80108ca:	f001 fd2b 	bl	8012324 <FreeRTOS_GetTCPStateName>
 80108ce:	4603      	mov	r3, r0
 80108d0:	f107 0208 	add.w	r2, r7, #8
 80108d4:	9301      	str	r3, [sp, #4]
 80108d6:	9400      	str	r4, [sp, #0]
 80108d8:	4633      	mov	r3, r6
 80108da:	4629      	mov	r1, r5
 80108dc:	480f      	ldr	r0, [pc, #60]	@ (801091c <vTCPStateChange+0x41c>)
 80108de:	f010 f9cf 	bl	8020c80 <lUDPLoggingPrintf>
        }
        #endif /* ipconfigHAS_DEBUG_PRINTF */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            if( xConnected != NULL )
 80108e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108e4:	2b00      	cmp	r3, #0
 80108e6:	d005      	beq.n	80108f4 <vTCPStateChange+0x3f4>
            {
                /* The 'connected' state has changed, call the OnConnect handler of the parent. */
                xConnected->u.xTCP.pxHandleConnected( ( Socket_t ) xConnected, bAfter );
 80108e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80108ea:	f8d3 3110 	ldr.w	r3, [r3, #272]	@ 0x110
 80108ee:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80108f0:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80108f2:	4798      	blx	r3
            }
        }
        #endif

        if( xParent != NULL )
 80108f4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80108f6:	2b00      	cmp	r3, #0
 80108f8:	d002      	beq.n	8010900 <vTCPStateChange+0x400>
        {
            vSocketWakeUpUser( xParent );
 80108fa:	6cf8      	ldr	r0, [r7, #76]	@ 0x4c
 80108fc:	f7fe f871 	bl	800e9e2 <vSocketWakeUpUser>
        }
    }
 8010900:	bf00      	nop
 8010902:	3754      	adds	r7, #84	@ 0x54
 8010904:	46bd      	mov	sp, r7
 8010906:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010908:	08024cd8 	.word	0x08024cd8
 801090c:	08024c6c 	.word	0x08024c6c
 8010910:	08024d0c 	.word	0x08024d0c
 8010914:	08024d30 	.word	0x08024d30
 8010918:	20001348 	.word	0x20001348
 801091c:	08024d54 	.word	0x08024d54

08010920 <prvTCPNextTimeout>:
 * @param[in] pxSocket The socket to be checked.
 *
 * @return The number of clock ticks before the timer expires.
 */
    TickType_t prvTCPNextTimeout( struct xSOCKET * pxSocket )
    {
 8010920:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010924:	b098      	sub	sp, #96	@ 0x60
 8010926:	af02      	add	r7, sp, #8
 8010928:	64f8      	str	r0, [r7, #76]	@ 0x4c
        TickType_t ulDelayMs = ( TickType_t ) tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 801092a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 801092e:	653b      	str	r3, [r7, #80]	@ 0x50

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8010930:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010932:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010936:	2b02      	cmp	r3, #2
 8010938:	f040 80cc 	bne.w	8010ad4 <prvTCPNextTimeout+0x1b4>
        {
            /* The socket is actively connecting to a peer. */
            if( pxSocket->u.xTCP.bits.bConnPrepared != pdFALSE_UNSIGNED )
 801093c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801093e:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8010942:	f003 0308 	and.w	r3, r3, #8
 8010946:	b2db      	uxtb	r3, r3
 8010948:	2b00      	cmp	r3, #0
 801094a:	d01a      	beq.n	8010982 <prvTCPNextTimeout+0x62>
            {
                /* Ethernet address has been found, use progressive timeout for
                 * active connect(). */
                if( pxSocket->u.xTCP.ucRepCount < 3U )
 801094c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801094e:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8010952:	2b02      	cmp	r3, #2
 8010954:	d811      	bhi.n	801097a <prvTCPNextTimeout+0x5a>
                {
                    if( pxSocket->u.xTCP.ucRepCount == 0U )
 8010956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010958:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801095c:	2b00      	cmp	r3, #0
 801095e:	d102      	bne.n	8010966 <prvTCPNextTimeout+0x46>
                    {
                        ulDelayMs = 0U;
 8010960:	2300      	movs	r3, #0
 8010962:	653b      	str	r3, [r7, #80]	@ 0x50
 8010964:	e010      	b.n	8010988 <prvTCPNextTimeout+0x68>
                    }
                    else
                    {
                        ulDelayMs = ( ( uint32_t ) 3000U ) << ( pxSocket->u.xTCP.ucRepCount - 1U );
 8010966:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010968:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801096c:	3b01      	subs	r3, #1
 801096e:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 8010972:	fa02 f303 	lsl.w	r3, r2, r3
 8010976:	653b      	str	r3, [r7, #80]	@ 0x50
 8010978:	e006      	b.n	8010988 <prvTCPNextTimeout+0x68>
                    }
                }
                else
                {
                    ulDelayMs = 11000U;
 801097a:	f642 23f8 	movw	r3, #11000	@ 0x2af8
 801097e:	653b      	str	r3, [r7, #80]	@ 0x50
 8010980:	e002      	b.n	8010988 <prvTCPNextTimeout+0x68>
                }
            }
            else
            {
                /* Still in the ARP phase: check every half second. */
                ulDelayMs = 500U;
 8010982:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8010986:	653b      	str	r3, [r7, #80]	@ 0x50
            }

            FreeRTOS_debug_printf( ( "Connect[%xip:%u]: next timeout %u: %u ms\n",
 8010988:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801098a:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801098c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801098e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8010992:	4618      	mov	r0, r3
 8010994:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010996:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 801099a:	461a      	mov	r2, r3
 801099c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801099e:	9300      	str	r3, [sp, #0]
 80109a0:	4613      	mov	r3, r2
 80109a2:	4602      	mov	r2, r0
 80109a4:	48a4      	ldr	r0, [pc, #656]	@ (8010c38 <prvTCPNextTimeout+0x318>)
 80109a6:	f010 f96b 	bl	8020c80 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort,
                                     pxSocket->u.xTCP.ucRepCount, ( unsigned ) ulDelayMs ) );
            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs );
 80109aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80109ac:	2200      	movs	r2, #0
 80109ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80109b0:	647a      	str	r2, [r7, #68]	@ 0x44
 80109b2:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 80109b6:	4622      	mov	r2, r4
 80109b8:	462b      	mov	r3, r5
 80109ba:	f04f 0000 	mov.w	r0, #0
 80109be:	f04f 0100 	mov.w	r1, #0
 80109c2:	0159      	lsls	r1, r3, #5
 80109c4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80109c8:	0150      	lsls	r0, r2, #5
 80109ca:	4602      	mov	r2, r0
 80109cc:	460b      	mov	r3, r1
 80109ce:	4621      	mov	r1, r4
 80109d0:	1a51      	subs	r1, r2, r1
 80109d2:	6239      	str	r1, [r7, #32]
 80109d4:	4629      	mov	r1, r5
 80109d6:	eb63 0301 	sbc.w	r3, r3, r1
 80109da:	627b      	str	r3, [r7, #36]	@ 0x24
 80109dc:	f04f 0200 	mov.w	r2, #0
 80109e0:	f04f 0300 	mov.w	r3, #0
 80109e4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80109e8:	4649      	mov	r1, r9
 80109ea:	008b      	lsls	r3, r1, #2
 80109ec:	4641      	mov	r1, r8
 80109ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80109f2:	4641      	mov	r1, r8
 80109f4:	008a      	lsls	r2, r1, #2
 80109f6:	4610      	mov	r0, r2
 80109f8:	4619      	mov	r1, r3
 80109fa:	4603      	mov	r3, r0
 80109fc:	4622      	mov	r2, r4
 80109fe:	189b      	adds	r3, r3, r2
 8010a00:	61bb      	str	r3, [r7, #24]
 8010a02:	462b      	mov	r3, r5
 8010a04:	460a      	mov	r2, r1
 8010a06:	eb42 0303 	adc.w	r3, r2, r3
 8010a0a:	61fb      	str	r3, [r7, #28]
 8010a0c:	f04f 0200 	mov.w	r2, #0
 8010a10:	f04f 0300 	mov.w	r3, #0
 8010a14:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8010a18:	4629      	mov	r1, r5
 8010a1a:	00cb      	lsls	r3, r1, #3
 8010a1c:	4621      	mov	r1, r4
 8010a1e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010a22:	4621      	mov	r1, r4
 8010a24:	00ca      	lsls	r2, r1, #3
 8010a26:	4610      	mov	r0, r2
 8010a28:	4619      	mov	r1, r3
 8010a2a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010a2e:	f04f 0300 	mov.w	r3, #0
 8010a32:	f7ef fcbd 	bl	80003b0 <__aeabi_uldivmod>
 8010a36:	4602      	mov	r2, r0
 8010a38:	460b      	mov	r3, r1
 8010a3a:	4613      	mov	r3, r2
 8010a3c:	2b00      	cmp	r3, #0
 8010a3e:	d044      	beq.n	8010aca <prvTCPNextTimeout+0x1aa>
 8010a40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010a42:	2200      	movs	r2, #0
 8010a44:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010a46:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8010a48:	e9d7 450e 	ldrd	r4, r5, [r7, #56]	@ 0x38
 8010a4c:	4622      	mov	r2, r4
 8010a4e:	462b      	mov	r3, r5
 8010a50:	f04f 0000 	mov.w	r0, #0
 8010a54:	f04f 0100 	mov.w	r1, #0
 8010a58:	0159      	lsls	r1, r3, #5
 8010a5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010a5e:	0150      	lsls	r0, r2, #5
 8010a60:	4602      	mov	r2, r0
 8010a62:	460b      	mov	r3, r1
 8010a64:	4621      	mov	r1, r4
 8010a66:	ebb2 0a01 	subs.w	sl, r2, r1
 8010a6a:	4629      	mov	r1, r5
 8010a6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8010a70:	f04f 0200 	mov.w	r2, #0
 8010a74:	f04f 0300 	mov.w	r3, #0
 8010a78:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8010a7c:	ea43 739a 	orr.w	r3, r3, sl, lsr #30
 8010a80:	ea4f 028a 	mov.w	r2, sl, lsl #2
 8010a84:	4692      	mov	sl, r2
 8010a86:	469b      	mov	fp, r3
 8010a88:	4623      	mov	r3, r4
 8010a8a:	eb1a 0303 	adds.w	r3, sl, r3
 8010a8e:	613b      	str	r3, [r7, #16]
 8010a90:	462b      	mov	r3, r5
 8010a92:	eb4b 0303 	adc.w	r3, fp, r3
 8010a96:	617b      	str	r3, [r7, #20]
 8010a98:	f04f 0200 	mov.w	r2, #0
 8010a9c:	f04f 0300 	mov.w	r3, #0
 8010aa0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8010aa4:	4629      	mov	r1, r5
 8010aa6:	00cb      	lsls	r3, r1, #3
 8010aa8:	4621      	mov	r1, r4
 8010aaa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010aae:	4621      	mov	r1, r4
 8010ab0:	00ca      	lsls	r2, r1, #3
 8010ab2:	4610      	mov	r0, r2
 8010ab4:	4619      	mov	r1, r3
 8010ab6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010aba:	f04f 0300 	mov.w	r3, #0
 8010abe:	f7ef fc77 	bl	80003b0 <__aeabi_uldivmod>
 8010ac2:	4602      	mov	r2, r0
 8010ac4:	460b      	mov	r3, r1
 8010ac6:	b292      	uxth	r2, r2
 8010ac8:	e000      	b.n	8010acc <prvTCPNextTimeout+0x1ac>
 8010aca:	2201      	movs	r2, #1
 8010acc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ace:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8010ad2:	e0a8      	b.n	8010c26 <prvTCPNextTimeout+0x306>
        }
        else if( pxSocket->u.xTCP.usTimeout == 0U )
 8010ad4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ad6:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8010ada:	2b00      	cmp	r3, #0
 8010adc:	f040 80a3 	bne.w	8010c26 <prvTCPNextTimeout+0x306>
        {
            /* Let the sliding window mechanism decide what time-out is appropriate. */
            BaseType_t xResult = xTCPWindowTxHasData( &pxSocket->u.xTCP.xTCPWindow, pxSocket->u.xTCP.ulWindowSize, &ulDelayMs );
 8010ae0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ae2:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8010ae6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010ae8:	f8d3 1114 	ldr.w	r1, [r3, #276]	@ 0x114
 8010aec:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 8010af0:	461a      	mov	r2, r3
 8010af2:	f004 fcbd 	bl	8015470 <xTCPWindowTxHasData>
 8010af6:	6578      	str	r0, [r7, #84]	@ 0x54

            if( ulDelayMs == 0U )
 8010af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d108      	bne.n	8010b10 <prvTCPNextTimeout+0x1f0>
            {
                if( xResult != ( BaseType_t ) 0 )
 8010afe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	d002      	beq.n	8010b0a <prvTCPNextTimeout+0x1ea>
                {
                    ulDelayMs = 1U;
 8010b04:	2301      	movs	r3, #1
 8010b06:	653b      	str	r3, [r7, #80]	@ 0x50
 8010b08:	e002      	b.n	8010b10 <prvTCPNextTimeout+0x1f0>
                }
                else
                {
                    ulDelayMs = tcpMAXIMUM_TCP_WAKEUP_TIME_MS;
 8010b0a:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8010b0e:	653b      	str	r3, [r7, #80]	@ 0x50
            else
            {
                /* ulDelayMs contains the time to wait before a re-transmission. */
            }

            pxSocket->u.xTCP.usTimeout = ( uint16_t ) ipMS_TO_MIN_TICKS( ulDelayMs ); /* LCOV_EXCL_BR_LINE ulDelayMs will not be smaller than 1 */
 8010b10:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b12:	2200      	movs	r2, #0
 8010b14:	633b      	str	r3, [r7, #48]	@ 0x30
 8010b16:	637a      	str	r2, [r7, #52]	@ 0x34
 8010b18:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8010b1c:	4652      	mov	r2, sl
 8010b1e:	465b      	mov	r3, fp
 8010b20:	f04f 0000 	mov.w	r0, #0
 8010b24:	f04f 0100 	mov.w	r1, #0
 8010b28:	0159      	lsls	r1, r3, #5
 8010b2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010b2e:	0150      	lsls	r0, r2, #5
 8010b30:	4602      	mov	r2, r0
 8010b32:	460b      	mov	r3, r1
 8010b34:	4651      	mov	r1, sl
 8010b36:	ebb2 0801 	subs.w	r8, r2, r1
 8010b3a:	4659      	mov	r1, fp
 8010b3c:	eb63 0901 	sbc.w	r9, r3, r1
 8010b40:	f04f 0200 	mov.w	r2, #0
 8010b44:	f04f 0300 	mov.w	r3, #0
 8010b48:	ea4f 0389 	mov.w	r3, r9, lsl #2
 8010b4c:	ea43 7398 	orr.w	r3, r3, r8, lsr #30
 8010b50:	ea4f 0288 	mov.w	r2, r8, lsl #2
 8010b54:	4690      	mov	r8, r2
 8010b56:	4699      	mov	r9, r3
 8010b58:	4653      	mov	r3, sl
 8010b5a:	eb18 0303 	adds.w	r3, r8, r3
 8010b5e:	60bb      	str	r3, [r7, #8]
 8010b60:	465b      	mov	r3, fp
 8010b62:	eb49 0303 	adc.w	r3, r9, r3
 8010b66:	60fb      	str	r3, [r7, #12]
 8010b68:	f04f 0200 	mov.w	r2, #0
 8010b6c:	f04f 0300 	mov.w	r3, #0
 8010b70:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8010b74:	4649      	mov	r1, r9
 8010b76:	00cb      	lsls	r3, r1, #3
 8010b78:	4641      	mov	r1, r8
 8010b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010b7e:	4641      	mov	r1, r8
 8010b80:	00ca      	lsls	r2, r1, #3
 8010b82:	4610      	mov	r0, r2
 8010b84:	4619      	mov	r1, r3
 8010b86:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010b8a:	f04f 0300 	mov.w	r3, #0
 8010b8e:	f7ef fc0f 	bl	80003b0 <__aeabi_uldivmod>
 8010b92:	4602      	mov	r2, r0
 8010b94:	460b      	mov	r3, r1
 8010b96:	4613      	mov	r3, r2
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d040      	beq.n	8010c1e <prvTCPNextTimeout+0x2fe>
 8010b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8010b9e:	2200      	movs	r2, #0
 8010ba0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8010ba4:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8010ba8:	4642      	mov	r2, r8
 8010baa:	464b      	mov	r3, r9
 8010bac:	f04f 0000 	mov.w	r0, #0
 8010bb0:	f04f 0100 	mov.w	r1, #0
 8010bb4:	0159      	lsls	r1, r3, #5
 8010bb6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010bba:	0150      	lsls	r0, r2, #5
 8010bbc:	4602      	mov	r2, r0
 8010bbe:	460b      	mov	r3, r1
 8010bc0:	4641      	mov	r1, r8
 8010bc2:	1a54      	subs	r4, r2, r1
 8010bc4:	4649      	mov	r1, r9
 8010bc6:	eb63 0501 	sbc.w	r5, r3, r1
 8010bca:	f04f 0200 	mov.w	r2, #0
 8010bce:	f04f 0300 	mov.w	r3, #0
 8010bd2:	00ab      	lsls	r3, r5, #2
 8010bd4:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8010bd8:	00a2      	lsls	r2, r4, #2
 8010bda:	4614      	mov	r4, r2
 8010bdc:	461d      	mov	r5, r3
 8010bde:	4643      	mov	r3, r8
 8010be0:	18e3      	adds	r3, r4, r3
 8010be2:	603b      	str	r3, [r7, #0]
 8010be4:	464b      	mov	r3, r9
 8010be6:	eb45 0303 	adc.w	r3, r5, r3
 8010bea:	607b      	str	r3, [r7, #4]
 8010bec:	f04f 0200 	mov.w	r2, #0
 8010bf0:	f04f 0300 	mov.w	r3, #0
 8010bf4:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010bf8:	4629      	mov	r1, r5
 8010bfa:	00cb      	lsls	r3, r1, #3
 8010bfc:	4621      	mov	r1, r4
 8010bfe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8010c02:	4621      	mov	r1, r4
 8010c04:	00ca      	lsls	r2, r1, #3
 8010c06:	4610      	mov	r0, r2
 8010c08:	4619      	mov	r1, r3
 8010c0a:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8010c0e:	f04f 0300 	mov.w	r3, #0
 8010c12:	f7ef fbcd 	bl	80003b0 <__aeabi_uldivmod>
 8010c16:	4602      	mov	r2, r0
 8010c18:	460b      	mov	r3, r1
 8010c1a:	b292      	uxth	r2, r2
 8010c1c:	e000      	b.n	8010c20 <prvTCPNextTimeout+0x300>
 8010c1e:	2201      	movs	r2, #1
 8010c20:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c22:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
            /* field '.usTimeout' has already been set (by the
             * keep-alive/delayed-ACK mechanism). */
        }

        /* Return the number of clock ticks before the timer expires. */
        return ( TickType_t ) pxSocket->u.xTCP.usTimeout;
 8010c26:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8010c28:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
    }
 8010c2c:	4618      	mov	r0, r3
 8010c2e:	3758      	adds	r7, #88	@ 0x58
 8010c30:	46bd      	mov	sp, r7
 8010c32:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010c36:	bf00      	nop
 8010c38:	08024d78 	.word	0x08024d78

08010c3c <xGetSourceAddrFromBuffer>:
 * @param[in] pucEthernetBuffer The Ethernet buffer from which the source address will be retrieved.
 *
 * @return IPv46_Address_t struct containing the source IP address.
 */
    static IPv46_Address_t xGetSourceAddrFromBuffer( const uint8_t * const pucEthernetBuffer )
    {
 8010c3c:	b4b0      	push	{r4, r5, r7}
 8010c3e:	b08b      	sub	sp, #44	@ 0x2c
 8010c40:	af00      	add	r7, sp, #0
 8010c42:	6078      	str	r0, [r7, #4]
 8010c44:	6039      	str	r1, [r7, #0]

        /* Map the buffer onto Ethernet Header struct for easy access to fields. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const EthernetHeader_t * pxHeader = ( ( const EthernetHeader_t * ) pucEthernetBuffer );
 8010c46:	683b      	ldr	r3, [r7, #0]
 8010c48:	627b      	str	r3, [r7, #36]	@ 0x24

        if( pxHeader->usFrameType == ( uint16_t ) ipIPv6_FRAME_TYPE )
 8010c4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010c4c:	899b      	ldrh	r3, [r3, #12]
 8010c4e:	b29b      	uxth	r3, r3
 8010c50:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8010c54:	4293      	cmp	r3, r2
 8010c56:	d10e      	bne.n	8010c76 <xGetSourceAddrFromBuffer+0x3a>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_IPv6_t * const pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8010c58:	683b      	ldr	r3, [r7, #0]
 8010c5a:	330e      	adds	r3, #14
 8010c5c:	61fb      	str	r3, [r7, #28]
            xSourceAddr.xIs_IPv6 = pdTRUE;
 8010c5e:	2301      	movs	r3, #1
 8010c60:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( xSourceAddr.xIPAddress.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, sizeof( IPv6_Address_t ) );
 8010c62:	69fb      	ldr	r3, [r7, #28]
 8010c64:	3308      	adds	r3, #8
 8010c66:	f107 0408 	add.w	r4, r7, #8
 8010c6a:	6818      	ldr	r0, [r3, #0]
 8010c6c:	6859      	ldr	r1, [r3, #4]
 8010c6e:	689a      	ldr	r2, [r3, #8]
 8010c70:	68db      	ldr	r3, [r3, #12]
 8010c72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010c74:	e018      	b.n	8010ca8 <xGetSourceAddrFromBuffer+0x6c>
        {
            /* Map the ethernet buffer onto the IPHeader_t struct for easy access to the fields. */
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const IPHeader_t * const pxIPHeader = ( ( const IPHeader_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8010c76:	683b      	ldr	r3, [r7, #0]
 8010c78:	330e      	adds	r3, #14
 8010c7a:	623b      	str	r3, [r7, #32]
            xSourceAddr.xIs_IPv6 = pdFALSE;
 8010c7c:	2300      	movs	r3, #0
 8010c7e:	61bb      	str	r3, [r7, #24]
            xSourceAddr.xIPAddress.ulIP_IPv4 = FreeRTOS_htonl( pxIPHeader->ulSourceIPAddress );
 8010c80:	6a3b      	ldr	r3, [r7, #32]
 8010c82:	68db      	ldr	r3, [r3, #12]
 8010c84:	061a      	lsls	r2, r3, #24
 8010c86:	6a3b      	ldr	r3, [r7, #32]
 8010c88:	68db      	ldr	r3, [r3, #12]
 8010c8a:	021b      	lsls	r3, r3, #8
 8010c8c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010c90:	431a      	orrs	r2, r3
 8010c92:	6a3b      	ldr	r3, [r7, #32]
 8010c94:	68db      	ldr	r3, [r3, #12]
 8010c96:	0a1b      	lsrs	r3, r3, #8
 8010c98:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010c9c:	431a      	orrs	r2, r3
 8010c9e:	6a3b      	ldr	r3, [r7, #32]
 8010ca0:	68db      	ldr	r3, [r3, #12]
 8010ca2:	0e1b      	lsrs	r3, r3, #24
 8010ca4:	4313      	orrs	r3, r2
 8010ca6:	60bb      	str	r3, [r7, #8]
        }

        return xSourceAddr;
 8010ca8:	687b      	ldr	r3, [r7, #4]
 8010caa:	461d      	mov	r5, r3
 8010cac:	f107 0408 	add.w	r4, r7, #8
 8010cb0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8010cb2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8010cb4:	6823      	ldr	r3, [r4, #0]
 8010cb6:	602b      	str	r3, [r5, #0]
    }
 8010cb8:	6878      	ldr	r0, [r7, #4]
 8010cba:	372c      	adds	r7, #44	@ 0x2c
 8010cbc:	46bd      	mov	sp, r7
 8010cbe:	bcb0      	pop	{r4, r5, r7}
 8010cc0:	4770      	bx	lr
	...

08010cc4 <xProcessReceivedTCPPacket>:
 *      prvTCPSendRepeated()
 *          prvTCPReturnPacket()        // Prepare for returning
 *          xNetworkInterfaceOutput()   // Sends data to the NIC
 */
    BaseType_t xProcessReceivedTCPPacket( NetworkBufferDescriptor_t * pxDescriptor )
    {
 8010cc4:	b5b0      	push	{r4, r5, r7, lr}
 8010cc6:	b096      	sub	sp, #88	@ 0x58
 8010cc8:	af04      	add	r7, sp, #16
 8010cca:	6078      	str	r0, [r7, #4]
        BaseType_t xResult = pdPASS;
 8010ccc:	2301      	movs	r3, #1
 8010cce:	647b      	str	r3, [r7, #68]	@ 0x44
        /* Function might modify the parameter. */
        NetworkBufferDescriptor_t * pxNetworkBuffer;
        size_t uxIPHeaderOffset;

        configASSERT( pxDescriptor != NULL );
 8010cd0:	687b      	ldr	r3, [r7, #4]
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d104      	bne.n	8010ce0 <xProcessReceivedTCPPacket+0x1c>
 8010cd6:	f240 21f7 	movw	r1, #759	@ 0x2f7
 8010cda:	4898      	ldr	r0, [pc, #608]	@ (8010f3c <xProcessReceivedTCPPacket+0x278>)
 8010cdc:	f7f0 fbc8 	bl	8001470 <vAssertCalled>
        configASSERT( pxDescriptor->pucEthernetBuffer != NULL );
 8010ce0:	687b      	ldr	r3, [r7, #4]
 8010ce2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010ce4:	2b00      	cmp	r3, #0
 8010ce6:	d104      	bne.n	8010cf2 <xProcessReceivedTCPPacket+0x2e>
 8010ce8:	f44f 713e 	mov.w	r1, #760	@ 0x2f8
 8010cec:	4893      	ldr	r0, [pc, #588]	@ (8010f3c <xProcessReceivedTCPPacket+0x278>)
 8010cee:	f7f0 fbbf 	bl	8001470 <vAssertCalled>

        pxNetworkBuffer = pxDescriptor;
 8010cf2:	687b      	ldr	r3, [r7, #4]
 8010cf4:	61fb      	str	r3, [r7, #28]
        uxIPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 8010cf6:	69fb      	ldr	r3, [r7, #28]
 8010cf8:	4618      	mov	r0, r3
 8010cfa:	f7f8 fb55 	bl	80093a8 <uxIPHeaderSizePacket>
 8010cfe:	4603      	mov	r3, r0
 8010d00:	330e      	adds	r3, #14
 8010d02:	63fb      	str	r3, [r7, #60]	@ 0x3c

        /* Check for a minimum packet size. */
        if( pxNetworkBuffer->xDataLength < ( uxIPHeaderOffset + ipSIZE_OF_TCP_HEADER ) )
 8010d04:	69fb      	ldr	r3, [r7, #28]
 8010d06:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8010d08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d0a:	3314      	adds	r3, #20
 8010d0c:	429a      	cmp	r2, r3
 8010d0e:	d202      	bcs.n	8010d16 <xProcessReceivedTCPPacket+0x52>
        {
            xResult = pdFAIL;
 8010d10:	2300      	movs	r3, #0
 8010d12:	647b      	str	r3, [r7, #68]	@ 0x44
 8010d14:	e191      	b.n	801103a <xProcessReceivedTCPPacket+0x376>
        {
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
                                                &( pxNetworkBuffer->pucEthernetBuffer[ uxIPHeaderOffset ] ) );
 8010d16:	69fb      	ldr	r3, [r7, #28]
 8010d18:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
            const TCPHeader_t * pxTCPHeader = ( ( const TCPHeader_t * )
 8010d1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010d1c:	4413      	add	r3, r2
 8010d1e:	63bb      	str	r3, [r7, #56]	@ 0x38

            const uint16_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8010d20:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d22:	7b5b      	ldrb	r3, [r3, #13]
 8010d24:	86fb      	strh	r3, [r7, #54]	@ 0x36
            const uint16_t usLocalPort = FreeRTOS_htons( pxTCPHeader->usDestinationPort );
 8010d26:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d28:	885b      	ldrh	r3, [r3, #2]
 8010d2a:	b29b      	uxth	r3, r3
 8010d2c:	021b      	lsls	r3, r3, #8
 8010d2e:	b21a      	sxth	r2, r3
 8010d30:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d32:	885b      	ldrh	r3, [r3, #2]
 8010d34:	b29b      	uxth	r3, r3
 8010d36:	0a1b      	lsrs	r3, r3, #8
 8010d38:	b29b      	uxth	r3, r3
 8010d3a:	b21b      	sxth	r3, r3
 8010d3c:	4313      	orrs	r3, r2
 8010d3e:	b21b      	sxth	r3, r3
 8010d40:	86bb      	strh	r3, [r7, #52]	@ 0x34
            const uint16_t usRemotePort = FreeRTOS_htons( pxTCPHeader->usSourcePort );
 8010d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d44:	881b      	ldrh	r3, [r3, #0]
 8010d46:	b29b      	uxth	r3, r3
 8010d48:	021b      	lsls	r3, r3, #8
 8010d4a:	b21a      	sxth	r2, r3
 8010d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010d4e:	881b      	ldrh	r3, [r3, #0]
 8010d50:	b29b      	uxth	r3, r3
 8010d52:	0a1b      	lsrs	r3, r3, #8
 8010d54:	b29b      	uxth	r3, r3
 8010d56:	b21b      	sxth	r3, r3
 8010d58:	4313      	orrs	r3, r2
 8010d5a:	b21b      	sxth	r3, r3
 8010d5c:	867b      	strh	r3, [r7, #50]	@ 0x32
            const IPv46_Address_t xRemoteIP = xGetSourceAddrFromBuffer( pxNetworkBuffer->pucEthernetBuffer );
 8010d5e:	69fb      	ldr	r3, [r7, #28]
 8010d60:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010d62:	f107 0308 	add.w	r3, r7, #8
 8010d66:	4611      	mov	r1, r2
 8010d68:	4618      	mov	r0, r3
 8010d6a:	f7ff ff67 	bl	8010c3c <xGetSourceAddrFromBuffer>

            /* Find the destination socket, and if not found: return a socket listening to
             * the destination PORT. */
            FreeRTOS_Socket_t * pxSocket = pxTCPSocketLookup( 0U, usLocalPort, xRemoteIP, usRemotePort );
 8010d6e:	8ebd      	ldrh	r5, [r7, #52]	@ 0x34
 8010d70:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010d72:	9303      	str	r3, [sp, #12]
 8010d74:	466c      	mov	r4, sp
 8010d76:	f107 0310 	add.w	r3, r7, #16
 8010d7a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8010d7e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 8010d82:	f107 0308 	add.w	r3, r7, #8
 8010d86:	cb0c      	ldmia	r3, {r2, r3}
 8010d88:	4629      	mov	r1, r5
 8010d8a:	2000      	movs	r0, #0
 8010d8c:	f7fe fbc2 	bl	800f514 <pxTCPSocketLookup>
 8010d90:	6438      	str	r0, [r7, #64]	@ 0x40

            if( ( pxSocket == NULL ) || ( prvTCPSocketIsActive( pxSocket->u.xTCP.eTCPState ) == pdFALSE ) )
 8010d92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d94:	2b00      	cmp	r3, #0
 8010d96:	d008      	beq.n	8010daa <xProcessReceivedTCPPacket+0xe6>
 8010d98:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010d9a:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010d9e:	4618      	mov	r0, r3
 8010da0:	f000 fc92 	bl	80116c8 <prvTCPSocketIsActive>
 8010da4:	4603      	mov	r3, r0
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d116      	bne.n	8010dd8 <xProcessReceivedTCPPacket+0x114>
                /* A TCP messages is received but either there is no socket with the
                 * given port number or the there is a socket, but it is in one of these
                 * non-active states:  eCLOSED, eCLOSE_WAIT, eFIN_WAIT_2, eCLOSING, or
                 * eTIME_WAIT. */

                FreeRTOS_debug_printf( ( "TCP: No active socket on port %d (%d)\n", usLocalPort, usRemotePort ) );
 8010daa:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010dac:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8010dae:	4619      	mov	r1, r3
 8010db0:	4863      	ldr	r0, [pc, #396]	@ (8010f40 <xProcessReceivedTCPPacket+0x27c>)
 8010db2:	f00f ff65 	bl	8020c80 <lUDPLoggingPrintf>
                 * the other party will get a ECONN error.  There are two exceptions:
                 * 1) A packet that already has the RST flag set.
                 * 2) A packet that only has the ACK flag set.
                 * A packet with only the ACK flag set might be the last ACK in
                 * a three-way hand-shake that closes a connection. */
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8010db6:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010db8:	f003 031f 	and.w	r3, r3, #31
 8010dbc:	2b10      	cmp	r3, #16
 8010dbe:	d008      	beq.n	8010dd2 <xProcessReceivedTCPPacket+0x10e>
                    ( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U ) )
 8010dc0:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010dc2:	f003 0304 	and.w	r3, r3, #4
                if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_ACK ) &&
 8010dc6:	2b00      	cmp	r3, #0
 8010dc8:	d103      	bne.n	8010dd2 <xProcessReceivedTCPPacket+0x10e>
                {
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8010dca:	69fb      	ldr	r3, [r7, #28]
 8010dcc:	4618      	mov	r0, r3
 8010dce:	f002 fd0b 	bl	80137e8 <prvTCPSendReset>
                }

                /* The packet can't be handled. */
                xResult = pdFAIL;
 8010dd2:	2300      	movs	r3, #0
 8010dd4:	647b      	str	r3, [r7, #68]	@ 0x44
 8010dd6:	e0d6      	b.n	8010f86 <xProcessReceivedTCPPacket+0x2c2>
            }
            else
            {
                pxSocket->u.xTCP.ucRepCount = 0U;
 8010dd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010dda:	2200      	movs	r2, #0
 8010ddc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN )
 8010de0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010de2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010de6:	2b01      	cmp	r3, #1
 8010de8:	d127      	bne.n	8010e3a <xProcessReceivedTCPPacket+0x176>
                {
                    /* The matching socket is in a listening state.  Test if the peer
                     * has set the SYN flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) != tcpTCP_FLAG_SYN )
 8010dea:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010dec:	f003 031f 	and.w	r3, r3, #31
 8010df0:	2b02      	cmp	r3, #2
 8010df2:	d015      	beq.n	8010e20 <xProcessReceivedTCPPacket+0x15c>
                        /* What happens: maybe after a reboot, a client doesn't know the
                         * connection had gone.  Send a RST in order to get a new connect
                         * request. */
                        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                        {
                            FreeRTOS_debug_printf( ( "TCP: Server can't handle flags: %s from %u to port %u\n",
 8010df4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010df6:	4618      	mov	r0, r3
 8010df8:	f003 fbbe 	bl	8014578 <prvTCPFlagMeaning>
 8010dfc:	4601      	mov	r1, r0
 8010dfe:	8e7a      	ldrh	r2, [r7, #50]	@ 0x32
 8010e00:	8ebb      	ldrh	r3, [r7, #52]	@ 0x34
 8010e02:	4850      	ldr	r0, [pc, #320]	@ (8010f44 <xProcessReceivedTCPPacket+0x280>)
 8010e04:	f00f ff3c 	bl	8020c80 <lUDPLoggingPrintf>
                                                     prvTCPFlagMeaning( ( UBaseType_t ) ucTCPFlags ), usRemotePort, usLocalPort ) );
                        }
                        #endif /* ipconfigHAS_DEBUG_PRINTF */

                        if( ( ucTCPFlags & tcpTCP_FLAG_RST ) == 0U )
 8010e08:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e0a:	f003 0304 	and.w	r3, r3, #4
 8010e0e:	2b00      	cmp	r3, #0
 8010e10:	d103      	bne.n	8010e1a <xProcessReceivedTCPPacket+0x156>
                        {
                            ( void ) prvTCPSendReset( pxNetworkBuffer );
 8010e12:	69fb      	ldr	r3, [r7, #28]
 8010e14:	4618      	mov	r0, r3
 8010e16:	f002 fce7 	bl	80137e8 <prvTCPSendReset>
                        }

                        xResult = pdFAIL;
 8010e1a:	2300      	movs	r3, #0
 8010e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e1e:	e0b2      	b.n	8010f86 <xProcessReceivedTCPPacket+0x2c2>
                    else
                    {
                        /* prvHandleListen() will either return a newly created socket
                         * (if bReuseSocket is false), otherwise it returns the current
                         * socket which will later get connected. */
                        pxSocket = prvHandleListen( pxSocket, pxNetworkBuffer );
 8010e20:	69fb      	ldr	r3, [r7, #28]
 8010e22:	4619      	mov	r1, r3
 8010e24:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010e26:	f001 f999 	bl	801215c <prvHandleListen>
 8010e2a:	6438      	str	r0, [r7, #64]	@ 0x40

                        if( pxSocket == NULL )
 8010e2c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e2e:	2b00      	cmp	r3, #0
 8010e30:	f040 80a9 	bne.w	8010f86 <xProcessReceivedTCPPacket+0x2c2>
                        {
                            xResult = pdFAIL;
 8010e34:	2300      	movs	r3, #0
 8010e36:	647b      	str	r3, [r7, #68]	@ 0x44
 8010e38:	e0a5      	b.n	8010f86 <xProcessReceivedTCPPacket+0x2c2>
                } /* if( pxSocket->u.xTCP.eTCPState == eTCP_LISTEN ). */
                else
                {
                    /* This is not a socket in listening mode. Check for the RST
                     * flag. */
                    if( ( ucTCPFlags & tcpTCP_FLAG_RST ) != 0U )
 8010e3a:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010e3c:	f003 0304 	and.w	r3, r3, #4
 8010e40:	2b00      	cmp	r3, #0
 8010e42:	d068      	beq.n	8010f16 <xProcessReceivedTCPPacket+0x252>
                    {
                        FreeRTOS_debug_printf( ( "TCP: RST received from %u for %u\n", usRemotePort, usLocalPort ) );
 8010e44:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010e46:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8010e48:	4619      	mov	r1, r3
 8010e4a:	483f      	ldr	r0, [pc, #252]	@ (8010f48 <xProcessReceivedTCPPacket+0x284>)
 8010e4c:	f00f ff18 	bl	8020c80 <lUDPLoggingPrintf>

                        /* Implement https://tools.ietf.org/html/rfc5961#section-3.2. */
                        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8010e50:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e52:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010e56:	2b02      	cmp	r3, #2
 8010e58:	d11f      	bne.n	8010e9a <xProcessReceivedTCPPacket+0x1d6>
                        {
                            const uint32_t ulAckNumber = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8010e5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e5c:	689b      	ldr	r3, [r3, #8]
 8010e5e:	061a      	lsls	r2, r3, #24
 8010e60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e62:	689b      	ldr	r3, [r3, #8]
 8010e64:	021b      	lsls	r3, r3, #8
 8010e66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010e6a:	431a      	orrs	r2, r3
 8010e6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e6e:	689b      	ldr	r3, [r3, #8]
 8010e70:	0a1b      	lsrs	r3, r3, #8
 8010e72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010e76:	431a      	orrs	r2, r3
 8010e78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e7a:	689b      	ldr	r3, [r3, #8]
 8010e7c:	0e1b      	lsrs	r3, r3, #24
 8010e7e:	4313      	orrs	r3, r2
 8010e80:	627b      	str	r3, [r7, #36]	@ 0x24

                            /* Per the above RFC, "In the SYN-SENT state ... the RST is
                             * acceptable if the ACK field acknowledges the SYN." */
                            if( ulAckNumber == ( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber + 1U ) )
 8010e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010e84:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8010e88:	3301      	adds	r3, #1
 8010e8a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8010e8c:	429a      	cmp	r2, r3
 8010e8e:	d13f      	bne.n	8010f10 <xProcessReceivedTCPPacket+0x24c>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8010e90:	2100      	movs	r1, #0
 8010e92:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010e94:	f7ff fb34 	bl	8010500 <vTCPStateChange>
 8010e98:	e03a      	b.n	8010f10 <xProcessReceivedTCPPacket+0x24c>
                            }
                        }
                        else
                        {
                            const uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8010e9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010e9c:	685b      	ldr	r3, [r3, #4]
 8010e9e:	061a      	lsls	r2, r3, #24
 8010ea0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ea2:	685b      	ldr	r3, [r3, #4]
 8010ea4:	021b      	lsls	r3, r3, #8
 8010ea6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8010eaa:	431a      	orrs	r2, r3
 8010eac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eae:	685b      	ldr	r3, [r3, #4]
 8010eb0:	0a1b      	lsrs	r3, r3, #8
 8010eb2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8010eb6:	431a      	orrs	r2, r3
 8010eb8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010eba:	685b      	ldr	r3, [r3, #4]
 8010ebc:	0e1b      	lsrs	r3, r3, #24
 8010ebe:	4313      	orrs	r3, r2
 8010ec0:	62bb      	str	r3, [r7, #40]	@ 0x28

                            /* Check whether the packet matches the next expected sequence number. */
                            if( ulSequenceNumber == pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber )
 8010ec2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ec4:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8010ec8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8010eca:	429a      	cmp	r2, r3
 8010ecc:	d104      	bne.n	8010ed8 <xProcessReceivedTCPPacket+0x214>
                            {
                                vTCPStateChange( pxSocket, eCLOSED );
 8010ece:	2100      	movs	r1, #0
 8010ed0:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010ed2:	f7ff fb15 	bl	8010500 <vTCPStateChange>
 8010ed6:	e01b      	b.n	8010f10 <xProcessReceivedTCPPacket+0x24c>
                            }
                            /* Otherwise, check whether the packet is within the receive window. */
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8010ed8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010eda:	f8d3 3130 	ldr.w	r3, [r3, #304]	@ 0x130
 8010ede:	4619      	mov	r1, r3
 8010ee0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010ee2:	f003 fc82 	bl	80147ea <xSequenceGreaterThan>
 8010ee6:	4603      	mov	r3, r0
 8010ee8:	2b00      	cmp	r3, #0
 8010eea:	d011      	beq.n	8010f10 <xProcessReceivedTCPPacket+0x24c>
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8010eec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010eee:	f8d3 2130 	ldr.w	r2, [r3, #304]	@ 0x130
                                                          pxSocket->u.xTCP.xTCPWindow.xSize.ulRxWindowLength ) != pdFALSE ) )
 8010ef2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ef4:	f8d3 3124 	ldr.w	r3, [r3, #292]	@ 0x124
                                     ( xSequenceLessThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber +
 8010ef8:	4413      	add	r3, r2
 8010efa:	4619      	mov	r1, r3
 8010efc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8010efe:	f003 fc5e 	bl	80147be <xSequenceLessThan>
 8010f02:	4603      	mov	r3, r0
                            else if( ( xSequenceGreaterThan( ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber ) != pdFALSE ) &&
 8010f04:	2b00      	cmp	r3, #0
 8010f06:	d003      	beq.n	8010f10 <xProcessReceivedTCPPacket+0x24c>
                            {
                                /* Send a challenge ACK. */
                                ( void ) prvTCPSendChallengeAck( pxNetworkBuffer );
 8010f08:	69fb      	ldr	r3, [r7, #28]
 8010f0a:	4618      	mov	r0, r3
 8010f0c:	f002 fc5f 	bl	80137ce <prvTCPSendChallengeAck>
                                /* Nothing. */
                            }
                        }

                        /* Otherwise, do nothing. In any case, the packet cannot be handled. */
                        xResult = pdFAIL;
 8010f10:	2300      	movs	r3, #0
 8010f12:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f14:	e037      	b.n	8010f86 <xProcessReceivedTCPPacket+0x2c2>
                    }
                    /* Check whether there is a pure SYN amongst the TCP flags while the connection is established. */
                    else if( ( ( ucTCPFlags & tcpTCP_FLAG_CTRL ) == tcpTCP_FLAG_SYN ) && ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) )
 8010f16:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010f18:	f003 031f 	and.w	r3, r3, #31
 8010f1c:	2b02      	cmp	r3, #2
 8010f1e:	d117      	bne.n	8010f50 <xProcessReceivedTCPPacket+0x28c>
 8010f20:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f22:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8010f26:	2b04      	cmp	r3, #4
 8010f28:	d912      	bls.n	8010f50 <xProcessReceivedTCPPacket+0x28c>
                    {
                        /* SYN flag while this socket is already connected. */
                        FreeRTOS_debug_printf( ( "TCP: SYN unexpected from %u\n", usRemotePort ) );
 8010f2a:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8010f2c:	4619      	mov	r1, r3
 8010f2e:	4807      	ldr	r0, [pc, #28]	@ (8010f4c <xProcessReceivedTCPPacket+0x288>)
 8010f30:	f00f fea6 	bl	8020c80 <lUDPLoggingPrintf>

                        /* The packet cannot be handled. */
                        xResult = pdFAIL;
 8010f34:	2300      	movs	r3, #0
 8010f36:	647b      	str	r3, [r7, #68]	@ 0x44
 8010f38:	e025      	b.n	8010f86 <xProcessReceivedTCPPacket+0x2c2>
 8010f3a:	bf00      	nop
 8010f3c:	08024c6c 	.word	0x08024c6c
 8010f40:	08024da4 	.word	0x08024da4
 8010f44:	08024dcc 	.word	0x08024dcc
 8010f48:	08024e04 	.word	0x08024e04
 8010f4c:	08024e28 	.word	0x08024e28
                    else
                    {
                        /* Update the copy of the TCP header only (skipping eth and IP
                         * headers).  It might be used later on, whenever data must be sent
                         * to the peer. */
                        const size_t uxOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket );
 8010f50:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010f52:	f7f8 fa43 	bl	80093dc <uxIPHeaderSizeSocket>
 8010f56:	4603      	mov	r3, r0
 8010f58:	330e      	adds	r3, #14
 8010f5a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8010f5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f5e:	33a0      	adds	r3, #160	@ 0xa0
 8010f60:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f62:	4413      	add	r3, r2
 8010f64:	f103 000a 	add.w	r0, r3, #10
                                         ( const void * ) ( &( pxNetworkBuffer->pucEthernetBuffer[ uxOffset ] ) ),
 8010f68:	69fb      	ldr	r3, [r7, #28]
 8010f6a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8010f6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f6e:	4413      	add	r3, r2
                        ( void ) memcpy( ( void * ) ( &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset ] ) ),
 8010f70:	2214      	movs	r2, #20
 8010f72:	4619      	mov	r1, r3
 8010f74:	f010 f8a0 	bl	80210b8 <memcpy>
                                         ipSIZE_OF_TCP_HEADER );
                        /* Clear flags that are set by the peer, and set the ACK flag. */
                        pxSocket->u.xTCP.xPacket.u.ucLastPacket[ uxOffset + ipTCP_FLAGS_OFFSET ] = tcpTCP_FLAG_ACK;
 8010f78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010f7a:	330d      	adds	r3, #13
 8010f7c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010f7e:	4413      	add	r3, r2
 8010f80:	2210      	movs	r2, #16
 8010f82:	f883 20aa 	strb.w	r2, [r3, #170]	@ 0xaa
                    }
                }
            }

            if( xResult != pdFAIL )
 8010f86:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010f88:	2b00      	cmp	r3, #0
 8010f8a:	d056      	beq.n	801103a <xProcessReceivedTCPPacket+0x376>
            {
                uint16_t usWindow;

                /* pxSocket is not NULL when xResult != pdFAIL. */
                configASSERT( pxSocket != NULL ); /* LCOV_EXCL_LINE ,this branch will not be hit*/
 8010f8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010f8e:	2b00      	cmp	r3, #0
 8010f90:	d104      	bne.n	8010f9c <xProcessReceivedTCPPacket+0x2d8>
 8010f92:	f240 319e 	movw	r1, #926	@ 0x39e
 8010f96:	482b      	ldr	r0, [pc, #172]	@ (8011044 <xProcessReceivedTCPPacket+0x380>)
 8010f98:	f7f0 fa6a 	bl	8001470 <vAssertCalled>

                /* Touch the alive timers because we received a message for this
                 * socket. */
                prvTCPTouchSocket( pxSocket );
 8010f9c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010f9e:	f7ff fa53 	bl	8010448 <prvTCPTouchSocket>
                /* _HT_ : if we're in the SYN phase, and peer does not send a MSS option,
                 * then we MUST assume an MSS size of 536 bytes for backward compatibility. */

                /* When there are no TCP options, the TCP offset equals 20 bytes, which is stored as
                 * the number 5 (words) in the higher nibble of the TCP-offset byte. */
                if( ( pxTCPHeader->ucTCPOffset & tcpTCP_OFFSET_LENGTH_BITS ) > tcpTCP_OFFSET_STANDARD_LENGTH )
 8010fa2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fa4:	7b1b      	ldrb	r3, [r3, #12]
 8010fa6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8010faa:	2b50      	cmp	r3, #80	@ 0x50
 8010fac:	d905      	bls.n	8010fba <xProcessReceivedTCPPacket+0x2f6>
                {
                    xResult = prvCheckOptions( pxSocket, pxNetworkBuffer );
 8010fae:	69fb      	ldr	r3, [r7, #28]
 8010fb0:	4619      	mov	r1, r3
 8010fb2:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8010fb4:	f000 f894 	bl	80110e0 <prvCheckOptions>
 8010fb8:	6478      	str	r0, [r7, #68]	@ 0x44
                }

                if( xResult != pdFAIL )
 8010fba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010fbc:	2b00      	cmp	r3, #0
 8010fbe:	d03c      	beq.n	801103a <xProcessReceivedTCPPacket+0x376>
                {
                    usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8010fc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fc2:	89db      	ldrh	r3, [r3, #14]
 8010fc4:	b29b      	uxth	r3, r3
 8010fc6:	021b      	lsls	r3, r3, #8
 8010fc8:	b21a      	sxth	r2, r3
 8010fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fcc:	89db      	ldrh	r3, [r3, #14]
 8010fce:	b29b      	uxth	r3, r3
 8010fd0:	0a1b      	lsrs	r3, r3, #8
 8010fd2:	b29b      	uxth	r3, r3
 8010fd4:	b21b      	sxth	r3, r3
 8010fd6:	4313      	orrs	r3, r2
 8010fd8:	b21b      	sxth	r3, r3
 8010fda:	847b      	strh	r3, [r7, #34]	@ 0x22
                    pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8010fdc:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8010fde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010fe0:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    #if ( ipconfigUSE_TCP_WIN == 1 )
                    {
                        /* rfc1323 : The Window field in a SYN (i.e., a <SYN> or <SYN,ACK>)
                         * segment itself is never scaled. */
                        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_SYN ) == 0U )
 8010fe4:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8010fe6:	f003 0302 	and.w	r3, r3, #2
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d10a      	bne.n	8011004 <xProcessReceivedTCPPacket+0x340>
                        {
                            pxSocket->u.xTCP.ulWindowSize =
                                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8010fee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8010ff0:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8010ff4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8010ff6:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8010ffa:	fa03 f202 	lsl.w	r2, r3, r2
                            pxSocket->u.xTCP.ulWindowSize =
 8010ffe:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011000:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
                    }
                    #endif /* ipconfigUSE_TCP_WIN */

                    /* In prvTCPHandleState() the incoming messages will be handled
                     * depending on the current state of the connection. */
                    if( prvTCPHandleState( pxSocket, &pxNetworkBuffer ) > 0 )
 8011004:	f107 031c 	add.w	r3, r7, #28
 8011008:	4619      	mov	r1, r3
 801100a:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801100c:	f000 ff78 	bl	8011f00 <prvTCPHandleState>
 8011010:	4603      	mov	r3, r0
 8011012:	2b00      	cmp	r3, #0
 8011014:	dd05      	ble.n	8011022 <xProcessReceivedTCPPacket+0x35e>
                    {
                        /* prvTCPHandleState() has sent a message, see if there are more to
                         * be transmitted. */
                        #if ( ipconfigUSE_TCP_WIN == 1 )
                        {
                            ( void ) prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8011016:	f107 031c 	add.w	r3, r7, #28
 801101a:	4619      	mov	r1, r3
 801101c:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 801101e:	f001 fc6f 	bl	8012900 <prvTCPSendRepeated>
                        }
                        #endif /* ipconfigUSE_TCP_WIN */
                    }

                    if( pxNetworkBuffer != NULL )
 8011022:	69fb      	ldr	r3, [r7, #28]
 8011024:	2b00      	cmp	r3, #0
 8011026:	d005      	beq.n	8011034 <xProcessReceivedTCPPacket+0x370>
                    {
                        /* We must check if the buffer is unequal to NULL, because the
                         * socket might keep a reference to it in case a delayed ACK must be
                         * sent. */
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8011028:	69fb      	ldr	r3, [r7, #28]
 801102a:	4618      	mov	r0, r3
 801102c:	f005 fbcc 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
                        #ifndef _lint
                            /* Clear pointers that are freed. */
                            pxNetworkBuffer = NULL;
 8011030:	2300      	movs	r3, #0
 8011032:	61fb      	str	r3, [r7, #28]
                        #endif
                    }

                    /* And finally, calculate when this socket wants to be woken up. */
                    ( void ) prvTCPNextTimeout( pxSocket );
 8011034:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8011036:	f7ff fc73 	bl	8010920 <prvTCPNextTimeout>
                }
            }
        }

        /* pdPASS being returned means the buffer has been consumed. */
        return xResult;
 801103a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    }
 801103c:	4618      	mov	r0, r3
 801103e:	3748      	adds	r7, #72	@ 0x48
 8011040:	46bd      	mov	sp, r7
 8011042:	bdb0      	pop	{r4, r5, r7, pc}
 8011044:	08024c6c 	.word	0x08024c6c

08011048 <xTCPCheckNewClient>:
 * @param[in] pxSocket The socket for which the bound socket list will be iterated.
 *
 * @return if there is a new client, then pdTRUE is returned or else, pdFALSE.
 */
    BaseType_t xTCPCheckNewClient( FreeRTOS_Socket_t * pxSocket )
    {
 8011048:	b580      	push	{r7, lr}
 801104a:	b088      	sub	sp, #32
 801104c:	af00      	add	r7, sp, #0
 801104e:	6078      	str	r0, [r7, #4]
        TickType_t uxLocalPort = ( TickType_t ) FreeRTOS_htons( pxSocket->usLocalPort );
 8011050:	687b      	ldr	r3, [r7, #4]
 8011052:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011054:	021b      	lsls	r3, r3, #8
 8011056:	b21a      	sxth	r2, r3
 8011058:	687b      	ldr	r3, [r7, #4]
 801105a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801105c:	0a1b      	lsrs	r3, r3, #8
 801105e:	b29b      	uxth	r3, r3
 8011060:	b21b      	sxth	r3, r3
 8011062:	4313      	orrs	r3, r2
 8011064:	b21b      	sxth	r3, r3
 8011066:	b29b      	uxth	r3, r3
 8011068:	617b      	str	r3, [r7, #20]
        const ListItem_t * pxIterator;
        FreeRTOS_Socket_t * pxFound;
        BaseType_t xResult = pdFALSE;
 801106a:	2300      	movs	r3, #0
 801106c:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ListItem_t * pxEndTCP = ( ( const ListItem_t * ) &( xBoundTCPSocketsList.xListEnd ) );
 801106e:	4b19      	ldr	r3, [pc, #100]	@ (80110d4 <xTCPCheckNewClient+0x8c>)
 8011070:	613b      	str	r3, [r7, #16]

        /* Here xBoundTCPSocketsList can be accessed safely IP-task is the only one
         * who has access. */
        for( pxIterator = ( const ListItem_t * ) listGET_HEAD_ENTRY( &xBoundTCPSocketsList );
 8011072:	4b19      	ldr	r3, [pc, #100]	@ (80110d8 <xTCPCheckNewClient+0x90>)
 8011074:	68db      	ldr	r3, [r3, #12]
 8011076:	61fb      	str	r3, [r7, #28]
 8011078:	e023      	b.n	80110c2 <xTCPCheckNewClient+0x7a>
             pxIterator != pxEndTCP;
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
        {
            if( listGET_LIST_ITEM_VALUE( pxIterator ) == ( configLIST_VOLATILE TickType_t ) uxLocalPort )
 801107a:	69fb      	ldr	r3, [r7, #28]
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	697a      	ldr	r2, [r7, #20]
 8011080:	429a      	cmp	r2, r3
 8011082:	d11b      	bne.n	80110bc <xTCPCheckNewClient+0x74>
            {
                pxFound = ( ( FreeRTOS_Socket_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8011084:	69fb      	ldr	r3, [r7, #28]
 8011086:	68db      	ldr	r3, [r3, #12]
 8011088:	60fb      	str	r3, [r7, #12]

                if( ( pxFound->ucProtocol == ( uint8_t ) FREERTOS_IPPROTO_TCP ) && ( pxFound->u.xTCP.bits.bPassAccept != pdFALSE_UNSIGNED ) )
 801108a:	68fb      	ldr	r3, [r7, #12]
 801108c:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8011090:	2b06      	cmp	r3, #6
 8011092:	d113      	bne.n	80110bc <xTCPCheckNewClient+0x74>
 8011094:	68fb      	ldr	r3, [r7, #12]
 8011096:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801109a:	f003 0302 	and.w	r3, r3, #2
 801109e:	b2db      	uxtb	r3, r3
 80110a0:	2b00      	cmp	r3, #0
 80110a2:	d00b      	beq.n	80110bc <xTCPCheckNewClient+0x74>
                {
                    pxSocket->u.xTCP.pxPeerSocket = pxFound;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	68fa      	ldr	r2, [r7, #12]
 80110a8:	67da      	str	r2, [r3, #124]	@ 0x7c
                    FreeRTOS_debug_printf( ( "xTCPCheckNewClient[0]: client on port %u\n", pxSocket->usLocalPort ) );
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 80110ae:	4619      	mov	r1, r3
 80110b0:	480a      	ldr	r0, [pc, #40]	@ (80110dc <xTCPCheckNewClient+0x94>)
 80110b2:	f00f fde5 	bl	8020c80 <lUDPLoggingPrintf>
                    xResult = pdTRUE;
 80110b6:	2301      	movs	r3, #1
 80110b8:	61bb      	str	r3, [r7, #24]
                    break;
 80110ba:	e006      	b.n	80110ca <xTCPCheckNewClient+0x82>
             pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator ) )
 80110bc:	69fb      	ldr	r3, [r7, #28]
 80110be:	685b      	ldr	r3, [r3, #4]
 80110c0:	61fb      	str	r3, [r7, #28]
             pxIterator != pxEndTCP;
 80110c2:	69fa      	ldr	r2, [r7, #28]
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	429a      	cmp	r2, r3
 80110c8:	d1d7      	bne.n	801107a <xTCPCheckNewClient+0x32>
                }
            }
        }

        return xResult;
 80110ca:	69bb      	ldr	r3, [r7, #24]
    }
 80110cc:	4618      	mov	r0, r3
 80110ce:	3720      	adds	r7, #32
 80110d0:	46bd      	mov	sp, r7
 80110d2:	bd80      	pop	{r7, pc}
 80110d4:	2000130c 	.word	0x2000130c
 80110d8:	20001304 	.word	0x20001304
 80110dc:	08024e48 	.word	0x08024e48

080110e0 <prvCheckOptions>:
 *       ((pxTCPHeader->ucTCPOffset & 0xf0) > 0x50), meaning that
 *       the TP header is longer than the usual 20 (5 x 4) bytes.
 */
    BaseType_t prvCheckOptions( FreeRTOS_Socket_t * pxSocket,
                                const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80110e0:	b580      	push	{r7, lr}
 80110e2:	b08c      	sub	sp, #48	@ 0x30
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
 80110e8:	6039      	str	r1, [r7, #0]
        size_t uxTCPHeaderOffset = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer );
 80110ea:	6838      	ldr	r0, [r7, #0]
 80110ec:	f7f8 f95c 	bl	80093a8 <uxIPHeaderSizePacket>
 80110f0:	4603      	mov	r3, r0
 80110f2:	330e      	adds	r3, #14
 80110f4:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ uxTCPHeaderOffset ] ) );
 80110f6:	683b      	ldr	r3, [r7, #0]
 80110f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80110fa:	69fb      	ldr	r3, [r7, #28]
 80110fc:	4413      	add	r3, r2
 80110fe:	61bb      	str	r3, [r7, #24]
        const TCPHeader_t * pxTCPHeader;
        const uint8_t * pucPtr;
        BaseType_t xHasSYNFlag;
        BaseType_t xReturn = pdPASS;
 8011100:	2301      	movs	r3, #1
 8011102:	627b      	str	r3, [r7, #36]	@ 0x24
        /* Offset in the network packet where the first option byte is stored. */
        size_t uxOptionOffset = uxTCPHeaderOffset + ipSIZE_OF_TCP_HEADER;
 8011104:	69fb      	ldr	r3, [r7, #28]
 8011106:	3314      	adds	r3, #20
 8011108:	617b      	str	r3, [r7, #20]
        size_t uxOptionsLength;
        int32_t lResult;
        uint8_t ucLength;

        pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801110a:	69bb      	ldr	r3, [r7, #24]
 801110c:	613b      	str	r3, [r7, #16]


        /* A character pointer to iterate through the option data */
        pucPtr = pxTCPHeader->ucOptdata;
 801110e:	693b      	ldr	r3, [r7, #16]
 8011110:	3314      	adds	r3, #20
 8011112:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPOffset <= ( 5U << 4U ) )
 8011114:	693b      	ldr	r3, [r7, #16]
 8011116:	7b1b      	ldrb	r3, [r3, #12]
 8011118:	2b50      	cmp	r3, #80	@ 0x50
 801111a:	d93f      	bls.n	801119c <prvCheckOptions+0xbc>
        {
            /* Avoid integer underflow in computation of ucLength. */
        }
        else
        {
            ucLength = ( uint8_t ) ( ( ( pxTCPHeader->ucTCPOffset >> 4U ) - 5U ) << 2U );
 801111c:	693b      	ldr	r3, [r7, #16]
 801111e:	7b1b      	ldrb	r3, [r3, #12]
 8011120:	091b      	lsrs	r3, r3, #4
 8011122:	b2db      	uxtb	r3, r3
 8011124:	3b05      	subs	r3, #5
 8011126:	b2db      	uxtb	r3, r3
 8011128:	009b      	lsls	r3, r3, #2
 801112a:	73fb      	strb	r3, [r7, #15]
            uxOptionsLength = ( size_t ) ucLength;
 801112c:	7bfb      	ldrb	r3, [r7, #15]
 801112e:	623b      	str	r3, [r7, #32]

            if( pxNetworkBuffer->xDataLength > uxOptionOffset )
 8011130:	683b      	ldr	r3, [r7, #0]
 8011132:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011134:	697a      	ldr	r2, [r7, #20]
 8011136:	429a      	cmp	r2, r3
 8011138:	d230      	bcs.n	801119c <prvCheckOptions+0xbc>
            {
                /* Validate options size calculation. */
                if( uxOptionsLength <= ( pxNetworkBuffer->xDataLength - uxOptionOffset ) )
 801113a:	683b      	ldr	r3, [r7, #0]
 801113c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801113e:	697b      	ldr	r3, [r7, #20]
 8011140:	1ad3      	subs	r3, r2, r3
 8011142:	6a3a      	ldr	r2, [r7, #32]
 8011144:	429a      	cmp	r2, r3
 8011146:	d829      	bhi.n	801119c <prvCheckOptions+0xbc>
                {
                    if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_SYN ) != ( uint8_t ) 0U )
 8011148:	693b      	ldr	r3, [r7, #16]
 801114a:	7b5b      	ldrb	r3, [r3, #13]
 801114c:	f003 0302 	and.w	r3, r3, #2
 8011150:	2b00      	cmp	r3, #0
 8011152:	d002      	beq.n	801115a <prvCheckOptions+0x7a>
                    {
                        xHasSYNFlag = pdTRUE;
 8011154:	2301      	movs	r3, #1
 8011156:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011158:	e001      	b.n	801115e <prvCheckOptions+0x7e>
                    }
                    else
                    {
                        xHasSYNFlag = pdFALSE;
 801115a:	2300      	movs	r3, #0
 801115c:	62bb      	str	r3, [r7, #40]	@ 0x28

                    /* The length check is only necessary in case the option data are
                     *  corrupted, we don't like to run into invalid memory and crash. */
                    for( ; ; )
                    {
                        if( uxOptionsLength == 0U )
 801115e:	6a3b      	ldr	r3, [r7, #32]
 8011160:	2b00      	cmp	r3, #0
 8011162:	d018      	beq.n	8011196 <prvCheckOptions+0xb6>
                        {
                            /* coverity[break_stmt] : Break statement terminating the loop */
                            break;
                        }

                        lResult = prvSingleStepTCPHeaderOptions( pucPtr, uxOptionsLength, pxSocket, xHasSYNFlag );
 8011164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	6a39      	ldr	r1, [r7, #32]
 801116a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801116c:	f000 f81c 	bl	80111a8 <prvSingleStepTCPHeaderOptions>
 8011170:	60b8      	str	r0, [r7, #8]

                        if( lResult < 0 )
 8011172:	68bb      	ldr	r3, [r7, #8]
 8011174:	2b00      	cmp	r3, #0
 8011176:	da02      	bge.n	801117e <prvCheckOptions+0x9e>
                        {
                            xReturn = pdFAIL;
 8011178:	2300      	movs	r3, #0
 801117a:	627b      	str	r3, [r7, #36]	@ 0x24
                            break;
 801117c:	e00e      	b.n	801119c <prvCheckOptions+0xbc>
                        }

                        if( lResult == 0 )
 801117e:	68bb      	ldr	r3, [r7, #8]
 8011180:	2b00      	cmp	r3, #0
 8011182:	d00a      	beq.n	801119a <prvCheckOptions+0xba>
                        {
                            break;
                        }

                        uxOptionsLength -= ( size_t ) lResult;
 8011184:	68bb      	ldr	r3, [r7, #8]
 8011186:	6a3a      	ldr	r2, [r7, #32]
 8011188:	1ad3      	subs	r3, r2, r3
 801118a:	623b      	str	r3, [r7, #32]
                        pucPtr = &( pucPtr[ lResult ] );
 801118c:	68bb      	ldr	r3, [r7, #8]
 801118e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8011190:	4413      	add	r3, r2
 8011192:	62fb      	str	r3, [r7, #44]	@ 0x2c
                        if( uxOptionsLength == 0U )
 8011194:	e7e3      	b.n	801115e <prvCheckOptions+0x7e>
                            break;
 8011196:	bf00      	nop
 8011198:	e000      	b.n	801119c <prvCheckOptions+0xbc>
                            break;
 801119a:	bf00      	nop
                    }
                }
            }
        }

        return xReturn;
 801119c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801119e:	4618      	mov	r0, r3
 80111a0:	3730      	adds	r7, #48	@ 0x30
 80111a2:	46bd      	mov	sp, r7
 80111a4:	bd80      	pop	{r7, pc}
	...

080111a8 <prvSingleStepTCPHeaderOptions>:
 */
    static int32_t prvSingleStepTCPHeaderOptions( const uint8_t * const pucPtr,
                                                  size_t uxTotalLength,
                                                  FreeRTOS_Socket_t * const pxSocket,
                                                  BaseType_t xHasSYNFlag )
    {
 80111a8:	b580      	push	{r7, lr}
 80111aa:	b08a      	sub	sp, #40	@ 0x28
 80111ac:	af00      	add	r7, sp, #0
 80111ae:	60f8      	str	r0, [r7, #12]
 80111b0:	60b9      	str	r1, [r7, #8]
 80111b2:	607a      	str	r2, [r7, #4]
 80111b4:	603b      	str	r3, [r7, #0]
        UBaseType_t uxNewMSS;
        size_t uxRemainingOptionsBytes = uxTotalLength;
 80111b6:	68bb      	ldr	r3, [r7, #8]
 80111b8:	617b      	str	r3, [r7, #20]
        uint8_t ucLen;
        int32_t lIndex = 0;
 80111ba:	2300      	movs	r3, #0
 80111bc:	61fb      	str	r3, [r7, #28]
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80111be:	687b      	ldr	r3, [r7, #4]
 80111c0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80111c4:	613b      	str	r3, [r7, #16]
        BaseType_t xReturn = pdFALSE;
 80111c6:	2300      	movs	r3, #0
 80111c8:	61bb      	str	r3, [r7, #24]

        if( pucPtr[ 0U ] == tcpTCP_OPT_END )
 80111ca:	68fb      	ldr	r3, [r7, #12]
 80111cc:	781b      	ldrb	r3, [r3, #0]
 80111ce:	2b00      	cmp	r3, #0
 80111d0:	d102      	bne.n	80111d8 <prvSingleStepTCPHeaderOptions+0x30>
        {
            /* End of options. */
            lIndex = 0;
 80111d2:	2300      	movs	r3, #0
 80111d4:	61fb      	str	r3, [r7, #28]
 80111d6:	e0da      	b.n	801138e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( pucPtr[ 0U ] == tcpTCP_OPT_NOOP )
 80111d8:	68fb      	ldr	r3, [r7, #12]
 80111da:	781b      	ldrb	r3, [r3, #0]
 80111dc:	2b01      	cmp	r3, #1
 80111de:	d102      	bne.n	80111e6 <prvSingleStepTCPHeaderOptions+0x3e>
        {
            /* NOP option, inserted to make the length a multiple of 4. */
            lIndex = 1;
 80111e0:	2301      	movs	r3, #1
 80111e2:	61fb      	str	r3, [r7, #28]
 80111e4:	e0d3      	b.n	801138e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else if( uxRemainingOptionsBytes < 2U )
 80111e6:	697b      	ldr	r3, [r7, #20]
 80111e8:	2b01      	cmp	r3, #1
 80111ea:	d803      	bhi.n	80111f4 <prvSingleStepTCPHeaderOptions+0x4c>
        {
            /* Any other well-formed option must be at least two bytes: the option
             * type byte followed by a length byte. */
            lIndex = -1;
 80111ec:	f04f 33ff 	mov.w	r3, #4294967295
 80111f0:	61fb      	str	r3, [r7, #28]
 80111f2:	e0cc      	b.n	801138e <prvSingleStepTCPHeaderOptions+0x1e6>
        }

        #if ( ipconfigUSE_TCP_WIN != 0 )
            else if( pucPtr[ 0 ] == tcpTCP_OPT_WSOPT )
 80111f4:	68fb      	ldr	r3, [r7, #12]
 80111f6:	781b      	ldrb	r3, [r3, #0]
 80111f8:	2b03      	cmp	r3, #3
 80111fa:	d11e      	bne.n	801123a <prvSingleStepTCPHeaderOptions+0x92>
            {
                /* The TCP Window Scale Option. */
                /* Confirm that the option fits in the remaining buffer space. */
                if( ( uxRemainingOptionsBytes < tcpTCP_OPT_WSOPT_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_WSOPT_LEN ) )
 80111fc:	697b      	ldr	r3, [r7, #20]
 80111fe:	2b02      	cmp	r3, #2
 8011200:	d904      	bls.n	801120c <prvSingleStepTCPHeaderOptions+0x64>
 8011202:	68fb      	ldr	r3, [r7, #12]
 8011204:	3301      	adds	r3, #1
 8011206:	781b      	ldrb	r3, [r3, #0]
 8011208:	2b03      	cmp	r3, #3
 801120a:	d003      	beq.n	8011214 <prvSingleStepTCPHeaderOptions+0x6c>
                {
                    lIndex = -1;
 801120c:	f04f 33ff 	mov.w	r3, #4294967295
 8011210:	61fb      	str	r3, [r7, #28]
 8011212:	e0bc      	b.n	801138e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
                else
                {
                    /* Option is only valid in SYN phase. */
                    if( xHasSYNFlag != 0 )
 8011214:	683b      	ldr	r3, [r7, #0]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d00c      	beq.n	8011234 <prvSingleStepTCPHeaderOptions+0x8c>
                    {
                        pxSocket->u.xTCP.ucPeerWinScaleFactor = pucPtr[ 2 ];
 801121a:	68fb      	ldr	r3, [r7, #12]
 801121c:	3302      	adds	r3, #2
 801121e:	781a      	ldrb	r2, [r3, #0]
 8011220:	687b      	ldr	r3, [r7, #4]
 8011222:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
                        pxSocket->u.xTCP.bits.bWinScaling = pdTRUE_UNSIGNED;
 8011226:	687a      	ldr	r2, [r7, #4]
 8011228:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 801122c:	f043 0310 	orr.w	r3, r3, #16
 8011230:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_WSOPT_LEN;
 8011234:	2303      	movs	r3, #3
 8011236:	61fb      	str	r3, [r7, #28]
 8011238:	e0a9      	b.n	801138e <prvSingleStepTCPHeaderOptions+0x1e6>
                }
            }
        #endif /* ipconfigUSE_TCP_WIN */
        else if( pucPtr[ 0 ] == tcpTCP_OPT_MSS )
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	781b      	ldrb	r3, [r3, #0]
 801123e:	2b02      	cmp	r3, #2
 8011240:	d16d      	bne.n	801131e <prvSingleStepTCPHeaderOptions+0x176>
        {
            /* Confirm that the option fits in the remaining buffer space. */
            if( ( uxRemainingOptionsBytes < tcpTCP_OPT_MSS_LEN ) || ( pucPtr[ 1 ] != tcpTCP_OPT_MSS_LEN ) )
 8011242:	697b      	ldr	r3, [r7, #20]
 8011244:	2b03      	cmp	r3, #3
 8011246:	d904      	bls.n	8011252 <prvSingleStepTCPHeaderOptions+0xaa>
 8011248:	68fb      	ldr	r3, [r7, #12]
 801124a:	3301      	adds	r3, #1
 801124c:	781b      	ldrb	r3, [r3, #0]
 801124e:	2b04      	cmp	r3, #4
 8011250:	d003      	beq.n	801125a <prvSingleStepTCPHeaderOptions+0xb2>
            {
                lIndex = -1;
 8011252:	f04f 33ff 	mov.w	r3, #4294967295
 8011256:	61fb      	str	r3, [r7, #28]
 8011258:	e099      	b.n	801138e <prvSingleStepTCPHeaderOptions+0x1e6>
            else
            {
                /* An MSS option with the correct option length.  FreeRTOS_htons()
                 * is not needed here because usChar2u16() already returns a host
                 * endian number. */
                uxNewMSS = usChar2u16( &( pucPtr[ 2 ] ) );
 801125a:	68fb      	ldr	r3, [r7, #12]
 801125c:	3302      	adds	r3, #2
 801125e:	4618      	mov	r0, r3
 8011260:	f7f8 fe4f 	bl	8009f02 <usChar2u16>
 8011264:	4603      	mov	r3, r0
 8011266:	627b      	str	r3, [r7, #36]	@ 0x24

                if( pxSocket->u.xTCP.usMSS != uxNewMSS )
 8011268:	687b      	ldr	r3, [r7, #4]
 801126a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801126e:	461a      	mov	r2, r3
 8011270:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011272:	4293      	cmp	r3, r2
 8011274:	d010      	beq.n	8011298 <prvSingleStepTCPHeaderOptions+0xf0>
                {
                    /* Perform a basic check on the the new MSS. */
                    if( uxNewMSS == 0U )
 8011276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011278:	2b00      	cmp	r3, #0
 801127a:	d105      	bne.n	8011288 <prvSingleStepTCPHeaderOptions+0xe0>
                    {
                        lIndex = -1;
 801127c:	f04f 33ff 	mov.w	r3, #4294967295
 8011280:	61fb      	str	r3, [r7, #28]

                        /* Return Condition found. */
                        xReturn = pdTRUE;
 8011282:	2301      	movs	r3, #1
 8011284:	61bb      	str	r3, [r7, #24]
 8011286:	e007      	b.n	8011298 <prvSingleStepTCPHeaderOptions+0xf0>
                    }
                    else
                    {
                        FreeRTOS_debug_printf( ( "MSS change %u -> %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 8011288:	687b      	ldr	r3, [r7, #4]
 801128a:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 801128e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011290:	4619      	mov	r1, r3
 8011292:	4841      	ldr	r0, [pc, #260]	@ (8011398 <prvSingleStepTCPHeaderOptions+0x1f0>)
 8011294:	f00f fcf4 	bl	8020c80 <lUDPLoggingPrintf>
                    }
                }

                /* If a 'return' condition has not been found. */
                if( xReturn == pdFALSE )
 8011298:	69bb      	ldr	r3, [r7, #24]
 801129a:	2b00      	cmp	r3, #0
 801129c:	d177      	bne.n	801138e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Restrict the minimum value of segment length to the ( Minimum IP MTU (576) - IP header(20) - TCP Header(20) ).
                     * See "RFC 791 section 3.1 Total Length" for more details. */
                    if( uxNewMSS < tcpMINIMUM_SEGMENT_LENGTH )
 801129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112a0:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 80112a4:	d202      	bcs.n	80112ac <prvSingleStepTCPHeaderOptions+0x104>
                    {
                        uxNewMSS = tcpMINIMUM_SEGMENT_LENGTH;
 80112a6:	f44f 7306 	mov.w	r3, #536	@ 0x218
 80112aa:	627b      	str	r3, [r7, #36]	@ 0x24
                    }

                    if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 80112ac:	687b      	ldr	r3, [r7, #4]
 80112ae:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80112b2:	461a      	mov	r2, r3
 80112b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112b6:	4293      	cmp	r3, r2
 80112b8:	d22e      	bcs.n	8011318 <prvSingleStepTCPHeaderOptions+0x170>
                    {
                        /* our MSS was bigger than the MSS of the other party: adapt it. */
                        pxSocket->u.xTCP.bits.bMssChange = pdTRUE_UNSIGNED;
 80112ba:	687a      	ldr	r2, [r7, #4]
 80112bc:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80112c0:	f043 0301 	orr.w	r3, r3, #1
 80112c4:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

                        if( pxSocket->u.xTCP.usMSS > uxNewMSS )
 80112c8:	687b      	ldr	r3, [r7, #4]
 80112ca:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80112ce:	461a      	mov	r2, r3
 80112d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112d2:	4293      	cmp	r3, r2
 80112d4:	d207      	bcs.n	80112e6 <prvSingleStepTCPHeaderOptions+0x13e>
                        {
                            /* The peer advertises a smaller MSS than this socket was
                             * using.  Use that as well. */
                            FreeRTOS_debug_printf( ( "Change mss %d => %u\n", pxSocket->u.xTCP.usMSS, ( unsigned ) uxNewMSS ) );
 80112d6:	687b      	ldr	r3, [r7, #4]
 80112d8:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80112dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112de:	4619      	mov	r1, r3
 80112e0:	482e      	ldr	r0, [pc, #184]	@ (801139c <prvSingleStepTCPHeaderOptions+0x1f4>)
 80112e2:	f00f fccd 	bl	8020c80 <lUDPLoggingPrintf>
                        }

                        pxTCPWindow->xSize.ulRxWindowLength = ( ( uint32_t ) uxNewMSS ) * ( pxTCPWindow->xSize.ulRxWindowLength / ( ( uint32_t ) uxNewMSS ) );
 80112e6:	693b      	ldr	r3, [r7, #16]
 80112e8:	685a      	ldr	r2, [r3, #4]
 80112ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80112f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80112f2:	fb03 f202 	mul.w	r2, r3, r2
 80112f6:	693b      	ldr	r3, [r7, #16]
 80112f8:	605a      	str	r2, [r3, #4]
                        pxTCPWindow->usMSSInit = ( uint16_t ) uxNewMSS;
 80112fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80112fc:	b29a      	uxth	r2, r3
 80112fe:	693b      	ldr	r3, [r7, #16]
 8011300:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
                        pxTCPWindow->usMSS = ( uint16_t ) uxNewMSS;
 8011304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011306:	b29a      	uxth	r2, r3
 8011308:	693b      	ldr	r3, [r7, #16]
 801130a:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
                        pxSocket->u.xTCP.usMSS = ( uint16_t ) uxNewMSS;
 801130e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011310:	b29a      	uxth	r2, r3
 8011312:	687b      	ldr	r3, [r7, #4]
 8011314:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
                    }

                    lIndex = ( int32_t ) tcpTCP_OPT_MSS_LEN;
 8011318:	2304      	movs	r3, #4
 801131a:	61fb      	str	r3, [r7, #28]
 801131c:	e037      	b.n	801138e <prvSingleStepTCPHeaderOptions+0x1e6>
        }
        else
        {
            /* All other options have a length field, so that we easily
             * can skip past them. */
            ucLen = pucPtr[ 1 ];
 801131e:	68fb      	ldr	r3, [r7, #12]
 8011320:	3301      	adds	r3, #1
 8011322:	781b      	ldrb	r3, [r3, #0]
 8011324:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
            lIndex = 0;
 8011328:	2300      	movs	r3, #0
 801132a:	61fb      	str	r3, [r7, #28]

            if( ( ucLen < ( uint8_t ) 2U ) || ( uxRemainingOptionsBytes < ( size_t ) ucLen ) )
 801132c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011330:	2b01      	cmp	r3, #1
 8011332:	d904      	bls.n	801133e <prvSingleStepTCPHeaderOptions+0x196>
 8011334:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011338:	697a      	ldr	r2, [r7, #20]
 801133a:	429a      	cmp	r2, r3
 801133c:	d203      	bcs.n	8011346 <prvSingleStepTCPHeaderOptions+0x19e>
            {
                /* If the length field is too small or too big, the options are
                 * malformed, don't process them further.
                 */
                lIndex = -1;
 801133e:	f04f 33ff 	mov.w	r3, #4294967295
 8011342:	61fb      	str	r3, [r7, #28]
 8011344:	e023      	b.n	801138e <prvSingleStepTCPHeaderOptions+0x1e6>
                {
                    /* Selective ACK: the peer has received a packet but it is missing
                     * earlier packets. At least this packet does not need retransmission
                     * anymore. ulTCPWindowTxSack( ) takes care of this administration.
                     */
                    if( pucPtr[ 0U ] == tcpTCP_OPT_SACK_A )
 8011346:	68fb      	ldr	r3, [r7, #12]
 8011348:	781b      	ldrb	r3, [r3, #0]
 801134a:	2b05      	cmp	r3, #5
 801134c:	d11a      	bne.n	8011384 <prvSingleStepTCPHeaderOptions+0x1dc>
                    {
                        ucLen = ( uint8_t ) ( ucLen - 2U );
 801134e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011352:	3b02      	subs	r3, #2
 8011354:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        lIndex += 2;
 8011358:	69fb      	ldr	r3, [r7, #28]
 801135a:	3302      	adds	r3, #2
 801135c:	61fb      	str	r3, [r7, #28]

                        while( ucLen >= ( uint8_t ) 8U )
 801135e:	e00d      	b.n	801137c <prvSingleStepTCPHeaderOptions+0x1d4>
                        {
                            prvReadSackOption( pucPtr, ( size_t ) lIndex, pxSocket );
 8011360:	69fb      	ldr	r3, [r7, #28]
 8011362:	687a      	ldr	r2, [r7, #4]
 8011364:	4619      	mov	r1, r3
 8011366:	68f8      	ldr	r0, [r7, #12]
 8011368:	f000 f81a 	bl	80113a0 <prvReadSackOption>
                            lIndex += 8;
 801136c:	69fb      	ldr	r3, [r7, #28]
 801136e:	3308      	adds	r3, #8
 8011370:	61fb      	str	r3, [r7, #28]
                            ucLen = ( uint8_t ) ( ucLen - 8U );
 8011372:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011376:	3b08      	subs	r3, #8
 8011378:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
                        while( ucLen >= ( uint8_t ) 8U )
 801137c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011380:	2b07      	cmp	r3, #7
 8011382:	d8ed      	bhi.n	8011360 <prvSingleStepTCPHeaderOptions+0x1b8>
                        /* ucLen should be 0 by now. */
                    }
                }
                #endif /* ipconfigUSE_TCP_WIN == 1 */

                lIndex += ( int32_t ) ucLen;
 8011384:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011388:	69fa      	ldr	r2, [r7, #28]
 801138a:	4413      	add	r3, r2
 801138c:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 0 )
            /* Avoid compiler warnings when TCP window is not used. */
            ( void ) xHasSYNFlag;
        #endif

        return lIndex;
 801138e:	69fb      	ldr	r3, [r7, #28]
    }
 8011390:	4618      	mov	r0, r3
 8011392:	3728      	adds	r7, #40	@ 0x28
 8011394:	46bd      	mov	sp, r7
 8011396:	bd80      	pop	{r7, pc}
 8011398:	08024e74 	.word	0x08024e74
 801139c:	08024e8c 	.word	0x08024e8c

080113a0 <prvReadSackOption>:
 * @param[in] pxSocket Socket handling the TCP connection.
 */
        static void prvReadSackOption( const uint8_t * const pucPtr,
                                       size_t uxIndex,
                                       FreeRTOS_Socket_t * const pxSocket )
        {
 80113a0:	b580      	push	{r7, lr}
 80113a2:	b08a      	sub	sp, #40	@ 0x28
 80113a4:	af02      	add	r7, sp, #8
 80113a6:	60f8      	str	r0, [r7, #12]
 80113a8:	60b9      	str	r1, [r7, #8]
 80113aa:	607a      	str	r2, [r7, #4]
            uint32_t ulFirst = ulChar2u32( &( pucPtr[ uxIndex ] ) );
 80113ac:	68fa      	ldr	r2, [r7, #12]
 80113ae:	68bb      	ldr	r3, [r7, #8]
 80113b0:	4413      	add	r3, r2
 80113b2:	4618      	mov	r0, r3
 80113b4:	f7f8 fd8a 	bl	8009ecc <ulChar2u32>
 80113b8:	61f8      	str	r0, [r7, #28]
            uint32_t ulLast = ulChar2u32( &( pucPtr[ uxIndex + 4U ] ) );
 80113ba:	68bb      	ldr	r3, [r7, #8]
 80113bc:	3304      	adds	r3, #4
 80113be:	68fa      	ldr	r2, [r7, #12]
 80113c0:	4413      	add	r3, r2
 80113c2:	4618      	mov	r0, r3
 80113c4:	f7f8 fd82 	bl	8009ecc <ulChar2u32>
 80113c8:	61b8      	str	r0, [r7, #24]
            uint32_t ulCount = ulTCPWindowTxSack( &( pxSocket->u.xTCP.xTCPWindow ), ulFirst, ulLast );
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80113d0:	69ba      	ldr	r2, [r7, #24]
 80113d2:	69f9      	ldr	r1, [r7, #28]
 80113d4:	4618      	mov	r0, r3
 80113d6:	f004 fba3 	bl	8015b20 <ulTCPWindowTxSack>
 80113da:	6178      	str	r0, [r7, #20]

            /* ulTCPWindowTxSack( ) returns the number of bytes which have been acked
             * starting from the head position.  Advance the tail pointer in txStream.
             */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 80113dc:	687b      	ldr	r3, [r7, #4]
 80113de:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80113e2:	2b00      	cmp	r3, #0
 80113e4:	d029      	beq.n	801143a <prvReadSackOption+0x9a>
 80113e6:	697b      	ldr	r3, [r7, #20]
 80113e8:	2b00      	cmp	r3, #0
 80113ea:	d026      	beq.n	801143a <prvReadSackOption+0x9a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been confirmed. */
                ( void ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0, NULL, ( size_t ) ulCount, pdFALSE );
 80113ec:	687b      	ldr	r3, [r7, #4]
 80113ee:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80113f2:	2300      	movs	r3, #0
 80113f4:	9300      	str	r3, [sp, #0]
 80113f6:	697b      	ldr	r3, [r7, #20]
 80113f8:	2200      	movs	r2, #0
 80113fa:	2100      	movs	r1, #0
 80113fc:	f7fe fed9 	bl	80101b2 <uxStreamBufferGet>
                pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8011400:	687b      	ldr	r3, [r7, #4]
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	f043 0202 	orr.w	r2, r3, #2
 8011408:	687b      	ldr	r3, [r7, #4]
 801140a:	601a      	str	r2, [r3, #0]

                #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                {
                    if( ( pxSocket->xSelectBits & ( EventBits_t ) eSELECT_WRITE ) != 0U )
 801140c:	687b      	ldr	r3, [r7, #4]
 801140e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011410:	f003 0302 	and.w	r3, r3, #2
 8011414:	2b00      	cmp	r3, #0
 8011416:	d005      	beq.n	8011424 <prvReadSackOption+0x84>
                    {
                        /* The field 'xEventBits' is used to store regular socket events
                         * (at most 8), as well as 'select events', which will be left-shifted.
                         */
                        pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8011418:	687b      	ldr	r3, [r7, #4]
 801141a:	681b      	ldr	r3, [r3, #0]
 801141c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	601a      	str	r2, [r3, #0]

                /* In case the socket owner has installed an OnSent handler,
                 * call it now. */
                #if ( ipconfigUSE_CALLBACKS == 1 )
                {
                    if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8011424:	687b      	ldr	r3, [r7, #4]
 8011426:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 801142a:	2b00      	cmp	r3, #0
 801142c:	d005      	beq.n	801143a <prvReadSackOption+0x9a>
                    {
                        pxSocket->u.xTCP.pxHandleSent( pxSocket, ulCount );
 801142e:	687b      	ldr	r3, [r7, #4]
 8011430:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8011434:	6979      	ldr	r1, [r7, #20]
 8011436:	6878      	ldr	r0, [r7, #4]
 8011438:	4798      	blx	r3
                    }
                }
                #endif /* ipconfigUSE_CALLBACKS == 1  */
            }
        }
 801143a:	bf00      	nop
 801143c:	3720      	adds	r7, #32
 801143e:	46bd      	mov	sp, r7
 8011440:	bd80      	pop	{r7, pc}

08011442 <prvCheckRxData>:
 *
 * @return Length of the received buffer.
 */
    BaseType_t prvCheckRxData( const NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint8_t ** ppucRecvData )
    {
 8011442:	b590      	push	{r4, r7, lr}
 8011444:	b08f      	sub	sp, #60	@ 0x3c
 8011446:	af00      	add	r7, sp, #0
 8011448:	6078      	str	r0, [r7, #4]
 801144a:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 801144c:	687b      	ldr	r3, [r7, #4]
 801144e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011450:	6878      	ldr	r0, [r7, #4]
 8011452:	f7f7 ffa9 	bl	80093a8 <uxIPHeaderSizePacket>
 8011456:	4603      	mov	r3, r0
 8011458:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 801145a:	4423      	add	r3, r4
 801145c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 801145e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011460:	62bb      	str	r3, [r7, #40]	@ 0x28
        int32_t lLength, lTCPHeaderLength, lReceiveLength, lUrgentLength;

        /* Map the buffer onto an IPHeader_t struct for easy access to fields. */

        const size_t xIPHeaderLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 8011462:	6878      	ldr	r0, [r7, #4]
 8011464:	f7f7 ffa0 	bl	80093a8 <uxIPHeaderSizePacket>
 8011468:	6278      	str	r0, [r7, #36]	@ 0x24
        uint16_t usLength;
        uint8_t ucIntermediateResult = 0;
 801146a:	2300      	movs	r3, #0
 801146c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
         * node.
         *
         * The size of the TCP header is given in a multiple of 4-byte words (single
         * byte, needs no ntoh() translation).  A shift-right 2: is the same as
         * (offset >> 4) * 4. */
        ucIntermediateResult = ( pxTCPHeader->ucTCPOffset & tcpVALID_BITS_IN_TCP_OFFSET_BYTE ) >> 2;
 8011470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011472:	7b1b      	ldrb	r3, [r3, #12]
 8011474:	089b      	lsrs	r3, r3, #2
 8011476:	b2db      	uxtb	r3, r3
 8011478:	f003 033c 	and.w	r3, r3, #60	@ 0x3c
 801147c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        lTCPHeaderLength = ( int32_t ) ucIntermediateResult;
 8011480:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011484:	61fb      	str	r3, [r7, #28]

        /* Let pucRecvData point to the first byte received. */
        *ppucRecvData = &( pxNetworkBuffer->pucEthernetBuffer[ ( size_t ) ipSIZE_OF_ETH_HEADER + xIPHeaderLength + ( size_t ) lTCPHeaderLength ] );
 8011486:	687b      	ldr	r3, [r7, #4]
 8011488:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801148a:	69f9      	ldr	r1, [r7, #28]
 801148c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801148e:	440b      	add	r3, r1
 8011490:	330e      	adds	r3, #14
 8011492:	441a      	add	r2, r3
 8011494:	683b      	ldr	r3, [r7, #0]
 8011496:	601a      	str	r2, [r3, #0]

        /* Calculate lReceiveLength - the length of the TCP data received.  This is
         * equal to the total packet length minus:
         * ( LinkLayer length (14) + IP header length (20) + size of TCP header(20 +) ).*/
        lReceiveLength = ( int32_t ) pxNetworkBuffer->xDataLength;
 8011498:	687b      	ldr	r3, [r7, #4]
 801149a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801149c:	633b      	str	r3, [r7, #48]	@ 0x30
        lReceiveLength -= ( int32_t ) ipSIZE_OF_ETH_HEADER;
 801149e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80114a0:	3b0e      	subs	r3, #14
 80114a2:	633b      	str	r3, [r7, #48]	@ 0x30

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        switch( ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer )->usFrameType )
 80114a4:	687b      	ldr	r3, [r7, #4]
 80114a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114a8:	899b      	ldrh	r3, [r3, #12]
 80114aa:	b29b      	uxth	r3, r3
 80114ac:	2b08      	cmp	r3, #8
 80114ae:	d004      	beq.n	80114ba <prvCheckRxData+0x78>
 80114b0:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 80114b4:	4293      	cmp	r3, r2
 80114b6:	d015      	beq.n	80114e4 <prvCheckRxData+0xa2>
 80114b8:	e02c      	b.n	8011514 <prvCheckRxData+0xd2>
                case ipIPv4_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_t * pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80114ba:	687b      	ldr	r3, [r7, #4]
 80114bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114be:	330e      	adds	r3, #14
 80114c0:	613b      	str	r3, [r7, #16]

                       usLength = FreeRTOS_htons( pxIPHeader->usLength );
 80114c2:	693b      	ldr	r3, [r7, #16]
 80114c4:	885b      	ldrh	r3, [r3, #2]
 80114c6:	b29b      	uxth	r3, r3
 80114c8:	021b      	lsls	r3, r3, #8
 80114ca:	b21a      	sxth	r2, r3
 80114cc:	693b      	ldr	r3, [r7, #16]
 80114ce:	885b      	ldrh	r3, [r3, #2]
 80114d0:	b29b      	uxth	r3, r3
 80114d2:	0a1b      	lsrs	r3, r3, #8
 80114d4:	b29b      	uxth	r3, r3
 80114d6:	b21b      	sxth	r3, r3
 80114d8:	4313      	orrs	r3, r2
 80114da:	b21b      	sxth	r3, r3
 80114dc:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 80114de:	8afb      	ldrh	r3, [r7, #22]
 80114e0:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 80114e2:	e01a      	b.n	801151a <prvCheckRxData+0xd8>
                case ipIPv6_FRAME_TYPE:
                   {
                       /* MISRA Ref 11.3.1 [Misaligned access] */
                       /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                       /* coverity[misra_c_2012_rule_11_3_violation] */
                       const IPHeader_IPv6_t * pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80114e8:	330e      	adds	r3, #14
 80114ea:	61bb      	str	r3, [r7, #24]

                       /* For Coverity: conversion and cast in 2 steps. */
                       usLength = FreeRTOS_htons( pxIPHeader->usPayloadLength );
 80114ec:	69bb      	ldr	r3, [r7, #24]
 80114ee:	889b      	ldrh	r3, [r3, #4]
 80114f0:	b29b      	uxth	r3, r3
 80114f2:	021b      	lsls	r3, r3, #8
 80114f4:	b21a      	sxth	r2, r3
 80114f6:	69bb      	ldr	r3, [r7, #24]
 80114f8:	889b      	ldrh	r3, [r3, #4]
 80114fa:	b29b      	uxth	r3, r3
 80114fc:	0a1b      	lsrs	r3, r3, #8
 80114fe:	b29b      	uxth	r3, r3
 8011500:	b21b      	sxth	r3, r3
 8011502:	4313      	orrs	r3, r2
 8011504:	b21b      	sxth	r3, r3
 8011506:	82fb      	strh	r3, [r7, #22]
                       lLength = ( int32_t ) usLength;
 8011508:	8afb      	ldrh	r3, [r7, #22]
 801150a:	637b      	str	r3, [r7, #52]	@ 0x34
                       /* Add the length of the TCP-header, because that was not included in 'usPayloadLength'. */
                       lLength += ( int32_t ) sizeof( IPHeader_IPv6_t );
 801150c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801150e:	3328      	adds	r3, #40	@ 0x28
 8011510:	637b      	str	r3, [r7, #52]	@ 0x34
                   }
                   break;
 8011512:	e002      	b.n	801151a <prvCheckRxData+0xd8>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                lLength = 0;
 8011514:	2300      	movs	r3, #0
 8011516:	637b      	str	r3, [r7, #52]	@ 0x34
                break;
 8011518:	bf00      	nop
        }

        if( lReceiveLength > lLength )
 801151a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801151c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801151e:	429a      	cmp	r2, r3
 8011520:	dd01      	ble.n	8011526 <prvCheckRxData+0xe4>
        {
            /* More bytes were received than the reported length, often because of
             * padding bytes at the end. */
            lReceiveLength = lLength;
 8011522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011524:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        /* Subtract the size of the TCP and IP headers and the actual data size is
         * known. */
        if( lReceiveLength > ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength ) )
 8011526:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011528:	69fb      	ldr	r3, [r7, #28]
 801152a:	4413      	add	r3, r2
 801152c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801152e:	429a      	cmp	r2, r3
 8011530:	dd06      	ble.n	8011540 <prvCheckRxData+0xfe>
        {
            lReceiveLength -= ( lTCPHeaderLength + ( int32_t ) xIPHeaderLength );
 8011532:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011534:	69fb      	ldr	r3, [r7, #28]
 8011536:	4413      	add	r3, r2
 8011538:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801153a:	1ad3      	subs	r3, r2, r3
 801153c:	633b      	str	r3, [r7, #48]	@ 0x30
 801153e:	e001      	b.n	8011544 <prvCheckRxData+0x102>
        }
        else
        {
            lReceiveLength = 0;
 8011540:	2300      	movs	r3, #0
 8011542:	633b      	str	r3, [r7, #48]	@ 0x30
         * This field communicates the current value of the urgent pointer as a
         * positive offset from the sequence number in this segment.  The urgent
         * pointer points to the sequence number of the octet following the urgent
         * data.  This field is only be interpreted in segments with the URG control
         * bit set. */
        if( ( pxTCPHeader->ucTCPFlags & tcpTCP_FLAG_URG ) != 0U )
 8011544:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011546:	7b5b      	ldrb	r3, [r3, #13]
 8011548:	f003 0320 	and.w	r3, r3, #32
 801154c:	2b00      	cmp	r3, #0
 801154e:	d01c      	beq.n	801158a <prvCheckRxData+0x148>
        {
            /* Although we ignore the urgent data, we have to skip it. */
            lUrgentLength = ( int32_t ) FreeRTOS_htons( pxTCPHeader->usUrgent );
 8011550:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011552:	8a5b      	ldrh	r3, [r3, #18]
 8011554:	b29b      	uxth	r3, r3
 8011556:	021b      	lsls	r3, r3, #8
 8011558:	b21a      	sxth	r2, r3
 801155a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801155c:	8a5b      	ldrh	r3, [r3, #18]
 801155e:	b29b      	uxth	r3, r3
 8011560:	0a1b      	lsrs	r3, r3, #8
 8011562:	b29b      	uxth	r3, r3
 8011564:	b21b      	sxth	r3, r3
 8011566:	4313      	orrs	r3, r2
 8011568:	b21b      	sxth	r3, r3
 801156a:	b29b      	uxth	r3, r3
 801156c:	60fb      	str	r3, [r7, #12]

            /* MISRA Ref 18.4.1 [Usage of +, -, += and -= operators on expression of pointer type]. */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-184. */
            /* coverity[misra_c_2012_rule_18_4_violation] */
            *ppucRecvData += lUrgentLength;
 801156e:	683b      	ldr	r3, [r7, #0]
 8011570:	681a      	ldr	r2, [r3, #0]
 8011572:	68fb      	ldr	r3, [r7, #12]
 8011574:	441a      	add	r2, r3
 8011576:	683b      	ldr	r3, [r7, #0]
 8011578:	601a      	str	r2, [r3, #0]
            lReceiveLength -= FreeRTOS_min_int32( lReceiveLength, lUrgentLength );
 801157a:	68f9      	ldr	r1, [r7, #12]
 801157c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 801157e:	f7f8 fc51 	bl	8009e24 <FreeRTOS_min_int32>
 8011582:	4602      	mov	r2, r0
 8011584:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011586:	1a9b      	subs	r3, r3, r2
 8011588:	633b      	str	r3, [r7, #48]	@ 0x30
        }

        return ( BaseType_t ) lReceiveLength;
 801158a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
    }
 801158c:	4618      	mov	r0, r3
 801158e:	373c      	adds	r7, #60	@ 0x3c
 8011590:	46bd      	mov	sp, r7
 8011592:	bd90      	pop	{r4, r7, pc}

08011594 <prvStoreRxData>:
 */
    BaseType_t prvStoreRxData( FreeRTOS_Socket_t * pxSocket,
                               const uint8_t * pucRecvData,
                               NetworkBufferDescriptor_t * pxNetworkBuffer,
                               uint32_t ulReceiveLength )
    {
 8011594:	b580      	push	{r7, lr}
 8011596:	b092      	sub	sp, #72	@ 0x48
 8011598:	af02      	add	r7, sp, #8
 801159a:	60f8      	str	r0, [r7, #12]
 801159c:	60b9      	str	r1, [r7, #8]
 801159e:	607a      	str	r2, [r7, #4]
 80115a0:	603b      	str	r3, [r7, #0]
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */
        size_t uxIPOffset = uxIPHeaderSizePacket( pxNetworkBuffer );
 80115a2:	6878      	ldr	r0, [r7, #4]
 80115a4:	f7f7 ff00 	bl	80093a8 <uxIPHeaderSizePacket>
 80115a8:	62f8      	str	r0, [r7, #44]	@ 0x2c
        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                        &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPOffset ] ) );
 80115aa:	687b      	ldr	r3, [r7, #4]
 80115ac:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80115ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80115b0:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80115b2:	4413      	add	r3, r2
 80115b4:	62bb      	str	r3, [r7, #40]	@ 0x28
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80115b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80115b8:	627b      	str	r3, [r7, #36]	@ 0x24
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80115ba:	68fb      	ldr	r3, [r7, #12]
 80115bc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80115c0:	623b      	str	r3, [r7, #32]
        uint32_t ulSequenceNumber, ulSpace;
        int32_t lOffset, lStored;
        BaseType_t xResult = 0;
 80115c2:	2300      	movs	r3, #0
 80115c4:	63bb      	str	r3, [r7, #56]	@ 0x38
        uint32_t ulRxLength = ulReceiveLength;
 80115c6:	683b      	ldr	r3, [r7, #0]
 80115c8:	637b      	str	r3, [r7, #52]	@ 0x34
        const uint8_t * pucRxBuffer = &( pucRecvData[ 0 ] );
 80115ca:	68bb      	ldr	r3, [r7, #8]
 80115cc:	633b      	str	r3, [r7, #48]	@ 0x30

        ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80115ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d0:	685b      	ldr	r3, [r3, #4]
 80115d2:	061a      	lsls	r2, r3, #24
 80115d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115d6:	685b      	ldr	r3, [r3, #4]
 80115d8:	021b      	lsls	r3, r3, #8
 80115da:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80115de:	431a      	orrs	r2, r3
 80115e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115e2:	685b      	ldr	r3, [r3, #4]
 80115e4:	0a1b      	lsrs	r3, r3, #8
 80115e6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80115ea:	431a      	orrs	r2, r3
 80115ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80115ee:	685b      	ldr	r3, [r3, #4]
 80115f0:	0e1b      	lsrs	r3, r3, #24
 80115f2:	4313      	orrs	r3, r2
 80115f4:	61fb      	str	r3, [r7, #28]

        if( ( ulRxLength > 0U ) && ( pxSocket->u.xTCP.eTCPState >= eSYN_RECEIVED ) )
 80115f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80115f8:	2b00      	cmp	r3, #0
 80115fa:	d057      	beq.n	80116ac <prvStoreRxData+0x118>
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011602:	2b03      	cmp	r3, #3
 8011604:	d952      	bls.n	80116ac <prvStoreRxData+0x118>
        {
            uint32_t ulSkipCount = 0;
 8011606:	2300      	movs	r3, #0
 8011608:	613b      	str	r3, [r7, #16]
             *
             * If it can't be "accept"ed it may have to be stored and send a selective
             * ack (SACK) option to confirm it.  In that case, lTCPAddRxdata() will be
             * called later to store an out-of-order packet (in case lOffset is
             * negative). */
            if( pxSocket->u.xTCP.rxStream != NULL )
 801160a:	68fb      	ldr	r3, [r7, #12]
 801160c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011610:	2b00      	cmp	r3, #0
 8011612:	d007      	beq.n	8011624 <prvStoreRxData+0x90>
            {
                ulSpace = ( uint32_t ) uxStreamBufferGetSpace( pxSocket->u.xTCP.rxStream );
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801161a:	4618      	mov	r0, r3
 801161c:	f7fe fc89 	bl	800ff32 <uxStreamBufferGetSpace>
 8011620:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8011622:	e003      	b.n	801162c <prvStoreRxData+0x98>
            }
            else
            {
                ulSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801162a:	63fb      	str	r3, [r7, #60]	@ 0x3c
            }

            lOffset = lTCPWindowRxCheck( pxTCPWindow, ulSequenceNumber, ulRxLength, ulSpace, &( ulSkipCount ) );
 801162c:	f107 0310 	add.w	r3, r7, #16
 8011630:	9300      	str	r3, [sp, #0]
 8011632:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011634:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011636:	69f9      	ldr	r1, [r7, #28]
 8011638:	6a38      	ldr	r0, [r7, #32]
 801163a:	f003 fd45 	bl	80150c8 <lTCPWindowRxCheck>
 801163e:	61b8      	str	r0, [r7, #24]

            if( lOffset >= 0 )
 8011640:	69bb      	ldr	r3, [r7, #24]
 8011642:	2b00      	cmp	r3, #0
 8011644:	db20      	blt.n	8011688 <prvStoreRxData+0xf4>
            {
                /* New data has arrived and may be made available to the user.  See
                 * if the head marker in rxStream may be advanced, only if lOffset == 0.
                 * In case the low-water mark is reached, bLowWater will be set
                 * "low-water" here stands for "little space". */
                if( ulSkipCount != 0U )
 8011646:	693b      	ldr	r3, [r7, #16]
 8011648:	2b00      	cmp	r3, #0
 801164a:	d007      	beq.n	801165c <prvStoreRxData+0xc8>
                {
                    /* A packet was received that starts before 'ulCurrentSequenceNumber',
                     * and that ends after it.  The first 'ulSkipCount' bytes shall be
                     * skipped. */
                    ulRxLength -= ulSkipCount;
 801164c:	693b      	ldr	r3, [r7, #16]
 801164e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011650:	1ad3      	subs	r3, r2, r3
 8011652:	637b      	str	r3, [r7, #52]	@ 0x34
                    pucRxBuffer = &( pucRecvData[ ulSkipCount ] );
 8011654:	693b      	ldr	r3, [r7, #16]
 8011656:	68ba      	ldr	r2, [r7, #8]
 8011658:	4413      	add	r3, r2
 801165a:	633b      	str	r3, [r7, #48]	@ 0x30
                }

                lStored = lTCPAddRxdata( pxSocket, ( uint32_t ) lOffset, pucRxBuffer, ulRxLength );
 801165c:	69b9      	ldr	r1, [r7, #24]
 801165e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8011662:	68f8      	ldr	r0, [r7, #12]
 8011664:	f7fe f8d2 	bl	800f80c <lTCPAddRxdata>
 8011668:	6178      	str	r0, [r7, #20]

                if( lStored != ( int32_t ) ulRxLength )
 801166a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801166c:	697a      	ldr	r2, [r7, #20]
 801166e:	429a      	cmp	r2, r3
 8011670:	d00a      	beq.n	8011688 <prvStoreRxData+0xf4>
                {
                    FreeRTOS_debug_printf( ( "lTCPAddRxdata: stored %d / %u bytes? ?\n", ( int ) lStored, ( unsigned ) ulRxLength ) );
 8011672:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011674:	6979      	ldr	r1, [r7, #20]
 8011676:	4813      	ldr	r0, [pc, #76]	@ (80116c4 <prvStoreRxData+0x130>)
 8011678:	f00f fb02 	bl	8020c80 <lUDPLoggingPrintf>

                    /* Received data could not be stored.  The socket's flag
                     * bMallocError has been set.  The socket now has the status
                     * eCLOSE_WAIT and a RST packet will be sent back. */
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 801167c:	6878      	ldr	r0, [r7, #4]
 801167e:	f002 f8b3 	bl	80137e8 <prvTCPSendReset>
                    xResult = -1;
 8011682:	f04f 33ff 	mov.w	r3, #4294967295
 8011686:	63bb      	str	r3, [r7, #56]	@ 0x38
            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                /* Now lTCPAddRxdata() will move the rxHead pointer forward
                 * so data becomes available to the user immediately
                 * In case the low-water mark is reached, bLowWater will be set. */
                if( ( xResult == 0 ) && ( pxTCPWindow->ulUserDataLength > 0U ) )
 8011688:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801168a:	2b00      	cmp	r3, #0
 801168c:	d113      	bne.n	80116b6 <prvStoreRxData+0x122>
 801168e:	6a3b      	ldr	r3, [r7, #32]
 8011690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011692:	2b00      	cmp	r3, #0
 8011694:	d00f      	beq.n	80116b6 <prvStoreRxData+0x122>
                {
                    ( void ) lTCPAddRxdata( pxSocket, 0U, NULL, pxTCPWindow->ulUserDataLength );
 8011696:	6a3b      	ldr	r3, [r7, #32]
 8011698:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801169a:	2200      	movs	r2, #0
 801169c:	2100      	movs	r1, #0
 801169e:	68f8      	ldr	r0, [r7, #12]
 80116a0:	f7fe f8b4 	bl	800f80c <lTCPAddRxdata>
                    pxTCPWindow->ulUserDataLength = 0;
 80116a4:	6a3b      	ldr	r3, [r7, #32]
 80116a6:	2200      	movs	r2, #0
 80116a8:	631a      	str	r2, [r3, #48]	@ 0x30
        {
 80116aa:	e004      	b.n	80116b6 <prvStoreRxData+0x122>
            }
            #endif /* ipconfigUSE_TCP_WIN */
        }
        else
        {
            pxTCPWindow->ucOptionLength = 0U;
 80116ac:	6a3b      	ldr	r3, [r7, #32]
 80116ae:	2200      	movs	r2, #0
 80116b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 80116b4:	e000      	b.n	80116b8 <prvStoreRxData+0x124>
        {
 80116b6:	bf00      	nop
        }

        return xResult;
 80116b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
    }
 80116ba:	4618      	mov	r0, r3
 80116bc:	3740      	adds	r7, #64	@ 0x40
 80116be:	46bd      	mov	sp, r7
 80116c0:	bd80      	pop	{r7, pc}
 80116c2:	bf00      	nop
 80116c4:	08024ea4 	.word	0x08024ea4

080116c8 <prvTCPSocketIsActive>:
 *
 * @return pdTRUE if the socket must be checked. Non-active sockets
 *         are waiting for user action, either connect() or close().
 */
    BaseType_t prvTCPSocketIsActive( eIPTCPState_t eStatus )
    {
 80116c8:	b480      	push	{r7}
 80116ca:	b085      	sub	sp, #20
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	4603      	mov	r3, r0
 80116d0:	71fb      	strb	r3, [r7, #7]
        BaseType_t xResult;

        switch( eStatus )
 80116d2:	79fb      	ldrb	r3, [r7, #7]
 80116d4:	2b0b      	cmp	r3, #11
 80116d6:	bf8c      	ite	hi
 80116d8:	2201      	movhi	r2, #1
 80116da:	2200      	movls	r2, #0
 80116dc:	b2d2      	uxtb	r2, r2
 80116de:	2a00      	cmp	r2, #0
 80116e0:	d10f      	bne.n	8011702 <prvTCPSocketIsActive+0x3a>
 80116e2:	f640 3281 	movw	r2, #2945	@ 0xb81
 80116e6:	fa22 f303 	lsr.w	r3, r2, r3
 80116ea:	f003 0301 	and.w	r3, r3, #1
 80116ee:	2b00      	cmp	r3, #0
 80116f0:	bf14      	ite	ne
 80116f2:	2301      	movne	r3, #1
 80116f4:	2300      	moveq	r3, #0
 80116f6:	b2db      	uxtb	r3, r3
 80116f8:	2b00      	cmp	r3, #0
 80116fa:	d002      	beq.n	8011702 <prvTCPSocketIsActive+0x3a>
            case eCLOSED:
            case eCLOSE_WAIT:
            case eFIN_WAIT_2:
            case eCLOSING:
            case eTIME_WAIT:
                xResult = pdFALSE;
 80116fc:	2300      	movs	r3, #0
 80116fe:	60fb      	str	r3, [r7, #12]
                break;
 8011700:	e002      	b.n	8011708 <prvTCPSocketIsActive+0x40>
            case eSYN_RECEIVED:
            case eESTABLISHED:
            case eFIN_WAIT_1:
            case eLAST_ACK:
            default:
                xResult = pdTRUE;
 8011702:	2301      	movs	r3, #1
 8011704:	60fb      	str	r3, [r7, #12]
                break;
 8011706:	bf00      	nop
        }

        return xResult;
 8011708:	68fb      	ldr	r3, [r7, #12]
    }
 801170a:	4618      	mov	r0, r3
 801170c:	3714      	adds	r7, #20
 801170e:	46bd      	mov	sp, r7
 8011710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011714:	4770      	bx	lr
	...

08011718 <prvTCPStatusAgeCheck>:
 * @return pdFALSE if no checks are needed, pdTRUE if checks were done, or negative
 *         in case the socket has reached a critical time-out. The socket will go to
 *         the eCLOSE_WAIT state.
 */
        BaseType_t prvTCPStatusAgeCheck( FreeRTOS_Socket_t * pxSocket )
        {
 8011718:	b5f0      	push	{r4, r5, r6, r7, lr}
 801171a:	b089      	sub	sp, #36	@ 0x24
 801171c:	af02      	add	r7, sp, #8
 801171e:	6078      	str	r0, [r7, #4]
            BaseType_t xResult;

            eIPTCPState_t eState = pxSocket->u.xTCP.eTCPState;
 8011720:	687b      	ldr	r3, [r7, #4]
 8011722:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011726:	74fb      	strb	r3, [r7, #19]

            switch( eState )
 8011728:	7cfb      	ldrb	r3, [r7, #19]
 801172a:	2b08      	cmp	r3, #8
 801172c:	d00b      	beq.n	8011746 <prvTCPStatusAgeCheck+0x2e>
 801172e:	2b08      	cmp	r3, #8
 8011730:	dc0c      	bgt.n	801174c <prvTCPStatusAgeCheck+0x34>
 8011732:	2b01      	cmp	r3, #1
 8011734:	dc02      	bgt.n	801173c <prvTCPStatusAgeCheck+0x24>
 8011736:	2b00      	cmp	r3, #0
 8011738:	da05      	bge.n	8011746 <prvTCPStatusAgeCheck+0x2e>
 801173a:	e007      	b.n	801174c <prvTCPStatusAgeCheck+0x34>
 801173c:	2b05      	cmp	r3, #5
 801173e:	d105      	bne.n	801174c <prvTCPStatusAgeCheck+0x34>
            {
                case eESTABLISHED:

                    /* If the 'ipconfigTCP_KEEP_ALIVE' option is enabled, sockets in
                     *  state ESTABLISHED can be protected using keep-alive messages. */
                    xResult = pdFALSE;
 8011740:	2300      	movs	r3, #0
 8011742:	617b      	str	r3, [r7, #20]
                    break;
 8011744:	e005      	b.n	8011752 <prvTCPStatusAgeCheck+0x3a>

                case eCLOSED:
                case eTCP_LISTEN:
                case eCLOSE_WAIT:
                    /* These 3 states may last for ever, up to the owner. */
                    xResult = pdFALSE;
 8011746:	2300      	movs	r3, #0
 8011748:	617b      	str	r3, [r7, #20]
                    break;
 801174a:	e002      	b.n	8011752 <prvTCPStatusAgeCheck+0x3a>
                case eTIME_WAIT:
                default:

                    /* All other (non-connected) states will get anti-hanging
                     * protection. */
                    xResult = pdTRUE;
 801174c:	2301      	movs	r3, #1
 801174e:	617b      	str	r3, [r7, #20]
                    break;
 8011750:	bf00      	nop
            }

            if( xResult != pdFALSE )
 8011752:	697b      	ldr	r3, [r7, #20]
 8011754:	2b00      	cmp	r3, #0
 8011756:	d032      	beq.n	80117be <prvTCPStatusAgeCheck+0xa6>
            {
                /* How much time has past since the last active moment which is
                 * defined as A) a state change or B) a packet has arrived. */
                TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastActTime;
 8011758:	f7f2 fa8e 	bl	8003c78 <xTaskGetTickCount>
 801175c:	4602      	mov	r2, r0
 801175e:	687b      	ldr	r3, [r7, #4]
 8011760:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8011764:	1ad3      	subs	r3, r2, r3
 8011766:	60fb      	str	r3, [r7, #12]

                /* ipconfigTCP_HANG_PROTECTION_TIME is in units of seconds. */
                if( xAge > ( ( TickType_t ) ipconfigTCP_HANG_PROTECTION_TIME * ( TickType_t ) configTICK_RATE_HZ ) )
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	f247 5230 	movw	r2, #30000	@ 0x7530
 801176e:	4293      	cmp	r3, r2
 8011770:	d925      	bls.n	80117be <prvTCPStatusAgeCheck+0xa6>
                {
                    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                    {
                        FreeRTOS_debug_printf( ( "Inactive socket closed: port %u rem %xip:%u status %s\n",
 8011772:	687b      	ldr	r3, [r7, #4]
 8011774:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011776:	461d      	mov	r5, r3
 8011778:	687b      	ldr	r3, [r7, #4]
 801177a:	6d5c      	ldr	r4, [r3, #84]	@ 0x54
 801177c:	687b      	ldr	r3, [r7, #4]
 801177e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011782:	461e      	mov	r6, r3
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801178a:	4618      	mov	r0, r3
 801178c:	f000 fdca 	bl	8012324 <FreeRTOS_GetTCPStateName>
 8011790:	4603      	mov	r3, r0
 8011792:	9300      	str	r3, [sp, #0]
 8011794:	4633      	mov	r3, r6
 8011796:	4622      	mov	r2, r4
 8011798:	4629      	mov	r1, r5
 801179a:	480b      	ldr	r0, [pc, #44]	@ (80117c8 <prvTCPStatusAgeCheck+0xb0>)
 801179c:	f00f fa70 	bl	8020c80 <lUDPLoggingPrintf>
                                                 FreeRTOS_GetTCPStateName( ( UBaseType_t ) pxSocket->u.xTCP.eTCPState ) ) );
                    }
                    #endif /* ipconfigHAS_DEBUG_PRINTF */

                    /* Move to eCLOSE_WAIT, user may close the socket. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80117a0:	2108      	movs	r1, #8
 80117a2:	6878      	ldr	r0, [r7, #4]
 80117a4:	f7fe feac 	bl	8010500 <vTCPStateChange>

                    /* When 'bPassQueued' true, this socket is an orphan until it
                     * gets connected. */
                    if( pxSocket->u.xTCP.bits.bPassQueued != pdFALSE_UNSIGNED )
 80117a8:	687b      	ldr	r3, [r7, #4]
 80117aa:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80117ae:	f003 0304 	and.w	r3, r3, #4
 80117b2:	b2db      	uxtb	r3, r3
 80117b4:	2b00      	cmp	r3, #0
 80117b6:	d002      	beq.n	80117be <prvTCPStatusAgeCheck+0xa6>
                    {
                        /* vTCPStateChange() has called vSocketCloseNextTime()
                         * in case the socket is not yet owned by the application.
                         * Return a negative value to inform the caller that
                         * the socket will be closed in the next cycle. */
                        xResult = -1;
 80117b8:	f04f 33ff 	mov.w	r3, #4294967295
 80117bc:	617b      	str	r3, [r7, #20]
                    }
                }
            }

            return xResult;
 80117be:	697b      	ldr	r3, [r7, #20]
        }
 80117c0:	4618      	mov	r0, r3
 80117c2:	371c      	adds	r7, #28
 80117c4:	46bd      	mov	sp, r7
 80117c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80117c8:	08024ecc 	.word	0x08024ecc

080117cc <prvTCPHandleFin>:
 *
 * @return Length of the packet to be sent.
 */
    static BaseType_t prvTCPHandleFin( FreeRTOS_Socket_t * pxSocket,
                                       const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80117cc:	b5b0      	push	{r4, r5, r7, lr}
 80117ce:	b08a      	sub	sp, #40	@ 0x28
 80117d0:	af02      	add	r7, sp, #8
 80117d2:	6078      	str	r0, [r7, #4]
 80117d4:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80117d6:	683b      	ldr	r3, [r7, #0]
 80117d8:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80117da:	6838      	ldr	r0, [r7, #0]
 80117dc:	f7f7 fde4 	bl	80093a8 <uxIPHeaderSizePacket>
 80117e0:	4603      	mov	r3, r0
 80117e2:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80117e4:	4423      	add	r3, r4
 80117e6:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 80117e8:	69bb      	ldr	r3, [r7, #24]
 80117ea:	617b      	str	r3, [r7, #20]
        uint8_t ucIntermediateResult = 0, ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80117ec:	2300      	movs	r3, #0
 80117ee:	74fb      	strb	r3, [r7, #19]
 80117f0:	697b      	ldr	r3, [r7, #20]
 80117f2:	7b5b      	ldrb	r3, [r3, #13]
 80117f4:	74bb      	strb	r3, [r7, #18]
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80117f6:	687b      	ldr	r3, [r7, #4]
 80117f8:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80117fc:	60fb      	str	r3, [r7, #12]
        BaseType_t xSendLength = 0;
 80117fe:	2300      	movs	r3, #0
 8011800:	61fb      	str	r3, [r7, #28]
        uint32_t ulAckNr = FreeRTOS_ntohl( pxTCPHeader->ulAckNr );
 8011802:	697b      	ldr	r3, [r7, #20]
 8011804:	689b      	ldr	r3, [r3, #8]
 8011806:	061a      	lsls	r2, r3, #24
 8011808:	697b      	ldr	r3, [r7, #20]
 801180a:	689b      	ldr	r3, [r3, #8]
 801180c:	021b      	lsls	r3, r3, #8
 801180e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011812:	431a      	orrs	r2, r3
 8011814:	697b      	ldr	r3, [r7, #20]
 8011816:	689b      	ldr	r3, [r3, #8]
 8011818:	0a1b      	lsrs	r3, r3, #8
 801181a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801181e:	431a      	orrs	r2, r3
 8011820:	697b      	ldr	r3, [r7, #20]
 8011822:	689b      	ldr	r3, [r3, #8]
 8011824:	0e1b      	lsrs	r3, r3, #24
 8011826:	4313      	orrs	r3, r2
 8011828:	60bb      	str	r3, [r7, #8]

        if( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U )
 801182a:	7cbb      	ldrb	r3, [r7, #18]
 801182c:	f003 0301 	and.w	r3, r3, #1
 8011830:	2b00      	cmp	r3, #0
 8011832:	d004      	beq.n	801183e <prvTCPHandleFin+0x72>
        {
            pxTCPWindow->rx.ulCurrentSequenceNumber = pxTCPWindow->rx.ulFINSequenceNumber + 1U;
 8011834:	68fb      	ldr	r3, [r7, #12]
 8011836:	695b      	ldr	r3, [r3, #20]
 8011838:	1c5a      	adds	r2, r3, #1
 801183a:	68fb      	ldr	r3, [r7, #12]
 801183c:	611a      	str	r2, [r3, #16]
        }

        if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 801183e:	687b      	ldr	r3, [r7, #4]
 8011840:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011844:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011848:	b2db      	uxtb	r3, r3
 801184a:	2b00      	cmp	r3, #0
 801184c:	d10b      	bne.n	8011866 <prvTCPHandleFin+0x9a>
        {
            /* We haven't yet replied with a FIN, do so now. */
            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 801184e:	68fb      	ldr	r3, [r7, #12]
 8011850:	6a1a      	ldr	r2, [r3, #32]
 8011852:	68fb      	ldr	r3, [r7, #12]
 8011854:	625a      	str	r2, [r3, #36]	@ 0x24
            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8011856:	687a      	ldr	r2, [r7, #4]
 8011858:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801185c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8011860:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 8011864:	e00c      	b.n	8011880 <prvTCPHandleFin+0xb4>
        }
        else
        {
            /* We did send a FIN already, see if it's ACK'd. */
            if( ulAckNr == ( pxTCPWindow->tx.ulFINSequenceNumber + 1U ) )
 8011866:	68fb      	ldr	r3, [r7, #12]
 8011868:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801186a:	3301      	adds	r3, #1
 801186c:	68ba      	ldr	r2, [r7, #8]
 801186e:	429a      	cmp	r2, r3
 8011870:	d106      	bne.n	8011880 <prvTCPHandleFin+0xb4>
            {
                pxSocket->u.xTCP.bits.bFinAcked = pdTRUE_UNSIGNED;
 8011872:	687a      	ldr	r2, [r7, #4]
 8011874:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8011878:	f043 0301 	orr.w	r3, r3, #1
 801187c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
            }
        }

        if( pxSocket->u.xTCP.bits.bFinAcked == pdFALSE_UNSIGNED )
 8011880:	687b      	ldr	r3, [r7, #4]
 8011882:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011886:	f003 0301 	and.w	r3, r3, #1
 801188a:	b2db      	uxtb	r3, r3
 801188c:	2b00      	cmp	r3, #0
 801188e:	d10b      	bne.n	80118a8 <prvTCPHandleFin+0xdc>
        {
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8011890:	68fb      	ldr	r3, [r7, #12]
 8011892:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011894:	68fb      	ldr	r3, [r7, #12]
 8011896:	621a      	str	r2, [r3, #32]
            pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_FIN;
 8011898:	697b      	ldr	r3, [r7, #20]
 801189a:	2211      	movs	r2, #17
 801189c:	735a      	strb	r2, [r3, #13]

            /* And wait for the final ACK. */
            vTCPStateChange( pxSocket, eLAST_ACK );
 801189e:	210a      	movs	r1, #10
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f7fe fe2d 	bl	8010500 <vTCPStateChange>
 80118a6:	e023      	b.n	80118f0 <prvTCPHandleFin+0x124>
        }
        else
        {
            /* Our FIN has been ACK'd, the outgoing sequence number is now fixed. */
            pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber + 1U;
 80118a8:	68fb      	ldr	r3, [r7, #12]
 80118aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80118ac:	1c5a      	adds	r2, r3, #1
 80118ae:	68fb      	ldr	r3, [r7, #12]
 80118b0:	621a      	str	r2, [r3, #32]

            if( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED )
 80118b2:	687b      	ldr	r3, [r7, #4]
 80118b4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80118b8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 80118bc:	b2db      	uxtb	r3, r3
 80118be:	2b00      	cmp	r3, #0
 80118c0:	d103      	bne.n	80118ca <prvTCPHandleFin+0xfe>
            {
                /* We have sent out a FIN but the peer hasn't replied with a FIN
                 * yet. Do nothing for the moment. */
                pxTCPHeader->ucTCPFlags = 0U;
 80118c2:	697b      	ldr	r3, [r7, #20]
 80118c4:	2200      	movs	r2, #0
 80118c6:	735a      	strb	r2, [r3, #13]
 80118c8:	e012      	b.n	80118f0 <prvTCPHandleFin+0x124>
            }
            else
            {
                if( pxSocket->u.xTCP.bits.bFinLast == pdFALSE_UNSIGNED )
 80118ca:	687b      	ldr	r3, [r7, #4]
 80118cc:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 80118d0:	f003 0302 	and.w	r3, r3, #2
 80118d4:	b2db      	uxtb	r3, r3
 80118d6:	2b00      	cmp	r3, #0
 80118d8:	d103      	bne.n	80118e2 <prvTCPHandleFin+0x116>
                {
                    /* This is the third of the three-way hand shake: the last
                     * ACK. */
                    pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 80118da:	697b      	ldr	r3, [r7, #20]
 80118dc:	2210      	movs	r2, #16
 80118de:	735a      	strb	r2, [r3, #13]
 80118e0:	e002      	b.n	80118e8 <prvTCPHandleFin+0x11c>
                }
                else
                {
                    /* The other party started the closure, so we just wait for the
                     * last ACK. */
                    pxTCPHeader->ucTCPFlags = 0U;
 80118e2:	697b      	ldr	r3, [r7, #20]
 80118e4:	2200      	movs	r2, #0
 80118e6:	735a      	strb	r2, [r3, #13]
                }

                /* And wait for the user to close this socket. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 80118e8:	2108      	movs	r1, #8
 80118ea:	6878      	ldr	r0, [r7, #4]
 80118ec:	f7fe fe08 	bl	8010500 <vTCPStateChange>
            }
        }

        pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 80118f0:	68fb      	ldr	r3, [r7, #12]
 80118f2:	6a1a      	ldr	r2, [r3, #32]
 80118f4:	68fb      	ldr	r3, [r7, #12]
 80118f6:	62da      	str	r2, [r3, #44]	@ 0x2c

        if( pxTCPHeader->ucTCPFlags != 0U )
 80118f8:	697b      	ldr	r3, [r7, #20]
 80118fa:	7b5b      	ldrb	r3, [r3, #13]
 80118fc:	2b00      	cmp	r3, #0
 80118fe:	d00d      	beq.n	801191c <prvTCPHandleFin+0x150>
        {
            ucIntermediateResult = ( uint8_t ) ( uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength );
 8011900:	6878      	ldr	r0, [r7, #4]
 8011902:	f7f7 fd6b 	bl	80093dc <uxIPHeaderSizeSocket>
 8011906:	4603      	mov	r3, r0
 8011908:	b2da      	uxtb	r2, r3
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011910:	4413      	add	r3, r2
 8011912:	b2db      	uxtb	r3, r3
 8011914:	3314      	adds	r3, #20
 8011916:	74fb      	strb	r3, [r7, #19]
            xSendLength = ( BaseType_t ) ucIntermediateResult;
 8011918:	7cfb      	ldrb	r3, [r7, #19]
 801191a:	61fb      	str	r3, [r7, #28]
        }

        pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + pxTCPWindow->ucOptionLength ) << 2 );
 801191c:	68fb      	ldr	r3, [r7, #12]
 801191e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8011922:	3314      	adds	r3, #20
 8011924:	b2db      	uxtb	r3, r3
 8011926:	009b      	lsls	r3, r3, #2
 8011928:	b2da      	uxtb	r2, r3
 801192a:	697b      	ldr	r3, [r7, #20]
 801192c:	731a      	strb	r2, [r3, #12]

        if( xTCPWindowLoggingLevel != 0 )
 801192e:	4b14      	ldr	r3, [pc, #80]	@ (8011980 <prvTCPHandleFin+0x1b4>)
 8011930:	681b      	ldr	r3, [r3, #0]
 8011932:	2b00      	cmp	r3, #0
 8011934:	d01f      	beq.n	8011976 <prvTCPHandleFin+0x1aa>
        {
            FreeRTOS_debug_printf( ( "TCP: send FIN+ACK (ack %u, cur/nxt %u/%u) ourSeqNr %u | Rx %u\n",
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	69db      	ldr	r3, [r3, #28]
 801193a:	68ba      	ldr	r2, [r7, #8]
 801193c:	1ad0      	subs	r0, r2, r3
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	6a1a      	ldr	r2, [r3, #32]
 8011942:	68fb      	ldr	r3, [r7, #12]
 8011944:	69db      	ldr	r3, [r3, #28]
 8011946:	1ad4      	subs	r4, r2, r3
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801194c:	68fb      	ldr	r3, [r7, #12]
 801194e:	69db      	ldr	r3, [r3, #28]
 8011950:	1ad5      	subs	r5, r2, r3
 8011952:	68fb      	ldr	r3, [r7, #12]
 8011954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	69db      	ldr	r3, [r3, #28]
 801195a:	1ad3      	subs	r3, r2, r3
 801195c:	68fa      	ldr	r2, [r7, #12]
 801195e:	6911      	ldr	r1, [r2, #16]
 8011960:	68fa      	ldr	r2, [r7, #12]
 8011962:	68d2      	ldr	r2, [r2, #12]
 8011964:	1a8a      	subs	r2, r1, r2
 8011966:	9201      	str	r2, [sp, #4]
 8011968:	9300      	str	r3, [sp, #0]
 801196a:	462b      	mov	r3, r5
 801196c:	4622      	mov	r2, r4
 801196e:	4601      	mov	r1, r0
 8011970:	4804      	ldr	r0, [pc, #16]	@ (8011984 <prvTCPHandleFin+0x1b8>)
 8011972:	f00f f985 	bl	8020c80 <lUDPLoggingPrintf>
                                     ( unsigned ) ( pxTCPWindow->ulNextTxSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->ulOurSequenceNumber - pxTCPWindow->tx.ulFirstSequenceNumber ),
                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );
        }

        return xSendLength;
 8011976:	69fb      	ldr	r3, [r7, #28]
    }
 8011978:	4618      	mov	r0, r3
 801197a:	3720      	adds	r7, #32
 801197c:	46bd      	mov	sp, r7
 801197e:	bdb0      	pop	{r4, r5, r7, pc}
 8011980:	20001348 	.word	0x20001348
 8011984:	08024f04 	.word	0x08024f04

08011988 <prvHandleSynReceived>:
 */
    static BaseType_t prvHandleSynReceived( FreeRTOS_Socket_t * pxSocket,
                                            const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8011988:	b590      	push	{r4, r7, lr}
 801198a:	b09b      	sub	sp, #108	@ 0x6c
 801198c:	af02      	add	r7, sp, #8
 801198e:	60f8      	str	r0, [r7, #12]
 8011990:	60b9      	str	r1, [r7, #8]
 8011992:	607a      	str	r2, [r7, #4]
 8011994:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011996:	68bb      	ldr	r3, [r7, #8]
 8011998:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801199a:	68f8      	ldr	r0, [r7, #12]
 801199c:	f7f7 fd1e 	bl	80093dc <uxIPHeaderSizeSocket>
 80119a0:	4603      	mov	r3, r0
 80119a2:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80119a4:	4423      	add	r3, r4
 80119a6:	657b      	str	r3, [r7, #84]	@ 0x54
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80119a8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80119aa:	653b      	str	r3, [r7, #80]	@ 0x50
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80119ac:	68fb      	ldr	r3, [r7, #12]
 80119ae:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80119b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 80119b4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119b6:	7b5b      	ldrb	r3, [r3, #13]
 80119b8:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 80119bc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119be:	685b      	ldr	r3, [r3, #4]
 80119c0:	061a      	lsls	r2, r3, #24
 80119c2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119c4:	685b      	ldr	r3, [r3, #4]
 80119c6:	021b      	lsls	r3, r3, #8
 80119c8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80119cc:	431a      	orrs	r2, r3
 80119ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119d0:	685b      	ldr	r3, [r3, #4]
 80119d2:	0a1b      	lsrs	r3, r3, #8
 80119d4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80119d8:	431a      	orrs	r2, r3
 80119da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80119dc:	685b      	ldr	r3, [r3, #4]
 80119de:	0e1b      	lsrs	r3, r3, #24
 80119e0:	4313      	orrs	r3, r2
 80119e2:	647b      	str	r3, [r7, #68]	@ 0x44
        BaseType_t xSendLength = 0;
 80119e4:	2300      	movs	r3, #0
 80119e6:	65fb      	str	r3, [r7, #92]	@ 0x5c
        UBaseType_t uxIntermediateResult = 0U;
 80119e8:	2300      	movs	r3, #0
 80119ea:	643b      	str	r3, [r7, #64]	@ 0x40

        /* Either expect a ACK or a SYN+ACK. */
        uint8_t ucExpect = tcpTCP_FLAG_ACK;
 80119ec:	2310      	movs	r3, #16
 80119ee:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        const uint8_t ucFlagsMask = tcpTCP_FLAG_ACK | tcpTCP_FLAG_RST | tcpTCP_FLAG_SYN | tcpTCP_FLAG_FIN;
 80119f2:	2317      	movs	r3, #23
 80119f4:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f

        if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 80119f8:	68fb      	ldr	r3, [r7, #12]
 80119fa:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80119fe:	2b02      	cmp	r3, #2
 8011a00:	d105      	bne.n	8011a0e <prvHandleSynReceived+0x86>
        {
            ucExpect |= tcpTCP_FLAG_SYN;
 8011a02:	f897 305b 	ldrb.w	r3, [r7, #91]	@ 0x5b
 8011a06:	f043 0302 	orr.w	r3, r3, #2
 8011a0a:	f887 305b 	strb.w	r3, [r7, #91]	@ 0x5b
        }

        if( ( ucTCPFlags & ucFlagsMask ) != ucExpect )
 8011a0e:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 8011a12:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 8011a16:	4013      	ands	r3, r2
 8011a18:	b2db      	uxtb	r3, r3
 8011a1a:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8011a1e:	429a      	cmp	r2, r3
 8011a20:	d044      	beq.n	8011aac <prvHandleSynReceived+0x124>
        {
            /* eSYN_RECEIVED: flags 0010 expected, not 0002. */
            /* eSYN_RECEIVED: flags ACK  expected, not SYN. */
            FreeRTOS_debug_printf( ( "%s: flags %04X expected, not %04X\n",
 8011a22:	68fb      	ldr	r3, [r7, #12]
 8011a24:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011a28:	2b04      	cmp	r3, #4
 8011a2a:	d101      	bne.n	8011a30 <prvHandleSynReceived+0xa8>
 8011a2c:	4977      	ldr	r1, [pc, #476]	@ (8011c0c <prvHandleSynReceived+0x284>)
 8011a2e:	e000      	b.n	8011a32 <prvHandleSynReceived+0xaa>
 8011a30:	4977      	ldr	r1, [pc, #476]	@ (8011c10 <prvHandleSynReceived+0x288>)
 8011a32:	f897 205b 	ldrb.w	r2, [r7, #91]	@ 0x5b
 8011a36:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8011a3a:	4876      	ldr	r0, [pc, #472]	@ (8011c14 <prvHandleSynReceived+0x28c>)
 8011a3c:	f00f f920 	bl	8020c80 <lUDPLoggingPrintf>
                                     ( pxSocket->u.xTCP.eTCPState == ( uint8_t ) eSYN_RECEIVED ) ? "eSYN_RECEIVED" : "eCONNECT_SYN",
                                     ucExpect, ucTCPFlags ) );

            /* In case pxSocket is not yet owned by the application, a closure
             * of the socket will be scheduled for the next cycle. */
            vTCPStateChange( pxSocket, eCLOSE_WAIT );
 8011a40:	2108      	movs	r1, #8
 8011a42:	68f8      	ldr	r0, [r7, #12]
 8011a44:	f7fe fd5c 	bl	8010500 <vTCPStateChange>

            /* Send RST with the expected sequence and ACK numbers,
             * otherwise the packet will be ignored. */
            pxTCPWindow->ulOurSequenceNumber = FreeRTOS_htonl( pxTCPHeader->ulAckNr );
 8011a48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a4a:	689b      	ldr	r3, [r3, #8]
 8011a4c:	061a      	lsls	r2, r3, #24
 8011a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a50:	689b      	ldr	r3, [r3, #8]
 8011a52:	021b      	lsls	r3, r3, #8
 8011a54:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011a58:	431a      	orrs	r2, r3
 8011a5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a5c:	689b      	ldr	r3, [r3, #8]
 8011a5e:	0a1b      	lsrs	r3, r3, #8
 8011a60:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011a64:	431a      	orrs	r2, r3
 8011a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a68:	689b      	ldr	r3, [r3, #8]
 8011a6a:	0e1b      	lsrs	r3, r3, #24
 8011a6c:	431a      	orrs	r2, r3
 8011a6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a70:	62da      	str	r2, [r3, #44]	@ 0x2c
            pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8011a72:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011a74:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011a76:	611a      	str	r2, [r3, #16]

            pxTCPHeader->ucTCPFlags |= tcpTCP_FLAG_RST;
 8011a78:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a7a:	7b5b      	ldrb	r3, [r3, #13]
 8011a7c:	f043 0304 	orr.w	r3, r3, #4
 8011a80:	b2da      	uxtb	r2, r3
 8011a82:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a84:	735a      	strb	r2, [r3, #13]

            uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011a86:	68f8      	ldr	r0, [r7, #12]
 8011a88:	f7f7 fca8 	bl	80093dc <uxIPHeaderSizeSocket>
 8011a8c:	4602      	mov	r2, r0
 8011a8e:	683b      	ldr	r3, [r7, #0]
 8011a90:	4413      	add	r3, r2
 8011a92:	3314      	adds	r3, #20
 8011a94:	643b      	str	r3, [r7, #64]	@ 0x40
            xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011a96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011a98:	65fb      	str	r3, [r7, #92]	@ 0x5c

            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8011a9a:	683b      	ldr	r3, [r7, #0]
 8011a9c:	b2db      	uxtb	r3, r3
 8011a9e:	3314      	adds	r3, #20
 8011aa0:	b2db      	uxtb	r3, r3
 8011aa2:	009b      	lsls	r3, r3, #2
 8011aa4:	b2da      	uxtb	r2, r3
 8011aa6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011aa8:	731a      	strb	r2, [r3, #12]
 8011aaa:	e0aa      	b.n	8011c02 <prvHandleSynReceived+0x27a>
        }
        else
        {
            pxTCPWindow->usPeerPortNumber = pxSocket->u.xTCP.usRemotePort;
 8011aac:	68fb      	ldr	r3, [r7, #12]
 8011aae:	f8b3 2064 	ldrh.w	r2, [r3, #100]	@ 0x64
 8011ab2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011ab4:	f8a3 20ba 	strh.w	r2, [r3, #186]	@ 0xba
            pxTCPWindow->usOurPortNumber = pxSocket->usLocalPort;
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	8f1a      	ldrh	r2, [r3, #56]	@ 0x38
 8011abc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011abe:	f8a3 20b8 	strh.w	r2, [r3, #184]	@ 0xb8

            if( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN )
 8011ac2:	68fb      	ldr	r3, [r7, #12]
 8011ac4:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011ac8:	2b02      	cmp	r3, #2
 8011aca:	d12e      	bne.n	8011b2a <prvHandleSynReceived+0x1a2>

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
                                                      &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011acc:	68f8      	ldr	r0, [r7, #12]
 8011ace:	f7f7 fc85 	bl	80093dc <uxIPHeaderSizeSocket>
 8011ad2:	4603      	mov	r3, r0
 8011ad4:	330e      	adds	r3, #14
                ProtocolHeaders_t * pxLastHeaders = ( ( ProtocolHeaders_t * )
 8011ad6:	33a0      	adds	r3, #160	@ 0xa0
 8011ad8:	68fa      	ldr	r2, [r7, #12]
 8011ada:	4413      	add	r3, r2
 8011adc:	330a      	adds	r3, #10
 8011ade:	63bb      	str	r3, [r7, #56]	@ 0x38

                /* Clear the SYN flag in lastPacket. */
                pxLastHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8011ae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011ae2:	2210      	movs	r2, #16
 8011ae4:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_ACK;
 8011ae6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011ae8:	2210      	movs	r2, #16
 8011aea:	735a      	strb	r2, [r3, #13]

                /* This socket was the one connecting actively so now perform the
                 * synchronisation. */
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8011aec:	68fb      	ldr	r3, [r7, #12]
 8011aee:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8011af2:	68fb      	ldr	r3, [r7, #12]
 8011af4:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
                                ulSequenceNumber, pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber, ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8011af8:	68fb      	ldr	r3, [r7, #12]
 8011afa:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
                vTCPWindowInit( &pxSocket->u.xTCP.xTCPWindow,
 8011afe:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8011b00:	f003 f8ec 	bl	8014cdc <vTCPWindowInit>
                pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 8011b04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b06:	1c5a      	adds	r2, r3, #1
 8011b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b0a:	619a      	str	r2, [r3, #24]
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 8011b0c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011b0e:	1c5a      	adds	r2, r3, #1
 8011b10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b12:	611a      	str	r2, [r3, #16]
                pxTCPWindow->tx.ulCurrentSequenceNumber++; /* because we send a TCP_SYN [ | TCP_ACK ]; */
 8011b14:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b16:	6a1b      	ldr	r3, [r3, #32]
 8011b18:	1c5a      	adds	r2, r3, #1
 8011b1a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b1c:	621a      	str	r2, [r3, #32]
                pxTCPWindow->ulNextTxSequenceNumber++;
 8011b1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011b22:	1c5a      	adds	r2, r3, #1
 8011b24:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b26:	635a      	str	r2, [r3, #52]	@ 0x34
 8011b28:	e005      	b.n	8011b36 <prvHandleSynReceived+0x1ae>
            }
            else if( ulReceiveLength == 0U )
 8011b2a:	687b      	ldr	r3, [r7, #4]
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d102      	bne.n	8011b36 <prvHandleSynReceived+0x1ae>
            {
                pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber;
 8011b30:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b32:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8011b34:	611a      	str	r2, [r3, #16]
                /* Nothing. */
            }

            /* The SYN+ACK has been confirmed, increase the next sequence number by
             * 1. */
            pxTCPWindow->ulOurSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 8011b36:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b38:	69db      	ldr	r3, [r3, #28]
 8011b3a:	1c5a      	adds	r2, r3, #1
 8011b3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8011b3e:	62da      	str	r2, [r3, #44]	@ 0x2c

            #if ( ipconfigUSE_TCP_WIN == 1 )
            {
                char pcBuffer[ 40 ]; /* Space to print an IP-address. */
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8011b40:	68fb      	ldr	r3, [r7, #12]
 8011b42:	7a1b      	ldrb	r3, [r3, #8]
 8011b44:	f003 0301 	and.w	r3, r3, #1
 8011b48:	b2db      	uxtb	r3, r3
 8011b4a:	2b00      	cmp	r3, #0
 8011b4c:	d001      	beq.n	8011b52 <prvHandleSynReceived+0x1ca>
 8011b4e:	200a      	movs	r0, #10
 8011b50:	e000      	b.n	8011b54 <prvHandleSynReceived+0x1cc>
 8011b52:	2002      	movs	r0, #2
                                             ( void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes,
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	f103 0154 	add.w	r1, r3, #84	@ 0x54
                ( void ) FreeRTOS_inet_ntop( ( pxSocket->bits.bIsIPv6 != 0U ) ? FREERTOS_AF_INET6 : FREERTOS_AF_INET,
 8011b5a:	f107 0210 	add.w	r2, r7, #16
 8011b5e:	2328      	movs	r3, #40	@ 0x28
 8011b60:	f7fc fec0 	bl	800e8e4 <FreeRTOS_inet_ntop>
                                             pcBuffer,
                                             sizeof( pcBuffer ) );
                FreeRTOS_debug_printf( ( "TCP: %s %u => %s port %u set ESTAB (scaling %u)\n",
 8011b64:	68fb      	ldr	r3, [r7, #12]
 8011b66:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011b6a:	2b02      	cmp	r3, #2
 8011b6c:	d101      	bne.n	8011b72 <prvHandleSynReceived+0x1ea>
 8011b6e:	492a      	ldr	r1, [pc, #168]	@ (8011c18 <prvHandleSynReceived+0x290>)
 8011b70:	e000      	b.n	8011b74 <prvHandleSynReceived+0x1ec>
 8011b72:	492a      	ldr	r1, [pc, #168]	@ (8011c1c <prvHandleSynReceived+0x294>)
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011b78:	461c      	mov	r4, r3
 8011b7a:	68fb      	ldr	r3, [r7, #12]
 8011b7c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011b80:	461a      	mov	r2, r3
 8011b82:	68fb      	ldr	r3, [r7, #12]
 8011b84:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011b88:	f3c3 1300 	ubfx	r3, r3, #4, #1
 8011b8c:	b2db      	uxtb	r3, r3
 8011b8e:	4618      	mov	r0, r3
 8011b90:	f107 0310 	add.w	r3, r7, #16
 8011b94:	9001      	str	r0, [sp, #4]
 8011b96:	9200      	str	r2, [sp, #0]
 8011b98:	4622      	mov	r2, r4
 8011b9a:	4821      	ldr	r0, [pc, #132]	@ (8011c20 <prvHandleSynReceived+0x298>)
 8011b9c:	f00f f870 	bl	8020c80 <lUDPLoggingPrintf>
                                         pxSocket->u.xTCP.usRemotePort,
                                         ( unsigned ) pxSocket->u.xTCP.bits.bWinScaling ) );
            }
            #endif /* ipconfigUSE_TCP_WIN */

            if( ( pxSocket->u.xTCP.eTCPState == eCONNECT_SYN ) || ( ulReceiveLength != 0U ) )
 8011ba0:	68fb      	ldr	r3, [r7, #12]
 8011ba2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011ba6:	2b02      	cmp	r3, #2
 8011ba8:	d002      	beq.n	8011bb0 <prvHandleSynReceived+0x228>
 8011baa:	687b      	ldr	r3, [r7, #4]
 8011bac:	2b00      	cmp	r3, #0
 8011bae:	d014      	beq.n	8011bda <prvHandleSynReceived+0x252>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8011bb0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bb2:	2210      	movs	r2, #16
 8011bb4:	735a      	strb	r2, [r3, #13]

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ( size_t ) ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011bb6:	68f8      	ldr	r0, [r7, #12]
 8011bb8:	f7f7 fc10 	bl	80093dc <uxIPHeaderSizeSocket>
 8011bbc:	4602      	mov	r2, r0
 8011bbe:	683b      	ldr	r3, [r7, #0]
 8011bc0:	4413      	add	r3, r2
 8011bc2:	3314      	adds	r3, #20
 8011bc4:	643b      	str	r3, [r7, #64]	@ 0x40
                xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011bc6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011bc8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8011bca:	683b      	ldr	r3, [r7, #0]
 8011bcc:	b2db      	uxtb	r3, r3
 8011bce:	3314      	adds	r3, #20
 8011bd0:	b2db      	uxtb	r3, r3
 8011bd2:	009b      	lsls	r3, r3, #2
 8011bd4:	b2da      	uxtb	r2, r3
 8011bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bd8:	731a      	strb	r2, [r3, #12]
            }

            #if ( ipconfigUSE_TCP_WIN != 0 )
            {
                if( pxSocket->u.xTCP.bits.bWinScaling == pdFALSE_UNSIGNED )
 8011bda:	68fb      	ldr	r3, [r7, #12]
 8011bdc:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8011be0:	f003 0310 	and.w	r3, r3, #16
 8011be4:	b2db      	uxtb	r3, r3
 8011be6:	2b00      	cmp	r3, #0
 8011be8:	d107      	bne.n	8011bfa <prvHandleSynReceived+0x272>
                {
                    /* The other party did not send a scaling factor.
                     * A shifting factor in this side must be canceled. */
                    pxSocket->u.xTCP.ucMyWinScaleFactor = 0;
 8011bea:	68fb      	ldr	r3, [r7, #12]
 8011bec:	2200      	movs	r2, #0
 8011bee:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105
                    pxSocket->u.xTCP.ucPeerWinScaleFactor = 0;
 8011bf2:	68fb      	ldr	r3, [r7, #12]
 8011bf4:	2200      	movs	r2, #0
 8011bf6:	f883 2106 	strb.w	r2, [r3, #262]	@ 0x106
            }
            #endif /* ipconfigUSE_TCP_WIN */

            /* This was the third step of connecting: SYN, SYN+ACK, ACK so now the
             * connection is established. */
            vTCPStateChange( pxSocket, eESTABLISHED );
 8011bfa:	2105      	movs	r1, #5
 8011bfc:	68f8      	ldr	r0, [r7, #12]
 8011bfe:	f7fe fc7f 	bl	8010500 <vTCPStateChange>
        }

        return xSendLength;
 8011c02:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
    }
 8011c04:	4618      	mov	r0, r3
 8011c06:	3764      	adds	r7, #100	@ 0x64
 8011c08:	46bd      	mov	sp, r7
 8011c0a:	bd90      	pop	{r4, r7, pc}
 8011c0c:	08024f44 	.word	0x08024f44
 8011c10:	08024f54 	.word	0x08024f54
 8011c14:	08024f64 	.word	0x08024f64
 8011c18:	08024f88 	.word	0x08024f88
 8011c1c:	08024f90 	.word	0x08024f90
 8011c20:	08024f98 	.word	0x08024f98

08011c24 <prvHandleEstablished>:
 */
    static BaseType_t prvHandleEstablished( FreeRTOS_Socket_t * pxSocket,
                                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                                            uint32_t ulReceiveLength,
                                            UBaseType_t uxOptionsLength )
    {
 8011c24:	b590      	push	{r4, r7, lr}
 8011c26:	b097      	sub	sp, #92	@ 0x5c
 8011c28:	af02      	add	r7, sp, #8
 8011c2a:	60f8      	str	r0, [r7, #12]
 8011c2c:	60b9      	str	r1, [r7, #8]
 8011c2e:	607a      	str	r2, [r7, #4]
 8011c30:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8011c32:	68bb      	ldr	r3, [r7, #8]
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011c38:	68f8      	ldr	r0, [r7, #12]
 8011c3a:	f7f7 fbcf 	bl	80093dc <uxIPHeaderSizeSocket>
 8011c3e:	4603      	mov	r3, r0
 8011c40:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011c42:	4423      	add	r3, r4
 8011c44:	647b      	str	r3, [r7, #68]	@ 0x44
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 8011c46:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8011c48:	643b      	str	r3, [r7, #64]	@ 0x40
        TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8011c4a:	68fb      	ldr	r3, [r7, #12]
 8011c4c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011c50:	63fb      	str	r3, [r7, #60]	@ 0x3c
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011c52:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c54:	7b5b      	ldrb	r3, [r3, #13]
 8011c56:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber ), ulCount, ulIntermediateResult = 0;
 8011c5a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c5c:	685b      	ldr	r3, [r3, #4]
 8011c5e:	061a      	lsls	r2, r3, #24
 8011c60:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c62:	685b      	ldr	r3, [r3, #4]
 8011c64:	021b      	lsls	r3, r3, #8
 8011c66:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011c6a:	431a      	orrs	r2, r3
 8011c6c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c6e:	685b      	ldr	r3, [r3, #4]
 8011c70:	0a1b      	lsrs	r3, r3, #8
 8011c72:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011c76:	431a      	orrs	r2, r3
 8011c78:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c7a:	685b      	ldr	r3, [r3, #4]
 8011c7c:	0e1b      	lsrs	r3, r3, #24
 8011c7e:	4313      	orrs	r3, r2
 8011c80:	637b      	str	r3, [r7, #52]	@ 0x34
 8011c82:	2300      	movs	r3, #0
 8011c84:	633b      	str	r3, [r7, #48]	@ 0x30
        BaseType_t xSendLength = 0, xMayClose = pdFALSE, bRxComplete, bTxDone;
 8011c86:	2300      	movs	r3, #0
 8011c88:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011c8a:	2300      	movs	r3, #0
 8011c8c:	64bb      	str	r3, [r7, #72]	@ 0x48
        int32_t lDistance, lSendResult;
        uint16_t usWindow;
        UBaseType_t uxIntermediateResult = 0;
 8011c8e:	2300      	movs	r3, #0
 8011c90:	62fb      	str	r3, [r7, #44]	@ 0x2c

        /* Remember the window size the peer is advertising. */
        usWindow = FreeRTOS_ntohs( pxTCPHeader->usWindow );
 8011c92:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c94:	89db      	ldrh	r3, [r3, #14]
 8011c96:	b29b      	uxth	r3, r3
 8011c98:	021b      	lsls	r3, r3, #8
 8011c9a:	b21a      	sxth	r2, r3
 8011c9c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011c9e:	89db      	ldrh	r3, [r3, #14]
 8011ca0:	b29b      	uxth	r3, r3
 8011ca2:	0a1b      	lsrs	r3, r3, #8
 8011ca4:	b29b      	uxth	r3, r3
 8011ca6:	b21b      	sxth	r3, r3
 8011ca8:	4313      	orrs	r3, r2
 8011caa:	b21b      	sxth	r3, r3
 8011cac:	857b      	strh	r3, [r7, #42]	@ 0x2a
        pxSocket->u.xTCP.ulWindowSize = ( uint32_t ) usWindow;
 8011cae:	8d7a      	ldrh	r2, [r7, #42]	@ 0x2a
 8011cb0:	68fb      	ldr	r3, [r7, #12]
 8011cb2:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ulWindowSize =
                ( pxSocket->u.xTCP.ulWindowSize << pxSocket->u.xTCP.ucPeerWinScaleFactor );
 8011cb6:	68fb      	ldr	r3, [r7, #12]
 8011cb8:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 8011cbc:	68fa      	ldr	r2, [r7, #12]
 8011cbe:	f892 2106 	ldrb.w	r2, [r2, #262]	@ 0x106
 8011cc2:	fa03 f202 	lsl.w	r2, r3, r2
            pxSocket->u.xTCP.ulWindowSize =
 8011cc6:	68fb      	ldr	r3, [r7, #12]
 8011cc8:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_ACK ) == 0U )
 8011ccc:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8011cd0:	f003 0310 	and.w	r3, r3, #16
 8011cd4:	2b00      	cmp	r3, #0
 8011cd6:	f000 8106 	beq.w	8011ee6 <prvHandleEstablished+0x2c2>
             * be dropped
             */
        }
        else
        {
            ulCount = ulTCPWindowTxAck( pxTCPWindow, FreeRTOS_ntohl( pxTCPHeader->ulAckNr ) );
 8011cda:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011cdc:	689b      	ldr	r3, [r3, #8]
 8011cde:	061a      	lsls	r2, r3, #24
 8011ce0:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011ce2:	689b      	ldr	r3, [r3, #8]
 8011ce4:	021b      	lsls	r3, r3, #8
 8011ce6:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011cea:	431a      	orrs	r2, r3
 8011cec:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011cee:	689b      	ldr	r3, [r3, #8]
 8011cf0:	0a1b      	lsrs	r3, r3, #8
 8011cf2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011cf6:	431a      	orrs	r2, r3
 8011cf8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011cfa:	689b      	ldr	r3, [r3, #8]
 8011cfc:	0e1b      	lsrs	r3, r3, #24
 8011cfe:	4313      	orrs	r3, r2
 8011d00:	4619      	mov	r1, r3
 8011d02:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011d04:	f003 feee 	bl	8015ae4 <ulTCPWindowTxAck>
 8011d08:	6278      	str	r0, [r7, #36]	@ 0x24

            /* ulTCPWindowTxAck() returns the number of bytes which have been acked,
             * starting at 'tx.ulCurrentSequenceNumber'.  Advance the tail pointer in
             * txStream. */
            if( ( pxSocket->u.xTCP.txStream != NULL ) && ( ulCount > 0U ) )
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011d10:	2b00      	cmp	r3, #0
 8011d12:	d02c      	beq.n	8011d6e <prvHandleEstablished+0x14a>
 8011d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d16:	2b00      	cmp	r3, #0
 8011d18:	d029      	beq.n	8011d6e <prvHandleEstablished+0x14a>
            {
                /* Just advancing the tail index, 'ulCount' bytes have been
                 * confirmed, and because there is new space in the txStream, the
                 * user/owner should be woken up. */
                /* _HT_ : only in case the socket's waiting? */
                if( uxStreamBufferGet( pxSocket->u.xTCP.txStream, 0U, NULL, ( size_t ) ulCount, pdFALSE ) != 0U )
 8011d1a:	68fb      	ldr	r3, [r7, #12]
 8011d1c:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 8011d20:	2300      	movs	r3, #0
 8011d22:	9300      	str	r3, [sp, #0]
 8011d24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011d26:	2200      	movs	r2, #0
 8011d28:	2100      	movs	r1, #0
 8011d2a:	f7fe fa42 	bl	80101b2 <uxStreamBufferGet>
 8011d2e:	4603      	mov	r3, r0
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	d01c      	beq.n	8011d6e <prvHandleEstablished+0x14a>
                {
                    pxSocket->xEventBits |= ( EventBits_t ) eSOCKET_SEND;
 8011d34:	68fb      	ldr	r3, [r7, #12]
 8011d36:	681b      	ldr	r3, [r3, #0]
 8011d38:	f043 0202 	orr.w	r2, r3, #2
 8011d3c:	68fb      	ldr	r3, [r7, #12]
 8011d3e:	601a      	str	r2, [r3, #0]

                    #if ipconfigSUPPORT_SELECT_FUNCTION == 1
                    {
                        if( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_WRITE ) ) != 0U )
 8011d40:	68fb      	ldr	r3, [r7, #12]
 8011d42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8011d44:	f003 0302 	and.w	r3, r3, #2
 8011d48:	2b00      	cmp	r3, #0
 8011d4a:	d005      	beq.n	8011d58 <prvHandleEstablished+0x134>
                        {
                            pxSocket->xEventBits |= ( ( EventBits_t ) eSELECT_WRITE ) << SOCKET_EVENT_BIT_COUNT;
 8011d4c:	68fb      	ldr	r3, [r7, #12]
 8011d4e:	681b      	ldr	r3, [r3, #0]
 8011d50:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8011d54:	68fb      	ldr	r3, [r7, #12]
 8011d56:	601a      	str	r2, [r3, #0]

                    /* In case the socket owner has installed an OnSent handler,
                     * call it now. */
                    #if ( ipconfigUSE_CALLBACKS == 1 )
                    {
                        if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xTCP.pxHandleSent ) )
 8011d58:	68fb      	ldr	r3, [r7, #12]
 8011d5a:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8011d5e:	2b00      	cmp	r3, #0
 8011d60:	d005      	beq.n	8011d6e <prvHandleEstablished+0x14a>
                        {
                            pxSocket->u.xTCP.pxHandleSent( ( Socket_t ) pxSocket, ulCount );
 8011d62:	68fb      	ldr	r3, [r7, #12]
 8011d64:	f8d3 310c 	ldr.w	r3, [r3, #268]	@ 0x10c
 8011d68:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8011d6a:	68f8      	ldr	r0, [r7, #12]
 8011d6c:	4798      	blx	r3
                }
            }

            /* If this socket has a stream for transmission, add the data to the
             * outgoing segment(s). */
            if( pxSocket->u.xTCP.txStream != NULL )
 8011d6e:	68fb      	ldr	r3, [r7, #12]
 8011d70:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8011d74:	2b00      	cmp	r3, #0
 8011d76:	d002      	beq.n	8011d7e <prvHandleEstablished+0x15a>
            {
                prvTCPAddTxData( pxSocket );
 8011d78:	68f8      	ldr	r0, [r7, #12]
 8011d7a:	f001 fb13 	bl	80133a4 <prvTCPAddTxData>
            }

            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8011d7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011d80:	6a1a      	ldr	r2, [r3, #32]
 8011d82:	68fb      	ldr	r3, [r7, #12]
 8011d84:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            if( ( pxSocket->u.xTCP.bits.bFinAccepted != pdFALSE_UNSIGNED ) || ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U ) )
 8011d88:	68fb      	ldr	r3, [r7, #12]
 8011d8a:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011d8e:	f003 0320 	and.w	r3, r3, #32
 8011d92:	b2db      	uxtb	r3, r3
 8011d94:	2b00      	cmp	r3, #0
 8011d96:	d105      	bne.n	8011da4 <prvHandleEstablished+0x180>
 8011d98:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8011d9c:	f003 0301 	and.w	r3, r3, #1
 8011da0:	2b00      	cmp	r3, #0
 8011da2:	d06b      	beq.n	8011e7c <prvHandleEstablished+0x258>
            {
                /* Peer is requesting to stop, see if we're really finished. */
                xMayClose = pdTRUE;
 8011da4:	2301      	movs	r3, #1
 8011da6:	64bb      	str	r3, [r7, #72]	@ 0x48

                /* Checks are only necessary if we haven't sent a FIN yet. */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8011da8:	68fb      	ldr	r3, [r7, #12]
 8011daa:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011dae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011db2:	b2db      	uxtb	r3, r3
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d13a      	bne.n	8011e2e <prvHandleEstablished+0x20a>
                {
                    /* xTCPWindowTxDone returns true when all Tx queues are empty. */
                    bRxComplete = xTCPWindowRxEmpty( pxTCPWindow );
 8011db8:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011dba:	f002 fe87 	bl	8014acc <xTCPWindowRxEmpty>
 8011dbe:	6238      	str	r0, [r7, #32]
                    bTxDone = xTCPWindowTxDone( pxTCPWindow );
 8011dc0:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011dc2:	f003 fafd 	bl	80153c0 <xTCPWindowTxDone>
 8011dc6:	61f8      	str	r0, [r7, #28]

                    if( ( bRxComplete == 0 ) || ( bTxDone == 0 ) )
 8011dc8:	6a3b      	ldr	r3, [r7, #32]
 8011dca:	2b00      	cmp	r3, #0
 8011dcc:	d002      	beq.n	8011dd4 <prvHandleEstablished+0x1b0>
 8011dce:	69fb      	ldr	r3, [r7, #28]
 8011dd0:	2b00      	cmp	r3, #0
 8011dd2:	d10f      	bne.n	8011df4 <prvHandleEstablished+0x1d0>
                    {
                        /* Refusing FIN: Rx incomplete 1 optlen 4 tx done 1. */
                        FreeRTOS_debug_printf( ( "Refusing FIN[%u,%u]: RxCompl %d tx done %d\n",
 8011dd4:	68fb      	ldr	r3, [r7, #12]
 8011dd6:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8011dd8:	4619      	mov	r1, r3
 8011dda:	68fb      	ldr	r3, [r7, #12]
 8011ddc:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8011de0:	461a      	mov	r2, r3
 8011de2:	69fb      	ldr	r3, [r7, #28]
 8011de4:	9300      	str	r3, [sp, #0]
 8011de6:	6a3b      	ldr	r3, [r7, #32]
 8011de8:	4841      	ldr	r0, [pc, #260]	@ (8011ef0 <prvHandleEstablished+0x2cc>)
 8011dea:	f00e ff49 	bl	8020c80 <lUDPLoggingPrintf>
                                                 pxSocket->usLocalPort,
                                                 pxSocket->u.xTCP.usRemotePort,
                                                 ( int ) bRxComplete,
                                                 ( int ) bTxDone ) );
                        xMayClose = pdFALSE;
 8011dee:	2300      	movs	r3, #0
 8011df0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011df2:	e01c      	b.n	8011e2e <prvHandleEstablished+0x20a>
                    }
                    else
                    {
                        ulIntermediateResult = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulCurrentSequenceNumber;
 8011df4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	441a      	add	r2, r3
 8011dfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011dfc:	691b      	ldr	r3, [r3, #16]
 8011dfe:	1ad3      	subs	r3, r2, r3
 8011e00:	633b      	str	r3, [r7, #48]	@ 0x30
                        lDistance = ( int32_t ) ulIntermediateResult;
 8011e02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e04:	61bb      	str	r3, [r7, #24]

                        if( lDistance > 1 )
 8011e06:	69bb      	ldr	r3, [r7, #24]
 8011e08:	2b01      	cmp	r3, #1
 8011e0a:	dd10      	ble.n	8011e2e <prvHandleEstablished+0x20a>
                        {
                            FreeRTOS_debug_printf( ( "Refusing FIN: Rx not complete %d (cur %u high %u)\n",
 8011e0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e0e:	691a      	ldr	r2, [r3, #16]
 8011e10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e12:	68db      	ldr	r3, [r3, #12]
 8011e14:	1ad1      	subs	r1, r2, r3
 8011e16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e18:	699a      	ldr	r2, [r3, #24]
 8011e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e1c:	68db      	ldr	r3, [r3, #12]
 8011e1e:	1ad3      	subs	r3, r2, r3
 8011e20:	460a      	mov	r2, r1
 8011e22:	69b9      	ldr	r1, [r7, #24]
 8011e24:	4833      	ldr	r0, [pc, #204]	@ (8011ef4 <prvHandleEstablished+0x2d0>)
 8011e26:	f00e ff2b 	bl	8020c80 <lUDPLoggingPrintf>
                                                     ( int ) lDistance,
                                                     ( unsigned ) ( pxTCPWindow->rx.ulCurrentSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ),
                                                     ( unsigned ) ( pxTCPWindow->rx.ulHighestSequenceNumber - pxTCPWindow->rx.ulFirstSequenceNumber ) ) );

                            xMayClose = pdFALSE;
 8011e2a:	2300      	movs	r3, #0
 8011e2c:	64bb      	str	r3, [r7, #72]	@ 0x48
                        }
                    }
                }

                if( xTCPWindowLoggingLevel > 0 )
 8011e2e:	4b32      	ldr	r3, [pc, #200]	@ (8011ef8 <prvHandleEstablished+0x2d4>)
 8011e30:	681b      	ldr	r3, [r3, #0]
 8011e32:	2b00      	cmp	r3, #0
 8011e34:	dd11      	ble.n	8011e5a <prvHandleEstablished+0x236>
                {
                    FreeRTOS_debug_printf( ( "TCP: FIN received, mayClose = %d (Rx %u Len %d, Tx %u)\n",
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8011e3c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8011e3e:	1ad1      	subs	r1, r2, r3
 8011e40:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011e42:	6a1a      	ldr	r2, [r3, #32]
 8011e44:	68fb      	ldr	r3, [r7, #12]
 8011e46:	f8d3 313c 	ldr.w	r3, [r3, #316]	@ 0x13c
 8011e4a:	1ad3      	subs	r3, r2, r3
 8011e4c:	9300      	str	r3, [sp, #0]
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	460a      	mov	r2, r1
 8011e52:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8011e54:	4829      	ldr	r0, [pc, #164]	@ (8011efc <prvHandleEstablished+0x2d8>)
 8011e56:	f00e ff13 	bl	8020c80 <lUDPLoggingPrintf>
                                             ( unsigned ) ( ulSequenceNumber - pxSocket->u.xTCP.xTCPWindow.rx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulReceiveLength,
                                             ( unsigned ) ( pxTCPWindow->tx.ulCurrentSequenceNumber - pxSocket->u.xTCP.xTCPWindow.tx.ulFirstSequenceNumber ) ) );
                }

                if( xMayClose != pdFALSE )
 8011e5a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d00d      	beq.n	8011e7c <prvHandleEstablished+0x258>
                {
                    pxSocket->u.xTCP.bits.bFinAccepted = pdTRUE_UNSIGNED;
 8011e60:	68fa      	ldr	r2, [r7, #12]
 8011e62:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011e66:	f043 0320 	orr.w	r3, r3, #32
 8011e6a:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8011e6e:	68bb      	ldr	r3, [r7, #8]
 8011e70:	681b      	ldr	r3, [r3, #0]
 8011e72:	4619      	mov	r1, r3
 8011e74:	68f8      	ldr	r0, [r7, #12]
 8011e76:	f7ff fca9 	bl	80117cc <prvTCPHandleFin>
 8011e7a:	64f8      	str	r0, [r7, #76]	@ 0x4c
                }
            }

            if( xMayClose == pdFALSE )
 8011e7c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011e7e:	2b00      	cmp	r3, #0
 8011e80:	d131      	bne.n	8011ee6 <prvHandleEstablished+0x2c2>
            {
                pxTCPHeader->ucTCPFlags = tcpTCP_FLAG_ACK;
 8011e82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011e84:	2210      	movs	r2, #16
 8011e86:	735a      	strb	r2, [r3, #13]

                if( ulReceiveLength != 0U )
 8011e88:	687b      	ldr	r3, [r7, #4]
 8011e8a:	2b00      	cmp	r3, #0
 8011e8c:	d01d      	beq.n	8011eca <prvHandleEstablished+0x2a6>
                {
                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8011e8e:	68f8      	ldr	r0, [r7, #12]
 8011e90:	f7f7 faa4 	bl	80093dc <uxIPHeaderSizeSocket>
 8011e94:	4602      	mov	r2, r0
 8011e96:	683b      	ldr	r3, [r7, #0]
 8011e98:	4413      	add	r3, r2
 8011e9a:	3314      	adds	r3, #20
 8011e9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 8011e9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ea0:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    /* TCP-offset equals '( ( length / 4 ) << 4 )', resulting in a shift-left 2 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 8011ea2:	683b      	ldr	r3, [r7, #0]
 8011ea4:	b2db      	uxtb	r3, r3
 8011ea6:	3314      	adds	r3, #20
 8011ea8:	b2db      	uxtb	r3, r3
 8011eaa:	009b      	lsls	r3, r3, #2
 8011eac:	b2da      	uxtb	r2, r3
 8011eae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8011eb0:	731a      	strb	r2, [r3, #12]

                    if( pxSocket->u.xTCP.bits.bFinSent != pdFALSE_UNSIGNED )
 8011eb2:	68fb      	ldr	r3, [r7, #12]
 8011eb4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8011eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8011ebc:	b2db      	uxtb	r3, r3
 8011ebe:	2b00      	cmp	r3, #0
 8011ec0:	d003      	beq.n	8011eca <prvHandleEstablished+0x2a6>
                    {
                        pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFINSequenceNumber;
 8011ec2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ec4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8011ec6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8011ec8:	621a      	str	r2, [r3, #32]

                /* _HT_ patch: since the MTU has be fixed at 1500 in stead of 1526, TCP
                 * can not send-out both TCP options and also a full packet. Sending
                 * options (SACK) is always more urgent than sending data, which can be
                 * sent later. */
                if( uxOptionsLength == 0U )
 8011eca:	683b      	ldr	r3, [r7, #0]
 8011ecc:	2b00      	cmp	r3, #0
 8011ece:	d10a      	bne.n	8011ee6 <prvHandleEstablished+0x2c2>
                {
                    /* prvTCPPrepareSend might allocate a bigger network buffer, if
                     * necessary. */
                    lSendResult = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8011ed0:	683a      	ldr	r2, [r7, #0]
 8011ed2:	68b9      	ldr	r1, [r7, #8]
 8011ed4:	68f8      	ldr	r0, [r7, #12]
 8011ed6:	f001 f8a1 	bl	801301c <prvTCPPrepareSend>
 8011eda:	6178      	str	r0, [r7, #20]

                    if( lSendResult > 0 )
 8011edc:	697b      	ldr	r3, [r7, #20]
 8011ede:	2b00      	cmp	r3, #0
 8011ee0:	dd01      	ble.n	8011ee6 <prvHandleEstablished+0x2c2>
                    {
                        xSendLength = ( BaseType_t ) lSendResult;
 8011ee2:	697b      	ldr	r3, [r7, #20]
 8011ee4:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    }
                }
            }
        }

        return xSendLength;
 8011ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8011ee8:	4618      	mov	r0, r3
 8011eea:	3754      	adds	r7, #84	@ 0x54
 8011eec:	46bd      	mov	sp, r7
 8011eee:	bd90      	pop	{r4, r7, pc}
 8011ef0:	08024fcc 	.word	0x08024fcc
 8011ef4:	08024ff8 	.word	0x08024ff8
 8011ef8:	20001348 	.word	0x20001348
 8011efc:	0802502c 	.word	0x0802502c

08011f00 <prvTCPHandleState>:
 * As these functions are declared static, and they're called from one location
 * only, most compilers will inline them, thus avoiding a call and return.
 */
    BaseType_t prvTCPHandleState( FreeRTOS_Socket_t * pxSocket,
                                  NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8011f00:	b590      	push	{r4, r7, lr}
 8011f02:	b08f      	sub	sp, #60	@ 0x3c
 8011f04:	af00      	add	r7, sp, #0
 8011f06:	6078      	str	r0, [r7, #4]
 8011f08:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 8011f0a:	683b      	ldr	r3, [r7, #0]
 8011f0c:	681b      	ldr	r3, [r3, #0]
 8011f0e:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8011f10:	683b      	ldr	r3, [r7, #0]
 8011f12:	681b      	ldr	r3, [r3, #0]
 8011f14:	4618      	mov	r0, r3
 8011f16:	f7f7 fa47 	bl	80093a8 <uxIPHeaderSizePacket>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8011f1e:	4423      	add	r3, r4
 8011f20:	633b      	str	r3, [r7, #48]	@ 0x30
        TCPHeader_t * pxTCPHeader = &( pxProtocolHeaders->xTCPHeader );
 8011f22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f24:	62fb      	str	r3, [r7, #44]	@ 0x2c
        BaseType_t xSendLength = 0;
 8011f26:	2300      	movs	r3, #0
 8011f28:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulReceiveLength; /* Number of bytes contained in the TCP message. */
        uint8_t * pucRecvData;
        uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPHeader->ulSequenceNumber );
 8011f2a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f2c:	685b      	ldr	r3, [r3, #4]
 8011f2e:	061a      	lsls	r2, r3, #24
 8011f30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f32:	685b      	ldr	r3, [r3, #4]
 8011f34:	021b      	lsls	r3, r3, #8
 8011f36:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8011f3a:	431a      	orrs	r2, r3
 8011f3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f3e:	685b      	ldr	r3, [r3, #4]
 8011f40:	0a1b      	lsrs	r3, r3, #8
 8011f42:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8011f46:	431a      	orrs	r2, r3
 8011f48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f4a:	685b      	ldr	r3, [r3, #4]
 8011f4c:	0e1b      	lsrs	r3, r3, #24
 8011f4e:	4313      	orrs	r3, r2
 8011f50:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* uxOptionsLength: the size of the options to be sent (always a multiple of
         * 4 bytes)
         * 1. in the SYN phase, we shall communicate the MSS
         * 2. in case of a SACK, Selective ACK, ack a segment which comes in
         * out-of-order. */
        UBaseType_t uxOptionsLength = 0U;
 8011f52:	2300      	movs	r3, #0
 8011f54:	627b      	str	r3, [r7, #36]	@ 0x24
        uint8_t ucTCPFlags = pxTCPHeader->ucTCPFlags;
 8011f56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011f58:	7b5b      	ldrb	r3, [r3, #13]
 8011f5a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8011f5e:	687b      	ldr	r3, [r7, #4]
 8011f60:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8011f64:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxIntermediateResult = 0;
 8011f66:	2300      	movs	r3, #0
 8011f68:	61bb      	str	r3, [r7, #24]
        uint32_t ulSum;

        /* First get the length and the position of the received data, if any.
         * pucRecvData will point to the first byte of the TCP payload. */
        ulReceiveLength = ( uint32_t ) prvCheckRxData( *ppxNetworkBuffer, &pucRecvData );
 8011f6a:	683b      	ldr	r3, [r7, #0]
 8011f6c:	681b      	ldr	r3, [r3, #0]
 8011f6e:	f107 0208 	add.w	r2, r7, #8
 8011f72:	4611      	mov	r1, r2
 8011f74:	4618      	mov	r0, r3
 8011f76:	f7ff fa64 	bl	8011442 <prvCheckRxData>
 8011f7a:	4603      	mov	r3, r0
 8011f7c:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.eTCPState >= eESTABLISHED )
 8011f7e:	687b      	ldr	r3, [r7, #4]
 8011f80:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011f84:	2b04      	cmp	r3, #4
 8011f86:	d90c      	bls.n	8011fa2 <prvTCPHandleState+0xa2>
        {
            if( pxTCPWindow->rx.ulCurrentSequenceNumber == ( ulSequenceNumber + 1U ) )
 8011f88:	69fb      	ldr	r3, [r7, #28]
 8011f8a:	691a      	ldr	r2, [r3, #16]
 8011f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f8e:	3301      	adds	r3, #1
 8011f90:	429a      	cmp	r2, r3
 8011f92:	d106      	bne.n	8011fa2 <prvTCPHandleState+0xa2>
            {
                /* This is most probably a keep-alive message from peer.  Setting
                 * 'bWinChange' doesn't cause a window-size-change, the flag is used
                 * here to force sending an immediate ACK. */
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8011f94:	687a      	ldr	r2, [r7, #4]
 8011f96:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8011f9a:	f043 0301 	orr.w	r3, r3, #1
 8011f9e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
            }
        }

        /* Keep track of the highest sequence number that might be expected within
         * this connection. */
        ulSum = ulSequenceNumber + ulReceiveLength - pxTCPWindow->rx.ulHighestSequenceNumber;
 8011fa2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fa4:	697b      	ldr	r3, [r7, #20]
 8011fa6:	441a      	add	r2, r3
 8011fa8:	69fb      	ldr	r3, [r7, #28]
 8011faa:	699b      	ldr	r3, [r3, #24]
 8011fac:	1ad3      	subs	r3, r2, r3
 8011fae:	613b      	str	r3, [r7, #16]

        if( ( ( int32_t ) ulSum ) > 0 )
 8011fb0:	693b      	ldr	r3, [r7, #16]
 8011fb2:	2b00      	cmp	r3, #0
 8011fb4:	dd04      	ble.n	8011fc0 <prvTCPHandleState+0xc0>
        {
            pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + ulReceiveLength;
 8011fb6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8011fb8:	697b      	ldr	r3, [r7, #20]
 8011fba:	441a      	add	r2, r3
 8011fbc:	69fb      	ldr	r3, [r7, #28]
 8011fbe:	619a      	str	r2, [r3, #24]
        }

        /* Storing data may result in a fatal error if malloc() fails. */
        if( prvStoreRxData( pxSocket, pucRecvData, *ppxNetworkBuffer, ulReceiveLength ) < 0 )
 8011fc0:	68b9      	ldr	r1, [r7, #8]
 8011fc2:	683b      	ldr	r3, [r7, #0]
 8011fc4:	681a      	ldr	r2, [r3, #0]
 8011fc6:	697b      	ldr	r3, [r7, #20]
 8011fc8:	6878      	ldr	r0, [r7, #4]
 8011fca:	f7ff fae3 	bl	8011594 <prvStoreRxData>
 8011fce:	4603      	mov	r3, r0
 8011fd0:	2b00      	cmp	r3, #0
 8011fd2:	da03      	bge.n	8011fdc <prvTCPHandleState+0xdc>
        {
            xSendLength = -1;
 8011fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8011fd8:	637b      	str	r3, [r7, #52]	@ 0x34
 8011fda:	e0ae      	b.n	801213a <prvTCPHandleState+0x23a>
        }
        else
        {
            eIPTCPState_t eState;

            uxOptionsLength = prvSetOptions( pxSocket, *ppxNetworkBuffer );
 8011fdc:	683b      	ldr	r3, [r7, #0]
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	4619      	mov	r1, r3
 8011fe2:	6878      	ldr	r0, [r7, #4]
 8011fe4:	f001 fa0c 	bl	8013400 <prvSetOptions>
 8011fe8:	6278      	str	r0, [r7, #36]	@ 0x24

            if( ( pxSocket->u.xTCP.eTCPState == eSYN_RECEIVED ) && ( ( ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_CTRL ) == ( uint8_t ) tcpTCP_FLAG_SYN ) )
 8011fea:	687b      	ldr	r3, [r7, #4]
 8011fec:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8011ff0:	2b04      	cmp	r3, #4
 8011ff2:	d10c      	bne.n	801200e <prvTCPHandleState+0x10e>
 8011ff4:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8011ff8:	f003 031f 	and.w	r3, r3, #31
 8011ffc:	2b02      	cmp	r3, #2
 8011ffe:	d106      	bne.n	801200e <prvTCPHandleState+0x10e>
            {
                FreeRTOS_debug_printf( ( "eSYN_RECEIVED: ACK expected, not SYN: peer missed our SYN+ACK\n" ) );
 8012000:	4855      	ldr	r0, [pc, #340]	@ (8012158 <prvTCPHandleState+0x258>)
 8012002:	f00e fe3d 	bl	8020c80 <lUDPLoggingPrintf>

                /* In eSYN_RECEIVED a simple ACK is expected, but apparently the
                 * 'SYN+ACK' didn't arrive.  Step back to the previous state in which
                 * a first incoming SYN is handled.  The SYN was counted already so
                 * decrease it first. */
                vTCPStateChange( pxSocket, eSYN_FIRST );
 8012006:	2103      	movs	r1, #3
 8012008:	6878      	ldr	r0, [r7, #4]
 801200a:	f7fe fa79 	bl	8010500 <vTCPStateChange>
            }

            if( ( ( ucTCPFlags & tcpTCP_FLAG_FIN ) != 0U ) && ( pxSocket->u.xTCP.bits.bFinRecv == pdFALSE_UNSIGNED ) )
 801200e:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8012012:	f003 0301 	and.w	r3, r3, #1
 8012016:	2b00      	cmp	r3, #0
 8012018:	d022      	beq.n	8012060 <prvTCPHandleState+0x160>
 801201a:	687b      	ldr	r3, [r7, #4]
 801201c:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012020:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012024:	b2db      	uxtb	r3, r3
 8012026:	2b00      	cmp	r3, #0
 8012028:	d11a      	bne.n	8012060 <prvTCPHandleState+0x160>
            {
                /* It's the first time a FIN has been received, remember its
                 * sequence number. */
                pxTCPWindow->rx.ulFINSequenceNumber = ulSequenceNumber + ulReceiveLength;
 801202a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801202c:	697b      	ldr	r3, [r7, #20]
 801202e:	441a      	add	r2, r3
 8012030:	69fb      	ldr	r3, [r7, #28]
 8012032:	615a      	str	r2, [r3, #20]
                pxSocket->u.xTCP.bits.bFinRecv = pdTRUE_UNSIGNED;
 8012034:	687a      	ldr	r2, [r7, #4]
 8012036:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801203a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801203e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                /* Was peer the first one to send a FIN? */
                if( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED )
 8012042:	687b      	ldr	r3, [r7, #4]
 8012044:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012048:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801204c:	b2db      	uxtb	r3, r3
 801204e:	2b00      	cmp	r3, #0
 8012050:	d106      	bne.n	8012060 <prvTCPHandleState+0x160>
                {
                    /* If so, don't send the-last-ACK. */
                    pxSocket->u.xTCP.bits.bFinLast = pdTRUE_UNSIGNED;
 8012052:	687a      	ldr	r2, [r7, #4]
 8012054:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 8012058:	f043 0302 	orr.w	r3, r3, #2
 801205c:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a
                }
            }

            eState = ( eIPTCPState_t ) pxSocket->u.xTCP.eTCPState;
 8012060:	687b      	ldr	r3, [r7, #4]
 8012062:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 8012066:	73fb      	strb	r3, [r7, #15]

            switch( eState )
 8012068:	7bfb      	ldrb	r3, [r7, #15]
 801206a:	2b0b      	cmp	r3, #11
 801206c:	d864      	bhi.n	8012138 <prvTCPHandleState+0x238>
 801206e:	a201      	add	r2, pc, #4	@ (adr r2, 8012074 <prvTCPHandleState+0x174>)
 8012070:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8012074:	08012139 	.word	0x08012139
 8012078:	08012139 	.word	0x08012139
 801207c:	08012107 	.word	0x08012107
 8012080:	080120a5 	.word	0x080120a5
 8012084:	08012107 	.word	0x08012107
 8012088:	08012119 	.word	0x08012119
 801208c:	08012129 	.word	0x08012129
 8012090:	08012129 	.word	0x08012129
 8012094:	08012139 	.word	0x08012139
 8012098:	08012139 	.word	0x08012139
 801209c:	08012129 	.word	0x08012129
 80120a0:	08012139 	.word	0x08012139
                                  * socket. */

                    /* A new socket has been created, reply with a SYN+ACK.
                     * Acknowledge with seq+1 because the SYN is seen as pseudo data
                     * with len = 1. */
                    uxOptionsLength = prvSetSynAckOptions( pxSocket, pxTCPHeader );
 80120a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80120a6:	6878      	ldr	r0, [r7, #4]
 80120a8:	f000 fe4e 	bl	8012d48 <prvSetSynAckOptions>
 80120ac:	6278      	str	r0, [r7, #36]	@ 0x24
                    pxTCPHeader->ucTCPFlags = ( uint8_t ) tcpTCP_FLAG_SYN | ( uint8_t ) tcpTCP_FLAG_ACK;
 80120ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120b0:	2212      	movs	r2, #18
 80120b2:	735a      	strb	r2, [r3, #13]

                    uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80120b4:	6878      	ldr	r0, [r7, #4]
 80120b6:	f7f7 f991 	bl	80093dc <uxIPHeaderSizeSocket>
 80120ba:	4602      	mov	r2, r0
 80120bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120be:	4413      	add	r3, r2
 80120c0:	3314      	adds	r3, #20
 80120c2:	61bb      	str	r3, [r7, #24]
                    xSendLength = ( BaseType_t ) uxIntermediateResult;
 80120c4:	69bb      	ldr	r3, [r7, #24]
 80120c6:	637b      	str	r3, [r7, #52]	@ 0x34

                    /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                     * uxOptionsLength is a multiple of 4.  The complete expression is:
                     * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                    pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80120c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80120ca:	b2db      	uxtb	r3, r3
 80120cc:	3314      	adds	r3, #20
 80120ce:	b2db      	uxtb	r3, r3
 80120d0:	009b      	lsls	r3, r3, #2
 80120d2:	b2da      	uxtb	r2, r3
 80120d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120d6:	731a      	strb	r2, [r3, #12]
                    vTCPStateChange( pxSocket, eSYN_RECEIVED );
 80120d8:	2104      	movs	r1, #4
 80120da:	6878      	ldr	r0, [r7, #4]
 80120dc:	f7fe fa10 	bl	8010500 <vTCPStateChange>

                    pxTCPWindow->rx.ulHighestSequenceNumber = ulSequenceNumber + 1U;
 80120e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120e2:	1c5a      	adds	r2, r3, #1
 80120e4:	69fb      	ldr	r3, [r7, #28]
 80120e6:	619a      	str	r2, [r3, #24]
                    pxTCPWindow->rx.ulCurrentSequenceNumber = ulSequenceNumber + 1U;
 80120e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120ea:	1c5a      	adds	r2, r3, #1
 80120ec:	69fb      	ldr	r3, [r7, #28]
 80120ee:	611a      	str	r2, [r3, #16]
                    pxTCPWindow->ulNextTxSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U;
 80120f0:	69fb      	ldr	r3, [r7, #28]
 80120f2:	69db      	ldr	r3, [r3, #28]
 80120f4:	1c5a      	adds	r2, r3, #1
 80120f6:	69fb      	ldr	r3, [r7, #28]
 80120f8:	635a      	str	r2, [r3, #52]	@ 0x34
                    pxTCPWindow->tx.ulCurrentSequenceNumber = pxTCPWindow->tx.ulFirstSequenceNumber + 1U; /* because we send a TCP_SYN. */
 80120fa:	69fb      	ldr	r3, [r7, #28]
 80120fc:	69db      	ldr	r3, [r3, #28]
 80120fe:	1c5a      	adds	r2, r3, #1
 8012100:	69fb      	ldr	r3, [r7, #28]
 8012102:	621a      	str	r2, [r3, #32]
                    break;
 8012104:	e019      	b.n	801213a <prvTCPHandleState+0x23a>
                case eCONNECT_SYN:  /* (client) also called SYN_SENT: we've just send a
                                     * SYN, expect a SYN+ACK and send a ACK now. */
                /* Fall through */
                case eSYN_RECEIVED: /* (server) we've had a SYN, replied with SYN+SCK
                                     * expect a ACK and do nothing. */
                    xSendLength = prvHandleSynReceived( pxSocket, *( ppxNetworkBuffer ), ulReceiveLength, uxOptionsLength );
 8012106:	683b      	ldr	r3, [r7, #0]
 8012108:	6819      	ldr	r1, [r3, #0]
 801210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801210c:	697a      	ldr	r2, [r7, #20]
 801210e:	6878      	ldr	r0, [r7, #4]
 8012110:	f7ff fc3a 	bl	8011988 <prvHandleSynReceived>
 8012114:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8012116:	e010      	b.n	801213a <prvTCPHandleState+0x23a>
                case eESTABLISHED: /* (server + client) an open connection, data
                                    * received can be delivered to the user. The normal
                                    * state for the data transfer phase of the connection
                                    * The closing states are also handled here with the
                                    * use of some flags. */
                    xSendLength = prvHandleEstablished( pxSocket, ppxNetworkBuffer, ulReceiveLength, uxOptionsLength );
 8012118:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801211a:	697a      	ldr	r2, [r7, #20]
 801211c:	6839      	ldr	r1, [r7, #0]
 801211e:	6878      	ldr	r0, [r7, #4]
 8012120:	f7ff fd80 	bl	8011c24 <prvHandleEstablished>
 8012124:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8012126:	e008      	b.n	801213a <prvTCPHandleState+0x23a>
                /* Fall through */
                case eFIN_WAIT_1: /* (server + client) waiting for a connection termination request from the remote TCP,
                                   * or an acknowledgement of the connection termination request previously sent. */
                /* Fall through */
                case eFIN_WAIT_2: /* (server + client) waiting for a connection termination request from the remote TCP. */
                    xSendLength = prvTCPHandleFin( pxSocket, *ppxNetworkBuffer );
 8012128:	683b      	ldr	r3, [r7, #0]
 801212a:	681b      	ldr	r3, [r3, #0]
 801212c:	4619      	mov	r1, r3
 801212e:	6878      	ldr	r0, [r7, #4]
 8012130:	f7ff fb4c 	bl	80117cc <prvTCPHandleFin>
 8012134:	6378      	str	r0, [r7, #52]	@ 0x34
                    break;
 8012136:	e000      	b.n	801213a <prvTCPHandleState+0x23a>
                                  * 'bFinSent', 'bFinRecv', and 'bFinAcked'. */
                    break;

                default:
                    /* No more known states. */
                    break;
 8012138:	bf00      	nop
            }
        }

        if( xSendLength > 0 )
 801213a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801213c:	2b00      	cmp	r3, #0
 801213e:	dd06      	ble.n	801214e <prvTCPHandleState+0x24e>
        {
            xSendLength = prvSendData( pxSocket, ppxNetworkBuffer, ulReceiveLength, xSendLength );
 8012140:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012142:	697a      	ldr	r2, [r7, #20]
 8012144:	6839      	ldr	r1, [r7, #0]
 8012146:	6878      	ldr	r0, [r7, #4]
 8012148:	f001 fa1a 	bl	8013580 <prvSendData>
 801214c:	6378      	str	r0, [r7, #52]	@ 0x34
        }

        return xSendLength;
 801214e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 8012150:	4618      	mov	r0, r3
 8012152:	373c      	adds	r7, #60	@ 0x3c
 8012154:	46bd      	mov	sp, r7
 8012156:	bd90      	pop	{r4, r7, pc}
 8012158:	08025064 	.word	0x08025064

0801215c <prvHandleListen>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
    FreeRTOS_Socket_t * prvHandleListen( FreeRTOS_Socket_t * pxSocket,
                                         NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 801215c:	b580      	push	{r7, lr}
 801215e:	b084      	sub	sp, #16
 8012160:	af00      	add	r7, sp, #0
 8012162:	6078      	str	r0, [r7, #4]
 8012164:	6039      	str	r1, [r7, #0]
        FreeRTOS_Socket_t * pxNewSocket = NULL;
 8012166:	2300      	movs	r3, #0
 8012168:	60fb      	str	r3, [r7, #12]

        switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 801216a:	6838      	ldr	r0, [r7, #0]
 801216c:	f7f7 f91c 	bl	80093a8 <uxIPHeaderSizePacket>
 8012170:	4603      	mov	r3, r0
 8012172:	2b14      	cmp	r3, #20
 8012174:	d002      	beq.n	801217c <prvHandleListen+0x20>
 8012176:	2b28      	cmp	r3, #40	@ 0x28
 8012178:	d006      	beq.n	8012188 <prvHandleListen+0x2c>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break;
 801217a:	e00b      	b.n	8012194 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV4( pxSocket, pxNetworkBuffer );
 801217c:	6839      	ldr	r1, [r7, #0]
 801217e:	6878      	ldr	r0, [r7, #4]
 8012180:	f000 f8ee 	bl	8012360 <prvHandleListen_IPV4>
 8012184:	60f8      	str	r0, [r7, #12]
                    break;
 8012186:	e005      	b.n	8012194 <prvHandleListen+0x38>
                    pxNewSocket = prvHandleListen_IPV6( pxSocket, pxNetworkBuffer );
 8012188:	6839      	ldr	r1, [r7, #0]
 801218a:	6878      	ldr	r0, [r7, #4]
 801218c:	f000 fa10 	bl	80125b0 <prvHandleListen_IPV6>
 8012190:	60f8      	str	r0, [r7, #12]
                    break;
 8012192:	bf00      	nop
        }

        return pxNewSocket;
 8012194:	68fb      	ldr	r3, [r7, #12]
    }
 8012196:	4618      	mov	r0, r3
 8012198:	3710      	adds	r7, #16
 801219a:	46bd      	mov	sp, r7
 801219c:	bd80      	pop	{r7, pc}
	...

080121a0 <prvTCPSocketCopy>:
 *
 * @return If all steps all successful, then pdTRUE is returned. Else, pdFALSE.
 */
    BaseType_t prvTCPSocketCopy( FreeRTOS_Socket_t * pxNewSocket,
                                 FreeRTOS_Socket_t * pxSocket )
    {
 80121a0:	b590      	push	{r4, r7, lr}
 80121a2:	b08f      	sub	sp, #60	@ 0x3c
 80121a4:	af04      	add	r7, sp, #16
 80121a6:	6078      	str	r0, [r7, #4]
 80121a8:	6039      	str	r1, [r7, #0]
        struct freertos_sockaddr xAddress;
        BaseType_t xResult;

        pxNewSocket->xReceiveBlockTime = pxSocket->xReceiveBlockTime;
 80121aa:	683b      	ldr	r3, [r7, #0]
 80121ac:	6a1a      	ldr	r2, [r3, #32]
 80121ae:	687b      	ldr	r3, [r7, #4]
 80121b0:	621a      	str	r2, [r3, #32]
        pxNewSocket->xSendBlockTime = pxSocket->xSendBlockTime;
 80121b2:	683b      	ldr	r3, [r7, #0]
 80121b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	625a      	str	r2, [r3, #36]	@ 0x24
        pxNewSocket->ucSocketOptions = pxSocket->ucSocketOptions;
 80121ba:	683b      	ldr	r3, [r7, #0]
 80121bc:	f893 203a 	ldrb.w	r2, [r3, #58]	@ 0x3a
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
        pxNewSocket->u.xTCP.uxRxStreamSize = pxSocket->u.xTCP.uxRxStreamSize;
 80121c6:	683b      	ldr	r3, [r7, #0]
 80121c8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80121cc:	687b      	ldr	r3, [r7, #4]
 80121ce:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
        pxNewSocket->u.xTCP.uxTxStreamSize = pxSocket->u.xTCP.uxTxStreamSize;
 80121d2:	683b      	ldr	r3, [r7, #0]
 80121d4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80121d8:	687b      	ldr	r3, [r7, #4]
 80121da:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
        pxNewSocket->u.xTCP.uxLittleSpace = pxSocket->u.xTCP.uxLittleSpace;
 80121de:	683b      	ldr	r3, [r7, #0]
 80121e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80121e4:	687b      	ldr	r3, [r7, #4]
 80121e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        pxNewSocket->u.xTCP.uxEnoughSpace = pxSocket->u.xTCP.uxEnoughSpace;
 80121ea:	683b      	ldr	r3, [r7, #0]
 80121ec:	f8d3 2090 	ldr.w	r2, [r3, #144]	@ 0x90
 80121f0:	687b      	ldr	r3, [r7, #4]
 80121f2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        pxNewSocket->u.xTCP.uxRxWinSize = pxSocket->u.xTCP.uxRxWinSize;
 80121f6:	683b      	ldr	r3, [r7, #0]
 80121f8:	f8d3 2118 	ldr.w	r2, [r3, #280]	@ 0x118
 80121fc:	687b      	ldr	r3, [r7, #4]
 80121fe:	f8c3 2118 	str.w	r2, [r3, #280]	@ 0x118
        pxNewSocket->u.xTCP.uxTxWinSize = pxSocket->u.xTCP.uxTxWinSize;
 8012202:	683b      	ldr	r3, [r7, #0]
 8012204:	f8d3 211c 	ldr.w	r2, [r3, #284]	@ 0x11c
 8012208:	687b      	ldr	r3, [r7, #4]
 801220a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

        #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
        {
            pxNewSocket->pxUserSemaphore = pxSocket->pxUserSemaphore;
 801220e:	683b      	ldr	r3, [r7, #0]
 8012210:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	63da      	str	r2, [r3, #60]	@ 0x3c
        #endif /* ipconfigSOCKET_HAS_USER_SEMAPHORE */

        #if ( ipconfigUSE_CALLBACKS == 1 )
        {
            /* In case call-backs are used, copy them from parent to child. */
            pxNewSocket->u.xTCP.pxHandleConnected = pxSocket->u.xTCP.pxHandleConnected;
 8012216:	683b      	ldr	r3, [r7, #0]
 8012218:	f8d3 2110 	ldr.w	r2, [r3, #272]	@ 0x110
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f8c3 2110 	str.w	r2, [r3, #272]	@ 0x110
            pxNewSocket->u.xTCP.pxHandleReceive = pxSocket->u.xTCP.pxHandleReceive;
 8012222:	683b      	ldr	r3, [r7, #0]
 8012224:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8012228:	687b      	ldr	r3, [r7, #4]
 801222a:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
            pxNewSocket->u.xTCP.pxHandleSent = pxSocket->u.xTCP.pxHandleSent;
 801222e:	683b      	ldr	r3, [r7, #0]
 8012230:	f8d3 210c 	ldr.w	r2, [r3, #268]	@ 0x10c
 8012234:	687b      	ldr	r3, [r7, #4]
 8012236:	f8c3 210c 	str.w	r2, [r3, #268]	@ 0x10c

        #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
        {
            /* Child socket of listening sockets will inherit the Socket Set
             * Otherwise the owner has no chance of including it into the set. */
            if( pxSocket->pxSocketSet != NULL )
 801223a:	683b      	ldr	r3, [r7, #0]
 801223c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801223e:	2b00      	cmp	r3, #0
 8012240:	d009      	beq.n	8012256 <prvTCPSocketCopy+0xb6>
            {
                pxNewSocket->pxSocketSet = pxSocket->pxSocketSet;
 8012242:	683b      	ldr	r3, [r7, #0]
 8012244:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012246:	687b      	ldr	r3, [r7, #4]
 8012248:	641a      	str	r2, [r3, #64]	@ 0x40
                pxNewSocket->xSelectBits = pxSocket->xSelectBits | ( ( EventBits_t ) eSELECT_READ ) | ( ( EventBits_t ) eSELECT_EXCEPT );
 801224a:	683b      	ldr	r3, [r7, #0]
 801224c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801224e:	f043 0205 	orr.w	r2, r3, #5
 8012252:	687b      	ldr	r3, [r7, #4]
 8012254:	645a      	str	r2, [r3, #68]	@ 0x44
            }
        }
        #endif /* ipconfigSUPPORT_SELECT_FUNCTION */

        /* And bind it to the same local port as its parent. */
        ( void ) FreeRTOS_GetLocalAddress( pxSocket, &xAddress );
 8012256:	f107 030c 	add.w	r3, r7, #12
 801225a:	4619      	mov	r1, r3
 801225c:	6838      	ldr	r0, [r7, #0]
 801225e:	f7fc fb65 	bl	800e92c <FreeRTOS_GetLocalAddress>
             * orphan temporarily.  Once this socket is really connected, the owner of
             * the server socket will be notified. */

            /* When bPassQueued is true, the socket is an orphan until it gets
             * connected. */
            pxNewSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012262:	687a      	ldr	r2, [r7, #4]
 8012264:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8012268:	f043 0304 	orr.w	r3, r3, #4
 801226c:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxNewSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	683a      	ldr	r2, [r7, #0]
 8012274:	67da      	str	r2, [r3, #124]	@ 0x7c
                pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
            }
        }
        #endif /* if ( ipconfigTCP_HANG_PROTECTION == 1 ) */

        pxSocket->u.xTCP.usChildCount++;
 8012276:	683b      	ldr	r3, [r7, #0]
 8012278:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801227c:	3301      	adds	r3, #1
 801227e:	b29a      	uxth	r2, r3
 8012280:	683b      	ldr	r3, [r7, #0]
 8012282:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74

        if( pxSocket->u.xTCP.pxPeerSocket == NULL )
 8012286:	683b      	ldr	r3, [r7, #0]
 8012288:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801228a:	2b00      	cmp	r3, #0
 801228c:	d102      	bne.n	8012294 <prvTCPSocketCopy+0xf4>
        {
            pxSocket->u.xTCP.pxPeerSocket = pxNewSocket;
 801228e:	683b      	ldr	r3, [r7, #0]
 8012290:	687a      	ldr	r2, [r7, #4]
 8012292:	67da      	str	r2, [r3, #124]	@ 0x7c
        }

        FreeRTOS_debug_printf( ( "Gain: Socket %u now has %u / %u child%s me: %p parent: %p peer: %p\n",
 8012294:	683b      	ldr	r3, [r7, #0]
 8012296:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012298:	4619      	mov	r1, r3
 801229a:	683b      	ldr	r3, [r7, #0]
 801229c:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80122a0:	4618      	mov	r0, r3
 80122a2:	683b      	ldr	r3, [r7, #0]
 80122a4:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 80122a8:	461c      	mov	r4, r3
 80122aa:	683b      	ldr	r3, [r7, #0]
 80122ac:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 80122b0:	2b01      	cmp	r3, #1
 80122b2:	d101      	bne.n	80122b8 <prvTCPSocketCopy+0x118>
 80122b4:	4a17      	ldr	r2, [pc, #92]	@ (8012314 <prvTCPSocketCopy+0x174>)
 80122b6:	e000      	b.n	80122ba <prvTCPSocketCopy+0x11a>
 80122b8:	4a17      	ldr	r2, [pc, #92]	@ (8012318 <prvTCPSocketCopy+0x178>)
 80122ba:	683b      	ldr	r3, [r7, #0]
 80122bc:	2b00      	cmp	r3, #0
 80122be:	d002      	beq.n	80122c6 <prvTCPSocketCopy+0x126>
 80122c0:	683b      	ldr	r3, [r7, #0]
 80122c2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80122c4:	e000      	b.n	80122c8 <prvTCPSocketCopy+0x128>
 80122c6:	2300      	movs	r3, #0
 80122c8:	9303      	str	r3, [sp, #12]
 80122ca:	683b      	ldr	r3, [r7, #0]
 80122cc:	9302      	str	r3, [sp, #8]
 80122ce:	687b      	ldr	r3, [r7, #4]
 80122d0:	9301      	str	r3, [sp, #4]
 80122d2:	9200      	str	r2, [sp, #0]
 80122d4:	4623      	mov	r3, r4
 80122d6:	4602      	mov	r2, r0
 80122d8:	4810      	ldr	r0, [pc, #64]	@ (801231c <prvTCPSocketCopy+0x17c>)
 80122da:	f00e fcd1 	bl	8020c80 <lUDPLoggingPrintf>
                                 ( void * ) pxNewSocket,
                                 ( void * ) pxSocket,
                                 pxSocket ? ( void * ) pxSocket->u.xTCP.pxPeerSocket : NULL ) );

        /* Now bind the child socket to the same port as the listening socket. */
        if( vSocketBind( pxNewSocket, &xAddress, sizeof( xAddress ), pdTRUE ) != 0 )
 80122de:	f107 010c 	add.w	r1, r7, #12
 80122e2:	2301      	movs	r3, #1
 80122e4:	2218      	movs	r2, #24
 80122e6:	6878      	ldr	r0, [r7, #4]
 80122e8:	f7fb fccc 	bl	800dc84 <vSocketBind>
 80122ec:	4603      	mov	r3, r0
 80122ee:	2b00      	cmp	r3, #0
 80122f0:	d008      	beq.n	8012304 <prvTCPSocketCopy+0x164>
        {
            FreeRTOS_debug_printf( ( "TCP: Listen: new socket bind error\n" ) );
 80122f2:	480b      	ldr	r0, [pc, #44]	@ (8012320 <prvTCPSocketCopy+0x180>)
 80122f4:	f00e fcc4 	bl	8020c80 <lUDPLoggingPrintf>
            ( void ) vSocketClose( pxNewSocket );
 80122f8:	6878      	ldr	r0, [r7, #4]
 80122fa:	f7fb fd77 	bl	800ddec <vSocketClose>
            xResult = pdFALSE;
 80122fe:	2300      	movs	r3, #0
 8012300:	627b      	str	r3, [r7, #36]	@ 0x24
 8012302:	e001      	b.n	8012308 <prvTCPSocketCopy+0x168>
        }
        else
        {
            xResult = pdTRUE;
 8012304:	2301      	movs	r3, #1
 8012306:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        return xResult;
 8012308:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    }
 801230a:	4618      	mov	r0, r3
 801230c:	372c      	adds	r7, #44	@ 0x2c
 801230e:	46bd      	mov	sp, r7
 8012310:	bd90      	pop	{r4, r7, pc}
 8012312:	bf00      	nop
 8012314:	080250a4 	.word	0x080250a4
 8012318:	080250a8 	.word	0x080250a8
 801231c:	080250ac 	.word	0x080250ac
 8012320:	080250f0 	.word	0x080250f0

08012324 <FreeRTOS_GetTCPStateName>:
    /*-----------------------------------------------------------*/

    #if ( ( ipconfigHAS_DEBUG_PRINTF != 0 ) || ( ipconfigHAS_PRINTF != 0 ) )

        const char * FreeRTOS_GetTCPStateName( UBaseType_t ulState )
        {
 8012324:	b480      	push	{r7}
 8012326:	b085      	sub	sp, #20
 8012328:	af00      	add	r7, sp, #0
 801232a:	6078      	str	r0, [r7, #4]
                "eCLOSING",
                "eLAST_ACK",
                "eTIME_WAIT",
                "eUNKNOWN",
            };
            BaseType_t xIndex = ( BaseType_t ) ulState;
 801232c:	687b      	ldr	r3, [r7, #4]
 801232e:	60fb      	str	r3, [r7, #12]

            if( ( xIndex < 0 ) || ( xIndex >= ARRAY_SIZE( pcStateNames ) ) )
 8012330:	68fb      	ldr	r3, [r7, #12]
 8012332:	2b00      	cmp	r3, #0
 8012334:	db02      	blt.n	801233c <FreeRTOS_GetTCPStateName+0x18>
 8012336:	68fb      	ldr	r3, [r7, #12]
 8012338:	2b0c      	cmp	r3, #12
 801233a:	dd04      	ble.n	8012346 <FreeRTOS_GetTCPStateName+0x22>
            {
                /* The last item is called 'eUNKNOWN' */
                xIndex = ARRAY_SIZE( pcStateNames );
 801233c:	230d      	movs	r3, #13
 801233e:	60fb      	str	r3, [r7, #12]
                xIndex--;
 8012340:	68fb      	ldr	r3, [r7, #12]
 8012342:	3b01      	subs	r3, #1
 8012344:	60fb      	str	r3, [r7, #12]
            }

            return pcStateNames[ xIndex ];
 8012346:	4a05      	ldr	r2, [pc, #20]	@ (801235c <FreeRTOS_GetTCPStateName+0x38>)
 8012348:	68fb      	ldr	r3, [r7, #12]
 801234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
        }
 801234e:	4618      	mov	r0, r3
 8012350:	3714      	adds	r7, #20
 8012352:	46bd      	mov	sp, r7
 8012354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012358:	4770      	bx	lr
 801235a:	bf00      	nop
 801235c:	080263b8 	.word	0x080263b8

08012360 <prvHandleListen_IPV4>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV4( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 8012360:	b590      	push	{r4, r7, lr}
 8012362:	b08f      	sub	sp, #60	@ 0x3c
 8012364:	af02      	add	r7, sp, #8
 8012366:	6078      	str	r0, [r7, #4]
 8012368:	6039      	str	r1, [r7, #0]
    /* Map the ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

    const TCPPacket_t * pxTCPPacket = NULL;
 801236a:	2300      	movs	r3, #0
 801236c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 801236e:	2300      	movs	r3, #0
 8012370:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0U;
 8012372:	2300      	movs	r3, #0
 8012374:	627b      	str	r3, [r7, #36]	@ 0x24
    const NetworkEndPoint_t * pxEndpoint = NULL;
 8012376:	2300      	movs	r3, #0
 8012378:	623b      	str	r3, [r7, #32]
    BaseType_t xIsNewSocket = pdFALSE;
 801237a:	2300      	movs	r3, #0
 801237c:	61fb      	str	r3, [r7, #28]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 801237e:	687b      	ldr	r3, [r7, #4]
 8012380:	2b00      	cmp	r3, #0
 8012382:	d008      	beq.n	8012396 <prvHandleListen_IPV4+0x36>
 8012384:	683b      	ldr	r3, [r7, #0]
 8012386:	2b00      	cmp	r3, #0
 8012388:	d005      	beq.n	8012396 <prvHandleListen_IPV4+0x36>
    {
        /* Initialize pointers if inputs are valid. */
        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801238a:	683b      	ldr	r3, [r7, #0]
 801238c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801238e:	62fb      	str	r3, [r7, #44]	@ 0x2c
        pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8012390:	683b      	ldr	r3, [r7, #0]
 8012392:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012394:	623b      	str	r3, [r7, #32]
    }

    /* Silently discard a SYN packet which was not specifically sent for this node. */
    if( ( pxEndpoint != NULL ) && ( pxTCPPacket->xIPHeader.ulDestinationIPAddress == pxEndpoint->ipv4_settings.ulIPAddress ) )
 8012396:	6a3b      	ldr	r3, [r7, #32]
 8012398:	2b00      	cmp	r3, #0
 801239a:	d015      	beq.n	80123c8 <prvHandleListen_IPV4+0x68>
 801239c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801239e:	f8d3 201e 	ldr.w	r2, [r3, #30]
 80123a2:	6a3b      	ldr	r3, [r7, #32]
 80123a4:	681b      	ldr	r3, [r3, #0]
 80123a6:	429a      	cmp	r2, r3
 80123a8:	d10e      	bne.n	80123c8 <prvHandleListen_IPV4+0x68>
    {
        /* Assume that a new Initial Sequence Number will be required. Request
         * it now in order to fail out if necessary. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 80123aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123ac:	f8d3 001e 	ldr.w	r0, [r3, #30]
 80123b0:	687b      	ldr	r3, [r7, #4]
 80123b2:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
                                                                      pxSocket->usLocalPort,
                                                                      pxTCPPacket->xIPHeader.ulSourceIPAddress,
 80123b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123b6:	f8d3 201a 	ldr.w	r2, [r3, #26]
                                                                      pxTCPPacket->xTCPHeader.usSourcePort );
 80123ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80123bc:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80123be:	b29b      	uxth	r3, r3
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxTCPPacket->xIPHeader.ulDestinationIPAddress,
 80123c0:	f7ef f876 	bl	80014b0 <ulApplicationGetNextSequenceNumber>
 80123c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80123c6:	e001      	b.n	80123cc <prvHandleListen_IPV4+0x6c>
    }
    else
    {
        /* Set the sequence number to 0 to avoid further processing. */
        ulInitialSequenceNumber = 0U;
 80123c8:	2300      	movs	r3, #0
 80123ca:	627b      	str	r3, [r7, #36]	@ 0x24
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( ulInitialSequenceNumber != 0U )
 80123cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80123ce:	2b00      	cmp	r3, #0
 80123d0:	d059      	beq.n	8012486 <prvHandleListen_IPV4+0x126>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80123d8:	f003 0308 	and.w	r3, r3, #8
 80123dc:	b2db      	uxtb	r3, r3
 80123de:	2b00      	cmp	r3, #0
 80123e0:	d00c      	beq.n	80123fc <prvHandleListen_IPV4+0x9c>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 80123e2:	687b      	ldr	r3, [r7, #4]
 80123e4:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 80123e6:	687a      	ldr	r2, [r7, #4]
 80123e8:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80123ec:	f043 0304 	orr.w	r3, r3, #4
 80123f0:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 80123f4:	687b      	ldr	r3, [r7, #4]
 80123f6:	687a      	ldr	r2, [r7, #4]
 80123f8:	67da      	str	r2, [r3, #124]	@ 0x7c
 80123fa:	e044      	b.n	8012486 <prvHandleListen_IPV4+0x126>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 80123fc:	2300      	movs	r3, #0
 80123fe:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8012406:	687b      	ldr	r3, [r7, #4]
 8012408:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 801240c:	429a      	cmp	r2, r3
 801240e:	d31b      	bcc.n	8012448 <prvHandleListen_IPV4+0xe8>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8012410:	687b      	ldr	r3, [r7, #4]
 8012412:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012414:	4619      	mov	r1, r3
 8012416:	687b      	ldr	r3, [r7, #4]
 8012418:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801241c:	461a      	mov	r2, r3
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012424:	4618      	mov	r0, r3
 8012426:	687b      	ldr	r3, [r7, #4]
 8012428:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801242c:	2b01      	cmp	r3, #1
 801242e:	d101      	bne.n	8012434 <prvHandleListen_IPV4+0xd4>
 8012430:	4b5b      	ldr	r3, [pc, #364]	@ (80125a0 <prvHandleListen_IPV4+0x240>)
 8012432:	e000      	b.n	8012436 <prvHandleListen_IPV4+0xd6>
 8012434:	4b5b      	ldr	r3, [pc, #364]	@ (80125a4 <prvHandleListen_IPV4+0x244>)
 8012436:	9300      	str	r3, [sp, #0]
 8012438:	4603      	mov	r3, r0
 801243a:	485b      	ldr	r0, [pc, #364]	@ (80125a8 <prvHandleListen_IPV4+0x248>)
 801243c:	f00e fc20 	bl	8020c80 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012440:	6838      	ldr	r0, [r7, #0]
 8012442:	f001 f9d1 	bl	80137e8 <prvTCPSendReset>
 8012446:	e01e      	b.n	8012486 <prvHandleListen_IPV4+0x126>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 8012448:	2206      	movs	r2, #6
 801244a:	2101      	movs	r1, #1
 801244c:	2002      	movs	r0, #2
 801244e:	f7fb f8bf 	bl	800d5d0 <FreeRTOS_socket>
 8012452:	6178      	str	r0, [r7, #20]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 8012454:	697b      	ldr	r3, [r7, #20]
 8012456:	2b00      	cmp	r3, #0
 8012458:	d003      	beq.n	8012462 <prvHandleListen_IPV4+0x102>
 801245a:	697b      	ldr	r3, [r7, #20]
 801245c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012460:	d106      	bne.n	8012470 <prvHandleListen_IPV4+0x110>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 8012462:	4852      	ldr	r0, [pc, #328]	@ (80125ac <prvHandleListen_IPV4+0x24c>)
 8012464:	f00e fc0c 	bl	8020c80 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012468:	6838      	ldr	r0, [r7, #0]
 801246a:	f001 f9bd 	bl	80137e8 <prvTCPSendReset>
 801246e:	e00a      	b.n	8012486 <prvHandleListen_IPV4+0x126>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 8012470:	6879      	ldr	r1, [r7, #4]
 8012472:	6978      	ldr	r0, [r7, #20]
 8012474:	f7ff fe94 	bl	80121a0 <prvTCPSocketCopy>
 8012478:	4603      	mov	r3, r0
 801247a:	2b00      	cmp	r3, #0
 801247c:	d003      	beq.n	8012486 <prvHandleListen_IPV4+0x126>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 801247e:	697b      	ldr	r3, [r7, #20]
 8012480:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 8012482:	2301      	movs	r3, #1
 8012484:	61fb      	str	r3, [r7, #28]
                }
            }
        }
    }

    if( ( ulInitialSequenceNumber != 0U ) && ( pxReturn != NULL ) )
 8012486:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012488:	2b00      	cmp	r3, #0
 801248a:	f000 8083 	beq.w	8012594 <prvHandleListen_IPV4+0x234>
 801248e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012490:	2b00      	cmp	r3, #0
 8012492:	d07f      	beq.n	8012594 <prvHandleListen_IPV4+0x234>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 8012494:	683b      	ldr	r3, [r7, #0]
 8012496:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8012498:	6838      	ldr	r0, [r7, #0]
 801249a:	f7f6 ff85 	bl	80093a8 <uxIPHeaderSizePacket>
 801249e:	4603      	mov	r3, r0
 80124a0:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80124a2:	4423      	add	r3, r4
 80124a4:	613b      	str	r3, [r7, #16]

            /* The endpoint in network buffer must be valid in this condition. */
            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80124a6:	683b      	ldr	r3, [r7, #0]
 80124a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80124aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124ac:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdFALSE_UNSIGNED;
 80124ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80124b0:	7a13      	ldrb	r3, [r2, #8]
 80124b2:	f36f 0300 	bfc	r3, #0, #1
 80124b6:	7213      	strb	r3, [r2, #8]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_htons( pxTCPPacket->xTCPHeader.usSourcePort );
 80124b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124ba:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80124bc:	b29b      	uxth	r3, r3
 80124be:	021b      	lsls	r3, r3, #8
 80124c0:	b21a      	sxth	r2, r3
 80124c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124c4:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 80124c6:	b29b      	uxth	r3, r3
 80124c8:	0a1b      	lsrs	r3, r3, #8
 80124ca:	b29b      	uxth	r3, r3
 80124cc:	b21b      	sxth	r3, r3
 80124ce:	4313      	orrs	r3, r2
 80124d0:	b21b      	sxth	r3, r3
 80124d2:	b29a      	uxth	r2, r3
 80124d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80124d6:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            pxReturn->u.xTCP.xRemoteIP.ulIP_IPv4 = FreeRTOS_htonl( pxTCPPacket->xIPHeader.ulSourceIPAddress );
 80124da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124dc:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80124e0:	061a      	lsls	r2, r3, #24
 80124e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124e4:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80124e8:	021b      	lsls	r3, r3, #8
 80124ea:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80124ee:	431a      	orrs	r2, r3
 80124f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80124f2:	f8d3 301a 	ldr.w	r3, [r3, #26]
 80124f6:	0a1b      	lsrs	r3, r3, #8
 80124f8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80124fc:	431a      	orrs	r2, r3
 80124fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012500:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8012504:	0e1b      	lsrs	r3, r3, #24
 8012506:	431a      	orrs	r2, r3
 8012508:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801250a:	655a      	str	r2, [r3, #84]	@ 0x54
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801250c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801250e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8012510:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012514:	693b      	ldr	r3, [r7, #16]
 8012516:	685b      	ldr	r3, [r3, #4]
 8012518:	061a      	lsls	r2, r3, #24
 801251a:	693b      	ldr	r3, [r7, #16]
 801251c:	685b      	ldr	r3, [r3, #4]
 801251e:	021b      	lsls	r3, r3, #8
 8012520:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012524:	431a      	orrs	r2, r3
 8012526:	693b      	ldr	r3, [r7, #16]
 8012528:	685b      	ldr	r3, [r3, #4]
 801252a:	0a1b      	lsrs	r3, r3, #8
 801252c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012530:	431a      	orrs	r2, r3
 8012532:	693b      	ldr	r3, [r7, #16]
 8012534:	685b      	ldr	r3, [r3, #4]
 8012536:	0e1b      	lsrs	r3, r3, #24
 8012538:	431a      	orrs	r2, r3
 801253a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801253c:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8012540:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012542:	f002 f877 	bl	8014634 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 8012546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012548:	f000 fb66 	bl	8012c18 <prvTCPCreateWindow>
 801254c:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 801254e:	68fb      	ldr	r3, [r7, #12]
 8012550:	2b01      	cmp	r3, #1
 8012552:	d008      	beq.n	8012566 <prvHandleListen_IPV4+0x206>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 8012554:	69fb      	ldr	r3, [r7, #28]
 8012556:	2b01      	cmp	r3, #1
 8012558:	d102      	bne.n	8012560 <prvHandleListen_IPV4+0x200>
                {
                    ( void ) vSocketClose( pxReturn );
 801255a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801255c:	f7fb fc46 	bl	800ddec <vSocketClose>
                }

                pxReturn = NULL;
 8012560:	2300      	movs	r3, #0
 8012562:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 8012564:	e016      	b.n	8012594 <prvHandleListen_IPV4+0x234>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 8012566:	2103      	movs	r1, #3
 8012568:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801256a:	f7fd ffc9 	bl	8010500 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 801256e:	683b      	ldr	r3, [r7, #0]
 8012570:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012572:	2b5a      	cmp	r3, #90	@ 0x5a
 8012574:	d902      	bls.n	801257c <prvHandleListen_IPV4+0x21c>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 8012576:	235a      	movs	r3, #90	@ 0x5a
 8012578:	61bb      	str	r3, [r7, #24]
 801257a:	e002      	b.n	8012582 <prvHandleListen_IPV4+0x222>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 801257c:	683b      	ldr	r3, [r7, #0]
 801257e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012580:	61bb      	str	r3, [r7, #24]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 8012582:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012584:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 8012588:	683b      	ldr	r3, [r7, #0]
 801258a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 801258c:	69ba      	ldr	r2, [r7, #24]
 801258e:	4619      	mov	r1, r3
 8012590:	f00e fd92 	bl	80210b8 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 8012594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8012596:	4618      	mov	r0, r3
 8012598:	3734      	adds	r7, #52	@ 0x34
 801259a:	46bd      	mov	sp, r7
 801259c:	bd90      	pop	{r4, r7, pc}
 801259e:	bf00      	nop
 80125a0:	08025198 	.word	0x08025198
 80125a4:	0802519c 	.word	0x0802519c
 80125a8:	080251a0 	.word	0x080251a0
 80125ac:	080251d0 	.word	0x080251d0

080125b0 <prvHandleListen_IPV6>:
 * @return If a new socket/duplicate socket is created, then the pointer to
 *         that socket is returned or else, a NULL pointer is returned.
 */
FreeRTOS_Socket_t * prvHandleListen_IPV6( FreeRTOS_Socket_t * pxSocket,
                                          NetworkBufferDescriptor_t * pxNetworkBuffer )
{
 80125b0:	b590      	push	{r4, r7, lr}
 80125b2:	b08f      	sub	sp, #60	@ 0x3c
 80125b4:	af02      	add	r7, sp, #8
 80125b6:	6078      	str	r0, [r7, #4]
 80125b8:	6039      	str	r1, [r7, #0]
    const TCPPacket_IPv6_t * pxTCPPacket = NULL;
 80125ba:	2300      	movs	r3, #0
 80125bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    FreeRTOS_Socket_t * pxReturn = NULL;
 80125be:	2300      	movs	r3, #0
 80125c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t ulInitialSequenceNumber = 0;
 80125c2:	2300      	movs	r3, #0
 80125c4:	60bb      	str	r3, [r7, #8]
    BaseType_t xHasSequence = pdFALSE;
 80125c6:	2300      	movs	r3, #0
 80125c8:	627b      	str	r3, [r7, #36]	@ 0x24
    BaseType_t xIsNewSocket = pdFALSE;
 80125ca:	2300      	movs	r3, #0
 80125cc:	623b      	str	r3, [r7, #32]

    if( ( pxSocket != NULL ) && ( pxNetworkBuffer != NULL ) )
 80125ce:	687b      	ldr	r3, [r7, #4]
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d024      	beq.n	801261e <prvHandleListen_IPV6+0x6e>
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d021      	beq.n	801261e <prvHandleListen_IPV6+0x6e>
        /* Map the ethernet buffer onto a TCPPacket_IPv6_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( const TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80125da:	683b      	ldr	r3, [r7, #0]
 80125dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80125de:	62fb      	str	r3, [r7, #44]	@ 0x2c

        configASSERT( pxNetworkBuffer->pxEndPoint != NULL );
 80125e0:	683b      	ldr	r3, [r7, #0]
 80125e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d103      	bne.n	80125f0 <prvHandleListen_IPV6+0x40>
 80125e8:	215d      	movs	r1, #93	@ 0x5d
 80125ea:	487b      	ldr	r0, [pc, #492]	@ (80127d8 <prvHandleListen_IPV6+0x228>)
 80125ec:	f7ee ff40 	bl	8001470 <vAssertCalled>

        /* Silently discard a SYN packet which was not specifically sent for this node. */
        if( memcmp( pxTCPPacket->xIPHeader.xDestinationAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS ) == 0 )
 80125f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80125f2:	f103 0026 	add.w	r0, r3, #38	@ 0x26
 80125f6:	683b      	ldr	r3, [r7, #0]
 80125f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80125fa:	3338      	adds	r3, #56	@ 0x38
 80125fc:	2210      	movs	r2, #16
 80125fe:	4619      	mov	r1, r3
 8012600:	f00f fcef 	bl	8021fe2 <memcmp>
 8012604:	4603      	mov	r3, r0
 8012606:	2b00      	cmp	r3, #0
 8012608:	d109      	bne.n	801261e <prvHandleListen_IPV6+0x6e>
        {
            /* Assume that a new Initial Sequence Number will be required. Request
             * it now in order to fail out if necessary. */
            if( xApplicationGetRandomNumber( &ulInitialSequenceNumber ) == pdPASS )
 801260a:	f107 0308 	add.w	r3, r7, #8
 801260e:	4618      	mov	r0, r3
 8012610:	f7ee fff8 	bl	8001604 <xApplicationGetRandomNumber>
 8012614:	4603      	mov	r3, r0
 8012616:	2b01      	cmp	r3, #1
 8012618:	d101      	bne.n	801261e <prvHandleListen_IPV6+0x6e>
            {
                xHasSequence = pdTRUE;
 801261a:	2301      	movs	r3, #1
 801261c:	627b      	str	r3, [r7, #36]	@ 0x24
        }
    }

    /* A pure SYN (without ACK) has come in, create a new socket to answer
     * it. */
    if( xHasSequence != pdFALSE )
 801261e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012620:	2b00      	cmp	r3, #0
 8012622:	d059      	beq.n	80126d8 <prvHandleListen_IPV6+0x128>
    {
        if( pxSocket->u.xTCP.bits.bReuseSocket != pdFALSE_UNSIGNED )
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801262a:	f003 0308 	and.w	r3, r3, #8
 801262e:	b2db      	uxtb	r3, r3
 8012630:	2b00      	cmp	r3, #0
 8012632:	d00c      	beq.n	801264e <prvHandleListen_IPV6+0x9e>
        {
            /* The flag bReuseSocket indicates that the same instance of the
             * listening socket should be used for the connection. */
            pxReturn = pxSocket;
 8012634:	687b      	ldr	r3, [r7, #4]
 8012636:	62bb      	str	r3, [r7, #40]	@ 0x28
            pxSocket->u.xTCP.bits.bPassQueued = pdTRUE_UNSIGNED;
 8012638:	687a      	ldr	r2, [r7, #4]
 801263a:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 801263e:	f043 0304 	orr.w	r3, r3, #4
 8012642:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
            pxSocket->u.xTCP.pxPeerSocket = pxSocket;
 8012646:	687b      	ldr	r3, [r7, #4]
 8012648:	687a      	ldr	r2, [r7, #4]
 801264a:	67da      	str	r2, [r3, #124]	@ 0x7c
 801264c:	e044      	b.n	80126d8 <prvHandleListen_IPV6+0x128>
        }
        else
        {
            /* The socket does not have the bReuseSocket flag set meaning create a
             * new socket when a connection comes in. */
            pxReturn = NULL;
 801264e:	2300      	movs	r3, #0
 8012650:	62bb      	str	r3, [r7, #40]	@ 0x28

            if( pxSocket->u.xTCP.usChildCount >= pxSocket->u.xTCP.usBacklog )
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	f8b3 2074 	ldrh.w	r2, [r3, #116]	@ 0x74
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 801265e:	429a      	cmp	r2, r3
 8012660:	d31b      	bcc.n	801269a <prvHandleListen_IPV6+0xea>
            {
                FreeRTOS_printf( ( "Check: Socket %u already has %u / %u child%s\n",
 8012662:	687b      	ldr	r3, [r7, #4]
 8012664:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8012666:	4619      	mov	r1, r3
 8012668:	687b      	ldr	r3, [r7, #4]
 801266a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801266e:	461a      	mov	r2, r3
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	f8b3 3076 	ldrh.w	r3, [r3, #118]	@ 0x76
 8012676:	4618      	mov	r0, r3
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	f8b3 3074 	ldrh.w	r3, [r3, #116]	@ 0x74
 801267e:	2b01      	cmp	r3, #1
 8012680:	d101      	bne.n	8012686 <prvHandleListen_IPV6+0xd6>
 8012682:	4b56      	ldr	r3, [pc, #344]	@ (80127dc <prvHandleListen_IPV6+0x22c>)
 8012684:	e000      	b.n	8012688 <prvHandleListen_IPV6+0xd8>
 8012686:	4b56      	ldr	r3, [pc, #344]	@ (80127e0 <prvHandleListen_IPV6+0x230>)
 8012688:	9300      	str	r3, [sp, #0]
 801268a:	4603      	mov	r3, r0
 801268c:	4855      	ldr	r0, [pc, #340]	@ (80127e4 <prvHandleListen_IPV6+0x234>)
 801268e:	f00e faf7 	bl	8020c80 <lUDPLoggingPrintf>
                                   pxSocket->usLocalPort,
                                   pxSocket->u.xTCP.usChildCount,
                                   pxSocket->u.xTCP.usBacklog,
                                   ( pxSocket->u.xTCP.usChildCount == 1U ) ? "" : "ren" ) );
                ( void ) prvTCPSendReset( pxNetworkBuffer );
 8012692:	6838      	ldr	r0, [r7, #0]
 8012694:	f001 f8a8 	bl	80137e8 <prvTCPSendReset>
 8012698:	e01e      	b.n	80126d8 <prvHandleListen_IPV6+0x128>
            }
            else
            {
                FreeRTOS_Socket_t * pxNewSocket = ( FreeRTOS_Socket_t * )
                                                  FreeRTOS_socket( FREERTOS_AF_INET6, FREERTOS_SOCK_STREAM, FREERTOS_IPPROTO_TCP );
 801269a:	2206      	movs	r2, #6
 801269c:	2101      	movs	r1, #1
 801269e:	200a      	movs	r0, #10
 80126a0:	f7fa ff96 	bl	800d5d0 <FreeRTOS_socket>
 80126a4:	61b8      	str	r0, [r7, #24]

                /* MISRA Ref 11.4.1 [Socket error and integer to pointer conversion] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-114 */
                /* coverity[misra_c_2012_rule_11_4_violation] */
                if( ( pxNewSocket == NULL ) || ( pxNewSocket == FREERTOS_INVALID_SOCKET ) )
 80126a6:	69bb      	ldr	r3, [r7, #24]
 80126a8:	2b00      	cmp	r3, #0
 80126aa:	d003      	beq.n	80126b4 <prvHandleListen_IPV6+0x104>
 80126ac:	69bb      	ldr	r3, [r7, #24]
 80126ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80126b2:	d106      	bne.n	80126c2 <prvHandleListen_IPV6+0x112>
                {
                    FreeRTOS_debug_printf( ( "TCP: Listen: new socket failed\n" ) );
 80126b4:	484c      	ldr	r0, [pc, #304]	@ (80127e8 <prvHandleListen_IPV6+0x238>)
 80126b6:	f00e fae3 	bl	8020c80 <lUDPLoggingPrintf>
                    ( void ) prvTCPSendReset( pxNetworkBuffer );
 80126ba:	6838      	ldr	r0, [r7, #0]
 80126bc:	f001 f894 	bl	80137e8 <prvTCPSendReset>
 80126c0:	e00a      	b.n	80126d8 <prvHandleListen_IPV6+0x128>
                }
                else if( prvTCPSocketCopy( pxNewSocket, pxSocket ) != pdFALSE )
 80126c2:	6879      	ldr	r1, [r7, #4]
 80126c4:	69b8      	ldr	r0, [r7, #24]
 80126c6:	f7ff fd6b 	bl	80121a0 <prvTCPSocketCopy>
 80126ca:	4603      	mov	r3, r0
 80126cc:	2b00      	cmp	r3, #0
 80126ce:	d003      	beq.n	80126d8 <prvHandleListen_IPV6+0x128>
                {
                    /* The socket will be connected immediately, no time for the
                     * owner to setsockopt's, therefore copy properties of the server
                     * socket to the new socket.  Only the binding might fail (due to
                     * lack of resources). */
                    pxReturn = pxNewSocket;
 80126d0:	69bb      	ldr	r3, [r7, #24]
 80126d2:	62bb      	str	r3, [r7, #40]	@ 0x28
                    xIsNewSocket = pdTRUE;
 80126d4:	2301      	movs	r3, #1
 80126d6:	623b      	str	r3, [r7, #32]
                }
            }
        }
    }

    if( ( xHasSequence != pdFALSE ) && ( pxReturn != NULL ) )
 80126d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80126da:	2b00      	cmp	r3, #0
 80126dc:	d076      	beq.n	80127cc <prvHandleListen_IPV6+0x21c>
 80126de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126e0:	2b00      	cmp	r3, #0
 80126e2:	d073      	beq.n	80127cc <prvHandleListen_IPV6+0x21c>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
                                                            &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 80126e4:	683b      	ldr	r3, [r7, #0]
 80126e6:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80126e8:	6838      	ldr	r0, [r7, #0]
 80126ea:	f7f6 fe5d 	bl	80093a8 <uxIPHeaderSizePacket>
 80126ee:	4603      	mov	r3, r0
 80126f0:	330e      	adds	r3, #14
            const ProtocolHeaders_t * pxProtocolHeaders = ( ( const ProtocolHeaders_t * )
 80126f2:	4423      	add	r3, r4
 80126f4:	617b      	str	r3, [r7, #20]

            pxReturn->pxEndPoint = pxNetworkBuffer->pxEndPoint;
 80126f6:	683b      	ldr	r3, [r7, #0]
 80126f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80126fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126fc:	64da      	str	r2, [r3, #76]	@ 0x4c
            pxReturn->bits.bIsIPv6 = pdTRUE_UNSIGNED;
 80126fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8012700:	7a13      	ldrb	r3, [r2, #8]
 8012702:	f043 0301 	orr.w	r3, r3, #1
 8012706:	7213      	strb	r3, [r2, #8]

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader_IPv6 = ( ( const IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012708:	683b      	ldr	r3, [r7, #0]
 801270a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801270c:	330e      	adds	r3, #14
 801270e:	613b      	str	r3, [r7, #16]
            pxReturn->u.xTCP.usRemotePort = FreeRTOS_ntohs( pxTCPPacket->xTCPHeader.usSourcePort );
 8012710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8012712:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8012714:	b29b      	uxth	r3, r3
 8012716:	021b      	lsls	r3, r3, #8
 8012718:	b21a      	sxth	r2, r3
 801271a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801271c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801271e:	b29b      	uxth	r3, r3
 8012720:	0a1b      	lsrs	r3, r3, #8
 8012722:	b29b      	uxth	r3, r3
 8012724:	b21b      	sxth	r3, r3
 8012726:	4313      	orrs	r3, r2
 8012728:	b21b      	sxth	r3, r3
 801272a:	b29a      	uxth	r2, r3
 801272c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801272e:	f8a3 2064 	strh.w	r2, [r3, #100]	@ 0x64
            ( void ) memcpy( pxReturn->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, pxIPHeader_IPv6->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8012732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012734:	f103 0054 	add.w	r0, r3, #84	@ 0x54
 8012738:	693b      	ldr	r3, [r7, #16]
 801273a:	3308      	adds	r3, #8
 801273c:	2210      	movs	r2, #16
 801273e:	4619      	mov	r1, r3
 8012740:	f00e fcba 	bl	80210b8 <memcpy>
            pxReturn->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8012744:	68ba      	ldr	r2, [r7, #8]
 8012746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012748:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

            /* Here is the SYN action. */
            pxReturn->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = FreeRTOS_ntohl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 801274c:	697b      	ldr	r3, [r7, #20]
 801274e:	685b      	ldr	r3, [r3, #4]
 8012750:	061a      	lsls	r2, r3, #24
 8012752:	697b      	ldr	r3, [r7, #20]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	021b      	lsls	r3, r3, #8
 8012758:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801275c:	431a      	orrs	r2, r3
 801275e:	697b      	ldr	r3, [r7, #20]
 8012760:	685b      	ldr	r3, [r3, #4]
 8012762:	0a1b      	lsrs	r3, r3, #8
 8012764:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012768:	431a      	orrs	r2, r3
 801276a:	697b      	ldr	r3, [r7, #20]
 801276c:	685b      	ldr	r3, [r3, #4]
 801276e:	0e1b      	lsrs	r3, r3, #24
 8012770:	431a      	orrs	r2, r3
 8012772:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012774:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130
            prvSocketSetMSS( pxReturn );
 8012778:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801277a:	f001 ff5b 	bl	8014634 <prvSocketSetMSS>

            xReturnCreateWindow = prvTCPCreateWindow( pxReturn );
 801277e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012780:	f000 fa4a 	bl	8012c18 <prvTCPCreateWindow>
 8012784:	60f8      	str	r0, [r7, #12]

            /* Did allocating TCP sectors fail? */
            if( xReturnCreateWindow != pdPASS )
 8012786:	68fb      	ldr	r3, [r7, #12]
 8012788:	2b01      	cmp	r3, #1
 801278a:	d008      	beq.n	801279e <prvHandleListen_IPV6+0x1ee>
            {
                /* Close the socket if it was newly created. */
                if( xIsNewSocket == pdTRUE )
 801278c:	6a3b      	ldr	r3, [r7, #32]
 801278e:	2b01      	cmp	r3, #1
 8012790:	d102      	bne.n	8012798 <prvHandleListen_IPV6+0x1e8>
                {
                    ( void ) vSocketClose( pxReturn );
 8012792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8012794:	f7fb fb2a 	bl	800ddec <vSocketClose>
                }

                pxReturn = NULL;
 8012798:	2300      	movs	r3, #0
 801279a:	62bb      	str	r3, [r7, #40]	@ 0x28
                break;
 801279c:	e016      	b.n	80127cc <prvHandleListen_IPV6+0x21c>
            }

            vTCPStateChange( pxReturn, eSYN_FIRST );
 801279e:	2103      	movs	r1, #3
 80127a0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80127a2:	f7fd fead 	bl	8010500 <vTCPStateChange>

            /* Make a copy of the header up to the TCP header.  It is needed later
             * on, whenever data must be sent to the peer. */
            if( pxNetworkBuffer->xDataLength > sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket ) )
 80127a6:	683b      	ldr	r3, [r7, #0]
 80127a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127aa:	2b5a      	cmp	r3, #90	@ 0x5a
 80127ac:	d902      	bls.n	80127b4 <prvHandleListen_IPV6+0x204>
            {
                xCopyLength = sizeof( pxReturn->u.xTCP.xPacket.u.ucLastPacket );
 80127ae:	235a      	movs	r3, #90	@ 0x5a
 80127b0:	61fb      	str	r3, [r7, #28]
 80127b2:	e002      	b.n	80127ba <prvHandleListen_IPV6+0x20a>
            }
            else
            {
                xCopyLength = pxNetworkBuffer->xDataLength;
 80127b4:	683b      	ldr	r3, [r7, #0]
 80127b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80127b8:	61fb      	str	r3, [r7, #28]
            }

            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80127ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80127bc:	f103 00aa 	add.w	r0, r3, #170	@ 0xaa
                             ( const void * ) pxNetworkBuffer->pucEthernetBuffer,
 80127c0:	683b      	ldr	r3, [r7, #0]
 80127c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
            ( void ) memcpy( ( void * ) pxReturn->u.xTCP.xPacket.u.ucLastPacket,
 80127c4:	69fa      	ldr	r2, [r7, #28]
 80127c6:	4619      	mov	r1, r3
 80127c8:	f00e fc76 	bl	80210b8 <memcpy>
                             xCopyLength );
        } while( ipFALSE_BOOL );
    }

    return pxReturn;
 80127cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80127ce:	4618      	mov	r0, r3
 80127d0:	3734      	adds	r7, #52	@ 0x34
 80127d2:	46bd      	mov	sp, r7
 80127d4:	bd90      	pop	{r4, r7, pc}
 80127d6:	bf00      	nop
 80127d8:	080251f0 	.word	0x080251f0
 80127dc:	08025230 	.word	0x08025230
 80127e0:	08025234 	.word	0x08025234
 80127e4:	08025238 	.word	0x08025238
 80127e8:	08025268 	.word	0x08025268

080127ec <prvTCPMakeSurePrepared>:
 *         call prvTCPPrepareConnect() to continue the preparation.
 * @param[in] pxSocket The socket that wants to connect.
 * @return Returns pdTRUE if the connection is prepared, i.e. the MAC-
 *         address of the peer is already known. */
    static BaseType_t prvTCPMakeSurePrepared( FreeRTOS_Socket_t * pxSocket )
    {
 80127ec:	b580      	push	{r7, lr}
 80127ee:	b084      	sub	sp, #16
 80127f0:	af00      	add	r7, sp, #0
 80127f2:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 80127f4:	2301      	movs	r3, #1
 80127f6:	60fb      	str	r3, [r7, #12]

        if( pxSocket->u.xTCP.bits.bConnPrepared == pdFALSE_UNSIGNED )
 80127f8:	687b      	ldr	r3, [r7, #4]
 80127fa:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80127fe:	f003 0308 	and.w	r3, r3, #8
 8012802:	b2db      	uxtb	r3, r3
 8012804:	2b00      	cmp	r3, #0
 8012806:	d107      	bne.n	8012818 <prvTCPMakeSurePrepared+0x2c>
        {
            if( prvTCPPrepareConnect( pxSocket ) != pdTRUE )
 8012808:	6878      	ldr	r0, [r7, #4]
 801280a:	f000 fa51 	bl	8012cb0 <prvTCPPrepareConnect>
 801280e:	4603      	mov	r3, r0
 8012810:	2b01      	cmp	r3, #1
 8012812:	d001      	beq.n	8012818 <prvTCPMakeSurePrepared+0x2c>
            {
                /* The preparation of a connection ( ARP resolution ) is not yet ready. */
                xReturn = pdFALSE;
 8012814:	2300      	movs	r3, #0
 8012816:	60fb      	str	r3, [r7, #12]
            }
        }

        return xReturn;
 8012818:	68fb      	ldr	r3, [r7, #12]
    }
 801281a:	4618      	mov	r0, r3
 801281c:	3710      	adds	r7, #16
 801281e:	46bd      	mov	sp, r7
 8012820:	bd80      	pop	{r7, pc}
	...

08012824 <prvTCPSendPacket>:
 * @return Number of bytes to be sent.
 *
 * @note It is only called by xTCPSocketCheck().
 */
    int32_t prvTCPSendPacket( FreeRTOS_Socket_t * pxSocket )
    {
 8012824:	b580      	push	{r7, lr}
 8012826:	b088      	sub	sp, #32
 8012828:	af00      	add	r7, sp, #0
 801282a:	6078      	str	r0, [r7, #4]
        int32_t lResult = 0;
 801282c:	2300      	movs	r3, #0
 801282e:	61fb      	str	r3, [r7, #28]
        UBaseType_t uxOptionsLength, uxIntermediateResult = 0;
 8012830:	2300      	movs	r3, #0
 8012832:	61bb      	str	r3, [r7, #24]
        NetworkBufferDescriptor_t * pxNetworkBuffer;

        if( pxSocket->u.xTCP.eTCPState != eCONNECT_SYN )
 8012834:	687b      	ldr	r3, [r7, #4]
 8012836:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 801283a:	2b02      	cmp	r3, #2
 801283c:	d010      	beq.n	8012860 <prvTCPSendPacket+0x3c>
        {
            /* The connection is in a state other than SYN. */
            pxNetworkBuffer = NULL;
 801283e:	2300      	movs	r3, #0
 8012840:	60fb      	str	r3, [r7, #12]

            /* prvTCPSendRepeated() will only create a network buffer if necessary,
             * i.e. when data must be sent to the peer. */
            lResult = prvTCPSendRepeated( pxSocket, &pxNetworkBuffer );
 8012842:	f107 030c 	add.w	r3, r7, #12
 8012846:	4619      	mov	r1, r3
 8012848:	6878      	ldr	r0, [r7, #4]
 801284a:	f000 f859 	bl	8012900 <prvTCPSendRepeated>
 801284e:	61f8      	str	r0, [r7, #28]

            if( pxNetworkBuffer != NULL )
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	2b00      	cmp	r3, #0
 8012854:	d04d      	beq.n	80128f2 <prvTCPSendPacket+0xce>
            {
                vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012856:	68fb      	ldr	r3, [r7, #12]
 8012858:	4618      	mov	r0, r3
 801285a:	f003 ffb5 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
 801285e:	e048      	b.n	80128f2 <prvTCPSendPacket+0xce>
            }
        }
        else
        {
            if( pxSocket->u.xTCP.ucRepCount >= 3U )
 8012860:	687b      	ldr	r3, [r7, #4]
 8012862:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8012866:	2b02      	cmp	r3, #2
 8012868:	d90d      	bls.n	8012886 <prvTCPSendPacket+0x62>
            {
                /* The connection is in the SYN status. The packet will be repeated
                 * to most 3 times.  When there is no response, the socket get the
                 * status 'eCLOSE_WAIT'. */
                FreeRTOS_debug_printf( ( "Connect: giving up %xip:%u\n",
 801286a:	687b      	ldr	r3, [r7, #4]
 801286c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8012874:	461a      	mov	r2, r3
 8012876:	4821      	ldr	r0, [pc, #132]	@ (80128fc <prvTCPSendPacket+0xd8>)
 8012878:	f00e fa02 	bl	8020c80 <lUDPLoggingPrintf>
                                         ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                         pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                vTCPStateChange( pxSocket, eCLOSE_WAIT );
 801287c:	2108      	movs	r1, #8
 801287e:	6878      	ldr	r0, [r7, #4]
 8012880:	f7fd fe3e 	bl	8010500 <vTCPStateChange>
 8012884:	e035      	b.n	80128f2 <prvTCPSendPacket+0xce>
            }
            else if( prvTCPMakeSurePrepared( pxSocket ) == pdTRUE )
 8012886:	6878      	ldr	r0, [r7, #4]
 8012888:	f7ff ffb0 	bl	80127ec <prvTCPMakeSurePrepared>
 801288c:	4603      	mov	r3, r0
 801288e:	2b01      	cmp	r3, #1
 8012890:	d12f      	bne.n	80128f2 <prvTCPSendPacket+0xce>
                 * the Ethernet address of the peer or the gateway is found. */

                /* MISRA Ref 11.3.1 [Misaligned access] */
                /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                /* coverity[misra_c_2012_rule_11_3_violation] */
                pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8012892:	6878      	ldr	r0, [r7, #4]
 8012894:	f7f6 fda2 	bl	80093dc <uxIPHeaderSizeSocket>
 8012898:	4603      	mov	r3, r0
 801289a:	330e      	adds	r3, #14
 801289c:	33a0      	adds	r3, #160	@ 0xa0
 801289e:	687a      	ldr	r2, [r7, #4]
 80128a0:	4413      	add	r3, r2
 80128a2:	330a      	adds	r3, #10
 80128a4:	617b      	str	r3, [r7, #20]

                /* About to send a SYN packet.  Call prvSetSynAckOptions() to set
                 * the proper options: The size of MSS and whether SACK's are
                 * allowed. */
                uxOptionsLength = prvSetSynAckOptions( pxSocket, &( pxProtocolHeaders->xTCPHeader ) );
 80128a6:	697b      	ldr	r3, [r7, #20]
 80128a8:	4619      	mov	r1, r3
 80128aa:	6878      	ldr	r0, [r7, #4]
 80128ac:	f000 fa4c 	bl	8012d48 <prvSetSynAckOptions>
 80128b0:	6138      	str	r0, [r7, #16]

                /* Return the number of bytes to be sent. */
                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 80128b2:	6878      	ldr	r0, [r7, #4]
 80128b4:	f7f6 fd92 	bl	80093dc <uxIPHeaderSizeSocket>
 80128b8:	4602      	mov	r2, r0
 80128ba:	693b      	ldr	r3, [r7, #16]
 80128bc:	4413      	add	r3, r2
 80128be:	3314      	adds	r3, #20
 80128c0:	61bb      	str	r3, [r7, #24]
                lResult = ( int32_t ) uxIntermediateResult;
 80128c2:	69bb      	ldr	r3, [r7, #24]
 80128c4:	61fb      	str	r3, [r7, #28]

                /* Set the TCP offset field:  ipSIZE_OF_TCP_HEADER equals 20 and
                 * uxOptionsLength is always a multiple of 4.  The complete expression
                 * would be:
                 * ucTCPOffset = ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) / 4 ) << 4 */
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80128c6:	693b      	ldr	r3, [r7, #16]
 80128c8:	b2db      	uxtb	r3, r3
 80128ca:	3314      	adds	r3, #20
 80128cc:	b2db      	uxtb	r3, r3
 80128ce:	009b      	lsls	r3, r3, #2
 80128d0:	b2da      	uxtb	r2, r3
 80128d2:	697b      	ldr	r3, [r7, #20]
 80128d4:	731a      	strb	r2, [r3, #12]

                /* Repeat Count is used for a connecting socket, to limit the number
                 * of tries. */
                pxSocket->u.xTCP.ucRepCount++;
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80128dc:	3301      	adds	r3, #1
 80128de:	b2da      	uxtb	r2, r3
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

                /* Send the SYN message to make a connection.  The messages is
                 * stored in the socket field 'xPacket'.  It will be wrapped in a
                 * pseudo network buffer descriptor before it will be sent. */
                prvTCPReturnPacket( pxSocket, NULL, ( uint32_t ) lResult, pdFALSE );
 80128e6:	69fa      	ldr	r2, [r7, #28]
 80128e8:	2300      	movs	r3, #0
 80128ea:	2100      	movs	r1, #0
 80128ec:	6878      	ldr	r0, [r7, #4]
 80128ee:	f000 f837 	bl	8012960 <prvTCPReturnPacket>
                /* Nothing to do. */
            }
        }

        /* Return the total number of bytes sent. */
        return lResult;
 80128f2:	69fb      	ldr	r3, [r7, #28]
    }
 80128f4:	4618      	mov	r0, r3
 80128f6:	3720      	adds	r7, #32
 80128f8:	46bd      	mov	sp, r7
 80128fa:	bd80      	pop	{r7, pc}
 80128fc:	08025288 	.word	0x08025288

08012900 <prvTCPSendRepeated>:
 *
 * @return Total number of bytes sent.
 */
    int32_t prvTCPSendRepeated( FreeRTOS_Socket_t * pxSocket,
                                NetworkBufferDescriptor_t ** ppxNetworkBuffer )
    {
 8012900:	b580      	push	{r7, lr}
 8012902:	b086      	sub	sp, #24
 8012904:	af00      	add	r7, sp, #0
 8012906:	6078      	str	r0, [r7, #4]
 8012908:	6039      	str	r1, [r7, #0]
        UBaseType_t uxIndex;
        int32_t lResult = 0;
 801290a:	2300      	movs	r3, #0
 801290c:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = 0U;
 801290e:	2300      	movs	r3, #0
 8012910:	60fb      	str	r3, [r7, #12]
        int32_t xSendLength;

        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8012912:	2300      	movs	r3, #0
 8012914:	617b      	str	r3, [r7, #20]
 8012916:	e019      	b.n	801294c <prvTCPSendRepeated+0x4c>
        {
            /* prvTCPPrepareSend() might allocate a network buffer if there is data
             * to be sent. */
            xSendLength = prvTCPPrepareSend( pxSocket, ppxNetworkBuffer, uxOptionsLength );
 8012918:	68fa      	ldr	r2, [r7, #12]
 801291a:	6839      	ldr	r1, [r7, #0]
 801291c:	6878      	ldr	r0, [r7, #4]
 801291e:	f000 fb7d 	bl	801301c <prvTCPPrepareSend>
 8012922:	60b8      	str	r0, [r7, #8]

            if( xSendLength <= 0 )
 8012924:	68bb      	ldr	r3, [r7, #8]
 8012926:	2b00      	cmp	r3, #0
 8012928:	dd14      	ble.n	8012954 <prvTCPSendRepeated+0x54>
            {
                break;
            }

            /* And return the packet to the peer. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 801292a:	683b      	ldr	r3, [r7, #0]
 801292c:	6819      	ldr	r1, [r3, #0]
 801292e:	68ba      	ldr	r2, [r7, #8]
 8012930:	2301      	movs	r3, #1
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f000 f814 	bl	8012960 <prvTCPReturnPacket>

            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                *ppxNetworkBuffer = NULL;
 8012938:	683b      	ldr	r3, [r7, #0]
 801293a:	2200      	movs	r2, #0
 801293c:	601a      	str	r2, [r3, #0]
            }
            #endif /* ipconfigZERO_COPY_TX_DRIVER */

            lResult += xSendLength;
 801293e:	693a      	ldr	r2, [r7, #16]
 8012940:	68bb      	ldr	r3, [r7, #8]
 8012942:	4413      	add	r3, r2
 8012944:	613b      	str	r3, [r7, #16]
        for( uxIndex = 0U; uxIndex < ( UBaseType_t ) SEND_REPEATED_COUNT; uxIndex++ )
 8012946:	697b      	ldr	r3, [r7, #20]
 8012948:	3301      	adds	r3, #1
 801294a:	617b      	str	r3, [r7, #20]
 801294c:	697b      	ldr	r3, [r7, #20]
 801294e:	2b07      	cmp	r3, #7
 8012950:	d9e2      	bls.n	8012918 <prvTCPSendRepeated+0x18>
 8012952:	e000      	b.n	8012956 <prvTCPSendRepeated+0x56>
                break;
 8012954:	bf00      	nop
        }

        /* Return the total number of bytes sent. */
        return lResult;
 8012956:	693b      	ldr	r3, [r7, #16]
    }
 8012958:	4618      	mov	r0, r3
 801295a:	3718      	adds	r7, #24
 801295c:	46bd      	mov	sp, r7
 801295e:	bd80      	pop	{r7, pc}

08012960 <prvTCPReturnPacket>:
 */
    void prvTCPReturnPacket( FreeRTOS_Socket_t * pxSocket,
                             NetworkBufferDescriptor_t * pxDescriptor,
                             uint32_t ulLen,
                             BaseType_t xReleaseAfterSend )
    {
 8012960:	b580      	push	{r7, lr}
 8012962:	b086      	sub	sp, #24
 8012964:	af00      	add	r7, sp, #0
 8012966:	60f8      	str	r0, [r7, #12]
 8012968:	60b9      	str	r1, [r7, #8]
 801296a:	607a      	str	r2, [r7, #4]
 801296c:	603b      	str	r3, [r7, #0]
        const NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 801296e:	68bb      	ldr	r3, [r7, #8]
 8012970:	613b      	str	r3, [r7, #16]
        BaseType_t xIsIPv6 = pdFALSE;
 8012972:	2300      	movs	r3, #0
 8012974:	617b      	str	r3, [r7, #20]

        if( pxNetworkBuffer != NULL )
 8012976:	693b      	ldr	r3, [r7, #16]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d008      	beq.n	801298e <prvTCPReturnPacket+0x2e>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizePacket( pxNetworkBuffer ) == ipSIZE_OF_IPv6_HEADER )
 801297c:	6938      	ldr	r0, [r7, #16]
 801297e:	f7f6 fd13 	bl	80093a8 <uxIPHeaderSizePacket>
 8012982:	4603      	mov	r3, r0
 8012984:	2b28      	cmp	r3, #40	@ 0x28
 8012986:	d113      	bne.n	80129b0 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 8012988:	2301      	movs	r3, #1
 801298a:	617b      	str	r3, [r7, #20]
 801298c:	e010      	b.n	80129b0 <prvTCPReturnPacket+0x50>
                }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else if( pxSocket != NULL )
 801298e:	68fb      	ldr	r3, [r7, #12]
 8012990:	2b00      	cmp	r3, #0
 8012992:	d008      	beq.n	80129a6 <prvTCPReturnPacket+0x46>
        {
            #if ( ipconfigUSE_IPv6 != 0 )
                if( uxIPHeaderSizeSocket( pxSocket ) == ipSIZE_OF_IPv6_HEADER )
 8012994:	68f8      	ldr	r0, [r7, #12]
 8012996:	f7f6 fd21 	bl	80093dc <uxIPHeaderSizeSocket>
 801299a:	4603      	mov	r3, r0
 801299c:	2b28      	cmp	r3, #40	@ 0x28
 801299e:	d107      	bne.n	80129b0 <prvTCPReturnPacket+0x50>
                {
                    xIsIPv6 = pdTRUE;
 80129a0:	2301      	movs	r3, #1
 80129a2:	617b      	str	r3, [r7, #20]
 80129a4:	e004      	b.n	80129b0 <prvTCPReturnPacket+0x50>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */
        }
        else
        {
            /* prvTCPReturnPacket_IPVx() needs either a network buffer, or a socket. */
            configASSERT( pdFALSE );
 80129a6:	f240 1119 	movw	r1, #281	@ 0x119
 80129aa:	480c      	ldr	r0, [pc, #48]	@ (80129dc <prvTCPReturnPacket+0x7c>)
 80129ac:	f7ee fd60 	bl	8001470 <vAssertCalled>
        }

        #if ( ipconfigUSE_IPv6 != 0 )
            if( xIsIPv6 == pdTRUE )
 80129b0:	697b      	ldr	r3, [r7, #20]
 80129b2:	2b01      	cmp	r3, #1
 80129b4:	d105      	bne.n	80129c2 <prvTCPReturnPacket+0x62>
            {
                prvTCPReturnPacket_IPV6( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 80129b6:	683b      	ldr	r3, [r7, #0]
 80129b8:	687a      	ldr	r2, [r7, #4]
 80129ba:	68b9      	ldr	r1, [r7, #8]
 80129bc:	68f8      	ldr	r0, [r7, #12]
 80129be:	f001 fa61 	bl	8013e84 <prvTCPReturnPacket_IPV6>
            }
        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

        #if ( ipconfigUSE_IPv4 != 0 )
            if( xIsIPv6 == pdFALSE )
 80129c2:	697b      	ldr	r3, [r7, #20]
 80129c4:	2b00      	cmp	r3, #0
 80129c6:	d105      	bne.n	80129d4 <prvTCPReturnPacket+0x74>
            {
                prvTCPReturnPacket_IPV4( pxSocket, pxDescriptor, ulLen, xReleaseAfterSend );
 80129c8:	683b      	ldr	r3, [r7, #0]
 80129ca:	687a      	ldr	r2, [r7, #4]
 80129cc:	68b9      	ldr	r1, [r7, #8]
 80129ce:	68f8      	ldr	r0, [r7, #12]
 80129d0:	f000 ff18 	bl	8013804 <prvTCPReturnPacket_IPV4>
            }
        #endif /* ( ipconfigUSE_IPv4 != 0 ) */
    }
 80129d4:	bf00      	nop
 80129d6:	3718      	adds	r7, #24
 80129d8:	46bd      	mov	sp, r7
 80129da:	bd80      	pop	{r7, pc}
 80129dc:	080252a4 	.word	0x080252a4

080129e0 <prvTCPReturn_CheckTCPWindow>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_CheckTCPWindow( FreeRTOS_Socket_t * pxSocket,
                                      const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      size_t uxIPHeaderSize )
    {
 80129e0:	b580      	push	{r7, lr}
 80129e2:	b08a      	sub	sp, #40	@ 0x28
 80129e4:	af00      	add	r7, sp, #0
 80129e6:	60f8      	str	r0, [r7, #12]
 80129e8:	60b9      	str	r1, [r7, #8]
 80129ea:	607a      	str	r2, [r7, #4]
        /* Calculate the space in the RX buffer in order to advertise the
         * size of this socket's reception window. */
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80129f2:	61bb      	str	r3, [r7, #24]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80129f8:	687b      	ldr	r3, [r7, #4]
 80129fa:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80129fc:	4413      	add	r3, r2
 80129fe:	617b      	str	r3, [r7, #20]

        if( pxSocket->u.xTCP.rxStream != NULL )
 8012a00:	68fb      	ldr	r3, [r7, #12]
 8012a02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012a06:	2b00      	cmp	r3, #0
 8012a08:	d007      	beq.n	8012a1a <prvTCPReturn_CheckTCPWindow+0x3a>
        {
            /* An RX stream was created already, see how much space is
             * available. */
            ulFrontSpace = ( uint32_t ) uxStreamBufferFrontSpace( pxSocket->u.xTCP.rxStream );
 8012a0a:	68fb      	ldr	r3, [r7, #12]
 8012a0c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012a10:	4618      	mov	r0, r3
 8012a12:	f7fd fa9f 	bl	800ff54 <uxStreamBufferFrontSpace>
 8012a16:	6278      	str	r0, [r7, #36]	@ 0x24
 8012a18:	e003      	b.n	8012a22 <prvTCPReturn_CheckTCPWindow+0x42>
        }
        else
        {
            /* No RX stream has been created, the full stream size is
             * available. */
            ulFrontSpace = ( uint32_t ) pxSocket->u.xTCP.uxRxStreamSize;
 8012a1a:	68fb      	ldr	r3, [r7, #12]
 8012a1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012a20:	627b      	str	r3, [r7, #36]	@ 0x24
        }

        /* Take the minimum of the RX buffer space and the RX window size. */
        ulSpace = FreeRTOS_min_uint32( pxTCPWindow->xSize.ulRxWindowLength, ulFrontSpace );
 8012a22:	69bb      	ldr	r3, [r7, #24]
 8012a24:	685b      	ldr	r3, [r3, #4]
 8012a26:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8012a28:	4618      	mov	r0, r3
 8012a2a:	f7f7 fa0b 	bl	8009e44 <FreeRTOS_min_uint32>
 8012a2e:	6238      	str	r0, [r7, #32]

        if( ( pxSocket->u.xTCP.bits.bLowWater != pdFALSE_UNSIGNED ) || ( pxSocket->u.xTCP.bits.bRxStopped != pdFALSE_UNSIGNED ) )
 8012a30:	68fb      	ldr	r3, [r7, #12]
 8012a32:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8012a36:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8012a3a:	b2db      	uxtb	r3, r3
 8012a3c:	2b00      	cmp	r3, #0
 8012a3e:	d107      	bne.n	8012a50 <prvTCPReturn_CheckTCPWindow+0x70>
 8012a40:	68fb      	ldr	r3, [r7, #12]
 8012a42:	f893 306a 	ldrb.w	r3, [r3, #106]	@ 0x6a
 8012a46:	f003 0304 	and.w	r3, r3, #4
 8012a4a:	b2db      	uxtb	r3, r3
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d001      	beq.n	8012a54 <prvTCPReturn_CheckTCPWindow+0x74>
        {
            /* The low-water mark was reached, meaning there was little
             * space left.  The socket will wait until the application has read
             * or flushed the incoming data, and 'zero-window' will be
             * advertised. */
            ulSpace = 0U;
 8012a50:	2300      	movs	r3, #0
 8012a52:	623b      	str	r3, [r7, #32]
        }

        /* If possible, advertise an RX window size of at least 1 MSS, otherwise
         * the peer might start 'zero window probing', i.e. sending small packets
         * (1, 2, 4, 8... bytes). */
        if( ( ulSpace < pxSocket->u.xTCP.usMSS ) && ( ulFrontSpace >= pxSocket->u.xTCP.usMSS ) )
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012a5a:	461a      	mov	r2, r3
 8012a5c:	6a3b      	ldr	r3, [r7, #32]
 8012a5e:	4293      	cmp	r3, r2
 8012a60:	d20a      	bcs.n	8012a78 <prvTCPReturn_CheckTCPWindow+0x98>
 8012a62:	68fb      	ldr	r3, [r7, #12]
 8012a64:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012a68:	461a      	mov	r2, r3
 8012a6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012a6c:	4293      	cmp	r3, r2
 8012a6e:	d303      	bcc.n	8012a78 <prvTCPReturn_CheckTCPWindow+0x98>
        {
            ulSpace = pxSocket->u.xTCP.usMSS;
 8012a70:	68fb      	ldr	r3, [r7, #12]
 8012a72:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012a76:	623b      	str	r3, [r7, #32]
        }

        /* Avoid overflow of the 16-bit win field. */
        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            ulWinSize = ( ulSpace >> pxSocket->u.xTCP.ucMyWinScaleFactor );
 8012a78:	68fb      	ldr	r3, [r7, #12]
 8012a7a:	f893 3105 	ldrb.w	r3, [r3, #261]	@ 0x105
 8012a7e:	461a      	mov	r2, r3
 8012a80:	6a3b      	ldr	r3, [r7, #32]
 8012a82:	40d3      	lsrs	r3, r2
 8012a84:	61fb      	str	r3, [r7, #28]
        {
            ulWinSize = ulSpace;
        }
        #endif

        if( ulWinSize > 0xfffcU )
 8012a86:	69fb      	ldr	r3, [r7, #28]
 8012a88:	f64f 72fc 	movw	r2, #65532	@ 0xfffc
 8012a8c:	4293      	cmp	r3, r2
 8012a8e:	d902      	bls.n	8012a96 <prvTCPReturn_CheckTCPWindow+0xb6>
        {
            ulWinSize = 0xfffcU;
 8012a90:	f64f 73fc 	movw	r3, #65532	@ 0xfffc
 8012a94:	61fb      	str	r3, [r7, #28]
        }

        pxProtocolHeaders->xTCPHeader.usWindow = FreeRTOS_htons( ( uint16_t ) ulWinSize );
 8012a96:	69fb      	ldr	r3, [r7, #28]
 8012a98:	b29b      	uxth	r3, r3
 8012a9a:	021b      	lsls	r3, r3, #8
 8012a9c:	b21a      	sxth	r2, r3
 8012a9e:	69fb      	ldr	r3, [r7, #28]
 8012aa0:	b29b      	uxth	r3, r3
 8012aa2:	0a1b      	lsrs	r3, r3, #8
 8012aa4:	b29b      	uxth	r3, r3
 8012aa6:	b21b      	sxth	r3, r3
 8012aa8:	4313      	orrs	r3, r2
 8012aaa:	b21b      	sxth	r3, r3
 8012aac:	b29a      	uxth	r2, r3
 8012aae:	697b      	ldr	r3, [r7, #20]
 8012ab0:	81da      	strh	r2, [r3, #14]

        /* The new window size has been advertised, switch off the flag. */
        pxSocket->u.xTCP.bits.bWinChange = pdFALSE_UNSIGNED;
 8012ab2:	68fa      	ldr	r2, [r7, #12]
 8012ab4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012ab8:	f36f 0300 	bfc	r3, #0, #1
 8012abc:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Later on, when deciding to delay an ACK, a precise estimate is needed
         * of the free RX space.  At this moment, 'ulHighestRxAllowed' would be the
         * highest sequence number minus 1 that the socket will accept. */
        pxSocket->u.xTCP.ulHighestRxAllowed = pxTCPWindow->rx.ulCurrentSequenceNumber + ulSpace;
 8012ac0:	69bb      	ldr	r3, [r7, #24]
 8012ac2:	691a      	ldr	r2, [r3, #16]
 8012ac4:	6a3b      	ldr	r3, [r7, #32]
 8012ac6:	441a      	add	r2, r3
 8012ac8:	68fb      	ldr	r3, [r7, #12]
 8012aca:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
 8012acc:	bf00      	nop
 8012ace:	3728      	adds	r7, #40	@ 0x28
 8012ad0:	46bd      	mov	sp, r7
 8012ad2:	bd80      	pop	{r7, pc}

08012ad4 <prvTCPReturn_SetSequenceNumber>:
 */
    void prvTCPReturn_SetSequenceNumber( FreeRTOS_Socket_t * pxSocket,
                                         const NetworkBufferDescriptor_t * pxNetworkBuffer,
                                         size_t uxIPHeaderSize,
                                         uint32_t ulLen )
    {
 8012ad4:	b580      	push	{r7, lr}
 8012ad6:	b088      	sub	sp, #32
 8012ad8:	af00      	add	r7, sp, #0
 8012ada:	60f8      	str	r0, [r7, #12]
 8012adc:	60b9      	str	r1, [r7, #8]
 8012ade:	607a      	str	r2, [r7, #4]
 8012ae0:	603b      	str	r3, [r7, #0]
        ProtocolHeaders_t * pxProtocolHeaders;
        const TCPWindow_t * pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8012ae8:	61fb      	str	r3, [r7, #28]

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                              &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] ) );
 8012aea:	68bb      	ldr	r3, [r7, #8]
 8012aec:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012aee:	687b      	ldr	r3, [r7, #4]
 8012af0:	330e      	adds	r3, #14
        pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8012af2:	4413      	add	r3, r2
 8012af4:	61bb      	str	r3, [r7, #24]
        #if ( ipconfigTCP_KEEP_ALIVE == 1 )
            if( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED )
 8012af6:	68fb      	ldr	r3, [r7, #12]
 8012af8:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8012afc:	f003 0302 	and.w	r3, r3, #2
 8012b00:	b2db      	uxtb	r3, r3
 8012b02:	2b00      	cmp	r3, #0
 8012b04:	d029      	beq.n	8012b5a <prvTCPReturn_SetSequenceNumber+0x86>
            {
                /* Sending a keep-alive packet, send the current sequence number
                 * minus 1, which will be recognised as a keep-alive packet and
                 * responded to by acknowledging the last byte. */
                pxSocket->u.xTCP.bits.bSendKeepAlive = pdFALSE_UNSIGNED;
 8012b06:	68fa      	ldr	r2, [r7, #12]
 8012b08:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012b0c:	f36f 0341 	bfc	r3, #1, #1
 8012b10:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWaitKeepAlive = pdTRUE_UNSIGNED;
 8012b14:	68fa      	ldr	r2, [r7, #12]
 8012b16:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8012b1a:	f043 0304 	orr.w	r3, r3, #4
 8012b1e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber - 1U;
 8012b22:	68fb      	ldr	r3, [r7, #12]
 8012b24:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012b28:	1e5a      	subs	r2, r3, #1
 8012b2a:	69bb      	ldr	r3, [r7, #24]
 8012b2c:	605a      	str	r2, [r3, #4]
                pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxProtocolHeaders->xTCPHeader.ulSequenceNumber );
 8012b2e:	69bb      	ldr	r3, [r7, #24]
 8012b30:	685b      	ldr	r3, [r3, #4]
 8012b32:	061a      	lsls	r2, r3, #24
 8012b34:	69bb      	ldr	r3, [r7, #24]
 8012b36:	685b      	ldr	r3, [r3, #4]
 8012b38:	021b      	lsls	r3, r3, #8
 8012b3a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012b3e:	431a      	orrs	r2, r3
 8012b40:	69bb      	ldr	r3, [r7, #24]
 8012b42:	685b      	ldr	r3, [r3, #4]
 8012b44:	0a1b      	lsrs	r3, r3, #8
 8012b46:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012b4a:	431a      	orrs	r2, r3
 8012b4c:	69bb      	ldr	r3, [r7, #24]
 8012b4e:	685b      	ldr	r3, [r3, #4]
 8012b50:	0e1b      	lsrs	r3, r3, #24
 8012b52:	431a      	orrs	r2, r3
 8012b54:	69bb      	ldr	r3, [r7, #24]
 8012b56:	605a      	str	r2, [r3, #4]
 8012b58:	e043      	b.n	8012be2 <prvTCPReturn_SetSequenceNumber+0x10e>
            }
            else
        #endif /* if ( ipconfigTCP_KEEP_ALIVE == 1 ) */
        {
            pxProtocolHeaders->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber );
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012b60:	061a      	lsls	r2, r3, #24
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012b68:	021b      	lsls	r3, r3, #8
 8012b6a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012b6e:	431a      	orrs	r2, r3
 8012b70:	68fb      	ldr	r3, [r7, #12]
 8012b72:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012b76:	0a1b      	lsrs	r3, r3, #8
 8012b78:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012b7c:	431a      	orrs	r2, r3
 8012b7e:	68fb      	ldr	r3, [r7, #12]
 8012b80:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
 8012b84:	0e1b      	lsrs	r3, r3, #24
 8012b86:	431a      	orrs	r2, r3
 8012b88:	69bb      	ldr	r3, [r7, #24]
 8012b8a:	605a      	str	r2, [r3, #4]

            if( ( pxProtocolHeaders->xTCPHeader.ucTCPFlags & ( uint8_t ) tcpTCP_FLAG_FIN ) != 0U )
 8012b8c:	69bb      	ldr	r3, [r7, #24]
 8012b8e:	7b5b      	ldrb	r3, [r3, #13]
 8012b90:	f003 0301 	and.w	r3, r3, #1
 8012b94:	2b00      	cmp	r3, #0
 8012b96:	d024      	beq.n	8012be2 <prvTCPReturn_SetSequenceNumber+0x10e>
            {
                /* Suppress FIN in case this packet carries earlier data to be
                 * retransmitted. */
                uint32_t ulDataLen = ( uint32_t ) ( ulLen - ( ipSIZE_OF_TCP_HEADER + uxIPHeaderSizeSocket( pxSocket ) ) );
 8012b98:	68f8      	ldr	r0, [r7, #12]
 8012b9a:	f7f6 fc1f 	bl	80093dc <uxIPHeaderSizeSocket>
 8012b9e:	4602      	mov	r2, r0
 8012ba0:	683b      	ldr	r3, [r7, #0]
 8012ba2:	1a9b      	subs	r3, r3, r2
 8012ba4:	3b14      	subs	r3, #20
 8012ba6:	617b      	str	r3, [r7, #20]

                if( ( pxTCPWindow->ulOurSequenceNumber + ulDataLen ) != pxTCPWindow->tx.ulFINSequenceNumber )
 8012ba8:	69fb      	ldr	r3, [r7, #28]
 8012baa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012bac:	697b      	ldr	r3, [r7, #20]
 8012bae:	441a      	add	r2, r3
 8012bb0:	69fb      	ldr	r3, [r7, #28]
 8012bb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012bb4:	429a      	cmp	r2, r3
 8012bb6:	d014      	beq.n	8012be2 <prvTCPReturn_SetSequenceNumber+0x10e>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_FIN );
 8012bb8:	69bb      	ldr	r3, [r7, #24]
 8012bba:	7b5b      	ldrb	r3, [r3, #13]
 8012bbc:	f023 0301 	bic.w	r3, r3, #1
 8012bc0:	b2da      	uxtb	r2, r3
 8012bc2:	69bb      	ldr	r3, [r7, #24]
 8012bc4:	735a      	strb	r2, [r3, #13]
                    FreeRTOS_debug_printf( ( "Suppress FIN for %u + %u < %u\n",
 8012bc6:	69fb      	ldr	r3, [r7, #28]
 8012bc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8012bca:	69fb      	ldr	r3, [r7, #28]
 8012bcc:	69db      	ldr	r3, [r3, #28]
 8012bce:	1ad1      	subs	r1, r2, r3
 8012bd0:	69fb      	ldr	r3, [r7, #28]
 8012bd2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8012bd4:	69fb      	ldr	r3, [r7, #28]
 8012bd6:	69db      	ldr	r3, [r3, #28]
 8012bd8:	1ad3      	subs	r3, r2, r3
 8012bda:	697a      	ldr	r2, [r7, #20]
 8012bdc:	480d      	ldr	r0, [pc, #52]	@ (8012c14 <prvTCPReturn_SetSequenceNumber+0x140>)
 8012bde:	f00e f84f 	bl	8020c80 <lUDPLoggingPrintf>
                }
            }
        }

        /* Tell which sequence number is expected next time */
        pxProtocolHeaders->xTCPHeader.ulAckNr = FreeRTOS_htonl( pxTCPWindow->rx.ulCurrentSequenceNumber );
 8012be2:	69fb      	ldr	r3, [r7, #28]
 8012be4:	691b      	ldr	r3, [r3, #16]
 8012be6:	061a      	lsls	r2, r3, #24
 8012be8:	69fb      	ldr	r3, [r7, #28]
 8012bea:	691b      	ldr	r3, [r3, #16]
 8012bec:	021b      	lsls	r3, r3, #8
 8012bee:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012bf2:	431a      	orrs	r2, r3
 8012bf4:	69fb      	ldr	r3, [r7, #28]
 8012bf6:	691b      	ldr	r3, [r3, #16]
 8012bf8:	0a1b      	lsrs	r3, r3, #8
 8012bfa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012bfe:	431a      	orrs	r2, r3
 8012c00:	69fb      	ldr	r3, [r7, #28]
 8012c02:	691b      	ldr	r3, [r3, #16]
 8012c04:	0e1b      	lsrs	r3, r3, #24
 8012c06:	431a      	orrs	r2, r3
 8012c08:	69bb      	ldr	r3, [r7, #24]
 8012c0a:	609a      	str	r2, [r3, #8]
    }
 8012c0c:	bf00      	nop
 8012c0e:	3720      	adds	r7, #32
 8012c10:	46bd      	mov	sp, r7
 8012c12:	bd80      	pop	{r7, pc}
 8012c14:	080252e0 	.word	0x080252e0

08012c18 <prvTCPCreateWindow>:
 *       random starting value, are being synchronized. The sliding window manager
 *       (in FreeRTOS_TCP_WIN.c) needs to know them, along with the Maximum Segment
 *       Size (MSS).
 */
    BaseType_t prvTCPCreateWindow( FreeRTOS_Socket_t * pxSocket )
    {
 8012c18:	b5b0      	push	{r4, r5, r7, lr}
 8012c1a:	b088      	sub	sp, #32
 8012c1c:	af02      	add	r7, sp, #8
 8012c1e:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn;
        uint32_t ulRxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxRxWinSize;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8012c26:	617b      	str	r3, [r7, #20]
        uint32_t ulTxWindowSize = ( uint32_t ) pxSocket->u.xTCP.uxTxWinSize;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	f8d3 311c 	ldr.w	r3, [r3, #284]	@ 0x11c
 8012c2e:	613b      	str	r3, [r7, #16]

        if( xTCPWindowLoggingLevel != 0 )
 8012c30:	4b1d      	ldr	r3, [pc, #116]	@ (8012ca8 <prvTCPCreateWindow+0x90>)
 8012c32:	681b      	ldr	r3, [r3, #0]
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d014      	beq.n	8012c62 <prvTCPCreateWindow+0x4a>
        {
            FreeRTOS_debug_printf( ( "Limits (using): TCP Win size %u Water %u <= %u <= %u\n",
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8012c3e:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8012c42:	fb02 f103 	mul.w	r1, r2, r3
 8012c46:	687b      	ldr	r3, [r7, #4]
 8012c48:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8012c4c:	687b      	ldr	r3, [r7, #4]
 8012c4e:	f8d3 0090 	ldr.w	r0, [r3, #144]	@ 0x90
 8012c52:	687b      	ldr	r3, [r7, #4]
 8012c54:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8012c58:	9300      	str	r3, [sp, #0]
 8012c5a:	4603      	mov	r3, r0
 8012c5c:	4813      	ldr	r0, [pc, #76]	@ (8012cac <prvTCPCreateWindow+0x94>)
 8012c5e:	f00e f80f 	bl	8020c80 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxLittleSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxEnoughSpace,
                                     ( unsigned ) pxSocket->u.xTCP.uxRxStreamSize ) );
        }

        xReturn = xTCPWindowCreate(
 8012c62:	687b      	ldr	r3, [r7, #4]
 8012c64:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8012c6e:	fb02 f103 	mul.w	r1, r2, r3
 8012c72:	693b      	ldr	r3, [r7, #16]
 8012c74:	f240 52b4 	movw	r2, #1460	@ 0x5b4
 8012c78:	fb02 f403 	mul.w	r4, r2, r3
 8012c7c:	687b      	ldr	r3, [r7, #4]
 8012c7e:	f8d3 5130 	ldr.w	r5, [r3, #304]	@ 0x130
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	f8d3 314c 	ldr.w	r3, [r3, #332]	@ 0x14c
            &pxSocket->u.xTCP.xTCPWindow,
            ulRxWindowSize * ipconfigTCP_MSS,
            ulTxWindowSize * ipconfigTCP_MSS,
            pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber,
            pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber,
            ( uint32_t ) pxSocket->u.xTCP.usMSS );
 8012c88:	687a      	ldr	r2, [r7, #4]
 8012c8a:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
        xReturn = xTCPWindowCreate(
 8012c8e:	9201      	str	r2, [sp, #4]
 8012c90:	9300      	str	r3, [sp, #0]
 8012c92:	462b      	mov	r3, r5
 8012c94:	4622      	mov	r2, r4
 8012c96:	f001 ffd7 	bl	8014c48 <xTCPWindowCreate>
 8012c9a:	60f8      	str	r0, [r7, #12]

        return xReturn;
 8012c9c:	68fb      	ldr	r3, [r7, #12]
    }
 8012c9e:	4618      	mov	r0, r3
 8012ca0:	3718      	adds	r7, #24
 8012ca2:	46bd      	mov	sp, r7
 8012ca4:	bdb0      	pop	{r4, r5, r7, pc}
 8012ca6:	bf00      	nop
 8012ca8:	20001348 	.word	0x20001348
 8012cac:	08025300 	.word	0x08025300

08012cb0 <prvTCPPrepareConnect>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
    static BaseType_t prvTCPPrepareConnect( FreeRTOS_Socket_t * pxSocket )
    {
 8012cb0:	b580      	push	{r7, lr}
 8012cb2:	b084      	sub	sp, #16
 8012cb4:	af00      	add	r7, sp, #0
 8012cb6:	6078      	str	r0, [r7, #4]
        BaseType_t xReturn = pdTRUE;
 8012cb8:	2301      	movs	r3, #1
 8012cba:	60fb      	str	r3, [r7, #12]

        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 8012cbc:	687b      	ldr	r3, [r7, #4]
 8012cbe:	7a1b      	ldrb	r3, [r3, #8]
 8012cc0:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8012cc4:	b2db      	uxtb	r3, r3
 8012cc6:	2b00      	cmp	r3, #0
 8012cc8:	d002      	beq.n	8012cd0 <prvTCPPrepareConnect+0x20>
 8012cca:	2b01      	cmp	r3, #1
 8012ccc:	d005      	beq.n	8012cda <prvTCPPrepareConnect+0x2a>
                    break;
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default:   /* LCOV_EXCL_LINE */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 8012cce:	e009      	b.n	8012ce4 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV4( pxSocket );
 8012cd0:	6878      	ldr	r0, [r7, #4]
 8012cd2:	f000 ff69 	bl	8013ba8 <prvTCPPrepareConnect_IPV4>
 8012cd6:	60f8      	str	r0, [r7, #12]
                    break;
 8012cd8:	e004      	b.n	8012ce4 <prvTCPPrepareConnect+0x34>
                    xReturn = prvTCPPrepareConnect_IPV6( pxSocket );
 8012cda:	6878      	ldr	r0, [r7, #4]
 8012cdc:	f001 fab4 	bl	8014248 <prvTCPPrepareConnect_IPV6>
 8012ce0:	60f8      	str	r0, [r7, #12]
                    break;
 8012ce2:	bf00      	nop
        }

        return xReturn;
 8012ce4:	68fb      	ldr	r3, [r7, #12]
    }
 8012ce6:	4618      	mov	r0, r3
 8012ce8:	3710      	adds	r7, #16
 8012cea:	46bd      	mov	sp, r7
 8012cec:	bd80      	pop	{r7, pc}
	...

08012cf0 <prvWinScaleFactor>:
 * @param[in] pxSocket The socket owning the TCP connection.
 *
 * @return The scaling factor.
 */
        static uint8_t prvWinScaleFactor( const FreeRTOS_Socket_t * pxSocket )
        {
 8012cf0:	b580      	push	{r7, lr}
 8012cf2:	b084      	sub	sp, #16
 8012cf4:	af00      	add	r7, sp, #0
 8012cf6:	6078      	str	r0, [r7, #4]
            size_t uxWinSize;
            uint8_t ucFactor;


            /* 'xTCP.uxRxWinSize' is the size of the reception window in units of MSS. */
            uxWinSize = pxSocket->u.xTCP.uxRxWinSize * ( size_t ) pxSocket->u.xTCP.usMSS;
 8012cf8:	687b      	ldr	r3, [r7, #4]
 8012cfa:	f8d3 3118 	ldr.w	r3, [r3, #280]	@ 0x118
 8012cfe:	687a      	ldr	r2, [r7, #4]
 8012d00:	f8b2 2072 	ldrh.w	r2, [r2, #114]	@ 0x72
 8012d04:	fb02 f303 	mul.w	r3, r2, r3
 8012d08:	60fb      	str	r3, [r7, #12]
            ucFactor = 0U;
 8012d0a:	2300      	movs	r3, #0
 8012d0c:	72fb      	strb	r3, [r7, #11]

            while( uxWinSize > 0xffffU )
 8012d0e:	e005      	b.n	8012d1c <prvWinScaleFactor+0x2c>
            {
                /* Divide by two and increase the binary factor by 1. */
                uxWinSize >>= 1;
 8012d10:	68fb      	ldr	r3, [r7, #12]
 8012d12:	085b      	lsrs	r3, r3, #1
 8012d14:	60fb      	str	r3, [r7, #12]
                ucFactor++;
 8012d16:	7afb      	ldrb	r3, [r7, #11]
 8012d18:	3301      	adds	r3, #1
 8012d1a:	72fb      	strb	r3, [r7, #11]
            while( uxWinSize > 0xffffU )
 8012d1c:	68fb      	ldr	r3, [r7, #12]
 8012d1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012d22:	d2f5      	bcs.n	8012d10 <prvWinScaleFactor+0x20>
            }

            FreeRTOS_debug_printf( ( "prvWinScaleFactor: uxRxWinSize %u MSS %u Factor %u\n",
 8012d24:	687b      	ldr	r3, [r7, #4]
 8012d26:	f8d3 1118 	ldr.w	r1, [r3, #280]	@ 0x118
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012d30:	461a      	mov	r2, r3
 8012d32:	7afb      	ldrb	r3, [r7, #11]
 8012d34:	4803      	ldr	r0, [pc, #12]	@ (8012d44 <prvWinScaleFactor+0x54>)
 8012d36:	f00d ffa3 	bl	8020c80 <lUDPLoggingPrintf>
                                     ( unsigned ) pxSocket->u.xTCP.uxRxWinSize,
                                     pxSocket->u.xTCP.usMSS,
                                     ucFactor ) );

            return ucFactor;
 8012d3a:	7afb      	ldrb	r3, [r7, #11]
        }
 8012d3c:	4618      	mov	r0, r3
 8012d3e:	3710      	adds	r7, #16
 8012d40:	46bd      	mov	sp, r7
 8012d42:	bd80      	pop	{r7, pc}
 8012d44:	08025338 	.word	0x08025338

08012d48 <prvSetSynAckOptions>:
 *
 * @note MSS is the net size of the payload, an is always smaller than MTU.
 */
    UBaseType_t prvSetSynAckOptions( FreeRTOS_Socket_t * pxSocket,
                                     TCPHeader_t * pxTCPHeader )
    {
 8012d48:	b580      	push	{r7, lr}
 8012d4a:	b084      	sub	sp, #16
 8012d4c:	af00      	add	r7, sp, #0
 8012d4e:	6078      	str	r0, [r7, #4]
 8012d50:	6039      	str	r1, [r7, #0]
        uint16_t usMSS = pxSocket->u.xTCP.usMSS;
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8012d58:	81fb      	strh	r3, [r7, #14]
        UBaseType_t uxOptionsLength;

        /* We send out the TCP Maximum Segment Size option with our SYN[+ACK]. */

        pxTCPHeader->ucOptdata[ 0 ] = ( uint8_t ) tcpTCP_OPT_MSS;
 8012d5a:	683b      	ldr	r3, [r7, #0]
 8012d5c:	2202      	movs	r2, #2
 8012d5e:	751a      	strb	r2, [r3, #20]
        pxTCPHeader->ucOptdata[ 1 ] = ( uint8_t ) tcpTCP_OPT_MSS_LEN;
 8012d60:	683b      	ldr	r3, [r7, #0]
 8012d62:	2204      	movs	r2, #4
 8012d64:	755a      	strb	r2, [r3, #21]
        pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( usMSS >> 8 );
 8012d66:	89fb      	ldrh	r3, [r7, #14]
 8012d68:	0a1b      	lsrs	r3, r3, #8
 8012d6a:	b29b      	uxth	r3, r3
 8012d6c:	b2da      	uxtb	r2, r3
 8012d6e:	683b      	ldr	r3, [r7, #0]
 8012d70:	759a      	strb	r2, [r3, #22]
        pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( usMSS & 0xffU );
 8012d72:	89fb      	ldrh	r3, [r7, #14]
 8012d74:	b2da      	uxtb	r2, r3
 8012d76:	683b      	ldr	r3, [r7, #0]
 8012d78:	75da      	strb	r2, [r3, #23]

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxSocket->u.xTCP.ucMyWinScaleFactor = prvWinScaleFactor( pxSocket );
 8012d7a:	6878      	ldr	r0, [r7, #4]
 8012d7c:	f7ff ffb8 	bl	8012cf0 <prvWinScaleFactor>
 8012d80:	4603      	mov	r3, r0
 8012d82:	461a      	mov	r2, r3
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	f883 2105 	strb.w	r2, [r3, #261]	@ 0x105

            pxTCPHeader->ucOptdata[ 4 ] = tcpTCP_OPT_NOOP;
 8012d8a:	683b      	ldr	r3, [r7, #0]
 8012d8c:	2201      	movs	r2, #1
 8012d8e:	761a      	strb	r2, [r3, #24]
            pxTCPHeader->ucOptdata[ 5 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT );
 8012d90:	683b      	ldr	r3, [r7, #0]
 8012d92:	2203      	movs	r2, #3
 8012d94:	765a      	strb	r2, [r3, #25]
            pxTCPHeader->ucOptdata[ 6 ] = ( uint8_t ) ( tcpTCP_OPT_WSOPT_LEN );
 8012d96:	683b      	ldr	r3, [r7, #0]
 8012d98:	2203      	movs	r2, #3
 8012d9a:	769a      	strb	r2, [r3, #26]
            pxTCPHeader->ucOptdata[ 7 ] = ( uint8_t ) pxSocket->u.xTCP.ucMyWinScaleFactor;
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	f893 2105 	ldrb.w	r2, [r3, #261]	@ 0x105
 8012da2:	683b      	ldr	r3, [r7, #0]
 8012da4:	76da      	strb	r2, [r3, #27]
            uxOptionsLength = 8U;
 8012da6:	2308      	movs	r3, #8
 8012da8:	60bb      	str	r3, [r7, #8]
        }
        #endif /* if ( ipconfigUSE_TCP_WIN != 0 ) */

        #if ( ipconfigUSE_TCP_WIN != 0 )
        {
            pxTCPHeader->ucOptdata[ uxOptionsLength ] = tcpTCP_OPT_NOOP;
 8012daa:	683a      	ldr	r2, [r7, #0]
 8012dac:	68bb      	ldr	r3, [r7, #8]
 8012dae:	4413      	add	r3, r2
 8012db0:	3314      	adds	r3, #20
 8012db2:	2201      	movs	r2, #1
 8012db4:	701a      	strb	r2, [r3, #0]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 1U ] = tcpTCP_OPT_NOOP;
 8012db6:	68bb      	ldr	r3, [r7, #8]
 8012db8:	3301      	adds	r3, #1
 8012dba:	683a      	ldr	r2, [r7, #0]
 8012dbc:	4413      	add	r3, r2
 8012dbe:	2201      	movs	r2, #1
 8012dc0:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 2U ] = tcpTCP_OPT_SACK_P; /* 4: Sack-Permitted Option. */
 8012dc2:	68bb      	ldr	r3, [r7, #8]
 8012dc4:	3302      	adds	r3, #2
 8012dc6:	683a      	ldr	r2, [r7, #0]
 8012dc8:	4413      	add	r3, r2
 8012dca:	2204      	movs	r2, #4
 8012dcc:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ uxOptionsLength + 3U ] = 2U;                /* 2: length of this option. */
 8012dce:	68bb      	ldr	r3, [r7, #8]
 8012dd0:	3303      	adds	r3, #3
 8012dd2:	683a      	ldr	r2, [r7, #0]
 8012dd4:	4413      	add	r3, r2
 8012dd6:	2202      	movs	r2, #2
 8012dd8:	751a      	strb	r2, [r3, #20]
            uxOptionsLength += 4U;
 8012dda:	68bb      	ldr	r3, [r7, #8]
 8012ddc:	3304      	adds	r3, #4
 8012dde:	60bb      	str	r3, [r7, #8]
        }
        #endif /* ipconfigUSE_TCP_WIN == 0 */
        return uxOptionsLength; /* bytes, not words. */
 8012de0:	68bb      	ldr	r3, [r7, #8]
    }
 8012de2:	4618      	mov	r0, r3
 8012de4:	3710      	adds	r7, #16
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}
	...

08012dec <prvTCPBufferResize>:
 */
    NetworkBufferDescriptor_t * prvTCPBufferResize( const FreeRTOS_Socket_t * pxSocket,
                                                    NetworkBufferDescriptor_t * pxNetworkBuffer,
                                                    int32_t lDataLen,
                                                    UBaseType_t uxOptionsLength )
    {
 8012dec:	b580      	push	{r7, lr}
 8012dee:	b088      	sub	sp, #32
 8012df0:	af00      	add	r7, sp, #0
 8012df2:	60f8      	str	r0, [r7, #12]
 8012df4:	60b9      	str	r1, [r7, #8]
 8012df6:	607a      	str	r2, [r7, #4]
 8012df8:	603b      	str	r3, [r7, #0]
        NetworkBufferDescriptor_t * pxReturn;
        size_t uxNeeded;
        BaseType_t xResize;

        if( xBufferAllocFixedSize != pdFALSE )
 8012dfa:	4b38      	ldr	r3, [pc, #224]	@ (8012edc <prvTCPBufferResize+0xf0>)
 8012dfc:	681b      	ldr	r3, [r3, #0]
 8012dfe:	2b00      	cmp	r3, #0
 8012e00:	d00b      	beq.n	8012e1a <prvTCPBufferResize+0x2e>
        {
            /* Network buffers are created with a fixed size and can hold the largest
             * MTU. */
            uxNeeded = ( size_t ) ipTOTAL_ETHERNET_FRAME_SIZE;
 8012e02:	f240 53f2 	movw	r3, #1522	@ 0x5f2
 8012e06:	61bb      	str	r3, [r7, #24]

            /* and therefore, the buffer won't be too small.
             * Only ask for a new network buffer in case none was supplied. */
            if( pxNetworkBuffer == NULL )
 8012e08:	68bb      	ldr	r3, [r7, #8]
 8012e0a:	2b00      	cmp	r3, #0
 8012e0c:	d102      	bne.n	8012e14 <prvTCPBufferResize+0x28>
            {
                xResize = pdTRUE;
 8012e0e:	2301      	movs	r3, #1
 8012e10:	617b      	str	r3, [r7, #20]
 8012e12:	e020      	b.n	8012e56 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8012e14:	2300      	movs	r3, #0
 8012e16:	617b      	str	r3, [r7, #20]
 8012e18:	e01d      	b.n	8012e56 <prvTCPBufferResize+0x6a>
        }
        else
        {
            /* Network buffers are created with a variable size. See if it must
             * grow. */
            uxNeeded = ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 8012e1a:	68f8      	ldr	r0, [r7, #12]
 8012e1c:	f7f6 fade 	bl	80093dc <uxIPHeaderSizeSocket>
 8012e20:	4602      	mov	r2, r0
 8012e22:	683b      	ldr	r3, [r7, #0]
 8012e24:	4413      	add	r3, r2
 8012e26:	3322      	adds	r3, #34	@ 0x22
 8012e28:	61bb      	str	r3, [r7, #24]
            uxNeeded += ( size_t ) lDataLen;
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	69ba      	ldr	r2, [r7, #24]
 8012e2e:	4413      	add	r3, r2
 8012e30:	61bb      	str	r3, [r7, #24]

            if( uxNeeded < sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) )
 8012e32:	69bb      	ldr	r3, [r7, #24]
 8012e34:	2b59      	cmp	r3, #89	@ 0x59
 8012e36:	d801      	bhi.n	8012e3c <prvTCPBufferResize+0x50>
            {
                uxNeeded = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8012e38:	235a      	movs	r3, #90	@ 0x5a
 8012e3a:	61bb      	str	r3, [r7, #24]
            }

            /* In case we were called from a TCP timer event, a buffer must be
             *  created.  Otherwise, test 'xDataLength' of the provided buffer. */
            if( ( pxNetworkBuffer == NULL ) || ( pxNetworkBuffer->xDataLength < uxNeeded ) )
 8012e3c:	68bb      	ldr	r3, [r7, #8]
 8012e3e:	2b00      	cmp	r3, #0
 8012e40:	d004      	beq.n	8012e4c <prvTCPBufferResize+0x60>
 8012e42:	68bb      	ldr	r3, [r7, #8]
 8012e44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e46:	69ba      	ldr	r2, [r7, #24]
 8012e48:	429a      	cmp	r2, r3
 8012e4a:	d902      	bls.n	8012e52 <prvTCPBufferResize+0x66>
            {
                xResize = pdTRUE;
 8012e4c:	2301      	movs	r3, #1
 8012e4e:	617b      	str	r3, [r7, #20]
 8012e50:	e001      	b.n	8012e56 <prvTCPBufferResize+0x6a>
            }
            else
            {
                xResize = pdFALSE;
 8012e52:	2300      	movs	r3, #0
 8012e54:	617b      	str	r3, [r7, #20]
            }
        }

        if( xResize != pdFALSE )
 8012e56:	697b      	ldr	r3, [r7, #20]
 8012e58:	2b00      	cmp	r3, #0
 8012e5a:	d023      	beq.n	8012ea4 <prvTCPBufferResize+0xb8>
        {
            /* The caller didn't provide a network buffer or the provided buffer is
             * too small.  As we must send-out a data packet, a buffer will be created
             * here. */
            pxReturn = pxGetNetworkBufferWithDescriptor( uxNeeded, 0U );
 8012e5c:	2100      	movs	r1, #0
 8012e5e:	69b8      	ldr	r0, [r7, #24]
 8012e60:	f003 fc4a 	bl	80166f8 <pxGetNetworkBufferWithDescriptor>
 8012e64:	61f8      	str	r0, [r7, #28]

            if( pxReturn != NULL )
 8012e66:	69fb      	ldr	r3, [r7, #28]
 8012e68:	2b00      	cmp	r3, #0
 8012e6a:	d031      	beq.n	8012ed0 <prvTCPBufferResize+0xe4>
            {
                /* Set the actual packet size, in case the returned buffer is larger. */
                pxReturn->xDataLength = uxNeeded;
 8012e6c:	69fb      	ldr	r3, [r7, #28]
 8012e6e:	69ba      	ldr	r2, [r7, #24]
 8012e70:	629a      	str	r2, [r3, #40]	@ 0x28

                /* Copy the existing data to the new created buffer. */
                if( pxNetworkBuffer != NULL )
 8012e72:	68bb      	ldr	r3, [r7, #8]
 8012e74:	2b00      	cmp	r3, #0
 8012e76:	d00c      	beq.n	8012e92 <prvTCPBufferResize+0xa6>
                {
                    /* Either from the previous buffer... */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxNetworkBuffer->pucEthernetBuffer, pxNetworkBuffer->xDataLength );
 8012e78:	69fb      	ldr	r3, [r7, #28]
 8012e7a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012e7c:	68bb      	ldr	r3, [r7, #8]
 8012e7e:	6a59      	ldr	r1, [r3, #36]	@ 0x24
 8012e80:	68bb      	ldr	r3, [r7, #8]
 8012e82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e84:	461a      	mov	r2, r3
 8012e86:	f00e f917 	bl	80210b8 <memcpy>

                    /* ...and release it. */
                    vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8012e8a:	68b8      	ldr	r0, [r7, #8]
 8012e8c:	f003 fc9c 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
 8012e90:	e01e      	b.n	8012ed0 <prvTCPBufferResize+0xe4>
                }
                else
                {
                    /* Or from the socket field 'xTCP.xPacket'. */
                    ( void ) memcpy( pxReturn->pucEthernetBuffer, pxSocket->u.xTCP.xPacket.u.ucLastPacket, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8012e92:	69fb      	ldr	r3, [r7, #28]
 8012e94:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8012e96:	68fb      	ldr	r3, [r7, #12]
 8012e98:	33aa      	adds	r3, #170	@ 0xaa
 8012e9a:	225a      	movs	r2, #90	@ 0x5a
 8012e9c:	4619      	mov	r1, r3
 8012e9e:	f00e f90b 	bl	80210b8 <memcpy>
 8012ea2:	e015      	b.n	8012ed0 <prvTCPBufferResize+0xe4>
            }
        }
        else
        {
            /* xResize is false, the network buffer provided was big enough. */
            configASSERT( pxNetworkBuffer != NULL ); /* LCOV_EXCL_BR_LINE this branch will not be covered, since it would never be NULL. to tell lint: when xResize is false, pxNetworkBuffer is not NULL. */
 8012ea4:	68bb      	ldr	r3, [r7, #8]
 8012ea6:	2b00      	cmp	r3, #0
 8012ea8:	d104      	bne.n	8012eb4 <prvTCPBufferResize+0xc8>
 8012eaa:	f240 21ca 	movw	r1, #714	@ 0x2ca
 8012eae:	480c      	ldr	r0, [pc, #48]	@ (8012ee0 <prvTCPBufferResize+0xf4>)
 8012eb0:	f7ee fade 	bl	8001470 <vAssertCalled>
            pxReturn = pxNetworkBuffer;
 8012eb4:	68bb      	ldr	r3, [r7, #8]
 8012eb6:	61fb      	str	r3, [r7, #28]

            pxNetworkBuffer->xDataLength = ( size_t ) ( ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ) + ( size_t ) lDataLen;
 8012eb8:	68f8      	ldr	r0, [r7, #12]
 8012eba:	f7f6 fa8f 	bl	80093dc <uxIPHeaderSizeSocket>
 8012ebe:	4602      	mov	r2, r0
 8012ec0:	683b      	ldr	r3, [r7, #0]
 8012ec2:	441a      	add	r2, r3
 8012ec4:	687b      	ldr	r3, [r7, #4]
 8012ec6:	4413      	add	r3, r2
 8012ec8:	f103 0222 	add.w	r2, r3, #34	@ 0x22
 8012ecc:	68bb      	ldr	r3, [r7, #8]
 8012ece:	629a      	str	r2, [r3, #40]	@ 0x28
        }

        return pxReturn;
 8012ed0:	69fb      	ldr	r3, [r7, #28]
    }
 8012ed2:	4618      	mov	r0, r3
 8012ed4:	3720      	adds	r7, #32
 8012ed6:	46bd      	mov	sp, r7
 8012ed8:	bd80      	pop	{r7, pc}
 8012eda:	bf00      	nop
 8012edc:	08026404 	.word	0x08026404
 8012ee0:	080252a4 	.word	0x080252a4

08012ee4 <prvTCPReturn_SetEndPoint>:
 * @param[in] uxIPHeaderSize The size of the IP-header, which depends on the IP-type.
 */
    void prvTCPReturn_SetEndPoint( const FreeRTOS_Socket_t * pxSocket,
                                   NetworkBufferDescriptor_t * pxNetworkBuffer,
                                   size_t uxIPHeaderSize )
    {
 8012ee4:	b580      	push	{r7, lr}
 8012ee6:	b086      	sub	sp, #24
 8012ee8:	af00      	add	r7, sp, #0
 8012eea:	60f8      	str	r0, [r7, #12]
 8012eec:	60b9      	str	r1, [r7, #8]
 8012eee:	607a      	str	r2, [r7, #4]
        #if ( ipconfigUSE_IPv4 != 0 )
            const IPHeader_t * pxIPHeader = NULL;
 8012ef0:	2300      	movs	r3, #0
 8012ef2:	617b      	str	r3, [r7, #20]
        #endif
        #if ( ipconfigUSE_IPv6 != 0 )
            const IPHeader_IPv6_t * pxIPHeader_IPv6 = NULL;
 8012ef4:	2300      	movs	r3, #0
 8012ef6:	613b      	str	r3, [r7, #16]
        #endif

        if( ( pxSocket != NULL ) && ( pxSocket->pxEndPoint != NULL ) )
 8012ef8:	68fb      	ldr	r3, [r7, #12]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d008      	beq.n	8012f10 <prvTCPReturn_SetEndPoint+0x2c>
 8012efe:	68fb      	ldr	r3, [r7, #12]
 8012f00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d004      	beq.n	8012f10 <prvTCPReturn_SetEndPoint+0x2c>
        {
            pxNetworkBuffer->pxEndPoint = pxSocket->pxEndPoint;
 8012f06:	68fb      	ldr	r3, [r7, #12]
 8012f08:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012f0a:	68bb      	ldr	r3, [r7, #8]
 8012f0c:	631a      	str	r2, [r3, #48]	@ 0x30
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 4 ],
                                   pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes[ 5 ] ) );
            }
        }
    }
 8012f0e:	e078      	b.n	8013002 <prvTCPReturn_SetEndPoint+0x11e>
            FreeRTOS_printf( ( "prvTCPReturnPacket: No pxEndPoint yet?\n" ) );
 8012f10:	483e      	ldr	r0, [pc, #248]	@ (801300c <prvTCPReturn_SetEndPoint+0x128>)
 8012f12:	f00d feb5 	bl	8020c80 <lUDPLoggingPrintf>
            switch( uxIPHeaderSize )
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	2b14      	cmp	r3, #20
 8012f1a:	d003      	beq.n	8012f24 <prvTCPReturn_SetEndPoint+0x40>
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	2b28      	cmp	r3, #40	@ 0x28
 8012f20:	d03d      	beq.n	8012f9e <prvTCPReturn_SetEndPoint+0xba>
 8012f22:	e056      	b.n	8012fd2 <prvTCPReturn_SetEndPoint+0xee>
                        pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012f24:	68bb      	ldr	r3, [r7, #8]
 8012f26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012f28:	330e      	adds	r3, #14
 8012f2a:	617b      	str	r3, [r7, #20]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxIPHeader->ulDestinationIPAddress, 8 );
 8012f2c:	697b      	ldr	r3, [r7, #20]
 8012f2e:	691b      	ldr	r3, [r3, #16]
 8012f30:	2108      	movs	r1, #8
 8012f32:	4618      	mov	r0, r3
 8012f34:	f7f9 fea8 	bl	800cc88 <FreeRTOS_FindEndPointOnNetMask>
 8012f38:	4602      	mov	r2, r0
 8012f3a:	68bb      	ldr	r3, [r7, #8]
 8012f3c:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8012f3e:	68bb      	ldr	r3, [r7, #8]
 8012f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d149      	bne.n	8012fda <prvTCPReturn_SetEndPoint+0xf6>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %xip => %xip\n",
 8012f46:	697b      	ldr	r3, [r7, #20]
 8012f48:	68db      	ldr	r3, [r3, #12]
 8012f4a:	061a      	lsls	r2, r3, #24
 8012f4c:	697b      	ldr	r3, [r7, #20]
 8012f4e:	68db      	ldr	r3, [r3, #12]
 8012f50:	021b      	lsls	r3, r3, #8
 8012f52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012f56:	431a      	orrs	r2, r3
 8012f58:	697b      	ldr	r3, [r7, #20]
 8012f5a:	68db      	ldr	r3, [r3, #12]
 8012f5c:	0a1b      	lsrs	r3, r3, #8
 8012f5e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012f62:	431a      	orrs	r2, r3
 8012f64:	697b      	ldr	r3, [r7, #20]
 8012f66:	68db      	ldr	r3, [r3, #12]
 8012f68:	0e1b      	lsrs	r3, r3, #24
 8012f6a:	ea42 0103 	orr.w	r1, r2, r3
 8012f6e:	697b      	ldr	r3, [r7, #20]
 8012f70:	691b      	ldr	r3, [r3, #16]
 8012f72:	061a      	lsls	r2, r3, #24
 8012f74:	697b      	ldr	r3, [r7, #20]
 8012f76:	691b      	ldr	r3, [r3, #16]
 8012f78:	021b      	lsls	r3, r3, #8
 8012f7a:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8012f7e:	431a      	orrs	r2, r3
 8012f80:	697b      	ldr	r3, [r7, #20]
 8012f82:	691b      	ldr	r3, [r3, #16]
 8012f84:	0a1b      	lsrs	r3, r3, #8
 8012f86:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8012f8a:	431a      	orrs	r2, r3
 8012f8c:	697b      	ldr	r3, [r7, #20]
 8012f8e:	691b      	ldr	r3, [r3, #16]
 8012f90:	0e1b      	lsrs	r3, r3, #24
 8012f92:	4313      	orrs	r3, r2
 8012f94:	461a      	mov	r2, r3
 8012f96:	481e      	ldr	r0, [pc, #120]	@ (8013010 <prvTCPReturn_SetEndPoint+0x12c>)
 8012f98:	f00d fe72 	bl	8020c80 <lUDPLoggingPrintf>
                        break;
 8012f9c:	e01d      	b.n	8012fda <prvTCPReturn_SetEndPoint+0xf6>
                        pxIPHeader_IPv6 = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8012f9e:	68bb      	ldr	r3, [r7, #8]
 8012fa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012fa2:	330e      	adds	r3, #14
 8012fa4:	613b      	str	r3, [r7, #16]
                        pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnIP_IPv6( &( pxIPHeader_IPv6->xDestinationAddress ) );
 8012fa6:	693b      	ldr	r3, [r7, #16]
 8012fa8:	3318      	adds	r3, #24
 8012faa:	4618      	mov	r0, r3
 8012fac:	f7f9 fe26 	bl	800cbfc <FreeRTOS_FindEndPointOnIP_IPv6>
 8012fb0:	4602      	mov	r2, r0
 8012fb2:	68bb      	ldr	r3, [r7, #8]
 8012fb4:	631a      	str	r2, [r3, #48]	@ 0x30
                        if( pxNetworkBuffer->pxEndPoint == NULL )
 8012fb6:	68bb      	ldr	r3, [r7, #8]
 8012fb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d10f      	bne.n	8012fde <prvTCPReturn_SetEndPoint+0xfa>
                            FreeRTOS_printf( ( "prvTCPReturnPacket: no such end-point %pip => %pip\n",
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	f103 0108 	add.w	r1, r3, #8
 8012fc4:	693b      	ldr	r3, [r7, #16]
 8012fc6:	3318      	adds	r3, #24
 8012fc8:	461a      	mov	r2, r3
 8012fca:	4812      	ldr	r0, [pc, #72]	@ (8013014 <prvTCPReturn_SetEndPoint+0x130>)
 8012fcc:	f00d fe58 	bl	8020c80 <lUDPLoggingPrintf>
                        break;
 8012fd0:	e005      	b.n	8012fde <prvTCPReturn_SetEndPoint+0xfa>
                    pxNetworkBuffer->pxEndPoint = NULL;
 8012fd2:	68bb      	ldr	r3, [r7, #8]
 8012fd4:	2200      	movs	r2, #0
 8012fd6:	631a      	str	r2, [r3, #48]	@ 0x30
                    break;
 8012fd8:	e002      	b.n	8012fe0 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 8012fda:	bf00      	nop
 8012fdc:	e000      	b.n	8012fe0 <prvTCPReturn_SetEndPoint+0xfc>
                        break;
 8012fde:	bf00      	nop
            if( pxNetworkBuffer->pxEndPoint != NULL )
 8012fe0:	68bb      	ldr	r3, [r7, #8]
 8012fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fe4:	2b00      	cmp	r3, #0
 8012fe6:	d00c      	beq.n	8013002 <prvTCPReturn_SetEndPoint+0x11e>
                FreeRTOS_printf( ( "prvTCPReturnPacket: packet's end-point %02x-%02x\n",
 8012fe8:	68bb      	ldr	r3, [r7, #8]
 8012fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fec:	f893 30ec 	ldrb.w	r3, [r3, #236]	@ 0xec
 8012ff0:	4619      	mov	r1, r3
 8012ff2:	68bb      	ldr	r3, [r7, #8]
 8012ff4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012ff6:	f893 30ed 	ldrb.w	r3, [r3, #237]	@ 0xed
 8012ffa:	461a      	mov	r2, r3
 8012ffc:	4806      	ldr	r0, [pc, #24]	@ (8013018 <prvTCPReturn_SetEndPoint+0x134>)
 8012ffe:	f00d fe3f 	bl	8020c80 <lUDPLoggingPrintf>
    }
 8013002:	bf00      	nop
 8013004:	3718      	adds	r7, #24
 8013006:	46bd      	mov	sp, r7
 8013008:	bd80      	pop	{r7, pc}
 801300a:	bf00      	nop
 801300c:	0802536c 	.word	0x0802536c
 8013010:	08025394 	.word	0x08025394
 8013014:	080253c8 	.word	0x080253c8
 8013018:	080253fc 	.word	0x080253fc

0801301c <prvTCPPrepareSend>:
 *         is returned in case of any error.
 */
    int32_t prvTCPPrepareSend( FreeRTOS_Socket_t * pxSocket,
                               NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                               UBaseType_t uxOptionsLength )
    {
 801301c:	b580      	push	{r7, lr}
 801301e:	b096      	sub	sp, #88	@ 0x58
 8013020:	af02      	add	r7, sp, #8
 8013022:	60f8      	str	r0, [r7, #12]
 8013024:	60b9      	str	r1, [r7, #8]
 8013026:	607a      	str	r2, [r7, #4]
        size_t uxOffset;
        uint32_t ulDataGot, ulDistance;
        TCPWindow_t * pxTCPWindow;
        NetworkBufferDescriptor_t * pxNewBuffer;
        int32_t lStreamPos;
        UBaseType_t uxIntermediateResult = 0;
 8013028:	2300      	movs	r3, #0
 801302a:	63fb      	str	r3, [r7, #60]	@ 0x3c

        if( ( *ppxNetworkBuffer ) != NULL )
 801302c:	68bb      	ldr	r3, [r7, #8]
 801302e:	681b      	ldr	r3, [r3, #0]
 8013030:	2b00      	cmp	r3, #0
 8013032:	d004      	beq.n	801303e <prvTCPPrepareSend+0x22>
        {
            /* A network buffer descriptor was already supplied */
            pucEthernetBuffer = ( *ppxNetworkBuffer )->pucEthernetBuffer;
 8013034:	68bb      	ldr	r3, [r7, #8]
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801303a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801303c:	e002      	b.n	8013044 <prvTCPPrepareSend+0x28>
        }
        else
        {
            /* For now let it point to the last packet header */
            pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 801303e:	68fb      	ldr	r3, [r7, #12]
 8013040:	33aa      	adds	r3, #170	@ 0xaa
 8013042:	64bb      	str	r3, [r7, #72]	@ 0x48
        /* Map the ethernet buffer onto the ProtocolHeader_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 8013044:	68f8      	ldr	r0, [r7, #12]
 8013046:	f7f6 f9c9 	bl	80093dc <uxIPHeaderSizeSocket>
 801304a:	4603      	mov	r3, r0
 801304c:	330e      	adds	r3, #14
 801304e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8013050:	4413      	add	r3, r2
 8013052:	647b      	str	r3, [r7, #68]	@ 0x44
        pxTCPWindow = &( pxSocket->u.xTCP.xTCPWindow );
 8013054:	68fb      	ldr	r3, [r7, #12]
 8013056:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 801305a:	63bb      	str	r3, [r7, #56]	@ 0x38
        lDataLen = 0;
 801305c:	2300      	movs	r3, #0
 801305e:	64fb      	str	r3, [r7, #76]	@ 0x4c
        lStreamPos = 0;
 8013060:	2300      	movs	r3, #0
 8013062:	613b      	str	r3, [r7, #16]
        pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_ACK;
 8013064:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013066:	7b5b      	ldrb	r3, [r3, #13]
 8013068:	f043 0310 	orr.w	r3, r3, #16
 801306c:	b2da      	uxtb	r2, r3
 801306e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013070:	735a      	strb	r2, [r3, #13]

        if( pxSocket->u.xTCP.txStream != NULL )
 8013072:	68fb      	ldr	r3, [r7, #12]
 8013074:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013078:	2b00      	cmp	r3, #0
 801307a:	f000 80a5 	beq.w	80131c8 <prvTCPPrepareSend+0x1ac>
        {
            /* ulTCPWindowTxGet will return the amount of data which may be sent
             * along with the position in the txStream.
             * Why check for MSS > 1 ?
             * Because some TCP-stacks (like uIP) use it for flow-control. */
            if( pxSocket->u.xTCP.usMSS > 1U )
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013084:	2b01      	cmp	r3, #1
 8013086:	d90a      	bls.n	801309e <prvTCPPrepareSend+0x82>
            {
                lDataLen = ( int32_t ) ulTCPWindowTxGet( pxTCPWindow, pxSocket->u.xTCP.ulWindowSize, &lStreamPos );
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	f8d3 3114 	ldr.w	r3, [r3, #276]	@ 0x114
 801308e:	f107 0210 	add.w	r2, r7, #16
 8013092:	4619      	mov	r1, r3
 8013094:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8013096:	f002 fb13 	bl	80156c0 <ulTCPWindowTxGet>
 801309a:	4603      	mov	r3, r0
 801309c:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }

            if( lDataLen > 0 )
 801309e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	f340 8091 	ble.w	80131c8 <prvTCPPrepareSend+0x1ac>
            {
                /* Check if the current network buffer is big enough, if not,
                 * resize it. */
                pxNewBuffer = prvTCPBufferResize( pxSocket, *ppxNetworkBuffer, lDataLen, uxOptionsLength );
 80130a6:	68bb      	ldr	r3, [r7, #8]
 80130a8:	6819      	ldr	r1, [r3, #0]
 80130aa:	687b      	ldr	r3, [r7, #4]
 80130ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80130ae:	68f8      	ldr	r0, [r7, #12]
 80130b0:	f7ff fe9c 	bl	8012dec <prvTCPBufferResize>
 80130b4:	6378      	str	r0, [r7, #52]	@ 0x34

                if( pxNewBuffer != NULL )
 80130b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	f000 8082 	beq.w	80131c2 <prvTCPPrepareSend+0x1a6>
                {
                    *ppxNetworkBuffer = pxNewBuffer;
 80130be:	68bb      	ldr	r3, [r7, #8]
 80130c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80130c2:	601a      	str	r2, [r3, #0]
                    pucEthernetBuffer = pxNewBuffer->pucEthernetBuffer;
 80130c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80130c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80130c8:	64bb      	str	r3, [r7, #72]	@ 0x48
                     * access to the fields. */

                    /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
                    /* coverity[misra_c_2012_rule_11_3_violation] */
                    pxProtocolHeaders = ( ( ProtocolHeaders_t * ) &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80130ca:	68f8      	ldr	r0, [r7, #12]
 80130cc:	f7f6 f986 	bl	80093dc <uxIPHeaderSizeSocket>
 80130d0:	4603      	mov	r3, r0
 80130d2:	330e      	adds	r3, #14
 80130d4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80130d6:	4413      	add	r3, r2
 80130d8:	647b      	str	r3, [r7, #68]	@ 0x44

                    pucSendData = &( pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength ] );
 80130da:	68f8      	ldr	r0, [r7, #12]
 80130dc:	f7f6 f97e 	bl	80093dc <uxIPHeaderSizeSocket>
 80130e0:	4602      	mov	r2, r0
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	4413      	add	r3, r2
 80130e6:	3322      	adds	r3, #34	@ 0x22
 80130e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80130ea:	4413      	add	r3, r2
 80130ec:	633b      	str	r3, [r7, #48]	@ 0x30

                    /* Translate the position in txStream to an offset from the tail
                     * marker. */
                    uxOffset = uxStreamBufferDistance( pxSocket->u.xTCP.txStream, pxSocket->u.xTCP.txStream->uxTail, ( size_t ) lStreamPos );
 80130ee:	68fb      	ldr	r3, [r7, #12]
 80130f0:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 80130f4:	68fb      	ldr	r3, [r7, #12]
 80130f6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80130fa:	681b      	ldr	r3, [r3, #0]
 80130fc:	693a      	ldr	r2, [r7, #16]
 80130fe:	4619      	mov	r1, r3
 8013100:	f7fc fef9 	bl	800fef6 <uxStreamBufferDistance>
 8013104:	62f8      	str	r0, [r7, #44]	@ 0x2c

                    /* Here data is copied from the txStream in 'peek' mode.  Only
                     * when the packets are acked, the tail marker will be updated. */
                    ulDataGot = ( uint32_t ) uxStreamBufferGet( pxSocket->u.xTCP.txStream, uxOffset, pucSendData, ( size_t ) lDataLen, pdTRUE );
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 801310c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801310e:	2201      	movs	r2, #1
 8013110:	9200      	str	r2, [sp, #0]
 8013112:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8013114:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8013116:	f7fd f84c 	bl	80101b2 <uxStreamBufferGet>
 801311a:	62b8      	str	r0, [r7, #40]	@ 0x28

                    #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                    {
                        if( ulDataGot != ( uint32_t ) lDataLen )
 801311c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801311e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013120:	429a      	cmp	r2, r3
 8013122:	d007      	beq.n	8013134 <prvTCPPrepareSend+0x118>
                        {
                            FreeRTOS_debug_printf( ( "uxStreamBufferGet: pos %d offs %u only %u != %d\n",
 8013124:	6939      	ldr	r1, [r7, #16]
 8013126:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013128:	9300      	str	r3, [sp, #0]
 801312a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801312c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801312e:	4898      	ldr	r0, [pc, #608]	@ (8013390 <prvTCPPrepareSend+0x374>)
 8013130:	f00d fda6 	bl	8020c80 <lUDPLoggingPrintf>
                    }
                    #endif

                    /* If the owner of the socket requests a closure, add the FIN
                     * flag to the last packet. */
                    if( pxSocket->u.xTCP.bits.bCloseRequested != pdFALSE_UNSIGNED )
 8013134:	68fb      	ldr	r3, [r7, #12]
 8013136:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 801313a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801313e:	b2db      	uxtb	r3, r3
 8013140:	2b00      	cmp	r3, #0
 8013142:	d041      	beq.n	80131c8 <prvTCPPrepareSend+0x1ac>
                    {
                        ulDistance = ( uint32_t ) uxStreamBufferDistance( pxSocket->u.xTCP.txStream, ( size_t ) lStreamPos, pxSocket->u.xTCP.txStream->uxHead );
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	f8d3 00a0 	ldr.w	r0, [r3, #160]	@ 0xa0
 801314a:	693b      	ldr	r3, [r7, #16]
 801314c:	4619      	mov	r1, r3
 801314e:	68fb      	ldr	r3, [r7, #12]
 8013150:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013154:	689b      	ldr	r3, [r3, #8]
 8013156:	461a      	mov	r2, r3
 8013158:	f7fc fecd 	bl	800fef6 <uxStreamBufferDistance>
 801315c:	6278      	str	r0, [r7, #36]	@ 0x24

                        if( ulDistance == ulDataGot )
 801315e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013160:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013162:	429a      	cmp	r2, r3
 8013164:	d130      	bne.n	80131c8 <prvTCPPrepareSend+0x1ac>
                        {
                            #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
                            {
                                /* the order of volatile accesses is undefined
                                 *  so such workaround */
                                size_t uxHead = pxSocket->u.xTCP.txStream->uxHead;
 8013166:	68fb      	ldr	r3, [r7, #12]
 8013168:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801316c:	689b      	ldr	r3, [r3, #8]
 801316e:	623b      	str	r3, [r7, #32]
                                size_t uxMid = pxSocket->u.xTCP.txStream->uxMid;
 8013170:	68fb      	ldr	r3, [r7, #12]
 8013172:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013176:	685b      	ldr	r3, [r3, #4]
 8013178:	61fb      	str	r3, [r7, #28]
                                size_t uxTail = pxSocket->u.xTCP.txStream->uxTail;
 801317a:	68fb      	ldr	r3, [r7, #12]
 801317c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8013180:	681b      	ldr	r3, [r3, #0]
 8013182:	61bb      	str	r3, [r7, #24]

                                FreeRTOS_debug_printf( ( "CheckClose %u <= %u (%u <= %u <= %u)\n",
 8013184:	6a3b      	ldr	r3, [r7, #32]
 8013186:	9301      	str	r3, [sp, #4]
 8013188:	69fb      	ldr	r3, [r7, #28]
 801318a:	9300      	str	r3, [sp, #0]
 801318c:	69bb      	ldr	r3, [r7, #24]
 801318e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013190:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8013192:	4880      	ldr	r0, [pc, #512]	@ (8013394 <prvTCPPrepareSend+0x378>)
 8013194:	f00d fd74 	bl	8020c80 <lUDPLoggingPrintf>
                            #endif /* if ( ipconfigHAS_DEBUG_PRINTF == 1 ) */

                            /* Although the socket sends a FIN, it will stay in
                             * ESTABLISHED until all current data has been received or
                             * delivered. */
                            pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013198:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801319a:	7b5b      	ldrb	r3, [r3, #13]
 801319c:	f043 0301 	orr.w	r3, r3, #1
 80131a0:	b2da      	uxtb	r2, r3
 80131a2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80131a4:	735a      	strb	r2, [r3, #13]
                            pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->ulOurSequenceNumber + ( uint32_t ) lDataLen;
 80131a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80131aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131ac:	441a      	add	r2, r3
 80131ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80131b0:	625a      	str	r2, [r3, #36]	@ 0x24
                            pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 80131b2:	68fa      	ldr	r2, [r7, #12]
 80131b4:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80131b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80131bc:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
 80131c0:	e002      	b.n	80131c8 <prvTCPPrepareSend+0x1ac>
                        }
                    }
                }
                else
                {
                    lDataLen = -1;
 80131c2:	f04f 33ff 	mov.w	r3, #4294967295
 80131c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }
            }
        }

        if( ( lDataLen >= 0 ) && ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) )
 80131c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	f2c0 8099 	blt.w	8013302 <prvTCPPrepareSend+0x2e6>
 80131d0:	68fb      	ldr	r3, [r7, #12]
 80131d2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80131d6:	2b05      	cmp	r3, #5
 80131d8:	f040 8093 	bne.w	8013302 <prvTCPPrepareSend+0x2e6>
        {
            /* See if the socket owner wants to shutdown this connection. */
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 80131dc:	68fb      	ldr	r3, [r7, #12]
 80131de:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 80131e2:	f003 0320 	and.w	r3, r3, #32
 80131e6:	b2db      	uxtb	r3, r3
 80131e8:	2b00      	cmp	r3, #0
 80131ea:	d029      	beq.n	8013240 <prvTCPPrepareSend+0x224>
                ( xTCPWindowTxDone( pxTCPWindow ) != pdFALSE ) )
 80131ec:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80131ee:	f002 f8e7 	bl	80153c0 <xTCPWindowTxDone>
 80131f2:	4603      	mov	r3, r0
            if( ( pxSocket->u.xTCP.bits.bUserShutdown != pdFALSE_UNSIGNED ) &&
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d023      	beq.n	8013240 <prvTCPPrepareSend+0x224>
            {
                pxSocket->u.xTCP.bits.bUserShutdown = pdFALSE_UNSIGNED;
 80131f8:	68fa      	ldr	r2, [r7, #12]
 80131fa:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 80131fe:	f36f 1345 	bfc	r3, #5, #1
 8013202:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68
                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= tcpTCP_FLAG_FIN;
 8013206:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013208:	7b5b      	ldrb	r3, [r3, #13]
 801320a:	f043 0301 	orr.w	r3, r3, #1
 801320e:	b2da      	uxtb	r2, r3
 8013210:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013212:	735a      	strb	r2, [r3, #13]
                pxSocket->u.xTCP.bits.bFinSent = pdTRUE_UNSIGNED;
 8013214:	68fa      	ldr	r2, [r7, #12]
 8013216:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 801321a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801321e:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxSocket->u.xTCP.bits.bWinChange = pdTRUE_UNSIGNED;
 8013222:	68fa      	ldr	r2, [r7, #12]
 8013224:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013228:	f043 0301 	orr.w	r3, r3, #1
 801322c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                pxTCPWindow->tx.ulFINSequenceNumber = pxTCPWindow->tx.ulCurrentSequenceNumber;
 8013230:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013232:	6a1a      	ldr	r2, [r3, #32]
 8013234:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013236:	625a      	str	r2, [r3, #36]	@ 0x24
                vTCPStateChange( pxSocket, eFIN_WAIT_1 );
 8013238:	2106      	movs	r1, #6
 801323a:	68f8      	ldr	r0, [r7, #12]
 801323c:	f7fd f960 	bl	8010500 <vTCPStateChange>
            }

            #if ( ipconfigTCP_KEEP_ALIVE != 0 )
            {
                if( pxSocket->u.xTCP.ucKeepRepCount > 3U ) /*_RB_ Magic number. */
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8013246:	2b03      	cmp	r3, #3
 8013248:	d90f      	bls.n	801326a <prvTCPPrepareSend+0x24e>
                {
                    FreeRTOS_debug_printf( ( "keep-alive: giving up %xip:%u\n",
 801324a:	68fb      	ldr	r3, [r7, #12]
 801324c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 801324e:	68fb      	ldr	r3, [r7, #12]
 8013250:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013254:	461a      	mov	r2, r3
 8013256:	4850      	ldr	r0, [pc, #320]	@ (8013398 <prvTCPPrepareSend+0x37c>)
 8013258:	f00d fd12 	bl	8020c80 <lUDPLoggingPrintf>
                                             ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, /* IP address of remote machine. */
                                             pxSocket->u.xTCP.usRemotePort ) );                 /* Port on remote machine. */
                    vTCPStateChange( pxSocket, eCLOSE_WAIT );
 801325c:	2108      	movs	r1, #8
 801325e:	68f8      	ldr	r0, [r7, #12]
 8013260:	f7fd f94e 	bl	8010500 <vTCPStateChange>
                    lDataLen = -1;
 8013264:	f04f 33ff 	mov.w	r3, #4294967295
 8013268:	64fb      	str	r3, [r7, #76]	@ 0x4c
                }

                if( ( lDataLen == 0 ) && ( pxSocket->u.xTCP.bits.bWinChange == pdFALSE_UNSIGNED ) )
 801326a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801326c:	2b00      	cmp	r3, #0
 801326e:	d148      	bne.n	8013302 <prvTCPPrepareSend+0x2e6>
 8013270:	68fb      	ldr	r3, [r7, #12]
 8013272:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013276:	f003 0301 	and.w	r3, r3, #1
 801327a:	b2db      	uxtb	r3, r3
 801327c:	2b00      	cmp	r3, #0
 801327e:	d140      	bne.n	8013302 <prvTCPPrepareSend+0x2e6>
                {
                    /* If there is no data to be sent, and no window-update message,
                     * we might want to send a keep-alive message. */
                    TickType_t xAge = xTaskGetTickCount() - pxSocket->u.xTCP.xLastAliveTime;
 8013280:	f7f0 fcfa 	bl	8003c78 <xTaskGetTickCount>
 8013284:	4602      	mov	r2, r0
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801328c:	1ad3      	subs	r3, r2, r3
 801328e:	617b      	str	r3, [r7, #20]
                    TickType_t xMax;
                    xMax = ( ( TickType_t ) ipconfigTCP_KEEP_ALIVE_INTERVAL * ( TickType_t ) configTICK_RATE_HZ );
 8013290:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8013294:	643b      	str	r3, [r7, #64]	@ 0x40

                    if( pxSocket->u.xTCP.ucKeepRepCount != 0U )
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 801329c:	2b00      	cmp	r3, #0
 801329e:	d002      	beq.n	80132a6 <prvTCPPrepareSend+0x28a>
                    {
                        xMax = 3U * configTICK_RATE_HZ;
 80132a0:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 80132a4:	643b      	str	r3, [r7, #64]	@ 0x40
                    }

                    if( xAge > xMax )
 80132a6:	697a      	ldr	r2, [r7, #20]
 80132a8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80132aa:	429a      	cmp	r2, r3
 80132ac:	d929      	bls.n	8013302 <prvTCPPrepareSend+0x2e6>
                    {
                        pxSocket->u.xTCP.xLastAliveTime = xTaskGetTickCount();
 80132ae:	f7f0 fce3 	bl	8003c78 <xTaskGetTickCount>
 80132b2:	4602      	mov	r2, r0
 80132b4:	68fb      	ldr	r3, [r7, #12]
 80132b6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

                        if( xTCPWindowLoggingLevel != 0 )
 80132ba:	4b38      	ldr	r3, [pc, #224]	@ (801339c <prvTCPPrepareSend+0x380>)
 80132bc:	681b      	ldr	r3, [r3, #0]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	d00b      	beq.n	80132da <prvTCPPrepareSend+0x2be>
                        {
                            FreeRTOS_debug_printf( ( "keep-alive: %xip:%u count %u\n",
 80132c2:	68fb      	ldr	r3, [r7, #12]
 80132c4:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80132c6:	68fb      	ldr	r3, [r7, #12]
 80132c8:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80132cc:	461a      	mov	r2, r3
 80132ce:	68fb      	ldr	r3, [r7, #12]
 80132d0:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80132d4:	4832      	ldr	r0, [pc, #200]	@ (80133a0 <prvTCPPrepareSend+0x384>)
 80132d6:	f00d fcd3 	bl	8020c80 <lUDPLoggingPrintf>
                                                     ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                     pxSocket->u.xTCP.usRemotePort,
                                                     pxSocket->u.xTCP.ucKeepRepCount ) );
                        }

                        pxSocket->u.xTCP.bits.bSendKeepAlive = pdTRUE_UNSIGNED;
 80132da:	68fa      	ldr	r2, [r7, #12]
 80132dc:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 80132e0:	f043 0302 	orr.w	r3, r3, #2
 80132e4:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69
                        pxSocket->u.xTCP.usTimeout = ( ( uint16_t ) pdMS_TO_TICKS( 2500U ) );
 80132e8:	68fb      	ldr	r3, [r7, #12]
 80132ea:	f640 12c4 	movw	r2, #2500	@ 0x9c4
 80132ee:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                        pxSocket->u.xTCP.ucKeepRepCount++;
 80132f2:	68fb      	ldr	r3, [r7, #12]
 80132f4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80132f8:	3301      	adds	r3, #1
 80132fa:	b2da      	uxtb	r2, r3
 80132fc:	68fb      	ldr	r3, [r7, #12]
 80132fe:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
                }
            }
            #endif /* ipconfigTCP_KEEP_ALIVE */
        }

        if( lDataLen >= 0 )
 8013302:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013304:	2b00      	cmp	r3, #0
 8013306:	db3e      	blt.n	8013386 <prvTCPPrepareSend+0x36a>
        {
            /* Anything to send, a change of the advertised window size, or maybe send a
             * keep-alive message? */
            if( ( lDataLen > 0 ) ||
 8013308:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801330a:	2b00      	cmp	r3, #0
 801330c:	dc0f      	bgt.n	801332e <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013314:	f003 0301 	and.w	r3, r3, #1
 8013318:	b2db      	uxtb	r3, r3
            if( ( lDataLen > 0 ) ||
 801331a:	2b00      	cmp	r3, #0
 801331c:	d107      	bne.n	801332e <prvTCPPrepareSend+0x312>
                ( pxSocket->u.xTCP.bits.bSendKeepAlive != pdFALSE_UNSIGNED ) )
 801331e:	68fb      	ldr	r3, [r7, #12]
 8013320:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 8013324:	f003 0302 	and.w	r3, r3, #2
 8013328:	b2db      	uxtb	r3, r3
                ( pxSocket->u.xTCP.bits.bWinChange != pdFALSE_UNSIGNED ) ||
 801332a:	2b00      	cmp	r3, #0
 801332c:	d02b      	beq.n	8013386 <prvTCPPrepareSend+0x36a>
            {
                pxProtocolHeaders->xTCPHeader.ucTCPFlags &= ( ( uint8_t ) ~tcpTCP_FLAG_PSH );
 801332e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013330:	7b5b      	ldrb	r3, [r3, #13]
 8013332:	f023 0308 	bic.w	r3, r3, #8
 8013336:	b2da      	uxtb	r2, r3
 8013338:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801333a:	735a      	strb	r2, [r3, #13]
                pxProtocolHeaders->xTCPHeader.ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 ); /*_RB_ "2" needs comment. */
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	b2db      	uxtb	r3, r3
 8013340:	3314      	adds	r3, #20
 8013342:	b2db      	uxtb	r3, r3
 8013344:	009b      	lsls	r3, r3, #2
 8013346:	b2da      	uxtb	r2, r3
 8013348:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801334a:	731a      	strb	r2, [r3, #12]

                pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_ACK;
 801334c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801334e:	7b5b      	ldrb	r3, [r3, #13]
 8013350:	f043 0310 	orr.w	r3, r3, #16
 8013354:	b2da      	uxtb	r2, r3
 8013356:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013358:	735a      	strb	r2, [r3, #13]

                if( lDataLen != 0L )
 801335a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801335c:	2b00      	cmp	r3, #0
 801335e:	d006      	beq.n	801336e <prvTCPPrepareSend+0x352>
                {
                    pxProtocolHeaders->xTCPHeader.ucTCPFlags |= ( uint8_t ) tcpTCP_FLAG_PSH;
 8013360:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013362:	7b5b      	ldrb	r3, [r3, #13]
 8013364:	f043 0308 	orr.w	r3, r3, #8
 8013368:	b2da      	uxtb	r2, r3
 801336a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801336c:	735a      	strb	r2, [r3, #13]
                }

                uxIntermediateResult = uxIPHeaderSizeSocket( pxSocket ) + ipSIZE_OF_TCP_HEADER + uxOptionsLength;
 801336e:	68f8      	ldr	r0, [r7, #12]
 8013370:	f7f6 f834 	bl	80093dc <uxIPHeaderSizeSocket>
 8013374:	4602      	mov	r2, r0
 8013376:	687b      	ldr	r3, [r7, #4]
 8013378:	4413      	add	r3, r2
 801337a:	3314      	adds	r3, #20
 801337c:	63fb      	str	r3, [r7, #60]	@ 0x3c
                lDataLen += ( int32_t ) uxIntermediateResult;
 801337e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8013380:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8013382:	4413      	add	r3, r2
 8013384:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
        }

        return lDataLen;
 8013386:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    }
 8013388:	4618      	mov	r0, r3
 801338a:	3750      	adds	r7, #80	@ 0x50
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}
 8013390:	08025430 	.word	0x08025430
 8013394:	08025464 	.word	0x08025464
 8013398:	0802548c 	.word	0x0802548c
 801339c:	20001348 	.word	0x20001348
 80133a0:	080254ac 	.word	0x080254ac

080133a4 <prvTCPAddTxData>:
 *        this data to the windowing system to it can be transmitted.
 *
 * @param[in] pxSocket The socket owning the connection.
 */
    void prvTCPAddTxData( FreeRTOS_Socket_t * pxSocket )
    {
 80133a4:	b580      	push	{r7, lr}
 80133a6:	b084      	sub	sp, #16
 80133a8:	af00      	add	r7, sp, #0
 80133aa:	6078      	str	r0, [r7, #4]
         * the sliding window.
         *
         * uxStreamBufferMidSpace() returns the distance between rxHead and rxMid.  It
         * contains new Tx data which has not been passed to the sliding window yet.
         * The oldest data not-yet-confirmed can be found at rxTail. */
        lLength = ( int32_t ) uxStreamBufferMidSpace( pxSocket->u.xTCP.txStream );
 80133ac:	687b      	ldr	r3, [r7, #4]
 80133ae:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80133b2:	4618      	mov	r0, r3
 80133b4:	f7fc fdf0 	bl	800ff98 <uxStreamBufferMidSpace>
 80133b8:	4603      	mov	r3, r0
 80133ba:	60fb      	str	r3, [r7, #12]

        if( lLength > 0 )
 80133bc:	68fb      	ldr	r3, [r7, #12]
 80133be:	2b00      	cmp	r3, #0
 80133c0:	dd1a      	ble.n	80133f8 <prvTCPAddTxData+0x54>
             * window manager, so it can start transmitting them.
             *
             * Hand over the new data to the sliding window handler.  It will be
             * split-up in chunks of 1460 bytes each (or less, depending on
             * ipconfigTCP_MSS). */
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 80133c2:	687b      	ldr	r3, [r7, #4]
 80133c4:	f503 7090 	add.w	r0, r3, #288	@ 0x120
 80133c8:	68f9      	ldr	r1, [r7, #12]
                                      ( uint32_t ) lLength,
                                      ( int32_t ) pxSocket->u.xTCP.txStream->uxMid,
 80133ca:	687b      	ldr	r3, [r7, #4]
 80133cc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80133d0:	685b      	ldr	r3, [r3, #4]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 80133d2:	461a      	mov	r2, r3
                                      ( int32_t ) pxSocket->u.xTCP.txStream->LENGTH );
 80133d4:	687b      	ldr	r3, [r7, #4]
 80133d6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80133da:	691b      	ldr	r3, [r3, #16]
            lCount = lTCPWindowTxAdd( &pxSocket->u.xTCP.xTCPWindow,
 80133dc:	f001 ff5c 	bl	8015298 <lTCPWindowTxAdd>
 80133e0:	60b8      	str	r0, [r7, #8]

            /* Move the rxMid pointer forward up to rxHead. */
            if( lCount > 0 )
 80133e2:	68bb      	ldr	r3, [r7, #8]
 80133e4:	2b00      	cmp	r3, #0
 80133e6:	dd07      	ble.n	80133f8 <prvTCPAddTxData+0x54>
            {
                vStreamBufferMoveMid( pxSocket->u.xTCP.txStream, ( size_t ) lCount );
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80133ee:	68ba      	ldr	r2, [r7, #8]
 80133f0:	4611      	mov	r1, r2
 80133f2:	4618      	mov	r0, r3
 80133f4:	f7fc fdf7 	bl	800ffe6 <vStreamBufferMoveMid>
            }
        }
    }
 80133f8:	bf00      	nop
 80133fa:	3710      	adds	r7, #16
 80133fc:	46bd      	mov	sp, r7
 80133fe:	bd80      	pop	{r7, pc}

08013400 <prvSetOptions>:
 *
 * @return Length of the TCP options after they are set.
 */
    UBaseType_t prvSetOptions( FreeRTOS_Socket_t * pxSocket,
                               const NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 8013400:	b590      	push	{r4, r7, lr}
 8013402:	b08b      	sub	sp, #44	@ 0x2c
 8013404:	af02      	add	r7, sp, #8
 8013406:	6078      	str	r0, [r7, #4]
 8013408:	6039      	str	r1, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                  &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( pxNetworkBuffer ) ] ) );
 801340a:	683b      	ldr	r3, [r7, #0]
 801340c:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 801340e:	6838      	ldr	r0, [r7, #0]
 8013410:	f7f5 ffca 	bl	80093a8 <uxIPHeaderSizePacket>
 8013414:	4603      	mov	r3, r0
 8013416:	330e      	adds	r3, #14
        ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 8013418:	4423      	add	r3, r4
 801341a:	61bb      	str	r3, [r7, #24]
        TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 801341c:	69bb      	ldr	r3, [r7, #24]
 801341e:	617b      	str	r3, [r7, #20]
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8013426:	613b      	str	r3, [r7, #16]
        UBaseType_t uxOptionsLength = pxTCPWindow->ucOptionLength;
 8013428:	693b      	ldr	r3, [r7, #16]
 801342a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801342e:	61fb      	str	r3, [r7, #28]
        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
            const void * pvCopySource;
            void * pvCopyDest;

            if( uxOptionsLength != 0U )
 8013430:	69fb      	ldr	r3, [r7, #28]
 8013432:	2b00      	cmp	r3, #0
 8013434:	d05c      	beq.n	80134f0 <prvSetOptions+0xf0>
            {
                /* TCP options must be sent because a packet which is out-of-order
                 * was received. */
                if( xTCPWindowLoggingLevel >= 0 )
 8013436:	4b4f      	ldr	r3, [pc, #316]	@ (8013574 <prvSetOptions+0x174>)
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	2b00      	cmp	r3, #0
 801343c:	db44      	blt.n	80134c8 <prvSetOptions+0xc8>
                {
                    FreeRTOS_debug_printf( ( "SACK[%u,%u]: optlen %u sending %u - %u\n",
 801343e:	687b      	ldr	r3, [r7, #4]
 8013440:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013442:	4618      	mov	r0, r3
 8013444:	687b      	ldr	r3, [r7, #4]
 8013446:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801344a:	461c      	mov	r4, r3
 801344c:	693b      	ldr	r3, [r7, #16]
 801344e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013452:	061a      	lsls	r2, r3, #24
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801345a:	021b      	lsls	r3, r3, #8
 801345c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013460:	431a      	orrs	r2, r3
 8013462:	693b      	ldr	r3, [r7, #16]
 8013464:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013468:	0a1b      	lsrs	r3, r3, #8
 801346a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801346e:	431a      	orrs	r2, r3
 8013470:	693b      	ldr	r3, [r7, #16]
 8013472:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013476:	0e1b      	lsrs	r3, r3, #24
 8013478:	431a      	orrs	r2, r3
 801347a:	687b      	ldr	r3, [r7, #4]
 801347c:	f8d3 312c 	ldr.w	r3, [r3, #300]	@ 0x12c
 8013480:	1ad3      	subs	r3, r2, r3
 8013482:	693a      	ldr	r2, [r7, #16]
 8013484:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013488:	0611      	lsls	r1, r2, #24
 801348a:	693a      	ldr	r2, [r7, #16]
 801348c:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 8013490:	0212      	lsls	r2, r2, #8
 8013492:	f402 027f 	and.w	r2, r2, #16711680	@ 0xff0000
 8013496:	4311      	orrs	r1, r2
 8013498:	693a      	ldr	r2, [r7, #16]
 801349a:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 801349e:	0a12      	lsrs	r2, r2, #8
 80134a0:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80134a4:	4311      	orrs	r1, r2
 80134a6:	693a      	ldr	r2, [r7, #16]
 80134a8:	f8d2 2088 	ldr.w	r2, [r2, #136]	@ 0x88
 80134ac:	0e12      	lsrs	r2, r2, #24
 80134ae:	4311      	orrs	r1, r2
 80134b0:	687a      	ldr	r2, [r7, #4]
 80134b2:	f8d2 212c 	ldr.w	r2, [r2, #300]	@ 0x12c
 80134b6:	1a8a      	subs	r2, r1, r2
 80134b8:	9201      	str	r2, [sp, #4]
 80134ba:	9300      	str	r3, [sp, #0]
 80134bc:	69fb      	ldr	r3, [r7, #28]
 80134be:	4622      	mov	r2, r4
 80134c0:	4601      	mov	r1, r0
 80134c2:	482d      	ldr	r0, [pc, #180]	@ (8013578 <prvSetOptions+0x178>)
 80134c4:	f00d fbdc 	bl	8020c80 <lUDPLoggingPrintf>
                /*
                 * Use helper variables for memcpy() source & dest to remain
                 * compliant with MISRA Rule 21.15.  These should be
                 * optimized away.
                 */
                pvCopySource = pxTCPWindow->ulOptionsData;
 80134c8:	693b      	ldr	r3, [r7, #16]
 80134ca:	3380      	adds	r3, #128	@ 0x80
 80134cc:	60fb      	str	r3, [r7, #12]
                pvCopyDest = pxTCPHeader->ucOptdata;
 80134ce:	697b      	ldr	r3, [r7, #20]
 80134d0:	3314      	adds	r3, #20
 80134d2:	60bb      	str	r3, [r7, #8]
                ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) uxOptionsLength );
 80134d4:	69fa      	ldr	r2, [r7, #28]
 80134d6:	68f9      	ldr	r1, [r7, #12]
 80134d8:	68b8      	ldr	r0, [r7, #8]
 80134da:	f00d fded 	bl	80210b8 <memcpy>

                /* The header length divided by 4, goes into the higher nibble,
                 * effectively a shift-left 2. */
                pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 80134de:	69fb      	ldr	r3, [r7, #28]
 80134e0:	b2db      	uxtb	r3, r3
 80134e2:	3314      	adds	r3, #20
 80134e4:	b2db      	uxtb	r3, r3
 80134e6:	009b      	lsls	r3, r3, #2
 80134e8:	b2da      	uxtb	r2, r3
 80134ea:	697b      	ldr	r3, [r7, #20]
 80134ec:	731a      	strb	r2, [r3, #12]
 80134ee:	e03c      	b.n	801356a <prvSetOptions+0x16a>
            }
            else
        #endif /* ipconfigUSE_TCP_WIN */

        if( ( pxSocket->u.xTCP.eTCPState >= eESTABLISHED ) && ( pxSocket->u.xTCP.bits.bMssChange != pdFALSE_UNSIGNED ) )
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
 80134f6:	2b04      	cmp	r3, #4
 80134f8:	d937      	bls.n	801356a <prvSetOptions+0x16a>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	f893 3068 	ldrb.w	r3, [r3, #104]	@ 0x68
 8013500:	f003 0301 	and.w	r3, r3, #1
 8013504:	b2db      	uxtb	r3, r3
 8013506:	2b00      	cmp	r3, #0
 8013508:	d02f      	beq.n	801356a <prvSetOptions+0x16a>
        {
            /* TCP options must be sent because the MSS has changed. */
            pxSocket->u.xTCP.bits.bMssChange = pdFALSE_UNSIGNED;
 801350a:	687a      	ldr	r2, [r7, #4]
 801350c:	f892 3068 	ldrb.w	r3, [r2, #104]	@ 0x68
 8013510:	f36f 0300 	bfc	r3, #0, #1
 8013514:	f882 3068 	strb.w	r3, [r2, #104]	@ 0x68

            if( xTCPWindowLoggingLevel >= 0 )
 8013518:	4b16      	ldr	r3, [pc, #88]	@ (8013574 <prvSetOptions+0x174>)
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	2b00      	cmp	r3, #0
 801351e:	db06      	blt.n	801352e <prvSetOptions+0x12e>
            {
                FreeRTOS_debug_printf( ( "MSS: sending %u\n", pxSocket->u.xTCP.usMSS ) );
 8013520:	687b      	ldr	r3, [r7, #4]
 8013522:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013526:	4619      	mov	r1, r3
 8013528:	4814      	ldr	r0, [pc, #80]	@ (801357c <prvSetOptions+0x17c>)
 801352a:	f00d fba9 	bl	8020c80 <lUDPLoggingPrintf>
            }

            pxTCPHeader->ucOptdata[ 0 ] = tcpTCP_OPT_MSS;
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	2202      	movs	r2, #2
 8013532:	751a      	strb	r2, [r3, #20]
            pxTCPHeader->ucOptdata[ 1 ] = tcpTCP_OPT_MSS_LEN;
 8013534:	697b      	ldr	r3, [r7, #20]
 8013536:	2204      	movs	r2, #4
 8013538:	755a      	strb	r2, [r3, #21]
            pxTCPHeader->ucOptdata[ 2 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) >> 8 );
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013540:	0a1b      	lsrs	r3, r3, #8
 8013542:	b29b      	uxth	r3, r3
 8013544:	b2da      	uxtb	r2, r3
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	759a      	strb	r2, [r3, #22]
            pxTCPHeader->ucOptdata[ 3 ] = ( uint8_t ) ( ( pxSocket->u.xTCP.usMSS ) & 0xffU );
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013550:	b2da      	uxtb	r2, r3
 8013552:	697b      	ldr	r3, [r7, #20]
 8013554:	75da      	strb	r2, [r3, #23]
            uxOptionsLength = 4U;
 8013556:	2304      	movs	r3, #4
 8013558:	61fb      	str	r3, [r7, #28]
            pxTCPHeader->ucTCPOffset = ( uint8_t ) ( ( ipSIZE_OF_TCP_HEADER + uxOptionsLength ) << 2 );
 801355a:	69fb      	ldr	r3, [r7, #28]
 801355c:	b2db      	uxtb	r3, r3
 801355e:	3314      	adds	r3, #20
 8013560:	b2db      	uxtb	r3, r3
 8013562:	009b      	lsls	r3, r3, #2
 8013564:	b2da      	uxtb	r2, r3
 8013566:	697b      	ldr	r3, [r7, #20]
 8013568:	731a      	strb	r2, [r3, #12]
        else
        {
            /* Nothing. */
        }

        return uxOptionsLength;
 801356a:	69fb      	ldr	r3, [r7, #28]
    }
 801356c:	4618      	mov	r0, r3
 801356e:	3724      	adds	r7, #36	@ 0x24
 8013570:	46bd      	mov	sp, r7
 8013572:	bd90      	pop	{r4, r7, pc}
 8013574:	20001348 	.word	0x20001348
 8013578:	080254cc 	.word	0x080254cc
 801357c:	080254f4 	.word	0x080254f4

08013580 <prvSendData>:
 */
    BaseType_t prvSendData( FreeRTOS_Socket_t * pxSocket,
                            NetworkBufferDescriptor_t ** ppxNetworkBuffer,
                            uint32_t ulReceiveLength,
                            BaseType_t xByteCount )
    {
 8013580:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013582:	b093      	sub	sp, #76	@ 0x4c
 8013584:	af04      	add	r7, sp, #16
 8013586:	60f8      	str	r0, [r7, #12]
 8013588:	60b9      	str	r1, [r7, #8]
 801358a:	607a      	str	r2, [r7, #4]
 801358c:	603b      	str	r3, [r7, #0]

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                                                        &( ( *ppxNetworkBuffer )->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizePacket( *ppxNetworkBuffer ) ] ) );
 801358e:	68bb      	ldr	r3, [r7, #8]
 8013590:	681b      	ldr	r3, [r3, #0]
 8013592:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	4618      	mov	r0, r3
 801359a:	f7f5 ff05 	bl	80093a8 <uxIPHeaderSizePacket>
 801359e:	4603      	mov	r3, r0
 80135a0:	330e      	adds	r3, #14
        const ProtocolHeaders_t * pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80135a2:	4423      	add	r3, r4
 80135a4:	633b      	str	r3, [r7, #48]	@ 0x30
        const TCPHeader_t * pxTCPHeader = &pxProtocolHeaders->xTCPHeader;
 80135a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80135a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        const TCPWindow_t * pxTCPWindow = &pxSocket->u.xTCP.xTCPWindow;
 80135aa:	68fb      	ldr	r3, [r7, #12]
 80135ac:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 80135b0:	62bb      	str	r3, [r7, #40]	@ 0x28
        /* Find out what window size we may advertised. */
        int32_t lRxSpace;
        BaseType_t xSendLength = xByteCount;
 80135b2:	683b      	ldr	r3, [r7, #0]
 80135b4:	637b      	str	r3, [r7, #52]	@ 0x34
        uint32_t ulRxBufferSpace;

        #if ( ipconfigUSE_TCP_WIN == 1 )
            /* Two steps to please MISRA. */
            size_t uxSize = uxIPHeaderSizePacket( *ppxNetworkBuffer ) + ipSIZE_OF_TCP_HEADER;
 80135b6:	68bb      	ldr	r3, [r7, #8]
 80135b8:	681b      	ldr	r3, [r3, #0]
 80135ba:	4618      	mov	r0, r3
 80135bc:	f7f5 fef4 	bl	80093a8 <uxIPHeaderSizePacket>
 80135c0:	4603      	mov	r3, r0
 80135c2:	3314      	adds	r3, #20
 80135c4:	627b      	str	r3, [r7, #36]	@ 0x24
            BaseType_t xSizeWithoutData = ( BaseType_t ) uxSize;
 80135c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80135c8:	623b      	str	r3, [r7, #32]
            int32_t lMinLength;
        #endif

        /* Set the time-out field, so that we'll be called by the IP-task in case no
         * next message will be received. */
        ulRxBufferSpace = pxSocket->u.xTCP.ulHighestRxAllowed - pxTCPWindow->rx.ulCurrentSequenceNumber;
 80135ca:	68fb      	ldr	r3, [r7, #12]
 80135cc:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80135ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80135d0:	691b      	ldr	r3, [r3, #16]
 80135d2:	1ad3      	subs	r3, r2, r3
 80135d4:	61fb      	str	r3, [r7, #28]
        lRxSpace = ( int32_t ) ulRxBufferSpace;
 80135d6:	69fb      	ldr	r3, [r7, #28]
 80135d8:	61bb      	str	r3, [r7, #24]

        #if ipconfigUSE_TCP_WIN == 1
        {
            /* An ACK may be delayed if the peer has space for at least 2 x MSS. */
            lMinLength = ( ( int32_t ) 2 ) * ( ( int32_t ) pxSocket->u.xTCP.usMSS );
 80135da:	68fb      	ldr	r3, [r7, #12]
 80135dc:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 80135e0:	005b      	lsls	r3, r3, #1
 80135e2:	617b      	str	r3, [r7, #20]

            /* In case we're receiving data continuously, we might postpone sending
             * an ACK to gain performance. */
            /* lint e9007 is OK because 'uxIPHeaderSizeSocket()' has no side-effects. */
            if( ( ulReceiveLength > 0U ) &&                               /* Data was sent to this socket. */
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	2b00      	cmp	r3, #0
 80135e8:	d079      	beq.n	80136de <prvSendData+0x15e>
 80135ea:	69ba      	ldr	r2, [r7, #24]
 80135ec:	697b      	ldr	r3, [r7, #20]
 80135ee:	429a      	cmp	r2, r3
 80135f0:	db75      	blt.n	80136de <prvSendData+0x15e>
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 80135f2:	68fb      	ldr	r3, [r7, #12]
 80135f4:	f893 3069 	ldrb.w	r3, [r3, #105]	@ 0x69
 80135f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80135fc:	b2db      	uxtb	r3, r3
                ( lRxSpace >= lMinLength ) &&                             /* There is Rx space for more data. */
 80135fe:	2b00      	cmp	r3, #0
 8013600:	d16d      	bne.n	80136de <prvSendData+0x15e>
                ( pxSocket->u.xTCP.bits.bFinSent == pdFALSE_UNSIGNED ) && /* Not in a closure phase. */
 8013602:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013604:	6a3b      	ldr	r3, [r7, #32]
 8013606:	429a      	cmp	r2, r3
 8013608:	d169      	bne.n	80136de <prvSendData+0x15e>
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 801360a:	68fb      	ldr	r3, [r7, #12]
 801360c:	f893 3079 	ldrb.w	r3, [r3, #121]	@ 0x79
                ( xSendLength == xSizeWithoutData ) &&                    /* No Tx data or options to be sent. */
 8013610:	2b05      	cmp	r3, #5
 8013612:	d164      	bne.n	80136de <prvSendData+0x15e>
                ( pxTCPHeader->ucTCPFlags == tcpTCP_FLAG_ACK ) )          /* There are no other flags than an ACK. */
 8013614:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013616:	7b5b      	ldrb	r3, [r3, #13]
                ( pxSocket->u.xTCP.eTCPState == eESTABLISHED ) &&         /* Connection established. */
 8013618:	2b10      	cmp	r3, #16
 801361a:	d160      	bne.n	80136de <prvSendData+0x15e>
            {
                uint32_t ulCurMSS = ( uint32_t ) pxSocket->u.xTCP.usMSS;
 801361c:	68fb      	ldr	r3, [r7, #12]
 801361e:	f8b3 3072 	ldrh.w	r3, [r3, #114]	@ 0x72
 8013622:	613b      	str	r3, [r7, #16]

                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 801362a:	68bb      	ldr	r3, [r7, #8]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	429a      	cmp	r2, r3
 8013630:	d00f      	beq.n	8013652 <prvSendData+0xd2>
                {
                    /* There was still a delayed in queue, delete it. */
                    if( pxSocket->u.xTCP.pxAckMessage != NULL )
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013638:	2b00      	cmp	r3, #0
 801363a:	d005      	beq.n	8013648 <prvSendData+0xc8>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 801363c:	68fb      	ldr	r3, [r7, #12]
 801363e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8013642:	4618      	mov	r0, r3
 8013644:	f003 f8c0 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxSocket->u.xTCP.pxAckMessage = *ppxNetworkBuffer;
 8013648:	68bb      	ldr	r3, [r7, #8]
 801364a:	681a      	ldr	r2, [r3, #0]
 801364c:	68fb      	ldr	r3, [r7, #12]
 801364e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
                }

                if( ulReceiveLength < ulCurMSS ) /* Received a small message. */
 8013652:	687a      	ldr	r2, [r7, #4]
 8013654:	693b      	ldr	r3, [r7, #16]
 8013656:	429a      	cmp	r2, r3
 8013658:	d204      	bcs.n	8013664 <prvSendData+0xe4>
                {
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) tcpDELAYED_ACK_SHORT_DELAY_MS;
 801365a:	68fb      	ldr	r3, [r7, #12]
 801365c:	2202      	movs	r2, #2
 801365e:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
 8013662:	e00c      	b.n	801367e <prvSendData+0xfe>
                else
                {
                    /* Normally a delayed ACK should wait 200 ms for a next incoming
                     * packet.  Only wait 20 ms here to gain performance.  A slow ACK
                     * for full-size message. */
                    pxSocket->u.xTCP.usTimeout = ( uint16_t ) pdMS_TO_TICKS( tcpDELAYED_ACK_LONGER_DELAY_MS );
 8013664:	68fb      	ldr	r3, [r7, #12]
 8013666:	2214      	movs	r2, #20
 8013668:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70

                    if( pxSocket->u.xTCP.usTimeout < 1U ) /* LCOV_EXCL_BR_LINE, the second branch will never be hit */
 801366c:	68fb      	ldr	r3, [r7, #12]
 801366e:	f8b3 3070 	ldrh.w	r3, [r3, #112]	@ 0x70
 8013672:	2b00      	cmp	r3, #0
 8013674:	d103      	bne.n	801367e <prvSendData+0xfe>
                    {
                        pxSocket->u.xTCP.usTimeout = 1U;  /* LCOV_EXCL_LINE, this line will not be reached */
 8013676:	68fb      	ldr	r3, [r7, #12]
 8013678:	2201      	movs	r2, #1
 801367a:	f8a3 2070 	strh.w	r2, [r3, #112]	@ 0x70
                    }
                }

                if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 801367e:	4b3d      	ldr	r3, [pc, #244]	@ (8013774 <prvSendData+0x1f4>)
 8013680:	681b      	ldr	r3, [r3, #0]
 8013682:	2b01      	cmp	r3, #1
 8013684:	dd25      	ble.n	80136d2 <prvSendData+0x152>
 8013686:	68fb      	ldr	r3, [r7, #12]
 8013688:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801368a:	2b17      	cmp	r3, #23
 801368c:	d021      	beq.n	80136d2 <prvSendData+0x152>
                {
                    FreeRTOS_debug_printf( ( "Send[%u->%u] del ACK %u SEQ %u (len %u) tmout %u d %d\n",
 801368e:	68fb      	ldr	r3, [r7, #12]
 8013690:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013692:	461d      	mov	r5, r3
 8013694:	68fb      	ldr	r3, [r7, #12]
 8013696:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801369a:	461e      	mov	r6, r3
 801369c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801369e:	691a      	ldr	r2, [r3, #16]
 80136a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136a2:	68db      	ldr	r3, [r3, #12]
 80136a4:	1ad0      	subs	r0, r2, r3
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	f8d3 214c 	ldr.w	r2, [r3, #332]	@ 0x14c
 80136ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80136ae:	69db      	ldr	r3, [r3, #28]
 80136b0:	1ad3      	subs	r3, r2, r3
 80136b2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80136b4:	68f9      	ldr	r1, [r7, #12]
 80136b6:	f8b1 1070 	ldrh.w	r1, [r1, #112]	@ 0x70
 80136ba:	460c      	mov	r4, r1
 80136bc:	69b9      	ldr	r1, [r7, #24]
 80136be:	9103      	str	r1, [sp, #12]
 80136c0:	9402      	str	r4, [sp, #8]
 80136c2:	9201      	str	r2, [sp, #4]
 80136c4:	9300      	str	r3, [sp, #0]
 80136c6:	4603      	mov	r3, r0
 80136c8:	4632      	mov	r2, r6
 80136ca:	4629      	mov	r1, r5
 80136cc:	482a      	ldr	r0, [pc, #168]	@ (8013778 <prvSendData+0x1f8>)
 80136ce:	f00d fad7 	bl	8020c80 <lUDPLoggingPrintf>
                                             ( unsigned ) xSendLength,
                                             pxSocket->u.xTCP.usTimeout,
                                             ( int ) lRxSpace ) );
                }

                *ppxNetworkBuffer = NULL;
 80136d2:	68bb      	ldr	r3, [r7, #8]
 80136d4:	2200      	movs	r2, #0
 80136d6:	601a      	str	r2, [r3, #0]
                xSendLength = 0;
 80136d8:	2300      	movs	r3, #0
 80136da:	637b      	str	r3, [r7, #52]	@ 0x34
            {
 80136dc:	e015      	b.n	801370a <prvSendData+0x18a>
            }
            else if( pxSocket->u.xTCP.pxAckMessage != NULL )
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80136e4:	2b00      	cmp	r3, #0
 80136e6:	d010      	beq.n	801370a <prvSendData+0x18a>
            {
                /* As an ACK is not being delayed, remove any earlier delayed ACK
                 * message. */
                if( pxSocket->u.xTCP.pxAckMessage != *ppxNetworkBuffer )
 80136e8:	68fb      	ldr	r3, [r7, #12]
 80136ea:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	681b      	ldr	r3, [r3, #0]
 80136f2:	429a      	cmp	r2, r3
 80136f4:	d005      	beq.n	8013702 <prvSendData+0x182>
                {
                    vReleaseNetworkBufferAndDescriptor( pxSocket->u.xTCP.pxAckMessage );
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80136fc:	4618      	mov	r0, r3
 80136fe:	f003 f863 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
                }

                pxSocket->u.xTCP.pxAckMessage = NULL;
 8013702:	68fb      	ldr	r3, [r7, #12]
 8013704:	2200      	movs	r2, #0
 8013706:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
            ( void ) pxTCPHeader;
            ( void ) lRxSpace;
        }
        #endif /* ipconfigUSE_TCP_WIN */

        if( xSendLength != 0 )
 801370a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801370c:	2b00      	cmp	r3, #0
 801370e:	d02b      	beq.n	8013768 <prvSendData+0x1e8>
        {
            if( ( xTCPWindowLoggingLevel > 1 ) && ( ipconfigTCP_MAY_LOG_PORT( pxSocket->usLocalPort ) ) )
 8013710:	4b18      	ldr	r3, [pc, #96]	@ (8013774 <prvSendData+0x1f4>)
 8013712:	681b      	ldr	r3, [r3, #0]
 8013714:	2b01      	cmp	r3, #1
 8013716:	dd1d      	ble.n	8013754 <prvSendData+0x1d4>
 8013718:	68fb      	ldr	r3, [r7, #12]
 801371a:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801371c:	2b17      	cmp	r3, #23
 801371e:	d019      	beq.n	8013754 <prvSendData+0x1d4>
            {
                FreeRTOS_debug_printf( ( "Send[%u->%u] imm ACK %u SEQ %u (len %u)\n",
 8013720:	68fb      	ldr	r3, [r7, #12]
 8013722:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013724:	4618      	mov	r0, r3
 8013726:	68fb      	ldr	r3, [r7, #12]
 8013728:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801372c:	461c      	mov	r4, r3
 801372e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013730:	691a      	ldr	r2, [r3, #16]
 8013732:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013734:	68db      	ldr	r3, [r3, #12]
 8013736:	1ad1      	subs	r1, r2, r3
 8013738:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801373a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801373c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801373e:	69db      	ldr	r3, [r3, #28]
 8013740:	1ad3      	subs	r3, r2, r3
 8013742:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8013744:	9201      	str	r2, [sp, #4]
 8013746:	9300      	str	r3, [sp, #0]
 8013748:	460b      	mov	r3, r1
 801374a:	4622      	mov	r2, r4
 801374c:	4601      	mov	r1, r0
 801374e:	480b      	ldr	r0, [pc, #44]	@ (801377c <prvSendData+0x1fc>)
 8013750:	f00d fa96 	bl	8020c80 <lUDPLoggingPrintf>
                                         ( unsigned ) xSendLength ) );
            }

            /* Set the parameter 'xReleaseAfterSend' to the value of
             * ipconfigZERO_COPY_TX_DRIVER. */
            prvTCPReturnPacket( pxSocket, *ppxNetworkBuffer, ( uint32_t ) xSendLength, ipconfigZERO_COPY_TX_DRIVER );
 8013754:	68bb      	ldr	r3, [r7, #8]
 8013756:	6819      	ldr	r1, [r3, #0]
 8013758:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801375a:	2301      	movs	r3, #1
 801375c:	68f8      	ldr	r0, [r7, #12]
 801375e:	f7ff f8ff 	bl	8012960 <prvTCPReturnPacket>
            #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            {
                /* The driver has taken ownership of the Network Buffer. */
                *ppxNetworkBuffer = NULL;
 8013762:	68bb      	ldr	r3, [r7, #8]
 8013764:	2200      	movs	r2, #0
 8013766:	601a      	str	r2, [r3, #0]
            }
            #endif
        }

        return xSendLength;
 8013768:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
    }
 801376a:	4618      	mov	r0, r3
 801376c:	373c      	adds	r7, #60	@ 0x3c
 801376e:	46bd      	mov	sp, r7
 8013770:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013772:	bf00      	nop
 8013774:	20001348 	.word	0x20001348
 8013778:	08025508 	.word	0x08025508
 801377c:	08025540 	.word	0x08025540

08013780 <prvTCPSendSpecialPacketHelper>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
    BaseType_t prvTCPSendSpecialPacketHelper( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                              uint8_t ucTCPFlags )
    {
 8013780:	b580      	push	{r7, lr}
 8013782:	b084      	sub	sp, #16
 8013784:	af00      	add	r7, sp, #0
 8013786:	6078      	str	r0, [r7, #4]
 8013788:	460b      	mov	r3, r1
 801378a:	70fb      	strb	r3, [r7, #3]
        BaseType_t xReturn = pdTRUE;
 801378c:	2301      	movs	r3, #1
 801378e:	60fb      	str	r3, [r7, #12]
            /* Configured to ignore unknown packets just suppress a compiler warning. */
            ( void ) pxNetworkBuffer;
            ( void ) ucTCPFlags;
        #else
        {
            switch( uxIPHeaderSizePacket( pxNetworkBuffer ) )
 8013790:	6878      	ldr	r0, [r7, #4]
 8013792:	f7f5 fe09 	bl	80093a8 <uxIPHeaderSizePacket>
 8013796:	4603      	mov	r3, r0
 8013798:	2b14      	cmp	r3, #20
 801379a:	d002      	beq.n	80137a2 <prvTCPSendSpecialPacketHelper+0x22>
 801379c:	2b28      	cmp	r3, #40	@ 0x28
 801379e:	d007      	beq.n	80137b0 <prvTCPSendSpecialPacketHelper+0x30>
 80137a0:	e00d      	b.n	80137be <prvTCPSendSpecialPacketHelper+0x3e>
            {
                #if ( ipconfigUSE_IPv4 != 0 )
                    case ipSIZE_OF_IPv4_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV4( pxNetworkBuffer, ucTCPFlags );
 80137a2:	78fb      	ldrb	r3, [r7, #3]
 80137a4:	4619      	mov	r1, r3
 80137a6:	6878      	ldr	r0, [r7, #4]
 80137a8:	f000 fb18 	bl	8013ddc <prvTCPSendSpecialPktHelper_IPV4>
 80137ac:	60f8      	str	r0, [r7, #12]
                        break;
 80137ae:	e009      	b.n	80137c4 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv4 != 0 ) */

                #if ( ipconfigUSE_IPv6 != 0 )
                    case ipSIZE_OF_IPv6_HEADER:
                        xReturn = prvTCPSendSpecialPktHelper_IPV6( pxNetworkBuffer, ucTCPFlags );
 80137b0:	78fb      	ldrb	r3, [r7, #3]
 80137b2:	4619      	mov	r1, r3
 80137b4:	6878      	ldr	r0, [r7, #4]
 80137b6:	f000 fe8b 	bl	80144d0 <prvTCPSendSpecialPktHelper_IPV6>
 80137ba:	60f8      	str	r0, [r7, #12]
                        break;
 80137bc:	e002      	b.n	80137c4 <prvTCPSendSpecialPacketHelper+0x44>
                #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                default:
                    xReturn = pdFAIL;
 80137be:	2300      	movs	r3, #0
 80137c0:	60fb      	str	r3, [r7, #12]
                    break;
 80137c2:	bf00      	nop
            }
        }
        #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

        /* The packet was not consumed. */
        return xReturn;
 80137c4:	68fb      	ldr	r3, [r7, #12]
    }
 80137c6:	4618      	mov	r0, r3
 80137c8:	3710      	adds	r7, #16
 80137ca:	46bd      	mov	sp, r7
 80137cc:	bd80      	pop	{r7, pc}

080137ce <prvTCPSendChallengeAck>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendChallengeAck( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80137ce:	b580      	push	{r7, lr}
 80137d0:	b082      	sub	sp, #8
 80137d2:	af00      	add	r7, sp, #0
 80137d4:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer, tcpTCP_FLAG_ACK );
 80137d6:	2110      	movs	r1, #16
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f7ff ffd1 	bl	8013780 <prvTCPSendSpecialPacketHelper>
 80137de:	4603      	mov	r3, r0
    }
 80137e0:	4618      	mov	r0, r3
 80137e2:	3708      	adds	r7, #8
 80137e4:	46bd      	mov	sp, r7
 80137e6:	bd80      	pop	{r7, pc}

080137e8 <prvTCPSendReset>:
 * @param[in] pxNetworkBuffer The network buffer descriptor with the packet.
 *
 * @return Returns the value back from #prvTCPSendSpecialPacketHelper.
 */
    BaseType_t prvTCPSendReset( NetworkBufferDescriptor_t * pxNetworkBuffer )
    {
 80137e8:	b580      	push	{r7, lr}
 80137ea:	b082      	sub	sp, #8
 80137ec:	af00      	add	r7, sp, #0
 80137ee:	6078      	str	r0, [r7, #4]
        return prvTCPSendSpecialPacketHelper( pxNetworkBuffer,
 80137f0:	2114      	movs	r1, #20
 80137f2:	6878      	ldr	r0, [r7, #4]
 80137f4:	f7ff ffc4 	bl	8013780 <prvTCPSendSpecialPacketHelper>
 80137f8:	4603      	mov	r3, r0
                                              ( uint8_t ) tcpTCP_FLAG_ACK | ( uint8_t ) tcpTCP_FLAG_RST );
    }
 80137fa:	4618      	mov	r0, r3
 80137fc:	3708      	adds	r7, #8
 80137fe:	46bd      	mov	sp, r7
 8013800:	bd80      	pop	{r7, pc}
	...

08013804 <prvTCPReturnPacket_IPV4>:
 */
void prvTCPReturnPacket_IPV4( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8013804:	b580      	push	{r7, lr}
 8013806:	b0a6      	sub	sp, #152	@ 0x98
 8013808:	af00      	add	r7, sp, #0
 801380a:	60f8      	str	r0, [r7, #12]
 801380c:	60b9      	str	r1, [r7, #8]
 801380e:	607a      	str	r2, [r7, #4]
 8013810:	603b      	str	r3, [r7, #0]
    TCPPacket_t * pxTCPPacket = NULL;
 8013812:	2300      	movs	r3, #0
 8013814:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8013818:	2300      	movs	r3, #0
 801381a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPHeader_t * pxIPHeader = NULL;
 801381e:	2300      	movs	r3, #0
 8013820:	67fb      	str	r3, [r7, #124]	@ 0x7c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8013822:	683b      	ldr	r3, [r7, #0]
 8013824:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    EthernetHeader_t * pxEthernetHeader = NULL;
 8013828:	2300      	movs	r3, #0
 801382a:	67bb      	str	r3, [r7, #120]	@ 0x78
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 801382c:	68bb      	ldr	r3, [r7, #8]
 801382e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8013832:	2300      	movs	r3, #0
 8013834:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    void * pvCopyDest = NULL;
 8013838:	2300      	movs	r3, #0
 801383a:	677b      	str	r3, [r7, #116]	@ 0x74
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv4_HEADER;
 801383c:	2314      	movs	r3, #20
 801383e:	673b      	str	r3, [r7, #112]	@ 0x70
    uint32_t ulDestinationIPAddress;
    eARPLookupResult_t eResult;
    NetworkEndPoint_t * pxEndPoint = NULL;
 8013840:	2300      	movs	r3, #0
 8013842:	617b      	str	r3, [r7, #20]

    do
    {
        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8013844:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013848:	2b00      	cmp	r3, #0
 801384a:	d117      	bne.n	801387c <prvTCPReturnPacket_IPV4+0x78>
        {
            pxNetworkBuffer = &xTempBuffer;
 801384c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013850:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8013854:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8013858:	2238      	movs	r2, #56	@ 0x38
 801385a:	2100      	movs	r1, #0
 801385c:	4618      	mov	r0, r3
 801385e:	f00d fd38 	bl	80212d2 <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8013862:	68fb      	ldr	r3, [r7, #12]
 8013864:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8013868:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801386c:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801386e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013872:	225a      	movs	r2, #90	@ 0x5a
 8013874:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8013876:	2300      	movs	r3, #0
 8013878:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 801387c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013880:	2b00      	cmp	r3, #0
 8013882:	d114      	bne.n	80138ae <prvTCPReturnPacket_IPV4+0xaa>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8013884:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013888:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801388a:	4619      	mov	r1, r3
 801388c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8013890:	f7f6 f83c 	bl	800990c <pxDuplicateNetworkBufferWithDescriptor>
 8013894:	f8c7 0090 	str.w	r0, [r7, #144]	@ 0x90

                if( pxNetworkBuffer != NULL )
 8013898:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801389c:	2b00      	cmp	r3, #0
 801389e:	d003      	beq.n	80138a8 <prvTCPReturnPacket_IPV4+0xa4>
                {
                    xDoRelease = pdTRUE;
 80138a0:	2301      	movs	r3, #1
 80138a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80138a6:	e002      	b.n	80138ae <prvTCPReturnPacket_IPV4+0xaa>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 80138a8:	48bc      	ldr	r0, [pc, #752]	@ (8013b9c <prvTCPReturnPacket_IPV4+0x398>)
 80138aa:	f00d f9e9 	bl	8020c80 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 80138ae:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	f000 8166 	beq.w	8013b84 <prvTCPReturnPacket_IPV4+0x380>
            NetworkInterface_t * pxInterface;

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 80138b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80138bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138be:	330e      	adds	r3, #14
 80138c0:	67fb      	str	r3, [r7, #124]	@ 0x7c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer;
 80138c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80138c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80138c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 80138cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80138d0:	67bb      	str	r3, [r7, #120]	@ 0x78
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 80138d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80138d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80138d8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80138da:	330e      	adds	r3, #14
 80138dc:	4413      	add	r3, r2
 80138de:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

            if( pxNetworkBuffer->pxEndPoint == NULL )
 80138e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80138e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80138e8:	2b00      	cmp	r3, #0
 80138ea:	d10b      	bne.n	8013904 <prvTCPReturnPacket_IPV4+0x100>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 80138ec:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80138ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	f7ff faf6 	bl	8012ee4 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 80138f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80138fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80138fe:	2b00      	cmp	r3, #0
 8013900:	f000 813d 	beq.w	8013b7e <prvTCPReturnPacket_IPV4+0x37a>
                    break;
                }
            }

            /* Fill the packet, using hton translations. */
            if( pxSocket != NULL )
 8013904:	68fb      	ldr	r3, [r7, #12]
 8013906:	2b00      	cmp	r3, #0
 8013908:	d028      	beq.n	801395c <prvTCPReturnPacket_IPV4+0x158>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 801390a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801390c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013910:	68f8      	ldr	r0, [r7, #12]
 8013912:	f7ff f865 	bl	80129e0 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8013916:	687b      	ldr	r3, [r7, #4]
 8013918:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801391a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 801391e:	68f8      	ldr	r0, [r7, #12]
 8013920:	f7ff f8d8 	bl	8012ad4 <prvTCPReturn_SetSequenceNumber>
                pxIPHeader->ulDestinationIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8013924:	68fb      	ldr	r3, [r7, #12]
 8013926:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013928:	061a      	lsls	r2, r3, #24
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801392e:	021b      	lsls	r3, r3, #8
 8013930:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013934:	431a      	orrs	r2, r3
 8013936:	68fb      	ldr	r3, [r7, #12]
 8013938:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801393a:	0a1b      	lsrs	r3, r3, #8
 801393c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013940:	431a      	orrs	r2, r3
 8013942:	68fb      	ldr	r3, [r7, #12]
 8013944:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013946:	0e1b      	lsrs	r3, r3, #24
 8013948:	431a      	orrs	r2, r3
 801394a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801394c:	611a      	str	r2, [r3, #16]
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 801394e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013952:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013954:	681a      	ldr	r2, [r3, #0]
 8013956:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013958:	60da      	str	r2, [r3, #12]
 801395a:	e017      	b.n	801398c <prvTCPReturnPacket_IPV4+0x188>
            }
            else
            {
                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 801395c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013960:	685b      	ldr	r3, [r3, #4]
 8013962:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013964:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013968:	689a      	ldr	r2, [r3, #8]
 801396a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801396e:	605a      	str	r2, [r3, #4]
 8013970:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013974:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8013976:	609a      	str	r2, [r3, #8]
                vFlip_32( pxIPHeader->ulDestinationIPAddress, pxIPHeader->ulSourceIPAddress );
 8013978:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801397a:	691b      	ldr	r3, [r3, #16]
 801397c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801397e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013980:	68da      	ldr	r2, [r3, #12]
 8013982:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013984:	611a      	str	r2, [r3, #16]
 8013986:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013988:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801398a:	60da      	str	r2, [r3, #12]
            }

            pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 801398c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801398e:	2280      	movs	r2, #128	@ 0x80
 8013990:	721a      	strb	r2, [r3, #8]
            pxIPHeader->usLength = FreeRTOS_htons( ulLen );
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	b29b      	uxth	r3, r3
 8013996:	021b      	lsls	r3, r3, #8
 8013998:	b29a      	uxth	r2, r3
 801399a:	687b      	ldr	r3, [r7, #4]
 801399c:	0a1b      	lsrs	r3, r3, #8
 801399e:	b29b      	uxth	r3, r3
 80139a0:	4313      	orrs	r3, r2
 80139a2:	b29a      	uxth	r2, r3
 80139a4:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80139a6:	805a      	strh	r2, [r3, #2]

            /* Just an increasing number. */
            pxIPHeader->usIdentification = FreeRTOS_htons( usPacketIdentifier );
 80139a8:	4b7d      	ldr	r3, [pc, #500]	@ (8013ba0 <prvTCPReturnPacket_IPV4+0x39c>)
 80139aa:	881b      	ldrh	r3, [r3, #0]
 80139ac:	021b      	lsls	r3, r3, #8
 80139ae:	b21a      	sxth	r2, r3
 80139b0:	4b7b      	ldr	r3, [pc, #492]	@ (8013ba0 <prvTCPReturnPacket_IPV4+0x39c>)
 80139b2:	881b      	ldrh	r3, [r3, #0]
 80139b4:	0a1b      	lsrs	r3, r3, #8
 80139b6:	b29b      	uxth	r3, r3
 80139b8:	b21b      	sxth	r3, r3
 80139ba:	4313      	orrs	r3, r2
 80139bc:	b21b      	sxth	r3, r3
 80139be:	b29a      	uxth	r2, r3
 80139c0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80139c2:	809a      	strh	r2, [r3, #4]
            usPacketIdentifier++;
 80139c4:	4b76      	ldr	r3, [pc, #472]	@ (8013ba0 <prvTCPReturnPacket_IPV4+0x39c>)
 80139c6:	881b      	ldrh	r3, [r3, #0]
 80139c8:	3301      	adds	r3, #1
 80139ca:	b29a      	uxth	r2, r3
 80139cc:	4b74      	ldr	r3, [pc, #464]	@ (8013ba0 <prvTCPReturnPacket_IPV4+0x39c>)
 80139ce:	801a      	strh	r2, [r3, #0]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 80139d0:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80139d2:	2200      	movs	r2, #0
 80139d4:	719a      	strb	r2, [r3, #6]
 80139d6:	2200      	movs	r2, #0
 80139d8:	71da      	strb	r2, [r3, #7]
                /* calculate the TCP checksum for an outgoing packet. */
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxTCPPacket, pxNetworkBuffer->xDataLength, pdTRUE );
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 80139da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80139de:	781a      	ldrb	r2, [r3, #0]
 80139e0:	785b      	ldrb	r3, [r3, #1]
 80139e2:	021b      	lsls	r3, r3, #8
 80139e4:	4313      	orrs	r3, r2
 80139e6:	f8a7 3066 	strh.w	r3, [r7, #102]	@ 0x66
 80139ea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80139ee:	885b      	ldrh	r3, [r3, #2]
 80139f0:	b29a      	uxth	r2, r3
 80139f2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80139f6:	801a      	strh	r2, [r3, #0]
 80139f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80139fc:	f8b7 2066 	ldrh.w	r2, [r7, #102]	@ 0x66
 8013a00:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 8013a02:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013a06:	687a      	ldr	r2, [r7, #4]
 8013a08:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 8013a0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013a0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013a10:	f103 020e 	add.w	r2, r3, #14
 8013a14:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013a18:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            pvCopySource = &pxEthernetHeader->xSourceAddress;
 8013a1a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013a1c:	3306      	adds	r3, #6
 8013a1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            ulDestinationIPAddress = pxIPHeader->ulDestinationIPAddress;
 8013a22:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013a24:	691b      	ldr	r3, [r3, #16]
 8013a26:	61bb      	str	r3, [r7, #24]

            eResult = eARPGetCacheEntry( &ulDestinationIPAddress, &xMACAddress, &pxEndPoint );
 8013a28:	f107 0214 	add.w	r2, r7, #20
 8013a2c:	f107 011c 	add.w	r1, r7, #28
 8013a30:	f107 0318 	add.w	r3, r7, #24
 8013a34:	4618      	mov	r0, r3
 8013a36:	f7f2 fe9d 	bl	8006774 <eARPGetCacheEntry>
 8013a3a:	4603      	mov	r3, r0
 8013a3c:	f887 3065 	strb.w	r3, [r7, #101]	@ 0x65

            if( eResult == eARPCacheHit )
 8013a40:	f897 3065 	ldrb.w	r3, [r7, #101]	@ 0x65
 8013a44:	2b01      	cmp	r3, #1
 8013a46:	d108      	bne.n	8013a5a <prvTCPReturnPacket_IPV4+0x256>
            {
                pvCopySource = &xMACAddress;
 8013a48:	f107 031c 	add.w	r3, r7, #28
 8013a4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8013a50:	697a      	ldr	r2, [r7, #20]
 8013a52:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013a56:	631a      	str	r2, [r3, #48]	@ 0x30
 8013a58:	e003      	b.n	8013a62 <prvTCPReturnPacket_IPV4+0x25e>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8013a5a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013a5c:	3306      	adds	r3, #6
 8013a5e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            }

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8013a62:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a68:	2b00      	cmp	r3, #0
 8013a6a:	f000 808a 	beq.w	8013b82 <prvTCPReturnPacket_IPV4+0x37e>
            {
                break;
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8013a6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013a70:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8013a72:	2206      	movs	r2, #6
 8013a74:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013a78:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8013a7a:	f00d fb1d 	bl	80210b8 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8013a7e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013a84:	33e8      	adds	r3, #232	@ 0xe8
 8013a86:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8013a8a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013a8c:	3306      	adds	r3, #6
 8013a8e:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8013a90:	2206      	movs	r2, #6
 8013a92:	f8d7 108c 	ldr.w	r1, [r7, #140]	@ 0x8c
 8013a96:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8013a98:	f00d fb0e 	bl	80210b8 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8013a9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013aa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013aa2:	2b3b      	cmp	r3, #59	@ 0x3b
 8013aa4:	d81a      	bhi.n	8013adc <prvTCPReturnPacket_IPV4+0x2d8>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013aa6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013aaa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013aac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013ab0:	e00c      	b.n	8013acc <prvTCPReturnPacket_IPV4+0x2c8>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8013ab2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013ab6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013ab8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013abc:	4413      	add	r3, r2
 8013abe:	2200      	movs	r2, #0
 8013ac0:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8013ac2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013ac6:	3301      	adds	r3, #1
 8013ac8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8013acc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8013ad0:	2b3b      	cmp	r3, #59	@ 0x3b
 8013ad2:	ddee      	ble.n	8013ab2 <prvTCPReturnPacket_IPV4+0x2ae>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8013ad4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013ad8:	223c      	movs	r2, #60	@ 0x3c
 8013ada:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 8013adc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013ae2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013ae6:	2b00      	cmp	r3, #0
 8013ae8:	d104      	bne.n	8013af4 <prvTCPReturnPacket_IPV4+0x2f0>
 8013aea:	f240 111d 	movw	r1, #285	@ 0x11d
 8013aee:	482d      	ldr	r0, [pc, #180]	@ (8013ba4 <prvTCPReturnPacket_IPV4+0x3a0>)
 8013af0:	f7ed fcbe 	bl	8001470 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 8013af4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013afa:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013afe:	68db      	ldr	r3, [r3, #12]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d104      	bne.n	8013b0e <prvTCPReturnPacket_IPV4+0x30a>
 8013b04:	f44f 718f 	mov.w	r1, #286	@ 0x11e
 8013b08:	4826      	ldr	r0, [pc, #152]	@ (8013ba4 <prvTCPReturnPacket_IPV4+0x3a0>)
 8013b0a:	f7ed fcb1 	bl	8001470 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8013b0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8013b12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013b14:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8013b18:	663b      	str	r3, [r7, #96]	@ 0x60
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 8013b1a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8013b1c:	68db      	ldr	r3, [r3, #12]
 8013b1e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8013b22:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8013b26:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8013b28:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 8013b2a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d121      	bne.n	8013b76 <prvTCPReturnPacket_IPV4+0x372>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 8013b32:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013b36:	f893 2022 	ldrb.w	r2, [r3, #34]	@ 0x22
 8013b3a:	f893 3023 	ldrb.w	r3, [r3, #35]	@ 0x23
 8013b3e:	021b      	lsls	r3, r3, #8
 8013b40:	4313      	orrs	r3, r2
 8013b42:	f8a7 305e 	strh.w	r3, [r7, #94]	@ 0x5e
 8013b46:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013b4a:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8013b4c:	b29a      	uxth	r2, r3
 8013b4e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013b52:	845a      	strh	r2, [r3, #34]	@ 0x22
 8013b54:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8013b58:	f8b7 205e 	ldrh.w	r2, [r7, #94]	@ 0x5e
 8013b5c:	849a      	strh	r2, [r3, #36]	@ 0x24

                pxIPHeader->ulSourceIPAddress = pxIPHeader->ulDestinationIPAddress;
 8013b5e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013b60:	691a      	ldr	r2, [r3, #16]
 8013b62:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8013b64:	60da      	str	r2, [r3, #12]

                ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxEthernetHeader->xDestinationAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8013b66:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013b68:	3306      	adds	r3, #6
 8013b6a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8013b6c:	2206      	movs	r2, #6
 8013b6e:	4618      	mov	r0, r3
 8013b70:	f00d faa2 	bl	80210b8 <memcpy>
 8013b74:	e006      	b.n	8013b84 <prvTCPReturnPacket_IPV4+0x380>
            }
            else
            {
                xDoRelease = pdFALSE;
 8013b76:	2300      	movs	r3, #0
 8013b78:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8013b7c:	e002      	b.n	8013b84 <prvTCPReturnPacket_IPV4+0x380>
                    break;
 8013b7e:	bf00      	nop
 8013b80:	e000      	b.n	8013b84 <prvTCPReturnPacket_IPV4+0x380>
                break;
 8013b82:	bf00      	nop
                /* The buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );

    if( xDoRelease == pdTRUE )
 8013b84:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013b88:	2b01      	cmp	r3, #1
 8013b8a:	d103      	bne.n	8013b94 <prvTCPReturnPacket_IPV4+0x390>
    {
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013b8c:	f8d7 0090 	ldr.w	r0, [r7, #144]	@ 0x90
 8013b90:	f002 fe1a 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
    }
}
 8013b94:	bf00      	nop
 8013b96:	3798      	adds	r7, #152	@ 0x98
 8013b98:	46bd      	mov	sp, r7
 8013b9a:	bd80      	pop	{r7, pc}
 8013b9c:	0802556c 	.word	0x0802556c
 8013ba0:	20000ea0 	.word	0x20000ea0
 8013ba4:	08025594 	.word	0x08025594

08013ba8 <prvTCPPrepareConnect_IPV4>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8013ba8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013baa:	b093      	sub	sp, #76	@ 0x4c
 8013bac:	af06      	add	r7, sp, #24
 8013bae:	6078      	str	r0, [r7, #4]
    TCPPacket_t * pxTCPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8013bb0:	2301      	movs	r3, #1
 8013bb2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t ulInitialSequenceNumber = 0;
 8013bb4:	2300      	movs	r3, #0
 8013bb6:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8013bb8:	f107 030c 	add.w	r3, r7, #12
 8013bbc:	2206      	movs	r2, #6
 8013bbe:	2100      	movs	r1, #0
 8013bc0:	4618      	mov	r0, r3
 8013bc2:	f00d fb86 	bl	80212d2 <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ulRemoteIP = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8013bc6:	687b      	ldr	r3, [r7, #4]
 8013bc8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013bca:	061a      	lsls	r2, r3, #24
 8013bcc:	687b      	ldr	r3, [r7, #4]
 8013bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013bd0:	021b      	lsls	r3, r3, #8
 8013bd2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013bd6:	431a      	orrs	r2, r3
 8013bd8:	687b      	ldr	r3, [r7, #4]
 8013bda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013bdc:	0a1b      	lsrs	r3, r3, #8
 8013bde:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013be2:	431a      	orrs	r2, r3
 8013be4:	687b      	ldr	r3, [r7, #4]
 8013be6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013be8:	0e1b      	lsrs	r3, r3, #24
 8013bea:	4313      	orrs	r3, r2
 8013bec:	617b      	str	r3, [r7, #20]
    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulRemoteIP ), &( xEthAddress ), &( pxSocket->pxEndPoint ) );
 8013bee:	687b      	ldr	r3, [r7, #4]
 8013bf0:	f103 024c 	add.w	r2, r3, #76	@ 0x4c
 8013bf4:	f107 010c 	add.w	r1, r7, #12
 8013bf8:	f107 0314 	add.w	r3, r7, #20
 8013bfc:	4618      	mov	r0, r3
 8013bfe:	f7f2 fdb9 	bl	8006774 <eARPGetCacheEntry>
 8013c02:	4603      	mov	r3, r0
 8013c04:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

    switch( eReturned )
 8013c08:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8013c0c:	2b01      	cmp	r3, #1
 8013c0e:	d037      	beq.n	8013c80 <prvTCPPrepareConnect_IPV4+0xd8>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 8013c16:	3301      	adds	r3, #1
 8013c18:	b2da      	uxtb	r2, r3
 8013c1a:	687b      	ldr	r3, [r7, #4]
 8013c1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_debug_printf( ( "ARP for %xip (using %xip): rc=%d %02x-%02x-%02x-%02x-%02x-%02x\n",
 8013c20:	687b      	ldr	r3, [r7, #4]
 8013c22:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8013c24:	697b      	ldr	r3, [r7, #20]
 8013c26:	061a      	lsls	r2, r3, #24
 8013c28:	697b      	ldr	r3, [r7, #20]
 8013c2a:	021b      	lsls	r3, r3, #8
 8013c2c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013c30:	431a      	orrs	r2, r3
 8013c32:	697b      	ldr	r3, [r7, #20]
 8013c34:	0a1b      	lsrs	r3, r3, #8
 8013c36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013c3a:	431a      	orrs	r2, r3
 8013c3c:	697b      	ldr	r3, [r7, #20]
 8013c3e:	0e1b      	lsrs	r3, r3, #24
 8013c40:	431a      	orrs	r2, r3
 8013c42:	f897 e027 	ldrb.w	lr, [r7, #39]	@ 0x27
 8013c46:	7b38      	ldrb	r0, [r7, #12]
 8013c48:	7b7c      	ldrb	r4, [r7, #13]
 8013c4a:	7bbd      	ldrb	r5, [r7, #14]
 8013c4c:	7bfe      	ldrb	r6, [r7, #15]
 8013c4e:	f897 c010 	ldrb.w	ip, [r7, #16]
 8013c52:	f8c7 c000 	str.w	ip, [r7]
 8013c56:	f897 c011 	ldrb.w	ip, [r7, #17]
 8013c5a:	4663      	mov	r3, ip
 8013c5c:	9305      	str	r3, [sp, #20]
 8013c5e:	683b      	ldr	r3, [r7, #0]
 8013c60:	9304      	str	r3, [sp, #16]
 8013c62:	9603      	str	r6, [sp, #12]
 8013c64:	9502      	str	r5, [sp, #8]
 8013c66:	9401      	str	r4, [sp, #4]
 8013c68:	9000      	str	r0, [sp, #0]
 8013c6a:	4673      	mov	r3, lr
 8013c6c:	485a      	ldr	r0, [pc, #360]	@ (8013dd8 <prvTCPPrepareConnect_IPV4+0x230>)
 8013c6e:	f00d f807 	bl	8020c80 <lUDPLoggingPrintf>
                                     xEthAddress.ucBytes[ 3 ],
                                     xEthAddress.ucBytes[ 4 ],
                                     xEthAddress.ucBytes[ 5 ] ) );

            /* And issue a (new) ARP request */
            FreeRTOS_OutputARPRequest( ulRemoteIP );
 8013c72:	697b      	ldr	r3, [r7, #20]
 8013c74:	4618      	mov	r0, r3
 8013c76:	f7f2 ffd1 	bl	8006c1c <FreeRTOS_OutputARPRequest>
            xReturn = pdFALSE;
 8013c7a:	2300      	movs	r3, #0
 8013c7c:	62fb      	str	r3, [r7, #44]	@ 0x2c
            break;
 8013c7e:	e000      	b.n	8013c82 <prvTCPPrepareConnect_IPV4+0xda>
            break;            /* We can now prepare the SYN packet. */
 8013c80:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8013c82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d010      	beq.n	8013caa <prvTCPPrepareConnect_IPV4+0x102>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 8013c8c:	687b      	ldr	r3, [r7, #4]
 8013c8e:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 8013c90:	687b      	ldr	r3, [r7, #4]
 8013c92:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8013c94:	687b      	ldr	r3, [r7, #4]
 8013c96:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013c9a:	f7ed fc09 	bl	80014b0 <ulApplicationGetNextSequenceNumber>
 8013c9e:	62b8      	str	r0, [r7, #40]	@ 0x28
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 8013ca0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013ca2:	2b00      	cmp	r3, #0
 8013ca4:	d101      	bne.n	8013caa <prvTCPPrepareConnect_IPV4+0x102>
        {
            xReturn = pdFALSE;
 8013ca6:	2300      	movs	r3, #0
 8013ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    if( xReturn != pdFALSE )
 8013caa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013cac:	2b00      	cmp	r3, #0
 8013cae:	f000 808d 	beq.w	8013dcc <prvTCPPrepareConnect_IPV4+0x224>
         * the buffer onto the TCPPacket_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013cb2:	687b      	ldr	r3, [r7, #4]
 8013cb4:	33aa      	adds	r3, #170	@ 0xaa
 8013cb6:	623b      	str	r3, [r7, #32]
        pxIPHeader = &pxTCPPacket->xIPHeader;
 8013cb8:	6a3b      	ldr	r3, [r7, #32]
 8013cba:	330e      	adds	r3, #14
 8013cbc:	61fb      	str	r3, [r7, #28]

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2200      	movs	r2, #0
 8013cc2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8013cc6:	687a      	ldr	r2, [r7, #4]
 8013cc8:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8013ccc:	f043 0308 	orr.w	r3, r3, #8
 8013cd0:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	33aa      	adds	r3, #170	@ 0xaa
 8013cd8:	225a      	movs	r2, #90	@ 0x5a
 8013cda:	2100      	movs	r1, #0
 8013cdc:	4618      	mov	r0, r3
 8013cde:	f00d faf8 	bl	80212d2 <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &pxTCPPacket->xEthernetHeader.xSourceAddress ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 8013ce2:	6a3b      	ldr	r3, [r7, #32]
 8013ce4:	3306      	adds	r3, #6
 8013ce6:	461a      	mov	r2, r3
 8013ce8:	f107 030c 	add.w	r3, r7, #12
 8013cec:	6818      	ldr	r0, [r3, #0]
 8013cee:	6010      	str	r0, [r2, #0]
 8013cf0:	889b      	ldrh	r3, [r3, #4]
 8013cf2:	8093      	strh	r3, [r2, #4]

        /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
        pxTCPPacket->xEthernetHeader.usFrameType = ipIPv4_FRAME_TYPE;
 8013cf4:	6a3b      	ldr	r3, [r7, #32]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	f042 0208 	orr.w	r2, r2, #8
 8013cfc:	731a      	strb	r2, [r3, #12]
 8013cfe:	2200      	movs	r2, #0
 8013d00:	735a      	strb	r2, [r3, #13]

        pxIPHeader->ucVersionHeaderLength = 0x45U;
 8013d02:	69fb      	ldr	r3, [r7, #28]
 8013d04:	2245      	movs	r2, #69	@ 0x45
 8013d06:	701a      	strb	r2, [r3, #0]
        usLength = ( uint16_t ) ( sizeof( TCPPacket_t ) - sizeof( pxTCPPacket->xEthernetHeader ) );
 8013d08:	2338      	movs	r3, #56	@ 0x38
 8013d0a:	837b      	strh	r3, [r7, #26]
        pxIPHeader->usLength = FreeRTOS_htons( usLength );
 8013d0c:	8b7b      	ldrh	r3, [r7, #26]
 8013d0e:	021b      	lsls	r3, r3, #8
 8013d10:	b21a      	sxth	r2, r3
 8013d12:	8b7b      	ldrh	r3, [r7, #26]
 8013d14:	0a1b      	lsrs	r3, r3, #8
 8013d16:	b29b      	uxth	r3, r3
 8013d18:	b21b      	sxth	r3, r3
 8013d1a:	4313      	orrs	r3, r2
 8013d1c:	b21b      	sxth	r3, r3
 8013d1e:	b29a      	uxth	r2, r3
 8013d20:	69fb      	ldr	r3, [r7, #28]
 8013d22:	805a      	strh	r2, [r3, #2]
        pxIPHeader->ucTimeToLive = ( uint8_t ) ipconfigTCP_TIME_TO_LIVE;
 8013d24:	69fb      	ldr	r3, [r7, #28]
 8013d26:	2280      	movs	r2, #128	@ 0x80
 8013d28:	721a      	strb	r2, [r3, #8]

        pxIPHeader->ucProtocol = ( uint8_t ) ipPROTOCOL_TCP;
 8013d2a:	69fb      	ldr	r3, [r7, #28]
 8013d2c:	2206      	movs	r2, #6
 8013d2e:	725a      	strb	r2, [r3, #9]

        /* Addresses and ports will be stored swapped because prvTCPReturnPacket
         * will swap them back while replying. */
        pxIPHeader->ulSourceIPAddress = FreeRTOS_htonl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 );
 8013d30:	687b      	ldr	r3, [r7, #4]
 8013d32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013d34:	061a      	lsls	r2, r3, #24
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013d3a:	021b      	lsls	r3, r3, #8
 8013d3c:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013d40:	431a      	orrs	r2, r3
 8013d42:	687b      	ldr	r3, [r7, #4]
 8013d44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013d46:	0a1b      	lsrs	r3, r3, #8
 8013d48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013d4c:	431a      	orrs	r2, r3
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013d52:	0e1b      	lsrs	r3, r3, #24
 8013d54:	431a      	orrs	r2, r3
 8013d56:	69fb      	ldr	r3, [r7, #28]
 8013d58:	60da      	str	r2, [r3, #12]

        pxTCPPacket->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013d60:	021b      	lsls	r3, r3, #8
 8013d62:	b21a      	sxth	r2, r3
 8013d64:	687b      	ldr	r3, [r7, #4]
 8013d66:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8013d6a:	0a1b      	lsrs	r3, r3, #8
 8013d6c:	b29b      	uxth	r3, r3
 8013d6e:	b21b      	sxth	r3, r3
 8013d70:	4313      	orrs	r3, r2
 8013d72:	b21b      	sxth	r3, r3
 8013d74:	b29a      	uxth	r2, r3
 8013d76:	6a3b      	ldr	r3, [r7, #32]
 8013d78:	845a      	strh	r2, [r3, #34]	@ 0x22
        pxTCPPacket->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8013d7a:	687b      	ldr	r3, [r7, #4]
 8013d7c:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013d7e:	021b      	lsls	r3, r3, #8
 8013d80:	b21a      	sxth	r2, r3
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8013d86:	0a1b      	lsrs	r3, r3, #8
 8013d88:	b29b      	uxth	r3, r3
 8013d8a:	b21b      	sxth	r3, r3
 8013d8c:	4313      	orrs	r3, r2
 8013d8e:	b21b      	sxth	r3, r3
 8013d90:	b29a      	uxth	r2, r3
 8013d92:	6a3b      	ldr	r3, [r7, #32]
 8013d94:	849a      	strh	r2, [r3, #36]	@ 0x24

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	2200      	movs	r2, #0
 8013d9a:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 8013d9e:	687b      	ldr	r3, [r7, #4]
 8013da0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8013da2:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxTCPPacket->xTCPHeader.ucTCPOffset = 0x50U;
 8013da6:	6a3b      	ldr	r3, [r7, #32]
 8013da8:	2250      	movs	r2, #80	@ 0x50
 8013daa:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        /* Only set the SYN flag. */
        pxTCPPacket->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 8013dae:	6a3b      	ldr	r3, [r7, #32]
 8013db0:	2202      	movs	r2, #2
 8013db2:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 8013db6:	6878      	ldr	r0, [r7, #4]
 8013db8:	f000 fc3c 	bl	8014634 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8013dbc:	6878      	ldr	r0, [r7, #4]
 8013dbe:	f7fe ff2b 	bl	8012c18 <prvTCPCreateWindow>
 8013dc2:	4603      	mov	r3, r0
 8013dc4:	2b01      	cmp	r3, #1
 8013dc6:	d001      	beq.n	8013dcc <prvTCPPrepareConnect_IPV4+0x224>
        {
            xReturn = pdFALSE;
 8013dc8:	2300      	movs	r3, #0
 8013dca:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
    }

    return xReturn;
 8013dcc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8013dce:	4618      	mov	r0, r3
 8013dd0:	3734      	adds	r7, #52	@ 0x34
 8013dd2:	46bd      	mov	sp, r7
 8013dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013dd6:	bf00      	nop
 8013dd8:	080255d4 	.word	0x080255d4

08013ddc <prvTCPSendSpecialPktHelper_IPV4>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	b086      	sub	sp, #24
 8013de0:	af00      	add	r7, sp, #0
 8013de2:	6078      	str	r0, [r7, #4]
 8013de4:	460b      	mov	r3, r1
 8013de6:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_t * pxTCPPacket = ( ( TCPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8013de8:	687b      	ldr	r3, [r7, #4]
 8013dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013dec:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 8013dee:	2328      	movs	r3, #40	@ 0x28
 8013df0:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv4_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 8013df2:	697b      	ldr	r3, [r7, #20]
 8013df4:	f893 302f 	ldrb.w	r3, [r3, #47]	@ 0x2f
 8013df8:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 8013dfa:	697b      	ldr	r3, [r7, #20]
 8013dfc:	78fa      	ldrb	r2, [r7, #3]
 8013dfe:	f883 202f 	strb.w	r2, [r3, #47]	@ 0x2f
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 8013e02:	697b      	ldr	r3, [r7, #20]
 8013e04:	2250      	movs	r2, #80	@ 0x50
 8013e06:	f883 202e 	strb.w	r2, [r3, #46]	@ 0x2e

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 8013e0a:	7bfb      	ldrb	r3, [r7, #15]
 8013e0c:	f003 0302 	and.w	r3, r3, #2
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d02c      	beq.n	8013e6e <prvTCPSendSpecialPktHelper_IPV4+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8013e14:	697b      	ldr	r3, [r7, #20]
 8013e16:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8013e1a:	061a      	lsls	r2, r3, #24
 8013e1c:	697b      	ldr	r3, [r7, #20]
 8013e1e:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8013e22:	021b      	lsls	r3, r3, #8
 8013e24:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013e28:	431a      	orrs	r2, r3
 8013e2a:	697b      	ldr	r3, [r7, #20]
 8013e2c:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8013e30:	0a1b      	lsrs	r3, r3, #8
 8013e32:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013e36:	431a      	orrs	r2, r3
 8013e38:	697b      	ldr	r3, [r7, #20]
 8013e3a:	f8d3 3026 	ldr.w	r3, [r3, #38]	@ 0x26
 8013e3e:	0e1b      	lsrs	r3, r3, #24
 8013e40:	4313      	orrs	r3, r2
 8013e42:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8013e44:	68bb      	ldr	r3, [r7, #8]
 8013e46:	3301      	adds	r3, #1
 8013e48:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 8013e4a:	68bb      	ldr	r3, [r7, #8]
 8013e4c:	061a      	lsls	r2, r3, #24
 8013e4e:	68bb      	ldr	r3, [r7, #8]
 8013e50:	021b      	lsls	r3, r3, #8
 8013e52:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8013e56:	431a      	orrs	r2, r3
 8013e58:	68bb      	ldr	r3, [r7, #8]
 8013e5a:	0a1b      	lsrs	r3, r3, #8
 8013e5c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8013e60:	431a      	orrs	r2, r3
 8013e62:	68bb      	ldr	r3, [r7, #8]
 8013e64:	0e1b      	lsrs	r3, r3, #24
 8013e66:	431a      	orrs	r2, r3
 8013e68:	697b      	ldr	r3, [r7, #20]
 8013e6a:	f8c3 2026 	str.w	r2, [r3, #38]	@ 0x26
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8013e6e:	2300      	movs	r3, #0
 8013e70:	693a      	ldr	r2, [r7, #16]
 8013e72:	6879      	ldr	r1, [r7, #4]
 8013e74:	2000      	movs	r0, #0
 8013e76:	f7fe fd73 	bl	8012960 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 8013e7a:	2300      	movs	r3, #0
}
 8013e7c:	4618      	mov	r0, r3
 8013e7e:	3718      	adds	r7, #24
 8013e80:	46bd      	mov	sp, r7
 8013e82:	bd80      	pop	{r7, pc}

08013e84 <prvTCPReturnPacket_IPV6>:
 */
void prvTCPReturnPacket_IPV6( FreeRTOS_Socket_t * pxSocket,
                              NetworkBufferDescriptor_t * pxDescriptor,
                              uint32_t ulLen,
                              BaseType_t xReleaseAfterSend )
{
 8013e84:	b5b0      	push	{r4, r5, r7, lr}
 8013e86:	b0aa      	sub	sp, #168	@ 0xa8
 8013e88:	af00      	add	r7, sp, #0
 8013e8a:	60f8      	str	r0, [r7, #12]
 8013e8c:	60b9      	str	r1, [r7, #8]
 8013e8e:	607a      	str	r2, [r7, #4]
 8013e90:	603b      	str	r3, [r7, #0]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8013e92:	2300      	movs	r3, #0
 8013e94:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8013e98:	2300      	movs	r3, #0
 8013e9a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8013e9e:	2300      	movs	r3, #0
 8013ea0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    BaseType_t xDoRelease = xReleaseAfterSend;
 8013ea4:	683b      	ldr	r3, [r7, #0]
 8013ea6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    EthernetHeader_t * pxEthernetHeader = NULL;
 8013eaa:	2300      	movs	r3, #0
 8013eac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    NetworkBufferDescriptor_t * pxNetworkBuffer = pxDescriptor;
 8013eb0:	68bb      	ldr	r3, [r7, #8]
 8013eb2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    NetworkBufferDescriptor_t xTempBuffer;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    MACAddress_t xMACAddress;
    const void * pvCopySource = NULL;
 8013eb6:	2300      	movs	r3, #0
 8013eb8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    void * pvCopyDest = NULL;
 8013ebc:	2300      	movs	r3, #0
 8013ebe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
    const size_t uxIPHeaderSize = ipSIZE_OF_IPv6_HEADER;
 8013ec2:	2328      	movs	r3, #40	@ 0x28
 8013ec4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    IPv6_Address_t xDestinationIPAddress;

    do
    {
        /* Use do/while to be able to break out of the flow */
        if( ( pxNetworkBuffer == NULL ) && ( pxSocket == NULL ) )
 8013ec8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013ecc:	2b00      	cmp	r3, #0
 8013ece:	d103      	bne.n	8013ed8 <prvTCPReturnPacket_IPV6+0x54>
 8013ed0:	68fb      	ldr	r3, [r7, #12]
 8013ed2:	2b00      	cmp	r3, #0
 8013ed4:	f000 81ae 	beq.w	8014234 <prvTCPReturnPacket_IPV6+0x3b0>
            break;
        }

        /* For sending, a pseudo network buffer will be used, as explained above. */

        if( pxNetworkBuffer == NULL )
 8013ed8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d117      	bne.n	8013f10 <prvTCPReturnPacket_IPV6+0x8c>
        {
            pxNetworkBuffer = &xTempBuffer;
 8013ee0:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013ee4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

            ( void ) memset( &xTempBuffer, 0, sizeof( xTempBuffer ) );
 8013ee8:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8013eec:	2238      	movs	r2, #56	@ 0x38
 8013eee:	2100      	movs	r1, #0
 8013ef0:	4618      	mov	r0, r3
 8013ef2:	f00d f9ee 	bl	80212d2 <memset>
            #if ( ipconfigUSE_LINKED_RX_MESSAGES != 0 )
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif
            pxNetworkBuffer->pucEthernetBuffer = pxSocket->u.xTCP.xPacket.u.ucLastPacket;
 8013ef6:	68fb      	ldr	r3, [r7, #12]
 8013ef8:	f103 02aa 	add.w	r2, r3, #170	@ 0xaa
 8013efc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f00:	625a      	str	r2, [r3, #36]	@ 0x24
            pxNetworkBuffer->xDataLength = sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 8013f02:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f06:	225a      	movs	r2, #90	@ 0x5a
 8013f08:	629a      	str	r2, [r3, #40]	@ 0x28
            xDoRelease = pdFALSE;
 8013f0a:	2300      	movs	r3, #0
 8013f0c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
        }

        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
        {
            if( xDoRelease == pdFALSE )
 8013f10:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013f14:	2b00      	cmp	r3, #0
 8013f16:	d114      	bne.n	8013f42 <prvTCPReturnPacket_IPV6+0xbe>
            {
                /* A zero-copy network driver wants to pass the packet buffer
                 * to DMA, so a new buffer must be created. */
                pxNetworkBuffer = pxDuplicateNetworkBufferWithDescriptor( pxNetworkBuffer, ( size_t ) pxNetworkBuffer->xDataLength );
 8013f18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013f1e:	4619      	mov	r1, r3
 8013f20:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8013f24:	f7f5 fcf2 	bl	800990c <pxDuplicateNetworkBufferWithDescriptor>
 8013f28:	f8c7 00a0 	str.w	r0, [r7, #160]	@ 0xa0

                if( pxNetworkBuffer != NULL )
 8013f2c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f30:	2b00      	cmp	r3, #0
 8013f32:	d003      	beq.n	8013f3c <prvTCPReturnPacket_IPV6+0xb8>
                {
                    xDoRelease = pdTRUE;
 8013f34:	2301      	movs	r3, #1
 8013f36:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8013f3a:	e002      	b.n	8013f42 <prvTCPReturnPacket_IPV6+0xbe>
                }
                else
                {
                    FreeRTOS_debug_printf( ( "prvTCPReturnPacket: duplicate failed\n" ) );
 8013f3c:	48c0      	ldr	r0, [pc, #768]	@ (8014240 <prvTCPReturnPacket_IPV6+0x3bc>)
 8013f3e:	f00c fe9f 	bl	8020c80 <lUDPLoggingPrintf>
            }
        }
        #endif /* ipconfigZERO_COPY_TX_DRIVER */

        #ifndef __COVERITY__
            if( pxNetworkBuffer != NULL ) /* LCOV_EXCL_BR_LINE the 2nd branch will never be reached */
 8013f42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f46:	2b00      	cmp	r3, #0
 8013f48:	f000 8175 	beq.w	8014236 <prvTCPReturnPacket_IPV6+0x3b2>
        #endif
        {
            eARPLookupResult_t eResult;
            NetworkInterface_t * pxInterface;

            configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8013f4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f52:	2b00      	cmp	r3, #0
 8013f54:	d103      	bne.n	8013f5e <prvTCPReturnPacket_IPV6+0xda>
 8013f56:	219d      	movs	r1, #157	@ 0x9d
 8013f58:	48ba      	ldr	r0, [pc, #744]	@ (8014244 <prvTCPReturnPacket_IPV6+0x3c0>)
 8013f5a:	f7ed fa89 	bl	8001470 <vAssertCalled>

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxIPHeader = ( ( IPHeader_IPv6_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER ] ) );
 8013f5e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f64:	330e      	adds	r3, #14
 8013f66:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
            /* Map the Ethernet buffer onto a TCPPacket_t struct for easy access to the fields. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxTCPPacket = ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer;
 8013f6a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013f70:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
            pxEthernetHeader = ( EthernetHeader_t * ) &( pxTCPPacket->xEthernetHeader );
 8013f74:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8013f78:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxProtocolHeaders = ( ProtocolHeaders_t * ) &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSize ] );
 8013f7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f80:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8013f82:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8013f86:	330e      	adds	r3, #14
 8013f88:	4413      	add	r3, r2
 8013f8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8013f8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013f94:	2b00      	cmp	r3, #0
 8013f96:	d117      	bne.n	8013fc8 <prvTCPReturnPacket_IPV6+0x144>
            {
                prvTCPReturn_SetEndPoint( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013f98:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013f9c:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8013fa0:	68f8      	ldr	r0, [r7, #12]
 8013fa2:	f7fe ff9f 	bl	8012ee4 <prvTCPReturn_SetEndPoint>

                if( pxNetworkBuffer->pxEndPoint == NULL )
 8013fa6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8013faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013fac:	2b00      	cmp	r3, #0
 8013fae:	d10b      	bne.n	8013fc8 <prvTCPReturnPacket_IPV6+0x144>
                {
                    if( xDoRelease != pdFALSE )
 8013fb0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8013fb4:	2b00      	cmp	r3, #0
 8013fb6:	d003      	beq.n	8013fc0 <prvTCPReturnPacket_IPV6+0x13c>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8013fb8:	f8d7 00a0 	ldr.w	r0, [r7, #160]	@ 0xa0
 8013fbc:	f002 fc04 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
                    }

                    pxNetworkBuffer = NULL;
 8013fc0:	2300      	movs	r3, #0
 8013fc2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
                    break;
 8013fc6:	e136      	b.n	8014236 <prvTCPReturnPacket_IPV6+0x3b2>
                }
            }

            /* Fill the packet, swapping from- and to-addresses. */
            if( pxSocket != NULL )
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	2b00      	cmp	r3, #0
 8013fcc:	d025      	beq.n	801401a <prvTCPReturnPacket_IPV6+0x196>
            {
                prvTCPReturn_CheckTCPWindow( pxSocket, pxNetworkBuffer, uxIPHeaderSize );
 8013fce:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013fd2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8013fd6:	68f8      	ldr	r0, [r7, #12]
 8013fd8:	f7fe fd02 	bl	80129e0 <prvTCPReturn_CheckTCPWindow>
                prvTCPReturn_SetSequenceNumber( pxSocket, pxNetworkBuffer, uxIPHeaderSize, ulLen );
 8013fdc:	687b      	ldr	r3, [r7, #4]
 8013fde:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8013fe2:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 8013fe6:	68f8      	ldr	r0, [r7, #12]
 8013fe8:	f7fe fd74 	bl	8012ad4 <prvTCPReturn_SetSequenceNumber>
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8013fec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8013ff0:	f103 0018 	add.w	r0, r3, #24
 8013ff4:	68fb      	ldr	r3, [r7, #12]
 8013ff6:	3354      	adds	r3, #84	@ 0x54
 8013ff8:	2210      	movs	r2, #16
 8013ffa:	4619      	mov	r1, r3
 8013ffc:	f00d f85c 	bl	80210b8 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014000:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014004:	f103 0008 	add.w	r0, r3, #8
 8014008:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801400c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801400e:	3338      	adds	r3, #56	@ 0x38
 8014010:	2210      	movs	r2, #16
 8014012:	4619      	mov	r1, r3
 8014014:	f00d f850 	bl	80210b8 <memcpy>
 8014018:	e02d      	b.n	8014076 <prvTCPReturnPacket_IPV6+0x1f2>
            {
                IPv6_Address_t xTempAddress;

                /* Sending data without a socket, probably replying with a RST flag
                 * Just swap the two sequence numbers. */
                vFlip_32( pxProtocolHeaders->xTCPHeader.ulSequenceNumber, pxProtocolHeaders->xTCPHeader.ulAckNr );
 801401a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801401e:	685b      	ldr	r3, [r3, #4]
 8014020:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8014022:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014026:	689a      	ldr	r2, [r3, #8]
 8014028:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801402c:	605a      	str	r2, [r3, #4]
 801402e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014032:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8014034:	609a      	str	r2, [r3, #8]
                ( void ) memcpy( xTempAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014036:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801403a:	3318      	adds	r3, #24
 801403c:	f107 0410 	add.w	r4, r7, #16
 8014040:	6818      	ldr	r0, [r3, #0]
 8014042:	6859      	ldr	r1, [r3, #4]
 8014044:	689a      	ldr	r2, [r3, #8]
 8014046:	68db      	ldr	r3, [r3, #12]
 8014048:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxIPHeader->xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801404a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801404e:	f103 0018 	add.w	r0, r3, #24
 8014052:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014056:	3308      	adds	r3, #8
 8014058:	2210      	movs	r2, #16
 801405a:	4619      	mov	r1, r3
 801405c:	f00d f82c 	bl	80210b8 <memcpy>
                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, xTempAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014060:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014064:	3308      	adds	r3, #8
 8014066:	461d      	mov	r5, r3
 8014068:	f107 0410 	add.w	r4, r7, #16
 801406c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801406e:	6028      	str	r0, [r5, #0]
 8014070:	6069      	str	r1, [r5, #4]
 8014072:	60aa      	str	r2, [r5, #8]
 8014074:	60eb      	str	r3, [r5, #12]
            }

            /* In IPv6, the "payload length" does not include the size of the IP-header */
            pxIPHeader->usPayloadLength = FreeRTOS_htons( ulLen - sizeof( IPHeader_IPv6_t ) );
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	b29b      	uxth	r3, r3
 801407a:	3b28      	subs	r3, #40	@ 0x28
 801407c:	b29b      	uxth	r3, r3
 801407e:	021b      	lsls	r3, r3, #8
 8014080:	b29a      	uxth	r2, r3
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	3b28      	subs	r3, #40	@ 0x28
 8014086:	0a1b      	lsrs	r3, r3, #8
 8014088:	b29b      	uxth	r3, r3
 801408a:	4313      	orrs	r3, r2
 801408c:	b29a      	uxth	r2, r3
 801408e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014092:	809a      	strh	r2, [r3, #4]
                uint32_t ulTotalLength = ulLen + ipSIZE_OF_ETH_HEADER;
                ( void ) usGenerateProtocolChecksum( ( uint8_t * ) pxNetworkBuffer->pucEthernetBuffer, ulTotalLength, pdTRUE );
            }
            #endif /* ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 */

            vFlip_16( pxProtocolHeaders->xTCPHeader.usSourcePort, pxProtocolHeaders->xTCPHeader.usDestinationPort );
 8014094:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8014098:	781a      	ldrb	r2, [r3, #0]
 801409a:	785b      	ldrb	r3, [r3, #1]
 801409c:	021b      	lsls	r3, r3, #8
 801409e:	4313      	orrs	r3, r2
 80140a0:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a
 80140a4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80140a8:	885b      	ldrh	r3, [r3, #2]
 80140aa:	b29a      	uxth	r2, r3
 80140ac:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80140b0:	801a      	strh	r2, [r3, #0]
 80140b2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80140b6:	f8b7 207a 	ldrh.w	r2, [r7, #122]	@ 0x7a
 80140ba:	805a      	strh	r2, [r3, #2]

            /* Important: tell NIC driver how many bytes must be sent. */
            pxNetworkBuffer->xDataLength = ( size_t ) ulLen;
 80140bc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80140c0:	687a      	ldr	r2, [r7, #4]
 80140c2:	629a      	str	r2, [r3, #40]	@ 0x28
            pxNetworkBuffer->xDataLength += ipSIZE_OF_ETH_HEADER;
 80140c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80140c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80140ca:	f103 020e 	add.w	r2, r3, #14
 80140ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80140d2:	629a      	str	r2, [r3, #40]	@ 0x28
            {
                pxNetworkBuffer->pxNextBuffer = NULL;
            }
            #endif

            ( void ) memcpy( xDestinationIPAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80140d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80140d8:	3318      	adds	r3, #24
 80140da:	f107 0420 	add.w	r4, r7, #32
 80140de:	6818      	ldr	r0, [r3, #0]
 80140e0:	6859      	ldr	r1, [r3, #4]
 80140e2:	689a      	ldr	r2, [r3, #8]
 80140e4:	68db      	ldr	r3, [r3, #12]
 80140e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}

            eResult = eNDGetCacheEntry( &xDestinationIPAddress, &xMACAddress, &( pxNetworkBuffer->pxEndPoint ) );
 80140e8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80140ec:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 80140f0:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80140f4:	f107 0320 	add.w	r3, r7, #32
 80140f8:	4618      	mov	r0, r3
 80140fa:	f7f6 ffa7 	bl	800b04c <eNDGetCacheEntry>
 80140fe:	4603      	mov	r3, r0
 8014100:	f887 3079 	strb.w	r3, [r7, #121]	@ 0x79

            if( eResult == eARPCacheHit )
 8014104:	f897 3079 	ldrb.w	r3, [r7, #121]	@ 0x79
 8014108:	2b01      	cmp	r3, #1
 801410a:	d104      	bne.n	8014116 <prvTCPReturnPacket_IPV6+0x292>
            {
                pvCopySource = &xMACAddress;
 801410c:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8014110:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8014114:	e004      	b.n	8014120 <prvTCPReturnPacket_IPV6+0x29c>
            }
            else
            {
                pvCopySource = &pxEthernetHeader->xSourceAddress;
 8014116:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 801411a:	3306      	adds	r3, #6
 801411c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            }

            /* Fill in the destination MAC addresses. */
            pvCopyDest = &pxEthernetHeader->xDestinationAddress;
 8014120:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014124:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( pxEthernetHeader->xDestinationAddress ) );
 8014128:	2206      	movs	r2, #6
 801412a:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 801412e:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8014132:	f00c ffc1 	bl	80210b8 <memcpy>
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes;
 8014136:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801413a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801413c:	33e8      	adds	r3, #232	@ 0xe8
 801413e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
            pvCopyDest = &pxEthernetHeader->xSourceAddress;
 8014142:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8014146:	3306      	adds	r3, #6
 8014148:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            ( void ) memcpy( pvCopyDest, pvCopySource, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 801414c:	2206      	movs	r2, #6
 801414e:	f8d7 109c 	ldr.w	r1, [r7, #156]	@ 0x9c
 8014152:	f8d7 0084 	ldr.w	r0, [r7, #132]	@ 0x84
 8014156:	f00c ffaf 	bl	80210b8 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 801415a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801415e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014160:	2b3b      	cmp	r3, #59	@ 0x3b
 8014162:	d81a      	bhi.n	801419a <prvTCPReturnPacket_IPV6+0x316>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014164:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014168:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801416a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801416e:	e00c      	b.n	801418a <prvTCPReturnPacket_IPV6+0x306>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8014170:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014174:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014176:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801417a:	4413      	add	r3, r2
 801417c:	2200      	movs	r2, #0
 801417e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8014180:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8014184:	3301      	adds	r3, #1
 8014186:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801418a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801418e:	2b3b      	cmp	r3, #59	@ 0x3b
 8014190:	ddee      	ble.n	8014170 <prvTCPReturnPacket_IPV6+0x2ec>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8014192:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8014196:	223c      	movs	r2, #60	@ 0x3c
 8014198:	629a      	str	r2, [r3, #40]	@ 0x28
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */

            /* Send! */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface != NULL );
 801419a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801419e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141a0:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d104      	bne.n	80141b2 <prvTCPReturnPacket_IPV6+0x32e>
 80141a8:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80141ac:	4825      	ldr	r0, [pc, #148]	@ (8014244 <prvTCPReturnPacket_IPV6+0x3c0>)
 80141ae:	f7ed f95f 	bl	8001470 <vAssertCalled>
            configASSERT( pxNetworkBuffer->pxEndPoint->pxNetworkInterface->pfOutput != NULL );
 80141b2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80141b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141b8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80141bc:	68db      	ldr	r3, [r3, #12]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d104      	bne.n	80141cc <prvTCPReturnPacket_IPV6+0x348>
 80141c2:	f240 1119 	movw	r1, #281	@ 0x119
 80141c6:	481f      	ldr	r0, [pc, #124]	@ (8014244 <prvTCPReturnPacket_IPV6+0x3c0>)
 80141c8:	f7ed f952 	bl	8001470 <vAssertCalled>

            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 80141cc:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80141d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80141d2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 80141d6:	677b      	str	r3, [r7, #116]	@ 0x74
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, xDoRelease );
 80141d8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80141da:	68db      	ldr	r3, [r3, #12]
 80141dc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80141e0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	@ 0xa0
 80141e4:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 80141e6:	4798      	blx	r3

            if( xDoRelease == pdFALSE )
 80141e8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80141ec:	2b00      	cmp	r3, #0
 80141ee:	d122      	bne.n	8014236 <prvTCPReturnPacket_IPV6+0x3b2>
            {
                /* Swap-back some fields, as pxBuffer probably points to a socket field
                 * containing the packet header. */
                vFlip_16( pxTCPPacket->xTCPHeader.usSourcePort, pxTCPPacket->xTCPHeader.usDestinationPort );
 80141f0:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80141f4:	f893 2036 	ldrb.w	r2, [r3, #54]	@ 0x36
 80141f8:	f893 3037 	ldrb.w	r3, [r3, #55]	@ 0x37
 80141fc:	021b      	lsls	r3, r3, #8
 80141fe:	4313      	orrs	r3, r2
 8014200:	f8a7 3072 	strh.w	r3, [r7, #114]	@ 0x72
 8014204:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014208:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801420a:	b29a      	uxth	r2, r3
 801420c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014210:	86da      	strh	r2, [r3, #54]	@ 0x36
 8014212:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014216:	f8b7 2072 	ldrh.w	r2, [r7, #114]	@ 0x72
 801421a:	871a      	strh	r2, [r3, #56]	@ 0x38

                ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxIPHeader->xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 801421c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014220:	f103 0008 	add.w	r0, r3, #8
 8014224:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8014228:	3318      	adds	r3, #24
 801422a:	2210      	movs	r2, #16
 801422c:	4619      	mov	r1, r3
 801422e:	f00c ff43 	bl	80210b8 <memcpy>
            {
                /* Nothing to do: the buffer has been passed to DMA and will be released after use */
            }
        } /* if( pxNetworkBuffer != NULL ) */
    } while( ipFALSE_BOOL );
}
 8014232:	e000      	b.n	8014236 <prvTCPReturnPacket_IPV6+0x3b2>
            break;
 8014234:	bf00      	nop
}
 8014236:	bf00      	nop
 8014238:	37a8      	adds	r7, #168	@ 0xa8
 801423a:	46bd      	mov	sp, r7
 801423c:	bdb0      	pop	{r4, r5, r7, pc}
 801423e:	bf00      	nop
 8014240:	08025614 	.word	0x08025614
 8014244:	0802563c 	.word	0x0802563c

08014248 <prvTCPPrepareConnect_IPV6>:
 *       the Ethernet address of the target will be found using ARP. In case the
 *       target IP address is not within the netmask, the hardware address of the
 *       gateway will be used.
 */
BaseType_t prvTCPPrepareConnect_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 8014248:	b590      	push	{r4, r7, lr}
 801424a:	b093      	sub	sp, #76	@ 0x4c
 801424c:	af00      	add	r7, sp, #0
 801424e:	6078      	str	r0, [r7, #4]
    TCPPacket_IPv6_t * pxTCPPacket = NULL;
 8014250:	2300      	movs	r3, #0
 8014252:	63fb      	str	r3, [r7, #60]	@ 0x3c
    IPHeader_IPv6_t * pxIPHeader = NULL;
 8014254:	2300      	movs	r3, #0
 8014256:	63bb      	str	r3, [r7, #56]	@ 0x38
    eARPLookupResult_t eReturned;
    IP_Address_t xRemoteIP;
    MACAddress_t xEthAddress;
    BaseType_t xReturn = pdTRUE;
 8014258:	2301      	movs	r3, #1
 801425a:	647b      	str	r3, [r7, #68]	@ 0x44
    uint32_t ulInitialSequenceNumber = 0;
 801425c:	2300      	movs	r3, #0
 801425e:	643b      	str	r3, [r7, #64]	@ 0x40
    ProtocolHeaders_t * pxProtocolHeaders = NULL;
 8014260:	2300      	movs	r3, #0
 8014262:	637b      	str	r3, [r7, #52]	@ 0x34
    NetworkEndPoint_t * pxEndPoint = NULL;
 8014264:	2300      	movs	r3, #0
 8014266:	60fb      	str	r3, [r7, #12]

    #if ( ipconfigHAS_PRINTF != 0 )
    {
        /* Only necessary for nicer logging. */
        ( void ) memset( xEthAddress.ucBytes, 0, sizeof( xEthAddress.ucBytes ) );
 8014268:	f107 0310 	add.w	r3, r7, #16
 801426c:	2206      	movs	r2, #6
 801426e:	2100      	movs	r1, #0
 8014270:	4618      	mov	r0, r3
 8014272:	f00d f82e 	bl	80212d2 <memset>
    }
    #endif /* ipconfigHAS_PRINTF != 0 */

    ( void ) memset( xRemoteIP.xIP_IPv6.ucBytes, 0, ipSIZE_OF_IPv6_ADDRESS );
 8014276:	f107 0318 	add.w	r3, r7, #24
 801427a:	2210      	movs	r2, #16
 801427c:	2100      	movs	r1, #0
 801427e:	4618      	mov	r0, r3
 8014280:	f00d f827 	bl	80212d2 <memset>
    ( void ) memcpy( xRemoteIP.xIP_IPv6.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	3354      	adds	r3, #84	@ 0x54
 8014288:	f107 0418 	add.w	r4, r7, #24
 801428c:	6818      	ldr	r0, [r3, #0]
 801428e:	6859      	ldr	r1, [r3, #4]
 8014290:	689a      	ldr	r2, [r3, #8]
 8014292:	68db      	ldr	r3, [r3, #12]
 8014294:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    eReturned = eNDGetCacheEntry( &( xRemoteIP.xIP_IPv6 ), &( xEthAddress ), &( pxEndPoint ) );
 8014296:	f107 020c 	add.w	r2, r7, #12
 801429a:	f107 0110 	add.w	r1, r7, #16
 801429e:	f107 0318 	add.w	r3, r7, #24
 80142a2:	4618      	mov	r0, r3
 80142a4:	f7f6 fed2 	bl	800b04c <eNDGetCacheEntry>
 80142a8:	4603      	mov	r3, r0
 80142aa:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    FreeRTOS_printf( ( "eNDGetCacheEntry: %d with end-point %p\n", eReturned, ( void * ) pxEndPoint ) );
 80142ae:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80142b2:	68fa      	ldr	r2, [r7, #12]
 80142b4:	4619      	mov	r1, r3
 80142b6:	4881      	ldr	r0, [pc, #516]	@ (80144bc <prvTCPPrepareConnect_IPV6+0x274>)
 80142b8:	f00c fce2 	bl	8020c80 <lUDPLoggingPrintf>

    if( pxEndPoint != NULL )
 80142bc:	68fb      	ldr	r3, [r7, #12]
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d002      	beq.n	80142c8 <prvTCPPrepareConnect_IPV6+0x80>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 80142c2:	68fa      	ldr	r2, [r7, #12]
 80142c4:	687b      	ldr	r3, [r7, #4]
 80142c6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
                          &( pxSocket->u.xTCP.xPacket.u.ucLastPacket[ ipSIZE_OF_ETH_HEADER + uxIPHeaderSizeSocket( pxSocket ) ] ) );
 80142c8:	6878      	ldr	r0, [r7, #4]
 80142ca:	f7f5 f887 	bl	80093dc <uxIPHeaderSizeSocket>
 80142ce:	4603      	mov	r3, r0
 80142d0:	330e      	adds	r3, #14
    pxProtocolHeaders = ( ( ProtocolHeaders_t * )
 80142d2:	33a0      	adds	r3, #160	@ 0xa0
 80142d4:	687a      	ldr	r2, [r7, #4]
 80142d6:	4413      	add	r3, r2
 80142d8:	330a      	adds	r3, #10
 80142da:	637b      	str	r3, [r7, #52]	@ 0x34

    switch( eReturned )
 80142dc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80142e0:	2b01      	cmp	r3, #1
 80142e2:	d02c      	beq.n	801433e <prvTCPPrepareConnect_IPV6+0xf6>

        case eARPCacheMiss:   /* An ARP table lookup did not find a valid entry. */
        case eCantSendPacket: /* There is no IP address, or an ARP is still in progress. */
        default:
            /* Count the number of times it could not find the ARP address. */
            pxSocket->u.xTCP.ucRepCount++;
 80142e4:	687b      	ldr	r3, [r7, #4]
 80142e6:	f893 3078 	ldrb.w	r3, [r3, #120]	@ 0x78
 80142ea:	3301      	adds	r3, #1
 80142ec:	b2da      	uxtb	r2, r3
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

            FreeRTOS_printf( ( "Looking up %pip with%s end-point\n", ( void * ) xRemoteIP.xIP_IPv6.ucBytes, ( pxEndPoint != NULL ) ? "" : "out" ) );
 80142f4:	68fb      	ldr	r3, [r7, #12]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d001      	beq.n	80142fe <prvTCPPrepareConnect_IPV6+0xb6>
 80142fa:	4a71      	ldr	r2, [pc, #452]	@ (80144c0 <prvTCPPrepareConnect_IPV6+0x278>)
 80142fc:	e000      	b.n	8014300 <prvTCPPrepareConnect_IPV6+0xb8>
 80142fe:	4a71      	ldr	r2, [pc, #452]	@ (80144c4 <prvTCPPrepareConnect_IPV6+0x27c>)
 8014300:	f107 0318 	add.w	r3, r7, #24
 8014304:	4619      	mov	r1, r3
 8014306:	4870      	ldr	r0, [pc, #448]	@ (80144c8 <prvTCPPrepareConnect_IPV6+0x280>)
 8014308:	f00c fcba 	bl	8020c80 <lUDPLoggingPrintf>

            if( pxEndPoint != NULL )
 801430c:	68fb      	ldr	r3, [r7, #12]
 801430e:	2b00      	cmp	r3, #0
 8014310:	d012      	beq.n	8014338 <prvTCPPrepareConnect_IPV6+0xf0>
            {
                size_t uxNeededSize;
                NetworkBufferDescriptor_t * pxNetworkBuffer;

                uxNeededSize = ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER + sizeof( ICMPHeader_IPv6_t );
 8014312:	2356      	movs	r3, #86	@ 0x56
 8014314:	62fb      	str	r3, [r7, #44]	@ 0x2c
                pxNetworkBuffer = pxGetNetworkBufferWithDescriptor( uxNeededSize, 0U );
 8014316:	2100      	movs	r1, #0
 8014318:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 801431a:	f002 f9ed 	bl	80166f8 <pxGetNetworkBufferWithDescriptor>
 801431e:	62b8      	str	r0, [r7, #40]	@ 0x28

                if( pxNetworkBuffer != NULL )
 8014320:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014322:	2b00      	cmp	r3, #0
 8014324:	d008      	beq.n	8014338 <prvTCPPrepareConnect_IPV6+0xf0>
                {
                    pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8014326:	68fa      	ldr	r2, [r7, #12]
 8014328:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801432a:	631a      	str	r2, [r3, #48]	@ 0x30
                    vNDSendNeighbourSolicitation( pxNetworkBuffer, &( xRemoteIP.xIP_IPv6 ) );
 801432c:	f107 0318 	add.w	r3, r7, #24
 8014330:	4619      	mov	r1, r3
 8014332:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8014334:	f7f7 f8f6 	bl	800b524 <vNDSendNeighbourSolicitation>
                }
            }

            xReturn = pdFALSE;
 8014338:	2300      	movs	r3, #0
 801433a:	647b      	str	r3, [r7, #68]	@ 0x44
            break;
 801433c:	e000      	b.n	8014340 <prvTCPPrepareConnect_IPV6+0xf8>
            break;            /* We can now prepare the SYN packet. */
 801433e:	bf00      	nop
    }

    if( xReturn != pdFALSE )
 8014340:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014342:	2b00      	cmp	r3, #0
 8014344:	d010      	beq.n	8014368 <prvTCPPrepareConnect_IPV6+0x120>
    {
        /* Get a difficult-to-predict initial sequence number for this 4-tuple. */
        ulInitialSequenceNumber = ulApplicationGetNextSequenceNumber( pxSocket->xLocalAddress.ulIP_IPv4,
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	6a98      	ldr	r0, [r3, #40]	@ 0x28
 801434a:	687b      	ldr	r3, [r7, #4]
 801434c:	8f19      	ldrh	r1, [r3, #56]	@ 0x38
 801434e:	687b      	ldr	r3, [r7, #4]
 8014350:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8014352:	687b      	ldr	r3, [r7, #4]
 8014354:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014358:	f7ed f8aa 	bl	80014b0 <ulApplicationGetNextSequenceNumber>
 801435c:	6438      	str	r0, [r7, #64]	@ 0x40
                                                                      pxSocket->usLocalPort,
                                                                      pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4,
                                                                      pxSocket->u.xTCP.usRemotePort );

        /* Check for a random number generation error. */
        if( ulInitialSequenceNumber == 0U )
 801435e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014360:	2b00      	cmp	r3, #0
 8014362:	d101      	bne.n	8014368 <prvTCPPrepareConnect_IPV6+0x120>
        {
            xReturn = pdFALSE;
 8014364:	2300      	movs	r3, #0
 8014366:	647b      	str	r3, [r7, #68]	@ 0x44
        }
    }

    if( xReturn != pdFALSE )
 8014368:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801436a:	2b00      	cmp	r3, #0
 801436c:	d05d      	beq.n	801442a <prvTCPPrepareConnect_IPV6+0x1e2>
         * the buffer onto the TCPPacket_IPv6_t struct to easily access it's field. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxSocket->u.xTCP.xPacket.u.ucLastPacket );
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	33aa      	adds	r3, #170	@ 0xaa
 8014372:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxIPHeader = &( pxTCPPacket->xIPHeader );
 8014374:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014376:	330e      	adds	r3, #14
 8014378:	63bb      	str	r3, [r7, #56]	@ 0x38

        /* reset the retry counter to zero. */
        pxSocket->u.xTCP.ucRepCount = 0U;
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	2200      	movs	r2, #0
 801437e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

        /* And remember that the connect/SYN data are prepared. */
        pxSocket->u.xTCP.bits.bConnPrepared = pdTRUE_UNSIGNED;
 8014382:	687a      	ldr	r2, [r7, #4]
 8014384:	f892 3069 	ldrb.w	r3, [r2, #105]	@ 0x69
 8014388:	f043 0308 	orr.w	r3, r3, #8
 801438c:	f882 3069 	strb.w	r3, [r2, #105]	@ 0x69

        /* Now that the Ethernet address is known, the initial packet can be
         * prepared. */
        ( void ) memset( pxSocket->u.xTCP.xPacket.u.ucLastPacket, 0, sizeof( pxSocket->u.xTCP.xPacket.u.ucLastPacket ) );
 8014390:	687b      	ldr	r3, [r7, #4]
 8014392:	33aa      	adds	r3, #170	@ 0xaa
 8014394:	225a      	movs	r2, #90	@ 0x5a
 8014396:	2100      	movs	r1, #0
 8014398:	4618      	mov	r0, r3
 801439a:	f00c ff9a 	bl	80212d2 <memset>

        /* Write the Ethernet address in Source, because it will be swapped by
         * prvTCPReturnPacket(). */
        ( void ) memcpy( ( void * ) ( &( pxTCPPacket->xEthernetHeader.xSourceAddress ) ), ( const void * ) ( &xEthAddress ), sizeof( xEthAddress ) );
 801439e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143a0:	3306      	adds	r3, #6
 80143a2:	461a      	mov	r2, r3
 80143a4:	f107 0310 	add.w	r3, r7, #16
 80143a8:	6818      	ldr	r0, [r3, #0]
 80143aa:	6010      	str	r0, [r2, #0]
 80143ac:	889b      	ldrh	r3, [r3, #4]
 80143ae:	8093      	strh	r3, [r2, #4]

        if( pxSocket->bits.bIsIPv6 != pdFALSE_UNSIGNED )
 80143b0:	687b      	ldr	r3, [r7, #4]
 80143b2:	7a1b      	ldrb	r3, [r3, #8]
 80143b4:	f003 0301 	and.w	r3, r3, #1
 80143b8:	b2db      	uxtb	r3, r3
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	d035      	beq.n	801442a <prvTCPPrepareConnect_IPV6+0x1e2>
        {
            /* 'ipIPv4_FRAME_TYPE' is already in network-byte-order. */
            pxTCPPacket->xEthernetHeader.usFrameType = ipIPv6_FRAME_TYPE;
 80143be:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80143c0:	2200      	movs	r2, #0
 80143c2:	f062 0279 	orn	r2, r2, #121	@ 0x79
 80143c6:	731a      	strb	r2, [r3, #12]
 80143c8:	2200      	movs	r2, #0
 80143ca:	f062 0222 	orn	r2, r2, #34	@ 0x22
 80143ce:	735a      	strb	r2, [r3, #13]

            pxIPHeader->ucVersionTrafficClass = ( uint8_t ) 0x60U;
 80143d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143d2:	2260      	movs	r2, #96	@ 0x60
 80143d4:	701a      	strb	r2, [r3, #0]
            pxIPHeader->ucTrafficClassFlow = ( uint8_t ) 0x00;
 80143d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143d8:	2200      	movs	r2, #0
 80143da:	705a      	strb	r2, [r3, #1]
            pxIPHeader->usFlowLabel = ( uint16_t ) 0x0000U;
 80143dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143de:	2200      	movs	r2, #0
 80143e0:	709a      	strb	r2, [r3, #2]
 80143e2:	2200      	movs	r2, #0
 80143e4:	70da      	strb	r2, [r3, #3]
            pxIPHeader->usPayloadLength = FreeRTOS_htons( sizeof( TCPHeader_t ) );
 80143e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143e8:	2200      	movs	r2, #0
 80143ea:	711a      	strb	r2, [r3, #4]
 80143ec:	2200      	movs	r2, #0
 80143ee:	f042 0224 	orr.w	r2, r2, #36	@ 0x24
 80143f2:	715a      	strb	r2, [r3, #5]
            pxIPHeader->ucNextHeader = ( uint8_t ) ipPROTOCOL_TCP;
 80143f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143f6:	2206      	movs	r2, #6
 80143f8:	719a      	strb	r2, [r3, #6]
            pxIPHeader->ucHopLimit = 128;
 80143fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80143fc:	2280      	movs	r2, #128	@ 0x80
 80143fe:	71da      	strb	r2, [r3, #7]
            /* The Source and Destination addresses will be swapped later. */
            ( void ) memcpy( pxIPHeader->xSourceAddress.ucBytes, pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xSourceAddress.ucBytes ) );
 8014400:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014402:	f103 0008 	add.w	r0, r3, #8
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	3354      	adds	r3, #84	@ 0x54
 801440a:	2210      	movs	r2, #16
 801440c:	4619      	mov	r1, r3
 801440e:	f00c fe53 	bl	80210b8 <memcpy>
            ( void ) memcpy( pxIPHeader->xDestinationAddress.ucBytes, pxSocket->xLocalAddress.xIP_IPv6.ucBytes, sizeof( pxIPHeader->xDestinationAddress.ucBytes ) );
 8014412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014414:	f103 0018 	add.w	r0, r3, #24
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	3328      	adds	r3, #40	@ 0x28
 801441c:	2210      	movs	r2, #16
 801441e:	4619      	mov	r1, r3
 8014420:	f00c fe4a 	bl	80210b8 <memcpy>
            pxEndPoint = pxSocket->pxEndPoint;
 8014424:	687b      	ldr	r3, [r7, #4]
 8014426:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014428:	60fb      	str	r3, [r7, #12]
        }
    }

    if( pxEndPoint != NULL )
 801442a:	68fb      	ldr	r3, [r7, #12]
 801442c:	2b00      	cmp	r3, #0
 801442e:	d03a      	beq.n	80144a6 <prvTCPPrepareConnect_IPV6+0x25e>
    {
        pxSocket->pxEndPoint = pxEndPoint;
 8014430:	68fa      	ldr	r2, [r7, #12]
 8014432:	687b      	ldr	r3, [r7, #4]
 8014434:	64da      	str	r2, [r3, #76]	@ 0x4c

        pxProtocolHeaders->xTCPHeader.usSourcePort = FreeRTOS_htons( pxSocket->u.xTCP.usRemotePort );
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801443c:	021b      	lsls	r3, r3, #8
 801443e:	b21a      	sxth	r2, r3
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 8014446:	0a1b      	lsrs	r3, r3, #8
 8014448:	b29b      	uxth	r3, r3
 801444a:	b21b      	sxth	r3, r3
 801444c:	4313      	orrs	r3, r2
 801444e:	b21b      	sxth	r3, r3
 8014450:	b29a      	uxth	r2, r3
 8014452:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014454:	801a      	strh	r2, [r3, #0]
        pxProtocolHeaders->xTCPHeader.usDestinationPort = FreeRTOS_htons( pxSocket->usLocalPort );
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 801445a:	021b      	lsls	r3, r3, #8
 801445c:	b21a      	sxth	r2, r3
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	8f1b      	ldrh	r3, [r3, #56]	@ 0x38
 8014462:	0a1b      	lsrs	r3, r3, #8
 8014464:	b29b      	uxth	r3, r3
 8014466:	b21b      	sxth	r3, r3
 8014468:	4313      	orrs	r3, r2
 801446a:	b21b      	sxth	r3, r3
 801446c:	b29a      	uxth	r2, r3
 801446e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014470:	805a      	strh	r2, [r3, #2]

        /* We are actively connecting, so the peer's Initial Sequence Number (ISN)
         * isn't known yet. */
        pxSocket->u.xTCP.xTCPWindow.rx.ulCurrentSequenceNumber = 0U;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	2200      	movs	r2, #0
 8014476:	f8c3 2130 	str.w	r2, [r3, #304]	@ 0x130

        /* Start with ISN (Initial Sequence Number). */
        pxSocket->u.xTCP.xTCPWindow.ulOurSequenceNumber = ulInitialSequenceNumber;
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801447e:	f8c3 214c 	str.w	r2, [r3, #332]	@ 0x14c

        /* The TCP header size is 20 bytes, divided by 4 equals 5, which is put in
         * the high nibble of the TCP offset field. */
        pxProtocolHeaders->xTCPHeader.ucTCPOffset = 0x50U;
 8014482:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014484:	2250      	movs	r2, #80	@ 0x50
 8014486:	731a      	strb	r2, [r3, #12]

        /* Only set the SYN flag. */
        pxProtocolHeaders->xTCPHeader.ucTCPFlags = tcpTCP_FLAG_SYN;
 8014488:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801448a:	2202      	movs	r2, #2
 801448c:	735a      	strb	r2, [r3, #13]

        /* Set the value of usMSS for this socket. */
        prvSocketSetMSS( pxSocket );
 801448e:	6878      	ldr	r0, [r7, #4]
 8014490:	f000 f8d0 	bl	8014634 <prvSocketSetMSS>

        /* The initial sequence numbers at our side are known.  Later
         * vTCPWindowInit() will be called to fill in the peer's sequence numbers, but
         * first wait for a SYN+ACK reply. */
        if( prvTCPCreateWindow( pxSocket ) != pdTRUE )
 8014494:	6878      	ldr	r0, [r7, #4]
 8014496:	f7fe fbbf 	bl	8012c18 <prvTCPCreateWindow>
 801449a:	4603      	mov	r3, r0
 801449c:	2b01      	cmp	r3, #1
 801449e:	d007      	beq.n	80144b0 <prvTCPPrepareConnect_IPV6+0x268>
        {
            xReturn = pdFAIL;
 80144a0:	2300      	movs	r3, #0
 80144a2:	647b      	str	r3, [r7, #68]	@ 0x44
 80144a4:	e004      	b.n	80144b0 <prvTCPPrepareConnect_IPV6+0x268>
        }
    }
    else
    {
        FreeRTOS_printf( ( "prvTCPPrepareConnect: No pxEndPoint yet?\n" ) );
 80144a6:	4809      	ldr	r0, [pc, #36]	@ (80144cc <prvTCPPrepareConnect_IPV6+0x284>)
 80144a8:	f00c fbea 	bl	8020c80 <lUDPLoggingPrintf>
        xReturn = pdFAIL;
 80144ac:	2300      	movs	r3, #0
 80144ae:	647b      	str	r3, [r7, #68]	@ 0x44
    }

    return xReturn;
 80144b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80144b2:	4618      	mov	r0, r3
 80144b4:	374c      	adds	r7, #76	@ 0x4c
 80144b6:	46bd      	mov	sp, r7
 80144b8:	bd90      	pop	{r4, r7, pc}
 80144ba:	bf00      	nop
 80144bc:	0802567c 	.word	0x0802567c
 80144c0:	080256a4 	.word	0x080256a4
 80144c4:	080256a8 	.word	0x080256a8
 80144c8:	080256ac 	.word	0x080256ac
 80144cc:	080256d0 	.word	0x080256d0

080144d0 <prvTCPSendSpecialPktHelper_IPV6>:
 *
 * @return pdFAIL always indicating that the packet was not consumed.
 */
BaseType_t prvTCPSendSpecialPktHelper_IPV6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                            uint8_t ucTCPFlags )
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b086      	sub	sp, #24
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	6078      	str	r0, [r7, #4]
 80144d8:	460b      	mov	r3, r1
 80144da:	70fb      	strb	r3, [r7, #3]
        /* Map the ethernet buffer onto the TCPPacket_t struct for easy access to the fields. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        TCPPacket_IPv6_t * pxTCPPacket = ( ( TCPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80144e0:	617b      	str	r3, [r7, #20]
        const uint32_t ulSendLength =
 80144e2:	233c      	movs	r3, #60	@ 0x3c
 80144e4:	613b      	str	r3, [r7, #16]
            ipSIZE_OF_IPv6_HEADER + ipSIZE_OF_TCP_HEADER; /* Plus 0 options. */

        uint8_t ucFlagsReceived = pxTCPPacket->xTCPHeader.ucTCPFlags;
 80144e6:	697b      	ldr	r3, [r7, #20]
 80144e8:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 80144ec:	73fb      	strb	r3, [r7, #15]
        pxTCPPacket->xTCPHeader.ucTCPFlags = ucTCPFlags;
 80144ee:	697b      	ldr	r3, [r7, #20]
 80144f0:	78fa      	ldrb	r2, [r7, #3]
 80144f2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
        pxTCPPacket->xTCPHeader.ucTCPOffset = ( ipSIZE_OF_TCP_HEADER ) << 2;
 80144f6:	697b      	ldr	r3, [r7, #20]
 80144f8:	2250      	movs	r2, #80	@ 0x50
 80144fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        if( ( ucFlagsReceived & tcpTCP_FLAG_SYN ) != 0U )
 80144fe:	7bfb      	ldrb	r3, [r7, #15]
 8014500:	f003 0302 	and.w	r3, r3, #2
 8014504:	2b00      	cmp	r3, #0
 8014506:	d02c      	beq.n	8014562 <prvTCPSendSpecialPktHelper_IPV6+0x92>
        {
            /* A synchronize packet is received. It counts as 1 pseudo byte of data,
             * so increase the variable with 1. Before sending a reply, the values of
             * 'ulSequenceNumber' and 'ulAckNr' will be swapped. */
            uint32_t ulSequenceNumber = FreeRTOS_ntohl( pxTCPPacket->xTCPHeader.ulSequenceNumber );
 8014508:	697b      	ldr	r3, [r7, #20]
 801450a:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 801450e:	061a      	lsls	r2, r3, #24
 8014510:	697b      	ldr	r3, [r7, #20]
 8014512:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014516:	021b      	lsls	r3, r3, #8
 8014518:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801451c:	431a      	orrs	r2, r3
 801451e:	697b      	ldr	r3, [r7, #20]
 8014520:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014524:	0a1b      	lsrs	r3, r3, #8
 8014526:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801452a:	431a      	orrs	r2, r3
 801452c:	697b      	ldr	r3, [r7, #20]
 801452e:	f8d3 303a 	ldr.w	r3, [r3, #58]	@ 0x3a
 8014532:	0e1b      	lsrs	r3, r3, #24
 8014534:	4313      	orrs	r3, r2
 8014536:	60bb      	str	r3, [r7, #8]
            ulSequenceNumber++;
 8014538:	68bb      	ldr	r3, [r7, #8]
 801453a:	3301      	adds	r3, #1
 801453c:	60bb      	str	r3, [r7, #8]
            pxTCPPacket->xTCPHeader.ulSequenceNumber = FreeRTOS_htonl( ulSequenceNumber );
 801453e:	68bb      	ldr	r3, [r7, #8]
 8014540:	061a      	lsls	r2, r3, #24
 8014542:	68bb      	ldr	r3, [r7, #8]
 8014544:	021b      	lsls	r3, r3, #8
 8014546:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801454a:	431a      	orrs	r2, r3
 801454c:	68bb      	ldr	r3, [r7, #8]
 801454e:	0a1b      	lsrs	r3, r3, #8
 8014550:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8014554:	431a      	orrs	r2, r3
 8014556:	68bb      	ldr	r3, [r7, #8]
 8014558:	0e1b      	lsrs	r3, r3, #24
 801455a:	431a      	orrs	r2, r3
 801455c:	697b      	ldr	r3, [r7, #20]
 801455e:	f8c3 203a 	str.w	r2, [r3, #58]	@ 0x3a
        }

        prvTCPReturnPacket( NULL, pxNetworkBuffer, ulSendLength, pdFALSE );
 8014562:	2300      	movs	r3, #0
 8014564:	693a      	ldr	r2, [r7, #16]
 8014566:	6879      	ldr	r1, [r7, #4]
 8014568:	2000      	movs	r0, #0
 801456a:	f7fe f9f9 	bl	8012960 <prvTCPReturnPacket>
    }
    #endif /* !ipconfigIGNORE_UNKNOWN_PACKETS */

    /* The packet was not consumed. */
    return pdFAIL;
 801456e:	2300      	movs	r3, #0
}
 8014570:	4618      	mov	r0, r3
 8014572:	3718      	adds	r7, #24
 8014574:	46bd      	mov	sp, r7
 8014576:	bd80      	pop	{r7, pc}

08014578 <prvTCPFlagMeaning>:
 * @param[in] xFlags The TCP flags.
 *
 * @return The string containing the flags.
 */
        const char * prvTCPFlagMeaning( UBaseType_t xFlags )
        {
 8014578:	b5f0      	push	{r4, r5, r6, r7, lr}
 801457a:	b08d      	sub	sp, #52	@ 0x34
 801457c:	af08      	add	r7, sp, #32
 801457e:	6078      	str	r0, [r7, #4]
            size_t uxFlags = ( size_t ) xFlags;
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	60fb      	str	r3, [r7, #12]

            ( void ) snprintf( retString,
                               sizeof( retString ), "%c%c%c%c%c%c%c%c",
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_FIN ) != 0 ) ? 'F' : '.',   /* 0x0001: No more data from sender */
 8014584:	68fb      	ldr	r3, [r7, #12]
 8014586:	f003 0301 	and.w	r3, r3, #1
            ( void ) snprintf( retString,
 801458a:	2b00      	cmp	r3, #0
 801458c:	d002      	beq.n	8014594 <prvTCPFlagMeaning+0x1c>
 801458e:	f04f 0c46 	mov.w	ip, #70	@ 0x46
 8014592:	e001      	b.n	8014598 <prvTCPFlagMeaning+0x20>
 8014594:	f04f 0c2e 	mov.w	ip, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_SYN ) != 0 ) ? 'S' : '.',   /* 0x0002: Synchronize sequence numbers */
 8014598:	68fb      	ldr	r3, [r7, #12]
 801459a:	f003 0302 	and.w	r3, r3, #2
            ( void ) snprintf( retString,
 801459e:	2b00      	cmp	r3, #0
 80145a0:	d001      	beq.n	80145a6 <prvTCPFlagMeaning+0x2e>
 80145a2:	2353      	movs	r3, #83	@ 0x53
 80145a4:	e000      	b.n	80145a8 <prvTCPFlagMeaning+0x30>
 80145a6:	232e      	movs	r3, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_RST ) != 0 ) ? 'R' : '.',   /* 0x0004: Reset the connection */
 80145a8:	68fa      	ldr	r2, [r7, #12]
 80145aa:	f002 0204 	and.w	r2, r2, #4
            ( void ) snprintf( retString,
 80145ae:	2a00      	cmp	r2, #0
 80145b0:	d001      	beq.n	80145b6 <prvTCPFlagMeaning+0x3e>
 80145b2:	2252      	movs	r2, #82	@ 0x52
 80145b4:	e000      	b.n	80145b8 <prvTCPFlagMeaning+0x40>
 80145b6:	222e      	movs	r2, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_PSH ) != 0 ) ? 'P' : '.',   /* 0x0008: Push function: please push buffered data to the recv application */
 80145b8:	68f9      	ldr	r1, [r7, #12]
 80145ba:	f001 0108 	and.w	r1, r1, #8
            ( void ) snprintf( retString,
 80145be:	2900      	cmp	r1, #0
 80145c0:	d001      	beq.n	80145c6 <prvTCPFlagMeaning+0x4e>
 80145c2:	2150      	movs	r1, #80	@ 0x50
 80145c4:	e000      	b.n	80145c8 <prvTCPFlagMeaning+0x50>
 80145c6:	212e      	movs	r1, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ACK ) != 0 ) ? 'A' : '.',   /* 0x0010: Acknowledgment field is significant */
 80145c8:	68f8      	ldr	r0, [r7, #12]
 80145ca:	f000 0010 	and.w	r0, r0, #16
            ( void ) snprintf( retString,
 80145ce:	2800      	cmp	r0, #0
 80145d0:	d001      	beq.n	80145d6 <prvTCPFlagMeaning+0x5e>
 80145d2:	2041      	movs	r0, #65	@ 0x41
 80145d4:	e000      	b.n	80145d8 <prvTCPFlagMeaning+0x60>
 80145d6:	202e      	movs	r0, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_URG ) != 0 ) ? 'U' : '.',   /* 0x0020: Urgent pointer field is significant */
 80145d8:	68fc      	ldr	r4, [r7, #12]
 80145da:	f004 0420 	and.w	r4, r4, #32
            ( void ) snprintf( retString,
 80145de:	2c00      	cmp	r4, #0
 80145e0:	d001      	beq.n	80145e6 <prvTCPFlagMeaning+0x6e>
 80145e2:	2455      	movs	r4, #85	@ 0x55
 80145e4:	e000      	b.n	80145e8 <prvTCPFlagMeaning+0x70>
 80145e6:	242e      	movs	r4, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_ECN ) != 0 ) ? 'E' : '.',   /* 0x0040: ECN-Echo */
 80145e8:	68fd      	ldr	r5, [r7, #12]
 80145ea:	f005 0540 	and.w	r5, r5, #64	@ 0x40
            ( void ) snprintf( retString,
 80145ee:	2d00      	cmp	r5, #0
 80145f0:	d001      	beq.n	80145f6 <prvTCPFlagMeaning+0x7e>
 80145f2:	2545      	movs	r5, #69	@ 0x45
 80145f4:	e000      	b.n	80145f8 <prvTCPFlagMeaning+0x80>
 80145f6:	252e      	movs	r5, #46	@ 0x2e
                               ( ( uxFlags & ( size_t ) tcpTCP_FLAG_CWR ) != 0 ) ? 'C' : '.' ); /* 0x0080: Congestion Window Reduced */
 80145f8:	68fe      	ldr	r6, [r7, #12]
 80145fa:	f006 0680 	and.w	r6, r6, #128	@ 0x80
            ( void ) snprintf( retString,
 80145fe:	2e00      	cmp	r6, #0
 8014600:	d001      	beq.n	8014606 <prvTCPFlagMeaning+0x8e>
 8014602:	2643      	movs	r6, #67	@ 0x43
 8014604:	e000      	b.n	8014608 <prvTCPFlagMeaning+0x90>
 8014606:	262e      	movs	r6, #46	@ 0x2e
 8014608:	9606      	str	r6, [sp, #24]
 801460a:	9505      	str	r5, [sp, #20]
 801460c:	9404      	str	r4, [sp, #16]
 801460e:	9003      	str	r0, [sp, #12]
 8014610:	9102      	str	r1, [sp, #8]
 8014612:	9201      	str	r2, [sp, #4]
 8014614:	9300      	str	r3, [sp, #0]
 8014616:	4663      	mov	r3, ip
 8014618:	4a04      	ldr	r2, [pc, #16]	@ (801462c <prvTCPFlagMeaning+0xb4>)
 801461a:	210a      	movs	r1, #10
 801461c:	4804      	ldr	r0, [pc, #16]	@ (8014630 <prvTCPFlagMeaning+0xb8>)
 801461e:	f00d fb5b 	bl	8021cd8 <snprintf>
            return retString;
 8014622:	4b03      	ldr	r3, [pc, #12]	@ (8014630 <prvTCPFlagMeaning+0xb8>)
        }
 8014624:	4618      	mov	r0, r3
 8014626:	3714      	adds	r7, #20
 8014628:	46bd      	mov	sp, r7
 801462a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801462c:	080256fc 	.word	0x080256fc
 8014630:	20001324 	.word	0x20001324

08014634 <prvSocketSetMSS>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
    void prvSocketSetMSS( FreeRTOS_Socket_t * pxSocket )
    {
 8014634:	b580      	push	{r7, lr}
 8014636:	b082      	sub	sp, #8
 8014638:	af00      	add	r7, sp, #0
 801463a:	6078      	str	r0, [r7, #4]
        switch( pxSocket->bits.bIsIPv6 ) /* LCOV_EXCL_BR_LINE */
 801463c:	687b      	ldr	r3, [r7, #4]
 801463e:	7a1b      	ldrb	r3, [r3, #8]
 8014640:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8014644:	b2db      	uxtb	r3, r3
 8014646:	2b00      	cmp	r3, #0
 8014648:	d002      	beq.n	8014650 <prvSocketSetMSS+0x1c>
 801464a:	2b01      	cmp	r3, #1
 801464c:	d004      	beq.n	8014658 <prvSocketSetMSS+0x24>
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            default: /* LCOV_EXCL_LINE */
                /* Shouldn't reach here */
                /* MISRA 16.4 Compliance */
                break; /* LCOV_EXCL_LINE */
 801464e:	e007      	b.n	8014660 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV4( pxSocket );
 8014650:	6878      	ldr	r0, [r7, #4]
 8014652:	f000 f809 	bl	8014668 <prvSocketSetMSS_IPV4>
                    break;
 8014656:	e003      	b.n	8014660 <prvSocketSetMSS+0x2c>
                    prvSocketSetMSS_IPV6( pxSocket );
 8014658:	6878      	ldr	r0, [r7, #4]
 801465a:	f000 f84b 	bl	80146f4 <prvSocketSetMSS_IPV6>
                    break;
 801465e:	bf00      	nop
        }
    }
 8014660:	bf00      	nop
 8014662:	3708      	adds	r7, #8
 8014664:	46bd      	mov	sp, r7
 8014666:	bd80      	pop	{r7, pc}

08014668 <prvSocketSetMSS_IPV4>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV4( FreeRTOS_Socket_t * pxSocket )
{
 8014668:	b580      	push	{r7, lr}
 801466a:	b084      	sub	sp, #16
 801466c:	af00      	add	r7, sp, #0
 801466e:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 8014670:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014674:	60fb      	str	r3, [r7, #12]
    const NetworkEndPoint_t * pxEndPoint = pxSocket->pxEndPoint;
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801467a:	60bb      	str	r3, [r7, #8]

    if( pxEndPoint != NULL )
 801467c:	68bb      	ldr	r3, [r7, #8]
 801467e:	2b00      	cmp	r3, #0
 8014680:	d023      	beq.n	80146ca <prvSocketSetMSS_IPV4+0x62>
    {
        /* Do not allow MSS smaller than tcpMINIMUM_SEGMENT_LENGTH. */
        #if ( ipconfigTCP_MSS >= tcpMINIMUM_SEGMENT_LENGTH )
        {
            ulMSS = ipconfigTCP_MSS;
 8014682:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014686:	60fb      	str	r3, [r7, #12]
            ulMSS = tcpMINIMUM_SEGMENT_LENGTH;
        }
        #endif

        /* Check if the remote IP-address belongs to the same netmask. */
        if( ( ( FreeRTOS_ntohl( pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4 ) ^ pxEndPoint->ipv4_settings.ulIPAddress ) & pxEndPoint->ipv4_settings.ulNetMask ) != 0U )
 8014688:	687b      	ldr	r3, [r7, #4]
 801468a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801468c:	061a      	lsls	r2, r3, #24
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014692:	021b      	lsls	r3, r3, #8
 8014694:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014698:	431a      	orrs	r2, r3
 801469a:	687b      	ldr	r3, [r7, #4]
 801469c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801469e:	0a1b      	lsrs	r3, r3, #8
 80146a0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80146a4:	431a      	orrs	r2, r3
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80146aa:	0e1b      	lsrs	r3, r3, #24
 80146ac:	431a      	orrs	r2, r3
 80146ae:	68bb      	ldr	r3, [r7, #8]
 80146b0:	681b      	ldr	r3, [r3, #0]
 80146b2:	405a      	eors	r2, r3
 80146b4:	68bb      	ldr	r3, [r7, #8]
 80146b6:	685b      	ldr	r3, [r3, #4]
 80146b8:	4013      	ands	r3, r2
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d005      	beq.n	80146ca <prvSocketSetMSS_IPV4+0x62>
        {
            /* Data for this peer will pass through a router, and maybe through
             * the internet.  Limit the MSS to 1400 bytes or less. */
            ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 80146be:	68f9      	ldr	r1, [r7, #12]
 80146c0:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 80146c4:	f7f5 fbbe 	bl	8009e44 <FreeRTOS_min_uint32>
 80146c8:	60f8      	str	r0, [r7, #12]
        }
    }

    FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %xip port %u\n", ( unsigned ) ulMSS, ( unsigned ) pxSocket->u.xTCP.xRemoteIP.ulIP_IPv4, pxSocket->u.xTCP.usRemotePort ) );
 80146ca:	687b      	ldr	r3, [r7, #4]
 80146cc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80146ce:	687b      	ldr	r3, [r7, #4]
 80146d0:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 80146d4:	68f9      	ldr	r1, [r7, #12]
 80146d6:	4806      	ldr	r0, [pc, #24]	@ (80146f0 <prvSocketSetMSS_IPV4+0x88>)
 80146d8:	f00c fad2 	bl	8020c80 <lUDPLoggingPrintf>

    pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 80146dc:	68fb      	ldr	r3, [r7, #12]
 80146de:	b29a      	uxth	r2, r3
 80146e0:	687b      	ldr	r3, [r7, #4]
 80146e2:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
}
 80146e6:	bf00      	nop
 80146e8:	3710      	adds	r7, #16
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bd80      	pop	{r7, pc}
 80146ee:	bf00      	nop
 80146f0:	08025710 	.word	0x08025710

080146f4 <prvSocketSetMSS_IPV6>:
 * @brief Set the MSS (Maximum segment size) associated with the given socket.
 *
 * @param[in] pxSocket The socket whose MSS is to be set.
 */
void prvSocketSetMSS_IPV6( FreeRTOS_Socket_t * pxSocket )
{
 80146f4:	b580      	push	{r7, lr}
 80146f6:	b090      	sub	sp, #64	@ 0x40
 80146f8:	af00      	add	r7, sp, #0
 80146fa:	6078      	str	r0, [r7, #4]
    uint32_t ulMSS = ipconfigTCP_MSS;
 80146fc:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 8014700:	63fb      	str	r3, [r7, #60]	@ 0x3c

    #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        char cIPv6Address[ 40 ];
    #endif

    const NetworkEndPoint_t * pxEndPoint = NULL;
 8014702:	2300      	movs	r3, #0
 8014704:	63bb      	str	r3, [r7, #56]	@ 0x38

    do
    {
        if( pxSocket == NULL )
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	2b00      	cmp	r3, #0
 801470a:	d103      	bne.n	8014714 <prvSocketSetMSS_IPV6+0x20>
        {
            /* If NULL socket handler, skip all following steps. */
            FreeRTOS_debug_printf( ( "prvSocketSetMSS_IPV6: NULL socket handler\n" ) );
 801470c:	481f      	ldr	r0, [pc, #124]	@ (801478c <prvSocketSetMSS_IPV6+0x98>)
 801470e:	f00c fab7 	bl	8020c80 <lUDPLoggingPrintf>

            break;
 8014712:	e036      	b.n	8014782 <prvSocketSetMSS_IPV6+0x8e>
        }

        pxEndPoint = pxSocket->pxEndPoint;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014718:	63bb      	str	r3, [r7, #56]	@ 0x38

        if( pxEndPoint != NULL )
 801471a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801471c:	2b00      	cmp	r3, #0
 801471e:	d018      	beq.n	8014752 <prvSocketSetMSS_IPV6+0x5e>
        {
            IPv6_Type_t eType;

            /* Compared to IPv4, an IPv6 header is 20 bytes longer.
             * It must be subtracted from the MSS. */
            size_t uxDifference = ipSIZE_OF_IPv6_HEADER - ipSIZE_OF_IPv4_HEADER;
 8014720:	2314      	movs	r3, #20
 8014722:	637b      	str	r3, [r7, #52]	@ 0x34

            /* Because ipconfigTCP_MSS is guaranteed not less than tcpMINIMUM_SEGMENT_LENGTH by FreeRTOSIPConfigDefaults.h,
             * it's unnecessary to check if xSocket->u.xTCP.usMSS is greater than difference. */
            ulMSS = ( uint32_t ) ( ipconfigTCP_MSS - uxDifference );
 8014724:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014726:	f240 53b4 	movw	r3, #1460	@ 0x5b4
 801472a:	1a9b      	subs	r3, r3, r2
 801472c:	63fb      	str	r3, [r7, #60]	@ 0x3c
            eType = xIPv6_GetIPType( &( pxSocket->u.xTCP.xRemoteIP.xIP_IPv6 ) );
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	3354      	adds	r3, #84	@ 0x54
 8014732:	4618      	mov	r0, r3
 8014734:	f7f8 fdb4 	bl	800d2a0 <xIPv6_GetIPType>
 8014738:	4603      	mov	r3, r0
 801473a:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

            if( eType == eIPv6_Global )
 801473e:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8014742:	2b00      	cmp	r3, #0
 8014744:	d105      	bne.n	8014752 <prvSocketSetMSS_IPV6+0x5e>
            {
                /* The packet will travel through Internet, make the MSS
                 * smaller. */
                ulMSS = FreeRTOS_min_uint32( ( uint32_t ) tcpREDUCED_MSS_THROUGH_INTERNET, ulMSS );
 8014746:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014748:	f44f 60af 	mov.w	r0, #1400	@ 0x578
 801474c:	f7f5 fb7a 	bl	8009e44 <FreeRTOS_min_uint32>
 8014750:	63f8      	str	r0, [r7, #60]	@ 0x3c
            }
        }

        #if ( ipconfigHAS_DEBUG_PRINTF == 1 )
        {
            ( void ) FreeRTOS_inet_ntop( FREERTOS_AF_INET6, ( const void * ) pxSocket->u.xTCP.xRemoteIP.xIP_IPv6.ucBytes, cIPv6Address, sizeof( cIPv6Address ) );
 8014752:	687b      	ldr	r3, [r7, #4]
 8014754:	f103 0154 	add.w	r1, r3, #84	@ 0x54
 8014758:	f107 0208 	add.w	r2, r7, #8
 801475c:	2328      	movs	r3, #40	@ 0x28
 801475e:	200a      	movs	r0, #10
 8014760:	f7fa f8c0 	bl	800e8e4 <FreeRTOS_inet_ntop>
            FreeRTOS_debug_printf( ( "prvSocketSetMSS: %u bytes for %s ip port %u\n", ( unsigned ) ulMSS, cIPv6Address, pxSocket->u.xTCP.usRemotePort ) );
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	f8b3 3064 	ldrh.w	r3, [r3, #100]	@ 0x64
 801476a:	f107 0208 	add.w	r2, r7, #8
 801476e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8014770:	4807      	ldr	r0, [pc, #28]	@ (8014790 <prvSocketSetMSS_IPV6+0x9c>)
 8014772:	f00c fa85 	bl	8020c80 <lUDPLoggingPrintf>
        }
        #endif

        pxSocket->u.xTCP.usMSS = ( uint16_t ) ulMSS;
 8014776:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014778:	b29a      	uxth	r2, r3
 801477a:	687b      	ldr	r3, [r7, #4]
 801477c:	f8a3 2072 	strh.w	r2, [r3, #114]	@ 0x72
    } while( ipFALSE_BOOL );
}
 8014780:	bf00      	nop
 8014782:	bf00      	nop
 8014784:	3740      	adds	r7, #64	@ 0x40
 8014786:	46bd      	mov	sp, r7
 8014788:	bd80      	pop	{r7, pc}
 801478a:	bf00      	nop
 801478c:	0802573c 	.word	0x0802573c
 8014790:	08025768 	.word	0x08025768

08014794 <xSequenceLessThanOrEqual>:
 *
 * @return pdTRUE when "( b - a ) < 0x80000000". Else, pdFALSE.
 */
        static portINLINE BaseType_t xSequenceLessThanOrEqual( uint32_t a,
                                                               uint32_t b )
        {
 8014794:	b480      	push	{r7}
 8014796:	b085      	sub	sp, #20
 8014798:	af00      	add	r7, sp, #0
 801479a:	6078      	str	r0, [r7, #4]
 801479c:	6039      	str	r1, [r7, #0]
            BaseType_t xResult = pdFALSE;
 801479e:	2300      	movs	r3, #0
 80147a0:	60fb      	str	r3, [r7, #12]

            /* Test if a <= b
             * Return true if the unsigned subtraction of (b-a) doesn't generate an
             * arithmetic overflow. */
            if( ( ( b - a ) & 0x80000000U ) == 0U )
 80147a2:	683a      	ldr	r2, [r7, #0]
 80147a4:	687b      	ldr	r3, [r7, #4]
 80147a6:	1ad3      	subs	r3, r2, r3
 80147a8:	2b00      	cmp	r3, #0
 80147aa:	db01      	blt.n	80147b0 <xSequenceLessThanOrEqual+0x1c>
            {
                xResult = pdTRUE;
 80147ac:	2301      	movs	r3, #1
 80147ae:	60fb      	str	r3, [r7, #12]
            }

            return xResult;
 80147b0:	68fb      	ldr	r3, [r7, #12]
        }
 80147b2:	4618      	mov	r0, r3
 80147b4:	3714      	adds	r7, #20
 80147b6:	46bd      	mov	sp, r7
 80147b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147bc:	4770      	bx	lr

080147be <xSequenceLessThan>:
 *
 * @return pdTRUE when "( b - ( a + 1 ) ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceLessThan( uint32_t a,
                                  uint32_t b )
    {
 80147be:	b480      	push	{r7}
 80147c0:	b085      	sub	sp, #20
 80147c2:	af00      	add	r7, sp, #0
 80147c4:	6078      	str	r0, [r7, #4]
 80147c6:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80147c8:	2300      	movs	r3, #0
 80147ca:	60fb      	str	r3, [r7, #12]

        /* Test if a < b */
        if( ( ( b - ( a + 1U ) ) & 0x80000000U ) == 0U )
 80147cc:	683a      	ldr	r2, [r7, #0]
 80147ce:	687b      	ldr	r3, [r7, #4]
 80147d0:	1ad3      	subs	r3, r2, r3
 80147d2:	3b01      	subs	r3, #1
 80147d4:	2b00      	cmp	r3, #0
 80147d6:	db01      	blt.n	80147dc <xSequenceLessThan+0x1e>
        {
            xResult = pdTRUE;
 80147d8:	2301      	movs	r3, #1
 80147da:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 80147dc:	68fb      	ldr	r3, [r7, #12]
    }
 80147de:	4618      	mov	r0, r3
 80147e0:	3714      	adds	r7, #20
 80147e2:	46bd      	mov	sp, r7
 80147e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147e8:	4770      	bx	lr

080147ea <xSequenceGreaterThan>:
 *
 * @return pdTRUE when "( a - b ) < 0x80000000", else pdFALSE.
 */
    BaseType_t xSequenceGreaterThan( uint32_t a,
                                     uint32_t b )
    {
 80147ea:	b480      	push	{r7}
 80147ec:	b085      	sub	sp, #20
 80147ee:	af00      	add	r7, sp, #0
 80147f0:	6078      	str	r0, [r7, #4]
 80147f2:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 80147f4:	2300      	movs	r3, #0
 80147f6:	60fb      	str	r3, [r7, #12]

        /* Test if a > b */
        if( ( ( a - ( b + 1U ) ) & 0x80000000U ) == 0U )
 80147f8:	687a      	ldr	r2, [r7, #4]
 80147fa:	683b      	ldr	r3, [r7, #0]
 80147fc:	1ad3      	subs	r3, r2, r3
 80147fe:	3b01      	subs	r3, #1
 8014800:	2b00      	cmp	r3, #0
 8014802:	db01      	blt.n	8014808 <xSequenceGreaterThan+0x1e>
        {
            xResult = pdTRUE;
 8014804:	2301      	movs	r3, #1
 8014806:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014808:	68fb      	ldr	r3, [r7, #12]
    }
 801480a:	4618      	mov	r0, r3
 801480c:	3714      	adds	r7, #20
 801480e:	46bd      	mov	sp, r7
 8014810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014814:	4770      	bx	lr

08014816 <xSequenceGreaterThanOrEqual>:
 *
 * @return pdTRUE if a>=b, else pdFALSE.
 */
    static portINLINE BaseType_t xSequenceGreaterThanOrEqual( uint32_t a,
                                                              uint32_t b )
    {
 8014816:	b480      	push	{r7}
 8014818:	b085      	sub	sp, #20
 801481a:	af00      	add	r7, sp, #0
 801481c:	6078      	str	r0, [r7, #4]
 801481e:	6039      	str	r1, [r7, #0]
        BaseType_t xResult = pdFALSE;
 8014820:	2300      	movs	r3, #0
 8014822:	60fb      	str	r3, [r7, #12]

        /* Test if a >= b */
        if( ( ( a - b ) & 0x80000000U ) == 0U )
 8014824:	687a      	ldr	r2, [r7, #4]
 8014826:	683b      	ldr	r3, [r7, #0]
 8014828:	1ad3      	subs	r3, r2, r3
 801482a:	2b00      	cmp	r3, #0
 801482c:	db01      	blt.n	8014832 <xSequenceGreaterThanOrEqual+0x1c>
        {
            xResult = pdTRUE;
 801482e:	2301      	movs	r3, #1
 8014830:	60fb      	str	r3, [r7, #12]
        }

        return xResult;
 8014832:	68fb      	ldr	r3, [r7, #12]
    }
 8014834:	4618      	mov	r0, r3
 8014836:	3714      	adds	r7, #20
 8014838:	46bd      	mov	sp, r7
 801483a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801483e:	4770      	bx	lr

08014840 <vListInsertFifo>:
 * @param[in] pxList The list in which the item is to inserted.
 * @param[in] pxNewListItem The item to be inserted.
 */
        static portINLINE void vListInsertFifo( List_t * const pxList,
                                                ListItem_t * const pxNewListItem )
        {
 8014840:	b580      	push	{r7, lr}
 8014842:	b082      	sub	sp, #8
 8014844:	af00      	add	r7, sp, #0
 8014846:	6078      	str	r0, [r7, #4]
 8014848:	6039      	str	r1, [r7, #0]
            vListInsertGeneric( pxList, pxNewListItem, &pxList->xListEnd );
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	3308      	adds	r3, #8
 801484e:	461a      	mov	r2, r3
 8014850:	6839      	ldr	r1, [r7, #0]
 8014852:	6878      	ldr	r0, [r7, #4]
 8014854:	f000 f822 	bl	801489c <vListInsertGeneric>
        }
 8014858:	bf00      	nop
 801485a:	3708      	adds	r7, #8
 801485c:	46bd      	mov	sp, r7
 801485e:	bd80      	pop	{r7, pc}

08014860 <vTCPTimerSet>:
 * @brief Set the timer's "born" time.
 *
 * @param[in] pxTimer The TCP timer.
 */
    static portINLINE void vTCPTimerSet( TCPTimer_t * pxTimer )
    {
 8014860:	b580      	push	{r7, lr}
 8014862:	b082      	sub	sp, #8
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
        pxTimer->uxBorn = xTaskGetTickCount();
 8014868:	f7ef fa06 	bl	8003c78 <xTaskGetTickCount>
 801486c:	4602      	mov	r2, r0
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	601a      	str	r2, [r3, #0]
    }
 8014872:	bf00      	nop
 8014874:	3708      	adds	r7, #8
 8014876:	46bd      	mov	sp, r7
 8014878:	bd80      	pop	{r7, pc}

0801487a <ulTimerGetAge>:
 * @param[in] pxTimer The timer whose age is to be fetched.
 *
 * @return The time in milliseconds since the timer was born.
 */
    static portINLINE uint32_t ulTimerGetAge( const TCPTimer_t * pxTimer )
    {
 801487a:	b580      	push	{r7, lr}
 801487c:	b084      	sub	sp, #16
 801487e:	af00      	add	r7, sp, #0
 8014880:	6078      	str	r0, [r7, #4]
        TickType_t uxNow = xTaskGetTickCount();
 8014882:	f7ef f9f9 	bl	8003c78 <xTaskGetTickCount>
 8014886:	60f8      	str	r0, [r7, #12]
        TickType_t uxDiff = uxNow - pxTimer->uxBorn;
 8014888:	687b      	ldr	r3, [r7, #4]
 801488a:	681b      	ldr	r3, [r3, #0]
 801488c:	68fa      	ldr	r2, [r7, #12]
 801488e:	1ad3      	subs	r3, r2, r3
 8014890:	60bb      	str	r3, [r7, #8]

        return ( uint32_t ) ( uxDiff * portTICK_PERIOD_MS );
 8014892:	68bb      	ldr	r3, [r7, #8]
    }
 8014894:	4618      	mov	r0, r3
 8014896:	3710      	adds	r7, #16
 8014898:	46bd      	mov	sp, r7
 801489a:	bd80      	pop	{r7, pc}

0801489c <vListInsertGeneric>:
 */
    #if ( ipconfigUSE_TCP_WIN == 1 )
        static void vListInsertGeneric( List_t * const pxList,
                                        ListItem_t * const pxNewListItem,
                                        MiniListItem_t * pxWhere )
        {
 801489c:	b480      	push	{r7}
 801489e:	b085      	sub	sp, #20
 80148a0:	af00      	add	r7, sp, #0
 80148a2:	60f8      	str	r0, [r7, #12]
 80148a4:	60b9      	str	r1, [r7, #8]
 80148a6:	607a      	str	r2, [r7, #4]
             * returned by listGET_HEAD_ENTRY() */

            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxNewListItem->pxNext = ( ( ListItem_t * ) pxWhere );
 80148a8:	68bb      	ldr	r3, [r7, #8]
 80148aa:	687a      	ldr	r2, [r7, #4]
 80148ac:	605a      	str	r2, [r3, #4]

            pxNewListItem->pxPrevious = pxWhere->pxPrevious;
 80148ae:	687b      	ldr	r3, [r7, #4]
 80148b0:	689a      	ldr	r2, [r3, #8]
 80148b2:	68bb      	ldr	r3, [r7, #8]
 80148b4:	609a      	str	r2, [r3, #8]
            pxWhere->pxPrevious->pxNext = pxNewListItem;
 80148b6:	687b      	ldr	r3, [r7, #4]
 80148b8:	689b      	ldr	r3, [r3, #8]
 80148ba:	68ba      	ldr	r2, [r7, #8]
 80148bc:	605a      	str	r2, [r3, #4]
            pxWhere->pxPrevious = pxNewListItem;
 80148be:	687b      	ldr	r3, [r7, #4]
 80148c0:	68ba      	ldr	r2, [r7, #8]
 80148c2:	609a      	str	r2, [r3, #8]

            /* Remember which list the item is in. */
            listLIST_ITEM_CONTAINER( pxNewListItem ) = ( struct xLIST * configLIST_VOLATILE ) pxList;
 80148c4:	68bb      	ldr	r3, [r7, #8]
 80148c6:	68fa      	ldr	r2, [r7, #12]
 80148c8:	611a      	str	r2, [r3, #16]

            ( pxList->uxNumberOfItems )++;
 80148ca:	68fb      	ldr	r3, [r7, #12]
 80148cc:	681b      	ldr	r3, [r3, #0]
 80148ce:	1c5a      	adds	r2, r3, #1
 80148d0:	68fb      	ldr	r3, [r7, #12]
 80148d2:	601a      	str	r2, [r3, #0]
        }
 80148d4:	bf00      	nop
 80148d6:	3714      	adds	r7, #20
 80148d8:	46bd      	mov	sp, r7
 80148da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148de:	4770      	bx	lr

080148e0 <prvCreateSectors>:
 * @brief Creates a pool of 'ipconfigTCP_WIN_SEG_COUNT' sector buffers. Should be called once only.
 *
 * @return When the allocation was successful: pdPASS, otherwise pdFAIL.
 */
        static BaseType_t prvCreateSectors( void )
        {
 80148e0:	b580      	push	{r7, lr}
 80148e2:	b082      	sub	sp, #8
 80148e4:	af00      	add	r7, sp, #0
            BaseType_t xIndex;
            BaseType_t xReturn;

            /* Allocate space for 'xTCPSegments' and store them in 'xSegmentList'. */

            vListInitialise( &xSegmentList );
 80148e6:	4827      	ldr	r0, [pc, #156]	@ (8014984 <prvCreateSectors+0xa4>)
 80148e8:	f7ed ffe0 	bl	80028ac <vListInitialise>
            xTCPSegments = ( ( TCPSegment_t * ) pvPortMallocLarge( ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) );
 80148ec:	f44f 5080 	mov.w	r0, #4096	@ 0x1000
 80148f0:	f7f1 f830 	bl	8005954 <pvPortMalloc>
 80148f4:	4603      	mov	r3, r0
 80148f6:	4a24      	ldr	r2, [pc, #144]	@ (8014988 <prvCreateSectors+0xa8>)
 80148f8:	6013      	str	r3, [r2, #0]

            if( xTCPSegments == NULL )
 80148fa:	4b23      	ldr	r3, [pc, #140]	@ (8014988 <prvCreateSectors+0xa8>)
 80148fc:	681b      	ldr	r3, [r3, #0]
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d107      	bne.n	8014912 <prvCreateSectors+0x32>
            {
                FreeRTOS_debug_printf( ( "prvCreateSectors: malloc %u failed\n",
 8014902:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8014906:	4821      	ldr	r0, [pc, #132]	@ (801498c <prvCreateSectors+0xac>)
 8014908:	f00c f9ba 	bl	8020c80 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) ) ) );

                xReturn = pdFAIL;
 801490c:	2300      	movs	r3, #0
 801490e:	603b      	str	r3, [r7, #0]
 8014910:	e032      	b.n	8014978 <prvCreateSectors+0x98>
            }
            else
            {
                /* Clear the allocated space. */
                ( void ) memset( xTCPSegments, 0, ( size_t ) ipconfigTCP_WIN_SEG_COUNT * sizeof( xTCPSegments[ 0 ] ) );
 8014912:	4b1d      	ldr	r3, [pc, #116]	@ (8014988 <prvCreateSectors+0xa8>)
 8014914:	681b      	ldr	r3, [r3, #0]
 8014916:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 801491a:	2100      	movs	r1, #0
 801491c:	4618      	mov	r0, r3
 801491e:	f00c fcd8 	bl	80212d2 <memset>

                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8014922:	2300      	movs	r3, #0
 8014924:	607b      	str	r3, [r7, #4]
 8014926:	e022      	b.n	801496e <prvCreateSectors+0x8e>
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xSegmentItem ) );
                        vListInitialiseItem( &( xTCPSegments[ xIndex ].xQueueItem ) );
                    }
                    #endif

                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xSegmentItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 8014928:	4b17      	ldr	r3, [pc, #92]	@ (8014988 <prvCreateSectors+0xa8>)
 801492a:	6819      	ldr	r1, [r3, #0]
 801492c:	687b      	ldr	r3, [r7, #4]
 801492e:	019a      	lsls	r2, r3, #6
 8014930:	4b15      	ldr	r3, [pc, #84]	@ (8014988 <prvCreateSectors+0xa8>)
 8014932:	6818      	ldr	r0, [r3, #0]
 8014934:	687b      	ldr	r3, [r7, #4]
 8014936:	019b      	lsls	r3, r3, #6
 8014938:	4403      	add	r3, r0
 801493a:	440a      	add	r2, r1
 801493c:	639a      	str	r2, [r3, #56]	@ 0x38
                    listSET_LIST_ITEM_OWNER( &( xTCPSegments[ xIndex ].xQueueItem ), ( void * ) &( xTCPSegments[ xIndex ] ) );
 801493e:	4b12      	ldr	r3, [pc, #72]	@ (8014988 <prvCreateSectors+0xa8>)
 8014940:	6819      	ldr	r1, [r3, #0]
 8014942:	687b      	ldr	r3, [r7, #4]
 8014944:	019a      	lsls	r2, r3, #6
 8014946:	4b10      	ldr	r3, [pc, #64]	@ (8014988 <prvCreateSectors+0xa8>)
 8014948:	6818      	ldr	r0, [r3, #0]
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	019b      	lsls	r3, r3, #6
 801494e:	4403      	add	r3, r0
 8014950:	440a      	add	r2, r1
 8014952:	625a      	str	r2, [r3, #36]	@ 0x24

                    /* And add it to the pool of available segments */
                    vListInsertFifo( &xSegmentList, &( xTCPSegments[ xIndex ].xSegmentItem ) );
 8014954:	4b0c      	ldr	r3, [pc, #48]	@ (8014988 <prvCreateSectors+0xa8>)
 8014956:	681a      	ldr	r2, [r3, #0]
 8014958:	687b      	ldr	r3, [r7, #4]
 801495a:	019b      	lsls	r3, r3, #6
 801495c:	4413      	add	r3, r2
 801495e:	332c      	adds	r3, #44	@ 0x2c
 8014960:	4619      	mov	r1, r3
 8014962:	4808      	ldr	r0, [pc, #32]	@ (8014984 <prvCreateSectors+0xa4>)
 8014964:	f7ff ff6c 	bl	8014840 <vListInsertFifo>
                for( xIndex = 0; xIndex < ipconfigTCP_WIN_SEG_COUNT; xIndex++ )
 8014968:	687b      	ldr	r3, [r7, #4]
 801496a:	3301      	adds	r3, #1
 801496c:	607b      	str	r3, [r7, #4]
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	2b3f      	cmp	r3, #63	@ 0x3f
 8014972:	ddd9      	ble.n	8014928 <prvCreateSectors+0x48>
                }

                xReturn = pdPASS;
 8014974:	2301      	movs	r3, #1
 8014976:	603b      	str	r3, [r7, #0]
            }

            return xReturn;
 8014978:	683b      	ldr	r3, [r7, #0]
        }
 801497a:	4618      	mov	r0, r3
 801497c:	3708      	adds	r7, #8
 801497e:	46bd      	mov	sp, r7
 8014980:	bd80      	pop	{r7, pc}
 8014982:	bf00      	nop
 8014984:	20001334 	.word	0x20001334
 8014988:	20001330 	.word	0x20001330
 801498c:	08025798 	.word	0x08025798

08014990 <xTCPWindowRxFind>:
 *
 * @return The address of the segment descriptor found, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowRxFind( const TCPWindow_t * pxWindow,
                                                uint32_t ulSequenceNumber )
        {
 8014990:	b480      	push	{r7}
 8014992:	b087      	sub	sp, #28
 8014994:	af00      	add	r7, sp, #0
 8014996:	6078      	str	r0, [r7, #4]
 8014998:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment, * pxReturn = NULL;
 801499a:	2300      	movs	r3, #0
 801499c:	613b      	str	r3, [r7, #16]
             * segments. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	33ac      	adds	r3, #172	@ 0xac
 80149a2:	60fb      	str	r3, [r7, #12]

            for( pxIterator = listGET_NEXT( pxEnd );
 80149a4:	68fb      	ldr	r3, [r7, #12]
 80149a6:	685b      	ldr	r3, [r3, #4]
 80149a8:	617b      	str	r3, [r7, #20]
 80149aa:	e00d      	b.n	80149c8 <xTCPWindowRxFind+0x38>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 80149ac:	697b      	ldr	r3, [r7, #20]
 80149ae:	68db      	ldr	r3, [r3, #12]
 80149b0:	60bb      	str	r3, [r7, #8]

                if( pxSegment->ulSequenceNumber == ulSequenceNumber )
 80149b2:	68bb      	ldr	r3, [r7, #8]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	683a      	ldr	r2, [r7, #0]
 80149b8:	429a      	cmp	r2, r3
 80149ba:	d102      	bne.n	80149c2 <xTCPWindowRxFind+0x32>
                {
                    pxReturn = pxSegment;
 80149bc:	68bb      	ldr	r3, [r7, #8]
 80149be:	613b      	str	r3, [r7, #16]
                    break;
 80149c0:	e006      	b.n	80149d0 <xTCPWindowRxFind+0x40>
                 pxIterator = listGET_NEXT( pxIterator ) )
 80149c2:	697b      	ldr	r3, [r7, #20]
 80149c4:	685b      	ldr	r3, [r3, #4]
 80149c6:	617b      	str	r3, [r7, #20]
                 pxIterator != pxEnd;
 80149c8:	697a      	ldr	r2, [r7, #20]
 80149ca:	68fb      	ldr	r3, [r7, #12]
 80149cc:	429a      	cmp	r2, r3
 80149ce:	d1ed      	bne.n	80149ac <xTCPWindowRxFind+0x1c>
                }
            }

            return pxReturn;
 80149d0:	693b      	ldr	r3, [r7, #16]
        }
 80149d2:	4618      	mov	r0, r3
 80149d4:	371c      	adds	r7, #28
 80149d6:	46bd      	mov	sp, r7
 80149d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149dc:	4770      	bx	lr
	...

080149e0 <xTCPWindowNew>:
 */
        static TCPSegment_t * xTCPWindowNew( TCPWindow_t * pxWindow,
                                             uint32_t ulSequenceNumber,
                                             int32_t lCount,
                                             BaseType_t xIsForRx )
        {
 80149e0:	b580      	push	{r7, lr}
 80149e2:	b088      	sub	sp, #32
 80149e4:	af00      	add	r7, sp, #0
 80149e6:	60f8      	str	r0, [r7, #12]
 80149e8:	60b9      	str	r1, [r7, #8]
 80149ea:	607a      	str	r2, [r7, #4]
 80149ec:	603b      	str	r3, [r7, #0]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Allocate a new segment.  The socket will borrow all segments from a
             * common pool: 'xSegmentList', which is a list of 'TCPSegment_t' */
            if( listLIST_IS_EMPTY( &xSegmentList ) != pdFALSE )
 80149ee:	4b33      	ldr	r3, [pc, #204]	@ (8014abc <xTCPWindowNew+0xdc>)
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	2b00      	cmp	r3, #0
 80149f4:	d10c      	bne.n	8014a10 <xTCPWindowNew+0x30>
            {
                /* If the TCP-stack runs out of segments, you might consider
                 * increasing 'ipconfigTCP_WIN_SEG_COUNT'. */
                FreeRTOS_debug_printf( ( "xTCPWindow%cxNew: Error: all segments occupied\n", ( xIsForRx != 0 ) ? 'R' : 'T' ) );
 80149f6:	683b      	ldr	r3, [r7, #0]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d001      	beq.n	8014a00 <xTCPWindowNew+0x20>
 80149fc:	2352      	movs	r3, #82	@ 0x52
 80149fe:	e000      	b.n	8014a02 <xTCPWindowNew+0x22>
 8014a00:	2354      	movs	r3, #84	@ 0x54
 8014a02:	4619      	mov	r1, r3
 8014a04:	482e      	ldr	r0, [pc, #184]	@ (8014ac0 <xTCPWindowNew+0xe0>)
 8014a06:	f00c f93b 	bl	8020c80 <lUDPLoggingPrintf>
                pxSegment = NULL;
 8014a0a:	2300      	movs	r3, #0
 8014a0c:	61fb      	str	r3, [r7, #28]
 8014a0e:	e04f      	b.n	8014ab0 <xTCPWindowNew+0xd0>
            }
            else
            {
                /* Pop the item at the head of the list.  Semaphore protection is
                * not required as only the IP task will call these functions.  */
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( &xSegmentList );
 8014a10:	4b2a      	ldr	r3, [pc, #168]	@ (8014abc <xTCPWindowNew+0xdc>)
 8014a12:	68db      	ldr	r3, [r3, #12]
 8014a14:	61bb      	str	r3, [r7, #24]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8014a16:	69bb      	ldr	r3, [r7, #24]
 8014a18:	68db      	ldr	r3, [r3, #12]
 8014a1a:	61fb      	str	r3, [r7, #28]

                configASSERT( pxItem != NULL );
 8014a1c:	69bb      	ldr	r3, [r7, #24]
 8014a1e:	2b00      	cmp	r3, #0
 8014a20:	d104      	bne.n	8014a2c <xTCPWindowNew+0x4c>
 8014a22:	f240 2125 	movw	r1, #549	@ 0x225
 8014a26:	4827      	ldr	r0, [pc, #156]	@ (8014ac4 <xTCPWindowNew+0xe4>)
 8014a28:	f7ec fd22 	bl	8001470 <vAssertCalled>
                configASSERT( pxSegment != NULL );
 8014a2c:	69fb      	ldr	r3, [r7, #28]
 8014a2e:	2b00      	cmp	r3, #0
 8014a30:	d104      	bne.n	8014a3c <xTCPWindowNew+0x5c>
 8014a32:	f240 2126 	movw	r1, #550	@ 0x226
 8014a36:	4823      	ldr	r0, [pc, #140]	@ (8014ac4 <xTCPWindowNew+0xe4>)
 8014a38:	f7ec fd1a 	bl	8001470 <vAssertCalled>

                /* Remove the item from xSegmentList. */
                ( void ) uxListRemove( pxItem );
 8014a3c:	69b8      	ldr	r0, [r7, #24]
 8014a3e:	f7ed ffbf 	bl	80029c0 <uxListRemove>

                /* Add it to either the connections' Rx or Tx queue. */
                if( xIsForRx != 0 )
 8014a42:	683b      	ldr	r3, [r7, #0]
 8014a44:	2b00      	cmp	r3, #0
 8014a46:	d006      	beq.n	8014a56 <xTCPWindowNew+0x76>
                {
                    vListInsertFifo( &pxWindow->xRxSegments, pxItem );
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	33a4      	adds	r3, #164	@ 0xa4
 8014a4c:	69b9      	ldr	r1, [r7, #24]
 8014a4e:	4618      	mov	r0, r3
 8014a50:	f7ff fef6 	bl	8014840 <vListInsertFifo>
 8014a54:	e005      	b.n	8014a62 <xTCPWindowNew+0x82>
                }
                else
                {
                    vListInsertFifo( &pxWindow->xTxSegments, pxItem );
 8014a56:	68fb      	ldr	r3, [r7, #12]
 8014a58:	3390      	adds	r3, #144	@ 0x90
 8014a5a:	69b9      	ldr	r1, [r7, #24]
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	f7ff feef 	bl	8014840 <vListInsertFifo>
                }

                /* And set the segment's timer to zero */
                vTCPTimerSet( &pxSegment->xTransmitTimer );
 8014a62:	69fb      	ldr	r3, [r7, #28]
 8014a64:	3310      	adds	r3, #16
 8014a66:	4618      	mov	r0, r3
 8014a68:	f7ff fefa 	bl	8014860 <vTCPTimerSet>

                pxSegment->u.ulFlags = 0;
 8014a6c:	69fb      	ldr	r3, [r7, #28]
 8014a6e:	2200      	movs	r2, #0
 8014a70:	615a      	str	r2, [r3, #20]
                pxSegment->u.bits.bIsForRx = ( xIsForRx != 0 ) ? 1U : 0U;
 8014a72:	683b      	ldr	r3, [r7, #0]
 8014a74:	2b00      	cmp	r3, #0
 8014a76:	d001      	beq.n	8014a7c <xTCPWindowNew+0x9c>
 8014a78:	2101      	movs	r1, #1
 8014a7a:	e000      	b.n	8014a7e <xTCPWindowNew+0x9e>
 8014a7c:	2100      	movs	r1, #0
 8014a7e:	69fa      	ldr	r2, [r7, #28]
 8014a80:	7d93      	ldrb	r3, [r2, #22]
 8014a82:	f361 0382 	bfi	r3, r1, #2, #1
 8014a86:	7593      	strb	r3, [r2, #22]
                pxSegment->lMaxLength = lCount;
 8014a88:	69fb      	ldr	r3, [r7, #28]
 8014a8a:	687a      	ldr	r2, [r7, #4]
 8014a8c:	605a      	str	r2, [r3, #4]
                pxSegment->lDataLength = lCount;
 8014a8e:	69fb      	ldr	r3, [r7, #28]
 8014a90:	687a      	ldr	r2, [r7, #4]
 8014a92:	609a      	str	r2, [r3, #8]
                pxSegment->ulSequenceNumber = ulSequenceNumber;
 8014a94:	69fb      	ldr	r3, [r7, #28]
 8014a96:	68ba      	ldr	r2, [r7, #8]
 8014a98:	601a      	str	r2, [r3, #0]
                #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                {
                    static UBaseType_t xLowestLength = ipconfigTCP_WIN_SEG_COUNT;
                    UBaseType_t xLength = listCURRENT_LIST_LENGTH( &xSegmentList );
 8014a9a:	4b08      	ldr	r3, [pc, #32]	@ (8014abc <xTCPWindowNew+0xdc>)
 8014a9c:	681b      	ldr	r3, [r3, #0]
 8014a9e:	617b      	str	r3, [r7, #20]

                    if( xLowestLength > xLength )
 8014aa0:	4b09      	ldr	r3, [pc, #36]	@ (8014ac8 <xTCPWindowNew+0xe8>)
 8014aa2:	681b      	ldr	r3, [r3, #0]
 8014aa4:	697a      	ldr	r2, [r7, #20]
 8014aa6:	429a      	cmp	r2, r3
 8014aa8:	d202      	bcs.n	8014ab0 <xTCPWindowNew+0xd0>
                    {
                        xLowestLength = xLength;
 8014aaa:	4a07      	ldr	r2, [pc, #28]	@ (8014ac8 <xTCPWindowNew+0xe8>)
 8014aac:	697b      	ldr	r3, [r7, #20]
 8014aae:	6013      	str	r3, [r2, #0]
                    }
                }
                #endif /* ipconfigHAS_DEBUG_PRINTF */
            }

            return pxSegment;
 8014ab0:	69fb      	ldr	r3, [r7, #28]
        }
 8014ab2:	4618      	mov	r0, r3
 8014ab4:	3720      	adds	r7, #32
 8014ab6:	46bd      	mov	sp, r7
 8014ab8:	bd80      	pop	{r7, pc}
 8014aba:	bf00      	nop
 8014abc:	20001334 	.word	0x20001334
 8014ac0:	080257bc 	.word	0x080257bc
 8014ac4:	080257ec 	.word	0x080257ec
 8014ac8:	2000001c 	.word	0x2000001c

08014acc <xTCPWindowRxEmpty>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if the connection can be closed. Else, pdFALSE.
 */
        BaseType_t xTCPWindowRxEmpty( const TCPWindow_t * pxWindow )
        {
 8014acc:	b580      	push	{r7, lr}
 8014ace:	b084      	sub	sp, #16
 8014ad0:	af00      	add	r7, sp, #0
 8014ad2:	6078      	str	r0, [r7, #4]
            /* When the peer has a close request (FIN flag), the driver will check
             * if there are missing packets in the Rx-queue.  It will accept the
             * closure of the connection if both conditions are true:
             * - the Rx-queue is empty
             * - the highest Rx sequence number has been ACK'ed */
            if( listLIST_IS_EMPTY( ( &pxWindow->xRxSegments ) ) == pdFALSE )
 8014ad4:	687b      	ldr	r3, [r7, #4]
 8014ad6:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d002      	beq.n	8014ae4 <xTCPWindowRxEmpty+0x18>
            {
                /* Rx data has been stored while earlier packets were missing. */
                xReturn = pdFALSE;
 8014ade:	2300      	movs	r3, #0
 8014ae0:	60fb      	str	r3, [r7, #12]
 8014ae2:	e01e      	b.n	8014b22 <xTCPWindowRxEmpty+0x56>
            }
            else if( xSequenceGreaterThanOrEqual( pxWindow->rx.ulCurrentSequenceNumber + 1U, pxWindow->rx.ulHighestSequenceNumber ) != pdFALSE )
 8014ae4:	687b      	ldr	r3, [r7, #4]
 8014ae6:	691b      	ldr	r3, [r3, #16]
 8014ae8:	1c5a      	adds	r2, r3, #1
 8014aea:	687b      	ldr	r3, [r7, #4]
 8014aec:	699b      	ldr	r3, [r3, #24]
 8014aee:	4619      	mov	r1, r3
 8014af0:	4610      	mov	r0, r2
 8014af2:	f7ff fe90 	bl	8014816 <xSequenceGreaterThanOrEqual>
 8014af6:	4603      	mov	r3, r0
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d002      	beq.n	8014b02 <xTCPWindowRxEmpty+0x36>
            {
                /* No Rx packets are being stored and the highest sequence number
                 * that has been received has been ACKed. */
                xReturn = pdTRUE;
 8014afc:	2301      	movs	r3, #1
 8014afe:	60fb      	str	r3, [r7, #12]
 8014b00:	e00f      	b.n	8014b22 <xTCPWindowRxEmpty+0x56>
            }
            else
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxEmpty: cur %u highest %u (empty)\n",
 8014b02:	687b      	ldr	r3, [r7, #4]
 8014b04:	691a      	ldr	r2, [r3, #16]
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	68db      	ldr	r3, [r3, #12]
 8014b0a:	1ad1      	subs	r1, r2, r3
 8014b0c:	687b      	ldr	r3, [r7, #4]
 8014b0e:	699a      	ldr	r2, [r3, #24]
 8014b10:	687b      	ldr	r3, [r7, #4]
 8014b12:	68db      	ldr	r3, [r3, #12]
 8014b14:	1ad3      	subs	r3, r2, r3
 8014b16:	461a      	mov	r2, r3
 8014b18:	4804      	ldr	r0, [pc, #16]	@ (8014b2c <xTCPWindowRxEmpty+0x60>)
 8014b1a:	f00c f8b1 	bl	8020c80 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxWindow->rx.ulCurrentSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->rx.ulHighestSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ) ) );
                xReturn = pdFALSE;
 8014b1e:	2300      	movs	r3, #0
 8014b20:	60fb      	str	r3, [r7, #12]
            }

            return xReturn;
 8014b22:	68fb      	ldr	r3, [r7, #12]
        }
 8014b24:	4618      	mov	r0, r3
 8014b26:	3710      	adds	r7, #16
 8014b28:	46bd      	mov	sp, r7
 8014b2a:	bd80      	pop	{r7, pc}
 8014b2c:	0802581c 	.word	0x0802581c

08014b30 <xTCPWindowGetHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when not found.
 */
        static TCPSegment_t * xTCPWindowGetHead( const List_t * pxList )
        {
 8014b30:	b580      	push	{r7, lr}
 8014b32:	b084      	sub	sp, #16
 8014b34:	af00      	add	r7, sp, #0
 8014b36:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment;
            ListItem_t * pxItem;

            /* Detaches and returns the head of a queue. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8014b38:	687b      	ldr	r3, [r7, #4]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	2b00      	cmp	r3, #0
 8014b3e:	d102      	bne.n	8014b46 <xTCPWindowGetHead+0x16>
            {
                pxSegment = NULL;
 8014b40:	2300      	movs	r3, #0
 8014b42:	60fb      	str	r3, [r7, #12]
 8014b44:	e008      	b.n	8014b58 <xTCPWindowGetHead+0x28>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	68db      	ldr	r3, [r3, #12]
 8014b4a:	60bb      	str	r3, [r7, #8]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8014b4c:	68bb      	ldr	r3, [r7, #8]
 8014b4e:	68db      	ldr	r3, [r3, #12]
 8014b50:	60fb      	str	r3, [r7, #12]

                ( void ) uxListRemove( pxItem );
 8014b52:	68b8      	ldr	r0, [r7, #8]
 8014b54:	f7ed ff34 	bl	80029c0 <uxListRemove>
            }

            return pxSegment;
 8014b58:	68fb      	ldr	r3, [r7, #12]
        }
 8014b5a:	4618      	mov	r0, r3
 8014b5c:	3710      	adds	r7, #16
 8014b5e:	46bd      	mov	sp, r7
 8014b60:	bd80      	pop	{r7, pc}

08014b62 <xTCPWindowPeekHead>:
 * @param[in] pxList The list of segment descriptors.
 *
 * @return The address of the segment descriptor, or NULL when the list is empty.
 */
        static TCPSegment_t * xTCPWindowPeekHead( const List_t * pxList )
        {
 8014b62:	b480      	push	{r7}
 8014b64:	b085      	sub	sp, #20
 8014b66:	af00      	add	r7, sp, #0
 8014b68:	6078      	str	r0, [r7, #4]
            const ListItem_t * pxItem;
            TCPSegment_t * pxReturn;

            /* Returns the head of a queue but it won't be detached. */
            if( listLIST_IS_EMPTY( pxList ) != pdFALSE )
 8014b6a:	687b      	ldr	r3, [r7, #4]
 8014b6c:	681b      	ldr	r3, [r3, #0]
 8014b6e:	2b00      	cmp	r3, #0
 8014b70:	d102      	bne.n	8014b78 <xTCPWindowPeekHead+0x16>
            {
                pxReturn = NULL;
 8014b72:	2300      	movs	r3, #0
 8014b74:	60fb      	str	r3, [r7, #12]
 8014b76:	e005      	b.n	8014b84 <xTCPWindowPeekHead+0x22>
            }
            else
            {
                pxItem = ( ListItem_t * ) listGET_HEAD_ENTRY( pxList );
 8014b78:	687b      	ldr	r3, [r7, #4]
 8014b7a:	68db      	ldr	r3, [r3, #12]
 8014b7c:	60bb      	str	r3, [r7, #8]
                pxReturn = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxItem ) );
 8014b7e:	68bb      	ldr	r3, [r7, #8]
 8014b80:	68db      	ldr	r3, [r3, #12]
 8014b82:	60fb      	str	r3, [r7, #12]
            }

            return pxReturn;
 8014b84:	68fb      	ldr	r3, [r7, #12]
        }
 8014b86:	4618      	mov	r0, r3
 8014b88:	3714      	adds	r7, #20
 8014b8a:	46bd      	mov	sp, r7
 8014b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b90:	4770      	bx	lr
	...

08014b94 <vTCPWindowFree>:
 * @brief Release a segment object, return it to the list of available segment holders.
 *
 * @param[in] pxSegment The segment descriptor that must be freed.
 */
        static void vTCPWindowFree( TCPSegment_t * pxSegment )
        {
 8014b94:	b580      	push	{r7, lr}
 8014b96:	b082      	sub	sp, #8
 8014b98:	af00      	add	r7, sp, #0
 8014b9a:	6078      	str	r0, [r7, #4]
            /*  Free entry pxSegment because it's not used any more.  The ownership
             * will be passed back to the segment pool.
             *
             * Unlink it from one of the queues, if any. */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL )
 8014b9c:	687b      	ldr	r3, [r7, #4]
 8014b9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014ba0:	2b00      	cmp	r3, #0
 8014ba2:	d004      	beq.n	8014bae <vTCPWindowFree+0x1a>
            {
                ( void ) uxListRemove( &( pxSegment->xQueueItem ) );
 8014ba4:	687b      	ldr	r3, [r7, #4]
 8014ba6:	3318      	adds	r3, #24
 8014ba8:	4618      	mov	r0, r3
 8014baa:	f7ed ff09 	bl	80029c0 <uxListRemove>
            }

            pxSegment->ulSequenceNumber = 0U;
 8014bae:	687b      	ldr	r3, [r7, #4]
 8014bb0:	2200      	movs	r2, #0
 8014bb2:	601a      	str	r2, [r3, #0]
            pxSegment->lDataLength = 0;
 8014bb4:	687b      	ldr	r3, [r7, #4]
 8014bb6:	2200      	movs	r2, #0
 8014bb8:	609a      	str	r2, [r3, #8]
            pxSegment->u.ulFlags = 0U;
 8014bba:	687b      	ldr	r3, [r7, #4]
 8014bbc:	2200      	movs	r2, #0
 8014bbe:	615a      	str	r2, [r3, #20]

            /* Take it out of xRxSegments/xTxSegments */
            if( listLIST_ITEM_CONTAINER( &( pxSegment->xSegmentItem ) ) != NULL )
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014bc4:	2b00      	cmp	r3, #0
 8014bc6:	d004      	beq.n	8014bd2 <vTCPWindowFree+0x3e>
            {
                ( void ) uxListRemove( &( pxSegment->xSegmentItem ) );
 8014bc8:	687b      	ldr	r3, [r7, #4]
 8014bca:	332c      	adds	r3, #44	@ 0x2c
 8014bcc:	4618      	mov	r0, r3
 8014bce:	f7ed fef7 	bl	80029c0 <uxListRemove>
            }

            /* Return it to xSegmentList */
            vListInsertFifo( &xSegmentList, &( pxSegment->xSegmentItem ) );
 8014bd2:	687b      	ldr	r3, [r7, #4]
 8014bd4:	332c      	adds	r3, #44	@ 0x2c
 8014bd6:	4619      	mov	r1, r3
 8014bd8:	4803      	ldr	r0, [pc, #12]	@ (8014be8 <vTCPWindowFree+0x54>)
 8014bda:	f7ff fe31 	bl	8014840 <vListInsertFifo>
        }
 8014bde:	bf00      	nop
 8014be0:	3708      	adds	r7, #8
 8014be2:	46bd      	mov	sp, r7
 8014be4:	bd80      	pop	{r7, pc}
 8014be6:	bf00      	nop
 8014be8:	20001334 	.word	0x20001334

08014bec <vTCPWindowDestroy>:
 * @brief Return all segment descriptor to the poll of descriptors, before deleting a socket.
 *
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        void vTCPWindowDestroy( TCPWindow_t const * pxWindow )
        {
 8014bec:	b580      	push	{r7, lr}
 8014bee:	b086      	sub	sp, #24
 8014bf0:	af00      	add	r7, sp, #0
 8014bf2:	6078      	str	r0, [r7, #4]

            /*  Destroy a window.  A TCP window doesn't serve any more.  Return all
             * owned segments to the pool.  In order to save code, it will make 2 rounds,
             * one to remove the segments from xRxSegments, and a second round to clear
             * xTxSegments*/
            for( xRound = 0; xRound < 2; xRound++ )
 8014bf4:	2300      	movs	r3, #0
 8014bf6:	613b      	str	r3, [r7, #16]
 8014bf8:	e01d      	b.n	8014c36 <vTCPWindowDestroy+0x4a>
            {
                if( xRound != 0 )
 8014bfa:	693b      	ldr	r3, [r7, #16]
 8014bfc:	2b00      	cmp	r3, #0
 8014bfe:	d003      	beq.n	8014c08 <vTCPWindowDestroy+0x1c>
                {
                    pxSegments = &( pxWindow->xRxSegments );
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	33a4      	adds	r3, #164	@ 0xa4
 8014c04:	617b      	str	r3, [r7, #20]
 8014c06:	e002      	b.n	8014c0e <vTCPWindowDestroy+0x22>
                }
                else
                {
                    pxSegments = &( pxWindow->xTxSegments );
 8014c08:	687b      	ldr	r3, [r7, #4]
 8014c0a:	3390      	adds	r3, #144	@ 0x90
 8014c0c:	617b      	str	r3, [r7, #20]
                }

                if( listLIST_IS_INITIALISED( pxSegments ) )
 8014c0e:	697b      	ldr	r3, [r7, #20]
 8014c10:	689b      	ldr	r3, [r3, #8]
 8014c12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014c16:	d10b      	bne.n	8014c30 <vTCPWindowDestroy+0x44>
                {
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8014c18:	e006      	b.n	8014c28 <vTCPWindowDestroy+0x3c>
                    {
                        pxSegment = ( ( TCPSegment_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxSegments ) );
 8014c1a:	697b      	ldr	r3, [r7, #20]
 8014c1c:	68db      	ldr	r3, [r3, #12]
 8014c1e:	68db      	ldr	r3, [r3, #12]
 8014c20:	60fb      	str	r3, [r7, #12]
                        vTCPWindowFree( pxSegment );
 8014c22:	68f8      	ldr	r0, [r7, #12]
 8014c24:	f7ff ffb6 	bl	8014b94 <vTCPWindowFree>
                    while( listCURRENT_LIST_LENGTH( pxSegments ) > 0U )
 8014c28:	697b      	ldr	r3, [r7, #20]
 8014c2a:	681b      	ldr	r3, [r3, #0]
 8014c2c:	2b00      	cmp	r3, #0
 8014c2e:	d1f4      	bne.n	8014c1a <vTCPWindowDestroy+0x2e>
            for( xRound = 0; xRound < 2; xRound++ )
 8014c30:	693b      	ldr	r3, [r7, #16]
 8014c32:	3301      	adds	r3, #1
 8014c34:	613b      	str	r3, [r7, #16]
 8014c36:	693b      	ldr	r3, [r7, #16]
 8014c38:	2b01      	cmp	r3, #1
 8014c3a:	ddde      	ble.n	8014bfa <vTCPWindowDestroy+0xe>
                    }
                }
            }
        }
 8014c3c:	bf00      	nop
 8014c3e:	bf00      	nop
 8014c40:	3718      	adds	r7, #24
 8014c42:	46bd      	mov	sp, r7
 8014c44:	bd80      	pop	{r7, pc}
	...

08014c48 <xTCPWindowCreate>:
                                 uint32_t ulRxWindowLength,
                                 uint32_t ulTxWindowLength,
                                 uint32_t ulAckNumber,
                                 uint32_t ulSequenceNumber,
                                 uint32_t ulMSS )
    {
 8014c48:	b580      	push	{r7, lr}
 8014c4a:	b086      	sub	sp, #24
 8014c4c:	af00      	add	r7, sp, #0
 8014c4e:	60f8      	str	r0, [r7, #12]
 8014c50:	60b9      	str	r1, [r7, #8]
 8014c52:	607a      	str	r2, [r7, #4]
 8014c54:	603b      	str	r3, [r7, #0]
        BaseType_t xReturn = pdPASS;
 8014c56:	2301      	movs	r3, #1
 8014c58:	617b      	str	r3, [r7, #20]

        /* Create and initialize a window. */

        #if ( ipconfigUSE_TCP_WIN == 1 )
        {
            if( xTCPSegments == NULL )
 8014c5a:	4b1d      	ldr	r3, [pc, #116]	@ (8014cd0 <xTCPWindowCreate+0x88>)
 8014c5c:	681b      	ldr	r3, [r3, #0]
 8014c5e:	2b00      	cmp	r3, #0
 8014c60:	d102      	bne.n	8014c68 <xTCPWindowCreate+0x20>
            {
                xReturn = prvCreateSectors();
 8014c62:	f7ff fe3d 	bl	80148e0 <prvCreateSectors>
 8014c66:	6178      	str	r0, [r7, #20]
            }

            vListInitialise( &( pxWindow->xTxSegments ) );
 8014c68:	68fb      	ldr	r3, [r7, #12]
 8014c6a:	3390      	adds	r3, #144	@ 0x90
 8014c6c:	4618      	mov	r0, r3
 8014c6e:	f7ed fe1d 	bl	80028ac <vListInitialise>
            vListInitialise( &( pxWindow->xRxSegments ) );
 8014c72:	68fb      	ldr	r3, [r7, #12]
 8014c74:	33a4      	adds	r3, #164	@ 0xa4
 8014c76:	4618      	mov	r0, r3
 8014c78:	f7ed fe18 	bl	80028ac <vListInitialise>

            vListInitialise( &( pxWindow->xPriorityQueue ) ); /* Priority queue: segments which must be sent immediately */
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	3340      	adds	r3, #64	@ 0x40
 8014c80:	4618      	mov	r0, r3
 8014c82:	f7ed fe13 	bl	80028ac <vListInitialise>
            vListInitialise( &( pxWindow->xTxQueue ) );       /* Transmit queue: segments queued for transmission */
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	3354      	adds	r3, #84	@ 0x54
 8014c8a:	4618      	mov	r0, r3
 8014c8c:	f7ed fe0e 	bl	80028ac <vListInitialise>
            vListInitialise( &( pxWindow->xWaitQueue ) );     /* Waiting queue:  outstanding segments */
 8014c90:	68fb      	ldr	r3, [r7, #12]
 8014c92:	3368      	adds	r3, #104	@ 0x68
 8014c94:	4618      	mov	r0, r3
 8014c96:	f7ed fe09 	bl	80028ac <vListInitialise>
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        if( xTCPWindowLoggingLevel != 0 )
 8014c9a:	4b0e      	ldr	r3, [pc, #56]	@ (8014cd4 <xTCPWindowCreate+0x8c>)
 8014c9c:	681b      	ldr	r3, [r3, #0]
 8014c9e:	2b00      	cmp	r3, #0
 8014ca0:	d004      	beq.n	8014cac <xTCPWindowCreate+0x64>
        {
            FreeRTOS_debug_printf( ( "xTCPWindowCreate: for WinLen = Rx/Tx: %u/%u\n",
 8014ca2:	687a      	ldr	r2, [r7, #4]
 8014ca4:	68b9      	ldr	r1, [r7, #8]
 8014ca6:	480c      	ldr	r0, [pc, #48]	@ (8014cd8 <xTCPWindowCreate+0x90>)
 8014ca8:	f00b ffea 	bl	8020c80 <lUDPLoggingPrintf>
                                     ( unsigned ) ulRxWindowLength, ( unsigned ) ulTxWindowLength ) );
        }

        pxWindow->xSize.ulRxWindowLength = ulRxWindowLength;
 8014cac:	68fb      	ldr	r3, [r7, #12]
 8014cae:	68ba      	ldr	r2, [r7, #8]
 8014cb0:	605a      	str	r2, [r3, #4]
        pxWindow->xSize.ulTxWindowLength = ulTxWindowLength;
 8014cb2:	68fb      	ldr	r3, [r7, #12]
 8014cb4:	687a      	ldr	r2, [r7, #4]
 8014cb6:	609a      	str	r2, [r3, #8]

        vTCPWindowInit( pxWindow, ulAckNumber, ulSequenceNumber, ulMSS );
 8014cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014cba:	6a3a      	ldr	r2, [r7, #32]
 8014cbc:	6839      	ldr	r1, [r7, #0]
 8014cbe:	68f8      	ldr	r0, [r7, #12]
 8014cc0:	f000 f80c 	bl	8014cdc <vTCPWindowInit>

        return xReturn;
 8014cc4:	697b      	ldr	r3, [r7, #20]
    }
 8014cc6:	4618      	mov	r0, r3
 8014cc8:	3718      	adds	r7, #24
 8014cca:	46bd      	mov	sp, r7
 8014ccc:	bd80      	pop	{r7, pc}
 8014cce:	bf00      	nop
 8014cd0:	20001330 	.word	0x20001330
 8014cd4:	20001348 	.word	0x20001348
 8014cd8:	0802584c 	.word	0x0802584c

08014cdc <vTCPWindowInit>:
 */
    void vTCPWindowInit( TCPWindow_t * pxWindow,
                         uint32_t ulAckNumber,
                         uint32_t ulSequenceNumber,
                         uint32_t ulMSS )
    {
 8014cdc:	b480      	push	{r7}
 8014cde:	b087      	sub	sp, #28
 8014ce0:	af00      	add	r7, sp, #0
 8014ce2:	60f8      	str	r0, [r7, #12]
 8014ce4:	60b9      	str	r1, [r7, #8]
 8014ce6:	607a      	str	r2, [r7, #4]
 8014ce8:	603b      	str	r3, [r7, #0]
        const int32_t l500ms = 500;
 8014cea:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8014cee:	617b      	str	r3, [r7, #20]

        pxWindow->u.ulFlags = 0U;
 8014cf0:	68fb      	ldr	r3, [r7, #12]
 8014cf2:	2200      	movs	r2, #0
 8014cf4:	601a      	str	r2, [r3, #0]
        pxWindow->u.bits.bHasInit = pdTRUE_UNSIGNED;
 8014cf6:	68fa      	ldr	r2, [r7, #12]
 8014cf8:	7813      	ldrb	r3, [r2, #0]
 8014cfa:	f043 0301 	orr.w	r3, r3, #1
 8014cfe:	7013      	strb	r3, [r2, #0]

        if( ulMSS != 0U )
 8014d00:	683b      	ldr	r3, [r7, #0]
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	d024      	beq.n	8014d50 <vTCPWindowInit+0x74>
        {
            if( pxWindow->usMSSInit != 0U )
 8014d06:	68fb      	ldr	r3, [r7, #12]
 8014d08:	f8b3 30be 	ldrh.w	r3, [r3, #190]	@ 0xbe
 8014d0c:	2b00      	cmp	r3, #0
 8014d0e:	d004      	beq.n	8014d1a <vTCPWindowInit+0x3e>
            {
                pxWindow->usMSSInit = ( uint16_t ) ulMSS;
 8014d10:	683b      	ldr	r3, [r7, #0]
 8014d12:	b29a      	uxth	r2, r3
 8014d14:	68fb      	ldr	r3, [r7, #12]
 8014d16:	f8a3 20be 	strh.w	r2, [r3, #190]	@ 0xbe
            }

            if( ( ulMSS < ( uint32_t ) pxWindow->usMSS ) || ( pxWindow->usMSS == 0U ) )
 8014d1a:	68fb      	ldr	r3, [r7, #12]
 8014d1c:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8014d20:	461a      	mov	r2, r3
 8014d22:	683b      	ldr	r3, [r7, #0]
 8014d24:	4293      	cmp	r3, r2
 8014d26:	d304      	bcc.n	8014d32 <vTCPWindowInit+0x56>
 8014d28:	68fb      	ldr	r3, [r7, #12]
 8014d2a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d10e      	bne.n	8014d50 <vTCPWindowInit+0x74>
            {
                pxWindow->xSize.ulRxWindowLength = ( pxWindow->xSize.ulRxWindowLength / ulMSS ) * ulMSS;
 8014d32:	68fb      	ldr	r3, [r7, #12]
 8014d34:	685a      	ldr	r2, [r3, #4]
 8014d36:	683b      	ldr	r3, [r7, #0]
 8014d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8014d3c:	683a      	ldr	r2, [r7, #0]
 8014d3e:	fb03 f202 	mul.w	r2, r3, r2
 8014d42:	68fb      	ldr	r3, [r7, #12]
 8014d44:	605a      	str	r2, [r3, #4]
                pxWindow->usMSS = ( uint16_t ) ulMSS;
 8014d46:	683b      	ldr	r3, [r7, #0]
 8014d48:	b29a      	uxth	r2, r3
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
            pxWindow->xTxSegment.lMaxLength = ( int32_t ) pxWindow->usMSS;
        }
        #endif /* ipconfigUSE_TCP_WIN == 1 */

        /*Start with a timeout of 2 * 500 ms (1 sec). */
        pxWindow->lSRTT = l500ms;
 8014d50:	68fb      	ldr	r3, [r7, #12]
 8014d52:	697a      	ldr	r2, [r7, #20]
 8014d54:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Just for logging, to print relative sequence numbers. */
        pxWindow->rx.ulFirstSequenceNumber = ulAckNumber;
 8014d56:	68fb      	ldr	r3, [r7, #12]
 8014d58:	68ba      	ldr	r2, [r7, #8]
 8014d5a:	60da      	str	r2, [r3, #12]

        /* The segment asked for in the next transmission. */
        pxWindow->rx.ulCurrentSequenceNumber = ulAckNumber;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	68ba      	ldr	r2, [r7, #8]
 8014d60:	611a      	str	r2, [r3, #16]

        /* The right-hand side of the receive window. */
        pxWindow->rx.ulHighestSequenceNumber = ulAckNumber;
 8014d62:	68fb      	ldr	r3, [r7, #12]
 8014d64:	68ba      	ldr	r2, [r7, #8]
 8014d66:	619a      	str	r2, [r3, #24]

        pxWindow->tx.ulFirstSequenceNumber = ulSequenceNumber;
 8014d68:	68fb      	ldr	r3, [r7, #12]
 8014d6a:	687a      	ldr	r2, [r7, #4]
 8014d6c:	61da      	str	r2, [r3, #28]

        /* The segment asked for in next transmission. */
        pxWindow->tx.ulCurrentSequenceNumber = ulSequenceNumber;
 8014d6e:	68fb      	ldr	r3, [r7, #12]
 8014d70:	687a      	ldr	r2, [r7, #4]
 8014d72:	621a      	str	r2, [r3, #32]

        /* The sequence number given to the next outgoing byte to be added is
         * maintained by lTCPWindowTxAdd(). */
        pxWindow->ulNextTxSequenceNumber = ulSequenceNumber;
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	687a      	ldr	r2, [r7, #4]
 8014d78:	635a      	str	r2, [r3, #52]	@ 0x34

        /* The right-hand side of the transmit window. */
        pxWindow->tx.ulHighestSequenceNumber = ulSequenceNumber;
 8014d7a:	68fb      	ldr	r3, [r7, #12]
 8014d7c:	687a      	ldr	r2, [r7, #4]
 8014d7e:	629a      	str	r2, [r3, #40]	@ 0x28
        pxWindow->ulOurSequenceNumber = ulSequenceNumber;
 8014d80:	68fb      	ldr	r3, [r7, #12]
 8014d82:	687a      	ldr	r2, [r7, #4]
 8014d84:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
 8014d86:	bf00      	nop
 8014d88:	371c      	adds	r7, #28
 8014d8a:	46bd      	mov	sp, r7
 8014d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d90:	4770      	bx	lr
	...

08014d94 <xTCPWindowRxConfirm>:
 * @return The first segment descriptor involved, or NULL when no matching descriptor was found.
 */
        static TCPSegment_t * xTCPWindowRxConfirm( const TCPWindow_t * pxWindow,
                                                   uint32_t ulSequenceNumber,
                                                   uint32_t ulLength )
        {
 8014d94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d96:	b08f      	sub	sp, #60	@ 0x3c
 8014d98:	af04      	add	r7, sp, #16
 8014d9a:	60f8      	str	r0, [r7, #12]
 8014d9c:	60b9      	str	r1, [r7, #8]
 8014d9e:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxBest = NULL;
 8014da0:	2300      	movs	r3, #0
 8014da2:	627b      	str	r3, [r7, #36]	@ 0x24
            const ListItem_t * pxIterator;
            uint32_t ulNextSequenceNumber = ulSequenceNumber + ulLength;
 8014da4:	68ba      	ldr	r2, [r7, #8]
 8014da6:	687b      	ldr	r3, [r7, #4]
 8014da8:	4413      	add	r3, r2
 8014daa:	61fb      	str	r3, [r7, #28]

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xRxSegments.xListEnd ) );
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	33ac      	adds	r3, #172	@ 0xac
 8014db0:	61bb      	str	r3, [r7, #24]
             * and (ulSequenceNumber+ulLength).  Normally none will be found, because
             * the next RX segment should have a sequence number equal to
             * '(ulSequenceNumber+ulLength)'. */

            /* Iterate through all RX segments that are stored: */
            for( pxIterator = listGET_NEXT( pxEnd );
 8014db2:	69bb      	ldr	r3, [r7, #24]
 8014db4:	685b      	ldr	r3, [r3, #4]
 8014db6:	623b      	str	r3, [r7, #32]
 8014db8:	e027      	b.n	8014e0a <xTCPWindowRxConfirm+0x76>
                 pxIterator != pxEnd;
                 pxIterator = listGET_NEXT( pxIterator ) )
            {
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8014dba:	6a3b      	ldr	r3, [r7, #32]
 8014dbc:	68db      	ldr	r3, [r3, #12]
 8014dbe:	617b      	str	r3, [r7, #20]

                /* And see if there is a segment for which:
                 * 'ulSequenceNumber' <= 'pxSegment->ulSequenceNumber' < 'ulNextSequenceNumber'
                 * If there are more matching segments, the one with the lowest sequence number
                 * shall be taken */
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8014dc0:	697b      	ldr	r3, [r7, #20]
 8014dc2:	681b      	ldr	r3, [r3, #0]
 8014dc4:	68b9      	ldr	r1, [r7, #8]
 8014dc6:	4618      	mov	r0, r3
 8014dc8:	f7ff fd25 	bl	8014816 <xSequenceGreaterThanOrEqual>
 8014dcc:	4603      	mov	r3, r0
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d018      	beq.n	8014e04 <xTCPWindowRxConfirm+0x70>
                    ( xSequenceLessThan( pxSegment->ulSequenceNumber, ulNextSequenceNumber ) != 0 ) )
 8014dd2:	697b      	ldr	r3, [r7, #20]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	69f9      	ldr	r1, [r7, #28]
 8014dd8:	4618      	mov	r0, r3
 8014dda:	f7ff fcf0 	bl	80147be <xSequenceLessThan>
 8014dde:	4603      	mov	r3, r0
                if( ( xSequenceGreaterThanOrEqual( pxSegment->ulSequenceNumber, ulSequenceNumber ) != 0 ) &&
 8014de0:	2b00      	cmp	r3, #0
 8014de2:	d00f      	beq.n	8014e04 <xTCPWindowRxConfirm+0x70>
                {
                    if( ( pxBest == NULL ) || ( xSequenceLessThan( pxSegment->ulSequenceNumber, pxBest->ulSequenceNumber ) != 0 ) )
 8014de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014de6:	2b00      	cmp	r3, #0
 8014de8:	d00a      	beq.n	8014e00 <xTCPWindowRxConfirm+0x6c>
 8014dea:	697b      	ldr	r3, [r7, #20]
 8014dec:	681a      	ldr	r2, [r3, #0]
 8014dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014df0:	681b      	ldr	r3, [r3, #0]
 8014df2:	4619      	mov	r1, r3
 8014df4:	4610      	mov	r0, r2
 8014df6:	f7ff fce2 	bl	80147be <xSequenceLessThan>
 8014dfa:	4603      	mov	r3, r0
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d001      	beq.n	8014e04 <xTCPWindowRxConfirm+0x70>
                    {
                        pxBest = pxSegment;
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	627b      	str	r3, [r7, #36]	@ 0x24
                 pxIterator = listGET_NEXT( pxIterator ) )
 8014e04:	6a3b      	ldr	r3, [r7, #32]
 8014e06:	685b      	ldr	r3, [r3, #4]
 8014e08:	623b      	str	r3, [r7, #32]
                 pxIterator != pxEnd;
 8014e0a:	6a3a      	ldr	r2, [r7, #32]
 8014e0c:	69bb      	ldr	r3, [r7, #24]
 8014e0e:	429a      	cmp	r2, r3
 8014e10:	d1d3      	bne.n	8014dba <xTCPWindowRxConfirm+0x26>
                    }
                }
            }

            if( ( pxBest != NULL ) &&
 8014e12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e14:	2b00      	cmp	r3, #0
 8014e16:	d030      	beq.n	8014e7a <xTCPWindowRxConfirm+0xe6>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8014e18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e1a:	681b      	ldr	r3, [r3, #0]
            if( ( pxBest != NULL ) &&
 8014e1c:	68ba      	ldr	r2, [r7, #8]
 8014e1e:	429a      	cmp	r2, r3
 8014e20:	d104      	bne.n	8014e2c <xTCPWindowRxConfirm+0x98>
                ( ( pxBest->ulSequenceNumber != ulSequenceNumber ) || ( pxBest->lDataLength != ( int32_t ) ulLength ) ) )
 8014e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e24:	689a      	ldr	r2, [r3, #8]
 8014e26:	687b      	ldr	r3, [r7, #4]
 8014e28:	429a      	cmp	r2, r3
 8014e2a:	d026      	beq.n	8014e7a <xTCPWindowRxConfirm+0xe6>
            {
                FreeRTOS_debug_printf( ( "xTCPWindowRxConfirm[%u]: search %u (+%u=%u) found %u (+%d=%u)\n",
 8014e2c:	68fb      	ldr	r3, [r7, #12]
 8014e2e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8014e32:	461e      	mov	r6, r3
 8014e34:	68fb      	ldr	r3, [r7, #12]
 8014e36:	68db      	ldr	r3, [r3, #12]
 8014e38:	68ba      	ldr	r2, [r7, #8]
 8014e3a:	1ad5      	subs	r5, r2, r3
 8014e3c:	68ba      	ldr	r2, [r7, #8]
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	441a      	add	r2, r3
 8014e42:	68fb      	ldr	r3, [r7, #12]
 8014e44:	68db      	ldr	r3, [r3, #12]
 8014e46:	1ad3      	subs	r3, r2, r3
 8014e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8014e4a:	6811      	ldr	r1, [r2, #0]
 8014e4c:	68fa      	ldr	r2, [r7, #12]
 8014e4e:	68d2      	ldr	r2, [r2, #12]
 8014e50:	1a8a      	subs	r2, r1, r2
 8014e52:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8014e54:	6889      	ldr	r1, [r1, #8]
 8014e56:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8014e58:	6800      	ldr	r0, [r0, #0]
 8014e5a:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8014e5c:	68a4      	ldr	r4, [r4, #8]
 8014e5e:	4404      	add	r4, r0
 8014e60:	68f8      	ldr	r0, [r7, #12]
 8014e62:	68c0      	ldr	r0, [r0, #12]
 8014e64:	1a20      	subs	r0, r4, r0
 8014e66:	9003      	str	r0, [sp, #12]
 8014e68:	9102      	str	r1, [sp, #8]
 8014e6a:	9201      	str	r2, [sp, #4]
 8014e6c:	9300      	str	r3, [sp, #0]
 8014e6e:	687b      	ldr	r3, [r7, #4]
 8014e70:	462a      	mov	r2, r5
 8014e72:	4631      	mov	r1, r6
 8014e74:	4803      	ldr	r0, [pc, #12]	@ (8014e84 <xTCPWindowRxConfirm+0xf0>)
 8014e76:	f00b ff03 	bl	8020c80 <lUDPLoggingPrintf>
                                         ( unsigned ) ( pxBest->ulSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) pxBest->lDataLength,
                                         ( unsigned ) ( pxBest->ulSequenceNumber + ( ( uint32_t ) pxBest->lDataLength ) - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            return pxBest;
 8014e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8014e7c:	4618      	mov	r0, r3
 8014e7e:	372c      	adds	r7, #44	@ 0x2c
 8014e80:	46bd      	mov	sp, r7
 8014e82:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014e84:	0802587c 	.word	0x0802587c

08014e88 <prvTCPWindowRx_ExpectedRX>:
 * @param[in] pxWindow The TCP sliding window data of the socket.
 * @param[in] ulLength The number of bytes that can be added.
 */
        static void prvTCPWindowRx_ExpectedRX( TCPWindow_t * pxWindow,
                                               uint32_t ulLength )
        {
 8014e88:	b5b0      	push	{r4, r5, r7, lr}
 8014e8a:	b08a      	sub	sp, #40	@ 0x28
 8014e8c:	af04      	add	r7, sp, #16
 8014e8e:	6078      	str	r0, [r7, #4]
 8014e90:	6039      	str	r1, [r7, #0]
            uint32_t ulSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	691b      	ldr	r3, [r3, #16]
 8014e96:	613b      	str	r3, [r7, #16]
            uint32_t ulCurrentSequenceNumber = ulSequenceNumber + ulLength;
 8014e98:	693a      	ldr	r2, [r7, #16]
 8014e9a:	683b      	ldr	r3, [r7, #0]
 8014e9c:	4413      	add	r3, r2
 8014e9e:	617b      	str	r3, [r7, #20]

            if( listCURRENT_LIST_LENGTH( &( pxWindow->xRxSegments ) ) != 0U )
 8014ea0:	687b      	ldr	r3, [r7, #4]
 8014ea2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8014ea6:	2b00      	cmp	r3, #0
 8014ea8:	d04e      	beq.n	8014f48 <prvTCPWindowRx_ExpectedRX+0xc0>
            {
                uint32_t ulSavedSequenceNumber = ulCurrentSequenceNumber;
 8014eaa:	697b      	ldr	r3, [r7, #20]
 8014eac:	60fb      	str	r3, [r7, #12]
                 * If the server is forced to retransmit packets several time in a row it might send a batch of concatenated packet for speed.
                 * So we cannot rely on the packets between ulSequenceNumber and ulSequenceNumber + ulLength to be sequential and it is better to just
                 * clean them out. */
                do
                {
                    pxFound = xTCPWindowRxConfirm( pxWindow, ulSequenceNumber, ulLength );
 8014eae:	683a      	ldr	r2, [r7, #0]
 8014eb0:	6939      	ldr	r1, [r7, #16]
 8014eb2:	6878      	ldr	r0, [r7, #4]
 8014eb4:	f7ff ff6e 	bl	8014d94 <xTCPWindowRxConfirm>
 8014eb8:	60b8      	str	r0, [r7, #8]

                    if( pxFound != NULL )
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d002      	beq.n	8014ec6 <prvTCPWindowRx_ExpectedRX+0x3e>
                    {
                        /* Remove it because it will be passed to user directly. */
                        vTCPWindowFree( pxFound );
 8014ec0:	68b8      	ldr	r0, [r7, #8]
 8014ec2:	f7ff fe67 	bl	8014b94 <vTCPWindowFree>
                    }
                } while( pxFound != NULL );
 8014ec6:	68bb      	ldr	r3, [r7, #8]
 8014ec8:	2b00      	cmp	r3, #0
 8014eca:	d1f0      	bne.n	8014eae <prvTCPWindowRx_ExpectedRX+0x26>

                /*  Check for following segments that are already in the
                 * queue and increment ulCurrentSequenceNumber. */
                for( ; ; )
                {
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8014ecc:	6979      	ldr	r1, [r7, #20]
 8014ece:	6878      	ldr	r0, [r7, #4]
 8014ed0:	f7ff fd5e 	bl	8014990 <xTCPWindowRxFind>
 8014ed4:	60b8      	str	r0, [r7, #8]

                    if( pxFound == NULL )
 8014ed6:	68bb      	ldr	r3, [r7, #8]
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d009      	beq.n	8014ef0 <prvTCPWindowRx_ExpectedRX+0x68>
                    {
                        break;
                    }

                    ulCurrentSequenceNumber += ( uint32_t ) pxFound->lDataLength;
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	689b      	ldr	r3, [r3, #8]
 8014ee0:	461a      	mov	r2, r3
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	4413      	add	r3, r2
 8014ee6:	617b      	str	r3, [r7, #20]

                    /* As all packet below this one have been passed to the
                     * user it can be discarded. */
                    vTCPWindowFree( pxFound );
 8014ee8:	68b8      	ldr	r0, [r7, #8]
 8014eea:	f7ff fe53 	bl	8014b94 <vTCPWindowFree>
                    pxFound = xTCPWindowRxFind( pxWindow, ulCurrentSequenceNumber );
 8014eee:	e7ed      	b.n	8014ecc <prvTCPWindowRx_ExpectedRX+0x44>
                        break;
 8014ef0:	bf00      	nop
                }

                if( ulSavedSequenceNumber != ulCurrentSequenceNumber )
 8014ef2:	68fa      	ldr	r2, [r7, #12]
 8014ef4:	697b      	ldr	r3, [r7, #20]
 8014ef6:	429a      	cmp	r2, r3
 8014ef8:	d026      	beq.n	8014f48 <prvTCPWindowRx_ExpectedRX+0xc0>
                {
                    /*  After the current data-package, there is more data
                     * to be popped. */
                    pxWindow->ulUserDataLength = ulCurrentSequenceNumber - ulSavedSequenceNumber;
 8014efa:	697a      	ldr	r2, [r7, #20]
 8014efc:	68fb      	ldr	r3, [r7, #12]
 8014efe:	1ad2      	subs	r2, r2, r3
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	631a      	str	r2, [r3, #48]	@ 0x30

                    if( xTCPWindowLoggingLevel >= 1 )
 8014f04:	4b14      	ldr	r3, [pc, #80]	@ (8014f58 <prvTCPWindowRx_ExpectedRX+0xd0>)
 8014f06:	681b      	ldr	r3, [r3, #0]
 8014f08:	2b00      	cmp	r3, #0
 8014f0a:	dd1d      	ble.n	8014f48 <prvTCPWindowRx_ExpectedRX+0xc0>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: retran %u (Found %u bytes at %u cnt %d)\n",
 8014f0c:	687b      	ldr	r3, [r7, #4]
 8014f0e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8014f12:	461c      	mov	r4, r3
 8014f14:	687b      	ldr	r3, [r7, #4]
 8014f16:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8014f1a:	461d      	mov	r5, r3
 8014f1c:	687b      	ldr	r3, [r7, #4]
 8014f1e:	68db      	ldr	r3, [r3, #12]
 8014f20:	693a      	ldr	r2, [r7, #16]
 8014f22:	1ad0      	subs	r0, r2, r3
 8014f24:	687b      	ldr	r3, [r7, #4]
 8014f26:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014f28:	687a      	ldr	r2, [r7, #4]
 8014f2a:	68d2      	ldr	r2, [r2, #12]
 8014f2c:	68f9      	ldr	r1, [r7, #12]
 8014f2e:	1a8a      	subs	r2, r1, r2
 8014f30:	6879      	ldr	r1, [r7, #4]
 8014f32:	f8d1 10a4 	ldr.w	r1, [r1, #164]	@ 0xa4
 8014f36:	9102      	str	r1, [sp, #8]
 8014f38:	9201      	str	r2, [sp, #4]
 8014f3a:	9300      	str	r3, [sp, #0]
 8014f3c:	4603      	mov	r3, r0
 8014f3e:	462a      	mov	r2, r5
 8014f40:	4621      	mov	r1, r4
 8014f42:	4806      	ldr	r0, [pc, #24]	@ (8014f5c <prvTCPWindowRx_ExpectedRX+0xd4>)
 8014f44:	f00b fe9c 	bl	8020c80 <lUDPLoggingPrintf>
                                                 ( int ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }
                }
            }

            pxWindow->rx.ulCurrentSequenceNumber = ulCurrentSequenceNumber;
 8014f48:	687b      	ldr	r3, [r7, #4]
 8014f4a:	697a      	ldr	r2, [r7, #20]
 8014f4c:	611a      	str	r2, [r3, #16]
        }
 8014f4e:	bf00      	nop
 8014f50:	3718      	adds	r7, #24
 8014f52:	46bd      	mov	sp, r7
 8014f54:	bdb0      	pop	{r4, r5, r7, pc}
 8014f56:	bf00      	nop
 8014f58:	20001348 	.word	0x20001348
 8014f5c:	080258bc 	.word	0x080258bc

08014f60 <prvTCPWindowRx_UnexpectedRX>:
 *         offset ( from the head ) at which the data can be placed.
 */
        static int32_t prvTCPWindowRx_UnexpectedRX( TCPWindow_t * pxWindow,
                                                    uint32_t ulSequenceNumber,
                                                    uint32_t ulLength )
        {
 8014f60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014f62:	b08f      	sub	sp, #60	@ 0x3c
 8014f64:	af04      	add	r7, sp, #16
 8014f66:	60f8      	str	r0, [r7, #12]
 8014f68:	60b9      	str	r1, [r7, #8]
 8014f6a:	607a      	str	r2, [r7, #4]
            int32_t lReturn = -1;
 8014f6c:	f04f 33ff 	mov.w	r3, #4294967295
 8014f70:	627b      	str	r3, [r7, #36]	@ 0x24
            uint32_t ulLast = ulSequenceNumber + ulLength;
 8014f72:	68ba      	ldr	r2, [r7, #8]
 8014f74:	687b      	ldr	r3, [r7, #4]
 8014f76:	4413      	add	r3, r2
 8014f78:	623b      	str	r3, [r7, #32]
            uint32_t ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 8014f7a:	68fb      	ldr	r3, [r7, #12]
 8014f7c:	691b      	ldr	r3, [r3, #16]
 8014f7e:	61fb      	str	r3, [r7, #28]
             * This is useful because subsequent packets will be SACK'd with
             * single one message
             */
            for( ; ; )
            {
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8014f80:	6a39      	ldr	r1, [r7, #32]
 8014f82:	68f8      	ldr	r0, [r7, #12]
 8014f84:	f7ff fd04 	bl	8014990 <xTCPWindowRxFind>
 8014f88:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8014f8a:	69bb      	ldr	r3, [r7, #24]
 8014f8c:	2b00      	cmp	r3, #0
 8014f8e:	d006      	beq.n	8014f9e <prvTCPWindowRx_UnexpectedRX+0x3e>
                {
                    break;
                }

                ulLast += ( uint32_t ) pxFound->lDataLength;
 8014f90:	69bb      	ldr	r3, [r7, #24]
 8014f92:	689b      	ldr	r3, [r3, #8]
 8014f94:	461a      	mov	r2, r3
 8014f96:	6a3b      	ldr	r3, [r7, #32]
 8014f98:	4413      	add	r3, r2
 8014f9a:	623b      	str	r3, [r7, #32]
                pxFound = xTCPWindowRxFind( pxWindow, ulLast );
 8014f9c:	e7f0      	b.n	8014f80 <prvTCPWindowRx_UnexpectedRX+0x20>
                    break;
 8014f9e:	bf00      	nop
            }

            if( xTCPWindowLoggingLevel >= 1 )
 8014fa0:	4b45      	ldr	r3, [pc, #276]	@ (80150b8 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8014fa2:	681b      	ldr	r3, [r3, #0]
 8014fa4:	2b00      	cmp	r3, #0
 8014fa6:	dd20      	ble.n	8014fea <prvTCPWindowRx_UnexpectedRX+0x8a>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%d,%d]: seqnr %u exp %u (dist %d) SACK to %u\n",
 8014fa8:	68fb      	ldr	r3, [r7, #12]
 8014faa:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8014fae:	461d      	mov	r5, r3
 8014fb0:	68fb      	ldr	r3, [r7, #12]
 8014fb2:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8014fb6:	461e      	mov	r6, r3
 8014fb8:	68fb      	ldr	r3, [r7, #12]
 8014fba:	68db      	ldr	r3, [r3, #12]
 8014fbc:	68ba      	ldr	r2, [r7, #8]
 8014fbe:	1ad0      	subs	r0, r2, r3
 8014fc0:	68fb      	ldr	r3, [r7, #12]
 8014fc2:	68db      	ldr	r3, [r3, #12]
 8014fc4:	69fa      	ldr	r2, [r7, #28]
 8014fc6:	1ad3      	subs	r3, r2, r3
 8014fc8:	68b9      	ldr	r1, [r7, #8]
 8014fca:	69fa      	ldr	r2, [r7, #28]
 8014fcc:	1a8a      	subs	r2, r1, r2
 8014fce:	4614      	mov	r4, r2
 8014fd0:	68fa      	ldr	r2, [r7, #12]
 8014fd2:	68d2      	ldr	r2, [r2, #12]
 8014fd4:	6a39      	ldr	r1, [r7, #32]
 8014fd6:	1a8a      	subs	r2, r1, r2
 8014fd8:	9202      	str	r2, [sp, #8]
 8014fda:	9401      	str	r4, [sp, #4]
 8014fdc:	9300      	str	r3, [sp, #0]
 8014fde:	4603      	mov	r3, r0
 8014fe0:	4632      	mov	r2, r6
 8014fe2:	4629      	mov	r1, r5
 8014fe4:	4835      	ldr	r0, [pc, #212]	@ (80150bc <prvTCPWindowRx_UnexpectedRX+0x15c>)
 8014fe6:	f00b fe4b 	bl	8020c80 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulLast - pxWindow->rx.ulFirstSequenceNumber ) ) );
            }

            /* Now prepare the SACK message.
             * Code OPTION_CODE_SINGLE_SACK already in network byte order. */
            pxWindow->ulOptionsData[ 0 ] = OPTION_CODE_SINGLE_SACK;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	4a34      	ldr	r2, [pc, #208]	@ (80150c0 <prvTCPWindowRx_UnexpectedRX+0x160>)
 8014fee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

            /* First sequence number that we received. */
            pxWindow->ulOptionsData[ 1 ] = FreeRTOS_htonl( ulSequenceNumber );
 8014ff2:	68bb      	ldr	r3, [r7, #8]
 8014ff4:	061a      	lsls	r2, r3, #24
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	021b      	lsls	r3, r3, #8
 8014ffa:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8014ffe:	431a      	orrs	r2, r3
 8015000:	68bb      	ldr	r3, [r7, #8]
 8015002:	0a1b      	lsrs	r3, r3, #8
 8015004:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8015008:	431a      	orrs	r2, r3
 801500a:	68bb      	ldr	r3, [r7, #8]
 801500c:	0e1b      	lsrs	r3, r3, #24
 801500e:	431a      	orrs	r2, r3
 8015010:	68fb      	ldr	r3, [r7, #12]
 8015012:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

            /* Last + 1 */
            pxWindow->ulOptionsData[ 2 ] = FreeRTOS_htonl( ulLast );
 8015016:	6a3b      	ldr	r3, [r7, #32]
 8015018:	061a      	lsls	r2, r3, #24
 801501a:	6a3b      	ldr	r3, [r7, #32]
 801501c:	021b      	lsls	r3, r3, #8
 801501e:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8015022:	431a      	orrs	r2, r3
 8015024:	6a3b      	ldr	r3, [r7, #32]
 8015026:	0a1b      	lsrs	r3, r3, #8
 8015028:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801502c:	431a      	orrs	r2, r3
 801502e:	6a3b      	ldr	r3, [r7, #32]
 8015030:	0e1b      	lsrs	r3, r3, #24
 8015032:	431a      	orrs	r2, r3
 8015034:	68fb      	ldr	r3, [r7, #12]
 8015036:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

            /* Which make 12 (3*4) option bytes. */
            pxWindow->ucOptionLength = ( uint8_t ) ( 3U * sizeof( pxWindow->ulOptionsData[ 0 ] ) );
 801503a:	68fb      	ldr	r3, [r7, #12]
 801503c:	220c      	movs	r2, #12
 801503e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            pxFound = xTCPWindowRxFind( pxWindow, ulSequenceNumber );
 8015042:	68b9      	ldr	r1, [r7, #8]
 8015044:	68f8      	ldr	r0, [r7, #12]
 8015046:	f7ff fca3 	bl	8014990 <xTCPWindowRxFind>
 801504a:	61b8      	str	r0, [r7, #24]

            if( pxFound != NULL )
 801504c:	69bb      	ldr	r3, [r7, #24]
 801504e:	2b00      	cmp	r3, #0
 8015050:	d12d      	bne.n	80150ae <prvTCPWindowRx_UnexpectedRX+0x14e>
                 * again. */
                /* A negative value will be returned to indicate than error. */
            }
            else
            {
                pxFound = xTCPWindowRxNew( pxWindow, ulSequenceNumber, ( int32_t ) ulLength );
 8015052:	687a      	ldr	r2, [r7, #4]
 8015054:	2301      	movs	r3, #1
 8015056:	68b9      	ldr	r1, [r7, #8]
 8015058:	68f8      	ldr	r0, [r7, #12]
 801505a:	f7ff fcc1 	bl	80149e0 <xTCPWindowNew>
 801505e:	61b8      	str	r0, [r7, #24]

                if( pxFound == NULL )
 8015060:	69bb      	ldr	r3, [r7, #24]
 8015062:	2b00      	cmp	r3, #0
 8015064:	d104      	bne.n	8015070 <prvTCPWindowRx_UnexpectedRX+0x110>
                {
                    /* Can not send a SACK, because the segment cannot be
                     * stored. */
                    pxWindow->ucOptionLength = 0U;
 8015066:	68fb      	ldr	r3, [r7, #12]
 8015068:	2200      	movs	r2, #0
 801506a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801506e:	e01e      	b.n	80150ae <prvTCPWindowRx_UnexpectedRX+0x14e>
                }
                else
                {
                    uint32_t ulIntermediateResult;

                    if( xTCPWindowLoggingLevel != 0 )
 8015070:	4b11      	ldr	r3, [pc, #68]	@ (80150b8 <prvTCPWindowRx_UnexpectedRX+0x158>)
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	2b00      	cmp	r3, #0
 8015076:	d014      	beq.n	80150a2 <prvTCPWindowRx_UnexpectedRX+0x142>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowRxCheck[%u,%u]: seqnr %u (cnt %u)\n",
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 801507e:	4619      	mov	r1, r3
 8015080:	68fb      	ldr	r3, [r7, #12]
 8015082:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015086:	4618      	mov	r0, r3
 8015088:	68fb      	ldr	r3, [r7, #12]
 801508a:	68db      	ldr	r3, [r3, #12]
 801508c:	68ba      	ldr	r2, [r7, #8]
 801508e:	1ad2      	subs	r2, r2, r3
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8015096:	9300      	str	r3, [sp, #0]
 8015098:	4613      	mov	r3, r2
 801509a:	4602      	mov	r2, r0
 801509c:	4809      	ldr	r0, [pc, #36]	@ (80150c4 <prvTCPWindowRx_UnexpectedRX+0x164>)
 801509e:	f00b fdef 	bl	8020c80 <lUDPLoggingPrintf>
                                                 ( unsigned ) listCURRENT_LIST_LENGTH( &pxWindow->xRxSegments ) ) );
                    }

                    /* Return a positive value.  The packet may be accepted
                    * and stored but an earlier packet is still missing. */
                    ulIntermediateResult = ulSequenceNumber - ulCurrentSequenceNumber;
 80150a2:	68ba      	ldr	r2, [r7, #8]
 80150a4:	69fb      	ldr	r3, [r7, #28]
 80150a6:	1ad3      	subs	r3, r2, r3
 80150a8:	617b      	str	r3, [r7, #20]
                    lReturn = ( int32_t ) ulIntermediateResult;
 80150aa:	697b      	ldr	r3, [r7, #20]
 80150ac:	627b      	str	r3, [r7, #36]	@ 0x24
                }
            }

            return lReturn;
 80150ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 80150b0:	4618      	mov	r0, r3
 80150b2:	372c      	adds	r7, #44	@ 0x2c
 80150b4:	46bd      	mov	sp, r7
 80150b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80150b8:	20001348 	.word	0x20001348
 80150bc:	08025900 	.word	0x08025900
 80150c0:	0a050101 	.word	0x0a050101
 80150c4:	08025940 	.word	0x08025940

080150c8 <lTCPWindowRxCheck>:
        int32_t lTCPWindowRxCheck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber,
                                   uint32_t ulLength,
                                   uint32_t ulSpace,
                                   uint32_t * pulSkipCount )
        {
 80150c8:	b580      	push	{r7, lr}
 80150ca:	b08c      	sub	sp, #48	@ 0x30
 80150cc:	af00      	add	r7, sp, #0
 80150ce:	60f8      	str	r0, [r7, #12]
 80150d0:	60b9      	str	r1, [r7, #8]
 80150d2:	607a      	str	r2, [r7, #4]
 80150d4:	603b      	str	r3, [r7, #0]
            uint32_t ulCurrentSequenceNumber;
            uint32_t ulIntermediateResult;
            int32_t lReturn = -1;
 80150d6:	f04f 33ff 	mov.w	r3, #4294967295
 80150da:	62fb      	str	r3, [r7, #44]	@ 0x2c
            int32_t lStartDistance;
            int32_t lLastDistance;
            uint32_t ulLast;
            uint32_t ulRxSequenceNumber = ulSequenceNumber;
 80150dc:	68bb      	ldr	r3, [r7, #8]
 80150de:	62bb      	str	r3, [r7, #40]	@ 0x28
            uint32_t ulRxLength = ulLength;
 80150e0:	687b      	ldr	r3, [r7, #4]
 80150e2:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Only in an exceptional case, where a packet starts before
             * ulCurrentSequenceNumber, and ends after it, the skip-count
             * will be set. See below. */

            *( pulSkipCount ) = 0U;
 80150e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80150e6:	2200      	movs	r2, #0
 80150e8:	601a      	str	r2, [r3, #0]

            ulCurrentSequenceNumber = pxWindow->rx.ulCurrentSequenceNumber;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	691b      	ldr	r3, [r3, #16]
 80150ee:	623b      	str	r3, [r7, #32]

            ulLast = ulRxSequenceNumber + ulRxLength;
 80150f0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80150f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80150f4:	4413      	add	r3, r2
 80150f6:	61fb      	str	r3, [r7, #28]
            ulIntermediateResult = ulLast - ulCurrentSequenceNumber;
 80150f8:	69fa      	ldr	r2, [r7, #28]
 80150fa:	6a3b      	ldr	r3, [r7, #32]
 80150fc:	1ad3      	subs	r3, r2, r3
 80150fe:	61bb      	str	r3, [r7, #24]
            /* The cast from unsigned long to signed long is on purpose. */
            lLastDistance = ( int32_t ) ulIntermediateResult;
 8015100:	69bb      	ldr	r3, [r7, #24]
 8015102:	617b      	str	r3, [r7, #20]

            ulIntermediateResult = ulRxSequenceNumber - ulCurrentSequenceNumber;
 8015104:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015106:	6a3b      	ldr	r3, [r7, #32]
 8015108:	1ad3      	subs	r3, r2, r3
 801510a:	61bb      	str	r3, [r7, #24]
            lStartDistance = ( int32_t ) ulIntermediateResult;
 801510c:	69bb      	ldr	r3, [r7, #24]
 801510e:	613b      	str	r3, [r7, #16]

            if( ( lStartDistance < 0 ) && ( lLastDistance > 0 ) )
 8015110:	693b      	ldr	r3, [r7, #16]
 8015112:	2b00      	cmp	r3, #0
 8015114:	da18      	bge.n	8015148 <lTCPWindowRxCheck+0x80>
 8015116:	697b      	ldr	r3, [r7, #20]
 8015118:	2b00      	cmp	r3, #0
 801511a:	dd15      	ble.n	8015148 <lTCPWindowRxCheck+0x80>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Received +%u bytes for %u, only using %d\n",
 801511c:	68fb      	ldr	r3, [r7, #12]
 801511e:	68db      	ldr	r3, [r3, #12]
 8015120:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015122:	1ad2      	subs	r2, r2, r3
 8015124:	697b      	ldr	r3, [r7, #20]
 8015126:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015128:	4824      	ldr	r0, [pc, #144]	@ (80151bc <lTCPWindowRxCheck+0xf4>)
 801512a:	f00b fda9 	bl	8020c80 <lUDPLoggingPrintf>
                                         ( unsigned ) ulRxLength,
                                         ( unsigned ) ( ulRxSequenceNumber - pxWindow->rx.ulFirstSequenceNumber ),
                                         ( int ) lLastDistance ) );
                /* Increase the sequence number, decrease the length. */
                ulRxSequenceNumber += ( uint32_t ) ( -lStartDistance );
 801512e:	693b      	ldr	r3, [r7, #16]
 8015130:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8015132:	1ad3      	subs	r3, r2, r3
 8015134:	62bb      	str	r3, [r7, #40]	@ 0x28
                ulRxLength += ( uint32_t ) lStartDistance;
 8015136:	693b      	ldr	r3, [r7, #16]
 8015138:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801513a:	4413      	add	r3, r2
 801513c:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Tell the caller that the first 'pulSkipCount' bytes don't
                 * need to be stored. */
                *( pulSkipCount ) = ( uint32_t ) ( -lStartDistance );
 801513e:	693b      	ldr	r3, [r7, #16]
 8015140:	425b      	negs	r3, r3
 8015142:	461a      	mov	r2, r3
 8015144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015146:	601a      	str	r2, [r3, #0]
            }

            /* For Selective Ack (SACK), used when out-of-sequence data come in. */
            pxWindow->ucOptionLength = 0U;
 8015148:	68fb      	ldr	r3, [r7, #12]
 801514a:	2200      	movs	r2, #0
 801514c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

            /* Non-zero if TCP-windows contains data which must be popped. */
            pxWindow->ulUserDataLength = 0U;
 8015150:	68fb      	ldr	r3, [r7, #12]
 8015152:	2200      	movs	r2, #0
 8015154:	631a      	str	r2, [r3, #48]	@ 0x30

            if( ulCurrentSequenceNumber == ulRxSequenceNumber )
 8015156:	6a3a      	ldr	r2, [r7, #32]
 8015158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801515a:	429a      	cmp	r2, r3
 801515c:	d110      	bne.n	8015180 <lTCPWindowRxCheck+0xb8>
            {
                /* This is the packet with the lowest sequence number we're waiting
                 * for.  It can be passed directly to the rx stream. */
                if( ulRxLength > ulSpace )
 801515e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015160:	683b      	ldr	r3, [r7, #0]
 8015162:	429a      	cmp	r2, r3
 8015164:	d905      	bls.n	8015172 <lTCPWindowRxCheck+0xaa>
                {
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %u bytes, due to lack of space (%u)\n", ( unsigned ) ulRxLength, ( unsigned ) ulSpace ) );
 8015166:	683a      	ldr	r2, [r7, #0]
 8015168:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801516a:	4815      	ldr	r0, [pc, #84]	@ (80151c0 <lTCPWindowRxCheck+0xf8>)
 801516c:	f00b fd88 	bl	8020c80 <lUDPLoggingPrintf>
 8015170:	e01f      	b.n	80151b2 <lTCPWindowRxCheck+0xea>
                }
                else
                {
                    /* Packet was expected, may be passed directly to the socket
                     * buffer or application.  Store the packet at offset 0. */
                    prvTCPWindowRx_ExpectedRX( pxWindow, ulRxLength );
 8015172:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8015174:	68f8      	ldr	r0, [r7, #12]
 8015176:	f7ff fe87 	bl	8014e88 <prvTCPWindowRx_ExpectedRX>
                    lReturn = 0;
 801517a:	2300      	movs	r3, #0
 801517c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801517e:	e018      	b.n	80151b2 <lTCPWindowRxCheck+0xea>
                }
            }
            else if( ulCurrentSequenceNumber == ( ulRxSequenceNumber + 1U ) )
 8015180:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015182:	3301      	adds	r3, #1
 8015184:	6a3a      	ldr	r2, [r7, #32]
 8015186:	429a      	cmp	r2, r3
 8015188:	d013      	beq.n	80151b2 <lTCPWindowRxCheck+0xea>
                 * window so it can be stored. */

                /*  An "out-of-sequence" segment was received, must have missed one.
                 * Prepare a SACK (Selective ACK). */

                if( lLastDistance <= 0 )
 801518a:	697b      	ldr	r3, [r7, #20]
 801518c:	2b00      	cmp	r3, #0
 801518e:	dd10      	ble.n	80151b2 <lTCPWindowRxCheck+0xea>
                {
                    /* An earlier packet has been received, must be a retransmission of a
                     * packet that has been accepted already.  No need to send out a
                     * Selective ACK (SACK). */
                }
                else if( lLastDistance > ( int32_t ) ulSpace )
 8015190:	683b      	ldr	r3, [r7, #0]
 8015192:	697a      	ldr	r2, [r7, #20]
 8015194:	429a      	cmp	r2, r3
 8015196:	dd06      	ble.n	80151a6 <lTCPWindowRxCheck+0xde>
                {
                    /* The new segment is ahead of rx.ulCurrentSequenceNumber.  The
                     * sequence number of this packet is too far ahead, ignore it. */
                    FreeRTOS_debug_printf( ( "lTCPWindowRxCheck: Refuse %d+%u bytes, due to lack of space (%u)\n",
 8015198:	683b      	ldr	r3, [r7, #0]
 801519a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801519c:	6979      	ldr	r1, [r7, #20]
 801519e:	4809      	ldr	r0, [pc, #36]	@ (80151c4 <lTCPWindowRxCheck+0xfc>)
 80151a0:	f00b fd6e 	bl	8020c80 <lUDPLoggingPrintf>
 80151a4:	e005      	b.n	80151b2 <lTCPWindowRxCheck+0xea>
                                             ( unsigned ) ulRxLength,
                                             ( unsigned ) ulSpace ) );
                }
                else
                {
                    lReturn = prvTCPWindowRx_UnexpectedRX( pxWindow, ulRxSequenceNumber, ulRxLength );
 80151a6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80151aa:	68f8      	ldr	r0, [r7, #12]
 80151ac:	f7ff fed8 	bl	8014f60 <prvTCPWindowRx_UnexpectedRX>
 80151b0:	62f8      	str	r0, [r7, #44]	@ 0x2c
                }
            }

            return lReturn;
 80151b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 80151b4:	4618      	mov	r0, r3
 80151b6:	3730      	adds	r7, #48	@ 0x30
 80151b8:	46bd      	mov	sp, r7
 80151ba:	bd80      	pop	{r7, pc}
 80151bc:	08025970 	.word	0x08025970
 80151c0:	080259b0 	.word	0x080259b0
 80151c4:	080259f0 	.word	0x080259f0

080151c8 <lTCPIncrementTxPosition>:
 * @return The new incremented position, or "( lPosition + lCount ) % lMax".
 */
        static int32_t lTCPIncrementTxPosition( int32_t lPosition,
                                                int32_t lMax,
                                                int32_t lCount )
        {
 80151c8:	b480      	push	{r7}
 80151ca:	b087      	sub	sp, #28
 80151cc:	af00      	add	r7, sp, #0
 80151ce:	60f8      	str	r0, [r7, #12]
 80151d0:	60b9      	str	r1, [r7, #8]
 80151d2:	607a      	str	r2, [r7, #4]
            int32_t lReturn;


            /* +TCP stores data in circular buffers.  Calculate the next position to
             * store. */
            lReturn = lPosition + lCount;
 80151d4:	68fa      	ldr	r2, [r7, #12]
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	4413      	add	r3, r2
 80151da:	617b      	str	r3, [r7, #20]

            if( lReturn >= lMax )
 80151dc:	697a      	ldr	r2, [r7, #20]
 80151de:	68bb      	ldr	r3, [r7, #8]
 80151e0:	429a      	cmp	r2, r3
 80151e2:	db03      	blt.n	80151ec <lTCPIncrementTxPosition+0x24>
            {
                lReturn -= lMax;
 80151e4:	697a      	ldr	r2, [r7, #20]
 80151e6:	68bb      	ldr	r3, [r7, #8]
 80151e8:	1ad3      	subs	r3, r2, r3
 80151ea:	617b      	str	r3, [r7, #20]
            }

            return lReturn;
 80151ec:	697b      	ldr	r3, [r7, #20]
        }
 80151ee:	4618      	mov	r0, r3
 80151f0:	371c      	adds	r7, #28
 80151f2:	46bd      	mov	sp, r7
 80151f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80151f8:	4770      	bx	lr
	...

080151fc <prvTCPWindowTxAdd_FrontSegment>:
 * @return lToWrite: the number of bytes added to the segment.
 */
        static int32_t prvTCPWindowTxAdd_FrontSegment( TCPWindow_t * pxWindow,
                                                       TCPSegment_t * pxSegment,
                                                       int32_t lBytesLeft )
        {
 80151fc:	b580      	push	{r7, lr}
 80151fe:	b088      	sub	sp, #32
 8015200:	af02      	add	r7, sp, #8
 8015202:	60f8      	str	r0, [r7, #12]
 8015204:	60b9      	str	r1, [r7, #8]
 8015206:	607a      	str	r2, [r7, #4]
            int32_t lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength - pxSegment->lDataLength );
 8015208:	68bb      	ldr	r3, [r7, #8]
 801520a:	685a      	ldr	r2, [r3, #4]
 801520c:	68bb      	ldr	r3, [r7, #8]
 801520e:	689b      	ldr	r3, [r3, #8]
 8015210:	1ad3      	subs	r3, r2, r3
 8015212:	4619      	mov	r1, r3
 8015214:	6878      	ldr	r0, [r7, #4]
 8015216:	f7f4 fe05 	bl	8009e24 <FreeRTOS_min_int32>
 801521a:	6178      	str	r0, [r7, #20]

            pxSegment->lDataLength += lToWrite;
 801521c:	68bb      	ldr	r3, [r7, #8]
 801521e:	689a      	ldr	r2, [r3, #8]
 8015220:	697b      	ldr	r3, [r7, #20]
 8015222:	441a      	add	r2, r3
 8015224:	68bb      	ldr	r3, [r7, #8]
 8015226:	609a      	str	r2, [r3, #8]

            if( pxSegment->lDataLength >= pxSegment->lMaxLength )
 8015228:	68bb      	ldr	r3, [r7, #8]
 801522a:	689a      	ldr	r2, [r3, #8]
 801522c:	68bb      	ldr	r3, [r7, #8]
 801522e:	685b      	ldr	r3, [r3, #4]
 8015230:	429a      	cmp	r2, r3
 8015232:	db02      	blt.n	801523a <prvTCPWindowTxAdd_FrontSegment+0x3e>
            {
                /* This segment is full, don't add more bytes. */
                pxWindow->pxHeadSegment = NULL;
 8015234:	68fb      	ldr	r3, [r7, #12]
 8015236:	2200      	movs	r2, #0
 8015238:	67da      	str	r2, [r3, #124]	@ 0x7c
            }

            /* ulNextTxSequenceNumber is the sequence number of the next byte to
             * be stored for transmission. */
            pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 801523a:	68fb      	ldr	r3, [r7, #12]
 801523c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801523e:	697b      	ldr	r3, [r7, #20]
 8015240:	441a      	add	r2, r3
 8015242:	68fb      	ldr	r3, [r7, #12]
 8015244:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Some detailed logging, for those who're interested. */
            if( ( xTCPWindowLoggingLevel >= 2 ) && ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) )
 8015246:	4b12      	ldr	r3, [pc, #72]	@ (8015290 <prvTCPWindowTxAdd_FrontSegment+0x94>)
 8015248:	681b      	ldr	r3, [r3, #0]
 801524a:	2b01      	cmp	r3, #1
 801524c:	dd1a      	ble.n	8015284 <prvTCPWindowTxAdd_FrontSegment+0x88>
 801524e:	68fb      	ldr	r3, [r7, #12]
 8015250:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015254:	2b17      	cmp	r3, #23
 8015256:	d015      	beq.n	8015284 <prvTCPWindowTxAdd_FrontSegment+0x88>
            {
                FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Add %4d bytes for seqNr %u len %4d (nxt %u) pos %d\n",
 8015258:	68bb      	ldr	r3, [r7, #8]
 801525a:	681a      	ldr	r2, [r3, #0]
 801525c:	68fb      	ldr	r3, [r7, #12]
 801525e:	69db      	ldr	r3, [r3, #28]
 8015260:	1ad1      	subs	r1, r2, r3
 8015262:	68bb      	ldr	r3, [r7, #8]
 8015264:	6898      	ldr	r0, [r3, #8]
 8015266:	68fb      	ldr	r3, [r7, #12]
 8015268:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801526a:	68fb      	ldr	r3, [r7, #12]
 801526c:	69db      	ldr	r3, [r3, #28]
 801526e:	1ad3      	subs	r3, r2, r3
 8015270:	68ba      	ldr	r2, [r7, #8]
 8015272:	68d2      	ldr	r2, [r2, #12]
 8015274:	9201      	str	r2, [sp, #4]
 8015276:	9300      	str	r3, [sp, #0]
 8015278:	4603      	mov	r3, r0
 801527a:	460a      	mov	r2, r1
 801527c:	6879      	ldr	r1, [r7, #4]
 801527e:	4805      	ldr	r0, [pc, #20]	@ (8015294 <prvTCPWindowTxAdd_FrontSegment+0x98>)
 8015280:	f00b fcfe 	bl	8020c80 <lUDPLoggingPrintf>
                                         ( int ) pxSegment->lDataLength,
                                         ( unsigned ) ( pxWindow->ulNextTxSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( int ) pxSegment->lStreamPos ) );
            }

            return lToWrite;
 8015284:	697b      	ldr	r3, [r7, #20]
        }
 8015286:	4618      	mov	r0, r3
 8015288:	3718      	adds	r7, #24
 801528a:	46bd      	mov	sp, r7
 801528c:	bd80      	pop	{r7, pc}
 801528e:	bf00      	nop
 8015290:	20001348 	.word	0x20001348
 8015294:	08025a34 	.word	0x08025a34

08015298 <lTCPWindowTxAdd>:
 */
        int32_t lTCPWindowTxAdd( TCPWindow_t * pxWindow,
                                 uint32_t ulLength,
                                 int32_t lPosition,
                                 int32_t lMax )
        {
 8015298:	b580      	push	{r7, lr}
 801529a:	b08a      	sub	sp, #40	@ 0x28
 801529c:	af00      	add	r7, sp, #0
 801529e:	60f8      	str	r0, [r7, #12]
 80152a0:	60b9      	str	r1, [r7, #8]
 80152a2:	607a      	str	r2, [r7, #4]
 80152a4:	603b      	str	r3, [r7, #0]
            int32_t lBytesLeft = ( int32_t ) ulLength;
 80152a6:	68bb      	ldr	r3, [r7, #8]
 80152a8:	627b      	str	r3, [r7, #36]	@ 0x24
            int32_t lToWrite;
            int32_t lDone = 0;
 80152aa:	2300      	movs	r3, #0
 80152ac:	623b      	str	r3, [r7, #32]
            int32_t lBufferIndex = lPosition;
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	61fb      	str	r3, [r7, #28]
            TCPSegment_t * pxSegment = pxWindow->pxHeadSegment;
 80152b2:	68fb      	ldr	r3, [r7, #12]
 80152b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80152b6:	61bb      	str	r3, [r7, #24]

            /* Puts a message in the Tx-window (after buffer size has been
             * verified). */
            if( ( pxSegment != NULL ) &&
 80152b8:	69bb      	ldr	r3, [r7, #24]
 80152ba:	2b00      	cmp	r3, #0
 80152bc:	d073      	beq.n	80153a6 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 80152be:	69bb      	ldr	r3, [r7, #24]
 80152c0:	689a      	ldr	r2, [r3, #8]
 80152c2:	69bb      	ldr	r3, [r7, #24]
 80152c4:	685b      	ldr	r3, [r3, #4]
            if( ( pxSegment != NULL ) &&
 80152c6:	429a      	cmp	r2, r3
 80152c8:	da6d      	bge.n	80153a6 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 80152ca:	69bb      	ldr	r3, [r7, #24]
 80152cc:	7d9b      	ldrb	r3, [r3, #22]
 80152ce:	f003 0301 	and.w	r3, r3, #1
 80152d2:	b2db      	uxtb	r3, r3
                ( pxSegment->lDataLength < pxSegment->lMaxLength ) &&
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d166      	bne.n	80153a6 <lTCPWindowTxAdd+0x10e>
                ( pxSegment->lDataLength != 0 ) )
 80152d8:	69bb      	ldr	r3, [r7, #24]
 80152da:	689b      	ldr	r3, [r3, #8]
                ( pxSegment->u.bits.bOutstanding == pdFALSE_UNSIGNED ) &&
 80152dc:	2b00      	cmp	r3, #0
 80152de:	d062      	beq.n	80153a6 <lTCPWindowTxAdd+0x10e>
            {
                lToWrite = prvTCPWindowTxAdd_FrontSegment( pxWindow, pxSegment, lBytesLeft );
 80152e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152e2:	69b9      	ldr	r1, [r7, #24]
 80152e4:	68f8      	ldr	r0, [r7, #12]
 80152e6:	f7ff ff89 	bl	80151fc <prvTCPWindowTxAdd_FrontSegment>
 80152ea:	6178      	str	r0, [r7, #20]
                lBytesLeft -= lToWrite;
 80152ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80152ee:	697b      	ldr	r3, [r7, #20]
 80152f0:	1ad3      	subs	r3, r2, r3
 80152f2:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Increased the return value. */
                lDone += lToWrite;
 80152f4:	6a3a      	ldr	r2, [r7, #32]
 80152f6:	697b      	ldr	r3, [r7, #20]
 80152f8:	4413      	add	r3, r2
 80152fa:	623b      	str	r3, [r7, #32]

                /* Calculate the next position in the circular data buffer, knowing
                 * its maximum length 'lMax'. */
                lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 80152fc:	697a      	ldr	r2, [r7, #20]
 80152fe:	6839      	ldr	r1, [r7, #0]
 8015300:	69f8      	ldr	r0, [r7, #28]
 8015302:	f7ff ff61 	bl	80151c8 <lTCPIncrementTxPosition>
 8015306:	61f8      	str	r0, [r7, #28]
            }

            while( lBytesLeft > 0 )
 8015308:	e04d      	b.n	80153a6 <lTCPWindowTxAdd+0x10e>
            {
                /* The current transmission segment is full, create new segments as
                 * needed. */
                pxSegment = xTCPWindowTxNew( pxWindow, pxWindow->ulNextTxSequenceNumber, ( int32_t ) pxWindow->usMSS );
 801530a:	68fb      	ldr	r3, [r7, #12]
 801530c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 801530e:	68fb      	ldr	r3, [r7, #12]
 8015310:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 8015314:	461a      	mov	r2, r3
 8015316:	2300      	movs	r3, #0
 8015318:	68f8      	ldr	r0, [r7, #12]
 801531a:	f7ff fb61 	bl	80149e0 <xTCPWindowNew>
 801531e:	61b8      	str	r0, [r7, #24]

                if( pxSegment != NULL )
 8015320:	69bb      	ldr	r3, [r7, #24]
 8015322:	2b00      	cmp	r3, #0
 8015324:	d037      	beq.n	8015396 <lTCPWindowTxAdd+0xfe>
                {
                    /* Store as many as needed, but no more than the maximum
                     * (MSS). */
                    lToWrite = FreeRTOS_min_int32( lBytesLeft, pxSegment->lMaxLength );
 8015326:	69bb      	ldr	r3, [r7, #24]
 8015328:	685b      	ldr	r3, [r3, #4]
 801532a:	4619      	mov	r1, r3
 801532c:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 801532e:	f7f4 fd79 	bl	8009e24 <FreeRTOS_min_int32>
 8015332:	6178      	str	r0, [r7, #20]

                    pxSegment->lDataLength = lToWrite;
 8015334:	69bb      	ldr	r3, [r7, #24]
 8015336:	697a      	ldr	r2, [r7, #20]
 8015338:	609a      	str	r2, [r3, #8]
                    pxSegment->lStreamPos = lBufferIndex;
 801533a:	69bb      	ldr	r3, [r7, #24]
 801533c:	69fa      	ldr	r2, [r7, #28]
 801533e:	60da      	str	r2, [r3, #12]
                    lBytesLeft -= lToWrite;
 8015340:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015342:	697b      	ldr	r3, [r7, #20]
 8015344:	1ad3      	subs	r3, r2, r3
 8015346:	627b      	str	r3, [r7, #36]	@ 0x24
                    lBufferIndex = lTCPIncrementTxPosition( lBufferIndex, lMax, lToWrite );
 8015348:	697a      	ldr	r2, [r7, #20]
 801534a:	6839      	ldr	r1, [r7, #0]
 801534c:	69f8      	ldr	r0, [r7, #28]
 801534e:	f7ff ff3b 	bl	80151c8 <lTCPIncrementTxPosition>
 8015352:	61f8      	str	r0, [r7, #28]
                    pxWindow->ulNextTxSequenceNumber += ( uint32_t ) lToWrite;
 8015354:	68fb      	ldr	r3, [r7, #12]
 8015356:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015358:	697b      	ldr	r3, [r7, #20]
 801535a:	441a      	add	r2, r3
 801535c:	68fb      	ldr	r3, [r7, #12]
 801535e:	635a      	str	r2, [r3, #52]	@ 0x34
                    lDone += lToWrite;
 8015360:	6a3a      	ldr	r2, [r7, #32]
 8015362:	697b      	ldr	r3, [r7, #20]
 8015364:	4413      	add	r3, r2
 8015366:	623b      	str	r3, [r7, #32]

                    /* Link this segment in the Tx-Queue. */
                    vListInsertFifo( &( pxWindow->xTxQueue ), &( pxSegment->xQueueItem ) );
 8015368:	68fb      	ldr	r3, [r7, #12]
 801536a:	f103 0254 	add.w	r2, r3, #84	@ 0x54
 801536e:	69bb      	ldr	r3, [r7, #24]
 8015370:	3318      	adds	r3, #24
 8015372:	4619      	mov	r1, r3
 8015374:	4610      	mov	r0, r2
 8015376:	f7ff fa63 	bl	8014840 <vListInsertFifo>

                    /* Let 'pxHeadSegment' point to this segment if there is still
                     * space. */
                    if( pxSegment->lDataLength < pxSegment->lMaxLength )
 801537a:	69bb      	ldr	r3, [r7, #24]
 801537c:	689a      	ldr	r2, [r3, #8]
 801537e:	69bb      	ldr	r3, [r7, #24]
 8015380:	685b      	ldr	r3, [r3, #4]
 8015382:	429a      	cmp	r2, r3
 8015384:	da03      	bge.n	801538e <lTCPWindowTxAdd+0xf6>
                    {
                        pxWindow->pxHeadSegment = pxSegment;
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	69ba      	ldr	r2, [r7, #24]
 801538a:	67da      	str	r2, [r3, #124]	@ 0x7c
 801538c:	e00b      	b.n	80153a6 <lTCPWindowTxAdd+0x10e>
                    }
                    else
                    {
                        pxWindow->pxHeadSegment = NULL;
 801538e:	68fb      	ldr	r3, [r7, #12]
 8015390:	2200      	movs	r2, #0
 8015392:	67da      	str	r2, [r3, #124]	@ 0x7c
 8015394:	e007      	b.n	80153a6 <lTCPWindowTxAdd+0x10e>
                }
                else
                {
                    /* A sever situation: running out of segments for transmission.
                     * No more data can be sent at the moment. */
                    if( lDone != 0 )
 8015396:	6a3b      	ldr	r3, [r7, #32]
 8015398:	2b00      	cmp	r3, #0
 801539a:	d008      	beq.n	80153ae <lTCPWindowTxAdd+0x116>
                    {
                        FreeRTOS_debug_printf( ( "lTCPWindowTxAdd: Sorry all buffers full (cancel %d bytes)\n", ( int ) lBytesLeft ) );
 801539c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 801539e:	4807      	ldr	r0, [pc, #28]	@ (80153bc <lTCPWindowTxAdd+0x124>)
 80153a0:	f00b fc6e 	bl	8020c80 <lUDPLoggingPrintf>
                    }

                    break;
 80153a4:	e003      	b.n	80153ae <lTCPWindowTxAdd+0x116>
            while( lBytesLeft > 0 )
 80153a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	dcae      	bgt.n	801530a <lTCPWindowTxAdd+0x72>
 80153ac:	e000      	b.n	80153b0 <lTCPWindowTxAdd+0x118>
                    break;
 80153ae:	bf00      	nop
                }
            }

            return lDone;
 80153b0:	6a3b      	ldr	r3, [r7, #32]
        }
 80153b2:	4618      	mov	r0, r3
 80153b4:	3728      	adds	r7, #40	@ 0x28
 80153b6:	46bd      	mov	sp, r7
 80153b8:	bd80      	pop	{r7, pc}
 80153ba:	bf00      	nop
 80153bc:	08025a7c 	.word	0x08025a7c

080153c0 <xTCPWindowTxDone>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 *
 * @return pdTRUE if there are no more outstanding Tx segments, else pdFALSE.
 */
        BaseType_t xTCPWindowTxDone( const TCPWindow_t * pxWindow )
        {
 80153c0:	b480      	push	{r7}
 80153c2:	b083      	sub	sp, #12
 80153c4:	af00      	add	r7, sp, #0
 80153c6:	6078      	str	r0, [r7, #4]
            return listLIST_IS_EMPTY( ( &pxWindow->xTxSegments ) );
 80153c8:	687b      	ldr	r3, [r7, #4]
 80153ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80153ce:	2b00      	cmp	r3, #0
 80153d0:	d101      	bne.n	80153d6 <xTCPWindowTxDone+0x16>
 80153d2:	2301      	movs	r3, #1
 80153d4:	e000      	b.n	80153d8 <xTCPWindowTxDone+0x18>
 80153d6:	2300      	movs	r3, #0
        }
 80153d8:	4618      	mov	r0, r3
 80153da:	370c      	adds	r7, #12
 80153dc:	46bd      	mov	sp, r7
 80153de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80153e2:	4770      	bx	lr

080153e4 <prvTCPWindowTxHasSpace>:
 *
 * @return True if the peer has space in it window to receive more data.
 */
        static BaseType_t prvTCPWindowTxHasSpace( TCPWindow_t const * pxWindow,
                                                  uint32_t ulWindowSize )
        {
 80153e4:	b580      	push	{r7, lr}
 80153e6:	b086      	sub	sp, #24
 80153e8:	af00      	add	r7, sp, #0
 80153ea:	6078      	str	r0, [r7, #4]
 80153ec:	6039      	str	r1, [r7, #0]
            uint32_t ulNettSize;

            /* This function will look if there is new transmission data.  It will
             * return true if there is data to be sent. */

            pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 80153ee:	687b      	ldr	r3, [r7, #4]
 80153f0:	3354      	adds	r3, #84	@ 0x54
 80153f2:	4618      	mov	r0, r3
 80153f4:	f7ff fbb5 	bl	8014b62 <xTCPWindowPeekHead>
 80153f8:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 80153fa:	68fb      	ldr	r3, [r7, #12]
 80153fc:	2b00      	cmp	r3, #0
 80153fe:	d102      	bne.n	8015406 <prvTCPWindowTxHasSpace+0x22>
            {
                xHasSpace = pdFALSE;
 8015400:	2300      	movs	r3, #0
 8015402:	613b      	str	r3, [r7, #16]
 8015404:	e02f      	b.n	8015466 <prvTCPWindowTxHasSpace+0x82>
            }
            else
            {
                /* How much data is outstanding, i.e. how much data has been sent
                 * but not yet acknowledged ? */
                if( pxWindow->tx.ulHighestSequenceNumber >= pxWindow->tx.ulCurrentSequenceNumber )
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801540a:	687b      	ldr	r3, [r7, #4]
 801540c:	6a1b      	ldr	r3, [r3, #32]
 801540e:	429a      	cmp	r2, r3
 8015410:	d306      	bcc.n	8015420 <prvTCPWindowTxHasSpace+0x3c>
                {
                    ulTxOutstanding = pxWindow->tx.ulHighestSequenceNumber - pxWindow->tx.ulCurrentSequenceNumber;
 8015412:	687b      	ldr	r3, [r7, #4]
 8015414:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015416:	687b      	ldr	r3, [r7, #4]
 8015418:	6a1b      	ldr	r3, [r3, #32]
 801541a:	1ad3      	subs	r3, r2, r3
 801541c:	617b      	str	r3, [r7, #20]
 801541e:	e001      	b.n	8015424 <prvTCPWindowTxHasSpace+0x40>
                }
                else
                {
                    ulTxOutstanding = 0U;
 8015420:	2300      	movs	r3, #0
 8015422:	617b      	str	r3, [r7, #20]
                }

                /* Subtract this from the peer's space. */
                ulNettSize = ulWindowSize - FreeRTOS_min_uint32( ulWindowSize, ulTxOutstanding );
 8015424:	6979      	ldr	r1, [r7, #20]
 8015426:	6838      	ldr	r0, [r7, #0]
 8015428:	f7f4 fd0c 	bl	8009e44 <FreeRTOS_min_uint32>
 801542c:	4602      	mov	r2, r0
 801542e:	683b      	ldr	r3, [r7, #0]
 8015430:	1a9b      	subs	r3, r3, r2
 8015432:	60bb      	str	r3, [r7, #8]

                /* See if the next segment may be sent. */
                if( ulNettSize >= ( uint32_t ) pxSegment->lDataLength )
 8015434:	68fb      	ldr	r3, [r7, #12]
 8015436:	689b      	ldr	r3, [r3, #8]
 8015438:	461a      	mov	r2, r3
 801543a:	68bb      	ldr	r3, [r7, #8]
 801543c:	4293      	cmp	r3, r2
 801543e:	d302      	bcc.n	8015446 <prvTCPWindowTxHasSpace+0x62>
                {
                    xHasSpace = pdTRUE;
 8015440:	2301      	movs	r3, #1
 8015442:	613b      	str	r3, [r7, #16]
 8015444:	e001      	b.n	801544a <prvTCPWindowTxHasSpace+0x66>
                }
                else
                {
                    xHasSpace = pdFALSE;
 8015446:	2300      	movs	r3, #0
 8015448:	613b      	str	r3, [r7, #16]

                /* If 'xHasSpace', it looks like the peer has at least space for 1
                 * more new segment of size MSS.  xSize.ulTxWindowLength is the self-imposed
                 * limitation of the transmission window (in case of many resends it
                 * may be decreased). */
                if( ( ulTxOutstanding != 0U ) &&
 801544a:	697b      	ldr	r3, [r7, #20]
 801544c:	2b00      	cmp	r3, #0
 801544e:	d00a      	beq.n	8015466 <prvTCPWindowTxHasSpace+0x82>
                    ( pxWindow->xSize.ulTxWindowLength <
 8015450:	687b      	ldr	r3, [r7, #4]
 8015452:	689a      	ldr	r2, [r3, #8]
                      ( ulTxOutstanding + ( ( uint32_t ) pxSegment->lDataLength ) ) ) )
 8015454:	68fb      	ldr	r3, [r7, #12]
 8015456:	689b      	ldr	r3, [r3, #8]
 8015458:	4619      	mov	r1, r3
 801545a:	697b      	ldr	r3, [r7, #20]
 801545c:	440b      	add	r3, r1
                if( ( ulTxOutstanding != 0U ) &&
 801545e:	429a      	cmp	r2, r3
 8015460:	d201      	bcs.n	8015466 <prvTCPWindowTxHasSpace+0x82>
                {
                    xHasSpace = pdFALSE;
 8015462:	2300      	movs	r3, #0
 8015464:	613b      	str	r3, [r7, #16]
                }
            }

            return xHasSpace;
 8015466:	693b      	ldr	r3, [r7, #16]
        }
 8015468:	4618      	mov	r0, r3
 801546a:	3718      	adds	r7, #24
 801546c:	46bd      	mov	sp, r7
 801546e:	bd80      	pop	{r7, pc}

08015470 <xTCPWindowTxHasData>:
 * @return pdTRUE if there is Tx data that can be sent, else pdFALSE.
 */
        BaseType_t xTCPWindowTxHasData( TCPWindow_t const * pxWindow,
                                        uint32_t ulWindowSize,
                                        TickType_t * pulDelay )
        {
 8015470:	b580      	push	{r7, lr}
 8015472:	b08a      	sub	sp, #40	@ 0x28
 8015474:	af00      	add	r7, sp, #0
 8015476:	60f8      	str	r0, [r7, #12]
 8015478:	60b9      	str	r1, [r7, #8]
 801547a:	607a      	str	r2, [r7, #4]
            TCPSegment_t const * pxSegment;
            BaseType_t xReturn;
            TickType_t ulAge, ulMaxAge;

            *pulDelay = 0U;
 801547c:	687b      	ldr	r3, [r7, #4]
 801547e:	2200      	movs	r2, #0
 8015480:	601a      	str	r2, [r3, #0]

            if( listLIST_IS_EMPTY( &pxWindow->xPriorityQueue ) == pdFALSE )
 8015482:	68fb      	ldr	r3, [r7, #12]
 8015484:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015486:	2b00      	cmp	r3, #0
 8015488:	d002      	beq.n	8015490 <xTCPWindowTxHasData+0x20>
            {
                /* No need to look at retransmissions or new transmission as long as
                 * there are priority segments.  *pulDelay equals zero, meaning it must
                 * be sent out immediately. */
                xReturn = pdTRUE;
 801548a:	2301      	movs	r3, #1
 801548c:	627b      	str	r3, [r7, #36]	@ 0x24
 801548e:	e050      	b.n	8015532 <xTCPWindowTxHasData+0xc2>
            }
            else
            {
                pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015490:	68fb      	ldr	r3, [r7, #12]
 8015492:	3368      	adds	r3, #104	@ 0x68
 8015494:	4618      	mov	r0, r3
 8015496:	f7ff fb64 	bl	8014b62 <xTCPWindowPeekHead>
 801549a:	6238      	str	r0, [r7, #32]

                if( pxSegment != NULL )
 801549c:	6a3b      	ldr	r3, [r7, #32]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d01f      	beq.n	80154e2 <xTCPWindowTxHasData+0x72>
                {
                    uint32_t ulSRTT = ( uint32_t ) pxWindow->lSRTT;
 80154a2:	68fb      	ldr	r3, [r7, #12]
 80154a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80154a6:	61fb      	str	r3, [r7, #28]

                    /* There is an outstanding segment, see if it is time to resend
                     * it. */
                    ulAge = ulTimerGetAge( &pxSegment->xTransmitTimer );
 80154a8:	6a3b      	ldr	r3, [r7, #32]
 80154aa:	3310      	adds	r3, #16
 80154ac:	4618      	mov	r0, r3
 80154ae:	f7ff f9e4 	bl	801487a <ulTimerGetAge>
 80154b2:	61b8      	str	r0, [r7, #24]

                    /* After a packet has been sent for the first time, it will wait
                     * '1 * ulSRTT' ms for an ACK. A second time it will wait '2 * ulSRTT' ms,
                     * each time doubling the time-out */
                    ulMaxAge = ( ( uint32_t ) 1U << pxSegment->u.bits.ucTransmitCount );
 80154b4:	6a3b      	ldr	r3, [r7, #32]
 80154b6:	7d1b      	ldrb	r3, [r3, #20]
 80154b8:	461a      	mov	r2, r3
 80154ba:	2301      	movs	r3, #1
 80154bc:	4093      	lsls	r3, r2
 80154be:	617b      	str	r3, [r7, #20]
                    ulMaxAge *= ulSRTT;
 80154c0:	697b      	ldr	r3, [r7, #20]
 80154c2:	69fa      	ldr	r2, [r7, #28]
 80154c4:	fb02 f303 	mul.w	r3, r2, r3
 80154c8:	617b      	str	r3, [r7, #20]

                    if( ulMaxAge > ulAge )
 80154ca:	697a      	ldr	r2, [r7, #20]
 80154cc:	69bb      	ldr	r3, [r7, #24]
 80154ce:	429a      	cmp	r2, r3
 80154d0:	d904      	bls.n	80154dc <xTCPWindowTxHasData+0x6c>
                    {
                        /* A segment must be sent after this amount of msecs */
                        *pulDelay = ulMaxAge - ulAge;
 80154d2:	697a      	ldr	r2, [r7, #20]
 80154d4:	69bb      	ldr	r3, [r7, #24]
 80154d6:	1ad2      	subs	r2, r2, r3
 80154d8:	687b      	ldr	r3, [r7, #4]
 80154da:	601a      	str	r2, [r3, #0]
                    }

                    xReturn = pdTRUE;
 80154dc:	2301      	movs	r3, #1
 80154de:	627b      	str	r3, [r7, #36]	@ 0x24
 80154e0:	e027      	b.n	8015532 <xTCPWindowTxHasData+0xc2>
                }
                else
                {
                    /* No priority segment, no outstanding data, see if there is new
                     * transmission data. */
                    pxSegment = xTCPWindowPeekHead( &pxWindow->xTxQueue );
 80154e2:	68fb      	ldr	r3, [r7, #12]
 80154e4:	3354      	adds	r3, #84	@ 0x54
 80154e6:	4618      	mov	r0, r3
 80154e8:	f7ff fb3b 	bl	8014b62 <xTCPWindowPeekHead>
 80154ec:	6238      	str	r0, [r7, #32]

                    /* See if it fits in the peer's reception window. */
                    if( pxSegment == NULL )
 80154ee:	6a3b      	ldr	r3, [r7, #32]
 80154f0:	2b00      	cmp	r3, #0
 80154f2:	d102      	bne.n	80154fa <xTCPWindowTxHasData+0x8a>
                    {
                        xReturn = pdFALSE;
 80154f4:	2300      	movs	r3, #0
 80154f6:	627b      	str	r3, [r7, #36]	@ 0x24
 80154f8:	e01b      	b.n	8015532 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 80154fa:	68b9      	ldr	r1, [r7, #8]
 80154fc:	68f8      	ldr	r0, [r7, #12]
 80154fe:	f7ff ff71 	bl	80153e4 <prvTCPWindowTxHasSpace>
 8015502:	4603      	mov	r3, r0
 8015504:	2b00      	cmp	r3, #0
 8015506:	d102      	bne.n	801550e <xTCPWindowTxHasData+0x9e>
                    {
                        /* Too many outstanding messages. */
                        xReturn = pdFALSE;
 8015508:	2300      	movs	r3, #0
 801550a:	627b      	str	r3, [r7, #36]	@ 0x24
 801550c:	e011      	b.n	8015532 <xTCPWindowTxHasData+0xc2>
                    }
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801550e:	68fb      	ldr	r3, [r7, #12]
 8015510:	781b      	ldrb	r3, [r3, #0]
 8015512:	f003 0302 	and.w	r3, r3, #2
 8015516:	b2db      	uxtb	r3, r3
 8015518:	2b00      	cmp	r3, #0
 801551a:	d008      	beq.n	801552e <xTCPWindowTxHasData+0xbe>
                             ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 801551c:	6a3b      	ldr	r3, [r7, #32]
 801551e:	689a      	ldr	r2, [r3, #8]
 8015520:	6a3b      	ldr	r3, [r7, #32]
 8015522:	685b      	ldr	r3, [r3, #4]
                    else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8015524:	429a      	cmp	r2, r3
 8015526:	da02      	bge.n	801552e <xTCPWindowTxHasData+0xbe>
                    {
                        /* 'bSendFullSize' is a special optimisation.  If true, the
                         * driver will only sent completely filled packets (of MSS
                         * bytes). */
                        xReturn = pdFALSE;
 8015528:	2300      	movs	r3, #0
 801552a:	627b      	str	r3, [r7, #36]	@ 0x24
 801552c:	e001      	b.n	8015532 <xTCPWindowTxHasData+0xc2>
                    }
                    else
                    {
                        xReturn = pdTRUE;
 801552e:	2301      	movs	r3, #1
 8015530:	627b      	str	r3, [r7, #36]	@ 0x24
                    }
                }
            }

            return xReturn;
 8015532:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
        }
 8015534:	4618      	mov	r0, r3
 8015536:	3728      	adds	r7, #40	@ 0x28
 8015538:	46bd      	mov	sp, r7
 801553a:	bd80      	pop	{r7, pc}

0801553c <pxTCPWindowTx_GetWaitQueue>:
 *        the normal TX queue of unsent data.  Message in the waiting queue will
 *        be sent when their timer has expired.
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 */
        static TCPSegment_t * pxTCPWindowTx_GetWaitQueue( const TCPWindow_t * pxWindow )
        {
 801553c:	b590      	push	{r4, r7, lr}
 801553e:	b087      	sub	sp, #28
 8015540:	af02      	add	r7, sp, #8
 8015542:	6078      	str	r0, [r7, #4]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xWaitQueue ) );
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	3368      	adds	r3, #104	@ 0x68
 8015548:	4618      	mov	r0, r3
 801554a:	f7ff fb0a 	bl	8014b62 <xTCPWindowPeekHead>
 801554e:	60f8      	str	r0, [r7, #12]

            if( pxSegment != NULL )
 8015550:	68fb      	ldr	r3, [r7, #12]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d043      	beq.n	80155de <pxTCPWindowTx_GetWaitQueue+0xa2>
            {
                /* Do check the timing. */
                uint32_t ulMaxTime;

                ulMaxTime = ( ( uint32_t ) 1U ) << pxSegment->u.bits.ucTransmitCount;
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	7d1b      	ldrb	r3, [r3, #20]
 801555a:	461a      	mov	r2, r3
 801555c:	2301      	movs	r3, #1
 801555e:	4093      	lsls	r3, r2
 8015560:	60bb      	str	r3, [r7, #8]
                ulMaxTime *= ( uint32_t ) pxWindow->lSRTT;
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015566:	461a      	mov	r2, r3
 8015568:	68bb      	ldr	r3, [r7, #8]
 801556a:	fb02 f303 	mul.w	r3, r2, r3
 801556e:	60bb      	str	r3, [r7, #8]

                if( ulTimerGetAge( &pxSegment->xTransmitTimer ) > ulMaxTime )
 8015570:	68fb      	ldr	r3, [r7, #12]
 8015572:	3310      	adds	r3, #16
 8015574:	4618      	mov	r0, r3
 8015576:	f7ff f980 	bl	801487a <ulTimerGetAge>
 801557a:	4602      	mov	r2, r0
 801557c:	68bb      	ldr	r3, [r7, #8]
 801557e:	4293      	cmp	r3, r2
 8015580:	d22b      	bcs.n	80155da <pxTCPWindowTx_GetWaitQueue+0x9e>
                {
                    /* A normal (non-fast) retransmission.  Move it from the
                     * head of the waiting queue. */
                    pxSegment = xTCPWindowGetHead( &( pxWindow->xWaitQueue ) );
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	3368      	adds	r3, #104	@ 0x68
 8015586:	4618      	mov	r0, r3
 8015588:	f7ff fad2 	bl	8014b30 <xTCPWindowGetHead>
 801558c:	60f8      	str	r0, [r7, #12]
                    pxSegment->u.bits.ucDupAckCount = ( uint8_t ) pdFALSE_UNSIGNED;
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	2200      	movs	r2, #0
 8015592:	755a      	strb	r2, [r3, #21]

                    /* Some detailed logging. */
                    if( ( xTCPWindowLoggingLevel != 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015594:	4b14      	ldr	r3, [pc, #80]	@ (80155e8 <pxTCPWindowTx_GetWaitQueue+0xac>)
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	2b00      	cmp	r3, #0
 801559a:	d020      	beq.n	80155de <pxTCPWindowTx_GetWaitQueue+0xa2>
 801559c:	687b      	ldr	r3, [r7, #4]
 801559e:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80155a2:	2b17      	cmp	r3, #23
 80155a4:	d01b      	beq.n	80155de <pxTCPWindowTx_GetWaitQueue+0xa2>
                    {
                        FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: WaitQueue %d bytes for sequence number %u (0x%X)\n",
 80155a6:	687b      	ldr	r3, [r7, #4]
 80155a8:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80155ac:	4618      	mov	r0, r3
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80155b4:	461c      	mov	r4, r3
 80155b6:	68fb      	ldr	r3, [r7, #12]
 80155b8:	6899      	ldr	r1, [r3, #8]
 80155ba:	68fb      	ldr	r3, [r7, #12]
 80155bc:	681a      	ldr	r2, [r3, #0]
 80155be:	687b      	ldr	r3, [r7, #4]
 80155c0:	69db      	ldr	r3, [r3, #28]
 80155c2:	1ad3      	subs	r3, r2, r3
 80155c4:	68fa      	ldr	r2, [r7, #12]
 80155c6:	6812      	ldr	r2, [r2, #0]
 80155c8:	9201      	str	r2, [sp, #4]
 80155ca:	9300      	str	r3, [sp, #0]
 80155cc:	460b      	mov	r3, r1
 80155ce:	4622      	mov	r2, r4
 80155d0:	4601      	mov	r1, r0
 80155d2:	4806      	ldr	r0, [pc, #24]	@ (80155ec <pxTCPWindowTx_GetWaitQueue+0xb0>)
 80155d4:	f00b fb54 	bl	8020c80 <lUDPLoggingPrintf>
 80155d8:	e001      	b.n	80155de <pxTCPWindowTx_GetWaitQueue+0xa2>
                                                 ( unsigned ) pxSegment->ulSequenceNumber ) );
                    }
                }
                else
                {
                    pxSegment = NULL;
 80155da:	2300      	movs	r3, #0
 80155dc:	60fb      	str	r3, [r7, #12]
                }
            }

            return pxSegment;
 80155de:	68fb      	ldr	r3, [r7, #12]
        }
 80155e0:	4618      	mov	r0, r3
 80155e2:	3714      	adds	r7, #20
 80155e4:	46bd      	mov	sp, r7
 80155e6:	bd90      	pop	{r4, r7, pc}
 80155e8:	20001348 	.word	0x20001348
 80155ec:	08025ab8 	.word	0x08025ab8

080155f0 <pxTCPWindowTx_GetTXQueue>:
 *                          reception window.
 * @return Either a segment that has to be sent, or NULL.
 */
        static TCPSegment_t * pxTCPWindowTx_GetTXQueue( TCPWindow_t * pxWindow,
                                                        uint32_t ulWindowSize )
        {
 80155f0:	b590      	push	{r4, r7, lr}
 80155f2:	b087      	sub	sp, #28
 80155f4:	af02      	add	r7, sp, #8
 80155f6:	6078      	str	r0, [r7, #4]
 80155f8:	6039      	str	r1, [r7, #0]
            TCPSegment_t * pxSegment = xTCPWindowPeekHead( &( pxWindow->xTxQueue ) );
 80155fa:	687b      	ldr	r3, [r7, #4]
 80155fc:	3354      	adds	r3, #84	@ 0x54
 80155fe:	4618      	mov	r0, r3
 8015600:	f7ff faaf 	bl	8014b62 <xTCPWindowPeekHead>
 8015604:	60f8      	str	r0, [r7, #12]

            if( pxSegment == NULL )
 8015606:	68fb      	ldr	r3, [r7, #12]
 8015608:	2b00      	cmp	r3, #0
 801560a:	d04f      	beq.n	80156ac <pxTCPWindowTx_GetTXQueue+0xbc>
            {
                /* No segments queued. */
            }
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 801560c:	687b      	ldr	r3, [r7, #4]
 801560e:	781b      	ldrb	r3, [r3, #0]
 8015610:	f003 0302 	and.w	r3, r3, #2
 8015614:	b2db      	uxtb	r3, r3
 8015616:	2b00      	cmp	r3, #0
 8015618:	d008      	beq.n	801562c <pxTCPWindowTx_GetTXQueue+0x3c>
                     ( pxSegment->lDataLength < pxSegment->lMaxLength ) )
 801561a:	68fb      	ldr	r3, [r7, #12]
 801561c:	689a      	ldr	r2, [r3, #8]
 801561e:	68fb      	ldr	r3, [r7, #12]
 8015620:	685b      	ldr	r3, [r3, #4]
            else if( ( pxWindow->u.bits.bSendFullSize != pdFALSE_UNSIGNED ) &&
 8015622:	429a      	cmp	r2, r3
 8015624:	da02      	bge.n	801562c <pxTCPWindowTx_GetTXQueue+0x3c>
            {
                /* A segment has been queued but the driver waits until it
                 * has a full size of MSS. */
                pxSegment = NULL;
 8015626:	2300      	movs	r3, #0
 8015628:	60fb      	str	r3, [r7, #12]
 801562a:	e03f      	b.n	80156ac <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else if( prvTCPWindowTxHasSpace( pxWindow, ulWindowSize ) == pdFALSE )
 801562c:	6839      	ldr	r1, [r7, #0]
 801562e:	6878      	ldr	r0, [r7, #4]
 8015630:	f7ff fed8 	bl	80153e4 <prvTCPWindowTxHasSpace>
 8015634:	4603      	mov	r3, r0
 8015636:	2b00      	cmp	r3, #0
 8015638:	d102      	bne.n	8015640 <pxTCPWindowTx_GetTXQueue+0x50>
            {
                /* Peer has no more space at this moment. */
                pxSegment = NULL;
 801563a:	2300      	movs	r3, #0
 801563c:	60fb      	str	r3, [r7, #12]
 801563e:	e035      	b.n	80156ac <pxTCPWindowTx_GetTXQueue+0xbc>
            }
            else
            {
                /* pxSegment was just obtained with a peek function,
                 * now remove it from of the Tx queue. */
                pxSegment = xTCPWindowGetHead( &( pxWindow->xTxQueue ) );
 8015640:	687b      	ldr	r3, [r7, #4]
 8015642:	3354      	adds	r3, #84	@ 0x54
 8015644:	4618      	mov	r0, r3
 8015646:	f7ff fa73 	bl	8014b30 <xTCPWindowGetHead>
 801564a:	60f8      	str	r0, [r7, #12]

                /* Don't let pxHeadSegment point to this segment any more,
                 * so no more data will be added. */
                if( pxWindow->pxHeadSegment == pxSegment )
 801564c:	687b      	ldr	r3, [r7, #4]
 801564e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8015650:	68fa      	ldr	r2, [r7, #12]
 8015652:	429a      	cmp	r2, r3
 8015654:	d102      	bne.n	801565c <pxTCPWindowTx_GetTXQueue+0x6c>
                {
                    pxWindow->pxHeadSegment = NULL;
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	2200      	movs	r2, #0
 801565a:	67da      	str	r2, [r3, #124]	@ 0x7c
                }

                /* pxWindow->tx.highest registers the highest sequence
                 * number in our transmission window. */
                pxWindow->tx.ulHighestSequenceNumber = pxSegment->ulSequenceNumber + ( ( uint32_t ) pxSegment->lDataLength );
 801565c:	68fb      	ldr	r3, [r7, #12]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	68fa      	ldr	r2, [r7, #12]
 8015662:	6892      	ldr	r2, [r2, #8]
 8015664:	441a      	add	r2, r3
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	629a      	str	r2, [r3, #40]	@ 0x28

                /* ...and more detailed logging */
                if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801566a:	4b13      	ldr	r3, [pc, #76]	@ (80156b8 <pxTCPWindowTx_GetTXQueue+0xc8>)
 801566c:	681b      	ldr	r3, [r3, #0]
 801566e:	2b01      	cmp	r3, #1
 8015670:	dd1c      	ble.n	80156ac <pxTCPWindowTx_GetTXQueue+0xbc>
 8015672:	687b      	ldr	r3, [r7, #4]
 8015674:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015678:	2b17      	cmp	r3, #23
 801567a:	d017      	beq.n	80156ac <pxTCPWindowTx_GetTXQueue+0xbc>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: XmitQueue %d bytes for sequence number %u (ws %u)\n",
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015682:	4618      	mov	r0, r3
 8015684:	687b      	ldr	r3, [r7, #4]
 8015686:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801568a:	461c      	mov	r4, r3
 801568c:	68fb      	ldr	r3, [r7, #12]
 801568e:	6899      	ldr	r1, [r3, #8]
 8015690:	68fb      	ldr	r3, [r7, #12]
 8015692:	681a      	ldr	r2, [r3, #0]
 8015694:	687b      	ldr	r3, [r7, #4]
 8015696:	69db      	ldr	r3, [r3, #28]
 8015698:	1ad3      	subs	r3, r2, r3
 801569a:	683a      	ldr	r2, [r7, #0]
 801569c:	9201      	str	r2, [sp, #4]
 801569e:	9300      	str	r3, [sp, #0]
 80156a0:	460b      	mov	r3, r1
 80156a2:	4622      	mov	r2, r4
 80156a4:	4601      	mov	r1, r0
 80156a6:	4805      	ldr	r0, [pc, #20]	@ (80156bc <pxTCPWindowTx_GetTXQueue+0xcc>)
 80156a8:	f00b faea 	bl	8020c80 <lUDPLoggingPrintf>
                                             ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                             ( unsigned ) ulWindowSize ) );
                }
            }

            return pxSegment;
 80156ac:	68fb      	ldr	r3, [r7, #12]
        }
 80156ae:	4618      	mov	r0, r3
 80156b0:	3714      	adds	r7, #20
 80156b2:	46bd      	mov	sp, r7
 80156b4:	bd90      	pop	{r4, r7, pc}
 80156b6:	bf00      	nop
 80156b8:	20001348 	.word	0x20001348
 80156bc:	08025b04 	.word	0x08025b04

080156c0 <ulTCPWindowTxGet>:
 * @return The amount of data in bytes that can be transmitted right now.
 */
        uint32_t ulTCPWindowTxGet( TCPWindow_t * pxWindow,
                                   uint32_t ulWindowSize,
                                   int32_t * plPosition )
        {
 80156c0:	b590      	push	{r4, r7, lr}
 80156c2:	b08b      	sub	sp, #44	@ 0x2c
 80156c4:	af02      	add	r7, sp, #8
 80156c6:	60f8      	str	r0, [r7, #12]
 80156c8:	60b9      	str	r1, [r7, #8]
 80156ca:	607a      	str	r2, [r7, #4]
            TCPSegment_t * pxSegment;
            uint32_t ulReturn = 0U;
 80156cc:	2300      	movs	r3, #0
 80156ce:	61bb      	str	r3, [r7, #24]

            /* Fetches data to be sent-out now.
             *
             * Priority messages: segments with a resend need no check current sliding
             * window size. */
            pxSegment = xTCPWindowGetHead( &( pxWindow->xPriorityQueue ) );
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	3340      	adds	r3, #64	@ 0x40
 80156d4:	4618      	mov	r0, r3
 80156d6:	f7ff fa2b 	bl	8014b30 <xTCPWindowGetHead>
 80156da:	61f8      	str	r0, [r7, #28]
            pxWindow->ulOurSequenceNumber = pxWindow->tx.ulHighestSequenceNumber;
 80156dc:	68fb      	ldr	r3, [r7, #12]
 80156de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80156e0:	68fb      	ldr	r3, [r7, #12]
 80156e2:	62da      	str	r2, [r3, #44]	@ 0x2c

            if( pxSegment != NULL )
 80156e4:	69fb      	ldr	r3, [r7, #28]
 80156e6:	2b00      	cmp	r3, #0
 80156e8:	d01c      	beq.n	8015724 <ulTCPWindowTxGet+0x64>
            {
                /* There is a priority segment. It doesn't need any checking for
                 * space or timeouts. */
                if( xTCPWindowLoggingLevel != 0 )
 80156ea:	4b41      	ldr	r3, [pc, #260]	@ (80157f0 <ulTCPWindowTxGet+0x130>)
 80156ec:	681b      	ldr	r3, [r3, #0]
 80156ee:	2b00      	cmp	r3, #0
 80156f0:	d024      	beq.n	801573c <ulTCPWindowTxGet+0x7c>
                {
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u,%u]: PrioQueue %d bytes for sequence number %u (ws %u)\n",
 80156f2:	68fb      	ldr	r3, [r7, #12]
 80156f4:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80156f8:	4618      	mov	r0, r3
 80156fa:	68fb      	ldr	r3, [r7, #12]
 80156fc:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015700:	461c      	mov	r4, r3
 8015702:	69fb      	ldr	r3, [r7, #28]
 8015704:	6899      	ldr	r1, [r3, #8]
 8015706:	69fb      	ldr	r3, [r7, #28]
 8015708:	681a      	ldr	r2, [r3, #0]
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	69db      	ldr	r3, [r3, #28]
 801570e:	1ad3      	subs	r3, r2, r3
 8015710:	68ba      	ldr	r2, [r7, #8]
 8015712:	9201      	str	r2, [sp, #4]
 8015714:	9300      	str	r3, [sp, #0]
 8015716:	460b      	mov	r3, r1
 8015718:	4622      	mov	r2, r4
 801571a:	4601      	mov	r1, r0
 801571c:	4835      	ldr	r0, [pc, #212]	@ (80157f4 <ulTCPWindowTxGet+0x134>)
 801571e:	f00b faaf 	bl	8020c80 <lUDPLoggingPrintf>
 8015722:	e00b      	b.n	801573c <ulTCPWindowTxGet+0x7c>
            else
            {
                /* Waiting messages: outstanding messages with a running timer
                 * neither check peer's reception window size because these packets
                 * have been sent earlier. */
                pxSegment = pxTCPWindowTx_GetWaitQueue( pxWindow );
 8015724:	68f8      	ldr	r0, [r7, #12]
 8015726:	f7ff ff09 	bl	801553c <pxTCPWindowTx_GetWaitQueue>
 801572a:	61f8      	str	r0, [r7, #28]

                if( pxSegment == NULL )
 801572c:	69fb      	ldr	r3, [r7, #28]
 801572e:	2b00      	cmp	r3, #0
 8015730:	d104      	bne.n	801573c <ulTCPWindowTxGet+0x7c>
                {
                    /* New messages: sent-out for the first time.  Check current
                     * sliding window size of peer. */
                    pxSegment = pxTCPWindowTx_GetTXQueue( pxWindow, ulWindowSize );
 8015732:	68b9      	ldr	r1, [r7, #8]
 8015734:	68f8      	ldr	r0, [r7, #12]
 8015736:	f7ff ff5b 	bl	80155f0 <pxTCPWindowTx_GetTXQueue>
 801573a:	61f8      	str	r0, [r7, #28]
                }
            }

            /* See if it has already been determined to return 0. */
            if( pxSegment != NULL )
 801573c:	69fb      	ldr	r3, [r7, #28]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d051      	beq.n	80157e6 <ulTCPWindowTxGet+0x126>
            {
                configASSERT( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) == NULL );
 8015742:	69fb      	ldr	r3, [r7, #28]
 8015744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015746:	2b00      	cmp	r3, #0
 8015748:	d004      	beq.n	8015754 <ulTCPWindowTxGet+0x94>
 801574a:	f240 7136 	movw	r1, #1846	@ 0x736
 801574e:	482a      	ldr	r0, [pc, #168]	@ (80157f8 <ulTCPWindowTxGet+0x138>)
 8015750:	f7eb fe8e 	bl	8001470 <vAssertCalled>

                /* Now that the segment will be transmitted, add it to the tail of
                 * the waiting queue. */
                vListInsertFifo( &pxWindow->xWaitQueue, &pxSegment->xQueueItem );
 8015754:	68fb      	ldr	r3, [r7, #12]
 8015756:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801575a:	69fb      	ldr	r3, [r7, #28]
 801575c:	3318      	adds	r3, #24
 801575e:	4619      	mov	r1, r3
 8015760:	4610      	mov	r0, r2
 8015762:	f7ff f86d 	bl	8014840 <vListInsertFifo>

                /* And mark it as outstanding. */
                pxSegment->u.bits.bOutstanding = pdTRUE_UNSIGNED;
 8015766:	69fa      	ldr	r2, [r7, #28]
 8015768:	7d93      	ldrb	r3, [r2, #22]
 801576a:	f043 0301 	orr.w	r3, r3, #1
 801576e:	7593      	strb	r3, [r2, #22]

                /* Administer the transmit count, needed for fast
                 * retransmissions. */
                ( pxSegment->u.bits.ucTransmitCount )++;
 8015770:	69fb      	ldr	r3, [r7, #28]
 8015772:	7d1b      	ldrb	r3, [r3, #20]
 8015774:	3301      	adds	r3, #1
 8015776:	b2da      	uxtb	r2, r3
 8015778:	69fb      	ldr	r3, [r7, #28]
 801577a:	751a      	strb	r2, [r3, #20]

                /* If there have been several retransmissions (4), decrease the
                 * size of the transmission window to at most 2 times MSS. */
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 801577c:	69fb      	ldr	r3, [r7, #28]
 801577e:	7d1b      	ldrb	r3, [r3, #20]
 8015780:	2b04      	cmp	r3, #4
 8015782:	d120      	bne.n	80157c6 <ulTCPWindowTxGet+0x106>
                    ( pxWindow->xSize.ulTxWindowLength > ( 2U * ( ( uint32_t ) pxWindow->usMSS ) ) ) )
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	689a      	ldr	r2, [r3, #8]
 8015788:	68fb      	ldr	r3, [r7, #12]
 801578a:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801578e:	005b      	lsls	r3, r3, #1
                if( ( pxSegment->u.bits.ucTransmitCount == MAX_TRANSMIT_COUNT_USING_LARGE_WINDOW ) &&
 8015790:	429a      	cmp	r2, r3
 8015792:	d918      	bls.n	80157c6 <ulTCPWindowTxGet+0x106>
                {
                    uint16_t usMSS2 = ( uint16_t ) ( pxWindow->usMSS * 2U );
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	f8b3 30bc 	ldrh.w	r3, [r3, #188]	@ 0xbc
 801579a:	005b      	lsls	r3, r3, #1
 801579c:	82fb      	strh	r3, [r7, #22]
                    FreeRTOS_debug_printf( ( "ulTCPWindowTxGet[%u - %u]: Change Tx window: %u -> %u\n",
 801579e:	68fb      	ldr	r3, [r7, #12]
 80157a0:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 80157a4:	4619      	mov	r1, r3
 80157a6:	68fb      	ldr	r3, [r7, #12]
 80157a8:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 80157ac:	4618      	mov	r0, r3
 80157ae:	68fb      	ldr	r3, [r7, #12]
 80157b0:	689a      	ldr	r2, [r3, #8]
 80157b2:	8afb      	ldrh	r3, [r7, #22]
 80157b4:	9300      	str	r3, [sp, #0]
 80157b6:	4613      	mov	r3, r2
 80157b8:	4602      	mov	r2, r0
 80157ba:	4810      	ldr	r0, [pc, #64]	@ (80157fc <ulTCPWindowTxGet+0x13c>)
 80157bc:	f00b fa60 	bl	8020c80 <lUDPLoggingPrintf>
                                             pxWindow->usPeerPortNumber,
                                             pxWindow->usOurPortNumber,
                                             ( unsigned ) pxWindow->xSize.ulTxWindowLength,
                                             usMSS2 ) );
                    pxWindow->xSize.ulTxWindowLength = usMSS2;
 80157c0:	8afa      	ldrh	r2, [r7, #22]
 80157c2:	68fb      	ldr	r3, [r7, #12]
 80157c4:	609a      	str	r2, [r3, #8]
                }

                /* Clear the transmit timer. */
                vTCPTimerSet( &( pxSegment->xTransmitTimer ) );
 80157c6:	69fb      	ldr	r3, [r7, #28]
 80157c8:	3310      	adds	r3, #16
 80157ca:	4618      	mov	r0, r3
 80157cc:	f7ff f848 	bl	8014860 <vTCPTimerSet>

                pxWindow->ulOurSequenceNumber = pxSegment->ulSequenceNumber;
 80157d0:	69fb      	ldr	r3, [r7, #28]
 80157d2:	681a      	ldr	r2, [r3, #0]
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	62da      	str	r2, [r3, #44]	@ 0x2c

                /* Inform the caller where to find the data within the queue. */
                *plPosition = pxSegment->lStreamPos;
 80157d8:	69fb      	ldr	r3, [r7, #28]
 80157da:	68da      	ldr	r2, [r3, #12]
 80157dc:	687b      	ldr	r3, [r7, #4]
 80157de:	601a      	str	r2, [r3, #0]

                /* And return the length of the data segment */
                ulReturn = ( uint32_t ) pxSegment->lDataLength;
 80157e0:	69fb      	ldr	r3, [r7, #28]
 80157e2:	689b      	ldr	r3, [r3, #8]
 80157e4:	61bb      	str	r3, [r7, #24]
            }

            return ulReturn;
 80157e6:	69bb      	ldr	r3, [r7, #24]
        }
 80157e8:	4618      	mov	r0, r3
 80157ea:	3724      	adds	r7, #36	@ 0x24
 80157ec:	46bd      	mov	sp, r7
 80157ee:	bd90      	pop	{r4, r7, pc}
 80157f0:	20001348 	.word	0x20001348
 80157f4:	08025b50 	.word	0x08025b50
 80157f8:	080257ec 	.word	0x080257ec
 80157fc:	08025b9c 	.word	0x08025b9c

08015800 <prvTCPWindowTxCheckAck_CalcSRTT>:
 * @param[in] pxWindow The descriptor of the TCP sliding windows.
 * @param[in] pxSegment The segment that was just acknowledged.
 */
        static void prvTCPWindowTxCheckAck_CalcSRTT( TCPWindow_t * pxWindow,
                                                     const TCPSegment_t * pxSegment )
        {
 8015800:	b580      	push	{r7, lr}
 8015802:	b084      	sub	sp, #16
 8015804:	af00      	add	r7, sp, #0
 8015806:	6078      	str	r0, [r7, #4]
 8015808:	6039      	str	r1, [r7, #0]
            int32_t mS = ( int32_t ) ulTimerGetAge( &( pxSegment->xTransmitTimer ) );
 801580a:	683b      	ldr	r3, [r7, #0]
 801580c:	3310      	adds	r3, #16
 801580e:	4618      	mov	r0, r3
 8015810:	f7ff f833 	bl	801487a <ulTimerGetAge>
 8015814:	4603      	mov	r3, r0
 8015816:	60fb      	str	r3, [r7, #12]

            if( pxWindow->lSRTT >= mS )
 8015818:	687b      	ldr	r3, [r7, #4]
 801581a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801581c:	68fa      	ldr	r2, [r7, #12]
 801581e:	429a      	cmp	r2, r3
 8015820:	dc0e      	bgt.n	8015840 <prvTCPWindowTxCheckAck_CalcSRTT+0x40>
            {
                /* RTT becomes smaller: adapt slowly. */
                pxWindow->lSRTT = ( ( winSRTT_DECREMENT_NEW * mS ) + ( winSRTT_DECREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_DECREMENT_NEW + winSRTT_DECREMENT_CURRENT );
 8015822:	687b      	ldr	r3, [r7, #4]
 8015824:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015826:	4613      	mov	r3, r2
 8015828:	00db      	lsls	r3, r3, #3
 801582a:	1a9a      	subs	r2, r3, r2
 801582c:	68fb      	ldr	r3, [r7, #12]
 801582e:	4413      	add	r3, r2
 8015830:	2b00      	cmp	r3, #0
 8015832:	da00      	bge.n	8015836 <prvTCPWindowTxCheckAck_CalcSRTT+0x36>
 8015834:	3307      	adds	r3, #7
 8015836:	10db      	asrs	r3, r3, #3
 8015838:	461a      	mov	r2, r3
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	639a      	str	r2, [r3, #56]	@ 0x38
 801583e:	e00d      	b.n	801585c <prvTCPWindowTxCheckAck_CalcSRTT+0x5c>
            }
            else
            {
                /* RTT becomes larger: adapt quicker */
                pxWindow->lSRTT = ( ( winSRTT_INCREMENT_NEW * mS ) + ( winSRTT_INCREMENT_CURRENT * pxWindow->lSRTT ) ) / ( winSRTT_INCREMENT_NEW + winSRTT_INCREMENT_CURRENT );
 8015840:	687b      	ldr	r3, [r7, #4]
 8015842:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015844:	4613      	mov	r3, r2
 8015846:	005b      	lsls	r3, r3, #1
 8015848:	441a      	add	r2, r3
 801584a:	68fb      	ldr	r3, [r7, #12]
 801584c:	4413      	add	r3, r2
 801584e:	2b00      	cmp	r3, #0
 8015850:	da00      	bge.n	8015854 <prvTCPWindowTxCheckAck_CalcSRTT+0x54>
 8015852:	3303      	adds	r3, #3
 8015854:	109b      	asrs	r3, r3, #2
 8015856:	461a      	mov	r2, r3
 8015858:	687b      	ldr	r3, [r7, #4]
 801585a:	639a      	str	r2, [r3, #56]	@ 0x38
            }

            /* Cap to the minimum of 50ms. */
            if( pxWindow->lSRTT < winSRTT_CAP_mS )
 801585c:	687b      	ldr	r3, [r7, #4]
 801585e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015860:	2b31      	cmp	r3, #49	@ 0x31
 8015862:	dc02      	bgt.n	801586a <prvTCPWindowTxCheckAck_CalcSRTT+0x6a>
            {
                pxWindow->lSRTT = winSRTT_CAP_mS;
 8015864:	687b      	ldr	r3, [r7, #4]
 8015866:	2232      	movs	r2, #50	@ 0x32
 8015868:	639a      	str	r2, [r3, #56]	@ 0x38
            }
        }
 801586a:	bf00      	nop
 801586c:	3710      	adds	r7, #16
 801586e:	46bd      	mov	sp, r7
 8015870:	bd80      	pop	{r7, pc}
	...

08015874 <prvTCPWindowTxCheckAck>:
 * @return number of bytes that the tail of txStream may be advanced.
 */
        static uint32_t prvTCPWindowTxCheckAck( TCPWindow_t * pxWindow,
                                                uint32_t ulFirst,
                                                uint32_t ulLast )
        {
 8015874:	b5b0      	push	{r4, r5, r7, lr}
 8015876:	b090      	sub	sp, #64	@ 0x40
 8015878:	af04      	add	r7, sp, #16
 801587a:	60f8      	str	r0, [r7, #12]
 801587c:	60b9      	str	r1, [r7, #8]
 801587e:	607a      	str	r2, [r7, #4]
            uint32_t ulBytesConfirmed = 0U;
 8015880:	2300      	movs	r3, #0
 8015882:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uint32_t ulSequenceNumber = ulFirst;
 8015884:	68bb      	ldr	r3, [r7, #8]
 8015886:	62bb      	str	r3, [r7, #40]	@ 0x28
            const ListItem_t * pxIterator;

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            const ListItem_t * pxEnd = ( ( const ListItem_t * ) &( pxWindow->xTxSegments.xListEnd ) );
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	3398      	adds	r3, #152	@ 0x98
 801588c:	61fb      	str	r3, [r7, #28]
             * RTO is Retransmit timeout
             *
             * A Smoothed RTT will increase quickly, but it is conservative when
             * becoming smaller. */

            pxIterator = listGET_NEXT( pxEnd );
 801588e:	69fb      	ldr	r3, [r7, #28]
 8015890:	685b      	ldr	r3, [r3, #4]
 8015892:	627b      	str	r3, [r7, #36]	@ 0x24

            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 8015894:	e0a6      	b.n	80159e4 <prvTCPWindowTxCheckAck+0x170>
            {
                xDoUnlink = pdFALSE;
 8015896:	2300      	movs	r3, #0
 8015898:	623b      	str	r3, [r7, #32]
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 801589a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801589c:	68db      	ldr	r3, [r3, #12]
 801589e:	61bb      	str	r3, [r7, #24]

                /* Move to the next item because the current item might get
                 * removed. */
                pxIterator = ( const ListItem_t * ) listGET_NEXT( pxIterator );
 80158a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80158a2:	685b      	ldr	r3, [r3, #4]
 80158a4:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Continue if this segment does not fall within the ACK'd range. */
                if( xSequenceGreaterThan( ulSequenceNumber, pxSegment->ulSequenceNumber ) != pdFALSE )
 80158a6:	69bb      	ldr	r3, [r7, #24]
 80158a8:	681b      	ldr	r3, [r3, #0]
 80158aa:	4619      	mov	r1, r3
 80158ac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80158ae:	f7fe ff9c 	bl	80147ea <xSequenceGreaterThan>
 80158b2:	4603      	mov	r3, r0
 80158b4:	2b00      	cmp	r3, #0
 80158b6:	f040 8094 	bne.w	80159e2 <prvTCPWindowTxCheckAck+0x16e>
                {
                    continue;
                }

                /* Is it ready? */
                if( ulSequenceNumber != pxSegment->ulSequenceNumber )
 80158ba:	69bb      	ldr	r3, [r7, #24]
 80158bc:	681b      	ldr	r3, [r3, #0]
 80158be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80158c0:	429a      	cmp	r2, r3
 80158c2:	f040 809c 	bne.w	80159fe <prvTCPWindowTxCheckAck+0x18a>
                {
                    /* coverity[break_stmt] : Break statement terminating the loop */
                    break;
                }

                ulDataLength = ( uint32_t ) pxSegment->lDataLength;
 80158c6:	69bb      	ldr	r3, [r7, #24]
 80158c8:	689b      	ldr	r3, [r3, #8]
 80158ca:	617b      	str	r3, [r7, #20]

                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 80158cc:	69bb      	ldr	r3, [r7, #24]
 80158ce:	7d9b      	ldrb	r3, [r3, #22]
 80158d0:	f003 0302 	and.w	r3, r3, #2
 80158d4:	b2db      	uxtb	r3, r3
 80158d6:	2b00      	cmp	r3, #0
 80158d8:	d144      	bne.n	8015964 <prvTCPWindowTxCheckAck+0xf0>
                {
                    if( xSequenceGreaterThan( pxSegment->ulSequenceNumber + ( uint32_t ) ulDataLength, ulLast ) != pdFALSE )
 80158da:	69bb      	ldr	r3, [r7, #24]
 80158dc:	681a      	ldr	r2, [r3, #0]
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	4413      	add	r3, r2
 80158e2:	6879      	ldr	r1, [r7, #4]
 80158e4:	4618      	mov	r0, r3
 80158e6:	f7fe ff80 	bl	80147ea <xSequenceGreaterThan>
 80158ea:	4603      	mov	r3, r0
 80158ec:	2b00      	cmp	r3, #0
 80158ee:	d023      	beq.n	8015938 <prvTCPWindowTxCheckAck+0xc4>
                         *
                         * AAAAAAA BBBBBBB << acked
                         * aaaaaaa aaaa    << sent */
                        #if ( ipconfigHAS_DEBUG_PRINTF != 0 )
                        {
                            uint32_t ulFirstSeq = pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber;
 80158f0:	69bb      	ldr	r3, [r7, #24]
 80158f2:	681a      	ldr	r2, [r3, #0]
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	69db      	ldr	r3, [r3, #28]
 80158f8:	1ad3      	subs	r3, r2, r3
 80158fa:	613b      	str	r3, [r7, #16]
                            FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck[%u.%u]: %u - %u Partial sequence number %u - %u\n",
 80158fc:	68fb      	ldr	r3, [r7, #12]
 80158fe:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015902:	461c      	mov	r4, r3
 8015904:	68fb      	ldr	r3, [r7, #12]
 8015906:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801590a:	461d      	mov	r5, r3
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	69db      	ldr	r3, [r3, #28]
 8015910:	693a      	ldr	r2, [r7, #16]
 8015912:	1ad0      	subs	r0, r2, r3
 8015914:	68fb      	ldr	r3, [r7, #12]
 8015916:	69db      	ldr	r3, [r3, #28]
 8015918:	687a      	ldr	r2, [r7, #4]
 801591a:	1ad3      	subs	r3, r2, r3
 801591c:	6939      	ldr	r1, [r7, #16]
 801591e:	697a      	ldr	r2, [r7, #20]
 8015920:	440a      	add	r2, r1
 8015922:	9202      	str	r2, [sp, #8]
 8015924:	693a      	ldr	r2, [r7, #16]
 8015926:	9201      	str	r2, [sp, #4]
 8015928:	9300      	str	r3, [sp, #0]
 801592a:	4603      	mov	r3, r0
 801592c:	462a      	mov	r2, r5
 801592e:	4621      	mov	r1, r4
 8015930:	4836      	ldr	r0, [pc, #216]	@ (8015a0c <prvTCPWindowTxCheckAck+0x198>)
 8015932:	f00b f9a5 	bl	8020c80 <lUDPLoggingPrintf>
                                                     ( unsigned ) ulFirstSeq,
                                                     ( unsigned ) ( ulFirstSeq + ulDataLength ) ) );
                        }
                        #endif /* ( ipconfigHAS_DEBUG_PRINTF != 0 ) */

                        break;
 8015936:	e063      	b.n	8015a00 <prvTCPWindowTxCheckAck+0x18c>
                    }

                    /* This segment is fully ACK'd, set the flag. */
                    pxSegment->u.bits.bAcked = pdTRUE;
 8015938:	69ba      	ldr	r2, [r7, #24]
 801593a:	7d93      	ldrb	r3, [r2, #22]
 801593c:	f043 0302 	orr.w	r3, r3, #2
 8015940:	7593      	strb	r3, [r2, #22]

                    /* Calculate the RTT only if the segment was sent-out for the
                     * first time and if this is the last ACK'd segment in a range. */
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8015942:	69bb      	ldr	r3, [r7, #24]
 8015944:	7d1b      	ldrb	r3, [r3, #20]
 8015946:	2b01      	cmp	r3, #1
 8015948:	d10a      	bne.n	8015960 <prvTCPWindowTxCheckAck+0xec>
                        ( ( pxSegment->ulSequenceNumber + ulDataLength ) == ulLast ) )
 801594a:	69bb      	ldr	r3, [r7, #24]
 801594c:	681a      	ldr	r2, [r3, #0]
 801594e:	697b      	ldr	r3, [r7, #20]
 8015950:	4413      	add	r3, r2
                    if( ( pxSegment->u.bits.ucTransmitCount == 1U ) &&
 8015952:	687a      	ldr	r2, [r7, #4]
 8015954:	429a      	cmp	r2, r3
 8015956:	d103      	bne.n	8015960 <prvTCPWindowTxCheckAck+0xec>
                    {
                        prvTCPWindowTxCheckAck_CalcSRTT( pxWindow, pxSegment );
 8015958:	69b9      	ldr	r1, [r7, #24]
 801595a:	68f8      	ldr	r0, [r7, #12]
 801595c:	f7ff ff50 	bl	8015800 <prvTCPWindowTxCheckAck_CalcSRTT>
                    }

                    /* Unlink it from the 3 queues, but do not destroy it (yet). */
                    xDoUnlink = pdTRUE;
 8015960:	2301      	movs	r3, #1
 8015962:	623b      	str	r3, [r7, #32]
                }

                /* pxSegment->u.bits.bAcked is now true.  Is it located at the left
                 * side of the transmission queue?  If so, it may be freed. */
                if( ulSequenceNumber == pxWindow->tx.ulCurrentSequenceNumber )
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	6a1b      	ldr	r3, [r3, #32]
 8015968:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801596a:	429a      	cmp	r2, r3
 801596c:	d128      	bne.n	80159c0 <prvTCPWindowTxCheckAck+0x14c>
                {
                    if( ( xTCPWindowLoggingLevel >= 2 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 801596e:	4b28      	ldr	r3, [pc, #160]	@ (8015a10 <prvTCPWindowTxCheckAck+0x19c>)
 8015970:	681b      	ldr	r3, [r3, #0]
 8015972:	2b01      	cmp	r3, #1
 8015974:	dd15      	ble.n	80159a2 <prvTCPWindowTxCheckAck+0x12e>
 8015976:	68fb      	ldr	r3, [r7, #12]
 8015978:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 801597c:	2b17      	cmp	r3, #23
 801597e:	d010      	beq.n	80159a2 <prvTCPWindowTxCheckAck+0x12e>
                    {
                        FreeRTOS_debug_printf( ( "prvTCPWindowTxCheckAck: %u - %u Ready sequence number %u\n",
 8015980:	68fb      	ldr	r3, [r7, #12]
 8015982:	69db      	ldr	r3, [r3, #28]
 8015984:	68ba      	ldr	r2, [r7, #8]
 8015986:	1ad1      	subs	r1, r2, r3
 8015988:	68fb      	ldr	r3, [r7, #12]
 801598a:	69db      	ldr	r3, [r3, #28]
 801598c:	687a      	ldr	r2, [r7, #4]
 801598e:	1ad0      	subs	r0, r2, r3
 8015990:	69bb      	ldr	r3, [r7, #24]
 8015992:	681a      	ldr	r2, [r3, #0]
 8015994:	68fb      	ldr	r3, [r7, #12]
 8015996:	69db      	ldr	r3, [r3, #28]
 8015998:	1ad3      	subs	r3, r2, r3
 801599a:	4602      	mov	r2, r0
 801599c:	481d      	ldr	r0, [pc, #116]	@ (8015a14 <prvTCPWindowTxCheckAck+0x1a0>)
 801599e:	f00b f96f 	bl	8020c80 <lUDPLoggingPrintf>
                                                 ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                                 ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
                    }

                    /* Increase the left-hand value of the transmission window. */
                    pxWindow->tx.ulCurrentSequenceNumber += ulDataLength;
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	6a1a      	ldr	r2, [r3, #32]
 80159a6:	697b      	ldr	r3, [r7, #20]
 80159a8:	441a      	add	r2, r3
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	621a      	str	r2, [r3, #32]

                    /* This function will return the number of bytes that the tail
                     * of txStream may be advanced. */
                    ulBytesConfirmed += ulDataLength;
 80159ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80159b0:	697b      	ldr	r3, [r7, #20]
 80159b2:	4413      	add	r3, r2
 80159b4:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    /* All segments below tx.ulCurrentSequenceNumber may be freed. */
                    vTCPWindowFree( pxSegment );
 80159b6:	69b8      	ldr	r0, [r7, #24]
 80159b8:	f7ff f8ec 	bl	8014b94 <vTCPWindowFree>

                    /* No need to unlink it any more. */
                    xDoUnlink = pdFALSE;
 80159bc:	2300      	movs	r3, #0
 80159be:	623b      	str	r3, [r7, #32]
                }

                if( ( xDoUnlink != pdFALSE ) && ( listLIST_ITEM_CONTAINER( &( pxSegment->xQueueItem ) ) != NULL ) )
 80159c0:	6a3b      	ldr	r3, [r7, #32]
 80159c2:	2b00      	cmp	r3, #0
 80159c4:	d008      	beq.n	80159d8 <prvTCPWindowTxCheckAck+0x164>
 80159c6:	69bb      	ldr	r3, [r7, #24]
 80159c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159ca:	2b00      	cmp	r3, #0
 80159cc:	d004      	beq.n	80159d8 <prvTCPWindowTxCheckAck+0x164>
                {
                    /* Remove item from its queues. */
                    ( void ) uxListRemove( &pxSegment->xQueueItem );
 80159ce:	69bb      	ldr	r3, [r7, #24]
 80159d0:	3318      	adds	r3, #24
 80159d2:	4618      	mov	r0, r3
 80159d4:	f7ec fff4 	bl	80029c0 <uxListRemove>
                }

                ulSequenceNumber += ulDataLength;
 80159d8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80159da:	697b      	ldr	r3, [r7, #20]
 80159dc:	4413      	add	r3, r2
 80159de:	62bb      	str	r3, [r7, #40]	@ 0x28
 80159e0:	e000      	b.n	80159e4 <prvTCPWindowTxCheckAck+0x170>
                    continue;
 80159e2:	bf00      	nop
            while( ( pxIterator != pxEnd ) && ( xSequenceLessThan( ulSequenceNumber, ulLast ) != 0 ) )
 80159e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80159e6:	69fb      	ldr	r3, [r7, #28]
 80159e8:	429a      	cmp	r2, r3
 80159ea:	d009      	beq.n	8015a00 <prvTCPWindowTxCheckAck+0x18c>
 80159ec:	6879      	ldr	r1, [r7, #4]
 80159ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80159f0:	f7fe fee5 	bl	80147be <xSequenceLessThan>
 80159f4:	4603      	mov	r3, r0
 80159f6:	2b00      	cmp	r3, #0
 80159f8:	f47f af4d 	bne.w	8015896 <prvTCPWindowTxCheckAck+0x22>
 80159fc:	e000      	b.n	8015a00 <prvTCPWindowTxCheckAck+0x18c>
                    break;
 80159fe:	bf00      	nop
            }

            return ulBytesConfirmed;
 8015a00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
        }
 8015a02:	4618      	mov	r0, r3
 8015a04:	3730      	adds	r7, #48	@ 0x30
 8015a06:	46bd      	mov	sp, r7
 8015a08:	bdb0      	pop	{r4, r5, r7, pc}
 8015a0a:	bf00      	nop
 8015a0c:	08025bd4 	.word	0x08025bd4
 8015a10:	20001348 	.word	0x20001348
 8015a14:	08025c1c 	.word	0x08025c1c

08015a18 <prvTCPWindowFastRetransmit>:
 *
 * @return The number of segments that need a fast retransmission.
 */
        static uint32_t prvTCPWindowFastRetransmit( TCPWindow_t * pxWindow,
                                                    uint32_t ulFirst )
        {
 8015a18:	b580      	push	{r7, lr}
 8015a1a:	b086      	sub	sp, #24
 8015a1c:	af00      	add	r7, sp, #0
 8015a1e:	6078      	str	r0, [r7, #4]
 8015a20:	6039      	str	r1, [r7, #0]
            const ListItem_t * pxIterator;
            const ListItem_t * pxEnd;
            TCPSegment_t * pxSegment;
            uint32_t ulCount = 0U;
 8015a22:	2300      	movs	r3, #0
 8015a24:	613b      	str	r3, [r7, #16]
             * xWaitQueue to find a possible condition for a FAST retransmission. */

            /* MISRA Ref 11.3.1 [Misaligned access] */
/* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEnd = ( ( const ListItem_t * ) &( pxWindow->xWaitQueue.xListEnd ) );
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	3370      	adds	r3, #112	@ 0x70
 8015a2a:	60fb      	str	r3, [r7, #12]

            pxIterator = listGET_NEXT( pxEnd );
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	685b      	ldr	r3, [r3, #4]
 8015a30:	617b      	str	r3, [r7, #20]

            while( pxIterator != pxEnd )
 8015a32:	e049      	b.n	8015ac8 <prvTCPWindowFastRetransmit+0xb0>
            {
                /* Get the owner, which is a TCP segment. */
                pxSegment = ( ( TCPSegment_t * ) listGET_LIST_ITEM_OWNER( pxIterator ) );
 8015a34:	697b      	ldr	r3, [r7, #20]
 8015a36:	68db      	ldr	r3, [r3, #12]
 8015a38:	60bb      	str	r3, [r7, #8]

                /* Hop to the next item before the current gets unlinked. */
                pxIterator = listGET_NEXT( pxIterator );
 8015a3a:	697b      	ldr	r3, [r7, #20]
 8015a3c:	685b      	ldr	r3, [r3, #4]
 8015a3e:	617b      	str	r3, [r7, #20]

                /* Fast retransmission:
                 * When 3 packets with a higher sequence number have been acknowledged
                 * by the peer, it is very unlikely a current packet will ever arrive.
                 * It will be retransmitted far before the RTO. */
                if( pxSegment->u.bits.bAcked == pdFALSE_UNSIGNED )
 8015a40:	68bb      	ldr	r3, [r7, #8]
 8015a42:	7d9b      	ldrb	r3, [r3, #22]
 8015a44:	f003 0302 	and.w	r3, r3, #2
 8015a48:	b2db      	uxtb	r3, r3
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d13c      	bne.n	8015ac8 <prvTCPWindowFastRetransmit+0xb0>
                {
                    if( xSequenceLessThan( pxSegment->ulSequenceNumber, ulFirst ) != pdFALSE )
 8015a4e:	68bb      	ldr	r3, [r7, #8]
 8015a50:	681b      	ldr	r3, [r3, #0]
 8015a52:	6839      	ldr	r1, [r7, #0]
 8015a54:	4618      	mov	r0, r3
 8015a56:	f7fe feb2 	bl	80147be <xSequenceLessThan>
 8015a5a:	4603      	mov	r3, r0
 8015a5c:	2b00      	cmp	r3, #0
 8015a5e:	d033      	beq.n	8015ac8 <prvTCPWindowFastRetransmit+0xb0>
                    {
                        pxSegment->u.bits.ucDupAckCount++;
 8015a60:	68bb      	ldr	r3, [r7, #8]
 8015a62:	7d5b      	ldrb	r3, [r3, #21]
 8015a64:	3301      	adds	r3, #1
 8015a66:	b2da      	uxtb	r2, r3
 8015a68:	68bb      	ldr	r3, [r7, #8]
 8015a6a:	755a      	strb	r2, [r3, #21]

                        if( pxSegment->u.bits.ucDupAckCount == DUPLICATE_ACKS_BEFORE_FAST_RETRANSMIT )
 8015a6c:	68bb      	ldr	r3, [r7, #8]
 8015a6e:	7d5b      	ldrb	r3, [r3, #21]
 8015a70:	2b03      	cmp	r3, #3
 8015a72:	d129      	bne.n	8015ac8 <prvTCPWindowFastRetransmit+0xb0>
                        {
                            pxSegment->u.bits.ucTransmitCount = ( uint8_t ) pdFALSE;
 8015a74:	68bb      	ldr	r3, [r7, #8]
 8015a76:	2200      	movs	r2, #0
 8015a78:	751a      	strb	r2, [r3, #20]

                            /* Not clearing 'ucDupAckCount' yet as more SACK's might come in
                             * which might lead to a second fast rexmit. */
                            if( ( xTCPWindowLoggingLevel >= 0 ) && ( ipconfigTCP_MAY_LOG_PORT( pxWindow->usOurPortNumber ) ) )
 8015a7a:	4b18      	ldr	r3, [pc, #96]	@ (8015adc <prvTCPWindowFastRetransmit+0xc4>)
 8015a7c:	681b      	ldr	r3, [r3, #0]
 8015a7e:	2b00      	cmp	r3, #0
 8015a80:	db11      	blt.n	8015aa6 <prvTCPWindowFastRetransmit+0x8e>
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015a88:	2b17      	cmp	r3, #23
 8015a8a:	d00c      	beq.n	8015aa6 <prvTCPWindowFastRetransmit+0x8e>
                            {
                                FreeRTOS_debug_printf( ( "prvTCPWindowFastRetransmit: Requeue sequence number %u < %u\n",
 8015a8c:	68bb      	ldr	r3, [r7, #8]
 8015a8e:	681a      	ldr	r2, [r3, #0]
 8015a90:	687b      	ldr	r3, [r7, #4]
 8015a92:	69db      	ldr	r3, [r3, #28]
 8015a94:	1ad1      	subs	r1, r2, r3
 8015a96:	687b      	ldr	r3, [r7, #4]
 8015a98:	69db      	ldr	r3, [r3, #28]
 8015a9a:	683a      	ldr	r2, [r7, #0]
 8015a9c:	1ad3      	subs	r3, r2, r3
 8015a9e:	461a      	mov	r2, r3
 8015aa0:	480f      	ldr	r0, [pc, #60]	@ (8015ae0 <prvTCPWindowFastRetransmit+0xc8>)
 8015aa2:	f00b f8ed 	bl	8020c80 <lUDPLoggingPrintf>
                                                         ( unsigned ) ( pxSegment->ulSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ),
                                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ) ) );
                            }

                            /* Remove it from xWaitQueue. */
                            ( void ) uxListRemove( &pxSegment->xQueueItem );
 8015aa6:	68bb      	ldr	r3, [r7, #8]
 8015aa8:	3318      	adds	r3, #24
 8015aaa:	4618      	mov	r0, r3
 8015aac:	f7ec ff88 	bl	80029c0 <uxListRemove>

                            /* Add this segment to the priority queue so it gets
                             * retransmitted immediately. */
                            vListInsertFifo( &( pxWindow->xPriorityQueue ), &( pxSegment->xQueueItem ) );
 8015ab0:	687b      	ldr	r3, [r7, #4]
 8015ab2:	f103 0240 	add.w	r2, r3, #64	@ 0x40
 8015ab6:	68bb      	ldr	r3, [r7, #8]
 8015ab8:	3318      	adds	r3, #24
 8015aba:	4619      	mov	r1, r3
 8015abc:	4610      	mov	r0, r2
 8015abe:	f7fe febf 	bl	8014840 <vListInsertFifo>
                            ulCount++;
 8015ac2:	693b      	ldr	r3, [r7, #16]
 8015ac4:	3301      	adds	r3, #1
 8015ac6:	613b      	str	r3, [r7, #16]
            while( pxIterator != pxEnd )
 8015ac8:	697a      	ldr	r2, [r7, #20]
 8015aca:	68fb      	ldr	r3, [r7, #12]
 8015acc:	429a      	cmp	r2, r3
 8015ace:	d1b1      	bne.n	8015a34 <prvTCPWindowFastRetransmit+0x1c>
                        }
                    }
                }
            }

            return ulCount;
 8015ad0:	693b      	ldr	r3, [r7, #16]
        }
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	3718      	adds	r7, #24
 8015ad6:	46bd      	mov	sp, r7
 8015ad8:	bd80      	pop	{r7, pc}
 8015ada:	bf00      	nop
 8015adc:	20001348 	.word	0x20001348
 8015ae0:	08025c58 	.word	0x08025c58

08015ae4 <ulTCPWindowTxAck>:
 *
 * @return The location where the packet should be added.
 */
        uint32_t ulTCPWindowTxAck( TCPWindow_t * pxWindow,
                                   uint32_t ulSequenceNumber )
        {
 8015ae4:	b580      	push	{r7, lr}
 8015ae6:	b084      	sub	sp, #16
 8015ae8:	af00      	add	r7, sp, #0
 8015aea:	6078      	str	r0, [r7, #4]
 8015aec:	6039      	str	r1, [r7, #0]
            uint32_t ulFirstSequence;
            uint32_t ulReturn;

            /* Receive a normal ACK. */

            ulFirstSequence = pxWindow->tx.ulCurrentSequenceNumber;
 8015aee:	687b      	ldr	r3, [r7, #4]
 8015af0:	6a1b      	ldr	r3, [r3, #32]
 8015af2:	60bb      	str	r3, [r7, #8]

            if( xSequenceLessThanOrEqual( ulSequenceNumber, ulFirstSequence ) != pdFALSE )
 8015af4:	68b9      	ldr	r1, [r7, #8]
 8015af6:	6838      	ldr	r0, [r7, #0]
 8015af8:	f7fe fe4c 	bl	8014794 <xSequenceLessThanOrEqual>
 8015afc:	4603      	mov	r3, r0
 8015afe:	2b00      	cmp	r3, #0
 8015b00:	d002      	beq.n	8015b08 <ulTCPWindowTxAck+0x24>
            {
                ulReturn = 0U;
 8015b02:	2300      	movs	r3, #0
 8015b04:	60fb      	str	r3, [r7, #12]
 8015b06:	e005      	b.n	8015b14 <ulTCPWindowTxAck+0x30>
            }
            else
            {
                ulReturn = prvTCPWindowTxCheckAck( pxWindow, ulFirstSequence, ulSequenceNumber );
 8015b08:	683a      	ldr	r2, [r7, #0]
 8015b0a:	68b9      	ldr	r1, [r7, #8]
 8015b0c:	6878      	ldr	r0, [r7, #4]
 8015b0e:	f7ff feb1 	bl	8015874 <prvTCPWindowTxCheckAck>
 8015b12:	60f8      	str	r0, [r7, #12]
            }

            return ulReturn;
 8015b14:	68fb      	ldr	r3, [r7, #12]
        }
 8015b16:	4618      	mov	r0, r3
 8015b18:	3710      	adds	r7, #16
 8015b1a:	46bd      	mov	sp, r7
 8015b1c:	bd80      	pop	{r7, pc}
	...

08015b20 <ulTCPWindowTxSack>:
 *         the head position.
 */
        uint32_t ulTCPWindowTxSack( TCPWindow_t * pxWindow,
                                    uint32_t ulFirst,
                                    uint32_t ulLast )
        {
 8015b20:	b5b0      	push	{r4, r5, r7, lr}
 8015b22:	b088      	sub	sp, #32
 8015b24:	af02      	add	r7, sp, #8
 8015b26:	60f8      	str	r0, [r7, #12]
 8015b28:	60b9      	str	r1, [r7, #8]
 8015b2a:	607a      	str	r2, [r7, #4]
            uint32_t ulAckCount;
            uint32_t ulCurrentSequenceNumber = pxWindow->tx.ulCurrentSequenceNumber;
 8015b2c:	68fb      	ldr	r3, [r7, #12]
 8015b2e:	6a1b      	ldr	r3, [r3, #32]
 8015b30:	617b      	str	r3, [r7, #20]

            /* Receive a SACK option. */
            ulAckCount = prvTCPWindowTxCheckAck( pxWindow, ulFirst, ulLast );
 8015b32:	687a      	ldr	r2, [r7, #4]
 8015b34:	68b9      	ldr	r1, [r7, #8]
 8015b36:	68f8      	ldr	r0, [r7, #12]
 8015b38:	f7ff fe9c 	bl	8015874 <prvTCPWindowTxCheckAck>
 8015b3c:	6138      	str	r0, [r7, #16]
            ( void ) prvTCPWindowFastRetransmit( pxWindow, ulFirst );
 8015b3e:	68b9      	ldr	r1, [r7, #8]
 8015b40:	68f8      	ldr	r0, [r7, #12]
 8015b42:	f7ff ff69 	bl	8015a18 <prvTCPWindowFastRetransmit>

            if( ( xTCPWindowLoggingLevel >= 1 ) && ( xSequenceGreaterThan( ulFirst, ulCurrentSequenceNumber ) != pdFALSE ) )
 8015b46:	4b16      	ldr	r3, [pc, #88]	@ (8015ba0 <ulTCPWindowTxSack+0x80>)
 8015b48:	681b      	ldr	r3, [r3, #0]
 8015b4a:	2b00      	cmp	r3, #0
 8015b4c:	dd23      	ble.n	8015b96 <ulTCPWindowTxSack+0x76>
 8015b4e:	6979      	ldr	r1, [r7, #20]
 8015b50:	68b8      	ldr	r0, [r7, #8]
 8015b52:	f7fe fe4a 	bl	80147ea <xSequenceGreaterThan>
 8015b56:	4603      	mov	r3, r0
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d01c      	beq.n	8015b96 <ulTCPWindowTxSack+0x76>
            {
                FreeRTOS_debug_printf( ( "ulTCPWindowTxSack[%u,%u]: from %u to %u (ack = %u)\n",
 8015b5c:	68fb      	ldr	r3, [r7, #12]
 8015b5e:	f8b3 30ba 	ldrh.w	r3, [r3, #186]	@ 0xba
 8015b62:	461c      	mov	r4, r3
 8015b64:	68fb      	ldr	r3, [r7, #12]
 8015b66:	f8b3 30b8 	ldrh.w	r3, [r3, #184]	@ 0xb8
 8015b6a:	461d      	mov	r5, r3
 8015b6c:	68fb      	ldr	r3, [r7, #12]
 8015b6e:	69db      	ldr	r3, [r3, #28]
 8015b70:	68ba      	ldr	r2, [r7, #8]
 8015b72:	1ad0      	subs	r0, r2, r3
 8015b74:	68fb      	ldr	r3, [r7, #12]
 8015b76:	69db      	ldr	r3, [r3, #28]
 8015b78:	687a      	ldr	r2, [r7, #4]
 8015b7a:	1ad3      	subs	r3, r2, r3
 8015b7c:	68fa      	ldr	r2, [r7, #12]
 8015b7e:	6a11      	ldr	r1, [r2, #32]
 8015b80:	68fa      	ldr	r2, [r7, #12]
 8015b82:	69d2      	ldr	r2, [r2, #28]
 8015b84:	1a8a      	subs	r2, r1, r2
 8015b86:	9201      	str	r2, [sp, #4]
 8015b88:	9300      	str	r3, [sp, #0]
 8015b8a:	4603      	mov	r3, r0
 8015b8c:	462a      	mov	r2, r5
 8015b8e:	4621      	mov	r1, r4
 8015b90:	4804      	ldr	r0, [pc, #16]	@ (8015ba4 <ulTCPWindowTxSack+0x84>)
 8015b92:	f00b f875 	bl	8020c80 <lUDPLoggingPrintf>
                                         ( unsigned ) ( ulFirst - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( ulLast - pxWindow->tx.ulFirstSequenceNumber ),
                                         ( unsigned ) ( pxWindow->tx.ulCurrentSequenceNumber - pxWindow->tx.ulFirstSequenceNumber ) ) );
            }

            return ulAckCount;
 8015b96:	693b      	ldr	r3, [r7, #16]
        }
 8015b98:	4618      	mov	r0, r3
 8015b9a:	3718      	adds	r7, #24
 8015b9c:	46bd      	mov	sp, r7
 8015b9e:	bdb0      	pop	{r4, r5, r7, pc}
 8015ba0:	20001348 	.word	0x20001348
 8015ba4:	08025c98 	.word	0x08025c98

08015ba8 <vProcessGeneratedUDPPacket>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8015ba8:	b580      	push	{r7, lr}
 8015baa:	b084      	sub	sp, #16
 8015bac:	af00      	add	r7, sp, #0
 8015bae:	6078      	str	r0, [r7, #4]
    const UDPPacket_t * pxUDPPacket;

    if( pxNetworkBuffer != NULL )
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	2b00      	cmp	r3, #0
 8015bb4:	d014      	beq.n	8015be0 <vProcessGeneratedUDPPacket+0x38>
        /* Map the UDP packet onto the start of the frame. */

        /* MISRA Ref 11.3.1 [Misaligned access] */
        /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
        /* coverity[misra_c_2012_rule_11_3_violation] */
        pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015bb6:	687b      	ldr	r3, [r7, #4]
 8015bb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015bba:	60fb      	str	r3, [r7, #12]

        switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8015bbc:	68fb      	ldr	r3, [r7, #12]
 8015bbe:	899b      	ldrh	r3, [r3, #12]
 8015bc0:	b29b      	uxth	r3, r3
 8015bc2:	2b08      	cmp	r3, #8
 8015bc4:	d004      	beq.n	8015bd0 <vProcessGeneratedUDPPacket+0x28>
 8015bc6:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8015bca:	4293      	cmp	r3, r2
 8015bcc:	d004      	beq.n	8015bd8 <vProcessGeneratedUDPPacket+0x30>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
                    break;
            #endif
            default:
                /* do nothing, coverity happy */
                break;
 8015bce:	e007      	b.n	8015be0 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv4( pxNetworkBuffer );
 8015bd0:	6878      	ldr	r0, [r7, #4]
 8015bd2:	f000 f845 	bl	8015c60 <vProcessGeneratedUDPPacket_IPv4>
                    break;
 8015bd6:	e003      	b.n	8015be0 <vProcessGeneratedUDPPacket+0x38>
                    vProcessGeneratedUDPPacket_IPv6( pxNetworkBuffer );
 8015bd8:	6878      	ldr	r0, [r7, #4]
 8015bda:	f000 fae3 	bl	80161a4 <vProcessGeneratedUDPPacket_IPv6>
                    break;
 8015bde:	bf00      	nop
        }
    }
}
 8015be0:	bf00      	nop
 8015be2:	3710      	adds	r7, #16
 8015be4:	46bd      	mov	sp, r7
 8015be6:	bd80      	pop	{r7, pc}

08015be8 <xProcessReceivedUDPPacket>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                      uint16_t usPort,
                                      BaseType_t * pxIsWaitingForARPResolution )
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b086      	sub	sp, #24
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	60f8      	str	r0, [r7, #12]
 8015bf0:	460b      	mov	r3, r1
 8015bf2:	607a      	str	r2, [r7, #4]
 8015bf4:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdFAIL;
 8015bf6:	2300      	movs	r3, #0
 8015bf8:	617b      	str	r3, [r7, #20]
    const UDPPacket_t * pxUDPPacket;

    configASSERT( pxNetworkBuffer != NULL );
 8015bfa:	68fb      	ldr	r3, [r7, #12]
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d103      	bne.n	8015c08 <xProcessReceivedUDPPacket+0x20>
 8015c00:	2178      	movs	r1, #120	@ 0x78
 8015c02:	4816      	ldr	r0, [pc, #88]	@ (8015c5c <xProcessReceivedUDPPacket+0x74>)
 8015c04:	f7eb fc34 	bl	8001470 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8015c08:	68fb      	ldr	r3, [r7, #12]
 8015c0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c0c:	2b00      	cmp	r3, #0
 8015c0e:	d103      	bne.n	8015c18 <xProcessReceivedUDPPacket+0x30>
 8015c10:	2179      	movs	r1, #121	@ 0x79
 8015c12:	4812      	ldr	r0, [pc, #72]	@ (8015c5c <xProcessReceivedUDPPacket+0x74>)
 8015c14:	f7eb fc2c 	bl	8001470 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( const UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015c18:	68fb      	ldr	r3, [r7, #12]
 8015c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c1c:	613b      	str	r3, [r7, #16]

    switch( pxUDPPacket->xEthernetHeader.usFrameType )
 8015c1e:	693b      	ldr	r3, [r7, #16]
 8015c20:	899b      	ldrh	r3, [r3, #12]
 8015c22:	b29b      	uxth	r3, r3
 8015c24:	2b08      	cmp	r3, #8
 8015c26:	d004      	beq.n	8015c32 <xProcessReceivedUDPPacket+0x4a>
 8015c28:	f64d 5286 	movw	r2, #56710	@ 0xdd86
 8015c2c:	4293      	cmp	r3, r2
 8015c2e:	d008      	beq.n	8015c42 <xProcessReceivedUDPPacket+0x5a>
                                                          usPort, pxIsWaitingForARPResolution );
                break;
        #endif
        default:
            /* do nothing, coverity happy */
            break;
 8015c30:	e00f      	b.n	8015c52 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv4( pxNetworkBuffer,
 8015c32:	897b      	ldrh	r3, [r7, #10]
 8015c34:	687a      	ldr	r2, [r7, #4]
 8015c36:	4619      	mov	r1, r3
 8015c38:	68f8      	ldr	r0, [r7, #12]
 8015c3a:	f000 f92f 	bl	8015e9c <xProcessReceivedUDPPacket_IPv4>
 8015c3e:	6178      	str	r0, [r7, #20]
                break;
 8015c40:	e007      	b.n	8015c52 <xProcessReceivedUDPPacket+0x6a>
                xReturn = xProcessReceivedUDPPacket_IPv6( pxNetworkBuffer,
 8015c42:	897b      	ldrh	r3, [r7, #10]
 8015c44:	687a      	ldr	r2, [r7, #4]
 8015c46:	4619      	mov	r1, r3
 8015c48:	68f8      	ldr	r0, [r7, #12]
 8015c4a:	f000 fbdd 	bl	8016408 <xProcessReceivedUDPPacket_IPv6>
 8015c4e:	6178      	str	r0, [r7, #20]
                break;
 8015c50:	bf00      	nop
    }

    return xReturn;
 8015c52:	697b      	ldr	r3, [r7, #20]
}
 8015c54:	4618      	mov	r0, r3
 8015c56:	3718      	adds	r7, #24
 8015c58:	46bd      	mov	sp, r7
 8015c5a:	bd80      	pop	{r7, pc}
 8015c5c:	08025ccc 	.word	0x08025ccc

08015c60 <vProcessGeneratedUDPPacket_IPv4>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv4( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 8015c60:	b580      	push	{r7, lr}
 8015c62:	b08e      	sub	sp, #56	@ 0x38
 8015c64:	af00      	add	r7, sp, #0
 8015c66:	6078      	str	r0, [r7, #4]
    UDPPacket_t * pxUDPPacket;
    IPHeader_t * pxIPHeader;
    eARPLookupResult_t eReturned;
    uint32_t ulIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	695b      	ldr	r3, [r3, #20]
 8015c6c:	60fb      	str	r3, [r7, #12]
    NetworkEndPoint_t * pxEndPoint = pxNetworkBuffer->pxEndPoint;
 8015c6e:	687b      	ldr	r3, [r7, #4]
 8015c70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015c72:	60bb      	str	r3, [r7, #8]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015c74:	687b      	ldr	r3, [r7, #4]
 8015c76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015c78:	62bb      	str	r3, [r7, #40]	@ 0x28

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8015c7a:	687b      	ldr	r3, [r7, #4]
 8015c7c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d104      	bne.n	8015c8c <vProcessGeneratedUDPPacket_IPv4+0x2c>
        {
            uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( ICMPPacket_t );
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c86:	3b2a      	subs	r3, #42	@ 0x2a
 8015c88:	633b      	str	r3, [r7, #48]	@ 0x30
 8015c8a:	e003      	b.n	8015c94 <vProcessGeneratedUDPPacket_IPv4+0x34>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_t );
 8015c8c:	687b      	ldr	r3, [r7, #4]
 8015c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c90:	3b2a      	subs	r3, #42	@ 0x2a
 8015c92:	633b      	str	r3, [r7, #48]	@ 0x30
    }

    /* Determine the ARP cache status for the requested IP address. */
    eReturned = eARPGetCacheEntry( &( ulIPAddress ), &( pxUDPPacket->xEthernetHeader.xDestinationAddress ), &( pxEndPoint ) );
 8015c94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015c96:	f107 0208 	add.w	r2, r7, #8
 8015c9a:	f107 030c 	add.w	r3, r7, #12
 8015c9e:	4618      	mov	r0, r3
 8015ca0:	f7f0 fd68 	bl	8006774 <eARPGetCacheEntry>
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37

    if( pxNetworkBuffer->pxEndPoint == NULL )
 8015caa:	687b      	ldr	r3, [r7, #4]
 8015cac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015cae:	2b00      	cmp	r3, #0
 8015cb0:	d102      	bne.n	8015cb8 <vProcessGeneratedUDPPacket_IPv4+0x58>
    {
        pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8015cb2:	68ba      	ldr	r2, [r7, #8]
 8015cb4:	687b      	ldr	r3, [r7, #4]
 8015cb6:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    if( eReturned != eCantSendPacket )
 8015cb8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015cbc:	2b02      	cmp	r3, #2
 8015cbe:	f000 80a0 	beq.w	8015e02 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
    {
        if( eReturned == eARPCacheHit )
 8015cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015cc6:	2b01      	cmp	r3, #1
 8015cc8:	d176      	bne.n	8015db8 <vProcessGeneratedUDPPacket_IPv4+0x158>
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* Create short cuts to the data within the packet. */
            pxIPHeader = &( pxUDPPacket->xIPHeader );
 8015cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015ccc:	330e      	adds	r3, #14
 8015cce:	627b      	str	r3, [r7, #36]	@ 0x24

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort != ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015cd4:	2b00      	cmp	r3, #0
 8015cd6:	d025      	beq.n	8015d24 <vProcessGeneratedUDPPacket_IPv4+0xc4>
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader;

                pxUDPHeader = &( pxUDPPacket->xUDPHeader );
 8015cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015cda:	3322      	adds	r3, #34	@ 0x22
 8015cdc:	623b      	str	r3, [r7, #32]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 8015cde:	687b      	ldr	r3, [r7, #4]
 8015ce0:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 8015ce2:	6a3b      	ldr	r3, [r7, #32]
 8015ce4:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 8015ce6:	687b      	ldr	r3, [r7, #4]
 8015ce8:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 8015cea:	6a3b      	ldr	r3, [r7, #32]
 8015cec:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( UDPHeader_t ) );
 8015cee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cf0:	b29b      	uxth	r3, r3
 8015cf2:	3308      	adds	r3, #8
 8015cf4:	b29a      	uxth	r2, r3
 8015cf6:	6a3b      	ldr	r3, [r7, #32]
 8015cf8:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 8015cfa:	6a3b      	ldr	r3, [r7, #32]
 8015cfc:	889b      	ldrh	r3, [r3, #4]
 8015cfe:	b29b      	uxth	r3, r3
 8015d00:	021b      	lsls	r3, r3, #8
 8015d02:	b21a      	sxth	r2, r3
 8015d04:	6a3b      	ldr	r3, [r7, #32]
 8015d06:	889b      	ldrh	r3, [r3, #4]
 8015d08:	b29b      	uxth	r3, r3
 8015d0a:	0a1b      	lsrs	r3, r3, #8
 8015d0c:	b29b      	uxth	r3, r3
 8015d0e:	b21b      	sxth	r3, r3
 8015d10:	4313      	orrs	r3, r2
 8015d12:	b21b      	sxth	r3, r3
 8015d14:	b29a      	uxth	r2, r3
 8015d16:	6a3b      	ldr	r3, [r7, #32]
 8015d18:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 8015d1a:	6a3b      	ldr	r3, [r7, #32]
 8015d1c:	2200      	movs	r2, #0
 8015d1e:	719a      	strb	r2, [r3, #6]
 8015d20:	2200      	movs	r2, #0
 8015d22:	71da      	strb	r2, [r3, #7]
            /*
             * Use helper variables for memcpy() to remain
             * compliant with MISRA Rule 21.15.  These should be
             * optimized away.
             */
            pvCopySource = ucDefaultPartUDPPacketHeader;
 8015d24:	4b5b      	ldr	r3, [pc, #364]	@ (8015e94 <vProcessGeneratedUDPPacket_IPv4+0x234>)
 8015d26:	61fb      	str	r3, [r7, #28]
            /* The Ethernet source address is at offset 6. */
            pvCopyDest = &pxNetworkBuffer->pucEthernetBuffer[ sizeof( MACAddress_t ) ];
 8015d28:	687b      	ldr	r3, [r7, #4]
 8015d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015d2c:	3306      	adds	r3, #6
 8015d2e:	61bb      	str	r3, [r7, #24]
            ( void ) memcpy( pvCopyDest, pvCopySource, sizeof( ucDefaultPartUDPPacketHeader ) );
 8015d30:	2218      	movs	r2, #24
 8015d32:	69f9      	ldr	r1, [r7, #28]
 8015d34:	69b8      	ldr	r0, [r7, #24]
 8015d36:	f00b f9bf 	bl	80210b8 <memcpy>

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d109      	bne.n	8015d56 <vProcessGeneratedUDPPacket_IPv4+0xf6>
                {
                    pxIPHeader->ucProtocol = ipPROTOCOL_ICMP;
 8015d42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d44:	2201      	movs	r2, #1
 8015d46:	725a      	strb	r2, [r3, #9]
                    pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( ICMPHeader_t ) );
 8015d48:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d4a:	b29b      	uxth	r3, r3
 8015d4c:	331c      	adds	r3, #28
 8015d4e:	b29a      	uxth	r2, r3
 8015d50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d52:	805a      	strh	r2, [r3, #2]
 8015d54:	e005      	b.n	8015d62 <vProcessGeneratedUDPPacket_IPv4+0x102>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader->usLength = ( uint16_t ) ( uxPayloadSize + sizeof( IPHeader_t ) + sizeof( UDPHeader_t ) );
 8015d56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015d58:	b29b      	uxth	r3, r3
 8015d5a:	331c      	adds	r3, #28
 8015d5c:	b29a      	uxth	r2, r3
 8015d5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d60:	805a      	strh	r2, [r3, #2]
            }

            pxIPHeader->usLength = FreeRTOS_htons( pxIPHeader->usLength );
 8015d62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d64:	885b      	ldrh	r3, [r3, #2]
 8015d66:	b29b      	uxth	r3, r3
 8015d68:	021b      	lsls	r3, r3, #8
 8015d6a:	b21a      	sxth	r2, r3
 8015d6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d6e:	885b      	ldrh	r3, [r3, #2]
 8015d70:	b29b      	uxth	r3, r3
 8015d72:	0a1b      	lsrs	r3, r3, #8
 8015d74:	b29b      	uxth	r3, r3
 8015d76:	b21b      	sxth	r3, r3
 8015d78:	4313      	orrs	r3, r2
 8015d7a:	b21b      	sxth	r3, r3
 8015d7c:	b29a      	uxth	r2, r3
 8015d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d80:	805a      	strh	r2, [r3, #2]
            pxIPHeader->ulDestinationIPAddress = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8015d82:	687b      	ldr	r3, [r7, #4]
 8015d84:	695a      	ldr	r2, [r3, #20]
 8015d86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d88:	611a      	str	r2, [r3, #16]

            if( pxNetworkBuffer->pxEndPoint != NULL )
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015d8e:	2b00      	cmp	r3, #0
 8015d90:	d004      	beq.n	8015d9c <vProcessGeneratedUDPPacket_IPv4+0x13c>
            {
                pxIPHeader->ulSourceIPAddress = pxNetworkBuffer->pxEndPoint->ipv4_settings.ulIPAddress;
 8015d92:	687b      	ldr	r3, [r7, #4]
 8015d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015d96:	681a      	ldr	r2, [r3, #0]
 8015d98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d9a:	60da      	str	r2, [r3, #12]
             * The header was never memset to zero, so set both the fragment offset and fragmentation flags in one go.
             */
            #if ( ipconfigFORCE_IP_DONT_FRAGMENT != 0 )
                pxIPHeader->usFragmentOffset = ipFRAGMENT_FLAGS_DONT_FRAGMENT;
            #else
                pxIPHeader->usFragmentOffset = 0U;
 8015d9c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d9e:	2200      	movs	r2, #0
 8015da0:	719a      	strb	r2, [r3, #6]
 8015da2:	2200      	movs	r2, #0
 8015da4:	71da      	strb	r2, [r3, #7]

            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* LLMNR messages are typically used on a LAN and they're
                 * not supposed to cross routers */
                if( pxNetworkBuffer->xIPAddress.ulIP_IPv4 == ipLLMNR_IP_ADDR )
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	695b      	ldr	r3, [r3, #20]
 8015daa:	4a3b      	ldr	r2, [pc, #236]	@ (8015e98 <vProcessGeneratedUDPPacket_IPv4+0x238>)
 8015dac:	4293      	cmp	r3, r2
 8015dae:	d128      	bne.n	8015e02 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                {
                    pxIPHeader->ucTimeToLive = 0x01;
 8015db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015db2:	2201      	movs	r2, #1
 8015db4:	721a      	strb	r2, [r3, #8]
 8015db6:	e024      	b.n	8015e02 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
                    pxUDPPacket->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 8015db8:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015dbc:	2b00      	cmp	r3, #0
 8015dbe:	d11d      	bne.n	8015dfc <vProcessGeneratedUDPPacket_IPv4+0x19c>
        {
            /* Add an entry to the ARP table with a null hardware address.
             * This allows the ARP timer to know that an ARP reply is
             * outstanding, and perform retransmissions if necessary. */
            vARPRefreshCacheEntry( NULL, ulIPAddress, NULL );
 8015dc0:	68fb      	ldr	r3, [r7, #12]
 8015dc2:	2200      	movs	r2, #0
 8015dc4:	4619      	mov	r1, r3
 8015dc6:	2000      	movs	r0, #0
 8015dc8:	f7f0 fbc0 	bl	800654c <vARPRefreshCacheEntry>
            iptracePACKET_DROPPED_TO_GENERATE_ARP( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            /* 'ulIPAddress' might have become the address of the Gateway.
             * Find the route again. */

            pxNetworkBuffer->pxEndPoint = FreeRTOS_FindEndPointOnNetMask( pxNetworkBuffer->xIPAddress.ulIP_IPv4, 11 );
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	695b      	ldr	r3, [r3, #20]
 8015dd0:	210b      	movs	r1, #11
 8015dd2:	4618      	mov	r0, r3
 8015dd4:	f7f6 ff58 	bl	800cc88 <FreeRTOS_FindEndPointOnNetMask>
 8015dd8:	4602      	mov	r2, r0
 8015dda:	687b      	ldr	r3, [r7, #4]
 8015ddc:	631a      	str	r2, [r3, #48]	@ 0x30

            if( pxNetworkBuffer->pxEndPoint == NULL )
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015de2:	2b00      	cmp	r3, #0
 8015de4:	d103      	bne.n	8015dee <vProcessGeneratedUDPPacket_IPv4+0x18e>
            {
                eReturned = eCantSendPacket;
 8015de6:	2302      	movs	r3, #2
 8015de8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
 8015dec:	e009      	b.n	8015e02 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
            }
            else
            {
                pxNetworkBuffer->xIPAddress.ulIP_IPv4 = ulIPAddress;
 8015dee:	68fa      	ldr	r2, [r7, #12]
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	615a      	str	r2, [r3, #20]
                vARPGenerateRequestPacket( pxNetworkBuffer );
 8015df4:	6878      	ldr	r0, [r7, #4]
 8015df6:	f7f0 ff25 	bl	8006c44 <vARPGenerateRequestPacket>
 8015dfa:	e002      	b.n	8015e02 <vProcessGeneratedUDPPacket_IPv4+0x1a2>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8015dfc:	2302      	movs	r3, #2
 8015dfe:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
        }
    }

    if( eReturned != eCantSendPacket )
 8015e02:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 8015e06:	2b02      	cmp	r3, #2
 8015e08:	d03d      	beq.n	8015e86 <vProcessGeneratedUDPPacket_IPv4+0x226>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 8015e0a:	687b      	ldr	r3, [r7, #4]
 8015e0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015e0e:	2b00      	cmp	r3, #0
 8015e10:	d035      	beq.n	8015e7e <vProcessGeneratedUDPPacket_IPv4+0x21e>
        {
            NetworkInterface_t * pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8015e12:	687b      	ldr	r3, [r7, #4]
 8015e14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015e16:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8015e1a:	617b      	str	r3, [r7, #20]
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            EthernetHeader_t * pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015e1c:	687b      	ldr	r3, [r7, #4]
 8015e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015e20:	613b      	str	r3, [r7, #16]
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes, pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes, ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );
 8015e22:	693b      	ldr	r3, [r7, #16]
 8015e24:	1d98      	adds	r0, r3, #6
 8015e26:	687b      	ldr	r3, [r7, #4]
 8015e28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015e2a:	33e8      	adds	r3, #232	@ 0xe8
 8015e2c:	2206      	movs	r2, #6
 8015e2e:	4619      	mov	r1, r3
 8015e30:	f00b f942 	bl	80210b8 <memcpy>

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 8015e34:	687b      	ldr	r3, [r7, #4]
 8015e36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e38:	2b3b      	cmp	r3, #59	@ 0x3b
 8015e3a:	d812      	bhi.n	8015e62 <vProcessGeneratedUDPPacket_IPv4+0x202>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015e40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e42:	e008      	b.n	8015e56 <vProcessGeneratedUDPPacket_IPv4+0x1f6>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 8015e44:	687b      	ldr	r3, [r7, #4]
 8015e46:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015e48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e4a:	4413      	add	r3, r2
 8015e4c:	2200      	movs	r2, #0
 8015e4e:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 8015e50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e52:	3301      	adds	r3, #1
 8015e54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015e56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015e58:	2b3b      	cmp	r3, #59	@ 0x3b
 8015e5a:	ddf3      	ble.n	8015e44 <vProcessGeneratedUDPPacket_IPv4+0x1e4>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	223c      	movs	r2, #60	@ 0x3c
 8015e60:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );

            if( ( pxInterface != NULL ) && ( pxInterface->pfOutput != NULL ) )
 8015e62:	697b      	ldr	r3, [r7, #20]
 8015e64:	2b00      	cmp	r3, #0
 8015e66:	d011      	beq.n	8015e8c <vProcessGeneratedUDPPacket_IPv4+0x22c>
 8015e68:	697b      	ldr	r3, [r7, #20]
 8015e6a:	68db      	ldr	r3, [r3, #12]
 8015e6c:	2b00      	cmp	r3, #0
 8015e6e:	d00d      	beq.n	8015e8c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            {
                ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 8015e70:	697b      	ldr	r3, [r7, #20]
 8015e72:	68db      	ldr	r3, [r3, #12]
 8015e74:	2201      	movs	r2, #1
 8015e76:	6879      	ldr	r1, [r7, #4]
 8015e78:	6978      	ldr	r0, [r7, #20]
 8015e7a:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 8015e7c:	e006      	b.n	8015e8c <vProcessGeneratedUDPPacket_IPv4+0x22c>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8015e7e:	6878      	ldr	r0, [r7, #4]
 8015e80:	f000 fca2 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
}
 8015e84:	e002      	b.n	8015e8c <vProcessGeneratedUDPPacket_IPv4+0x22c>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 8015e86:	6878      	ldr	r0, [r7, #4]
 8015e88:	f000 fc9e 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
}
 8015e8c:	bf00      	nop
 8015e8e:	3738      	adds	r7, #56	@ 0x38
 8015e90:	46bd      	mov	sp, r7
 8015e92:	bd80      	pop	{r7, pc}
 8015e94:	080263ec 	.word	0x080263ec
 8015e98:	fc0000e0 	.word	0xfc0000e0

08015e9c <xProcessReceivedUDPPacket_IPv4>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv4( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8015e9c:	b590      	push	{r4, r7, lr}
 8015e9e:	b099      	sub	sp, #100	@ 0x64
 8015ea0:	af02      	add	r7, sp, #8
 8015ea2:	60f8      	str	r0, [r7, #12]
 8015ea4:	460b      	mov	r3, r1
 8015ea6:	607a      	str	r2, [r7, #4]
 8015ea8:	817b      	strh	r3, [r7, #10]
    BaseType_t xReturn = pdPASS;
 8015eaa:	2301      	movs	r3, #1
 8015eac:	657b      	str	r3, [r7, #84]	@ 0x54
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_t * pxUDPPacket;
    const NetworkEndPoint_t * pxEndpoint;

    configASSERT( pxNetworkBuffer != NULL );
 8015eae:	68fb      	ldr	r3, [r7, #12]
 8015eb0:	2b00      	cmp	r3, #0
 8015eb2:	d104      	bne.n	8015ebe <xProcessReceivedUDPPacket_IPv4+0x22>
 8015eb4:	f240 116f 	movw	r1, #367	@ 0x16f
 8015eb8:	4872      	ldr	r0, [pc, #456]	@ (8016084 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8015eba:	f7eb fad9 	bl	8001470 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 8015ebe:	68fb      	ldr	r3, [r7, #12]
 8015ec0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ec2:	2b00      	cmp	r3, #0
 8015ec4:	d104      	bne.n	8015ed0 <xProcessReceivedUDPPacket_IPv4+0x34>
 8015ec6:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8015eca:	486e      	ldr	r0, [pc, #440]	@ (8016084 <xProcessReceivedUDPPacket_IPv4+0x1e8>)
 8015ecc:	f7eb fad0 	bl	8001470 <vAssertCalled>
    /* Map the ethernet buffer to the UDPPacket_t struct for easy access to the fields. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket = ( ( UDPPacket_t * ) pxNetworkBuffer->pucEthernetBuffer );
 8015ed0:	68fb      	ldr	r3, [r7, #12]
 8015ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015ed4:	653b      	str	r3, [r7, #80]	@ 0x50
    pxEndpoint = pxNetworkBuffer->pxEndPoint;
 8015ed6:	68fb      	ldr	r3, [r7, #12]
 8015ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015eda:	64fb      	str	r3, [r7, #76]	@ 0x4c

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8015edc:	897b      	ldrh	r3, [r7, #10]
 8015ede:	4618      	mov	r0, r3
 8015ee0:	f7f8 fc60 	bl	800e7a4 <pxUDPSocketLookup>
 8015ee4:	64b8      	str	r0, [r7, #72]	@ 0x48

    *pxIsWaitingForARPResolution = pdFALSE;
 8015ee6:	687b      	ldr	r3, [r7, #4]
 8015ee8:	2200      	movs	r2, #0
 8015eea:	601a      	str	r2, [r3, #0]

    do
    {
        if( pxSocket != NULL )
 8015eec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015eee:	2b00      	cmp	r3, #0
 8015ef0:	f000 8085 	beq.w	8015ffe <xProcessReceivedUDPPacket_IPv4+0x162>
        {
            if( ( pxEndpoint != NULL ) && ( pxEndpoint->ipv4_settings.ulIPAddress != 0U ) )
 8015ef4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015ef6:	2b00      	cmp	r3, #0
 8015ef8:	d018      	beq.n	8015f2c <xProcessReceivedUDPPacket_IPv4+0x90>
 8015efa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015efc:	681b      	ldr	r3, [r3, #0]
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d014      	beq.n	8015f2c <xProcessReceivedUDPPacket_IPv4+0x90>
            {
                if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8015f02:	68f8      	ldr	r0, [r7, #12]
 8015f04:	f7f0 fa0c 	bl	8006320 <xCheckRequiresARPResolution>
 8015f08:	4603      	mov	r3, r0
 8015f0a:	2b01      	cmp	r3, #1
 8015f0c:	d105      	bne.n	8015f1a <xProcessReceivedUDPPacket_IPv4+0x7e>
                {
                    /* Mark this packet as waiting for ARP resolution. */
                    *pxIsWaitingForARPResolution = pdTRUE;
 8015f0e:	687b      	ldr	r3, [r7, #4]
 8015f10:	2201      	movs	r2, #1
 8015f12:	601a      	str	r2, [r3, #0]

                    /* Return a fail to show that the frame will not be processed right now. */
                    xReturn = pdFAIL;
 8015f14:	2300      	movs	r3, #0
 8015f16:	657b      	str	r3, [r7, #84]	@ 0x54
                    break;
 8015f18:	e0ae      	b.n	8016078 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                }
                else
                {
                    /* Update the age of this cache entry since a packet was received. */
                    vARPRefreshCacheEntryAge( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress );
 8015f1a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015f1c:	1d9a      	adds	r2, r3, #6
 8015f1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015f20:	f8d3 301a 	ldr.w	r3, [r3, #26]
 8015f24:	4619      	mov	r1, r3
 8015f26:	4610      	mov	r0, r2
 8015f28:	f7f0 fada 	bl	80064e0 <vARPRefreshCacheEntryAge>
            }

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 8015f2c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015f2e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015f30:	2b00      	cmp	r3, #0
 8015f32:	d02f      	beq.n	8015f94 <xProcessReceivedUDPPacket_IPv4+0xf8>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipUDP_PAYLOAD_OFFSET_IPv4 ] );
 8015f34:	68fb      	ldr	r3, [r7, #12]
 8015f36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015f38:	332a      	adds	r3, #42	@ 0x2a
 8015f3a:	647b      	str	r3, [r7, #68]	@ 0x44
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 8015f3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015f3e:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8015f40:	643b      	str	r3, [r7, #64]	@ 0x40

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 8015f42:	68fb      	ldr	r3, [r7, #12]
 8015f44:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8015f46:	857b      	strh	r3, [r7, #42]	@ 0x2a
                    xSourceAddress.sin_address.ulIP_IPv4 = pxNetworkBuffer->xIPAddress.ulIP_IPv4;
 8015f48:	68fb      	ldr	r3, [r7, #12]
 8015f4a:	695b      	ldr	r3, [r3, #20]
 8015f4c:	633b      	str	r3, [r7, #48]	@ 0x30
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8015f4e:	2302      	movs	r3, #2
 8015f50:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 8015f54:	2318      	movs	r3, #24
 8015f56:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
                    destinationAddress.sin_port = usPort;
 8015f5a:	897b      	ldrh	r3, [r7, #10]
 8015f5c:	827b      	strh	r3, [r7, #18]
                    destinationAddress.sin_address.ulIP_IPv4 = pxUDPPacket->xIPHeader.ulDestinationIPAddress;
 8015f5e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015f60:	f8d3 301e 	ldr.w	r3, [r3, #30]
 8015f64:	61bb      	str	r3, [r7, #24]
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET4;
 8015f66:	2302      	movs	r3, #2
 8015f68:	747b      	strb	r3, [r7, #17]
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8015f6a:	2318      	movs	r3, #24
 8015f6c:	743b      	strb	r3, [r7, #16]

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
                                  ( void * ) pcData,
                                  ( size_t ) ( pxNetworkBuffer->xDataLength - ipUDP_PAYLOAD_OFFSET_IPv4 ),
 8015f6e:	68fb      	ldr	r3, [r7, #12]
 8015f70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015f72:	f1a3 022a 	sub.w	r2, r3, #42	@ 0x2a
                    if( xHandler( ( Socket_t ) pxSocket,
 8015f76:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8015f7a:	f107 0310 	add.w	r3, r7, #16
 8015f7e:	9300      	str	r3, [sp, #0]
 8015f80:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8015f82:	460b      	mov	r3, r1
 8015f84:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8015f86:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8015f88:	47a0      	blx	r4
 8015f8a:	4603      	mov	r3, r0
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d001      	beq.n	8015f94 <xProcessReceivedUDPPacket_IPv4+0xf8>
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 8015f90:	2300      	movs	r3, #0
 8015f92:	657b      	str	r3, [r7, #84]	@ 0x54
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8015f94:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015f96:	2b01      	cmp	r3, #1
 8015f98:	d16e      	bne.n	8016078 <xProcessReceivedUDPPacket_IPv4+0x1dc>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8015f9a:	f7ed fd5b 	bl	8003a54 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 8015f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015fa0:	3354      	adds	r3, #84	@ 0x54
 8015fa2:	68fa      	ldr	r2, [r7, #12]
 8015fa4:	4611      	mov	r1, r2
 8015fa6:	4618      	mov	r0, r3
 8015fa8:	f7ec fcad 	bl	8002906 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8015fac:	f7ed fd60 	bl	8003a70 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 8015fb0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015fb2:	685b      	ldr	r3, [r3, #4]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d005      	beq.n	8015fc4 <xProcessReceivedUDPPacket_IPv4+0x128>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8015fb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015fba:	685b      	ldr	r3, [r3, #4]
 8015fbc:	2101      	movs	r1, #1
 8015fbe:	4618      	mov	r0, r3
 8015fc0:	f7ec fb9c 	bl	80026fc <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8015fc4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015fc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d00c      	beq.n	8015fe6 <xProcessReceivedUDPPacket_IPv4+0x14a>
 8015fcc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015fce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015fd0:	f003 0301 	and.w	r3, r3, #1
 8015fd4:	2b00      	cmp	r3, #0
 8015fd6:	d006      	beq.n	8015fe6 <xProcessReceivedUDPPacket_IPv4+0x14a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8015fd8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	2101      	movs	r1, #1
 8015fe0:	4618      	mov	r0, r3
 8015fe2:	f7ec fb8b 	bl	80026fc <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8015fe6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d044      	beq.n	8016078 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 8015fee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015ff0:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 8015ff2:	2300      	movs	r3, #0
 8015ff4:	2200      	movs	r2, #0
 8015ff6:	2100      	movs	r1, #0
 8015ff8:	f7ec fe5c 	bl	8002cb4 <xQueueGenericSend>
 8015ffc:	e03c      	b.n	8016078 <xProcessReceivedUDPPacket_IPv4+0x1dc>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 8015ffe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016000:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8016002:	b29b      	uxth	r3, r3
 8016004:	021b      	lsls	r3, r3, #8
 8016006:	b21a      	sxth	r2, r3
 8016008:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801600a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801600c:	b29b      	uxth	r3, r3
 801600e:	0a1b      	lsrs	r3, r3, #8
 8016010:	b29b      	uxth	r3, r3
 8016012:	b21b      	sxth	r3, r3
 8016014:	4313      	orrs	r3, r2
 8016016:	b21b      	sxth	r3, r3
 8016018:	2b35      	cmp	r3, #53	@ 0x35
 801601a:	d10f      	bne.n	801603c <xProcessReceivedUDPPacket_IPv4+0x1a0>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 801601c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801601e:	1d98      	adds	r0, r3, #6
 8016020:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016022:	f8d3 101a 	ldr.w	r1, [r3, #26]
 8016026:	68fb      	ldr	r3, [r7, #12]
 8016028:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801602a:	461a      	mov	r2, r3
 801602c:	f7f0 fa8e 	bl	800654c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016030:	68f8      	ldr	r0, [r7, #12]
 8016032:	f7f0 ff20 	bl	8006e76 <ulDNSHandlePacket>
 8016036:	4603      	mov	r3, r0
 8016038:	657b      	str	r3, [r7, #84]	@ 0x54
 801603a:	e01d      	b.n	8016078 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 801603c:	897b      	ldrh	r3, [r7, #10]
 801603e:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016042:	4293      	cmp	r3, r2
 8016044:	d006      	beq.n	8016054 <xProcessReceivedUDPPacket_IPv4+0x1b8>
                    ( pxUDPPacket->xUDPHeader.usSourcePort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) )
 8016046:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016048:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 801604a:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_ntohs( ipLLMNR_PORT ) ) ||
 801604c:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 8016050:	4293      	cmp	r3, r2
 8016052:	d10f      	bne.n	8016074 <xProcessReceivedUDPPacket_IPv4+0x1d8>
                {
                    vARPRefreshCacheEntry( &( pxUDPPacket->xEthernetHeader.xSourceAddress ), pxUDPPacket->xIPHeader.ulSourceIPAddress,
 8016054:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016056:	1d98      	adds	r0, r3, #6
 8016058:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801605a:	f8d3 101a 	ldr.w	r1, [r3, #26]
 801605e:	68fb      	ldr	r3, [r7, #12]
 8016060:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016062:	461a      	mov	r2, r3
 8016064:	f7f0 fa72 	bl	800654c <vARPRefreshCacheEntry>
                                           pxNetworkBuffer->pxEndPoint );
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 8016068:	68f8      	ldr	r0, [r7, #12]
 801606a:	f7f0 ff04 	bl	8006e76 <ulDNSHandlePacket>
 801606e:	4603      	mov	r3, r0
 8016070:	657b      	str	r3, [r7, #84]	@ 0x54
 8016072:	e001      	b.n	8016078 <xProcessReceivedUDPPacket_IPv4+0x1dc>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 8016074:	2300      	movs	r3, #0
 8016076:	657b      	str	r3, [r7, #84]	@ 0x54
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 8016078:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 801607a:	4618      	mov	r0, r3
 801607c:	375c      	adds	r7, #92	@ 0x5c
 801607e:	46bd      	mov	sp, r7
 8016080:	bd90      	pop	{r4, r7, pc}
 8016082:	bf00      	nop
 8016084:	08025cfc 	.word	0x08025cfc

08016088 <pxGetEndpoint>:
 * @returns Pointer to the first end point of the given IP type from the
 *          list of end points.
 */
static NetworkEndPoint_t * pxGetEndpoint( BaseType_t xIPType,
                                          BaseType_t xIsGlobal )
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b086      	sub	sp, #24
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
 8016090:	6039      	str	r1, [r7, #0]
    NetworkEndPoint_t * pxEndPoint;

    for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8016092:	2000      	movs	r0, #0
 8016094:	f7f6 fd20 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 8016098:	6178      	str	r0, [r7, #20]
 801609a:	e021      	b.n	80160e0 <pxGetEndpoint+0x58>
         pxEndPoint != NULL;
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
    {
        if( xIPType == ( BaseType_t ) ipTYPE_IPv6 )
 801609c:	687b      	ldr	r3, [r7, #4]
 801609e:	2b60      	cmp	r3, #96	@ 0x60
 80160a0:	d119      	bne.n	80160d6 <pxGetEndpoint+0x4e>
        {
            if( pxEndPoint->bits.bIPv6 != 0U )
 80160a2:	697b      	ldr	r3, [r7, #20]
 80160a4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80160a8:	f003 0304 	and.w	r3, r3, #4
 80160ac:	b2db      	uxtb	r3, r3
 80160ae:	2b00      	cmp	r3, #0
 80160b0:	d011      	beq.n	80160d6 <pxGetEndpoint+0x4e>
            {
                IPv6_Type_t eEndpointType = xIPv6_GetIPType( &( pxEndPoint->ipv6_settings.xIPAddress ) );
 80160b2:	697b      	ldr	r3, [r7, #20]
 80160b4:	3338      	adds	r3, #56	@ 0x38
 80160b6:	4618      	mov	r0, r3
 80160b8:	f7f7 f8f2 	bl	800d2a0 <xIPv6_GetIPType>
 80160bc:	4603      	mov	r3, r0
 80160be:	74fb      	strb	r3, [r7, #19]
                BaseType_t xEndpointGlobal = ( eEndpointType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 80160c0:	7cfb      	ldrb	r3, [r7, #19]
 80160c2:	2b00      	cmp	r3, #0
 80160c4:	d101      	bne.n	80160ca <pxGetEndpoint+0x42>
 80160c6:	2301      	movs	r3, #1
 80160c8:	e000      	b.n	80160cc <pxGetEndpoint+0x44>
 80160ca:	2300      	movs	r3, #0
 80160cc:	60fb      	str	r3, [r7, #12]

                if( xEndpointGlobal == xIsGlobal )
 80160ce:	68fa      	ldr	r2, [r7, #12]
 80160d0:	683b      	ldr	r3, [r7, #0]
 80160d2:	429a      	cmp	r2, r3
 80160d4:	d008      	beq.n	80160e8 <pxGetEndpoint+0x60>
         pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 80160d6:	6979      	ldr	r1, [r7, #20]
 80160d8:	2000      	movs	r0, #0
 80160da:	f7f6 fd1f 	bl	800cb1c <FreeRTOS_NextEndPoint>
 80160de:	6178      	str	r0, [r7, #20]
         pxEndPoint != NULL;
 80160e0:	697b      	ldr	r3, [r7, #20]
 80160e2:	2b00      	cmp	r3, #0
 80160e4:	d1da      	bne.n	801609c <pxGetEndpoint+0x14>
 80160e6:	e000      	b.n	80160ea <pxGetEndpoint+0x62>
                {
                    break;
 80160e8:	bf00      	nop
                }
            }
        }
    }

    return pxEndPoint;
 80160ea:	697b      	ldr	r3, [r7, #20]
}
 80160ec:	4618      	mov	r0, r3
 80160ee:	3718      	adds	r7, #24
 80160f0:	46bd      	mov	sp, r7
 80160f2:	bd80      	pop	{r7, pc}

080160f4 <prvStartLookup>:
 * @param[out] pxLostBuffer  The pointee will be set to true in case the network packet got released
 *                            ( the ownership was taken ).
 */
static eARPLookupResult_t prvStartLookup( NetworkBufferDescriptor_t * const pxNetworkBuffer,
                                          BaseType_t * pxLostBuffer )
{
 80160f4:	b580      	push	{r7, lr}
 80160f6:	b084      	sub	sp, #16
 80160f8:	af00      	add	r7, sp, #0
 80160fa:	6078      	str	r0, [r7, #4]
 80160fc:	6039      	str	r1, [r7, #0]
    eARPLookupResult_t eReturned = eARPCacheMiss;
 80160fe:	2300      	movs	r3, #0
 8016100:	73fb      	strb	r3, [r7, #15]

    FreeRTOS_printf( ( "Looking up %pip with%s end-point\n",
 8016102:	687b      	ldr	r3, [r7, #4]
 8016104:	f103 0114 	add.w	r1, r3, #20
 8016108:	687b      	ldr	r3, [r7, #4]
 801610a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801610c:	2b00      	cmp	r3, #0
 801610e:	d001      	beq.n	8016114 <prvStartLookup+0x20>
 8016110:	4b1e      	ldr	r3, [pc, #120]	@ (801618c <prvStartLookup+0x98>)
 8016112:	e000      	b.n	8016116 <prvStartLookup+0x22>
 8016114:	4b1e      	ldr	r3, [pc, #120]	@ (8016190 <prvStartLookup+0x9c>)
 8016116:	461a      	mov	r2, r3
 8016118:	481e      	ldr	r0, [pc, #120]	@ (8016194 <prvStartLookup+0xa0>)
 801611a:	f00a fdb1 	bl	8020c80 <lUDPLoggingPrintf>
                       ( void * ) pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes,
                       ( pxNetworkBuffer->pxEndPoint != NULL ) ? "" : "out" ) );

    if( pxNetworkBuffer->pxEndPoint == NULL )
 801611e:	687b      	ldr	r3, [r7, #4]
 8016120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016122:	2b00      	cmp	r3, #0
 8016124:	d11f      	bne.n	8016166 <prvStartLookup+0x72>
    {
        IPv6_Type_t eTargetType = xIPv6_GetIPType( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 8016126:	687b      	ldr	r3, [r7, #4]
 8016128:	3314      	adds	r3, #20
 801612a:	4618      	mov	r0, r3
 801612c:	f7f7 f8b8 	bl	800d2a0 <xIPv6_GetIPType>
 8016130:	4603      	mov	r3, r0
 8016132:	73bb      	strb	r3, [r7, #14]
        BaseType_t xIsGlobal = ( eTargetType == eIPv6_Global ) ? pdTRUE : pdFALSE;
 8016134:	7bbb      	ldrb	r3, [r7, #14]
 8016136:	2b00      	cmp	r3, #0
 8016138:	d101      	bne.n	801613e <prvStartLookup+0x4a>
 801613a:	2301      	movs	r3, #1
 801613c:	e000      	b.n	8016140 <prvStartLookup+0x4c>
 801613e:	2300      	movs	r3, #0
 8016140:	60bb      	str	r3, [r7, #8]
        pxNetworkBuffer->pxEndPoint = pxGetEndpoint( ( BaseType_t ) ipTYPE_IPv6, xIsGlobal );
 8016142:	68b9      	ldr	r1, [r7, #8]
 8016144:	2060      	movs	r0, #96	@ 0x60
 8016146:	f7ff ff9f 	bl	8016088 <pxGetEndpoint>
 801614a:	4602      	mov	r2, r0
 801614c:	687b      	ldr	r3, [r7, #4]
 801614e:	631a      	str	r2, [r3, #48]	@ 0x30
        FreeRTOS_printf( ( "prvStartLookup: Got an end-point: %s\n", pxNetworkBuffer->pxEndPoint ? "yes" : "no" ) );
 8016150:	687b      	ldr	r3, [r7, #4]
 8016152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016154:	2b00      	cmp	r3, #0
 8016156:	d001      	beq.n	801615c <prvStartLookup+0x68>
 8016158:	4b0f      	ldr	r3, [pc, #60]	@ (8016198 <prvStartLookup+0xa4>)
 801615a:	e000      	b.n	801615e <prvStartLookup+0x6a>
 801615c:	4b0f      	ldr	r3, [pc, #60]	@ (801619c <prvStartLookup+0xa8>)
 801615e:	4619      	mov	r1, r3
 8016160:	480f      	ldr	r0, [pc, #60]	@ (80161a0 <prvStartLookup+0xac>)
 8016162:	f00a fd8d 	bl	8020c80 <lUDPLoggingPrintf>
    }

    if( pxNetworkBuffer->pxEndPoint != NULL )
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801616a:	2b00      	cmp	r3, #0
 801616c:	d008      	beq.n	8016180 <prvStartLookup+0x8c>
    {
        vNDSendNeighbourSolicitation( pxNetworkBuffer, &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ) );
 801616e:	687b      	ldr	r3, [r7, #4]
 8016170:	3314      	adds	r3, #20
 8016172:	4619      	mov	r1, r3
 8016174:	6878      	ldr	r0, [r7, #4]
 8016176:	f7f5 f9d5 	bl	800b524 <vNDSendNeighbourSolicitation>

        /* pxNetworkBuffer has been sent and released.
         * Make sure it won't be used again.. */
        *pxLostBuffer = pdTRUE;
 801617a:	683b      	ldr	r3, [r7, #0]
 801617c:	2201      	movs	r2, #1
 801617e:	601a      	str	r2, [r3, #0]
    }

    return eReturned;
 8016180:	7bfb      	ldrb	r3, [r7, #15]
}
 8016182:	4618      	mov	r0, r3
 8016184:	3710      	adds	r7, #16
 8016186:	46bd      	mov	sp, r7
 8016188:	bd80      	pop	{r7, pc}
 801618a:	bf00      	nop
 801618c:	08025d30 	.word	0x08025d30
 8016190:	08025d34 	.word	0x08025d34
 8016194:	08025d38 	.word	0x08025d38
 8016198:	08025d5c 	.word	0x08025d5c
 801619c:	08025d60 	.word	0x08025d60
 80161a0:	08025d64 	.word	0x08025d64

080161a4 <vProcessGeneratedUDPPacket_IPv6>:
 *        packet such as ARP cache check and address resolution.
 *
 * @param[in] pxNetworkBuffer The network buffer carrying the packet.
 */
void vProcessGeneratedUDPPacket_IPv6( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80161a4:	b590      	push	{r4, r7, lr}
 80161a6:	b093      	sub	sp, #76	@ 0x4c
 80161a8:	af00      	add	r7, sp, #0
 80161aa:	6078      	str	r0, [r7, #4]
    UDPPacket_IPv6_t * pxUDPPacket_IPv6;
    IPHeader_IPv6_t * pxIPHeader_IPv6;
    eARPLookupResult_t eReturned;
    size_t uxPayloadSize;
    /* memcpy() helper variables for MISRA Rule 21.15 compliance*/
    NetworkInterface_t * pxInterface = NULL;
 80161ac:	2300      	movs	r3, #0
 80161ae:	63bb      	str	r3, [r7, #56]	@ 0x38
    EthernetHeader_t * pxEthernetHeader = NULL;
 80161b0:	2300      	movs	r3, #0
 80161b2:	637b      	str	r3, [r7, #52]	@ 0x34
    BaseType_t xLostBuffer = pdFALSE;
 80161b4:	2300      	movs	r3, #0
 80161b6:	623b      	str	r3, [r7, #32]
    NetworkEndPoint_t * pxEndPoint = NULL;
 80161b8:	2300      	movs	r3, #0
 80161ba:	61fb      	str	r3, [r7, #28]
    /* Map the UDP packet onto the start of the frame. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 80161bc:	687b      	ldr	r3, [r7, #4]
 80161be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80161c0:	633b      	str	r3, [r7, #48]	@ 0x30
    pxIPHeader_IPv6 = &( pxUDPPacket_IPv6->xIPHeader );
 80161c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80161c4:	330e      	adds	r3, #14
 80161c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Remember the original address. It might get replaced with
     * the address of the gateway. */
    ( void ) memcpy( xIPv6Address.ucBytes, pxNetworkBuffer->xIPAddress.xIP_IPv6.ucBytes, sizeof( xIPv6Address.ucBytes ) );
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	3314      	adds	r3, #20
 80161cc:	f107 040c 	add.w	r4, r7, #12
 80161d0:	6818      	ldr	r0, [r3, #0]
 80161d2:	6859      	ldr	r1, [r3, #4]
 80161d4:	689a      	ldr	r2, [r3, #8]
 80161d6:	68db      	ldr	r3, [r3, #12]
 80161d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}

    #if ipconfigSUPPORT_OUTGOING_PINGS == 1
        if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d107      	bne.n	80161f2 <vProcessGeneratedUDPPacket_IPv6+0x4e>
        {
            size_t uxHeadersSize = sizeof( EthernetHeader_t ) + sizeof( IPHeader_IPv6_t ) + sizeof( ICMPHeader_t );
 80161e2:	233e      	movs	r3, #62	@ 0x3e
 80161e4:	62bb      	str	r3, [r7, #40]	@ 0x28
            uxPayloadSize = pxNetworkBuffer->xDataLength - uxHeadersSize;
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80161ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80161ec:	1ad3      	subs	r3, r2, r3
 80161ee:	643b      	str	r3, [r7, #64]	@ 0x40
 80161f0:	e003      	b.n	80161fa <vProcessGeneratedUDPPacket_IPv6+0x56>
        }
        else
    #endif
    {
        uxPayloadSize = pxNetworkBuffer->xDataLength - sizeof( UDPPacket_IPv6_t );
 80161f2:	687b      	ldr	r3, [r7, #4]
 80161f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80161f6:	3b3e      	subs	r3, #62	@ 0x3e
 80161f8:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    /* Look in the IPv6 MAC-address cache for the target IP-address. */
    eReturned = eNDGetCacheEntry( &( pxNetworkBuffer->xIPAddress.xIP_IPv6 ), &( pxUDPPacket_IPv6->xEthernetHeader.xDestinationAddress ),
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	3314      	adds	r3, #20
 80161fe:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8016200:	f107 021c 	add.w	r2, r7, #28
 8016204:	4618      	mov	r0, r3
 8016206:	f7f4 ff21 	bl	800b04c <eNDGetCacheEntry>
 801620a:	4603      	mov	r3, r0
 801620c:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
                                  &( pxEndPoint ) );

    if( eReturned != eCantSendPacket )
 8016210:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016214:	2b02      	cmp	r3, #2
 8016216:	f000 80b1 	beq.w	801637c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
    {
        if( eReturned == eARPCacheHit )
 801621a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 801621e:	2b01      	cmp	r3, #1
 8016220:	f040 8095 	bne.w	801634e <vProcessGeneratedUDPPacket_IPv6+0x1aa>
            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 )
                uint8_t ucSocketOptions;
            #endif
            iptraceSENDING_UDP_PACKET( pxNetworkBuffer->xIPAddress.ulIP_IPv4 );

            pxNetworkBuffer->pxEndPoint = pxEndPoint;
 8016224:	69fa      	ldr	r2, [r7, #28]
 8016226:	687b      	ldr	r3, [r7, #4]
 8016228:	631a      	str	r2, [r3, #48]	@ 0x30

            #if ( ipconfigSUPPORT_OUTGOING_PINGS == 1 )

                /* Is it possible that the packet is not actually a UDP packet
                 * after all, but an ICMP packet. */
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 801622e:	2b00      	cmp	r3, #0
 8016230:	d109      	bne.n	8016246 <vProcessGeneratedUDPPacket_IPv6+0xa2>
                {
                    pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 8016232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016234:	2260      	movs	r2, #96	@ 0x60
 8016236:	701a      	strb	r2, [r3, #0]
                    pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_ICMP_IPv6;
 8016238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801623a:	223a      	movs	r2, #58	@ 0x3a
 801623c:	719a      	strb	r2, [r3, #6]
                    pxIPHeader_IPv6->ucHopLimit = 128;
 801623e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016240:	2280      	movs	r2, #128	@ 0x80
 8016242:	71da      	strb	r2, [r3, #7]
 8016244:	e05e      	b.n	8016304 <vProcessGeneratedUDPPacket_IPv6+0x160>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                UDPHeader_t * pxUDPHeader = NULL;
 8016246:	2300      	movs	r3, #0
 8016248:	627b      	str	r3, [r7, #36]	@ 0x24

                pxUDPHeader = &( pxUDPPacket_IPv6->xUDPHeader );
 801624a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801624c:	3336      	adds	r3, #54	@ 0x36
 801624e:	627b      	str	r3, [r7, #36]	@ 0x24

                pxIPHeader_IPv6->ucVersionTrafficClass = 0x60;
 8016250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016252:	2260      	movs	r2, #96	@ 0x60
 8016254:	701a      	strb	r2, [r3, #0]
                pxIPHeader_IPv6->ucTrafficClassFlow = 0;
 8016256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016258:	2200      	movs	r2, #0
 801625a:	705a      	strb	r2, [r3, #1]
                pxIPHeader_IPv6->usFlowLabel = 0;
 801625c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801625e:	2200      	movs	r2, #0
 8016260:	709a      	strb	r2, [r3, #2]
 8016262:	2200      	movs	r2, #0
 8016264:	70da      	strb	r2, [r3, #3]
                pxIPHeader_IPv6->ucHopLimit = 255;
 8016266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016268:	22ff      	movs	r2, #255	@ 0xff
 801626a:	71da      	strb	r2, [r3, #7]
                pxUDPHeader->usLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_IPv6_HEADER ) );
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016270:	b29b      	uxth	r3, r3
 8016272:	3b36      	subs	r3, #54	@ 0x36
 8016274:	b29a      	uxth	r2, r3
 8016276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016278:	809a      	strh	r2, [r3, #4]

                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 801627a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801627c:	2211      	movs	r2, #17
 801627e:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = ( uint16_t ) ( pxNetworkBuffer->xDataLength - sizeof( IPPacket_IPv6_t ) );
 8016280:	687b      	ldr	r3, [r7, #4]
 8016282:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016284:	b29b      	uxth	r3, r3
 8016286:	3b36      	subs	r3, #54	@ 0x36
 8016288:	b29a      	uxth	r2, r3
 801628a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801628c:	809a      	strh	r2, [r3, #4]
                /* The total transmit size adds on the Ethernet header. */
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( pxIPHeader_IPv6->usPayloadLength );
 801628e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016290:	889b      	ldrh	r3, [r3, #4]
 8016292:	b29b      	uxth	r3, r3
 8016294:	021b      	lsls	r3, r3, #8
 8016296:	b21a      	sxth	r2, r3
 8016298:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801629a:	889b      	ldrh	r3, [r3, #4]
 801629c:	b29b      	uxth	r3, r3
 801629e:	0a1b      	lsrs	r3, r3, #8
 80162a0:	b29b      	uxth	r3, r3
 80162a2:	b21b      	sxth	r3, r3
 80162a4:	4313      	orrs	r3, r2
 80162a6:	b21b      	sxth	r3, r3
 80162a8:	b29a      	uxth	r2, r3
 80162aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162ac:	809a      	strh	r2, [r3, #4]

                pxUDPHeader->usDestinationPort = pxNetworkBuffer->usPort;
 80162ae:	687b      	ldr	r3, [r7, #4]
 80162b0:	8e9a      	ldrh	r2, [r3, #52]	@ 0x34
 80162b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162b4:	805a      	strh	r2, [r3, #2]
                pxUDPHeader->usSourcePort = pxNetworkBuffer->usBoundPort;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	8eda      	ldrh	r2, [r3, #54]	@ 0x36
 80162ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162bc:	801a      	strh	r2, [r3, #0]
                pxUDPHeader->usLength = FreeRTOS_htons( pxUDPHeader->usLength );
 80162be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162c0:	889b      	ldrh	r3, [r3, #4]
 80162c2:	b29b      	uxth	r3, r3
 80162c4:	021b      	lsls	r3, r3, #8
 80162c6:	b21a      	sxth	r2, r3
 80162c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162ca:	889b      	ldrh	r3, [r3, #4]
 80162cc:	b29b      	uxth	r3, r3
 80162ce:	0a1b      	lsrs	r3, r3, #8
 80162d0:	b29b      	uxth	r3, r3
 80162d2:	b21b      	sxth	r3, r3
 80162d4:	4313      	orrs	r3, r2
 80162d6:	b21b      	sxth	r3, r3
 80162d8:	b29a      	uxth	r2, r3
 80162da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162dc:	809a      	strh	r2, [r3, #4]
                pxUDPHeader->usChecksum = 0U;
 80162de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80162e0:	2200      	movs	r2, #0
 80162e2:	719a      	strb	r2, [r3, #6]
 80162e4:	2200      	movs	r2, #0
 80162e6:	71da      	strb	r2, [r3, #7]

                if( pxNetworkBuffer->pxEndPoint != NULL )
 80162e8:	687b      	ldr	r3, [r7, #4]
 80162ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d009      	beq.n	8016304 <vProcessGeneratedUDPPacket_IPv6+0x160>
                {
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 80162f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80162f2:	f103 0008 	add.w	r0, r3, #8
                                     pxNetworkBuffer->pxEndPoint->ipv6_settings.xIPAddress.ucBytes,
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80162fa:	3338      	adds	r3, #56	@ 0x38
                    ( void ) memcpy( pxIPHeader_IPv6->xSourceAddress.ucBytes,
 80162fc:	2210      	movs	r2, #16
 80162fe:	4619      	mov	r1, r3
 8016300:	f00a feda 	bl	80210b8 <memcpy>
                ucSocketOptions = pxNetworkBuffer->pucEthernetBuffer[ ipSOCKET_OPTIONS_OFFSET ];
            }
            #endif

            #if ipconfigSUPPORT_OUTGOING_PINGS == 1
                if( pxNetworkBuffer->usPort == ( uint16_t ) ipPACKET_CONTAINS_ICMP_DATA )
 8016304:	687b      	ldr	r3, [r7, #4]
 8016306:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 8016308:	2b00      	cmp	r3, #0
 801630a:	d10e      	bne.n	801632a <vProcessGeneratedUDPPacket_IPv6+0x186>
                {
                    pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( ICMPEcho_IPv6_t ) + uxPayloadSize );
 801630c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801630e:	b29b      	uxth	r3, r3
 8016310:	3308      	adds	r3, #8
 8016312:	b29b      	uxth	r3, r3
 8016314:	021b      	lsls	r3, r3, #8
 8016316:	b29a      	uxth	r2, r3
 8016318:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801631a:	3308      	adds	r3, #8
 801631c:	0a1b      	lsrs	r3, r3, #8
 801631e:	b29b      	uxth	r3, r3
 8016320:	4313      	orrs	r3, r2
 8016322:	b29a      	uxth	r2, r3
 8016324:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016326:	809a      	strh	r2, [r3, #4]
 8016328:	e028      	b.n	801637c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                }
                else
            #endif /* ipconfigSUPPORT_OUTGOING_PINGS */
            {
                pxIPHeader_IPv6->ucNextHeader = ipPROTOCOL_UDP;
 801632a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801632c:	2211      	movs	r2, #17
 801632e:	719a      	strb	r2, [r3, #6]
                pxIPHeader_IPv6->usPayloadLength = FreeRTOS_htons( sizeof( UDPHeader_t ) + uxPayloadSize );
 8016330:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016332:	b29b      	uxth	r3, r3
 8016334:	3308      	adds	r3, #8
 8016336:	b29b      	uxth	r3, r3
 8016338:	021b      	lsls	r3, r3, #8
 801633a:	b29a      	uxth	r2, r3
 801633c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801633e:	3308      	adds	r3, #8
 8016340:	0a1b      	lsrs	r3, r3, #8
 8016342:	b29b      	uxth	r3, r3
 8016344:	4313      	orrs	r3, r2
 8016346:	b29a      	uxth	r2, r3
 8016348:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801634a:	809a      	strh	r2, [r3, #4]
 801634c:	e016      	b.n	801637c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
                    pxUDPPacket_IPv6->xUDPHeader.usChecksum = 0U;
                }
            }
            #endif /* if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM == 0 ) */
        }
        else if( eReturned == eARPCacheMiss )
 801634e:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016352:	2b00      	cmp	r3, #0
 8016354:	d10f      	bne.n	8016376 <vProcessGeneratedUDPPacket_IPv6+0x1d2>
        {
            if( pxEndPoint != NULL )
 8016356:	69fb      	ldr	r3, [r7, #28]
 8016358:	2b00      	cmp	r3, #0
 801635a:	d002      	beq.n	8016362 <vProcessGeneratedUDPPacket_IPv6+0x1be>
            {
                pxNetworkBuffer->pxEndPoint = pxEndPoint;
 801635c:	69fa      	ldr	r2, [r7, #28]
 801635e:	687b      	ldr	r3, [r7, #4]
 8016360:	631a      	str	r2, [r3, #48]	@ 0x30
            }

            eReturned = prvStartLookup( pxNetworkBuffer, &( xLostBuffer ) );
 8016362:	f107 0320 	add.w	r3, r7, #32
 8016366:	4619      	mov	r1, r3
 8016368:	6878      	ldr	r0, [r7, #4]
 801636a:	f7ff fec3 	bl	80160f4 <prvStartLookup>
 801636e:	4603      	mov	r3, r0
 8016370:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
 8016374:	e002      	b.n	801637c <vProcessGeneratedUDPPacket_IPv6+0x1d8>
        }
        else
        {
            /* The lookup indicated that an ARP request has already been
             * sent out for the queried IP address. */
            eReturned = eCantSendPacket;
 8016376:	2302      	movs	r3, #2
 8016378:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
        }
    }

    if( xLostBuffer == pdTRUE )
 801637c:	6a3b      	ldr	r3, [r7, #32]
 801637e:	2b01      	cmp	r3, #1
 8016380:	d03d      	beq.n	80163fe <vProcessGeneratedUDPPacket_IPv6+0x25a>
    {
        /* An ND solicitation or ARP request has been sent. */
    }
    else if( eReturned != eCantSendPacket )
 8016382:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8016386:	2b02      	cmp	r3, #2
 8016388:	d036      	beq.n	80163f8 <vProcessGeneratedUDPPacket_IPv6+0x254>
    {
        /* The network driver is responsible for freeing the network buffer
         * after the packet has been sent. */

        if( pxNetworkBuffer->pxEndPoint != NULL )
 801638a:	687b      	ldr	r3, [r7, #4]
 801638c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801638e:	2b00      	cmp	r3, #0
 8016390:	d02e      	beq.n	80163f0 <vProcessGeneratedUDPPacket_IPv6+0x24c>
        {
            pxInterface = pxNetworkBuffer->pxEndPoint->pxNetworkInterface;
 8016392:	687b      	ldr	r3, [r7, #4]
 8016394:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016396:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 801639a:	63bb      	str	r3, [r7, #56]	@ 0x38
            /* MISRA Ref 11.3.1 [Misaligned access] */
            /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
            /* coverity[misra_c_2012_rule_11_3_violation] */
            pxEthernetHeader = ( ( EthernetHeader_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801639c:	687b      	ldr	r3, [r7, #4]
 801639e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80163a0:	637b      	str	r3, [r7, #52]	@ 0x34
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 80163a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80163a4:	1d98      	adds	r0, r3, #6
                             pxNetworkBuffer->pxEndPoint->xMACAddress.ucBytes,
 80163a6:	687b      	ldr	r3, [r7, #4]
 80163a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80163aa:	33e8      	adds	r3, #232	@ 0xe8
            ( void ) memcpy( pxEthernetHeader->xSourceAddress.ucBytes,
 80163ac:	2206      	movs	r2, #6
 80163ae:	4619      	mov	r1, r3
 80163b0:	f00a fe82 	bl	80210b8 <memcpy>
                             ( size_t ) ipMAC_ADDRESS_LENGTH_BYTES );

            #if ( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 )
            {
                if( pxNetworkBuffer->xDataLength < ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES )
 80163b4:	687b      	ldr	r3, [r7, #4]
 80163b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163b8:	2b3b      	cmp	r3, #59	@ 0x3b
 80163ba:	d812      	bhi.n	80163e2 <vProcessGeneratedUDPPacket_IPv6+0x23e>
                {
                    BaseType_t xIndex;

                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80163bc:	687b      	ldr	r3, [r7, #4]
 80163be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80163c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80163c2:	e008      	b.n	80163d6 <vProcessGeneratedUDPPacket_IPv6+0x232>
                    {
                        pxNetworkBuffer->pucEthernetBuffer[ xIndex ] = 0U;
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80163c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163ca:	4413      	add	r3, r2
 80163cc:	2200      	movs	r2, #0
 80163ce:	701a      	strb	r2, [r3, #0]
                    for( xIndex = ( BaseType_t ) pxNetworkBuffer->xDataLength; xIndex < ( BaseType_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES; xIndex++ )
 80163d0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163d2:	3301      	adds	r3, #1
 80163d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80163d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80163d8:	2b3b      	cmp	r3, #59	@ 0x3b
 80163da:	ddf3      	ble.n	80163c4 <vProcessGeneratedUDPPacket_IPv6+0x220>
                    }

                    pxNetworkBuffer->xDataLength = ( size_t ) ipconfigETHERNET_MINIMUM_PACKET_BYTES;
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	223c      	movs	r2, #60	@ 0x3c
 80163e0:	629a      	str	r2, [r3, #40]	@ 0x28
                }
            }
            #endif /* if( ipconfigETHERNET_MINIMUM_PACKET_BYTES > 0 ) */
            iptraceNETWORK_INTERFACE_OUTPUT( pxNetworkBuffer->xDataLength, pxNetworkBuffer->pucEthernetBuffer );
            ( void ) pxInterface->pfOutput( pxInterface, pxNetworkBuffer, pdTRUE );
 80163e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80163e4:	68db      	ldr	r3, [r3, #12]
 80163e6:	2201      	movs	r2, #1
 80163e8:	6879      	ldr	r1, [r7, #4]
 80163ea:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 80163ec:	4798      	blx	r3
    {
        /* The packet can't be sent (DHCP not completed?).  Just drop the
         * packet. */
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
    }
}
 80163ee:	e006      	b.n	80163fe <vProcessGeneratedUDPPacket_IPv6+0x25a>
            vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	f000 f9e9 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
}
 80163f6:	e002      	b.n	80163fe <vProcessGeneratedUDPPacket_IPv6+0x25a>
        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 80163f8:	6878      	ldr	r0, [r7, #4]
 80163fa:	f000 f9e5 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
}
 80163fe:	bf00      	nop
 8016400:	374c      	adds	r7, #76	@ 0x4c
 8016402:	46bd      	mov	sp, r7
 8016404:	bd90      	pop	{r4, r7, pc}
	...

08016408 <xProcessReceivedUDPPacket_IPv6>:
 * @return pdPASS in case the UDP packet could be processed. Else pdFAIL is returned.
 */
BaseType_t xProcessReceivedUDPPacket_IPv6( NetworkBufferDescriptor_t * pxNetworkBuffer,
                                           uint16_t usPort,
                                           BaseType_t * pxIsWaitingForARPResolution )
{
 8016408:	b590      	push	{r4, r7, lr}
 801640a:	b09b      	sub	sp, #108	@ 0x6c
 801640c:	af02      	add	r7, sp, #8
 801640e:	60f8      	str	r0, [r7, #12]
 8016410:	460b      	mov	r3, r1
 8016412:	607a      	str	r2, [r7, #4]
 8016414:	817b      	strh	r3, [r7, #10]
    /* Returning pdPASS means that the packet was consumed, released. */
    BaseType_t xReturn = pdPASS;
 8016416:	2301      	movs	r3, #1
 8016418:	65fb      	str	r3, [r7, #92]	@ 0x5c
    FreeRTOS_Socket_t * pxSocket;
    const UDPPacket_IPv6_t * pxUDPPacket_IPv6;

    configASSERT( pxNetworkBuffer != NULL );
 801641a:	68fb      	ldr	r3, [r7, #12]
 801641c:	2b00      	cmp	r3, #0
 801641e:	d104      	bne.n	801642a <xProcessReceivedUDPPacket_IPv6+0x22>
 8016420:	f44f 71c3 	mov.w	r1, #390	@ 0x186
 8016424:	4874      	ldr	r0, [pc, #464]	@ (80165f8 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8016426:	f7eb f823 	bl	8001470 <vAssertCalled>
    configASSERT( pxNetworkBuffer->pucEthernetBuffer != NULL );
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801642e:	2b00      	cmp	r3, #0
 8016430:	d104      	bne.n	801643c <xProcessReceivedUDPPacket_IPv6+0x34>
 8016432:	f240 1187 	movw	r1, #391	@ 0x187
 8016436:	4870      	ldr	r0, [pc, #448]	@ (80165f8 <xProcessReceivedUDPPacket_IPv6+0x1f0>)
 8016438:	f7eb f81a 	bl	8001470 <vAssertCalled>
     * handling them, no use to fill the cache with those IP addresses. */

    /* MISRA Ref 11.3.1 [Misaligned access] */
    /* More details at: https://github.com/FreeRTOS/FreeRTOS-Plus-TCP/blob/main/MISRA.md#rule-113 */
    /* coverity[misra_c_2012_rule_11_3_violation] */
    pxUDPPacket_IPv6 = ( ( UDPPacket_IPv6_t * ) pxNetworkBuffer->pucEthernetBuffer );
 801643c:	68fb      	ldr	r3, [r7, #12]
 801643e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016440:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* Caller must check for minimum packet size. */
    pxSocket = pxUDPSocketLookup( usPort );
 8016442:	897b      	ldrh	r3, [r7, #10]
 8016444:	4618      	mov	r0, r3
 8016446:	f7f8 f9ad 	bl	800e7a4 <pxUDPSocketLookup>
 801644a:	6578      	str	r0, [r7, #84]	@ 0x54

    *pxIsWaitingForARPResolution = pdFALSE;
 801644c:	687b      	ldr	r3, [r7, #4]
 801644e:	2200      	movs	r2, #0
 8016450:	601a      	str	r2, [r3, #0]

    do
    {
        /* UDPv6 doesn't allow zero-checksum, refer to RFC2460 - section 8.1.
         * Some platforms (such as Zynq) pass the packet to upper layer for flexibility to allow zero-checksum. */
        if( pxUDPPacket_IPv6->xUDPHeader.usChecksum == 0U )
 8016452:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016454:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8016456:	b29b      	uxth	r3, r3
 8016458:	2b00      	cmp	r3, #0
 801645a:	d109      	bne.n	8016470 <xProcessReceivedUDPPacket_IPv6+0x68>
        {
            FreeRTOS_debug_printf( ( "xProcessReceivedUDPPacket_IPv6: Drop packets with checksum %d\n",
 801645c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801645e:	8f9b      	ldrh	r3, [r3, #60]	@ 0x3c
 8016460:	b29b      	uxth	r3, r3
 8016462:	4619      	mov	r1, r3
 8016464:	4865      	ldr	r0, [pc, #404]	@ (80165fc <xProcessReceivedUDPPacket_IPv6+0x1f4>)
 8016466:	f00a fc0b 	bl	8020c80 <lUDPLoggingPrintf>
                                     pxUDPPacket_IPv6->xUDPHeader.usChecksum ) );

            xReturn = pdFAIL;
 801646a:	2300      	movs	r3, #0
 801646c:	65fb      	str	r3, [r7, #92]	@ 0x5c
            break;
 801646e:	e0bd      	b.n	80165ec <xProcessReceivedUDPPacket_IPv6+0x1e4>
        }

        if( pxSocket != NULL )
 8016470:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016472:	2b00      	cmp	r3, #0
 8016474:	f000 8091 	beq.w	801659a <xProcessReceivedUDPPacket_IPv6+0x192>
        {
            if( xCheckRequiresARPResolution( pxNetworkBuffer ) == pdTRUE )
 8016478:	68f8      	ldr	r0, [r7, #12]
 801647a:	f7ef ff51 	bl	8006320 <xCheckRequiresARPResolution>
 801647e:	4603      	mov	r3, r0
 8016480:	2b01      	cmp	r3, #1
 8016482:	d105      	bne.n	8016490 <xProcessReceivedUDPPacket_IPv6+0x88>
            {
                /* Mark this packet as waiting for ARP resolution. */
                *pxIsWaitingForARPResolution = pdTRUE;
 8016484:	687b      	ldr	r3, [r7, #4]
 8016486:	2201      	movs	r2, #1
 8016488:	601a      	str	r2, [r3, #0]

                /* Return a fail to show that the frame will not be processed right now. */
                xReturn = pdFAIL;
 801648a:	2300      	movs	r3, #0
 801648c:	65fb      	str	r3, [r7, #92]	@ 0x5c
                break;
 801648e:	e0ad      	b.n	80165ec <xProcessReceivedUDPPacket_IPv6+0x1e4>
            }

            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 8016490:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016492:	1d98      	adds	r0, r3, #6
 8016494:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016496:	f103 0116 	add.w	r1, r3, #22
                                  pxNetworkBuffer->pxEndPoint );
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
            vNDRefreshCacheEntry( &( pxUDPPacket_IPv6->xEthernetHeader.xSourceAddress ), &( pxUDPPacket_IPv6->xIPHeader.xSourceAddress ),
 801649e:	461a      	mov	r2, r3
 80164a0:	f7f4 fe82 	bl	800b1a8 <vNDRefreshCacheEntry>

            #if ( ipconfigUSE_CALLBACKS == 1 )
            {
                size_t uxIPLength = uxIPHeaderSizePacket( pxNetworkBuffer );
 80164a4:	68f8      	ldr	r0, [r7, #12]
 80164a6:	f7f2 ff7f 	bl	80093a8 <uxIPHeaderSizePacket>
 80164aa:	6538      	str	r0, [r7, #80]	@ 0x50
                size_t uxPayloadSize;

                /* Did the owner of this socket register a reception handler ? */
                if( ipconfigIS_VALID_PROG_ADDRESS( pxSocket->u.xUDP.pxHandleReceive ) )
 80164ac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164ae:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80164b0:	2b00      	cmp	r3, #0
 80164b2:	d03d      	beq.n	8016530 <xProcessReceivedUDPPacket_IPv6+0x128>
                {
                    struct freertos_sockaddr xSourceAddress, destinationAddress;
                    /* The application hook needs to know the from- and to-addresses. */

                    void * pcData = &( pxNetworkBuffer->pucEthernetBuffer[ ipSIZE_OF_ETH_HEADER + uxIPLength + ipSIZE_OF_UDP_HEADER ] );
 80164b4:	68fb      	ldr	r3, [r7, #12]
 80164b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80164b8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80164ba:	3316      	adds	r3, #22
 80164bc:	4413      	add	r3, r2
 80164be:	64fb      	str	r3, [r7, #76]	@ 0x4c
                    FOnUDPReceive_t xHandler = ( FOnUDPReceive_t ) pxSocket->u.xUDP.pxHandleReceive;
 80164c0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80164c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80164c4:	64bb      	str	r3, [r7, #72]	@ 0x48

                    xSourceAddress.sin_port = pxNetworkBuffer->usPort;
 80164c6:	68fb      	ldr	r3, [r7, #12]
 80164c8:	8e9b      	ldrh	r3, [r3, #52]	@ 0x34
 80164ca:	85fb      	strh	r3, [r7, #46]	@ 0x2e
                    destinationAddress.sin_port = usPort;
 80164cc:	897b      	ldrh	r3, [r7, #10]
 80164ce:	82fb      	strh	r3, [r7, #22]
                    ( void ) memcpy( xSourceAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xSourceAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80164d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80164d2:	3316      	adds	r3, #22
 80164d4:	f107 0434 	add.w	r4, r7, #52	@ 0x34
 80164d8:	6818      	ldr	r0, [r3, #0]
 80164da:	6859      	ldr	r1, [r3, #4]
 80164dc:	689a      	ldr	r2, [r3, #8]
 80164de:	68db      	ldr	r3, [r3, #12]
 80164e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    ( void ) memcpy( destinationAddress.sin_address.xIP_IPv6.ucBytes, pxUDPPacket_IPv6->xIPHeader.xDestinationAddress.ucBytes, ipSIZE_OF_IPv6_ADDRESS );
 80164e2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80164e4:	3326      	adds	r3, #38	@ 0x26
 80164e6:	f107 041c 	add.w	r4, r7, #28
 80164ea:	6818      	ldr	r0, [r3, #0]
 80164ec:	6859      	ldr	r1, [r3, #4]
 80164ee:	689a      	ldr	r2, [r3, #8]
 80164f0:	68db      	ldr	r3, [r3, #12]
 80164f2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
                    xSourceAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 80164f4:	230a      	movs	r3, #10
 80164f6:	f887 302d 	strb.w	r3, [r7, #45]	@ 0x2d
                    destinationAddress.sin_family = ( uint8_t ) FREERTOS_AF_INET6;
 80164fa:	230a      	movs	r3, #10
 80164fc:	757b      	strb	r3, [r7, #21]
                    xSourceAddress.sin_len = ( uint8_t ) sizeof( xSourceAddress );
 80164fe:	2318      	movs	r3, #24
 8016500:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
                    destinationAddress.sin_len = ( uint8_t ) sizeof( destinationAddress );
 8016504:	2318      	movs	r3, #24
 8016506:	753b      	strb	r3, [r7, #20]
                    uxPayloadSize = pxNetworkBuffer->xDataLength - ( ipSIZE_OF_ETH_HEADER + ipSIZE_OF_UDP_HEADER + ( size_t ) ipSIZE_OF_IPv6_HEADER );
 8016508:	68fb      	ldr	r3, [r7, #12]
 801650a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801650c:	3b3e      	subs	r3, #62	@ 0x3e
 801650e:	647b      	str	r3, [r7, #68]	@ 0x44

                    /* The value of 'xDataLength' was proven to be at least the size of a UDP packet in prvProcessIPPacket(). */
                    if( xHandler( ( Socket_t ) pxSocket,
 8016510:	f107 022c 	add.w	r2, r7, #44	@ 0x2c
 8016514:	f107 0314 	add.w	r3, r7, #20
 8016518:	9300      	str	r3, [sp, #0]
 801651a:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 801651c:	4613      	mov	r3, r2
 801651e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016520:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8016522:	6d78      	ldr	r0, [r7, #84]	@ 0x54
 8016524:	47a0      	blx	r4
 8016526:	4603      	mov	r3, r0
 8016528:	2b00      	cmp	r3, #0
 801652a:	d001      	beq.n	8016530 <xProcessReceivedUDPPacket_IPv6+0x128>
                                  ( void * ) pcData,
                                  uxPayloadSize,
                                  &( xSourceAddress ),
                                  &( destinationAddress ) ) != 0 )
                    {
                        xReturn = pdFAIL; /* xHandler has consumed the data, do not add it to .xWaitingPacketsList'. */
 801652c:	2300      	movs	r3, #0
 801652e:	65fb      	str	r3, [r7, #92]	@ 0x5c
                }
            }
            #endif /* if ( ipconfigUDP_MAX_RX_PACKETS > 0U ) */

            #if ( ipconfigUSE_CALLBACKS == 1 ) || ( ipconfigUDP_MAX_RX_PACKETS > 0U )
                if( xReturn == pdPASS ) /*lint !e774: Boolean within 'if' always evaluates to True, depending on configuration. [MISRA 2012 Rule 14.3, required. */
 8016530:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016532:	2b01      	cmp	r3, #1
 8016534:	d15a      	bne.n	80165ec <xProcessReceivedUDPPacket_IPv6+0x1e4>
            #else
                /* xReturn is still pdPASS. */
            #endif
            {
                vTaskSuspendAll();
 8016536:	f7ed fa8d 	bl	8003a54 <vTaskSuspendAll>
                {
                    /* Add the network packet to the list of packets to be
                     * processed by the socket. */
                    vListInsertEnd( &( pxSocket->u.xUDP.xWaitingPacketsList ), &( pxNetworkBuffer->xBufferListItem ) );
 801653a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801653c:	3354      	adds	r3, #84	@ 0x54
 801653e:	68fa      	ldr	r2, [r7, #12]
 8016540:	4611      	mov	r1, r2
 8016542:	4618      	mov	r0, r3
 8016544:	f7ec f9df 	bl	8002906 <vListInsertEnd>
                }
                ( void ) xTaskResumeAll();
 8016548:	f7ed fa92 	bl	8003a70 <xTaskResumeAll>

                /* Set the socket's receive event */
                if( pxSocket->xEventGroup != NULL )
 801654c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801654e:	685b      	ldr	r3, [r3, #4]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d005      	beq.n	8016560 <xProcessReceivedUDPPacket_IPv6+0x158>
                {
                    ( void ) xEventGroupSetBits( pxSocket->xEventGroup, ( EventBits_t ) eSOCKET_RECEIVE );
 8016554:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016556:	685b      	ldr	r3, [r3, #4]
 8016558:	2101      	movs	r1, #1
 801655a:	4618      	mov	r0, r3
 801655c:	f7ec f8ce 	bl	80026fc <xEventGroupSetBits>
                }

                #if ( ipconfigSUPPORT_SELECT_FUNCTION == 1 )
                {
                    if( ( pxSocket->pxSocketSet != NULL ) && ( ( pxSocket->xSelectBits & ( ( EventBits_t ) eSELECT_READ ) ) != 0U ) )
 8016560:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016564:	2b00      	cmp	r3, #0
 8016566:	d00c      	beq.n	8016582 <xProcessReceivedUDPPacket_IPv6+0x17a>
 8016568:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801656a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801656c:	f003 0301 	and.w	r3, r3, #1
 8016570:	2b00      	cmp	r3, #0
 8016572:	d006      	beq.n	8016582 <xProcessReceivedUDPPacket_IPv6+0x17a>
                    {
                        ( void ) xEventGroupSetBits( pxSocket->pxSocketSet->xSelectGroup, ( EventBits_t ) eSELECT_READ );
 8016574:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016578:	681b      	ldr	r3, [r3, #0]
 801657a:	2101      	movs	r1, #1
 801657c:	4618      	mov	r0, r3
 801657e:	f7ec f8bd 	bl	80026fc <xEventGroupSetBits>
                }
                #endif

                #if ( ipconfigSOCKET_HAS_USER_SEMAPHORE == 1 )
                {
                    if( pxSocket->pxUserSemaphore != NULL )
 8016582:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016584:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016586:	2b00      	cmp	r3, #0
 8016588:	d030      	beq.n	80165ec <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    {
                        ( void ) xSemaphoreGive( pxSocket->pxUserSemaphore );
 801658a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801658c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 801658e:	2300      	movs	r3, #0
 8016590:	2200      	movs	r2, #0
 8016592:	2100      	movs	r1, #0
 8016594:	f7ec fb8e 	bl	8002cb4 <xQueueGenericSend>
 8016598:	e028      	b.n	80165ec <xProcessReceivedUDPPacket_IPv6+0x1e4>

                /* A DNS reply, check for the source port.  Although the DNS client
                 * does open a UDP socket to send a messages, this socket will be
                 * closed after a short timeout.  Messages that come late (after the
                 * socket is closed) will be treated here. */
                if( FreeRTOS_ntohs( pxUDPPacket_IPv6->xUDPHeader.usSourcePort ) == ( uint16_t ) ipDNS_PORT )
 801659a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801659c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 801659e:	b29b      	uxth	r3, r3
 80165a0:	021b      	lsls	r3, r3, #8
 80165a2:	b21a      	sxth	r2, r3
 80165a4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80165a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80165a8:	b29b      	uxth	r3, r3
 80165aa:	0a1b      	lsrs	r3, r3, #8
 80165ac:	b29b      	uxth	r3, r3
 80165ae:	b21b      	sxth	r3, r3
 80165b0:	4313      	orrs	r3, r2
 80165b2:	b21b      	sxth	r3, r3
 80165b4:	2b35      	cmp	r3, #53	@ 0x35
 80165b6:	d105      	bne.n	80165c4 <xProcessReceivedUDPPacket_IPv6+0x1bc>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80165b8:	68f8      	ldr	r0, [r7, #12]
 80165ba:	f7f0 fc5c 	bl	8006e76 <ulDNSHandlePacket>
 80165be:	4603      	mov	r3, r0
 80165c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80165c2:	e013      	b.n	80165ec <xProcessReceivedUDPPacket_IPv6+0x1e4>
                else
            #endif

            #if ( ipconfigUSE_DNS == 1 ) && ( ipconfigUSE_LLMNR == 1 )
                /* A LLMNR request, check for the destination port. */
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 80165c4:	897b      	ldrh	r3, [r7, #10]
 80165c6:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80165ca:	4293      	cmp	r3, r2
 80165cc:	d006      	beq.n	80165dc <xProcessReceivedUDPPacket_IPv6+0x1d4>
                    ( pxUDPPacket_IPv6->xUDPHeader.usSourcePort == FreeRTOS_htons( ipLLMNR_PORT ) ) )
 80165ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80165d0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80165d2:	b29b      	uxth	r3, r3
                if( ( usPort == FreeRTOS_htons( ipLLMNR_PORT ) ) ||
 80165d4:	f64e 3214 	movw	r2, #60180	@ 0xeb14
 80165d8:	4293      	cmp	r3, r2
 80165da:	d105      	bne.n	80165e8 <xProcessReceivedUDPPacket_IPv6+0x1e0>
                {
                    xReturn = ( BaseType_t ) ulDNSHandlePacket( pxNetworkBuffer );
 80165dc:	68f8      	ldr	r0, [r7, #12]
 80165de:	f7f0 fc4a 	bl	8006e76 <ulDNSHandlePacket>
 80165e2:	4603      	mov	r3, r0
 80165e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80165e6:	e001      	b.n	80165ec <xProcessReceivedUDPPacket_IPv6+0x1e4>
                    xReturn = ( BaseType_t ) ulNBNSHandlePacket( pxNetworkBuffer );
                }
                else
            #endif /* ipconfigUSE_NBNS */
            {
                xReturn = pdFAIL;
 80165e8:	2300      	movs	r3, #0
 80165ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
            }
        }
    } while( ipFALSE_BOOL );

    return xReturn;
 80165ec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
}
 80165ee:	4618      	mov	r0, r3
 80165f0:	3764      	adds	r7, #100	@ 0x64
 80165f2:	46bd      	mov	sp, r7
 80165f4:	bd90      	pop	{r4, r7, pc}
 80165f6:	bf00      	nop
 80165f8:	08025d8c 	.word	0x08025d8c
 80165fc:	08025dc0 	.word	0x08025dc0

08016600 <bIsValidNetworkDescriptor>:
    }
    /*-----------------------------------------------------------*/

#else /* if ( ipconfigTCP_IP_SANITY != 0 ) */
    static UBaseType_t bIsValidNetworkDescriptor( const NetworkBufferDescriptor_t * pxDesc )
    {
 8016600:	b480      	push	{r7}
 8016602:	b083      	sub	sp, #12
 8016604:	af00      	add	r7, sp, #0
 8016606:	6078      	str	r0, [r7, #4]
        ( void ) pxDesc;
        return ( UBaseType_t ) pdTRUE;
 8016608:	2301      	movs	r3, #1
    }
 801660a:	4618      	mov	r0, r3
 801660c:	370c      	adds	r7, #12
 801660e:	46bd      	mov	sp, r7
 8016610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016614:	4770      	bx	lr

08016616 <prvShowWarnings>:
    /*-----------------------------------------------------------*/

    static void prvShowWarnings( void )
    {
 8016616:	b480      	push	{r7}
 8016618:	af00      	add	r7, sp, #0
    }
 801661a:	bf00      	nop
 801661c:	46bd      	mov	sp, r7
 801661e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016622:	4770      	bx	lr

08016624 <xNetworkBuffersInitialise>:
    /*-----------------------------------------------------------*/

#endif /* ipconfigTCP_IP_SANITY */

BaseType_t xNetworkBuffersInitialise( void )
{
 8016624:	b580      	push	{r7, lr}
 8016626:	b082      	sub	sp, #8
 8016628:	af00      	add	r7, sp, #0
    BaseType_t xReturn;
    uint32_t x;

    /* Only initialise the buffers and their associated kernel objects if they
     * have not been initialised before. */
    if( xNetworkBufferSemaphore == NULL )
 801662a:	4b2e      	ldr	r3, [pc, #184]	@ (80166e4 <xNetworkBuffersInitialise+0xc0>)
 801662c:	681b      	ldr	r3, [r3, #0]
 801662e:	2b00      	cmp	r3, #0
 8016630:	d149      	bne.n	80166c6 <xNetworkBuffersInitialise+0xa2>
                ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS,
                &xNetworkBufferSemaphoreBuffer );
        }
        #else
        {
            xNetworkBufferSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS, ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS );
 8016632:	2140      	movs	r1, #64	@ 0x40
 8016634:	2040      	movs	r0, #64	@ 0x40
 8016636:	f7ec fb13 	bl	8002c60 <xQueueCreateCountingSemaphore>
 801663a:	4603      	mov	r3, r0
 801663c:	4a29      	ldr	r2, [pc, #164]	@ (80166e4 <xNetworkBuffersInitialise+0xc0>)
 801663e:	6013      	str	r3, [r2, #0]
        }
        #endif /* configSUPPORT_STATIC_ALLOCATION */

        configASSERT( xNetworkBufferSemaphore != NULL );
 8016640:	4b28      	ldr	r3, [pc, #160]	@ (80166e4 <xNetworkBuffersInitialise+0xc0>)
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d103      	bne.n	8016650 <xNetworkBuffersInitialise+0x2c>
 8016648:	21c3      	movs	r1, #195	@ 0xc3
 801664a:	4827      	ldr	r0, [pc, #156]	@ (80166e8 <xNetworkBuffersInitialise+0xc4>)
 801664c:	f7ea ff10 	bl	8001470 <vAssertCalled>

        if( xNetworkBufferSemaphore != NULL )
 8016650:	4b24      	ldr	r3, [pc, #144]	@ (80166e4 <xNetworkBuffersInitialise+0xc0>)
 8016652:	681b      	ldr	r3, [r3, #0]
 8016654:	2b00      	cmp	r3, #0
 8016656:	d036      	beq.n	80166c6 <xNetworkBuffersInitialise+0xa2>
        {
            vListInitialise( &xFreeBuffersList );
 8016658:	4824      	ldr	r0, [pc, #144]	@ (80166ec <xNetworkBuffersInitialise+0xc8>)
 801665a:	f7ec f927 	bl	80028ac <vListInitialise>

            /* Initialise all the network buffers.  The buffer storage comes
             * from the network interface, and different hardware has different
             * requirements. */
            vNetworkInterfaceAllocateRAMToBuffers( xNetworkBuffers );
 801665e:	4824      	ldr	r0, [pc, #144]	@ (80166f0 <xNetworkBuffersInitialise+0xcc>)
 8016660:	f001 fa24 	bl	8017aac <vNetworkInterfaceAllocateRAMToBuffers>

            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 8016664:	2300      	movs	r3, #0
 8016666:	603b      	str	r3, [r7, #0]
 8016668:	e027      	b.n	80166ba <xNetworkBuffersInitialise+0x96>
            {
                /* Initialise and set the owner of the buffer list items. */
                vListInitialiseItem( &( xNetworkBuffers[ x ].xBufferListItem ) );
 801666a:	683a      	ldr	r2, [r7, #0]
 801666c:	4613      	mov	r3, r2
 801666e:	00db      	lsls	r3, r3, #3
 8016670:	1a9b      	subs	r3, r3, r2
 8016672:	00db      	lsls	r3, r3, #3
 8016674:	4a1e      	ldr	r2, [pc, #120]	@ (80166f0 <xNetworkBuffersInitialise+0xcc>)
 8016676:	4413      	add	r3, r2
 8016678:	4618      	mov	r0, r3
 801667a:	f7ec f937 	bl	80028ec <vListInitialiseItem>
                listSET_LIST_ITEM_OWNER( &( xNetworkBuffers[ x ].xBufferListItem ), &xNetworkBuffers[ x ] );
 801667e:	683a      	ldr	r2, [r7, #0]
 8016680:	4613      	mov	r3, r2
 8016682:	00db      	lsls	r3, r3, #3
 8016684:	1a9b      	subs	r3, r3, r2
 8016686:	00db      	lsls	r3, r3, #3
 8016688:	4a19      	ldr	r2, [pc, #100]	@ (80166f0 <xNetworkBuffersInitialise+0xcc>)
 801668a:	1899      	adds	r1, r3, r2
 801668c:	4818      	ldr	r0, [pc, #96]	@ (80166f0 <xNetworkBuffersInitialise+0xcc>)
 801668e:	683a      	ldr	r2, [r7, #0]
 8016690:	4613      	mov	r3, r2
 8016692:	00db      	lsls	r3, r3, #3
 8016694:	1a9b      	subs	r3, r3, r2
 8016696:	00db      	lsls	r3, r3, #3
 8016698:	4403      	add	r3, r0
 801669a:	330c      	adds	r3, #12
 801669c:	6019      	str	r1, [r3, #0]

                /* Currently, all buffers are available for use. */
                vListInsert( &xFreeBuffersList, &( xNetworkBuffers[ x ].xBufferListItem ) );
 801669e:	683a      	ldr	r2, [r7, #0]
 80166a0:	4613      	mov	r3, r2
 80166a2:	00db      	lsls	r3, r3, #3
 80166a4:	1a9b      	subs	r3, r3, r2
 80166a6:	00db      	lsls	r3, r3, #3
 80166a8:	4a11      	ldr	r2, [pc, #68]	@ (80166f0 <xNetworkBuffersInitialise+0xcc>)
 80166aa:	4413      	add	r3, r2
 80166ac:	4619      	mov	r1, r3
 80166ae:	480f      	ldr	r0, [pc, #60]	@ (80166ec <xNetworkBuffersInitialise+0xc8>)
 80166b0:	f7ec f94d 	bl	800294e <vListInsert>
            for( x = 0U; x < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; x++ )
 80166b4:	683b      	ldr	r3, [r7, #0]
 80166b6:	3301      	adds	r3, #1
 80166b8:	603b      	str	r3, [r7, #0]
 80166ba:	683b      	ldr	r3, [r7, #0]
 80166bc:	2b3f      	cmp	r3, #63	@ 0x3f
 80166be:	d9d4      	bls.n	801666a <xNetworkBuffersInitialise+0x46>
            }

            uxMinimumFreeNetworkBuffers = ( UBaseType_t ) ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS;
 80166c0:	4b0c      	ldr	r3, [pc, #48]	@ (80166f4 <xNetworkBuffersInitialise+0xd0>)
 80166c2:	2240      	movs	r2, #64	@ 0x40
 80166c4:	601a      	str	r2, [r3, #0]
        }
    }

    if( xNetworkBufferSemaphore == NULL )
 80166c6:	4b07      	ldr	r3, [pc, #28]	@ (80166e4 <xNetworkBuffersInitialise+0xc0>)
 80166c8:	681b      	ldr	r3, [r3, #0]
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	d102      	bne.n	80166d4 <xNetworkBuffersInitialise+0xb0>
    {
        xReturn = pdFAIL;
 80166ce:	2300      	movs	r3, #0
 80166d0:	607b      	str	r3, [r7, #4]
 80166d2:	e001      	b.n	80166d8 <xNetworkBuffersInitialise+0xb4>
    }
    else
    {
        xReturn = pdPASS;
 80166d4:	2301      	movs	r3, #1
 80166d6:	607b      	str	r3, [r7, #4]
    }

    return xReturn;
 80166d8:	687b      	ldr	r3, [r7, #4]
}
 80166da:	4618      	mov	r0, r3
 80166dc:	3708      	adds	r7, #8
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}
 80166e2:	bf00      	nop
 80166e4:	20002164 	.word	0x20002164
 80166e8:	08025e00 	.word	0x08025e00
 80166ec:	2000134c 	.word	0x2000134c
 80166f0:	20001364 	.word	0x20001364
 80166f4:	20001360 	.word	0x20001360

080166f8 <pxGetNetworkBufferWithDescriptor>:
/*-----------------------------------------------------------*/

NetworkBufferDescriptor_t * pxGetNetworkBufferWithDescriptor( size_t xRequestedSizeBytes,
                                                              TickType_t xBlockTimeTicks )
{
 80166f8:	b580      	push	{r7, lr}
 80166fa:	b086      	sub	sp, #24
 80166fc:	af00      	add	r7, sp, #0
 80166fe:	6078      	str	r0, [r7, #4]
 8016700:	6039      	str	r1, [r7, #0]
    NetworkBufferDescriptor_t * pxReturn = NULL;
 8016702:	2300      	movs	r3, #0
 8016704:	617b      	str	r3, [r7, #20]
    BaseType_t xInvalid = pdFALSE;
 8016706:	2300      	movs	r3, #0
 8016708:	613b      	str	r3, [r7, #16]

    /* The current implementation only has a single size memory block, so
     * the requested size parameter is not used (yet). */
    ( void ) xRequestedSizeBytes;

    if( xNetworkBufferSemaphore != NULL )
 801670a:	4b2a      	ldr	r3, [pc, #168]	@ (80167b4 <pxGetNetworkBufferWithDescriptor+0xbc>)
 801670c:	681b      	ldr	r3, [r3, #0]
 801670e:	2b00      	cmp	r3, #0
 8016710:	d04b      	beq.n	80167aa <pxGetNetworkBufferWithDescriptor+0xb2>
    {
        /* If there is a semaphore available, there is a network buffer
         * available. */
        if( xSemaphoreTake( xNetworkBufferSemaphore, xBlockTimeTicks ) == pdPASS )
 8016712:	4b28      	ldr	r3, [pc, #160]	@ (80167b4 <pxGetNetworkBufferWithDescriptor+0xbc>)
 8016714:	681b      	ldr	r3, [r3, #0]
 8016716:	6839      	ldr	r1, [r7, #0]
 8016718:	4618      	mov	r0, r3
 801671a:	f7ec fc83 	bl	8003024 <xQueueSemaphoreTake>
 801671e:	4603      	mov	r3, r0
 8016720:	2b01      	cmp	r3, #1
 8016722:	d13d      	bne.n	80167a0 <pxGetNetworkBufferWithDescriptor+0xa8>
        {
            /* Protect the structure as it is accessed from tasks and
             * interrupts. */
            ipconfigBUFFER_ALLOC_LOCK();
 8016724:	f7ef f814 	bl	8005750 <vPortEnterCritical>
            {
                pxReturn = ( NetworkBufferDescriptor_t * ) listGET_OWNER_OF_HEAD_ENTRY( &xFreeBuffersList );
 8016728:	4b23      	ldr	r3, [pc, #140]	@ (80167b8 <pxGetNetworkBufferWithDescriptor+0xc0>)
 801672a:	68db      	ldr	r3, [r3, #12]
 801672c:	68db      	ldr	r3, [r3, #12]
 801672e:	617b      	str	r3, [r7, #20]

                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8016730:	6978      	ldr	r0, [r7, #20]
 8016732:	f7ff ff65 	bl	8016600 <bIsValidNetworkDescriptor>
 8016736:	4603      	mov	r3, r0
 8016738:	2b00      	cmp	r3, #0
 801673a:	d009      	beq.n	8016750 <pxGetNetworkBufferWithDescriptor+0x58>
                    listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxReturn->xBufferListItem ) ) )
 801673c:	697b      	ldr	r3, [r7, #20]
 801673e:	691b      	ldr	r3, [r3, #16]
                if( ( bIsValidNetworkDescriptor( pxReturn ) != pdFALSE_UNSIGNED ) &&
 8016740:	4a1d      	ldr	r2, [pc, #116]	@ (80167b8 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016742:	4293      	cmp	r3, r2
 8016744:	d104      	bne.n	8016750 <pxGetNetworkBufferWithDescriptor+0x58>
                {
                    ( void ) uxListRemove( &( pxReturn->xBufferListItem ) );
 8016746:	697b      	ldr	r3, [r7, #20]
 8016748:	4618      	mov	r0, r3
 801674a:	f7ec f939 	bl	80029c0 <uxListRemove>
 801674e:	e001      	b.n	8016754 <pxGetNetworkBufferWithDescriptor+0x5c>
                }
                else
                {
                    xInvalid = pdTRUE;
 8016750:	2301      	movs	r3, #1
 8016752:	613b      	str	r3, [r7, #16]
                }
            }
            ipconfigBUFFER_ALLOC_UNLOCK();
 8016754:	f7ef f828 	bl	80057a8 <vPortExitCritical>

            if( xInvalid == pdTRUE )
 8016758:	693b      	ldr	r3, [r7, #16]
 801675a:	2b01      	cmp	r3, #1
 801675c:	d10b      	bne.n	8016776 <pxGetNetworkBufferWithDescriptor+0x7e>
                 * above says this can be called from an interrupt too) */

                /* _HT_ The function shall not be called from an ISR. Comment
                 * was indeed misleading. Hopefully clear now?
                 * So the printf()is OK here. */
                FreeRTOS_debug_printf( ( "pxGetNetworkBufferWithDescriptor: INVALID BUFFER: %p (valid %lu)\n",
 801675e:	6978      	ldr	r0, [r7, #20]
 8016760:	f7ff ff4e 	bl	8016600 <bIsValidNetworkDescriptor>
 8016764:	4603      	mov	r3, r0
 8016766:	461a      	mov	r2, r3
 8016768:	6979      	ldr	r1, [r7, #20]
 801676a:	4814      	ldr	r0, [pc, #80]	@ (80167bc <pxGetNetworkBufferWithDescriptor+0xc4>)
 801676c:	f00a fa88 	bl	8020c80 <lUDPLoggingPrintf>
                                         pxReturn, bIsValidNetworkDescriptor( pxReturn ) ) );
                pxReturn = NULL;
 8016770:	2300      	movs	r3, #0
 8016772:	617b      	str	r3, [r7, #20]
 8016774:	e019      	b.n	80167aa <pxGetNetworkBufferWithDescriptor+0xb2>
            }
            else
            {
                /* Reading UBaseType_t, no critical section needed. */
                uxCount = listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016776:	4b10      	ldr	r3, [pc, #64]	@ (80167b8 <pxGetNetworkBufferWithDescriptor+0xc0>)
 8016778:	681b      	ldr	r3, [r3, #0]
 801677a:	60fb      	str	r3, [r7, #12]

                /* For stats, latch the lowest number of network buffers since
                 * booting. */
                if( uxMinimumFreeNetworkBuffers > uxCount )
 801677c:	4b10      	ldr	r3, [pc, #64]	@ (80167c0 <pxGetNetworkBufferWithDescriptor+0xc8>)
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	68fa      	ldr	r2, [r7, #12]
 8016782:	429a      	cmp	r2, r3
 8016784:	d202      	bcs.n	801678c <pxGetNetworkBufferWithDescriptor+0x94>
                {
                    uxMinimumFreeNetworkBuffers = uxCount;
 8016786:	4a0e      	ldr	r2, [pc, #56]	@ (80167c0 <pxGetNetworkBufferWithDescriptor+0xc8>)
 8016788:	68fb      	ldr	r3, [r7, #12]
 801678a:	6013      	str	r3, [r2, #0]
                }

                pxReturn->xDataLength = xRequestedSizeBytes;
 801678c:	697b      	ldr	r3, [r7, #20]
 801678e:	687a      	ldr	r2, [r7, #4]
 8016790:	629a      	str	r2, [r3, #40]	@ 0x28
                pxReturn->pxInterface = NULL;
 8016792:	697b      	ldr	r3, [r7, #20]
 8016794:	2200      	movs	r2, #0
 8016796:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReturn->pxEndPoint = NULL;
 8016798:	697b      	ldr	r3, [r7, #20]
 801679a:	2200      	movs	r2, #0
 801679c:	631a      	str	r2, [r3, #48]	@ 0x30
 801679e:	e004      	b.n	80167aa <pxGetNetworkBufferWithDescriptor+0xb2>
            iptraceNETWORK_BUFFER_OBTAINED( pxReturn );
        }
        else
        {
            /* lint wants to see at least a comment. */
            iptraceFAILED_TO_OBTAIN_NETWORK_BUFFER();
 80167a0:	f240 113b 	movw	r1, #315	@ 0x13b
 80167a4:	4807      	ldr	r0, [pc, #28]	@ (80167c4 <pxGetNetworkBufferWithDescriptor+0xcc>)
 80167a6:	f7ea fe63 	bl	8001470 <vAssertCalled>
        }
    }

    return pxReturn;
 80167aa:	697b      	ldr	r3, [r7, #20]
}
 80167ac:	4618      	mov	r0, r3
 80167ae:	3718      	adds	r7, #24
 80167b0:	46bd      	mov	sp, r7
 80167b2:	bd80      	pop	{r7, pc}
 80167b4:	20002164 	.word	0x20002164
 80167b8:	2000134c 	.word	0x2000134c
 80167bc:	08025e4c 	.word	0x08025e4c
 80167c0:	20001360 	.word	0x20001360
 80167c4:	08025e00 	.word	0x08025e00

080167c8 <vReleaseNetworkBufferAndDescriptor>:
    return xHigherPriorityTaskWoken;
}
/*-----------------------------------------------------------*/

void vReleaseNetworkBufferAndDescriptor( NetworkBufferDescriptor_t * const pxNetworkBuffer )
{
 80167c8:	b580      	push	{r7, lr}
 80167ca:	b084      	sub	sp, #16
 80167cc:	af00      	add	r7, sp, #0
 80167ce:	6078      	str	r0, [r7, #4]
    BaseType_t xListItemAlreadyInFreeList;

    if( bIsValidNetworkDescriptor( pxNetworkBuffer ) == pdFALSE_UNSIGNED )
 80167d0:	6878      	ldr	r0, [r7, #4]
 80167d2:	f7ff ff15 	bl	8016600 <bIsValidNetworkDescriptor>
 80167d6:	4603      	mov	r3, r0
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d104      	bne.n	80167e6 <vReleaseNetworkBufferAndDescriptor+0x1e>
    {
        FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: Invalid buffer %p\n", pxNetworkBuffer ) );
 80167dc:	6879      	ldr	r1, [r7, #4]
 80167de:	4819      	ldr	r0, [pc, #100]	@ (8016844 <vReleaseNetworkBufferAndDescriptor+0x7c>)
 80167e0:	f00a fa4e 	bl	8020c80 <lUDPLoggingPrintf>
            prvShowWarnings();
        }

        iptraceNETWORK_BUFFER_RELEASED( pxNetworkBuffer );
    }
}
 80167e4:	e029      	b.n	801683a <vReleaseNetworkBufferAndDescriptor+0x72>
        ipconfigBUFFER_ALLOC_LOCK();
 80167e6:	f7ee ffb3 	bl	8005750 <vPortEnterCritical>
                xListItemAlreadyInFreeList = listIS_CONTAINED_WITHIN( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	691b      	ldr	r3, [r3, #16]
 80167ee:	4a16      	ldr	r2, [pc, #88]	@ (8016848 <vReleaseNetworkBufferAndDescriptor+0x80>)
 80167f0:	4293      	cmp	r3, r2
 80167f2:	d101      	bne.n	80167f8 <vReleaseNetworkBufferAndDescriptor+0x30>
 80167f4:	2301      	movs	r3, #1
 80167f6:	e000      	b.n	80167fa <vReleaseNetworkBufferAndDescriptor+0x32>
 80167f8:	2300      	movs	r3, #0
 80167fa:	60fb      	str	r3, [r7, #12]
                if( xListItemAlreadyInFreeList == pdFALSE )
 80167fc:	68fb      	ldr	r3, [r7, #12]
 80167fe:	2b00      	cmp	r3, #0
 8016800:	d104      	bne.n	801680c <vReleaseNetworkBufferAndDescriptor+0x44>
                    vListInsertEnd( &xFreeBuffersList, &( pxNetworkBuffer->xBufferListItem ) );
 8016802:	687b      	ldr	r3, [r7, #4]
 8016804:	4619      	mov	r1, r3
 8016806:	4810      	ldr	r0, [pc, #64]	@ (8016848 <vReleaseNetworkBufferAndDescriptor+0x80>)
 8016808:	f7ec f87d 	bl	8002906 <vListInsertEnd>
        ipconfigBUFFER_ALLOC_UNLOCK();
 801680c:	f7ee ffcc 	bl	80057a8 <vPortExitCritical>
        if( xListItemAlreadyInFreeList )
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d008      	beq.n	8016828 <vReleaseNetworkBufferAndDescriptor+0x60>
            FreeRTOS_debug_printf( ( "vReleaseNetworkBufferAndDescriptor: %p ALREADY RELEASED (now %lu)\n",
 8016816:	f000 f829 	bl	801686c <uxGetNumberOfFreeNetworkBuffers>
 801681a:	4603      	mov	r3, r0
 801681c:	461a      	mov	r2, r3
 801681e:	6879      	ldr	r1, [r7, #4]
 8016820:	480a      	ldr	r0, [pc, #40]	@ (801684c <vReleaseNetworkBufferAndDescriptor+0x84>)
 8016822:	f00a fa2d 	bl	8020c80 <lUDPLoggingPrintf>
}
 8016826:	e008      	b.n	801683a <vReleaseNetworkBufferAndDescriptor+0x72>
            ( void ) xSemaphoreGive( xNetworkBufferSemaphore );
 8016828:	4b09      	ldr	r3, [pc, #36]	@ (8016850 <vReleaseNetworkBufferAndDescriptor+0x88>)
 801682a:	6818      	ldr	r0, [r3, #0]
 801682c:	2300      	movs	r3, #0
 801682e:	2200      	movs	r2, #0
 8016830:	2100      	movs	r1, #0
 8016832:	f7ec fa3f 	bl	8002cb4 <xQueueGenericSend>
            prvShowWarnings();
 8016836:	f7ff feee 	bl	8016616 <prvShowWarnings>
}
 801683a:	bf00      	nop
 801683c:	3710      	adds	r7, #16
 801683e:	46bd      	mov	sp, r7
 8016840:	bd80      	pop	{r7, pc}
 8016842:	bf00      	nop
 8016844:	08025e90 	.word	0x08025e90
 8016848:	2000134c 	.word	0x2000134c
 801684c:	08025ec8 	.word	0x08025ec8
 8016850:	20002164 	.word	0x20002164

08016854 <uxGetMinimumFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetMinimumFreeNetworkBuffers( void )
{
 8016854:	b480      	push	{r7}
 8016856:	af00      	add	r7, sp, #0
    return uxMinimumFreeNetworkBuffers;
 8016858:	4b03      	ldr	r3, [pc, #12]	@ (8016868 <uxGetMinimumFreeNetworkBuffers+0x14>)
 801685a:	681b      	ldr	r3, [r3, #0]
}
 801685c:	4618      	mov	r0, r3
 801685e:	46bd      	mov	sp, r7
 8016860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016864:	4770      	bx	lr
 8016866:	bf00      	nop
 8016868:	20001360 	.word	0x20001360

0801686c <uxGetNumberOfFreeNetworkBuffers>:
/*-----------------------------------------------------------*/

UBaseType_t uxGetNumberOfFreeNetworkBuffers( void )
{
 801686c:	b480      	push	{r7}
 801686e:	af00      	add	r7, sp, #0
    return listCURRENT_LIST_LENGTH( &xFreeBuffersList );
 8016870:	4b03      	ldr	r3, [pc, #12]	@ (8016880 <uxGetNumberOfFreeNetworkBuffers+0x14>)
 8016872:	681b      	ldr	r3, [r3, #0]
}
 8016874:	4618      	mov	r0, r3
 8016876:	46bd      	mov	sp, r7
 8016878:	f85d 7b04 	ldr.w	r7, [sp], #4
 801687c:	4770      	bx	lr
 801687e:	bf00      	nop
 8016880:	2000134c 	.word	0x2000134c

08016884 <xHas_1F_PHYSPCS>:
/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask );

static BaseType_t xHas_1F_PHYSPCS( uint32_t ulPhyID )
{
 8016884:	b480      	push	{r7}
 8016886:	b085      	sub	sp, #20
 8016888:	af00      	add	r7, sp, #0
 801688a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 801688c:	2300      	movs	r3, #0
 801688e:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	4a11      	ldr	r2, [pc, #68]	@ (80168d8 <xHas_1F_PHYSPCS+0x54>)
 8016894:	4293      	cmp	r3, r2
 8016896:	d016      	beq.n	80168c6 <xHas_1F_PHYSPCS+0x42>
 8016898:	687b      	ldr	r3, [r7, #4]
 801689a:	4a0f      	ldr	r2, [pc, #60]	@ (80168d8 <xHas_1F_PHYSPCS+0x54>)
 801689c:	4293      	cmp	r3, r2
 801689e:	d80f      	bhi.n	80168c0 <xHas_1F_PHYSPCS+0x3c>
 80168a0:	687b      	ldr	r3, [r7, #4]
 80168a2:	4a0e      	ldr	r2, [pc, #56]	@ (80168dc <xHas_1F_PHYSPCS+0x58>)
 80168a4:	4293      	cmp	r3, r2
 80168a6:	d00e      	beq.n	80168c6 <xHas_1F_PHYSPCS+0x42>
 80168a8:	687b      	ldr	r3, [r7, #4]
 80168aa:	4a0c      	ldr	r2, [pc, #48]	@ (80168dc <xHas_1F_PHYSPCS+0x58>)
 80168ac:	4293      	cmp	r3, r2
 80168ae:	d807      	bhi.n	80168c0 <xHas_1F_PHYSPCS+0x3c>
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	4a0b      	ldr	r2, [pc, #44]	@ (80168e0 <xHas_1F_PHYSPCS+0x5c>)
 80168b4:	4293      	cmp	r3, r2
 80168b6:	d006      	beq.n	80168c6 <xHas_1F_PHYSPCS+0x42>
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	4a0a      	ldr	r2, [pc, #40]	@ (80168e4 <xHas_1F_PHYSPCS+0x60>)
 80168bc:	4293      	cmp	r3, r2
 80168be:	d002      	beq.n	80168c6 <xHas_1F_PHYSPCS+0x42>
        case PHY_ID_KSZ8081MNXIA:

        case PHY_ID_KSZ8863:
        default:
            /* Most PHY's have a 1F_PHYSPCS */
            xResult = pdTRUE;
 80168c0:	2301      	movs	r3, #1
 80168c2:	60fb      	str	r3, [r7, #12]
            break;
 80168c4:	e000      	b.n	80168c8 <xHas_1F_PHYSPCS+0x44>
        case PHY_ID_DP83848I:
        case PHY_ID_DP83TC811S:
        case PHY_ID_TM4C129X:
        case PHY_ID_MV88E6071:
            /* Has no 0x1F register "PHY Special Control Status". */
            break;
 80168c6:	bf00      	nop
    }

    return xResult;
 80168c8:	68fb      	ldr	r3, [r7, #12]
}
 80168ca:	4618      	mov	r0, r3
 80168cc:	3714      	adds	r7, #20
 80168ce:	46bd      	mov	sp, r7
 80168d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80168d4:	4770      	bx	lr
 80168d6:	bf00      	nop
 80168d8:	ff000710 	.word	0xff000710
 80168dc:	2000a250 	.word	0x2000a250
 80168e0:	20005c90 	.word	0x20005c90
 80168e4:	2000a221 	.word	0x2000a221

080168e8 <xHas_19_PHYCR>:
/*-----------------------------------------------------------*/

static BaseType_t xHas_19_PHYCR( uint32_t ulPhyID )
{
 80168e8:	b480      	push	{r7}
 80168ea:	b085      	sub	sp, #20
 80168ec:	af00      	add	r7, sp, #0
 80168ee:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFALSE;
 80168f0:	2300      	movs	r3, #0
 80168f2:	60fb      	str	r3, [r7, #12]

    switch( ulPhyID )
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	4a0d      	ldr	r2, [pc, #52]	@ (801692c <xHas_19_PHYCR+0x44>)
 80168f8:	4293      	cmp	r3, r2
 80168fa:	d00b      	beq.n	8016914 <xHas_19_PHYCR+0x2c>
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	4a0b      	ldr	r2, [pc, #44]	@ (801692c <xHas_19_PHYCR+0x44>)
 8016900:	4293      	cmp	r3, r2
 8016902:	d80a      	bhi.n	801691a <xHas_19_PHYCR+0x32>
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	4a0a      	ldr	r2, [pc, #40]	@ (8016930 <xHas_19_PHYCR+0x48>)
 8016908:	4293      	cmp	r3, r2
 801690a:	d003      	beq.n	8016914 <xHas_19_PHYCR+0x2c>
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	4a09      	ldr	r2, [pc, #36]	@ (8016934 <xHas_19_PHYCR+0x4c>)
 8016910:	4293      	cmp	r3, r2
 8016912:	d102      	bne.n	801691a <xHas_19_PHYCR+0x32>
    {
        case PHY_ID_LAN8742A:
        case PHY_ID_DP83848I:
        case PHY_ID_TM4C129X:
            xResult = pdTRUE;
 8016914:	2301      	movs	r3, #1
 8016916:	60fb      	str	r3, [r7, #12]
            break;
 8016918:	e000      	b.n	801691c <xHas_19_PHYCR+0x34>

        case PHY_ID_MV88E6071: /* Marvell 88E6071 */
        default:
            /* Most PHY's do not have a 19_PHYCR */
            break;
 801691a:	bf00      	nop
    }

    return xResult;
 801691c:	68fb      	ldr	r3, [r7, #12]
}
 801691e:	4618      	mov	r0, r3
 8016920:	3714      	adds	r7, #20
 8016922:	46bd      	mov	sp, r7
 8016924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016928:	4770      	bx	lr
 801692a:	bf00      	nop
 801692c:	2000a221 	.word	0x2000a221
 8016930:	0007c130 	.word	0x0007c130
 8016934:	20005c90 	.word	0x20005c90

08016938 <vPhyInitialise>:

/* Initialise the struct and assign a PHY-read and -write function. */
void vPhyInitialise( EthernetPhy_t * pxPhyObject,
                     xApplicationPhyReadHook_t fnPhyRead,
                     xApplicationPhyWriteHook_t fnPhyWrite )
{
 8016938:	b580      	push	{r7, lr}
 801693a:	b084      	sub	sp, #16
 801693c:	af00      	add	r7, sp, #0
 801693e:	60f8      	str	r0, [r7, #12]
 8016940:	60b9      	str	r1, [r7, #8]
 8016942:	607a      	str	r2, [r7, #4]
    memset( ( void * ) pxPhyObject, 0, sizeof( *pxPhyObject ) );
 8016944:	2240      	movs	r2, #64	@ 0x40
 8016946:	2100      	movs	r1, #0
 8016948:	68f8      	ldr	r0, [r7, #12]
 801694a:	f00a fcc2 	bl	80212d2 <memset>

    pxPhyObject->fnPhyRead = fnPhyRead;
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	68ba      	ldr	r2, [r7, #8]
 8016952:	601a      	str	r2, [r3, #0]
    pxPhyObject->fnPhyWrite = fnPhyWrite;
 8016954:	68fb      	ldr	r3, [r7, #12]
 8016956:	687a      	ldr	r2, [r7, #4]
 8016958:	605a      	str	r2, [r3, #4]
}
 801695a:	bf00      	nop
 801695c:	3710      	adds	r7, #16
 801695e:	46bd      	mov	sp, r7
 8016960:	bd80      	pop	{r7, pc}
	...

08016964 <xPhyDiscover>:
/*-----------------------------------------------------------*/

/* Discover all PHY's connected by polling 32 indexes ( zero-based ) */
BaseType_t xPhyDiscover( EthernetPhy_t * pxPhyObject )
{
 8016964:	b580      	push	{r7, lr}
 8016966:	b086      	sub	sp, #24
 8016968:	af00      	add	r7, sp, #0
 801696a:	6078      	str	r0, [r7, #4]
    BaseType_t xPhyAddress;

    pxPhyObject->xPortCount = 0;
 801696c:	687b      	ldr	r3, [r7, #4]
 801696e:	2200      	movs	r2, #0
 8016970:	629a      	str	r2, [r3, #40]	@ 0x28

    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 8016972:	2300      	movs	r3, #0
 8016974:	617b      	str	r3, [r7, #20]
 8016976:	e03a      	b.n	80169ee <xPhyDiscover+0x8a>
    {
        uint32_t ulLowerID = 0U;
 8016978:	2300      	movs	r3, #0
 801697a:	60fb      	str	r3, [r7, #12]

        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_03_PHYSID2, &ulLowerID );
 801697c:	687b      	ldr	r3, [r7, #4]
 801697e:	681b      	ldr	r3, [r3, #0]
 8016980:	f107 020c 	add.w	r2, r7, #12
 8016984:	2103      	movs	r1, #3
 8016986:	6978      	ldr	r0, [r7, #20]
 8016988:	4798      	blx	r3

        /* A valid PHY id can not be all zeros or all ones. */
        if( ( ulLowerID != ( uint16_t ) ~0U ) && ( ulLowerID != ( uint16_t ) 0U ) )
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8016990:	4293      	cmp	r3, r2
 8016992:	d029      	beq.n	80169e8 <xPhyDiscover+0x84>
 8016994:	68fb      	ldr	r3, [r7, #12]
 8016996:	2b00      	cmp	r3, #0
 8016998:	d026      	beq.n	80169e8 <xPhyDiscover+0x84>
        {
            uint32_t ulUpperID;
            uint32_t ulPhyID;

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_02_PHYSID1, &ulUpperID );
 801699a:	687b      	ldr	r3, [r7, #4]
 801699c:	681b      	ldr	r3, [r3, #0]
 801699e:	f107 0208 	add.w	r2, r7, #8
 80169a2:	2102      	movs	r1, #2
 80169a4:	6978      	ldr	r0, [r7, #20]
 80169a6:	4798      	blx	r3
            ulPhyID = ( ( ( uint32_t ) ulUpperID ) << 16 ) | ( ulLowerID & 0xFFF0U );
 80169a8:	68bb      	ldr	r3, [r7, #8]
 80169aa:	041a      	lsls	r2, r3, #16
 80169ac:	68f9      	ldr	r1, [r7, #12]
 80169ae:	f64f 73f0 	movw	r3, #65520	@ 0xfff0
 80169b2:	400b      	ands	r3, r1
 80169b4:	4313      	orrs	r3, r2
 80169b6:	613b      	str	r3, [r7, #16]

            pxPhyObject->ucPhyIndexes[ pxPhyObject->xPortCount ] = ( uint8_t ) xPhyAddress;
 80169b8:	687b      	ldr	r3, [r7, #4]
 80169ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169bc:	697a      	ldr	r2, [r7, #20]
 80169be:	b2d1      	uxtb	r1, r2
 80169c0:	687a      	ldr	r2, [r7, #4]
 80169c2:	4413      	add	r3, r2
 80169c4:	460a      	mov	r2, r1
 80169c6:	761a      	strb	r2, [r3, #24]
            pxPhyObject->ulPhyIDs[ pxPhyObject->xPortCount ] = ulPhyID;
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	3202      	adds	r2, #2
 80169d0:	6939      	ldr	r1, [r7, #16]
 80169d2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

            pxPhyObject->xPortCount++;
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169da:	1c5a      	adds	r2, r3, #1
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	629a      	str	r2, [r3, #40]	@ 0x28

            /* See if there is more storage space. */
            if( pxPhyObject->xPortCount == ipconfigPHY_MAX_PORTS )
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169e4:	2b04      	cmp	r3, #4
 80169e6:	d005      	beq.n	80169f4 <xPhyDiscover+0x90>
    for( xPhyAddress = phyMIN_PHY_ADDRESS; xPhyAddress <= phyMAX_PHY_ADDRESS; xPhyAddress++ )
 80169e8:	697b      	ldr	r3, [r7, #20]
 80169ea:	3301      	adds	r3, #1
 80169ec:	617b      	str	r3, [r7, #20]
 80169ee:	697b      	ldr	r3, [r7, #20]
 80169f0:	2b1f      	cmp	r3, #31
 80169f2:	ddc1      	ble.n	8016978 <xPhyDiscover+0x14>
                break;
            }
        }
    }

    if( pxPhyObject->xPortCount > 0 )
 80169f4:	687b      	ldr	r3, [r7, #4]
 80169f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80169f8:	2b00      	cmp	r3, #0
 80169fa:	dd05      	ble.n	8016a08 <xPhyDiscover+0xa4>
    {
        FreeRTOS_printf( ( "PHY ID %X\n", ( unsigned int ) pxPhyObject->ulPhyIDs[ 0 ] ) );
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	689b      	ldr	r3, [r3, #8]
 8016a00:	4619      	mov	r1, r3
 8016a02:	4804      	ldr	r0, [pc, #16]	@ (8016a14 <xPhyDiscover+0xb0>)
 8016a04:	f00a f93c 	bl	8020c80 <lUDPLoggingPrintf>
    }

    return pxPhyObject->xPortCount;
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
}
 8016a0c:	4618      	mov	r0, r3
 8016a0e:	3718      	adds	r7, #24
 8016a10:	46bd      	mov	sp, r7
 8016a12:	bd80      	pop	{r7, pc}
 8016a14:	08025f0c 	.word	0x08025f0c

08016a18 <xPhyReset>:
/*-----------------------------------------------------------*/

/* Send a reset command to a set of PHY-ports. */
static uint32_t xPhyReset( EthernetPhy_t * pxPhyObject,
                           uint32_t ulPhyMask )
{
 8016a18:	b580      	push	{r7, lr}
 8016a1a:	b08c      	sub	sp, #48	@ 0x30
 8016a1c:	af00      	add	r7, sp, #0
 8016a1e:	6078      	str	r0, [r7, #4]
 8016a20:	6039      	str	r1, [r7, #0]
    TickType_t xRemainingTime;
    TimeOut_t xTimer;
    BaseType_t xPhyIndex;

    /* A bit-mask of PHY ports that are ready. */
    ulDoneMask = 0U;
 8016a22:	2300      	movs	r3, #0
 8016a24:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* Set the RESET bits high. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016a26:	2300      	movs	r3, #0
 8016a28:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016a2a:	e017      	b.n	8016a5c <xPhyReset+0x44>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016a2c:	687a      	ldr	r2, [r7, #4]
 8016a2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a30:	4413      	add	r3, r2
 8016a32:	3318      	adds	r3, #24
 8016a34:	781b      	ldrb	r3, [r3, #0]
 8016a36:	61fb      	str	r3, [r7, #28]

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016a38:	687b      	ldr	r3, [r7, #4]
 8016a3a:	681b      	ldr	r3, [r3, #0]
 8016a3c:	f107 0218 	add.w	r2, r7, #24
 8016a40:	2100      	movs	r1, #0
 8016a42:	69f8      	ldr	r0, [r7, #28]
 8016a44:	4798      	blx	r3
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig | phyBMCR_RESET );
 8016a46:	687b      	ldr	r3, [r7, #4]
 8016a48:	685b      	ldr	r3, [r3, #4]
 8016a4a:	69ba      	ldr	r2, [r7, #24]
 8016a4c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8016a50:	2100      	movs	r1, #0
 8016a52:	69f8      	ldr	r0, [r7, #28]
 8016a54:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016a56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a58:	3301      	adds	r3, #1
 8016a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016a5c:	687b      	ldr	r3, [r7, #4]
 8016a5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a60:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016a62:	429a      	cmp	r2, r3
 8016a64:	dbe2      	blt.n	8016a2c <xPhyReset+0x14>
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_RESET_TIME_MS );
 8016a66:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8016a6a:	617b      	str	r3, [r7, #20]
    vTaskSetTimeOutState( &xTimer );
 8016a6c:	f107 030c 	add.w	r3, r7, #12
 8016a70:	4618      	mov	r0, r3
 8016a72:	f7ed fcab 	bl	80043cc <vTaskSetTimeOutState>

    /* The reset should last less than a second. */
    for( ; ; )
    {
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016a76:	2300      	movs	r3, #0
 8016a78:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016a7a:	e01f      	b.n	8016abc <xPhyReset+0xa4>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016a7c:	687a      	ldr	r2, [r7, #4]
 8016a7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016a80:	4413      	add	r3, r2
 8016a82:	3318      	adds	r3, #24
 8016a84:	781b      	ldrb	r3, [r3, #0]
 8016a86:	623b      	str	r3, [r7, #32]

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016a88:	687b      	ldr	r3, [r7, #4]
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	f107 0218 	add.w	r2, r7, #24
 8016a90:	2100      	movs	r1, #0
 8016a92:	6a38      	ldr	r0, [r7, #32]
 8016a94:	4798      	blx	r3

            if( ( ulConfig & phyBMCR_RESET ) == 0 )
 8016a96:	69bb      	ldr	r3, [r7, #24]
 8016a98:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d10a      	bne.n	8016ab6 <xPhyReset+0x9e>
            {
                FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET %d ready\n", ( int ) xPhyIndex ) );
 8016aa0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8016aa2:	482d      	ldr	r0, [pc, #180]	@ (8016b58 <xPhyReset+0x140>)
 8016aa4:	f00a f8ec 	bl	8020c80 <lUDPLoggingPrintf>
                ulDoneMask |= ( 1U << xPhyIndex );
 8016aa8:	2201      	movs	r2, #1
 8016aaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016aac:	fa02 f303 	lsl.w	r3, r2, r3
 8016ab0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016ab2:	4313      	orrs	r3, r2
 8016ab4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016ab6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016ab8:	3301      	adds	r3, #1
 8016aba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016abc:	687b      	ldr	r3, [r7, #4]
 8016abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ac0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016ac2:	429a      	cmp	r2, r3
 8016ac4:	dbda      	blt.n	8016a7c <xPhyReset+0x64>
            }
        }

        if( ulDoneMask == ulPhyMask )
 8016ac6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016ac8:	683b      	ldr	r3, [r7, #0]
 8016aca:	429a      	cmp	r2, r3
 8016acc:	d013      	beq.n	8016af6 <xPhyReset+0xde>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8016ace:	f107 0214 	add.w	r2, r7, #20
 8016ad2:	f107 030c 	add.w	r3, r7, #12
 8016ad6:	4611      	mov	r1, r2
 8016ad8:	4618      	mov	r0, r3
 8016ada:	f7ed fcaf 	bl	800443c <xTaskCheckForTimeOut>
 8016ade:	4603      	mov	r3, r0
 8016ae0:	2b00      	cmp	r3, #0
 8016ae2:	d004      	beq.n	8016aee <xPhyReset+0xd6>
        {
            FreeRTOS_printf( ( "xPhyReset: phyBMCR_RESET timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8016ae4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016ae6:	481d      	ldr	r0, [pc, #116]	@ (8016b5c <xPhyReset+0x144>)
 8016ae8:	f00a f8ca 	bl	8020c80 <lUDPLoggingPrintf>
            break;
 8016aec:	e004      	b.n	8016af8 <xPhyReset+0xe0>
        }

        /* Block for a while */
        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016aee:	2032      	movs	r0, #50	@ 0x32
 8016af0:	f7ec fef8 	bl	80038e4 <vTaskDelay>
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016af4:	e7bf      	b.n	8016a76 <xPhyReset+0x5e>
            break;
 8016af6:	bf00      	nop
    }

    /* Clear the reset bits. */
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016af8:	2300      	movs	r3, #0
 8016afa:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016afc:	e01e      	b.n	8016b3c <xPhyReset+0x124>
    {
        if( ( ulDoneMask & ( 1U << xPhyIndex ) ) == 0U )
 8016afe:	2201      	movs	r2, #1
 8016b00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b02:	409a      	lsls	r2, r3
 8016b04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016b06:	4013      	ands	r3, r2
 8016b08:	2b00      	cmp	r3, #0
 8016b0a:	d114      	bne.n	8016b36 <xPhyReset+0x11e>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016b0c:	687a      	ldr	r2, [r7, #4]
 8016b0e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b10:	4413      	add	r3, r2
 8016b12:	3318      	adds	r3, #24
 8016b14:	781b      	ldrb	r3, [r3, #0]
 8016b16:	627b      	str	r3, [r7, #36]	@ 0x24

            /* The reset operation timed out, clear the bit manually. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016b18:	687b      	ldr	r3, [r7, #4]
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	f107 0218 	add.w	r2, r7, #24
 8016b20:	2100      	movs	r1, #0
 8016b22:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016b24:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, ulConfig & ~phyBMCR_RESET );
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	685b      	ldr	r3, [r3, #4]
 8016b2a:	69ba      	ldr	r2, [r7, #24]
 8016b2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8016b30:	2100      	movs	r1, #0
 8016b32:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8016b34:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016b36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016b38:	3301      	adds	r3, #1
 8016b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016b3c:	687b      	ldr	r3, [r7, #4]
 8016b3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016b40:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8016b42:	429a      	cmp	r2, r3
 8016b44:	dbdb      	blt.n	8016afe <xPhyReset+0xe6>
        }
    }

    vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016b46:	2032      	movs	r0, #50	@ 0x32
 8016b48:	f7ec fecc 	bl	80038e4 <vTaskDelay>

    return ulDoneMask;
 8016b4c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8016b4e:	4618      	mov	r0, r3
 8016b50:	3730      	adds	r7, #48	@ 0x30
 8016b52:	46bd      	mov	sp, r7
 8016b54:	bd80      	pop	{r7, pc}
 8016b56:	bf00      	nop
 8016b58:	08025f18 	.word	0x08025f18
 8016b5c:	08025f3c 	.word	0x08025f3c

08016b60 <xPhyConfigure>:
/*-----------------------------------------------------------*/

BaseType_t xPhyConfigure( EthernetPhy_t * pxPhyObject,
                          const PhyProperties_t * pxPhyProperties )
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b088      	sub	sp, #32
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
 8016b68:	6039      	str	r1, [r7, #0]
    uint32_t ulConfig, ulAdvertise;
    BaseType_t xPhyIndex;

    if( pxPhyObject->xPortCount < 1 )
 8016b6a:	687b      	ldr	r3, [r7, #4]
 8016b6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016b6e:	2b00      	cmp	r3, #0
 8016b70:	dc05      	bgt.n	8016b7e <xPhyConfigure+0x1e>
    {
        FreeRTOS_printf( ( "xPhyConfigure: No PHY's detected.\n" ) );
 8016b72:	487c      	ldr	r0, [pc, #496]	@ (8016d64 <xPhyConfigure+0x204>)
 8016b74:	f00a f884 	bl	8020c80 <lUDPLoggingPrintf>
        return -1;
 8016b78:	f04f 33ff 	mov.w	r3, #4294967295
 8016b7c:	e0ed      	b.n	8016d5a <xPhyConfigure+0x1fa>
    /* The expected ID for the 'LAN8742A'  is 0x0007c130. */
    /* The expected ID for the 'LAN8720'   is 0x0007c0f0. */
    /* The expected ID for the 'DP83848I'  is 0x20005C90. */

    /* Set advertise register. */
    if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) && ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8016b7e:	683b      	ldr	r3, [r7, #0]
 8016b80:	781b      	ldrb	r3, [r3, #0]
 8016b82:	2b03      	cmp	r3, #3
 8016b84:	d107      	bne.n	8016b96 <xPhyConfigure+0x36>
 8016b86:	683b      	ldr	r3, [r7, #0]
 8016b88:	789b      	ldrb	r3, [r3, #2]
 8016b8a:	2b03      	cmp	r3, #3
 8016b8c:	d103      	bne.n	8016b96 <xPhyConfigure+0x36>
    {
        ulAdvertise = phyADVERTISE_ALL;
 8016b8e:	f240 13e1 	movw	r3, #481	@ 0x1e1
 8016b92:	61fb      	str	r3, [r7, #28]
 8016b94:	e044      	b.n	8016c20 <xPhyConfigure+0xc0>
        /* Reset auto-negotiation capability. */
    }
    else
    {
        /* Always select protocol 802.3u. */
        ulAdvertise = phyADVERTISE_CSMA;
 8016b96:	2301      	movs	r3, #1
 8016b98:	61fb      	str	r3, [r7, #28]

        if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO )
 8016b9a:	683b      	ldr	r3, [r7, #0]
 8016b9c:	781b      	ldrb	r3, [r3, #0]
 8016b9e:	2b03      	cmp	r3, #3
 8016ba0:	d10d      	bne.n	8016bbe <xPhyConfigure+0x5e>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8016ba2:	683b      	ldr	r3, [r7, #0]
 8016ba4:	789b      	ldrb	r3, [r3, #2]
 8016ba6:	2b02      	cmp	r3, #2
 8016ba8:	d104      	bne.n	8016bb4 <xPhyConfigure+0x54>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_100FULL;
 8016baa:	69fb      	ldr	r3, [r7, #28]
 8016bac:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8016bb0:	61fb      	str	r3, [r7, #28]
 8016bb2:	e035      	b.n	8016c20 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF | phyADVERTISE_100HALF;
 8016bb4:	69fb      	ldr	r3, [r7, #28]
 8016bb6:	f043 03a0 	orr.w	r3, r3, #160	@ 0xa0
 8016bba:	61fb      	str	r3, [r7, #28]
 8016bbc:	e030      	b.n	8016c20 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO )
 8016bbe:	683b      	ldr	r3, [r7, #0]
 8016bc0:	789b      	ldrb	r3, [r3, #2]
 8016bc2:	2b03      	cmp	r3, #3
 8016bc4:	d10d      	bne.n	8016be2 <xPhyConfigure+0x82>
        {
            if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8016bc6:	683b      	ldr	r3, [r7, #0]
 8016bc8:	781b      	ldrb	r3, [r3, #0]
 8016bca:	2b01      	cmp	r3, #1
 8016bcc:	d104      	bne.n	8016bd8 <xPhyConfigure+0x78>
            {
                ulAdvertise |= phyADVERTISE_10FULL | phyADVERTISE_10HALF;
 8016bce:	69fb      	ldr	r3, [r7, #28]
 8016bd0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8016bd4:	61fb      	str	r3, [r7, #28]
 8016bd6:	e023      	b.n	8016c20 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100FULL | phyADVERTISE_100HALF;
 8016bd8:	69fb      	ldr	r3, [r7, #28]
 8016bda:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8016bde:	61fb      	str	r3, [r7, #28]
 8016be0:	e01e      	b.n	8016c20 <xPhyConfigure+0xc0>
            }
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 )
 8016be2:	683b      	ldr	r3, [r7, #0]
 8016be4:	781b      	ldrb	r3, [r3, #0]
 8016be6:	2b02      	cmp	r3, #2
 8016be8:	d10d      	bne.n	8016c06 <xPhyConfigure+0xa6>
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8016bea:	683b      	ldr	r3, [r7, #0]
 8016bec:	789b      	ldrb	r3, [r3, #2]
 8016bee:	2b02      	cmp	r3, #2
 8016bf0:	d104      	bne.n	8016bfc <xPhyConfigure+0x9c>
            {
                ulAdvertise |= phyADVERTISE_100FULL;
 8016bf2:	69fb      	ldr	r3, [r7, #28]
 8016bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016bf8:	61fb      	str	r3, [r7, #28]
 8016bfa:	e011      	b.n	8016c20 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_100HALF;
 8016bfc:	69fb      	ldr	r3, [r7, #28]
 8016bfe:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8016c02:	61fb      	str	r3, [r7, #28]
 8016c04:	e00c      	b.n	8016c20 <xPhyConfigure+0xc0>
            }
        }
        else
        {
            if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL )
 8016c06:	683b      	ldr	r3, [r7, #0]
 8016c08:	789b      	ldrb	r3, [r3, #2]
 8016c0a:	2b02      	cmp	r3, #2
 8016c0c:	d104      	bne.n	8016c18 <xPhyConfigure+0xb8>
            {
                ulAdvertise |= phyADVERTISE_10FULL;
 8016c0e:	69fb      	ldr	r3, [r7, #28]
 8016c10:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8016c14:	61fb      	str	r3, [r7, #28]
 8016c16:	e003      	b.n	8016c20 <xPhyConfigure+0xc0>
            }
            else
            {
                ulAdvertise |= phyADVERTISE_10HALF;
 8016c18:	69fb      	ldr	r3, [r7, #28]
 8016c1a:	f043 0320 	orr.w	r3, r3, #32
 8016c1e:	61fb      	str	r3, [r7, #28]
            }
        }
    }

    /* Send a reset command to a set of PHY-ports. */
    xPhyReset( pxPhyObject, xPhyGetMask( pxPhyObject ) );
 8016c20:	687b      	ldr	r3, [r7, #4]
 8016c22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c24:	2201      	movs	r2, #1
 8016c26:	fa02 f303 	lsl.w	r3, r2, r3
 8016c2a:	3b01      	subs	r3, #1
 8016c2c:	4619      	mov	r1, r3
 8016c2e:	6878      	ldr	r0, [r7, #4]
 8016c30:	f7ff fef2 	bl	8016a18 <xPhyReset>

    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016c34:	2300      	movs	r3, #0
 8016c36:	61bb      	str	r3, [r7, #24]
 8016c38:	e080      	b.n	8016d3c <xPhyConfigure+0x1dc>
    {
        BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016c3a:	687a      	ldr	r2, [r7, #4]
 8016c3c:	69bb      	ldr	r3, [r7, #24]
 8016c3e:	4413      	add	r3, r2
 8016c40:	3318      	adds	r3, #24
 8016c42:	781b      	ldrb	r3, [r3, #0]
 8016c44:	617b      	str	r3, [r7, #20]
        uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8016c46:	687b      	ldr	r3, [r7, #4]
 8016c48:	69ba      	ldr	r2, [r7, #24]
 8016c4a:	3202      	adds	r2, #2
 8016c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016c50:	613b      	str	r3, [r7, #16]

        /* Write advertise register. */
        pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, ulAdvertise );
 8016c52:	687b      	ldr	r3, [r7, #4]
 8016c54:	685b      	ldr	r3, [r3, #4]
 8016c56:	69fa      	ldr	r2, [r7, #28]
 8016c58:	2104      	movs	r1, #4
 8016c5a:	6978      	ldr	r0, [r7, #20]
 8016c5c:	4798      	blx	r3
         *        1           1           1        10BASE-T, Half/Full-Duplex
         *                                         100BASE-TX, Half/Full-Duplex
         */

        /* Read Control register. */
        pxPhyObject->fnPhyRead( xPhyAddress, phyREG_00_BMCR, &ulConfig );
 8016c5e:	687b      	ldr	r3, [r7, #4]
 8016c60:	681b      	ldr	r3, [r3, #0]
 8016c62:	f107 020c 	add.w	r2, r7, #12
 8016c66:	2100      	movs	r1, #0
 8016c68:	6978      	ldr	r0, [r7, #20]
 8016c6a:	4798      	blx	r3

        ulConfig &= ~( phyBMCR_SPEED_100 | phyBMCR_FULL_DUPLEX );
 8016c6c:	68fb      	ldr	r3, [r7, #12]
 8016c6e:	f423 5304 	bic.w	r3, r3, #8448	@ 0x2100
 8016c72:	60fb      	str	r3, [r7, #12]

        ulConfig |= phyBMCR_AN_ENABLE;
 8016c74:	68fb      	ldr	r3, [r7, #12]
 8016c76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8016c7a:	60fb      	str	r3, [r7, #12]

        if( ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_100 ) || ( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_AUTO ) )
 8016c7c:	683b      	ldr	r3, [r7, #0]
 8016c7e:	781b      	ldrb	r3, [r3, #0]
 8016c80:	2b02      	cmp	r3, #2
 8016c82:	d003      	beq.n	8016c8c <xPhyConfigure+0x12c>
 8016c84:	683b      	ldr	r3, [r7, #0]
 8016c86:	781b      	ldrb	r3, [r3, #0]
 8016c88:	2b03      	cmp	r3, #3
 8016c8a:	d104      	bne.n	8016c96 <xPhyConfigure+0x136>
        {
            ulConfig |= phyBMCR_SPEED_100;
 8016c8c:	68fb      	ldr	r3, [r7, #12]
 8016c8e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8016c92:	60fb      	str	r3, [r7, #12]
 8016c94:	e007      	b.n	8016ca6 <xPhyConfigure+0x146>
        }
        else if( pxPhyProperties->ucSpeed == ( uint8_t ) PHY_SPEED_10 )
 8016c96:	683b      	ldr	r3, [r7, #0]
 8016c98:	781b      	ldrb	r3, [r3, #0]
 8016c9a:	2b01      	cmp	r3, #1
 8016c9c:	d103      	bne.n	8016ca6 <xPhyConfigure+0x146>
        {
            ulConfig &= ~phyBMCR_SPEED_100;
 8016c9e:	68fb      	ldr	r3, [r7, #12]
 8016ca0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8016ca4:	60fb      	str	r3, [r7, #12]
        }

        if( ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_FULL ) || ( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_AUTO ) )
 8016ca6:	683b      	ldr	r3, [r7, #0]
 8016ca8:	789b      	ldrb	r3, [r3, #2]
 8016caa:	2b02      	cmp	r3, #2
 8016cac:	d003      	beq.n	8016cb6 <xPhyConfigure+0x156>
 8016cae:	683b      	ldr	r3, [r7, #0]
 8016cb0:	789b      	ldrb	r3, [r3, #2]
 8016cb2:	2b03      	cmp	r3, #3
 8016cb4:	d104      	bne.n	8016cc0 <xPhyConfigure+0x160>
        {
            ulConfig |= phyBMCR_FULL_DUPLEX;
 8016cb6:	68fb      	ldr	r3, [r7, #12]
 8016cb8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016cbc:	60fb      	str	r3, [r7, #12]
 8016cbe:	e007      	b.n	8016cd0 <xPhyConfigure+0x170>
        }
        else if( pxPhyProperties->ucDuplex == ( uint8_t ) PHY_DUPLEX_HALF )
 8016cc0:	683b      	ldr	r3, [r7, #0]
 8016cc2:	789b      	ldrb	r3, [r3, #2]
 8016cc4:	2b01      	cmp	r3, #1
 8016cc6:	d103      	bne.n	8016cd0 <xPhyConfigure+0x170>
        {
            ulConfig &= ~phyBMCR_FULL_DUPLEX;
 8016cc8:	68fb      	ldr	r3, [r7, #12]
 8016cca:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016cce:	60fb      	str	r3, [r7, #12]
        }

        if( xHas_19_PHYCR( ulPhyID ) )
 8016cd0:	6938      	ldr	r0, [r7, #16]
 8016cd2:	f7ff fe09 	bl	80168e8 <xHas_19_PHYCR>
 8016cd6:	4603      	mov	r3, r0
 8016cd8:	2b00      	cmp	r3, #0
 8016cda:	d026      	beq.n	8016d2a <xPhyConfigure+0x1ca>
        {
            uint32_t ulPhyControl;
            /* Read PHY Control register. */
            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_19_PHYCR, &ulPhyControl );
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	681b      	ldr	r3, [r3, #0]
 8016ce0:	f107 0208 	add.w	r2, r7, #8
 8016ce4:	2119      	movs	r1, #25
 8016ce6:	6978      	ldr	r0, [r7, #20]
 8016ce8:	4798      	blx	r3

            /* Clear bits which might get set: */
            ulPhyControl &= ~( PHYCR_MDIX_EN | PHYCR_MDIX_FORCE );
 8016cea:	68bb      	ldr	r3, [r7, #8]
 8016cec:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8016cf0:	60bb      	str	r3, [r7, #8]

            if( pxPhyProperties->ucMDI_X == PHY_MDIX_AUTO )
 8016cf2:	683b      	ldr	r3, [r7, #0]
 8016cf4:	785b      	ldrb	r3, [r3, #1]
 8016cf6:	2b03      	cmp	r3, #3
 8016cf8:	d104      	bne.n	8016d04 <xPhyConfigure+0x1a4>
            {
                ulPhyControl |= PHYCR_MDIX_EN;
 8016cfa:	68bb      	ldr	r3, [r7, #8]
 8016cfc:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8016d00:	60bb      	str	r3, [r7, #8]
 8016d02:	e00c      	b.n	8016d1e <xPhyConfigure+0x1be>
            }
            else if( pxPhyProperties->ucMDI_X == PHY_MDIX_CROSSED )
 8016d04:	683b      	ldr	r3, [r7, #0]
 8016d06:	785b      	ldrb	r3, [r3, #1]
 8016d08:	2b02      	cmp	r3, #2
 8016d0a:	d104      	bne.n	8016d16 <xPhyConfigure+0x1b6>
            {
                /* Force direct link = Use crossed RJ45 cable. */
                ulPhyControl &= ~PHYCR_MDIX_FORCE;
 8016d0c:	68bb      	ldr	r3, [r7, #8]
 8016d0e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8016d12:	60bb      	str	r3, [r7, #8]
 8016d14:	e003      	b.n	8016d1e <xPhyConfigure+0x1be>
            }
            else
            {
                /* Force crossed link = Use direct RJ45 cable. */
                ulPhyControl |= PHYCR_MDIX_FORCE;
 8016d16:	68bb      	ldr	r3, [r7, #8]
 8016d18:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8016d1c:	60bb      	str	r3, [r7, #8]
            }

            /* update PHY Control Register. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_19_PHYCR, ulPhyControl );
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	685b      	ldr	r3, [r3, #4]
 8016d22:	68ba      	ldr	r2, [r7, #8]
 8016d24:	2119      	movs	r1, #25
 8016d26:	6978      	ldr	r0, [r7, #20]
 8016d28:	4798      	blx	r3
        }

        FreeRTOS_printf( ( "+TCP: advertise: %04X config %04X\n", ( unsigned int ) ulAdvertise, ( unsigned int ) ulConfig ) );
 8016d2a:	68fb      	ldr	r3, [r7, #12]
 8016d2c:	461a      	mov	r2, r3
 8016d2e:	69f9      	ldr	r1, [r7, #28]
 8016d30:	480d      	ldr	r0, [pc, #52]	@ (8016d68 <xPhyConfigure+0x208>)
 8016d32:	f009 ffa5 	bl	8020c80 <lUDPLoggingPrintf>
    for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++ )
 8016d36:	69bb      	ldr	r3, [r7, #24]
 8016d38:	3301      	adds	r3, #1
 8016d3a:	61bb      	str	r3, [r7, #24]
 8016d3c:	687b      	ldr	r3, [r7, #4]
 8016d3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d40:	69ba      	ldr	r2, [r7, #24]
 8016d42:	429a      	cmp	r2, r3
 8016d44:	f6ff af79 	blt.w	8016c3a <xPhyConfigure+0xda>
    }

    /* Keep these values for later use. */
    pxPhyObject->ulBCRValue = ulConfig & ~phyBMCR_ISOLATE;
 8016d48:	68fb      	ldr	r3, [r7, #12]
 8016d4a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	62da      	str	r2, [r3, #44]	@ 0x2c
    pxPhyObject->ulACRValue = ulAdvertise;
 8016d52:	687b      	ldr	r3, [r7, #4]
 8016d54:	69fa      	ldr	r2, [r7, #28]
 8016d56:	631a      	str	r2, [r3, #48]	@ 0x30

    return 0;
 8016d58:	2300      	movs	r3, #0
}
 8016d5a:	4618      	mov	r0, r3
 8016d5c:	3720      	adds	r7, #32
 8016d5e:	46bd      	mov	sp, r7
 8016d60:	bd80      	pop	{r7, pc}
 8016d62:	bf00      	nop
 8016d64:	08025f70 	.word	0x08025f70
 8016d68:	08025f94 	.word	0x08025f94

08016d6c <xPhyStartAutoNegotiation>:
/* xPhyStartAutoNegotiation() is the alternative xPhyFixedValue():
 * It sets the BMCR_AN_RESTART bit and waits for the auto-negotiation completion
 * ( phyBMSR_AN_COMPLETE ). */
BaseType_t xPhyStartAutoNegotiation( EthernetPhy_t * pxPhyObject,
                                     uint32_t ulPhyMask )
{
 8016d6c:	b590      	push	{r4, r7, lr}
 8016d6e:	b095      	sub	sp, #84	@ 0x54
 8016d70:	af02      	add	r7, sp, #8
 8016d72:	6078      	str	r0, [r7, #4]
 8016d74:	6039      	str	r1, [r7, #0]
    uint32_t xPhyIndex, ulDoneMask, ulBitMask;
    uint32_t ulRegValue;
    TickType_t xRemainingTime;
    TimeOut_t xTimer;

    if( ulPhyMask == ( uint32_t ) 0U )
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d101      	bne.n	8016d80 <xPhyStartAutoNegotiation+0x14>
    {
        return 0;
 8016d7c:	2300      	movs	r3, #0
 8016d7e:	e18d      	b.n	801709c <xPhyStartAutoNegotiation+0x330>
    }

    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8016d80:	2300      	movs	r3, #0
 8016d82:	647b      	str	r3, [r7, #68]	@ 0x44
 8016d84:	e020      	b.n	8016dc8 <xPhyStartAutoNegotiation+0x5c>
    {
        if( ( ulPhyMask & ( 1lu << xPhyIndex ) ) != 0lu )
 8016d86:	683a      	ldr	r2, [r7, #0]
 8016d88:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016d8a:	fa22 f303 	lsr.w	r3, r2, r3
 8016d8e:	f003 0301 	and.w	r3, r3, #1
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d015      	beq.n	8016dc2 <xPhyStartAutoNegotiation+0x56>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016d96:	687a      	ldr	r2, [r7, #4]
 8016d98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016d9a:	4413      	add	r3, r2
 8016d9c:	3318      	adds	r3, #24
 8016d9e:	781b      	ldrb	r3, [r3, #0]
 8016da0:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* Enable Auto-Negotiation. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_04_ADVERTISE, pxPhyObject->ulACRValue );
 8016da2:	687b      	ldr	r3, [r7, #4]
 8016da4:	685b      	ldr	r3, [r3, #4]
 8016da6:	687a      	ldr	r2, [r7, #4]
 8016da8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8016daa:	2104      	movs	r1, #4
 8016dac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016dae:	4798      	blx	r3
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue | phyBMCR_AN_RESTART );
 8016db0:	687b      	ldr	r3, [r7, #4]
 8016db2:	685b      	ldr	r3, [r3, #4]
 8016db4:	687a      	ldr	r2, [r7, #4]
 8016db6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8016db8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8016dbc:	2100      	movs	r1, #0
 8016dbe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8016dc0:	4798      	blx	r3
    for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++ )
 8016dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016dc4:	3301      	adds	r3, #1
 8016dc6:	647b      	str	r3, [r7, #68]	@ 0x44
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016dcc:	461a      	mov	r2, r3
 8016dce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016dd0:	4293      	cmp	r3, r2
 8016dd2:	d3d8      	bcc.n	8016d86 <xPhyStartAutoNegotiation+0x1a>
        }
    }

    xRemainingTime = ( TickType_t ) pdMS_TO_TICKS( phyPHY_MAX_NEGOTIATE_TIME_MS );
 8016dd4:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8016dd8:	623b      	str	r3, [r7, #32]
    vTaskSetTimeOutState( &xTimer );
 8016dda:	f107 0318 	add.w	r3, r7, #24
 8016dde:	4618      	mov	r0, r3
 8016de0:	f7ed faf4 	bl	80043cc <vTaskSetTimeOutState>
    ulDoneMask = 0;
 8016de4:	2300      	movs	r3, #0
 8016de6:	643b      	str	r3, [r7, #64]	@ 0x40

    /* Wait until the auto-negotiation will be completed */
    for( ; ; )
    {
        ulBitMask = ( uint32_t ) 1U;
 8016de8:	2301      	movs	r3, #1
 8016dea:	63fb      	str	r3, [r7, #60]	@ 0x3c

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016dec:	2300      	movs	r3, #0
 8016dee:	647b      	str	r3, [r7, #68]	@ 0x44
 8016df0:	e025      	b.n	8016e3e <xPhyStartAutoNegotiation+0xd2>
        {
            if( ( ulPhyMask & ulBitMask ) != 0lu )
 8016df2:	683a      	ldr	r2, [r7, #0]
 8016df4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016df6:	4013      	ands	r3, r2
 8016df8:	2b00      	cmp	r3, #0
 8016dfa:	d01a      	beq.n	8016e32 <xPhyStartAutoNegotiation+0xc6>
            {
                if( ( ulDoneMask & ulBitMask ) == 0lu )
 8016dfc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e00:	4013      	ands	r3, r2
 8016e02:	2b00      	cmp	r3, #0
 8016e04:	d115      	bne.n	8016e32 <xPhyStartAutoNegotiation+0xc6>
                {
                    BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016e06:	687a      	ldr	r2, [r7, #4]
 8016e08:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e0a:	4413      	add	r3, r2
 8016e0c:	3318      	adds	r3, #24
 8016e0e:	781b      	ldrb	r3, [r3, #0]
 8016e10:	62fb      	str	r3, [r7, #44]	@ 0x2c

                    pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8016e1a:	2101      	movs	r1, #1
 8016e1c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8016e1e:	4798      	blx	r3

                    if( ( ulRegValue & phyBMSR_AN_COMPLETE ) != 0 )
 8016e20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e22:	f003 0320 	and.w	r3, r3, #32
 8016e26:	2b00      	cmp	r3, #0
 8016e28:	d003      	beq.n	8016e32 <xPhyStartAutoNegotiation+0xc6>
                    {
                        ulDoneMask |= ulBitMask;
 8016e2a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016e2c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e2e:	4313      	orrs	r3, r2
 8016e30:	643b      	str	r3, [r7, #64]	@ 0x40
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016e32:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e34:	3301      	adds	r3, #1
 8016e36:	647b      	str	r3, [r7, #68]	@ 0x44
 8016e38:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016e3a:	005b      	lsls	r3, r3, #1
 8016e3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8016e3e:	687b      	ldr	r3, [r7, #4]
 8016e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e42:	461a      	mov	r2, r3
 8016e44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016e46:	4293      	cmp	r3, r2
 8016e48:	d3d3      	bcc.n	8016df2 <xPhyStartAutoNegotiation+0x86>
                    }
                }
            }
        }

        if( ulPhyMask == ulDoneMask )
 8016e4a:	683a      	ldr	r2, [r7, #0]
 8016e4c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016e4e:	429a      	cmp	r2, r3
 8016e50:	d013      	beq.n	8016e7a <xPhyStartAutoNegotiation+0x10e>
        {
            break;
        }

        if( xTaskCheckForTimeOut( &xTimer, &xRemainingTime ) != pdFALSE )
 8016e52:	f107 0220 	add.w	r2, r7, #32
 8016e56:	f107 0318 	add.w	r3, r7, #24
 8016e5a:	4611      	mov	r1, r2
 8016e5c:	4618      	mov	r0, r3
 8016e5e:	f7ed faed 	bl	800443c <xTaskCheckForTimeOut>
 8016e62:	4603      	mov	r3, r0
 8016e64:	2b00      	cmp	r3, #0
 8016e66:	d004      	beq.n	8016e72 <xPhyStartAutoNegotiation+0x106>
        {
            FreeRTOS_printf( ( "xPhyStartAutoNegotiation: phyBMSR_AN_COMPLETE timed out ( done 0x%02X )\n", ( unsigned int ) ulDoneMask ) );
 8016e68:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016e6a:	488e      	ldr	r0, [pc, #568]	@ (80170a4 <xPhyStartAutoNegotiation+0x338>)
 8016e6c:	f009 ff08 	bl	8020c80 <lUDPLoggingPrintf>
            break;
 8016e70:	e004      	b.n	8016e7c <xPhyStartAutoNegotiation+0x110>
        }

        vTaskDelay( pdMS_TO_TICKS( phySHORT_DELAY_MS ) );
 8016e72:	2032      	movs	r0, #50	@ 0x32
 8016e74:	f7ec fd36 	bl	80038e4 <vTaskDelay>
        ulBitMask = ( uint32_t ) 1U;
 8016e78:	e7b6      	b.n	8016de8 <xPhyStartAutoNegotiation+0x7c>
            break;
 8016e7a:	bf00      	nop
    }

    if( ulDoneMask != ( uint32_t ) 0U )
 8016e7c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016e7e:	2b00      	cmp	r3, #0
 8016e80:	f000 810b 	beq.w	801709a <xPhyStartAutoNegotiation+0x32e>
    {
        ulBitMask = ( uint32_t ) 1U;
 8016e84:	2301      	movs	r3, #1
 8016e86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        pxPhyObject->ulLinkStatusMask &= ~( ulDoneMask );
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016e8c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8016e8e:	43db      	mvns	r3, r3
 8016e90:	401a      	ands	r2, r3
 8016e92:	687b      	ldr	r3, [r7, #4]
 8016e94:	635a      	str	r2, [r3, #52]	@ 0x34

        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8016e96:	2300      	movs	r3, #0
 8016e98:	647b      	str	r3, [r7, #68]	@ 0x44
 8016e9a:	e0f7      	b.n	801708c <xPhyStartAutoNegotiation+0x320>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8016e9c:	687a      	ldr	r2, [r7, #4]
 8016e9e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016ea0:	4413      	add	r3, r2
 8016ea2:	3318      	adds	r3, #24
 8016ea4:	781b      	ldrb	r3, [r3, #0]
 8016ea6:	63bb      	str	r3, [r7, #56]	@ 0x38
            uint32_t ulPhyID = pxPhyObject->ulPhyIDs[ xPhyIndex ];
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016eac:	3202      	adds	r2, #2
 8016eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016eb2:	637b      	str	r3, [r7, #52]	@ 0x34

            if( ( ulDoneMask & ulBitMask ) == ( uint32_t ) 0U )
 8016eb4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8016eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016eb8:	4013      	ands	r3, r2
 8016eba:	2b00      	cmp	r3, #0
 8016ebc:	f000 80df 	beq.w	801707e <xPhyStartAutoNegotiation+0x312>
            {
                continue;
            }

            /* Clear the 'phyBMCR_AN_RESTART'  bit. */
            pxPhyObject->fnPhyWrite( xPhyAddress, phyREG_00_BMCR, pxPhyObject->ulBCRValue );
 8016ec0:	687b      	ldr	r3, [r7, #4]
 8016ec2:	685b      	ldr	r3, [r3, #4]
 8016ec4:	687a      	ldr	r2, [r7, #4]
 8016ec6:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8016ec8:	2100      	movs	r1, #0
 8016eca:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016ecc:	4798      	blx	r3

            pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulRegValue );
 8016ece:	687b      	ldr	r3, [r7, #4]
 8016ed0:	681b      	ldr	r3, [r3, #0]
 8016ed2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8016ed6:	2101      	movs	r1, #1
 8016ed8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016eda:	4798      	blx	r3

            if( ( ulRegValue & phyBMSR_LINK_STATUS ) != 0U )
 8016edc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016ede:	f003 0304 	and.w	r3, r3, #4
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d005      	beq.n	8016ef2 <xPhyStartAutoNegotiation+0x186>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016eea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016eec:	431a      	orrs	r2, r3
 8016eee:	687b      	ldr	r3, [r7, #4]
 8016ef0:	635a      	str	r2, [r3, #52]	@ 0x34
            }

            if( ulPhyID == PHY_ID_KSZ8081MNXIA )
 8016ef2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016ef4:	4a6c      	ldr	r2, [pc, #432]	@ (80170a8 <xPhyStartAutoNegotiation+0x33c>)
 8016ef6:	4293      	cmp	r3, r2
 8016ef8:	d130      	bne.n	8016f5c <xPhyStartAutoNegotiation+0x1f0>
            {
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, 0x1E, &ulControlStatus );
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	681b      	ldr	r3, [r3, #0]
 8016efe:	f107 0214 	add.w	r2, r7, #20
 8016f02:	211e      	movs	r1, #30
 8016f04:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016f06:	4798      	blx	r3

                switch( ulControlStatus & 0x07 )
 8016f08:	697b      	ldr	r3, [r7, #20]
 8016f0a:	f003 0307 	and.w	r3, r3, #7
 8016f0e:	3b01      	subs	r3, #1
 8016f10:	2b05      	cmp	r3, #5
 8016f12:	d814      	bhi.n	8016f3e <xPhyStartAutoNegotiation+0x1d2>
 8016f14:	a201      	add	r2, pc, #4	@ (adr r2, 8016f1c <xPhyStartAutoNegotiation+0x1b0>)
 8016f16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016f1a:	bf00      	nop
 8016f1c:	08016f35 	.word	0x08016f35
 8016f20:	08016f3f 	.word	0x08016f3f
 8016f24:	08016f3f 	.word	0x08016f3f
 8016f28:	08016f3f 	.word	0x08016f3f
 8016f2c:	08016f35 	.word	0x08016f35
 8016f30:	08016f3f 	.word	0x08016f3f
                    case 0x01:
                    case 0x05:
/*	[001] = 10BASE-T half-duplex */
/*	[101] = 10BASE-T full-duplex */
                        /* 10 Mbps. */
                        ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8016f34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f36:	f043 0302 	orr.w	r3, r3, #2
 8016f3a:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8016f3c:	bf00      	nop
/*	[010] = 100BASE-TX half-duplex */
/*	[110] = 100BASE-TX full-duplex */
                        break;
                }

                switch( ulControlStatus & 0x07 )
 8016f3e:	697b      	ldr	r3, [r7, #20]
 8016f40:	f003 0307 	and.w	r3, r3, #7
 8016f44:	2b02      	cmp	r3, #2
 8016f46:	d801      	bhi.n	8016f4c <xPhyStartAutoNegotiation+0x1e0>
 8016f48:	2b00      	cmp	r3, #0

                    case 0x01:
                    case 0x02:
/*	[001] = 10BASE-T half-duplex */
/*	[010] = 100BASE-TX half-duplex */
                        break;
 8016f4a:	e05b      	b.n	8017004 <xPhyStartAutoNegotiation+0x298>
 8016f4c:	3b05      	subs	r3, #5
                switch( ulControlStatus & 0x07 )
 8016f4e:	2b01      	cmp	r3, #1
 8016f50:	d858      	bhi.n	8017004 <xPhyStartAutoNegotiation+0x298>
                        ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8016f52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f54:	f043 0304 	orr.w	r3, r3, #4
 8016f58:	627b      	str	r3, [r7, #36]	@ 0x24
                        break;
 8016f5a:	e053      	b.n	8017004 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( ulPhyID == PHY_ID_KSZ8795 )
 8016f5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f5e:	4a53      	ldr	r2, [pc, #332]	@ (80170ac <xPhyStartAutoNegotiation+0x340>)
 8016f60:	4293      	cmp	r3, r2
 8016f62:	d126      	bne.n	8016fb2 <xPhyStartAutoNegotiation+0x246>
                 *     010 = 10BASE-T half-duplex
                 *     101 = 10BASE-T full-duplex
                 *     011 = 100BASE-TX half-duplex
                 *     110 = 100BASE-TX full-duplex
                 */
                uint32_t ulControlStatus = 0u;
 8016f64:	2300      	movs	r3, #0
 8016f66:	613b      	str	r3, [r7, #16]
                uint32_t ulPortOperationMode = 0u;
 8016f68:	2300      	movs	r3, #0
 8016f6a:	633b      	str	r3, [r7, #48]	@ 0x30
                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8016f6c:	687b      	ldr	r3, [r7, #4]
 8016f6e:	681b      	ldr	r3, [r3, #0]
 8016f70:	f107 0210 	add.w	r2, r7, #16
 8016f74:	211f      	movs	r1, #31
 8016f76:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016f78:	4798      	blx	r3
                ulPortOperationMode = ( ulControlStatus >> 8u ) & 0x07u;
 8016f7a:	693b      	ldr	r3, [r7, #16]
 8016f7c:	0a1b      	lsrs	r3, r3, #8
 8016f7e:	f003 0307 	and.w	r3, r3, #7
 8016f82:	633b      	str	r3, [r7, #48]	@ 0x30

                ulRegValue = 0;
 8016f84:	2300      	movs	r3, #0
 8016f86:	627b      	str	r3, [r7, #36]	@ 0x24

                /* Detect 10baseT operation */
                if( ( 0x02u == ulPortOperationMode ) || ( 0x05u == ulPortOperationMode ) )
 8016f88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f8a:	2b02      	cmp	r3, #2
 8016f8c:	d002      	beq.n	8016f94 <xPhyStartAutoNegotiation+0x228>
 8016f8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f90:	2b05      	cmp	r3, #5
 8016f92:	d103      	bne.n	8016f9c <xPhyStartAutoNegotiation+0x230>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8016f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f96:	f043 0302 	orr.w	r3, r3, #2
 8016f9a:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                /* Detect full duplex operation */
                if( ( 0x05u == ulPortOperationMode ) || ( 0x06u == ulPortOperationMode ) )
 8016f9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016f9e:	2b05      	cmp	r3, #5
 8016fa0:	d002      	beq.n	8016fa8 <xPhyStartAutoNegotiation+0x23c>
 8016fa2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016fa4:	2b06      	cmp	r3, #6
 8016fa6:	d12d      	bne.n	8017004 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8016fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016faa:	f043 0304 	orr.w	r3, r3, #4
 8016fae:	627b      	str	r3, [r7, #36]	@ 0x24
 8016fb0:	e028      	b.n	8017004 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else if( xHas_1F_PHYSPCS( ulPhyID ) )
 8016fb2:	6b78      	ldr	r0, [r7, #52]	@ 0x34
 8016fb4:	f7ff fc66 	bl	8016884 <xHas_1F_PHYSPCS>
 8016fb8:	4603      	mov	r3, r0
 8016fba:	2b00      	cmp	r3, #0
 8016fbc:	d01b      	beq.n	8016ff6 <xPhyStartAutoNegotiation+0x28a>
            {
                /* 31 RW PHY Special Control Status */
                uint32_t ulControlStatus;

                pxPhyObject->fnPhyRead( xPhyAddress, phyREG_1F_PHYSPCS, &ulControlStatus );
 8016fbe:	687b      	ldr	r3, [r7, #4]
 8016fc0:	681b      	ldr	r3, [r3, #0]
 8016fc2:	f107 020c 	add.w	r2, r7, #12
 8016fc6:	211f      	movs	r1, #31
 8016fc8:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8016fca:	4798      	blx	r3
                ulRegValue = 0;
 8016fcc:	2300      	movs	r3, #0
 8016fce:	627b      	str	r3, [r7, #36]	@ 0x24

                if( ( ulControlStatus & phyPHYSPCS_FULL_DUPLEX ) != 0 )
 8016fd0:	68fb      	ldr	r3, [r7, #12]
 8016fd2:	f003 0310 	and.w	r3, r3, #16
 8016fd6:	2b00      	cmp	r3, #0
 8016fd8:	d003      	beq.n	8016fe2 <xPhyStartAutoNegotiation+0x276>
                {
                    ulRegValue |= phyPHYSTS_DUPLEX_STATUS;
 8016fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fdc:	f043 0304 	orr.w	r3, r3, #4
 8016fe0:	627b      	str	r3, [r7, #36]	@ 0x24
                }

                if( ( ulControlStatus & phyPHYSPCS_SPEED_MASK ) == phyPHYSPCS_SPEED_10 )
 8016fe2:	68fb      	ldr	r3, [r7, #12]
 8016fe4:	f003 030c 	and.w	r3, r3, #12
 8016fe8:	2b04      	cmp	r3, #4
 8016fea:	d10b      	bne.n	8017004 <xPhyStartAutoNegotiation+0x298>
                {
                    ulRegValue |= phyPHYSTS_SPEED_STATUS;
 8016fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fee:	f043 0302 	orr.w	r3, r3, #2
 8016ff2:	627b      	str	r3, [r7, #36]	@ 0x24
 8016ff4:	e006      	b.n	8017004 <xPhyStartAutoNegotiation+0x298>
                }
            }
            else
            {
                /* Read the result of the auto-negotiation. */
                pxPhyObject->fnPhyRead( xPhyAddress, PHYREG_10_PHYSTS, &ulRegValue );
 8016ff6:	687b      	ldr	r3, [r7, #4]
 8016ff8:	681b      	ldr	r3, [r3, #0]
 8016ffa:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8016ffe:	2110      	movs	r1, #16
 8017000:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8017002:	4798      	blx	r3
            }

            FreeRTOS_printf( ( "Autonego ready: %08x: %s duplex %u mbit %s status\n",
 8017004:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017008:	f003 0304 	and.w	r3, r3, #4
 801700c:	2b00      	cmp	r3, #0
 801700e:	d001      	beq.n	8017014 <xPhyStartAutoNegotiation+0x2a8>
 8017010:	4827      	ldr	r0, [pc, #156]	@ (80170b0 <xPhyStartAutoNegotiation+0x344>)
 8017012:	e000      	b.n	8017016 <xPhyStartAutoNegotiation+0x2aa>
 8017014:	4827      	ldr	r0, [pc, #156]	@ (80170b4 <xPhyStartAutoNegotiation+0x348>)
 8017016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017018:	f003 0302 	and.w	r3, r3, #2
 801701c:	2b00      	cmp	r3, #0
 801701e:	d001      	beq.n	8017024 <xPhyStartAutoNegotiation+0x2b8>
 8017020:	240a      	movs	r4, #10
 8017022:	e000      	b.n	8017026 <xPhyStartAutoNegotiation+0x2ba>
 8017024:	2464      	movs	r4, #100	@ 0x64
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801702a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801702c:	4013      	ands	r3, r2
 801702e:	2b00      	cmp	r3, #0
 8017030:	d001      	beq.n	8017036 <xPhyStartAutoNegotiation+0x2ca>
 8017032:	4b21      	ldr	r3, [pc, #132]	@ (80170b8 <xPhyStartAutoNegotiation+0x34c>)
 8017034:	e000      	b.n	8017038 <xPhyStartAutoNegotiation+0x2cc>
 8017036:	4b21      	ldr	r3, [pc, #132]	@ (80170bc <xPhyStartAutoNegotiation+0x350>)
 8017038:	9300      	str	r3, [sp, #0]
 801703a:	4623      	mov	r3, r4
 801703c:	4602      	mov	r2, r0
 801703e:	4820      	ldr	r0, [pc, #128]	@ (80170c0 <xPhyStartAutoNegotiation+0x354>)
 8017040:	f009 fe1e 	bl	8020c80 <lUDPLoggingPrintf>
                               ( unsigned int ) ulRegValue,
                               ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) ? "full" : "half",
                               ( ulRegValue & phyPHYSTS_SPEED_STATUS ) ? 10 : 100,
                               ( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) != 0U ) ? "high" : "low" ) );

            if( ( ulRegValue & phyPHYSTS_DUPLEX_STATUS ) != ( uint32_t ) 0U )
 8017044:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017046:	f003 0304 	and.w	r3, r3, #4
 801704a:	2b00      	cmp	r3, #0
 801704c:	d004      	beq.n	8017058 <xPhyStartAutoNegotiation+0x2ec>
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_FULL;
 801704e:	687b      	ldr	r3, [r7, #4]
 8017050:	2202      	movs	r2, #2
 8017052:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8017056:	e003      	b.n	8017060 <xPhyStartAutoNegotiation+0x2f4>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucDuplex = PHY_DUPLEX_HALF;
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	2201      	movs	r2, #1
 801705c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
            }

            if( ( ulRegValue & phyPHYSTS_SPEED_STATUS ) != 0 )
 8017060:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017062:	f003 0302 	and.w	r3, r3, #2
 8017066:	2b00      	cmp	r3, #0
 8017068:	d004      	beq.n	8017074 <xPhyStartAutoNegotiation+0x308>
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_10;
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	2201      	movs	r2, #1
 801706e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8017072:	e005      	b.n	8017080 <xPhyStartAutoNegotiation+0x314>
            }
            else
            {
                pxPhyObject->xPhyProperties.ucSpeed = PHY_SPEED_100;
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	2202      	movs	r2, #2
 8017078:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 801707c:	e000      	b.n	8017080 <xPhyStartAutoNegotiation+0x314>
                continue;
 801707e:	bf00      	nop
        for( xPhyIndex = 0; xPhyIndex < ( uint32_t ) pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 8017080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017082:	3301      	adds	r3, #1
 8017084:	647b      	str	r3, [r7, #68]	@ 0x44
 8017086:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017088:	005b      	lsls	r3, r3, #1
 801708a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801708c:	687b      	ldr	r3, [r7, #4]
 801708e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017090:	461a      	mov	r2, r3
 8017092:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017094:	4293      	cmp	r3, r2
 8017096:	f4ff af01 	bcc.w	8016e9c <xPhyStartAutoNegotiation+0x130>
            }
        }
    } /* if( ulDoneMask != ( uint32_t) 0U ) */

    return 0;
 801709a:	2300      	movs	r3, #0
}
 801709c:	4618      	mov	r0, r3
 801709e:	374c      	adds	r7, #76	@ 0x4c
 80170a0:	46bd      	mov	sp, r7
 80170a2:	bd90      	pop	{r4, r7, pc}
 80170a4:	08025fb8 	.word	0x08025fb8
 80170a8:	00221560 	.word	0x00221560
 80170ac:	00221550 	.word	0x00221550
 80170b0:	08026004 	.word	0x08026004
 80170b4:	0802600c 	.word	0x0802600c
 80170b8:	08026014 	.word	0x08026014
 80170bc:	0802601c 	.word	0x0802601c
 80170c0:	08026020 	.word	0x08026020

080170c4 <xPhyCheckLinkStatus>:
/*-----------------------------------------------------------*/

BaseType_t xPhyCheckLinkStatus( EthernetPhy_t * pxPhyObject,
                                BaseType_t xHadReception )
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b088      	sub	sp, #32
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	6039      	str	r1, [r7, #0]
    uint32_t ulStatus, ulBitMask = 1U;
 80170ce:	2301      	movs	r3, #1
 80170d0:	61fb      	str	r3, [r7, #28]
    BaseType_t xPhyIndex;
    BaseType_t xNeedCheck = pdFALSE;
 80170d2:	2300      	movs	r3, #0
 80170d4:	617b      	str	r3, [r7, #20]

    if( xHadReception > 0 )
 80170d6:	683b      	ldr	r3, [r7, #0]
 80170d8:	2b00      	cmp	r3, #0
 80170da:	dd2b      	ble.n	8017134 <xPhyCheckLinkStatus+0x70>
    {
        /* A packet was received. No need to check for the PHY status now,
         * but set a timer to check it later on. */
        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 80170dc:	687b      	ldr	r3, [r7, #4]
 80170de:	331c      	adds	r3, #28
 80170e0:	4618      	mov	r0, r3
 80170e2:	f7ed f973 	bl	80043cc <vTaskSetTimeOutState>
        pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 80170e6:	687b      	ldr	r3, [r7, #4]
 80170e8:	f643 2298 	movw	r2, #15000	@ 0x3a98
 80170ec:	625a      	str	r2, [r3, #36]	@ 0x24

        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80170ee:	2300      	movs	r3, #0
 80170f0:	61bb      	str	r3, [r7, #24]
 80170f2:	e019      	b.n	8017128 <xPhyCheckLinkStatus+0x64>
        {
            if( ( pxPhyObject->ulLinkStatusMask & ulBitMask ) == 0UL )
 80170f4:	687b      	ldr	r3, [r7, #4]
 80170f6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80170f8:	69fb      	ldr	r3, [r7, #28]
 80170fa:	4013      	ands	r3, r2
 80170fc:	2b00      	cmp	r3, #0
 80170fe:	d10d      	bne.n	801711c <xPhyCheckLinkStatus+0x58>
            {
                pxPhyObject->ulLinkStatusMask |= ulBitMask;
 8017100:	687b      	ldr	r3, [r7, #4]
 8017102:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017104:	69fb      	ldr	r3, [r7, #28]
 8017106:	431a      	orrs	r2, r3
 8017108:	687b      	ldr	r3, [r7, #4]
 801710a:	635a      	str	r2, [r3, #52]	@ 0x34
                FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017110:	4619      	mov	r1, r3
 8017112:	4842      	ldr	r0, [pc, #264]	@ (801721c <xPhyCheckLinkStatus+0x158>)
 8017114:	f009 fdb4 	bl	8020c80 <lUDPLoggingPrintf>
                xNeedCheck = pdTRUE;
 8017118:	2301      	movs	r3, #1
 801711a:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801711c:	69bb      	ldr	r3, [r7, #24]
 801711e:	3301      	adds	r3, #1
 8017120:	61bb      	str	r3, [r7, #24]
 8017122:	69fb      	ldr	r3, [r7, #28]
 8017124:	005b      	lsls	r3, r3, #1
 8017126:	61fb      	str	r3, [r7, #28]
 8017128:	687b      	ldr	r3, [r7, #4]
 801712a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801712c:	69ba      	ldr	r2, [r7, #24]
 801712e:	429a      	cmp	r2, r3
 8017130:	dbe0      	blt.n	80170f4 <xPhyCheckLinkStatus+0x30>
 8017132:	e06e      	b.n	8017212 <xPhyCheckLinkStatus+0x14e>
            }
        }
    }
    else if( xTaskCheckForTimeOut( &( pxPhyObject->xLinkStatusTimer ), &( pxPhyObject->xLinkStatusRemaining ) ) != pdFALSE )
 8017134:	687b      	ldr	r3, [r7, #4]
 8017136:	f103 021c 	add.w	r2, r3, #28
 801713a:	687b      	ldr	r3, [r7, #4]
 801713c:	3324      	adds	r3, #36	@ 0x24
 801713e:	4619      	mov	r1, r3
 8017140:	4610      	mov	r0, r2
 8017142:	f7ed f97b 	bl	800443c <xTaskCheckForTimeOut>
 8017146:	4603      	mov	r3, r0
 8017148:	2b00      	cmp	r3, #0
 801714a:	d062      	beq.n	8017212 <xPhyCheckLinkStatus+0x14e>
    {
        /* Frequent checking the PHY Link Status can affect for the performance of Ethernet controller.
         * As long as packets are received, no polling is needed.
         * Otherwise, polling will be done when the 'xLinkStatusTimer' expires. */
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 801714c:	2300      	movs	r3, #0
 801714e:	61bb      	str	r3, [r7, #24]
 8017150:	e045      	b.n	80171de <xPhyCheckLinkStatus+0x11a>
        {
            BaseType_t xPhyAddress = pxPhyObject->ucPhyIndexes[ xPhyIndex ];
 8017152:	687a      	ldr	r2, [r7, #4]
 8017154:	69bb      	ldr	r3, [r7, #24]
 8017156:	4413      	add	r3, r2
 8017158:	3318      	adds	r3, #24
 801715a:	781b      	ldrb	r3, [r3, #0]
 801715c:	613b      	str	r3, [r7, #16]

            if( pxPhyObject->fnPhyRead( xPhyAddress, phyREG_01_BMSR, &ulStatus ) == 0 )
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	f107 020c 	add.w	r2, r7, #12
 8017166:	2101      	movs	r1, #1
 8017168:	6938      	ldr	r0, [r7, #16]
 801716a:	4798      	blx	r3
 801716c:	4603      	mov	r3, r0
 801716e:	2b00      	cmp	r3, #0
 8017170:	d12f      	bne.n	80171d2 <xPhyCheckLinkStatus+0x10e>
            {
                if( !!( pxPhyObject->ulLinkStatusMask & ulBitMask ) != !!( ulStatus & phyBMSR_LINK_STATUS ) )
 8017172:	687b      	ldr	r3, [r7, #4]
 8017174:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017176:	69fb      	ldr	r3, [r7, #28]
 8017178:	4013      	ands	r3, r2
 801717a:	2b00      	cmp	r3, #0
 801717c:	bf14      	ite	ne
 801717e:	2301      	movne	r3, #1
 8017180:	2300      	moveq	r3, #0
 8017182:	b2da      	uxtb	r2, r3
 8017184:	68fb      	ldr	r3, [r7, #12]
 8017186:	f003 0304 	and.w	r3, r3, #4
 801718a:	2b00      	cmp	r3, #0
 801718c:	bf14      	ite	ne
 801718e:	2301      	movne	r3, #1
 8017190:	2300      	moveq	r3, #0
 8017192:	b2db      	uxtb	r3, r3
 8017194:	4053      	eors	r3, r2
 8017196:	b2db      	uxtb	r3, r3
 8017198:	2b00      	cmp	r3, #0
 801719a:	d01a      	beq.n	80171d2 <xPhyCheckLinkStatus+0x10e>
                {
                    if( ( ulStatus & phyBMSR_LINK_STATUS ) != 0 )
 801719c:	68fb      	ldr	r3, [r7, #12]
 801719e:	f003 0304 	and.w	r3, r3, #4
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d006      	beq.n	80171b4 <xPhyCheckLinkStatus+0xf0>
                    {
                        pxPhyObject->ulLinkStatusMask |= ulBitMask;
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80171aa:	69fb      	ldr	r3, [r7, #28]
 80171ac:	431a      	orrs	r2, r3
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	635a      	str	r2, [r3, #52]	@ 0x34
 80171b2:	e006      	b.n	80171c2 <xPhyCheckLinkStatus+0xfe>
                    }
                    else
                    {
                        pxPhyObject->ulLinkStatusMask &= ~( ulBitMask );
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80171b8:	69fb      	ldr	r3, [r7, #28]
 80171ba:	43db      	mvns	r3, r3
 80171bc:	401a      	ands	r2, r3
 80171be:	687b      	ldr	r3, [r7, #4]
 80171c0:	635a      	str	r2, [r3, #52]	@ 0x34
                    }

                    FreeRTOS_printf( ( "xPhyCheckLinkStatus: PHY LS now %02X\n", ( unsigned int ) pxPhyObject->ulLinkStatusMask ) );
 80171c2:	687b      	ldr	r3, [r7, #4]
 80171c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80171c6:	4619      	mov	r1, r3
 80171c8:	4814      	ldr	r0, [pc, #80]	@ (801721c <xPhyCheckLinkStatus+0x158>)
 80171ca:	f009 fd59 	bl	8020c80 <lUDPLoggingPrintf>
                    xNeedCheck = pdTRUE;
 80171ce:	2301      	movs	r3, #1
 80171d0:	617b      	str	r3, [r7, #20]
        for( xPhyIndex = 0; xPhyIndex < pxPhyObject->xPortCount; xPhyIndex++, ulBitMask <<= 1 )
 80171d2:	69bb      	ldr	r3, [r7, #24]
 80171d4:	3301      	adds	r3, #1
 80171d6:	61bb      	str	r3, [r7, #24]
 80171d8:	69fb      	ldr	r3, [r7, #28]
 80171da:	005b      	lsls	r3, r3, #1
 80171dc:	61fb      	str	r3, [r7, #28]
 80171de:	687b      	ldr	r3, [r7, #4]
 80171e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171e2:	69ba      	ldr	r2, [r7, #24]
 80171e4:	429a      	cmp	r2, r3
 80171e6:	dbb4      	blt.n	8017152 <xPhyCheckLinkStatus+0x8e>
                }
            }
        }

        vTaskSetTimeOutState( &( pxPhyObject->xLinkStatusTimer ) );
 80171e8:	687b      	ldr	r3, [r7, #4]
 80171ea:	331c      	adds	r3, #28
 80171ec:	4618      	mov	r0, r3
 80171ee:	f7ed f8ed 	bl	80043cc <vTaskSetTimeOutState>

        if( ( pxPhyObject->ulLinkStatusMask & ( ulBitMask >> 1 ) ) != 0 )
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80171f6:	69fb      	ldr	r3, [r7, #28]
 80171f8:	085b      	lsrs	r3, r3, #1
 80171fa:	4013      	ands	r3, r2
 80171fc:	2b00      	cmp	r3, #0
 80171fe:	d004      	beq.n	801720a <xPhyCheckLinkStatus+0x146>
        {
            /* The link status is high, so don't poll the PHY too often. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_HIGH_CHECK_TIME_MS );
 8017200:	687b      	ldr	r3, [r7, #4]
 8017202:	f643 2298 	movw	r2, #15000	@ 0x3a98
 8017206:	625a      	str	r2, [r3, #36]	@ 0x24
 8017208:	e003      	b.n	8017212 <xPhyCheckLinkStatus+0x14e>
        }
        else
        {
            /* The link status is low, polling may be done more frequently. */
            pxPhyObject->xLinkStatusRemaining = pdMS_TO_TICKS( ipconfigPHY_LS_LOW_CHECK_TIME_MS );
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8017210:	625a      	str	r2, [r3, #36]	@ 0x24
        }
    }

    return xNeedCheck;
 8017212:	697b      	ldr	r3, [r7, #20]
}
 8017214:	4618      	mov	r0, r3
 8017216:	3720      	adds	r7, #32
 8017218:	46bd      	mov	sp, r7
 801721a:	bd80      	pop	{r7, pc}
 801721c:	08026054 	.word	0x08026054

08017220 <prvRevBits32>:
};
/*-----------------------------------------------------------*/

/* Reverse the bits of a 32 bit unsigned integer */
static uint32_t prvRevBits32( uint32_t ulValue )
{
 8017220:	b480      	push	{r7}
 8017222:	b085      	sub	sp, #20
 8017224:	af00      	add	r7, sp, #0
 8017226:	6078      	str	r0, [r7, #4]
    uint32_t ulRev32;
    int iIndex;

    ulRev32 = 0;
 8017228:	2300      	movs	r3, #0
 801722a:	60fb      	str	r3, [r7, #12]

    for( iIndex = 0; iIndex < 32; iIndex++ )
 801722c:	2300      	movs	r3, #0
 801722e:	60bb      	str	r3, [r7, #8]
 8017230:	e013      	b.n	801725a <prvRevBits32+0x3a>
    {
        if( ulValue & ( 1 << iIndex ) )
 8017232:	2201      	movs	r2, #1
 8017234:	68bb      	ldr	r3, [r7, #8]
 8017236:	fa02 f303 	lsl.w	r3, r2, r3
 801723a:	461a      	mov	r2, r3
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	4013      	ands	r3, r2
 8017240:	2b00      	cmp	r3, #0
 8017242:	d007      	beq.n	8017254 <prvRevBits32+0x34>
        {
            {
                ulRev32 |= 1 << ( 31 - iIndex );
 8017244:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8017248:	68bb      	ldr	r3, [r7, #8]
 801724a:	fa22 f303 	lsr.w	r3, r2, r3
 801724e:	68fa      	ldr	r2, [r7, #12]
 8017250:	4313      	orrs	r3, r2
 8017252:	60fb      	str	r3, [r7, #12]
    for( iIndex = 0; iIndex < 32; iIndex++ )
 8017254:	68bb      	ldr	r3, [r7, #8]
 8017256:	3301      	adds	r3, #1
 8017258:	60bb      	str	r3, [r7, #8]
 801725a:	68bb      	ldr	r3, [r7, #8]
 801725c:	2b1f      	cmp	r3, #31
 801725e:	dde8      	ble.n	8017232 <prvRevBits32+0x12>
            }
        }
    }

    return ulRev32;
 8017260:	68fb      	ldr	r3, [r7, #12]
}
 8017262:	4618      	mov	r0, r3
 8017264:	3714      	adds	r7, #20
 8017266:	46bd      	mov	sp, r7
 8017268:	f85d 7b04 	ldr.w	r7, [sp], #4
 801726c:	4770      	bx	lr
	...

08017270 <prvComputeCRC32_MAC>:

/* Compute the CRC32 of the given MAC address as per IEEE 802.3 CRC32 */
static uint32_t prvComputeCRC32_MAC( const uint8_t * pucMAC )
{
 8017270:	b590      	push	{r4, r7, lr}
 8017272:	b087      	sub	sp, #28
 8017274:	af00      	add	r7, sp, #0
 8017276:	6078      	str	r0, [r7, #4]
    int iiIndex, ijIndex;
    uint32_t ulCRC32 = 0xFFFFFFFF;
 8017278:	f04f 33ff 	mov.w	r3, #4294967295
 801727c:	60fb      	str	r3, [r7, #12]

    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 801727e:	2300      	movs	r3, #0
 8017280:	613b      	str	r3, [r7, #16]
 8017282:	e024      	b.n	80172ce <prvComputeCRC32_MAC+0x5e>
    {
        ulCRC32 = ulCRC32 ^ ( uint32_t ) pucMAC[ ijIndex ];
 8017284:	693b      	ldr	r3, [r7, #16]
 8017286:	687a      	ldr	r2, [r7, #4]
 8017288:	4413      	add	r3, r2
 801728a:	781b      	ldrb	r3, [r3, #0]
 801728c:	461a      	mov	r2, r3
 801728e:	68fb      	ldr	r3, [r7, #12]
 8017290:	4053      	eors	r3, r2
 8017292:	60fb      	str	r3, [r7, #12]

        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 8017294:	2300      	movs	r3, #0
 8017296:	617b      	str	r3, [r7, #20]
 8017298:	e013      	b.n	80172c2 <prvComputeCRC32_MAC+0x52>
        {
            if( ulCRC32 & 1 )
 801729a:	68fb      	ldr	r3, [r7, #12]
 801729c:	f003 0301 	and.w	r3, r3, #1
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d008      	beq.n	80172b6 <prvComputeCRC32_MAC+0x46>
            {
                ulCRC32 = ( ulCRC32 >> 1 ) ^ prvRevBits32( 0x04C11DB7 ); /* IEEE 802.3 CRC32 polynomial - 0x04C11DB7 */
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	085c      	lsrs	r4, r3, #1
 80172a8:	480e      	ldr	r0, [pc, #56]	@ (80172e4 <prvComputeCRC32_MAC+0x74>)
 80172aa:	f7ff ffb9 	bl	8017220 <prvRevBits32>
 80172ae:	4603      	mov	r3, r0
 80172b0:	4063      	eors	r3, r4
 80172b2:	60fb      	str	r3, [r7, #12]
 80172b4:	e002      	b.n	80172bc <prvComputeCRC32_MAC+0x4c>
            }
            else
            {
                ulCRC32 = ( ulCRC32 >> 1 );
 80172b6:	68fb      	ldr	r3, [r7, #12]
 80172b8:	085b      	lsrs	r3, r3, #1
 80172ba:	60fb      	str	r3, [r7, #12]
        for( iiIndex = 0; iiIndex < 8; iiIndex++ )
 80172bc:	697b      	ldr	r3, [r7, #20]
 80172be:	3301      	adds	r3, #1
 80172c0:	617b      	str	r3, [r7, #20]
 80172c2:	697b      	ldr	r3, [r7, #20]
 80172c4:	2b07      	cmp	r3, #7
 80172c6:	dde8      	ble.n	801729a <prvComputeCRC32_MAC+0x2a>
    for( ijIndex = 0; ijIndex < 6; ijIndex++ )
 80172c8:	693b      	ldr	r3, [r7, #16]
 80172ca:	3301      	adds	r3, #1
 80172cc:	613b      	str	r3, [r7, #16]
 80172ce:	693b      	ldr	r3, [r7, #16]
 80172d0:	2b05      	cmp	r3, #5
 80172d2:	ddd7      	ble.n	8017284 <prvComputeCRC32_MAC+0x14>
            }
        }
    }

    ulCRC32 = ~( ulCRC32 );
 80172d4:	68fb      	ldr	r3, [r7, #12]
 80172d6:	43db      	mvns	r3, r3
 80172d8:	60fb      	str	r3, [r7, #12]
    return ulCRC32;
 80172da:	68fb      	ldr	r3, [r7, #12]
}
 80172dc:	4618      	mov	r0, r3
 80172de:	371c      	adds	r7, #28
 80172e0:	46bd      	mov	sp, r7
 80172e2:	bd90      	pop	{r4, r7, pc}
 80172e4:	04c11db7 	.word	0x04c11db7

080172e8 <prvComputeEthernet_MACHash>:

/* Compute the hash value of a given MAC address to index the bits in the Hash Table
 * Registers (ETH_MACHT0R and ETH_MACHT1R) */
static uint32_t prvComputeEthernet_MACHash( const uint8_t * pucMAC )
{
 80172e8:	b580      	push	{r7, lr}
 80172ea:	b084      	sub	sp, #16
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	6078      	str	r0, [r7, #4]
    uint32_t ulCRC32;
    uint32_t ulHash;

    /*  Calculate the 32-bit CRC for the MAC */
    ulCRC32 = prvComputeCRC32_MAC( pucMAC );
 80172f0:	6878      	ldr	r0, [r7, #4]
 80172f2:	f7ff ffbd 	bl	8017270 <prvComputeCRC32_MAC>
 80172f6:	60f8      	str	r0, [r7, #12]

    /* Perform bitwise reversal on the CRC32 */
    ulHash = prvRevBits32( ulCRC32 );
 80172f8:	68f8      	ldr	r0, [r7, #12]
 80172fa:	f7ff ff91 	bl	8017220 <prvRevBits32>
 80172fe:	60b8      	str	r0, [r7, #8]

    /* Take the upper 6 bits of the above result */
    return( ulHash >> 26 );
 8017300:	68bb      	ldr	r3, [r7, #8]
 8017302:	0e9b      	lsrs	r3, r3, #26
}
 8017304:	4618      	mov	r0, r3
 8017306:	3710      	adds	r7, #16
 8017308:	46bd      	mov	sp, r7
 801730a:	bd80      	pop	{r7, pc}

0801730c <prvSetMAC_HashFilter>:

/* Update the Hash Table Registers
 * (ETH_MACHT0R and ETH_MACHT1R) with hash value of the given MAC address */
static void prvSetMAC_HashFilter( ETH_HandleTypeDef * pxEthHandle,
                                  const uint8_t * pucMAC )
{
 801730c:	b580      	push	{r7, lr}
 801730e:	b084      	sub	sp, #16
 8017310:	af00      	add	r7, sp, #0
 8017312:	6078      	str	r0, [r7, #4]
 8017314:	6039      	str	r1, [r7, #0]
    uint32_t ulHash;

    /* Compute the hash */
    ulHash = prvComputeEthernet_MACHash( pucMAC );
 8017316:	6838      	ldr	r0, [r7, #0]
 8017318:	f7ff ffe6 	bl	80172e8 <prvComputeEthernet_MACHash>
 801731c:	60f8      	str	r0, [r7, #12]

    /* Use the upper (MACHT1R) or lower (MACHT0R) Hash Table Registers
     * to set the required bit based on the ulHash */
    if( ulHash < 32 )
 801731e:	68fb      	ldr	r3, [r7, #12]
 8017320:	2b1f      	cmp	r3, #31
 8017322:	d80c      	bhi.n	801733e <prvSetMAC_HashFilter+0x32>
    {
        pxEthHandle->Instance->MACHT0R |= ( 1 << ulHash );
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	681b      	ldr	r3, [r3, #0]
 8017328:	691a      	ldr	r2, [r3, #16]
 801732a:	2101      	movs	r1, #1
 801732c:	68fb      	ldr	r3, [r7, #12]
 801732e:	fa01 f303 	lsl.w	r3, r1, r3
 8017332:	4619      	mov	r1, r3
 8017334:	687b      	ldr	r3, [r7, #4]
 8017336:	681b      	ldr	r3, [r3, #0]
 8017338:	430a      	orrs	r2, r1
 801733a:	611a      	str	r2, [r3, #16]
    }
    else
    {
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
    }
}
 801733c:	e00d      	b.n	801735a <prvSetMAC_HashFilter+0x4e>
        pxEthHandle->Instance->MACHT1R |= ( 1 << ( ulHash % 32 ) );
 801733e:	687b      	ldr	r3, [r7, #4]
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	695a      	ldr	r2, [r3, #20]
 8017344:	68fb      	ldr	r3, [r7, #12]
 8017346:	f003 031f 	and.w	r3, r3, #31
 801734a:	2101      	movs	r1, #1
 801734c:	fa01 f303 	lsl.w	r3, r1, r3
 8017350:	4619      	mov	r1, r3
 8017352:	687b      	ldr	r3, [r7, #4]
 8017354:	681b      	ldr	r3, [r3, #0]
 8017356:	430a      	orrs	r2, r1
 8017358:	615a      	str	r2, [r3, #20]
}
 801735a:	bf00      	nop
 801735c:	3710      	adds	r7, #16
 801735e:	46bd      	mov	sp, r7
 8017360:	bd80      	pop	{r7, pc}

08017362 <pucGetRXBuffer>:
/*******************************************************************************
*                      Network Interface API Functions
*******************************************************************************/

static uint8_t * pucGetRXBuffer( size_t uxSize )
{
 8017362:	b580      	push	{r7, lr}
 8017364:	b086      	sub	sp, #24
 8017366:	af00      	add	r7, sp, #0
 8017368:	6078      	str	r0, [r7, #4]
    TickType_t uxBlockTimeTicks = ipMS_TO_MIN_TICKS( 10U );
 801736a:	230a      	movs	r3, #10
 801736c:	613b      	str	r3, [r7, #16]
    NetworkBufferDescriptor_t * pxBufferDescriptor;
    uint8_t * pucReturn = NULL;
 801736e:	2300      	movs	r3, #0
 8017370:	617b      	str	r3, [r7, #20]

    pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxSize, uxBlockTimeTicks );
 8017372:	6939      	ldr	r1, [r7, #16]
 8017374:	6878      	ldr	r0, [r7, #4]
 8017376:	f7ff f9bf 	bl	80166f8 <pxGetNetworkBufferWithDescriptor>
 801737a:	60f8      	str	r0, [r7, #12]

    if( pxBufferDescriptor != NULL )
 801737c:	68fb      	ldr	r3, [r7, #12]
 801737e:	2b00      	cmp	r3, #0
 8017380:	d002      	beq.n	8017388 <pucGetRXBuffer+0x26>
    {
        pucReturn = pxBufferDescriptor->pucEthernetBuffer;
 8017382:	68fb      	ldr	r3, [r7, #12]
 8017384:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017386:	617b      	str	r3, [r7, #20]
    }

    return pucReturn;
 8017388:	697b      	ldr	r3, [r7, #20]
}
 801738a:	4618      	mov	r0, r3
 801738c:	3718      	adds	r7, #24
 801738e:	46bd      	mov	sp, r7
 8017390:	bd80      	pop	{r7, pc}
	...

08017394 <xSTM32H_NetworkInterfaceInitialise>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceInitialise( NetworkInterface_t * pxInterface )
{
 8017394:	b580      	push	{r7, lr}
 8017396:	b08e      	sub	sp, #56	@ 0x38
 8017398:	af02      	add	r7, sp, #8
 801739a:	6078      	str	r0, [r7, #4]
    BaseType_t xResult = pdFAIL;
 801739c:	2300      	movs	r3, #0
 801739e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    NetworkEndPoint_t * pxEndPoint;
    HAL_StatusTypeDef xHalEthInitStatus;
    size_t uxIndex = 0;
 80173a0:	2300      	movs	r3, #0
 80173a2:	627b      	str	r3, [r7, #36]	@ 0x24

    if( xMacInitStatus == eMACInit )
 80173a4:	4b8d      	ldr	r3, [pc, #564]	@ (80175dc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80173a6:	781b      	ldrb	r3, [r3, #0]
 80173a8:	2b00      	cmp	r3, #0
 80173aa:	f040 8104 	bne.w	80175b6 <xSTM32H_NetworkInterfaceInitialise+0x222>
    {
        pxMyInterface = pxInterface;
 80173ae:	4a8c      	ldr	r2, [pc, #560]	@ (80175e0 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 80173b0:	687b      	ldr	r3, [r7, #4]
 80173b2:	6013      	str	r3, [r2, #0]

        pxEndPoint = FreeRTOS_FirstEndPoint( pxInterface );
 80173b4:	6878      	ldr	r0, [r7, #4]
 80173b6:	f7f5 fb8f 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 80173ba:	62b8      	str	r0, [r7, #40]	@ 0x28
        configASSERT( pxEndPoint != NULL );
 80173bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d104      	bne.n	80173cc <xSTM32H_NetworkInterfaceInitialise+0x38>
 80173c2:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 80173c6:	4887      	ldr	r0, [pc, #540]	@ (80175e4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80173c8:	f7ea f852 	bl	8001470 <vAssertCalled>
        /*
         * Initialize ETH Handler
         * It assumes that Ethernet GPIO and clock configuration
         * are already done in the ETH_MspInit()
         */
        xEthHandle.Instance = ETH;
 80173cc:	4b86      	ldr	r3, [pc, #536]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80173ce:	4a87      	ldr	r2, [pc, #540]	@ (80175ec <xSTM32H_NetworkInterfaceInitialise+0x258>)
 80173d0:	601a      	str	r2, [r3, #0]
        xEthHandle.Init.MACAddr = ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes;
 80173d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80173d4:	33e8      	adds	r3, #232	@ 0xe8
 80173d6:	4a84      	ldr	r2, [pc, #528]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80173d8:	6053      	str	r3, [r2, #4]
        xEthHandle.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80173da:	4b83      	ldr	r3, [pc, #524]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80173dc:	2201      	movs	r2, #1
 80173de:	721a      	strb	r2, [r3, #8]
        xEthHandle.Init.TxDesc = DMATxDscrTab;
 80173e0:	4b81      	ldr	r3, [pc, #516]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80173e2:	4a83      	ldr	r2, [pc, #524]	@ (80175f0 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 80173e4:	60da      	str	r2, [r3, #12]
        xEthHandle.Init.RxDesc = DMARxDscrTab;
 80173e6:	4b80      	ldr	r3, [pc, #512]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80173e8:	4a82      	ldr	r2, [pc, #520]	@ (80175f4 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 80173ea:	611a      	str	r2, [r3, #16]
        xEthHandle.Init.RxBuffLen = ( ETH_RX_BUF_SIZE - ipBUFFER_PADDING ) & ~( ( uint32_t ) 3U );
 80173ec:	4b7e      	ldr	r3, [pc, #504]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80173ee:	f240 52f4 	movw	r2, #1524	@ 0x5f4
 80173f2:	615a      	str	r2, [r3, #20]

        /* Make sure that all unused fields are cleared. */
        memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 80173f4:	2260      	movs	r2, #96	@ 0x60
 80173f6:	2100      	movs	r1, #0
 80173f8:	487d      	ldr	r0, [pc, #500]	@ (80175f0 <xSTM32H_NetworkInterfaceInitialise+0x25c>)
 80173fa:	f009 ff6a 	bl	80212d2 <memset>
        memset( &( DMARxDscrTab ), '\0', sizeof( DMARxDscrTab ) );
 80173fe:	2260      	movs	r2, #96	@ 0x60
 8017400:	2100      	movs	r1, #0
 8017402:	487c      	ldr	r0, [pc, #496]	@ (80175f4 <xSTM32H_NetworkInterfaceInitialise+0x260>)
 8017404:	f009 ff65 	bl	80212d2 <memset>

        xHalEthInitStatus = HAL_ETH_Init( &( xEthHandle ) );
 8017408:	4877      	ldr	r0, [pc, #476]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801740a:	f000 fc71 	bl	8017cf0 <HAL_ETH_Init>
 801740e:	4603      	mov	r3, r0
 8017410:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

        if( xHalEthInitStatus == HAL_OK )
 8017414:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8017418:	2b00      	cmp	r3, #0
 801741a:	f040 80c9 	bne.w	80175b0 <xSTM32H_NetworkInterfaceInitialise+0x21c>
        {
            /* Update MAC filter settings */
            xEthHandle.Instance->MACPFR |= ENABLE_HASH_FILTER_SETTINGS;
 801741e:	4b72      	ldr	r3, [pc, #456]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	6899      	ldr	r1, [r3, #8]
 8017424:	4b70      	ldr	r3, [pc, #448]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017426:	681a      	ldr	r2, [r3, #0]
 8017428:	f240 4316 	movw	r3, #1046	@ 0x416
 801742c:	430b      	orrs	r3, r1
 801742e:	6093      	str	r3, [r2, #8]

            /* Configuration for HAL_ETH_Transmit(_IT). */
            memset( &( xTxConfig ), 0, sizeof( ETH_TxPacketConfig ) );
 8017430:	2234      	movs	r2, #52	@ 0x34
 8017432:	2100      	movs	r1, #0
 8017434:	4870      	ldr	r0, [pc, #448]	@ (80175f8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017436:	f009 ff4c 	bl	80212d2 <memset>
            xTxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CRCPAD;
 801743a:	4b6f      	ldr	r3, [pc, #444]	@ (80175f8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801743c:	2220      	movs	r2, #32
 801743e:	601a      	str	r2, [r3, #0]

            #if ( ipconfigDRIVER_INCLUDED_TX_IP_CHECKSUM != 0 )
            {
                /*xTxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC; */
                xTxConfig.Attributes |= ETH_TX_PACKETS_FEATURES_CSUM;
 8017440:	4b6d      	ldr	r3, [pc, #436]	@ (80175f8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	f043 0301 	orr.w	r3, r3, #1
 8017448:	4a6b      	ldr	r2, [pc, #428]	@ (80175f8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801744a:	6013      	str	r3, [r2, #0]
                xTxConfig.ChecksumCtrl = ETH_DMATXNDESCRF_CIC_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 801744c:	4b6a      	ldr	r3, [pc, #424]	@ (80175f8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 801744e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8017452:	615a      	str	r2, [r3, #20]
            #else
            {
                xTxConfig.ChecksumCtrl = ETH_CHECKSUM_DISABLE;
            }
            #endif
            xTxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8017454:	4b68      	ldr	r3, [pc, #416]	@ (80175f8 <xSTM32H_NetworkInterfaceInitialise+0x264>)
 8017456:	2200      	movs	r2, #0
 8017458:	611a      	str	r2, [r3, #16]

            /* This counting semaphore will count the number of free TX DMA descriptors. */
            xTXDescriptorSemaphore = xSemaphoreCreateCounting( ( UBaseType_t ) ETH_TX_DESC_CNT, ( UBaseType_t ) ETH_TX_DESC_CNT );
 801745a:	2104      	movs	r1, #4
 801745c:	2004      	movs	r0, #4
 801745e:	f7eb fbff 	bl	8002c60 <xQueueCreateCountingSemaphore>
 8017462:	4603      	mov	r3, r0
 8017464:	4a65      	ldr	r2, [pc, #404]	@ (80175fc <xSTM32H_NetworkInterfaceInitialise+0x268>)
 8017466:	6013      	str	r3, [r2, #0]
            configASSERT( xTXDescriptorSemaphore );
 8017468:	4b64      	ldr	r3, [pc, #400]	@ (80175fc <xSTM32H_NetworkInterfaceInitialise+0x268>)
 801746a:	681b      	ldr	r3, [r3, #0]
 801746c:	2b00      	cmp	r3, #0
 801746e:	d104      	bne.n	801747a <xSTM32H_NetworkInterfaceInitialise+0xe6>
 8017470:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8017474:	485b      	ldr	r0, [pc, #364]	@ (80175e4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017476:	f7e9 fffb 	bl	8001470 <vAssertCalled>

            xTransmissionMutex = xSemaphoreCreateMutex();
 801747a:	2001      	movs	r0, #1
 801747c:	f7eb fbd7 	bl	8002c2e <xQueueCreateMutex>
 8017480:	4603      	mov	r3, r0
 8017482:	4a5f      	ldr	r2, [pc, #380]	@ (8017600 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017484:	6013      	str	r3, [r2, #0]
            configASSERT( xTransmissionMutex );
 8017486:	4b5e      	ldr	r3, [pc, #376]	@ (8017600 <xSTM32H_NetworkInterfaceInitialise+0x26c>)
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	2b00      	cmp	r3, #0
 801748c:	d104      	bne.n	8017498 <xSTM32H_NetworkInterfaceInitialise+0x104>
 801748e:	f240 117f 	movw	r1, #383	@ 0x17f
 8017492:	4854      	ldr	r0, [pc, #336]	@ (80175e4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 8017494:	f7e9 ffec 	bl	8001470 <vAssertCalled>

            /* Assign Rx memory buffers to a DMA Rx descriptor */
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 8017498:	2300      	movs	r3, #0
 801749a:	627b      	str	r3, [r7, #36]	@ 0x24
 801749c:	e015      	b.n	80174ca <xSTM32H_NetworkInterfaceInitialise+0x136>
            {
                uint8_t * pucBuffer;

                #if ( ipconfigZERO_COPY_RX_DRIVER != 0 )
                {
                    pucBuffer = pucGetRXBuffer( ETH_RX_BUF_SIZE );
 801749e:	f44f 60c0 	mov.w	r0, #1536	@ 0x600
 80174a2:	f7ff ff5e 	bl	8017362 <pucGetRXBuffer>
 80174a6:	61f8      	str	r0, [r7, #28]
                    configASSERT( pucBuffer != NULL );
 80174a8:	69fb      	ldr	r3, [r7, #28]
 80174aa:	2b00      	cmp	r3, #0
 80174ac:	d104      	bne.n	80174b8 <xSTM32H_NetworkInterfaceInitialise+0x124>
 80174ae:	f240 1189 	movw	r1, #393	@ 0x189
 80174b2:	484c      	ldr	r0, [pc, #304]	@ (80175e4 <xSTM32H_NetworkInterfaceInitialise+0x250>)
 80174b4:	f7e9 ffdc 	bl	8001470 <vAssertCalled>
                {
                    pucBuffer = Rx_Buff[ uxIndex ];
                }
                #endif

                HAL_ETH_DescAssignMemory( &( xEthHandle ), uxIndex, pucBuffer, NULL );
 80174b8:	2300      	movs	r3, #0
 80174ba:	69fa      	ldr	r2, [r7, #28]
 80174bc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80174be:	484a      	ldr	r0, [pc, #296]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80174c0:	f000 fd02 	bl	8017ec8 <HAL_ETH_DescAssignMemory>
            for( uxIndex = 0; uxIndex < ETH_RX_DESC_CNT; uxIndex++ )
 80174c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174c6:	3301      	adds	r3, #1
 80174c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80174ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80174cc:	2b03      	cmp	r3, #3
 80174ce:	d9e6      	bls.n	801749e <xSTM32H_NetworkInterfaceInitialise+0x10a>
            }
            #endif
            #if ( ipconfigUSE_LLMNR == 1 )
            {
                /* Program the LLMNR address. */
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddress.ucBytes );
 80174d0:	494c      	ldr	r1, [pc, #304]	@ (8017604 <xSTM32H_NetworkInterfaceInitialise+0x270>)
 80174d2:	4845      	ldr	r0, [pc, #276]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80174d4:	f7ff ff1a 	bl	801730c <prvSetMAC_HashFilter>
            }
            #endif
            #if ( ( ipconfigUSE_LLMNR == 1 ) && ( ipconfigUSE_IPv6 != 0 ) )
            {
                prvSetMAC_HashFilter( &xEthHandle, ( uint8_t * ) xLLMNR_MacAddressIPv6.ucBytes );
 80174d8:	494b      	ldr	r1, [pc, #300]	@ (8017608 <xSTM32H_NetworkInterfaceInitialise+0x274>)
 80174da:	4843      	ldr	r0, [pc, #268]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80174dc:	f7ff ff16 	bl	801730c <prvSetMAC_HashFilter>
            }
            #endif

            {
                /* The EMAC address of the first end-point has been registered in HAL_ETH_Init(). */
                for( ;
 80174e0:	e03a      	b.n	8017558 <xSTM32H_NetworkInterfaceInitialise+0x1c4>
                     pxEndPoint != NULL;
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
                {
                    switch( pxEndPoint->bits.bIPv6 )
 80174e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174e4:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 80174e8:	f3c3 0380 	ubfx	r3, r3, #2, #1
 80174ec:	b2db      	uxtb	r3, r3
 80174ee:	2b00      	cmp	r3, #0
 80174f0:	d002      	beq.n	80174f8 <xSTM32H_NetworkInterfaceInitialise+0x164>
 80174f2:	2b01      	cmp	r3, #1
 80174f4:	d00d      	beq.n	8017512 <xSTM32H_NetworkInterfaceInitialise+0x17e>
                               break;
                        #endif /* ( ipconfigUSE_IPv6 != 0 ) */

                        default:
                            /* MISRA 16.4 Compliance */
                            break;
 80174f6:	e028      	b.n	801754a <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                if( xEthHandle.Init.MACAddr != ( uint8_t * ) pxEndPoint->xMACAddress.ucBytes )
 80174f8:	4b3b      	ldr	r3, [pc, #236]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 80174fa:	685a      	ldr	r2, [r3, #4]
 80174fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80174fe:	33e8      	adds	r3, #232	@ 0xe8
 8017500:	429a      	cmp	r2, r3
 8017502:	d021      	beq.n	8017548 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                    prvSetMAC_HashFilter( &xEthHandle, pxEndPoint->xMACAddress.ucBytes );
 8017504:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017506:	33e8      	adds	r3, #232	@ 0xe8
 8017508:	4619      	mov	r1, r3
 801750a:	4837      	ldr	r0, [pc, #220]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 801750c:	f7ff fefe 	bl	801730c <prvSetMAC_HashFilter>
                                break;
 8017510:	e01a      	b.n	8017548 <xSTM32H_NetworkInterfaceInitialise+0x1b4>
                                   uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0xff, 0, 0, 0 };
 8017512:	4a3e      	ldr	r2, [pc, #248]	@ (801760c <xSTM32H_NetworkInterfaceInitialise+0x278>)
 8017514:	f107 0314 	add.w	r3, r7, #20
 8017518:	e892 0003 	ldmia.w	r2, {r0, r1}
 801751c:	6018      	str	r0, [r3, #0]
 801751e:	3304      	adds	r3, #4
 8017520:	8019      	strh	r1, [r3, #0]
                                   ucMACAddress[ 3 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 13 ];
 8017522:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017524:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8017528:	75fb      	strb	r3, [r7, #23]
                                   ucMACAddress[ 4 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 14 ];
 801752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801752c:	f893 3046 	ldrb.w	r3, [r3, #70]	@ 0x46
 8017530:	763b      	strb	r3, [r7, #24]
                                   ucMACAddress[ 5 ] = pxEndPoint->ipv6_settings.xIPAddress.ucBytes[ 15 ];
 8017532:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017534:	f893 3047 	ldrb.w	r3, [r3, #71]	@ 0x47
 8017538:	767b      	strb	r3, [r7, #25]
                                   prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 801753a:	f107 0314 	add.w	r3, r7, #20
 801753e:	4619      	mov	r1, r3
 8017540:	4829      	ldr	r0, [pc, #164]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017542:	f7ff fee3 	bl	801730c <prvSetMAC_HashFilter>
                               break;
 8017546:	e000      	b.n	801754a <xSTM32H_NetworkInterfaceInitialise+0x1b6>
                                break;
 8017548:	bf00      	nop
                     pxEndPoint = FreeRTOS_NextEndPoint( pxMyInterface, pxEndPoint ) )
 801754a:	4b25      	ldr	r3, [pc, #148]	@ (80175e0 <xSTM32H_NetworkInterfaceInitialise+0x24c>)
 801754c:	681b      	ldr	r3, [r3, #0]
 801754e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017550:	4618      	mov	r0, r3
 8017552:	f7f5 fae3 	bl	800cb1c <FreeRTOS_NextEndPoint>
 8017556:	62b8      	str	r0, [r7, #40]	@ 0x28
                     pxEndPoint != NULL;
 8017558:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801755a:	2b00      	cmp	r3, #0
 801755c:	d1c1      	bne.n	80174e2 <xSTM32H_NetworkInterfaceInitialise+0x14e>
            }

            #if ( ipconfigUSE_IPv6 != 0 )
            {
                /* Allow traffic destined to IPv6 all nodes multicast MAC 33:33:00:00:00:01 */
                const uint8_t ucMACAddress[ 6 ] = { 0x33, 0x33, 0, 0, 0, 0x01 };
 801755e:	4a2c      	ldr	r2, [pc, #176]	@ (8017610 <xSTM32H_NetworkInterfaceInitialise+0x27c>)
 8017560:	f107 030c 	add.w	r3, r7, #12
 8017564:	e892 0003 	ldmia.w	r2, {r0, r1}
 8017568:	6018      	str	r0, [r3, #0]
 801756a:	3304      	adds	r3, #4
 801756c:	8019      	strh	r1, [r3, #0]
                prvSetMAC_HashFilter( &xEthHandle, ucMACAddress );
 801756e:	f107 030c 	add.w	r3, r7, #12
 8017572:	4619      	mov	r1, r3
 8017574:	481c      	ldr	r0, [pc, #112]	@ (80175e8 <xSTM32H_NetworkInterfaceInitialise+0x254>)
 8017576:	f7ff fec9 	bl	801730c <prvSetMAC_HashFilter>
            }
            #endif /* ( ipconfigUSE_IPv6 != 0 ) */

            /* Initialize the MACB and set all PHY properties */
            prvMACBProbePhy();
 801757a:	f000 f911 	bl	80177a0 <prvMACBProbePhy>

            /* Force a negotiation with the Switch or Router and wait for LS. */
            prvEthernetUpdateConfig( pdTRUE );
 801757e:	2001      	movs	r0, #1
 8017580:	f000 f926 	bl	80177d0 <prvEthernetUpdateConfig>

            /* The deferred interrupt handler task is created at the highest
             *  possible priority to ensure the interrupt handler can return directly
             *  to it.  The task's handle is stored in xEMACTaskHandle so interrupts can
             *  notify the task when there is something to process. */
            if( xTaskCreate( prvEMACHandlerTask, niEMAC_HANDLER_TASK_NAME, niEMAC_HANDLER_TASK_STACK_SIZE, NULL, niEMAC_HANDLER_TASK_PRIORITY, &( xEMACTaskHandle ) ) == pdPASS )
 8017584:	4b23      	ldr	r3, [pc, #140]	@ (8017614 <xSTM32H_NetworkInterfaceInitialise+0x280>)
 8017586:	9301      	str	r3, [sp, #4]
 8017588:	2305      	movs	r3, #5
 801758a:	9300      	str	r3, [sp, #0]
 801758c:	2300      	movs	r3, #0
 801758e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8017592:	4921      	ldr	r1, [pc, #132]	@ (8017618 <xSTM32H_NetworkInterfaceInitialise+0x284>)
 8017594:	4821      	ldr	r0, [pc, #132]	@ (801761c <xSTM32H_NetworkInterfaceInitialise+0x288>)
 8017596:	f7ec f865 	bl	8003664 <xTaskCreate>
 801759a:	4603      	mov	r3, r0
 801759c:	2b01      	cmp	r3, #1
 801759e:	d103      	bne.n	80175a8 <xSTM32H_NetworkInterfaceInitialise+0x214>
            {
                /* The task was created successfully. */
                xMacInitStatus = eMACPass;
 80175a0:	4b0e      	ldr	r3, [pc, #56]	@ (80175dc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80175a2:	2201      	movs	r2, #1
 80175a4:	701a      	strb	r2, [r3, #0]
 80175a6:	e006      	b.n	80175b6 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
            else
            {
                xMacInitStatus = eMACFailed;
 80175a8:	4b0c      	ldr	r3, [pc, #48]	@ (80175dc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80175aa:	2202      	movs	r2, #2
 80175ac:	701a      	strb	r2, [r3, #0]
 80175ae:	e002      	b.n	80175b6 <xSTM32H_NetworkInterfaceInitialise+0x222>
            }
        }
        else
        {
            /* HAL_ETH_Init() returned an error, the driver gets into a fatal error sate. */
            xMacInitStatus = eMACFailed;
 80175b0:	4b0a      	ldr	r3, [pc, #40]	@ (80175dc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80175b2:	2202      	movs	r2, #2
 80175b4:	701a      	strb	r2, [r3, #0]
        }
    } /* ( xMacInitStatus == eMACInit ) */

    if( xMacInitStatus == eMACPass )
 80175b6:	4b09      	ldr	r3, [pc, #36]	@ (80175dc <xSTM32H_NetworkInterfaceInitialise+0x248>)
 80175b8:	781b      	ldrb	r3, [r3, #0]
 80175ba:	2b01      	cmp	r3, #1
 80175bc:	d108      	bne.n	80175d0 <xSTM32H_NetworkInterfaceInitialise+0x23c>
    {
        if( xPhyObject.ulLinkStatusMask != 0U )
 80175be:	4b18      	ldr	r3, [pc, #96]	@ (8017620 <xSTM32H_NetworkInterfaceInitialise+0x28c>)
 80175c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80175c2:	2b00      	cmp	r3, #0
 80175c4:	d004      	beq.n	80175d0 <xSTM32H_NetworkInterfaceInitialise+0x23c>
        {
            xResult = pdPASS;
 80175c6:	2301      	movs	r3, #1
 80175c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
            FreeRTOS_printf( ( "Link Status is high\n" ) );
 80175ca:	4816      	ldr	r0, [pc, #88]	@ (8017624 <xSTM32H_NetworkInterfaceInitialise+0x290>)
 80175cc:	f009 fb58 	bl	8020c80 <lUDPLoggingPrintf>
            /* For now pdFAIL will be returned. But prvEMACHandlerTask() is running
             * and it will keep on checking the PHY and set 'ulLinkStatusMask' when necessary. */
        }
    }

    return xResult;
 80175d0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80175d2:	4618      	mov	r0, r3
 80175d4:	3730      	adds	r7, #48	@ 0x30
 80175d6:	46bd      	mov	sp, r7
 80175d8:	bd80      	pop	{r7, pc}
 80175da:	bf00      	nop
 80175dc:	2000216c 	.word	0x2000216c
 80175e0:	20002220 	.word	0x20002220
 80175e4:	0802607c 	.word	0x0802607c
 80175e8:	20002178 	.word	0x20002178
 80175ec:	40028000 	.word	0x40028000
 80175f0:	24040060 	.word	0x24040060
 80175f4:	24040000 	.word	0x24040000
 80175f8:	200021ec 	.word	0x200021ec
 80175fc:	20002170 	.word	0x20002170
 8017600:	20002174 	.word	0x20002174
 8017604:	08026308 	.word	0x08026308
 8017608:	08026310 	.word	0x08026310
 801760c:	080260f4 	.word	0x080260f4
 8017610:	080260fc 	.word	0x080260fc
 8017614:	20002224 	.word	0x20002224
 8017618:	080260d0 	.word	0x080260d0
 801761c:	08017b85 	.word	0x08017b85
 8017620:	20002228 	.word	0x20002228
 8017624:	080260dc 	.word	0x080260dc

08017628 <xSTM32H_GetPhyLinkStatus>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_GetPhyLinkStatus( NetworkInterface_t * pxInterface )
{
 8017628:	b480      	push	{r7}
 801762a:	b085      	sub	sp, #20
 801762c:	af00      	add	r7, sp, #0
 801762e:	6078      	str	r0, [r7, #4]
    BaseType_t xReturn;

    if( xPhyObject.ulLinkStatusMask != 0U )
 8017630:	4b07      	ldr	r3, [pc, #28]	@ (8017650 <xSTM32H_GetPhyLinkStatus+0x28>)
 8017632:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017634:	2b00      	cmp	r3, #0
 8017636:	d002      	beq.n	801763e <xSTM32H_GetPhyLinkStatus+0x16>
    {
        xReturn = pdPASS;
 8017638:	2301      	movs	r3, #1
 801763a:	60fb      	str	r3, [r7, #12]
 801763c:	e001      	b.n	8017642 <xSTM32H_GetPhyLinkStatus+0x1a>
    }
    else
    {
        xReturn = pdFAIL;
 801763e:	2300      	movs	r3, #0
 8017640:	60fb      	str	r3, [r7, #12]
    }

    return xReturn;
 8017642:	68fb      	ldr	r3, [r7, #12]
}
 8017644:	4618      	mov	r0, r3
 8017646:	3714      	adds	r7, #20
 8017648:	46bd      	mov	sp, r7
 801764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764e:	4770      	bx	lr
 8017650:	20002228 	.word	0x20002228

08017654 <pxSTM32H_FillInterfaceDescriptor>:
#endif
/*-----------------------------------------------------------*/

NetworkInterface_t * pxSTM32H_FillInterfaceDescriptor( BaseType_t xEMACIndex,
                                                       NetworkInterface_t * pxInterface )
{
 8017654:	b580      	push	{r7, lr}
 8017656:	b082      	sub	sp, #8
 8017658:	af00      	add	r7, sp, #0
 801765a:	6078      	str	r0, [r7, #4]
 801765c:	6039      	str	r1, [r7, #0]

/* This function pxSTM32Hxx_FillInterfaceDescriptor() adds a network-interface.
 * Make sure that the object pointed to by 'pxInterface'
 * is declared static or global, and that it will remain to exist. */

    snprintf( pcName, sizeof( pcName ), "eth%u", ( unsigned ) xEMACIndex );
 801765e:	687b      	ldr	r3, [r7, #4]
 8017660:	4a10      	ldr	r2, [pc, #64]	@ (80176a4 <pxSTM32H_FillInterfaceDescriptor+0x50>)
 8017662:	2111      	movs	r1, #17
 8017664:	4810      	ldr	r0, [pc, #64]	@ (80176a8 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8017666:	f00a fb37 	bl	8021cd8 <snprintf>

    memset( pxInterface, '\0', sizeof( *pxInterface ) );
 801766a:	2228      	movs	r2, #40	@ 0x28
 801766c:	2100      	movs	r1, #0
 801766e:	6838      	ldr	r0, [r7, #0]
 8017670:	f009 fe2f 	bl	80212d2 <memset>
    pxInterface->pcName = pcName;                    /* Just for logging, debugging. */
 8017674:	683b      	ldr	r3, [r7, #0]
 8017676:	4a0c      	ldr	r2, [pc, #48]	@ (80176a8 <pxSTM32H_FillInterfaceDescriptor+0x54>)
 8017678:	601a      	str	r2, [r3, #0]
    pxInterface->pvArgument = ( void * ) xEMACIndex; /* Has only meaning for the driver functions. */
 801767a:	687a      	ldr	r2, [r7, #4]
 801767c:	683b      	ldr	r3, [r7, #0]
 801767e:	605a      	str	r2, [r3, #4]
    pxInterface->pfInitialise = xSTM32H_NetworkInterfaceInitialise;
 8017680:	683b      	ldr	r3, [r7, #0]
 8017682:	4a0a      	ldr	r2, [pc, #40]	@ (80176ac <pxSTM32H_FillInterfaceDescriptor+0x58>)
 8017684:	609a      	str	r2, [r3, #8]
    pxInterface->pfOutput = xSTM32H_NetworkInterfaceOutput;
 8017686:	683b      	ldr	r3, [r7, #0]
 8017688:	4a09      	ldr	r2, [pc, #36]	@ (80176b0 <pxSTM32H_FillInterfaceDescriptor+0x5c>)
 801768a:	60da      	str	r2, [r3, #12]
    pxInterface->pfGetPhyLinkStatus = xSTM32H_GetPhyLinkStatus;
 801768c:	683b      	ldr	r3, [r7, #0]
 801768e:	4a09      	ldr	r2, [pc, #36]	@ (80176b4 <pxSTM32H_FillInterfaceDescriptor+0x60>)
 8017690:	611a      	str	r2, [r3, #16]

    FreeRTOS_AddNetworkInterface( pxInterface );
 8017692:	6838      	ldr	r0, [r7, #0]
 8017694:	f7f5 f94c 	bl	800c930 <FreeRTOS_AddNetworkInterface>

    return pxInterface;
 8017698:	683b      	ldr	r3, [r7, #0]
}
 801769a:	4618      	mov	r0, r3
 801769c:	3708      	adds	r7, #8
 801769e:	46bd      	mov	sp, r7
 80176a0:	bd80      	pop	{r7, pc}
 80176a2:	bf00      	nop
 80176a4:	08026104 	.word	0x08026104
 80176a8:	20002268 	.word	0x20002268
 80176ac:	08017395 	.word	0x08017395
 80176b0:	080176b9 	.word	0x080176b9
 80176b4:	08017629 	.word	0x08017629

080176b8 <xSTM32H_NetworkInterfaceOutput>:
/*-----------------------------------------------------------*/

static BaseType_t xSTM32H_NetworkInterfaceOutput( NetworkInterface_t * pxInterface,
                                                  NetworkBufferDescriptor_t * const pxBuffer,
                                                  BaseType_t xReleaseAfterSend )
{
 80176b8:	b580      	push	{r7, lr}
 80176ba:	b08a      	sub	sp, #40	@ 0x28
 80176bc:	af00      	add	r7, sp, #0
 80176be:	60f8      	str	r0, [r7, #12]
 80176c0:	60b9      	str	r1, [r7, #8]
 80176c2:	607a      	str	r2, [r7, #4]
    BaseType_t xResult = pdFAIL;
 80176c4:	2300      	movs	r3, #0
 80176c6:	627b      	str	r3, [r7, #36]	@ 0x24
    TickType_t xBlockTimeTicks = pdMS_TO_TICKS( 100U );
 80176c8:	2364      	movs	r3, #100	@ 0x64
 80176ca:	623b      	str	r3, [r7, #32]
    uint8_t * pucTXBuffer;

    if( xSTM32H_GetPhyLinkStatus( pxInterface ) == pdPASS )
 80176cc:	68f8      	ldr	r0, [r7, #12]
 80176ce:	f7ff ffab 	bl	8017628 <xSTM32H_GetPhyLinkStatus>
 80176d2:	4603      	mov	r3, r0
 80176d4:	2b01      	cmp	r3, #1
 80176d6:	d14c      	bne.n	8017772 <xSTM32H_NetworkInterfaceOutput+0xba>
    {
        #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
            /* Zero-copy method, pass the buffer. */
            pucTXBuffer = pxBuffer->pucEthernetBuffer;
 80176d8:	68bb      	ldr	r3, [r7, #8]
 80176da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176dc:	61fb      	str	r3, [r7, #28]

            /* As the buffer is passed to the driver, it must exist.
             * The library takes care of this. */
            configASSERT( xReleaseAfterSend != pdFALSE );
 80176de:	687b      	ldr	r3, [r7, #4]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d104      	bne.n	80176ee <xSTM32H_NetworkInterfaceOutput+0x36>
 80176e4:	f44f 7114 	mov.w	r1, #592	@ 0x250
 80176e8:	4827      	ldr	r0, [pc, #156]	@ (8017788 <xSTM32H_NetworkInterfaceOutput+0xd0>)
 80176ea:	f7e9 fec1 	bl	8001470 <vAssertCalled>
            pucTXBuffer = Tx_Buff[ xEthHandle.TxDescList.CurTxDesc ];
            /* The copy method, left here for educational purposes. */
            configASSERT( pxBuffer->xDataLength <= sizeof( Tx_Buff[ 0 ] ) );
        #endif

        ETH_BufferTypeDef xTransmitBuffer =
 80176ee:	69fb      	ldr	r3, [r7, #28]
 80176f0:	613b      	str	r3, [r7, #16]
        {
            .buffer = pucTXBuffer,
            .len    = pxBuffer->xDataLength,
 80176f2:	68bb      	ldr	r3, [r7, #8]
 80176f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
        ETH_BufferTypeDef xTransmitBuffer =
 80176f6:	617b      	str	r3, [r7, #20]
 80176f8:	2300      	movs	r3, #0
 80176fa:	61bb      	str	r3, [r7, #24]
            .next   = NULL /* FreeRTOS+TCP does not use linked buffers. */
        };
        /* This is the total length, which is equal to the buffer. */
        xTxConfig.Length = pxBuffer->xDataLength;
 80176fc:	68bb      	ldr	r3, [r7, #8]
 80176fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017700:	4a22      	ldr	r2, [pc, #136]	@ (801778c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017702:	6053      	str	r3, [r2, #4]
        xTxConfig.TxBuffer = &( xTransmitBuffer );
 8017704:	4a21      	ldr	r2, [pc, #132]	@ (801778c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017706:	f107 0310 	add.w	r3, r7, #16
 801770a:	6093      	str	r3, [r2, #8]

        /* This counting semaphore counts the number of free TX DMA descriptors. */
        if( xSemaphoreTake( xTXDescriptorSemaphore, xBlockTimeTicks ) != pdPASS )
 801770c:	4b20      	ldr	r3, [pc, #128]	@ (8017790 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 801770e:	681b      	ldr	r3, [r3, #0]
 8017710:	6a39      	ldr	r1, [r7, #32]
 8017712:	4618      	mov	r0, r3
 8017714:	f7eb fc86 	bl	8003024 <xQueueSemaphoreTake>
 8017718:	4603      	mov	r3, r0
 801771a:	2b01      	cmp	r3, #1
 801771c:	d003      	beq.n	8017726 <xSTM32H_NetworkInterfaceOutput+0x6e>
        {
            /* If the logging routine is using the network, the following message
             * may cause a new error message. */
            FreeRTOS_printf( ( "emacps_send_message: Time-out waiting for TX buffer\n" ) );
 801771e:	481d      	ldr	r0, [pc, #116]	@ (8017794 <xSTM32H_NetworkInterfaceOutput+0xdc>)
 8017720:	f009 faae 	bl	8020c80 <lUDPLoggingPrintf>
 8017724:	e025      	b.n	8017772 <xSTM32H_NetworkInterfaceOutput+0xba>
  __ASM volatile ("dsb 0xF":::"memory");
 8017726:	f3bf 8f4f 	dsb	sy
}
 801772a:	bf00      	nop
            /* Memory barrier: Make sure that the data written to the packet buffer got written. */
            __DSB();

            /* Get exclusive access to the TX process.
             * Both the IP-task and the EMAC task will work on the TX process. */
            if( xSemaphoreTake( xTransmissionMutex, xBlockTimeTicks ) != pdFAIL )
 801772c:	4b1a      	ldr	r3, [pc, #104]	@ (8017798 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 801772e:	681b      	ldr	r3, [r3, #0]
 8017730:	6a39      	ldr	r1, [r7, #32]
 8017732:	4618      	mov	r0, r3
 8017734:	f7eb fc76 	bl	8003024 <xQueueSemaphoreTake>
 8017738:	4603      	mov	r3, r0
 801773a:	2b00      	cmp	r3, #0
 801773c:	d019      	beq.n	8017772 <xSTM32H_NetworkInterfaceOutput+0xba>
            {
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    /* Do not release the buffer. */
                    xReleaseAfterSend = pdFALSE;
 801773e:	2300      	movs	r3, #0
 8017740:	607b      	str	r3, [r7, #4]
                     * to the physical memory. */
                    __DSB();
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                if( HAL_ETH_Transmit_IT( &( xEthHandle ), &( xTxConfig ) ) == HAL_OK )
 8017742:	4912      	ldr	r1, [pc, #72]	@ (801778c <xSTM32H_NetworkInterfaceOutput+0xd4>)
 8017744:	4815      	ldr	r0, [pc, #84]	@ (801779c <xSTM32H_NetworkInterfaceOutput+0xe4>)
 8017746:	f000 fcef 	bl	8018128 <HAL_ETH_Transmit_IT>
 801774a:	4603      	mov	r3, r0
 801774c:	2b00      	cmp	r3, #0
 801774e:	d102      	bne.n	8017756 <xSTM32H_NetworkInterfaceOutput+0x9e>
                {
                    xResult = pdPASS;
 8017750:	2301      	movs	r3, #1
 8017752:	627b      	str	r3, [r7, #36]	@ 0x24
 8017754:	e006      	b.n	8017764 <xSTM32H_NetworkInterfaceOutput+0xac>
                }
                else
                {
                    /* As the transmission packet was not queued,
                     * the counting semaphore should be given. */
                    xSemaphoreGive( xTXDescriptorSemaphore );
 8017756:	4b0e      	ldr	r3, [pc, #56]	@ (8017790 <xSTM32H_NetworkInterfaceOutput+0xd8>)
 8017758:	6818      	ldr	r0, [r3, #0]
 801775a:	2300      	movs	r3, #0
 801775c:	2200      	movs	r2, #0
 801775e:	2100      	movs	r1, #0
 8017760:	f7eb faa8 	bl	8002cb4 <xQueueGenericSend>
                }

                /* And release the mutex. */
                xSemaphoreGive( xTransmissionMutex );
 8017764:	4b0c      	ldr	r3, [pc, #48]	@ (8017798 <xSTM32H_NetworkInterfaceOutput+0xe0>)
 8017766:	6818      	ldr	r0, [r3, #0]
 8017768:	2300      	movs	r3, #0
 801776a:	2200      	movs	r2, #0
 801776c:	2100      	movs	r1, #0
 801776e:	f7eb faa1 	bl	8002cb4 <xQueueGenericSend>
            /* Call the standard trace macro to log the send event. */
            iptraceNETWORK_INTERFACE_TRANSMIT();
        }
    }

    if( xReleaseAfterSend != pdFALSE )
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	2b00      	cmp	r3, #0
 8017776:	d002      	beq.n	801777e <xSTM32H_NetworkInterfaceOutput+0xc6>
    {
        vReleaseNetworkBufferAndDescriptor( pxBuffer );
 8017778:	68b8      	ldr	r0, [r7, #8]
 801777a:	f7ff f825 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
    }

    return xResult;
 801777e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8017780:	4618      	mov	r0, r3
 8017782:	3728      	adds	r7, #40	@ 0x28
 8017784:	46bd      	mov	sp, r7
 8017786:	bd80      	pop	{r7, pc}
 8017788:	0802607c 	.word	0x0802607c
 801778c:	200021ec 	.word	0x200021ec
 8017790:	20002170 	.word	0x20002170
 8017794:	0802610c 	.word	0x0802610c
 8017798:	20002174 	.word	0x20002174
 801779c:	20002178 	.word	0x20002178

080177a0 <prvMACBProbePhy>:
/*******************************************************************************
*                      Network Interface Static Functions
*******************************************************************************/

static void prvMACBProbePhy( void )
{
 80177a0:	b580      	push	{r7, lr}
 80177a2:	af00      	add	r7, sp, #0
    /* Bind the write and read access functions. */
    vPhyInitialise( &( xPhyObject ),
 80177a4:	4a06      	ldr	r2, [pc, #24]	@ (80177c0 <prvMACBProbePhy+0x20>)
 80177a6:	4907      	ldr	r1, [pc, #28]	@ (80177c4 <prvMACBProbePhy+0x24>)
 80177a8:	4807      	ldr	r0, [pc, #28]	@ (80177c8 <prvMACBProbePhy+0x28>)
 80177aa:	f7ff f8c5 	bl	8016938 <vPhyInitialise>
                    ( xApplicationPhyReadHook_t ) ETH_PHY_IO_ReadReg,
                    ( xApplicationPhyWriteHook_t ) ETH_PHY_IO_WriteReg );
    /* Poll the bus for all connected PHY's. */
    xPhyDiscover( &( xPhyObject ) );
 80177ae:	4806      	ldr	r0, [pc, #24]	@ (80177c8 <prvMACBProbePhy+0x28>)
 80177b0:	f7ff f8d8 	bl	8016964 <xPhyDiscover>
    /* Configure them using the properties provided. */
    xPhyConfigure( &( xPhyObject ), &( xPHYProperties ) );
 80177b4:	4905      	ldr	r1, [pc, #20]	@ (80177cc <prvMACBProbePhy+0x2c>)
 80177b6:	4804      	ldr	r0, [pc, #16]	@ (80177c8 <prvMACBProbePhy+0x28>)
 80177b8:	f7ff f9d2 	bl	8016b60 <xPhyConfigure>
}
 80177bc:	bf00      	nop
 80177be:	bd80      	pop	{r7, pc}
 80177c0:	080179c1 	.word	0x080179c1
 80177c4:	08017989 	.word	0x08017989
 80177c8:	20002228 	.word	0x20002228
 80177cc:	08026408 	.word	0x08026408

080177d0 <prvEthernetUpdateConfig>:
/*-----------------------------------------------------------*/

static void prvEthernetUpdateConfig( BaseType_t xForce )
{
 80177d0:	b580      	push	{r7, lr}
 80177d2:	b09e      	sub	sp, #120	@ 0x78
 80177d4:	af00      	add	r7, sp, #0
 80177d6:	6078      	str	r0, [r7, #4]
    ETH_MACConfigTypeDef MACConf;
    uint32_t speed = 0, duplex = 0;
 80177d8:	2300      	movs	r3, #0
 80177da:	677b      	str	r3, [r7, #116]	@ 0x74
 80177dc:	2300      	movs	r3, #0
 80177de:	673b      	str	r3, [r7, #112]	@ 0x70

    FreeRTOS_printf( ( "prvEthernetUpdateConfig: LS mask %02lX Force %d\n",
 80177e0:	4b25      	ldr	r3, [pc, #148]	@ (8017878 <prvEthernetUpdateConfig+0xa8>)
 80177e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80177e4:	687a      	ldr	r2, [r7, #4]
 80177e6:	4619      	mov	r1, r3
 80177e8:	4824      	ldr	r0, [pc, #144]	@ (801787c <prvEthernetUpdateConfig+0xac>)
 80177ea:	f009 fa49 	bl	8020c80 <lUDPLoggingPrintf>
                       xPhyObject.ulLinkStatusMask,
                       ( int ) xForce ) );

    if( ( xForce != pdFALSE ) || ( xPhyObject.ulLinkStatusMask != 0 ) )
 80177ee:	687b      	ldr	r3, [r7, #4]
 80177f0:	2b00      	cmp	r3, #0
 80177f2:	d103      	bne.n	80177fc <prvEthernetUpdateConfig+0x2c>
 80177f4:	4b20      	ldr	r3, [pc, #128]	@ (8017878 <prvEthernetUpdateConfig+0xa8>)
 80177f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d035      	beq.n	8017868 <prvEthernetUpdateConfig+0x98>
    {
        /* Restart the auto-negotiation. */
        xPhyStartAutoNegotiation( &xPhyObject, xPhyGetMask( &( xPhyObject ) ) );
 80177fc:	4b1e      	ldr	r3, [pc, #120]	@ (8017878 <prvEthernetUpdateConfig+0xa8>)
 80177fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017800:	2201      	movs	r2, #1
 8017802:	fa02 f303 	lsl.w	r3, r2, r3
 8017806:	3b01      	subs	r3, #1
 8017808:	4619      	mov	r1, r3
 801780a:	481b      	ldr	r0, [pc, #108]	@ (8017878 <prvEthernetUpdateConfig+0xa8>)
 801780c:	f7ff faae 	bl	8016d6c <xPhyStartAutoNegotiation>

        /* Configure the MAC with the Duplex Mode fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucDuplex == PHY_DUPLEX_FULL )
 8017810:	4b19      	ldr	r3, [pc, #100]	@ (8017878 <prvEthernetUpdateConfig+0xa8>)
 8017812:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8017816:	2b02      	cmp	r3, #2
 8017818:	d103      	bne.n	8017822 <prvEthernetUpdateConfig+0x52>
        {
            duplex = ETH_FULLDUPLEX_MODE;
 801781a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801781e:	673b      	str	r3, [r7, #112]	@ 0x70
 8017820:	e001      	b.n	8017826 <prvEthernetUpdateConfig+0x56>
        }
        else
        {
            duplex = ETH_HALFDUPLEX_MODE;
 8017822:	2300      	movs	r3, #0
 8017824:	673b      	str	r3, [r7, #112]	@ 0x70
        }

        /* Configure the MAC with the speed fixed by the
         * auto-negotiation process. */
        if( xPhyObject.xPhyProperties.ucSpeed == PHY_SPEED_10 )
 8017826:	4b14      	ldr	r3, [pc, #80]	@ (8017878 <prvEthernetUpdateConfig+0xa8>)
 8017828:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801782c:	2b01      	cmp	r3, #1
 801782e:	d102      	bne.n	8017836 <prvEthernetUpdateConfig+0x66>
        {
            speed = ETH_SPEED_10M;
 8017830:	2300      	movs	r3, #0
 8017832:	677b      	str	r3, [r7, #116]	@ 0x74
 8017834:	e002      	b.n	801783c <prvEthernetUpdateConfig+0x6c>
        }
        else
        {
            speed = ETH_SPEED_100M;
 8017836:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801783a:	677b      	str	r3, [r7, #116]	@ 0x74
        }

        /* Get MAC and configure it */
        HAL_ETH_GetMACConfig( &( xEthHandle ), &( MACConf ) );
 801783c:	f107 030c 	add.w	r3, r7, #12
 8017840:	4619      	mov	r1, r3
 8017842:	480f      	ldr	r0, [pc, #60]	@ (8017880 <prvEthernetUpdateConfig+0xb0>)
 8017844:	f000 ffcc 	bl	80187e0 <HAL_ETH_GetMACConfig>
        MACConf.DuplexMode = duplex;
 8017848:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801784a:	627b      	str	r3, [r7, #36]	@ 0x24
        MACConf.Speed = speed;
 801784c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801784e:	623b      	str	r3, [r7, #32]
        HAL_ETH_SetMACConfig( &( xEthHandle ), &( MACConf ) );
 8017850:	f107 030c 	add.w	r3, r7, #12
 8017854:	4619      	mov	r1, r3
 8017856:	480a      	ldr	r0, [pc, #40]	@ (8017880 <prvEthernetUpdateConfig+0xb0>)
 8017858:	f001 f996 	bl	8018b88 <HAL_ETH_SetMACConfig>
        #if ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 )
        {
            MACConf.ChecksumOffload = ENABLE;
 801785c:	2301      	movs	r3, #1
 801785e:	743b      	strb	r3, [r7, #16]
            MACConf.ChecksumOffload = DISABLE;
        }
        #endif /* ( ipconfigDRIVER_INCLUDED_RX_IP_CHECKSUM != 0 ) */

        /* Restart MAC interface */
        HAL_ETH_Start_IT( &( xEthHandle ) );
 8017860:	4807      	ldr	r0, [pc, #28]	@ (8017880 <prvEthernetUpdateConfig+0xb0>)
 8017862:	f000 fb64 	bl	8017f2e <HAL_ETH_Start_IT>
 8017866:	e003      	b.n	8017870 <prvEthernetUpdateConfig+0xa0>
    }
    else
    {
        /* Stop MAC interface */
        HAL_ETH_Stop_IT( &( xEthHandle ) );
 8017868:	4805      	ldr	r0, [pc, #20]	@ (8017880 <prvEthernetUpdateConfig+0xb0>)
 801786a:	f000 fbe5 	bl	8018038 <HAL_ETH_Stop_IT>
    }
}
 801786e:	bf00      	nop
 8017870:	bf00      	nop
 8017872:	3778      	adds	r7, #120	@ 0x78
 8017874:	46bd      	mov	sp, r7
 8017876:	bd80      	pop	{r7, pc}
 8017878:	20002228 	.word	0x20002228
 801787c:	08026144 	.word	0x08026144
 8017880:	20002178 	.word	0x20002178

08017884 <prvNetworkInterfaceInput>:
/*-----------------------------------------------------------*/

static BaseType_t prvNetworkInterfaceInput( void )
{
 8017884:	b580      	push	{r7, lr}
 8017886:	b08c      	sub	sp, #48	@ 0x30
 8017888:	af00      	add	r7, sp, #0
    BaseType_t xReturn = 0;
 801788a:	2300      	movs	r3, #0
 801788c:	62fb      	str	r3, [r7, #44]	@ 0x2c

    /* For as long as a packet is immediately available. */
    for( ; ; )
    {
        NetworkBufferDescriptor_t * pxBufferDescriptor;
        NetworkBufferDescriptor_t * pxReceivedBuffer = NULL;
 801788e:	2300      	movs	r3, #0
 8017890:	62bb      	str	r3, [r7, #40]	@ 0x28
        ETH_BufferTypeDef data_buffer;
        size_t uxDataLength;
        size_t uxLength;

        uxDataLength = HAL_ETH_GetRxData( &( xEthHandle ), &( data_buffer ) );
 8017892:	f107 0308 	add.w	r3, r7, #8
 8017896:	4619      	mov	r1, r3
 8017898:	4838      	ldr	r0, [pc, #224]	@ (801797c <prvNetworkInterfaceInput+0xf8>)
 801789a:	f000 fd19 	bl	80182d0 <HAL_ETH_GetRxData>
 801789e:	61f8      	str	r0, [r7, #28]

        if( uxDataLength == 0U )
 80178a0:	69fb      	ldr	r3, [r7, #28]
 80178a2:	2b00      	cmp	r3, #0
 80178a4:	d101      	bne.n	80178aa <prvNetworkInterfaceInput+0x26>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
            }
        }
    }

    return xReturn;
 80178a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178a8:	e064      	b.n	8017974 <prvNetworkInterfaceInput+0xf0>
        xReturn++;
 80178aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80178ac:	3301      	adds	r3, #1
 80178ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            uxLength = ETH_RX_BUF_SIZE;
 80178b0:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80178b4:	61bb      	str	r3, [r7, #24]
            if( data_buffer.buffer != NULL )
 80178b6:	68bb      	ldr	r3, [r7, #8]
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d004      	beq.n	80178c6 <prvNetworkInterfaceInput+0x42>
                pxReceivedBuffer = pxPacketBuffer_to_NetworkBuffer( data_buffer.buffer );
 80178bc:	68bb      	ldr	r3, [r7, #8]
 80178be:	4618      	mov	r0, r3
 80178c0:	f7f2 f8ab 	bl	8009a1a <pxPacketBuffer_to_NetworkBuffer>
 80178c4:	62b8      	str	r0, [r7, #40]	@ 0x28
            if( pxReceivedBuffer == NULL )
 80178c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178c8:	2b00      	cmp	r3, #0
 80178ca:	d102      	bne.n	80178d2 <prvNetworkInterfaceInput+0x4e>
                FreeRTOS_printf( ( "Strange: no descriptor received\n" ) );
 80178cc:	482c      	ldr	r0, [pc, #176]	@ (8017980 <prvNetworkInterfaceInput+0xfc>)
 80178ce:	f009 f9d7 	bl	8020c80 <lUDPLoggingPrintf>
        pxBufferDescriptor = pxGetNetworkBufferWithDescriptor( uxLength, 0u );
 80178d2:	2100      	movs	r1, #0
 80178d4:	69b8      	ldr	r0, [r7, #24]
 80178d6:	f7fe ff0f 	bl	80166f8 <pxGetNetworkBufferWithDescriptor>
 80178da:	6178      	str	r0, [r7, #20]
            if( pxBufferDescriptor == NULL )
 80178dc:	697b      	ldr	r3, [r7, #20]
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d102      	bne.n	80178e8 <prvNetworkInterfaceInput+0x64>
                pxReceivedBuffer = NULL;
 80178e2:	2300      	movs	r3, #0
 80178e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80178e6:	e005      	b.n	80178f4 <prvNetworkInterfaceInput+0x70>
            else if( pxReceivedBuffer != NULL )
 80178e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d002      	beq.n	80178f4 <prvNetworkInterfaceInput+0x70>
                pxReceivedBuffer->xDataLength = uxDataLength;
 80178ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80178f0:	69fa      	ldr	r2, [r7, #28]
 80178f2:	629a      	str	r2, [r3, #40]	@ 0x28
            uint8_t * pucBuffer = NULL;
 80178f4:	2300      	movs	r3, #0
 80178f6:	627b      	str	r3, [r7, #36]	@ 0x24
            if( pxBufferDescriptor != NULL )
 80178f8:	697b      	ldr	r3, [r7, #20]
 80178fa:	2b00      	cmp	r3, #0
 80178fc:	d002      	beq.n	8017904 <prvNetworkInterfaceInput+0x80>
                pucBuffer = pxBufferDescriptor->pucEthernetBuffer;
 80178fe:	697b      	ldr	r3, [r7, #20]
 8017900:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017902:	627b      	str	r3, [r7, #36]	@ 0x24
            HAL_ETH_BuildRxDescriptors( &( xEthHandle ), pucBuffer );
 8017904:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8017906:	481d      	ldr	r0, [pc, #116]	@ (801797c <prvNetworkInterfaceInput+0xf8>)
 8017908:	f000 fd2a 	bl	8018360 <HAL_ETH_BuildRxDescriptors>
        if( pxReceivedBuffer != NULL )
 801790c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801790e:	2b00      	cmp	r3, #0
 8017910:	d0bd      	beq.n	801788e <prvNetworkInterfaceInput+0xa>
            BaseType_t xDoRelease = pdFALSE;
 8017912:	2300      	movs	r3, #0
 8017914:	623b      	str	r3, [r7, #32]
            if( eConsiderFrameForProcessing( pxReceivedBuffer->pucEthernetBuffer ) != eProcessBuffer )
 8017916:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801791a:	4618      	mov	r0, r3
 801791c:	f7f1 f9e4 	bl	8008ce8 <eConsiderFrameForProcessing>
 8017920:	4603      	mov	r3, r0
 8017922:	2b01      	cmp	r3, #1
 8017924:	d002      	beq.n	801792c <prvNetworkInterfaceInput+0xa8>
                xDoRelease = pdTRUE;
 8017926:	2301      	movs	r3, #1
 8017928:	623b      	str	r3, [r7, #32]
 801792a:	e01c      	b.n	8017966 <prvNetworkInterfaceInput+0xe2>
                IPStackEvent_t xRxEvent =
 801792c:	2301      	movs	r3, #1
 801792e:	703b      	strb	r3, [r7, #0]
 8017930:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017932:	607b      	str	r3, [r7, #4]
                pxReceivedBuffer->pxInterface = pxMyInterface;
 8017934:	4b13      	ldr	r3, [pc, #76]	@ (8017984 <prvNetworkInterfaceInput+0x100>)
 8017936:	681a      	ldr	r2, [r3, #0]
 8017938:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801793a:	62da      	str	r2, [r3, #44]	@ 0x2c
                pxReceivedBuffer->pxEndPoint = FreeRTOS_MatchingEndpoint( pxMyInterface, pxReceivedBuffer->pucEthernetBuffer );
 801793c:	4b11      	ldr	r3, [pc, #68]	@ (8017984 <prvNetworkInterfaceInput+0x100>)
 801793e:	681a      	ldr	r2, [r3, #0]
 8017940:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017944:	4619      	mov	r1, r3
 8017946:	4610      	mov	r0, r2
 8017948:	f7f5 fb96 	bl	800d078 <FreeRTOS_MatchingEndpoint>
 801794c:	4602      	mov	r2, r0
 801794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017950:	631a      	str	r2, [r3, #48]	@ 0x30
                if( xSendEventStructToIPTask( &( xRxEvent ), 0 ) != pdFALSE )
 8017952:	463b      	mov	r3, r7
 8017954:	2100      	movs	r1, #0
 8017956:	4618      	mov	r0, r3
 8017958:	f7f1 f972 	bl	8008c40 <xSendEventStructToIPTask>
 801795c:	4603      	mov	r3, r0
 801795e:	2b00      	cmp	r3, #0
 8017960:	d101      	bne.n	8017966 <prvNetworkInterfaceInput+0xe2>
                    xDoRelease = pdTRUE;
 8017962:	2301      	movs	r3, #1
 8017964:	623b      	str	r3, [r7, #32]
            if( xDoRelease != pdFALSE )
 8017966:	6a3b      	ldr	r3, [r7, #32]
 8017968:	2b00      	cmp	r3, #0
 801796a:	d090      	beq.n	801788e <prvNetworkInterfaceInput+0xa>
                vReleaseNetworkBufferAndDescriptor( pxReceivedBuffer );
 801796c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 801796e:	f7fe ff2b 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
    {
 8017972:	e78c      	b.n	801788e <prvNetworkInterfaceInput+0xa>
}
 8017974:	4618      	mov	r0, r3
 8017976:	3730      	adds	r7, #48	@ 0x30
 8017978:	46bd      	mov	sp, r7
 801797a:	bd80      	pop	{r7, pc}
 801797c:	20002178 	.word	0x20002178
 8017980:	08026178 	.word	0x08026178
 8017984:	20002220 	.word	0x20002220

08017988 <ETH_PHY_IO_ReadReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_ReadReg( uint32_t ulDevAddr,
                                   uint32_t ulRegAddr,
                                   uint32_t * pulRegVal )
{
 8017988:	b580      	push	{r7, lr}
 801798a:	b086      	sub	sp, #24
 801798c:	af00      	add	r7, sp, #0
 801798e:	60f8      	str	r0, [r7, #12]
 8017990:	60b9      	str	r1, [r7, #8]
 8017992:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 8017994:	f04f 33ff 	mov.w	r3, #4294967295
 8017998:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_ReadPHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 801799a:	687b      	ldr	r3, [r7, #4]
 801799c:	68ba      	ldr	r2, [r7, #8]
 801799e:	68f9      	ldr	r1, [r7, #12]
 80179a0:	4806      	ldr	r0, [pc, #24]	@ (80179bc <ETH_PHY_IO_ReadReg+0x34>)
 80179a2:	f000 fe75 	bl	8018690 <HAL_ETH_ReadPHYRegister>
 80179a6:	4603      	mov	r3, r0
 80179a8:	2b00      	cmp	r3, #0
 80179aa:	d101      	bne.n	80179b0 <ETH_PHY_IO_ReadReg+0x28>
    {
        iResult = 0;
 80179ac:	2300      	movs	r3, #0
 80179ae:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 80179b0:	697b      	ldr	r3, [r7, #20]
}
 80179b2:	4618      	mov	r0, r3
 80179b4:	3718      	adds	r7, #24
 80179b6:	46bd      	mov	sp, r7
 80179b8:	bd80      	pop	{r7, pc}
 80179ba:	bf00      	nop
 80179bc:	20002178 	.word	0x20002178

080179c0 <ETH_PHY_IO_WriteReg>:
 * @retval 0 if OK -1 if Error
 */
static int32_t ETH_PHY_IO_WriteReg( uint32_t ulDevAddr,
                                    uint32_t ulRegAddr,
                                    uint32_t pulRegVal )
{
 80179c0:	b580      	push	{r7, lr}
 80179c2:	b086      	sub	sp, #24
 80179c4:	af00      	add	r7, sp, #0
 80179c6:	60f8      	str	r0, [r7, #12]
 80179c8:	60b9      	str	r1, [r7, #8]
 80179ca:	607a      	str	r2, [r7, #4]
    int32_t iResult = -1;
 80179cc:	f04f 33ff 	mov.w	r3, #4294967295
 80179d0:	617b      	str	r3, [r7, #20]

    if( HAL_ETH_WritePHYRegister( &( xEthHandle ), ulDevAddr, ulRegAddr, pulRegVal ) == HAL_OK )
 80179d2:	687b      	ldr	r3, [r7, #4]
 80179d4:	68ba      	ldr	r2, [r7, #8]
 80179d6:	68f9      	ldr	r1, [r7, #12]
 80179d8:	4806      	ldr	r0, [pc, #24]	@ (80179f4 <ETH_PHY_IO_WriteReg+0x34>)
 80179da:	f000 fead 	bl	8018738 <HAL_ETH_WritePHYRegister>
 80179de:	4603      	mov	r3, r0
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d101      	bne.n	80179e8 <ETH_PHY_IO_WriteReg+0x28>
    {
        iResult = 0;
 80179e4:	2300      	movs	r3, #0
 80179e6:	617b      	str	r3, [r7, #20]
    }

    return iResult;
 80179e8:	697b      	ldr	r3, [r7, #20]
}
 80179ea:	4618      	mov	r0, r3
 80179ec:	3718      	adds	r7, #24
 80179ee:	46bd      	mov	sp, r7
 80179f0:	bd80      	pop	{r7, pc}
 80179f2:	bf00      	nop
 80179f4:	20002178 	.word	0x20002178

080179f8 <ETH_IRQHandler>:
/*******************************************************************************
*                   Ethernet Handling Functions
*******************************************************************************/

void ETH_IRQHandler( void )
{
 80179f8:	b580      	push	{r7, lr}
 80179fa:	af00      	add	r7, sp, #0
    HAL_ETH_IRQHandler( &( xEthHandle ) );
 80179fc:	4802      	ldr	r0, [pc, #8]	@ (8017a08 <ETH_IRQHandler+0x10>)
 80179fe:	f000 fd27 	bl	8018450 <HAL_ETH_IRQHandler>
}
 8017a02:	bf00      	nop
 8017a04:	bd80      	pop	{r7, pc}
 8017a06:	bf00      	nop
 8017a08:	20002178 	.word	0x20002178

08017a0c <prvSetFlagsAndNotify>:
/*-----------------------------------------------------------*/

static void prvSetFlagsAndNotify( uint32_t ulFlags )
{
 8017a0c:	b580      	push	{r7, lr}
 8017a0e:	b084      	sub	sp, #16
 8017a10:	af00      	add	r7, sp, #0
 8017a12:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8017a14:	2300      	movs	r3, #0
 8017a16:	60fb      	str	r3, [r7, #12]

    /* Ethernet RX-Complete callback function, elsewhere declared as weak.
     * No critical section needed, this function is called from an ISR. */
    ulISREvents |= ulFlags;
 8017a18:	4b10      	ldr	r3, [pc, #64]	@ (8017a5c <prvSetFlagsAndNotify+0x50>)
 8017a1a:	681a      	ldr	r2, [r3, #0]
 8017a1c:	687b      	ldr	r3, [r7, #4]
 8017a1e:	4313      	orrs	r3, r2
 8017a20:	4a0e      	ldr	r2, [pc, #56]	@ (8017a5c <prvSetFlagsAndNotify+0x50>)
 8017a22:	6013      	str	r3, [r2, #0]

    /* Wakeup the prvEMACHandlerTask. */
    if( xEMACTaskHandle != NULL )
 8017a24:	4b0e      	ldr	r3, [pc, #56]	@ (8017a60 <prvSetFlagsAndNotify+0x54>)
 8017a26:	681b      	ldr	r3, [r3, #0]
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d012      	beq.n	8017a52 <prvSetFlagsAndNotify+0x46>
    {
        vTaskNotifyGiveFromISR( xEMACTaskHandle, &( xHigherPriorityTaskWoken ) );
 8017a2c:	4b0c      	ldr	r3, [pc, #48]	@ (8017a60 <prvSetFlagsAndNotify+0x54>)
 8017a2e:	681b      	ldr	r3, [r3, #0]
 8017a30:	f107 020c 	add.w	r2, r7, #12
 8017a34:	2100      	movs	r1, #0
 8017a36:	4618      	mov	r0, r3
 8017a38:	f7ed fbd4 	bl	80051e4 <vTaskGenericNotifyGiveFromISR>
        portYIELD_FROM_ISR( xHigherPriorityTaskWoken );
 8017a3c:	68fb      	ldr	r3, [r7, #12]
 8017a3e:	2b00      	cmp	r3, #0
 8017a40:	d007      	beq.n	8017a52 <prvSetFlagsAndNotify+0x46>
 8017a42:	4b08      	ldr	r3, [pc, #32]	@ (8017a64 <prvSetFlagsAndNotify+0x58>)
 8017a44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8017a48:	601a      	str	r2, [r3, #0]
 8017a4a:	f3bf 8f4f 	dsb	sy
 8017a4e:	f3bf 8f6f 	isb	sy
    }
}
 8017a52:	bf00      	nop
 8017a54:	3710      	adds	r7, #16
 8017a56:	46bd      	mov	sp, r7
 8017a58:	bd80      	pop	{r7, pc}
 8017a5a:	bf00      	nop
 8017a5c:	20002168 	.word	0x20002168
 8017a60:	20002224 	.word	0x20002224
 8017a64:	e000ed04 	.word	0xe000ed04

08017a68 <HAL_ETH_TxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_TxCpltCallback( ETH_HandleTypeDef * heth )
{
 8017a68:	b580      	push	{r7, lr}
 8017a6a:	b082      	sub	sp, #8
 8017a6c:	af00      	add	r7, sp, #0
 8017a6e:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_TX_EVENT );
 8017a70:	2002      	movs	r0, #2
 8017a72:	f7ff ffcb 	bl	8017a0c <prvSetFlagsAndNotify>
}
 8017a76:	bf00      	nop
 8017a78:	3708      	adds	r7, #8
 8017a7a:	46bd      	mov	sp, r7
 8017a7c:	bd80      	pop	{r7, pc}

08017a7e <HAL_ETH_RxCpltCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_RxCpltCallback( ETH_HandleTypeDef * heth )
{
 8017a7e:	b580      	push	{r7, lr}
 8017a80:	b082      	sub	sp, #8
 8017a82:	af00      	add	r7, sp, #0
 8017a84:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_RX_EVENT );
 8017a86:	2001      	movs	r0, #1
 8017a88:	f7ff ffc0 	bl	8017a0c <prvSetFlagsAndNotify>
}
 8017a8c:	bf00      	nop
 8017a8e:	3708      	adds	r7, #8
 8017a90:	46bd      	mov	sp, r7
 8017a92:	bd80      	pop	{r7, pc}

08017a94 <HAL_ETH_DMAErrorCallback>:
/*-----------------------------------------------------------*/

void HAL_ETH_DMAErrorCallback( ETH_HandleTypeDef * heth )
{
 8017a94:	b580      	push	{r7, lr}
 8017a96:	b082      	sub	sp, #8
 8017a98:	af00      	add	r7, sp, #0
 8017a9a:	6078      	str	r0, [r7, #4]
    ( void ) heth;
    prvSetFlagsAndNotify( EMAC_IF_ERR_EVENT );
 8017a9c:	2004      	movs	r0, #4
 8017a9e:	f7ff ffb5 	bl	8017a0c <prvSetFlagsAndNotify>
}
 8017aa2:	bf00      	nop
 8017aa4:	3708      	adds	r7, #8
 8017aa6:	46bd      	mov	sp, r7
 8017aa8:	bd80      	pop	{r7, pc}
	...

08017aac <vNetworkInterfaceAllocateRAMToBuffers>:
    __attribute__( ( section( ".ethernet_data" ) ) )
#endif /* ( ipconfigZERO_COPY_RX_DRIVER != 0 || ipconfigZERO_COPY_TX_DRIVER != 0 ) */
__attribute__( ( aligned( 32 ) ) );

void vNetworkInterfaceAllocateRAMToBuffers( NetworkBufferDescriptor_t pxNetworkBuffers[ ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS ] )
{
 8017aac:	b480      	push	{r7}
 8017aae:	b085      	sub	sp, #20
 8017ab0:	af00      	add	r7, sp, #0
 8017ab2:	6078      	str	r0, [r7, #4]
    uint8_t * ucRAMBuffer = ucNetworkPackets;
 8017ab4:	4b15      	ldr	r3, [pc, #84]	@ (8017b0c <vNetworkInterfaceAllocateRAMToBuffers+0x60>)
 8017ab6:	60fb      	str	r3, [r7, #12]
    uint32_t ul;

    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8017ab8:	2300      	movs	r3, #0
 8017aba:	60bb      	str	r3, [r7, #8]
 8017abc:	e01c      	b.n	8017af8 <vNetworkInterfaceAllocateRAMToBuffers+0x4c>
    {
        pxNetworkBuffers[ ul ].pucEthernetBuffer = ucRAMBuffer + ipBUFFER_PADDING;
 8017abe:	68ba      	ldr	r2, [r7, #8]
 8017ac0:	4613      	mov	r3, r2
 8017ac2:	00db      	lsls	r3, r3, #3
 8017ac4:	1a9b      	subs	r3, r3, r2
 8017ac6:	00db      	lsls	r3, r3, #3
 8017ac8:	461a      	mov	r2, r3
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	4413      	add	r3, r2
 8017ace:	68fa      	ldr	r2, [r7, #12]
 8017ad0:	320a      	adds	r2, #10
 8017ad2:	625a      	str	r2, [r3, #36]	@ 0x24
        *( ( unsigned * ) ucRAMBuffer ) = ( unsigned ) ( &( pxNetworkBuffers[ ul ] ) );
 8017ad4:	68ba      	ldr	r2, [r7, #8]
 8017ad6:	4613      	mov	r3, r2
 8017ad8:	00db      	lsls	r3, r3, #3
 8017ada:	1a9b      	subs	r3, r3, r2
 8017adc:	00db      	lsls	r3, r3, #3
 8017ade:	461a      	mov	r2, r3
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	4413      	add	r3, r2
 8017ae4:	461a      	mov	r2, r3
 8017ae6:	68fb      	ldr	r3, [r7, #12]
 8017ae8:	601a      	str	r2, [r3, #0]
        ucRAMBuffer += ETH_RX_BUF_SIZE;
 8017aea:	68fb      	ldr	r3, [r7, #12]
 8017aec:	f503 63c0 	add.w	r3, r3, #1536	@ 0x600
 8017af0:	60fb      	str	r3, [r7, #12]
    for( ul = 0; ul < ipconfigNUM_NETWORK_BUFFER_DESCRIPTORS; ul++ )
 8017af2:	68bb      	ldr	r3, [r7, #8]
 8017af4:	3301      	adds	r3, #1
 8017af6:	60bb      	str	r3, [r7, #8]
 8017af8:	68bb      	ldr	r3, [r7, #8]
 8017afa:	2b3f      	cmp	r3, #63	@ 0x3f
 8017afc:	d9df      	bls.n	8017abe <vNetworkInterfaceAllocateRAMToBuffers+0x12>
    }
}
 8017afe:	bf00      	nop
 8017b00:	bf00      	nop
 8017b02:	3714      	adds	r7, #20
 8017b04:	46bd      	mov	sp, r7
 8017b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0a:	4770      	bx	lr
 8017b0c:	240400c0 	.word	0x240400c0

08017b10 <vClearOptionBit>:
/*-----------------------------------------------------------*/

static void vClearOptionBit( volatile uint32_t * pulValue,
                             uint32_t ulValue )
{
 8017b10:	b580      	push	{r7, lr}
 8017b12:	b082      	sub	sp, #8
 8017b14:	af00      	add	r7, sp, #0
 8017b16:	6078      	str	r0, [r7, #4]
 8017b18:	6039      	str	r1, [r7, #0]
    portENTER_CRITICAL();
 8017b1a:	f7ed fe19 	bl	8005750 <vPortEnterCritical>
    *( pulValue ) &= ~( ulValue );
 8017b1e:	687b      	ldr	r3, [r7, #4]
 8017b20:	681a      	ldr	r2, [r3, #0]
 8017b22:	683b      	ldr	r3, [r7, #0]
 8017b24:	43db      	mvns	r3, r3
 8017b26:	401a      	ands	r2, r3
 8017b28:	687b      	ldr	r3, [r7, #4]
 8017b2a:	601a      	str	r2, [r3, #0]
    portEXIT_CRITICAL();
 8017b2c:	f7ed fe3c 	bl	80057a8 <vPortExitCritical>
}
 8017b30:	bf00      	nop
 8017b32:	3708      	adds	r7, #8
 8017b34:	46bd      	mov	sp, r7
 8017b36:	bd80      	pop	{r7, pc}

08017b38 <uxGetOwnCount>:
/*-----------------------------------------------------------*/

#if ( ipconfigHAS_PRINTF != 0 )
    static size_t uxGetOwnCount( ETH_HandleTypeDef * heth )
    {
 8017b38:	b480      	push	{r7}
 8017b3a:	b087      	sub	sp, #28
 8017b3c:	af00      	add	r7, sp, #0
 8017b3e:	6078      	str	r0, [r7, #4]
        BaseType_t xIndex;
        BaseType_t xCount = 0;
 8017b40:	2300      	movs	r3, #0
 8017b42:	613b      	str	r3, [r7, #16]
        ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 8017b44:	687b      	ldr	r3, [r7, #4]
 8017b46:	3330      	adds	r3, #48	@ 0x30
 8017b48:	60fb      	str	r3, [r7, #12]

        /* Count the number of RX descriptors that are owned by DMA. */
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8017b4a:	2300      	movs	r3, #0
 8017b4c:	617b      	str	r3, [r7, #20]
 8017b4e:	e00e      	b.n	8017b6e <uxGetOwnCount+0x36>
        {
            __IO const ETH_DMADescTypeDef * dmarxdesc =
                ( __IO const ETH_DMADescTypeDef * )dmarxdesclist->RxDesc[ xIndex ];
 8017b50:	68fb      	ldr	r3, [r7, #12]
 8017b52:	697a      	ldr	r2, [r7, #20]
 8017b54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
            __IO const ETH_DMADescTypeDef * dmarxdesc =
 8017b58:	60bb      	str	r3, [r7, #8]

            if( ( dmarxdesc->DESC3 & ETH_DMARXNDESCWBF_OWN ) != 0U )
 8017b5a:	68bb      	ldr	r3, [r7, #8]
 8017b5c:	68db      	ldr	r3, [r3, #12]
 8017b5e:	2b00      	cmp	r3, #0
 8017b60:	da02      	bge.n	8017b68 <uxGetOwnCount+0x30>
            {
                xCount++;
 8017b62:	693b      	ldr	r3, [r7, #16]
 8017b64:	3301      	adds	r3, #1
 8017b66:	613b      	str	r3, [r7, #16]
        for( xIndex = 0; xIndex < ETH_RX_DESC_CNT; xIndex++ )
 8017b68:	697b      	ldr	r3, [r7, #20]
 8017b6a:	3301      	adds	r3, #1
 8017b6c:	617b      	str	r3, [r7, #20]
 8017b6e:	697b      	ldr	r3, [r7, #20]
 8017b70:	2b03      	cmp	r3, #3
 8017b72:	d9ed      	bls.n	8017b50 <uxGetOwnCount+0x18>
            }
        }

        return xCount;
 8017b74:	693b      	ldr	r3, [r7, #16]
    }
 8017b76:	4618      	mov	r0, r3
 8017b78:	371c      	adds	r7, #28
 8017b7a:	46bd      	mov	sp, r7
 8017b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b80:	4770      	bx	lr
	...

08017b84 <prvEMACHandlerTask>:
#endif /* if ( ipconfigHAS_PRINTF != 0 ) */
/*-----------------------------------------------------------*/

static void prvEMACHandlerTask( void * pvParameters )
{
 8017b84:	b580      	push	{r7, lr}
 8017b86:	b088      	sub	sp, #32
 8017b88:	af00      	add	r7, sp, #0
 8017b8a:	6078      	str	r0, [r7, #4]
/* When sending a packet, all descriptors in the transmission channel may
 * be occupied.  In stat case, the program will wait (block) for the counting
 * semaphore. */
    const TickType_t ulMaxBlockTime = pdMS_TO_TICKS( 100U );
 8017b8c:	2364      	movs	r3, #100	@ 0x64
 8017b8e:	613b      	str	r3, [r7, #16]

    #if ( ipconfigHAS_PRINTF != 0 )
        size_t uxTXDescriptorsUsed = 0U;
 8017b90:	2300      	movs	r3, #0
 8017b92:	61fb      	str	r3, [r7, #28]
        size_t uxRXDescriptorsUsed = ETH_RX_DESC_CNT;
 8017b94:	2304      	movs	r3, #4
 8017b96:	61bb      	str	r3, [r7, #24]

    ( void ) pvParameters;

    for( ; ; )
    {
        BaseType_t xResult = 0;
 8017b98:	2300      	movs	r3, #0
 8017b9a:	617b      	str	r3, [r7, #20]
            size_t uxOwnCount;

            /* Call a function that monitors resources: the amount of free network
             * buffers and the amount of free space on the heap.  See FreeRTOS_IP.c
             * for more detailed comments. */
            vPrintResourceStats();
 8017b9c:	f7f2 f8d6 	bl	8009d4c <vPrintResourceStats>

            /* Some more statistics: number of free descriptors. */
            uxUsed = ETH_TX_DESC_CNT - uxSemaphoreGetCount( xTXDescriptorSemaphore );
 8017ba0:	4b43      	ldr	r3, [pc, #268]	@ (8017cb0 <prvEMACHandlerTask+0x12c>)
 8017ba2:	681b      	ldr	r3, [r3, #0]
 8017ba4:	4618      	mov	r0, r3
 8017ba6:	f7eb fb2b 	bl	8003200 <uxQueueMessagesWaiting>
 8017baa:	4603      	mov	r3, r0
 8017bac:	f1c3 0304 	rsb	r3, r3, #4
 8017bb0:	60fb      	str	r3, [r7, #12]

            if( uxTXDescriptorsUsed < uxUsed )
 8017bb2:	69fa      	ldr	r2, [r7, #28]
 8017bb4:	68fb      	ldr	r3, [r7, #12]
 8017bb6:	429a      	cmp	r2, r3
 8017bb8:	d206      	bcs.n	8017bc8 <prvEMACHandlerTask+0x44>
            {
                uxTXDescriptorsUsed = uxUsed;
 8017bba:	68fb      	ldr	r3, [r7, #12]
 8017bbc:	61fb      	str	r3, [r7, #28]
                FreeRTOS_printf( ( "TX descriptors %u/%u\n",
 8017bbe:	2204      	movs	r2, #4
 8017bc0:	69f9      	ldr	r1, [r7, #28]
 8017bc2:	483c      	ldr	r0, [pc, #240]	@ (8017cb4 <prvEMACHandlerTask+0x130>)
 8017bc4:	f009 f85c 	bl	8020c80 <lUDPLoggingPrintf>
                                   uxTXDescriptorsUsed,
                                   ETH_TX_DESC_CNT ) );
            }

            uxOwnCount = uxGetOwnCount( &( xEthHandle ) );
 8017bc8:	483b      	ldr	r0, [pc, #236]	@ (8017cb8 <prvEMACHandlerTask+0x134>)
 8017bca:	f7ff ffb5 	bl	8017b38 <uxGetOwnCount>
 8017bce:	60b8      	str	r0, [r7, #8]

            if( uxRXDescriptorsUsed > uxOwnCount )
 8017bd0:	69ba      	ldr	r2, [r7, #24]
 8017bd2:	68bb      	ldr	r3, [r7, #8]
 8017bd4:	429a      	cmp	r2, r3
 8017bd6:	d906      	bls.n	8017be6 <prvEMACHandlerTask+0x62>
            {
                uxRXDescriptorsUsed = uxOwnCount;
 8017bd8:	68bb      	ldr	r3, [r7, #8]
 8017bda:	61bb      	str	r3, [r7, #24]
                FreeRTOS_printf( ( "RX descriptors %u/%u\n",
 8017bdc:	2204      	movs	r2, #4
 8017bde:	69b9      	ldr	r1, [r7, #24]
 8017be0:	4836      	ldr	r0, [pc, #216]	@ (8017cbc <prvEMACHandlerTask+0x138>)
 8017be2:	f009 f84d 	bl	8020c80 <lUDPLoggingPrintf>
                                   ETH_RX_DESC_CNT ) );
            }
        }
        #endif /* ( ipconfigHAS_PRINTF != 0 ) */

        ulTaskNotifyTake( pdFALSE, ulMaxBlockTime );
 8017be6:	693a      	ldr	r2, [r7, #16]
 8017be8:	2100      	movs	r1, #0
 8017bea:	2000      	movs	r0, #0
 8017bec:	f7ec ff8a 	bl	8004b04 <ulTaskGenericNotifyTake>

        /* Wait for the Ethernet MAC interrupt to indicate that another packet
         * has been received. */
        if( ( ulISREvents & EMAC_IF_RX_EVENT ) != 0U )
 8017bf0:	4b33      	ldr	r3, [pc, #204]	@ (8017cc0 <prvEMACHandlerTask+0x13c>)
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	f003 0301 	and.w	r3, r3, #1
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	d006      	beq.n	8017c0a <prvEMACHandlerTask+0x86>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_RX_EVENT );
 8017bfc:	2101      	movs	r1, #1
 8017bfe:	4830      	ldr	r0, [pc, #192]	@ (8017cc0 <prvEMACHandlerTask+0x13c>)
 8017c00:	f7ff ff86 	bl	8017b10 <vClearOptionBit>
            xResult = prvNetworkInterfaceInput();
 8017c04:	f7ff fe3e 	bl	8017884 <prvNetworkInterfaceInput>
 8017c08:	6178      	str	r0, [r7, #20]
        /* When a packet has been transmitted, the descriptor must be
         * prepared for a next transmission.
         * When using zero-copy, the network buffer must be released
         * ( i.e. returned to the pool of network buffers ). */

        if( ( ulISREvents & EMAC_IF_TX_EVENT ) != 0U )
 8017c0a:	4b2d      	ldr	r3, [pc, #180]	@ (8017cc0 <prvEMACHandlerTask+0x13c>)
 8017c0c:	681b      	ldr	r3, [r3, #0]
 8017c0e:	f003 0302 	and.w	r3, r3, #2
 8017c12:	2b00      	cmp	r3, #0
 8017c14:	d017      	beq.n	8017c46 <prvEMACHandlerTask+0xc2>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_TX_EVENT );
 8017c16:	2102      	movs	r1, #2
 8017c18:	4829      	ldr	r0, [pc, #164]	@ (8017cc0 <prvEMACHandlerTask+0x13c>)
 8017c1a:	f7ff ff79 	bl	8017b10 <vClearOptionBit>

            if( xSemaphoreTake( xTransmissionMutex, 10000U ) != pdFAIL )
 8017c1e:	4b29      	ldr	r3, [pc, #164]	@ (8017cc4 <prvEMACHandlerTask+0x140>)
 8017c20:	681b      	ldr	r3, [r3, #0]
 8017c22:	f242 7110 	movw	r1, #10000	@ 0x2710
 8017c26:	4618      	mov	r0, r3
 8017c28:	f7eb f9fc 	bl	8003024 <xQueueSemaphoreTake>
 8017c2c:	4603      	mov	r3, r0
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d009      	beq.n	8017c46 <prvEMACHandlerTask+0xc2>
            {
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8017c32:	4821      	ldr	r0, [pc, #132]	@ (8017cb8 <prvEMACHandlerTask+0x134>)
 8017c34:	f001 fb04 	bl	8019240 <ETH_Clear_Tx_Descriptors>
                xSemaphoreGive( xTransmissionMutex );
 8017c38:	4b22      	ldr	r3, [pc, #136]	@ (8017cc4 <prvEMACHandlerTask+0x140>)
 8017c3a:	6818      	ldr	r0, [r3, #0]
 8017c3c:	2300      	movs	r3, #0
 8017c3e:	2200      	movs	r2, #0
 8017c40:	2100      	movs	r1, #0
 8017c42:	f7eb f837 	bl	8002cb4 <xQueueGenericSend>
            }
        }

        /* Some error has occurred, possibly an overflow or an underflow. */
        if( ( ulISREvents & EMAC_IF_ERR_EVENT ) != 0U )
 8017c46:	4b1e      	ldr	r3, [pc, #120]	@ (8017cc0 <prvEMACHandlerTask+0x13c>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	f003 0304 	and.w	r3, r3, #4
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d00f      	beq.n	8017c72 <prvEMACHandlerTask+0xee>
        {
            vClearOptionBit( &( ulISREvents ), EMAC_IF_ERR_EVENT );
 8017c52:	2104      	movs	r1, #4
 8017c54:	481a      	ldr	r0, [pc, #104]	@ (8017cc0 <prvEMACHandlerTask+0x13c>)
 8017c56:	f7ff ff5b 	bl	8017b10 <vClearOptionBit>

            xEthHandle.gState = HAL_ETH_STATE_READY;
 8017c5a:	4b17      	ldr	r3, [pc, #92]	@ (8017cb8 <prvEMACHandlerTask+0x134>)
 8017c5c:	2210      	movs	r2, #16
 8017c5e:	659a      	str	r2, [r3, #88]	@ 0x58
            /* Enable all interrupts */
            HAL_ETH_Start_IT( &( xEthHandle ) );
 8017c60:	4815      	ldr	r0, [pc, #84]	@ (8017cb8 <prvEMACHandlerTask+0x134>)
 8017c62:	f000 f964 	bl	8017f2e <HAL_ETH_Start_IT>
            xResult += prvNetworkInterfaceInput();
 8017c66:	f7ff fe0d 	bl	8017884 <prvNetworkInterfaceInput>
 8017c6a:	4602      	mov	r2, r0
 8017c6c:	697b      	ldr	r3, [r7, #20]
 8017c6e:	4413      	add	r3, r2
 8017c70:	617b      	str	r3, [r7, #20]
        }

        if( xPhyCheckLinkStatus( &xPhyObject, xResult ) != pdFALSE )
 8017c72:	6979      	ldr	r1, [r7, #20]
 8017c74:	4814      	ldr	r0, [pc, #80]	@ (8017cc8 <prvEMACHandlerTask+0x144>)
 8017c76:	f7ff fa25 	bl	80170c4 <xPhyCheckLinkStatus>
 8017c7a:	4603      	mov	r3, r0
 8017c7c:	2b00      	cmp	r3, #0
 8017c7e:	d08b      	beq.n	8017b98 <prvEMACHandlerTask+0x14>
        {
            /*
             * The function xPhyCheckLinkStatus() returns pdTRUE if the
             * Link Status has changes since it was called the last time.
             */
            if( xSTM32H_GetPhyLinkStatus( pxMyInterface ) == pdFALSE )
 8017c80:	4b12      	ldr	r3, [pc, #72]	@ (8017ccc <prvEMACHandlerTask+0x148>)
 8017c82:	681b      	ldr	r3, [r3, #0]
 8017c84:	4618      	mov	r0, r3
 8017c86:	f7ff fccf 	bl	8017628 <xSTM32H_GetPhyLinkStatus>
 8017c8a:	4603      	mov	r3, r0
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	d10b      	bne.n	8017ca8 <prvEMACHandlerTask+0x124>
            {
                /* Stop the DMA transfer. */
                HAL_ETH_Stop_IT( &( xEthHandle ) );
 8017c90:	4809      	ldr	r0, [pc, #36]	@ (8017cb8 <prvEMACHandlerTask+0x134>)
 8017c92:	f000 f9d1 	bl	8018038 <HAL_ETH_Stop_IT>
                /* Clear the Transmit buffers. */
                memset( &( DMATxDscrTab ), '\0', sizeof( DMATxDscrTab ) );
 8017c96:	2260      	movs	r2, #96	@ 0x60
 8017c98:	2100      	movs	r1, #0
 8017c9a:	480d      	ldr	r0, [pc, #52]	@ (8017cd0 <prvEMACHandlerTask+0x14c>)
 8017c9c:	f009 fb19 	bl	80212d2 <memset>
                /* Since the link is down, clear the descriptors. */
                ETH_Clear_Tx_Descriptors( &( xEthHandle ) );
 8017ca0:	4805      	ldr	r0, [pc, #20]	@ (8017cb8 <prvEMACHandlerTask+0x134>)
 8017ca2:	f001 facd 	bl	8019240 <ETH_Clear_Tx_Descriptors>
 8017ca6:	e777      	b.n	8017b98 <prvEMACHandlerTask+0x14>
            }
            else
            {
                /* Something has changed to a Link Status, need re-check. */
                prvEthernetUpdateConfig( pdFALSE );
 8017ca8:	2000      	movs	r0, #0
 8017caa:	f7ff fd91 	bl	80177d0 <prvEthernetUpdateConfig>
    {
 8017cae:	e773      	b.n	8017b98 <prvEMACHandlerTask+0x14>
 8017cb0:	20002170 	.word	0x20002170
 8017cb4:	0802619c 	.word	0x0802619c
 8017cb8:	20002178 	.word	0x20002178
 8017cbc:	080261b4 	.word	0x080261b4
 8017cc0:	20002168 	.word	0x20002168
 8017cc4:	20002174 	.word	0x20002174
 8017cc8:	20002228 	.word	0x20002228
 8017ccc:	20002220 	.word	0x20002220
 8017cd0:	24040060 	.word	0x24040060

08017cd4 <set_error_state>:
 */
#ifdef HAL_ETH_MODULE_ENABLED

    static void set_error_state( ETH_HandleTypeDef * heth,
                                 uint32_t ulState )
    {
 8017cd4:	b480      	push	{r7}
 8017cd6:	b083      	sub	sp, #12
 8017cd8:	af00      	add	r7, sp, #0
 8017cda:	6078      	str	r0, [r7, #4]
 8017cdc:	6039      	str	r1, [r7, #0]
        heth->gState = ulState;
 8017cde:	687b      	ldr	r3, [r7, #4]
 8017ce0:	683a      	ldr	r2, [r7, #0]
 8017ce2:	659a      	str	r2, [r3, #88]	@ 0x58
    }
 8017ce4:	bf00      	nop
 8017ce6:	370c      	adds	r7, #12
 8017ce8:	46bd      	mov	sp, r7
 8017cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017cee:	4770      	bx	lr

08017cf0 <HAL_ETH_Init>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Init( ETH_HandleTypeDef * heth )
        {
 8017cf0:	b580      	push	{r7, lr}
 8017cf2:	b084      	sub	sp, #16
 8017cf4:	af00      	add	r7, sp, #0
 8017cf6:	6078      	str	r0, [r7, #4]
            uint32_t tickstart;

            if( heth == NULL )
 8017cf8:	687b      	ldr	r3, [r7, #4]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d101      	bne.n	8017d02 <HAL_ETH_Init+0x12>
            {
                return HAL_ERROR;
 8017cfe:	2301      	movs	r3, #1
 8017d00:	e0d4      	b.n	8017eac <HAL_ETH_Init+0x1bc>
                    /* Init the low level hardware */
                    heth->MspInitCallback( heth );
                }
            #else /* if ( USE_HAL_ETH_REGISTER_CALLBACKS == 1 ) */
                /* Check the ETH peripheral state */
                if( heth->gState == HAL_ETH_STATE_RESET )
 8017d02:	687b      	ldr	r3, [r7, #4]
 8017d04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017d06:	2b00      	cmp	r3, #0
 8017d08:	d102      	bne.n	8017d10 <HAL_ETH_Init+0x20>
                {
                    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
                    HAL_ETH_MspInit( heth );
 8017d0a:	6878      	ldr	r0, [r7, #4]
 8017d0c:	f7e9 fde6 	bl	80018dc <HAL_ETH_MspInit>
                }
            #endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

            heth->gState = HAL_ETH_STATE_BUSY;
 8017d10:	687b      	ldr	r3, [r7, #4]
 8017d12:	2223      	movs	r2, #35	@ 0x23
 8017d14:	659a      	str	r2, [r3, #88]	@ 0x58

            __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017d16:	4b67      	ldr	r3, [pc, #412]	@ (8017eb4 <HAL_ETH_Init+0x1c4>)
 8017d18:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8017d1c:	4a65      	ldr	r2, [pc, #404]	@ (8017eb4 <HAL_ETH_Init+0x1c4>)
 8017d1e:	f043 0302 	orr.w	r3, r3, #2
 8017d22:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8017d26:	4b63      	ldr	r3, [pc, #396]	@ (8017eb4 <HAL_ETH_Init+0x1c4>)
 8017d28:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8017d2c:	f003 0302 	and.w	r3, r3, #2
 8017d30:	60bb      	str	r3, [r7, #8]
 8017d32:	68bb      	ldr	r3, [r7, #8]

            if( heth->Init.MediaInterface == HAL_ETH_MII_MODE )
 8017d34:	687b      	ldr	r3, [r7, #4]
 8017d36:	7a1b      	ldrb	r3, [r3, #8]
 8017d38:	2b00      	cmp	r3, #0
 8017d3a:	d103      	bne.n	8017d44 <HAL_ETH_Init+0x54>
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_MII );
 8017d3c:	2000      	movs	r0, #0
 8017d3e:	f001 fc17 	bl	8019570 <HAL_SYSCFG_ETHInterfaceSelect>
 8017d42:	e003      	b.n	8017d4c <HAL_ETH_Init+0x5c>
            }
            else
            {
                HAL_SYSCFG_ETHInterfaceSelect( SYSCFG_ETH_RMII );
 8017d44:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 8017d48:	f001 fc12 	bl	8019570 <HAL_SYSCFG_ETHInterfaceSelect>
            }

            /* Ethernet Software reset */
            /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
            /* After reset all the registers holds their respective reset values */
            SET_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR );
 8017d4c:	687b      	ldr	r3, [r7, #4]
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	687a      	ldr	r2, [r7, #4]
 8017d58:	6812      	ldr	r2, [r2, #0]
 8017d5a:	f043 0301 	orr.w	r3, r3, #1
 8017d5e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017d62:	6013      	str	r3, [r2, #0]

            /* Get tick */
            tickstart = HAL_GetTick();
 8017d64:	f001 fbc8 	bl	80194f8 <HAL_GetTick>
 8017d68:	60f8      	str	r0, [r7, #12]

            /* Wait for software reset */
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 8017d6a:	e010      	b.n	8017d8e <HAL_ETH_Init+0x9e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT ) )
 8017d6c:	f001 fbc4 	bl	80194f8 <HAL_GetTick>
 8017d70:	4602      	mov	r2, r0
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	1ad3      	subs	r3, r2, r3
 8017d76:	f5b3 7ffa 	cmp.w	r3, #500	@ 0x1f4
 8017d7a:	d908      	bls.n	8017d8e <HAL_ETH_Init+0x9e>
                {
                    /* Set Error Code */
                    heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8017d7c:	687b      	ldr	r3, [r7, #4]
 8017d7e:	2204      	movs	r2, #4
 8017d80:	661a      	str	r2, [r3, #96]	@ 0x60
                    /* Set State as Error */
                    set_error_state( heth, HAL_ETH_STATE_ERROR );
 8017d82:	21e0      	movs	r1, #224	@ 0xe0
 8017d84:	6878      	ldr	r0, [r7, #4]
 8017d86:	f7ff ffa5 	bl	8017cd4 <set_error_state>
                    /* Return Error */
                    return HAL_ERROR;
 8017d8a:	2301      	movs	r3, #1
 8017d8c:	e08e      	b.n	8017eac <HAL_ETH_Init+0x1bc>
            while( READ_BIT( heth->Instance->DMAMR, ETH_DMAMR_SWR ) > 0U )
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	681b      	ldr	r3, [r3, #0]
 8017d92:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017d96:	681b      	ldr	r3, [r3, #0]
 8017d98:	f003 0301 	and.w	r3, r3, #1
 8017d9c:	2b00      	cmp	r3, #0
 8017d9e:	d1e5      	bne.n	8017d6c <HAL_ETH_Init+0x7c>
                }
            }

            /*------------------ MDIO CSR Clock Range Configuration --------------------*/
            ETH_MAC_MDIO_ClkConfig( heth );
 8017da0:	6878      	ldr	r0, [r7, #4]
 8017da2:	f001 f94b 	bl	801903c <ETH_MAC_MDIO_ClkConfig>

            /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
            WRITE_REG( heth->Instance->MAC1USTCR, ( ( ( uint32_t ) HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK ) - 1U ) );
 8017da6:	f004 ff49 	bl	801cc3c <HAL_RCC_GetHCLKFreq>
 8017daa:	4603      	mov	r3, r0
 8017dac:	4a42      	ldr	r2, [pc, #264]	@ (8017eb8 <HAL_ETH_Init+0x1c8>)
 8017dae:	fba2 2303 	umull	r2, r3, r2, r3
 8017db2:	0c9a      	lsrs	r2, r3, #18
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	681b      	ldr	r3, [r3, #0]
 8017db8:	3a01      	subs	r2, #1
 8017dba:	f8c3 20dc 	str.w	r2, [r3, #220]	@ 0xdc

            /*------------------ MAC, MTL and DMA default Configuration ----------------*/
            ETH_MACDMAConfig( heth );
 8017dbe:	6878      	ldr	r0, [r7, #4]
 8017dc0:	f001 f89e 	bl	8018f00 <ETH_MACDMAConfig>

            /* SET DSL to 64 bit */
            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT );
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	681b      	ldr	r3, [r3, #0]
 8017dc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017dcc:	f8d3 3100 	ldr.w	r3, [r3, #256]	@ 0x100
 8017dd0:	f423 13e0 	bic.w	r3, r3, #1835008	@ 0x1c0000
 8017dd4:	687a      	ldr	r2, [r7, #4]
 8017dd6:	6812      	ldr	r2, [r2, #0]
 8017dd8:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8017ddc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017de0:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /* Set Receive Buffers Length (must be a multiple of 4) */
            if( ( heth->Init.RxBuffLen % 0x4U ) != 0x0U )
 8017de4:	687b      	ldr	r3, [r7, #4]
 8017de6:	695b      	ldr	r3, [r3, #20]
 8017de8:	f003 0303 	and.w	r3, r3, #3
 8017dec:	2b00      	cmp	r3, #0
 8017dee:	d008      	beq.n	8017e02 <HAL_ETH_Init+0x112>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2201      	movs	r2, #1
 8017df4:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Set State as Error */
                set_error_state( heth, HAL_ETH_STATE_ERROR );
 8017df6:	21e0      	movs	r1, #224	@ 0xe0
 8017df8:	6878      	ldr	r0, [r7, #4]
 8017dfa:	f7ff ff6b 	bl	8017cd4 <set_error_state>
                /* Return Error */
                return HAL_ERROR;
 8017dfe:	2301      	movs	r3, #1
 8017e00:	e054      	b.n	8017eac <HAL_ETH_Init+0x1bc>
            }
            else
            {
                MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ( ( heth->Init.RxBuffLen ) << 1 ) );
 8017e02:	687b      	ldr	r3, [r7, #4]
 8017e04:	681b      	ldr	r3, [r3, #0]
 8017e06:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017e0a:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8017e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8017ebc <HAL_ETH_Init+0x1cc>)
 8017e10:	4013      	ands	r3, r2
 8017e12:	687a      	ldr	r2, [r7, #4]
 8017e14:	6952      	ldr	r2, [r2, #20]
 8017e16:	0051      	lsls	r1, r2, #1
 8017e18:	687a      	ldr	r2, [r7, #4]
 8017e1a:	6812      	ldr	r2, [r2, #0]
 8017e1c:	430b      	orrs	r3, r1
 8017e1e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017e22:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
            }

            /*------------------ DMA Tx Descriptors Configuration ----------------------*/
            ETH_DMATxDescListInit( heth );
 8017e26:	6878      	ldr	r0, [r7, #4]
 8017e28:	f001 f960 	bl	80190ec <ETH_DMATxDescListInit>

            /*------------------ DMA Rx Descriptors Configuration ----------------------*/
            ETH_DMARxDescListInit( heth );
 8017e2c:	6878      	ldr	r0, [r7, #4]
 8017e2e:	f001 f9a9 	bl	8019184 <ETH_DMARxDescListInit>

            /*--------------------- ETHERNET MAC Address Configuration ------------------*/
            /* Set MAC addr bits 32 to 47 */
            heth->Instance->MACA0HR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 5 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 4 ] );
 8017e32:	687b      	ldr	r3, [r7, #4]
 8017e34:	685b      	ldr	r3, [r3, #4]
 8017e36:	3305      	adds	r3, #5
 8017e38:	781b      	ldrb	r3, [r3, #0]
 8017e3a:	021a      	lsls	r2, r3, #8
 8017e3c:	687b      	ldr	r3, [r7, #4]
 8017e3e:	685b      	ldr	r3, [r3, #4]
 8017e40:	3304      	adds	r3, #4
 8017e42:	781b      	ldrb	r3, [r3, #0]
 8017e44:	4619      	mov	r1, r3
 8017e46:	687b      	ldr	r3, [r7, #4]
 8017e48:	681b      	ldr	r3, [r3, #0]
 8017e4a:	430a      	orrs	r2, r1
 8017e4c:	f8c3 2300 	str.w	r2, [r3, #768]	@ 0x300
            /* Set MAC addr bits 0 to 31 */
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8017e50:	687b      	ldr	r3, [r7, #4]
 8017e52:	685b      	ldr	r3, [r3, #4]
 8017e54:	3303      	adds	r3, #3
 8017e56:	781b      	ldrb	r3, [r3, #0]
 8017e58:	061a      	lsls	r2, r3, #24
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	685b      	ldr	r3, [r3, #4]
 8017e5e:	3302      	adds	r3, #2
 8017e60:	781b      	ldrb	r3, [r3, #0]
 8017e62:	041b      	lsls	r3, r3, #16
 8017e64:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8017e66:	687b      	ldr	r3, [r7, #4]
 8017e68:	685b      	ldr	r3, [r3, #4]
 8017e6a:	3301      	adds	r3, #1
 8017e6c:	781b      	ldrb	r3, [r3, #0]
 8017e6e:	021b      	lsls	r3, r3, #8
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8017e70:	431a      	orrs	r2, r3
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8017e72:	687b      	ldr	r3, [r7, #4]
 8017e74:	685b      	ldr	r3, [r3, #4]
 8017e76:	781b      	ldrb	r3, [r3, #0]
 8017e78:	4619      	mov	r1, r3
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	681b      	ldr	r3, [r3, #0]
                                        ( ( uint32_t ) ( heth->Init.MACAddr[ 1 ] ) << 8 ) | ( uint32_t ) heth->Init.MACAddr[ 0 ] );
 8017e7e:	430a      	orrs	r2, r1
            heth->Instance->MACA0LR = ( ( ( uint32_t ) ( heth->Init.MACAddr[ 3 ] ) << 24 ) | ( ( uint32_t ) ( heth->Init.MACAddr[ 2 ] ) << 16 ) |
 8017e80:	f8c3 2304 	str.w	r2, [r3, #772]	@ 0x304

            heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	2200      	movs	r2, #0
 8017e88:	661a      	str	r2, [r3, #96]	@ 0x60
            heth->gState = HAL_ETH_STATE_READY;
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	2210      	movs	r2, #16
 8017e8e:	659a      	str	r2, [r3, #88]	@ 0x58
            heth->RxState = HAL_ETH_STATE_READY;
 8017e90:	687b      	ldr	r3, [r7, #4]
 8017e92:	2210      	movs	r2, #16
 8017e94:	65da      	str	r2, [r3, #92]	@ 0x5c
             * Disable the interrupts that are related to the MMC counters.
             * These interrupts are enabled by default. The interrupt can
             * only be acknowledged by reading the corresponding counter.
             */

            heth->Instance->MMCRIMR =
 8017e96:	687b      	ldr	r3, [r7, #4]
 8017e98:	681b      	ldr	r3, [r3, #0]
 8017e9a:	4a09      	ldr	r2, [pc, #36]	@ (8017ec0 <HAL_ETH_Init+0x1d0>)
 8017e9c:	f8c3 270c 	str.w	r2, [r3, #1804]	@ 0x70c
                ETH_MMCRIMR_RXLPIUSCIM |  /* RXLPIUSC */
                ETH_MMCRIMR_RXUCGPIM |    /* RXUCASTG */
                ETH_MMCRIMR_RXALGNERPIM | /* RXALGNERR */
                ETH_MMCRIMR_RXCRCERPIM;   /* RXCRCERR */

            heth->Instance->MMCTIMR =
 8017ea0:	687b      	ldr	r3, [r7, #4]
 8017ea2:	681b      	ldr	r3, [r3, #0]
 8017ea4:	4a07      	ldr	r2, [pc, #28]	@ (8017ec4 <HAL_ETH_Init+0x1d4>)
 8017ea6:	f8c3 2710 	str.w	r2, [r3, #1808]	@ 0x710
                ETH_MMCTIMR_TXLPIUSCIM | /* TXLPIUSC */
                ETH_MMCTIMR_TXGPKTIM |   /* TXPKTG */
                ETH_MMCTIMR_TXMCOLGPIM | /* TXMULTCOLG */
                ETH_MMCTIMR_TXSCOLGPIM;  /* TXSNGLCOLG */

            return HAL_OK;
 8017eaa:	2300      	movs	r3, #0
        }
 8017eac:	4618      	mov	r0, r3
 8017eae:	3710      	adds	r7, #16
 8017eb0:	46bd      	mov	sp, r7
 8017eb2:	bd80      	pop	{r7, pc}
 8017eb4:	58024400 	.word	0x58024400
 8017eb8:	431bde83 	.word	0x431bde83
 8017ebc:	ffff8001 	.word	0xffff8001
 8017ec0:	0c020060 	.word	0x0c020060
 8017ec4:	0c20c000 	.word	0x0c20c000

08017ec8 <HAL_ETH_DescAssignMemory>:
 */
        HAL_StatusTypeDef HAL_ETH_DescAssignMemory( ETH_HandleTypeDef * heth,
                                                    uint32_t Index,
                                                    uint8_t * pBuffer1,
                                                    uint8_t * pBuffer2 )
        {
 8017ec8:	b480      	push	{r7}
 8017eca:	b087      	sub	sp, #28
 8017ecc:	af00      	add	r7, sp, #0
 8017ece:	60f8      	str	r0, [r7, #12]
 8017ed0:	60b9      	str	r1, [r7, #8]
 8017ed2:	607a      	str	r2, [r7, #4]
 8017ed4:	603b      	str	r3, [r7, #0]
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ Index ];
 8017ed6:	68fb      	ldr	r3, [r7, #12]
 8017ed8:	68ba      	ldr	r2, [r7, #8]
 8017eda:	320c      	adds	r2, #12
 8017edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017ee0:	617b      	str	r3, [r7, #20]

            if( ( pBuffer1 == NULL ) || ( Index >= ( uint32_t ) ETH_RX_DESC_CNT ) )
 8017ee2:	687b      	ldr	r3, [r7, #4]
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d002      	beq.n	8017eee <HAL_ETH_DescAssignMemory+0x26>
 8017ee8:	68bb      	ldr	r3, [r7, #8]
 8017eea:	2b03      	cmp	r3, #3
 8017eec:	d904      	bls.n	8017ef8 <HAL_ETH_DescAssignMemory+0x30>
            {
                /* Set Error Code */
                heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8017eee:	68fb      	ldr	r3, [r7, #12]
 8017ef0:	2201      	movs	r2, #1
 8017ef2:	661a      	str	r2, [r3, #96]	@ 0x60
                /* Return Error */
                return HAL_ERROR;
 8017ef4:	2301      	movs	r3, #1
 8017ef6:	e014      	b.n	8017f22 <HAL_ETH_DescAssignMemory+0x5a>
            }

            /* write buffer address to RDES0 */
            WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pBuffer1 );
 8017ef8:	687a      	ldr	r2, [r7, #4]
 8017efa:	697b      	ldr	r3, [r7, #20]
 8017efc:	601a      	str	r2, [r3, #0]
            /* store buffer address */
            WRITE_REG( dmarxdesc->BackupAddr0, ( uint32_t ) pBuffer1 );
 8017efe:	687a      	ldr	r2, [r7, #4]
 8017f00:	697b      	ldr	r3, [r7, #20]
 8017f02:	611a      	str	r2, [r3, #16]
            /* set buffer address valid bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF1V );
 8017f04:	697b      	ldr	r3, [r7, #20]
 8017f06:	68db      	ldr	r3, [r3, #12]
 8017f08:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	60da      	str	r2, [r3, #12]
/*		/ * set buffer 2 address valid bit to RDES3 * / */
/*		SET_BIT(dmarxdesc->DESC3, ETH_DMARXNDESCRF_BUF2V); */
/*	} */

            /* set OWN bit to RDES3 */
            SET_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_OWN );
 8017f10:	697b      	ldr	r3, [r7, #20]
 8017f12:	68db      	ldr	r3, [r3, #12]
 8017f14:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8017f18:	697b      	ldr	r3, [r7, #20]
 8017f1a:	60da      	str	r2, [r3, #12]
            ( void ) dmarxdesc->DESC3;
 8017f1c:	697b      	ldr	r3, [r7, #20]
 8017f1e:	68db      	ldr	r3, [r3, #12]

            return HAL_OK;
 8017f20:	2300      	movs	r3, #0
        }
 8017f22:	4618      	mov	r0, r3
 8017f24:	371c      	adds	r7, #28
 8017f26:	46bd      	mov	sp, r7
 8017f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f2c:	4770      	bx	lr

08017f2e <HAL_ETH_Start_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Start_IT( ETH_HandleTypeDef * heth )
        {
 8017f2e:	b480      	push	{r7}
 8017f30:	b085      	sub	sp, #20
 8017f32:	af00      	add	r7, sp, #0
 8017f34:	6078      	str	r0, [r7, #4]
            uint32_t desc_index;

            if( heth->gState == HAL_ETH_STATE_READY )
 8017f36:	687b      	ldr	r3, [r7, #4]
 8017f38:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017f3a:	2b10      	cmp	r3, #16
 8017f3c:	d175      	bne.n	801802a <HAL_ETH_Start_IT+0xfc>
            {
                heth->gState = HAL_ETH_STATE_BUSY;
 8017f3e:	687b      	ldr	r3, [r7, #4]
 8017f40:	2223      	movs	r2, #35	@ 0x23
 8017f42:	659a      	str	r2, [r3, #88]	@ 0x58

                /* Set IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8017f44:	2300      	movs	r3, #0
 8017f46:	60fb      	str	r3, [r7, #12]
 8017f48:	e00e      	b.n	8017f68 <HAL_ETH_Start_IT+0x3a>
                {
                    ETH_DMADescTypeDef * dma_rx_desc;

                    dma_rx_desc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ desc_index ];
 8017f4a:	687b      	ldr	r3, [r7, #4]
 8017f4c:	68fa      	ldr	r2, [r7, #12]
 8017f4e:	320c      	adds	r2, #12
 8017f50:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017f54:	60bb      	str	r3, [r7, #8]
                    SET_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCRF_IOC );
 8017f56:	68bb      	ldr	r3, [r7, #8]
 8017f58:	68db      	ldr	r3, [r3, #12]
 8017f5a:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8017f5e:	68bb      	ldr	r3, [r7, #8]
 8017f60:	60da      	str	r2, [r3, #12]
                for( desc_index = 0; desc_index < ( uint32_t ) ETH_RX_DESC_CNT; desc_index++ )
 8017f62:	68fb      	ldr	r3, [r7, #12]
 8017f64:	3301      	adds	r3, #1
 8017f66:	60fb      	str	r3, [r7, #12]
 8017f68:	68fb      	ldr	r3, [r7, #12]
 8017f6a:	2b03      	cmp	r3, #3
 8017f6c:	d9ed      	bls.n	8017f4a <HAL_ETH_Start_IT+0x1c>
                }

                /* save IT mode to ETH Handle */
                heth->RxDescList.ItMode = 1U;
 8017f6e:	687b      	ldr	r3, [r7, #4]
 8017f70:	2201      	movs	r2, #1
 8017f72:	651a      	str	r2, [r3, #80]	@ 0x50

                /* Enable the MAC transmission */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 8017f74:	687b      	ldr	r3, [r7, #4]
 8017f76:	681b      	ldr	r3, [r3, #0]
 8017f78:	681a      	ldr	r2, [r3, #0]
 8017f7a:	687b      	ldr	r3, [r7, #4]
 8017f7c:	681b      	ldr	r3, [r3, #0]
 8017f7e:	f042 0202 	orr.w	r2, r2, #2
 8017f82:	601a      	str	r2, [r3, #0]

                /* Enable the MAC reception */
                SET_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	681b      	ldr	r3, [r3, #0]
 8017f88:	681a      	ldr	r2, [r3, #0]
 8017f8a:	687b      	ldr	r3, [r7, #4]
 8017f8c:	681b      	ldr	r3, [r3, #0]
 8017f8e:	f042 0201 	orr.w	r2, r2, #1
 8017f92:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 8017f94:	687b      	ldr	r3, [r7, #4]
 8017f96:	681b      	ldr	r3, [r3, #0]
 8017f98:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	681b      	ldr	r3, [r3, #0]
 8017fa0:	f042 0201 	orr.w	r2, r2, #1
 8017fa4:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Enable the DMA transmission */
                SET_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 8017fa8:	687b      	ldr	r3, [r7, #4]
 8017faa:	681b      	ldr	r3, [r3, #0]
 8017fac:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017fb0:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8017fb4:	687a      	ldr	r2, [r7, #4]
 8017fb6:	6812      	ldr	r2, [r2, #0]
 8017fb8:	f043 0301 	orr.w	r3, r3, #1
 8017fbc:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017fc0:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Enable the DMA reception */
                SET_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8017fc4:	687b      	ldr	r3, [r7, #4]
 8017fc6:	681b      	ldr	r3, [r3, #0]
 8017fc8:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017fcc:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8017fd0:	687a      	ldr	r2, [r7, #4]
 8017fd2:	6812      	ldr	r2, [r2, #0]
 8017fd4:	f043 0301 	orr.w	r3, r3, #1
 8017fd8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017fdc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Clear Tx and Rx process stopped flags */
                heth->Instance->DMACSR |= ( ETH_DMACSR_TPS | ETH_DMACSR_RPS );
 8017fe0:	687b      	ldr	r3, [r7, #4]
 8017fe2:	681b      	ldr	r3, [r3, #0]
 8017fe4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8017fe8:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8017fec:	687a      	ldr	r2, [r7, #4]
 8017fee:	6812      	ldr	r2, [r2, #0]
 8017ff0:	f443 7381 	orr.w	r3, r3, #258	@ 0x102
 8017ff4:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8017ff8:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                /* Enable ETH DMA interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_ENABLE_IT( heth,
 8017ffc:	687b      	ldr	r3, [r7, #4]
 8017ffe:	681b      	ldr	r3, [r3, #0]
 8018000:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018004:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	681a      	ldr	r2, [r3, #0]
 801800c:	f24d 0341 	movw	r3, #53313	@ 0xd041
 8018010:	430b      	orrs	r3, r1
 8018012:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018016:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                         ETH_DMACIER_RIE |  /* Receive Interrupt Enable */
                                         ETH_DMACIER_TIE |  /* Transmit Interrupt Enable */
                                         ETH_DMACIER_FBEE | /* Fatal Bus Error Enable */
                                         ETH_DMACIER_AIE ); /* Abnormal Interrupt Summary Enable */

                heth->gState = HAL_ETH_STATE_READY;
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	2210      	movs	r2, #16
 801801e:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_BUSY_RX;
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	2222      	movs	r2, #34	@ 0x22
 8018024:	65da      	str	r2, [r3, #92]	@ 0x5c

                return HAL_OK;
 8018026:	2300      	movs	r3, #0
 8018028:	e000      	b.n	801802c <HAL_ETH_Start_IT+0xfe>
            }
            else
            {
                return HAL_ERROR;
 801802a:	2301      	movs	r3, #1
            }
        }
 801802c:	4618      	mov	r0, r3
 801802e:	3714      	adds	r7, #20
 8018030:	46bd      	mov	sp, r7
 8018032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018036:	4770      	bx	lr

08018038 <HAL_ETH_Stop_IT>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Stop_IT( ETH_HandleTypeDef * heth )
        {
 8018038:	b480      	push	{r7}
 801803a:	b085      	sub	sp, #20
 801803c:	af00      	add	r7, sp, #0
 801803e:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t descindex;

            if( heth->gState != HAL_ETH_STATE_RESET )
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8018044:	2b00      	cmp	r3, #0
 8018046:	d066      	beq.n	8018116 <HAL_ETH_Stop_IT+0xde>
            {
                /* Set the ETH peripheral state to BUSY */
                heth->gState = HAL_ETH_STATE_BUSY;
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	2223      	movs	r2, #35	@ 0x23
 801804c:	659a      	str	r2, [r3, #88]	@ 0x58
                /* Disable interrupts:
                 * - Tx complete interrupt
                 * - Rx complete interrupt
                 * - Fatal bus interrupt
                 */
                __HAL_ETH_DMA_DISABLE_IT( heth, ( ETH_DMACIER_NIE | ETH_DMACIER_RIE | ETH_DMACIER_TIE |
 801804e:	687b      	ldr	r3, [r7, #4]
 8018050:	681b      	ldr	r3, [r3, #0]
 8018052:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018056:	f8d3 1134 	ldr.w	r1, [r3, #308]	@ 0x134
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	681a      	ldr	r2, [r3, #0]
 801805e:	4b31      	ldr	r3, [pc, #196]	@ (8018124 <HAL_ETH_Stop_IT+0xec>)
 8018060:	400b      	ands	r3, r1
 8018062:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018066:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134
                                                  ETH_DMACIER_FBEE | ETH_DMACIER_AIE ) );

                /* Disable the DMA transmission */
                CLEAR_BIT( heth->Instance->DMACTCR, ETH_DMACTCR_ST );
 801806a:	687b      	ldr	r3, [r7, #4]
 801806c:	681b      	ldr	r3, [r3, #0]
 801806e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018072:	f8d3 3104 	ldr.w	r3, [r3, #260]	@ 0x104
 8018076:	687a      	ldr	r2, [r7, #4]
 8018078:	6812      	ldr	r2, [r2, #0]
 801807a:	f023 0301 	bic.w	r3, r3, #1
 801807e:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018082:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

                /* Disable the DMA reception */
                CLEAR_BIT( heth->Instance->DMACRCR, ETH_DMACRCR_SR );
 8018086:	687b      	ldr	r3, [r7, #4]
 8018088:	681b      	ldr	r3, [r3, #0]
 801808a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801808e:	f8d3 3108 	ldr.w	r3, [r3, #264]	@ 0x108
 8018092:	687a      	ldr	r2, [r7, #4]
 8018094:	6812      	ldr	r2, [r2, #0]
 8018096:	f023 0301 	bic.w	r3, r3, #1
 801809a:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 801809e:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108

                /* Disable the MAC reception */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_RE );
 80180a2:	687b      	ldr	r3, [r7, #4]
 80180a4:	681b      	ldr	r3, [r3, #0]
 80180a6:	681a      	ldr	r2, [r3, #0]
 80180a8:	687b      	ldr	r3, [r7, #4]
 80180aa:	681b      	ldr	r3, [r3, #0]
 80180ac:	f022 0201 	bic.w	r2, r2, #1
 80180b0:	601a      	str	r2, [r3, #0]

                /* Set the Flush Transmit FIFO bit */
                SET_BIT( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_FTQ );
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	681b      	ldr	r3, [r3, #0]
 80180b6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	f042 0201 	orr.w	r2, r2, #1
 80180c2:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

                /* Disable the MAC transmission */
                CLEAR_BIT( heth->Instance->MACCR, ETH_MACCR_TE );
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	681b      	ldr	r3, [r3, #0]
 80180ca:	681a      	ldr	r2, [r3, #0]
 80180cc:	687b      	ldr	r3, [r7, #4]
 80180ce:	681b      	ldr	r3, [r3, #0]
 80180d0:	f022 0202 	bic.w	r2, r2, #2
 80180d4:	601a      	str	r2, [r3, #0]

                /* Clear IOC bit (Interrupt Enabled on Completion) to all Rx descriptors */
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 80180d6:	2300      	movs	r3, #0
 80180d8:	60fb      	str	r3, [r7, #12]
 80180da:	e00e      	b.n	80180fa <HAL_ETH_Stop_IT+0xc2>
                {
                    dmarxdesc = ( ETH_DMADescTypeDef * ) heth->RxDescList.RxDesc[ descindex ];
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	68fa      	ldr	r2, [r7, #12]
 80180e0:	320c      	adds	r2, #12
 80180e2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80180e6:	60bb      	str	r3, [r7, #8]
                    CLEAR_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCRF_IOC );
 80180e8:	68bb      	ldr	r3, [r7, #8]
 80180ea:	68db      	ldr	r3, [r3, #12]
 80180ec:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80180f0:	68bb      	ldr	r3, [r7, #8]
 80180f2:	60da      	str	r2, [r3, #12]
                for( descindex = 0; descindex < ( uint32_t ) ETH_RX_DESC_CNT; descindex++ )
 80180f4:	68fb      	ldr	r3, [r7, #12]
 80180f6:	3301      	adds	r3, #1
 80180f8:	60fb      	str	r3, [r7, #12]
 80180fa:	68fb      	ldr	r3, [r7, #12]
 80180fc:	2b03      	cmp	r3, #3
 80180fe:	d9ed      	bls.n	80180dc <HAL_ETH_Stop_IT+0xa4>
                }

                heth->RxDescList.ItMode = 0U;
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	2200      	movs	r2, #0
 8018104:	651a      	str	r2, [r3, #80]	@ 0x50

                heth->gState = HAL_ETH_STATE_READY;
 8018106:	687b      	ldr	r3, [r7, #4]
 8018108:	2210      	movs	r2, #16
 801810a:	659a      	str	r2, [r3, #88]	@ 0x58
                heth->RxState = HAL_ETH_STATE_READY;
 801810c:	687b      	ldr	r3, [r7, #4]
 801810e:	2210      	movs	r2, #16
 8018110:	65da      	str	r2, [r3, #92]	@ 0x5c

                /* Return function status */
                return HAL_OK;
 8018112:	2300      	movs	r3, #0
 8018114:	e000      	b.n	8018118 <HAL_ETH_Stop_IT+0xe0>
            }
            else
            {
                return HAL_ERROR;
 8018116:	2301      	movs	r3, #1
            }
        }
 8018118:	4618      	mov	r0, r3
 801811a:	3714      	adds	r7, #20
 801811c:	46bd      	mov	sp, r7
 801811e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018122:	4770      	bx	lr
 8018124:	ffff2fbe 	.word	0xffff2fbe

08018128 <HAL_ETH_Transmit_IT>:
 * @param  pTxConfig: Hold the configuration of packet to be transmitted
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_Transmit_IT( ETH_HandleTypeDef * heth,
                                               ETH_TxPacketConfig * pTxConfig )
        {
 8018128:	b580      	push	{r7, lr}
 801812a:	b082      	sub	sp, #8
 801812c:	af00      	add	r7, sp, #0
 801812e:	6078      	str	r0, [r7, #4]
 8018130:	6039      	str	r1, [r7, #0]
            if( pTxConfig == NULL )
 8018132:	683b      	ldr	r3, [r7, #0]
 8018134:	2b00      	cmp	r3, #0
 8018136:	d107      	bne.n	8018148 <HAL_ETH_Transmit_IT+0x20>
            {
                heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8018138:	687b      	ldr	r3, [r7, #4]
 801813a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801813c:	f043 0201 	orr.w	r2, r3, #1
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	661a      	str	r2, [r3, #96]	@ 0x60
                return HAL_ERROR;
 8018144:	2301      	movs	r3, #1
 8018146:	e039      	b.n	80181bc <HAL_ETH_Transmit_IT+0x94>
            }

            if( heth->gState == HAL_ETH_STATE_READY )
 8018148:	687b      	ldr	r3, [r7, #4]
 801814a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801814c:	2b10      	cmp	r3, #16
 801814e:	d134      	bne.n	80181ba <HAL_ETH_Transmit_IT+0x92>
            {
                /* Config DMA Tx descriptor by Tx Packet info */
                if( ETH_Prepare_Tx_Descriptors( heth, pTxConfig, 1 ) != HAL_ETH_ERROR_NONE )
 8018150:	2201      	movs	r2, #1
 8018152:	6839      	ldr	r1, [r7, #0]
 8018154:	6878      	ldr	r0, [r7, #4]
 8018156:	f001 f8c1 	bl	80192dc <ETH_Prepare_Tx_Descriptors>
 801815a:	4603      	mov	r3, r0
 801815c:	2b00      	cmp	r3, #0
 801815e:	d007      	beq.n	8018170 <HAL_ETH_Transmit_IT+0x48>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8018160:	687b      	ldr	r3, [r7, #4]
 8018162:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018164:	f043 0202 	orr.w	r2, r3, #2
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	661a      	str	r2, [r3, #96]	@ 0x60
                    return HAL_ERROR;
 801816c:	2301      	movs	r3, #1
 801816e:	e025      	b.n	80181bc <HAL_ETH_Transmit_IT+0x94>
                }

                /* Incr current tx desc index */
                INCR_TX_DESC_INDEX( heth->TxDescList.CurTxDesc, 1U );
 8018170:	687b      	ldr	r3, [r7, #4]
 8018172:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018174:	1c5a      	adds	r2, r3, #1
 8018176:	687b      	ldr	r3, [r7, #4]
 8018178:	629a      	str	r2, [r3, #40]	@ 0x28
 801817a:	687b      	ldr	r3, [r7, #4]
 801817c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801817e:	2b03      	cmp	r3, #3
 8018180:	d904      	bls.n	801818c <HAL_ETH_Transmit_IT+0x64>
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018186:	1f1a      	subs	r2, r3, #4
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	629a      	str	r2, [r3, #40]	@ 0x28
                 * DMACTDTPR: "Channel Tx descriptor tail pointer register (ETH_DMACTXDTPR)
                 * The hardware tries to transmit all packets referenced by the
                 * descriptors between the head and the tail pointer registers.
                 */

                WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) ( heth->TxDescList.TxDesc[ heth->TxDescList.CurTxDesc ] ) );
 801818c:	687b      	ldr	r3, [r7, #4]
 801818e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8018190:	687b      	ldr	r3, [r7, #4]
 8018192:	681a      	ldr	r2, [r3, #0]
 8018194:	687b      	ldr	r3, [r7, #4]
 8018196:	3106      	adds	r1, #6
 8018198:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 801819c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 80181a0:	f8c2 3120 	str.w	r3, [r2, #288]	@ 0x120
  __ASM volatile ("dsb 0xF":::"memory");
 80181a4:	f3bf 8f4f 	dsb	sy
}
 80181a8:	bf00      	nop
                /* Memory barrier. */
                __DSB();
                /* Read-back the value just written. */
                ( void ) heth->Instance->DMACTDTPR;
 80181aa:	687b      	ldr	r3, [r7, #4]
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80181b2:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120

                return HAL_OK;
 80181b6:	2300      	movs	r3, #0
 80181b8:	e000      	b.n	80181bc <HAL_ETH_Transmit_IT+0x94>
            }
            else
            {
                return HAL_ERROR;
 80181ba:	2301      	movs	r3, #1
            }
        }
 80181bc:	4618      	mov	r0, r3
 80181be:	3708      	adds	r7, #8
 80181c0:	46bd      	mov	sp, r7
 80181c2:	bd80      	pop	{r7, pc}

080181c4 <HAL_ETH_IsRxDataAvailable>:
 *         the configuration information for ETHERNET module
 * @retval  1: A Packet is received
 *          0: no Packet received
 */
        uint8_t HAL_ETH_IsRxDataAvailable( ETH_HandleTypeDef * heth )
        {
 80181c4:	b580      	push	{r7, lr}
 80181c6:	b08a      	sub	sp, #40	@ 0x28
 80181c8:	af00      	add	r7, sp, #0
 80181ca:	6078      	str	r0, [r7, #4]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	3330      	adds	r3, #48	@ 0x30
 80181d0:	61bb      	str	r3, [r7, #24]
            uint32_t desc_index = dmarxdesclist->CurRxDesc;
 80181d2:	69bb      	ldr	r3, [r7, #24]
 80181d4:	691b      	ldr	r3, [r3, #16]
 80181d6:	627b      	str	r3, [r7, #36]	@ 0x24
            ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 80181d8:	69bb      	ldr	r3, [r7, #24]
 80181da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80181dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80181e0:	617b      	str	r3, [r7, #20]
            uint32_t desc_scan_count = 0;
 80181e2:	2300      	movs	r3, #0
 80181e4:	623b      	str	r3, [r7, #32]
            uint32_t app_desc_count = 0;       /* Number of descriptors in received packet. */
 80181e6:	2300      	movs	r3, #0
 80181e8:	613b      	str	r3, [r7, #16]
            uint32_t first_app_desc_index = 0; /* Index of the first descriptor of received packet.. */
 80181ea:	2300      	movs	r3, #0
 80181ec:	61fb      	str	r3, [r7, #28]

            /* Check if descriptor is not owned by DMA */
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 80181ee:	e055      	b.n	801829c <HAL_ETH_IsRxDataAvailable+0xd8>
                   ( desc_scan_count < ( uint32_t ) ETH_RX_DESC_CNT ) )
            {
                uint32_t ulDesc3 = dmarxdesc->DESC3;
 80181f0:	697b      	ldr	r3, [r7, #20]
 80181f2:	68db      	ldr	r3, [r3, #12]
 80181f4:	60fb      	str	r3, [r7, #12]
                desc_scan_count++;
 80181f6:	6a3b      	ldr	r3, [r7, #32]
 80181f8:	3301      	adds	r3, #1
 80181fa:	623b      	str	r3, [r7, #32]

                /* FreeRTOS+TCP only handles packets that fit in 1 descriptor. */
                configASSERT( ( ( ulDesc3 & ETH_DMATXNDESCWBF_FD ) != 0U ) && ( ( ulDesc3 & ETH_DMATXNDESCWBF_LD ) != 0U ) );
 80181fc:	68fb      	ldr	r3, [r7, #12]
 80181fe:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8018202:	2b00      	cmp	r3, #0
 8018204:	d006      	beq.n	8018214 <HAL_ETH_IsRxDataAvailable+0x50>
 8018206:	68fb      	ldr	r3, [r7, #12]
 8018208:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801820c:	2b00      	cmp	r3, #0
 801820e:	d001      	beq.n	8018214 <HAL_ETH_IsRxDataAvailable+0x50>
 8018210:	2301      	movs	r3, #1
 8018212:	e000      	b.n	8018216 <HAL_ETH_IsRxDataAvailable+0x52>
 8018214:	2300      	movs	r3, #0
 8018216:	2b00      	cmp	r3, #0
 8018218:	d104      	bne.n	8018224 <HAL_ETH_IsRxDataAvailable+0x60>
 801821a:	f240 4195 	movw	r1, #1173	@ 0x495
 801821e:	482b      	ldr	r0, [pc, #172]	@ (80182cc <HAL_ETH_IsRxDataAvailable+0x108>)
 8018220:	f7e9 f926 	bl	8001470 <vAssertCalled>

                /* Check if last descriptor */
                if( READ_BIT( ulDesc3, ETH_DMARXNDESCWBF_LD ) != ( uint32_t ) RESET )
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801822a:	2b00      	cmp	r3, #0
 801822c:	d036      	beq.n	801829c <HAL_ETH_IsRxDataAvailable+0xd8>
                {
                    /* Increment the number of descriptors to be passed to the application */
                    app_desc_count += 1U;
 801822e:	693b      	ldr	r3, [r7, #16]
 8018230:	3301      	adds	r3, #1
 8018232:	613b      	str	r3, [r7, #16]

                    if( app_desc_count == 1U )
 8018234:	693b      	ldr	r3, [r7, #16]
 8018236:	2b01      	cmp	r3, #1
 8018238:	d101      	bne.n	801823e <HAL_ETH_IsRxDataAvailable+0x7a>
                    {
                        first_app_desc_index = desc_index;
 801823a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801823c:	61fb      	str	r3, [r7, #28]
                    }

                    /* Increment current rx descriptor index */
                    INCR_RX_DESC_INDEX( desc_index, 1U );
 801823e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018240:	3301      	adds	r3, #1
 8018242:	627b      	str	r3, [r7, #36]	@ 0x24
 8018244:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018246:	2b03      	cmp	r3, #3
 8018248:	d902      	bls.n	8018250 <HAL_ETH_IsRxDataAvailable+0x8c>
 801824a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801824c:	3b04      	subs	r3, #4
 801824e:	627b      	str	r3, [r7, #36]	@ 0x24

                    /* Check for Context descriptor */
                    /* Get current descriptor address */
                    dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018250:	69bb      	ldr	r3, [r7, #24]
 8018252:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018254:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8018258:	617b      	str	r3, [r7, #20]

                    if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET )
 801825a:	697b      	ldr	r3, [r7, #20]
 801825c:	68db      	ldr	r3, [r3, #12]
 801825e:	2b00      	cmp	r3, #0
 8018260:	db11      	blt.n	8018286 <HAL_ETH_IsRxDataAvailable+0xc2>
                    {
                        /* If IEEE 1588 timestamp feature is enabled, the DMA stores the timestamp
                        * (if available). The DMA writes the context descriptor after the last
                        * descriptor for the current packet (in the next available descriptor). */
                        if( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_CTXT ) != ( uint32_t ) RESET )
 8018262:	697b      	ldr	r3, [r7, #20]
 8018264:	68db      	ldr	r3, [r3, #12]
 8018266:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 801826a:	2b00      	cmp	r3, #0
 801826c:	d00b      	beq.n	8018286 <HAL_ETH_IsRxDataAvailable+0xc2>
                        {
                            /* Increment the number of descriptors to be passed to the application */
                            dmarxdesclist->AppContextDesc = 1;
 801826e:	69bb      	ldr	r3, [r7, #24]
 8018270:	2201      	movs	r2, #1
 8018272:	61da      	str	r2, [r3, #28]
                            /* Increment current rx descriptor index */
                            INCR_RX_DESC_INDEX( desc_index, 1U );
 8018274:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018276:	3301      	adds	r3, #1
 8018278:	627b      	str	r3, [r7, #36]	@ 0x24
 801827a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801827c:	2b03      	cmp	r3, #3
 801827e:	d902      	bls.n	8018286 <HAL_ETH_IsRxDataAvailable+0xc2>
 8018280:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018282:	3b04      	subs	r3, #4
 8018284:	627b      	str	r3, [r7, #36]	@ 0x24
                        }
                    }

                    /* Fill information to Rx descriptors list */
                    dmarxdesclist->CurRxDesc = desc_index;
 8018286:	69bb      	ldr	r3, [r7, #24]
 8018288:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801828a:	611a      	str	r2, [r3, #16]
                    dmarxdesclist->FirstAppDesc = first_app_desc_index;
 801828c:	69bb      	ldr	r3, [r7, #24]
 801828e:	69fa      	ldr	r2, [r7, #28]
 8018290:	615a      	str	r2, [r3, #20]
                    dmarxdesclist->AppDescNbr = app_desc_count;
 8018292:	69bb      	ldr	r3, [r7, #24]
 8018294:	693a      	ldr	r2, [r7, #16]
 8018296:	619a      	str	r2, [r3, #24]

                    /* Return function status */
                    return 1;
 8018298:	2301      	movs	r3, #1
 801829a:	e012      	b.n	80182c2 <HAL_ETH_IsRxDataAvailable+0xfe>
            while( ( READ_BIT( dmarxdesc->DESC3, ETH_DMARXNDESCWBF_OWN ) == ( uint32_t ) RESET ) &&
 801829c:	697b      	ldr	r3, [r7, #20]
 801829e:	68db      	ldr	r3, [r3, #12]
 80182a0:	2b00      	cmp	r3, #0
 80182a2:	db02      	blt.n	80182aa <HAL_ETH_IsRxDataAvailable+0xe6>
 80182a4:	6a3b      	ldr	r3, [r7, #32]
 80182a6:	2b03      	cmp	r3, #3
 80182a8:	d9a2      	bls.n	80181f0 <HAL_ETH_IsRxDataAvailable+0x2c>
/*			/ * Get current descriptor address * / */
/*			dmarxdesc = (ETH_DMADescTypeDef *)dmarxdesclist->RxDesc[desc_index]; */
/*		} */
            } /* while ( OWN == 0 ) */

            configASSERT( app_desc_count == 0 );
 80182aa:	693b      	ldr	r3, [r7, #16]
 80182ac:	2b00      	cmp	r3, #0
 80182ae:	d004      	beq.n	80182ba <HAL_ETH_IsRxDataAvailable+0xf6>
 80182b0:	f240 41db 	movw	r1, #1243	@ 0x4db
 80182b4:	4805      	ldr	r0, [pc, #20]	@ (80182cc <HAL_ETH_IsRxDataAvailable+0x108>)
 80182b6:	f7e9 f8db 	bl	8001470 <vAssertCalled>
/*		/ * Set the Tail pointer address to the last rx descriptor hold by the app * / */
/*		WRITE_REG(heth->Instance->DMACRDTPR, (uint32_t)dmarxdesc); */
/*	} */

            /* Fill information to Rx descriptors list: No received Packet */
            dmarxdesclist->AppDescNbr = 0U;
 80182ba:	69bb      	ldr	r3, [r7, #24]
 80182bc:	2200      	movs	r2, #0
 80182be:	619a      	str	r2, [r3, #24]

            return 0;
 80182c0:	2300      	movs	r3, #0
        }
 80182c2:	4618      	mov	r0, r3
 80182c4:	3728      	adds	r7, #40	@ 0x28
 80182c6:	46bd      	mov	sp, r7
 80182c8:	bd80      	pop	{r7, pc}
 80182ca:	bf00      	nop
 80182cc:	080261cc 	.word	0x080261cc

080182d0 <HAL_ETH_GetRxData>:
 * @param  RxBuffer: Pointer to a ETH_BufferTypeDef structure
 * @retval HAL status
 */
        size_t HAL_ETH_GetRxData( ETH_HandleTypeDef * heth,
                                  ETH_BufferTypeDef * RxBuffer )
        {
 80182d0:	b580      	push	{r7, lr}
 80182d2:	b086      	sub	sp, #24
 80182d4:	af00      	add	r7, sp, #0
 80182d6:	6078      	str	r0, [r7, #4]
 80182d8:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &( heth->RxDescList );
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	3330      	adds	r3, #48	@ 0x30
 80182de:	617b      	str	r3, [r7, #20]
            uint32_t desc_index;
            uint32_t packet_length;
            __IO const ETH_DMADescTypeDef * dma_rx_desc;

            configASSERT( RxBuffer != NULL );
 80182e0:	683b      	ldr	r3, [r7, #0]
 80182e2:	2b00      	cmp	r3, #0
 80182e4:	d104      	bne.n	80182f0 <HAL_ETH_GetRxData+0x20>
 80182e6:	f240 511f 	movw	r1, #1311	@ 0x51f
 80182ea:	481c      	ldr	r0, [pc, #112]	@ (801835c <HAL_ETH_GetRxData+0x8c>)
 80182ec:	f7e9 f8c0 	bl	8001470 <vAssertCalled>

            if( HAL_ETH_IsRxDataAvailable( heth ) == 0U )
 80182f0:	6878      	ldr	r0, [r7, #4]
 80182f2:	f7ff ff67 	bl	80181c4 <HAL_ETH_IsRxDataAvailable>
 80182f6:	4603      	mov	r3, r0
 80182f8:	2b00      	cmp	r3, #0
 80182fa:	d101      	bne.n	8018300 <HAL_ETH_GetRxData+0x30>
            {
                /* No data to be transferred to the application */
                return 0U;
 80182fc:	2300      	movs	r3, #0
 80182fe:	e028      	b.n	8018352 <HAL_ETH_GetRxData+0x82>
            }

            desc_index = dmarxdesclist->FirstAppDesc;
 8018300:	697b      	ldr	r3, [r7, #20]
 8018302:	695b      	ldr	r3, [r3, #20]
 8018304:	613b      	str	r3, [r7, #16]
            dma_rx_desc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018306:	697b      	ldr	r3, [r7, #20]
 8018308:	693a      	ldr	r2, [r7, #16]
 801830a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801830e:	60fb      	str	r3, [r7, #12]

            configASSERT( dmarxdesclist->AppDescNbr == 1 );
 8018310:	697b      	ldr	r3, [r7, #20]
 8018312:	699b      	ldr	r3, [r3, #24]
 8018314:	2b01      	cmp	r3, #1
 8018316:	d004      	beq.n	8018322 <HAL_ETH_GetRxData+0x52>
 8018318:	f240 512a 	movw	r1, #1322	@ 0x52a
 801831c:	480f      	ldr	r0, [pc, #60]	@ (801835c <HAL_ETH_GetRxData+0x8c>)
 801831e:	f7e9 f8a7 	bl	8001470 <vAssertCalled>

            /* last descriptor data length */
            packet_length = READ_BIT( dma_rx_desc->DESC3, ETH_DMARXNDESCWBF_PL );
 8018322:	68fb      	ldr	r3, [r7, #12]
 8018324:	68db      	ldr	r3, [r3, #12]
 8018326:	f3c3 030e 	ubfx	r3, r3, #0, #15
 801832a:	60bb      	str	r3, [r7, #8]

            RxBuffer->buffer = ( uint8_t * ) dma_rx_desc->BackupAddr0;
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	691b      	ldr	r3, [r3, #16]
 8018330:	461a      	mov	r2, r3
 8018332:	683b      	ldr	r3, [r7, #0]
 8018334:	601a      	str	r2, [r3, #0]
            RxBuffer->len = packet_length;
 8018336:	683b      	ldr	r3, [r7, #0]
 8018338:	68ba      	ldr	r2, [r7, #8]
 801833a:	605a      	str	r2, [r3, #4]

            /* data is in only one buffer */
            configASSERT( packet_length <= heth->Init.RxBuffLen );
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	695b      	ldr	r3, [r3, #20]
 8018340:	68ba      	ldr	r2, [r7, #8]
 8018342:	429a      	cmp	r2, r3
 8018344:	d904      	bls.n	8018350 <HAL_ETH_GetRxData+0x80>
 8018346:	f240 5133 	movw	r1, #1331	@ 0x533
 801834a:	4804      	ldr	r0, [pc, #16]	@ (801835c <HAL_ETH_GetRxData+0x8c>)
 801834c:	f7e9 f890 	bl	8001470 <vAssertCalled>

            return packet_length;
 8018350:	68bb      	ldr	r3, [r7, #8]
        }
 8018352:	4618      	mov	r0, r3
 8018354:	3718      	adds	r7, #24
 8018356:	46bd      	mov	sp, r7
 8018358:	bd80      	pop	{r7, pc}
 801835a:	bf00      	nop
 801835c:	080261cc 	.word	0x080261cc

08018360 <HAL_ETH_BuildRxDescriptors>:
 *         the configuration information for ETHERNET module
 * @retval HAL status.
 */
        HAL_StatusTypeDef HAL_ETH_BuildRxDescriptors( ETH_HandleTypeDef * heth,
                                                      uint8_t * pucNewBuffer )
        {
 8018360:	b480      	push	{r7}
 8018362:	b08b      	sub	sp, #44	@ 0x2c
 8018364:	af00      	add	r7, sp, #0
 8018366:	6078      	str	r0, [r7, #4]
 8018368:	6039      	str	r1, [r7, #0]
            ETH_RxDescListTypeDef * dmarxdesclist = &heth->RxDescList;
 801836a:	687b      	ldr	r3, [r7, #4]
 801836c:	3330      	adds	r3, #48	@ 0x30
 801836e:	60fb      	str	r3, [r7, #12]
            uint32_t desc_index = dmarxdesclist->FirstAppDesc;
 8018370:	68fb      	ldr	r3, [r7, #12]
 8018372:	695b      	ldr	r3, [r3, #20]
 8018374:	627b      	str	r3, [r7, #36]	@ 0x24
            __IO ETH_DMADescTypeDef * dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018376:	68fb      	ldr	r3, [r7, #12]
 8018378:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801837a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801837e:	623b      	str	r3, [r7, #32]
            uint32_t totalappdescnbr = dmarxdesclist->AppDescNbr;
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	699b      	ldr	r3, [r3, #24]
 8018384:	61fb      	str	r3, [r7, #28]
            uint32_t descscan;

            if( dmarxdesclist->AppDescNbr == 0U )
 8018386:	68fb      	ldr	r3, [r7, #12]
 8018388:	699b      	ldr	r3, [r3, #24]
 801838a:	2b00      	cmp	r3, #0
 801838c:	d101      	bne.n	8018392 <HAL_ETH_BuildRxDescriptors+0x32>
            {
                /* No Rx descriptors to build */
                return HAL_ERROR;
 801838e:	2301      	movs	r3, #1
 8018390:	e057      	b.n	8018442 <HAL_ETH_BuildRxDescriptors+0xe2>
            }

            if( dmarxdesclist->AppContextDesc != 0U )
 8018392:	68fb      	ldr	r3, [r7, #12]
 8018394:	69db      	ldr	r3, [r3, #28]
 8018396:	2b00      	cmp	r3, #0
 8018398:	d002      	beq.n	80183a0 <HAL_ETH_BuildRxDescriptors+0x40>
            {
                /* A context descriptor is available */
                totalappdescnbr += 1U;
 801839a:	69fb      	ldr	r3, [r7, #28]
 801839c:	3301      	adds	r3, #1
 801839e:	61fb      	str	r3, [r7, #28]
            }

            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 80183a0:	2300      	movs	r3, #0
 80183a2:	61bb      	str	r3, [r7, #24]
            {
                uint32_t DESC3;
                uint8_t * pucBuffer;

                if( pucNewBuffer != NULL )
 80183a4:	683b      	ldr	r3, [r7, #0]
 80183a6:	2b00      	cmp	r3, #0
 80183a8:	d005      	beq.n	80183b6 <HAL_ETH_BuildRxDescriptors+0x56>
                {
                    /* Earlier zero-copy RX only: buffer was passed to the application. */
                    pucBuffer = pucNewBuffer;
 80183aa:	683b      	ldr	r3, [r7, #0]
 80183ac:	613b      	str	r3, [r7, #16]
                    dmarxdesc->BackupAddr0 = ( uint32_t ) pucNewBuffer;
 80183ae:	683a      	ldr	r2, [r7, #0]
 80183b0:	6a3b      	ldr	r3, [r7, #32]
 80183b2:	611a      	str	r2, [r3, #16]
 80183b4:	e002      	b.n	80183bc <HAL_ETH_BuildRxDescriptors+0x5c>
                }
                else
                {
                    /* Keep on using the same buffer as before. */
                    pucBuffer = ( uint8_t * ) dmarxdesc->BackupAddr0;
 80183b6:	6a3b      	ldr	r3, [r7, #32]
 80183b8:	691b      	ldr	r3, [r3, #16]
 80183ba:	613b      	str	r3, [r7, #16]
                }

                WRITE_REG( dmarxdesc->DESC0, ( uint32_t ) pucBuffer );
 80183bc:	693a      	ldr	r2, [r7, #16]
 80183be:	6a3b      	ldr	r3, [r7, #32]
 80183c0:	601a      	str	r2, [r3, #0]
                /* Buffer 1 Address Valid */

                DESC3 = READ_REG( dmarxdesc->DESC3 );
 80183c2:	6a3b      	ldr	r3, [r7, #32]
 80183c4:	68db      	ldr	r3, [r3, #12]
 80183c6:	617b      	str	r3, [r7, #20]
                WRITE_REG( DESC3, ETH_DMARXNDESCRF_BUF1V );
 80183c8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80183cc:	617b      	str	r3, [r7, #20]
/*		} */

                /* Should be the last change. */
/*		SET_BIT(DESC3, ETH_DMARXNDESCRF_OWN); */

                if( dmarxdesclist->ItMode != 0U )
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	6a1b      	ldr	r3, [r3, #32]
 80183d2:	2b00      	cmp	r3, #0
 80183d4:	d003      	beq.n	80183de <HAL_ETH_BuildRxDescriptors+0x7e>
                {
                    /* Interrupt Enabled on Completion */
                    SET_BIT( DESC3, ETH_DMARXNDESCRF_IOC );
 80183d6:	697b      	ldr	r3, [r7, #20]
 80183d8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80183dc:	617b      	str	r3, [r7, #20]
                }

                /* Now all is ready.. */
                SET_BIT( DESC3, ETH_DMARXNDESCRF_OWN );
 80183de:	697b      	ldr	r3, [r7, #20]
 80183e0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80183e4:	617b      	str	r3, [r7, #20]

                WRITE_REG( dmarxdesc->DESC3, DESC3 );
 80183e6:	6a3b      	ldr	r3, [r7, #32]
 80183e8:	697a      	ldr	r2, [r7, #20]
 80183ea:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80183ec:	f3bf 8f4f 	dsb	sy
}
 80183f0:	bf00      	nop

                __DSB();

                /* And read it back. */
                ( void ) dmarxdesc->DESC3;
 80183f2:	6a3b      	ldr	r3, [r7, #32]
 80183f4:	68db      	ldr	r3, [r3, #12]

                if( descscan >= ( totalappdescnbr - 1U ) )
 80183f6:	69fb      	ldr	r3, [r7, #28]
 80183f8:	3b01      	subs	r3, #1
 80183fa:	69ba      	ldr	r2, [r7, #24]
 80183fc:	429a      	cmp	r2, r3
 80183fe:	d211      	bcs.n	8018424 <HAL_ETH_BuildRxDescriptors+0xc4>
                {
                    break;
                }

                /* Increment rx descriptor index */
                INCR_RX_DESC_INDEX( desc_index, 1U );
 8018400:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018402:	3301      	adds	r3, #1
 8018404:	627b      	str	r3, [r7, #36]	@ 0x24
 8018406:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018408:	2b03      	cmp	r3, #3
 801840a:	d902      	bls.n	8018412 <HAL_ETH_BuildRxDescriptors+0xb2>
 801840c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801840e:	3b04      	subs	r3, #4
 8018410:	627b      	str	r3, [r7, #36]	@ 0x24
                /* Get descriptor address */
                dmarxdesc = ( ETH_DMADescTypeDef * ) dmarxdesclist->RxDesc[ desc_index ];
 8018412:	68fb      	ldr	r3, [r7, #12]
 8018414:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8018416:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801841a:	623b      	str	r3, [r7, #32]
            for( descscan = 0; ipTRUE_BOOL; descscan++ )
 801841c:	69bb      	ldr	r3, [r7, #24]
 801841e:	3301      	adds	r3, #1
 8018420:	61bb      	str	r3, [r7, #24]
            {
 8018422:	e7bf      	b.n	80183a4 <HAL_ETH_BuildRxDescriptors+0x44>
                    break;
 8018424:	bf00      	nop
            }

            /* Set the Tail pointer address to the last rx descriptor hold by the app */
            WRITE_REG( heth->Instance->DMACRDTPR, ( uint32_t ) dmarxdesc );
 8018426:	687b      	ldr	r3, [r7, #4]
 8018428:	681a      	ldr	r2, [r3, #0]
 801842a:	6a3b      	ldr	r3, [r7, #32]
 801842c:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018430:	f8c2 3128 	str.w	r3, [r2, #296]	@ 0x128

            /* reset the Application desc number */
            dmarxdesclist->AppDescNbr = 0;
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	2200      	movs	r2, #0
 8018438:	619a      	str	r2, [r3, #24]

            /*  reset the application context descriptor */
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 801843a:	687b      	ldr	r3, [r7, #4]
 801843c:	2200      	movs	r2, #0
 801843e:	64da      	str	r2, [r3, #76]	@ 0x4c

            return HAL_OK;
 8018440:	2300      	movs	r3, #0
        }
 8018442:	4618      	mov	r0, r3
 8018444:	372c      	adds	r7, #44	@ 0x2c
 8018446:	46bd      	mov	sp, r7
 8018448:	f85d 7b04 	ldr.w	r7, [sp], #4
 801844c:	4770      	bx	lr
	...

08018450 <HAL_ETH_IRQHandler>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        void HAL_ETH_IRQHandler( ETH_HandleTypeDef * heth )
        {
 8018450:	b580      	push	{r7, lr}
 8018452:	b082      	sub	sp, #8
 8018454:	af00      	add	r7, sp, #0
 8018456:	6078      	str	r0, [r7, #4]
            /* ETH interrupt. See heth->DMACSR for details.
             */

            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_RI ) )
 8018458:	687b      	ldr	r3, [r7, #4]
 801845a:	681b      	ldr	r3, [r3, #0]
 801845c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018460:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 8018464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018468:	2b40      	cmp	r3, #64	@ 0x40
 801846a:	d115      	bne.n	8018498 <HAL_ETH_IRQHandler+0x48>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_RIE ) )
 801846c:	687b      	ldr	r3, [r7, #4]
 801846e:	681b      	ldr	r3, [r3, #0]
 8018470:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018474:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018478:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801847c:	2b40      	cmp	r3, #64	@ 0x40
 801847e:	d10b      	bne.n	8018498 <HAL_ETH_IRQHandler+0x48>
                        heth->RxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Receive complete callback */
                        HAL_ETH_RxCpltCallback( heth );
 8018480:	6878      	ldr	r0, [r7, #4]
 8018482:	f7ff fafc 	bl	8017a7e <HAL_ETH_RxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Rx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_RI | ETH_DMACSR_NIS );
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	681b      	ldr	r3, [r3, #0]
 801848a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801848e:	461a      	mov	r2, r3
 8018490:	f248 0340 	movw	r3, #32832	@ 0x8040
 8018494:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* Packet transmitted */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_TI ) )
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	681b      	ldr	r3, [r3, #0]
 801849c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80184a0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80184a4:	f003 0301 	and.w	r3, r3, #1
 80184a8:	2b01      	cmp	r3, #1
 80184aa:	d115      	bne.n	80184d8 <HAL_ETH_IRQHandler+0x88>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_TIE ) )
 80184ac:	687b      	ldr	r3, [r7, #4]
 80184ae:	681b      	ldr	r3, [r3, #0]
 80184b0:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80184b4:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80184b8:	f003 0301 	and.w	r3, r3, #1
 80184bc:	2b01      	cmp	r3, #1
 80184be:	d10b      	bne.n	80184d8 <HAL_ETH_IRQHandler+0x88>
                        heth->TxCpltCallback( heth );
                    }
                    #else
                    {
                        /* Transfer complete callback */
                        HAL_ETH_TxCpltCallback( heth );
 80184c0:	6878      	ldr	r0, [r7, #4]
 80184c2:	f7ff fad1 	bl	8017a68 <HAL_ETH_TxCpltCallback>
                    }
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                    /* Clear the Eth DMA Tx IT pending bits */
                    __HAL_ETH_DMA_CLEAR_IT( heth, ETH_DMACSR_TI | ETH_DMACSR_NIS );
 80184c6:	687b      	ldr	r3, [r7, #4]
 80184c8:	681b      	ldr	r3, [r3, #0]
 80184ca:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80184ce:	461a      	mov	r2, r3
 80184d0:	f248 0301 	movw	r3, #32769	@ 0x8001
 80184d4:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                }
            }

            /* ETH DMA Error */
            if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_AIS ) )
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	681b      	ldr	r3, [r3, #0]
 80184dc:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80184e0:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 80184e4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80184e8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80184ec:	d14f      	bne.n	801858e <HAL_ETH_IRQHandler+0x13e>
            {
                if( __HAL_ETH_DMA_GET_IT_SOURCE( heth, ETH_DMACIER_AIE ) )
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	681b      	ldr	r3, [r3, #0]
 80184f2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80184f6:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 80184fa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80184fe:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018502:	d144      	bne.n	801858e <HAL_ETH_IRQHandler+0x13e>
                {
                    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8018504:	687b      	ldr	r3, [r7, #4]
 8018506:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8018508:	f043 0208 	orr.w	r2, r3, #8
 801850c:	687b      	ldr	r3, [r7, #4]
 801850e:	661a      	str	r2, [r3, #96]	@ 0x60

                    /* if fatal bus error occurred */
                    if( __HAL_ETH_DMA_GET_IT( heth, ETH_DMACSR_FBE ) )
 8018510:	687b      	ldr	r3, [r7, #4]
 8018512:	681b      	ldr	r3, [r3, #0]
 8018514:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018518:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801851c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8018520:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018524:	d11d      	bne.n	8018562 <HAL_ETH_IRQHandler+0x112>
                    {
                        /* Get DMA error code  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_FBE | ETH_DMACSR_TPS | ETH_DMACSR_RPS ) );
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	681b      	ldr	r3, [r3, #0]
 801852a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801852e:	f8d3 2160 	ldr.w	r2, [r3, #352]	@ 0x160
 8018532:	f241 1302 	movw	r3, #4354	@ 0x1102
 8018536:	4013      	ands	r3, r2
 8018538:	687a      	ldr	r2, [r7, #4]
 801853a:	6653      	str	r3, [r2, #100]	@ 0x64

                        /* Disable all interrupts */
                        __HAL_ETH_DMA_DISABLE_IT( heth, ETH_DMACIER_NIE | ETH_DMACIER_AIE );
 801853c:	687b      	ldr	r3, [r7, #4]
 801853e:	681b      	ldr	r3, [r3, #0]
 8018540:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018544:	f8d3 3134 	ldr.w	r3, [r3, #308]	@ 0x134
 8018548:	687a      	ldr	r2, [r7, #4]
 801854a:	6812      	ldr	r2, [r2, #0]
 801854c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8018550:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018554:	f8c2 3134 	str.w	r3, [r2, #308]	@ 0x134

                        /* Set HAL state to ERROR */
                        set_error_state( heth, HAL_ETH_STATE_ERROR );
 8018558:	21e0      	movs	r1, #224	@ 0xe0
 801855a:	6878      	ldr	r0, [r7, #4]
 801855c:	f7ff fbba 	bl	8017cd4 <set_error_state>
 8018560:	e012      	b.n	8018588 <HAL_ETH_IRQHandler+0x138>
                    }
                    else
                    {
                        /* Get DMA error status  */
                        heth->DMAErrorCode = READ_BIT( heth->Instance->DMACSR, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8018562:	687b      	ldr	r3, [r7, #4]
 8018564:	681b      	ldr	r3, [r3, #0]
 8018566:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801856a:	f8d3 3160 	ldr.w	r3, [r3, #352]	@ 0x160
 801856e:	f403 42cd 	and.w	r2, r3, #26240	@ 0x6680
 8018572:	687b      	ldr	r3, [r7, #4]
 8018574:	665a      	str	r2, [r3, #100]	@ 0x64
                                                                                 ETH_DMACSR_RBU | ETH_DMACSR_AIS ) );

                        /* Clear the interrupt summary flag */
                        __HAL_ETH_DMA_CLEAR_IT( heth, ( ETH_DMACSR_CDE | ETH_DMACSR_ETI | ETH_DMACSR_RWT |
 8018576:	687b      	ldr	r3, [r7, #4]
 8018578:	681b      	ldr	r3, [r3, #0]
 801857a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801857e:	461a      	mov	r2, r3
 8018580:	f44f 43cd 	mov.w	r3, #26240	@ 0x6680
 8018584:	f8c2 3160 	str.w	r3, [r2, #352]	@ 0x160
                        heth->DMAErrorCallback( heth );
                    }
                    #else
                    {
                        /* Ethernet DMA Error callback */
                        HAL_ETH_DMAErrorCallback( heth );
 8018588:	6878      	ldr	r0, [r7, #4]
 801858a:	f7ff fa83 	bl	8017a94 <HAL_ETH_DMAErrorCallback>
                    #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
                }
            }

            /* ETH MAC Error IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ( ETH_MACIER_RXSTSIE | ETH_MACIER_TXSTSIE ) ) )
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	681b      	ldr	r3, [r3, #0]
 8018592:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8018596:	f403 43c0 	and.w	r3, r3, #24576	@ 0x6000
 801859a:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801859e:	d10f      	bne.n	80185c0 <HAL_ETH_IRQHandler+0x170>
            {
                /* Get MAC Rx Tx status and clear Status register pending bit */
                heth->MACErrorCode = READ_REG( heth->Instance->MACRXTXSR );
 80185a0:	687b      	ldr	r3, [r7, #4]
 80185a2:	681b      	ldr	r3, [r3, #0]
 80185a4:	f8d3 20b8 	ldr.w	r2, [r3, #184]	@ 0xb8
 80185a8:	687b      	ldr	r3, [r7, #4]
 80185aa:	669a      	str	r2, [r3, #104]	@ 0x68

                set_error_state( heth, HAL_ETH_STATE_ERROR );
 80185ac:	21e0      	movs	r1, #224	@ 0xe0
 80185ae:	6878      	ldr	r0, [r7, #4]
 80185b0:	f7ff fb90 	bl	8017cd4 <set_error_state>
                    heth->DMAErrorCallback( heth );
                }
                #else
                {
                    /* Ethernet MAC Error callback */
                    HAL_ETH_MACErrorCallback( heth );
 80185b4:	6878      	ldr	r0, [r7, #4]
 80185b6:	f000 f843 	bl	8018640 <HAL_ETH_MACErrorCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACErrorCode = ( uint32_t ) ( 0x0U );
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	2200      	movs	r2, #0
 80185be:	669a      	str	r2, [r3, #104]	@ 0x68
            }

            /* ETH PMT IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_PMT_IT ) )
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80185c8:	f003 0310 	and.w	r3, r3, #16
 80185cc:	2b10      	cmp	r3, #16
 80185ce:	d10d      	bne.n	80185ec <HAL_ETH_IRQHandler+0x19c>
            {
                /* Get MAC Wake-up source and clear the status register pending bit */
                heth->MACWakeUpEvent = READ_BIT( heth->Instance->MACPCSR, ( ETH_MACPCSR_RWKPRCVD | ETH_MACPCSR_MGKPRCVD ) );
 80185d0:	687b      	ldr	r3, [r7, #4]
 80185d2:	681b      	ldr	r3, [r3, #0]
 80185d4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80185d8:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 80185dc:	687b      	ldr	r3, [r7, #4]
 80185de:	66da      	str	r2, [r3, #108]	@ 0x6c
                    heth->PMTCallback( heth );
                }
                #else
                {
                    /* Ethernet PMT callback */
                    HAL_ETH_PMTCallback( heth );
 80185e0:	6878      	ldr	r0, [r7, #4]
 80185e2:	f000 f837 	bl	8018654 <HAL_ETH_PMTCallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACWakeUpEvent = ( uint32_t ) ( 0x0U );
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	2200      	movs	r2, #0
 80185ea:	66da      	str	r2, [r3, #108]	@ 0x6c
            }

            /* ETH EEE IT */
            if( __HAL_ETH_MAC_GET_IT( heth, ETH_MAC_LPI_IT ) )
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80185f4:	f003 0320 	and.w	r3, r3, #32
 80185f8:	2b20      	cmp	r3, #32
 80185fa:	d10d      	bne.n	8018618 <HAL_ETH_IRQHandler+0x1c8>
            {
                /* Get MAC LPI interrupt source and clear the status register pending bit */
                heth->MACLPIEvent = READ_BIT( heth->Instance->MACPCSR, 0x0000000FU );
 80185fc:	687b      	ldr	r3, [r7, #4]
 80185fe:	681b      	ldr	r3, [r3, #0]
 8018600:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8018604:	f003 020f 	and.w	r2, r3, #15
 8018608:	687b      	ldr	r3, [r7, #4]
 801860a:	671a      	str	r2, [r3, #112]	@ 0x70
                    heth->EEECallback( heth );
                }
                #else
                {
                    /* Ethernet EEE callback */
                    HAL_ETH_EEECallback( heth );
 801860c:	6878      	ldr	r0, [r7, #4]
 801860e:	f000 f82b 	bl	8018668 <HAL_ETH_EEECallback>
                }
                #endif /* USE_HAL_ETH_REGISTER_CALLBACKS */

                heth->MACLPIEvent = ( uint32_t ) ( 0x0U );
 8018612:	687b      	ldr	r3, [r7, #4]
 8018614:	2200      	movs	r2, #0
 8018616:	671a      	str	r2, [r3, #112]	@ 0x70
                        #endif
                    }
                }
            #else /* #if defined(DUAL_CORE) */
                /* check ETH WAKEUP exti flag */
                if( __HAL_ETH_WAKEUP_EXTI_GET_FLAG( ETH_WAKEUP_EXTI_LINE ) != ( uint32_t ) RESET )
 8018618:	4b08      	ldr	r3, [pc, #32]	@ (801863c <HAL_ETH_IRQHandler+0x1ec>)
 801861a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801861c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018620:	2b00      	cmp	r3, #0
 8018622:	d006      	beq.n	8018632 <HAL_ETH_IRQHandler+0x1e2>
                {
                    /* Clear ETH WAKEUP Exti pending bit */
                    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG( ETH_WAKEUP_EXTI_LINE );
 8018624:	4b05      	ldr	r3, [pc, #20]	@ (801863c <HAL_ETH_IRQHandler+0x1ec>)
 8018626:	f44f 0280 	mov.w	r2, #4194304	@ 0x400000
 801862a:	629a      	str	r2, [r3, #40]	@ 0x28
                        heth->WakeUpCallback( heth );
                    }
                    #else
                    {
                        /* ETH WAKEUP callback */
                        HAL_ETH_WakeUpCallback( heth );
 801862c:	6878      	ldr	r0, [r7, #4]
 801862e:	f000 f825 	bl	801867c <HAL_ETH_WakeUpCallback>
                    }
                    #endif
                }
            #endif /* #if defined(DUAL_CORE) */
        }
 8018632:	bf00      	nop
 8018634:	3708      	adds	r7, #8
 8018636:	46bd      	mov	sp, r7
 8018638:	bd80      	pop	{r7, pc}
 801863a:	bf00      	nop
 801863c:	58000080 	.word	0x58000080

08018640 <HAL_ETH_MACErrorCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_MACErrorCallback( ETH_HandleTypeDef * heth )
        {
 8018640:	b480      	push	{r7}
 8018642:	b083      	sub	sp, #12
 8018644:	af00      	add	r7, sp, #0
 8018646:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_MACErrorCallback could be implemented in the user file
             */
        }
 8018648:	bf00      	nop
 801864a:	370c      	adds	r7, #12
 801864c:	46bd      	mov	sp, r7
 801864e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018652:	4770      	bx	lr

08018654 <HAL_ETH_PMTCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_PMTCallback( ETH_HandleTypeDef * heth )
        {
 8018654:	b480      	push	{r7}
 8018656:	b083      	sub	sp, #12
 8018658:	af00      	add	r7, sp, #0
 801865a:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_PMTCallback could be implemented in the user file
             */
        }
 801865c:	bf00      	nop
 801865e:	370c      	adds	r7, #12
 8018660:	46bd      	mov	sp, r7
 8018662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018666:	4770      	bx	lr

08018668 <HAL_ETH_EEECallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_EEECallback( ETH_HandleTypeDef * heth )
        {
 8018668:	b480      	push	{r7}
 801866a:	b083      	sub	sp, #12
 801866c:	af00      	add	r7, sp, #0
 801866e:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             * the HAL_ETH_EEECallback could be implemented in the user file
             */
        }
 8018670:	bf00      	nop
 8018672:	370c      	adds	r7, #12
 8018674:	46bd      	mov	sp, r7
 8018676:	f85d 7b04 	ldr.w	r7, [sp], #4
 801867a:	4770      	bx	lr

0801867c <HAL_ETH_WakeUpCallback>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        __weak void HAL_ETH_WakeUpCallback( ETH_HandleTypeDef * heth )
        {
 801867c:	b480      	push	{r7}
 801867e:	b083      	sub	sp, #12
 8018680:	af00      	add	r7, sp, #0
 8018682:	6078      	str	r0, [r7, #4]
            UNUSED( heth );

            /* NOTE : This function Should not be modified, when the callback is needed,
             *        the HAL_ETH_WakeUpCallback could be implemented in the user file
             */
        }
 8018684:	bf00      	nop
 8018686:	370c      	adds	r7, #12
 8018688:	46bd      	mov	sp, r7
 801868a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801868e:	4770      	bx	lr

08018690 <HAL_ETH_ReadPHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_ReadPHYRegister( ETH_HandleTypeDef * heth,
                                                   uint32_t PHYAddr,
                                                   uint32_t PHYReg,
                                                   uint32_t * pRegValue )
        {
 8018690:	b580      	push	{r7, lr}
 8018692:	b086      	sub	sp, #24
 8018694:	af00      	add	r7, sp, #0
 8018696:	60f8      	str	r0, [r7, #12]
 8018698:	60b9      	str	r1, [r7, #8]
 801869a:	607a      	str	r2, [r7, #4]
 801869c:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 801869e:	68fb      	ldr	r3, [r7, #12]
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80186a6:	f003 0301 	and.w	r3, r3, #1
 80186aa:	2b00      	cmp	r3, #0
 80186ac:	d001      	beq.n	80186b2 <HAL_ETH_ReadPHYRegister+0x22>
            {
                return HAL_ERROR;
 80186ae:	2301      	movs	r3, #1
 80186b0:	e03e      	b.n	8018730 <HAL_ETH_ReadPHYRegister+0xa0>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 80186b2:	68fb      	ldr	r3, [r7, #12]
 80186b4:	681b      	ldr	r3, [r3, #0]
 80186b6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80186ba:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the read mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 80186bc:	697b      	ldr	r3, [r7, #20]
 80186be:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 80186c2:	68bb      	ldr	r3, [r7, #8]
 80186c4:	055b      	lsls	r3, r3, #21
 80186c6:	4313      	orrs	r3, r2
 80186c8:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 80186ca:	697b      	ldr	r3, [r7, #20]
 80186cc:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80186d0:	687b      	ldr	r3, [r7, #4]
 80186d2:	041b      	lsls	r3, r3, #16
 80186d4:	4313      	orrs	r3, r2
 80186d6:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_RD );
 80186d8:	697b      	ldr	r3, [r7, #20]
 80186da:	f043 030c 	orr.w	r3, r3, #12
 80186de:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 80186e0:	697b      	ldr	r3, [r7, #20]
 80186e2:	f043 0301 	orr.w	r3, r3, #1
 80186e6:	617b      	str	r3, [r7, #20]

            /* Write the result value into the MDII Address register */
            WRITE_REG( heth->Instance->MACMDIOAR, tmpreg );
 80186e8:	68fb      	ldr	r3, [r7, #12]
 80186ea:	681b      	ldr	r3, [r3, #0]
 80186ec:	697a      	ldr	r2, [r7, #20]
 80186ee:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

            tickstart = HAL_GetTick();
 80186f2:	f000 ff01 	bl	80194f8 <HAL_GetTick>
 80186f6:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80186f8:	e009      	b.n	801870e <HAL_ETH_ReadPHYRegister+0x7e>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 80186fa:	f000 fefd 	bl	80194f8 <HAL_GetTick>
 80186fe:	4602      	mov	r2, r0
 8018700:	693b      	ldr	r3, [r7, #16]
 8018702:	1ad3      	subs	r3, r2, r3
 8018704:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8018708:	d901      	bls.n	801870e <HAL_ETH_ReadPHYRegister+0x7e>
                {
                    return HAL_ERROR;
 801870a:	2301      	movs	r3, #1
 801870c:	e010      	b.n	8018730 <HAL_ETH_ReadPHYRegister+0xa0>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 801870e:	68fb      	ldr	r3, [r7, #12]
 8018710:	681b      	ldr	r3, [r3, #0]
 8018712:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018716:	f003 0301 	and.w	r3, r3, #1
 801871a:	2b00      	cmp	r3, #0
 801871c:	d1ed      	bne.n	80186fa <HAL_ETH_ReadPHYRegister+0x6a>
                }
            }

            /* Get MACMIIDR value */
            WRITE_REG( *pRegValue, ( uint16_t ) heth->Instance->MACMDIODR );
 801871e:	68fb      	ldr	r3, [r7, #12]
 8018720:	681b      	ldr	r3, [r3, #0]
 8018722:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8018726:	b29b      	uxth	r3, r3
 8018728:	461a      	mov	r2, r3
 801872a:	683b      	ldr	r3, [r7, #0]
 801872c:	601a      	str	r2, [r3, #0]

            return HAL_OK;
 801872e:	2300      	movs	r3, #0
        }
 8018730:	4618      	mov	r0, r3
 8018732:	3718      	adds	r7, #24
 8018734:	46bd      	mov	sp, r7
 8018736:	bd80      	pop	{r7, pc}

08018738 <HAL_ETH_WritePHYRegister>:
 */
        HAL_StatusTypeDef HAL_ETH_WritePHYRegister( ETH_HandleTypeDef * heth,
                                                    uint32_t PHYAddr,
                                                    uint32_t PHYReg,
                                                    uint32_t RegValue )
        {
 8018738:	b580      	push	{r7, lr}
 801873a:	b086      	sub	sp, #24
 801873c:	af00      	add	r7, sp, #0
 801873e:	60f8      	str	r0, [r7, #12]
 8018740:	60b9      	str	r1, [r7, #8]
 8018742:	607a      	str	r2, [r7, #4]
 8018744:	603b      	str	r3, [r7, #0]
            uint32_t tmpreg, tickstart;

            /* Check for the Busy flag */
            if( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) != 0U )
 8018746:	68fb      	ldr	r3, [r7, #12]
 8018748:	681b      	ldr	r3, [r3, #0]
 801874a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801874e:	f003 0301 	and.w	r3, r3, #1
 8018752:	2b00      	cmp	r3, #0
 8018754:	d001      	beq.n	801875a <HAL_ETH_WritePHYRegister+0x22>
            {
                return HAL_ERROR;
 8018756:	2301      	movs	r3, #1
 8018758:	e03c      	b.n	80187d4 <HAL_ETH_WritePHYRegister+0x9c>
            }

            /* Get the  MACMDIOAR value */
            WRITE_REG( tmpreg, heth->Instance->MACMDIOAR );
 801875a:	68fb      	ldr	r3, [r7, #12]
 801875c:	681b      	ldr	r3, [r3, #0]
 801875e:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8018762:	617b      	str	r3, [r7, #20]
             * - Set the PHY device address
             * - Set the PHY register address
             * - Set the write mode
             * - Set the MII Busy bit */

            MODIFY_REG( tmpreg, ETH_MACMDIOAR_PA, ( PHYAddr << 21 ) );
 8018764:	697b      	ldr	r3, [r7, #20]
 8018766:	f023 7278 	bic.w	r2, r3, #65011712	@ 0x3e00000
 801876a:	68bb      	ldr	r3, [r7, #8]
 801876c:	055b      	lsls	r3, r3, #21
 801876e:	4313      	orrs	r3, r2
 8018770:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_RDA, ( PHYReg << 16 ) );
 8018772:	697b      	ldr	r3, [r7, #20]
 8018774:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8018778:	687b      	ldr	r3, [r7, #4]
 801877a:	041b      	lsls	r3, r3, #16
 801877c:	4313      	orrs	r3, r2
 801877e:	617b      	str	r3, [r7, #20]
            MODIFY_REG( tmpreg, ETH_MACMDIOAR_MOC, ETH_MACMDIOAR_MOC_WR );
 8018780:	697b      	ldr	r3, [r7, #20]
 8018782:	f023 030c 	bic.w	r3, r3, #12
 8018786:	f043 0304 	orr.w	r3, r3, #4
 801878a:	617b      	str	r3, [r7, #20]
            SET_BIT( tmpreg, ETH_MACMDIOAR_MB );
 801878c:	697b      	ldr	r3, [r7, #20]
 801878e:	f043 0301 	orr.w	r3, r3, #1
 8018792:	617b      	str	r3, [r7, #20]


            /* Give the value to the MII data register */
            WRITE_REG( ETH->MACMDIODR, ( uint16_t ) RegValue );
 8018794:	683b      	ldr	r3, [r7, #0]
 8018796:	b29a      	uxth	r2, r3
 8018798:	4b10      	ldr	r3, [pc, #64]	@ (80187dc <HAL_ETH_WritePHYRegister+0xa4>)
 801879a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

            /* Write the result value into the MII Address register */
            WRITE_REG( ETH->MACMDIOAR, tmpreg );
 801879e:	4a0f      	ldr	r2, [pc, #60]	@ (80187dc <HAL_ETH_WritePHYRegister+0xa4>)
 80187a0:	697b      	ldr	r3, [r7, #20]
 80187a2:	f8c2 3200 	str.w	r3, [r2, #512]	@ 0x200

            tickstart = HAL_GetTick();
 80187a6:	f000 fea7 	bl	80194f8 <HAL_GetTick>
 80187aa:	6138      	str	r0, [r7, #16]

            /* Wait for the Busy flag */
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80187ac:	e009      	b.n	80187c2 <HAL_ETH_WritePHYRegister+0x8a>
            {
                if( ( ( HAL_GetTick() - tickstart ) > ETH_MDIO_BUS_TIMEOUT ) )
 80187ae:	f000 fea3 	bl	80194f8 <HAL_GetTick>
 80187b2:	4602      	mov	r2, r0
 80187b4:	693b      	ldr	r3, [r7, #16]
 80187b6:	1ad3      	subs	r3, r2, r3
 80187b8:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80187bc:	d901      	bls.n	80187c2 <HAL_ETH_WritePHYRegister+0x8a>
                {
                    return HAL_ERROR;
 80187be:	2301      	movs	r3, #1
 80187c0:	e008      	b.n	80187d4 <HAL_ETH_WritePHYRegister+0x9c>
            while( READ_BIT( heth->Instance->MACMDIOAR, ETH_MACMDIOAR_MB ) > 0U )
 80187c2:	68fb      	ldr	r3, [r7, #12]
 80187c4:	681b      	ldr	r3, [r3, #0]
 80187c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80187ca:	f003 0301 	and.w	r3, r3, #1
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d1ed      	bne.n	80187ae <HAL_ETH_WritePHYRegister+0x76>
                }
            }

            return HAL_OK;
 80187d2:	2300      	movs	r3, #0
        }
 80187d4:	4618      	mov	r0, r3
 80187d6:	3718      	adds	r7, #24
 80187d8:	46bd      	mov	sp, r7
 80187da:	bd80      	pop	{r7, pc}
 80187dc:	40028000 	.word	0x40028000

080187e0 <HAL_ETH_GetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL Status
 */
        HAL_StatusTypeDef HAL_ETH_GetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 80187e0:	b480      	push	{r7}
 80187e2:	b083      	sub	sp, #12
 80187e4:	af00      	add	r7, sp, #0
 80187e6:	6078      	str	r0, [r7, #4]
 80187e8:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 80187ea:	683b      	ldr	r3, [r7, #0]
 80187ec:	2b00      	cmp	r3, #0
 80187ee:	d101      	bne.n	80187f4 <HAL_ETH_GetMACConfig+0x14>
            {
                return HAL_ERROR;
 80187f0:	2301      	movs	r3, #1
 80187f2:	e1c3      	b.n	8018b7c <HAL_ETH_GetMACConfig+0x39c>
            }

            /* Get MAC parameters */
            macconf->PreambleLength = READ_BIT( heth->Instance->MACCR, ETH_MACCR_PRELEN );
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	681b      	ldr	r3, [r3, #0]
 80187fa:	f003 020c 	and.w	r2, r3, #12
 80187fe:	683b      	ldr	r3, [r7, #0]
 8018800:	62da      	str	r2, [r3, #44]	@ 0x2c
            macconf->DeferralCheck = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DC ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8018802:	687b      	ldr	r3, [r7, #4]
 8018804:	681b      	ldr	r3, [r3, #0]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	f003 0310 	and.w	r3, r3, #16
 801880c:	2b00      	cmp	r3, #0
 801880e:	bf14      	ite	ne
 8018810:	2301      	movne	r3, #1
 8018812:	2300      	moveq	r3, #0
 8018814:	b2db      	uxtb	r3, r3
 8018816:	461a      	mov	r2, r3
 8018818:	683b      	ldr	r3, [r7, #0]
 801881a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
            macconf->BackOffLimit = READ_BIT( heth->Instance->MACCR, ETH_MACCR_BL );
 801881e:	687b      	ldr	r3, [r7, #4]
 8018820:	681b      	ldr	r3, [r3, #0]
 8018822:	681b      	ldr	r3, [r3, #0]
 8018824:	f003 0260 	and.w	r2, r3, #96	@ 0x60
 8018828:	683b      	ldr	r3, [r7, #0]
 801882a:	625a      	str	r2, [r3, #36]	@ 0x24
            macconf->RetryTransmission = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DR ) >> 8 ) == 0U ) ? ENABLE : DISABLE;
 801882c:	687b      	ldr	r3, [r7, #4]
 801882e:	681b      	ldr	r3, [r3, #0]
 8018830:	681b      	ldr	r3, [r3, #0]
 8018832:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018836:	2b00      	cmp	r3, #0
 8018838:	bf0c      	ite	eq
 801883a:	2301      	moveq	r3, #1
 801883c:	2300      	movne	r3, #0
 801883e:	b2db      	uxtb	r3, r3
 8018840:	461a      	mov	r2, r3
 8018842:	683b      	ldr	r3, [r7, #0]
 8018844:	f883 2020 	strb.w	r2, [r3, #32]
            macconf->CarrierSenseDuringTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DCRS ) >> 9 ) > 0U ) ? ENABLE : DISABLE;
 8018848:	687b      	ldr	r3, [r7, #4]
 801884a:	681b      	ldr	r3, [r3, #0]
 801884c:	681b      	ldr	r3, [r3, #0]
 801884e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018852:	2b00      	cmp	r3, #0
 8018854:	bf14      	ite	ne
 8018856:	2301      	movne	r3, #1
 8018858:	2300      	moveq	r3, #0
 801885a:	b2db      	uxtb	r3, r3
 801885c:	461a      	mov	r2, r3
 801885e:	683b      	ldr	r3, [r7, #0]
 8018860:	77da      	strb	r2, [r3, #31]
            macconf->ReceiveOwn = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_DO ) >> 10 ) == 0U ) ? ENABLE : DISABLE;
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	681b      	ldr	r3, [r3, #0]
 8018866:	681b      	ldr	r3, [r3, #0]
 8018868:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801886c:	2b00      	cmp	r3, #0
 801886e:	bf0c      	ite	eq
 8018870:	2301      	moveq	r3, #1
 8018872:	2300      	movne	r3, #0
 8018874:	b2db      	uxtb	r3, r3
 8018876:	461a      	mov	r2, r3
 8018878:	683b      	ldr	r3, [r7, #0]
 801887a:	779a      	strb	r2, [r3, #30]
            macconf->CarrierSenseBeforeTransmit = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ECRSFD ) >> 11 ) > 0U ) ? ENABLE : DISABLE;
 801887c:	687b      	ldr	r3, [r7, #4]
 801887e:	681b      	ldr	r3, [r3, #0]
 8018880:	681b      	ldr	r3, [r3, #0]
 8018882:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018886:	2b00      	cmp	r3, #0
 8018888:	bf14      	ite	ne
 801888a:	2301      	movne	r3, #1
 801888c:	2300      	moveq	r3, #0
 801888e:	b2db      	uxtb	r3, r3
 8018890:	461a      	mov	r2, r3
 8018892:	683b      	ldr	r3, [r7, #0]
 8018894:	775a      	strb	r2, [r3, #29]
            macconf->LoopbackMode = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_LM ) >> 12 ) > 0U ) ? ENABLE : DISABLE;
 8018896:	687b      	ldr	r3, [r7, #4]
 8018898:	681b      	ldr	r3, [r3, #0]
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80188a0:	2b00      	cmp	r3, #0
 80188a2:	bf14      	ite	ne
 80188a4:	2301      	movne	r3, #1
 80188a6:	2300      	moveq	r3, #0
 80188a8:	b2db      	uxtb	r3, r3
 80188aa:	461a      	mov	r2, r3
 80188ac:	683b      	ldr	r3, [r7, #0]
 80188ae:	771a      	strb	r2, [r3, #28]
            macconf->DuplexMode = READ_BIT( heth->Instance->MACCR, ETH_MACCR_DM );
 80188b0:	687b      	ldr	r3, [r7, #4]
 80188b2:	681b      	ldr	r3, [r3, #0]
 80188b4:	681b      	ldr	r3, [r3, #0]
 80188b6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80188ba:	683b      	ldr	r3, [r7, #0]
 80188bc:	619a      	str	r2, [r3, #24]
            macconf->Speed = READ_BIT( heth->Instance->MACCR, ETH_MACCR_FES );
 80188be:	687b      	ldr	r3, [r7, #4]
 80188c0:	681b      	ldr	r3, [r3, #0]
 80188c2:	681b      	ldr	r3, [r3, #0]
 80188c4:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 80188c8:	683b      	ldr	r3, [r7, #0]
 80188ca:	615a      	str	r2, [r3, #20]
            macconf->JumboPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JE ) >> 16 ) > 0U ) ? ENABLE : DISABLE;
 80188cc:	687b      	ldr	r3, [r7, #4]
 80188ce:	681b      	ldr	r3, [r3, #0]
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	bf14      	ite	ne
 80188da:	2301      	movne	r3, #1
 80188dc:	2300      	moveq	r3, #0
 80188de:	b2db      	uxtb	r3, r3
 80188e0:	461a      	mov	r2, r3
 80188e2:	683b      	ldr	r3, [r7, #0]
 80188e4:	749a      	strb	r2, [r3, #18]
            macconf->Jabber = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_JD ) >> 17 ) == 0U ) ? ENABLE : DISABLE;
 80188e6:	687b      	ldr	r3, [r7, #4]
 80188e8:	681b      	ldr	r3, [r3, #0]
 80188ea:	681b      	ldr	r3, [r3, #0]
 80188ec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	bf0c      	ite	eq
 80188f4:	2301      	moveq	r3, #1
 80188f6:	2300      	movne	r3, #0
 80188f8:	b2db      	uxtb	r3, r3
 80188fa:	461a      	mov	r2, r3
 80188fc:	683b      	ldr	r3, [r7, #0]
 80188fe:	745a      	strb	r2, [r3, #17]
            macconf->Watchdog = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_WD ) >> 19 ) == 0U ) ? ENABLE : DISABLE;
 8018900:	687b      	ldr	r3, [r7, #4]
 8018902:	681b      	ldr	r3, [r3, #0]
 8018904:	681b      	ldr	r3, [r3, #0]
 8018906:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801890a:	2b00      	cmp	r3, #0
 801890c:	bf0c      	ite	eq
 801890e:	2301      	moveq	r3, #1
 8018910:	2300      	movne	r3, #0
 8018912:	b2db      	uxtb	r3, r3
 8018914:	461a      	mov	r2, r3
 8018916:	683b      	ldr	r3, [r7, #0]
 8018918:	741a      	strb	r2, [r3, #16]
            macconf->AutomaticPadCRCStrip = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_ACS ) >> 20 ) > 0U ) ? ENABLE : DISABLE;
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	681b      	ldr	r3, [r3, #0]
 8018920:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8018924:	2b00      	cmp	r3, #0
 8018926:	bf14      	ite	ne
 8018928:	2301      	movne	r3, #1
 801892a:	2300      	moveq	r3, #0
 801892c:	b2db      	uxtb	r3, r3
 801892e:	461a      	mov	r2, r3
 8018930:	683b      	ldr	r3, [r7, #0]
 8018932:	73da      	strb	r2, [r3, #15]
            macconf->CRCStripTypePacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_CST ) >> 21 ) > 0U ) ? ENABLE : DISABLE;
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	681b      	ldr	r3, [r3, #0]
 8018938:	681b      	ldr	r3, [r3, #0]
 801893a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801893e:	2b00      	cmp	r3, #0
 8018940:	bf14      	ite	ne
 8018942:	2301      	movne	r3, #1
 8018944:	2300      	moveq	r3, #0
 8018946:	b2db      	uxtb	r3, r3
 8018948:	461a      	mov	r2, r3
 801894a:	683b      	ldr	r3, [r7, #0]
 801894c:	739a      	strb	r2, [r3, #14]
            macconf->Support2KPacket = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_S2KP ) >> 22 ) > 0U ) ? ENABLE : DISABLE;
 801894e:	687b      	ldr	r3, [r7, #4]
 8018950:	681b      	ldr	r3, [r3, #0]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018958:	2b00      	cmp	r3, #0
 801895a:	bf14      	ite	ne
 801895c:	2301      	movne	r3, #1
 801895e:	2300      	moveq	r3, #0
 8018960:	b2db      	uxtb	r3, r3
 8018962:	461a      	mov	r2, r3
 8018964:	683b      	ldr	r3, [r7, #0]
 8018966:	735a      	strb	r2, [r3, #13]
            macconf->GiantPacketSizeLimitControl = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_GPSLCE ) >> 23 ) > 0U ) ? ENABLE : DISABLE;
 8018968:	687b      	ldr	r3, [r7, #4]
 801896a:	681b      	ldr	r3, [r3, #0]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018972:	2b00      	cmp	r3, #0
 8018974:	bf14      	ite	ne
 8018976:	2301      	movne	r3, #1
 8018978:	2300      	moveq	r3, #0
 801897a:	b2db      	uxtb	r3, r3
 801897c:	461a      	mov	r2, r3
 801897e:	683b      	ldr	r3, [r7, #0]
 8018980:	731a      	strb	r2, [r3, #12]
            macconf->InterPacketGapVal = READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPG );
 8018982:	687b      	ldr	r3, [r7, #4]
 8018984:	681b      	ldr	r3, [r3, #0]
 8018986:	681b      	ldr	r3, [r3, #0]
 8018988:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 801898c:	683b      	ldr	r3, [r7, #0]
 801898e:	609a      	str	r2, [r3, #8]
            macconf->ChecksumOffload = ( ( READ_BIT( heth->Instance->MACCR, ETH_MACCR_IPC ) >> 27 ) > 0U ) ? ENABLE : DISABLE;
 8018990:	687b      	ldr	r3, [r7, #4]
 8018992:	681b      	ldr	r3, [r3, #0]
 8018994:	681b      	ldr	r3, [r3, #0]
 8018996:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801899a:	2b00      	cmp	r3, #0
 801899c:	bf14      	ite	ne
 801899e:	2301      	movne	r3, #1
 80189a0:	2300      	moveq	r3, #0
 80189a2:	b2db      	uxtb	r3, r3
 80189a4:	461a      	mov	r2, r3
 80189a6:	683b      	ldr	r3, [r7, #0]
 80189a8:	711a      	strb	r2, [r3, #4]
            macconf->SourceAddrControl = READ_BIT( heth->Instance->MACCR, ETH_MACCR_SARC );
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	681b      	ldr	r3, [r3, #0]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80189b4:	683b      	ldr	r3, [r7, #0]
 80189b6:	601a      	str	r2, [r3, #0]

            macconf->GiantPacketSizeLimit = READ_BIT( heth->Instance->MACECR, ETH_MACECR_GPSL );
 80189b8:	687b      	ldr	r3, [r7, #4]
 80189ba:	681b      	ldr	r3, [r3, #0]
 80189bc:	685b      	ldr	r3, [r3, #4]
 80189be:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80189c2:	683b      	ldr	r3, [r7, #0]
 80189c4:	635a      	str	r2, [r3, #52]	@ 0x34
            macconf->CRCCheckingRxPackets = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_DCRCC ) >> 16 ) == 0U ) ? ENABLE : DISABLE;
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	681b      	ldr	r3, [r3, #0]
 80189ca:	685b      	ldr	r3, [r3, #4]
 80189cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	bf0c      	ite	eq
 80189d4:	2301      	moveq	r3, #1
 80189d6:	2300      	movne	r3, #0
 80189d8:	b2db      	uxtb	r3, r3
 80189da:	461a      	mov	r2, r3
 80189dc:	683b      	ldr	r3, [r7, #0]
 80189de:	f883 2032 	strb.w	r2, [r3, #50]	@ 0x32
            macconf->SlowProtocolDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_SPEN ) >> 17 ) > 0U ) ? ENABLE : DISABLE;
 80189e2:	687b      	ldr	r3, [r7, #4]
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	685b      	ldr	r3, [r3, #4]
 80189e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80189ec:	2b00      	cmp	r3, #0
 80189ee:	bf14      	ite	ne
 80189f0:	2301      	movne	r3, #1
 80189f2:	2300      	moveq	r3, #0
 80189f4:	b2db      	uxtb	r3, r3
 80189f6:	461a      	mov	r2, r3
 80189f8:	683b      	ldr	r3, [r7, #0]
 80189fa:	f883 2031 	strb.w	r2, [r3, #49]	@ 0x31
            macconf->UnicastSlowProtocolPacketDetect = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_USP ) >> 18 ) > 0U ) ? ENABLE : DISABLE;
 80189fe:	687b      	ldr	r3, [r7, #4]
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	685b      	ldr	r3, [r3, #4]
 8018a04:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8018a08:	2b00      	cmp	r3, #0
 8018a0a:	bf14      	ite	ne
 8018a0c:	2301      	movne	r3, #1
 8018a0e:	2300      	moveq	r3, #0
 8018a10:	b2db      	uxtb	r3, r3
 8018a12:	461a      	mov	r2, r3
 8018a14:	683b      	ldr	r3, [r7, #0]
 8018a16:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
            macconf->ExtendedInterPacketGap = ( ( READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPGEN ) >> 24 ) > 0U ) ? ENABLE : DISABLE;
 8018a1a:	687b      	ldr	r3, [r7, #4]
 8018a1c:	681b      	ldr	r3, [r3, #0]
 8018a1e:	685b      	ldr	r3, [r3, #4]
 8018a20:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8018a24:	2b00      	cmp	r3, #0
 8018a26:	bf14      	ite	ne
 8018a28:	2301      	movne	r3, #1
 8018a2a:	2300      	moveq	r3, #0
 8018a2c:	b2db      	uxtb	r3, r3
 8018a2e:	461a      	mov	r2, r3
 8018a30:	683b      	ldr	r3, [r7, #0]
 8018a32:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
            macconf->ExtendedInterPacketGapVal = READ_BIT( heth->Instance->MACECR, ETH_MACECR_EIPG ) >> 25;
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	681b      	ldr	r3, [r3, #0]
 8018a3a:	685b      	ldr	r3, [r3, #4]
 8018a3c:	0e5b      	lsrs	r3, r3, #25
 8018a3e:	f003 021f 	and.w	r2, r3, #31
 8018a42:	683b      	ldr	r3, [r7, #0]
 8018a44:	63da      	str	r2, [r3, #60]	@ 0x3c


            macconf->ProgrammableWatchdog = ( ( READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_PWE ) >> 8 ) > 0U ) ? ENABLE : DISABLE;
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	681b      	ldr	r3, [r3, #0]
 8018a4a:	68db      	ldr	r3, [r3, #12]
 8018a4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	bf14      	ite	ne
 8018a54:	2301      	movne	r3, #1
 8018a56:	2300      	moveq	r3, #0
 8018a58:	b2db      	uxtb	r3, r3
 8018a5a:	461a      	mov	r2, r3
 8018a5c:	683b      	ldr	r3, [r7, #0]
 8018a5e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
            macconf->WatchdogTimeout = READ_BIT( heth->Instance->MACWTR, ETH_MACWTR_WTO );
 8018a62:	687b      	ldr	r3, [r7, #4]
 8018a64:	681b      	ldr	r3, [r3, #0]
 8018a66:	68db      	ldr	r3, [r3, #12]
 8018a68:	f003 020f 	and.w	r2, r3, #15
 8018a6c:	683b      	ldr	r3, [r7, #0]
 8018a6e:	645a      	str	r2, [r3, #68]	@ 0x44

            macconf->TransmitFlowControl = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_TFE ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8018a70:	687b      	ldr	r3, [r7, #4]
 8018a72:	681b      	ldr	r3, [r3, #0]
 8018a74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018a76:	f003 0302 	and.w	r3, r3, #2
 8018a7a:	2b00      	cmp	r3, #0
 8018a7c:	bf14      	ite	ne
 8018a7e:	2301      	movne	r3, #1
 8018a80:	2300      	moveq	r3, #0
 8018a82:	b2db      	uxtb	r3, r3
 8018a84:	461a      	mov	r2, r3
 8018a86:	683b      	ldr	r3, [r7, #0]
 8018a88:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
            macconf->ZeroQuantaPause = ( ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_DZPQ ) >> 7 ) == 0U ) ? ENABLE : DISABLE;
 8018a8c:	687b      	ldr	r3, [r7, #4]
 8018a8e:	681b      	ldr	r3, [r3, #0]
 8018a90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	bf0c      	ite	eq
 8018a9a:	2301      	moveq	r3, #1
 8018a9c:	2300      	movne	r3, #0
 8018a9e:	b2db      	uxtb	r3, r3
 8018aa0:	461a      	mov	r2, r3
 8018aa2:	683b      	ldr	r3, [r7, #0]
 8018aa4:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
            macconf->PauseLowThreshold = READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PLT );
 8018aa8:	687b      	ldr	r3, [r7, #4]
 8018aaa:	681b      	ldr	r3, [r3, #0]
 8018aac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018aae:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 8018ab2:	683b      	ldr	r3, [r7, #0]
 8018ab4:	651a      	str	r2, [r3, #80]	@ 0x50
            macconf->PauseTime = ( READ_BIT( heth->Instance->MACTFCR, ETH_MACTFCR_PT ) >> 16 );
 8018ab6:	687b      	ldr	r3, [r7, #4]
 8018ab8:	681b      	ldr	r3, [r3, #0]
 8018aba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8018abc:	0c1b      	lsrs	r3, r3, #16
 8018abe:	b29a      	uxth	r2, r3
 8018ac0:	683b      	ldr	r3, [r7, #0]
 8018ac2:	649a      	str	r2, [r3, #72]	@ 0x48


            macconf->ReceiveFlowControl = ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_RFE ) > 0U ) ? ENABLE : DISABLE;
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	681b      	ldr	r3, [r3, #0]
 8018ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018acc:	f003 0301 	and.w	r3, r3, #1
 8018ad0:	2b00      	cmp	r3, #0
 8018ad2:	bf14      	ite	ne
 8018ad4:	2301      	movne	r3, #1
 8018ad6:	2300      	moveq	r3, #0
 8018ad8:	b2db      	uxtb	r3, r3
 8018ada:	461a      	mov	r2, r3
 8018adc:	683b      	ldr	r3, [r7, #0]
 8018ade:	f883 2056 	strb.w	r2, [r3, #86]	@ 0x56
            macconf->UnicastPausePacketDetect = ( ( READ_BIT( heth->Instance->MACRFCR, ETH_MACRFCR_UP ) >> 1 ) > 0U ) ? ENABLE : DISABLE;
 8018ae2:	687b      	ldr	r3, [r7, #4]
 8018ae4:	681b      	ldr	r3, [r3, #0]
 8018ae6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018aea:	f003 0302 	and.w	r3, r3, #2
 8018aee:	2b00      	cmp	r3, #0
 8018af0:	bf14      	ite	ne
 8018af2:	2301      	movne	r3, #1
 8018af4:	2300      	moveq	r3, #0
 8018af6:	b2db      	uxtb	r3, r3
 8018af8:	461a      	mov	r2, r3
 8018afa:	683b      	ldr	r3, [r7, #0]
 8018afc:	f883 2055 	strb.w	r2, [r3, #85]	@ 0x55

            macconf->TransmitQueueMode = READ_BIT( heth->Instance->MTLTQOMR, ( ETH_MTLTQOMR_TTC | ETH_MTLTQOMR_TSF ) );
 8018b00:	687b      	ldr	r3, [r7, #4]
 8018b02:	681b      	ldr	r3, [r3, #0]
 8018b04:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8018b08:	f003 0272 	and.w	r2, r3, #114	@ 0x72
 8018b0c:	683b      	ldr	r3, [r7, #0]
 8018b0e:	659a      	str	r2, [r3, #88]	@ 0x58

            macconf->ReceiveQueueMode = READ_BIT( heth->Instance->MTLRQOMR, ( ETH_MTLRQOMR_RTC | ETH_MTLRQOMR_RSF ) );
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	681b      	ldr	r3, [r3, #0]
 8018b14:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018b18:	f003 0223 	and.w	r2, r3, #35	@ 0x23
 8018b1c:	683b      	ldr	r3, [r7, #0]
 8018b1e:	65da      	str	r2, [r3, #92]	@ 0x5c
            macconf->ForwardRxUndersizedGoodPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FUP ) >> 3 ) > 0U ) ? ENABLE : DISABLE;
 8018b20:	687b      	ldr	r3, [r7, #4]
 8018b22:	681b      	ldr	r3, [r3, #0]
 8018b24:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018b28:	f003 0308 	and.w	r3, r3, #8
 8018b2c:	2b00      	cmp	r3, #0
 8018b2e:	bf14      	ite	ne
 8018b30:	2301      	movne	r3, #1
 8018b32:	2300      	moveq	r3, #0
 8018b34:	b2db      	uxtb	r3, r3
 8018b36:	461a      	mov	r2, r3
 8018b38:	683b      	ldr	r3, [r7, #0]
 8018b3a:	f883 2062 	strb.w	r2, [r3, #98]	@ 0x62
            macconf->ForwardRxErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_FEP ) >> 4 ) > 0U ) ? ENABLE : DISABLE;
 8018b3e:	687b      	ldr	r3, [r7, #4]
 8018b40:	681b      	ldr	r3, [r3, #0]
 8018b42:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018b46:	f003 0310 	and.w	r3, r3, #16
 8018b4a:	2b00      	cmp	r3, #0
 8018b4c:	bf14      	ite	ne
 8018b4e:	2301      	movne	r3, #1
 8018b50:	2300      	moveq	r3, #0
 8018b52:	b2db      	uxtb	r3, r3
 8018b54:	461a      	mov	r2, r3
 8018b56:	683b      	ldr	r3, [r7, #0]
 8018b58:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61
            macconf->DropTCPIPChecksumErrorPacket = ( ( READ_BIT( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_DISTCPEF ) >> 6 ) == 0U ) ? ENABLE : DISABLE;
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	681b      	ldr	r3, [r3, #0]
 8018b60:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018b64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8018b68:	2b00      	cmp	r3, #0
 8018b6a:	bf0c      	ite	eq
 8018b6c:	2301      	moveq	r3, #1
 8018b6e:	2300      	movne	r3, #0
 8018b70:	b2db      	uxtb	r3, r3
 8018b72:	461a      	mov	r2, r3
 8018b74:	683b      	ldr	r3, [r7, #0]
 8018b76:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

            return HAL_OK;
 8018b7a:	2300      	movs	r3, #0
        }
 8018b7c:	4618      	mov	r0, r3
 8018b7e:	370c      	adds	r7, #12
 8018b80:	46bd      	mov	sp, r7
 8018b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b86:	4770      	bx	lr

08018b88 <HAL_ETH_SetMACConfig>:
 *         the configuration of the MAC.
 * @retval HAL status
 */
        HAL_StatusTypeDef HAL_ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                                ETH_MACConfigTypeDef * macconf )
        {
 8018b88:	b580      	push	{r7, lr}
 8018b8a:	b082      	sub	sp, #8
 8018b8c:	af00      	add	r7, sp, #0
 8018b8e:	6078      	str	r0, [r7, #4]
 8018b90:	6039      	str	r1, [r7, #0]
            if( macconf == NULL )
 8018b92:	683b      	ldr	r3, [r7, #0]
 8018b94:	2b00      	cmp	r3, #0
 8018b96:	d101      	bne.n	8018b9c <HAL_ETH_SetMACConfig+0x14>
            {
                return HAL_ERROR;
 8018b98:	2301      	movs	r3, #1
 8018b9a:	e00a      	b.n	8018bb2 <HAL_ETH_SetMACConfig+0x2a>
            }

            if( heth->RxState == HAL_ETH_STATE_READY )
 8018b9c:	687b      	ldr	r3, [r7, #4]
 8018b9e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8018ba0:	2b10      	cmp	r3, #16
 8018ba2:	d105      	bne.n	8018bb0 <HAL_ETH_SetMACConfig+0x28>
            {
                ETH_SetMACConfig( heth, macconf );
 8018ba4:	6839      	ldr	r1, [r7, #0]
 8018ba6:	6878      	ldr	r0, [r7, #4]
 8018ba8:	f000 f808 	bl	8018bbc <ETH_SetMACConfig>

                return HAL_OK;
 8018bac:	2300      	movs	r3, #0
 8018bae:	e000      	b.n	8018bb2 <HAL_ETH_SetMACConfig+0x2a>
            }
            else
            {
                return HAL_ERROR;
 8018bb0:	2301      	movs	r3, #1
            }
        }
 8018bb2:	4618      	mov	r0, r3
 8018bb4:	3708      	adds	r7, #8
 8018bb6:	46bd      	mov	sp, r7
 8018bb8:	bd80      	pop	{r7, pc}
	...

08018bbc <ETH_SetMACConfig>:
 * @{
 */

        static void ETH_SetMACConfig( ETH_HandleTypeDef * heth,
                                      ETH_MACConfigTypeDef * macconf )
        {
 8018bbc:	b480      	push	{r7}
 8018bbe:	b085      	sub	sp, #20
 8018bc0:	af00      	add	r7, sp, #0
 8018bc2:	6078      	str	r0, [r7, #4]
 8018bc4:	6039      	str	r1, [r7, #0]
            uint32_t macregval;

            /*------------------------ MACCR Configuration --------------------*/
            macregval = ( macconf->InterPacketGapVal |
 8018bc6:	683b      	ldr	r3, [r7, #0]
 8018bc8:	689a      	ldr	r2, [r3, #8]
                          macconf->SourceAddrControl |
 8018bca:	683b      	ldr	r3, [r7, #0]
 8018bcc:	681b      	ldr	r3, [r3, #0]
            macregval = ( macconf->InterPacketGapVal |
 8018bce:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8018bd0:	683b      	ldr	r3, [r7, #0]
 8018bd2:	791b      	ldrb	r3, [r3, #4]
 8018bd4:	06db      	lsls	r3, r3, #27
                          macconf->SourceAddrControl |
 8018bd6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8018bd8:	683b      	ldr	r3, [r7, #0]
 8018bda:	7b1b      	ldrb	r3, [r3, #12]
 8018bdc:	05db      	lsls	r3, r3, #23
                          ( ( uint32_t ) macconf->ChecksumOffload << 27 ) |
 8018bde:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8018be0:	683b      	ldr	r3, [r7, #0]
 8018be2:	7b5b      	ldrb	r3, [r3, #13]
 8018be4:	059b      	lsls	r3, r3, #22
                          ( ( uint32_t ) macconf->GiantPacketSizeLimitControl << 23 ) |
 8018be6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8018be8:	683b      	ldr	r3, [r7, #0]
 8018bea:	7b9b      	ldrb	r3, [r3, #14]
 8018bec:	055b      	lsls	r3, r3, #21
                          ( ( uint32_t ) macconf->Support2KPacket << 22 ) |
 8018bee:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8018bf0:	683b      	ldr	r3, [r7, #0]
 8018bf2:	7bdb      	ldrb	r3, [r3, #15]
 8018bf4:	051b      	lsls	r3, r3, #20
                          ( ( uint32_t ) macconf->CRCStripTypePacket << 21 ) |
 8018bf6:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8018bf8:	683a      	ldr	r2, [r7, #0]
 8018bfa:	7c12      	ldrb	r2, [r2, #16]
 8018bfc:	2a00      	cmp	r2, #0
 8018bfe:	d102      	bne.n	8018c06 <ETH_SetMACConfig+0x4a>
 8018c00:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8018c04:	e000      	b.n	8018c08 <ETH_SetMACConfig+0x4c>
 8018c06:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->AutomaticPadCRCStrip << 20 ) |
 8018c08:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8018c0a:	683a      	ldr	r2, [r7, #0]
 8018c0c:	7c52      	ldrb	r2, [r2, #17]
 8018c0e:	2a00      	cmp	r2, #0
 8018c10:	d102      	bne.n	8018c18 <ETH_SetMACConfig+0x5c>
 8018c12:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8018c16:	e000      	b.n	8018c1a <ETH_SetMACConfig+0x5e>
 8018c18:	2200      	movs	r2, #0
                          ( ( uint32_t ) ( ( macconf->Watchdog == DISABLE ) ? 1U : 0U ) << 19 ) |
 8018c1a:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8018c1c:	683b      	ldr	r3, [r7, #0]
 8018c1e:	7c9b      	ldrb	r3, [r3, #18]
 8018c20:	041b      	lsls	r3, r3, #16
                          ( ( uint32_t ) ( ( macconf->Jabber == DISABLE ) ? 1U : 0U ) << 17 ) |
 8018c22:	431a      	orrs	r2, r3
                          macconf->Speed |
 8018c24:	683b      	ldr	r3, [r7, #0]
 8018c26:	695b      	ldr	r3, [r3, #20]
                          ( ( uint32_t ) macconf->JumboPacket << 16 ) |
 8018c28:	431a      	orrs	r2, r3
                          macconf->DuplexMode |
 8018c2a:	683b      	ldr	r3, [r7, #0]
 8018c2c:	699b      	ldr	r3, [r3, #24]
                          macconf->Speed |
 8018c2e:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8018c30:	683b      	ldr	r3, [r7, #0]
 8018c32:	7f1b      	ldrb	r3, [r3, #28]
 8018c34:	031b      	lsls	r3, r3, #12
                          macconf->DuplexMode |
 8018c36:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8018c38:	683b      	ldr	r3, [r7, #0]
 8018c3a:	7f5b      	ldrb	r3, [r3, #29]
 8018c3c:	02db      	lsls	r3, r3, #11
                          ( ( uint32_t ) macconf->LoopbackMode << 12 ) |
 8018c3e:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8018c40:	683a      	ldr	r2, [r7, #0]
 8018c42:	7f92      	ldrb	r2, [r2, #30]
 8018c44:	2a00      	cmp	r2, #0
 8018c46:	d102      	bne.n	8018c4e <ETH_SetMACConfig+0x92>
 8018c48:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018c4c:	e000      	b.n	8018c50 <ETH_SetMACConfig+0x94>
 8018c4e:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseBeforeTransmit << 11 ) |
 8018c50:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8018c52:	683b      	ldr	r3, [r7, #0]
 8018c54:	7fdb      	ldrb	r3, [r3, #31]
 8018c56:	025b      	lsls	r3, r3, #9
                          ( ( uint32_t ) ( ( macconf->ReceiveOwn == DISABLE ) ? 1U : 0U ) << 10 ) |
 8018c58:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8018c5a:	683a      	ldr	r2, [r7, #0]
 8018c5c:	f892 2020 	ldrb.w	r2, [r2, #32]
 8018c60:	2a00      	cmp	r2, #0
 8018c62:	d102      	bne.n	8018c6a <ETH_SetMACConfig+0xae>
 8018c64:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018c68:	e000      	b.n	8018c6c <ETH_SetMACConfig+0xb0>
 8018c6a:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->CarrierSenseDuringTransmit << 9 ) |
 8018c6c:	431a      	orrs	r2, r3
                          macconf->BackOffLimit |
 8018c6e:	683b      	ldr	r3, [r7, #0]
 8018c70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                          ( ( uint32_t ) ( ( macconf->RetryTransmission == DISABLE ) ? 1U : 0U ) << 8 ) |
 8018c72:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->DeferralCheck << 4 ) |
 8018c74:	683b      	ldr	r3, [r7, #0]
 8018c76:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8018c7a:	011b      	lsls	r3, r3, #4
                          macconf->BackOffLimit |
 8018c7c:	431a      	orrs	r2, r3
                          macconf->PreambleLength );
 8018c7e:	683b      	ldr	r3, [r7, #0]
 8018c80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
            macregval = ( macconf->InterPacketGapVal |
 8018c82:	4313      	orrs	r3, r2
 8018c84:	60fb      	str	r3, [r7, #12]

            /* Write to MACCR */
            MODIFY_REG( heth->Instance->MACCR, ETH_MACCR_MASK, macregval );
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	681b      	ldr	r3, [r3, #0]
 8018c8a:	681a      	ldr	r2, [r3, #0]
 8018c8c:	4b56      	ldr	r3, [pc, #344]	@ (8018de8 <ETH_SetMACConfig+0x22c>)
 8018c8e:	4013      	ands	r3, r2
 8018c90:	687a      	ldr	r2, [r7, #4]
 8018c92:	6812      	ldr	r2, [r2, #0]
 8018c94:	68f9      	ldr	r1, [r7, #12]
 8018c96:	430b      	orrs	r3, r1
 8018c98:	6013      	str	r3, [r2, #0]

            /*------------------------ MACECR Configuration --------------------*/
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8018c9a:	683b      	ldr	r3, [r7, #0]
 8018c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8018c9e:	065a      	lsls	r2, r3, #25
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8018ca0:	683b      	ldr	r3, [r7, #0]
 8018ca2:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8018ca6:	061b      	lsls	r3, r3, #24
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8018ca8:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 8018caa:	683b      	ldr	r3, [r7, #0]
 8018cac:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018cb0:	049b      	lsls	r3, r3, #18
                          ( ( uint32_t ) macconf->ExtendedInterPacketGap << 24 ) |
 8018cb2:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8018cb4:	683b      	ldr	r3, [r7, #0]
 8018cb6:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018cba:	045b      	lsls	r3, r3, #17
                          ( ( uint32_t ) macconf->UnicastSlowProtocolPacketDetect << 18 ) |
 8018cbc:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->CRCCheckingRxPackets == DISABLE ) ? 1U : 0U ) << 16 ) |
 8018cbe:	683a      	ldr	r2, [r7, #0]
 8018cc0:	f892 2032 	ldrb.w	r2, [r2, #50]	@ 0x32
 8018cc4:	2a00      	cmp	r2, #0
 8018cc6:	d102      	bne.n	8018cce <ETH_SetMACConfig+0x112>
 8018cc8:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8018ccc:	e000      	b.n	8018cd0 <ETH_SetMACConfig+0x114>
 8018cce:	2200      	movs	r2, #0
                          ( ( uint32_t ) macconf->SlowProtocolDetect << 17 ) |
 8018cd0:	431a      	orrs	r2, r3
                          macconf->GiantPacketSizeLimit );
 8018cd2:	683b      	ldr	r3, [r7, #0]
 8018cd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
            macregval = ( ( macconf->ExtendedInterPacketGapVal << 25 ) |
 8018cd6:	4313      	orrs	r3, r2
 8018cd8:	60fb      	str	r3, [r7, #12]

            /* Write to MACECR */
            MODIFY_REG( heth->Instance->MACECR, ETH_MACECR_MASK, macregval );
 8018cda:	687b      	ldr	r3, [r7, #4]
 8018cdc:	681b      	ldr	r3, [r3, #0]
 8018cde:	685a      	ldr	r2, [r3, #4]
 8018ce0:	4b42      	ldr	r3, [pc, #264]	@ (8018dec <ETH_SetMACConfig+0x230>)
 8018ce2:	4013      	ands	r3, r2
 8018ce4:	687a      	ldr	r2, [r7, #4]
 8018ce6:	6812      	ldr	r2, [r2, #0]
 8018ce8:	68f9      	ldr	r1, [r7, #12]
 8018cea:	430b      	orrs	r3, r1
 8018cec:	6053      	str	r3, [r2, #4]

            /*------------------------ MACWTR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 8018cee:	683b      	ldr	r3, [r7, #0]
 8018cf0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8018cf4:	021a      	lsls	r2, r3, #8
                          macconf->WatchdogTimeout );
 8018cf6:	683b      	ldr	r3, [r7, #0]
 8018cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
            macregval = ( ( ( uint32_t ) macconf->ProgrammableWatchdog << 8 ) |
 8018cfa:	4313      	orrs	r3, r2
 8018cfc:	60fb      	str	r3, [r7, #12]

            /* Write to MACWTR */
            MODIFY_REG( heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval );
 8018cfe:	687b      	ldr	r3, [r7, #4]
 8018d00:	681b      	ldr	r3, [r3, #0]
 8018d02:	68da      	ldr	r2, [r3, #12]
 8018d04:	4b3a      	ldr	r3, [pc, #232]	@ (8018df0 <ETH_SetMACConfig+0x234>)
 8018d06:	4013      	ands	r3, r2
 8018d08:	687a      	ldr	r2, [r7, #4]
 8018d0a:	6812      	ldr	r2, [r2, #0]
 8018d0c:	68f9      	ldr	r1, [r7, #12]
 8018d0e:	430b      	orrs	r3, r1
 8018d10:	60d3      	str	r3, [r2, #12]

            /*------------------------ MACTFCR Configuration --------------------*/
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8018d12:	683b      	ldr	r3, [r7, #0]
 8018d14:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8018d18:	005a      	lsls	r2, r3, #1
                          macconf->PauseLowThreshold |
 8018d1a:	683b      	ldr	r3, [r7, #0]
 8018d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8018d1e:	4313      	orrs	r3, r2
                          ( ( uint32_t ) ( ( macconf->ZeroQuantaPause == DISABLE ) ? 1U : 0U ) << 7 ) |
 8018d20:	683a      	ldr	r2, [r7, #0]
 8018d22:	f892 204c 	ldrb.w	r2, [r2, #76]	@ 0x4c
 8018d26:	2a00      	cmp	r2, #0
 8018d28:	d101      	bne.n	8018d2e <ETH_SetMACConfig+0x172>
 8018d2a:	2280      	movs	r2, #128	@ 0x80
 8018d2c:	e000      	b.n	8018d30 <ETH_SetMACConfig+0x174>
 8018d2e:	2200      	movs	r2, #0
                          macconf->PauseLowThreshold |
 8018d30:	431a      	orrs	r2, r3
                          ( macconf->PauseTime << 16 ) );
 8018d32:	683b      	ldr	r3, [r7, #0]
 8018d34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8018d36:	041b      	lsls	r3, r3, #16
            macregval = ( ( ( uint32_t ) macconf->TransmitFlowControl << 1 ) |
 8018d38:	4313      	orrs	r3, r2
 8018d3a:	60fb      	str	r3, [r7, #12]

            /* Write to MACTFCR */
            MODIFY_REG( heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval );
 8018d3c:	687b      	ldr	r3, [r7, #4]
 8018d3e:	681b      	ldr	r3, [r3, #0]
 8018d40:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8018d42:	f64f 730d 	movw	r3, #65293	@ 0xff0d
 8018d46:	4013      	ands	r3, r2
 8018d48:	687a      	ldr	r2, [r7, #4]
 8018d4a:	6812      	ldr	r2, [r2, #0]
 8018d4c:	68f9      	ldr	r1, [r7, #12]
 8018d4e:	430b      	orrs	r3, r1
 8018d50:	6713      	str	r3, [r2, #112]	@ 0x70

            /*------------------------ MACRFCR Configuration --------------------*/
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8018d52:	683b      	ldr	r3, [r7, #0]
 8018d54:	f893 3056 	ldrb.w	r3, [r3, #86]	@ 0x56
 8018d58:	461a      	mov	r2, r3
                          ( ( uint32_t ) macconf->UnicastPausePacketDetect << 1 ) );
 8018d5a:	683b      	ldr	r3, [r7, #0]
 8018d5c:	f893 3055 	ldrb.w	r3, [r3, #85]	@ 0x55
 8018d60:	005b      	lsls	r3, r3, #1
            macregval = ( ( uint32_t ) macconf->ReceiveFlowControl |
 8018d62:	4313      	orrs	r3, r2
 8018d64:	60fb      	str	r3, [r7, #12]

            /* Write to MACRFCR */
            MODIFY_REG( heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval );
 8018d66:	687b      	ldr	r3, [r7, #4]
 8018d68:	681b      	ldr	r3, [r3, #0]
 8018d6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018d6e:	f023 0103 	bic.w	r1, r3, #3
 8018d72:	687b      	ldr	r3, [r7, #4]
 8018d74:	681b      	ldr	r3, [r3, #0]
 8018d76:	68fa      	ldr	r2, [r7, #12]
 8018d78:	430a      	orrs	r2, r1
 8018d7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

            /*------------------------ MTLTQOMR Configuration --------------------*/
            /* Write to MTLTQOMR */
            MODIFY_REG( heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode );
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	681b      	ldr	r3, [r3, #0]
 8018d82:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	@ 0xd00
 8018d86:	f023 0172 	bic.w	r1, r3, #114	@ 0x72
 8018d8a:	683b      	ldr	r3, [r7, #0]
 8018d8c:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 8018d8e:	687b      	ldr	r3, [r7, #4]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	430a      	orrs	r2, r1
 8018d94:	f8c3 2d00 	str.w	r2, [r3, #3328]	@ 0xd00

            /*------------------------ MTLRQOMR Configuration --------------------*/
            macregval = ( macconf->ReceiveQueueMode |
 8018d98:	683b      	ldr	r3, [r7, #0]
 8018d9a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8018d9c:	683a      	ldr	r2, [r7, #0]
 8018d9e:	f892 2060 	ldrb.w	r2, [r2, #96]	@ 0x60
 8018da2:	2a00      	cmp	r2, #0
 8018da4:	d101      	bne.n	8018daa <ETH_SetMACConfig+0x1ee>
 8018da6:	2240      	movs	r2, #64	@ 0x40
 8018da8:	e000      	b.n	8018dac <ETH_SetMACConfig+0x1f0>
 8018daa:	2200      	movs	r2, #0
            macregval = ( macconf->ReceiveQueueMode |
 8018dac:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxErrorPacket << 4 ) |
 8018dae:	683b      	ldr	r3, [r7, #0]
 8018db0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8018db4:	011b      	lsls	r3, r3, #4
                          ( ( uint32_t ) ( ( macconf->DropTCPIPChecksumErrorPacket == DISABLE ) ? 1U : 0U ) << 6 ) |
 8018db6:	431a      	orrs	r2, r3
                          ( ( uint32_t ) macconf->ForwardRxUndersizedGoodPacket << 3 ) );
 8018db8:	683b      	ldr	r3, [r7, #0]
 8018dba:	f893 3062 	ldrb.w	r3, [r3, #98]	@ 0x62
 8018dbe:	00db      	lsls	r3, r3, #3
            macregval = ( macconf->ReceiveQueueMode |
 8018dc0:	4313      	orrs	r3, r2
 8018dc2:	60fb      	str	r3, [r7, #12]

            /* Write to MTLRQOMR */
            MODIFY_REG( heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval );
 8018dc4:	687b      	ldr	r3, [r7, #4]
 8018dc6:	681b      	ldr	r3, [r3, #0]
 8018dc8:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	@ 0xd30
 8018dcc:	f023 017b 	bic.w	r1, r3, #123	@ 0x7b
 8018dd0:	687b      	ldr	r3, [r7, #4]
 8018dd2:	681b      	ldr	r3, [r3, #0]
 8018dd4:	68fa      	ldr	r2, [r7, #12]
 8018dd6:	430a      	orrs	r2, r1
 8018dd8:	f8c3 2d30 	str.w	r2, [r3, #3376]	@ 0xd30
        }
 8018ddc:	bf00      	nop
 8018dde:	3714      	adds	r7, #20
 8018de0:	46bd      	mov	sp, r7
 8018de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018de6:	4770      	bx	lr
 8018de8:	00048083 	.word	0x00048083
 8018dec:	c0f88000 	.word	0xc0f88000
 8018df0:	fffffef0 	.word	0xfffffef0

08018df4 <ETH_SetDMAConfig>:

        static void ETH_SetDMAConfig( ETH_HandleTypeDef * heth,
                                      ETH_DMAConfigTypeDef * dmaconf )
        {
 8018df4:	b480      	push	{r7}
 8018df6:	b085      	sub	sp, #20
 8018df8:	af00      	add	r7, sp, #0
 8018dfa:	6078      	str	r0, [r7, #4]
 8018dfc:	6039      	str	r1, [r7, #0]
            uint32_t dmaregval;

            /*------------------------ DMAMR Configuration --------------------*/
            MODIFY_REG( heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration );
 8018dfe:	687b      	ldr	r3, [r7, #4]
 8018e00:	681b      	ldr	r3, [r3, #0]
 8018e02:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e06:	681a      	ldr	r2, [r3, #0]
 8018e08:	4b38      	ldr	r3, [pc, #224]	@ (8018eec <ETH_SetDMAConfig+0xf8>)
 8018e0a:	4013      	ands	r3, r2
 8018e0c:	683a      	ldr	r2, [r7, #0]
 8018e0e:	6811      	ldr	r1, [r2, #0]
 8018e10:	687a      	ldr	r2, [r7, #4]
 8018e12:	6812      	ldr	r2, [r2, #0]
 8018e14:	430b      	orrs	r3, r1
 8018e16:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018e1a:	6013      	str	r3, [r2, #0]

            /*------------------------ DMASBMR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8018e1c:	683b      	ldr	r3, [r7, #0]
 8018e1e:	791b      	ldrb	r3, [r3, #4]
 8018e20:	031a      	lsls	r2, r3, #12
                          dmaconf->BurstMode |
 8018e22:	683b      	ldr	r3, [r7, #0]
 8018e24:	689b      	ldr	r3, [r3, #8]
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8018e26:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->RebuildINCRxBurst << 15 ) );
 8018e28:	683b      	ldr	r3, [r7, #0]
 8018e2a:	7b1b      	ldrb	r3, [r3, #12]
 8018e2c:	03db      	lsls	r3, r3, #15
            dmaregval = ( ( ( uint32_t ) dmaconf->AddressAlignedBeats << 12 ) |
 8018e2e:	4313      	orrs	r3, r2
 8018e30:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval );
 8018e32:	687b      	ldr	r3, [r7, #4]
 8018e34:	681b      	ldr	r3, [r3, #0]
 8018e36:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e3a:	685a      	ldr	r2, [r3, #4]
 8018e3c:	4b2c      	ldr	r3, [pc, #176]	@ (8018ef0 <ETH_SetDMAConfig+0xfc>)
 8018e3e:	4013      	ands	r3, r2
 8018e40:	687a      	ldr	r2, [r7, #4]
 8018e42:	6812      	ldr	r2, [r2, #0]
 8018e44:	68f9      	ldr	r1, [r7, #12]
 8018e46:	430b      	orrs	r3, r1
 8018e48:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018e4c:	6053      	str	r3, [r2, #4]

            /*------------------------ DMACCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8018e4e:	683b      	ldr	r3, [r7, #0]
 8018e50:	7b5b      	ldrb	r3, [r3, #13]
 8018e52:	041a      	lsls	r2, r3, #16
                          dmaconf->MaximumSegmentSize );
 8018e54:	683b      	ldr	r3, [r7, #0]
 8018e56:	6a1b      	ldr	r3, [r3, #32]
            dmaregval = ( ( ( uint32_t ) dmaconf->PBLx8Mode << 16 ) |
 8018e58:	4313      	orrs	r3, r2
 8018e5a:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval );
 8018e5c:	687b      	ldr	r3, [r7, #4]
 8018e5e:	681b      	ldr	r3, [r3, #0]
 8018e60:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e64:	f8d3 2100 	ldr.w	r2, [r3, #256]	@ 0x100
 8018e68:	4b22      	ldr	r3, [pc, #136]	@ (8018ef4 <ETH_SetDMAConfig+0x100>)
 8018e6a:	4013      	ands	r3, r2
 8018e6c:	687a      	ldr	r2, [r7, #4]
 8018e6e:	6812      	ldr	r2, [r2, #0]
 8018e70:	68f9      	ldr	r1, [r7, #12]
 8018e72:	430b      	orrs	r3, r1
 8018e74:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018e78:	f8c2 3100 	str.w	r3, [r2, #256]	@ 0x100

            /*------------------------ DMACTCR Configuration --------------------*/
            dmaregval = ( dmaconf->TxDMABurstLength |
 8018e7c:	683b      	ldr	r3, [r7, #0]
 8018e7e:	691a      	ldr	r2, [r3, #16]
                          ( ( uint32_t ) dmaconf->SecondPacketOperate << 4 ) |
 8018e80:	683b      	ldr	r3, [r7, #0]
 8018e82:	7d1b      	ldrb	r3, [r3, #20]
 8018e84:	011b      	lsls	r3, r3, #4
            dmaregval = ( dmaconf->TxDMABurstLength |
 8018e86:	431a      	orrs	r2, r3
                          ( ( uint32_t ) dmaconf->TCPSegmentation << 12 ) );
 8018e88:	683b      	ldr	r3, [r7, #0]
 8018e8a:	7f5b      	ldrb	r3, [r3, #29]
 8018e8c:	031b      	lsls	r3, r3, #12
            dmaregval = ( dmaconf->TxDMABurstLength |
 8018e8e:	4313      	orrs	r3, r2
 8018e90:	60fb      	str	r3, [r7, #12]

            MODIFY_REG( heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval );
 8018e92:	687b      	ldr	r3, [r7, #4]
 8018e94:	681b      	ldr	r3, [r3, #0]
 8018e96:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018e9a:	f8d3 2104 	ldr.w	r2, [r3, #260]	@ 0x104
 8018e9e:	4b16      	ldr	r3, [pc, #88]	@ (8018ef8 <ETH_SetDMAConfig+0x104>)
 8018ea0:	4013      	ands	r3, r2
 8018ea2:	687a      	ldr	r2, [r7, #4]
 8018ea4:	6812      	ldr	r2, [r2, #0]
 8018ea6:	68f9      	ldr	r1, [r7, #12]
 8018ea8:	430b      	orrs	r3, r1
 8018eaa:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018eae:	f8c2 3104 	str.w	r3, [r2, #260]	@ 0x104

            /*------------------------ DMACRCR Configuration --------------------*/
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8018eb2:	683b      	ldr	r3, [r7, #0]
 8018eb4:	7f1b      	ldrb	r3, [r3, #28]
 8018eb6:	07da      	lsls	r2, r3, #31
                          dmaconf->RxDMABurstLength );
 8018eb8:	683b      	ldr	r3, [r7, #0]
 8018eba:	699b      	ldr	r3, [r3, #24]
            dmaregval = ( ( ( uint32_t ) dmaconf->FlushRxPacket << 31 ) |
 8018ebc:	4313      	orrs	r3, r2
 8018ebe:	60fb      	str	r3, [r7, #12]

            /* Write to DMACRCR */
            MODIFY_REG( heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval );
 8018ec0:	687b      	ldr	r3, [r7, #4]
 8018ec2:	681b      	ldr	r3, [r3, #0]
 8018ec4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8018ec8:	f8d3 2108 	ldr.w	r2, [r3, #264]	@ 0x108
 8018ecc:	4b0b      	ldr	r3, [pc, #44]	@ (8018efc <ETH_SetDMAConfig+0x108>)
 8018ece:	4013      	ands	r3, r2
 8018ed0:	687a      	ldr	r2, [r7, #4]
 8018ed2:	6812      	ldr	r2, [r2, #0]
 8018ed4:	68f9      	ldr	r1, [r7, #12]
 8018ed6:	430b      	orrs	r3, r1
 8018ed8:	f502 5280 	add.w	r2, r2, #4096	@ 0x1000
 8018edc:	f8c2 3108 	str.w	r3, [r2, #264]	@ 0x108
        }
 8018ee0:	bf00      	nop
 8018ee2:	3714      	adds	r7, #20
 8018ee4:	46bd      	mov	sp, r7
 8018ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eea:	4770      	bx	lr
 8018eec:	ffff87fd 	.word	0xffff87fd
 8018ef0:	ffff2ffe 	.word	0xffff2ffe
 8018ef4:	fffec000 	.word	0xfffec000
 8018ef8:	ffc0efef 	.word	0xffc0efef
 8018efc:	7fc0ffff 	.word	0x7fc0ffff

08018f00 <ETH_MACDMAConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval HAL status
 */
        static void ETH_MACDMAConfig( ETH_HandleTypeDef * heth )
        {
 8018f00:	b580      	push	{r7, lr}
 8018f02:	b0a4      	sub	sp, #144	@ 0x90
 8018f04:	af00      	add	r7, sp, #0
 8018f06:	6078      	str	r0, [r7, #4]
            ETH_MACConfigTypeDef macDefaultConf;
            ETH_DMAConfigTypeDef dmaDefaultConf;

            /*--------------- ETHERNET MAC registers default Configuration --------------*/
            macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8018f08:	2301      	movs	r3, #1
 8018f0a:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
            macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8018f0e:	2300      	movs	r3, #0
 8018f10:	653b      	str	r3, [r7, #80]	@ 0x50
            macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8018f12:	2300      	movs	r3, #0
 8018f14:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
            macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8018f18:	2300      	movs	r3, #0
 8018f1a:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
            macDefaultConf.ChecksumOffload = ENABLE;
 8018f1e:	2301      	movs	r3, #1
 8018f20:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
            macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8018f24:	2301      	movs	r3, #1
 8018f26:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
            macDefaultConf.CRCStripTypePacket = ENABLE;
 8018f2a:	2301      	movs	r3, #1
 8018f2c:	f887 303a 	strb.w	r3, [r7, #58]	@ 0x3a
            macDefaultConf.DeferralCheck = DISABLE;
 8018f30:	2300      	movs	r3, #0
 8018f32:	f887 3054 	strb.w	r3, [r7, #84]	@ 0x54
            macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8018f36:	2301      	movs	r3, #1
 8018f38:	f887 308c 	strb.w	r3, [r7, #140]	@ 0x8c
            macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8018f3c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8018f40:	647b      	str	r3, [r7, #68]	@ 0x44
            macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8018f42:	2300      	movs	r3, #0
 8018f44:	f887 3064 	strb.w	r3, [r7, #100]	@ 0x64
            macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8018f48:	2300      	movs	r3, #0
 8018f4a:	66bb      	str	r3, [r7, #104]	@ 0x68
            macDefaultConf.ForwardRxErrorPacket = DISABLE;
 8018f4c:	2300      	movs	r3, #0
 8018f4e:	f887 308d 	strb.w	r3, [r7, #141]	@ 0x8d
            macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8018f52:	2300      	movs	r3, #0
 8018f54:	f887 308e 	strb.w	r3, [r7, #142]	@ 0x8e
            macDefaultConf.GiantPacketSizeLimit = 0x618;
 8018f58:	f44f 63c3 	mov.w	r3, #1560	@ 0x618
 8018f5c:	663b      	str	r3, [r7, #96]	@ 0x60
            macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8018f5e:	2300      	movs	r3, #0
 8018f60:	f887 3038 	strb.w	r3, [r7, #56]	@ 0x38
            macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8018f64:	2300      	movs	r3, #0
 8018f66:	637b      	str	r3, [r7, #52]	@ 0x34
            macDefaultConf.Jabber = ENABLE;
 8018f68:	2301      	movs	r3, #1
 8018f6a:	f887 303d 	strb.w	r3, [r7, #61]	@ 0x3d
            macDefaultConf.JumboPacket = DISABLE;
 8018f6e:	2300      	movs	r3, #0
 8018f70:	f887 303e 	strb.w	r3, [r7, #62]	@ 0x3e
            macDefaultConf.LoopbackMode = DISABLE;
 8018f74:	2300      	movs	r3, #0
 8018f76:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
            macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 8018f7a:	2300      	movs	r3, #0
 8018f7c:	67fb      	str	r3, [r7, #124]	@ 0x7c
            macDefaultConf.PauseTime = 0x0;
 8018f7e:	2300      	movs	r3, #0
 8018f80:	677b      	str	r3, [r7, #116]	@ 0x74
            macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8018f82:	2300      	movs	r3, #0
 8018f84:	65bb      	str	r3, [r7, #88]	@ 0x58
            macDefaultConf.ProgrammableWatchdog = DISABLE;
 8018f86:	2300      	movs	r3, #0
 8018f88:	f887 306c 	strb.w	r3, [r7, #108]	@ 0x6c
            macDefaultConf.ReceiveFlowControl = DISABLE;
 8018f8c:	2300      	movs	r3, #0
 8018f8e:	f887 3082 	strb.w	r3, [r7, #130]	@ 0x82
            macDefaultConf.ReceiveOwn = ENABLE;
 8018f92:	2301      	movs	r3, #1
 8018f94:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
            macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 8018f98:	2320      	movs	r3, #32
 8018f9a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
            macDefaultConf.RetryTransmission = ENABLE;
 8018f9e:	2301      	movs	r3, #1
 8018fa0:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
            macDefaultConf.SlowProtocolDetect = DISABLE;
 8018fa4:	2300      	movs	r3, #0
 8018fa6:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
            macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 8018faa:	f04f 5340 	mov.w	r3, #805306368	@ 0x30000000
 8018fae:	62fb      	str	r3, [r7, #44]	@ 0x2c
            macDefaultConf.Speed = ETH_SPEED_100M;
 8018fb0:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8018fb4:	643b      	str	r3, [r7, #64]	@ 0x40
            macDefaultConf.Support2KPacket = DISABLE;
 8018fb6:	2300      	movs	r3, #0
 8018fb8:	f887 3039 	strb.w	r3, [r7, #57]	@ 0x39
            macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8018fbc:	2302      	movs	r3, #2
 8018fbe:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
            macDefaultConf.TransmitFlowControl = DISABLE;
 8018fc2:	2300      	movs	r3, #0
 8018fc4:	f887 3080 	strb.w	r3, [r7, #128]	@ 0x80
            macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8018fc8:	2300      	movs	r3, #0
 8018fca:	f887 3081 	strb.w	r3, [r7, #129]	@ 0x81
            macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8018fce:	2300      	movs	r3, #0
 8018fd0:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c
            macDefaultConf.Watchdog = ENABLE;
 8018fd4:	2301      	movs	r3, #1
 8018fd6:	f887 303c 	strb.w	r3, [r7, #60]	@ 0x3c
            macDefaultConf.WatchdogTimeout = ETH_MACWTR_WTO_2KB;
 8018fda:	2300      	movs	r3, #0
 8018fdc:	673b      	str	r3, [r7, #112]	@ 0x70
            macDefaultConf.ZeroQuantaPause = ENABLE;
 8018fde:	2301      	movs	r3, #1
 8018fe0:	f887 3078 	strb.w	r3, [r7, #120]	@ 0x78

            /* MAC default configuration */
            ETH_SetMACConfig( heth, &macDefaultConf );
 8018fe4:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8018fe8:	4619      	mov	r1, r3
 8018fea:	6878      	ldr	r0, [r7, #4]
 8018fec:	f7ff fde6 	bl	8018bbc <ETH_SetMACConfig>

            /*--------------- ETHERNET DMA registers default Configuration --------------*/
            dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8018ff0:	2301      	movs	r3, #1
 8018ff2:	733b      	strb	r3, [r7, #12]
            dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8018ff4:	2301      	movs	r3, #1
 8018ff6:	613b      	str	r3, [r7, #16]
            dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8018ff8:	2300      	movs	r3, #0
 8018ffa:	60bb      	str	r3, [r7, #8]
            dmaDefaultConf.FlushRxPacket = DISABLE;
 8018ffc:	2300      	movs	r3, #0
 8018ffe:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
            dmaDefaultConf.PBLx8Mode = DISABLE;
 8019002:	2300      	movs	r3, #0
 8019004:	757b      	strb	r3, [r7, #21]
            dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8019006:	2300      	movs	r3, #0
 8019008:	753b      	strb	r3, [r7, #20]
            dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 801900a:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 801900e:	623b      	str	r3, [r7, #32]
            dmaDefaultConf.SecondPacketOperate = DISABLE;
 8019010:	2300      	movs	r3, #0
 8019012:	773b      	strb	r3, [r7, #28]
            dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8019014:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8019018:	61bb      	str	r3, [r7, #24]
            dmaDefaultConf.TCPSegmentation = DISABLE;
 801901a:	2300      	movs	r3, #0
 801901c:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
            dmaDefaultConf.MaximumSegmentSize = 536;
 8019020:	f44f 7306 	mov.w	r3, #536	@ 0x218
 8019024:	62bb      	str	r3, [r7, #40]	@ 0x28

            /* DMA default configuration */
            ETH_SetDMAConfig( heth, &dmaDefaultConf );
 8019026:	f107 0308 	add.w	r3, r7, #8
 801902a:	4619      	mov	r1, r3
 801902c:	6878      	ldr	r0, [r7, #4]
 801902e:	f7ff fee1 	bl	8018df4 <ETH_SetDMAConfig>
        }
 8019032:	bf00      	nop
 8019034:	3790      	adds	r7, #144	@ 0x90
 8019036:	46bd      	mov	sp, r7
 8019038:	bd80      	pop	{r7, pc}
	...

0801903c <ETH_MAC_MDIO_ClkConfig>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_MAC_MDIO_ClkConfig( ETH_HandleTypeDef * heth )
        {
 801903c:	b580      	push	{r7, lr}
 801903e:	b084      	sub	sp, #16
 8019040:	af00      	add	r7, sp, #0
 8019042:	6078      	str	r0, [r7, #4]
            uint32_t tmpreg, hclk;

            /* Get the ETHERNET MACMDIOAR value */
            tmpreg = ( heth->Instance )->MACMDIOAR;
 8019044:	687b      	ldr	r3, [r7, #4]
 8019046:	681b      	ldr	r3, [r3, #0]
 8019048:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 801904c:	60fb      	str	r3, [r7, #12]

            /* Clear CSR Clock Range bits */
            tmpreg &= ~ETH_MACMDIOAR_CR;
 801904e:	68fb      	ldr	r3, [r7, #12]
 8019050:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8019054:	60fb      	str	r3, [r7, #12]

            /* Get hclk frequency value */
            hclk = HAL_RCC_GetHCLKFreq();
 8019056:	f003 fdf1 	bl	801cc3c <HAL_RCC_GetHCLKFreq>
 801905a:	60b8      	str	r0, [r7, #8]

            /* Set CR bits depending on hclk value */
            if( ( hclk >= 20000000U ) && ( hclk < 35000000U ) )
 801905c:	68bb      	ldr	r3, [r7, #8]
 801905e:	4a1e      	ldr	r2, [pc, #120]	@ (80190d8 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 8019060:	4293      	cmp	r3, r2
 8019062:	d908      	bls.n	8019076 <ETH_MAC_MDIO_ClkConfig+0x3a>
 8019064:	68bb      	ldr	r3, [r7, #8]
 8019066:	4a1d      	ldr	r2, [pc, #116]	@ (80190dc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 8019068:	4293      	cmp	r3, r2
 801906a:	d804      	bhi.n	8019076 <ETH_MAC_MDIO_ClkConfig+0x3a>
            {
                /* CSR Clock Range between 20-35 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV16;
 801906c:	68fb      	ldr	r3, [r7, #12]
 801906e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8019072:	60fb      	str	r3, [r7, #12]
 8019074:	e027      	b.n	80190c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 35000000U ) && ( hclk < 60000000U ) )
 8019076:	68bb      	ldr	r3, [r7, #8]
 8019078:	4a18      	ldr	r2, [pc, #96]	@ (80190dc <ETH_MAC_MDIO_ClkConfig+0xa0>)
 801907a:	4293      	cmp	r3, r2
 801907c:	d908      	bls.n	8019090 <ETH_MAC_MDIO_ClkConfig+0x54>
 801907e:	68bb      	ldr	r3, [r7, #8]
 8019080:	4a17      	ldr	r2, [pc, #92]	@ (80190e0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019082:	4293      	cmp	r3, r2
 8019084:	d204      	bcs.n	8019090 <ETH_MAC_MDIO_ClkConfig+0x54>
            {
                /* CSR Clock Range between 35-60 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV26;
 8019086:	68fb      	ldr	r3, [r7, #12]
 8019088:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 801908c:	60fb      	str	r3, [r7, #12]
 801908e:	e01a      	b.n	80190c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else if( ( hclk >= 60000000U ) && ( hclk < 100000000U ) )
 8019090:	68bb      	ldr	r3, [r7, #8]
 8019092:	4a13      	ldr	r2, [pc, #76]	@ (80190e0 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 8019094:	4293      	cmp	r3, r2
 8019096:	d303      	bcc.n	80190a0 <ETH_MAC_MDIO_ClkConfig+0x64>
 8019098:	68bb      	ldr	r3, [r7, #8]
 801909a:	4a12      	ldr	r2, [pc, #72]	@ (80190e4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 801909c:	4293      	cmp	r3, r2
 801909e:	d911      	bls.n	80190c4 <ETH_MAC_MDIO_ClkConfig+0x88>
            {
                /* CSR Clock Range between 60-100 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
            }
            else if( ( hclk >= 100000000U ) && ( hclk < 150000000U ) )
 80190a0:	68bb      	ldr	r3, [r7, #8]
 80190a2:	4a10      	ldr	r2, [pc, #64]	@ (80190e4 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80190a4:	4293      	cmp	r3, r2
 80190a6:	d908      	bls.n	80190ba <ETH_MAC_MDIO_ClkConfig+0x7e>
 80190a8:	68bb      	ldr	r3, [r7, #8]
 80190aa:	4a0f      	ldr	r2, [pc, #60]	@ (80190e8 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80190ac:	4293      	cmp	r3, r2
 80190ae:	d804      	bhi.n	80190ba <ETH_MAC_MDIO_ClkConfig+0x7e>
            {
                /* CSR Clock Range between 100-150 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV62;
 80190b0:	68fb      	ldr	r3, [r7, #12]
 80190b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80190b6:	60fb      	str	r3, [r7, #12]
 80190b8:	e005      	b.n	80190c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
            }
            else /* (hclk >= 150000000)&&(hclk <= 200000000) */
            {
                /* CSR Clock Range between 150-200 MHz */
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV102;
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80190c0:	60fb      	str	r3, [r7, #12]
 80190c2:	e000      	b.n	80190c6 <ETH_MAC_MDIO_ClkConfig+0x8a>
                tmpreg |= ( uint32_t ) ETH_MACMDIOAR_CR_DIV42;
 80190c4:	bf00      	nop
            }

            /* Configure the CSR Clock Range */
            ( heth->Instance )->MACMDIOAR = ( uint32_t ) tmpreg;
 80190c6:	687b      	ldr	r3, [r7, #4]
 80190c8:	681b      	ldr	r3, [r3, #0]
 80190ca:	68fa      	ldr	r2, [r7, #12]
 80190cc:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
        }
 80190d0:	bf00      	nop
 80190d2:	3710      	adds	r7, #16
 80190d4:	46bd      	mov	sp, r7
 80190d6:	bd80      	pop	{r7, pc}
 80190d8:	01312cff 	.word	0x01312cff
 80190dc:	02160ebf 	.word	0x02160ebf
 80190e0:	03938700 	.word	0x03938700
 80190e4:	05f5e0ff 	.word	0x05f5e0ff
 80190e8:	08f0d17f 	.word	0x08f0d17f

080190ec <ETH_DMATxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMATxDescListInit( ETH_HandleTypeDef * heth )
        {
 80190ec:	b480      	push	{r7}
 80190ee:	b085      	sub	sp, #20
 80190f0:	af00      	add	r7, sp, #0
 80190f2:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmatxdesc;
            uint32_t i;

            /* Fill each DMATxDesc descriptor with the right values */
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 80190f4:	2300      	movs	r3, #0
 80190f6:	60fb      	str	r3, [r7, #12]
 80190f8:	e01d      	b.n	8019136 <ETH_DMATxDescListInit+0x4a>
            {
                dmatxdesc = heth->Init.TxDesc + i;
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	68d9      	ldr	r1, [r3, #12]
 80190fe:	68fa      	ldr	r2, [r7, #12]
 8019100:	4613      	mov	r3, r2
 8019102:	005b      	lsls	r3, r3, #1
 8019104:	4413      	add	r3, r2
 8019106:	00db      	lsls	r3, r3, #3
 8019108:	440b      	add	r3, r1
 801910a:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmatxdesc->DESC0, 0x0 );
 801910c:	68bb      	ldr	r3, [r7, #8]
 801910e:	2200      	movs	r2, #0
 8019110:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8019112:	68bb      	ldr	r3, [r7, #8]
 8019114:	2200      	movs	r2, #0
 8019116:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmatxdesc->DESC2, 0x0 );
 8019118:	68bb      	ldr	r3, [r7, #8]
 801911a:	2200      	movs	r2, #0
 801911c:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmatxdesc->DESC3, 0x0 );
 801911e:	68bb      	ldr	r3, [r7, #8]
 8019120:	2200      	movs	r2, #0
 8019122:	60da      	str	r2, [r3, #12]

                WRITE_REG( heth->TxDescList.TxDesc[ i ], ( uint32_t ) dmatxdesc );
 8019124:	68b9      	ldr	r1, [r7, #8]
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	68fa      	ldr	r2, [r7, #12]
 801912a:	3206      	adds	r2, #6
 801912c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_TX_DESC_CNT; i++ )
 8019130:	68fb      	ldr	r3, [r7, #12]
 8019132:	3301      	adds	r3, #1
 8019134:	60fb      	str	r3, [r7, #12]
 8019136:	68fb      	ldr	r3, [r7, #12]
 8019138:	2b03      	cmp	r3, #3
 801913a:	d9de      	bls.n	80190fa <ETH_DMATxDescListInit+0xe>
            }

            heth->TxDescList.CurTxDesc = 0;
 801913c:	687b      	ldr	r3, [r7, #4]
 801913e:	2200      	movs	r2, #0
 8019140:	629a      	str	r2, [r3, #40]	@ 0x28
            heth->TxDescList.TailTxDesc = 0;
 8019142:	687b      	ldr	r3, [r7, #4]
 8019144:	2200      	movs	r2, #0
 8019146:	62da      	str	r2, [r3, #44]	@ 0x2c

            /* Set Transmit Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACTDRLR, ( ETH_TX_DESC_CNT - 1 ) );
 8019148:	687b      	ldr	r3, [r7, #4]
 801914a:	681b      	ldr	r3, [r3, #0]
 801914c:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019150:	461a      	mov	r2, r3
 8019152:	2303      	movs	r3, #3
 8019154:	f8c2 312c 	str.w	r3, [r2, #300]	@ 0x12c

            /* Set Transmit Descriptor List Address */
            /* Channel Tx descriptor list address register (ETH_DMACTXDLAR)). */
            WRITE_REG( heth->Instance->DMACTDLAR, ( uint32_t ) heth->Init.TxDesc );
 8019158:	687b      	ldr	r3, [r7, #4]
 801915a:	68da      	ldr	r2, [r3, #12]
 801915c:	687b      	ldr	r3, [r7, #4]
 801915e:	681b      	ldr	r3, [r3, #0]
 8019160:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019164:	f8c3 2114 	str.w	r2, [r3, #276]	@ 0x114

            /* Set Transmit Descriptor Tail pointer */
            WRITE_REG( heth->Instance->DMACTDTPR, ( uint32_t ) heth->Init.TxDesc );
 8019168:	687b      	ldr	r3, [r7, #4]
 801916a:	68da      	ldr	r2, [r3, #12]
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	681b      	ldr	r3, [r3, #0]
 8019170:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019174:	f8c3 2120 	str.w	r2, [r3, #288]	@ 0x120
        }
 8019178:	bf00      	nop
 801917a:	3714      	adds	r7, #20
 801917c:	46bd      	mov	sp, r7
 801917e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019182:	4770      	bx	lr

08019184 <ETH_DMARxDescListInit>:
 * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
 *         the configuration information for ETHERNET module
 * @retval None
 */
        static void ETH_DMARxDescListInit( ETH_HandleTypeDef * heth )
        {
 8019184:	b480      	push	{r7}
 8019186:	b085      	sub	sp, #20
 8019188:	af00      	add	r7, sp, #0
 801918a:	6078      	str	r0, [r7, #4]
            ETH_DMADescTypeDef * dmarxdesc;
            uint32_t i;

            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 801918c:	2300      	movs	r3, #0
 801918e:	60fb      	str	r3, [r7, #12]
 8019190:	e023      	b.n	80191da <ETH_DMARxDescListInit+0x56>
            {
                dmarxdesc = heth->Init.RxDesc + i;
 8019192:	687b      	ldr	r3, [r7, #4]
 8019194:	6919      	ldr	r1, [r3, #16]
 8019196:	68fa      	ldr	r2, [r7, #12]
 8019198:	4613      	mov	r3, r2
 801919a:	005b      	lsls	r3, r3, #1
 801919c:	4413      	add	r3, r2
 801919e:	00db      	lsls	r3, r3, #3
 80191a0:	440b      	add	r3, r1
 80191a2:	60bb      	str	r3, [r7, #8]

                WRITE_REG( dmarxdesc->DESC0, 0x0 );
 80191a4:	68bb      	ldr	r3, [r7, #8]
 80191a6:	2200      	movs	r2, #0
 80191a8:	601a      	str	r2, [r3, #0]
                WRITE_REG( dmarxdesc->DESC1, 0x0 );
 80191aa:	68bb      	ldr	r3, [r7, #8]
 80191ac:	2200      	movs	r2, #0
 80191ae:	605a      	str	r2, [r3, #4]
                WRITE_REG( dmarxdesc->DESC2, 0x0 );
 80191b0:	68bb      	ldr	r3, [r7, #8]
 80191b2:	2200      	movs	r2, #0
 80191b4:	609a      	str	r2, [r3, #8]
                WRITE_REG( dmarxdesc->DESC3, 0x0 );
 80191b6:	68bb      	ldr	r3, [r7, #8]
 80191b8:	2200      	movs	r2, #0
 80191ba:	60da      	str	r2, [r3, #12]
                WRITE_REG( dmarxdesc->BackupAddr0, 0x0 );
 80191bc:	68bb      	ldr	r3, [r7, #8]
 80191be:	2200      	movs	r2, #0
 80191c0:	611a      	str	r2, [r3, #16]
                WRITE_REG( dmarxdesc->BackupAddr1, 0x0 );
 80191c2:	68bb      	ldr	r3, [r7, #8]
 80191c4:	2200      	movs	r2, #0
 80191c6:	615a      	str	r2, [r3, #20]

                /* Set Rx descritors addresses */
                WRITE_REG( heth->RxDescList.RxDesc[ i ], ( uint32_t ) dmarxdesc );
 80191c8:	68b9      	ldr	r1, [r7, #8]
 80191ca:	687b      	ldr	r3, [r7, #4]
 80191cc:	68fa      	ldr	r2, [r7, #12]
 80191ce:	320c      	adds	r2, #12
 80191d0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
            for( i = 0; i < ( uint32_t ) ETH_RX_DESC_CNT; i++ )
 80191d4:	68fb      	ldr	r3, [r7, #12]
 80191d6:	3301      	adds	r3, #1
 80191d8:	60fb      	str	r3, [r7, #12]
 80191da:	68fb      	ldr	r3, [r7, #12]
 80191dc:	2b03      	cmp	r3, #3
 80191de:	d9d8      	bls.n	8019192 <ETH_DMARxDescListInit+0xe>
            }

            WRITE_REG( heth->RxDescList.CurRxDesc, 0 );
 80191e0:	687b      	ldr	r3, [r7, #4]
 80191e2:	2200      	movs	r2, #0
 80191e4:	641a      	str	r2, [r3, #64]	@ 0x40
            WRITE_REG( heth->RxDescList.FirstAppDesc, 0 );
 80191e6:	687b      	ldr	r3, [r7, #4]
 80191e8:	2200      	movs	r2, #0
 80191ea:	645a      	str	r2, [r3, #68]	@ 0x44
            WRITE_REG( heth->RxDescList.AppDescNbr, 0 );
 80191ec:	687b      	ldr	r3, [r7, #4]
 80191ee:	2200      	movs	r2, #0
 80191f0:	649a      	str	r2, [r3, #72]	@ 0x48
            WRITE_REG( heth->RxDescList.ItMode, 0 );
 80191f2:	687b      	ldr	r3, [r7, #4]
 80191f4:	2200      	movs	r2, #0
 80191f6:	651a      	str	r2, [r3, #80]	@ 0x50
            WRITE_REG( heth->RxDescList.AppContextDesc, 0 );
 80191f8:	687b      	ldr	r3, [r7, #4]
 80191fa:	2200      	movs	r2, #0
 80191fc:	64da      	str	r2, [r3, #76]	@ 0x4c

            /* Set Receive Descriptor Ring Length */
            WRITE_REG( heth->Instance->DMACRDRLR, ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) );
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8019206:	461a      	mov	r2, r3
 8019208:	2303      	movs	r3, #3
 801920a:	f8c2 3130 	str.w	r3, [r2, #304]	@ 0x130

            /* Set Receive Descriptor List Address */
            /* Channel Rx descriptor list address register (ETH_DMACRXDLAR)). */
            WRITE_REG( heth->Instance->DMACRDLAR, ( uint32_t ) heth->Init.RxDesc );
 801920e:	687b      	ldr	r3, [r7, #4]
 8019210:	691a      	ldr	r2, [r3, #16]
 8019212:	687b      	ldr	r3, [r7, #4]
 8019214:	681b      	ldr	r3, [r3, #0]
 8019216:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801921a:	f8c3 211c 	str.w	r2, [r3, #284]	@ 0x11c

            /* Set Receive Descriptor Tail pointer Address */
            WRITE_REG( heth->Instance->DMACRDTPR, ( ( uint32_t ) ( heth->Init.RxDesc + ( uint32_t ) ( ETH_RX_DESC_CNT - 1 ) ) ) );
 801921e:	687b      	ldr	r3, [r7, #4]
 8019220:	691b      	ldr	r3, [r3, #16]
 8019222:	f103 0248 	add.w	r2, r3, #72	@ 0x48
 8019226:	687b      	ldr	r3, [r7, #4]
 8019228:	681b      	ldr	r3, [r3, #0]
 801922a:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 801922e:	f8c3 2128 	str.w	r2, [r3, #296]	@ 0x128
        }
 8019232:	bf00      	nop
 8019234:	3714      	adds	r7, #20
 8019236:	46bd      	mov	sp, r7
 8019238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801923c:	4770      	bx	lr
	...

08019240 <ETH_Clear_Tx_Descriptors>:

        void ETH_Clear_Tx_Descriptors( ETH_HandleTypeDef * heth )
        {
 8019240:	b580      	push	{r7, lr}
 8019242:	b086      	sub	sp, #24
 8019244:	af00      	add	r7, sp, #0
 8019246:	6078      	str	r0, [r7, #4]
            uint32_t ulTailTxDesc = heth->TxDescList.TailTxDesc;
 8019248:	687b      	ldr	r3, [r7, #4]
 801924a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801924c:	617b      	str	r3, [r7, #20]

            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 801924e:	e032      	b.n	80192b6 <ETH_Clear_Tx_Descriptors+0x76>
            {
                ETH_DMADescTypeDef * xDMATxDescriptor = ( ETH_DMADescTypeDef * ) heth->TxDescList.TxDesc[ ulTailTxDesc ];
 8019250:	687b      	ldr	r3, [r7, #4]
 8019252:	697a      	ldr	r2, [r7, #20]
 8019254:	3206      	adds	r2, #6
 8019256:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801925a:	613b      	str	r3, [r7, #16]

                if( ( xDMATxDescriptor->DESC3 & ETH_DMATXNDESCRF_OWN ) != 0 )
 801925c:	693b      	ldr	r3, [r7, #16]
 801925e:	68db      	ldr	r3, [r3, #12]
 8019260:	2b00      	cmp	r3, #0
 8019262:	db31      	blt.n	80192c8 <ETH_Clear_Tx_Descriptors+0x88>
                #if ( ipconfigZERO_COPY_TX_DRIVER != 0 )
                {
                    NetworkBufferDescriptor_t * pxNetworkBuffer;
                    uint8_t * ucPayLoad;

                    ucPayLoad = ( uint8_t * ) xDMATxDescriptor->DESC0;
 8019264:	693b      	ldr	r3, [r7, #16]
 8019266:	681b      	ldr	r3, [r3, #0]
 8019268:	60fb      	str	r3, [r7, #12]

                    if( ucPayLoad == NULL )
 801926a:	68fb      	ldr	r3, [r7, #12]
 801926c:	2b00      	cmp	r3, #0
 801926e:	d02d      	beq.n	80192cc <ETH_Clear_Tx_Descriptors+0x8c>
                    {
                        /* No buffer is assigned or DMA still OWNs this descriptor. */
                        break;
                    }

                    pxNetworkBuffer = pxPacketBuffer_to_NetworkBuffer( ucPayLoad );
 8019270:	68f8      	ldr	r0, [r7, #12]
 8019272:	f7f0 fbd2 	bl	8009a1a <pxPacketBuffer_to_NetworkBuffer>
 8019276:	60b8      	str	r0, [r7, #8]

                    if( pxNetworkBuffer != NULL )
 8019278:	68bb      	ldr	r3, [r7, #8]
 801927a:	2b00      	cmp	r3, #0
 801927c:	d002      	beq.n	8019284 <ETH_Clear_Tx_Descriptors+0x44>
                    {
                        vReleaseNetworkBufferAndDescriptor( pxNetworkBuffer );
 801927e:	68b8      	ldr	r0, [r7, #8]
 8019280:	f7fd faa2 	bl	80167c8 <vReleaseNetworkBufferAndDescriptor>
                    }
                }
                #endif /* if ( ipconfigZERO_COPY_TX_DRIVER != 0 ) */

                xDMATxDescriptor->DESC0 = ( uint32_t ) 0u;
 8019284:	693b      	ldr	r3, [r7, #16]
 8019286:	2200      	movs	r2, #0
 8019288:	601a      	str	r2, [r3, #0]

                INCR_TX_DESC_INDEX( ulTailTxDesc, 1U );
 801928a:	697b      	ldr	r3, [r7, #20]
 801928c:	3301      	adds	r3, #1
 801928e:	617b      	str	r3, [r7, #20]
 8019290:	697b      	ldr	r3, [r7, #20]
 8019292:	2b03      	cmp	r3, #3
 8019294:	d902      	bls.n	801929c <ETH_Clear_Tx_Descriptors+0x5c>
 8019296:	697b      	ldr	r3, [r7, #20]
 8019298:	3b04      	subs	r3, #4
 801929a:	617b      	str	r3, [r7, #20]
                heth->TxDescList.TailTxDesc = ulTailTxDesc;
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	697a      	ldr	r2, [r7, #20]
 80192a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  __ASM volatile ("dsb 0xF":::"memory");
 80192a2:	f3bf 8f4f 	dsb	sy
}
 80192a6:	bf00      	nop

                __DSB();

                xSemaphoreGive( xTXDescriptorSemaphore );
 80192a8:	4b0b      	ldr	r3, [pc, #44]	@ (80192d8 <ETH_Clear_Tx_Descriptors+0x98>)
 80192aa:	6818      	ldr	r0, [r3, #0]
 80192ac:	2300      	movs	r3, #0
 80192ae:	2200      	movs	r2, #0
 80192b0:	2100      	movs	r1, #0
 80192b2:	f7e9 fcff 	bl	8002cb4 <xQueueGenericSend>
            while( ( uxSemaphoreGetCount( xTXDescriptorSemaphore ) ) != ETH_TX_DESC_CNT )
 80192b6:	4b08      	ldr	r3, [pc, #32]	@ (80192d8 <ETH_Clear_Tx_Descriptors+0x98>)
 80192b8:	681b      	ldr	r3, [r3, #0]
 80192ba:	4618      	mov	r0, r3
 80192bc:	f7e9 ffa0 	bl	8003200 <uxQueueMessagesWaiting>
 80192c0:	4603      	mov	r3, r0
 80192c2:	2b04      	cmp	r3, #4
 80192c4:	d1c4      	bne.n	8019250 <ETH_Clear_Tx_Descriptors+0x10>
            }
        }
 80192c6:	e002      	b.n	80192ce <ETH_Clear_Tx_Descriptors+0x8e>
                    break;
 80192c8:	bf00      	nop
 80192ca:	e000      	b.n	80192ce <ETH_Clear_Tx_Descriptors+0x8e>
                        break;
 80192cc:	bf00      	nop
        }
 80192ce:	bf00      	nop
 80192d0:	3718      	adds	r7, #24
 80192d2:	46bd      	mov	sp, r7
 80192d4:	bd80      	pop	{r7, pc}
 80192d6:	bf00      	nop
 80192d8:	20002170 	.word	0x20002170

080192dc <ETH_Prepare_Tx_Descriptors>:
 * @retval Status
 */
        static uint32_t ETH_Prepare_Tx_Descriptors( ETH_HandleTypeDef * heth,
                                                    ETH_TxPacketConfig * pTxConfig,
                                                    uint32_t ItMode )
        {
 80192dc:	b480      	push	{r7}
 80192de:	b08b      	sub	sp, #44	@ 0x2c
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	60f8      	str	r0, [r7, #12]
 80192e4:	60b9      	str	r1, [r7, #8]
 80192e6:	607a      	str	r2, [r7, #4]
            ETH_TxDescListTypeDef * dmatxdesclist = &heth->TxDescList;
 80192e8:	68fb      	ldr	r3, [r7, #12]
 80192ea:	3318      	adds	r3, #24
 80192ec:	623b      	str	r3, [r7, #32]
            uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80192ee:	6a3b      	ldr	r3, [r7, #32]
 80192f0:	691b      	ldr	r3, [r3, #16]
 80192f2:	61fb      	str	r3, [r7, #28]
            uint32_t DESC3;
            ETH_DMADescTypeDef * dmatxdesc = ( ETH_DMADescTypeDef * ) dmatxdesclist->TxDesc[ firstdescidx ];
 80192f4:	6a3b      	ldr	r3, [r7, #32]
 80192f6:	69fa      	ldr	r2, [r7, #28]
 80192f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80192fc:	61bb      	str	r3, [r7, #24]
            ETH_BufferTypeDef * txbuffer = pTxConfig->TxBuffer;
 80192fe:	68bb      	ldr	r3, [r7, #8]
 8019300:	689b      	ldr	r3, [r3, #8]
 8019302:	617b      	str	r3, [r7, #20]

            /* FreeRTOS+TCP doesn't support linked buffers. */
            txbuffer->next = NULL;
 8019304:	697b      	ldr	r3, [r7, #20]
 8019306:	2200      	movs	r2, #0
 8019308:	609a      	str	r2, [r3, #8]
            DESC3 = READ_REG( dmatxdesc->DESC3 );
 801930a:	69bb      	ldr	r3, [r7, #24]
 801930c:	68db      	ldr	r3, [r3, #12]
 801930e:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Current TX Descriptor Owned by DMA: cannot be used by the application  */
            if( READ_BIT( DESC3, ETH_DMATXNDESCWBF_OWN ) != 0U )
 8019310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019312:	2b00      	cmp	r3, #0
 8019314:	da01      	bge.n	801931a <ETH_Prepare_Tx_Descriptors+0x3e>
            {
                /* Should not get here because TX descriptors are protected by a counting semaphore. */
                return HAL_ETH_ERROR_BUSY;
 8019316:	2302      	movs	r3, #2
 8019318:	e05c      	b.n	80193d4 <ETH_Prepare_Tx_Descriptors+0xf8>
            /***************************************************************************/
            /*****************    Normal descriptors configuration     *****************/
            /***************************************************************************/

            /* Set header or buffer 1 address */
            WRITE_REG( dmatxdesc->DESC0, ( uint32_t ) txbuffer->buffer );
 801931a:	697b      	ldr	r3, [r7, #20]
 801931c:	681b      	ldr	r3, [r3, #0]
 801931e:	461a      	mov	r2, r3
 8019320:	69bb      	ldr	r3, [r7, #24]
 8019322:	601a      	str	r2, [r3, #0]
            /* Set header or buffer 1 Length */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B1L, txbuffer->len );
 8019324:	69bb      	ldr	r3, [r7, #24]
 8019326:	689a      	ldr	r2, [r3, #8]
 8019328:	4b2d      	ldr	r3, [pc, #180]	@ (80193e0 <ETH_Prepare_Tx_Descriptors+0x104>)
 801932a:	4013      	ands	r3, r2
 801932c:	697a      	ldr	r2, [r7, #20]
 801932e:	6852      	ldr	r2, [r2, #4]
 8019330:	431a      	orrs	r2, r3
 8019332:	69bb      	ldr	r3, [r7, #24]
 8019334:	609a      	str	r2, [r3, #8]

            WRITE_REG( dmatxdesc->DESC1, 0x0 );
 8019336:	69bb      	ldr	r3, [r7, #24]
 8019338:	2200      	movs	r2, #0
 801933a:	605a      	str	r2, [r3, #4]
            /* Set buffer 2 Length to zero */
            MODIFY_REG( dmatxdesc->DESC2, ETH_DMATXNDESCRF_B2L, 0x0U );
 801933c:	69bb      	ldr	r3, [r7, #24]
 801933e:	689a      	ldr	r2, [r3, #8]
 8019340:	4b28      	ldr	r3, [pc, #160]	@ (80193e4 <ETH_Prepare_Tx_Descriptors+0x108>)
 8019342:	4013      	ands	r3, r2
 8019344:	69ba      	ldr	r2, [r7, #24]
 8019346:	6093      	str	r3, [r2, #8]

            MODIFY_REG( DESC3, ETH_DMATXNDESCRF_FL, pTxConfig->Length );
 8019348:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801934a:	4b27      	ldr	r3, [pc, #156]	@ (80193e8 <ETH_Prepare_Tx_Descriptors+0x10c>)
 801934c:	4013      	ands	r3, r2
 801934e:	68ba      	ldr	r2, [r7, #8]
 8019350:	6852      	ldr	r2, [r2, #4]
 8019352:	4313      	orrs	r3, r2
 8019354:	627b      	str	r3, [r7, #36]	@ 0x24

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM ) != 0U )
 8019356:	68bb      	ldr	r3, [r7, #8]
 8019358:	681b      	ldr	r3, [r3, #0]
 801935a:	f003 0301 	and.w	r3, r3, #1
 801935e:	2b00      	cmp	r3, #0
 8019360:	d006      	beq.n	8019370 <ETH_Prepare_Tx_Descriptors+0x94>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CIC, pTxConfig->ChecksumCtrl );
 8019362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019364:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8019368:	68bb      	ldr	r3, [r7, #8]
 801936a:	695b      	ldr	r3, [r3, #20]
 801936c:	4313      	orrs	r3, r2
 801936e:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            if( READ_BIT( pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD ) != 0U )
 8019370:	68bb      	ldr	r3, [r7, #8]
 8019372:	681b      	ldr	r3, [r3, #0]
 8019374:	f003 0320 	and.w	r3, r3, #32
 8019378:	2b00      	cmp	r3, #0
 801937a:	d006      	beq.n	801938a <ETH_Prepare_Tx_Descriptors+0xae>
            {
                MODIFY_REG( DESC3, ETH_DMATXNDESCRF_CPC, pTxConfig->CRCPadCtrl );
 801937c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801937e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8019382:	68bb      	ldr	r3, [r7, #8]
 8019384:	691b      	ldr	r3, [r3, #16]
 8019386:	4313      	orrs	r3, r2
 8019388:	627b      	str	r3, [r7, #36]	@ 0x24
            }

            /* Mark it as First and the last Descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_FD | ETH_DMATXNDESCRF_LD );
 801938a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801938c:	f043 5340 	orr.w	r3, r3, #805306368	@ 0x30000000
 8019390:	627b      	str	r3, [r7, #36]	@ 0x24

            /* Mark it as NORMAL descriptor */
            CLEAR_BIT( DESC3, ETH_DMATXNDESCRF_CTXT );
 8019392:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019394:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8019398:	627b      	str	r3, [r7, #36]	@ 0x24

            /* set OWN bit of FIRST descriptor */
            SET_BIT( DESC3, ETH_DMATXNDESCRF_OWN );
 801939a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801939c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80193a0:	627b      	str	r3, [r7, #36]	@ 0x24

            if( ItMode != ( ( uint32_t ) RESET ) )
 80193a2:	687b      	ldr	r3, [r7, #4]
 80193a4:	2b00      	cmp	r3, #0
 80193a6:	d006      	beq.n	80193b6 <ETH_Prepare_Tx_Descriptors+0xda>
            {
                /* Set Interrupt on competition bit */
                SET_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 80193a8:	69bb      	ldr	r3, [r7, #24]
 80193aa:	689b      	ldr	r3, [r3, #8]
 80193ac:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80193b0:	69bb      	ldr	r3, [r7, #24]
 80193b2:	609a      	str	r2, [r3, #8]
 80193b4:	e005      	b.n	80193c2 <ETH_Prepare_Tx_Descriptors+0xe6>
            }
            else
            {
                /* Clear Interrupt on competition bit */
                CLEAR_BIT( dmatxdesc->DESC2, ETH_DMATXNDESCRF_IOC );
 80193b6:	69bb      	ldr	r3, [r7, #24]
 80193b8:	689b      	ldr	r3, [r3, #8]
 80193ba:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80193be:	69bb      	ldr	r3, [r7, #24]
 80193c0:	609a      	str	r2, [r3, #8]
            }

            WRITE_REG( dmatxdesc->DESC3, DESC3 );
 80193c2:	69bb      	ldr	r3, [r7, #24]
 80193c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80193c6:	60da      	str	r2, [r3, #12]

            /* Read back the value. */
            if( READ_REG( dmatxdesc->DESC3 ) )
 80193c8:	69bb      	ldr	r3, [r7, #24]
 80193ca:	68db      	ldr	r3, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80193cc:	f3bf 8f4f 	dsb	sy
}
 80193d0:	bf00      	nop
            }

            __DSB();

            /* Return function status */
            return HAL_ETH_ERROR_NONE;
 80193d2:	2300      	movs	r3, #0
        }
 80193d4:	4618      	mov	r0, r3
 80193d6:	372c      	adds	r7, #44	@ 0x2c
 80193d8:	46bd      	mov	sp, r7
 80193da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80193de:	4770      	bx	lr
 80193e0:	ffffc000 	.word	0xffffc000
 80193e4:	c000ffff 	.word	0xc000ffff
 80193e8:	ffff8000 	.word	0xffff8000

080193ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b082      	sub	sp, #8
 80193f0:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80193f2:	2003      	movs	r0, #3
 80193f4:	f000 f9a0 	bl	8019738 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80193f8:	f003 faa6 	bl	801c948 <HAL_RCC_GetSysClockFreq>
 80193fc:	4602      	mov	r2, r0
 80193fe:	4b15      	ldr	r3, [pc, #84]	@ (8019454 <HAL_Init+0x68>)
 8019400:	699b      	ldr	r3, [r3, #24]
 8019402:	0a1b      	lsrs	r3, r3, #8
 8019404:	f003 030f 	and.w	r3, r3, #15
 8019408:	4913      	ldr	r1, [pc, #76]	@ (8019458 <HAL_Init+0x6c>)
 801940a:	5ccb      	ldrb	r3, [r1, r3]
 801940c:	f003 031f 	and.w	r3, r3, #31
 8019410:	fa22 f303 	lsr.w	r3, r2, r3
 8019414:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8019416:	4b0f      	ldr	r3, [pc, #60]	@ (8019454 <HAL_Init+0x68>)
 8019418:	699b      	ldr	r3, [r3, #24]
 801941a:	f003 030f 	and.w	r3, r3, #15
 801941e:	4a0e      	ldr	r2, [pc, #56]	@ (8019458 <HAL_Init+0x6c>)
 8019420:	5cd3      	ldrb	r3, [r2, r3]
 8019422:	f003 031f 	and.w	r3, r3, #31
 8019426:	687a      	ldr	r2, [r7, #4]
 8019428:	fa22 f303 	lsr.w	r3, r2, r3
 801942c:	4a0b      	ldr	r2, [pc, #44]	@ (801945c <HAL_Init+0x70>)
 801942e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8019430:	4a0b      	ldr	r2, [pc, #44]	@ (8019460 <HAL_Init+0x74>)
 8019432:	687b      	ldr	r3, [r7, #4]
 8019434:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8019436:	200f      	movs	r0, #15
 8019438:	f000 f814 	bl	8019464 <HAL_InitTick>
 801943c:	4603      	mov	r3, r0
 801943e:	2b00      	cmp	r3, #0
 8019440:	d001      	beq.n	8019446 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8019442:	2301      	movs	r3, #1
 8019444:	e002      	b.n	801944c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8019446:	f7e8 fa2f 	bl	80018a8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 801944a:	2300      	movs	r3, #0
}
 801944c:	4618      	mov	r0, r3
 801944e:	3708      	adds	r7, #8
 8019450:	46bd      	mov	sp, r7
 8019452:	bd80      	pop	{r7, pc}
 8019454:	58024400 	.word	0x58024400
 8019458:	080262d0 	.word	0x080262d0
 801945c:	20000004 	.word	0x20000004
 8019460:	20000000 	.word	0x20000000

08019464 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8019464:	b580      	push	{r7, lr}
 8019466:	b082      	sub	sp, #8
 8019468:	af00      	add	r7, sp, #0
 801946a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 801946c:	4b15      	ldr	r3, [pc, #84]	@ (80194c4 <HAL_InitTick+0x60>)
 801946e:	781b      	ldrb	r3, [r3, #0]
 8019470:	2b00      	cmp	r3, #0
 8019472:	d101      	bne.n	8019478 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8019474:	2301      	movs	r3, #1
 8019476:	e021      	b.n	80194bc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8019478:	4b13      	ldr	r3, [pc, #76]	@ (80194c8 <HAL_InitTick+0x64>)
 801947a:	681a      	ldr	r2, [r3, #0]
 801947c:	4b11      	ldr	r3, [pc, #68]	@ (80194c4 <HAL_InitTick+0x60>)
 801947e:	781b      	ldrb	r3, [r3, #0]
 8019480:	4619      	mov	r1, r3
 8019482:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8019486:	fbb3 f3f1 	udiv	r3, r3, r1
 801948a:	fbb2 f3f3 	udiv	r3, r2, r3
 801948e:	4618      	mov	r0, r3
 8019490:	f000 f985 	bl	801979e <HAL_SYSTICK_Config>
 8019494:	4603      	mov	r3, r0
 8019496:	2b00      	cmp	r3, #0
 8019498:	d001      	beq.n	801949e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801949a:	2301      	movs	r3, #1
 801949c:	e00e      	b.n	80194bc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	2b0f      	cmp	r3, #15
 80194a2:	d80a      	bhi.n	80194ba <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80194a4:	2200      	movs	r2, #0
 80194a6:	6879      	ldr	r1, [r7, #4]
 80194a8:	f04f 30ff 	mov.w	r0, #4294967295
 80194ac:	f000 f94f 	bl	801974e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80194b0:	4a06      	ldr	r2, [pc, #24]	@ (80194cc <HAL_InitTick+0x68>)
 80194b2:	687b      	ldr	r3, [r7, #4]
 80194b4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80194b6:	2300      	movs	r3, #0
 80194b8:	e000      	b.n	80194bc <HAL_InitTick+0x58>
    return HAL_ERROR;
 80194ba:	2301      	movs	r3, #1
}
 80194bc:	4618      	mov	r0, r3
 80194be:	3708      	adds	r7, #8
 80194c0:	46bd      	mov	sp, r7
 80194c2:	bd80      	pop	{r7, pc}
 80194c4:	20000024 	.word	0x20000024
 80194c8:	20000000 	.word	0x20000000
 80194cc:	20000020 	.word	0x20000020

080194d0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80194d0:	b480      	push	{r7}
 80194d2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80194d4:	4b06      	ldr	r3, [pc, #24]	@ (80194f0 <HAL_IncTick+0x20>)
 80194d6:	781b      	ldrb	r3, [r3, #0]
 80194d8:	461a      	mov	r2, r3
 80194da:	4b06      	ldr	r3, [pc, #24]	@ (80194f4 <HAL_IncTick+0x24>)
 80194dc:	681b      	ldr	r3, [r3, #0]
 80194de:	4413      	add	r3, r2
 80194e0:	4a04      	ldr	r2, [pc, #16]	@ (80194f4 <HAL_IncTick+0x24>)
 80194e2:	6013      	str	r3, [r2, #0]
}
 80194e4:	bf00      	nop
 80194e6:	46bd      	mov	sp, r7
 80194e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194ec:	4770      	bx	lr
 80194ee:	bf00      	nop
 80194f0:	20000024 	.word	0x20000024
 80194f4:	2000227c 	.word	0x2000227c

080194f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80194f8:	b480      	push	{r7}
 80194fa:	af00      	add	r7, sp, #0
  return uwTick;
 80194fc:	4b03      	ldr	r3, [pc, #12]	@ (801950c <HAL_GetTick+0x14>)
 80194fe:	681b      	ldr	r3, [r3, #0]
}
 8019500:	4618      	mov	r0, r3
 8019502:	46bd      	mov	sp, r7
 8019504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019508:	4770      	bx	lr
 801950a:	bf00      	nop
 801950c:	2000227c 	.word	0x2000227c

08019510 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8019510:	b580      	push	{r7, lr}
 8019512:	b084      	sub	sp, #16
 8019514:	af00      	add	r7, sp, #0
 8019516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8019518:	f7ff ffee 	bl	80194f8 <HAL_GetTick>
 801951c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 801951e:	687b      	ldr	r3, [r7, #4]
 8019520:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8019522:	68fb      	ldr	r3, [r7, #12]
 8019524:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019528:	d005      	beq.n	8019536 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 801952a:	4b0a      	ldr	r3, [pc, #40]	@ (8019554 <HAL_Delay+0x44>)
 801952c:	781b      	ldrb	r3, [r3, #0]
 801952e:	461a      	mov	r2, r3
 8019530:	68fb      	ldr	r3, [r7, #12]
 8019532:	4413      	add	r3, r2
 8019534:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8019536:	bf00      	nop
 8019538:	f7ff ffde 	bl	80194f8 <HAL_GetTick>
 801953c:	4602      	mov	r2, r0
 801953e:	68bb      	ldr	r3, [r7, #8]
 8019540:	1ad3      	subs	r3, r2, r3
 8019542:	68fa      	ldr	r2, [r7, #12]
 8019544:	429a      	cmp	r2, r3
 8019546:	d8f7      	bhi.n	8019538 <HAL_Delay+0x28>
  {
  }
}
 8019548:	bf00      	nop
 801954a:	bf00      	nop
 801954c:	3710      	adds	r7, #16
 801954e:	46bd      	mov	sp, r7
 8019550:	bd80      	pop	{r7, pc}
 8019552:	bf00      	nop
 8019554:	20000024 	.word	0x20000024

08019558 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8019558:	b480      	push	{r7}
 801955a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 801955c:	4b03      	ldr	r3, [pc, #12]	@ (801956c <HAL_GetREVID+0x14>)
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	0c1b      	lsrs	r3, r3, #16
}
 8019562:	4618      	mov	r0, r3
 8019564:	46bd      	mov	sp, r7
 8019566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801956a:	4770      	bx	lr
 801956c:	5c001000 	.word	0x5c001000

08019570 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 8019570:	b480      	push	{r7}
 8019572:	b083      	sub	sp, #12
 8019574:	af00      	add	r7, sp, #0
 8019576:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8019578:	4b06      	ldr	r3, [pc, #24]	@ (8019594 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 801957a:	685b      	ldr	r3, [r3, #4]
 801957c:	f423 0260 	bic.w	r2, r3, #14680064	@ 0xe00000
 8019580:	4904      	ldr	r1, [pc, #16]	@ (8019594 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	4313      	orrs	r3, r2
 8019586:	604b      	str	r3, [r1, #4]
}
 8019588:	bf00      	nop
 801958a:	370c      	adds	r7, #12
 801958c:	46bd      	mov	sp, r7
 801958e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019592:	4770      	bx	lr
 8019594:	58000400 	.word	0x58000400

08019598 <__NVIC_SetPriorityGrouping>:
{
 8019598:	b480      	push	{r7}
 801959a:	b085      	sub	sp, #20
 801959c:	af00      	add	r7, sp, #0
 801959e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80195a0:	687b      	ldr	r3, [r7, #4]
 80195a2:	f003 0307 	and.w	r3, r3, #7
 80195a6:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80195a8:	4b0b      	ldr	r3, [pc, #44]	@ (80195d8 <__NVIC_SetPriorityGrouping+0x40>)
 80195aa:	68db      	ldr	r3, [r3, #12]
 80195ac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80195ae:	68ba      	ldr	r2, [r7, #8]
 80195b0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80195b4:	4013      	ands	r3, r2
 80195b6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80195b8:	68fb      	ldr	r3, [r7, #12]
 80195ba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80195bc:	68bb      	ldr	r3, [r7, #8]
 80195be:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80195c0:	4b06      	ldr	r3, [pc, #24]	@ (80195dc <__NVIC_SetPriorityGrouping+0x44>)
 80195c2:	4313      	orrs	r3, r2
 80195c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80195c6:	4a04      	ldr	r2, [pc, #16]	@ (80195d8 <__NVIC_SetPriorityGrouping+0x40>)
 80195c8:	68bb      	ldr	r3, [r7, #8]
 80195ca:	60d3      	str	r3, [r2, #12]
}
 80195cc:	bf00      	nop
 80195ce:	3714      	adds	r7, #20
 80195d0:	46bd      	mov	sp, r7
 80195d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195d6:	4770      	bx	lr
 80195d8:	e000ed00 	.word	0xe000ed00
 80195dc:	05fa0000 	.word	0x05fa0000

080195e0 <__NVIC_GetPriorityGrouping>:
{
 80195e0:	b480      	push	{r7}
 80195e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80195e4:	4b04      	ldr	r3, [pc, #16]	@ (80195f8 <__NVIC_GetPriorityGrouping+0x18>)
 80195e6:	68db      	ldr	r3, [r3, #12]
 80195e8:	0a1b      	lsrs	r3, r3, #8
 80195ea:	f003 0307 	and.w	r3, r3, #7
}
 80195ee:	4618      	mov	r0, r3
 80195f0:	46bd      	mov	sp, r7
 80195f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80195f6:	4770      	bx	lr
 80195f8:	e000ed00 	.word	0xe000ed00

080195fc <__NVIC_EnableIRQ>:
{
 80195fc:	b480      	push	{r7}
 80195fe:	b083      	sub	sp, #12
 8019600:	af00      	add	r7, sp, #0
 8019602:	4603      	mov	r3, r0
 8019604:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019606:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801960a:	2b00      	cmp	r3, #0
 801960c:	db0b      	blt.n	8019626 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801960e:	88fb      	ldrh	r3, [r7, #6]
 8019610:	f003 021f 	and.w	r2, r3, #31
 8019614:	4907      	ldr	r1, [pc, #28]	@ (8019634 <__NVIC_EnableIRQ+0x38>)
 8019616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801961a:	095b      	lsrs	r3, r3, #5
 801961c:	2001      	movs	r0, #1
 801961e:	fa00 f202 	lsl.w	r2, r0, r2
 8019622:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8019626:	bf00      	nop
 8019628:	370c      	adds	r7, #12
 801962a:	46bd      	mov	sp, r7
 801962c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019630:	4770      	bx	lr
 8019632:	bf00      	nop
 8019634:	e000e100 	.word	0xe000e100

08019638 <__NVIC_SetPriority>:
{
 8019638:	b480      	push	{r7}
 801963a:	b083      	sub	sp, #12
 801963c:	af00      	add	r7, sp, #0
 801963e:	4603      	mov	r3, r0
 8019640:	6039      	str	r1, [r7, #0]
 8019642:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8019644:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019648:	2b00      	cmp	r3, #0
 801964a:	db0a      	blt.n	8019662 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 801964c:	683b      	ldr	r3, [r7, #0]
 801964e:	b2da      	uxtb	r2, r3
 8019650:	490c      	ldr	r1, [pc, #48]	@ (8019684 <__NVIC_SetPriority+0x4c>)
 8019652:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019656:	0112      	lsls	r2, r2, #4
 8019658:	b2d2      	uxtb	r2, r2
 801965a:	440b      	add	r3, r1
 801965c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8019660:	e00a      	b.n	8019678 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8019662:	683b      	ldr	r3, [r7, #0]
 8019664:	b2da      	uxtb	r2, r3
 8019666:	4908      	ldr	r1, [pc, #32]	@ (8019688 <__NVIC_SetPriority+0x50>)
 8019668:	88fb      	ldrh	r3, [r7, #6]
 801966a:	f003 030f 	and.w	r3, r3, #15
 801966e:	3b04      	subs	r3, #4
 8019670:	0112      	lsls	r2, r2, #4
 8019672:	b2d2      	uxtb	r2, r2
 8019674:	440b      	add	r3, r1
 8019676:	761a      	strb	r2, [r3, #24]
}
 8019678:	bf00      	nop
 801967a:	370c      	adds	r7, #12
 801967c:	46bd      	mov	sp, r7
 801967e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019682:	4770      	bx	lr
 8019684:	e000e100 	.word	0xe000e100
 8019688:	e000ed00 	.word	0xe000ed00

0801968c <NVIC_EncodePriority>:
{
 801968c:	b480      	push	{r7}
 801968e:	b089      	sub	sp, #36	@ 0x24
 8019690:	af00      	add	r7, sp, #0
 8019692:	60f8      	str	r0, [r7, #12]
 8019694:	60b9      	str	r1, [r7, #8]
 8019696:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8019698:	68fb      	ldr	r3, [r7, #12]
 801969a:	f003 0307 	and.w	r3, r3, #7
 801969e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80196a0:	69fb      	ldr	r3, [r7, #28]
 80196a2:	f1c3 0307 	rsb	r3, r3, #7
 80196a6:	2b04      	cmp	r3, #4
 80196a8:	bf28      	it	cs
 80196aa:	2304      	movcs	r3, #4
 80196ac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80196ae:	69fb      	ldr	r3, [r7, #28]
 80196b0:	3304      	adds	r3, #4
 80196b2:	2b06      	cmp	r3, #6
 80196b4:	d902      	bls.n	80196bc <NVIC_EncodePriority+0x30>
 80196b6:	69fb      	ldr	r3, [r7, #28]
 80196b8:	3b03      	subs	r3, #3
 80196ba:	e000      	b.n	80196be <NVIC_EncodePriority+0x32>
 80196bc:	2300      	movs	r3, #0
 80196be:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80196c0:	f04f 32ff 	mov.w	r2, #4294967295
 80196c4:	69bb      	ldr	r3, [r7, #24]
 80196c6:	fa02 f303 	lsl.w	r3, r2, r3
 80196ca:	43da      	mvns	r2, r3
 80196cc:	68bb      	ldr	r3, [r7, #8]
 80196ce:	401a      	ands	r2, r3
 80196d0:	697b      	ldr	r3, [r7, #20]
 80196d2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80196d4:	f04f 31ff 	mov.w	r1, #4294967295
 80196d8:	697b      	ldr	r3, [r7, #20]
 80196da:	fa01 f303 	lsl.w	r3, r1, r3
 80196de:	43d9      	mvns	r1, r3
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80196e4:	4313      	orrs	r3, r2
}
 80196e6:	4618      	mov	r0, r3
 80196e8:	3724      	adds	r7, #36	@ 0x24
 80196ea:	46bd      	mov	sp, r7
 80196ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80196f0:	4770      	bx	lr
	...

080196f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b082      	sub	sp, #8
 80196f8:	af00      	add	r7, sp, #0
 80196fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80196fc:	687b      	ldr	r3, [r7, #4]
 80196fe:	3b01      	subs	r3, #1
 8019700:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8019704:	d301      	bcc.n	801970a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8019706:	2301      	movs	r3, #1
 8019708:	e00f      	b.n	801972a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 801970a:	4a0a      	ldr	r2, [pc, #40]	@ (8019734 <SysTick_Config+0x40>)
 801970c:	687b      	ldr	r3, [r7, #4]
 801970e:	3b01      	subs	r3, #1
 8019710:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8019712:	210f      	movs	r1, #15
 8019714:	f04f 30ff 	mov.w	r0, #4294967295
 8019718:	f7ff ff8e 	bl	8019638 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 801971c:	4b05      	ldr	r3, [pc, #20]	@ (8019734 <SysTick_Config+0x40>)
 801971e:	2200      	movs	r2, #0
 8019720:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8019722:	4b04      	ldr	r3, [pc, #16]	@ (8019734 <SysTick_Config+0x40>)
 8019724:	2207      	movs	r2, #7
 8019726:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8019728:	2300      	movs	r3, #0
}
 801972a:	4618      	mov	r0, r3
 801972c:	3708      	adds	r7, #8
 801972e:	46bd      	mov	sp, r7
 8019730:	bd80      	pop	{r7, pc}
 8019732:	bf00      	nop
 8019734:	e000e010 	.word	0xe000e010

08019738 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8019738:	b580      	push	{r7, lr}
 801973a:	b082      	sub	sp, #8
 801973c:	af00      	add	r7, sp, #0
 801973e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8019740:	6878      	ldr	r0, [r7, #4]
 8019742:	f7ff ff29 	bl	8019598 <__NVIC_SetPriorityGrouping>
}
 8019746:	bf00      	nop
 8019748:	3708      	adds	r7, #8
 801974a:	46bd      	mov	sp, r7
 801974c:	bd80      	pop	{r7, pc}

0801974e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 801974e:	b580      	push	{r7, lr}
 8019750:	b086      	sub	sp, #24
 8019752:	af00      	add	r7, sp, #0
 8019754:	4603      	mov	r3, r0
 8019756:	60b9      	str	r1, [r7, #8]
 8019758:	607a      	str	r2, [r7, #4]
 801975a:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 801975c:	f7ff ff40 	bl	80195e0 <__NVIC_GetPriorityGrouping>
 8019760:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8019762:	687a      	ldr	r2, [r7, #4]
 8019764:	68b9      	ldr	r1, [r7, #8]
 8019766:	6978      	ldr	r0, [r7, #20]
 8019768:	f7ff ff90 	bl	801968c <NVIC_EncodePriority>
 801976c:	4602      	mov	r2, r0
 801976e:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8019772:	4611      	mov	r1, r2
 8019774:	4618      	mov	r0, r3
 8019776:	f7ff ff5f 	bl	8019638 <__NVIC_SetPriority>
}
 801977a:	bf00      	nop
 801977c:	3718      	adds	r7, #24
 801977e:	46bd      	mov	sp, r7
 8019780:	bd80      	pop	{r7, pc}

08019782 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8019782:	b580      	push	{r7, lr}
 8019784:	b082      	sub	sp, #8
 8019786:	af00      	add	r7, sp, #0
 8019788:	4603      	mov	r3, r0
 801978a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 801978c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8019790:	4618      	mov	r0, r3
 8019792:	f7ff ff33 	bl	80195fc <__NVIC_EnableIRQ>
}
 8019796:	bf00      	nop
 8019798:	3708      	adds	r7, #8
 801979a:	46bd      	mov	sp, r7
 801979c:	bd80      	pop	{r7, pc}

0801979e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801979e:	b580      	push	{r7, lr}
 80197a0:	b082      	sub	sp, #8
 80197a2:	af00      	add	r7, sp, #0
 80197a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80197a6:	6878      	ldr	r0, [r7, #4]
 80197a8:	f7ff ffa4 	bl	80196f4 <SysTick_Config>
 80197ac:	4603      	mov	r3, r0
}
 80197ae:	4618      	mov	r0, r3
 80197b0:	3708      	adds	r7, #8
 80197b2:	46bd      	mov	sp, r7
 80197b4:	bd80      	pop	{r7, pc}
	...

080197b8 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80197b8:	b480      	push	{r7}
 80197ba:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80197bc:	f3bf 8f5f 	dmb	sy
}
 80197c0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80197c2:	4b07      	ldr	r3, [pc, #28]	@ (80197e0 <HAL_MPU_Disable+0x28>)
 80197c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197c6:	4a06      	ldr	r2, [pc, #24]	@ (80197e0 <HAL_MPU_Disable+0x28>)
 80197c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80197cc:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80197ce:	4b05      	ldr	r3, [pc, #20]	@ (80197e4 <HAL_MPU_Disable+0x2c>)
 80197d0:	2200      	movs	r2, #0
 80197d2:	605a      	str	r2, [r3, #4]
}
 80197d4:	bf00      	nop
 80197d6:	46bd      	mov	sp, r7
 80197d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197dc:	4770      	bx	lr
 80197de:	bf00      	nop
 80197e0:	e000ed00 	.word	0xe000ed00
 80197e4:	e000ed90 	.word	0xe000ed90

080197e8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80197e8:	b480      	push	{r7}
 80197ea:	b083      	sub	sp, #12
 80197ec:	af00      	add	r7, sp, #0
 80197ee:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80197f0:	4a0b      	ldr	r2, [pc, #44]	@ (8019820 <HAL_MPU_Enable+0x38>)
 80197f2:	687b      	ldr	r3, [r7, #4]
 80197f4:	f043 0301 	orr.w	r3, r3, #1
 80197f8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80197fa:	4b0a      	ldr	r3, [pc, #40]	@ (8019824 <HAL_MPU_Enable+0x3c>)
 80197fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80197fe:	4a09      	ldr	r2, [pc, #36]	@ (8019824 <HAL_MPU_Enable+0x3c>)
 8019800:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8019804:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8019806:	f3bf 8f4f 	dsb	sy
}
 801980a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 801980c:	f3bf 8f6f 	isb	sy
}
 8019810:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 8019812:	bf00      	nop
 8019814:	370c      	adds	r7, #12
 8019816:	46bd      	mov	sp, r7
 8019818:	f85d 7b04 	ldr.w	r7, [sp], #4
 801981c:	4770      	bx	lr
 801981e:	bf00      	nop
 8019820:	e000ed90 	.word	0xe000ed90
 8019824:	e000ed00 	.word	0xe000ed00

08019828 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(MPU_Region_InitTypeDef *MPU_Init)
{
 8019828:	b480      	push	{r7}
 801982a:	b083      	sub	sp, #12
 801982c:	af00      	add	r7, sp, #0
 801982e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8019830:	687b      	ldr	r3, [r7, #4]
 8019832:	785a      	ldrb	r2, [r3, #1]
 8019834:	4b1b      	ldr	r3, [pc, #108]	@ (80198a4 <HAL_MPU_ConfigRegion+0x7c>)
 8019836:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8019838:	4b1a      	ldr	r3, [pc, #104]	@ (80198a4 <HAL_MPU_ConfigRegion+0x7c>)
 801983a:	691b      	ldr	r3, [r3, #16]
 801983c:	4a19      	ldr	r2, [pc, #100]	@ (80198a4 <HAL_MPU_ConfigRegion+0x7c>)
 801983e:	f023 0301 	bic.w	r3, r3, #1
 8019842:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8019844:	4a17      	ldr	r2, [pc, #92]	@ (80198a4 <HAL_MPU_ConfigRegion+0x7c>)
 8019846:	687b      	ldr	r3, [r7, #4]
 8019848:	685b      	ldr	r3, [r3, #4]
 801984a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801984c:	687b      	ldr	r3, [r7, #4]
 801984e:	7b1b      	ldrb	r3, [r3, #12]
 8019850:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019852:	687b      	ldr	r3, [r7, #4]
 8019854:	7adb      	ldrb	r3, [r3, #11]
 8019856:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019858:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801985a:	687b      	ldr	r3, [r7, #4]
 801985c:	7a9b      	ldrb	r3, [r3, #10]
 801985e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8019860:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019862:	687b      	ldr	r3, [r7, #4]
 8019864:	7b5b      	ldrb	r3, [r3, #13]
 8019866:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8019868:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801986a:	687b      	ldr	r3, [r7, #4]
 801986c:	7b9b      	ldrb	r3, [r3, #14]
 801986e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8019870:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019872:	687b      	ldr	r3, [r7, #4]
 8019874:	7bdb      	ldrb	r3, [r3, #15]
 8019876:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8019878:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801987a:	687b      	ldr	r3, [r7, #4]
 801987c:	7a5b      	ldrb	r3, [r3, #9]
 801987e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8019880:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019882:	687b      	ldr	r3, [r7, #4]
 8019884:	7a1b      	ldrb	r3, [r3, #8]
 8019886:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8019888:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801988a:	687a      	ldr	r2, [r7, #4]
 801988c:	7812      	ldrb	r2, [r2, #0]
 801988e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019890:	4a04      	ldr	r2, [pc, #16]	@ (80198a4 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8019892:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8019894:	6113      	str	r3, [r2, #16]
}
 8019896:	bf00      	nop
 8019898:	370c      	adds	r7, #12
 801989a:	46bd      	mov	sp, r7
 801989c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198a0:	4770      	bx	lr
 80198a2:	bf00      	nop
 80198a4:	e000ed90 	.word	0xe000ed90

080198a8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80198a8:	b580      	push	{r7, lr}
 80198aa:	b086      	sub	sp, #24
 80198ac:	af00      	add	r7, sp, #0
 80198ae:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80198b0:	f7ff fe22 	bl	80194f8 <HAL_GetTick>
 80198b4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80198b6:	687b      	ldr	r3, [r7, #4]
 80198b8:	2b00      	cmp	r3, #0
 80198ba:	d101      	bne.n	80198c0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80198bc:	2301      	movs	r3, #1
 80198be:	e316      	b.n	8019eee <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80198c0:	687b      	ldr	r3, [r7, #4]
 80198c2:	681b      	ldr	r3, [r3, #0]
 80198c4:	4a66      	ldr	r2, [pc, #408]	@ (8019a60 <HAL_DMA_Init+0x1b8>)
 80198c6:	4293      	cmp	r3, r2
 80198c8:	d04a      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 80198ca:	687b      	ldr	r3, [r7, #4]
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	4a65      	ldr	r2, [pc, #404]	@ (8019a64 <HAL_DMA_Init+0x1bc>)
 80198d0:	4293      	cmp	r3, r2
 80198d2:	d045      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 80198d4:	687b      	ldr	r3, [r7, #4]
 80198d6:	681b      	ldr	r3, [r3, #0]
 80198d8:	4a63      	ldr	r2, [pc, #396]	@ (8019a68 <HAL_DMA_Init+0x1c0>)
 80198da:	4293      	cmp	r3, r2
 80198dc:	d040      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 80198de:	687b      	ldr	r3, [r7, #4]
 80198e0:	681b      	ldr	r3, [r3, #0]
 80198e2:	4a62      	ldr	r2, [pc, #392]	@ (8019a6c <HAL_DMA_Init+0x1c4>)
 80198e4:	4293      	cmp	r3, r2
 80198e6:	d03b      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 80198e8:	687b      	ldr	r3, [r7, #4]
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	4a60      	ldr	r2, [pc, #384]	@ (8019a70 <HAL_DMA_Init+0x1c8>)
 80198ee:	4293      	cmp	r3, r2
 80198f0:	d036      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 80198f2:	687b      	ldr	r3, [r7, #4]
 80198f4:	681b      	ldr	r3, [r3, #0]
 80198f6:	4a5f      	ldr	r2, [pc, #380]	@ (8019a74 <HAL_DMA_Init+0x1cc>)
 80198f8:	4293      	cmp	r3, r2
 80198fa:	d031      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 80198fc:	687b      	ldr	r3, [r7, #4]
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	4a5d      	ldr	r2, [pc, #372]	@ (8019a78 <HAL_DMA_Init+0x1d0>)
 8019902:	4293      	cmp	r3, r2
 8019904:	d02c      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 8019906:	687b      	ldr	r3, [r7, #4]
 8019908:	681b      	ldr	r3, [r3, #0]
 801990a:	4a5c      	ldr	r2, [pc, #368]	@ (8019a7c <HAL_DMA_Init+0x1d4>)
 801990c:	4293      	cmp	r3, r2
 801990e:	d027      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	681b      	ldr	r3, [r3, #0]
 8019914:	4a5a      	ldr	r2, [pc, #360]	@ (8019a80 <HAL_DMA_Init+0x1d8>)
 8019916:	4293      	cmp	r3, r2
 8019918:	d022      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 801991a:	687b      	ldr	r3, [r7, #4]
 801991c:	681b      	ldr	r3, [r3, #0]
 801991e:	4a59      	ldr	r2, [pc, #356]	@ (8019a84 <HAL_DMA_Init+0x1dc>)
 8019920:	4293      	cmp	r3, r2
 8019922:	d01d      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 8019924:	687b      	ldr	r3, [r7, #4]
 8019926:	681b      	ldr	r3, [r3, #0]
 8019928:	4a57      	ldr	r2, [pc, #348]	@ (8019a88 <HAL_DMA_Init+0x1e0>)
 801992a:	4293      	cmp	r3, r2
 801992c:	d018      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 801992e:	687b      	ldr	r3, [r7, #4]
 8019930:	681b      	ldr	r3, [r3, #0]
 8019932:	4a56      	ldr	r2, [pc, #344]	@ (8019a8c <HAL_DMA_Init+0x1e4>)
 8019934:	4293      	cmp	r3, r2
 8019936:	d013      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 8019938:	687b      	ldr	r3, [r7, #4]
 801993a:	681b      	ldr	r3, [r3, #0]
 801993c:	4a54      	ldr	r2, [pc, #336]	@ (8019a90 <HAL_DMA_Init+0x1e8>)
 801993e:	4293      	cmp	r3, r2
 8019940:	d00e      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	681b      	ldr	r3, [r3, #0]
 8019946:	4a53      	ldr	r2, [pc, #332]	@ (8019a94 <HAL_DMA_Init+0x1ec>)
 8019948:	4293      	cmp	r3, r2
 801994a:	d009      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 801994c:	687b      	ldr	r3, [r7, #4]
 801994e:	681b      	ldr	r3, [r3, #0]
 8019950:	4a51      	ldr	r2, [pc, #324]	@ (8019a98 <HAL_DMA_Init+0x1f0>)
 8019952:	4293      	cmp	r3, r2
 8019954:	d004      	beq.n	8019960 <HAL_DMA_Init+0xb8>
 8019956:	687b      	ldr	r3, [r7, #4]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	4a50      	ldr	r2, [pc, #320]	@ (8019a9c <HAL_DMA_Init+0x1f4>)
 801995c:	4293      	cmp	r3, r2
 801995e:	d101      	bne.n	8019964 <HAL_DMA_Init+0xbc>
 8019960:	2301      	movs	r3, #1
 8019962:	e000      	b.n	8019966 <HAL_DMA_Init+0xbe>
 8019964:	2300      	movs	r3, #0
 8019966:	2b00      	cmp	r3, #0
 8019968:	f000 813b 	beq.w	8019be2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801996c:	687b      	ldr	r3, [r7, #4]
 801996e:	2202      	movs	r2, #2
 8019970:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8019974:	687b      	ldr	r3, [r7, #4]
 8019976:	2200      	movs	r2, #0
 8019978:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801997c:	687b      	ldr	r3, [r7, #4]
 801997e:	681b      	ldr	r3, [r3, #0]
 8019980:	4a37      	ldr	r2, [pc, #220]	@ (8019a60 <HAL_DMA_Init+0x1b8>)
 8019982:	4293      	cmp	r3, r2
 8019984:	d04a      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 8019986:	687b      	ldr	r3, [r7, #4]
 8019988:	681b      	ldr	r3, [r3, #0]
 801998a:	4a36      	ldr	r2, [pc, #216]	@ (8019a64 <HAL_DMA_Init+0x1bc>)
 801998c:	4293      	cmp	r3, r2
 801998e:	d045      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 8019990:	687b      	ldr	r3, [r7, #4]
 8019992:	681b      	ldr	r3, [r3, #0]
 8019994:	4a34      	ldr	r2, [pc, #208]	@ (8019a68 <HAL_DMA_Init+0x1c0>)
 8019996:	4293      	cmp	r3, r2
 8019998:	d040      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 801999a:	687b      	ldr	r3, [r7, #4]
 801999c:	681b      	ldr	r3, [r3, #0]
 801999e:	4a33      	ldr	r2, [pc, #204]	@ (8019a6c <HAL_DMA_Init+0x1c4>)
 80199a0:	4293      	cmp	r3, r2
 80199a2:	d03b      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 80199a4:	687b      	ldr	r3, [r7, #4]
 80199a6:	681b      	ldr	r3, [r3, #0]
 80199a8:	4a31      	ldr	r2, [pc, #196]	@ (8019a70 <HAL_DMA_Init+0x1c8>)
 80199aa:	4293      	cmp	r3, r2
 80199ac:	d036      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 80199ae:	687b      	ldr	r3, [r7, #4]
 80199b0:	681b      	ldr	r3, [r3, #0]
 80199b2:	4a30      	ldr	r2, [pc, #192]	@ (8019a74 <HAL_DMA_Init+0x1cc>)
 80199b4:	4293      	cmp	r3, r2
 80199b6:	d031      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 80199b8:	687b      	ldr	r3, [r7, #4]
 80199ba:	681b      	ldr	r3, [r3, #0]
 80199bc:	4a2e      	ldr	r2, [pc, #184]	@ (8019a78 <HAL_DMA_Init+0x1d0>)
 80199be:	4293      	cmp	r3, r2
 80199c0:	d02c      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 80199c2:	687b      	ldr	r3, [r7, #4]
 80199c4:	681b      	ldr	r3, [r3, #0]
 80199c6:	4a2d      	ldr	r2, [pc, #180]	@ (8019a7c <HAL_DMA_Init+0x1d4>)
 80199c8:	4293      	cmp	r3, r2
 80199ca:	d027      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 80199cc:	687b      	ldr	r3, [r7, #4]
 80199ce:	681b      	ldr	r3, [r3, #0]
 80199d0:	4a2b      	ldr	r2, [pc, #172]	@ (8019a80 <HAL_DMA_Init+0x1d8>)
 80199d2:	4293      	cmp	r3, r2
 80199d4:	d022      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 80199d6:	687b      	ldr	r3, [r7, #4]
 80199d8:	681b      	ldr	r3, [r3, #0]
 80199da:	4a2a      	ldr	r2, [pc, #168]	@ (8019a84 <HAL_DMA_Init+0x1dc>)
 80199dc:	4293      	cmp	r3, r2
 80199de:	d01d      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 80199e0:	687b      	ldr	r3, [r7, #4]
 80199e2:	681b      	ldr	r3, [r3, #0]
 80199e4:	4a28      	ldr	r2, [pc, #160]	@ (8019a88 <HAL_DMA_Init+0x1e0>)
 80199e6:	4293      	cmp	r3, r2
 80199e8:	d018      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 80199ea:	687b      	ldr	r3, [r7, #4]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	4a27      	ldr	r2, [pc, #156]	@ (8019a8c <HAL_DMA_Init+0x1e4>)
 80199f0:	4293      	cmp	r3, r2
 80199f2:	d013      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 80199f4:	687b      	ldr	r3, [r7, #4]
 80199f6:	681b      	ldr	r3, [r3, #0]
 80199f8:	4a25      	ldr	r2, [pc, #148]	@ (8019a90 <HAL_DMA_Init+0x1e8>)
 80199fa:	4293      	cmp	r3, r2
 80199fc:	d00e      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 80199fe:	687b      	ldr	r3, [r7, #4]
 8019a00:	681b      	ldr	r3, [r3, #0]
 8019a02:	4a24      	ldr	r2, [pc, #144]	@ (8019a94 <HAL_DMA_Init+0x1ec>)
 8019a04:	4293      	cmp	r3, r2
 8019a06:	d009      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 8019a08:	687b      	ldr	r3, [r7, #4]
 8019a0a:	681b      	ldr	r3, [r3, #0]
 8019a0c:	4a22      	ldr	r2, [pc, #136]	@ (8019a98 <HAL_DMA_Init+0x1f0>)
 8019a0e:	4293      	cmp	r3, r2
 8019a10:	d004      	beq.n	8019a1c <HAL_DMA_Init+0x174>
 8019a12:	687b      	ldr	r3, [r7, #4]
 8019a14:	681b      	ldr	r3, [r3, #0]
 8019a16:	4a21      	ldr	r2, [pc, #132]	@ (8019a9c <HAL_DMA_Init+0x1f4>)
 8019a18:	4293      	cmp	r3, r2
 8019a1a:	d108      	bne.n	8019a2e <HAL_DMA_Init+0x186>
 8019a1c:	687b      	ldr	r3, [r7, #4]
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	681a      	ldr	r2, [r3, #0]
 8019a22:	687b      	ldr	r3, [r7, #4]
 8019a24:	681b      	ldr	r3, [r3, #0]
 8019a26:	f022 0201 	bic.w	r2, r2, #1
 8019a2a:	601a      	str	r2, [r3, #0]
 8019a2c:	e007      	b.n	8019a3e <HAL_DMA_Init+0x196>
 8019a2e:	687b      	ldr	r3, [r7, #4]
 8019a30:	681b      	ldr	r3, [r3, #0]
 8019a32:	681a      	ldr	r2, [r3, #0]
 8019a34:	687b      	ldr	r3, [r7, #4]
 8019a36:	681b      	ldr	r3, [r3, #0]
 8019a38:	f022 0201 	bic.w	r2, r2, #1
 8019a3c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8019a3e:	e02f      	b.n	8019aa0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8019a40:	f7ff fd5a 	bl	80194f8 <HAL_GetTick>
 8019a44:	4602      	mov	r2, r0
 8019a46:	693b      	ldr	r3, [r7, #16]
 8019a48:	1ad3      	subs	r3, r2, r3
 8019a4a:	2b05      	cmp	r3, #5
 8019a4c:	d928      	bls.n	8019aa0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8019a4e:	687b      	ldr	r3, [r7, #4]
 8019a50:	2220      	movs	r2, #32
 8019a52:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8019a54:	687b      	ldr	r3, [r7, #4]
 8019a56:	2203      	movs	r2, #3
 8019a58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8019a5c:	2301      	movs	r3, #1
 8019a5e:	e246      	b.n	8019eee <HAL_DMA_Init+0x646>
 8019a60:	40020010 	.word	0x40020010
 8019a64:	40020028 	.word	0x40020028
 8019a68:	40020040 	.word	0x40020040
 8019a6c:	40020058 	.word	0x40020058
 8019a70:	40020070 	.word	0x40020070
 8019a74:	40020088 	.word	0x40020088
 8019a78:	400200a0 	.word	0x400200a0
 8019a7c:	400200b8 	.word	0x400200b8
 8019a80:	40020410 	.word	0x40020410
 8019a84:	40020428 	.word	0x40020428
 8019a88:	40020440 	.word	0x40020440
 8019a8c:	40020458 	.word	0x40020458
 8019a90:	40020470 	.word	0x40020470
 8019a94:	40020488 	.word	0x40020488
 8019a98:	400204a0 	.word	0x400204a0
 8019a9c:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8019aa0:	687b      	ldr	r3, [r7, #4]
 8019aa2:	681b      	ldr	r3, [r3, #0]
 8019aa4:	681b      	ldr	r3, [r3, #0]
 8019aa6:	f003 0301 	and.w	r3, r3, #1
 8019aaa:	2b00      	cmp	r3, #0
 8019aac:	d1c8      	bne.n	8019a40 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8019aae:	687b      	ldr	r3, [r7, #4]
 8019ab0:	681b      	ldr	r3, [r3, #0]
 8019ab2:	681b      	ldr	r3, [r3, #0]
 8019ab4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8019ab6:	697a      	ldr	r2, [r7, #20]
 8019ab8:	4b83      	ldr	r3, [pc, #524]	@ (8019cc8 <HAL_DMA_Init+0x420>)
 8019aba:	4013      	ands	r3, r2
 8019abc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8019abe:	687b      	ldr	r3, [r7, #4]
 8019ac0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019ac2:	687b      	ldr	r3, [r7, #4]
 8019ac4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8019ac6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019ac8:	687b      	ldr	r3, [r7, #4]
 8019aca:	691b      	ldr	r3, [r3, #16]
 8019acc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019ace:	687b      	ldr	r3, [r7, #4]
 8019ad0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8019ad2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019ad4:	687b      	ldr	r3, [r7, #4]
 8019ad6:	699b      	ldr	r3, [r3, #24]
 8019ad8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019ada:	687b      	ldr	r3, [r7, #4]
 8019adc:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8019ade:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8019ae0:	687b      	ldr	r3, [r7, #4]
 8019ae2:	6a1b      	ldr	r3, [r3, #32]
 8019ae4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8019ae6:	697a      	ldr	r2, [r7, #20]
 8019ae8:	4313      	orrs	r3, r2
 8019aea:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8019aec:	687b      	ldr	r3, [r7, #4]
 8019aee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019af0:	2b04      	cmp	r3, #4
 8019af2:	d107      	bne.n	8019b04 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8019af4:	687b      	ldr	r3, [r7, #4]
 8019af6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019af8:	687b      	ldr	r3, [r7, #4]
 8019afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019afc:	4313      	orrs	r3, r2
 8019afe:	697a      	ldr	r2, [r7, #20]
 8019b00:	4313      	orrs	r3, r2
 8019b02:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8019b04:	4b71      	ldr	r3, [pc, #452]	@ (8019ccc <HAL_DMA_Init+0x424>)
 8019b06:	681a      	ldr	r2, [r3, #0]
 8019b08:	4b71      	ldr	r3, [pc, #452]	@ (8019cd0 <HAL_DMA_Init+0x428>)
 8019b0a:	4013      	ands	r3, r2
 8019b0c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019b10:	d328      	bcc.n	8019b64 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8019b12:	687b      	ldr	r3, [r7, #4]
 8019b14:	685b      	ldr	r3, [r3, #4]
 8019b16:	2b28      	cmp	r3, #40	@ 0x28
 8019b18:	d903      	bls.n	8019b22 <HAL_DMA_Init+0x27a>
 8019b1a:	687b      	ldr	r3, [r7, #4]
 8019b1c:	685b      	ldr	r3, [r3, #4]
 8019b1e:	2b2e      	cmp	r3, #46	@ 0x2e
 8019b20:	d917      	bls.n	8019b52 <HAL_DMA_Init+0x2aa>
 8019b22:	687b      	ldr	r3, [r7, #4]
 8019b24:	685b      	ldr	r3, [r3, #4]
 8019b26:	2b3e      	cmp	r3, #62	@ 0x3e
 8019b28:	d903      	bls.n	8019b32 <HAL_DMA_Init+0x28a>
 8019b2a:	687b      	ldr	r3, [r7, #4]
 8019b2c:	685b      	ldr	r3, [r3, #4]
 8019b2e:	2b42      	cmp	r3, #66	@ 0x42
 8019b30:	d90f      	bls.n	8019b52 <HAL_DMA_Init+0x2aa>
 8019b32:	687b      	ldr	r3, [r7, #4]
 8019b34:	685b      	ldr	r3, [r3, #4]
 8019b36:	2b46      	cmp	r3, #70	@ 0x46
 8019b38:	d903      	bls.n	8019b42 <HAL_DMA_Init+0x29a>
 8019b3a:	687b      	ldr	r3, [r7, #4]
 8019b3c:	685b      	ldr	r3, [r3, #4]
 8019b3e:	2b48      	cmp	r3, #72	@ 0x48
 8019b40:	d907      	bls.n	8019b52 <HAL_DMA_Init+0x2aa>
 8019b42:	687b      	ldr	r3, [r7, #4]
 8019b44:	685b      	ldr	r3, [r3, #4]
 8019b46:	2b4e      	cmp	r3, #78	@ 0x4e
 8019b48:	d905      	bls.n	8019b56 <HAL_DMA_Init+0x2ae>
 8019b4a:	687b      	ldr	r3, [r7, #4]
 8019b4c:	685b      	ldr	r3, [r3, #4]
 8019b4e:	2b52      	cmp	r3, #82	@ 0x52
 8019b50:	d801      	bhi.n	8019b56 <HAL_DMA_Init+0x2ae>
 8019b52:	2301      	movs	r3, #1
 8019b54:	e000      	b.n	8019b58 <HAL_DMA_Init+0x2b0>
 8019b56:	2300      	movs	r3, #0
 8019b58:	2b00      	cmp	r3, #0
 8019b5a:	d003      	beq.n	8019b64 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8019b5c:	697b      	ldr	r3, [r7, #20]
 8019b5e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8019b62:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8019b64:	687b      	ldr	r3, [r7, #4]
 8019b66:	681b      	ldr	r3, [r3, #0]
 8019b68:	697a      	ldr	r2, [r7, #20]
 8019b6a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8019b6c:	687b      	ldr	r3, [r7, #4]
 8019b6e:	681b      	ldr	r3, [r3, #0]
 8019b70:	695b      	ldr	r3, [r3, #20]
 8019b72:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8019b74:	697b      	ldr	r3, [r7, #20]
 8019b76:	f023 0307 	bic.w	r3, r3, #7
 8019b7a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8019b7c:	687b      	ldr	r3, [r7, #4]
 8019b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b80:	697a      	ldr	r2, [r7, #20]
 8019b82:	4313      	orrs	r3, r2
 8019b84:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8019b86:	687b      	ldr	r3, [r7, #4]
 8019b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b8a:	2b04      	cmp	r3, #4
 8019b8c:	d117      	bne.n	8019bbe <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 8019b8e:	687b      	ldr	r3, [r7, #4]
 8019b90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019b92:	697a      	ldr	r2, [r7, #20]
 8019b94:	4313      	orrs	r3, r2
 8019b96:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8019b98:	687b      	ldr	r3, [r7, #4]
 8019b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019b9c:	2b00      	cmp	r3, #0
 8019b9e:	d00e      	beq.n	8019bbe <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8019ba0:	6878      	ldr	r0, [r7, #4]
 8019ba2:	f001 fbff 	bl	801b3a4 <DMA_CheckFifoParam>
 8019ba6:	4603      	mov	r3, r0
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d008      	beq.n	8019bbe <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8019bac:	687b      	ldr	r3, [r7, #4]
 8019bae:	2240      	movs	r2, #64	@ 0x40
 8019bb0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8019bb2:	687b      	ldr	r3, [r7, #4]
 8019bb4:	2201      	movs	r2, #1
 8019bb6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 8019bba:	2301      	movs	r3, #1
 8019bbc:	e197      	b.n	8019eee <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 8019bbe:	687b      	ldr	r3, [r7, #4]
 8019bc0:	681b      	ldr	r3, [r3, #0]
 8019bc2:	697a      	ldr	r2, [r7, #20]
 8019bc4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8019bc6:	6878      	ldr	r0, [r7, #4]
 8019bc8:	f001 fb3a 	bl	801b240 <DMA_CalcBaseAndBitshift>
 8019bcc:	4603      	mov	r3, r0
 8019bce:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8019bd0:	687b      	ldr	r3, [r7, #4]
 8019bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019bd4:	f003 031f 	and.w	r3, r3, #31
 8019bd8:	223f      	movs	r2, #63	@ 0x3f
 8019bda:	409a      	lsls	r2, r3
 8019bdc:	68bb      	ldr	r3, [r7, #8]
 8019bde:	609a      	str	r2, [r3, #8]
 8019be0:	e0cd      	b.n	8019d7e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8019be2:	687b      	ldr	r3, [r7, #4]
 8019be4:	681b      	ldr	r3, [r3, #0]
 8019be6:	4a3b      	ldr	r2, [pc, #236]	@ (8019cd4 <HAL_DMA_Init+0x42c>)
 8019be8:	4293      	cmp	r3, r2
 8019bea:	d022      	beq.n	8019c32 <HAL_DMA_Init+0x38a>
 8019bec:	687b      	ldr	r3, [r7, #4]
 8019bee:	681b      	ldr	r3, [r3, #0]
 8019bf0:	4a39      	ldr	r2, [pc, #228]	@ (8019cd8 <HAL_DMA_Init+0x430>)
 8019bf2:	4293      	cmp	r3, r2
 8019bf4:	d01d      	beq.n	8019c32 <HAL_DMA_Init+0x38a>
 8019bf6:	687b      	ldr	r3, [r7, #4]
 8019bf8:	681b      	ldr	r3, [r3, #0]
 8019bfa:	4a38      	ldr	r2, [pc, #224]	@ (8019cdc <HAL_DMA_Init+0x434>)
 8019bfc:	4293      	cmp	r3, r2
 8019bfe:	d018      	beq.n	8019c32 <HAL_DMA_Init+0x38a>
 8019c00:	687b      	ldr	r3, [r7, #4]
 8019c02:	681b      	ldr	r3, [r3, #0]
 8019c04:	4a36      	ldr	r2, [pc, #216]	@ (8019ce0 <HAL_DMA_Init+0x438>)
 8019c06:	4293      	cmp	r3, r2
 8019c08:	d013      	beq.n	8019c32 <HAL_DMA_Init+0x38a>
 8019c0a:	687b      	ldr	r3, [r7, #4]
 8019c0c:	681b      	ldr	r3, [r3, #0]
 8019c0e:	4a35      	ldr	r2, [pc, #212]	@ (8019ce4 <HAL_DMA_Init+0x43c>)
 8019c10:	4293      	cmp	r3, r2
 8019c12:	d00e      	beq.n	8019c32 <HAL_DMA_Init+0x38a>
 8019c14:	687b      	ldr	r3, [r7, #4]
 8019c16:	681b      	ldr	r3, [r3, #0]
 8019c18:	4a33      	ldr	r2, [pc, #204]	@ (8019ce8 <HAL_DMA_Init+0x440>)
 8019c1a:	4293      	cmp	r3, r2
 8019c1c:	d009      	beq.n	8019c32 <HAL_DMA_Init+0x38a>
 8019c1e:	687b      	ldr	r3, [r7, #4]
 8019c20:	681b      	ldr	r3, [r3, #0]
 8019c22:	4a32      	ldr	r2, [pc, #200]	@ (8019cec <HAL_DMA_Init+0x444>)
 8019c24:	4293      	cmp	r3, r2
 8019c26:	d004      	beq.n	8019c32 <HAL_DMA_Init+0x38a>
 8019c28:	687b      	ldr	r3, [r7, #4]
 8019c2a:	681b      	ldr	r3, [r3, #0]
 8019c2c:	4a30      	ldr	r2, [pc, #192]	@ (8019cf0 <HAL_DMA_Init+0x448>)
 8019c2e:	4293      	cmp	r3, r2
 8019c30:	d101      	bne.n	8019c36 <HAL_DMA_Init+0x38e>
 8019c32:	2301      	movs	r3, #1
 8019c34:	e000      	b.n	8019c38 <HAL_DMA_Init+0x390>
 8019c36:	2300      	movs	r3, #0
 8019c38:	2b00      	cmp	r3, #0
 8019c3a:	f000 8097 	beq.w	8019d6c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8019c3e:	687b      	ldr	r3, [r7, #4]
 8019c40:	681b      	ldr	r3, [r3, #0]
 8019c42:	4a24      	ldr	r2, [pc, #144]	@ (8019cd4 <HAL_DMA_Init+0x42c>)
 8019c44:	4293      	cmp	r3, r2
 8019c46:	d021      	beq.n	8019c8c <HAL_DMA_Init+0x3e4>
 8019c48:	687b      	ldr	r3, [r7, #4]
 8019c4a:	681b      	ldr	r3, [r3, #0]
 8019c4c:	4a22      	ldr	r2, [pc, #136]	@ (8019cd8 <HAL_DMA_Init+0x430>)
 8019c4e:	4293      	cmp	r3, r2
 8019c50:	d01c      	beq.n	8019c8c <HAL_DMA_Init+0x3e4>
 8019c52:	687b      	ldr	r3, [r7, #4]
 8019c54:	681b      	ldr	r3, [r3, #0]
 8019c56:	4a21      	ldr	r2, [pc, #132]	@ (8019cdc <HAL_DMA_Init+0x434>)
 8019c58:	4293      	cmp	r3, r2
 8019c5a:	d017      	beq.n	8019c8c <HAL_DMA_Init+0x3e4>
 8019c5c:	687b      	ldr	r3, [r7, #4]
 8019c5e:	681b      	ldr	r3, [r3, #0]
 8019c60:	4a1f      	ldr	r2, [pc, #124]	@ (8019ce0 <HAL_DMA_Init+0x438>)
 8019c62:	4293      	cmp	r3, r2
 8019c64:	d012      	beq.n	8019c8c <HAL_DMA_Init+0x3e4>
 8019c66:	687b      	ldr	r3, [r7, #4]
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	4a1e      	ldr	r2, [pc, #120]	@ (8019ce4 <HAL_DMA_Init+0x43c>)
 8019c6c:	4293      	cmp	r3, r2
 8019c6e:	d00d      	beq.n	8019c8c <HAL_DMA_Init+0x3e4>
 8019c70:	687b      	ldr	r3, [r7, #4]
 8019c72:	681b      	ldr	r3, [r3, #0]
 8019c74:	4a1c      	ldr	r2, [pc, #112]	@ (8019ce8 <HAL_DMA_Init+0x440>)
 8019c76:	4293      	cmp	r3, r2
 8019c78:	d008      	beq.n	8019c8c <HAL_DMA_Init+0x3e4>
 8019c7a:	687b      	ldr	r3, [r7, #4]
 8019c7c:	681b      	ldr	r3, [r3, #0]
 8019c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8019cec <HAL_DMA_Init+0x444>)
 8019c80:	4293      	cmp	r3, r2
 8019c82:	d003      	beq.n	8019c8c <HAL_DMA_Init+0x3e4>
 8019c84:	687b      	ldr	r3, [r7, #4]
 8019c86:	681b      	ldr	r3, [r3, #0]
 8019c88:	4a19      	ldr	r2, [pc, #100]	@ (8019cf0 <HAL_DMA_Init+0x448>)
 8019c8a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8019c8c:	687b      	ldr	r3, [r7, #4]
 8019c8e:	2202      	movs	r2, #2
 8019c90:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8019c94:	687b      	ldr	r3, [r7, #4]
 8019c96:	2200      	movs	r2, #0
 8019c98:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8019c9c:	687b      	ldr	r3, [r7, #4]
 8019c9e:	681b      	ldr	r3, [r3, #0]
 8019ca0:	681b      	ldr	r3, [r3, #0]
 8019ca2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8019ca4:	697a      	ldr	r2, [r7, #20]
 8019ca6:	4b13      	ldr	r3, [pc, #76]	@ (8019cf4 <HAL_DMA_Init+0x44c>)
 8019ca8:	4013      	ands	r3, r2
 8019caa:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8019cac:	687b      	ldr	r3, [r7, #4]
 8019cae:	689b      	ldr	r3, [r3, #8]
 8019cb0:	2b40      	cmp	r3, #64	@ 0x40
 8019cb2:	d021      	beq.n	8019cf8 <HAL_DMA_Init+0x450>
 8019cb4:	687b      	ldr	r3, [r7, #4]
 8019cb6:	689b      	ldr	r3, [r3, #8]
 8019cb8:	2b80      	cmp	r3, #128	@ 0x80
 8019cba:	d102      	bne.n	8019cc2 <HAL_DMA_Init+0x41a>
 8019cbc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8019cc0:	e01b      	b.n	8019cfa <HAL_DMA_Init+0x452>
 8019cc2:	2300      	movs	r3, #0
 8019cc4:	e019      	b.n	8019cfa <HAL_DMA_Init+0x452>
 8019cc6:	bf00      	nop
 8019cc8:	fe10803f 	.word	0xfe10803f
 8019ccc:	5c001000 	.word	0x5c001000
 8019cd0:	ffff0000 	.word	0xffff0000
 8019cd4:	58025408 	.word	0x58025408
 8019cd8:	5802541c 	.word	0x5802541c
 8019cdc:	58025430 	.word	0x58025430
 8019ce0:	58025444 	.word	0x58025444
 8019ce4:	58025458 	.word	0x58025458
 8019ce8:	5802546c 	.word	0x5802546c
 8019cec:	58025480 	.word	0x58025480
 8019cf0:	58025494 	.word	0x58025494
 8019cf4:	fffe000f 	.word	0xfffe000f
 8019cf8:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8019cfa:	687a      	ldr	r2, [r7, #4]
 8019cfc:	68d2      	ldr	r2, [r2, #12]
 8019cfe:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8019d00:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	691b      	ldr	r3, [r3, #16]
 8019d06:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8019d08:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8019d0a:	687b      	ldr	r3, [r7, #4]
 8019d0c:	695b      	ldr	r3, [r3, #20]
 8019d0e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8019d10:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8019d12:	687b      	ldr	r3, [r7, #4]
 8019d14:	699b      	ldr	r3, [r3, #24]
 8019d16:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8019d18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8019d1a:	687b      	ldr	r3, [r7, #4]
 8019d1c:	69db      	ldr	r3, [r3, #28]
 8019d1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8019d20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8019d22:	687b      	ldr	r3, [r7, #4]
 8019d24:	6a1b      	ldr	r3, [r3, #32]
 8019d26:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8019d28:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8019d2a:	697a      	ldr	r2, [r7, #20]
 8019d2c:	4313      	orrs	r3, r2
 8019d2e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8019d30:	687b      	ldr	r3, [r7, #4]
 8019d32:	681b      	ldr	r3, [r3, #0]
 8019d34:	697a      	ldr	r2, [r7, #20]
 8019d36:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	461a      	mov	r2, r3
 8019d3e:	4b6e      	ldr	r3, [pc, #440]	@ (8019ef8 <HAL_DMA_Init+0x650>)
 8019d40:	4413      	add	r3, r2
 8019d42:	4a6e      	ldr	r2, [pc, #440]	@ (8019efc <HAL_DMA_Init+0x654>)
 8019d44:	fba2 2303 	umull	r2, r3, r2, r3
 8019d48:	091b      	lsrs	r3, r3, #4
 8019d4a:	009a      	lsls	r2, r3, #2
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8019d50:	6878      	ldr	r0, [r7, #4]
 8019d52:	f001 fa75 	bl	801b240 <DMA_CalcBaseAndBitshift>
 8019d56:	4603      	mov	r3, r0
 8019d58:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8019d5a:	687b      	ldr	r3, [r7, #4]
 8019d5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8019d5e:	f003 031f 	and.w	r3, r3, #31
 8019d62:	2201      	movs	r2, #1
 8019d64:	409a      	lsls	r2, r3
 8019d66:	68fb      	ldr	r3, [r7, #12]
 8019d68:	605a      	str	r2, [r3, #4]
 8019d6a:	e008      	b.n	8019d7e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8019d6c:	687b      	ldr	r3, [r7, #4]
 8019d6e:	2240      	movs	r2, #64	@ 0x40
 8019d70:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	2203      	movs	r2, #3
 8019d76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8019d7a:	2301      	movs	r3, #1
 8019d7c:	e0b7      	b.n	8019eee <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	681b      	ldr	r3, [r3, #0]
 8019d82:	4a5f      	ldr	r2, [pc, #380]	@ (8019f00 <HAL_DMA_Init+0x658>)
 8019d84:	4293      	cmp	r3, r2
 8019d86:	d072      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019d88:	687b      	ldr	r3, [r7, #4]
 8019d8a:	681b      	ldr	r3, [r3, #0]
 8019d8c:	4a5d      	ldr	r2, [pc, #372]	@ (8019f04 <HAL_DMA_Init+0x65c>)
 8019d8e:	4293      	cmp	r3, r2
 8019d90:	d06d      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	681b      	ldr	r3, [r3, #0]
 8019d96:	4a5c      	ldr	r2, [pc, #368]	@ (8019f08 <HAL_DMA_Init+0x660>)
 8019d98:	4293      	cmp	r3, r2
 8019d9a:	d068      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019d9c:	687b      	ldr	r3, [r7, #4]
 8019d9e:	681b      	ldr	r3, [r3, #0]
 8019da0:	4a5a      	ldr	r2, [pc, #360]	@ (8019f0c <HAL_DMA_Init+0x664>)
 8019da2:	4293      	cmp	r3, r2
 8019da4:	d063      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	4a59      	ldr	r2, [pc, #356]	@ (8019f10 <HAL_DMA_Init+0x668>)
 8019dac:	4293      	cmp	r3, r2
 8019dae:	d05e      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	681b      	ldr	r3, [r3, #0]
 8019db4:	4a57      	ldr	r2, [pc, #348]	@ (8019f14 <HAL_DMA_Init+0x66c>)
 8019db6:	4293      	cmp	r3, r2
 8019db8:	d059      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019dba:	687b      	ldr	r3, [r7, #4]
 8019dbc:	681b      	ldr	r3, [r3, #0]
 8019dbe:	4a56      	ldr	r2, [pc, #344]	@ (8019f18 <HAL_DMA_Init+0x670>)
 8019dc0:	4293      	cmp	r3, r2
 8019dc2:	d054      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019dc4:	687b      	ldr	r3, [r7, #4]
 8019dc6:	681b      	ldr	r3, [r3, #0]
 8019dc8:	4a54      	ldr	r2, [pc, #336]	@ (8019f1c <HAL_DMA_Init+0x674>)
 8019dca:	4293      	cmp	r3, r2
 8019dcc:	d04f      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019dce:	687b      	ldr	r3, [r7, #4]
 8019dd0:	681b      	ldr	r3, [r3, #0]
 8019dd2:	4a53      	ldr	r2, [pc, #332]	@ (8019f20 <HAL_DMA_Init+0x678>)
 8019dd4:	4293      	cmp	r3, r2
 8019dd6:	d04a      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019dd8:	687b      	ldr	r3, [r7, #4]
 8019dda:	681b      	ldr	r3, [r3, #0]
 8019ddc:	4a51      	ldr	r2, [pc, #324]	@ (8019f24 <HAL_DMA_Init+0x67c>)
 8019dde:	4293      	cmp	r3, r2
 8019de0:	d045      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019de2:	687b      	ldr	r3, [r7, #4]
 8019de4:	681b      	ldr	r3, [r3, #0]
 8019de6:	4a50      	ldr	r2, [pc, #320]	@ (8019f28 <HAL_DMA_Init+0x680>)
 8019de8:	4293      	cmp	r3, r2
 8019dea:	d040      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019dec:	687b      	ldr	r3, [r7, #4]
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	4a4e      	ldr	r2, [pc, #312]	@ (8019f2c <HAL_DMA_Init+0x684>)
 8019df2:	4293      	cmp	r3, r2
 8019df4:	d03b      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019df6:	687b      	ldr	r3, [r7, #4]
 8019df8:	681b      	ldr	r3, [r3, #0]
 8019dfa:	4a4d      	ldr	r2, [pc, #308]	@ (8019f30 <HAL_DMA_Init+0x688>)
 8019dfc:	4293      	cmp	r3, r2
 8019dfe:	d036      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019e00:	687b      	ldr	r3, [r7, #4]
 8019e02:	681b      	ldr	r3, [r3, #0]
 8019e04:	4a4b      	ldr	r2, [pc, #300]	@ (8019f34 <HAL_DMA_Init+0x68c>)
 8019e06:	4293      	cmp	r3, r2
 8019e08:	d031      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019e0a:	687b      	ldr	r3, [r7, #4]
 8019e0c:	681b      	ldr	r3, [r3, #0]
 8019e0e:	4a4a      	ldr	r2, [pc, #296]	@ (8019f38 <HAL_DMA_Init+0x690>)
 8019e10:	4293      	cmp	r3, r2
 8019e12:	d02c      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019e14:	687b      	ldr	r3, [r7, #4]
 8019e16:	681b      	ldr	r3, [r3, #0]
 8019e18:	4a48      	ldr	r2, [pc, #288]	@ (8019f3c <HAL_DMA_Init+0x694>)
 8019e1a:	4293      	cmp	r3, r2
 8019e1c:	d027      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019e1e:	687b      	ldr	r3, [r7, #4]
 8019e20:	681b      	ldr	r3, [r3, #0]
 8019e22:	4a47      	ldr	r2, [pc, #284]	@ (8019f40 <HAL_DMA_Init+0x698>)
 8019e24:	4293      	cmp	r3, r2
 8019e26:	d022      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019e28:	687b      	ldr	r3, [r7, #4]
 8019e2a:	681b      	ldr	r3, [r3, #0]
 8019e2c:	4a45      	ldr	r2, [pc, #276]	@ (8019f44 <HAL_DMA_Init+0x69c>)
 8019e2e:	4293      	cmp	r3, r2
 8019e30:	d01d      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019e32:	687b      	ldr	r3, [r7, #4]
 8019e34:	681b      	ldr	r3, [r3, #0]
 8019e36:	4a44      	ldr	r2, [pc, #272]	@ (8019f48 <HAL_DMA_Init+0x6a0>)
 8019e38:	4293      	cmp	r3, r2
 8019e3a:	d018      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019e3c:	687b      	ldr	r3, [r7, #4]
 8019e3e:	681b      	ldr	r3, [r3, #0]
 8019e40:	4a42      	ldr	r2, [pc, #264]	@ (8019f4c <HAL_DMA_Init+0x6a4>)
 8019e42:	4293      	cmp	r3, r2
 8019e44:	d013      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019e46:	687b      	ldr	r3, [r7, #4]
 8019e48:	681b      	ldr	r3, [r3, #0]
 8019e4a:	4a41      	ldr	r2, [pc, #260]	@ (8019f50 <HAL_DMA_Init+0x6a8>)
 8019e4c:	4293      	cmp	r3, r2
 8019e4e:	d00e      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019e50:	687b      	ldr	r3, [r7, #4]
 8019e52:	681b      	ldr	r3, [r3, #0]
 8019e54:	4a3f      	ldr	r2, [pc, #252]	@ (8019f54 <HAL_DMA_Init+0x6ac>)
 8019e56:	4293      	cmp	r3, r2
 8019e58:	d009      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019e5a:	687b      	ldr	r3, [r7, #4]
 8019e5c:	681b      	ldr	r3, [r3, #0]
 8019e5e:	4a3e      	ldr	r2, [pc, #248]	@ (8019f58 <HAL_DMA_Init+0x6b0>)
 8019e60:	4293      	cmp	r3, r2
 8019e62:	d004      	beq.n	8019e6e <HAL_DMA_Init+0x5c6>
 8019e64:	687b      	ldr	r3, [r7, #4]
 8019e66:	681b      	ldr	r3, [r3, #0]
 8019e68:	4a3c      	ldr	r2, [pc, #240]	@ (8019f5c <HAL_DMA_Init+0x6b4>)
 8019e6a:	4293      	cmp	r3, r2
 8019e6c:	d101      	bne.n	8019e72 <HAL_DMA_Init+0x5ca>
 8019e6e:	2301      	movs	r3, #1
 8019e70:	e000      	b.n	8019e74 <HAL_DMA_Init+0x5cc>
 8019e72:	2300      	movs	r3, #0
 8019e74:	2b00      	cmp	r3, #0
 8019e76:	d032      	beq.n	8019ede <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8019e78:	6878      	ldr	r0, [r7, #4]
 8019e7a:	f001 fb0f 	bl	801b49c <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8019e7e:	687b      	ldr	r3, [r7, #4]
 8019e80:	689b      	ldr	r3, [r3, #8]
 8019e82:	2b80      	cmp	r3, #128	@ 0x80
 8019e84:	d102      	bne.n	8019e8c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	2200      	movs	r2, #0
 8019e8a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8019e8c:	687b      	ldr	r3, [r7, #4]
 8019e8e:	685a      	ldr	r2, [r3, #4]
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8019e94:	b2d2      	uxtb	r2, r2
 8019e96:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8019e98:	687b      	ldr	r3, [r7, #4]
 8019e9a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8019e9c:	687a      	ldr	r2, [r7, #4]
 8019e9e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8019ea0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8019ea2:	687b      	ldr	r3, [r7, #4]
 8019ea4:	685b      	ldr	r3, [r3, #4]
 8019ea6:	2b00      	cmp	r3, #0
 8019ea8:	d010      	beq.n	8019ecc <HAL_DMA_Init+0x624>
 8019eaa:	687b      	ldr	r3, [r7, #4]
 8019eac:	685b      	ldr	r3, [r3, #4]
 8019eae:	2b08      	cmp	r3, #8
 8019eb0:	d80c      	bhi.n	8019ecc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8019eb2:	6878      	ldr	r0, [r7, #4]
 8019eb4:	f001 fb8c 	bl	801b5d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8019eb8:	687b      	ldr	r3, [r7, #4]
 8019eba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019ebc:	2200      	movs	r2, #0
 8019ebe:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8019ec0:	687b      	ldr	r3, [r7, #4]
 8019ec2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8019ec4:	687a      	ldr	r2, [r7, #4]
 8019ec6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8019ec8:	605a      	str	r2, [r3, #4]
 8019eca:	e008      	b.n	8019ede <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8019ecc:	687b      	ldr	r3, [r7, #4]
 8019ece:	2200      	movs	r2, #0
 8019ed0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8019ed2:	687b      	ldr	r3, [r7, #4]
 8019ed4:	2200      	movs	r2, #0
 8019ed6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8019ed8:	687b      	ldr	r3, [r7, #4]
 8019eda:	2200      	movs	r2, #0
 8019edc:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8019ede:	687b      	ldr	r3, [r7, #4]
 8019ee0:	2200      	movs	r2, #0
 8019ee2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	2201      	movs	r2, #1
 8019ee8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8019eec:	2300      	movs	r3, #0
}
 8019eee:	4618      	mov	r0, r3
 8019ef0:	3718      	adds	r7, #24
 8019ef2:	46bd      	mov	sp, r7
 8019ef4:	bd80      	pop	{r7, pc}
 8019ef6:	bf00      	nop
 8019ef8:	a7fdabf8 	.word	0xa7fdabf8
 8019efc:	cccccccd 	.word	0xcccccccd
 8019f00:	40020010 	.word	0x40020010
 8019f04:	40020028 	.word	0x40020028
 8019f08:	40020040 	.word	0x40020040
 8019f0c:	40020058 	.word	0x40020058
 8019f10:	40020070 	.word	0x40020070
 8019f14:	40020088 	.word	0x40020088
 8019f18:	400200a0 	.word	0x400200a0
 8019f1c:	400200b8 	.word	0x400200b8
 8019f20:	40020410 	.word	0x40020410
 8019f24:	40020428 	.word	0x40020428
 8019f28:	40020440 	.word	0x40020440
 8019f2c:	40020458 	.word	0x40020458
 8019f30:	40020470 	.word	0x40020470
 8019f34:	40020488 	.word	0x40020488
 8019f38:	400204a0 	.word	0x400204a0
 8019f3c:	400204b8 	.word	0x400204b8
 8019f40:	58025408 	.word	0x58025408
 8019f44:	5802541c 	.word	0x5802541c
 8019f48:	58025430 	.word	0x58025430
 8019f4c:	58025444 	.word	0x58025444
 8019f50:	58025458 	.word	0x58025458
 8019f54:	5802546c 	.word	0x5802546c
 8019f58:	58025480 	.word	0x58025480
 8019f5c:	58025494 	.word	0x58025494

08019f60 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8019f60:	b580      	push	{r7, lr}
 8019f62:	b084      	sub	sp, #16
 8019f64:	af00      	add	r7, sp, #0
 8019f66:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8019f68:	687b      	ldr	r3, [r7, #4]
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d101      	bne.n	8019f72 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8019f6e:	2301      	movs	r3, #1
 8019f70:	e237      	b.n	801a3e2 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8019f72:	687b      	ldr	r3, [r7, #4]
 8019f74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8019f78:	b2db      	uxtb	r3, r3
 8019f7a:	2b02      	cmp	r3, #2
 8019f7c:	d004      	beq.n	8019f88 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8019f7e:	687b      	ldr	r3, [r7, #4]
 8019f80:	2280      	movs	r2, #128	@ 0x80
 8019f82:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8019f84:	2301      	movs	r3, #1
 8019f86:	e22c      	b.n	801a3e2 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8019f88:	687b      	ldr	r3, [r7, #4]
 8019f8a:	681b      	ldr	r3, [r3, #0]
 8019f8c:	4a5c      	ldr	r2, [pc, #368]	@ (801a100 <HAL_DMA_Abort_IT+0x1a0>)
 8019f8e:	4293      	cmp	r3, r2
 8019f90:	d04a      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 8019f92:	687b      	ldr	r3, [r7, #4]
 8019f94:	681b      	ldr	r3, [r3, #0]
 8019f96:	4a5b      	ldr	r2, [pc, #364]	@ (801a104 <HAL_DMA_Abort_IT+0x1a4>)
 8019f98:	4293      	cmp	r3, r2
 8019f9a:	d045      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 8019f9c:	687b      	ldr	r3, [r7, #4]
 8019f9e:	681b      	ldr	r3, [r3, #0]
 8019fa0:	4a59      	ldr	r2, [pc, #356]	@ (801a108 <HAL_DMA_Abort_IT+0x1a8>)
 8019fa2:	4293      	cmp	r3, r2
 8019fa4:	d040      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 8019fa6:	687b      	ldr	r3, [r7, #4]
 8019fa8:	681b      	ldr	r3, [r3, #0]
 8019faa:	4a58      	ldr	r2, [pc, #352]	@ (801a10c <HAL_DMA_Abort_IT+0x1ac>)
 8019fac:	4293      	cmp	r3, r2
 8019fae:	d03b      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 8019fb0:	687b      	ldr	r3, [r7, #4]
 8019fb2:	681b      	ldr	r3, [r3, #0]
 8019fb4:	4a56      	ldr	r2, [pc, #344]	@ (801a110 <HAL_DMA_Abort_IT+0x1b0>)
 8019fb6:	4293      	cmp	r3, r2
 8019fb8:	d036      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 8019fba:	687b      	ldr	r3, [r7, #4]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	4a55      	ldr	r2, [pc, #340]	@ (801a114 <HAL_DMA_Abort_IT+0x1b4>)
 8019fc0:	4293      	cmp	r3, r2
 8019fc2:	d031      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 8019fc4:	687b      	ldr	r3, [r7, #4]
 8019fc6:	681b      	ldr	r3, [r3, #0]
 8019fc8:	4a53      	ldr	r2, [pc, #332]	@ (801a118 <HAL_DMA_Abort_IT+0x1b8>)
 8019fca:	4293      	cmp	r3, r2
 8019fcc:	d02c      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 8019fce:	687b      	ldr	r3, [r7, #4]
 8019fd0:	681b      	ldr	r3, [r3, #0]
 8019fd2:	4a52      	ldr	r2, [pc, #328]	@ (801a11c <HAL_DMA_Abort_IT+0x1bc>)
 8019fd4:	4293      	cmp	r3, r2
 8019fd6:	d027      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 8019fd8:	687b      	ldr	r3, [r7, #4]
 8019fda:	681b      	ldr	r3, [r3, #0]
 8019fdc:	4a50      	ldr	r2, [pc, #320]	@ (801a120 <HAL_DMA_Abort_IT+0x1c0>)
 8019fde:	4293      	cmp	r3, r2
 8019fe0:	d022      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 8019fe2:	687b      	ldr	r3, [r7, #4]
 8019fe4:	681b      	ldr	r3, [r3, #0]
 8019fe6:	4a4f      	ldr	r2, [pc, #316]	@ (801a124 <HAL_DMA_Abort_IT+0x1c4>)
 8019fe8:	4293      	cmp	r3, r2
 8019fea:	d01d      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 8019fec:	687b      	ldr	r3, [r7, #4]
 8019fee:	681b      	ldr	r3, [r3, #0]
 8019ff0:	4a4d      	ldr	r2, [pc, #308]	@ (801a128 <HAL_DMA_Abort_IT+0x1c8>)
 8019ff2:	4293      	cmp	r3, r2
 8019ff4:	d018      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 8019ff6:	687b      	ldr	r3, [r7, #4]
 8019ff8:	681b      	ldr	r3, [r3, #0]
 8019ffa:	4a4c      	ldr	r2, [pc, #304]	@ (801a12c <HAL_DMA_Abort_IT+0x1cc>)
 8019ffc:	4293      	cmp	r3, r2
 8019ffe:	d013      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 801a000:	687b      	ldr	r3, [r7, #4]
 801a002:	681b      	ldr	r3, [r3, #0]
 801a004:	4a4a      	ldr	r2, [pc, #296]	@ (801a130 <HAL_DMA_Abort_IT+0x1d0>)
 801a006:	4293      	cmp	r3, r2
 801a008:	d00e      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 801a00a:	687b      	ldr	r3, [r7, #4]
 801a00c:	681b      	ldr	r3, [r3, #0]
 801a00e:	4a49      	ldr	r2, [pc, #292]	@ (801a134 <HAL_DMA_Abort_IT+0x1d4>)
 801a010:	4293      	cmp	r3, r2
 801a012:	d009      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 801a014:	687b      	ldr	r3, [r7, #4]
 801a016:	681b      	ldr	r3, [r3, #0]
 801a018:	4a47      	ldr	r2, [pc, #284]	@ (801a138 <HAL_DMA_Abort_IT+0x1d8>)
 801a01a:	4293      	cmp	r3, r2
 801a01c:	d004      	beq.n	801a028 <HAL_DMA_Abort_IT+0xc8>
 801a01e:	687b      	ldr	r3, [r7, #4]
 801a020:	681b      	ldr	r3, [r3, #0]
 801a022:	4a46      	ldr	r2, [pc, #280]	@ (801a13c <HAL_DMA_Abort_IT+0x1dc>)
 801a024:	4293      	cmp	r3, r2
 801a026:	d101      	bne.n	801a02c <HAL_DMA_Abort_IT+0xcc>
 801a028:	2301      	movs	r3, #1
 801a02a:	e000      	b.n	801a02e <HAL_DMA_Abort_IT+0xce>
 801a02c:	2300      	movs	r3, #0
 801a02e:	2b00      	cmp	r3, #0
 801a030:	f000 8086 	beq.w	801a140 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 801a034:	687b      	ldr	r3, [r7, #4]
 801a036:	2204      	movs	r2, #4
 801a038:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 801a03c:	687b      	ldr	r3, [r7, #4]
 801a03e:	681b      	ldr	r3, [r3, #0]
 801a040:	4a2f      	ldr	r2, [pc, #188]	@ (801a100 <HAL_DMA_Abort_IT+0x1a0>)
 801a042:	4293      	cmp	r3, r2
 801a044:	d04a      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a046:	687b      	ldr	r3, [r7, #4]
 801a048:	681b      	ldr	r3, [r3, #0]
 801a04a:	4a2e      	ldr	r2, [pc, #184]	@ (801a104 <HAL_DMA_Abort_IT+0x1a4>)
 801a04c:	4293      	cmp	r3, r2
 801a04e:	d045      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a050:	687b      	ldr	r3, [r7, #4]
 801a052:	681b      	ldr	r3, [r3, #0]
 801a054:	4a2c      	ldr	r2, [pc, #176]	@ (801a108 <HAL_DMA_Abort_IT+0x1a8>)
 801a056:	4293      	cmp	r3, r2
 801a058:	d040      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a05a:	687b      	ldr	r3, [r7, #4]
 801a05c:	681b      	ldr	r3, [r3, #0]
 801a05e:	4a2b      	ldr	r2, [pc, #172]	@ (801a10c <HAL_DMA_Abort_IT+0x1ac>)
 801a060:	4293      	cmp	r3, r2
 801a062:	d03b      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a064:	687b      	ldr	r3, [r7, #4]
 801a066:	681b      	ldr	r3, [r3, #0]
 801a068:	4a29      	ldr	r2, [pc, #164]	@ (801a110 <HAL_DMA_Abort_IT+0x1b0>)
 801a06a:	4293      	cmp	r3, r2
 801a06c:	d036      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a06e:	687b      	ldr	r3, [r7, #4]
 801a070:	681b      	ldr	r3, [r3, #0]
 801a072:	4a28      	ldr	r2, [pc, #160]	@ (801a114 <HAL_DMA_Abort_IT+0x1b4>)
 801a074:	4293      	cmp	r3, r2
 801a076:	d031      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a078:	687b      	ldr	r3, [r7, #4]
 801a07a:	681b      	ldr	r3, [r3, #0]
 801a07c:	4a26      	ldr	r2, [pc, #152]	@ (801a118 <HAL_DMA_Abort_IT+0x1b8>)
 801a07e:	4293      	cmp	r3, r2
 801a080:	d02c      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a082:	687b      	ldr	r3, [r7, #4]
 801a084:	681b      	ldr	r3, [r3, #0]
 801a086:	4a25      	ldr	r2, [pc, #148]	@ (801a11c <HAL_DMA_Abort_IT+0x1bc>)
 801a088:	4293      	cmp	r3, r2
 801a08a:	d027      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a08c:	687b      	ldr	r3, [r7, #4]
 801a08e:	681b      	ldr	r3, [r3, #0]
 801a090:	4a23      	ldr	r2, [pc, #140]	@ (801a120 <HAL_DMA_Abort_IT+0x1c0>)
 801a092:	4293      	cmp	r3, r2
 801a094:	d022      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a096:	687b      	ldr	r3, [r7, #4]
 801a098:	681b      	ldr	r3, [r3, #0]
 801a09a:	4a22      	ldr	r2, [pc, #136]	@ (801a124 <HAL_DMA_Abort_IT+0x1c4>)
 801a09c:	4293      	cmp	r3, r2
 801a09e:	d01d      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a0a0:	687b      	ldr	r3, [r7, #4]
 801a0a2:	681b      	ldr	r3, [r3, #0]
 801a0a4:	4a20      	ldr	r2, [pc, #128]	@ (801a128 <HAL_DMA_Abort_IT+0x1c8>)
 801a0a6:	4293      	cmp	r3, r2
 801a0a8:	d018      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	681b      	ldr	r3, [r3, #0]
 801a0ae:	4a1f      	ldr	r2, [pc, #124]	@ (801a12c <HAL_DMA_Abort_IT+0x1cc>)
 801a0b0:	4293      	cmp	r3, r2
 801a0b2:	d013      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a0b4:	687b      	ldr	r3, [r7, #4]
 801a0b6:	681b      	ldr	r3, [r3, #0]
 801a0b8:	4a1d      	ldr	r2, [pc, #116]	@ (801a130 <HAL_DMA_Abort_IT+0x1d0>)
 801a0ba:	4293      	cmp	r3, r2
 801a0bc:	d00e      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a0be:	687b      	ldr	r3, [r7, #4]
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	4a1c      	ldr	r2, [pc, #112]	@ (801a134 <HAL_DMA_Abort_IT+0x1d4>)
 801a0c4:	4293      	cmp	r3, r2
 801a0c6:	d009      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a0c8:	687b      	ldr	r3, [r7, #4]
 801a0ca:	681b      	ldr	r3, [r3, #0]
 801a0cc:	4a1a      	ldr	r2, [pc, #104]	@ (801a138 <HAL_DMA_Abort_IT+0x1d8>)
 801a0ce:	4293      	cmp	r3, r2
 801a0d0:	d004      	beq.n	801a0dc <HAL_DMA_Abort_IT+0x17c>
 801a0d2:	687b      	ldr	r3, [r7, #4]
 801a0d4:	681b      	ldr	r3, [r3, #0]
 801a0d6:	4a19      	ldr	r2, [pc, #100]	@ (801a13c <HAL_DMA_Abort_IT+0x1dc>)
 801a0d8:	4293      	cmp	r3, r2
 801a0da:	d108      	bne.n	801a0ee <HAL_DMA_Abort_IT+0x18e>
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	681a      	ldr	r2, [r3, #0]
 801a0e2:	687b      	ldr	r3, [r7, #4]
 801a0e4:	681b      	ldr	r3, [r3, #0]
 801a0e6:	f022 0201 	bic.w	r2, r2, #1
 801a0ea:	601a      	str	r2, [r3, #0]
 801a0ec:	e178      	b.n	801a3e0 <HAL_DMA_Abort_IT+0x480>
 801a0ee:	687b      	ldr	r3, [r7, #4]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	681a      	ldr	r2, [r3, #0]
 801a0f4:	687b      	ldr	r3, [r7, #4]
 801a0f6:	681b      	ldr	r3, [r3, #0]
 801a0f8:	f022 0201 	bic.w	r2, r2, #1
 801a0fc:	601a      	str	r2, [r3, #0]
 801a0fe:	e16f      	b.n	801a3e0 <HAL_DMA_Abort_IT+0x480>
 801a100:	40020010 	.word	0x40020010
 801a104:	40020028 	.word	0x40020028
 801a108:	40020040 	.word	0x40020040
 801a10c:	40020058 	.word	0x40020058
 801a110:	40020070 	.word	0x40020070
 801a114:	40020088 	.word	0x40020088
 801a118:	400200a0 	.word	0x400200a0
 801a11c:	400200b8 	.word	0x400200b8
 801a120:	40020410 	.word	0x40020410
 801a124:	40020428 	.word	0x40020428
 801a128:	40020440 	.word	0x40020440
 801a12c:	40020458 	.word	0x40020458
 801a130:	40020470 	.word	0x40020470
 801a134:	40020488 	.word	0x40020488
 801a138:	400204a0 	.word	0x400204a0
 801a13c:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 801a140:	687b      	ldr	r3, [r7, #4]
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	681a      	ldr	r2, [r3, #0]
 801a146:	687b      	ldr	r3, [r7, #4]
 801a148:	681b      	ldr	r3, [r3, #0]
 801a14a:	f022 020e 	bic.w	r2, r2, #14
 801a14e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 801a150:	687b      	ldr	r3, [r7, #4]
 801a152:	681b      	ldr	r3, [r3, #0]
 801a154:	4a6c      	ldr	r2, [pc, #432]	@ (801a308 <HAL_DMA_Abort_IT+0x3a8>)
 801a156:	4293      	cmp	r3, r2
 801a158:	d04a      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a15a:	687b      	ldr	r3, [r7, #4]
 801a15c:	681b      	ldr	r3, [r3, #0]
 801a15e:	4a6b      	ldr	r2, [pc, #428]	@ (801a30c <HAL_DMA_Abort_IT+0x3ac>)
 801a160:	4293      	cmp	r3, r2
 801a162:	d045      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	4a69      	ldr	r2, [pc, #420]	@ (801a310 <HAL_DMA_Abort_IT+0x3b0>)
 801a16a:	4293      	cmp	r3, r2
 801a16c:	d040      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a16e:	687b      	ldr	r3, [r7, #4]
 801a170:	681b      	ldr	r3, [r3, #0]
 801a172:	4a68      	ldr	r2, [pc, #416]	@ (801a314 <HAL_DMA_Abort_IT+0x3b4>)
 801a174:	4293      	cmp	r3, r2
 801a176:	d03b      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a178:	687b      	ldr	r3, [r7, #4]
 801a17a:	681b      	ldr	r3, [r3, #0]
 801a17c:	4a66      	ldr	r2, [pc, #408]	@ (801a318 <HAL_DMA_Abort_IT+0x3b8>)
 801a17e:	4293      	cmp	r3, r2
 801a180:	d036      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a182:	687b      	ldr	r3, [r7, #4]
 801a184:	681b      	ldr	r3, [r3, #0]
 801a186:	4a65      	ldr	r2, [pc, #404]	@ (801a31c <HAL_DMA_Abort_IT+0x3bc>)
 801a188:	4293      	cmp	r3, r2
 801a18a:	d031      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a18c:	687b      	ldr	r3, [r7, #4]
 801a18e:	681b      	ldr	r3, [r3, #0]
 801a190:	4a63      	ldr	r2, [pc, #396]	@ (801a320 <HAL_DMA_Abort_IT+0x3c0>)
 801a192:	4293      	cmp	r3, r2
 801a194:	d02c      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a196:	687b      	ldr	r3, [r7, #4]
 801a198:	681b      	ldr	r3, [r3, #0]
 801a19a:	4a62      	ldr	r2, [pc, #392]	@ (801a324 <HAL_DMA_Abort_IT+0x3c4>)
 801a19c:	4293      	cmp	r3, r2
 801a19e:	d027      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a1a0:	687b      	ldr	r3, [r7, #4]
 801a1a2:	681b      	ldr	r3, [r3, #0]
 801a1a4:	4a60      	ldr	r2, [pc, #384]	@ (801a328 <HAL_DMA_Abort_IT+0x3c8>)
 801a1a6:	4293      	cmp	r3, r2
 801a1a8:	d022      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a1aa:	687b      	ldr	r3, [r7, #4]
 801a1ac:	681b      	ldr	r3, [r3, #0]
 801a1ae:	4a5f      	ldr	r2, [pc, #380]	@ (801a32c <HAL_DMA_Abort_IT+0x3cc>)
 801a1b0:	4293      	cmp	r3, r2
 801a1b2:	d01d      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a1b4:	687b      	ldr	r3, [r7, #4]
 801a1b6:	681b      	ldr	r3, [r3, #0]
 801a1b8:	4a5d      	ldr	r2, [pc, #372]	@ (801a330 <HAL_DMA_Abort_IT+0x3d0>)
 801a1ba:	4293      	cmp	r3, r2
 801a1bc:	d018      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a1be:	687b      	ldr	r3, [r7, #4]
 801a1c0:	681b      	ldr	r3, [r3, #0]
 801a1c2:	4a5c      	ldr	r2, [pc, #368]	@ (801a334 <HAL_DMA_Abort_IT+0x3d4>)
 801a1c4:	4293      	cmp	r3, r2
 801a1c6:	d013      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a1c8:	687b      	ldr	r3, [r7, #4]
 801a1ca:	681b      	ldr	r3, [r3, #0]
 801a1cc:	4a5a      	ldr	r2, [pc, #360]	@ (801a338 <HAL_DMA_Abort_IT+0x3d8>)
 801a1ce:	4293      	cmp	r3, r2
 801a1d0:	d00e      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a1d2:	687b      	ldr	r3, [r7, #4]
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	4a59      	ldr	r2, [pc, #356]	@ (801a33c <HAL_DMA_Abort_IT+0x3dc>)
 801a1d8:	4293      	cmp	r3, r2
 801a1da:	d009      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a1dc:	687b      	ldr	r3, [r7, #4]
 801a1de:	681b      	ldr	r3, [r3, #0]
 801a1e0:	4a57      	ldr	r2, [pc, #348]	@ (801a340 <HAL_DMA_Abort_IT+0x3e0>)
 801a1e2:	4293      	cmp	r3, r2
 801a1e4:	d004      	beq.n	801a1f0 <HAL_DMA_Abort_IT+0x290>
 801a1e6:	687b      	ldr	r3, [r7, #4]
 801a1e8:	681b      	ldr	r3, [r3, #0]
 801a1ea:	4a56      	ldr	r2, [pc, #344]	@ (801a344 <HAL_DMA_Abort_IT+0x3e4>)
 801a1ec:	4293      	cmp	r3, r2
 801a1ee:	d108      	bne.n	801a202 <HAL_DMA_Abort_IT+0x2a2>
 801a1f0:	687b      	ldr	r3, [r7, #4]
 801a1f2:	681b      	ldr	r3, [r3, #0]
 801a1f4:	681a      	ldr	r2, [r3, #0]
 801a1f6:	687b      	ldr	r3, [r7, #4]
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	f022 0201 	bic.w	r2, r2, #1
 801a1fe:	601a      	str	r2, [r3, #0]
 801a200:	e007      	b.n	801a212 <HAL_DMA_Abort_IT+0x2b2>
 801a202:	687b      	ldr	r3, [r7, #4]
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	681a      	ldr	r2, [r3, #0]
 801a208:	687b      	ldr	r3, [r7, #4]
 801a20a:	681b      	ldr	r3, [r3, #0]
 801a20c:	f022 0201 	bic.w	r2, r2, #1
 801a210:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801a212:	687b      	ldr	r3, [r7, #4]
 801a214:	681b      	ldr	r3, [r3, #0]
 801a216:	4a3c      	ldr	r2, [pc, #240]	@ (801a308 <HAL_DMA_Abort_IT+0x3a8>)
 801a218:	4293      	cmp	r3, r2
 801a21a:	d072      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a21c:	687b      	ldr	r3, [r7, #4]
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	4a3a      	ldr	r2, [pc, #232]	@ (801a30c <HAL_DMA_Abort_IT+0x3ac>)
 801a222:	4293      	cmp	r3, r2
 801a224:	d06d      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a226:	687b      	ldr	r3, [r7, #4]
 801a228:	681b      	ldr	r3, [r3, #0]
 801a22a:	4a39      	ldr	r2, [pc, #228]	@ (801a310 <HAL_DMA_Abort_IT+0x3b0>)
 801a22c:	4293      	cmp	r3, r2
 801a22e:	d068      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	681b      	ldr	r3, [r3, #0]
 801a234:	4a37      	ldr	r2, [pc, #220]	@ (801a314 <HAL_DMA_Abort_IT+0x3b4>)
 801a236:	4293      	cmp	r3, r2
 801a238:	d063      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a23a:	687b      	ldr	r3, [r7, #4]
 801a23c:	681b      	ldr	r3, [r3, #0]
 801a23e:	4a36      	ldr	r2, [pc, #216]	@ (801a318 <HAL_DMA_Abort_IT+0x3b8>)
 801a240:	4293      	cmp	r3, r2
 801a242:	d05e      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a244:	687b      	ldr	r3, [r7, #4]
 801a246:	681b      	ldr	r3, [r3, #0]
 801a248:	4a34      	ldr	r2, [pc, #208]	@ (801a31c <HAL_DMA_Abort_IT+0x3bc>)
 801a24a:	4293      	cmp	r3, r2
 801a24c:	d059      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a24e:	687b      	ldr	r3, [r7, #4]
 801a250:	681b      	ldr	r3, [r3, #0]
 801a252:	4a33      	ldr	r2, [pc, #204]	@ (801a320 <HAL_DMA_Abort_IT+0x3c0>)
 801a254:	4293      	cmp	r3, r2
 801a256:	d054      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a258:	687b      	ldr	r3, [r7, #4]
 801a25a:	681b      	ldr	r3, [r3, #0]
 801a25c:	4a31      	ldr	r2, [pc, #196]	@ (801a324 <HAL_DMA_Abort_IT+0x3c4>)
 801a25e:	4293      	cmp	r3, r2
 801a260:	d04f      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a262:	687b      	ldr	r3, [r7, #4]
 801a264:	681b      	ldr	r3, [r3, #0]
 801a266:	4a30      	ldr	r2, [pc, #192]	@ (801a328 <HAL_DMA_Abort_IT+0x3c8>)
 801a268:	4293      	cmp	r3, r2
 801a26a:	d04a      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a26c:	687b      	ldr	r3, [r7, #4]
 801a26e:	681b      	ldr	r3, [r3, #0]
 801a270:	4a2e      	ldr	r2, [pc, #184]	@ (801a32c <HAL_DMA_Abort_IT+0x3cc>)
 801a272:	4293      	cmp	r3, r2
 801a274:	d045      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a276:	687b      	ldr	r3, [r7, #4]
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	4a2d      	ldr	r2, [pc, #180]	@ (801a330 <HAL_DMA_Abort_IT+0x3d0>)
 801a27c:	4293      	cmp	r3, r2
 801a27e:	d040      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a280:	687b      	ldr	r3, [r7, #4]
 801a282:	681b      	ldr	r3, [r3, #0]
 801a284:	4a2b      	ldr	r2, [pc, #172]	@ (801a334 <HAL_DMA_Abort_IT+0x3d4>)
 801a286:	4293      	cmp	r3, r2
 801a288:	d03b      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a28a:	687b      	ldr	r3, [r7, #4]
 801a28c:	681b      	ldr	r3, [r3, #0]
 801a28e:	4a2a      	ldr	r2, [pc, #168]	@ (801a338 <HAL_DMA_Abort_IT+0x3d8>)
 801a290:	4293      	cmp	r3, r2
 801a292:	d036      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a294:	687b      	ldr	r3, [r7, #4]
 801a296:	681b      	ldr	r3, [r3, #0]
 801a298:	4a28      	ldr	r2, [pc, #160]	@ (801a33c <HAL_DMA_Abort_IT+0x3dc>)
 801a29a:	4293      	cmp	r3, r2
 801a29c:	d031      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a29e:	687b      	ldr	r3, [r7, #4]
 801a2a0:	681b      	ldr	r3, [r3, #0]
 801a2a2:	4a27      	ldr	r2, [pc, #156]	@ (801a340 <HAL_DMA_Abort_IT+0x3e0>)
 801a2a4:	4293      	cmp	r3, r2
 801a2a6:	d02c      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a2a8:	687b      	ldr	r3, [r7, #4]
 801a2aa:	681b      	ldr	r3, [r3, #0]
 801a2ac:	4a25      	ldr	r2, [pc, #148]	@ (801a344 <HAL_DMA_Abort_IT+0x3e4>)
 801a2ae:	4293      	cmp	r3, r2
 801a2b0:	d027      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a2b2:	687b      	ldr	r3, [r7, #4]
 801a2b4:	681b      	ldr	r3, [r3, #0]
 801a2b6:	4a24      	ldr	r2, [pc, #144]	@ (801a348 <HAL_DMA_Abort_IT+0x3e8>)
 801a2b8:	4293      	cmp	r3, r2
 801a2ba:	d022      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a2bc:	687b      	ldr	r3, [r7, #4]
 801a2be:	681b      	ldr	r3, [r3, #0]
 801a2c0:	4a22      	ldr	r2, [pc, #136]	@ (801a34c <HAL_DMA_Abort_IT+0x3ec>)
 801a2c2:	4293      	cmp	r3, r2
 801a2c4:	d01d      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a2c6:	687b      	ldr	r3, [r7, #4]
 801a2c8:	681b      	ldr	r3, [r3, #0]
 801a2ca:	4a21      	ldr	r2, [pc, #132]	@ (801a350 <HAL_DMA_Abort_IT+0x3f0>)
 801a2cc:	4293      	cmp	r3, r2
 801a2ce:	d018      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a2d0:	687b      	ldr	r3, [r7, #4]
 801a2d2:	681b      	ldr	r3, [r3, #0]
 801a2d4:	4a1f      	ldr	r2, [pc, #124]	@ (801a354 <HAL_DMA_Abort_IT+0x3f4>)
 801a2d6:	4293      	cmp	r3, r2
 801a2d8:	d013      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a2da:	687b      	ldr	r3, [r7, #4]
 801a2dc:	681b      	ldr	r3, [r3, #0]
 801a2de:	4a1e      	ldr	r2, [pc, #120]	@ (801a358 <HAL_DMA_Abort_IT+0x3f8>)
 801a2e0:	4293      	cmp	r3, r2
 801a2e2:	d00e      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a2e4:	687b      	ldr	r3, [r7, #4]
 801a2e6:	681b      	ldr	r3, [r3, #0]
 801a2e8:	4a1c      	ldr	r2, [pc, #112]	@ (801a35c <HAL_DMA_Abort_IT+0x3fc>)
 801a2ea:	4293      	cmp	r3, r2
 801a2ec:	d009      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a2ee:	687b      	ldr	r3, [r7, #4]
 801a2f0:	681b      	ldr	r3, [r3, #0]
 801a2f2:	4a1b      	ldr	r2, [pc, #108]	@ (801a360 <HAL_DMA_Abort_IT+0x400>)
 801a2f4:	4293      	cmp	r3, r2
 801a2f6:	d004      	beq.n	801a302 <HAL_DMA_Abort_IT+0x3a2>
 801a2f8:	687b      	ldr	r3, [r7, #4]
 801a2fa:	681b      	ldr	r3, [r3, #0]
 801a2fc:	4a19      	ldr	r2, [pc, #100]	@ (801a364 <HAL_DMA_Abort_IT+0x404>)
 801a2fe:	4293      	cmp	r3, r2
 801a300:	d132      	bne.n	801a368 <HAL_DMA_Abort_IT+0x408>
 801a302:	2301      	movs	r3, #1
 801a304:	e031      	b.n	801a36a <HAL_DMA_Abort_IT+0x40a>
 801a306:	bf00      	nop
 801a308:	40020010 	.word	0x40020010
 801a30c:	40020028 	.word	0x40020028
 801a310:	40020040 	.word	0x40020040
 801a314:	40020058 	.word	0x40020058
 801a318:	40020070 	.word	0x40020070
 801a31c:	40020088 	.word	0x40020088
 801a320:	400200a0 	.word	0x400200a0
 801a324:	400200b8 	.word	0x400200b8
 801a328:	40020410 	.word	0x40020410
 801a32c:	40020428 	.word	0x40020428
 801a330:	40020440 	.word	0x40020440
 801a334:	40020458 	.word	0x40020458
 801a338:	40020470 	.word	0x40020470
 801a33c:	40020488 	.word	0x40020488
 801a340:	400204a0 	.word	0x400204a0
 801a344:	400204b8 	.word	0x400204b8
 801a348:	58025408 	.word	0x58025408
 801a34c:	5802541c 	.word	0x5802541c
 801a350:	58025430 	.word	0x58025430
 801a354:	58025444 	.word	0x58025444
 801a358:	58025458 	.word	0x58025458
 801a35c:	5802546c 	.word	0x5802546c
 801a360:	58025480 	.word	0x58025480
 801a364:	58025494 	.word	0x58025494
 801a368:	2300      	movs	r3, #0
 801a36a:	2b00      	cmp	r3, #0
 801a36c:	d028      	beq.n	801a3c0 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 801a36e:	687b      	ldr	r3, [r7, #4]
 801a370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a372:	681a      	ldr	r2, [r3, #0]
 801a374:	687b      	ldr	r3, [r7, #4]
 801a376:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801a378:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801a37c:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801a37e:	687b      	ldr	r3, [r7, #4]
 801a380:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a382:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801a384:	687b      	ldr	r3, [r7, #4]
 801a386:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a388:	f003 031f 	and.w	r3, r3, #31
 801a38c:	2201      	movs	r2, #1
 801a38e:	409a      	lsls	r2, r3
 801a390:	68fb      	ldr	r3, [r7, #12]
 801a392:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801a394:	687b      	ldr	r3, [r7, #4]
 801a396:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a398:	687a      	ldr	r2, [r7, #4]
 801a39a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801a39c:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801a39e:	687b      	ldr	r3, [r7, #4]
 801a3a0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3a2:	2b00      	cmp	r3, #0
 801a3a4:	d00c      	beq.n	801a3c0 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801a3a6:	687b      	ldr	r3, [r7, #4]
 801a3a8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3aa:	681a      	ldr	r2, [r3, #0]
 801a3ac:	687b      	ldr	r3, [r7, #4]
 801a3ae:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a3b0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801a3b4:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801a3b6:	687b      	ldr	r3, [r7, #4]
 801a3b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a3ba:	687a      	ldr	r2, [r7, #4]
 801a3bc:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801a3be:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801a3c0:	687b      	ldr	r3, [r7, #4]
 801a3c2:	2201      	movs	r2, #1
 801a3c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801a3c8:	687b      	ldr	r3, [r7, #4]
 801a3ca:	2200      	movs	r2, #0
 801a3cc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801a3d0:	687b      	ldr	r3, [r7, #4]
 801a3d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a3d4:	2b00      	cmp	r3, #0
 801a3d6:	d003      	beq.n	801a3e0 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 801a3d8:	687b      	ldr	r3, [r7, #4]
 801a3da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801a3dc:	6878      	ldr	r0, [r7, #4]
 801a3de:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801a3e0:	2300      	movs	r3, #0
}
 801a3e2:	4618      	mov	r0, r3
 801a3e4:	3710      	adds	r7, #16
 801a3e6:	46bd      	mov	sp, r7
 801a3e8:	bd80      	pop	{r7, pc}
 801a3ea:	bf00      	nop

0801a3ec <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801a3ec:	b580      	push	{r7, lr}
 801a3ee:	b08a      	sub	sp, #40	@ 0x28
 801a3f0:	af00      	add	r7, sp, #0
 801a3f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 801a3f4:	2300      	movs	r3, #0
 801a3f6:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 801a3f8:	4b67      	ldr	r3, [pc, #412]	@ (801a598 <HAL_DMA_IRQHandler+0x1ac>)
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	4a67      	ldr	r2, [pc, #412]	@ (801a59c <HAL_DMA_IRQHandler+0x1b0>)
 801a3fe:	fba2 2303 	umull	r2, r3, r2, r3
 801a402:	0a9b      	lsrs	r3, r3, #10
 801a404:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 801a406:	687b      	ldr	r3, [r7, #4]
 801a408:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a40a:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801a40c:	687b      	ldr	r3, [r7, #4]
 801a40e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a410:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 801a412:	6a3b      	ldr	r3, [r7, #32]
 801a414:	681b      	ldr	r3, [r3, #0]
 801a416:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 801a418:	69fb      	ldr	r3, [r7, #28]
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 801a41e:	687b      	ldr	r3, [r7, #4]
 801a420:	681b      	ldr	r3, [r3, #0]
 801a422:	4a5f      	ldr	r2, [pc, #380]	@ (801a5a0 <HAL_DMA_IRQHandler+0x1b4>)
 801a424:	4293      	cmp	r3, r2
 801a426:	d04a      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a428:	687b      	ldr	r3, [r7, #4]
 801a42a:	681b      	ldr	r3, [r3, #0]
 801a42c:	4a5d      	ldr	r2, [pc, #372]	@ (801a5a4 <HAL_DMA_IRQHandler+0x1b8>)
 801a42e:	4293      	cmp	r3, r2
 801a430:	d045      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a432:	687b      	ldr	r3, [r7, #4]
 801a434:	681b      	ldr	r3, [r3, #0]
 801a436:	4a5c      	ldr	r2, [pc, #368]	@ (801a5a8 <HAL_DMA_IRQHandler+0x1bc>)
 801a438:	4293      	cmp	r3, r2
 801a43a:	d040      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	681b      	ldr	r3, [r3, #0]
 801a440:	4a5a      	ldr	r2, [pc, #360]	@ (801a5ac <HAL_DMA_IRQHandler+0x1c0>)
 801a442:	4293      	cmp	r3, r2
 801a444:	d03b      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a446:	687b      	ldr	r3, [r7, #4]
 801a448:	681b      	ldr	r3, [r3, #0]
 801a44a:	4a59      	ldr	r2, [pc, #356]	@ (801a5b0 <HAL_DMA_IRQHandler+0x1c4>)
 801a44c:	4293      	cmp	r3, r2
 801a44e:	d036      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a450:	687b      	ldr	r3, [r7, #4]
 801a452:	681b      	ldr	r3, [r3, #0]
 801a454:	4a57      	ldr	r2, [pc, #348]	@ (801a5b4 <HAL_DMA_IRQHandler+0x1c8>)
 801a456:	4293      	cmp	r3, r2
 801a458:	d031      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a45a:	687b      	ldr	r3, [r7, #4]
 801a45c:	681b      	ldr	r3, [r3, #0]
 801a45e:	4a56      	ldr	r2, [pc, #344]	@ (801a5b8 <HAL_DMA_IRQHandler+0x1cc>)
 801a460:	4293      	cmp	r3, r2
 801a462:	d02c      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	681b      	ldr	r3, [r3, #0]
 801a468:	4a54      	ldr	r2, [pc, #336]	@ (801a5bc <HAL_DMA_IRQHandler+0x1d0>)
 801a46a:	4293      	cmp	r3, r2
 801a46c:	d027      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a46e:	687b      	ldr	r3, [r7, #4]
 801a470:	681b      	ldr	r3, [r3, #0]
 801a472:	4a53      	ldr	r2, [pc, #332]	@ (801a5c0 <HAL_DMA_IRQHandler+0x1d4>)
 801a474:	4293      	cmp	r3, r2
 801a476:	d022      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a478:	687b      	ldr	r3, [r7, #4]
 801a47a:	681b      	ldr	r3, [r3, #0]
 801a47c:	4a51      	ldr	r2, [pc, #324]	@ (801a5c4 <HAL_DMA_IRQHandler+0x1d8>)
 801a47e:	4293      	cmp	r3, r2
 801a480:	d01d      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a482:	687b      	ldr	r3, [r7, #4]
 801a484:	681b      	ldr	r3, [r3, #0]
 801a486:	4a50      	ldr	r2, [pc, #320]	@ (801a5c8 <HAL_DMA_IRQHandler+0x1dc>)
 801a488:	4293      	cmp	r3, r2
 801a48a:	d018      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a48c:	687b      	ldr	r3, [r7, #4]
 801a48e:	681b      	ldr	r3, [r3, #0]
 801a490:	4a4e      	ldr	r2, [pc, #312]	@ (801a5cc <HAL_DMA_IRQHandler+0x1e0>)
 801a492:	4293      	cmp	r3, r2
 801a494:	d013      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a496:	687b      	ldr	r3, [r7, #4]
 801a498:	681b      	ldr	r3, [r3, #0]
 801a49a:	4a4d      	ldr	r2, [pc, #308]	@ (801a5d0 <HAL_DMA_IRQHandler+0x1e4>)
 801a49c:	4293      	cmp	r3, r2
 801a49e:	d00e      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	681b      	ldr	r3, [r3, #0]
 801a4a4:	4a4b      	ldr	r2, [pc, #300]	@ (801a5d4 <HAL_DMA_IRQHandler+0x1e8>)
 801a4a6:	4293      	cmp	r3, r2
 801a4a8:	d009      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a4aa:	687b      	ldr	r3, [r7, #4]
 801a4ac:	681b      	ldr	r3, [r3, #0]
 801a4ae:	4a4a      	ldr	r2, [pc, #296]	@ (801a5d8 <HAL_DMA_IRQHandler+0x1ec>)
 801a4b0:	4293      	cmp	r3, r2
 801a4b2:	d004      	beq.n	801a4be <HAL_DMA_IRQHandler+0xd2>
 801a4b4:	687b      	ldr	r3, [r7, #4]
 801a4b6:	681b      	ldr	r3, [r3, #0]
 801a4b8:	4a48      	ldr	r2, [pc, #288]	@ (801a5dc <HAL_DMA_IRQHandler+0x1f0>)
 801a4ba:	4293      	cmp	r3, r2
 801a4bc:	d101      	bne.n	801a4c2 <HAL_DMA_IRQHandler+0xd6>
 801a4be:	2301      	movs	r3, #1
 801a4c0:	e000      	b.n	801a4c4 <HAL_DMA_IRQHandler+0xd8>
 801a4c2:	2300      	movs	r3, #0
 801a4c4:	2b00      	cmp	r3, #0
 801a4c6:	f000 842b 	beq.w	801ad20 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a4ce:	f003 031f 	and.w	r3, r3, #31
 801a4d2:	2208      	movs	r2, #8
 801a4d4:	409a      	lsls	r2, r3
 801a4d6:	69bb      	ldr	r3, [r7, #24]
 801a4d8:	4013      	ands	r3, r2
 801a4da:	2b00      	cmp	r3, #0
 801a4dc:	f000 80a2 	beq.w	801a624 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801a4e0:	687b      	ldr	r3, [r7, #4]
 801a4e2:	681b      	ldr	r3, [r3, #0]
 801a4e4:	4a2e      	ldr	r2, [pc, #184]	@ (801a5a0 <HAL_DMA_IRQHandler+0x1b4>)
 801a4e6:	4293      	cmp	r3, r2
 801a4e8:	d04a      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a4ea:	687b      	ldr	r3, [r7, #4]
 801a4ec:	681b      	ldr	r3, [r3, #0]
 801a4ee:	4a2d      	ldr	r2, [pc, #180]	@ (801a5a4 <HAL_DMA_IRQHandler+0x1b8>)
 801a4f0:	4293      	cmp	r3, r2
 801a4f2:	d045      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a4f4:	687b      	ldr	r3, [r7, #4]
 801a4f6:	681b      	ldr	r3, [r3, #0]
 801a4f8:	4a2b      	ldr	r2, [pc, #172]	@ (801a5a8 <HAL_DMA_IRQHandler+0x1bc>)
 801a4fa:	4293      	cmp	r3, r2
 801a4fc:	d040      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	4a2a      	ldr	r2, [pc, #168]	@ (801a5ac <HAL_DMA_IRQHandler+0x1c0>)
 801a504:	4293      	cmp	r3, r2
 801a506:	d03b      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a508:	687b      	ldr	r3, [r7, #4]
 801a50a:	681b      	ldr	r3, [r3, #0]
 801a50c:	4a28      	ldr	r2, [pc, #160]	@ (801a5b0 <HAL_DMA_IRQHandler+0x1c4>)
 801a50e:	4293      	cmp	r3, r2
 801a510:	d036      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a512:	687b      	ldr	r3, [r7, #4]
 801a514:	681b      	ldr	r3, [r3, #0]
 801a516:	4a27      	ldr	r2, [pc, #156]	@ (801a5b4 <HAL_DMA_IRQHandler+0x1c8>)
 801a518:	4293      	cmp	r3, r2
 801a51a:	d031      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a51c:	687b      	ldr	r3, [r7, #4]
 801a51e:	681b      	ldr	r3, [r3, #0]
 801a520:	4a25      	ldr	r2, [pc, #148]	@ (801a5b8 <HAL_DMA_IRQHandler+0x1cc>)
 801a522:	4293      	cmp	r3, r2
 801a524:	d02c      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a526:	687b      	ldr	r3, [r7, #4]
 801a528:	681b      	ldr	r3, [r3, #0]
 801a52a:	4a24      	ldr	r2, [pc, #144]	@ (801a5bc <HAL_DMA_IRQHandler+0x1d0>)
 801a52c:	4293      	cmp	r3, r2
 801a52e:	d027      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a530:	687b      	ldr	r3, [r7, #4]
 801a532:	681b      	ldr	r3, [r3, #0]
 801a534:	4a22      	ldr	r2, [pc, #136]	@ (801a5c0 <HAL_DMA_IRQHandler+0x1d4>)
 801a536:	4293      	cmp	r3, r2
 801a538:	d022      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	681b      	ldr	r3, [r3, #0]
 801a53e:	4a21      	ldr	r2, [pc, #132]	@ (801a5c4 <HAL_DMA_IRQHandler+0x1d8>)
 801a540:	4293      	cmp	r3, r2
 801a542:	d01d      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	681b      	ldr	r3, [r3, #0]
 801a548:	4a1f      	ldr	r2, [pc, #124]	@ (801a5c8 <HAL_DMA_IRQHandler+0x1dc>)
 801a54a:	4293      	cmp	r3, r2
 801a54c:	d018      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a54e:	687b      	ldr	r3, [r7, #4]
 801a550:	681b      	ldr	r3, [r3, #0]
 801a552:	4a1e      	ldr	r2, [pc, #120]	@ (801a5cc <HAL_DMA_IRQHandler+0x1e0>)
 801a554:	4293      	cmp	r3, r2
 801a556:	d013      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a558:	687b      	ldr	r3, [r7, #4]
 801a55a:	681b      	ldr	r3, [r3, #0]
 801a55c:	4a1c      	ldr	r2, [pc, #112]	@ (801a5d0 <HAL_DMA_IRQHandler+0x1e4>)
 801a55e:	4293      	cmp	r3, r2
 801a560:	d00e      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a562:	687b      	ldr	r3, [r7, #4]
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	4a1b      	ldr	r2, [pc, #108]	@ (801a5d4 <HAL_DMA_IRQHandler+0x1e8>)
 801a568:	4293      	cmp	r3, r2
 801a56a:	d009      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a56c:	687b      	ldr	r3, [r7, #4]
 801a56e:	681b      	ldr	r3, [r3, #0]
 801a570:	4a19      	ldr	r2, [pc, #100]	@ (801a5d8 <HAL_DMA_IRQHandler+0x1ec>)
 801a572:	4293      	cmp	r3, r2
 801a574:	d004      	beq.n	801a580 <HAL_DMA_IRQHandler+0x194>
 801a576:	687b      	ldr	r3, [r7, #4]
 801a578:	681b      	ldr	r3, [r3, #0]
 801a57a:	4a18      	ldr	r2, [pc, #96]	@ (801a5dc <HAL_DMA_IRQHandler+0x1f0>)
 801a57c:	4293      	cmp	r3, r2
 801a57e:	d12f      	bne.n	801a5e0 <HAL_DMA_IRQHandler+0x1f4>
 801a580:	687b      	ldr	r3, [r7, #4]
 801a582:	681b      	ldr	r3, [r3, #0]
 801a584:	681b      	ldr	r3, [r3, #0]
 801a586:	f003 0304 	and.w	r3, r3, #4
 801a58a:	2b00      	cmp	r3, #0
 801a58c:	bf14      	ite	ne
 801a58e:	2301      	movne	r3, #1
 801a590:	2300      	moveq	r3, #0
 801a592:	b2db      	uxtb	r3, r3
 801a594:	e02e      	b.n	801a5f4 <HAL_DMA_IRQHandler+0x208>
 801a596:	bf00      	nop
 801a598:	20000000 	.word	0x20000000
 801a59c:	1b4e81b5 	.word	0x1b4e81b5
 801a5a0:	40020010 	.word	0x40020010
 801a5a4:	40020028 	.word	0x40020028
 801a5a8:	40020040 	.word	0x40020040
 801a5ac:	40020058 	.word	0x40020058
 801a5b0:	40020070 	.word	0x40020070
 801a5b4:	40020088 	.word	0x40020088
 801a5b8:	400200a0 	.word	0x400200a0
 801a5bc:	400200b8 	.word	0x400200b8
 801a5c0:	40020410 	.word	0x40020410
 801a5c4:	40020428 	.word	0x40020428
 801a5c8:	40020440 	.word	0x40020440
 801a5cc:	40020458 	.word	0x40020458
 801a5d0:	40020470 	.word	0x40020470
 801a5d4:	40020488 	.word	0x40020488
 801a5d8:	400204a0 	.word	0x400204a0
 801a5dc:	400204b8 	.word	0x400204b8
 801a5e0:	687b      	ldr	r3, [r7, #4]
 801a5e2:	681b      	ldr	r3, [r3, #0]
 801a5e4:	681b      	ldr	r3, [r3, #0]
 801a5e6:	f003 0308 	and.w	r3, r3, #8
 801a5ea:	2b00      	cmp	r3, #0
 801a5ec:	bf14      	ite	ne
 801a5ee:	2301      	movne	r3, #1
 801a5f0:	2300      	moveq	r3, #0
 801a5f2:	b2db      	uxtb	r3, r3
 801a5f4:	2b00      	cmp	r3, #0
 801a5f6:	d015      	beq.n	801a624 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 801a5f8:	687b      	ldr	r3, [r7, #4]
 801a5fa:	681b      	ldr	r3, [r3, #0]
 801a5fc:	681a      	ldr	r2, [r3, #0]
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	f022 0204 	bic.w	r2, r2, #4
 801a606:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a608:	687b      	ldr	r3, [r7, #4]
 801a60a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a60c:	f003 031f 	and.w	r3, r3, #31
 801a610:	2208      	movs	r2, #8
 801a612:	409a      	lsls	r2, r3
 801a614:	6a3b      	ldr	r3, [r7, #32]
 801a616:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 801a618:	687b      	ldr	r3, [r7, #4]
 801a61a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a61c:	f043 0201 	orr.w	r2, r3, #1
 801a620:	687b      	ldr	r3, [r7, #4]
 801a622:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a624:	687b      	ldr	r3, [r7, #4]
 801a626:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a628:	f003 031f 	and.w	r3, r3, #31
 801a62c:	69ba      	ldr	r2, [r7, #24]
 801a62e:	fa22 f303 	lsr.w	r3, r2, r3
 801a632:	f003 0301 	and.w	r3, r3, #1
 801a636:	2b00      	cmp	r3, #0
 801a638:	d06e      	beq.n	801a718 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 801a63a:	687b      	ldr	r3, [r7, #4]
 801a63c:	681b      	ldr	r3, [r3, #0]
 801a63e:	4a69      	ldr	r2, [pc, #420]	@ (801a7e4 <HAL_DMA_IRQHandler+0x3f8>)
 801a640:	4293      	cmp	r3, r2
 801a642:	d04a      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a644:	687b      	ldr	r3, [r7, #4]
 801a646:	681b      	ldr	r3, [r3, #0]
 801a648:	4a67      	ldr	r2, [pc, #412]	@ (801a7e8 <HAL_DMA_IRQHandler+0x3fc>)
 801a64a:	4293      	cmp	r3, r2
 801a64c:	d045      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a64e:	687b      	ldr	r3, [r7, #4]
 801a650:	681b      	ldr	r3, [r3, #0]
 801a652:	4a66      	ldr	r2, [pc, #408]	@ (801a7ec <HAL_DMA_IRQHandler+0x400>)
 801a654:	4293      	cmp	r3, r2
 801a656:	d040      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a658:	687b      	ldr	r3, [r7, #4]
 801a65a:	681b      	ldr	r3, [r3, #0]
 801a65c:	4a64      	ldr	r2, [pc, #400]	@ (801a7f0 <HAL_DMA_IRQHandler+0x404>)
 801a65e:	4293      	cmp	r3, r2
 801a660:	d03b      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	681b      	ldr	r3, [r3, #0]
 801a666:	4a63      	ldr	r2, [pc, #396]	@ (801a7f4 <HAL_DMA_IRQHandler+0x408>)
 801a668:	4293      	cmp	r3, r2
 801a66a:	d036      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a66c:	687b      	ldr	r3, [r7, #4]
 801a66e:	681b      	ldr	r3, [r3, #0]
 801a670:	4a61      	ldr	r2, [pc, #388]	@ (801a7f8 <HAL_DMA_IRQHandler+0x40c>)
 801a672:	4293      	cmp	r3, r2
 801a674:	d031      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a676:	687b      	ldr	r3, [r7, #4]
 801a678:	681b      	ldr	r3, [r3, #0]
 801a67a:	4a60      	ldr	r2, [pc, #384]	@ (801a7fc <HAL_DMA_IRQHandler+0x410>)
 801a67c:	4293      	cmp	r3, r2
 801a67e:	d02c      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	4a5e      	ldr	r2, [pc, #376]	@ (801a800 <HAL_DMA_IRQHandler+0x414>)
 801a686:	4293      	cmp	r3, r2
 801a688:	d027      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a68a:	687b      	ldr	r3, [r7, #4]
 801a68c:	681b      	ldr	r3, [r3, #0]
 801a68e:	4a5d      	ldr	r2, [pc, #372]	@ (801a804 <HAL_DMA_IRQHandler+0x418>)
 801a690:	4293      	cmp	r3, r2
 801a692:	d022      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a694:	687b      	ldr	r3, [r7, #4]
 801a696:	681b      	ldr	r3, [r3, #0]
 801a698:	4a5b      	ldr	r2, [pc, #364]	@ (801a808 <HAL_DMA_IRQHandler+0x41c>)
 801a69a:	4293      	cmp	r3, r2
 801a69c:	d01d      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a69e:	687b      	ldr	r3, [r7, #4]
 801a6a0:	681b      	ldr	r3, [r3, #0]
 801a6a2:	4a5a      	ldr	r2, [pc, #360]	@ (801a80c <HAL_DMA_IRQHandler+0x420>)
 801a6a4:	4293      	cmp	r3, r2
 801a6a6:	d018      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a6a8:	687b      	ldr	r3, [r7, #4]
 801a6aa:	681b      	ldr	r3, [r3, #0]
 801a6ac:	4a58      	ldr	r2, [pc, #352]	@ (801a810 <HAL_DMA_IRQHandler+0x424>)
 801a6ae:	4293      	cmp	r3, r2
 801a6b0:	d013      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a6b2:	687b      	ldr	r3, [r7, #4]
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	4a57      	ldr	r2, [pc, #348]	@ (801a814 <HAL_DMA_IRQHandler+0x428>)
 801a6b8:	4293      	cmp	r3, r2
 801a6ba:	d00e      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a6bc:	687b      	ldr	r3, [r7, #4]
 801a6be:	681b      	ldr	r3, [r3, #0]
 801a6c0:	4a55      	ldr	r2, [pc, #340]	@ (801a818 <HAL_DMA_IRQHandler+0x42c>)
 801a6c2:	4293      	cmp	r3, r2
 801a6c4:	d009      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a6c6:	687b      	ldr	r3, [r7, #4]
 801a6c8:	681b      	ldr	r3, [r3, #0]
 801a6ca:	4a54      	ldr	r2, [pc, #336]	@ (801a81c <HAL_DMA_IRQHandler+0x430>)
 801a6cc:	4293      	cmp	r3, r2
 801a6ce:	d004      	beq.n	801a6da <HAL_DMA_IRQHandler+0x2ee>
 801a6d0:	687b      	ldr	r3, [r7, #4]
 801a6d2:	681b      	ldr	r3, [r3, #0]
 801a6d4:	4a52      	ldr	r2, [pc, #328]	@ (801a820 <HAL_DMA_IRQHandler+0x434>)
 801a6d6:	4293      	cmp	r3, r2
 801a6d8:	d10a      	bne.n	801a6f0 <HAL_DMA_IRQHandler+0x304>
 801a6da:	687b      	ldr	r3, [r7, #4]
 801a6dc:	681b      	ldr	r3, [r3, #0]
 801a6de:	695b      	ldr	r3, [r3, #20]
 801a6e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801a6e4:	2b00      	cmp	r3, #0
 801a6e6:	bf14      	ite	ne
 801a6e8:	2301      	movne	r3, #1
 801a6ea:	2300      	moveq	r3, #0
 801a6ec:	b2db      	uxtb	r3, r3
 801a6ee:	e003      	b.n	801a6f8 <HAL_DMA_IRQHandler+0x30c>
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	681b      	ldr	r3, [r3, #0]
 801a6f4:	681b      	ldr	r3, [r3, #0]
 801a6f6:	2300      	movs	r3, #0
 801a6f8:	2b00      	cmp	r3, #0
 801a6fa:	d00d      	beq.n	801a718 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a6fc:	687b      	ldr	r3, [r7, #4]
 801a6fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a700:	f003 031f 	and.w	r3, r3, #31
 801a704:	2201      	movs	r2, #1
 801a706:	409a      	lsls	r2, r3
 801a708:	6a3b      	ldr	r3, [r7, #32]
 801a70a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 801a70c:	687b      	ldr	r3, [r7, #4]
 801a70e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a710:	f043 0202 	orr.w	r2, r3, #2
 801a714:	687b      	ldr	r3, [r7, #4]
 801a716:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a718:	687b      	ldr	r3, [r7, #4]
 801a71a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a71c:	f003 031f 	and.w	r3, r3, #31
 801a720:	2204      	movs	r2, #4
 801a722:	409a      	lsls	r2, r3
 801a724:	69bb      	ldr	r3, [r7, #24]
 801a726:	4013      	ands	r3, r2
 801a728:	2b00      	cmp	r3, #0
 801a72a:	f000 808f 	beq.w	801a84c <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 801a72e:	687b      	ldr	r3, [r7, #4]
 801a730:	681b      	ldr	r3, [r3, #0]
 801a732:	4a2c      	ldr	r2, [pc, #176]	@ (801a7e4 <HAL_DMA_IRQHandler+0x3f8>)
 801a734:	4293      	cmp	r3, r2
 801a736:	d04a      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a738:	687b      	ldr	r3, [r7, #4]
 801a73a:	681b      	ldr	r3, [r3, #0]
 801a73c:	4a2a      	ldr	r2, [pc, #168]	@ (801a7e8 <HAL_DMA_IRQHandler+0x3fc>)
 801a73e:	4293      	cmp	r3, r2
 801a740:	d045      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a742:	687b      	ldr	r3, [r7, #4]
 801a744:	681b      	ldr	r3, [r3, #0]
 801a746:	4a29      	ldr	r2, [pc, #164]	@ (801a7ec <HAL_DMA_IRQHandler+0x400>)
 801a748:	4293      	cmp	r3, r2
 801a74a:	d040      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a74c:	687b      	ldr	r3, [r7, #4]
 801a74e:	681b      	ldr	r3, [r3, #0]
 801a750:	4a27      	ldr	r2, [pc, #156]	@ (801a7f0 <HAL_DMA_IRQHandler+0x404>)
 801a752:	4293      	cmp	r3, r2
 801a754:	d03b      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a756:	687b      	ldr	r3, [r7, #4]
 801a758:	681b      	ldr	r3, [r3, #0]
 801a75a:	4a26      	ldr	r2, [pc, #152]	@ (801a7f4 <HAL_DMA_IRQHandler+0x408>)
 801a75c:	4293      	cmp	r3, r2
 801a75e:	d036      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a760:	687b      	ldr	r3, [r7, #4]
 801a762:	681b      	ldr	r3, [r3, #0]
 801a764:	4a24      	ldr	r2, [pc, #144]	@ (801a7f8 <HAL_DMA_IRQHandler+0x40c>)
 801a766:	4293      	cmp	r3, r2
 801a768:	d031      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a76a:	687b      	ldr	r3, [r7, #4]
 801a76c:	681b      	ldr	r3, [r3, #0]
 801a76e:	4a23      	ldr	r2, [pc, #140]	@ (801a7fc <HAL_DMA_IRQHandler+0x410>)
 801a770:	4293      	cmp	r3, r2
 801a772:	d02c      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	681b      	ldr	r3, [r3, #0]
 801a778:	4a21      	ldr	r2, [pc, #132]	@ (801a800 <HAL_DMA_IRQHandler+0x414>)
 801a77a:	4293      	cmp	r3, r2
 801a77c:	d027      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a77e:	687b      	ldr	r3, [r7, #4]
 801a780:	681b      	ldr	r3, [r3, #0]
 801a782:	4a20      	ldr	r2, [pc, #128]	@ (801a804 <HAL_DMA_IRQHandler+0x418>)
 801a784:	4293      	cmp	r3, r2
 801a786:	d022      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a788:	687b      	ldr	r3, [r7, #4]
 801a78a:	681b      	ldr	r3, [r3, #0]
 801a78c:	4a1e      	ldr	r2, [pc, #120]	@ (801a808 <HAL_DMA_IRQHandler+0x41c>)
 801a78e:	4293      	cmp	r3, r2
 801a790:	d01d      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	4a1d      	ldr	r2, [pc, #116]	@ (801a80c <HAL_DMA_IRQHandler+0x420>)
 801a798:	4293      	cmp	r3, r2
 801a79a:	d018      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	681b      	ldr	r3, [r3, #0]
 801a7a0:	4a1b      	ldr	r2, [pc, #108]	@ (801a810 <HAL_DMA_IRQHandler+0x424>)
 801a7a2:	4293      	cmp	r3, r2
 801a7a4:	d013      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	681b      	ldr	r3, [r3, #0]
 801a7aa:	4a1a      	ldr	r2, [pc, #104]	@ (801a814 <HAL_DMA_IRQHandler+0x428>)
 801a7ac:	4293      	cmp	r3, r2
 801a7ae:	d00e      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a7b0:	687b      	ldr	r3, [r7, #4]
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	4a18      	ldr	r2, [pc, #96]	@ (801a818 <HAL_DMA_IRQHandler+0x42c>)
 801a7b6:	4293      	cmp	r3, r2
 801a7b8:	d009      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a7ba:	687b      	ldr	r3, [r7, #4]
 801a7bc:	681b      	ldr	r3, [r3, #0]
 801a7be:	4a17      	ldr	r2, [pc, #92]	@ (801a81c <HAL_DMA_IRQHandler+0x430>)
 801a7c0:	4293      	cmp	r3, r2
 801a7c2:	d004      	beq.n	801a7ce <HAL_DMA_IRQHandler+0x3e2>
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	681b      	ldr	r3, [r3, #0]
 801a7c8:	4a15      	ldr	r2, [pc, #84]	@ (801a820 <HAL_DMA_IRQHandler+0x434>)
 801a7ca:	4293      	cmp	r3, r2
 801a7cc:	d12a      	bne.n	801a824 <HAL_DMA_IRQHandler+0x438>
 801a7ce:	687b      	ldr	r3, [r7, #4]
 801a7d0:	681b      	ldr	r3, [r3, #0]
 801a7d2:	681b      	ldr	r3, [r3, #0]
 801a7d4:	f003 0302 	and.w	r3, r3, #2
 801a7d8:	2b00      	cmp	r3, #0
 801a7da:	bf14      	ite	ne
 801a7dc:	2301      	movne	r3, #1
 801a7de:	2300      	moveq	r3, #0
 801a7e0:	b2db      	uxtb	r3, r3
 801a7e2:	e023      	b.n	801a82c <HAL_DMA_IRQHandler+0x440>
 801a7e4:	40020010 	.word	0x40020010
 801a7e8:	40020028 	.word	0x40020028
 801a7ec:	40020040 	.word	0x40020040
 801a7f0:	40020058 	.word	0x40020058
 801a7f4:	40020070 	.word	0x40020070
 801a7f8:	40020088 	.word	0x40020088
 801a7fc:	400200a0 	.word	0x400200a0
 801a800:	400200b8 	.word	0x400200b8
 801a804:	40020410 	.word	0x40020410
 801a808:	40020428 	.word	0x40020428
 801a80c:	40020440 	.word	0x40020440
 801a810:	40020458 	.word	0x40020458
 801a814:	40020470 	.word	0x40020470
 801a818:	40020488 	.word	0x40020488
 801a81c:	400204a0 	.word	0x400204a0
 801a820:	400204b8 	.word	0x400204b8
 801a824:	687b      	ldr	r3, [r7, #4]
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	681b      	ldr	r3, [r3, #0]
 801a82a:	2300      	movs	r3, #0
 801a82c:	2b00      	cmp	r3, #0
 801a82e:	d00d      	beq.n	801a84c <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a830:	687b      	ldr	r3, [r7, #4]
 801a832:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a834:	f003 031f 	and.w	r3, r3, #31
 801a838:	2204      	movs	r2, #4
 801a83a:	409a      	lsls	r2, r3
 801a83c:	6a3b      	ldr	r3, [r7, #32]
 801a83e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 801a840:	687b      	ldr	r3, [r7, #4]
 801a842:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801a844:	f043 0204 	orr.w	r2, r3, #4
 801a848:	687b      	ldr	r3, [r7, #4]
 801a84a:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a84c:	687b      	ldr	r3, [r7, #4]
 801a84e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a850:	f003 031f 	and.w	r3, r3, #31
 801a854:	2210      	movs	r2, #16
 801a856:	409a      	lsls	r2, r3
 801a858:	69bb      	ldr	r3, [r7, #24]
 801a85a:	4013      	ands	r3, r2
 801a85c:	2b00      	cmp	r3, #0
 801a85e:	f000 80a6 	beq.w	801a9ae <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	4a85      	ldr	r2, [pc, #532]	@ (801aa7c <HAL_DMA_IRQHandler+0x690>)
 801a868:	4293      	cmp	r3, r2
 801a86a:	d04a      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	4a83      	ldr	r2, [pc, #524]	@ (801aa80 <HAL_DMA_IRQHandler+0x694>)
 801a872:	4293      	cmp	r3, r2
 801a874:	d045      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	4a82      	ldr	r2, [pc, #520]	@ (801aa84 <HAL_DMA_IRQHandler+0x698>)
 801a87c:	4293      	cmp	r3, r2
 801a87e:	d040      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	681b      	ldr	r3, [r3, #0]
 801a884:	4a80      	ldr	r2, [pc, #512]	@ (801aa88 <HAL_DMA_IRQHandler+0x69c>)
 801a886:	4293      	cmp	r3, r2
 801a888:	d03b      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a88a:	687b      	ldr	r3, [r7, #4]
 801a88c:	681b      	ldr	r3, [r3, #0]
 801a88e:	4a7f      	ldr	r2, [pc, #508]	@ (801aa8c <HAL_DMA_IRQHandler+0x6a0>)
 801a890:	4293      	cmp	r3, r2
 801a892:	d036      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a894:	687b      	ldr	r3, [r7, #4]
 801a896:	681b      	ldr	r3, [r3, #0]
 801a898:	4a7d      	ldr	r2, [pc, #500]	@ (801aa90 <HAL_DMA_IRQHandler+0x6a4>)
 801a89a:	4293      	cmp	r3, r2
 801a89c:	d031      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a89e:	687b      	ldr	r3, [r7, #4]
 801a8a0:	681b      	ldr	r3, [r3, #0]
 801a8a2:	4a7c      	ldr	r2, [pc, #496]	@ (801aa94 <HAL_DMA_IRQHandler+0x6a8>)
 801a8a4:	4293      	cmp	r3, r2
 801a8a6:	d02c      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a8a8:	687b      	ldr	r3, [r7, #4]
 801a8aa:	681b      	ldr	r3, [r3, #0]
 801a8ac:	4a7a      	ldr	r2, [pc, #488]	@ (801aa98 <HAL_DMA_IRQHandler+0x6ac>)
 801a8ae:	4293      	cmp	r3, r2
 801a8b0:	d027      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a8b2:	687b      	ldr	r3, [r7, #4]
 801a8b4:	681b      	ldr	r3, [r3, #0]
 801a8b6:	4a79      	ldr	r2, [pc, #484]	@ (801aa9c <HAL_DMA_IRQHandler+0x6b0>)
 801a8b8:	4293      	cmp	r3, r2
 801a8ba:	d022      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a8bc:	687b      	ldr	r3, [r7, #4]
 801a8be:	681b      	ldr	r3, [r3, #0]
 801a8c0:	4a77      	ldr	r2, [pc, #476]	@ (801aaa0 <HAL_DMA_IRQHandler+0x6b4>)
 801a8c2:	4293      	cmp	r3, r2
 801a8c4:	d01d      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a8c6:	687b      	ldr	r3, [r7, #4]
 801a8c8:	681b      	ldr	r3, [r3, #0]
 801a8ca:	4a76      	ldr	r2, [pc, #472]	@ (801aaa4 <HAL_DMA_IRQHandler+0x6b8>)
 801a8cc:	4293      	cmp	r3, r2
 801a8ce:	d018      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a8d0:	687b      	ldr	r3, [r7, #4]
 801a8d2:	681b      	ldr	r3, [r3, #0]
 801a8d4:	4a74      	ldr	r2, [pc, #464]	@ (801aaa8 <HAL_DMA_IRQHandler+0x6bc>)
 801a8d6:	4293      	cmp	r3, r2
 801a8d8:	d013      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a8da:	687b      	ldr	r3, [r7, #4]
 801a8dc:	681b      	ldr	r3, [r3, #0]
 801a8de:	4a73      	ldr	r2, [pc, #460]	@ (801aaac <HAL_DMA_IRQHandler+0x6c0>)
 801a8e0:	4293      	cmp	r3, r2
 801a8e2:	d00e      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a8e4:	687b      	ldr	r3, [r7, #4]
 801a8e6:	681b      	ldr	r3, [r3, #0]
 801a8e8:	4a71      	ldr	r2, [pc, #452]	@ (801aab0 <HAL_DMA_IRQHandler+0x6c4>)
 801a8ea:	4293      	cmp	r3, r2
 801a8ec:	d009      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a8ee:	687b      	ldr	r3, [r7, #4]
 801a8f0:	681b      	ldr	r3, [r3, #0]
 801a8f2:	4a70      	ldr	r2, [pc, #448]	@ (801aab4 <HAL_DMA_IRQHandler+0x6c8>)
 801a8f4:	4293      	cmp	r3, r2
 801a8f6:	d004      	beq.n	801a902 <HAL_DMA_IRQHandler+0x516>
 801a8f8:	687b      	ldr	r3, [r7, #4]
 801a8fa:	681b      	ldr	r3, [r3, #0]
 801a8fc:	4a6e      	ldr	r2, [pc, #440]	@ (801aab8 <HAL_DMA_IRQHandler+0x6cc>)
 801a8fe:	4293      	cmp	r3, r2
 801a900:	d10a      	bne.n	801a918 <HAL_DMA_IRQHandler+0x52c>
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	681b      	ldr	r3, [r3, #0]
 801a908:	f003 0308 	and.w	r3, r3, #8
 801a90c:	2b00      	cmp	r3, #0
 801a90e:	bf14      	ite	ne
 801a910:	2301      	movne	r3, #1
 801a912:	2300      	moveq	r3, #0
 801a914:	b2db      	uxtb	r3, r3
 801a916:	e009      	b.n	801a92c <HAL_DMA_IRQHandler+0x540>
 801a918:	687b      	ldr	r3, [r7, #4]
 801a91a:	681b      	ldr	r3, [r3, #0]
 801a91c:	681b      	ldr	r3, [r3, #0]
 801a91e:	f003 0304 	and.w	r3, r3, #4
 801a922:	2b00      	cmp	r3, #0
 801a924:	bf14      	ite	ne
 801a926:	2301      	movne	r3, #1
 801a928:	2300      	moveq	r3, #0
 801a92a:	b2db      	uxtb	r3, r3
 801a92c:	2b00      	cmp	r3, #0
 801a92e:	d03e      	beq.n	801a9ae <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 801a930:	687b      	ldr	r3, [r7, #4]
 801a932:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a934:	f003 031f 	and.w	r3, r3, #31
 801a938:	2210      	movs	r2, #16
 801a93a:	409a      	lsls	r2, r3
 801a93c:	6a3b      	ldr	r3, [r7, #32]
 801a93e:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801a940:	687b      	ldr	r3, [r7, #4]
 801a942:	681b      	ldr	r3, [r3, #0]
 801a944:	681b      	ldr	r3, [r3, #0]
 801a946:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801a94a:	2b00      	cmp	r3, #0
 801a94c:	d018      	beq.n	801a980 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801a94e:	687b      	ldr	r3, [r7, #4]
 801a950:	681b      	ldr	r3, [r3, #0]
 801a952:	681b      	ldr	r3, [r3, #0]
 801a954:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801a958:	2b00      	cmp	r3, #0
 801a95a:	d108      	bne.n	801a96e <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 801a95c:	687b      	ldr	r3, [r7, #4]
 801a95e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a960:	2b00      	cmp	r3, #0
 801a962:	d024      	beq.n	801a9ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 801a964:	687b      	ldr	r3, [r7, #4]
 801a966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a968:	6878      	ldr	r0, [r7, #4]
 801a96a:	4798      	blx	r3
 801a96c:	e01f      	b.n	801a9ae <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 801a96e:	687b      	ldr	r3, [r7, #4]
 801a970:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a972:	2b00      	cmp	r3, #0
 801a974:	d01b      	beq.n	801a9ae <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 801a976:	687b      	ldr	r3, [r7, #4]
 801a978:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a97a:	6878      	ldr	r0, [r7, #4]
 801a97c:	4798      	blx	r3
 801a97e:	e016      	b.n	801a9ae <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801a980:	687b      	ldr	r3, [r7, #4]
 801a982:	681b      	ldr	r3, [r3, #0]
 801a984:	681b      	ldr	r3, [r3, #0]
 801a986:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a98a:	2b00      	cmp	r3, #0
 801a98c:	d107      	bne.n	801a99e <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	681b      	ldr	r3, [r3, #0]
 801a992:	681a      	ldr	r2, [r3, #0]
 801a994:	687b      	ldr	r3, [r7, #4]
 801a996:	681b      	ldr	r3, [r3, #0]
 801a998:	f022 0208 	bic.w	r2, r2, #8
 801a99c:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 801a99e:	687b      	ldr	r3, [r7, #4]
 801a9a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a9a2:	2b00      	cmp	r3, #0
 801a9a4:	d003      	beq.n	801a9ae <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 801a9a6:	687b      	ldr	r3, [r7, #4]
 801a9a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a9aa:	6878      	ldr	r0, [r7, #4]
 801a9ac:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 801a9ae:	687b      	ldr	r3, [r7, #4]
 801a9b0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801a9b2:	f003 031f 	and.w	r3, r3, #31
 801a9b6:	2220      	movs	r2, #32
 801a9b8:	409a      	lsls	r2, r3
 801a9ba:	69bb      	ldr	r3, [r7, #24]
 801a9bc:	4013      	ands	r3, r2
 801a9be:	2b00      	cmp	r3, #0
 801a9c0:	f000 8110 	beq.w	801abe4 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 801a9c4:	687b      	ldr	r3, [r7, #4]
 801a9c6:	681b      	ldr	r3, [r3, #0]
 801a9c8:	4a2c      	ldr	r2, [pc, #176]	@ (801aa7c <HAL_DMA_IRQHandler+0x690>)
 801a9ca:	4293      	cmp	r3, r2
 801a9cc:	d04a      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801a9ce:	687b      	ldr	r3, [r7, #4]
 801a9d0:	681b      	ldr	r3, [r3, #0]
 801a9d2:	4a2b      	ldr	r2, [pc, #172]	@ (801aa80 <HAL_DMA_IRQHandler+0x694>)
 801a9d4:	4293      	cmp	r3, r2
 801a9d6:	d045      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801a9d8:	687b      	ldr	r3, [r7, #4]
 801a9da:	681b      	ldr	r3, [r3, #0]
 801a9dc:	4a29      	ldr	r2, [pc, #164]	@ (801aa84 <HAL_DMA_IRQHandler+0x698>)
 801a9de:	4293      	cmp	r3, r2
 801a9e0:	d040      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801a9e2:	687b      	ldr	r3, [r7, #4]
 801a9e4:	681b      	ldr	r3, [r3, #0]
 801a9e6:	4a28      	ldr	r2, [pc, #160]	@ (801aa88 <HAL_DMA_IRQHandler+0x69c>)
 801a9e8:	4293      	cmp	r3, r2
 801a9ea:	d03b      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801a9ec:	687b      	ldr	r3, [r7, #4]
 801a9ee:	681b      	ldr	r3, [r3, #0]
 801a9f0:	4a26      	ldr	r2, [pc, #152]	@ (801aa8c <HAL_DMA_IRQHandler+0x6a0>)
 801a9f2:	4293      	cmp	r3, r2
 801a9f4:	d036      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801a9f6:	687b      	ldr	r3, [r7, #4]
 801a9f8:	681b      	ldr	r3, [r3, #0]
 801a9fa:	4a25      	ldr	r2, [pc, #148]	@ (801aa90 <HAL_DMA_IRQHandler+0x6a4>)
 801a9fc:	4293      	cmp	r3, r2
 801a9fe:	d031      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801aa00:	687b      	ldr	r3, [r7, #4]
 801aa02:	681b      	ldr	r3, [r3, #0]
 801aa04:	4a23      	ldr	r2, [pc, #140]	@ (801aa94 <HAL_DMA_IRQHandler+0x6a8>)
 801aa06:	4293      	cmp	r3, r2
 801aa08:	d02c      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801aa0a:	687b      	ldr	r3, [r7, #4]
 801aa0c:	681b      	ldr	r3, [r3, #0]
 801aa0e:	4a22      	ldr	r2, [pc, #136]	@ (801aa98 <HAL_DMA_IRQHandler+0x6ac>)
 801aa10:	4293      	cmp	r3, r2
 801aa12:	d027      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801aa14:	687b      	ldr	r3, [r7, #4]
 801aa16:	681b      	ldr	r3, [r3, #0]
 801aa18:	4a20      	ldr	r2, [pc, #128]	@ (801aa9c <HAL_DMA_IRQHandler+0x6b0>)
 801aa1a:	4293      	cmp	r3, r2
 801aa1c:	d022      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801aa1e:	687b      	ldr	r3, [r7, #4]
 801aa20:	681b      	ldr	r3, [r3, #0]
 801aa22:	4a1f      	ldr	r2, [pc, #124]	@ (801aaa0 <HAL_DMA_IRQHandler+0x6b4>)
 801aa24:	4293      	cmp	r3, r2
 801aa26:	d01d      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	4a1d      	ldr	r2, [pc, #116]	@ (801aaa4 <HAL_DMA_IRQHandler+0x6b8>)
 801aa2e:	4293      	cmp	r3, r2
 801aa30:	d018      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801aa32:	687b      	ldr	r3, [r7, #4]
 801aa34:	681b      	ldr	r3, [r3, #0]
 801aa36:	4a1c      	ldr	r2, [pc, #112]	@ (801aaa8 <HAL_DMA_IRQHandler+0x6bc>)
 801aa38:	4293      	cmp	r3, r2
 801aa3a:	d013      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801aa3c:	687b      	ldr	r3, [r7, #4]
 801aa3e:	681b      	ldr	r3, [r3, #0]
 801aa40:	4a1a      	ldr	r2, [pc, #104]	@ (801aaac <HAL_DMA_IRQHandler+0x6c0>)
 801aa42:	4293      	cmp	r3, r2
 801aa44:	d00e      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801aa46:	687b      	ldr	r3, [r7, #4]
 801aa48:	681b      	ldr	r3, [r3, #0]
 801aa4a:	4a19      	ldr	r2, [pc, #100]	@ (801aab0 <HAL_DMA_IRQHandler+0x6c4>)
 801aa4c:	4293      	cmp	r3, r2
 801aa4e:	d009      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801aa50:	687b      	ldr	r3, [r7, #4]
 801aa52:	681b      	ldr	r3, [r3, #0]
 801aa54:	4a17      	ldr	r2, [pc, #92]	@ (801aab4 <HAL_DMA_IRQHandler+0x6c8>)
 801aa56:	4293      	cmp	r3, r2
 801aa58:	d004      	beq.n	801aa64 <HAL_DMA_IRQHandler+0x678>
 801aa5a:	687b      	ldr	r3, [r7, #4]
 801aa5c:	681b      	ldr	r3, [r3, #0]
 801aa5e:	4a16      	ldr	r2, [pc, #88]	@ (801aab8 <HAL_DMA_IRQHandler+0x6cc>)
 801aa60:	4293      	cmp	r3, r2
 801aa62:	d12b      	bne.n	801aabc <HAL_DMA_IRQHandler+0x6d0>
 801aa64:	687b      	ldr	r3, [r7, #4]
 801aa66:	681b      	ldr	r3, [r3, #0]
 801aa68:	681b      	ldr	r3, [r3, #0]
 801aa6a:	f003 0310 	and.w	r3, r3, #16
 801aa6e:	2b00      	cmp	r3, #0
 801aa70:	bf14      	ite	ne
 801aa72:	2301      	movne	r3, #1
 801aa74:	2300      	moveq	r3, #0
 801aa76:	b2db      	uxtb	r3, r3
 801aa78:	e02a      	b.n	801aad0 <HAL_DMA_IRQHandler+0x6e4>
 801aa7a:	bf00      	nop
 801aa7c:	40020010 	.word	0x40020010
 801aa80:	40020028 	.word	0x40020028
 801aa84:	40020040 	.word	0x40020040
 801aa88:	40020058 	.word	0x40020058
 801aa8c:	40020070 	.word	0x40020070
 801aa90:	40020088 	.word	0x40020088
 801aa94:	400200a0 	.word	0x400200a0
 801aa98:	400200b8 	.word	0x400200b8
 801aa9c:	40020410 	.word	0x40020410
 801aaa0:	40020428 	.word	0x40020428
 801aaa4:	40020440 	.word	0x40020440
 801aaa8:	40020458 	.word	0x40020458
 801aaac:	40020470 	.word	0x40020470
 801aab0:	40020488 	.word	0x40020488
 801aab4:	400204a0 	.word	0x400204a0
 801aab8:	400204b8 	.word	0x400204b8
 801aabc:	687b      	ldr	r3, [r7, #4]
 801aabe:	681b      	ldr	r3, [r3, #0]
 801aac0:	681b      	ldr	r3, [r3, #0]
 801aac2:	f003 0302 	and.w	r3, r3, #2
 801aac6:	2b00      	cmp	r3, #0
 801aac8:	bf14      	ite	ne
 801aaca:	2301      	movne	r3, #1
 801aacc:	2300      	moveq	r3, #0
 801aace:	b2db      	uxtb	r3, r3
 801aad0:	2b00      	cmp	r3, #0
 801aad2:	f000 8087 	beq.w	801abe4 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 801aad6:	687b      	ldr	r3, [r7, #4]
 801aad8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801aada:	f003 031f 	and.w	r3, r3, #31
 801aade:	2220      	movs	r2, #32
 801aae0:	409a      	lsls	r2, r3
 801aae2:	6a3b      	ldr	r3, [r7, #32]
 801aae4:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 801aae6:	687b      	ldr	r3, [r7, #4]
 801aae8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801aaec:	b2db      	uxtb	r3, r3
 801aaee:	2b04      	cmp	r3, #4
 801aaf0:	d139      	bne.n	801ab66 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 801aaf2:	687b      	ldr	r3, [r7, #4]
 801aaf4:	681b      	ldr	r3, [r3, #0]
 801aaf6:	681a      	ldr	r2, [r3, #0]
 801aaf8:	687b      	ldr	r3, [r7, #4]
 801aafa:	681b      	ldr	r3, [r3, #0]
 801aafc:	f022 0216 	bic.w	r2, r2, #22
 801ab00:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 801ab02:	687b      	ldr	r3, [r7, #4]
 801ab04:	681b      	ldr	r3, [r3, #0]
 801ab06:	695a      	ldr	r2, [r3, #20]
 801ab08:	687b      	ldr	r3, [r7, #4]
 801ab0a:	681b      	ldr	r3, [r3, #0]
 801ab0c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801ab10:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 801ab12:	687b      	ldr	r3, [r7, #4]
 801ab14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ab16:	2b00      	cmp	r3, #0
 801ab18:	d103      	bne.n	801ab22 <HAL_DMA_IRQHandler+0x736>
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801ab1e:	2b00      	cmp	r3, #0
 801ab20:	d007      	beq.n	801ab32 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 801ab22:	687b      	ldr	r3, [r7, #4]
 801ab24:	681b      	ldr	r3, [r3, #0]
 801ab26:	681a      	ldr	r2, [r3, #0]
 801ab28:	687b      	ldr	r3, [r7, #4]
 801ab2a:	681b      	ldr	r3, [r3, #0]
 801ab2c:	f022 0208 	bic.w	r2, r2, #8
 801ab30:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 801ab32:	687b      	ldr	r3, [r7, #4]
 801ab34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ab36:	f003 031f 	and.w	r3, r3, #31
 801ab3a:	223f      	movs	r2, #63	@ 0x3f
 801ab3c:	409a      	lsls	r2, r3
 801ab3e:	6a3b      	ldr	r3, [r7, #32]
 801ab40:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	2201      	movs	r2, #1
 801ab46:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801ab4a:	687b      	ldr	r3, [r7, #4]
 801ab4c:	2200      	movs	r2, #0
 801ab4e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ab56:	2b00      	cmp	r3, #0
 801ab58:	f000 834a 	beq.w	801b1f0 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 801ab5c:	687b      	ldr	r3, [r7, #4]
 801ab5e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ab60:	6878      	ldr	r0, [r7, #4]
 801ab62:	4798      	blx	r3
          }
          return;
 801ab64:	e344      	b.n	801b1f0 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 801ab66:	687b      	ldr	r3, [r7, #4]
 801ab68:	681b      	ldr	r3, [r3, #0]
 801ab6a:	681b      	ldr	r3, [r3, #0]
 801ab6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801ab70:	2b00      	cmp	r3, #0
 801ab72:	d018      	beq.n	801aba6 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 801ab74:	687b      	ldr	r3, [r7, #4]
 801ab76:	681b      	ldr	r3, [r3, #0]
 801ab78:	681b      	ldr	r3, [r3, #0]
 801ab7a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 801ab7e:	2b00      	cmp	r3, #0
 801ab80:	d108      	bne.n	801ab94 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 801ab82:	687b      	ldr	r3, [r7, #4]
 801ab84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ab86:	2b00      	cmp	r3, #0
 801ab88:	d02c      	beq.n	801abe4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 801ab8a:	687b      	ldr	r3, [r7, #4]
 801ab8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801ab8e:	6878      	ldr	r0, [r7, #4]
 801ab90:	4798      	blx	r3
 801ab92:	e027      	b.n	801abe4 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 801ab94:	687b      	ldr	r3, [r7, #4]
 801ab96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801ab98:	2b00      	cmp	r3, #0
 801ab9a:	d023      	beq.n	801abe4 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 801ab9c:	687b      	ldr	r3, [r7, #4]
 801ab9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801aba0:	6878      	ldr	r0, [r7, #4]
 801aba2:	4798      	blx	r3
 801aba4:	e01e      	b.n	801abe4 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 801aba6:	687b      	ldr	r3, [r7, #4]
 801aba8:	681b      	ldr	r3, [r3, #0]
 801abaa:	681b      	ldr	r3, [r3, #0]
 801abac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801abb0:	2b00      	cmp	r3, #0
 801abb2:	d10f      	bne.n	801abd4 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 801abb4:	687b      	ldr	r3, [r7, #4]
 801abb6:	681b      	ldr	r3, [r3, #0]
 801abb8:	681a      	ldr	r2, [r3, #0]
 801abba:	687b      	ldr	r3, [r7, #4]
 801abbc:	681b      	ldr	r3, [r3, #0]
 801abbe:	f022 0210 	bic.w	r2, r2, #16
 801abc2:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 801abc4:	687b      	ldr	r3, [r7, #4]
 801abc6:	2201      	movs	r2, #1
 801abc8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	2200      	movs	r2, #0
 801abd0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 801abd4:	687b      	ldr	r3, [r7, #4]
 801abd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801abd8:	2b00      	cmp	r3, #0
 801abda:	d003      	beq.n	801abe4 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801abe0:	6878      	ldr	r0, [r7, #4]
 801abe2:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 801abe4:	687b      	ldr	r3, [r7, #4]
 801abe6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801abe8:	2b00      	cmp	r3, #0
 801abea:	f000 8306 	beq.w	801b1fa <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 801abee:	687b      	ldr	r3, [r7, #4]
 801abf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801abf2:	f003 0301 	and.w	r3, r3, #1
 801abf6:	2b00      	cmp	r3, #0
 801abf8:	f000 8088 	beq.w	801ad0c <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 801abfc:	687b      	ldr	r3, [r7, #4]
 801abfe:	2204      	movs	r2, #4
 801ac00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 801ac04:	687b      	ldr	r3, [r7, #4]
 801ac06:	681b      	ldr	r3, [r3, #0]
 801ac08:	4a7a      	ldr	r2, [pc, #488]	@ (801adf4 <HAL_DMA_IRQHandler+0xa08>)
 801ac0a:	4293      	cmp	r3, r2
 801ac0c:	d04a      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	681b      	ldr	r3, [r3, #0]
 801ac12:	4a79      	ldr	r2, [pc, #484]	@ (801adf8 <HAL_DMA_IRQHandler+0xa0c>)
 801ac14:	4293      	cmp	r3, r2
 801ac16:	d045      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac18:	687b      	ldr	r3, [r7, #4]
 801ac1a:	681b      	ldr	r3, [r3, #0]
 801ac1c:	4a77      	ldr	r2, [pc, #476]	@ (801adfc <HAL_DMA_IRQHandler+0xa10>)
 801ac1e:	4293      	cmp	r3, r2
 801ac20:	d040      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	4a76      	ldr	r2, [pc, #472]	@ (801ae00 <HAL_DMA_IRQHandler+0xa14>)
 801ac28:	4293      	cmp	r3, r2
 801ac2a:	d03b      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac2c:	687b      	ldr	r3, [r7, #4]
 801ac2e:	681b      	ldr	r3, [r3, #0]
 801ac30:	4a74      	ldr	r2, [pc, #464]	@ (801ae04 <HAL_DMA_IRQHandler+0xa18>)
 801ac32:	4293      	cmp	r3, r2
 801ac34:	d036      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac36:	687b      	ldr	r3, [r7, #4]
 801ac38:	681b      	ldr	r3, [r3, #0]
 801ac3a:	4a73      	ldr	r2, [pc, #460]	@ (801ae08 <HAL_DMA_IRQHandler+0xa1c>)
 801ac3c:	4293      	cmp	r3, r2
 801ac3e:	d031      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac40:	687b      	ldr	r3, [r7, #4]
 801ac42:	681b      	ldr	r3, [r3, #0]
 801ac44:	4a71      	ldr	r2, [pc, #452]	@ (801ae0c <HAL_DMA_IRQHandler+0xa20>)
 801ac46:	4293      	cmp	r3, r2
 801ac48:	d02c      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	681b      	ldr	r3, [r3, #0]
 801ac4e:	4a70      	ldr	r2, [pc, #448]	@ (801ae10 <HAL_DMA_IRQHandler+0xa24>)
 801ac50:	4293      	cmp	r3, r2
 801ac52:	d027      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac54:	687b      	ldr	r3, [r7, #4]
 801ac56:	681b      	ldr	r3, [r3, #0]
 801ac58:	4a6e      	ldr	r2, [pc, #440]	@ (801ae14 <HAL_DMA_IRQHandler+0xa28>)
 801ac5a:	4293      	cmp	r3, r2
 801ac5c:	d022      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	681b      	ldr	r3, [r3, #0]
 801ac62:	4a6d      	ldr	r2, [pc, #436]	@ (801ae18 <HAL_DMA_IRQHandler+0xa2c>)
 801ac64:	4293      	cmp	r3, r2
 801ac66:	d01d      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	681b      	ldr	r3, [r3, #0]
 801ac6c:	4a6b      	ldr	r2, [pc, #428]	@ (801ae1c <HAL_DMA_IRQHandler+0xa30>)
 801ac6e:	4293      	cmp	r3, r2
 801ac70:	d018      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac72:	687b      	ldr	r3, [r7, #4]
 801ac74:	681b      	ldr	r3, [r3, #0]
 801ac76:	4a6a      	ldr	r2, [pc, #424]	@ (801ae20 <HAL_DMA_IRQHandler+0xa34>)
 801ac78:	4293      	cmp	r3, r2
 801ac7a:	d013      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac7c:	687b      	ldr	r3, [r7, #4]
 801ac7e:	681b      	ldr	r3, [r3, #0]
 801ac80:	4a68      	ldr	r2, [pc, #416]	@ (801ae24 <HAL_DMA_IRQHandler+0xa38>)
 801ac82:	4293      	cmp	r3, r2
 801ac84:	d00e      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	681b      	ldr	r3, [r3, #0]
 801ac8a:	4a67      	ldr	r2, [pc, #412]	@ (801ae28 <HAL_DMA_IRQHandler+0xa3c>)
 801ac8c:	4293      	cmp	r3, r2
 801ac8e:	d009      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac90:	687b      	ldr	r3, [r7, #4]
 801ac92:	681b      	ldr	r3, [r3, #0]
 801ac94:	4a65      	ldr	r2, [pc, #404]	@ (801ae2c <HAL_DMA_IRQHandler+0xa40>)
 801ac96:	4293      	cmp	r3, r2
 801ac98:	d004      	beq.n	801aca4 <HAL_DMA_IRQHandler+0x8b8>
 801ac9a:	687b      	ldr	r3, [r7, #4]
 801ac9c:	681b      	ldr	r3, [r3, #0]
 801ac9e:	4a64      	ldr	r2, [pc, #400]	@ (801ae30 <HAL_DMA_IRQHandler+0xa44>)
 801aca0:	4293      	cmp	r3, r2
 801aca2:	d108      	bne.n	801acb6 <HAL_DMA_IRQHandler+0x8ca>
 801aca4:	687b      	ldr	r3, [r7, #4]
 801aca6:	681b      	ldr	r3, [r3, #0]
 801aca8:	681a      	ldr	r2, [r3, #0]
 801acaa:	687b      	ldr	r3, [r7, #4]
 801acac:	681b      	ldr	r3, [r3, #0]
 801acae:	f022 0201 	bic.w	r2, r2, #1
 801acb2:	601a      	str	r2, [r3, #0]
 801acb4:	e007      	b.n	801acc6 <HAL_DMA_IRQHandler+0x8da>
 801acb6:	687b      	ldr	r3, [r7, #4]
 801acb8:	681b      	ldr	r3, [r3, #0]
 801acba:	681a      	ldr	r2, [r3, #0]
 801acbc:	687b      	ldr	r3, [r7, #4]
 801acbe:	681b      	ldr	r3, [r3, #0]
 801acc0:	f022 0201 	bic.w	r2, r2, #1
 801acc4:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 801acc6:	68fb      	ldr	r3, [r7, #12]
 801acc8:	3301      	adds	r3, #1
 801acca:	60fb      	str	r3, [r7, #12]
 801accc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801acce:	429a      	cmp	r2, r3
 801acd0:	d307      	bcc.n	801ace2 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801acd2:	687b      	ldr	r3, [r7, #4]
 801acd4:	681b      	ldr	r3, [r3, #0]
 801acd6:	681b      	ldr	r3, [r3, #0]
 801acd8:	f003 0301 	and.w	r3, r3, #1
 801acdc:	2b00      	cmp	r3, #0
 801acde:	d1f2      	bne.n	801acc6 <HAL_DMA_IRQHandler+0x8da>
 801ace0:	e000      	b.n	801ace4 <HAL_DMA_IRQHandler+0x8f8>
            break;
 801ace2:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 801ace4:	687b      	ldr	r3, [r7, #4]
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	681b      	ldr	r3, [r3, #0]
 801acea:	f003 0301 	and.w	r3, r3, #1
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d004      	beq.n	801acfc <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801acf2:	687b      	ldr	r3, [r7, #4]
 801acf4:	2203      	movs	r2, #3
 801acf6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 801acfa:	e003      	b.n	801ad04 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 801acfc:	687b      	ldr	r3, [r7, #4]
 801acfe:	2201      	movs	r2, #1
 801ad00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	2200      	movs	r2, #0
 801ad08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 801ad0c:	687b      	ldr	r3, [r7, #4]
 801ad0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ad10:	2b00      	cmp	r3, #0
 801ad12:	f000 8272 	beq.w	801b1fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801ad16:	687b      	ldr	r3, [r7, #4]
 801ad18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801ad1a:	6878      	ldr	r0, [r7, #4]
 801ad1c:	4798      	blx	r3
 801ad1e:	e26c      	b.n	801b1fa <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 801ad20:	687b      	ldr	r3, [r7, #4]
 801ad22:	681b      	ldr	r3, [r3, #0]
 801ad24:	4a43      	ldr	r2, [pc, #268]	@ (801ae34 <HAL_DMA_IRQHandler+0xa48>)
 801ad26:	4293      	cmp	r3, r2
 801ad28:	d022      	beq.n	801ad70 <HAL_DMA_IRQHandler+0x984>
 801ad2a:	687b      	ldr	r3, [r7, #4]
 801ad2c:	681b      	ldr	r3, [r3, #0]
 801ad2e:	4a42      	ldr	r2, [pc, #264]	@ (801ae38 <HAL_DMA_IRQHandler+0xa4c>)
 801ad30:	4293      	cmp	r3, r2
 801ad32:	d01d      	beq.n	801ad70 <HAL_DMA_IRQHandler+0x984>
 801ad34:	687b      	ldr	r3, [r7, #4]
 801ad36:	681b      	ldr	r3, [r3, #0]
 801ad38:	4a40      	ldr	r2, [pc, #256]	@ (801ae3c <HAL_DMA_IRQHandler+0xa50>)
 801ad3a:	4293      	cmp	r3, r2
 801ad3c:	d018      	beq.n	801ad70 <HAL_DMA_IRQHandler+0x984>
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	4a3f      	ldr	r2, [pc, #252]	@ (801ae40 <HAL_DMA_IRQHandler+0xa54>)
 801ad44:	4293      	cmp	r3, r2
 801ad46:	d013      	beq.n	801ad70 <HAL_DMA_IRQHandler+0x984>
 801ad48:	687b      	ldr	r3, [r7, #4]
 801ad4a:	681b      	ldr	r3, [r3, #0]
 801ad4c:	4a3d      	ldr	r2, [pc, #244]	@ (801ae44 <HAL_DMA_IRQHandler+0xa58>)
 801ad4e:	4293      	cmp	r3, r2
 801ad50:	d00e      	beq.n	801ad70 <HAL_DMA_IRQHandler+0x984>
 801ad52:	687b      	ldr	r3, [r7, #4]
 801ad54:	681b      	ldr	r3, [r3, #0]
 801ad56:	4a3c      	ldr	r2, [pc, #240]	@ (801ae48 <HAL_DMA_IRQHandler+0xa5c>)
 801ad58:	4293      	cmp	r3, r2
 801ad5a:	d009      	beq.n	801ad70 <HAL_DMA_IRQHandler+0x984>
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	4a3a      	ldr	r2, [pc, #232]	@ (801ae4c <HAL_DMA_IRQHandler+0xa60>)
 801ad62:	4293      	cmp	r3, r2
 801ad64:	d004      	beq.n	801ad70 <HAL_DMA_IRQHandler+0x984>
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	681b      	ldr	r3, [r3, #0]
 801ad6a:	4a39      	ldr	r2, [pc, #228]	@ (801ae50 <HAL_DMA_IRQHandler+0xa64>)
 801ad6c:	4293      	cmp	r3, r2
 801ad6e:	d101      	bne.n	801ad74 <HAL_DMA_IRQHandler+0x988>
 801ad70:	2301      	movs	r3, #1
 801ad72:	e000      	b.n	801ad76 <HAL_DMA_IRQHandler+0x98a>
 801ad74:	2300      	movs	r3, #0
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	f000 823f 	beq.w	801b1fa <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 801ad7c:	687b      	ldr	r3, [r7, #4]
 801ad7e:	681b      	ldr	r3, [r3, #0]
 801ad80:	681b      	ldr	r3, [r3, #0]
 801ad82:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 801ad84:	687b      	ldr	r3, [r7, #4]
 801ad86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ad88:	f003 031f 	and.w	r3, r3, #31
 801ad8c:	2204      	movs	r2, #4
 801ad8e:	409a      	lsls	r2, r3
 801ad90:	697b      	ldr	r3, [r7, #20]
 801ad92:	4013      	ands	r3, r2
 801ad94:	2b00      	cmp	r3, #0
 801ad96:	f000 80cd 	beq.w	801af34 <HAL_DMA_IRQHandler+0xb48>
 801ad9a:	693b      	ldr	r3, [r7, #16]
 801ad9c:	f003 0304 	and.w	r3, r3, #4
 801ada0:	2b00      	cmp	r3, #0
 801ada2:	f000 80c7 	beq.w	801af34 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801adaa:	f003 031f 	and.w	r3, r3, #31
 801adae:	2204      	movs	r2, #4
 801adb0:	409a      	lsls	r2, r3
 801adb2:	69fb      	ldr	r3, [r7, #28]
 801adb4:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801adb6:	693b      	ldr	r3, [r7, #16]
 801adb8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801adbc:	2b00      	cmp	r3, #0
 801adbe:	d049      	beq.n	801ae54 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801adc0:	693b      	ldr	r3, [r7, #16]
 801adc2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801adc6:	2b00      	cmp	r3, #0
 801adc8:	d109      	bne.n	801adde <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 801adca:	687b      	ldr	r3, [r7, #4]
 801adcc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801adce:	2b00      	cmp	r3, #0
 801add0:	f000 8210 	beq.w	801b1f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 801add4:	687b      	ldr	r3, [r7, #4]
 801add6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801add8:	6878      	ldr	r0, [r7, #4]
 801adda:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801addc:	e20a      	b.n	801b1f4 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801adde:	687b      	ldr	r3, [r7, #4]
 801ade0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801ade2:	2b00      	cmp	r3, #0
 801ade4:	f000 8206 	beq.w	801b1f4 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 801ade8:	687b      	ldr	r3, [r7, #4]
 801adea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801adec:	6878      	ldr	r0, [r7, #4]
 801adee:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801adf0:	e200      	b.n	801b1f4 <HAL_DMA_IRQHandler+0xe08>
 801adf2:	bf00      	nop
 801adf4:	40020010 	.word	0x40020010
 801adf8:	40020028 	.word	0x40020028
 801adfc:	40020040 	.word	0x40020040
 801ae00:	40020058 	.word	0x40020058
 801ae04:	40020070 	.word	0x40020070
 801ae08:	40020088 	.word	0x40020088
 801ae0c:	400200a0 	.word	0x400200a0
 801ae10:	400200b8 	.word	0x400200b8
 801ae14:	40020410 	.word	0x40020410
 801ae18:	40020428 	.word	0x40020428
 801ae1c:	40020440 	.word	0x40020440
 801ae20:	40020458 	.word	0x40020458
 801ae24:	40020470 	.word	0x40020470
 801ae28:	40020488 	.word	0x40020488
 801ae2c:	400204a0 	.word	0x400204a0
 801ae30:	400204b8 	.word	0x400204b8
 801ae34:	58025408 	.word	0x58025408
 801ae38:	5802541c 	.word	0x5802541c
 801ae3c:	58025430 	.word	0x58025430
 801ae40:	58025444 	.word	0x58025444
 801ae44:	58025458 	.word	0x58025458
 801ae48:	5802546c 	.word	0x5802546c
 801ae4c:	58025480 	.word	0x58025480
 801ae50:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801ae54:	693b      	ldr	r3, [r7, #16]
 801ae56:	f003 0320 	and.w	r3, r3, #32
 801ae5a:	2b00      	cmp	r3, #0
 801ae5c:	d160      	bne.n	801af20 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	681b      	ldr	r3, [r3, #0]
 801ae62:	4a7f      	ldr	r2, [pc, #508]	@ (801b060 <HAL_DMA_IRQHandler+0xc74>)
 801ae64:	4293      	cmp	r3, r2
 801ae66:	d04a      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801ae68:	687b      	ldr	r3, [r7, #4]
 801ae6a:	681b      	ldr	r3, [r3, #0]
 801ae6c:	4a7d      	ldr	r2, [pc, #500]	@ (801b064 <HAL_DMA_IRQHandler+0xc78>)
 801ae6e:	4293      	cmp	r3, r2
 801ae70:	d045      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801ae72:	687b      	ldr	r3, [r7, #4]
 801ae74:	681b      	ldr	r3, [r3, #0]
 801ae76:	4a7c      	ldr	r2, [pc, #496]	@ (801b068 <HAL_DMA_IRQHandler+0xc7c>)
 801ae78:	4293      	cmp	r3, r2
 801ae7a:	d040      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801ae7c:	687b      	ldr	r3, [r7, #4]
 801ae7e:	681b      	ldr	r3, [r3, #0]
 801ae80:	4a7a      	ldr	r2, [pc, #488]	@ (801b06c <HAL_DMA_IRQHandler+0xc80>)
 801ae82:	4293      	cmp	r3, r2
 801ae84:	d03b      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801ae86:	687b      	ldr	r3, [r7, #4]
 801ae88:	681b      	ldr	r3, [r3, #0]
 801ae8a:	4a79      	ldr	r2, [pc, #484]	@ (801b070 <HAL_DMA_IRQHandler+0xc84>)
 801ae8c:	4293      	cmp	r3, r2
 801ae8e:	d036      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801ae90:	687b      	ldr	r3, [r7, #4]
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	4a77      	ldr	r2, [pc, #476]	@ (801b074 <HAL_DMA_IRQHandler+0xc88>)
 801ae96:	4293      	cmp	r3, r2
 801ae98:	d031      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801ae9a:	687b      	ldr	r3, [r7, #4]
 801ae9c:	681b      	ldr	r3, [r3, #0]
 801ae9e:	4a76      	ldr	r2, [pc, #472]	@ (801b078 <HAL_DMA_IRQHandler+0xc8c>)
 801aea0:	4293      	cmp	r3, r2
 801aea2:	d02c      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801aea4:	687b      	ldr	r3, [r7, #4]
 801aea6:	681b      	ldr	r3, [r3, #0]
 801aea8:	4a74      	ldr	r2, [pc, #464]	@ (801b07c <HAL_DMA_IRQHandler+0xc90>)
 801aeaa:	4293      	cmp	r3, r2
 801aeac:	d027      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801aeae:	687b      	ldr	r3, [r7, #4]
 801aeb0:	681b      	ldr	r3, [r3, #0]
 801aeb2:	4a73      	ldr	r2, [pc, #460]	@ (801b080 <HAL_DMA_IRQHandler+0xc94>)
 801aeb4:	4293      	cmp	r3, r2
 801aeb6:	d022      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801aeb8:	687b      	ldr	r3, [r7, #4]
 801aeba:	681b      	ldr	r3, [r3, #0]
 801aebc:	4a71      	ldr	r2, [pc, #452]	@ (801b084 <HAL_DMA_IRQHandler+0xc98>)
 801aebe:	4293      	cmp	r3, r2
 801aec0:	d01d      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801aec2:	687b      	ldr	r3, [r7, #4]
 801aec4:	681b      	ldr	r3, [r3, #0]
 801aec6:	4a70      	ldr	r2, [pc, #448]	@ (801b088 <HAL_DMA_IRQHandler+0xc9c>)
 801aec8:	4293      	cmp	r3, r2
 801aeca:	d018      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801aecc:	687b      	ldr	r3, [r7, #4]
 801aece:	681b      	ldr	r3, [r3, #0]
 801aed0:	4a6e      	ldr	r2, [pc, #440]	@ (801b08c <HAL_DMA_IRQHandler+0xca0>)
 801aed2:	4293      	cmp	r3, r2
 801aed4:	d013      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801aed6:	687b      	ldr	r3, [r7, #4]
 801aed8:	681b      	ldr	r3, [r3, #0]
 801aeda:	4a6d      	ldr	r2, [pc, #436]	@ (801b090 <HAL_DMA_IRQHandler+0xca4>)
 801aedc:	4293      	cmp	r3, r2
 801aede:	d00e      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801aee0:	687b      	ldr	r3, [r7, #4]
 801aee2:	681b      	ldr	r3, [r3, #0]
 801aee4:	4a6b      	ldr	r2, [pc, #428]	@ (801b094 <HAL_DMA_IRQHandler+0xca8>)
 801aee6:	4293      	cmp	r3, r2
 801aee8:	d009      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801aeea:	687b      	ldr	r3, [r7, #4]
 801aeec:	681b      	ldr	r3, [r3, #0]
 801aeee:	4a6a      	ldr	r2, [pc, #424]	@ (801b098 <HAL_DMA_IRQHandler+0xcac>)
 801aef0:	4293      	cmp	r3, r2
 801aef2:	d004      	beq.n	801aefe <HAL_DMA_IRQHandler+0xb12>
 801aef4:	687b      	ldr	r3, [r7, #4]
 801aef6:	681b      	ldr	r3, [r3, #0]
 801aef8:	4a68      	ldr	r2, [pc, #416]	@ (801b09c <HAL_DMA_IRQHandler+0xcb0>)
 801aefa:	4293      	cmp	r3, r2
 801aefc:	d108      	bne.n	801af10 <HAL_DMA_IRQHandler+0xb24>
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	681a      	ldr	r2, [r3, #0]
 801af04:	687b      	ldr	r3, [r7, #4]
 801af06:	681b      	ldr	r3, [r3, #0]
 801af08:	f022 0208 	bic.w	r2, r2, #8
 801af0c:	601a      	str	r2, [r3, #0]
 801af0e:	e007      	b.n	801af20 <HAL_DMA_IRQHandler+0xb34>
 801af10:	687b      	ldr	r3, [r7, #4]
 801af12:	681b      	ldr	r3, [r3, #0]
 801af14:	681a      	ldr	r2, [r3, #0]
 801af16:	687b      	ldr	r3, [r7, #4]
 801af18:	681b      	ldr	r3, [r3, #0]
 801af1a:	f022 0204 	bic.w	r2, r2, #4
 801af1e:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 801af20:	687b      	ldr	r3, [r7, #4]
 801af22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801af24:	2b00      	cmp	r3, #0
 801af26:	f000 8165 	beq.w	801b1f4 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 801af2a:	687b      	ldr	r3, [r7, #4]
 801af2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801af2e:	6878      	ldr	r0, [r7, #4]
 801af30:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801af32:	e15f      	b.n	801b1f4 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 801af34:	687b      	ldr	r3, [r7, #4]
 801af36:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801af38:	f003 031f 	and.w	r3, r3, #31
 801af3c:	2202      	movs	r2, #2
 801af3e:	409a      	lsls	r2, r3
 801af40:	697b      	ldr	r3, [r7, #20]
 801af42:	4013      	ands	r3, r2
 801af44:	2b00      	cmp	r3, #0
 801af46:	f000 80c5 	beq.w	801b0d4 <HAL_DMA_IRQHandler+0xce8>
 801af4a:	693b      	ldr	r3, [r7, #16]
 801af4c:	f003 0302 	and.w	r3, r3, #2
 801af50:	2b00      	cmp	r3, #0
 801af52:	f000 80bf 	beq.w	801b0d4 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 801af56:	687b      	ldr	r3, [r7, #4]
 801af58:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801af5a:	f003 031f 	and.w	r3, r3, #31
 801af5e:	2202      	movs	r2, #2
 801af60:	409a      	lsls	r2, r3
 801af62:	69fb      	ldr	r3, [r7, #28]
 801af64:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801af66:	693b      	ldr	r3, [r7, #16]
 801af68:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801af6c:	2b00      	cmp	r3, #0
 801af6e:	d018      	beq.n	801afa2 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801af70:	693b      	ldr	r3, [r7, #16]
 801af72:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801af76:	2b00      	cmp	r3, #0
 801af78:	d109      	bne.n	801af8e <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801af7e:	2b00      	cmp	r3, #0
 801af80:	f000 813a 	beq.w	801b1f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801af88:	6878      	ldr	r0, [r7, #4]
 801af8a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801af8c:	e134      	b.n	801b1f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801af8e:	687b      	ldr	r3, [r7, #4]
 801af90:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801af92:	2b00      	cmp	r3, #0
 801af94:	f000 8130 	beq.w	801b1f8 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801af9c:	6878      	ldr	r0, [r7, #4]
 801af9e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801afa0:	e12a      	b.n	801b1f8 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801afa2:	693b      	ldr	r3, [r7, #16]
 801afa4:	f003 0320 	and.w	r3, r3, #32
 801afa8:	2b00      	cmp	r3, #0
 801afaa:	f040 8089 	bne.w	801b0c0 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	681b      	ldr	r3, [r3, #0]
 801afb2:	4a2b      	ldr	r2, [pc, #172]	@ (801b060 <HAL_DMA_IRQHandler+0xc74>)
 801afb4:	4293      	cmp	r3, r2
 801afb6:	d04a      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801afb8:	687b      	ldr	r3, [r7, #4]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	4a29      	ldr	r2, [pc, #164]	@ (801b064 <HAL_DMA_IRQHandler+0xc78>)
 801afbe:	4293      	cmp	r3, r2
 801afc0:	d045      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801afc2:	687b      	ldr	r3, [r7, #4]
 801afc4:	681b      	ldr	r3, [r3, #0]
 801afc6:	4a28      	ldr	r2, [pc, #160]	@ (801b068 <HAL_DMA_IRQHandler+0xc7c>)
 801afc8:	4293      	cmp	r3, r2
 801afca:	d040      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801afcc:	687b      	ldr	r3, [r7, #4]
 801afce:	681b      	ldr	r3, [r3, #0]
 801afd0:	4a26      	ldr	r2, [pc, #152]	@ (801b06c <HAL_DMA_IRQHandler+0xc80>)
 801afd2:	4293      	cmp	r3, r2
 801afd4:	d03b      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	681b      	ldr	r3, [r3, #0]
 801afda:	4a25      	ldr	r2, [pc, #148]	@ (801b070 <HAL_DMA_IRQHandler+0xc84>)
 801afdc:	4293      	cmp	r3, r2
 801afde:	d036      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801afe0:	687b      	ldr	r3, [r7, #4]
 801afe2:	681b      	ldr	r3, [r3, #0]
 801afe4:	4a23      	ldr	r2, [pc, #140]	@ (801b074 <HAL_DMA_IRQHandler+0xc88>)
 801afe6:	4293      	cmp	r3, r2
 801afe8:	d031      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801afea:	687b      	ldr	r3, [r7, #4]
 801afec:	681b      	ldr	r3, [r3, #0]
 801afee:	4a22      	ldr	r2, [pc, #136]	@ (801b078 <HAL_DMA_IRQHandler+0xc8c>)
 801aff0:	4293      	cmp	r3, r2
 801aff2:	d02c      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801aff4:	687b      	ldr	r3, [r7, #4]
 801aff6:	681b      	ldr	r3, [r3, #0]
 801aff8:	4a20      	ldr	r2, [pc, #128]	@ (801b07c <HAL_DMA_IRQHandler+0xc90>)
 801affa:	4293      	cmp	r3, r2
 801affc:	d027      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801affe:	687b      	ldr	r3, [r7, #4]
 801b000:	681b      	ldr	r3, [r3, #0]
 801b002:	4a1f      	ldr	r2, [pc, #124]	@ (801b080 <HAL_DMA_IRQHandler+0xc94>)
 801b004:	4293      	cmp	r3, r2
 801b006:	d022      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801b008:	687b      	ldr	r3, [r7, #4]
 801b00a:	681b      	ldr	r3, [r3, #0]
 801b00c:	4a1d      	ldr	r2, [pc, #116]	@ (801b084 <HAL_DMA_IRQHandler+0xc98>)
 801b00e:	4293      	cmp	r3, r2
 801b010:	d01d      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	681b      	ldr	r3, [r3, #0]
 801b016:	4a1c      	ldr	r2, [pc, #112]	@ (801b088 <HAL_DMA_IRQHandler+0xc9c>)
 801b018:	4293      	cmp	r3, r2
 801b01a:	d018      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801b01c:	687b      	ldr	r3, [r7, #4]
 801b01e:	681b      	ldr	r3, [r3, #0]
 801b020:	4a1a      	ldr	r2, [pc, #104]	@ (801b08c <HAL_DMA_IRQHandler+0xca0>)
 801b022:	4293      	cmp	r3, r2
 801b024:	d013      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801b026:	687b      	ldr	r3, [r7, #4]
 801b028:	681b      	ldr	r3, [r3, #0]
 801b02a:	4a19      	ldr	r2, [pc, #100]	@ (801b090 <HAL_DMA_IRQHandler+0xca4>)
 801b02c:	4293      	cmp	r3, r2
 801b02e:	d00e      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801b030:	687b      	ldr	r3, [r7, #4]
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	4a17      	ldr	r2, [pc, #92]	@ (801b094 <HAL_DMA_IRQHandler+0xca8>)
 801b036:	4293      	cmp	r3, r2
 801b038:	d009      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	681b      	ldr	r3, [r3, #0]
 801b03e:	4a16      	ldr	r2, [pc, #88]	@ (801b098 <HAL_DMA_IRQHandler+0xcac>)
 801b040:	4293      	cmp	r3, r2
 801b042:	d004      	beq.n	801b04e <HAL_DMA_IRQHandler+0xc62>
 801b044:	687b      	ldr	r3, [r7, #4]
 801b046:	681b      	ldr	r3, [r3, #0]
 801b048:	4a14      	ldr	r2, [pc, #80]	@ (801b09c <HAL_DMA_IRQHandler+0xcb0>)
 801b04a:	4293      	cmp	r3, r2
 801b04c:	d128      	bne.n	801b0a0 <HAL_DMA_IRQHandler+0xcb4>
 801b04e:	687b      	ldr	r3, [r7, #4]
 801b050:	681b      	ldr	r3, [r3, #0]
 801b052:	681a      	ldr	r2, [r3, #0]
 801b054:	687b      	ldr	r3, [r7, #4]
 801b056:	681b      	ldr	r3, [r3, #0]
 801b058:	f022 0214 	bic.w	r2, r2, #20
 801b05c:	601a      	str	r2, [r3, #0]
 801b05e:	e027      	b.n	801b0b0 <HAL_DMA_IRQHandler+0xcc4>
 801b060:	40020010 	.word	0x40020010
 801b064:	40020028 	.word	0x40020028
 801b068:	40020040 	.word	0x40020040
 801b06c:	40020058 	.word	0x40020058
 801b070:	40020070 	.word	0x40020070
 801b074:	40020088 	.word	0x40020088
 801b078:	400200a0 	.word	0x400200a0
 801b07c:	400200b8 	.word	0x400200b8
 801b080:	40020410 	.word	0x40020410
 801b084:	40020428 	.word	0x40020428
 801b088:	40020440 	.word	0x40020440
 801b08c:	40020458 	.word	0x40020458
 801b090:	40020470 	.word	0x40020470
 801b094:	40020488 	.word	0x40020488
 801b098:	400204a0 	.word	0x400204a0
 801b09c:	400204b8 	.word	0x400204b8
 801b0a0:	687b      	ldr	r3, [r7, #4]
 801b0a2:	681b      	ldr	r3, [r3, #0]
 801b0a4:	681a      	ldr	r2, [r3, #0]
 801b0a6:	687b      	ldr	r3, [r7, #4]
 801b0a8:	681b      	ldr	r3, [r3, #0]
 801b0aa:	f022 020a 	bic.w	r2, r2, #10
 801b0ae:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801b0b0:	687b      	ldr	r3, [r7, #4]
 801b0b2:	2201      	movs	r2, #1
 801b0b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 801b0b8:	687b      	ldr	r3, [r7, #4]
 801b0ba:	2200      	movs	r2, #0
 801b0bc:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801b0c0:	687b      	ldr	r3, [r7, #4]
 801b0c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b0c4:	2b00      	cmp	r3, #0
 801b0c6:	f000 8097 	beq.w	801b1f8 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 801b0ca:	687b      	ldr	r3, [r7, #4]
 801b0cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801b0ce:	6878      	ldr	r0, [r7, #4]
 801b0d0:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b0d2:	e091      	b.n	801b1f8 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 801b0d4:	687b      	ldr	r3, [r7, #4]
 801b0d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b0d8:	f003 031f 	and.w	r3, r3, #31
 801b0dc:	2208      	movs	r2, #8
 801b0de:	409a      	lsls	r2, r3
 801b0e0:	697b      	ldr	r3, [r7, #20]
 801b0e2:	4013      	ands	r3, r2
 801b0e4:	2b00      	cmp	r3, #0
 801b0e6:	f000 8088 	beq.w	801b1fa <HAL_DMA_IRQHandler+0xe0e>
 801b0ea:	693b      	ldr	r3, [r7, #16]
 801b0ec:	f003 0308 	and.w	r3, r3, #8
 801b0f0:	2b00      	cmp	r3, #0
 801b0f2:	f000 8082 	beq.w	801b1fa <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	681b      	ldr	r3, [r3, #0]
 801b0fa:	4a41      	ldr	r2, [pc, #260]	@ (801b200 <HAL_DMA_IRQHandler+0xe14>)
 801b0fc:	4293      	cmp	r3, r2
 801b0fe:	d04a      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b100:	687b      	ldr	r3, [r7, #4]
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	4a3f      	ldr	r2, [pc, #252]	@ (801b204 <HAL_DMA_IRQHandler+0xe18>)
 801b106:	4293      	cmp	r3, r2
 801b108:	d045      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b10a:	687b      	ldr	r3, [r7, #4]
 801b10c:	681b      	ldr	r3, [r3, #0]
 801b10e:	4a3e      	ldr	r2, [pc, #248]	@ (801b208 <HAL_DMA_IRQHandler+0xe1c>)
 801b110:	4293      	cmp	r3, r2
 801b112:	d040      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b114:	687b      	ldr	r3, [r7, #4]
 801b116:	681b      	ldr	r3, [r3, #0]
 801b118:	4a3c      	ldr	r2, [pc, #240]	@ (801b20c <HAL_DMA_IRQHandler+0xe20>)
 801b11a:	4293      	cmp	r3, r2
 801b11c:	d03b      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b11e:	687b      	ldr	r3, [r7, #4]
 801b120:	681b      	ldr	r3, [r3, #0]
 801b122:	4a3b      	ldr	r2, [pc, #236]	@ (801b210 <HAL_DMA_IRQHandler+0xe24>)
 801b124:	4293      	cmp	r3, r2
 801b126:	d036      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	681b      	ldr	r3, [r3, #0]
 801b12c:	4a39      	ldr	r2, [pc, #228]	@ (801b214 <HAL_DMA_IRQHandler+0xe28>)
 801b12e:	4293      	cmp	r3, r2
 801b130:	d031      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	681b      	ldr	r3, [r3, #0]
 801b136:	4a38      	ldr	r2, [pc, #224]	@ (801b218 <HAL_DMA_IRQHandler+0xe2c>)
 801b138:	4293      	cmp	r3, r2
 801b13a:	d02c      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b13c:	687b      	ldr	r3, [r7, #4]
 801b13e:	681b      	ldr	r3, [r3, #0]
 801b140:	4a36      	ldr	r2, [pc, #216]	@ (801b21c <HAL_DMA_IRQHandler+0xe30>)
 801b142:	4293      	cmp	r3, r2
 801b144:	d027      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b146:	687b      	ldr	r3, [r7, #4]
 801b148:	681b      	ldr	r3, [r3, #0]
 801b14a:	4a35      	ldr	r2, [pc, #212]	@ (801b220 <HAL_DMA_IRQHandler+0xe34>)
 801b14c:	4293      	cmp	r3, r2
 801b14e:	d022      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b150:	687b      	ldr	r3, [r7, #4]
 801b152:	681b      	ldr	r3, [r3, #0]
 801b154:	4a33      	ldr	r2, [pc, #204]	@ (801b224 <HAL_DMA_IRQHandler+0xe38>)
 801b156:	4293      	cmp	r3, r2
 801b158:	d01d      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b15a:	687b      	ldr	r3, [r7, #4]
 801b15c:	681b      	ldr	r3, [r3, #0]
 801b15e:	4a32      	ldr	r2, [pc, #200]	@ (801b228 <HAL_DMA_IRQHandler+0xe3c>)
 801b160:	4293      	cmp	r3, r2
 801b162:	d018      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b164:	687b      	ldr	r3, [r7, #4]
 801b166:	681b      	ldr	r3, [r3, #0]
 801b168:	4a30      	ldr	r2, [pc, #192]	@ (801b22c <HAL_DMA_IRQHandler+0xe40>)
 801b16a:	4293      	cmp	r3, r2
 801b16c:	d013      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b16e:	687b      	ldr	r3, [r7, #4]
 801b170:	681b      	ldr	r3, [r3, #0]
 801b172:	4a2f      	ldr	r2, [pc, #188]	@ (801b230 <HAL_DMA_IRQHandler+0xe44>)
 801b174:	4293      	cmp	r3, r2
 801b176:	d00e      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b178:	687b      	ldr	r3, [r7, #4]
 801b17a:	681b      	ldr	r3, [r3, #0]
 801b17c:	4a2d      	ldr	r2, [pc, #180]	@ (801b234 <HAL_DMA_IRQHandler+0xe48>)
 801b17e:	4293      	cmp	r3, r2
 801b180:	d009      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b182:	687b      	ldr	r3, [r7, #4]
 801b184:	681b      	ldr	r3, [r3, #0]
 801b186:	4a2c      	ldr	r2, [pc, #176]	@ (801b238 <HAL_DMA_IRQHandler+0xe4c>)
 801b188:	4293      	cmp	r3, r2
 801b18a:	d004      	beq.n	801b196 <HAL_DMA_IRQHandler+0xdaa>
 801b18c:	687b      	ldr	r3, [r7, #4]
 801b18e:	681b      	ldr	r3, [r3, #0]
 801b190:	4a2a      	ldr	r2, [pc, #168]	@ (801b23c <HAL_DMA_IRQHandler+0xe50>)
 801b192:	4293      	cmp	r3, r2
 801b194:	d108      	bne.n	801b1a8 <HAL_DMA_IRQHandler+0xdbc>
 801b196:	687b      	ldr	r3, [r7, #4]
 801b198:	681b      	ldr	r3, [r3, #0]
 801b19a:	681a      	ldr	r2, [r3, #0]
 801b19c:	687b      	ldr	r3, [r7, #4]
 801b19e:	681b      	ldr	r3, [r3, #0]
 801b1a0:	f022 021c 	bic.w	r2, r2, #28
 801b1a4:	601a      	str	r2, [r3, #0]
 801b1a6:	e007      	b.n	801b1b8 <HAL_DMA_IRQHandler+0xdcc>
 801b1a8:	687b      	ldr	r3, [r7, #4]
 801b1aa:	681b      	ldr	r3, [r3, #0]
 801b1ac:	681a      	ldr	r2, [r3, #0]
 801b1ae:	687b      	ldr	r3, [r7, #4]
 801b1b0:	681b      	ldr	r3, [r3, #0]
 801b1b2:	f022 020e 	bic.w	r2, r2, #14
 801b1b6:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 801b1b8:	687b      	ldr	r3, [r7, #4]
 801b1ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b1bc:	f003 031f 	and.w	r3, r3, #31
 801b1c0:	2201      	movs	r2, #1
 801b1c2:	409a      	lsls	r2, r3
 801b1c4:	69fb      	ldr	r3, [r7, #28]
 801b1c6:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801b1c8:	687b      	ldr	r3, [r7, #4]
 801b1ca:	2201      	movs	r2, #1
 801b1cc:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801b1ce:	687b      	ldr	r3, [r7, #4]
 801b1d0:	2201      	movs	r2, #1
 801b1d2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 801b1d6:	687b      	ldr	r3, [r7, #4]
 801b1d8:	2200      	movs	r2, #0
 801b1da:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b1e2:	2b00      	cmp	r3, #0
 801b1e4:	d009      	beq.n	801b1fa <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 801b1e6:	687b      	ldr	r3, [r7, #4]
 801b1e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b1ea:	6878      	ldr	r0, [r7, #4]
 801b1ec:	4798      	blx	r3
 801b1ee:	e004      	b.n	801b1fa <HAL_DMA_IRQHandler+0xe0e>
          return;
 801b1f0:	bf00      	nop
 801b1f2:	e002      	b.n	801b1fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b1f4:	bf00      	nop
 801b1f6:	e000      	b.n	801b1fa <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801b1f8:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 801b1fa:	3728      	adds	r7, #40	@ 0x28
 801b1fc:	46bd      	mov	sp, r7
 801b1fe:	bd80      	pop	{r7, pc}
 801b200:	40020010 	.word	0x40020010
 801b204:	40020028 	.word	0x40020028
 801b208:	40020040 	.word	0x40020040
 801b20c:	40020058 	.word	0x40020058
 801b210:	40020070 	.word	0x40020070
 801b214:	40020088 	.word	0x40020088
 801b218:	400200a0 	.word	0x400200a0
 801b21c:	400200b8 	.word	0x400200b8
 801b220:	40020410 	.word	0x40020410
 801b224:	40020428 	.word	0x40020428
 801b228:	40020440 	.word	0x40020440
 801b22c:	40020458 	.word	0x40020458
 801b230:	40020470 	.word	0x40020470
 801b234:	40020488 	.word	0x40020488
 801b238:	400204a0 	.word	0x400204a0
 801b23c:	400204b8 	.word	0x400204b8

0801b240 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801b240:	b480      	push	{r7}
 801b242:	b085      	sub	sp, #20
 801b244:	af00      	add	r7, sp, #0
 801b246:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801b248:	687b      	ldr	r3, [r7, #4]
 801b24a:	681b      	ldr	r3, [r3, #0]
 801b24c:	4a42      	ldr	r2, [pc, #264]	@ (801b358 <DMA_CalcBaseAndBitshift+0x118>)
 801b24e:	4293      	cmp	r3, r2
 801b250:	d04a      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	4a41      	ldr	r2, [pc, #260]	@ (801b35c <DMA_CalcBaseAndBitshift+0x11c>)
 801b258:	4293      	cmp	r3, r2
 801b25a:	d045      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b25c:	687b      	ldr	r3, [r7, #4]
 801b25e:	681b      	ldr	r3, [r3, #0]
 801b260:	4a3f      	ldr	r2, [pc, #252]	@ (801b360 <DMA_CalcBaseAndBitshift+0x120>)
 801b262:	4293      	cmp	r3, r2
 801b264:	d040      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b266:	687b      	ldr	r3, [r7, #4]
 801b268:	681b      	ldr	r3, [r3, #0]
 801b26a:	4a3e      	ldr	r2, [pc, #248]	@ (801b364 <DMA_CalcBaseAndBitshift+0x124>)
 801b26c:	4293      	cmp	r3, r2
 801b26e:	d03b      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b270:	687b      	ldr	r3, [r7, #4]
 801b272:	681b      	ldr	r3, [r3, #0]
 801b274:	4a3c      	ldr	r2, [pc, #240]	@ (801b368 <DMA_CalcBaseAndBitshift+0x128>)
 801b276:	4293      	cmp	r3, r2
 801b278:	d036      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	681b      	ldr	r3, [r3, #0]
 801b27e:	4a3b      	ldr	r2, [pc, #236]	@ (801b36c <DMA_CalcBaseAndBitshift+0x12c>)
 801b280:	4293      	cmp	r3, r2
 801b282:	d031      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b284:	687b      	ldr	r3, [r7, #4]
 801b286:	681b      	ldr	r3, [r3, #0]
 801b288:	4a39      	ldr	r2, [pc, #228]	@ (801b370 <DMA_CalcBaseAndBitshift+0x130>)
 801b28a:	4293      	cmp	r3, r2
 801b28c:	d02c      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b28e:	687b      	ldr	r3, [r7, #4]
 801b290:	681b      	ldr	r3, [r3, #0]
 801b292:	4a38      	ldr	r2, [pc, #224]	@ (801b374 <DMA_CalcBaseAndBitshift+0x134>)
 801b294:	4293      	cmp	r3, r2
 801b296:	d027      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b298:	687b      	ldr	r3, [r7, #4]
 801b29a:	681b      	ldr	r3, [r3, #0]
 801b29c:	4a36      	ldr	r2, [pc, #216]	@ (801b378 <DMA_CalcBaseAndBitshift+0x138>)
 801b29e:	4293      	cmp	r3, r2
 801b2a0:	d022      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b2a2:	687b      	ldr	r3, [r7, #4]
 801b2a4:	681b      	ldr	r3, [r3, #0]
 801b2a6:	4a35      	ldr	r2, [pc, #212]	@ (801b37c <DMA_CalcBaseAndBitshift+0x13c>)
 801b2a8:	4293      	cmp	r3, r2
 801b2aa:	d01d      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b2ac:	687b      	ldr	r3, [r7, #4]
 801b2ae:	681b      	ldr	r3, [r3, #0]
 801b2b0:	4a33      	ldr	r2, [pc, #204]	@ (801b380 <DMA_CalcBaseAndBitshift+0x140>)
 801b2b2:	4293      	cmp	r3, r2
 801b2b4:	d018      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b2b6:	687b      	ldr	r3, [r7, #4]
 801b2b8:	681b      	ldr	r3, [r3, #0]
 801b2ba:	4a32      	ldr	r2, [pc, #200]	@ (801b384 <DMA_CalcBaseAndBitshift+0x144>)
 801b2bc:	4293      	cmp	r3, r2
 801b2be:	d013      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b2c0:	687b      	ldr	r3, [r7, #4]
 801b2c2:	681b      	ldr	r3, [r3, #0]
 801b2c4:	4a30      	ldr	r2, [pc, #192]	@ (801b388 <DMA_CalcBaseAndBitshift+0x148>)
 801b2c6:	4293      	cmp	r3, r2
 801b2c8:	d00e      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b2ca:	687b      	ldr	r3, [r7, #4]
 801b2cc:	681b      	ldr	r3, [r3, #0]
 801b2ce:	4a2f      	ldr	r2, [pc, #188]	@ (801b38c <DMA_CalcBaseAndBitshift+0x14c>)
 801b2d0:	4293      	cmp	r3, r2
 801b2d2:	d009      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b2d4:	687b      	ldr	r3, [r7, #4]
 801b2d6:	681b      	ldr	r3, [r3, #0]
 801b2d8:	4a2d      	ldr	r2, [pc, #180]	@ (801b390 <DMA_CalcBaseAndBitshift+0x150>)
 801b2da:	4293      	cmp	r3, r2
 801b2dc:	d004      	beq.n	801b2e8 <DMA_CalcBaseAndBitshift+0xa8>
 801b2de:	687b      	ldr	r3, [r7, #4]
 801b2e0:	681b      	ldr	r3, [r3, #0]
 801b2e2:	4a2c      	ldr	r2, [pc, #176]	@ (801b394 <DMA_CalcBaseAndBitshift+0x154>)
 801b2e4:	4293      	cmp	r3, r2
 801b2e6:	d101      	bne.n	801b2ec <DMA_CalcBaseAndBitshift+0xac>
 801b2e8:	2301      	movs	r3, #1
 801b2ea:	e000      	b.n	801b2ee <DMA_CalcBaseAndBitshift+0xae>
 801b2ec:	2300      	movs	r3, #0
 801b2ee:	2b00      	cmp	r3, #0
 801b2f0:	d024      	beq.n	801b33c <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b2f2:	687b      	ldr	r3, [r7, #4]
 801b2f4:	681b      	ldr	r3, [r3, #0]
 801b2f6:	b2db      	uxtb	r3, r3
 801b2f8:	3b10      	subs	r3, #16
 801b2fa:	4a27      	ldr	r2, [pc, #156]	@ (801b398 <DMA_CalcBaseAndBitshift+0x158>)
 801b2fc:	fba2 2303 	umull	r2, r3, r2, r3
 801b300:	091b      	lsrs	r3, r3, #4
 801b302:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 801b304:	68fb      	ldr	r3, [r7, #12]
 801b306:	f003 0307 	and.w	r3, r3, #7
 801b30a:	4a24      	ldr	r2, [pc, #144]	@ (801b39c <DMA_CalcBaseAndBitshift+0x15c>)
 801b30c:	5cd3      	ldrb	r3, [r2, r3]
 801b30e:	461a      	mov	r2, r3
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	2b03      	cmp	r3, #3
 801b318:	d908      	bls.n	801b32c <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	681b      	ldr	r3, [r3, #0]
 801b31e:	461a      	mov	r2, r3
 801b320:	4b1f      	ldr	r3, [pc, #124]	@ (801b3a0 <DMA_CalcBaseAndBitshift+0x160>)
 801b322:	4013      	ands	r3, r2
 801b324:	1d1a      	adds	r2, r3, #4
 801b326:	687b      	ldr	r3, [r7, #4]
 801b328:	659a      	str	r2, [r3, #88]	@ 0x58
 801b32a:	e00d      	b.n	801b348 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 801b32c:	687b      	ldr	r3, [r7, #4]
 801b32e:	681b      	ldr	r3, [r3, #0]
 801b330:	461a      	mov	r2, r3
 801b332:	4b1b      	ldr	r3, [pc, #108]	@ (801b3a0 <DMA_CalcBaseAndBitshift+0x160>)
 801b334:	4013      	ands	r3, r2
 801b336:	687a      	ldr	r2, [r7, #4]
 801b338:	6593      	str	r3, [r2, #88]	@ 0x58
 801b33a:	e005      	b.n	801b348 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 801b33c:	687b      	ldr	r3, [r7, #4]
 801b33e:	681b      	ldr	r3, [r3, #0]
 801b340:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 801b344:	687b      	ldr	r3, [r7, #4]
 801b346:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 801b348:	687b      	ldr	r3, [r7, #4]
 801b34a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 801b34c:	4618      	mov	r0, r3
 801b34e:	3714      	adds	r7, #20
 801b350:	46bd      	mov	sp, r7
 801b352:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b356:	4770      	bx	lr
 801b358:	40020010 	.word	0x40020010
 801b35c:	40020028 	.word	0x40020028
 801b360:	40020040 	.word	0x40020040
 801b364:	40020058 	.word	0x40020058
 801b368:	40020070 	.word	0x40020070
 801b36c:	40020088 	.word	0x40020088
 801b370:	400200a0 	.word	0x400200a0
 801b374:	400200b8 	.word	0x400200b8
 801b378:	40020410 	.word	0x40020410
 801b37c:	40020428 	.word	0x40020428
 801b380:	40020440 	.word	0x40020440
 801b384:	40020458 	.word	0x40020458
 801b388:	40020470 	.word	0x40020470
 801b38c:	40020488 	.word	0x40020488
 801b390:	400204a0 	.word	0x400204a0
 801b394:	400204b8 	.word	0x400204b8
 801b398:	aaaaaaab 	.word	0xaaaaaaab
 801b39c:	0802640c 	.word	0x0802640c
 801b3a0:	fffffc00 	.word	0xfffffc00

0801b3a4 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 801b3a4:	b480      	push	{r7}
 801b3a6:	b085      	sub	sp, #20
 801b3a8:	af00      	add	r7, sp, #0
 801b3aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801b3ac:	2300      	movs	r3, #0
 801b3ae:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 801b3b0:	687b      	ldr	r3, [r7, #4]
 801b3b2:	699b      	ldr	r3, [r3, #24]
 801b3b4:	2b00      	cmp	r3, #0
 801b3b6:	d120      	bne.n	801b3fa <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 801b3b8:	687b      	ldr	r3, [r7, #4]
 801b3ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b3bc:	2b03      	cmp	r3, #3
 801b3be:	d858      	bhi.n	801b472 <DMA_CheckFifoParam+0xce>
 801b3c0:	a201      	add	r2, pc, #4	@ (adr r2, 801b3c8 <DMA_CheckFifoParam+0x24>)
 801b3c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b3c6:	bf00      	nop
 801b3c8:	0801b3d9 	.word	0x0801b3d9
 801b3cc:	0801b3eb 	.word	0x0801b3eb
 801b3d0:	0801b3d9 	.word	0x0801b3d9
 801b3d4:	0801b473 	.word	0x0801b473
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b3e0:	2b00      	cmp	r3, #0
 801b3e2:	d048      	beq.n	801b476 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 801b3e4:	2301      	movs	r3, #1
 801b3e6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b3e8:	e045      	b.n	801b476 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801b3ea:	687b      	ldr	r3, [r7, #4]
 801b3ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b3ee:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801b3f2:	d142      	bne.n	801b47a <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 801b3f4:	2301      	movs	r3, #1
 801b3f6:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b3f8:	e03f      	b.n	801b47a <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 801b3fa:	687b      	ldr	r3, [r7, #4]
 801b3fc:	699b      	ldr	r3, [r3, #24]
 801b3fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b402:	d123      	bne.n	801b44c <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b408:	2b03      	cmp	r3, #3
 801b40a:	d838      	bhi.n	801b47e <DMA_CheckFifoParam+0xda>
 801b40c:	a201      	add	r2, pc, #4	@ (adr r2, 801b414 <DMA_CheckFifoParam+0x70>)
 801b40e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b412:	bf00      	nop
 801b414:	0801b425 	.word	0x0801b425
 801b418:	0801b42b 	.word	0x0801b42b
 801b41c:	0801b425 	.word	0x0801b425
 801b420:	0801b43d 	.word	0x0801b43d
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 801b424:	2301      	movs	r3, #1
 801b426:	73fb      	strb	r3, [r7, #15]
        break;
 801b428:	e030      	b.n	801b48c <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b42a:	687b      	ldr	r3, [r7, #4]
 801b42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b42e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b432:	2b00      	cmp	r3, #0
 801b434:	d025      	beq.n	801b482 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 801b436:	2301      	movs	r3, #1
 801b438:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b43a:	e022      	b.n	801b482 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 801b43c:	687b      	ldr	r3, [r7, #4]
 801b43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b440:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 801b444:	d11f      	bne.n	801b486 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 801b446:	2301      	movs	r3, #1
 801b448:	73fb      	strb	r3, [r7, #15]
        }
        break;
 801b44a:	e01c      	b.n	801b486 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 801b44c:	687b      	ldr	r3, [r7, #4]
 801b44e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801b450:	2b02      	cmp	r3, #2
 801b452:	d902      	bls.n	801b45a <DMA_CheckFifoParam+0xb6>
 801b454:	2b03      	cmp	r3, #3
 801b456:	d003      	beq.n	801b460 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 801b458:	e018      	b.n	801b48c <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 801b45a:	2301      	movs	r3, #1
 801b45c:	73fb      	strb	r3, [r7, #15]
        break;
 801b45e:	e015      	b.n	801b48c <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 801b460:	687b      	ldr	r3, [r7, #4]
 801b462:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b464:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801b468:	2b00      	cmp	r3, #0
 801b46a:	d00e      	beq.n	801b48a <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 801b46c:	2301      	movs	r3, #1
 801b46e:	73fb      	strb	r3, [r7, #15]
    break;
 801b470:	e00b      	b.n	801b48a <DMA_CheckFifoParam+0xe6>
        break;
 801b472:	bf00      	nop
 801b474:	e00a      	b.n	801b48c <DMA_CheckFifoParam+0xe8>
        break;
 801b476:	bf00      	nop
 801b478:	e008      	b.n	801b48c <DMA_CheckFifoParam+0xe8>
        break;
 801b47a:	bf00      	nop
 801b47c:	e006      	b.n	801b48c <DMA_CheckFifoParam+0xe8>
        break;
 801b47e:	bf00      	nop
 801b480:	e004      	b.n	801b48c <DMA_CheckFifoParam+0xe8>
        break;
 801b482:	bf00      	nop
 801b484:	e002      	b.n	801b48c <DMA_CheckFifoParam+0xe8>
        break;
 801b486:	bf00      	nop
 801b488:	e000      	b.n	801b48c <DMA_CheckFifoParam+0xe8>
    break;
 801b48a:	bf00      	nop
    }
  }

  return status;
 801b48c:	7bfb      	ldrb	r3, [r7, #15]
}
 801b48e:	4618      	mov	r0, r3
 801b490:	3714      	adds	r7, #20
 801b492:	46bd      	mov	sp, r7
 801b494:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b498:	4770      	bx	lr
 801b49a:	bf00      	nop

0801b49c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b49c:	b480      	push	{r7}
 801b49e:	b085      	sub	sp, #20
 801b4a0:	af00      	add	r7, sp, #0
 801b4a2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	681b      	ldr	r3, [r3, #0]
 801b4a8:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b4aa:	687b      	ldr	r3, [r7, #4]
 801b4ac:	681b      	ldr	r3, [r3, #0]
 801b4ae:	4a38      	ldr	r2, [pc, #224]	@ (801b590 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 801b4b0:	4293      	cmp	r3, r2
 801b4b2:	d022      	beq.n	801b4fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b4b4:	687b      	ldr	r3, [r7, #4]
 801b4b6:	681b      	ldr	r3, [r3, #0]
 801b4b8:	4a36      	ldr	r2, [pc, #216]	@ (801b594 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 801b4ba:	4293      	cmp	r3, r2
 801b4bc:	d01d      	beq.n	801b4fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b4be:	687b      	ldr	r3, [r7, #4]
 801b4c0:	681b      	ldr	r3, [r3, #0]
 801b4c2:	4a35      	ldr	r2, [pc, #212]	@ (801b598 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 801b4c4:	4293      	cmp	r3, r2
 801b4c6:	d018      	beq.n	801b4fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b4c8:	687b      	ldr	r3, [r7, #4]
 801b4ca:	681b      	ldr	r3, [r3, #0]
 801b4cc:	4a33      	ldr	r2, [pc, #204]	@ (801b59c <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 801b4ce:	4293      	cmp	r3, r2
 801b4d0:	d013      	beq.n	801b4fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b4d2:	687b      	ldr	r3, [r7, #4]
 801b4d4:	681b      	ldr	r3, [r3, #0]
 801b4d6:	4a32      	ldr	r2, [pc, #200]	@ (801b5a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 801b4d8:	4293      	cmp	r3, r2
 801b4da:	d00e      	beq.n	801b4fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b4dc:	687b      	ldr	r3, [r7, #4]
 801b4de:	681b      	ldr	r3, [r3, #0]
 801b4e0:	4a30      	ldr	r2, [pc, #192]	@ (801b5a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 801b4e2:	4293      	cmp	r3, r2
 801b4e4:	d009      	beq.n	801b4fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b4e6:	687b      	ldr	r3, [r7, #4]
 801b4e8:	681b      	ldr	r3, [r3, #0]
 801b4ea:	4a2f      	ldr	r2, [pc, #188]	@ (801b5a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 801b4ec:	4293      	cmp	r3, r2
 801b4ee:	d004      	beq.n	801b4fa <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 801b4f0:	687b      	ldr	r3, [r7, #4]
 801b4f2:	681b      	ldr	r3, [r3, #0]
 801b4f4:	4a2d      	ldr	r2, [pc, #180]	@ (801b5ac <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 801b4f6:	4293      	cmp	r3, r2
 801b4f8:	d101      	bne.n	801b4fe <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 801b4fa:	2301      	movs	r3, #1
 801b4fc:	e000      	b.n	801b500 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 801b4fe:	2300      	movs	r3, #0
 801b500:	2b00      	cmp	r3, #0
 801b502:	d01a      	beq.n	801b53a <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 801b504:	687b      	ldr	r3, [r7, #4]
 801b506:	681b      	ldr	r3, [r3, #0]
 801b508:	b2db      	uxtb	r3, r3
 801b50a:	3b08      	subs	r3, #8
 801b50c:	4a28      	ldr	r2, [pc, #160]	@ (801b5b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 801b50e:	fba2 2303 	umull	r2, r3, r2, r3
 801b512:	091b      	lsrs	r3, r3, #4
 801b514:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 801b516:	68fa      	ldr	r2, [r7, #12]
 801b518:	4b26      	ldr	r3, [pc, #152]	@ (801b5b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 801b51a:	4413      	add	r3, r2
 801b51c:	009b      	lsls	r3, r3, #2
 801b51e:	461a      	mov	r2, r3
 801b520:	687b      	ldr	r3, [r7, #4]
 801b522:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 801b524:	687b      	ldr	r3, [r7, #4]
 801b526:	4a24      	ldr	r2, [pc, #144]	@ (801b5b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 801b528:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b52a:	68fb      	ldr	r3, [r7, #12]
 801b52c:	f003 031f 	and.w	r3, r3, #31
 801b530:	2201      	movs	r2, #1
 801b532:	409a      	lsls	r2, r3
 801b534:	687b      	ldr	r3, [r7, #4]
 801b536:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 801b538:	e024      	b.n	801b584 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 801b53a:	687b      	ldr	r3, [r7, #4]
 801b53c:	681b      	ldr	r3, [r3, #0]
 801b53e:	b2db      	uxtb	r3, r3
 801b540:	3b10      	subs	r3, #16
 801b542:	4a1e      	ldr	r2, [pc, #120]	@ (801b5bc <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 801b544:	fba2 2303 	umull	r2, r3, r2, r3
 801b548:	091b      	lsrs	r3, r3, #4
 801b54a:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 801b54c:	68bb      	ldr	r3, [r7, #8]
 801b54e:	4a1c      	ldr	r2, [pc, #112]	@ (801b5c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 801b550:	4293      	cmp	r3, r2
 801b552:	d806      	bhi.n	801b562 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 801b554:	68bb      	ldr	r3, [r7, #8]
 801b556:	4a1b      	ldr	r2, [pc, #108]	@ (801b5c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 801b558:	4293      	cmp	r3, r2
 801b55a:	d902      	bls.n	801b562 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 801b55c:	68fb      	ldr	r3, [r7, #12]
 801b55e:	3308      	adds	r3, #8
 801b560:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 801b562:	68fa      	ldr	r2, [r7, #12]
 801b564:	4b18      	ldr	r3, [pc, #96]	@ (801b5c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 801b566:	4413      	add	r3, r2
 801b568:	009b      	lsls	r3, r3, #2
 801b56a:	461a      	mov	r2, r3
 801b56c:	687b      	ldr	r3, [r7, #4]
 801b56e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 801b570:	687b      	ldr	r3, [r7, #4]
 801b572:	4a16      	ldr	r2, [pc, #88]	@ (801b5cc <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 801b574:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 801b576:	68fb      	ldr	r3, [r7, #12]
 801b578:	f003 031f 	and.w	r3, r3, #31
 801b57c:	2201      	movs	r2, #1
 801b57e:	409a      	lsls	r2, r3
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	669a      	str	r2, [r3, #104]	@ 0x68
}
 801b584:	bf00      	nop
 801b586:	3714      	adds	r7, #20
 801b588:	46bd      	mov	sp, r7
 801b58a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b58e:	4770      	bx	lr
 801b590:	58025408 	.word	0x58025408
 801b594:	5802541c 	.word	0x5802541c
 801b598:	58025430 	.word	0x58025430
 801b59c:	58025444 	.word	0x58025444
 801b5a0:	58025458 	.word	0x58025458
 801b5a4:	5802546c 	.word	0x5802546c
 801b5a8:	58025480 	.word	0x58025480
 801b5ac:	58025494 	.word	0x58025494
 801b5b0:	cccccccd 	.word	0xcccccccd
 801b5b4:	16009600 	.word	0x16009600
 801b5b8:	58025880 	.word	0x58025880
 801b5bc:	aaaaaaab 	.word	0xaaaaaaab
 801b5c0:	400204b8 	.word	0x400204b8
 801b5c4:	4002040f 	.word	0x4002040f
 801b5c8:	10008200 	.word	0x10008200
 801b5cc:	40020880 	.word	0x40020880

0801b5d0 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801b5d0:	b480      	push	{r7}
 801b5d2:	b085      	sub	sp, #20
 801b5d4:	af00      	add	r7, sp, #0
 801b5d6:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 801b5d8:	687b      	ldr	r3, [r7, #4]
 801b5da:	685b      	ldr	r3, [r3, #4]
 801b5dc:	b2db      	uxtb	r3, r3
 801b5de:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 801b5e0:	68fb      	ldr	r3, [r7, #12]
 801b5e2:	2b00      	cmp	r3, #0
 801b5e4:	d04a      	beq.n	801b67c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 801b5e6:	68fb      	ldr	r3, [r7, #12]
 801b5e8:	2b08      	cmp	r3, #8
 801b5ea:	d847      	bhi.n	801b67c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801b5ec:	687b      	ldr	r3, [r7, #4]
 801b5ee:	681b      	ldr	r3, [r3, #0]
 801b5f0:	4a25      	ldr	r2, [pc, #148]	@ (801b688 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 801b5f2:	4293      	cmp	r3, r2
 801b5f4:	d022      	beq.n	801b63c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b5f6:	687b      	ldr	r3, [r7, #4]
 801b5f8:	681b      	ldr	r3, [r3, #0]
 801b5fa:	4a24      	ldr	r2, [pc, #144]	@ (801b68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 801b5fc:	4293      	cmp	r3, r2
 801b5fe:	d01d      	beq.n	801b63c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b600:	687b      	ldr	r3, [r7, #4]
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	4a22      	ldr	r2, [pc, #136]	@ (801b690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 801b606:	4293      	cmp	r3, r2
 801b608:	d018      	beq.n	801b63c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b60a:	687b      	ldr	r3, [r7, #4]
 801b60c:	681b      	ldr	r3, [r3, #0]
 801b60e:	4a21      	ldr	r2, [pc, #132]	@ (801b694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 801b610:	4293      	cmp	r3, r2
 801b612:	d013      	beq.n	801b63c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b614:	687b      	ldr	r3, [r7, #4]
 801b616:	681b      	ldr	r3, [r3, #0]
 801b618:	4a1f      	ldr	r2, [pc, #124]	@ (801b698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 801b61a:	4293      	cmp	r3, r2
 801b61c:	d00e      	beq.n	801b63c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b61e:	687b      	ldr	r3, [r7, #4]
 801b620:	681b      	ldr	r3, [r3, #0]
 801b622:	4a1e      	ldr	r2, [pc, #120]	@ (801b69c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 801b624:	4293      	cmp	r3, r2
 801b626:	d009      	beq.n	801b63c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b628:	687b      	ldr	r3, [r7, #4]
 801b62a:	681b      	ldr	r3, [r3, #0]
 801b62c:	4a1c      	ldr	r2, [pc, #112]	@ (801b6a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 801b62e:	4293      	cmp	r3, r2
 801b630:	d004      	beq.n	801b63c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 801b632:	687b      	ldr	r3, [r7, #4]
 801b634:	681b      	ldr	r3, [r3, #0]
 801b636:	4a1b      	ldr	r2, [pc, #108]	@ (801b6a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 801b638:	4293      	cmp	r3, r2
 801b63a:	d101      	bne.n	801b640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 801b63c:	2301      	movs	r3, #1
 801b63e:	e000      	b.n	801b642 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 801b640:	2300      	movs	r3, #0
 801b642:	2b00      	cmp	r3, #0
 801b644:	d00a      	beq.n	801b65c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 801b646:	68fa      	ldr	r2, [r7, #12]
 801b648:	4b17      	ldr	r3, [pc, #92]	@ (801b6a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 801b64a:	4413      	add	r3, r2
 801b64c:	009b      	lsls	r3, r3, #2
 801b64e:	461a      	mov	r2, r3
 801b650:	687b      	ldr	r3, [r7, #4]
 801b652:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 801b654:	687b      	ldr	r3, [r7, #4]
 801b656:	4a15      	ldr	r2, [pc, #84]	@ (801b6ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 801b658:	671a      	str	r2, [r3, #112]	@ 0x70
 801b65a:	e009      	b.n	801b670 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801b65c:	68fa      	ldr	r2, [r7, #12]
 801b65e:	4b14      	ldr	r3, [pc, #80]	@ (801b6b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 801b660:	4413      	add	r3, r2
 801b662:	009b      	lsls	r3, r3, #2
 801b664:	461a      	mov	r2, r3
 801b666:	687b      	ldr	r3, [r7, #4]
 801b668:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801b66a:	687b      	ldr	r3, [r7, #4]
 801b66c:	4a11      	ldr	r2, [pc, #68]	@ (801b6b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 801b66e:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 801b670:	68fb      	ldr	r3, [r7, #12]
 801b672:	3b01      	subs	r3, #1
 801b674:	2201      	movs	r2, #1
 801b676:	409a      	lsls	r2, r3
 801b678:	687b      	ldr	r3, [r7, #4]
 801b67a:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 801b67c:	bf00      	nop
 801b67e:	3714      	adds	r7, #20
 801b680:	46bd      	mov	sp, r7
 801b682:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b686:	4770      	bx	lr
 801b688:	58025408 	.word	0x58025408
 801b68c:	5802541c 	.word	0x5802541c
 801b690:	58025430 	.word	0x58025430
 801b694:	58025444 	.word	0x58025444
 801b698:	58025458 	.word	0x58025458
 801b69c:	5802546c 	.word	0x5802546c
 801b6a0:	58025480 	.word	0x58025480
 801b6a4:	58025494 	.word	0x58025494
 801b6a8:	1600963f 	.word	0x1600963f
 801b6ac:	58025940 	.word	0x58025940
 801b6b0:	1000823f 	.word	0x1000823f
 801b6b4:	40020940 	.word	0x40020940

0801b6b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 801b6b8:	b480      	push	{r7}
 801b6ba:	b089      	sub	sp, #36	@ 0x24
 801b6bc:	af00      	add	r7, sp, #0
 801b6be:	6078      	str	r0, [r7, #4]
 801b6c0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 801b6c2:	2300      	movs	r3, #0
 801b6c4:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 801b6c6:	4b89      	ldr	r3, [pc, #548]	@ (801b8ec <HAL_GPIO_Init+0x234>)
 801b6c8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801b6ca:	e194      	b.n	801b9f6 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801b6cc:	683b      	ldr	r3, [r7, #0]
 801b6ce:	681a      	ldr	r2, [r3, #0]
 801b6d0:	2101      	movs	r1, #1
 801b6d2:	69fb      	ldr	r3, [r7, #28]
 801b6d4:	fa01 f303 	lsl.w	r3, r1, r3
 801b6d8:	4013      	ands	r3, r2
 801b6da:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801b6dc:	693b      	ldr	r3, [r7, #16]
 801b6de:	2b00      	cmp	r3, #0
 801b6e0:	f000 8186 	beq.w	801b9f0 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 801b6e4:	683b      	ldr	r3, [r7, #0]
 801b6e6:	685b      	ldr	r3, [r3, #4]
 801b6e8:	f003 0303 	and.w	r3, r3, #3
 801b6ec:	2b01      	cmp	r3, #1
 801b6ee:	d005      	beq.n	801b6fc <HAL_GPIO_Init+0x44>
 801b6f0:	683b      	ldr	r3, [r7, #0]
 801b6f2:	685b      	ldr	r3, [r3, #4]
 801b6f4:	f003 0303 	and.w	r3, r3, #3
 801b6f8:	2b02      	cmp	r3, #2
 801b6fa:	d130      	bne.n	801b75e <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801b6fc:	687b      	ldr	r3, [r7, #4]
 801b6fe:	689b      	ldr	r3, [r3, #8]
 801b700:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801b702:	69fb      	ldr	r3, [r7, #28]
 801b704:	005b      	lsls	r3, r3, #1
 801b706:	2203      	movs	r2, #3
 801b708:	fa02 f303 	lsl.w	r3, r2, r3
 801b70c:	43db      	mvns	r3, r3
 801b70e:	69ba      	ldr	r2, [r7, #24]
 801b710:	4013      	ands	r3, r2
 801b712:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 801b714:	683b      	ldr	r3, [r7, #0]
 801b716:	68da      	ldr	r2, [r3, #12]
 801b718:	69fb      	ldr	r3, [r7, #28]
 801b71a:	005b      	lsls	r3, r3, #1
 801b71c:	fa02 f303 	lsl.w	r3, r2, r3
 801b720:	69ba      	ldr	r2, [r7, #24]
 801b722:	4313      	orrs	r3, r2
 801b724:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 801b726:	687b      	ldr	r3, [r7, #4]
 801b728:	69ba      	ldr	r2, [r7, #24]
 801b72a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801b72c:	687b      	ldr	r3, [r7, #4]
 801b72e:	685b      	ldr	r3, [r3, #4]
 801b730:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801b732:	2201      	movs	r2, #1
 801b734:	69fb      	ldr	r3, [r7, #28]
 801b736:	fa02 f303 	lsl.w	r3, r2, r3
 801b73a:	43db      	mvns	r3, r3
 801b73c:	69ba      	ldr	r2, [r7, #24]
 801b73e:	4013      	ands	r3, r2
 801b740:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801b742:	683b      	ldr	r3, [r7, #0]
 801b744:	685b      	ldr	r3, [r3, #4]
 801b746:	091b      	lsrs	r3, r3, #4
 801b748:	f003 0201 	and.w	r2, r3, #1
 801b74c:	69fb      	ldr	r3, [r7, #28]
 801b74e:	fa02 f303 	lsl.w	r3, r2, r3
 801b752:	69ba      	ldr	r2, [r7, #24]
 801b754:	4313      	orrs	r3, r2
 801b756:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 801b758:	687b      	ldr	r3, [r7, #4]
 801b75a:	69ba      	ldr	r2, [r7, #24]
 801b75c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801b75e:	683b      	ldr	r3, [r7, #0]
 801b760:	685b      	ldr	r3, [r3, #4]
 801b762:	f003 0303 	and.w	r3, r3, #3
 801b766:	2b03      	cmp	r3, #3
 801b768:	d017      	beq.n	801b79a <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 801b76a:	687b      	ldr	r3, [r7, #4]
 801b76c:	68db      	ldr	r3, [r3, #12]
 801b76e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 801b770:	69fb      	ldr	r3, [r7, #28]
 801b772:	005b      	lsls	r3, r3, #1
 801b774:	2203      	movs	r2, #3
 801b776:	fa02 f303 	lsl.w	r3, r2, r3
 801b77a:	43db      	mvns	r3, r3
 801b77c:	69ba      	ldr	r2, [r7, #24]
 801b77e:	4013      	ands	r3, r2
 801b780:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 801b782:	683b      	ldr	r3, [r7, #0]
 801b784:	689a      	ldr	r2, [r3, #8]
 801b786:	69fb      	ldr	r3, [r7, #28]
 801b788:	005b      	lsls	r3, r3, #1
 801b78a:	fa02 f303 	lsl.w	r3, r2, r3
 801b78e:	69ba      	ldr	r2, [r7, #24]
 801b790:	4313      	orrs	r3, r2
 801b792:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 801b794:	687b      	ldr	r3, [r7, #4]
 801b796:	69ba      	ldr	r2, [r7, #24]
 801b798:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 801b79a:	683b      	ldr	r3, [r7, #0]
 801b79c:	685b      	ldr	r3, [r3, #4]
 801b79e:	f003 0303 	and.w	r3, r3, #3
 801b7a2:	2b02      	cmp	r3, #2
 801b7a4:	d123      	bne.n	801b7ee <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 801b7a6:	69fb      	ldr	r3, [r7, #28]
 801b7a8:	08da      	lsrs	r2, r3, #3
 801b7aa:	687b      	ldr	r3, [r7, #4]
 801b7ac:	3208      	adds	r2, #8
 801b7ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801b7b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 801b7b4:	69fb      	ldr	r3, [r7, #28]
 801b7b6:	f003 0307 	and.w	r3, r3, #7
 801b7ba:	009b      	lsls	r3, r3, #2
 801b7bc:	220f      	movs	r2, #15
 801b7be:	fa02 f303 	lsl.w	r3, r2, r3
 801b7c2:	43db      	mvns	r3, r3
 801b7c4:	69ba      	ldr	r2, [r7, #24]
 801b7c6:	4013      	ands	r3, r2
 801b7c8:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 801b7ca:	683b      	ldr	r3, [r7, #0]
 801b7cc:	691a      	ldr	r2, [r3, #16]
 801b7ce:	69fb      	ldr	r3, [r7, #28]
 801b7d0:	f003 0307 	and.w	r3, r3, #7
 801b7d4:	009b      	lsls	r3, r3, #2
 801b7d6:	fa02 f303 	lsl.w	r3, r2, r3
 801b7da:	69ba      	ldr	r2, [r7, #24]
 801b7dc:	4313      	orrs	r3, r2
 801b7de:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 801b7e0:	69fb      	ldr	r3, [r7, #28]
 801b7e2:	08da      	lsrs	r2, r3, #3
 801b7e4:	687b      	ldr	r3, [r7, #4]
 801b7e6:	3208      	adds	r2, #8
 801b7e8:	69b9      	ldr	r1, [r7, #24]
 801b7ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801b7ee:	687b      	ldr	r3, [r7, #4]
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 801b7f4:	69fb      	ldr	r3, [r7, #28]
 801b7f6:	005b      	lsls	r3, r3, #1
 801b7f8:	2203      	movs	r2, #3
 801b7fa:	fa02 f303 	lsl.w	r3, r2, r3
 801b7fe:	43db      	mvns	r3, r3
 801b800:	69ba      	ldr	r2, [r7, #24]
 801b802:	4013      	ands	r3, r2
 801b804:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 801b806:	683b      	ldr	r3, [r7, #0]
 801b808:	685b      	ldr	r3, [r3, #4]
 801b80a:	f003 0203 	and.w	r2, r3, #3
 801b80e:	69fb      	ldr	r3, [r7, #28]
 801b810:	005b      	lsls	r3, r3, #1
 801b812:	fa02 f303 	lsl.w	r3, r2, r3
 801b816:	69ba      	ldr	r2, [r7, #24]
 801b818:	4313      	orrs	r3, r2
 801b81a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 801b81c:	687b      	ldr	r3, [r7, #4]
 801b81e:	69ba      	ldr	r2, [r7, #24]
 801b820:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 801b822:	683b      	ldr	r3, [r7, #0]
 801b824:	685b      	ldr	r3, [r3, #4]
 801b826:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801b82a:	2b00      	cmp	r3, #0
 801b82c:	f000 80e0 	beq.w	801b9f0 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 801b830:	4b2f      	ldr	r3, [pc, #188]	@ (801b8f0 <HAL_GPIO_Init+0x238>)
 801b832:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801b836:	4a2e      	ldr	r2, [pc, #184]	@ (801b8f0 <HAL_GPIO_Init+0x238>)
 801b838:	f043 0302 	orr.w	r3, r3, #2
 801b83c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 801b840:	4b2b      	ldr	r3, [pc, #172]	@ (801b8f0 <HAL_GPIO_Init+0x238>)
 801b842:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 801b846:	f003 0302 	and.w	r3, r3, #2
 801b84a:	60fb      	str	r3, [r7, #12]
 801b84c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 801b84e:	4a29      	ldr	r2, [pc, #164]	@ (801b8f4 <HAL_GPIO_Init+0x23c>)
 801b850:	69fb      	ldr	r3, [r7, #28]
 801b852:	089b      	lsrs	r3, r3, #2
 801b854:	3302      	adds	r3, #2
 801b856:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 801b85a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 801b85c:	69fb      	ldr	r3, [r7, #28]
 801b85e:	f003 0303 	and.w	r3, r3, #3
 801b862:	009b      	lsls	r3, r3, #2
 801b864:	220f      	movs	r2, #15
 801b866:	fa02 f303 	lsl.w	r3, r2, r3
 801b86a:	43db      	mvns	r3, r3
 801b86c:	69ba      	ldr	r2, [r7, #24]
 801b86e:	4013      	ands	r3, r2
 801b870:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 801b872:	687b      	ldr	r3, [r7, #4]
 801b874:	4a20      	ldr	r2, [pc, #128]	@ (801b8f8 <HAL_GPIO_Init+0x240>)
 801b876:	4293      	cmp	r3, r2
 801b878:	d052      	beq.n	801b920 <HAL_GPIO_Init+0x268>
 801b87a:	687b      	ldr	r3, [r7, #4]
 801b87c:	4a1f      	ldr	r2, [pc, #124]	@ (801b8fc <HAL_GPIO_Init+0x244>)
 801b87e:	4293      	cmp	r3, r2
 801b880:	d031      	beq.n	801b8e6 <HAL_GPIO_Init+0x22e>
 801b882:	687b      	ldr	r3, [r7, #4]
 801b884:	4a1e      	ldr	r2, [pc, #120]	@ (801b900 <HAL_GPIO_Init+0x248>)
 801b886:	4293      	cmp	r3, r2
 801b888:	d02b      	beq.n	801b8e2 <HAL_GPIO_Init+0x22a>
 801b88a:	687b      	ldr	r3, [r7, #4]
 801b88c:	4a1d      	ldr	r2, [pc, #116]	@ (801b904 <HAL_GPIO_Init+0x24c>)
 801b88e:	4293      	cmp	r3, r2
 801b890:	d025      	beq.n	801b8de <HAL_GPIO_Init+0x226>
 801b892:	687b      	ldr	r3, [r7, #4]
 801b894:	4a1c      	ldr	r2, [pc, #112]	@ (801b908 <HAL_GPIO_Init+0x250>)
 801b896:	4293      	cmp	r3, r2
 801b898:	d01f      	beq.n	801b8da <HAL_GPIO_Init+0x222>
 801b89a:	687b      	ldr	r3, [r7, #4]
 801b89c:	4a1b      	ldr	r2, [pc, #108]	@ (801b90c <HAL_GPIO_Init+0x254>)
 801b89e:	4293      	cmp	r3, r2
 801b8a0:	d019      	beq.n	801b8d6 <HAL_GPIO_Init+0x21e>
 801b8a2:	687b      	ldr	r3, [r7, #4]
 801b8a4:	4a1a      	ldr	r2, [pc, #104]	@ (801b910 <HAL_GPIO_Init+0x258>)
 801b8a6:	4293      	cmp	r3, r2
 801b8a8:	d013      	beq.n	801b8d2 <HAL_GPIO_Init+0x21a>
 801b8aa:	687b      	ldr	r3, [r7, #4]
 801b8ac:	4a19      	ldr	r2, [pc, #100]	@ (801b914 <HAL_GPIO_Init+0x25c>)
 801b8ae:	4293      	cmp	r3, r2
 801b8b0:	d00d      	beq.n	801b8ce <HAL_GPIO_Init+0x216>
 801b8b2:	687b      	ldr	r3, [r7, #4]
 801b8b4:	4a18      	ldr	r2, [pc, #96]	@ (801b918 <HAL_GPIO_Init+0x260>)
 801b8b6:	4293      	cmp	r3, r2
 801b8b8:	d007      	beq.n	801b8ca <HAL_GPIO_Init+0x212>
 801b8ba:	687b      	ldr	r3, [r7, #4]
 801b8bc:	4a17      	ldr	r2, [pc, #92]	@ (801b91c <HAL_GPIO_Init+0x264>)
 801b8be:	4293      	cmp	r3, r2
 801b8c0:	d101      	bne.n	801b8c6 <HAL_GPIO_Init+0x20e>
 801b8c2:	2309      	movs	r3, #9
 801b8c4:	e02d      	b.n	801b922 <HAL_GPIO_Init+0x26a>
 801b8c6:	230a      	movs	r3, #10
 801b8c8:	e02b      	b.n	801b922 <HAL_GPIO_Init+0x26a>
 801b8ca:	2308      	movs	r3, #8
 801b8cc:	e029      	b.n	801b922 <HAL_GPIO_Init+0x26a>
 801b8ce:	2307      	movs	r3, #7
 801b8d0:	e027      	b.n	801b922 <HAL_GPIO_Init+0x26a>
 801b8d2:	2306      	movs	r3, #6
 801b8d4:	e025      	b.n	801b922 <HAL_GPIO_Init+0x26a>
 801b8d6:	2305      	movs	r3, #5
 801b8d8:	e023      	b.n	801b922 <HAL_GPIO_Init+0x26a>
 801b8da:	2304      	movs	r3, #4
 801b8dc:	e021      	b.n	801b922 <HAL_GPIO_Init+0x26a>
 801b8de:	2303      	movs	r3, #3
 801b8e0:	e01f      	b.n	801b922 <HAL_GPIO_Init+0x26a>
 801b8e2:	2302      	movs	r3, #2
 801b8e4:	e01d      	b.n	801b922 <HAL_GPIO_Init+0x26a>
 801b8e6:	2301      	movs	r3, #1
 801b8e8:	e01b      	b.n	801b922 <HAL_GPIO_Init+0x26a>
 801b8ea:	bf00      	nop
 801b8ec:	58000080 	.word	0x58000080
 801b8f0:	58024400 	.word	0x58024400
 801b8f4:	58000400 	.word	0x58000400
 801b8f8:	58020000 	.word	0x58020000
 801b8fc:	58020400 	.word	0x58020400
 801b900:	58020800 	.word	0x58020800
 801b904:	58020c00 	.word	0x58020c00
 801b908:	58021000 	.word	0x58021000
 801b90c:	58021400 	.word	0x58021400
 801b910:	58021800 	.word	0x58021800
 801b914:	58021c00 	.word	0x58021c00
 801b918:	58022000 	.word	0x58022000
 801b91c:	58022400 	.word	0x58022400
 801b920:	2300      	movs	r3, #0
 801b922:	69fa      	ldr	r2, [r7, #28]
 801b924:	f002 0203 	and.w	r2, r2, #3
 801b928:	0092      	lsls	r2, r2, #2
 801b92a:	4093      	lsls	r3, r2
 801b92c:	69ba      	ldr	r2, [r7, #24]
 801b92e:	4313      	orrs	r3, r2
 801b930:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 801b932:	4938      	ldr	r1, [pc, #224]	@ (801ba14 <HAL_GPIO_Init+0x35c>)
 801b934:	69fb      	ldr	r3, [r7, #28]
 801b936:	089b      	lsrs	r3, r3, #2
 801b938:	3302      	adds	r3, #2
 801b93a:	69ba      	ldr	r2, [r7, #24]
 801b93c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 801b940:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b944:	681b      	ldr	r3, [r3, #0]
 801b946:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b948:	693b      	ldr	r3, [r7, #16]
 801b94a:	43db      	mvns	r3, r3
 801b94c:	69ba      	ldr	r2, [r7, #24]
 801b94e:	4013      	ands	r3, r2
 801b950:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 801b952:	683b      	ldr	r3, [r7, #0]
 801b954:	685b      	ldr	r3, [r3, #4]
 801b956:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801b95a:	2b00      	cmp	r3, #0
 801b95c:	d003      	beq.n	801b966 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 801b95e:	69ba      	ldr	r2, [r7, #24]
 801b960:	693b      	ldr	r3, [r7, #16]
 801b962:	4313      	orrs	r3, r2
 801b964:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 801b966:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801b96a:	69bb      	ldr	r3, [r7, #24]
 801b96c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 801b96e:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 801b972:	685b      	ldr	r3, [r3, #4]
 801b974:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b976:	693b      	ldr	r3, [r7, #16]
 801b978:	43db      	mvns	r3, r3
 801b97a:	69ba      	ldr	r2, [r7, #24]
 801b97c:	4013      	ands	r3, r2
 801b97e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 801b980:	683b      	ldr	r3, [r7, #0]
 801b982:	685b      	ldr	r3, [r3, #4]
 801b984:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801b988:	2b00      	cmp	r3, #0
 801b98a:	d003      	beq.n	801b994 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 801b98c:	69ba      	ldr	r2, [r7, #24]
 801b98e:	693b      	ldr	r3, [r7, #16]
 801b990:	4313      	orrs	r3, r2
 801b992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 801b994:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 801b998:	69bb      	ldr	r3, [r7, #24]
 801b99a:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 801b99c:	697b      	ldr	r3, [r7, #20]
 801b99e:	685b      	ldr	r3, [r3, #4]
 801b9a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b9a2:	693b      	ldr	r3, [r7, #16]
 801b9a4:	43db      	mvns	r3, r3
 801b9a6:	69ba      	ldr	r2, [r7, #24]
 801b9a8:	4013      	ands	r3, r2
 801b9aa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 801b9ac:	683b      	ldr	r3, [r7, #0]
 801b9ae:	685b      	ldr	r3, [r3, #4]
 801b9b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801b9b4:	2b00      	cmp	r3, #0
 801b9b6:	d003      	beq.n	801b9c0 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 801b9b8:	69ba      	ldr	r2, [r7, #24]
 801b9ba:	693b      	ldr	r3, [r7, #16]
 801b9bc:	4313      	orrs	r3, r2
 801b9be:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 801b9c0:	697b      	ldr	r3, [r7, #20]
 801b9c2:	69ba      	ldr	r2, [r7, #24]
 801b9c4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 801b9c6:	697b      	ldr	r3, [r7, #20]
 801b9c8:	681b      	ldr	r3, [r3, #0]
 801b9ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 801b9cc:	693b      	ldr	r3, [r7, #16]
 801b9ce:	43db      	mvns	r3, r3
 801b9d0:	69ba      	ldr	r2, [r7, #24]
 801b9d2:	4013      	ands	r3, r2
 801b9d4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 801b9d6:	683b      	ldr	r3, [r7, #0]
 801b9d8:	685b      	ldr	r3, [r3, #4]
 801b9da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801b9de:	2b00      	cmp	r3, #0
 801b9e0:	d003      	beq.n	801b9ea <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 801b9e2:	69ba      	ldr	r2, [r7, #24]
 801b9e4:	693b      	ldr	r3, [r7, #16]
 801b9e6:	4313      	orrs	r3, r2
 801b9e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 801b9ea:	697b      	ldr	r3, [r7, #20]
 801b9ec:	69ba      	ldr	r2, [r7, #24]
 801b9ee:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 801b9f0:	69fb      	ldr	r3, [r7, #28]
 801b9f2:	3301      	adds	r3, #1
 801b9f4:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801b9f6:	683b      	ldr	r3, [r7, #0]
 801b9f8:	681a      	ldr	r2, [r3, #0]
 801b9fa:	69fb      	ldr	r3, [r7, #28]
 801b9fc:	fa22 f303 	lsr.w	r3, r2, r3
 801ba00:	2b00      	cmp	r3, #0
 801ba02:	f47f ae63 	bne.w	801b6cc <HAL_GPIO_Init+0x14>
  }
}
 801ba06:	bf00      	nop
 801ba08:	bf00      	nop
 801ba0a:	3724      	adds	r7, #36	@ 0x24
 801ba0c:	46bd      	mov	sp, r7
 801ba0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba12:	4770      	bx	lr
 801ba14:	58000400 	.word	0x58000400

0801ba18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 801ba18:	b480      	push	{r7}
 801ba1a:	b083      	sub	sp, #12
 801ba1c:	af00      	add	r7, sp, #0
 801ba1e:	6078      	str	r0, [r7, #4]
 801ba20:	460b      	mov	r3, r1
 801ba22:	807b      	strh	r3, [r7, #2]
 801ba24:	4613      	mov	r3, r2
 801ba26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 801ba28:	787b      	ldrb	r3, [r7, #1]
 801ba2a:	2b00      	cmp	r3, #0
 801ba2c:	d003      	beq.n	801ba36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 801ba2e:	887a      	ldrh	r2, [r7, #2]
 801ba30:	687b      	ldr	r3, [r7, #4]
 801ba32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 801ba34:	e003      	b.n	801ba3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 801ba36:	887b      	ldrh	r3, [r7, #2]
 801ba38:	041a      	lsls	r2, r3, #16
 801ba3a:	687b      	ldr	r3, [r7, #4]
 801ba3c:	619a      	str	r2, [r3, #24]
}
 801ba3e:	bf00      	nop
 801ba40:	370c      	adds	r7, #12
 801ba42:	46bd      	mov	sp, r7
 801ba44:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ba48:	4770      	bx	lr
	...

0801ba4c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 801ba4c:	b580      	push	{r7, lr}
 801ba4e:	b082      	sub	sp, #8
 801ba50:	af00      	add	r7, sp, #0
 801ba52:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801ba54:	687b      	ldr	r3, [r7, #4]
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	d101      	bne.n	801ba5e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 801ba5a:	2301      	movs	r3, #1
 801ba5c:	e08b      	b.n	801bb76 <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801ba5e:	687b      	ldr	r3, [r7, #4]
 801ba60:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801ba64:	b2db      	uxtb	r3, r3
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	d106      	bne.n	801ba78 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 801ba6a:	687b      	ldr	r3, [r7, #4]
 801ba6c:	2200      	movs	r2, #0
 801ba6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 801ba72:	6878      	ldr	r0, [r7, #4]
 801ba74:	f7e6 f80e 	bl	8001a94 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 801ba78:	687b      	ldr	r3, [r7, #4]
 801ba7a:	2224      	movs	r2, #36	@ 0x24
 801ba7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 801ba80:	687b      	ldr	r3, [r7, #4]
 801ba82:	681b      	ldr	r3, [r3, #0]
 801ba84:	681a      	ldr	r2, [r3, #0]
 801ba86:	687b      	ldr	r3, [r7, #4]
 801ba88:	681b      	ldr	r3, [r3, #0]
 801ba8a:	f022 0201 	bic.w	r2, r2, #1
 801ba8e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 801ba90:	687b      	ldr	r3, [r7, #4]
 801ba92:	685a      	ldr	r2, [r3, #4]
 801ba94:	687b      	ldr	r3, [r7, #4]
 801ba96:	681b      	ldr	r3, [r3, #0]
 801ba98:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 801ba9c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 801ba9e:	687b      	ldr	r3, [r7, #4]
 801baa0:	681b      	ldr	r3, [r3, #0]
 801baa2:	689a      	ldr	r2, [r3, #8]
 801baa4:	687b      	ldr	r3, [r7, #4]
 801baa6:	681b      	ldr	r3, [r3, #0]
 801baa8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801baac:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 801baae:	687b      	ldr	r3, [r7, #4]
 801bab0:	68db      	ldr	r3, [r3, #12]
 801bab2:	2b01      	cmp	r3, #1
 801bab4:	d107      	bne.n	801bac6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 801bab6:	687b      	ldr	r3, [r7, #4]
 801bab8:	689a      	ldr	r2, [r3, #8]
 801baba:	687b      	ldr	r3, [r7, #4]
 801babc:	681b      	ldr	r3, [r3, #0]
 801babe:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 801bac2:	609a      	str	r2, [r3, #8]
 801bac4:	e006      	b.n	801bad4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 801bac6:	687b      	ldr	r3, [r7, #4]
 801bac8:	689a      	ldr	r2, [r3, #8]
 801baca:	687b      	ldr	r3, [r7, #4]
 801bacc:	681b      	ldr	r3, [r3, #0]
 801bace:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 801bad2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 801bad4:	687b      	ldr	r3, [r7, #4]
 801bad6:	68db      	ldr	r3, [r3, #12]
 801bad8:	2b02      	cmp	r3, #2
 801bada:	d108      	bne.n	801baee <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801badc:	687b      	ldr	r3, [r7, #4]
 801bade:	681b      	ldr	r3, [r3, #0]
 801bae0:	685a      	ldr	r2, [r3, #4]
 801bae2:	687b      	ldr	r3, [r7, #4]
 801bae4:	681b      	ldr	r3, [r3, #0]
 801bae6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801baea:	605a      	str	r2, [r3, #4]
 801baec:	e007      	b.n	801bafe <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801baee:	687b      	ldr	r3, [r7, #4]
 801baf0:	681b      	ldr	r3, [r3, #0]
 801baf2:	685a      	ldr	r2, [r3, #4]
 801baf4:	687b      	ldr	r3, [r7, #4]
 801baf6:	681b      	ldr	r3, [r3, #0]
 801baf8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801bafc:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801bafe:	687b      	ldr	r3, [r7, #4]
 801bb00:	681b      	ldr	r3, [r3, #0]
 801bb02:	6859      	ldr	r1, [r3, #4]
 801bb04:	687b      	ldr	r3, [r7, #4]
 801bb06:	681a      	ldr	r2, [r3, #0]
 801bb08:	4b1d      	ldr	r3, [pc, #116]	@ (801bb80 <HAL_I2C_Init+0x134>)
 801bb0a:	430b      	orrs	r3, r1
 801bb0c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 801bb0e:	687b      	ldr	r3, [r7, #4]
 801bb10:	681b      	ldr	r3, [r3, #0]
 801bb12:	68da      	ldr	r2, [r3, #12]
 801bb14:	687b      	ldr	r3, [r7, #4]
 801bb16:	681b      	ldr	r3, [r3, #0]
 801bb18:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801bb1c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801bb1e:	687b      	ldr	r3, [r7, #4]
 801bb20:	691a      	ldr	r2, [r3, #16]
 801bb22:	687b      	ldr	r3, [r7, #4]
 801bb24:	695b      	ldr	r3, [r3, #20]
 801bb26:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801bb2a:	687b      	ldr	r3, [r7, #4]
 801bb2c:	699b      	ldr	r3, [r3, #24]
 801bb2e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 801bb30:	687b      	ldr	r3, [r7, #4]
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	430a      	orrs	r2, r1
 801bb36:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801bb38:	687b      	ldr	r3, [r7, #4]
 801bb3a:	69d9      	ldr	r1, [r3, #28]
 801bb3c:	687b      	ldr	r3, [r7, #4]
 801bb3e:	6a1a      	ldr	r2, [r3, #32]
 801bb40:	687b      	ldr	r3, [r7, #4]
 801bb42:	681b      	ldr	r3, [r3, #0]
 801bb44:	430a      	orrs	r2, r1
 801bb46:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801bb48:	687b      	ldr	r3, [r7, #4]
 801bb4a:	681b      	ldr	r3, [r3, #0]
 801bb4c:	681a      	ldr	r2, [r3, #0]
 801bb4e:	687b      	ldr	r3, [r7, #4]
 801bb50:	681b      	ldr	r3, [r3, #0]
 801bb52:	f042 0201 	orr.w	r2, r2, #1
 801bb56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801bb58:	687b      	ldr	r3, [r7, #4]
 801bb5a:	2200      	movs	r2, #0
 801bb5c:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 801bb5e:	687b      	ldr	r3, [r7, #4]
 801bb60:	2220      	movs	r2, #32
 801bb62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801bb66:	687b      	ldr	r3, [r7, #4]
 801bb68:	2200      	movs	r2, #0
 801bb6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801bb6c:	687b      	ldr	r3, [r7, #4]
 801bb6e:	2200      	movs	r2, #0
 801bb70:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801bb74:	2300      	movs	r3, #0
}
 801bb76:	4618      	mov	r0, r3
 801bb78:	3708      	adds	r7, #8
 801bb7a:	46bd      	mov	sp, r7
 801bb7c:	bd80      	pop	{r7, pc}
 801bb7e:	bf00      	nop
 801bb80:	02008000 	.word	0x02008000

0801bb84 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 801bb84:	b480      	push	{r7}
 801bb86:	b083      	sub	sp, #12
 801bb88:	af00      	add	r7, sp, #0
 801bb8a:	6078      	str	r0, [r7, #4]
 801bb8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801bb8e:	687b      	ldr	r3, [r7, #4]
 801bb90:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801bb94:	b2db      	uxtb	r3, r3
 801bb96:	2b20      	cmp	r3, #32
 801bb98:	d138      	bne.n	801bc0c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801bba0:	2b01      	cmp	r3, #1
 801bba2:	d101      	bne.n	801bba8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 801bba4:	2302      	movs	r3, #2
 801bba6:	e032      	b.n	801bc0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 801bba8:	687b      	ldr	r3, [r7, #4]
 801bbaa:	2201      	movs	r2, #1
 801bbac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801bbb0:	687b      	ldr	r3, [r7, #4]
 801bbb2:	2224      	movs	r2, #36	@ 0x24
 801bbb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801bbb8:	687b      	ldr	r3, [r7, #4]
 801bbba:	681b      	ldr	r3, [r3, #0]
 801bbbc:	681a      	ldr	r2, [r3, #0]
 801bbbe:	687b      	ldr	r3, [r7, #4]
 801bbc0:	681b      	ldr	r3, [r3, #0]
 801bbc2:	f022 0201 	bic.w	r2, r2, #1
 801bbc6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 801bbc8:	687b      	ldr	r3, [r7, #4]
 801bbca:	681b      	ldr	r3, [r3, #0]
 801bbcc:	681a      	ldr	r2, [r3, #0]
 801bbce:	687b      	ldr	r3, [r7, #4]
 801bbd0:	681b      	ldr	r3, [r3, #0]
 801bbd2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801bbd6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 801bbd8:	687b      	ldr	r3, [r7, #4]
 801bbda:	681b      	ldr	r3, [r3, #0]
 801bbdc:	6819      	ldr	r1, [r3, #0]
 801bbde:	687b      	ldr	r3, [r7, #4]
 801bbe0:	681b      	ldr	r3, [r3, #0]
 801bbe2:	683a      	ldr	r2, [r7, #0]
 801bbe4:	430a      	orrs	r2, r1
 801bbe6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801bbe8:	687b      	ldr	r3, [r7, #4]
 801bbea:	681b      	ldr	r3, [r3, #0]
 801bbec:	681a      	ldr	r2, [r3, #0]
 801bbee:	687b      	ldr	r3, [r7, #4]
 801bbf0:	681b      	ldr	r3, [r3, #0]
 801bbf2:	f042 0201 	orr.w	r2, r2, #1
 801bbf6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801bbf8:	687b      	ldr	r3, [r7, #4]
 801bbfa:	2220      	movs	r2, #32
 801bbfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801bc00:	687b      	ldr	r3, [r7, #4]
 801bc02:	2200      	movs	r2, #0
 801bc04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801bc08:	2300      	movs	r3, #0
 801bc0a:	e000      	b.n	801bc0e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 801bc0c:	2302      	movs	r3, #2
  }
}
 801bc0e:	4618      	mov	r0, r3
 801bc10:	370c      	adds	r7, #12
 801bc12:	46bd      	mov	sp, r7
 801bc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bc18:	4770      	bx	lr

0801bc1a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 801bc1a:	b480      	push	{r7}
 801bc1c:	b085      	sub	sp, #20
 801bc1e:	af00      	add	r7, sp, #0
 801bc20:	6078      	str	r0, [r7, #4]
 801bc22:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 801bc24:	687b      	ldr	r3, [r7, #4]
 801bc26:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801bc2a:	b2db      	uxtb	r3, r3
 801bc2c:	2b20      	cmp	r3, #32
 801bc2e:	d139      	bne.n	801bca4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 801bc30:	687b      	ldr	r3, [r7, #4]
 801bc32:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801bc36:	2b01      	cmp	r3, #1
 801bc38:	d101      	bne.n	801bc3e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 801bc3a:	2302      	movs	r3, #2
 801bc3c:	e033      	b.n	801bca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 801bc3e:	687b      	ldr	r3, [r7, #4]
 801bc40:	2201      	movs	r2, #1
 801bc42:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 801bc46:	687b      	ldr	r3, [r7, #4]
 801bc48:	2224      	movs	r2, #36	@ 0x24
 801bc4a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 801bc4e:	687b      	ldr	r3, [r7, #4]
 801bc50:	681b      	ldr	r3, [r3, #0]
 801bc52:	681a      	ldr	r2, [r3, #0]
 801bc54:	687b      	ldr	r3, [r7, #4]
 801bc56:	681b      	ldr	r3, [r3, #0]
 801bc58:	f022 0201 	bic.w	r2, r2, #1
 801bc5c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 801bc5e:	687b      	ldr	r3, [r7, #4]
 801bc60:	681b      	ldr	r3, [r3, #0]
 801bc62:	681b      	ldr	r3, [r3, #0]
 801bc64:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 801bc66:	68fb      	ldr	r3, [r7, #12]
 801bc68:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 801bc6c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 801bc6e:	683b      	ldr	r3, [r7, #0]
 801bc70:	021b      	lsls	r3, r3, #8
 801bc72:	68fa      	ldr	r2, [r7, #12]
 801bc74:	4313      	orrs	r3, r2
 801bc76:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 801bc78:	687b      	ldr	r3, [r7, #4]
 801bc7a:	681b      	ldr	r3, [r3, #0]
 801bc7c:	68fa      	ldr	r2, [r7, #12]
 801bc7e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801bc80:	687b      	ldr	r3, [r7, #4]
 801bc82:	681b      	ldr	r3, [r3, #0]
 801bc84:	681a      	ldr	r2, [r3, #0]
 801bc86:	687b      	ldr	r3, [r7, #4]
 801bc88:	681b      	ldr	r3, [r3, #0]
 801bc8a:	f042 0201 	orr.w	r2, r2, #1
 801bc8e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	2220      	movs	r2, #32
 801bc94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 801bc98:	687b      	ldr	r3, [r7, #4]
 801bc9a:	2200      	movs	r2, #0
 801bc9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801bca0:	2300      	movs	r3, #0
 801bca2:	e000      	b.n	801bca6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 801bca4:	2302      	movs	r3, #2
  }
}
 801bca6:	4618      	mov	r0, r3
 801bca8:	3714      	adds	r7, #20
 801bcaa:	46bd      	mov	sp, r7
 801bcac:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bcb0:	4770      	bx	lr
	...

0801bcb4 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 801bcb4:	b580      	push	{r7, lr}
 801bcb6:	b084      	sub	sp, #16
 801bcb8:	af00      	add	r7, sp, #0
 801bcba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param (IS_PWR_SUPPLY (SupplySource));

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
 801bcbc:	4b19      	ldr	r3, [pc, #100]	@ (801bd24 <HAL_PWREx_ConfigSupply+0x70>)
 801bcbe:	68db      	ldr	r3, [r3, #12]
 801bcc0:	f003 0304 	and.w	r3, r3, #4
 801bcc4:	2b04      	cmp	r3, #4
 801bcc6:	d00a      	beq.n	801bcde <HAL_PWREx_ConfigSupply+0x2a>
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 801bcc8:	4b16      	ldr	r3, [pc, #88]	@ (801bd24 <HAL_PWREx_ConfigSupply+0x70>)
 801bcca:	68db      	ldr	r3, [r3, #12]
 801bccc:	f003 0307 	and.w	r3, r3, #7
 801bcd0:	687a      	ldr	r2, [r7, #4]
 801bcd2:	429a      	cmp	r2, r3
 801bcd4:	d001      	beq.n	801bcda <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 801bcd6:	2301      	movs	r3, #1
 801bcd8:	e01f      	b.n	801bd1a <HAL_PWREx_ConfigSupply+0x66>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 801bcda:	2300      	movs	r3, #0
 801bcdc:	e01d      	b.n	801bd1a <HAL_PWREx_ConfigSupply+0x66>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 801bcde:	4b11      	ldr	r3, [pc, #68]	@ (801bd24 <HAL_PWREx_ConfigSupply+0x70>)
 801bce0:	68db      	ldr	r3, [r3, #12]
 801bce2:	f023 0207 	bic.w	r2, r3, #7
 801bce6:	490f      	ldr	r1, [pc, #60]	@ (801bd24 <HAL_PWREx_ConfigSupply+0x70>)
 801bce8:	687b      	ldr	r3, [r7, #4]
 801bcea:	4313      	orrs	r3, r2
 801bcec:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 801bcee:	f7fd fc03 	bl	80194f8 <HAL_GetTick>
 801bcf2:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801bcf4:	e009      	b.n	801bd0a <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 801bcf6:	f7fd fbff 	bl	80194f8 <HAL_GetTick>
 801bcfa:	4602      	mov	r2, r0
 801bcfc:	68fb      	ldr	r3, [r7, #12]
 801bcfe:	1ad3      	subs	r3, r2, r3
 801bd00:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801bd04:	d901      	bls.n	801bd0a <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 801bd06:	2301      	movs	r3, #1
 801bd08:	e007      	b.n	801bd1a <HAL_PWREx_ConfigSupply+0x66>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 801bd0a:	4b06      	ldr	r3, [pc, #24]	@ (801bd24 <HAL_PWREx_ConfigSupply+0x70>)
 801bd0c:	685b      	ldr	r3, [r3, #4]
 801bd0e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801bd12:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801bd16:	d1ee      	bne.n	801bcf6 <HAL_PWREx_ConfigSupply+0x42>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 801bd18:	2300      	movs	r3, #0
}
 801bd1a:	4618      	mov	r0, r3
 801bd1c:	3710      	adds	r7, #16
 801bd1e:	46bd      	mov	sp, r7
 801bd20:	bd80      	pop	{r7, pc}
 801bd22:	bf00      	nop
 801bd24:	58024800 	.word	0x58024800

0801bd28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801bd28:	b580      	push	{r7, lr}
 801bd2a:	b08c      	sub	sp, #48	@ 0x30
 801bd2c:	af00      	add	r7, sp, #0
 801bd2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801bd30:	687b      	ldr	r3, [r7, #4]
 801bd32:	2b00      	cmp	r3, #0
 801bd34:	d102      	bne.n	801bd3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801bd36:	2301      	movs	r3, #1
 801bd38:	f000 bc48 	b.w	801c5cc <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801bd3c:	687b      	ldr	r3, [r7, #4]
 801bd3e:	681b      	ldr	r3, [r3, #0]
 801bd40:	f003 0301 	and.w	r3, r3, #1
 801bd44:	2b00      	cmp	r3, #0
 801bd46:	f000 8088 	beq.w	801be5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801bd4a:	4b99      	ldr	r3, [pc, #612]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bd4c:	691b      	ldr	r3, [r3, #16]
 801bd4e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801bd52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801bd54:	4b96      	ldr	r3, [pc, #600]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bd56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801bd58:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801bd5a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd5c:	2b10      	cmp	r3, #16
 801bd5e:	d007      	beq.n	801bd70 <HAL_RCC_OscConfig+0x48>
 801bd60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801bd62:	2b18      	cmp	r3, #24
 801bd64:	d111      	bne.n	801bd8a <HAL_RCC_OscConfig+0x62>
 801bd66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801bd68:	f003 0303 	and.w	r3, r3, #3
 801bd6c:	2b02      	cmp	r3, #2
 801bd6e:	d10c      	bne.n	801bd8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801bd70:	4b8f      	ldr	r3, [pc, #572]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bd72:	681b      	ldr	r3, [r3, #0]
 801bd74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801bd78:	2b00      	cmp	r3, #0
 801bd7a:	d06d      	beq.n	801be58 <HAL_RCC_OscConfig+0x130>
 801bd7c:	687b      	ldr	r3, [r7, #4]
 801bd7e:	685b      	ldr	r3, [r3, #4]
 801bd80:	2b00      	cmp	r3, #0
 801bd82:	d169      	bne.n	801be58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801bd84:	2301      	movs	r3, #1
 801bd86:	f000 bc21 	b.w	801c5cc <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	685b      	ldr	r3, [r3, #4]
 801bd8e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801bd92:	d106      	bne.n	801bda2 <HAL_RCC_OscConfig+0x7a>
 801bd94:	4b86      	ldr	r3, [pc, #536]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bd96:	681b      	ldr	r3, [r3, #0]
 801bd98:	4a85      	ldr	r2, [pc, #532]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bd9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801bd9e:	6013      	str	r3, [r2, #0]
 801bda0:	e02e      	b.n	801be00 <HAL_RCC_OscConfig+0xd8>
 801bda2:	687b      	ldr	r3, [r7, #4]
 801bda4:	685b      	ldr	r3, [r3, #4]
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d10c      	bne.n	801bdc4 <HAL_RCC_OscConfig+0x9c>
 801bdaa:	4b81      	ldr	r3, [pc, #516]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bdac:	681b      	ldr	r3, [r3, #0]
 801bdae:	4a80      	ldr	r2, [pc, #512]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bdb0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801bdb4:	6013      	str	r3, [r2, #0]
 801bdb6:	4b7e      	ldr	r3, [pc, #504]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bdb8:	681b      	ldr	r3, [r3, #0]
 801bdba:	4a7d      	ldr	r2, [pc, #500]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bdbc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801bdc0:	6013      	str	r3, [r2, #0]
 801bdc2:	e01d      	b.n	801be00 <HAL_RCC_OscConfig+0xd8>
 801bdc4:	687b      	ldr	r3, [r7, #4]
 801bdc6:	685b      	ldr	r3, [r3, #4]
 801bdc8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801bdcc:	d10c      	bne.n	801bde8 <HAL_RCC_OscConfig+0xc0>
 801bdce:	4b78      	ldr	r3, [pc, #480]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	4a77      	ldr	r2, [pc, #476]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bdd4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801bdd8:	6013      	str	r3, [r2, #0]
 801bdda:	4b75      	ldr	r3, [pc, #468]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bddc:	681b      	ldr	r3, [r3, #0]
 801bdde:	4a74      	ldr	r2, [pc, #464]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bde0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801bde4:	6013      	str	r3, [r2, #0]
 801bde6:	e00b      	b.n	801be00 <HAL_RCC_OscConfig+0xd8>
 801bde8:	4b71      	ldr	r3, [pc, #452]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	4a70      	ldr	r2, [pc, #448]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bdee:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801bdf2:	6013      	str	r3, [r2, #0]
 801bdf4:	4b6e      	ldr	r3, [pc, #440]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bdf6:	681b      	ldr	r3, [r3, #0]
 801bdf8:	4a6d      	ldr	r2, [pc, #436]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bdfa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801bdfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801be00:	687b      	ldr	r3, [r7, #4]
 801be02:	685b      	ldr	r3, [r3, #4]
 801be04:	2b00      	cmp	r3, #0
 801be06:	d013      	beq.n	801be30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801be08:	f7fd fb76 	bl	80194f8 <HAL_GetTick>
 801be0c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801be0e:	e008      	b.n	801be22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801be10:	f7fd fb72 	bl	80194f8 <HAL_GetTick>
 801be14:	4602      	mov	r2, r0
 801be16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be18:	1ad3      	subs	r3, r2, r3
 801be1a:	2b64      	cmp	r3, #100	@ 0x64
 801be1c:	d901      	bls.n	801be22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801be1e:	2303      	movs	r3, #3
 801be20:	e3d4      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801be22:	4b63      	ldr	r3, [pc, #396]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801be24:	681b      	ldr	r3, [r3, #0]
 801be26:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801be2a:	2b00      	cmp	r3, #0
 801be2c:	d0f0      	beq.n	801be10 <HAL_RCC_OscConfig+0xe8>
 801be2e:	e014      	b.n	801be5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801be30:	f7fd fb62 	bl	80194f8 <HAL_GetTick>
 801be34:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801be36:	e008      	b.n	801be4a <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801be38:	f7fd fb5e 	bl	80194f8 <HAL_GetTick>
 801be3c:	4602      	mov	r2, r0
 801be3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801be40:	1ad3      	subs	r3, r2, r3
 801be42:	2b64      	cmp	r3, #100	@ 0x64
 801be44:	d901      	bls.n	801be4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801be46:	2303      	movs	r3, #3
 801be48:	e3c0      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801be4a:	4b59      	ldr	r3, [pc, #356]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801be4c:	681b      	ldr	r3, [r3, #0]
 801be4e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801be52:	2b00      	cmp	r3, #0
 801be54:	d1f0      	bne.n	801be38 <HAL_RCC_OscConfig+0x110>
 801be56:	e000      	b.n	801be5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801be58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801be5a:	687b      	ldr	r3, [r7, #4]
 801be5c:	681b      	ldr	r3, [r3, #0]
 801be5e:	f003 0302 	and.w	r3, r3, #2
 801be62:	2b00      	cmp	r3, #0
 801be64:	f000 80ca 	beq.w	801bffc <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801be68:	4b51      	ldr	r3, [pc, #324]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801be6a:	691b      	ldr	r3, [r3, #16]
 801be6c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801be70:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801be72:	4b4f      	ldr	r3, [pc, #316]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801be74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801be76:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801be78:	6a3b      	ldr	r3, [r7, #32]
 801be7a:	2b00      	cmp	r3, #0
 801be7c:	d007      	beq.n	801be8e <HAL_RCC_OscConfig+0x166>
 801be7e:	6a3b      	ldr	r3, [r7, #32]
 801be80:	2b18      	cmp	r3, #24
 801be82:	d156      	bne.n	801bf32 <HAL_RCC_OscConfig+0x20a>
 801be84:	69fb      	ldr	r3, [r7, #28]
 801be86:	f003 0303 	and.w	r3, r3, #3
 801be8a:	2b00      	cmp	r3, #0
 801be8c:	d151      	bne.n	801bf32 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801be8e:	4b48      	ldr	r3, [pc, #288]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801be90:	681b      	ldr	r3, [r3, #0]
 801be92:	f003 0304 	and.w	r3, r3, #4
 801be96:	2b00      	cmp	r3, #0
 801be98:	d005      	beq.n	801bea6 <HAL_RCC_OscConfig+0x17e>
 801be9a:	687b      	ldr	r3, [r7, #4]
 801be9c:	68db      	ldr	r3, [r3, #12]
 801be9e:	2b00      	cmp	r3, #0
 801bea0:	d101      	bne.n	801bea6 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801bea2:	2301      	movs	r3, #1
 801bea4:	e392      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801bea6:	4b42      	ldr	r3, [pc, #264]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bea8:	681b      	ldr	r3, [r3, #0]
 801beaa:	f023 0219 	bic.w	r2, r3, #25
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	68db      	ldr	r3, [r3, #12]
 801beb2:	493f      	ldr	r1, [pc, #252]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801beb4:	4313      	orrs	r3, r2
 801beb6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801beb8:	f7fd fb1e 	bl	80194f8 <HAL_GetTick>
 801bebc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bebe:	e008      	b.n	801bed2 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bec0:	f7fd fb1a 	bl	80194f8 <HAL_GetTick>
 801bec4:	4602      	mov	r2, r0
 801bec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bec8:	1ad3      	subs	r3, r2, r3
 801beca:	2b02      	cmp	r3, #2
 801becc:	d901      	bls.n	801bed2 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801bece:	2303      	movs	r3, #3
 801bed0:	e37c      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bed2:	4b37      	ldr	r3, [pc, #220]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bed4:	681b      	ldr	r3, [r3, #0]
 801bed6:	f003 0304 	and.w	r3, r3, #4
 801beda:	2b00      	cmp	r3, #0
 801bedc:	d0f0      	beq.n	801bec0 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bede:	f7fd fb3b 	bl	8019558 <HAL_GetREVID>
 801bee2:	4603      	mov	r3, r0
 801bee4:	f241 0203 	movw	r2, #4099	@ 0x1003
 801bee8:	4293      	cmp	r3, r2
 801beea:	d817      	bhi.n	801bf1c <HAL_RCC_OscConfig+0x1f4>
 801beec:	687b      	ldr	r3, [r7, #4]
 801beee:	691b      	ldr	r3, [r3, #16]
 801bef0:	2b40      	cmp	r3, #64	@ 0x40
 801bef2:	d108      	bne.n	801bf06 <HAL_RCC_OscConfig+0x1de>
 801bef4:	4b2e      	ldr	r3, [pc, #184]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bef6:	685b      	ldr	r3, [r3, #4]
 801bef8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801befc:	4a2c      	ldr	r2, [pc, #176]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801befe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bf02:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bf04:	e07a      	b.n	801bffc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bf06:	4b2a      	ldr	r3, [pc, #168]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bf08:	685b      	ldr	r3, [r3, #4]
 801bf0a:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801bf0e:	687b      	ldr	r3, [r7, #4]
 801bf10:	691b      	ldr	r3, [r3, #16]
 801bf12:	031b      	lsls	r3, r3, #12
 801bf14:	4926      	ldr	r1, [pc, #152]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bf16:	4313      	orrs	r3, r2
 801bf18:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bf1a:	e06f      	b.n	801bffc <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bf1c:	4b24      	ldr	r3, [pc, #144]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bf1e:	685b      	ldr	r3, [r3, #4]
 801bf20:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801bf24:	687b      	ldr	r3, [r7, #4]
 801bf26:	691b      	ldr	r3, [r3, #16]
 801bf28:	061b      	lsls	r3, r3, #24
 801bf2a:	4921      	ldr	r1, [pc, #132]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bf2c:	4313      	orrs	r3, r2
 801bf2e:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801bf30:	e064      	b.n	801bffc <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801bf32:	687b      	ldr	r3, [r7, #4]
 801bf34:	68db      	ldr	r3, [r3, #12]
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d047      	beq.n	801bfca <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801bf3a:	4b1d      	ldr	r3, [pc, #116]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bf3c:	681b      	ldr	r3, [r3, #0]
 801bf3e:	f023 0219 	bic.w	r2, r3, #25
 801bf42:	687b      	ldr	r3, [r7, #4]
 801bf44:	68db      	ldr	r3, [r3, #12]
 801bf46:	491a      	ldr	r1, [pc, #104]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bf48:	4313      	orrs	r3, r2
 801bf4a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bf4c:	f7fd fad4 	bl	80194f8 <HAL_GetTick>
 801bf50:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bf52:	e008      	b.n	801bf66 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bf54:	f7fd fad0 	bl	80194f8 <HAL_GetTick>
 801bf58:	4602      	mov	r2, r0
 801bf5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bf5c:	1ad3      	subs	r3, r2, r3
 801bf5e:	2b02      	cmp	r3, #2
 801bf60:	d901      	bls.n	801bf66 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801bf62:	2303      	movs	r3, #3
 801bf64:	e332      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801bf66:	4b12      	ldr	r3, [pc, #72]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bf68:	681b      	ldr	r3, [r3, #0]
 801bf6a:	f003 0304 	and.w	r3, r3, #4
 801bf6e:	2b00      	cmp	r3, #0
 801bf70:	d0f0      	beq.n	801bf54 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801bf72:	f7fd faf1 	bl	8019558 <HAL_GetREVID>
 801bf76:	4603      	mov	r3, r0
 801bf78:	f241 0203 	movw	r2, #4099	@ 0x1003
 801bf7c:	4293      	cmp	r3, r2
 801bf7e:	d819      	bhi.n	801bfb4 <HAL_RCC_OscConfig+0x28c>
 801bf80:	687b      	ldr	r3, [r7, #4]
 801bf82:	691b      	ldr	r3, [r3, #16]
 801bf84:	2b40      	cmp	r3, #64	@ 0x40
 801bf86:	d108      	bne.n	801bf9a <HAL_RCC_OscConfig+0x272>
 801bf88:	4b09      	ldr	r3, [pc, #36]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bf8a:	685b      	ldr	r3, [r3, #4]
 801bf8c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801bf90:	4a07      	ldr	r2, [pc, #28]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bf92:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801bf96:	6053      	str	r3, [r2, #4]
 801bf98:	e030      	b.n	801bffc <HAL_RCC_OscConfig+0x2d4>
 801bf9a:	4b05      	ldr	r3, [pc, #20]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bf9c:	685b      	ldr	r3, [r3, #4]
 801bf9e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801bfa2:	687b      	ldr	r3, [r7, #4]
 801bfa4:	691b      	ldr	r3, [r3, #16]
 801bfa6:	031b      	lsls	r3, r3, #12
 801bfa8:	4901      	ldr	r1, [pc, #4]	@ (801bfb0 <HAL_RCC_OscConfig+0x288>)
 801bfaa:	4313      	orrs	r3, r2
 801bfac:	604b      	str	r3, [r1, #4]
 801bfae:	e025      	b.n	801bffc <HAL_RCC_OscConfig+0x2d4>
 801bfb0:	58024400 	.word	0x58024400
 801bfb4:	4b9a      	ldr	r3, [pc, #616]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801bfb6:	685b      	ldr	r3, [r3, #4]
 801bfb8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801bfbc:	687b      	ldr	r3, [r7, #4]
 801bfbe:	691b      	ldr	r3, [r3, #16]
 801bfc0:	061b      	lsls	r3, r3, #24
 801bfc2:	4997      	ldr	r1, [pc, #604]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801bfc4:	4313      	orrs	r3, r2
 801bfc6:	604b      	str	r3, [r1, #4]
 801bfc8:	e018      	b.n	801bffc <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801bfca:	4b95      	ldr	r3, [pc, #596]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801bfcc:	681b      	ldr	r3, [r3, #0]
 801bfce:	4a94      	ldr	r2, [pc, #592]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801bfd0:	f023 0301 	bic.w	r3, r3, #1
 801bfd4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801bfd6:	f7fd fa8f 	bl	80194f8 <HAL_GetTick>
 801bfda:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801bfdc:	e008      	b.n	801bff0 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801bfde:	f7fd fa8b 	bl	80194f8 <HAL_GetTick>
 801bfe2:	4602      	mov	r2, r0
 801bfe4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801bfe6:	1ad3      	subs	r3, r2, r3
 801bfe8:	2b02      	cmp	r3, #2
 801bfea:	d901      	bls.n	801bff0 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801bfec:	2303      	movs	r3, #3
 801bfee:	e2ed      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801bff0:	4b8b      	ldr	r3, [pc, #556]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801bff2:	681b      	ldr	r3, [r3, #0]
 801bff4:	f003 0304 	and.w	r3, r3, #4
 801bff8:	2b00      	cmp	r3, #0
 801bffa:	d1f0      	bne.n	801bfde <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	681b      	ldr	r3, [r3, #0]
 801c000:	f003 0310 	and.w	r3, r3, #16
 801c004:	2b00      	cmp	r3, #0
 801c006:	f000 80a9 	beq.w	801c15c <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801c00a:	4b85      	ldr	r3, [pc, #532]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c00c:	691b      	ldr	r3, [r3, #16]
 801c00e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c012:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801c014:	4b82      	ldr	r3, [pc, #520]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c016:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c018:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801c01a:	69bb      	ldr	r3, [r7, #24]
 801c01c:	2b08      	cmp	r3, #8
 801c01e:	d007      	beq.n	801c030 <HAL_RCC_OscConfig+0x308>
 801c020:	69bb      	ldr	r3, [r7, #24]
 801c022:	2b18      	cmp	r3, #24
 801c024:	d13a      	bne.n	801c09c <HAL_RCC_OscConfig+0x374>
 801c026:	697b      	ldr	r3, [r7, #20]
 801c028:	f003 0303 	and.w	r3, r3, #3
 801c02c:	2b01      	cmp	r3, #1
 801c02e:	d135      	bne.n	801c09c <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c030:	4b7b      	ldr	r3, [pc, #492]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c032:	681b      	ldr	r3, [r3, #0]
 801c034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c038:	2b00      	cmp	r3, #0
 801c03a:	d005      	beq.n	801c048 <HAL_RCC_OscConfig+0x320>
 801c03c:	687b      	ldr	r3, [r7, #4]
 801c03e:	69db      	ldr	r3, [r3, #28]
 801c040:	2b80      	cmp	r3, #128	@ 0x80
 801c042:	d001      	beq.n	801c048 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801c044:	2301      	movs	r3, #1
 801c046:	e2c1      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c048:	f7fd fa86 	bl	8019558 <HAL_GetREVID>
 801c04c:	4603      	mov	r3, r0
 801c04e:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c052:	4293      	cmp	r3, r2
 801c054:	d817      	bhi.n	801c086 <HAL_RCC_OscConfig+0x35e>
 801c056:	687b      	ldr	r3, [r7, #4]
 801c058:	6a1b      	ldr	r3, [r3, #32]
 801c05a:	2b20      	cmp	r3, #32
 801c05c:	d108      	bne.n	801c070 <HAL_RCC_OscConfig+0x348>
 801c05e:	4b70      	ldr	r3, [pc, #448]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c060:	685b      	ldr	r3, [r3, #4]
 801c062:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c066:	4a6e      	ldr	r2, [pc, #440]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c068:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c06c:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c06e:	e075      	b.n	801c15c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c070:	4b6b      	ldr	r3, [pc, #428]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c072:	685b      	ldr	r3, [r3, #4]
 801c074:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c078:	687b      	ldr	r3, [r7, #4]
 801c07a:	6a1b      	ldr	r3, [r3, #32]
 801c07c:	069b      	lsls	r3, r3, #26
 801c07e:	4968      	ldr	r1, [pc, #416]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c080:	4313      	orrs	r3, r2
 801c082:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c084:	e06a      	b.n	801c15c <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c086:	4b66      	ldr	r3, [pc, #408]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c088:	68db      	ldr	r3, [r3, #12]
 801c08a:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c08e:	687b      	ldr	r3, [r7, #4]
 801c090:	6a1b      	ldr	r3, [r3, #32]
 801c092:	061b      	lsls	r3, r3, #24
 801c094:	4962      	ldr	r1, [pc, #392]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c096:	4313      	orrs	r3, r2
 801c098:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801c09a:	e05f      	b.n	801c15c <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801c09c:	687b      	ldr	r3, [r7, #4]
 801c09e:	69db      	ldr	r3, [r3, #28]
 801c0a0:	2b00      	cmp	r3, #0
 801c0a2:	d042      	beq.n	801c12a <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801c0a4:	4b5e      	ldr	r3, [pc, #376]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c0a6:	681b      	ldr	r3, [r3, #0]
 801c0a8:	4a5d      	ldr	r2, [pc, #372]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c0aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c0ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c0b0:	f7fd fa22 	bl	80194f8 <HAL_GetTick>
 801c0b4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c0b6:	e008      	b.n	801c0ca <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c0b8:	f7fd fa1e 	bl	80194f8 <HAL_GetTick>
 801c0bc:	4602      	mov	r2, r0
 801c0be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c0c0:	1ad3      	subs	r3, r2, r3
 801c0c2:	2b02      	cmp	r3, #2
 801c0c4:	d901      	bls.n	801c0ca <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801c0c6:	2303      	movs	r3, #3
 801c0c8:	e280      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c0ca:	4b55      	ldr	r3, [pc, #340]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c0cc:	681b      	ldr	r3, [r3, #0]
 801c0ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c0d2:	2b00      	cmp	r3, #0
 801c0d4:	d0f0      	beq.n	801c0b8 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801c0d6:	f7fd fa3f 	bl	8019558 <HAL_GetREVID>
 801c0da:	4603      	mov	r3, r0
 801c0dc:	f241 0203 	movw	r2, #4099	@ 0x1003
 801c0e0:	4293      	cmp	r3, r2
 801c0e2:	d817      	bhi.n	801c114 <HAL_RCC_OscConfig+0x3ec>
 801c0e4:	687b      	ldr	r3, [r7, #4]
 801c0e6:	6a1b      	ldr	r3, [r3, #32]
 801c0e8:	2b20      	cmp	r3, #32
 801c0ea:	d108      	bne.n	801c0fe <HAL_RCC_OscConfig+0x3d6>
 801c0ec:	4b4c      	ldr	r3, [pc, #304]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c0ee:	685b      	ldr	r3, [r3, #4]
 801c0f0:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801c0f4:	4a4a      	ldr	r2, [pc, #296]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c0f6:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801c0fa:	6053      	str	r3, [r2, #4]
 801c0fc:	e02e      	b.n	801c15c <HAL_RCC_OscConfig+0x434>
 801c0fe:	4b48      	ldr	r3, [pc, #288]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c100:	685b      	ldr	r3, [r3, #4]
 801c102:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801c106:	687b      	ldr	r3, [r7, #4]
 801c108:	6a1b      	ldr	r3, [r3, #32]
 801c10a:	069b      	lsls	r3, r3, #26
 801c10c:	4944      	ldr	r1, [pc, #272]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c10e:	4313      	orrs	r3, r2
 801c110:	604b      	str	r3, [r1, #4]
 801c112:	e023      	b.n	801c15c <HAL_RCC_OscConfig+0x434>
 801c114:	4b42      	ldr	r3, [pc, #264]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c116:	68db      	ldr	r3, [r3, #12]
 801c118:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801c11c:	687b      	ldr	r3, [r7, #4]
 801c11e:	6a1b      	ldr	r3, [r3, #32]
 801c120:	061b      	lsls	r3, r3, #24
 801c122:	493f      	ldr	r1, [pc, #252]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c124:	4313      	orrs	r3, r2
 801c126:	60cb      	str	r3, [r1, #12]
 801c128:	e018      	b.n	801c15c <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801c12a:	4b3d      	ldr	r3, [pc, #244]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c12c:	681b      	ldr	r3, [r3, #0]
 801c12e:	4a3c      	ldr	r2, [pc, #240]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c130:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801c134:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c136:	f7fd f9df 	bl	80194f8 <HAL_GetTick>
 801c13a:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c13c:	e008      	b.n	801c150 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801c13e:	f7fd f9db 	bl	80194f8 <HAL_GetTick>
 801c142:	4602      	mov	r2, r0
 801c144:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c146:	1ad3      	subs	r3, r2, r3
 801c148:	2b02      	cmp	r3, #2
 801c14a:	d901      	bls.n	801c150 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801c14c:	2303      	movs	r3, #3
 801c14e:	e23d      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801c150:	4b33      	ldr	r3, [pc, #204]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c152:	681b      	ldr	r3, [r3, #0]
 801c154:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c158:	2b00      	cmp	r3, #0
 801c15a:	d1f0      	bne.n	801c13e <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801c15c:	687b      	ldr	r3, [r7, #4]
 801c15e:	681b      	ldr	r3, [r3, #0]
 801c160:	f003 0308 	and.w	r3, r3, #8
 801c164:	2b00      	cmp	r3, #0
 801c166:	d036      	beq.n	801c1d6 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801c168:	687b      	ldr	r3, [r7, #4]
 801c16a:	695b      	ldr	r3, [r3, #20]
 801c16c:	2b00      	cmp	r3, #0
 801c16e:	d019      	beq.n	801c1a4 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801c170:	4b2b      	ldr	r3, [pc, #172]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c172:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c174:	4a2a      	ldr	r2, [pc, #168]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c176:	f043 0301 	orr.w	r3, r3, #1
 801c17a:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c17c:	f7fd f9bc 	bl	80194f8 <HAL_GetTick>
 801c180:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c182:	e008      	b.n	801c196 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c184:	f7fd f9b8 	bl	80194f8 <HAL_GetTick>
 801c188:	4602      	mov	r2, r0
 801c18a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c18c:	1ad3      	subs	r3, r2, r3
 801c18e:	2b02      	cmp	r3, #2
 801c190:	d901      	bls.n	801c196 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801c192:	2303      	movs	r3, #3
 801c194:	e21a      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801c196:	4b22      	ldr	r3, [pc, #136]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c198:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c19a:	f003 0302 	and.w	r3, r3, #2
 801c19e:	2b00      	cmp	r3, #0
 801c1a0:	d0f0      	beq.n	801c184 <HAL_RCC_OscConfig+0x45c>
 801c1a2:	e018      	b.n	801c1d6 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801c1a4:	4b1e      	ldr	r3, [pc, #120]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c1a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c1a8:	4a1d      	ldr	r2, [pc, #116]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c1aa:	f023 0301 	bic.w	r3, r3, #1
 801c1ae:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c1b0:	f7fd f9a2 	bl	80194f8 <HAL_GetTick>
 801c1b4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c1b6:	e008      	b.n	801c1ca <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801c1b8:	f7fd f99e 	bl	80194f8 <HAL_GetTick>
 801c1bc:	4602      	mov	r2, r0
 801c1be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c1c0:	1ad3      	subs	r3, r2, r3
 801c1c2:	2b02      	cmp	r3, #2
 801c1c4:	d901      	bls.n	801c1ca <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801c1c6:	2303      	movs	r3, #3
 801c1c8:	e200      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801c1ca:	4b15      	ldr	r3, [pc, #84]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c1cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801c1ce:	f003 0302 	and.w	r3, r3, #2
 801c1d2:	2b00      	cmp	r3, #0
 801c1d4:	d1f0      	bne.n	801c1b8 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801c1d6:	687b      	ldr	r3, [r7, #4]
 801c1d8:	681b      	ldr	r3, [r3, #0]
 801c1da:	f003 0320 	and.w	r3, r3, #32
 801c1de:	2b00      	cmp	r3, #0
 801c1e0:	d039      	beq.n	801c256 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801c1e2:	687b      	ldr	r3, [r7, #4]
 801c1e4:	699b      	ldr	r3, [r3, #24]
 801c1e6:	2b00      	cmp	r3, #0
 801c1e8:	d01c      	beq.n	801c224 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801c1ea:	4b0d      	ldr	r3, [pc, #52]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c1ec:	681b      	ldr	r3, [r3, #0]
 801c1ee:	4a0c      	ldr	r2, [pc, #48]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c1f0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801c1f4:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c1f6:	f7fd f97f 	bl	80194f8 <HAL_GetTick>
 801c1fa:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c1fc:	e008      	b.n	801c210 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c1fe:	f7fd f97b 	bl	80194f8 <HAL_GetTick>
 801c202:	4602      	mov	r2, r0
 801c204:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c206:	1ad3      	subs	r3, r2, r3
 801c208:	2b02      	cmp	r3, #2
 801c20a:	d901      	bls.n	801c210 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801c20c:	2303      	movs	r3, #3
 801c20e:	e1dd      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801c210:	4b03      	ldr	r3, [pc, #12]	@ (801c220 <HAL_RCC_OscConfig+0x4f8>)
 801c212:	681b      	ldr	r3, [r3, #0]
 801c214:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c218:	2b00      	cmp	r3, #0
 801c21a:	d0f0      	beq.n	801c1fe <HAL_RCC_OscConfig+0x4d6>
 801c21c:	e01b      	b.n	801c256 <HAL_RCC_OscConfig+0x52e>
 801c21e:	bf00      	nop
 801c220:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801c224:	4b9b      	ldr	r3, [pc, #620]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c226:	681b      	ldr	r3, [r3, #0]
 801c228:	4a9a      	ldr	r2, [pc, #616]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c22a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c22e:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801c230:	f7fd f962 	bl	80194f8 <HAL_GetTick>
 801c234:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c236:	e008      	b.n	801c24a <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801c238:	f7fd f95e 	bl	80194f8 <HAL_GetTick>
 801c23c:	4602      	mov	r2, r0
 801c23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c240:	1ad3      	subs	r3, r2, r3
 801c242:	2b02      	cmp	r3, #2
 801c244:	d901      	bls.n	801c24a <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801c246:	2303      	movs	r3, #3
 801c248:	e1c0      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801c24a:	4b92      	ldr	r3, [pc, #584]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c24c:	681b      	ldr	r3, [r3, #0]
 801c24e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801c252:	2b00      	cmp	r3, #0
 801c254:	d1f0      	bne.n	801c238 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801c256:	687b      	ldr	r3, [r7, #4]
 801c258:	681b      	ldr	r3, [r3, #0]
 801c25a:	f003 0304 	and.w	r3, r3, #4
 801c25e:	2b00      	cmp	r3, #0
 801c260:	f000 8081 	beq.w	801c366 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801c264:	4b8c      	ldr	r3, [pc, #560]	@ (801c498 <HAL_RCC_OscConfig+0x770>)
 801c266:	681b      	ldr	r3, [r3, #0]
 801c268:	4a8b      	ldr	r2, [pc, #556]	@ (801c498 <HAL_RCC_OscConfig+0x770>)
 801c26a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c26e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801c270:	f7fd f942 	bl	80194f8 <HAL_GetTick>
 801c274:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c276:	e008      	b.n	801c28a <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801c278:	f7fd f93e 	bl	80194f8 <HAL_GetTick>
 801c27c:	4602      	mov	r2, r0
 801c27e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c280:	1ad3      	subs	r3, r2, r3
 801c282:	2b64      	cmp	r3, #100	@ 0x64
 801c284:	d901      	bls.n	801c28a <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801c286:	2303      	movs	r3, #3
 801c288:	e1a0      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801c28a:	4b83      	ldr	r3, [pc, #524]	@ (801c498 <HAL_RCC_OscConfig+0x770>)
 801c28c:	681b      	ldr	r3, [r3, #0]
 801c28e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c292:	2b00      	cmp	r3, #0
 801c294:	d0f0      	beq.n	801c278 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801c296:	687b      	ldr	r3, [r7, #4]
 801c298:	689b      	ldr	r3, [r3, #8]
 801c29a:	2b01      	cmp	r3, #1
 801c29c:	d106      	bne.n	801c2ac <HAL_RCC_OscConfig+0x584>
 801c29e:	4b7d      	ldr	r3, [pc, #500]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c2a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2a2:	4a7c      	ldr	r2, [pc, #496]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c2a4:	f043 0301 	orr.w	r3, r3, #1
 801c2a8:	6713      	str	r3, [r2, #112]	@ 0x70
 801c2aa:	e02d      	b.n	801c308 <HAL_RCC_OscConfig+0x5e0>
 801c2ac:	687b      	ldr	r3, [r7, #4]
 801c2ae:	689b      	ldr	r3, [r3, #8]
 801c2b0:	2b00      	cmp	r3, #0
 801c2b2:	d10c      	bne.n	801c2ce <HAL_RCC_OscConfig+0x5a6>
 801c2b4:	4b77      	ldr	r3, [pc, #476]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c2b6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2b8:	4a76      	ldr	r2, [pc, #472]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c2ba:	f023 0301 	bic.w	r3, r3, #1
 801c2be:	6713      	str	r3, [r2, #112]	@ 0x70
 801c2c0:	4b74      	ldr	r3, [pc, #464]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c2c2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2c4:	4a73      	ldr	r2, [pc, #460]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c2c6:	f023 0304 	bic.w	r3, r3, #4
 801c2ca:	6713      	str	r3, [r2, #112]	@ 0x70
 801c2cc:	e01c      	b.n	801c308 <HAL_RCC_OscConfig+0x5e0>
 801c2ce:	687b      	ldr	r3, [r7, #4]
 801c2d0:	689b      	ldr	r3, [r3, #8]
 801c2d2:	2b05      	cmp	r3, #5
 801c2d4:	d10c      	bne.n	801c2f0 <HAL_RCC_OscConfig+0x5c8>
 801c2d6:	4b6f      	ldr	r3, [pc, #444]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c2d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2da:	4a6e      	ldr	r2, [pc, #440]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c2dc:	f043 0304 	orr.w	r3, r3, #4
 801c2e0:	6713      	str	r3, [r2, #112]	@ 0x70
 801c2e2:	4b6c      	ldr	r3, [pc, #432]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c2e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2e6:	4a6b      	ldr	r2, [pc, #428]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c2e8:	f043 0301 	orr.w	r3, r3, #1
 801c2ec:	6713      	str	r3, [r2, #112]	@ 0x70
 801c2ee:	e00b      	b.n	801c308 <HAL_RCC_OscConfig+0x5e0>
 801c2f0:	4b68      	ldr	r3, [pc, #416]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c2f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c2f4:	4a67      	ldr	r2, [pc, #412]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c2f6:	f023 0301 	bic.w	r3, r3, #1
 801c2fa:	6713      	str	r3, [r2, #112]	@ 0x70
 801c2fc:	4b65      	ldr	r3, [pc, #404]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c2fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c300:	4a64      	ldr	r2, [pc, #400]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c302:	f023 0304 	bic.w	r3, r3, #4
 801c306:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801c308:	687b      	ldr	r3, [r7, #4]
 801c30a:	689b      	ldr	r3, [r3, #8]
 801c30c:	2b00      	cmp	r3, #0
 801c30e:	d015      	beq.n	801c33c <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c310:	f7fd f8f2 	bl	80194f8 <HAL_GetTick>
 801c314:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c316:	e00a      	b.n	801c32e <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c318:	f7fd f8ee 	bl	80194f8 <HAL_GetTick>
 801c31c:	4602      	mov	r2, r0
 801c31e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c320:	1ad3      	subs	r3, r2, r3
 801c322:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c326:	4293      	cmp	r3, r2
 801c328:	d901      	bls.n	801c32e <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801c32a:	2303      	movs	r3, #3
 801c32c:	e14e      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801c32e:	4b59      	ldr	r3, [pc, #356]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c330:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c332:	f003 0302 	and.w	r3, r3, #2
 801c336:	2b00      	cmp	r3, #0
 801c338:	d0ee      	beq.n	801c318 <HAL_RCC_OscConfig+0x5f0>
 801c33a:	e014      	b.n	801c366 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801c33c:	f7fd f8dc 	bl	80194f8 <HAL_GetTick>
 801c340:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c342:	e00a      	b.n	801c35a <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801c344:	f7fd f8d8 	bl	80194f8 <HAL_GetTick>
 801c348:	4602      	mov	r2, r0
 801c34a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c34c:	1ad3      	subs	r3, r2, r3
 801c34e:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c352:	4293      	cmp	r3, r2
 801c354:	d901      	bls.n	801c35a <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801c356:	2303      	movs	r3, #3
 801c358:	e138      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801c35a:	4b4e      	ldr	r3, [pc, #312]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c35c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c35e:	f003 0302 	and.w	r3, r3, #2
 801c362:	2b00      	cmp	r3, #0
 801c364:	d1ee      	bne.n	801c344 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801c366:	687b      	ldr	r3, [r7, #4]
 801c368:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c36a:	2b00      	cmp	r3, #0
 801c36c:	f000 812d 	beq.w	801c5ca <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801c370:	4b48      	ldr	r3, [pc, #288]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c372:	691b      	ldr	r3, [r3, #16]
 801c374:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c378:	2b18      	cmp	r3, #24
 801c37a:	f000 80bd 	beq.w	801c4f8 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801c37e:	687b      	ldr	r3, [r7, #4]
 801c380:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c382:	2b02      	cmp	r3, #2
 801c384:	f040 809e 	bne.w	801c4c4 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c388:	4b42      	ldr	r3, [pc, #264]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c38a:	681b      	ldr	r3, [r3, #0]
 801c38c:	4a41      	ldr	r2, [pc, #260]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c38e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c392:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c394:	f7fd f8b0 	bl	80194f8 <HAL_GetTick>
 801c398:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c39a:	e008      	b.n	801c3ae <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c39c:	f7fd f8ac 	bl	80194f8 <HAL_GetTick>
 801c3a0:	4602      	mov	r2, r0
 801c3a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c3a4:	1ad3      	subs	r3, r2, r3
 801c3a6:	2b02      	cmp	r3, #2
 801c3a8:	d901      	bls.n	801c3ae <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801c3aa:	2303      	movs	r3, #3
 801c3ac:	e10e      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c3ae:	4b39      	ldr	r3, [pc, #228]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c3b0:	681b      	ldr	r3, [r3, #0]
 801c3b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c3b6:	2b00      	cmp	r3, #0
 801c3b8:	d1f0      	bne.n	801c39c <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801c3ba:	4b36      	ldr	r3, [pc, #216]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c3bc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801c3be:	4b37      	ldr	r3, [pc, #220]	@ (801c49c <HAL_RCC_OscConfig+0x774>)
 801c3c0:	4013      	ands	r3, r2
 801c3c2:	687a      	ldr	r2, [r7, #4]
 801c3c4:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801c3c6:	687a      	ldr	r2, [r7, #4]
 801c3c8:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801c3ca:	0112      	lsls	r2, r2, #4
 801c3cc:	430a      	orrs	r2, r1
 801c3ce:	4931      	ldr	r1, [pc, #196]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c3d0:	4313      	orrs	r3, r2
 801c3d2:	628b      	str	r3, [r1, #40]	@ 0x28
 801c3d4:	687b      	ldr	r3, [r7, #4]
 801c3d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c3d8:	3b01      	subs	r3, #1
 801c3da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c3de:	687b      	ldr	r3, [r7, #4]
 801c3e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c3e2:	3b01      	subs	r3, #1
 801c3e4:	025b      	lsls	r3, r3, #9
 801c3e6:	b29b      	uxth	r3, r3
 801c3e8:	431a      	orrs	r2, r3
 801c3ea:	687b      	ldr	r3, [r7, #4]
 801c3ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c3ee:	3b01      	subs	r3, #1
 801c3f0:	041b      	lsls	r3, r3, #16
 801c3f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801c3f6:	431a      	orrs	r2, r3
 801c3f8:	687b      	ldr	r3, [r7, #4]
 801c3fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c3fc:	3b01      	subs	r3, #1
 801c3fe:	061b      	lsls	r3, r3, #24
 801c400:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801c404:	4923      	ldr	r1, [pc, #140]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c406:	4313      	orrs	r3, r2
 801c408:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801c40a:	4b22      	ldr	r3, [pc, #136]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c40c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c40e:	4a21      	ldr	r2, [pc, #132]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c410:	f023 0301 	bic.w	r3, r3, #1
 801c414:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c416:	4b1f      	ldr	r3, [pc, #124]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c418:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c41a:	4b21      	ldr	r3, [pc, #132]	@ (801c4a0 <HAL_RCC_OscConfig+0x778>)
 801c41c:	4013      	ands	r3, r2
 801c41e:	687a      	ldr	r2, [r7, #4]
 801c420:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801c422:	00d2      	lsls	r2, r2, #3
 801c424:	491b      	ldr	r1, [pc, #108]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c426:	4313      	orrs	r3, r2
 801c428:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801c42a:	4b1a      	ldr	r3, [pc, #104]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c42c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c42e:	f023 020c 	bic.w	r2, r3, #12
 801c432:	687b      	ldr	r3, [r7, #4]
 801c434:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c436:	4917      	ldr	r1, [pc, #92]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c438:	4313      	orrs	r3, r2
 801c43a:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801c43c:	4b15      	ldr	r3, [pc, #84]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c440:	f023 0202 	bic.w	r2, r3, #2
 801c444:	687b      	ldr	r3, [r7, #4]
 801c446:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801c448:	4912      	ldr	r1, [pc, #72]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c44a:	4313      	orrs	r3, r2
 801c44c:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801c44e:	4b11      	ldr	r3, [pc, #68]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c452:	4a10      	ldr	r2, [pc, #64]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c454:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801c458:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c45a:	4b0e      	ldr	r3, [pc, #56]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c45c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c45e:	4a0d      	ldr	r2, [pc, #52]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c460:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c464:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801c466:	4b0b      	ldr	r3, [pc, #44]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c46a:	4a0a      	ldr	r2, [pc, #40]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c46c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801c470:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801c472:	4b08      	ldr	r3, [pc, #32]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c474:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c476:	4a07      	ldr	r2, [pc, #28]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c478:	f043 0301 	orr.w	r3, r3, #1
 801c47c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801c47e:	4b05      	ldr	r3, [pc, #20]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c480:	681b      	ldr	r3, [r3, #0]
 801c482:	4a04      	ldr	r2, [pc, #16]	@ (801c494 <HAL_RCC_OscConfig+0x76c>)
 801c484:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801c488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c48a:	f7fd f835 	bl	80194f8 <HAL_GetTick>
 801c48e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c490:	e011      	b.n	801c4b6 <HAL_RCC_OscConfig+0x78e>
 801c492:	bf00      	nop
 801c494:	58024400 	.word	0x58024400
 801c498:	58024800 	.word	0x58024800
 801c49c:	fffffc0c 	.word	0xfffffc0c
 801c4a0:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c4a4:	f7fd f828 	bl	80194f8 <HAL_GetTick>
 801c4a8:	4602      	mov	r2, r0
 801c4aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4ac:	1ad3      	subs	r3, r2, r3
 801c4ae:	2b02      	cmp	r3, #2
 801c4b0:	d901      	bls.n	801c4b6 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801c4b2:	2303      	movs	r3, #3
 801c4b4:	e08a      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c4b6:	4b47      	ldr	r3, [pc, #284]	@ (801c5d4 <HAL_RCC_OscConfig+0x8ac>)
 801c4b8:	681b      	ldr	r3, [r3, #0]
 801c4ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c4be:	2b00      	cmp	r3, #0
 801c4c0:	d0f0      	beq.n	801c4a4 <HAL_RCC_OscConfig+0x77c>
 801c4c2:	e082      	b.n	801c5ca <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801c4c4:	4b43      	ldr	r3, [pc, #268]	@ (801c5d4 <HAL_RCC_OscConfig+0x8ac>)
 801c4c6:	681b      	ldr	r3, [r3, #0]
 801c4c8:	4a42      	ldr	r2, [pc, #264]	@ (801c5d4 <HAL_RCC_OscConfig+0x8ac>)
 801c4ca:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801c4ce:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801c4d0:	f7fd f812 	bl	80194f8 <HAL_GetTick>
 801c4d4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c4d6:	e008      	b.n	801c4ea <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801c4d8:	f7fd f80e 	bl	80194f8 <HAL_GetTick>
 801c4dc:	4602      	mov	r2, r0
 801c4de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c4e0:	1ad3      	subs	r3, r2, r3
 801c4e2:	2b02      	cmp	r3, #2
 801c4e4:	d901      	bls.n	801c4ea <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801c4e6:	2303      	movs	r3, #3
 801c4e8:	e070      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801c4ea:	4b3a      	ldr	r3, [pc, #232]	@ (801c5d4 <HAL_RCC_OscConfig+0x8ac>)
 801c4ec:	681b      	ldr	r3, [r3, #0]
 801c4ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c4f2:	2b00      	cmp	r3, #0
 801c4f4:	d1f0      	bne.n	801c4d8 <HAL_RCC_OscConfig+0x7b0>
 801c4f6:	e068      	b.n	801c5ca <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801c4f8:	4b36      	ldr	r3, [pc, #216]	@ (801c5d4 <HAL_RCC_OscConfig+0x8ac>)
 801c4fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c4fc:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801c4fe:	4b35      	ldr	r3, [pc, #212]	@ (801c5d4 <HAL_RCC_OscConfig+0x8ac>)
 801c500:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c502:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c504:	687b      	ldr	r3, [r7, #4]
 801c506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801c508:	2b01      	cmp	r3, #1
 801c50a:	d031      	beq.n	801c570 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c50c:	693b      	ldr	r3, [r7, #16]
 801c50e:	f003 0203 	and.w	r2, r3, #3
 801c512:	687b      	ldr	r3, [r7, #4]
 801c514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801c516:	429a      	cmp	r2, r3
 801c518:	d12a      	bne.n	801c570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c51a:	693b      	ldr	r3, [r7, #16]
 801c51c:	091b      	lsrs	r3, r3, #4
 801c51e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801c526:	429a      	cmp	r2, r3
 801c528:	d122      	bne.n	801c570 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c52a:	68fb      	ldr	r3, [r7, #12]
 801c52c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801c530:	687b      	ldr	r3, [r7, #4]
 801c532:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c534:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801c536:	429a      	cmp	r2, r3
 801c538:	d11a      	bne.n	801c570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c53a:	68fb      	ldr	r3, [r7, #12]
 801c53c:	0a5b      	lsrs	r3, r3, #9
 801c53e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c542:	687b      	ldr	r3, [r7, #4]
 801c544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c546:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801c548:	429a      	cmp	r2, r3
 801c54a:	d111      	bne.n	801c570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c54c:	68fb      	ldr	r3, [r7, #12]
 801c54e:	0c1b      	lsrs	r3, r3, #16
 801c550:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c554:	687b      	ldr	r3, [r7, #4]
 801c556:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c558:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801c55a:	429a      	cmp	r2, r3
 801c55c:	d108      	bne.n	801c570 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801c55e:	68fb      	ldr	r3, [r7, #12]
 801c560:	0e1b      	lsrs	r3, r3, #24
 801c562:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801c566:	687b      	ldr	r3, [r7, #4]
 801c568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801c56a:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801c56c:	429a      	cmp	r2, r3
 801c56e:	d001      	beq.n	801c574 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801c570:	2301      	movs	r3, #1
 801c572:	e02b      	b.n	801c5cc <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801c574:	4b17      	ldr	r3, [pc, #92]	@ (801c5d4 <HAL_RCC_OscConfig+0x8ac>)
 801c576:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801c578:	08db      	lsrs	r3, r3, #3
 801c57a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c57e:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801c580:	687b      	ldr	r3, [r7, #4]
 801c582:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801c584:	693a      	ldr	r2, [r7, #16]
 801c586:	429a      	cmp	r2, r3
 801c588:	d01f      	beq.n	801c5ca <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801c58a:	4b12      	ldr	r3, [pc, #72]	@ (801c5d4 <HAL_RCC_OscConfig+0x8ac>)
 801c58c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c58e:	4a11      	ldr	r2, [pc, #68]	@ (801c5d4 <HAL_RCC_OscConfig+0x8ac>)
 801c590:	f023 0301 	bic.w	r3, r3, #1
 801c594:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801c596:	f7fc ffaf 	bl	80194f8 <HAL_GetTick>
 801c59a:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801c59c:	bf00      	nop
 801c59e:	f7fc ffab 	bl	80194f8 <HAL_GetTick>
 801c5a2:	4602      	mov	r2, r0
 801c5a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801c5a6:	4293      	cmp	r3, r2
 801c5a8:	d0f9      	beq.n	801c59e <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801c5aa:	4b0a      	ldr	r3, [pc, #40]	@ (801c5d4 <HAL_RCC_OscConfig+0x8ac>)
 801c5ac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801c5ae:	4b0a      	ldr	r3, [pc, #40]	@ (801c5d8 <HAL_RCC_OscConfig+0x8b0>)
 801c5b0:	4013      	ands	r3, r2
 801c5b2:	687a      	ldr	r2, [r7, #4]
 801c5b4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801c5b6:	00d2      	lsls	r2, r2, #3
 801c5b8:	4906      	ldr	r1, [pc, #24]	@ (801c5d4 <HAL_RCC_OscConfig+0x8ac>)
 801c5ba:	4313      	orrs	r3, r2
 801c5bc:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801c5be:	4b05      	ldr	r3, [pc, #20]	@ (801c5d4 <HAL_RCC_OscConfig+0x8ac>)
 801c5c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c5c2:	4a04      	ldr	r2, [pc, #16]	@ (801c5d4 <HAL_RCC_OscConfig+0x8ac>)
 801c5c4:	f043 0301 	orr.w	r3, r3, #1
 801c5c8:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801c5ca:	2300      	movs	r3, #0
}
 801c5cc:	4618      	mov	r0, r3
 801c5ce:	3730      	adds	r7, #48	@ 0x30
 801c5d0:	46bd      	mov	sp, r7
 801c5d2:	bd80      	pop	{r7, pc}
 801c5d4:	58024400 	.word	0x58024400
 801c5d8:	ffff0007 	.word	0xffff0007

0801c5dc <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801c5dc:	b580      	push	{r7, lr}
 801c5de:	b086      	sub	sp, #24
 801c5e0:	af00      	add	r7, sp, #0
 801c5e2:	6078      	str	r0, [r7, #4]
 801c5e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801c5e6:	687b      	ldr	r3, [r7, #4]
 801c5e8:	2b00      	cmp	r3, #0
 801c5ea:	d101      	bne.n	801c5f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801c5ec:	2301      	movs	r3, #1
 801c5ee:	e19c      	b.n	801c92a <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801c5f0:	4b8a      	ldr	r3, [pc, #552]	@ (801c81c <HAL_RCC_ClockConfig+0x240>)
 801c5f2:	681b      	ldr	r3, [r3, #0]
 801c5f4:	f003 030f 	and.w	r3, r3, #15
 801c5f8:	683a      	ldr	r2, [r7, #0]
 801c5fa:	429a      	cmp	r2, r3
 801c5fc:	d910      	bls.n	801c620 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c5fe:	4b87      	ldr	r3, [pc, #540]	@ (801c81c <HAL_RCC_ClockConfig+0x240>)
 801c600:	681b      	ldr	r3, [r3, #0]
 801c602:	f023 020f 	bic.w	r2, r3, #15
 801c606:	4985      	ldr	r1, [pc, #532]	@ (801c81c <HAL_RCC_ClockConfig+0x240>)
 801c608:	683b      	ldr	r3, [r7, #0]
 801c60a:	4313      	orrs	r3, r2
 801c60c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c60e:	4b83      	ldr	r3, [pc, #524]	@ (801c81c <HAL_RCC_ClockConfig+0x240>)
 801c610:	681b      	ldr	r3, [r3, #0]
 801c612:	f003 030f 	and.w	r3, r3, #15
 801c616:	683a      	ldr	r2, [r7, #0]
 801c618:	429a      	cmp	r2, r3
 801c61a:	d001      	beq.n	801c620 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801c61c:	2301      	movs	r3, #1
 801c61e:	e184      	b.n	801c92a <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c620:	687b      	ldr	r3, [r7, #4]
 801c622:	681b      	ldr	r3, [r3, #0]
 801c624:	f003 0304 	and.w	r3, r3, #4
 801c628:	2b00      	cmp	r3, #0
 801c62a:	d010      	beq.n	801c64e <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c62c:	687b      	ldr	r3, [r7, #4]
 801c62e:	691a      	ldr	r2, [r3, #16]
 801c630:	4b7b      	ldr	r3, [pc, #492]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c632:	699b      	ldr	r3, [r3, #24]
 801c634:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c638:	429a      	cmp	r2, r3
 801c63a:	d908      	bls.n	801c64e <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c63c:	4b78      	ldr	r3, [pc, #480]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c63e:	699b      	ldr	r3, [r3, #24]
 801c640:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c644:	687b      	ldr	r3, [r7, #4]
 801c646:	691b      	ldr	r3, [r3, #16]
 801c648:	4975      	ldr	r1, [pc, #468]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c64a:	4313      	orrs	r3, r2
 801c64c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c64e:	687b      	ldr	r3, [r7, #4]
 801c650:	681b      	ldr	r3, [r3, #0]
 801c652:	f003 0308 	and.w	r3, r3, #8
 801c656:	2b00      	cmp	r3, #0
 801c658:	d010      	beq.n	801c67c <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c65a:	687b      	ldr	r3, [r7, #4]
 801c65c:	695a      	ldr	r2, [r3, #20]
 801c65e:	4b70      	ldr	r3, [pc, #448]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c660:	69db      	ldr	r3, [r3, #28]
 801c662:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c666:	429a      	cmp	r2, r3
 801c668:	d908      	bls.n	801c67c <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801c66a:	4b6d      	ldr	r3, [pc, #436]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c66c:	69db      	ldr	r3, [r3, #28]
 801c66e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c672:	687b      	ldr	r3, [r7, #4]
 801c674:	695b      	ldr	r3, [r3, #20]
 801c676:	496a      	ldr	r1, [pc, #424]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c678:	4313      	orrs	r3, r2
 801c67a:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c67c:	687b      	ldr	r3, [r7, #4]
 801c67e:	681b      	ldr	r3, [r3, #0]
 801c680:	f003 0310 	and.w	r3, r3, #16
 801c684:	2b00      	cmp	r3, #0
 801c686:	d010      	beq.n	801c6aa <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801c688:	687b      	ldr	r3, [r7, #4]
 801c68a:	699a      	ldr	r2, [r3, #24]
 801c68c:	4b64      	ldr	r3, [pc, #400]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c68e:	69db      	ldr	r3, [r3, #28]
 801c690:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c694:	429a      	cmp	r2, r3
 801c696:	d908      	bls.n	801c6aa <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801c698:	4b61      	ldr	r3, [pc, #388]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c69a:	69db      	ldr	r3, [r3, #28]
 801c69c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801c6a0:	687b      	ldr	r3, [r7, #4]
 801c6a2:	699b      	ldr	r3, [r3, #24]
 801c6a4:	495e      	ldr	r1, [pc, #376]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c6a6:	4313      	orrs	r3, r2
 801c6a8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801c6aa:	687b      	ldr	r3, [r7, #4]
 801c6ac:	681b      	ldr	r3, [r3, #0]
 801c6ae:	f003 0320 	and.w	r3, r3, #32
 801c6b2:	2b00      	cmp	r3, #0
 801c6b4:	d010      	beq.n	801c6d8 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801c6b6:	687b      	ldr	r3, [r7, #4]
 801c6b8:	69da      	ldr	r2, [r3, #28]
 801c6ba:	4b59      	ldr	r3, [pc, #356]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c6bc:	6a1b      	ldr	r3, [r3, #32]
 801c6be:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c6c2:	429a      	cmp	r2, r3
 801c6c4:	d908      	bls.n	801c6d8 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801c6c6:	4b56      	ldr	r3, [pc, #344]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c6c8:	6a1b      	ldr	r3, [r3, #32]
 801c6ca:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c6ce:	687b      	ldr	r3, [r7, #4]
 801c6d0:	69db      	ldr	r3, [r3, #28]
 801c6d2:	4953      	ldr	r1, [pc, #332]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c6d4:	4313      	orrs	r3, r2
 801c6d6:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c6d8:	687b      	ldr	r3, [r7, #4]
 801c6da:	681b      	ldr	r3, [r3, #0]
 801c6dc:	f003 0302 	and.w	r3, r3, #2
 801c6e0:	2b00      	cmp	r3, #0
 801c6e2:	d010      	beq.n	801c706 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	68da      	ldr	r2, [r3, #12]
 801c6e8:	4b4d      	ldr	r3, [pc, #308]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c6ea:	699b      	ldr	r3, [r3, #24]
 801c6ec:	f003 030f 	and.w	r3, r3, #15
 801c6f0:	429a      	cmp	r2, r3
 801c6f2:	d908      	bls.n	801c706 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c6f4:	4b4a      	ldr	r3, [pc, #296]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c6f6:	699b      	ldr	r3, [r3, #24]
 801c6f8:	f023 020f 	bic.w	r2, r3, #15
 801c6fc:	687b      	ldr	r3, [r7, #4]
 801c6fe:	68db      	ldr	r3, [r3, #12]
 801c700:	4947      	ldr	r1, [pc, #284]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c702:	4313      	orrs	r3, r2
 801c704:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	f003 0301 	and.w	r3, r3, #1
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d055      	beq.n	801c7be <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801c712:	4b43      	ldr	r3, [pc, #268]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c714:	699b      	ldr	r3, [r3, #24]
 801c716:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801c71a:	687b      	ldr	r3, [r7, #4]
 801c71c:	689b      	ldr	r3, [r3, #8]
 801c71e:	4940      	ldr	r1, [pc, #256]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c720:	4313      	orrs	r3, r2
 801c722:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801c724:	687b      	ldr	r3, [r7, #4]
 801c726:	685b      	ldr	r3, [r3, #4]
 801c728:	2b02      	cmp	r3, #2
 801c72a:	d107      	bne.n	801c73c <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801c72c:	4b3c      	ldr	r3, [pc, #240]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c72e:	681b      	ldr	r3, [r3, #0]
 801c730:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801c734:	2b00      	cmp	r3, #0
 801c736:	d121      	bne.n	801c77c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c738:	2301      	movs	r3, #1
 801c73a:	e0f6      	b.n	801c92a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801c73c:	687b      	ldr	r3, [r7, #4]
 801c73e:	685b      	ldr	r3, [r3, #4]
 801c740:	2b03      	cmp	r3, #3
 801c742:	d107      	bne.n	801c754 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801c744:	4b36      	ldr	r3, [pc, #216]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c746:	681b      	ldr	r3, [r3, #0]
 801c748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d115      	bne.n	801c77c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c750:	2301      	movs	r3, #1
 801c752:	e0ea      	b.n	801c92a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801c754:	687b      	ldr	r3, [r7, #4]
 801c756:	685b      	ldr	r3, [r3, #4]
 801c758:	2b01      	cmp	r3, #1
 801c75a:	d107      	bne.n	801c76c <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801c75c:	4b30      	ldr	r3, [pc, #192]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c75e:	681b      	ldr	r3, [r3, #0]
 801c760:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c764:	2b00      	cmp	r3, #0
 801c766:	d109      	bne.n	801c77c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c768:	2301      	movs	r3, #1
 801c76a:	e0de      	b.n	801c92a <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801c76c:	4b2c      	ldr	r3, [pc, #176]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c76e:	681b      	ldr	r3, [r3, #0]
 801c770:	f003 0304 	and.w	r3, r3, #4
 801c774:	2b00      	cmp	r3, #0
 801c776:	d101      	bne.n	801c77c <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801c778:	2301      	movs	r3, #1
 801c77a:	e0d6      	b.n	801c92a <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801c77c:	4b28      	ldr	r3, [pc, #160]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c77e:	691b      	ldr	r3, [r3, #16]
 801c780:	f023 0207 	bic.w	r2, r3, #7
 801c784:	687b      	ldr	r3, [r7, #4]
 801c786:	685b      	ldr	r3, [r3, #4]
 801c788:	4925      	ldr	r1, [pc, #148]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c78a:	4313      	orrs	r3, r2
 801c78c:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801c78e:	f7fc feb3 	bl	80194f8 <HAL_GetTick>
 801c792:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c794:	e00a      	b.n	801c7ac <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801c796:	f7fc feaf 	bl	80194f8 <HAL_GetTick>
 801c79a:	4602      	mov	r2, r0
 801c79c:	697b      	ldr	r3, [r7, #20]
 801c79e:	1ad3      	subs	r3, r2, r3
 801c7a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 801c7a4:	4293      	cmp	r3, r2
 801c7a6:	d901      	bls.n	801c7ac <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801c7a8:	2303      	movs	r3, #3
 801c7aa:	e0be      	b.n	801c92a <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801c7ac:	4b1c      	ldr	r3, [pc, #112]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c7ae:	691b      	ldr	r3, [r3, #16]
 801c7b0:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801c7b4:	687b      	ldr	r3, [r7, #4]
 801c7b6:	685b      	ldr	r3, [r3, #4]
 801c7b8:	00db      	lsls	r3, r3, #3
 801c7ba:	429a      	cmp	r2, r3
 801c7bc:	d1eb      	bne.n	801c796 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801c7be:	687b      	ldr	r3, [r7, #4]
 801c7c0:	681b      	ldr	r3, [r3, #0]
 801c7c2:	f003 0302 	and.w	r3, r3, #2
 801c7c6:	2b00      	cmp	r3, #0
 801c7c8:	d010      	beq.n	801c7ec <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801c7ca:	687b      	ldr	r3, [r7, #4]
 801c7cc:	68da      	ldr	r2, [r3, #12]
 801c7ce:	4b14      	ldr	r3, [pc, #80]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c7d0:	699b      	ldr	r3, [r3, #24]
 801c7d2:	f003 030f 	and.w	r3, r3, #15
 801c7d6:	429a      	cmp	r2, r3
 801c7d8:	d208      	bcs.n	801c7ec <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801c7da:	4b11      	ldr	r3, [pc, #68]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c7dc:	699b      	ldr	r3, [r3, #24]
 801c7de:	f023 020f 	bic.w	r2, r3, #15
 801c7e2:	687b      	ldr	r3, [r7, #4]
 801c7e4:	68db      	ldr	r3, [r3, #12]
 801c7e6:	490e      	ldr	r1, [pc, #56]	@ (801c820 <HAL_RCC_ClockConfig+0x244>)
 801c7e8:	4313      	orrs	r3, r2
 801c7ea:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801c7ec:	4b0b      	ldr	r3, [pc, #44]	@ (801c81c <HAL_RCC_ClockConfig+0x240>)
 801c7ee:	681b      	ldr	r3, [r3, #0]
 801c7f0:	f003 030f 	and.w	r3, r3, #15
 801c7f4:	683a      	ldr	r2, [r7, #0]
 801c7f6:	429a      	cmp	r2, r3
 801c7f8:	d214      	bcs.n	801c824 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801c7fa:	4b08      	ldr	r3, [pc, #32]	@ (801c81c <HAL_RCC_ClockConfig+0x240>)
 801c7fc:	681b      	ldr	r3, [r3, #0]
 801c7fe:	f023 020f 	bic.w	r2, r3, #15
 801c802:	4906      	ldr	r1, [pc, #24]	@ (801c81c <HAL_RCC_ClockConfig+0x240>)
 801c804:	683b      	ldr	r3, [r7, #0]
 801c806:	4313      	orrs	r3, r2
 801c808:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801c80a:	4b04      	ldr	r3, [pc, #16]	@ (801c81c <HAL_RCC_ClockConfig+0x240>)
 801c80c:	681b      	ldr	r3, [r3, #0]
 801c80e:	f003 030f 	and.w	r3, r3, #15
 801c812:	683a      	ldr	r2, [r7, #0]
 801c814:	429a      	cmp	r2, r3
 801c816:	d005      	beq.n	801c824 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801c818:	2301      	movs	r3, #1
 801c81a:	e086      	b.n	801c92a <HAL_RCC_ClockConfig+0x34e>
 801c81c:	52002000 	.word	0x52002000
 801c820:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801c824:	687b      	ldr	r3, [r7, #4]
 801c826:	681b      	ldr	r3, [r3, #0]
 801c828:	f003 0304 	and.w	r3, r3, #4
 801c82c:	2b00      	cmp	r3, #0
 801c82e:	d010      	beq.n	801c852 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801c830:	687b      	ldr	r3, [r7, #4]
 801c832:	691a      	ldr	r2, [r3, #16]
 801c834:	4b3f      	ldr	r3, [pc, #252]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c836:	699b      	ldr	r3, [r3, #24]
 801c838:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c83c:	429a      	cmp	r2, r3
 801c83e:	d208      	bcs.n	801c852 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801c840:	4b3c      	ldr	r3, [pc, #240]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c842:	699b      	ldr	r3, [r3, #24]
 801c844:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c848:	687b      	ldr	r3, [r7, #4]
 801c84a:	691b      	ldr	r3, [r3, #16]
 801c84c:	4939      	ldr	r1, [pc, #228]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c84e:	4313      	orrs	r3, r2
 801c850:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801c852:	687b      	ldr	r3, [r7, #4]
 801c854:	681b      	ldr	r3, [r3, #0]
 801c856:	f003 0308 	and.w	r3, r3, #8
 801c85a:	2b00      	cmp	r3, #0
 801c85c:	d010      	beq.n	801c880 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801c85e:	687b      	ldr	r3, [r7, #4]
 801c860:	695a      	ldr	r2, [r3, #20]
 801c862:	4b34      	ldr	r3, [pc, #208]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c864:	69db      	ldr	r3, [r3, #28]
 801c866:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c86a:	429a      	cmp	r2, r3
 801c86c:	d208      	bcs.n	801c880 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801c86e:	4b31      	ldr	r3, [pc, #196]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c870:	69db      	ldr	r3, [r3, #28]
 801c872:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c876:	687b      	ldr	r3, [r7, #4]
 801c878:	695b      	ldr	r3, [r3, #20]
 801c87a:	492e      	ldr	r1, [pc, #184]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c87c:	4313      	orrs	r3, r2
 801c87e:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801c880:	687b      	ldr	r3, [r7, #4]
 801c882:	681b      	ldr	r3, [r3, #0]
 801c884:	f003 0310 	and.w	r3, r3, #16
 801c888:	2b00      	cmp	r3, #0
 801c88a:	d010      	beq.n	801c8ae <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	699a      	ldr	r2, [r3, #24]
 801c890:	4b28      	ldr	r3, [pc, #160]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c892:	69db      	ldr	r3, [r3, #28]
 801c894:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801c898:	429a      	cmp	r2, r3
 801c89a:	d208      	bcs.n	801c8ae <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801c89c:	4b25      	ldr	r3, [pc, #148]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c89e:	69db      	ldr	r3, [r3, #28]
 801c8a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801c8a4:	687b      	ldr	r3, [r7, #4]
 801c8a6:	699b      	ldr	r3, [r3, #24]
 801c8a8:	4922      	ldr	r1, [pc, #136]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c8aa:	4313      	orrs	r3, r2
 801c8ac:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801c8ae:	687b      	ldr	r3, [r7, #4]
 801c8b0:	681b      	ldr	r3, [r3, #0]
 801c8b2:	f003 0320 	and.w	r3, r3, #32
 801c8b6:	2b00      	cmp	r3, #0
 801c8b8:	d010      	beq.n	801c8dc <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801c8ba:	687b      	ldr	r3, [r7, #4]
 801c8bc:	69da      	ldr	r2, [r3, #28]
 801c8be:	4b1d      	ldr	r3, [pc, #116]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c8c0:	6a1b      	ldr	r3, [r3, #32]
 801c8c2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801c8c6:	429a      	cmp	r2, r3
 801c8c8:	d208      	bcs.n	801c8dc <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801c8ca:	4b1a      	ldr	r3, [pc, #104]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c8cc:	6a1b      	ldr	r3, [r3, #32]
 801c8ce:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801c8d2:	687b      	ldr	r3, [r7, #4]
 801c8d4:	69db      	ldr	r3, [r3, #28]
 801c8d6:	4917      	ldr	r1, [pc, #92]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c8d8:	4313      	orrs	r3, r2
 801c8da:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801c8dc:	f000 f834 	bl	801c948 <HAL_RCC_GetSysClockFreq>
 801c8e0:	4602      	mov	r2, r0
 801c8e2:	4b14      	ldr	r3, [pc, #80]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c8e4:	699b      	ldr	r3, [r3, #24]
 801c8e6:	0a1b      	lsrs	r3, r3, #8
 801c8e8:	f003 030f 	and.w	r3, r3, #15
 801c8ec:	4912      	ldr	r1, [pc, #72]	@ (801c938 <HAL_RCC_ClockConfig+0x35c>)
 801c8ee:	5ccb      	ldrb	r3, [r1, r3]
 801c8f0:	f003 031f 	and.w	r3, r3, #31
 801c8f4:	fa22 f303 	lsr.w	r3, r2, r3
 801c8f8:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801c8fa:	4b0e      	ldr	r3, [pc, #56]	@ (801c934 <HAL_RCC_ClockConfig+0x358>)
 801c8fc:	699b      	ldr	r3, [r3, #24]
 801c8fe:	f003 030f 	and.w	r3, r3, #15
 801c902:	4a0d      	ldr	r2, [pc, #52]	@ (801c938 <HAL_RCC_ClockConfig+0x35c>)
 801c904:	5cd3      	ldrb	r3, [r2, r3]
 801c906:	f003 031f 	and.w	r3, r3, #31
 801c90a:	693a      	ldr	r2, [r7, #16]
 801c90c:	fa22 f303 	lsr.w	r3, r2, r3
 801c910:	4a0a      	ldr	r2, [pc, #40]	@ (801c93c <HAL_RCC_ClockConfig+0x360>)
 801c912:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801c914:	4a0a      	ldr	r2, [pc, #40]	@ (801c940 <HAL_RCC_ClockConfig+0x364>)
 801c916:	693b      	ldr	r3, [r7, #16]
 801c918:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801c91a:	4b0a      	ldr	r3, [pc, #40]	@ (801c944 <HAL_RCC_ClockConfig+0x368>)
 801c91c:	681b      	ldr	r3, [r3, #0]
 801c91e:	4618      	mov	r0, r3
 801c920:	f7fc fda0 	bl	8019464 <HAL_InitTick>
 801c924:	4603      	mov	r3, r0
 801c926:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801c928:	7bfb      	ldrb	r3, [r7, #15]
}
 801c92a:	4618      	mov	r0, r3
 801c92c:	3718      	adds	r7, #24
 801c92e:	46bd      	mov	sp, r7
 801c930:	bd80      	pop	{r7, pc}
 801c932:	bf00      	nop
 801c934:	58024400 	.word	0x58024400
 801c938:	080262d0 	.word	0x080262d0
 801c93c:	20000004 	.word	0x20000004
 801c940:	20000000 	.word	0x20000000
 801c944:	20000020 	.word	0x20000020

0801c948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801c948:	b480      	push	{r7}
 801c94a:	b089      	sub	sp, #36	@ 0x24
 801c94c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801c94e:	4bb3      	ldr	r3, [pc, #716]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c950:	691b      	ldr	r3, [r3, #16]
 801c952:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801c956:	2b18      	cmp	r3, #24
 801c958:	f200 8155 	bhi.w	801cc06 <HAL_RCC_GetSysClockFreq+0x2be>
 801c95c:	a201      	add	r2, pc, #4	@ (adr r2, 801c964 <HAL_RCC_GetSysClockFreq+0x1c>)
 801c95e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c962:	bf00      	nop
 801c964:	0801c9c9 	.word	0x0801c9c9
 801c968:	0801cc07 	.word	0x0801cc07
 801c96c:	0801cc07 	.word	0x0801cc07
 801c970:	0801cc07 	.word	0x0801cc07
 801c974:	0801cc07 	.word	0x0801cc07
 801c978:	0801cc07 	.word	0x0801cc07
 801c97c:	0801cc07 	.word	0x0801cc07
 801c980:	0801cc07 	.word	0x0801cc07
 801c984:	0801c9ef 	.word	0x0801c9ef
 801c988:	0801cc07 	.word	0x0801cc07
 801c98c:	0801cc07 	.word	0x0801cc07
 801c990:	0801cc07 	.word	0x0801cc07
 801c994:	0801cc07 	.word	0x0801cc07
 801c998:	0801cc07 	.word	0x0801cc07
 801c99c:	0801cc07 	.word	0x0801cc07
 801c9a0:	0801cc07 	.word	0x0801cc07
 801c9a4:	0801c9f5 	.word	0x0801c9f5
 801c9a8:	0801cc07 	.word	0x0801cc07
 801c9ac:	0801cc07 	.word	0x0801cc07
 801c9b0:	0801cc07 	.word	0x0801cc07
 801c9b4:	0801cc07 	.word	0x0801cc07
 801c9b8:	0801cc07 	.word	0x0801cc07
 801c9bc:	0801cc07 	.word	0x0801cc07
 801c9c0:	0801cc07 	.word	0x0801cc07
 801c9c4:	0801c9fb 	.word	0x0801c9fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801c9c8:	4b94      	ldr	r3, [pc, #592]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c9ca:	681b      	ldr	r3, [r3, #0]
 801c9cc:	f003 0320 	and.w	r3, r3, #32
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d009      	beq.n	801c9e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c9d4:	4b91      	ldr	r3, [pc, #580]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	08db      	lsrs	r3, r3, #3
 801c9da:	f003 0303 	and.w	r3, r3, #3
 801c9de:	4a90      	ldr	r2, [pc, #576]	@ (801cc20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c9e0:	fa22 f303 	lsr.w	r3, r2, r3
 801c9e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801c9e6:	e111      	b.n	801cc0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801c9e8:	4b8d      	ldr	r3, [pc, #564]	@ (801cc20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801c9ea:	61bb      	str	r3, [r7, #24]
      break;
 801c9ec:	e10e      	b.n	801cc0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801c9ee:	4b8d      	ldr	r3, [pc, #564]	@ (801cc24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801c9f0:	61bb      	str	r3, [r7, #24]
      break;
 801c9f2:	e10b      	b.n	801cc0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801c9f4:	4b8c      	ldr	r3, [pc, #560]	@ (801cc28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801c9f6:	61bb      	str	r3, [r7, #24]
      break;
 801c9f8:	e108      	b.n	801cc0c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801c9fa:	4b88      	ldr	r3, [pc, #544]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801c9fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c9fe:	f003 0303 	and.w	r3, r3, #3
 801ca02:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801ca04:	4b85      	ldr	r3, [pc, #532]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ca06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ca08:	091b      	lsrs	r3, r3, #4
 801ca0a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ca0e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801ca10:	4b82      	ldr	r3, [pc, #520]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ca12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ca14:	f003 0301 	and.w	r3, r3, #1
 801ca18:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801ca1a:	4b80      	ldr	r3, [pc, #512]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ca1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ca1e:	08db      	lsrs	r3, r3, #3
 801ca20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ca24:	68fa      	ldr	r2, [r7, #12]
 801ca26:	fb02 f303 	mul.w	r3, r2, r3
 801ca2a:	ee07 3a90 	vmov	s15, r3
 801ca2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ca32:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801ca36:	693b      	ldr	r3, [r7, #16]
 801ca38:	2b00      	cmp	r3, #0
 801ca3a:	f000 80e1 	beq.w	801cc00 <HAL_RCC_GetSysClockFreq+0x2b8>
 801ca3e:	697b      	ldr	r3, [r7, #20]
 801ca40:	2b02      	cmp	r3, #2
 801ca42:	f000 8083 	beq.w	801cb4c <HAL_RCC_GetSysClockFreq+0x204>
 801ca46:	697b      	ldr	r3, [r7, #20]
 801ca48:	2b02      	cmp	r3, #2
 801ca4a:	f200 80a1 	bhi.w	801cb90 <HAL_RCC_GetSysClockFreq+0x248>
 801ca4e:	697b      	ldr	r3, [r7, #20]
 801ca50:	2b00      	cmp	r3, #0
 801ca52:	d003      	beq.n	801ca5c <HAL_RCC_GetSysClockFreq+0x114>
 801ca54:	697b      	ldr	r3, [r7, #20]
 801ca56:	2b01      	cmp	r3, #1
 801ca58:	d056      	beq.n	801cb08 <HAL_RCC_GetSysClockFreq+0x1c0>
 801ca5a:	e099      	b.n	801cb90 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ca5c:	4b6f      	ldr	r3, [pc, #444]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ca5e:	681b      	ldr	r3, [r3, #0]
 801ca60:	f003 0320 	and.w	r3, r3, #32
 801ca64:	2b00      	cmp	r3, #0
 801ca66:	d02d      	beq.n	801cac4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ca68:	4b6c      	ldr	r3, [pc, #432]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ca6a:	681b      	ldr	r3, [r3, #0]
 801ca6c:	08db      	lsrs	r3, r3, #3
 801ca6e:	f003 0303 	and.w	r3, r3, #3
 801ca72:	4a6b      	ldr	r2, [pc, #428]	@ (801cc20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801ca74:	fa22 f303 	lsr.w	r3, r2, r3
 801ca78:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801ca7a:	687b      	ldr	r3, [r7, #4]
 801ca7c:	ee07 3a90 	vmov	s15, r3
 801ca80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801ca84:	693b      	ldr	r3, [r7, #16]
 801ca86:	ee07 3a90 	vmov	s15, r3
 801ca8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ca8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801ca92:	4b62      	ldr	r3, [pc, #392]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ca94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801ca96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801ca9a:	ee07 3a90 	vmov	s15, r3
 801ca9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801caa2:	ed97 6a02 	vldr	s12, [r7, #8]
 801caa6:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801cc2c <HAL_RCC_GetSysClockFreq+0x2e4>
 801caaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801caae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cab2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801caba:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cabe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801cac2:	e087      	b.n	801cbd4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801cac4:	693b      	ldr	r3, [r7, #16]
 801cac6:	ee07 3a90 	vmov	s15, r3
 801caca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cace:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801cc30 <HAL_RCC_GetSysClockFreq+0x2e8>
 801cad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cad6:	4b51      	ldr	r3, [pc, #324]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cade:	ee07 3a90 	vmov	s15, r3
 801cae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cae6:	ed97 6a02 	vldr	s12, [r7, #8]
 801caea:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801cc2c <HAL_RCC_GetSysClockFreq+0x2e4>
 801caee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801caf2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801caf6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cafa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cafe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cb02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801cb06:	e065      	b.n	801cbd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801cb08:	693b      	ldr	r3, [r7, #16]
 801cb0a:	ee07 3a90 	vmov	s15, r3
 801cb0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cb12:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801cc34 <HAL_RCC_GetSysClockFreq+0x2ec>
 801cb16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cb1a:	4b40      	ldr	r3, [pc, #256]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cb1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cb1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cb22:	ee07 3a90 	vmov	s15, r3
 801cb26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cb2a:	ed97 6a02 	vldr	s12, [r7, #8]
 801cb2e:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801cc2c <HAL_RCC_GetSysClockFreq+0x2e4>
 801cb32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cb36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cb3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cb3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cb42:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cb46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801cb4a:	e043      	b.n	801cbd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801cb4c:	693b      	ldr	r3, [r7, #16]
 801cb4e:	ee07 3a90 	vmov	s15, r3
 801cb52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cb56:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801cc38 <HAL_RCC_GetSysClockFreq+0x2f0>
 801cb5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cb5e:	4b2f      	ldr	r3, [pc, #188]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cb60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cb62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cb66:	ee07 3a90 	vmov	s15, r3
 801cb6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cb6e:	ed97 6a02 	vldr	s12, [r7, #8]
 801cb72:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801cc2c <HAL_RCC_GetSysClockFreq+0x2e4>
 801cb76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cb7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cb7e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cb82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cb86:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cb8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801cb8e:	e021      	b.n	801cbd4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801cb90:	693b      	ldr	r3, [r7, #16]
 801cb92:	ee07 3a90 	vmov	s15, r3
 801cb96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801cb9a:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801cc34 <HAL_RCC_GetSysClockFreq+0x2ec>
 801cb9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801cba2:	4b1e      	ldr	r3, [pc, #120]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801cbaa:	ee07 3a90 	vmov	s15, r3
 801cbae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801cbb2:	ed97 6a02 	vldr	s12, [r7, #8]
 801cbb6:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801cc2c <HAL_RCC_GetSysClockFreq+0x2e4>
 801cbba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801cbbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801cbc2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801cbc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801cbca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801cbce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801cbd2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801cbd4:	4b11      	ldr	r3, [pc, #68]	@ (801cc1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 801cbd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801cbd8:	0a5b      	lsrs	r3, r3, #9
 801cbda:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801cbde:	3301      	adds	r3, #1
 801cbe0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801cbe2:	683b      	ldr	r3, [r7, #0]
 801cbe4:	ee07 3a90 	vmov	s15, r3
 801cbe8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801cbec:	edd7 6a07 	vldr	s13, [r7, #28]
 801cbf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801cbf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801cbf8:	ee17 3a90 	vmov	r3, s15
 801cbfc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801cbfe:	e005      	b.n	801cc0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801cc00:	2300      	movs	r3, #0
 801cc02:	61bb      	str	r3, [r7, #24]
      break;
 801cc04:	e002      	b.n	801cc0c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801cc06:	4b07      	ldr	r3, [pc, #28]	@ (801cc24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801cc08:	61bb      	str	r3, [r7, #24]
      break;
 801cc0a:	bf00      	nop
  }

  return sysclockfreq;
 801cc0c:	69bb      	ldr	r3, [r7, #24]
}
 801cc0e:	4618      	mov	r0, r3
 801cc10:	3724      	adds	r7, #36	@ 0x24
 801cc12:	46bd      	mov	sp, r7
 801cc14:	f85d 7b04 	ldr.w	r7, [sp], #4
 801cc18:	4770      	bx	lr
 801cc1a:	bf00      	nop
 801cc1c:	58024400 	.word	0x58024400
 801cc20:	03d09000 	.word	0x03d09000
 801cc24:	003d0900 	.word	0x003d0900
 801cc28:	017d7840 	.word	0x017d7840
 801cc2c:	46000000 	.word	0x46000000
 801cc30:	4c742400 	.word	0x4c742400
 801cc34:	4a742400 	.word	0x4a742400
 801cc38:	4bbebc20 	.word	0x4bbebc20

0801cc3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801cc3c:	b580      	push	{r7, lr}
 801cc3e:	b082      	sub	sp, #8
 801cc40:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801cc42:	f7ff fe81 	bl	801c948 <HAL_RCC_GetSysClockFreq>
 801cc46:	4602      	mov	r2, r0
 801cc48:	4b10      	ldr	r3, [pc, #64]	@ (801cc8c <HAL_RCC_GetHCLKFreq+0x50>)
 801cc4a:	699b      	ldr	r3, [r3, #24]
 801cc4c:	0a1b      	lsrs	r3, r3, #8
 801cc4e:	f003 030f 	and.w	r3, r3, #15
 801cc52:	490f      	ldr	r1, [pc, #60]	@ (801cc90 <HAL_RCC_GetHCLKFreq+0x54>)
 801cc54:	5ccb      	ldrb	r3, [r1, r3]
 801cc56:	f003 031f 	and.w	r3, r3, #31
 801cc5a:	fa22 f303 	lsr.w	r3, r2, r3
 801cc5e:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801cc60:	4b0a      	ldr	r3, [pc, #40]	@ (801cc8c <HAL_RCC_GetHCLKFreq+0x50>)
 801cc62:	699b      	ldr	r3, [r3, #24]
 801cc64:	f003 030f 	and.w	r3, r3, #15
 801cc68:	4a09      	ldr	r2, [pc, #36]	@ (801cc90 <HAL_RCC_GetHCLKFreq+0x54>)
 801cc6a:	5cd3      	ldrb	r3, [r2, r3]
 801cc6c:	f003 031f 	and.w	r3, r3, #31
 801cc70:	687a      	ldr	r2, [r7, #4]
 801cc72:	fa22 f303 	lsr.w	r3, r2, r3
 801cc76:	4a07      	ldr	r2, [pc, #28]	@ (801cc94 <HAL_RCC_GetHCLKFreq+0x58>)
 801cc78:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801cc7a:	4a07      	ldr	r2, [pc, #28]	@ (801cc98 <HAL_RCC_GetHCLKFreq+0x5c>)
 801cc7c:	687b      	ldr	r3, [r7, #4]
 801cc7e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801cc80:	4b04      	ldr	r3, [pc, #16]	@ (801cc94 <HAL_RCC_GetHCLKFreq+0x58>)
 801cc82:	681b      	ldr	r3, [r3, #0]
}
 801cc84:	4618      	mov	r0, r3
 801cc86:	3708      	adds	r7, #8
 801cc88:	46bd      	mov	sp, r7
 801cc8a:	bd80      	pop	{r7, pc}
 801cc8c:	58024400 	.word	0x58024400
 801cc90:	080262d0 	.word	0x080262d0
 801cc94:	20000004 	.word	0x20000004
 801cc98:	20000000 	.word	0x20000000

0801cc9c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801cc9c:	b580      	push	{r7, lr}
 801cc9e:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801cca0:	f7ff ffcc 	bl	801cc3c <HAL_RCC_GetHCLKFreq>
 801cca4:	4602      	mov	r2, r0
 801cca6:	4b06      	ldr	r3, [pc, #24]	@ (801ccc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 801cca8:	69db      	ldr	r3, [r3, #28]
 801ccaa:	091b      	lsrs	r3, r3, #4
 801ccac:	f003 0307 	and.w	r3, r3, #7
 801ccb0:	4904      	ldr	r1, [pc, #16]	@ (801ccc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 801ccb2:	5ccb      	ldrb	r3, [r1, r3]
 801ccb4:	f003 031f 	and.w	r3, r3, #31
 801ccb8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801ccbc:	4618      	mov	r0, r3
 801ccbe:	bd80      	pop	{r7, pc}
 801ccc0:	58024400 	.word	0x58024400
 801ccc4:	080262d0 	.word	0x080262d0

0801ccc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801ccc8:	b580      	push	{r7, lr}
 801ccca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801cccc:	f7ff ffb6 	bl	801cc3c <HAL_RCC_GetHCLKFreq>
 801ccd0:	4602      	mov	r2, r0
 801ccd2:	4b06      	ldr	r3, [pc, #24]	@ (801ccec <HAL_RCC_GetPCLK2Freq+0x24>)
 801ccd4:	69db      	ldr	r3, [r3, #28]
 801ccd6:	0a1b      	lsrs	r3, r3, #8
 801ccd8:	f003 0307 	and.w	r3, r3, #7
 801ccdc:	4904      	ldr	r1, [pc, #16]	@ (801ccf0 <HAL_RCC_GetPCLK2Freq+0x28>)
 801ccde:	5ccb      	ldrb	r3, [r1, r3]
 801cce0:	f003 031f 	and.w	r3, r3, #31
 801cce4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801cce8:	4618      	mov	r0, r3
 801ccea:	bd80      	pop	{r7, pc}
 801ccec:	58024400 	.word	0x58024400
 801ccf0:	080262d0 	.word	0x080262d0

0801ccf4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801ccf4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801ccf8:	b0ca      	sub	sp, #296	@ 0x128
 801ccfa:	af00      	add	r7, sp, #0
 801ccfc:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801cd00:	2300      	movs	r3, #0
 801cd02:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801cd06:	2300      	movs	r3, #0
 801cd08:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801cd0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cd14:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801cd18:	2500      	movs	r5, #0
 801cd1a:	ea54 0305 	orrs.w	r3, r4, r5
 801cd1e:	d049      	beq.n	801cdb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801cd20:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd24:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cd26:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801cd2a:	d02f      	beq.n	801cd8c <HAL_RCCEx_PeriphCLKConfig+0x98>
 801cd2c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801cd30:	d828      	bhi.n	801cd84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801cd32:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801cd36:	d01a      	beq.n	801cd6e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801cd38:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801cd3c:	d822      	bhi.n	801cd84 <HAL_RCCEx_PeriphCLKConfig+0x90>
 801cd3e:	2b00      	cmp	r3, #0
 801cd40:	d003      	beq.n	801cd4a <HAL_RCCEx_PeriphCLKConfig+0x56>
 801cd42:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801cd46:	d007      	beq.n	801cd58 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801cd48:	e01c      	b.n	801cd84 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cd4a:	4bb8      	ldr	r3, [pc, #736]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cd4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cd4e:	4ab7      	ldr	r2, [pc, #732]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cd50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cd54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801cd56:	e01a      	b.n	801cd8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801cd58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd5c:	3308      	adds	r3, #8
 801cd5e:	2102      	movs	r1, #2
 801cd60:	4618      	mov	r0, r3
 801cd62:	f001 fc8f 	bl	801e684 <RCCEx_PLL2_Config>
 801cd66:	4603      	mov	r3, r0
 801cd68:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801cd6c:	e00f      	b.n	801cd8e <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801cd6e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cd72:	3328      	adds	r3, #40	@ 0x28
 801cd74:	2102      	movs	r1, #2
 801cd76:	4618      	mov	r0, r3
 801cd78:	f001 fd36 	bl	801e7e8 <RCCEx_PLL3_Config>
 801cd7c:	4603      	mov	r3, r0
 801cd7e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801cd82:	e004      	b.n	801cd8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801cd84:	2301      	movs	r3, #1
 801cd86:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cd8a:	e000      	b.n	801cd8e <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801cd8c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cd8e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cd92:	2b00      	cmp	r3, #0
 801cd94:	d10a      	bne.n	801cdac <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801cd96:	4ba5      	ldr	r3, [pc, #660]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cd98:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cd9a:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801cd9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cda2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801cda4:	4aa1      	ldr	r2, [pc, #644]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cda6:	430b      	orrs	r3, r1
 801cda8:	6513      	str	r3, [r2, #80]	@ 0x50
 801cdaa:	e003      	b.n	801cdb4 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cdac:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cdb0:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801cdb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cdb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cdbc:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801cdc0:	f04f 0900 	mov.w	r9, #0
 801cdc4:	ea58 0309 	orrs.w	r3, r8, r9
 801cdc8:	d047      	beq.n	801ce5a <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801cdca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cdce:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cdd0:	2b04      	cmp	r3, #4
 801cdd2:	d82a      	bhi.n	801ce2a <HAL_RCCEx_PeriphCLKConfig+0x136>
 801cdd4:	a201      	add	r2, pc, #4	@ (adr r2, 801cddc <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801cdd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801cdda:	bf00      	nop
 801cddc:	0801cdf1 	.word	0x0801cdf1
 801cde0:	0801cdff 	.word	0x0801cdff
 801cde4:	0801ce15 	.word	0x0801ce15
 801cde8:	0801ce33 	.word	0x0801ce33
 801cdec:	0801ce33 	.word	0x0801ce33
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cdf0:	4b8e      	ldr	r3, [pc, #568]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cdf2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cdf4:	4a8d      	ldr	r2, [pc, #564]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cdf6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cdfa:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cdfc:	e01a      	b.n	801ce34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cdfe:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce02:	3308      	adds	r3, #8
 801ce04:	2100      	movs	r1, #0
 801ce06:	4618      	mov	r0, r3
 801ce08:	f001 fc3c 	bl	801e684 <RCCEx_PLL2_Config>
 801ce0c:	4603      	mov	r3, r0
 801ce0e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801ce12:	e00f      	b.n	801ce34 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801ce14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce18:	3328      	adds	r3, #40	@ 0x28
 801ce1a:	2100      	movs	r1, #0
 801ce1c:	4618      	mov	r0, r3
 801ce1e:	f001 fce3 	bl	801e7e8 <RCCEx_PLL3_Config>
 801ce22:	4603      	mov	r3, r0
 801ce24:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801ce28:	e004      	b.n	801ce34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ce2a:	2301      	movs	r3, #1
 801ce2c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801ce30:	e000      	b.n	801ce34 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801ce32:	bf00      	nop
    }

    if (ret == HAL_OK)
 801ce34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ce38:	2b00      	cmp	r3, #0
 801ce3a:	d10a      	bne.n	801ce52 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801ce3c:	4b7b      	ldr	r3, [pc, #492]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ce3e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ce40:	f023 0107 	bic.w	r1, r3, #7
 801ce44:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ce4a:	4a78      	ldr	r2, [pc, #480]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ce4c:	430b      	orrs	r3, r1
 801ce4e:	6513      	str	r3, [r2, #80]	@ 0x50
 801ce50:	e003      	b.n	801ce5a <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801ce52:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801ce56:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801ce5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ce62:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801ce66:	f04f 0b00 	mov.w	fp, #0
 801ce6a:	ea5a 030b 	orrs.w	r3, sl, fp
 801ce6e:	d04c      	beq.n	801cf0a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801ce70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ce74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ce76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ce7a:	d030      	beq.n	801cede <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801ce7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ce80:	d829      	bhi.n	801ced6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801ce82:	2bc0      	cmp	r3, #192	@ 0xc0
 801ce84:	d02d      	beq.n	801cee2 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801ce86:	2bc0      	cmp	r3, #192	@ 0xc0
 801ce88:	d825      	bhi.n	801ced6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801ce8a:	2b80      	cmp	r3, #128	@ 0x80
 801ce8c:	d018      	beq.n	801cec0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801ce8e:	2b80      	cmp	r3, #128	@ 0x80
 801ce90:	d821      	bhi.n	801ced6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801ce92:	2b00      	cmp	r3, #0
 801ce94:	d002      	beq.n	801ce9c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801ce96:	2b40      	cmp	r3, #64	@ 0x40
 801ce98:	d007      	beq.n	801ceaa <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801ce9a:	e01c      	b.n	801ced6 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ce9c:	4b63      	ldr	r3, [pc, #396]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ce9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cea0:	4a62      	ldr	r2, [pc, #392]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cea2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cea6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801cea8:	e01c      	b.n	801cee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801ceaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ceae:	3308      	adds	r3, #8
 801ceb0:	2100      	movs	r1, #0
 801ceb2:	4618      	mov	r0, r3
 801ceb4:	f001 fbe6 	bl	801e684 <RCCEx_PLL2_Config>
 801ceb8:	4603      	mov	r3, r0
 801ceba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801cebe:	e011      	b.n	801cee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cec0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cec4:	3328      	adds	r3, #40	@ 0x28
 801cec6:	2100      	movs	r1, #0
 801cec8:	4618      	mov	r0, r3
 801ceca:	f001 fc8d 	bl	801e7e8 <RCCEx_PLL3_Config>
 801cece:	4603      	mov	r3, r0
 801ced0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801ced4:	e006      	b.n	801cee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801ced6:	2301      	movs	r3, #1
 801ced8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cedc:	e002      	b.n	801cee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801cede:	bf00      	nop
 801cee0:	e000      	b.n	801cee4 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801cee2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cee4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cee8:	2b00      	cmp	r3, #0
 801ceea:	d10a      	bne.n	801cf02 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801ceec:	4b4f      	ldr	r3, [pc, #316]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801ceee:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cef0:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801cef4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cef8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801cefa:	4a4c      	ldr	r2, [pc, #304]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cefc:	430b      	orrs	r3, r1
 801cefe:	6513      	str	r3, [r2, #80]	@ 0x50
 801cf00:	e003      	b.n	801cf0a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cf02:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cf06:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801cf0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cf12:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801cf16:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801cf1a:	2300      	movs	r3, #0
 801cf1c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801cf20:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801cf24:	460b      	mov	r3, r1
 801cf26:	4313      	orrs	r3, r2
 801cf28:	d053      	beq.n	801cfd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801cf2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf2e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801cf32:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cf36:	d035      	beq.n	801cfa4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801cf38:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cf3c:	d82e      	bhi.n	801cf9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801cf3e:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801cf42:	d031      	beq.n	801cfa8 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801cf44:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801cf48:	d828      	bhi.n	801cf9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801cf4a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801cf4e:	d01a      	beq.n	801cf86 <HAL_RCCEx_PeriphCLKConfig+0x292>
 801cf50:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801cf54:	d822      	bhi.n	801cf9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801cf56:	2b00      	cmp	r3, #0
 801cf58:	d003      	beq.n	801cf62 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801cf5a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801cf5e:	d007      	beq.n	801cf70 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801cf60:	e01c      	b.n	801cf9c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801cf62:	4b32      	ldr	r3, [pc, #200]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cf64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cf66:	4a31      	ldr	r2, [pc, #196]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cf68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801cf6c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cf6e:	e01c      	b.n	801cfaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801cf70:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf74:	3308      	adds	r3, #8
 801cf76:	2100      	movs	r1, #0
 801cf78:	4618      	mov	r0, r3
 801cf7a:	f001 fb83 	bl	801e684 <RCCEx_PLL2_Config>
 801cf7e:	4603      	mov	r3, r0
 801cf80:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801cf84:	e011      	b.n	801cfaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801cf86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cf8a:	3328      	adds	r3, #40	@ 0x28
 801cf8c:	2100      	movs	r1, #0
 801cf8e:	4618      	mov	r0, r3
 801cf90:	f001 fc2a 	bl	801e7e8 <RCCEx_PLL3_Config>
 801cf94:	4603      	mov	r3, r0
 801cf96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801cf9a:	e006      	b.n	801cfaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801cf9c:	2301      	movs	r3, #1
 801cf9e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801cfa2:	e002      	b.n	801cfaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801cfa4:	bf00      	nop
 801cfa6:	e000      	b.n	801cfaa <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801cfa8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801cfaa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cfae:	2b00      	cmp	r3, #0
 801cfb0:	d10b      	bne.n	801cfca <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801cfb2:	4b1e      	ldr	r3, [pc, #120]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cfb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cfb6:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801cfba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cfbe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801cfc2:	4a1a      	ldr	r2, [pc, #104]	@ (801d02c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801cfc4:	430b      	orrs	r3, r1
 801cfc6:	6593      	str	r3, [r2, #88]	@ 0x58
 801cfc8:	e003      	b.n	801cfd2 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801cfca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801cfce:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801cfd2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cfd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801cfda:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801cfde:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801cfe2:	2300      	movs	r3, #0
 801cfe4:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801cfe8:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801cfec:	460b      	mov	r3, r1
 801cfee:	4313      	orrs	r3, r2
 801cff0:	d056      	beq.n	801d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801cff2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801cff6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801cffa:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801cffe:	d038      	beq.n	801d072 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801d000:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801d004:	d831      	bhi.n	801d06a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d006:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d00a:	d034      	beq.n	801d076 <HAL_RCCEx_PeriphCLKConfig+0x382>
 801d00c:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801d010:	d82b      	bhi.n	801d06a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d012:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d016:	d01d      	beq.n	801d054 <HAL_RCCEx_PeriphCLKConfig+0x360>
 801d018:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d01c:	d825      	bhi.n	801d06a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d01e:	2b00      	cmp	r3, #0
 801d020:	d006      	beq.n	801d030 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801d022:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801d026:	d00a      	beq.n	801d03e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801d028:	e01f      	b.n	801d06a <HAL_RCCEx_PeriphCLKConfig+0x376>
 801d02a:	bf00      	nop
 801d02c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d030:	4ba2      	ldr	r3, [pc, #648]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d032:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d034:	4aa1      	ldr	r2, [pc, #644]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d036:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d03a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d03c:	e01c      	b.n	801d078 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d03e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d042:	3308      	adds	r3, #8
 801d044:	2100      	movs	r1, #0
 801d046:	4618      	mov	r0, r3
 801d048:	f001 fb1c 	bl	801e684 <RCCEx_PLL2_Config>
 801d04c:	4603      	mov	r3, r0
 801d04e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801d052:	e011      	b.n	801d078 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d054:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d058:	3328      	adds	r3, #40	@ 0x28
 801d05a:	2100      	movs	r1, #0
 801d05c:	4618      	mov	r0, r3
 801d05e:	f001 fbc3 	bl	801e7e8 <RCCEx_PLL3_Config>
 801d062:	4603      	mov	r3, r0
 801d064:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801d068:	e006      	b.n	801d078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801d06a:	2301      	movs	r3, #1
 801d06c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d070:	e002      	b.n	801d078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d072:	bf00      	nop
 801d074:	e000      	b.n	801d078 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801d076:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d078:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d07c:	2b00      	cmp	r3, #0
 801d07e:	d10b      	bne.n	801d098 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801d080:	4b8e      	ldr	r3, [pc, #568]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d082:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d084:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801d088:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d08c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801d090:	4a8a      	ldr	r2, [pc, #552]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d092:	430b      	orrs	r3, r1
 801d094:	6593      	str	r3, [r2, #88]	@ 0x58
 801d096:	e003      	b.n	801d0a0 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d098:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d09c:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801d0a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d0a8:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801d0ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801d0b0:	2300      	movs	r3, #0
 801d0b2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801d0b6:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801d0ba:	460b      	mov	r3, r1
 801d0bc:	4313      	orrs	r3, r2
 801d0be:	d03a      	beq.n	801d136 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801d0c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d0c6:	2b30      	cmp	r3, #48	@ 0x30
 801d0c8:	d01f      	beq.n	801d10a <HAL_RCCEx_PeriphCLKConfig+0x416>
 801d0ca:	2b30      	cmp	r3, #48	@ 0x30
 801d0cc:	d819      	bhi.n	801d102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d0ce:	2b20      	cmp	r3, #32
 801d0d0:	d00c      	beq.n	801d0ec <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801d0d2:	2b20      	cmp	r3, #32
 801d0d4:	d815      	bhi.n	801d102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	d019      	beq.n	801d10e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801d0da:	2b10      	cmp	r3, #16
 801d0dc:	d111      	bne.n	801d102 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d0de:	4b77      	ldr	r3, [pc, #476]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d0e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d0e2:	4a76      	ldr	r2, [pc, #472]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d0e4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d0e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d0ea:	e011      	b.n	801d110 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d0ec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d0f0:	3308      	adds	r3, #8
 801d0f2:	2102      	movs	r1, #2
 801d0f4:	4618      	mov	r0, r3
 801d0f6:	f001 fac5 	bl	801e684 <RCCEx_PLL2_Config>
 801d0fa:	4603      	mov	r3, r0
 801d0fc:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801d100:	e006      	b.n	801d110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d102:	2301      	movs	r3, #1
 801d104:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d108:	e002      	b.n	801d110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d10a:	bf00      	nop
 801d10c:	e000      	b.n	801d110 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801d10e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d110:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d114:	2b00      	cmp	r3, #0
 801d116:	d10a      	bne.n	801d12e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801d118:	4b68      	ldr	r3, [pc, #416]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d11a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d11c:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801d120:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d124:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d126:	4a65      	ldr	r2, [pc, #404]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d128:	430b      	orrs	r3, r1
 801d12a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d12c:	e003      	b.n	801d136 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d12e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d132:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801d136:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d13e:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801d142:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801d146:	2300      	movs	r3, #0
 801d148:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801d14c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801d150:	460b      	mov	r3, r1
 801d152:	4313      	orrs	r3, r2
 801d154:	d051      	beq.n	801d1fa <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801d156:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d15a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d15c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d160:	d035      	beq.n	801d1ce <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801d162:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801d166:	d82e      	bhi.n	801d1c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d168:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d16c:	d031      	beq.n	801d1d2 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801d16e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801d172:	d828      	bhi.n	801d1c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d174:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d178:	d01a      	beq.n	801d1b0 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801d17a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801d17e:	d822      	bhi.n	801d1c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801d180:	2b00      	cmp	r3, #0
 801d182:	d003      	beq.n	801d18c <HAL_RCCEx_PeriphCLKConfig+0x498>
 801d184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d188:	d007      	beq.n	801d19a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801d18a:	e01c      	b.n	801d1c6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d18c:	4b4b      	ldr	r3, [pc, #300]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d18e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d190:	4a4a      	ldr	r2, [pc, #296]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d192:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d196:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d198:	e01c      	b.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d19a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d19e:	3308      	adds	r3, #8
 801d1a0:	2100      	movs	r1, #0
 801d1a2:	4618      	mov	r0, r3
 801d1a4:	f001 fa6e 	bl	801e684 <RCCEx_PLL2_Config>
 801d1a8:	4603      	mov	r3, r0
 801d1aa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d1ae:	e011      	b.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801d1b0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1b4:	3328      	adds	r3, #40	@ 0x28
 801d1b6:	2100      	movs	r1, #0
 801d1b8:	4618      	mov	r0, r3
 801d1ba:	f001 fb15 	bl	801e7e8 <RCCEx_PLL3_Config>
 801d1be:	4603      	mov	r3, r0
 801d1c0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801d1c4:	e006      	b.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d1c6:	2301      	movs	r3, #1
 801d1c8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d1cc:	e002      	b.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d1ce:	bf00      	nop
 801d1d0:	e000      	b.n	801d1d4 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801d1d2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d1d4:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d1d8:	2b00      	cmp	r3, #0
 801d1da:	d10a      	bne.n	801d1f2 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801d1dc:	4b37      	ldr	r3, [pc, #220]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d1de:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d1e0:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801d1e4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801d1ea:	4a34      	ldr	r2, [pc, #208]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d1ec:	430b      	orrs	r3, r1
 801d1ee:	6513      	str	r3, [r2, #80]	@ 0x50
 801d1f0:	e003      	b.n	801d1fa <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d1f2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d1f6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801d1fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d1fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d202:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801d206:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801d20a:	2300      	movs	r3, #0
 801d20c:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801d210:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801d214:	460b      	mov	r3, r1
 801d216:	4313      	orrs	r3, r2
 801d218:	d056      	beq.n	801d2c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801d21a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d21e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d220:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d224:	d033      	beq.n	801d28e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801d226:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801d22a:	d82c      	bhi.n	801d286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d22c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d230:	d02f      	beq.n	801d292 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801d232:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801d236:	d826      	bhi.n	801d286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d238:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d23c:	d02b      	beq.n	801d296 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801d23e:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801d242:	d820      	bhi.n	801d286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d244:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d248:	d012      	beq.n	801d270 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801d24a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d24e:	d81a      	bhi.n	801d286 <HAL_RCCEx_PeriphCLKConfig+0x592>
 801d250:	2b00      	cmp	r3, #0
 801d252:	d022      	beq.n	801d29a <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801d254:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d258:	d115      	bne.n	801d286 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d25a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d25e:	3308      	adds	r3, #8
 801d260:	2101      	movs	r1, #1
 801d262:	4618      	mov	r0, r3
 801d264:	f001 fa0e 	bl	801e684 <RCCEx_PLL2_Config>
 801d268:	4603      	mov	r3, r0
 801d26a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d26e:	e015      	b.n	801d29c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d270:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d274:	3328      	adds	r3, #40	@ 0x28
 801d276:	2101      	movs	r1, #1
 801d278:	4618      	mov	r0, r3
 801d27a:	f001 fab5 	bl	801e7e8 <RCCEx_PLL3_Config>
 801d27e:	4603      	mov	r3, r0
 801d280:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801d284:	e00a      	b.n	801d29c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d286:	2301      	movs	r3, #1
 801d288:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d28c:	e006      	b.n	801d29c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d28e:	bf00      	nop
 801d290:	e004      	b.n	801d29c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d292:	bf00      	nop
 801d294:	e002      	b.n	801d29c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d296:	bf00      	nop
 801d298:	e000      	b.n	801d29c <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801d29a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d29c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d2a0:	2b00      	cmp	r3, #0
 801d2a2:	d10d      	bne.n	801d2c0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801d2a4:	4b05      	ldr	r3, [pc, #20]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d2a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d2a8:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801d2ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2b0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801d2b2:	4a02      	ldr	r2, [pc, #8]	@ (801d2bc <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801d2b4:	430b      	orrs	r3, r1
 801d2b6:	6513      	str	r3, [r2, #80]	@ 0x50
 801d2b8:	e006      	b.n	801d2c8 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801d2ba:	bf00      	nop
 801d2bc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d2c0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d2c4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801d2c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d2d0:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801d2d4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801d2d8:	2300      	movs	r3, #0
 801d2da:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801d2de:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801d2e2:	460b      	mov	r3, r1
 801d2e4:	4313      	orrs	r3, r2
 801d2e6:	d055      	beq.n	801d394 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801d2e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d2ec:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d2f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d2f4:	d033      	beq.n	801d35e <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801d2f6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d2fa:	d82c      	bhi.n	801d356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d300:	d02f      	beq.n	801d362 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801d302:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d306:	d826      	bhi.n	801d356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d308:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d30c:	d02b      	beq.n	801d366 <HAL_RCCEx_PeriphCLKConfig+0x672>
 801d30e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d312:	d820      	bhi.n	801d356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d314:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d318:	d012      	beq.n	801d340 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801d31a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d31e:	d81a      	bhi.n	801d356 <HAL_RCCEx_PeriphCLKConfig+0x662>
 801d320:	2b00      	cmp	r3, #0
 801d322:	d022      	beq.n	801d36a <HAL_RCCEx_PeriphCLKConfig+0x676>
 801d324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d328:	d115      	bne.n	801d356 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d32a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d32e:	3308      	adds	r3, #8
 801d330:	2101      	movs	r1, #1
 801d332:	4618      	mov	r0, r3
 801d334:	f001 f9a6 	bl	801e684 <RCCEx_PLL2_Config>
 801d338:	4603      	mov	r3, r0
 801d33a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d33e:	e015      	b.n	801d36c <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d340:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d344:	3328      	adds	r3, #40	@ 0x28
 801d346:	2101      	movs	r1, #1
 801d348:	4618      	mov	r0, r3
 801d34a:	f001 fa4d 	bl	801e7e8 <RCCEx_PLL3_Config>
 801d34e:	4603      	mov	r3, r0
 801d350:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801d354:	e00a      	b.n	801d36c <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801d356:	2301      	movs	r3, #1
 801d358:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d35c:	e006      	b.n	801d36c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d35e:	bf00      	nop
 801d360:	e004      	b.n	801d36c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d362:	bf00      	nop
 801d364:	e002      	b.n	801d36c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d366:	bf00      	nop
 801d368:	e000      	b.n	801d36c <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801d36a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d36c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d370:	2b00      	cmp	r3, #0
 801d372:	d10b      	bne.n	801d38c <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801d374:	4ba3      	ldr	r3, [pc, #652]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d376:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d378:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801d37c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d380:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801d384:	4a9f      	ldr	r2, [pc, #636]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d386:	430b      	orrs	r3, r1
 801d388:	6593      	str	r3, [r2, #88]	@ 0x58
 801d38a:	e003      	b.n	801d394 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d38c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d390:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801d394:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d398:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d39c:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801d3a0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801d3a4:	2300      	movs	r3, #0
 801d3a6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801d3aa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801d3ae:	460b      	mov	r3, r1
 801d3b0:	4313      	orrs	r3, r2
 801d3b2:	d037      	beq.n	801d424 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801d3b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3b8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d3ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d3be:	d00e      	beq.n	801d3de <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 801d3c0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d3c4:	d816      	bhi.n	801d3f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
 801d3c6:	2b00      	cmp	r3, #0
 801d3c8:	d018      	beq.n	801d3fc <HAL_RCCEx_PeriphCLKConfig+0x708>
 801d3ca:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d3ce:	d111      	bne.n	801d3f4 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d3d0:	4b8c      	ldr	r3, [pc, #560]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d3d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d3d4:	4a8b      	ldr	r2, [pc, #556]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d3d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d3da:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d3dc:	e00f      	b.n	801d3fe <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d3de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d3e2:	3308      	adds	r3, #8
 801d3e4:	2101      	movs	r1, #1
 801d3e6:	4618      	mov	r0, r3
 801d3e8:	f001 f94c 	bl	801e684 <RCCEx_PLL2_Config>
 801d3ec:	4603      	mov	r3, r0
 801d3ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801d3f2:	e004      	b.n	801d3fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d3f4:	2301      	movs	r3, #1
 801d3f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d3fa:	e000      	b.n	801d3fe <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 801d3fc:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d3fe:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d402:	2b00      	cmp	r3, #0
 801d404:	d10a      	bne.n	801d41c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801d406:	4b7f      	ldr	r3, [pc, #508]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d408:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d40a:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801d40e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d412:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d414:	4a7b      	ldr	r2, [pc, #492]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d416:	430b      	orrs	r3, r1
 801d418:	6513      	str	r3, [r2, #80]	@ 0x50
 801d41a:	e003      	b.n	801d424 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d41c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d420:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801d424:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d42c:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801d430:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801d434:	2300      	movs	r3, #0
 801d436:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801d43a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801d43e:	460b      	mov	r3, r1
 801d440:	4313      	orrs	r3, r2
 801d442:	d039      	beq.n	801d4b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801d444:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d448:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d44a:	2b03      	cmp	r3, #3
 801d44c:	d81c      	bhi.n	801d488 <HAL_RCCEx_PeriphCLKConfig+0x794>
 801d44e:	a201      	add	r2, pc, #4	@ (adr r2, 801d454 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 801d450:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d454:	0801d491 	.word	0x0801d491
 801d458:	0801d465 	.word	0x0801d465
 801d45c:	0801d473 	.word	0x0801d473
 801d460:	0801d491 	.word	0x0801d491
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801d464:	4b67      	ldr	r3, [pc, #412]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d468:	4a66      	ldr	r2, [pc, #408]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d46a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801d46e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d470:	e00f      	b.n	801d492 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801d472:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d476:	3308      	adds	r3, #8
 801d478:	2102      	movs	r1, #2
 801d47a:	4618      	mov	r0, r3
 801d47c:	f001 f902 	bl	801e684 <RCCEx_PLL2_Config>
 801d480:	4603      	mov	r3, r0
 801d482:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 801d486:	e004      	b.n	801d492 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801d488:	2301      	movs	r3, #1
 801d48a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d48e:	e000      	b.n	801d492 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 801d490:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d492:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d496:	2b00      	cmp	r3, #0
 801d498:	d10a      	bne.n	801d4b0 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801d49a:	4b5a      	ldr	r3, [pc, #360]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d49c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d49e:	f023 0103 	bic.w	r1, r3, #3
 801d4a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801d4a8:	4a56      	ldr	r2, [pc, #344]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d4aa:	430b      	orrs	r3, r1
 801d4ac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801d4ae:	e003      	b.n	801d4b8 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d4b0:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d4b4:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801d4b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d4bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d4c0:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801d4c4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801d4c8:	2300      	movs	r3, #0
 801d4ca:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801d4ce:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801d4d2:	460b      	mov	r3, r1
 801d4d4:	4313      	orrs	r3, r2
 801d4d6:	f000 809f 	beq.w	801d618 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801d4da:	4b4b      	ldr	r3, [pc, #300]	@ (801d608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d4dc:	681b      	ldr	r3, [r3, #0]
 801d4de:	4a4a      	ldr	r2, [pc, #296]	@ (801d608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d4e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801d4e4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801d4e6:	f7fc f807 	bl	80194f8 <HAL_GetTick>
 801d4ea:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d4ee:	e00b      	b.n	801d508 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801d4f0:	f7fc f802 	bl	80194f8 <HAL_GetTick>
 801d4f4:	4602      	mov	r2, r0
 801d4f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801d4fa:	1ad3      	subs	r3, r2, r3
 801d4fc:	2b64      	cmp	r3, #100	@ 0x64
 801d4fe:	d903      	bls.n	801d508 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 801d500:	2303      	movs	r3, #3
 801d502:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d506:	e005      	b.n	801d514 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801d508:	4b3f      	ldr	r3, [pc, #252]	@ (801d608 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 801d50a:	681b      	ldr	r3, [r3, #0]
 801d50c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d510:	2b00      	cmp	r3, #0
 801d512:	d0ed      	beq.n	801d4f0 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 801d514:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d518:	2b00      	cmp	r3, #0
 801d51a:	d179      	bne.n	801d610 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801d51c:	4b39      	ldr	r3, [pc, #228]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d51e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801d520:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d524:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d528:	4053      	eors	r3, r2
 801d52a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d52e:	2b00      	cmp	r3, #0
 801d530:	d015      	beq.n	801d55e <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801d532:	4b34      	ldr	r3, [pc, #208]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d534:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d536:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801d53a:	f8c7 311c 	str.w	r3, [r7, #284]	@ 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801d53e:	4b31      	ldr	r3, [pc, #196]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d540:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d542:	4a30      	ldr	r2, [pc, #192]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d544:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801d548:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801d54a:	4b2e      	ldr	r3, [pc, #184]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d54c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d54e:	4a2d      	ldr	r2, [pc, #180]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d550:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801d554:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801d556:	4a2b      	ldr	r2, [pc, #172]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d558:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801d55c:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801d55e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d562:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d566:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d56a:	d118      	bne.n	801d59e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801d56c:	f7fb ffc4 	bl	80194f8 <HAL_GetTick>
 801d570:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d574:	e00d      	b.n	801d592 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801d576:	f7fb ffbf 	bl	80194f8 <HAL_GetTick>
 801d57a:	4602      	mov	r2, r0
 801d57c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 801d580:	1ad2      	subs	r2, r2, r3
 801d582:	f241 3388 	movw	r3, #5000	@ 0x1388
 801d586:	429a      	cmp	r2, r3
 801d588:	d903      	bls.n	801d592 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 801d58a:	2303      	movs	r3, #3
 801d58c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
            break;
 801d590:	e005      	b.n	801d59e <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801d592:	4b1c      	ldr	r3, [pc, #112]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d594:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801d596:	f003 0302 	and.w	r3, r3, #2
 801d59a:	2b00      	cmp	r3, #0
 801d59c:	d0eb      	beq.n	801d576 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 801d59e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d5a2:	2b00      	cmp	r3, #0
 801d5a4:	d129      	bne.n	801d5fa <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801d5a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5aa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d5ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801d5b2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801d5b6:	d10e      	bne.n	801d5d6 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 801d5b8:	4b12      	ldr	r3, [pc, #72]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d5ba:	691b      	ldr	r3, [r3, #16]
 801d5bc:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801d5c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5c4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d5c8:	091a      	lsrs	r2, r3, #4
 801d5ca:	4b10      	ldr	r3, [pc, #64]	@ (801d60c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 801d5cc:	4013      	ands	r3, r2
 801d5ce:	4a0d      	ldr	r2, [pc, #52]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d5d0:	430b      	orrs	r3, r1
 801d5d2:	6113      	str	r3, [r2, #16]
 801d5d4:	e005      	b.n	801d5e2 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 801d5d6:	4b0b      	ldr	r3, [pc, #44]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d5d8:	691b      	ldr	r3, [r3, #16]
 801d5da:	4a0a      	ldr	r2, [pc, #40]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d5dc:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801d5e0:	6113      	str	r3, [r2, #16]
 801d5e2:	4b08      	ldr	r3, [pc, #32]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d5e4:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801d5e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d5ea:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801d5ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801d5f2:	4a04      	ldr	r2, [pc, #16]	@ (801d604 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 801d5f4:	430b      	orrs	r3, r1
 801d5f6:	6713      	str	r3, [r2, #112]	@ 0x70
 801d5f8:	e00e      	b.n	801d618 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801d5fa:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d5fe:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
 801d602:	e009      	b.n	801d618 <HAL_RCCEx_PeriphCLKConfig+0x924>
 801d604:	58024400 	.word	0x58024400
 801d608:	58024800 	.word	0x58024800
 801d60c:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d610:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d614:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801d618:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d620:	f002 0301 	and.w	r3, r2, #1
 801d624:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801d628:	2300      	movs	r3, #0
 801d62a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801d62e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801d632:	460b      	mov	r3, r1
 801d634:	4313      	orrs	r3, r2
 801d636:	f000 8089 	beq.w	801d74c <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801d63a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d63e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d640:	2b28      	cmp	r3, #40	@ 0x28
 801d642:	d86b      	bhi.n	801d71c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 801d644:	a201      	add	r2, pc, #4	@ (adr r2, 801d64c <HAL_RCCEx_PeriphCLKConfig+0x958>)
 801d646:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d64a:	bf00      	nop
 801d64c:	0801d725 	.word	0x0801d725
 801d650:	0801d71d 	.word	0x0801d71d
 801d654:	0801d71d 	.word	0x0801d71d
 801d658:	0801d71d 	.word	0x0801d71d
 801d65c:	0801d71d 	.word	0x0801d71d
 801d660:	0801d71d 	.word	0x0801d71d
 801d664:	0801d71d 	.word	0x0801d71d
 801d668:	0801d71d 	.word	0x0801d71d
 801d66c:	0801d6f1 	.word	0x0801d6f1
 801d670:	0801d71d 	.word	0x0801d71d
 801d674:	0801d71d 	.word	0x0801d71d
 801d678:	0801d71d 	.word	0x0801d71d
 801d67c:	0801d71d 	.word	0x0801d71d
 801d680:	0801d71d 	.word	0x0801d71d
 801d684:	0801d71d 	.word	0x0801d71d
 801d688:	0801d71d 	.word	0x0801d71d
 801d68c:	0801d707 	.word	0x0801d707
 801d690:	0801d71d 	.word	0x0801d71d
 801d694:	0801d71d 	.word	0x0801d71d
 801d698:	0801d71d 	.word	0x0801d71d
 801d69c:	0801d71d 	.word	0x0801d71d
 801d6a0:	0801d71d 	.word	0x0801d71d
 801d6a4:	0801d71d 	.word	0x0801d71d
 801d6a8:	0801d71d 	.word	0x0801d71d
 801d6ac:	0801d725 	.word	0x0801d725
 801d6b0:	0801d71d 	.word	0x0801d71d
 801d6b4:	0801d71d 	.word	0x0801d71d
 801d6b8:	0801d71d 	.word	0x0801d71d
 801d6bc:	0801d71d 	.word	0x0801d71d
 801d6c0:	0801d71d 	.word	0x0801d71d
 801d6c4:	0801d71d 	.word	0x0801d71d
 801d6c8:	0801d71d 	.word	0x0801d71d
 801d6cc:	0801d725 	.word	0x0801d725
 801d6d0:	0801d71d 	.word	0x0801d71d
 801d6d4:	0801d71d 	.word	0x0801d71d
 801d6d8:	0801d71d 	.word	0x0801d71d
 801d6dc:	0801d71d 	.word	0x0801d71d
 801d6e0:	0801d71d 	.word	0x0801d71d
 801d6e4:	0801d71d 	.word	0x0801d71d
 801d6e8:	0801d71d 	.word	0x0801d71d
 801d6ec:	0801d725 	.word	0x0801d725
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d6f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d6f4:	3308      	adds	r3, #8
 801d6f6:	2101      	movs	r1, #1
 801d6f8:	4618      	mov	r0, r3
 801d6fa:	f000 ffc3 	bl	801e684 <RCCEx_PLL2_Config>
 801d6fe:	4603      	mov	r3, r0
 801d700:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801d704:	e00f      	b.n	801d726 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d706:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d70a:	3328      	adds	r3, #40	@ 0x28
 801d70c:	2101      	movs	r1, #1
 801d70e:	4618      	mov	r0, r3
 801d710:	f001 f86a 	bl	801e7e8 <RCCEx_PLL3_Config>
 801d714:	4603      	mov	r3, r0
 801d716:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801d71a:	e004      	b.n	801d726 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d71c:	2301      	movs	r3, #1
 801d71e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d722:	e000      	b.n	801d726 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 801d724:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d726:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d72a:	2b00      	cmp	r3, #0
 801d72c:	d10a      	bne.n	801d744 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801d72e:	4bbf      	ldr	r3, [pc, #764]	@ (801da2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d730:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d732:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801d736:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d73a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801d73c:	4abb      	ldr	r2, [pc, #748]	@ (801da2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d73e:	430b      	orrs	r3, r1
 801d740:	6553      	str	r3, [r2, #84]	@ 0x54
 801d742:	e003      	b.n	801d74c <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d744:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d748:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801d74c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d750:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d754:	f002 0302 	and.w	r3, r2, #2
 801d758:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801d75c:	2300      	movs	r3, #0
 801d75e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801d762:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801d766:	460b      	mov	r3, r1
 801d768:	4313      	orrs	r3, r2
 801d76a:	d041      	beq.n	801d7f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801d76c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d770:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d772:	2b05      	cmp	r3, #5
 801d774:	d824      	bhi.n	801d7c0 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 801d776:	a201      	add	r2, pc, #4	@ (adr r2, 801d77c <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 801d778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d77c:	0801d7c9 	.word	0x0801d7c9
 801d780:	0801d795 	.word	0x0801d795
 801d784:	0801d7ab 	.word	0x0801d7ab
 801d788:	0801d7c9 	.word	0x0801d7c9
 801d78c:	0801d7c9 	.word	0x0801d7c9
 801d790:	0801d7c9 	.word	0x0801d7c9
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d794:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d798:	3308      	adds	r3, #8
 801d79a:	2101      	movs	r1, #1
 801d79c:	4618      	mov	r0, r3
 801d79e:	f000 ff71 	bl	801e684 <RCCEx_PLL2_Config>
 801d7a2:	4603      	mov	r3, r0
 801d7a4:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801d7a8:	e00f      	b.n	801d7ca <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d7aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7ae:	3328      	adds	r3, #40	@ 0x28
 801d7b0:	2101      	movs	r1, #1
 801d7b2:	4618      	mov	r0, r3
 801d7b4:	f001 f818 	bl	801e7e8 <RCCEx_PLL3_Config>
 801d7b8:	4603      	mov	r3, r0
 801d7ba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801d7be:	e004      	b.n	801d7ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d7c0:	2301      	movs	r3, #1
 801d7c2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d7c6:	e000      	b.n	801d7ca <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 801d7c8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d7ca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7ce:	2b00      	cmp	r3, #0
 801d7d0:	d10a      	bne.n	801d7e8 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801d7d2:	4b96      	ldr	r3, [pc, #600]	@ (801da2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d7d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d7d6:	f023 0107 	bic.w	r1, r3, #7
 801d7da:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7de:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801d7e0:	4a92      	ldr	r2, [pc, #584]	@ (801da2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d7e2:	430b      	orrs	r3, r1
 801d7e4:	6553      	str	r3, [r2, #84]	@ 0x54
 801d7e6:	e003      	b.n	801d7f0 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d7e8:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d7ec:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801d7f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d7f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d7f8:	f002 0304 	and.w	r3, r2, #4
 801d7fc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801d800:	2300      	movs	r3, #0
 801d802:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801d806:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801d80a:	460b      	mov	r3, r1
 801d80c:	4313      	orrs	r3, r2
 801d80e:	d044      	beq.n	801d89a <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801d810:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d818:	2b05      	cmp	r3, #5
 801d81a:	d825      	bhi.n	801d868 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 801d81c:	a201      	add	r2, pc, #4	@ (adr r2, 801d824 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 801d81e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d822:	bf00      	nop
 801d824:	0801d871 	.word	0x0801d871
 801d828:	0801d83d 	.word	0x0801d83d
 801d82c:	0801d853 	.word	0x0801d853
 801d830:	0801d871 	.word	0x0801d871
 801d834:	0801d871 	.word	0x0801d871
 801d838:	0801d871 	.word	0x0801d871
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801d83c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d840:	3308      	adds	r3, #8
 801d842:	2101      	movs	r1, #1
 801d844:	4618      	mov	r0, r3
 801d846:	f000 ff1d 	bl	801e684 <RCCEx_PLL2_Config>
 801d84a:	4603      	mov	r3, r0
 801d84c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801d850:	e00f      	b.n	801d872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801d852:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d856:	3328      	adds	r3, #40	@ 0x28
 801d858:	2101      	movs	r1, #1
 801d85a:	4618      	mov	r0, r3
 801d85c:	f000 ffc4 	bl	801e7e8 <RCCEx_PLL3_Config>
 801d860:	4603      	mov	r3, r0
 801d862:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801d866:	e004      	b.n	801d872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d868:	2301      	movs	r3, #1
 801d86a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d86e:	e000      	b.n	801d872 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 801d870:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d872:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d876:	2b00      	cmp	r3, #0
 801d878:	d10b      	bne.n	801d892 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801d87a:	4b6c      	ldr	r3, [pc, #432]	@ (801da2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d87c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d87e:	f023 0107 	bic.w	r1, r3, #7
 801d882:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d886:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801d88a:	4a68      	ldr	r2, [pc, #416]	@ (801da2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d88c:	430b      	orrs	r3, r1
 801d88e:	6593      	str	r3, [r2, #88]	@ 0x58
 801d890:	e003      	b.n	801d89a <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d892:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d896:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801d89a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d8a2:	f002 0320 	and.w	r3, r2, #32
 801d8a6:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801d8aa:	2300      	movs	r3, #0
 801d8ac:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801d8b0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801d8b4:	460b      	mov	r3, r1
 801d8b6:	4313      	orrs	r3, r2
 801d8b8:	d055      	beq.n	801d966 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801d8ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d8be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d8c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d8c6:	d033      	beq.n	801d930 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 801d8c8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d8cc:	d82c      	bhi.n	801d928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d8ce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d8d2:	d02f      	beq.n	801d934 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 801d8d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d8d8:	d826      	bhi.n	801d928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d8da:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d8de:	d02b      	beq.n	801d938 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 801d8e0:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d8e4:	d820      	bhi.n	801d928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d8e6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d8ea:	d012      	beq.n	801d912 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 801d8ec:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d8f0:	d81a      	bhi.n	801d928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	d022      	beq.n	801d93c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 801d8f6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d8fa:	d115      	bne.n	801d928 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d8fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d900:	3308      	adds	r3, #8
 801d902:	2100      	movs	r1, #0
 801d904:	4618      	mov	r0, r3
 801d906:	f000 febd 	bl	801e684 <RCCEx_PLL2_Config>
 801d90a:	4603      	mov	r3, r0
 801d90c:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801d910:	e015      	b.n	801d93e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d912:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d916:	3328      	adds	r3, #40	@ 0x28
 801d918:	2102      	movs	r1, #2
 801d91a:	4618      	mov	r0, r3
 801d91c:	f000 ff64 	bl	801e7e8 <RCCEx_PLL3_Config>
 801d920:	4603      	mov	r3, r0
 801d922:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801d926:	e00a      	b.n	801d93e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d928:	2301      	movs	r3, #1
 801d92a:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d92e:	e006      	b.n	801d93e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d930:	bf00      	nop
 801d932:	e004      	b.n	801d93e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d934:	bf00      	nop
 801d936:	e002      	b.n	801d93e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d938:	bf00      	nop
 801d93a:	e000      	b.n	801d93e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 801d93c:	bf00      	nop
    }

    if (ret == HAL_OK)
 801d93e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d942:	2b00      	cmp	r3, #0
 801d944:	d10b      	bne.n	801d95e <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801d946:	4b39      	ldr	r3, [pc, #228]	@ (801da2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d948:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801d94a:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801d94e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d952:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801d956:	4a35      	ldr	r2, [pc, #212]	@ (801da2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801d958:	430b      	orrs	r3, r1
 801d95a:	6553      	str	r3, [r2, #84]	@ 0x54
 801d95c:	e003      	b.n	801d966 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801d95e:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801d962:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801d966:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d96a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801d96e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801d972:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801d976:	2300      	movs	r3, #0
 801d978:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801d97c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801d980:	460b      	mov	r3, r1
 801d982:	4313      	orrs	r3, r2
 801d984:	d058      	beq.n	801da38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801d986:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d98a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801d98e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801d992:	d033      	beq.n	801d9fc <HAL_RCCEx_PeriphCLKConfig+0xd08>
 801d994:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801d998:	d82c      	bhi.n	801d9f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d99a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d99e:	d02f      	beq.n	801da00 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 801d9a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801d9a4:	d826      	bhi.n	801d9f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d9a6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801d9aa:	d02b      	beq.n	801da04 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 801d9ac:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801d9b0:	d820      	bhi.n	801d9f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d9b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801d9b6:	d012      	beq.n	801d9de <HAL_RCCEx_PeriphCLKConfig+0xcea>
 801d9b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801d9bc:	d81a      	bhi.n	801d9f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	d022      	beq.n	801da08 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 801d9c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d9c6:	d115      	bne.n	801d9f4 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801d9c8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9cc:	3308      	adds	r3, #8
 801d9ce:	2100      	movs	r1, #0
 801d9d0:	4618      	mov	r0, r3
 801d9d2:	f000 fe57 	bl	801e684 <RCCEx_PLL2_Config>
 801d9d6:	4603      	mov	r3, r0
 801d9d8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801d9dc:	e015      	b.n	801da0a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801d9de:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801d9e2:	3328      	adds	r3, #40	@ 0x28
 801d9e4:	2102      	movs	r1, #2
 801d9e6:	4618      	mov	r0, r3
 801d9e8:	f000 fefe 	bl	801e7e8 <RCCEx_PLL3_Config>
 801d9ec:	4603      	mov	r3, r0
 801d9ee:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801d9f2:	e00a      	b.n	801da0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801d9f4:	2301      	movs	r3, #1
 801d9f6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801d9fa:	e006      	b.n	801da0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801d9fc:	bf00      	nop
 801d9fe:	e004      	b.n	801da0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801da00:	bf00      	nop
 801da02:	e002      	b.n	801da0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801da04:	bf00      	nop
 801da06:	e000      	b.n	801da0a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 801da08:	bf00      	nop
    }

    if (ret == HAL_OK)
 801da0a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da0e:	2b00      	cmp	r3, #0
 801da10:	d10e      	bne.n	801da30 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801da12:	4b06      	ldr	r3, [pc, #24]	@ (801da2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801da14:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801da16:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801da1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da1e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801da22:	4a02      	ldr	r2, [pc, #8]	@ (801da2c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 801da24:	430b      	orrs	r3, r1
 801da26:	6593      	str	r3, [r2, #88]	@ 0x58
 801da28:	e006      	b.n	801da38 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 801da2a:	bf00      	nop
 801da2c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801da30:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801da34:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801da38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801da40:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801da44:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801da48:	2300      	movs	r3, #0
 801da4a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801da4e:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801da52:	460b      	mov	r3, r1
 801da54:	4313      	orrs	r3, r2
 801da56:	d055      	beq.n	801db04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801da58:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da5c:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801da60:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801da64:	d033      	beq.n	801dace <HAL_RCCEx_PeriphCLKConfig+0xdda>
 801da66:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801da6a:	d82c      	bhi.n	801dac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801da6c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801da70:	d02f      	beq.n	801dad2 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 801da72:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801da76:	d826      	bhi.n	801dac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801da78:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801da7c:	d02b      	beq.n	801dad6 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 801da7e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801da82:	d820      	bhi.n	801dac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801da84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801da88:	d012      	beq.n	801dab0 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 801da8a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801da8e:	d81a      	bhi.n	801dac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 801da90:	2b00      	cmp	r3, #0
 801da92:	d022      	beq.n	801dada <HAL_RCCEx_PeriphCLKConfig+0xde6>
 801da94:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801da98:	d115      	bne.n	801dac6 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801da9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801da9e:	3308      	adds	r3, #8
 801daa0:	2100      	movs	r1, #0
 801daa2:	4618      	mov	r0, r3
 801daa4:	f000 fdee 	bl	801e684 <RCCEx_PLL2_Config>
 801daa8:	4603      	mov	r3, r0
 801daaa:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801daae:	e015      	b.n	801dadc <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dab0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dab4:	3328      	adds	r3, #40	@ 0x28
 801dab6:	2102      	movs	r1, #2
 801dab8:	4618      	mov	r0, r3
 801daba:	f000 fe95 	bl	801e7e8 <RCCEx_PLL3_Config>
 801dabe:	4603      	mov	r3, r0
 801dac0:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801dac4:	e00a      	b.n	801dadc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dac6:	2301      	movs	r3, #1
 801dac8:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dacc:	e006      	b.n	801dadc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801dace:	bf00      	nop
 801dad0:	e004      	b.n	801dadc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801dad2:	bf00      	nop
 801dad4:	e002      	b.n	801dadc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801dad6:	bf00      	nop
 801dad8:	e000      	b.n	801dadc <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 801dada:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dadc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dae0:	2b00      	cmp	r3, #0
 801dae2:	d10b      	bne.n	801dafc <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801dae4:	4ba1      	ldr	r3, [pc, #644]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dae6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dae8:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801daec:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801daf0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801daf4:	4a9d      	ldr	r2, [pc, #628]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801daf6:	430b      	orrs	r3, r1
 801daf8:	6593      	str	r3, [r2, #88]	@ 0x58
 801dafa:	e003      	b.n	801db04 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dafc:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801db00:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801db04:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db08:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db0c:	f002 0308 	and.w	r3, r2, #8
 801db10:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801db14:	2300      	movs	r3, #0
 801db16:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801db1a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801db1e:	460b      	mov	r3, r1
 801db20:	4313      	orrs	r3, r2
 801db22:	d01e      	beq.n	801db62 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801db24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db28:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801db2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801db30:	d10c      	bne.n	801db4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801db32:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db36:	3328      	adds	r3, #40	@ 0x28
 801db38:	2102      	movs	r1, #2
 801db3a:	4618      	mov	r0, r3
 801db3c:	f000 fe54 	bl	801e7e8 <RCCEx_PLL3_Config>
 801db40:	4603      	mov	r3, r0
 801db42:	2b00      	cmp	r3, #0
 801db44:	d002      	beq.n	801db4c <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 801db46:	2301      	movs	r3, #1
 801db48:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801db4c:	4b87      	ldr	r3, [pc, #540]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801db4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801db50:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801db54:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db58:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801db5c:	4a83      	ldr	r2, [pc, #524]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801db5e:	430b      	orrs	r3, r1
 801db60:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801db62:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db66:	e9d3 2300 	ldrd	r2, r3, [r3]
 801db6a:	f002 0310 	and.w	r3, r2, #16
 801db6e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801db72:	2300      	movs	r3, #0
 801db74:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801db78:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801db7c:	460b      	mov	r3, r1
 801db7e:	4313      	orrs	r3, r2
 801db80:	d01e      	beq.n	801dbc0 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801db82:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db86:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801db8a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801db8e:	d10c      	bne.n	801dbaa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801db90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801db94:	3328      	adds	r3, #40	@ 0x28
 801db96:	2102      	movs	r1, #2
 801db98:	4618      	mov	r0, r3
 801db9a:	f000 fe25 	bl	801e7e8 <RCCEx_PLL3_Config>
 801db9e:	4603      	mov	r3, r0
 801dba0:	2b00      	cmp	r3, #0
 801dba2:	d002      	beq.n	801dbaa <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 801dba4:	2301      	movs	r3, #1
 801dba6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801dbaa:	4b70      	ldr	r3, [pc, #448]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dbac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dbae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801dbb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801dbba:	4a6c      	ldr	r2, [pc, #432]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dbbc:	430b      	orrs	r3, r1
 801dbbe:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801dbc0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dbc8:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801dbcc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801dbd0:	2300      	movs	r3, #0
 801dbd2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801dbd6:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801dbda:	460b      	mov	r3, r1
 801dbdc:	4313      	orrs	r3, r2
 801dbde:	d03e      	beq.n	801dc5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801dbe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dbe4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801dbe8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801dbec:	d022      	beq.n	801dc34 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 801dbee:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801dbf2:	d81b      	bhi.n	801dc2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 801dbf4:	2b00      	cmp	r3, #0
 801dbf6:	d003      	beq.n	801dc00 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 801dbf8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801dbfc:	d00b      	beq.n	801dc16 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 801dbfe:	e015      	b.n	801dc2c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801dc00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc04:	3308      	adds	r3, #8
 801dc06:	2100      	movs	r1, #0
 801dc08:	4618      	mov	r0, r3
 801dc0a:	f000 fd3b 	bl	801e684 <RCCEx_PLL2_Config>
 801dc0e:	4603      	mov	r3, r0
 801dc10:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801dc14:	e00f      	b.n	801dc36 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801dc16:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc1a:	3328      	adds	r3, #40	@ 0x28
 801dc1c:	2102      	movs	r1, #2
 801dc1e:	4618      	mov	r0, r3
 801dc20:	f000 fde2 	bl	801e7e8 <RCCEx_PLL3_Config>
 801dc24:	4603      	mov	r3, r0
 801dc26:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 801dc2a:	e004      	b.n	801dc36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dc2c:	2301      	movs	r3, #1
 801dc2e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dc32:	e000      	b.n	801dc36 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 801dc34:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dc36:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc3a:	2b00      	cmp	r3, #0
 801dc3c:	d10b      	bne.n	801dc56 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801dc3e:	4b4b      	ldr	r3, [pc, #300]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dc40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801dc42:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801dc46:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc4a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801dc4e:	4a47      	ldr	r2, [pc, #284]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dc50:	430b      	orrs	r3, r1
 801dc52:	6593      	str	r3, [r2, #88]	@ 0x58
 801dc54:	e003      	b.n	801dc5e <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dc56:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dc5a:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801dc5e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc62:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dc66:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801dc6a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801dc6c:	2300      	movs	r3, #0
 801dc6e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801dc70:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801dc74:	460b      	mov	r3, r1
 801dc76:	4313      	orrs	r3, r2
 801dc78:	d03b      	beq.n	801dcf2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801dc7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dc7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dc82:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801dc86:	d01f      	beq.n	801dcc8 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 801dc88:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801dc8c:	d818      	bhi.n	801dcc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 801dc8e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801dc92:	d003      	beq.n	801dc9c <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 801dc94:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801dc98:	d007      	beq.n	801dcaa <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801dc9a:	e011      	b.n	801dcc0 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dc9c:	4b33      	ldr	r3, [pc, #204]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dc9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dca0:	4a32      	ldr	r2, [pc, #200]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dca2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dca6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801dca8:	e00f      	b.n	801dcca <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801dcaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcae:	3328      	adds	r3, #40	@ 0x28
 801dcb0:	2101      	movs	r1, #1
 801dcb2:	4618      	mov	r0, r3
 801dcb4:	f000 fd98 	bl	801e7e8 <RCCEx_PLL3_Config>
 801dcb8:	4603      	mov	r3, r0
 801dcba:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 801dcbe:	e004      	b.n	801dcca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801dcc0:	2301      	movs	r3, #1
 801dcc2:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dcc6:	e000      	b.n	801dcca <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 801dcc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dcca:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dcce:	2b00      	cmp	r3, #0
 801dcd0:	d10b      	bne.n	801dcea <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801dcd2:	4b26      	ldr	r3, [pc, #152]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dcd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801dcd6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801dcda:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801dce2:	4a22      	ldr	r2, [pc, #136]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dce4:	430b      	orrs	r3, r1
 801dce6:	6553      	str	r3, [r2, #84]	@ 0x54
 801dce8:	e003      	b.n	801dcf2 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dcea:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dcee:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801dcf2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dcf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dcfa:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801dcfe:	673b      	str	r3, [r7, #112]	@ 0x70
 801dd00:	2300      	movs	r3, #0
 801dd02:	677b      	str	r3, [r7, #116]	@ 0x74
 801dd04:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801dd08:	460b      	mov	r3, r1
 801dd0a:	4313      	orrs	r3, r2
 801dd0c:	d034      	beq.n	801dd78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801dd0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd12:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dd14:	2b00      	cmp	r3, #0
 801dd16:	d003      	beq.n	801dd20 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 801dd18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801dd1c:	d007      	beq.n	801dd2e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 801dd1e:	e011      	b.n	801dd44 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801dd20:	4b12      	ldr	r3, [pc, #72]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd24:	4a11      	ldr	r2, [pc, #68]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dd26:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801dd2a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801dd2c:	e00e      	b.n	801dd4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801dd2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd32:	3308      	adds	r3, #8
 801dd34:	2102      	movs	r1, #2
 801dd36:	4618      	mov	r0, r3
 801dd38:	f000 fca4 	bl	801e684 <RCCEx_PLL2_Config>
 801dd3c:	4603      	mov	r3, r0
 801dd3e:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801dd42:	e003      	b.n	801dd4c <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 801dd44:	2301      	movs	r3, #1
 801dd46:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801dd4a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801dd4c:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd50:	2b00      	cmp	r3, #0
 801dd52:	d10d      	bne.n	801dd70 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801dd54:	4b05      	ldr	r3, [pc, #20]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dd56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801dd58:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801dd5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd60:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801dd62:	4a02      	ldr	r2, [pc, #8]	@ (801dd6c <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 801dd64:	430b      	orrs	r3, r1
 801dd66:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801dd68:	e006      	b.n	801dd78 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 801dd6a:	bf00      	nop
 801dd6c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dd70:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dd74:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801dd78:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dd80:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801dd84:	66bb      	str	r3, [r7, #104]	@ 0x68
 801dd86:	2300      	movs	r3, #0
 801dd88:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801dd8a:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801dd8e:	460b      	mov	r3, r1
 801dd90:	4313      	orrs	r3, r2
 801dd92:	d00c      	beq.n	801ddae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801dd94:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dd98:	3328      	adds	r3, #40	@ 0x28
 801dd9a:	2102      	movs	r1, #2
 801dd9c:	4618      	mov	r0, r3
 801dd9e:	f000 fd23 	bl	801e7e8 <RCCEx_PLL3_Config>
 801dda2:	4603      	mov	r3, r0
 801dda4:	2b00      	cmp	r3, #0
 801dda6:	d002      	beq.n	801ddae <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 801dda8:	2301      	movs	r3, #1
 801ddaa:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801ddae:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ddb6:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801ddba:	663b      	str	r3, [r7, #96]	@ 0x60
 801ddbc:	2300      	movs	r3, #0
 801ddbe:	667b      	str	r3, [r7, #100]	@ 0x64
 801ddc0:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801ddc4:	460b      	mov	r3, r1
 801ddc6:	4313      	orrs	r3, r2
 801ddc8:	d038      	beq.n	801de3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 801ddca:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ddce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801ddd2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801ddd6:	d018      	beq.n	801de0a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 801ddd8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801dddc:	d811      	bhi.n	801de02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801ddde:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dde2:	d014      	beq.n	801de0e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 801dde4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801dde8:	d80b      	bhi.n	801de02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 801ddea:	2b00      	cmp	r3, #0
 801ddec:	d011      	beq.n	801de12 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 801ddee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ddf2:	d106      	bne.n	801de02 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801ddf4:	4bc3      	ldr	r3, [pc, #780]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ddf6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ddf8:	4ac2      	ldr	r2, [pc, #776]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801ddfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801ddfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801de00:	e008      	b.n	801de14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801de02:	2301      	movs	r3, #1
 801de04:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
        break;
 801de08:	e004      	b.n	801de14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801de0a:	bf00      	nop
 801de0c:	e002      	b.n	801de14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801de0e:	bf00      	nop
 801de10:	e000      	b.n	801de14 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 801de12:	bf00      	nop
    }

    if (ret == HAL_OK)
 801de14:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de18:	2b00      	cmp	r3, #0
 801de1a:	d10b      	bne.n	801de34 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801de1c:	4bb9      	ldr	r3, [pc, #740]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801de1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801de20:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801de24:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de28:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801de2c:	4ab5      	ldr	r2, [pc, #724]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801de2e:	430b      	orrs	r3, r1
 801de30:	6553      	str	r3, [r2, #84]	@ 0x54
 801de32:	e003      	b.n	801de3c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801de34:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801de38:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801de3c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de40:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de44:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801de48:	65bb      	str	r3, [r7, #88]	@ 0x58
 801de4a:	2300      	movs	r3, #0
 801de4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801de4e:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801de52:	460b      	mov	r3, r1
 801de54:	4313      	orrs	r3, r2
 801de56:	d009      	beq.n	801de6c <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801de58:	4baa      	ldr	r3, [pc, #680]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801de5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801de5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801de60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de64:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801de66:	4aa7      	ldr	r2, [pc, #668]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801de68:	430b      	orrs	r3, r1
 801de6a:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801de6c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de70:	e9d3 2300 	ldrd	r2, r3, [r3]
 801de74:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801de78:	653b      	str	r3, [r7, #80]	@ 0x50
 801de7a:	2300      	movs	r3, #0
 801de7c:	657b      	str	r3, [r7, #84]	@ 0x54
 801de7e:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801de82:	460b      	mov	r3, r1
 801de84:	4313      	orrs	r3, r2
 801de86:	d00a      	beq.n	801de9e <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801de88:	4b9e      	ldr	r3, [pc, #632]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801de8a:	691b      	ldr	r3, [r3, #16]
 801de8c:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801de90:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801de94:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801de98:	4a9a      	ldr	r2, [pc, #616]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801de9a:	430b      	orrs	r3, r1
 801de9c:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801de9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dea2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dea6:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801deaa:	64bb      	str	r3, [r7, #72]	@ 0x48
 801deac:	2300      	movs	r3, #0
 801deae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801deb0:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801deb4:	460b      	mov	r3, r1
 801deb6:	4313      	orrs	r3, r2
 801deb8:	d009      	beq.n	801dece <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801deba:	4b92      	ldr	r3, [pc, #584]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801debc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801debe:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801dec2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dec6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801dec8:	4a8e      	ldr	r2, [pc, #568]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801deca:	430b      	orrs	r3, r1
 801decc:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801dece:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801ded2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ded6:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801deda:	643b      	str	r3, [r7, #64]	@ 0x40
 801dedc:	2300      	movs	r3, #0
 801dede:	647b      	str	r3, [r7, #68]	@ 0x44
 801dee0:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801dee4:	460b      	mov	r3, r1
 801dee6:	4313      	orrs	r3, r2
 801dee8:	d00e      	beq.n	801df08 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801deea:	4b86      	ldr	r3, [pc, #536]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801deec:	691b      	ldr	r3, [r3, #16]
 801deee:	4a85      	ldr	r2, [pc, #532]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801def0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801def4:	6113      	str	r3, [r2, #16]
 801def6:	4b83      	ldr	r3, [pc, #524]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801def8:	6919      	ldr	r1, [r3, #16]
 801defa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801defe:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801df02:	4a80      	ldr	r2, [pc, #512]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801df04:	430b      	orrs	r3, r1
 801df06:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801df08:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df10:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801df14:	63bb      	str	r3, [r7, #56]	@ 0x38
 801df16:	2300      	movs	r3, #0
 801df18:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801df1a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801df1e:	460b      	mov	r3, r1
 801df20:	4313      	orrs	r3, r2
 801df22:	d009      	beq.n	801df38 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801df24:	4b77      	ldr	r3, [pc, #476]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801df26:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801df28:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801df2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df30:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801df32:	4a74      	ldr	r2, [pc, #464]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801df34:	430b      	orrs	r3, r1
 801df36:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801df38:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df40:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801df44:	633b      	str	r3, [r7, #48]	@ 0x30
 801df46:	2300      	movs	r3, #0
 801df48:	637b      	str	r3, [r7, #52]	@ 0x34
 801df4a:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801df4e:	460b      	mov	r3, r1
 801df50:	4313      	orrs	r3, r2
 801df52:	d00a      	beq.n	801df6a <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801df54:	4b6b      	ldr	r3, [pc, #428]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801df56:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801df58:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801df5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801df64:	4a67      	ldr	r2, [pc, #412]	@ (801e104 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 801df66:	430b      	orrs	r3, r1
 801df68:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801df6a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801df72:	2100      	movs	r1, #0
 801df74:	62b9      	str	r1, [r7, #40]	@ 0x28
 801df76:	f003 0301 	and.w	r3, r3, #1
 801df7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801df7c:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801df80:	460b      	mov	r3, r1
 801df82:	4313      	orrs	r3, r2
 801df84:	d011      	beq.n	801dfaa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801df86:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801df8a:	3308      	adds	r3, #8
 801df8c:	2100      	movs	r1, #0
 801df8e:	4618      	mov	r0, r3
 801df90:	f000 fb78 	bl	801e684 <RCCEx_PLL2_Config>
 801df94:	4603      	mov	r3, r0
 801df96:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801df9a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801df9e:	2b00      	cmp	r3, #0
 801dfa0:	d003      	beq.n	801dfaa <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dfa2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfa6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801dfaa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dfb2:	2100      	movs	r1, #0
 801dfb4:	6239      	str	r1, [r7, #32]
 801dfb6:	f003 0302 	and.w	r3, r3, #2
 801dfba:	627b      	str	r3, [r7, #36]	@ 0x24
 801dfbc:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801dfc0:	460b      	mov	r3, r1
 801dfc2:	4313      	orrs	r3, r2
 801dfc4:	d011      	beq.n	801dfea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801dfc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfca:	3308      	adds	r3, #8
 801dfcc:	2101      	movs	r1, #1
 801dfce:	4618      	mov	r0, r3
 801dfd0:	f000 fb58 	bl	801e684 <RCCEx_PLL2_Config>
 801dfd4:	4603      	mov	r3, r0
 801dfd6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801dfda:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfde:	2b00      	cmp	r3, #0
 801dfe0:	d003      	beq.n	801dfea <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801dfe2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801dfe6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801dfea:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801dfee:	e9d3 2300 	ldrd	r2, r3, [r3]
 801dff2:	2100      	movs	r1, #0
 801dff4:	61b9      	str	r1, [r7, #24]
 801dff6:	f003 0304 	and.w	r3, r3, #4
 801dffa:	61fb      	str	r3, [r7, #28]
 801dffc:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801e000:	460b      	mov	r3, r1
 801e002:	4313      	orrs	r3, r2
 801e004:	d011      	beq.n	801e02a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801e006:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e00a:	3308      	adds	r3, #8
 801e00c:	2102      	movs	r1, #2
 801e00e:	4618      	mov	r0, r3
 801e010:	f000 fb38 	bl	801e684 <RCCEx_PLL2_Config>
 801e014:	4603      	mov	r3, r0
 801e016:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e01a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e01e:	2b00      	cmp	r3, #0
 801e020:	d003      	beq.n	801e02a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e022:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e026:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801e02a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e02e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e032:	2100      	movs	r1, #0
 801e034:	6139      	str	r1, [r7, #16]
 801e036:	f003 0308 	and.w	r3, r3, #8
 801e03a:	617b      	str	r3, [r7, #20]
 801e03c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801e040:	460b      	mov	r3, r1
 801e042:	4313      	orrs	r3, r2
 801e044:	d011      	beq.n	801e06a <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801e046:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e04a:	3328      	adds	r3, #40	@ 0x28
 801e04c:	2100      	movs	r1, #0
 801e04e:	4618      	mov	r0, r3
 801e050:	f000 fbca 	bl	801e7e8 <RCCEx_PLL3_Config>
 801e054:	4603      	mov	r3, r0
 801e056:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
  
    if (ret == HAL_OK)
 801e05a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e05e:	2b00      	cmp	r3, #0
 801e060:	d003      	beq.n	801e06a <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e062:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e066:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801e06a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e072:	2100      	movs	r1, #0
 801e074:	60b9      	str	r1, [r7, #8]
 801e076:	f003 0310 	and.w	r3, r3, #16
 801e07a:	60fb      	str	r3, [r7, #12]
 801e07c:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801e080:	460b      	mov	r3, r1
 801e082:	4313      	orrs	r3, r2
 801e084:	d011      	beq.n	801e0aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801e086:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e08a:	3328      	adds	r3, #40	@ 0x28
 801e08c:	2101      	movs	r1, #1
 801e08e:	4618      	mov	r0, r3
 801e090:	f000 fbaa 	bl	801e7e8 <RCCEx_PLL3_Config>
 801e094:	4603      	mov	r3, r0
 801e096:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e09a:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e09e:	2b00      	cmp	r3, #0
 801e0a0:	d003      	beq.n	801e0aa <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e0a2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0a6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801e0aa:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801e0b2:	2100      	movs	r1, #0
 801e0b4:	6039      	str	r1, [r7, #0]
 801e0b6:	f003 0320 	and.w	r3, r3, #32
 801e0ba:	607b      	str	r3, [r7, #4]
 801e0bc:	e9d7 1200 	ldrd	r1, r2, [r7]
 801e0c0:	460b      	mov	r3, r1
 801e0c2:	4313      	orrs	r3, r2
 801e0c4:	d011      	beq.n	801e0ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801e0c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 801e0ca:	3328      	adds	r3, #40	@ 0x28
 801e0cc:	2102      	movs	r1, #2
 801e0ce:	4618      	mov	r0, r3
 801e0d0:	f000 fb8a 	bl	801e7e8 <RCCEx_PLL3_Config>
 801e0d4:	4603      	mov	r3, r0
 801e0d6:	f887 3127 	strb.w	r3, [r7, #295]	@ 0x127
    
    if (ret == HAL_OK)
 801e0da:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0de:	2b00      	cmp	r3, #0
 801e0e0:	d003      	beq.n	801e0ea <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801e0e2:	f897 3127 	ldrb.w	r3, [r7, #295]	@ 0x127
 801e0e6:	f887 3126 	strb.w	r3, [r7, #294]	@ 0x126
    } 
  }

  if (status == HAL_OK)
 801e0ea:	f897 3126 	ldrb.w	r3, [r7, #294]	@ 0x126
 801e0ee:	2b00      	cmp	r3, #0
 801e0f0:	d101      	bne.n	801e0f6 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 801e0f2:	2300      	movs	r3, #0
 801e0f4:	e000      	b.n	801e0f8 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 801e0f6:	2301      	movs	r3, #1
}
 801e0f8:	4618      	mov	r0, r3
 801e0fa:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 801e0fe:	46bd      	mov	sp, r7
 801e100:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801e104:	58024400 	.word	0x58024400

0801e108 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801e108:	b580      	push	{r7, lr}
 801e10a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801e10c:	f7fe fd96 	bl	801cc3c <HAL_RCC_GetHCLKFreq>
 801e110:	4602      	mov	r2, r0
 801e112:	4b06      	ldr	r3, [pc, #24]	@ (801e12c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801e114:	6a1b      	ldr	r3, [r3, #32]
 801e116:	091b      	lsrs	r3, r3, #4
 801e118:	f003 0307 	and.w	r3, r3, #7
 801e11c:	4904      	ldr	r1, [pc, #16]	@ (801e130 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801e11e:	5ccb      	ldrb	r3, [r1, r3]
 801e120:	f003 031f 	and.w	r3, r3, #31
 801e124:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801e128:	4618      	mov	r0, r3
 801e12a:	bd80      	pop	{r7, pc}
 801e12c:	58024400 	.word	0x58024400
 801e130:	080262d0 	.word	0x080262d0

0801e134 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801e134:	b480      	push	{r7}
 801e136:	b089      	sub	sp, #36	@ 0x24
 801e138:	af00      	add	r7, sp, #0
 801e13a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e13c:	4ba1      	ldr	r3, [pc, #644]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e13e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e140:	f003 0303 	and.w	r3, r3, #3
 801e144:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801e146:	4b9f      	ldr	r3, [pc, #636]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e148:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e14a:	0b1b      	lsrs	r3, r3, #12
 801e14c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e150:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801e152:	4b9c      	ldr	r3, [pc, #624]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e154:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e156:	091b      	lsrs	r3, r3, #4
 801e158:	f003 0301 	and.w	r3, r3, #1
 801e15c:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801e15e:	4b99      	ldr	r3, [pc, #612]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e160:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e162:	08db      	lsrs	r3, r3, #3
 801e164:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e168:	693a      	ldr	r2, [r7, #16]
 801e16a:	fb02 f303 	mul.w	r3, r2, r3
 801e16e:	ee07 3a90 	vmov	s15, r3
 801e172:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e176:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801e17a:	697b      	ldr	r3, [r7, #20]
 801e17c:	2b00      	cmp	r3, #0
 801e17e:	f000 8111 	beq.w	801e3a4 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801e182:	69bb      	ldr	r3, [r7, #24]
 801e184:	2b02      	cmp	r3, #2
 801e186:	f000 8083 	beq.w	801e290 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801e18a:	69bb      	ldr	r3, [r7, #24]
 801e18c:	2b02      	cmp	r3, #2
 801e18e:	f200 80a1 	bhi.w	801e2d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801e192:	69bb      	ldr	r3, [r7, #24]
 801e194:	2b00      	cmp	r3, #0
 801e196:	d003      	beq.n	801e1a0 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801e198:	69bb      	ldr	r3, [r7, #24]
 801e19a:	2b01      	cmp	r3, #1
 801e19c:	d056      	beq.n	801e24c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801e19e:	e099      	b.n	801e2d4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e1a0:	4b88      	ldr	r3, [pc, #544]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e1a2:	681b      	ldr	r3, [r3, #0]
 801e1a4:	f003 0320 	and.w	r3, r3, #32
 801e1a8:	2b00      	cmp	r3, #0
 801e1aa:	d02d      	beq.n	801e208 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e1ac:	4b85      	ldr	r3, [pc, #532]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e1ae:	681b      	ldr	r3, [r3, #0]
 801e1b0:	08db      	lsrs	r3, r3, #3
 801e1b2:	f003 0303 	and.w	r3, r3, #3
 801e1b6:	4a84      	ldr	r2, [pc, #528]	@ (801e3c8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801e1b8:	fa22 f303 	lsr.w	r3, r2, r3
 801e1bc:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e1be:	68bb      	ldr	r3, [r7, #8]
 801e1c0:	ee07 3a90 	vmov	s15, r3
 801e1c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e1c8:	697b      	ldr	r3, [r7, #20]
 801e1ca:	ee07 3a90 	vmov	s15, r3
 801e1ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e1d2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e1d6:	4b7b      	ldr	r3, [pc, #492]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e1d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e1da:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e1de:	ee07 3a90 	vmov	s15, r3
 801e1e2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e1e6:	ed97 6a03 	vldr	s12, [r7, #12]
 801e1ea:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801e3cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e1ee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e1f2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e1f6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e1fa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e1fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e202:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e206:	e087      	b.n	801e318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e208:	697b      	ldr	r3, [r7, #20]
 801e20a:	ee07 3a90 	vmov	s15, r3
 801e20e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e212:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801e3d0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801e216:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e21a:	4b6a      	ldr	r3, [pc, #424]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e21c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e21e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e222:	ee07 3a90 	vmov	s15, r3
 801e226:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e22a:	ed97 6a03 	vldr	s12, [r7, #12]
 801e22e:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801e3cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e232:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e236:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e23a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e23e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e242:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e246:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e24a:	e065      	b.n	801e318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e24c:	697b      	ldr	r3, [r7, #20]
 801e24e:	ee07 3a90 	vmov	s15, r3
 801e252:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e256:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801e3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e25a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e25e:	4b59      	ldr	r3, [pc, #356]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e260:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e262:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e266:	ee07 3a90 	vmov	s15, r3
 801e26a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e26e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e272:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801e3cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e276:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e27a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e27e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e282:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e286:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e28a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e28e:	e043      	b.n	801e318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e290:	697b      	ldr	r3, [r7, #20]
 801e292:	ee07 3a90 	vmov	s15, r3
 801e296:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e29a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801e3d8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801e29e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e2a2:	4b48      	ldr	r3, [pc, #288]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e2a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e2a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e2aa:	ee07 3a90 	vmov	s15, r3
 801e2ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e2b2:	ed97 6a03 	vldr	s12, [r7, #12]
 801e2b6:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801e3cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e2ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e2be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e2c2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e2c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e2ce:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e2d2:	e021      	b.n	801e318 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801e2d4:	697b      	ldr	r3, [r7, #20]
 801e2d6:	ee07 3a90 	vmov	s15, r3
 801e2da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e2de:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801e3d4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801e2e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e2e6:	4b37      	ldr	r3, [pc, #220]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e2e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e2ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e2ee:	ee07 3a90 	vmov	s15, r3
 801e2f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e2f6:	ed97 6a03 	vldr	s12, [r7, #12]
 801e2fa:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801e3cc <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801e2fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e302:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e306:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e30a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e30e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e312:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e316:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801e318:	4b2a      	ldr	r3, [pc, #168]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e31a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e31c:	0a5b      	lsrs	r3, r3, #9
 801e31e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e322:	ee07 3a90 	vmov	s15, r3
 801e326:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e32a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e32e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e332:	edd7 6a07 	vldr	s13, [r7, #28]
 801e336:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e33a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e33e:	ee17 2a90 	vmov	r2, s15
 801e342:	687b      	ldr	r3, [r7, #4]
 801e344:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801e346:	4b1f      	ldr	r3, [pc, #124]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e34a:	0c1b      	lsrs	r3, r3, #16
 801e34c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e350:	ee07 3a90 	vmov	s15, r3
 801e354:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e358:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e35c:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e360:	edd7 6a07 	vldr	s13, [r7, #28]
 801e364:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e368:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e36c:	ee17 2a90 	vmov	r2, s15
 801e370:	687b      	ldr	r3, [r7, #4]
 801e372:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801e374:	4b13      	ldr	r3, [pc, #76]	@ (801e3c4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801e376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e378:	0e1b      	lsrs	r3, r3, #24
 801e37a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e37e:	ee07 3a90 	vmov	s15, r3
 801e382:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e386:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e38a:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e38e:	edd7 6a07 	vldr	s13, [r7, #28]
 801e392:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e396:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e39a:	ee17 2a90 	vmov	r2, s15
 801e39e:	687b      	ldr	r3, [r7, #4]
 801e3a0:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801e3a2:	e008      	b.n	801e3b6 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801e3a4:	687b      	ldr	r3, [r7, #4]
 801e3a6:	2200      	movs	r2, #0
 801e3a8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	2200      	movs	r2, #0
 801e3ae:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801e3b0:	687b      	ldr	r3, [r7, #4]
 801e3b2:	2200      	movs	r2, #0
 801e3b4:	609a      	str	r2, [r3, #8]
}
 801e3b6:	bf00      	nop
 801e3b8:	3724      	adds	r7, #36	@ 0x24
 801e3ba:	46bd      	mov	sp, r7
 801e3bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e3c0:	4770      	bx	lr
 801e3c2:	bf00      	nop
 801e3c4:	58024400 	.word	0x58024400
 801e3c8:	03d09000 	.word	0x03d09000
 801e3cc:	46000000 	.word	0x46000000
 801e3d0:	4c742400 	.word	0x4c742400
 801e3d4:	4a742400 	.word	0x4a742400
 801e3d8:	4bbebc20 	.word	0x4bbebc20

0801e3dc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801e3dc:	b480      	push	{r7}
 801e3de:	b089      	sub	sp, #36	@ 0x24
 801e3e0:	af00      	add	r7, sp, #0
 801e3e2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801e3e4:	4ba1      	ldr	r3, [pc, #644]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e3e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e3e8:	f003 0303 	and.w	r3, r3, #3
 801e3ec:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801e3ee:	4b9f      	ldr	r3, [pc, #636]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e3f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e3f2:	0d1b      	lsrs	r3, r3, #20
 801e3f4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801e3f8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801e3fa:	4b9c      	ldr	r3, [pc, #624]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e3fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e3fe:	0a1b      	lsrs	r3, r3, #8
 801e400:	f003 0301 	and.w	r3, r3, #1
 801e404:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801e406:	4b99      	ldr	r3, [pc, #612]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e408:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e40a:	08db      	lsrs	r3, r3, #3
 801e40c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801e410:	693a      	ldr	r2, [r7, #16]
 801e412:	fb02 f303 	mul.w	r3, r2, r3
 801e416:	ee07 3a90 	vmov	s15, r3
 801e41a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e41e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801e422:	697b      	ldr	r3, [r7, #20]
 801e424:	2b00      	cmp	r3, #0
 801e426:	f000 8111 	beq.w	801e64c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801e42a:	69bb      	ldr	r3, [r7, #24]
 801e42c:	2b02      	cmp	r3, #2
 801e42e:	f000 8083 	beq.w	801e538 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801e432:	69bb      	ldr	r3, [r7, #24]
 801e434:	2b02      	cmp	r3, #2
 801e436:	f200 80a1 	bhi.w	801e57c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801e43a:	69bb      	ldr	r3, [r7, #24]
 801e43c:	2b00      	cmp	r3, #0
 801e43e:	d003      	beq.n	801e448 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801e440:	69bb      	ldr	r3, [r7, #24]
 801e442:	2b01      	cmp	r3, #1
 801e444:	d056      	beq.n	801e4f4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801e446:	e099      	b.n	801e57c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801e448:	4b88      	ldr	r3, [pc, #544]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e44a:	681b      	ldr	r3, [r3, #0]
 801e44c:	f003 0320 	and.w	r3, r3, #32
 801e450:	2b00      	cmp	r3, #0
 801e452:	d02d      	beq.n	801e4b0 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801e454:	4b85      	ldr	r3, [pc, #532]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e456:	681b      	ldr	r3, [r3, #0]
 801e458:	08db      	lsrs	r3, r3, #3
 801e45a:	f003 0303 	and.w	r3, r3, #3
 801e45e:	4a84      	ldr	r2, [pc, #528]	@ (801e670 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801e460:	fa22 f303 	lsr.w	r3, r2, r3
 801e464:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e466:	68bb      	ldr	r3, [r7, #8]
 801e468:	ee07 3a90 	vmov	s15, r3
 801e46c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e470:	697b      	ldr	r3, [r7, #20]
 801e472:	ee07 3a90 	vmov	s15, r3
 801e476:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e47a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e47e:	4b7b      	ldr	r3, [pc, #492]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e480:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e482:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e486:	ee07 3a90 	vmov	s15, r3
 801e48a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e48e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e492:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801e674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e496:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e49a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e49e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e4a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e4a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e4aa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801e4ae:	e087      	b.n	801e5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e4b0:	697b      	ldr	r3, [r7, #20]
 801e4b2:	ee07 3a90 	vmov	s15, r3
 801e4b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e4ba:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801e678 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801e4be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e4c2:	4b6a      	ldr	r3, [pc, #424]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e4c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e4ca:	ee07 3a90 	vmov	s15, r3
 801e4ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e4d2:	ed97 6a03 	vldr	s12, [r7, #12]
 801e4d6:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801e674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e4da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e4de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e4e2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e4e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e4ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e4ee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e4f2:	e065      	b.n	801e5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e4f4:	697b      	ldr	r3, [r7, #20]
 801e4f6:	ee07 3a90 	vmov	s15, r3
 801e4fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e4fe:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801e67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801e502:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e506:	4b59      	ldr	r3, [pc, #356]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e508:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e50a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e50e:	ee07 3a90 	vmov	s15, r3
 801e512:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e516:	ed97 6a03 	vldr	s12, [r7, #12]
 801e51a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801e674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e51e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e522:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e526:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e52a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e52e:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e532:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e536:	e043      	b.n	801e5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e538:	697b      	ldr	r3, [r7, #20]
 801e53a:	ee07 3a90 	vmov	s15, r3
 801e53e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e542:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801e680 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801e546:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e54a:	4b48      	ldr	r3, [pc, #288]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e54c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e54e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e552:	ee07 3a90 	vmov	s15, r3
 801e556:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e55a:	ed97 6a03 	vldr	s12, [r7, #12]
 801e55e:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801e674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e562:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e566:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e56a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e56e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e572:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e576:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e57a:	e021      	b.n	801e5c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801e57c:	697b      	ldr	r3, [r7, #20]
 801e57e:	ee07 3a90 	vmov	s15, r3
 801e582:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e586:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801e67c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801e58a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801e58e:	4b37      	ldr	r3, [pc, #220]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e590:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e592:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801e596:	ee07 3a90 	vmov	s15, r3
 801e59a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801e59e:	ed97 6a03 	vldr	s12, [r7, #12]
 801e5a2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801e674 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801e5a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801e5aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801e5ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801e5b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801e5b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 801e5ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801e5be:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801e5c0:	4b2a      	ldr	r3, [pc, #168]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e5c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e5c4:	0a5b      	lsrs	r3, r3, #9
 801e5c6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e5ca:	ee07 3a90 	vmov	s15, r3
 801e5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e5d2:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e5d6:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e5da:	edd7 6a07 	vldr	s13, [r7, #28]
 801e5de:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e5e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e5e6:	ee17 2a90 	vmov	r2, s15
 801e5ea:	687b      	ldr	r3, [r7, #4]
 801e5ec:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801e5ee:	4b1f      	ldr	r3, [pc, #124]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e5f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e5f2:	0c1b      	lsrs	r3, r3, #16
 801e5f4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e5f8:	ee07 3a90 	vmov	s15, r3
 801e5fc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e600:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e604:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e608:	edd7 6a07 	vldr	s13, [r7, #28]
 801e60c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e610:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e614:	ee17 2a90 	vmov	r2, s15
 801e618:	687b      	ldr	r3, [r7, #4]
 801e61a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801e61c:	4b13      	ldr	r3, [pc, #76]	@ (801e66c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801e61e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801e620:	0e1b      	lsrs	r3, r3, #24
 801e622:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801e626:	ee07 3a90 	vmov	s15, r3
 801e62a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801e62e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e632:	ee37 7a87 	vadd.f32	s14, s15, s14
 801e636:	edd7 6a07 	vldr	s13, [r7, #28]
 801e63a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801e63e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801e642:	ee17 2a90 	vmov	r2, s15
 801e646:	687b      	ldr	r3, [r7, #4]
 801e648:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801e64a:	e008      	b.n	801e65e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	2200      	movs	r2, #0
 801e650:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801e652:	687b      	ldr	r3, [r7, #4]
 801e654:	2200      	movs	r2, #0
 801e656:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801e658:	687b      	ldr	r3, [r7, #4]
 801e65a:	2200      	movs	r2, #0
 801e65c:	609a      	str	r2, [r3, #8]
}
 801e65e:	bf00      	nop
 801e660:	3724      	adds	r7, #36	@ 0x24
 801e662:	46bd      	mov	sp, r7
 801e664:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e668:	4770      	bx	lr
 801e66a:	bf00      	nop
 801e66c:	58024400 	.word	0x58024400
 801e670:	03d09000 	.word	0x03d09000
 801e674:	46000000 	.word	0x46000000
 801e678:	4c742400 	.word	0x4c742400
 801e67c:	4a742400 	.word	0x4a742400
 801e680:	4bbebc20 	.word	0x4bbebc20

0801e684 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801e684:	b580      	push	{r7, lr}
 801e686:	b084      	sub	sp, #16
 801e688:	af00      	add	r7, sp, #0
 801e68a:	6078      	str	r0, [r7, #4]
 801e68c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e68e:	2300      	movs	r3, #0
 801e690:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e692:	4b53      	ldr	r3, [pc, #332]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e694:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e696:	f003 0303 	and.w	r3, r3, #3
 801e69a:	2b03      	cmp	r3, #3
 801e69c:	d101      	bne.n	801e6a2 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801e69e:	2301      	movs	r3, #1
 801e6a0:	e099      	b.n	801e7d6 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801e6a2:	4b4f      	ldr	r3, [pc, #316]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e6a4:	681b      	ldr	r3, [r3, #0]
 801e6a6:	4a4e      	ldr	r2, [pc, #312]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e6a8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801e6ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e6ae:	f7fa ff23 	bl	80194f8 <HAL_GetTick>
 801e6b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e6b4:	e008      	b.n	801e6c8 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e6b6:	f7fa ff1f 	bl	80194f8 <HAL_GetTick>
 801e6ba:	4602      	mov	r2, r0
 801e6bc:	68bb      	ldr	r3, [r7, #8]
 801e6be:	1ad3      	subs	r3, r2, r3
 801e6c0:	2b02      	cmp	r3, #2
 801e6c2:	d901      	bls.n	801e6c8 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e6c4:	2303      	movs	r3, #3
 801e6c6:	e086      	b.n	801e7d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801e6c8:	4b45      	ldr	r3, [pc, #276]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e6ca:	681b      	ldr	r3, [r3, #0]
 801e6cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e6d0:	2b00      	cmp	r3, #0
 801e6d2:	d1f0      	bne.n	801e6b6 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801e6d4:	4b42      	ldr	r3, [pc, #264]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e6d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e6d8:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801e6dc:	687b      	ldr	r3, [r7, #4]
 801e6de:	681b      	ldr	r3, [r3, #0]
 801e6e0:	031b      	lsls	r3, r3, #12
 801e6e2:	493f      	ldr	r1, [pc, #252]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e6e4:	4313      	orrs	r3, r2
 801e6e6:	628b      	str	r3, [r1, #40]	@ 0x28
 801e6e8:	687b      	ldr	r3, [r7, #4]
 801e6ea:	685b      	ldr	r3, [r3, #4]
 801e6ec:	3b01      	subs	r3, #1
 801e6ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e6f2:	687b      	ldr	r3, [r7, #4]
 801e6f4:	689b      	ldr	r3, [r3, #8]
 801e6f6:	3b01      	subs	r3, #1
 801e6f8:	025b      	lsls	r3, r3, #9
 801e6fa:	b29b      	uxth	r3, r3
 801e6fc:	431a      	orrs	r2, r3
 801e6fe:	687b      	ldr	r3, [r7, #4]
 801e700:	68db      	ldr	r3, [r3, #12]
 801e702:	3b01      	subs	r3, #1
 801e704:	041b      	lsls	r3, r3, #16
 801e706:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801e70a:	431a      	orrs	r2, r3
 801e70c:	687b      	ldr	r3, [r7, #4]
 801e70e:	691b      	ldr	r3, [r3, #16]
 801e710:	3b01      	subs	r3, #1
 801e712:	061b      	lsls	r3, r3, #24
 801e714:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801e718:	4931      	ldr	r1, [pc, #196]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e71a:	4313      	orrs	r3, r2
 801e71c:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801e71e:	4b30      	ldr	r3, [pc, #192]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e720:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e722:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801e726:	687b      	ldr	r3, [r7, #4]
 801e728:	695b      	ldr	r3, [r3, #20]
 801e72a:	492d      	ldr	r1, [pc, #180]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e72c:	4313      	orrs	r3, r2
 801e72e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801e730:	4b2b      	ldr	r3, [pc, #172]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e734:	f023 0220 	bic.w	r2, r3, #32
 801e738:	687b      	ldr	r3, [r7, #4]
 801e73a:	699b      	ldr	r3, [r3, #24]
 801e73c:	4928      	ldr	r1, [pc, #160]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e73e:	4313      	orrs	r3, r2
 801e740:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801e742:	4b27      	ldr	r3, [pc, #156]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e746:	4a26      	ldr	r2, [pc, #152]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e748:	f023 0310 	bic.w	r3, r3, #16
 801e74c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801e74e:	4b24      	ldr	r3, [pc, #144]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e750:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801e752:	4b24      	ldr	r3, [pc, #144]	@ (801e7e4 <RCCEx_PLL2_Config+0x160>)
 801e754:	4013      	ands	r3, r2
 801e756:	687a      	ldr	r2, [r7, #4]
 801e758:	69d2      	ldr	r2, [r2, #28]
 801e75a:	00d2      	lsls	r2, r2, #3
 801e75c:	4920      	ldr	r1, [pc, #128]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e75e:	4313      	orrs	r3, r2
 801e760:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801e762:	4b1f      	ldr	r3, [pc, #124]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e764:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e766:	4a1e      	ldr	r2, [pc, #120]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e768:	f043 0310 	orr.w	r3, r3, #16
 801e76c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e76e:	683b      	ldr	r3, [r7, #0]
 801e770:	2b00      	cmp	r3, #0
 801e772:	d106      	bne.n	801e782 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801e774:	4b1a      	ldr	r3, [pc, #104]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e776:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e778:	4a19      	ldr	r2, [pc, #100]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e77a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801e77e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801e780:	e00f      	b.n	801e7a2 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e782:	683b      	ldr	r3, [r7, #0]
 801e784:	2b01      	cmp	r3, #1
 801e786:	d106      	bne.n	801e796 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801e788:	4b15      	ldr	r3, [pc, #84]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e78a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e78c:	4a14      	ldr	r2, [pc, #80]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e78e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801e792:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801e794:	e005      	b.n	801e7a2 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801e796:	4b12      	ldr	r3, [pc, #72]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e798:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e79a:	4a11      	ldr	r2, [pc, #68]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e79c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801e7a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801e7a2:	4b0f      	ldr	r3, [pc, #60]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e7a4:	681b      	ldr	r3, [r3, #0]
 801e7a6:	4a0e      	ldr	r2, [pc, #56]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e7a8:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801e7ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e7ae:	f7fa fea3 	bl	80194f8 <HAL_GetTick>
 801e7b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e7b4:	e008      	b.n	801e7c8 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801e7b6:	f7fa fe9f 	bl	80194f8 <HAL_GetTick>
 801e7ba:	4602      	mov	r2, r0
 801e7bc:	68bb      	ldr	r3, [r7, #8]
 801e7be:	1ad3      	subs	r3, r2, r3
 801e7c0:	2b02      	cmp	r3, #2
 801e7c2:	d901      	bls.n	801e7c8 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e7c4:	2303      	movs	r3, #3
 801e7c6:	e006      	b.n	801e7d6 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801e7c8:	4b05      	ldr	r3, [pc, #20]	@ (801e7e0 <RCCEx_PLL2_Config+0x15c>)
 801e7ca:	681b      	ldr	r3, [r3, #0]
 801e7cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801e7d0:	2b00      	cmp	r3, #0
 801e7d2:	d0f0      	beq.n	801e7b6 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801e7d4:	7bfb      	ldrb	r3, [r7, #15]
}
 801e7d6:	4618      	mov	r0, r3
 801e7d8:	3710      	adds	r7, #16
 801e7da:	46bd      	mov	sp, r7
 801e7dc:	bd80      	pop	{r7, pc}
 801e7de:	bf00      	nop
 801e7e0:	58024400 	.word	0x58024400
 801e7e4:	ffff0007 	.word	0xffff0007

0801e7e8 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801e7e8:	b580      	push	{r7, lr}
 801e7ea:	b084      	sub	sp, #16
 801e7ec:	af00      	add	r7, sp, #0
 801e7ee:	6078      	str	r0, [r7, #4]
 801e7f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801e7f2:	2300      	movs	r3, #0
 801e7f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801e7f6:	4b53      	ldr	r3, [pc, #332]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e7f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e7fa:	f003 0303 	and.w	r3, r3, #3
 801e7fe:	2b03      	cmp	r3, #3
 801e800:	d101      	bne.n	801e806 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801e802:	2301      	movs	r3, #1
 801e804:	e099      	b.n	801e93a <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801e806:	4b4f      	ldr	r3, [pc, #316]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e808:	681b      	ldr	r3, [r3, #0]
 801e80a:	4a4e      	ldr	r2, [pc, #312]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e80c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801e810:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e812:	f7fa fe71 	bl	80194f8 <HAL_GetTick>
 801e816:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e818:	e008      	b.n	801e82c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e81a:	f7fa fe6d 	bl	80194f8 <HAL_GetTick>
 801e81e:	4602      	mov	r2, r0
 801e820:	68bb      	ldr	r3, [r7, #8]
 801e822:	1ad3      	subs	r3, r2, r3
 801e824:	2b02      	cmp	r3, #2
 801e826:	d901      	bls.n	801e82c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801e828:	2303      	movs	r3, #3
 801e82a:	e086      	b.n	801e93a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801e82c:	4b45      	ldr	r3, [pc, #276]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e82e:	681b      	ldr	r3, [r3, #0]
 801e830:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e834:	2b00      	cmp	r3, #0
 801e836:	d1f0      	bne.n	801e81a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801e838:	4b42      	ldr	r3, [pc, #264]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e83a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e83c:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801e840:	687b      	ldr	r3, [r7, #4]
 801e842:	681b      	ldr	r3, [r3, #0]
 801e844:	051b      	lsls	r3, r3, #20
 801e846:	493f      	ldr	r1, [pc, #252]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e848:	4313      	orrs	r3, r2
 801e84a:	628b      	str	r3, [r1, #40]	@ 0x28
 801e84c:	687b      	ldr	r3, [r7, #4]
 801e84e:	685b      	ldr	r3, [r3, #4]
 801e850:	3b01      	subs	r3, #1
 801e852:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801e856:	687b      	ldr	r3, [r7, #4]
 801e858:	689b      	ldr	r3, [r3, #8]
 801e85a:	3b01      	subs	r3, #1
 801e85c:	025b      	lsls	r3, r3, #9
 801e85e:	b29b      	uxth	r3, r3
 801e860:	431a      	orrs	r2, r3
 801e862:	687b      	ldr	r3, [r7, #4]
 801e864:	68db      	ldr	r3, [r3, #12]
 801e866:	3b01      	subs	r3, #1
 801e868:	041b      	lsls	r3, r3, #16
 801e86a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801e86e:	431a      	orrs	r2, r3
 801e870:	687b      	ldr	r3, [r7, #4]
 801e872:	691b      	ldr	r3, [r3, #16]
 801e874:	3b01      	subs	r3, #1
 801e876:	061b      	lsls	r3, r3, #24
 801e878:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801e87c:	4931      	ldr	r1, [pc, #196]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e87e:	4313      	orrs	r3, r2
 801e880:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801e882:	4b30      	ldr	r3, [pc, #192]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e886:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801e88a:	687b      	ldr	r3, [r7, #4]
 801e88c:	695b      	ldr	r3, [r3, #20]
 801e88e:	492d      	ldr	r1, [pc, #180]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e890:	4313      	orrs	r3, r2
 801e892:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801e894:	4b2b      	ldr	r3, [pc, #172]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e896:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e898:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801e89c:	687b      	ldr	r3, [r7, #4]
 801e89e:	699b      	ldr	r3, [r3, #24]
 801e8a0:	4928      	ldr	r1, [pc, #160]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e8a2:	4313      	orrs	r3, r2
 801e8a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801e8a6:	4b27      	ldr	r3, [pc, #156]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e8a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e8aa:	4a26      	ldr	r2, [pc, #152]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e8ac:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801e8b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801e8b2:	4b24      	ldr	r3, [pc, #144]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e8b4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801e8b6:	4b24      	ldr	r3, [pc, #144]	@ (801e948 <RCCEx_PLL3_Config+0x160>)
 801e8b8:	4013      	ands	r3, r2
 801e8ba:	687a      	ldr	r2, [r7, #4]
 801e8bc:	69d2      	ldr	r2, [r2, #28]
 801e8be:	00d2      	lsls	r2, r2, #3
 801e8c0:	4920      	ldr	r1, [pc, #128]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e8c2:	4313      	orrs	r3, r2
 801e8c4:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801e8c6:	4b1f      	ldr	r3, [pc, #124]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e8c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e8ca:	4a1e      	ldr	r2, [pc, #120]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e8cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801e8d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801e8d2:	683b      	ldr	r3, [r7, #0]
 801e8d4:	2b00      	cmp	r3, #0
 801e8d6:	d106      	bne.n	801e8e6 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801e8d8:	4b1a      	ldr	r3, [pc, #104]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e8da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e8dc:	4a19      	ldr	r2, [pc, #100]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e8de:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801e8e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801e8e4:	e00f      	b.n	801e906 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801e8e6:	683b      	ldr	r3, [r7, #0]
 801e8e8:	2b01      	cmp	r3, #1
 801e8ea:	d106      	bne.n	801e8fa <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801e8ec:	4b15      	ldr	r3, [pc, #84]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e8ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e8f0:	4a14      	ldr	r2, [pc, #80]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e8f2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801e8f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801e8f8:	e005      	b.n	801e906 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801e8fa:	4b12      	ldr	r3, [pc, #72]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e8fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e8fe:	4a11      	ldr	r2, [pc, #68]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e900:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801e904:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801e906:	4b0f      	ldr	r3, [pc, #60]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e908:	681b      	ldr	r3, [r3, #0]
 801e90a:	4a0e      	ldr	r2, [pc, #56]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e90c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801e910:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801e912:	f7fa fdf1 	bl	80194f8 <HAL_GetTick>
 801e916:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e918:	e008      	b.n	801e92c <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801e91a:	f7fa fded 	bl	80194f8 <HAL_GetTick>
 801e91e:	4602      	mov	r2, r0
 801e920:	68bb      	ldr	r3, [r7, #8]
 801e922:	1ad3      	subs	r3, r2, r3
 801e924:	2b02      	cmp	r3, #2
 801e926:	d901      	bls.n	801e92c <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801e928:	2303      	movs	r3, #3
 801e92a:	e006      	b.n	801e93a <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801e92c:	4b05      	ldr	r3, [pc, #20]	@ (801e944 <RCCEx_PLL3_Config+0x15c>)
 801e92e:	681b      	ldr	r3, [r3, #0]
 801e930:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801e934:	2b00      	cmp	r3, #0
 801e936:	d0f0      	beq.n	801e91a <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801e938:	7bfb      	ldrb	r3, [r7, #15]
}
 801e93a:	4618      	mov	r0, r3
 801e93c:	3710      	adds	r7, #16
 801e93e:	46bd      	mov	sp, r7
 801e940:	bd80      	pop	{r7, pc}
 801e942:	bf00      	nop
 801e944:	58024400 	.word	0x58024400
 801e948:	ffff0007 	.word	0xffff0007

0801e94c <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 801e94c:	b580      	push	{r7, lr}
 801e94e:	b084      	sub	sp, #16
 801e950:	af00      	add	r7, sp, #0
 801e952:	6078      	str	r0, [r7, #4]
#if (USE_SPI_CRC != 0UL)
  uint32_t crc_poly_msb_mask;
#endif /* USE_SPI_CRC */

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 801e954:	687b      	ldr	r3, [r7, #4]
 801e956:	2b00      	cmp	r3, #0
 801e958:	d101      	bne.n	801e95e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 801e95a:	2301      	movs	r3, #1
 801e95c:	e10f      	b.n	801eb7e <HAL_SPI_Init+0x232>
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.TxCRCInitializationPattern));
    assert_param(IS_SPI_CRC_INITIALIZATION_PATTERN(hspi->Init.RxCRCInitializationPattern));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 801e95e:	687b      	ldr	r3, [r7, #4]
 801e960:	2200      	movs	r2, #0
 801e962:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  /* Verify that the SPI instance supports Data Size higher than 16bits */
  if ((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (hspi->Init.DataSize > SPI_DATASIZE_16BIT))
 801e964:	687b      	ldr	r3, [r7, #4]
 801e966:	681b      	ldr	r3, [r3, #0]
 801e968:	4a87      	ldr	r2, [pc, #540]	@ (801eb88 <HAL_SPI_Init+0x23c>)
 801e96a:	4293      	cmp	r3, r2
 801e96c:	d00f      	beq.n	801e98e <HAL_SPI_Init+0x42>
 801e96e:	687b      	ldr	r3, [r7, #4]
 801e970:	681b      	ldr	r3, [r3, #0]
 801e972:	4a86      	ldr	r2, [pc, #536]	@ (801eb8c <HAL_SPI_Init+0x240>)
 801e974:	4293      	cmp	r3, r2
 801e976:	d00a      	beq.n	801e98e <HAL_SPI_Init+0x42>
 801e978:	687b      	ldr	r3, [r7, #4]
 801e97a:	681b      	ldr	r3, [r3, #0]
 801e97c:	4a84      	ldr	r2, [pc, #528]	@ (801eb90 <HAL_SPI_Init+0x244>)
 801e97e:	4293      	cmp	r3, r2
 801e980:	d005      	beq.n	801e98e <HAL_SPI_Init+0x42>
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	68db      	ldr	r3, [r3, #12]
 801e986:	2b0f      	cmp	r3, #15
 801e988:	d901      	bls.n	801e98e <HAL_SPI_Init+0x42>
  {
    return HAL_ERROR;
 801e98a:	2301      	movs	r3, #1
 801e98c:	e0f7      	b.n	801eb7e <HAL_SPI_Init+0x232>
  }

  /* Verify that the SPI instance supports requested data packing */
  packet_length = SPI_GetPacketSize(hspi);
 801e98e:	6878      	ldr	r0, [r7, #4]
 801e990:	f000 fbba 	bl	801f108 <SPI_GetPacketSize>
 801e994:	60f8      	str	r0, [r7, #12]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801e996:	687b      	ldr	r3, [r7, #4]
 801e998:	681b      	ldr	r3, [r3, #0]
 801e99a:	4a7b      	ldr	r2, [pc, #492]	@ (801eb88 <HAL_SPI_Init+0x23c>)
 801e99c:	4293      	cmp	r3, r2
 801e99e:	d00c      	beq.n	801e9ba <HAL_SPI_Init+0x6e>
 801e9a0:	687b      	ldr	r3, [r7, #4]
 801e9a2:	681b      	ldr	r3, [r3, #0]
 801e9a4:	4a79      	ldr	r2, [pc, #484]	@ (801eb8c <HAL_SPI_Init+0x240>)
 801e9a6:	4293      	cmp	r3, r2
 801e9a8:	d007      	beq.n	801e9ba <HAL_SPI_Init+0x6e>
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	681b      	ldr	r3, [r3, #0]
 801e9ae:	4a78      	ldr	r2, [pc, #480]	@ (801eb90 <HAL_SPI_Init+0x244>)
 801e9b0:	4293      	cmp	r3, r2
 801e9b2:	d002      	beq.n	801e9ba <HAL_SPI_Init+0x6e>
 801e9b4:	68fb      	ldr	r3, [r7, #12]
 801e9b6:	2b08      	cmp	r3, #8
 801e9b8:	d811      	bhi.n	801e9de <HAL_SPI_Init+0x92>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801e9ba:	687b      	ldr	r3, [r7, #4]
 801e9bc:	681b      	ldr	r3, [r3, #0]
  if (((!IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_LOWEND_FIFO_SIZE)) ||
 801e9be:	4a72      	ldr	r2, [pc, #456]	@ (801eb88 <HAL_SPI_Init+0x23c>)
 801e9c0:	4293      	cmp	r3, r2
 801e9c2:	d009      	beq.n	801e9d8 <HAL_SPI_Init+0x8c>
      ((IS_SPI_HIGHEND_INSTANCE(hspi->Instance)) && (packet_length > SPI_HIGHEND_FIFO_SIZE)))
 801e9c4:	687b      	ldr	r3, [r7, #4]
 801e9c6:	681b      	ldr	r3, [r3, #0]
 801e9c8:	4a70      	ldr	r2, [pc, #448]	@ (801eb8c <HAL_SPI_Init+0x240>)
 801e9ca:	4293      	cmp	r3, r2
 801e9cc:	d004      	beq.n	801e9d8 <HAL_SPI_Init+0x8c>
 801e9ce:	687b      	ldr	r3, [r7, #4]
 801e9d0:	681b      	ldr	r3, [r3, #0]
 801e9d2:	4a6f      	ldr	r2, [pc, #444]	@ (801eb90 <HAL_SPI_Init+0x244>)
 801e9d4:	4293      	cmp	r3, r2
 801e9d6:	d104      	bne.n	801e9e2 <HAL_SPI_Init+0x96>
 801e9d8:	68fb      	ldr	r3, [r7, #12]
 801e9da:	2b10      	cmp	r3, #16
 801e9dc:	d901      	bls.n	801e9e2 <HAL_SPI_Init+0x96>
  {
    return HAL_ERROR;
 801e9de:	2301      	movs	r3, #1
 801e9e0:	e0cd      	b.n	801eb7e <HAL_SPI_Init+0x232>
  {
    crc_length = hspi->Init.DataSize << SPI_CFG1_CRCSIZE_Pos;
  }
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 801e9e2:	687b      	ldr	r3, [r7, #4]
 801e9e4:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801e9e8:	b2db      	uxtb	r3, r3
 801e9ea:	2b00      	cmp	r3, #0
 801e9ec:	d106      	bne.n	801e9fc <HAL_SPI_Init+0xb0>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 801e9ee:	687b      	ldr	r3, [r7, #4]
 801e9f0:	2200      	movs	r2, #0
 801e9f2:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801e9f6:	6878      	ldr	r0, [r7, #4]
 801e9f8:	f7e3 f8b6 	bl	8001b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 801e9fc:	687b      	ldr	r3, [r7, #4]
 801e9fe:	2202      	movs	r2, #2
 801ea00:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801ea04:	687b      	ldr	r3, [r7, #4]
 801ea06:	681b      	ldr	r3, [r3, #0]
 801ea08:	681a      	ldr	r2, [r3, #0]
 801ea0a:	687b      	ldr	r3, [r7, #4]
 801ea0c:	681b      	ldr	r3, [r3, #0]
 801ea0e:	f022 0201 	bic.w	r2, r2, #1
 801ea12:	601a      	str	r2, [r3, #0]

#if (USE_SPI_CRC == 0)
  /* Keep the default value of CRCSIZE in case of CRC is not used */
  crc_length = hspi->Instance->CFG1 & SPI_CFG1_CRCSIZE;
 801ea14:	687b      	ldr	r3, [r7, #4]
 801ea16:	681b      	ldr	r3, [r3, #0]
 801ea18:	689b      	ldr	r3, [r3, #8]
 801ea1a:	f403 13f8 	and.w	r3, r3, #2031616	@ 0x1f0000
 801ea1e:	60bb      	str	r3, [r7, #8]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit, CRC calculation state, CRC Length */

  /* SPIx NSS Software Management Configuration */
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801ea20:	687b      	ldr	r3, [r7, #4]
 801ea22:	699b      	ldr	r3, [r3, #24]
 801ea24:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801ea28:	d119      	bne.n	801ea5e <HAL_SPI_Init+0x112>
 801ea2a:	687b      	ldr	r3, [r7, #4]
 801ea2c:	685b      	ldr	r3, [r3, #4]
 801ea2e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801ea32:	d103      	bne.n	801ea3c <HAL_SPI_Init+0xf0>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801ea34:	687b      	ldr	r3, [r7, #4]
 801ea36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
  if ((hspi->Init.NSS == SPI_NSS_SOFT) && (((hspi->Init.Mode == SPI_MODE_MASTER) &&  \
 801ea38:	2b00      	cmp	r3, #0
 801ea3a:	d008      	beq.n	801ea4e <HAL_SPI_Init+0x102>
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801ea3c:	687b      	ldr	r3, [r7, #4]
 801ea3e:	685b      	ldr	r3, [r3, #4]
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_LOW)) || \
 801ea40:	2b00      	cmp	r3, #0
 801ea42:	d10c      	bne.n	801ea5e <HAL_SPI_Init+0x112>
                                            (hspi->Init.NSSPolarity == SPI_NSS_POLARITY_HIGH))))
 801ea44:	687b      	ldr	r3, [r7, #4]
 801ea46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
                                           ((hspi->Init.Mode == SPI_MODE_SLAVE) && \
 801ea48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ea4c:	d107      	bne.n	801ea5e <HAL_SPI_Init+0x112>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_SSI);
 801ea4e:	687b      	ldr	r3, [r7, #4]
 801ea50:	681b      	ldr	r3, [r3, #0]
 801ea52:	681a      	ldr	r2, [r3, #0]
 801ea54:	687b      	ldr	r3, [r7, #4]
 801ea56:	681b      	ldr	r3, [r3, #0]
 801ea58:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 801ea5c:	601a      	str	r2, [r3, #0]
  }

  /* SPIx Master Rx Auto Suspend Configuration */
  if (((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER) && (hspi->Init.DataSize >= SPI_DATASIZE_8BIT))
 801ea5e:	687b      	ldr	r3, [r7, #4]
 801ea60:	685b      	ldr	r3, [r3, #4]
 801ea62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801ea66:	2b00      	cmp	r3, #0
 801ea68:	d00f      	beq.n	801ea8a <HAL_SPI_Init+0x13e>
 801ea6a:	687b      	ldr	r3, [r7, #4]
 801ea6c:	68db      	ldr	r3, [r3, #12]
 801ea6e:	2b06      	cmp	r3, #6
 801ea70:	d90b      	bls.n	801ea8a <HAL_SPI_Init+0x13e>
  {
    MODIFY_REG(hspi->Instance->CR1, SPI_CR1_MASRX, hspi->Init.MasterReceiverAutoSusp);
 801ea72:	687b      	ldr	r3, [r7, #4]
 801ea74:	681b      	ldr	r3, [r3, #0]
 801ea76:	681b      	ldr	r3, [r3, #0]
 801ea78:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801ea7c:	687b      	ldr	r3, [r7, #4]
 801ea7e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801ea80:	687b      	ldr	r3, [r7, #4]
 801ea82:	681b      	ldr	r3, [r3, #0]
 801ea84:	430a      	orrs	r2, r1
 801ea86:	601a      	str	r2, [r3, #0]
 801ea88:	e007      	b.n	801ea9a <HAL_SPI_Init+0x14e>
  }
  else
  {
    CLEAR_BIT(hspi->Instance->CR1, SPI_CR1_MASRX);
 801ea8a:	687b      	ldr	r3, [r7, #4]
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	681a      	ldr	r2, [r3, #0]
 801ea90:	687b      	ldr	r3, [r7, #4]
 801ea92:	681b      	ldr	r3, [r3, #0]
 801ea94:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801ea98:	601a      	str	r2, [r3, #0]
  }

  /* SPIx CFG1 Configuration */
  WRITE_REG(hspi->Instance->CFG1, (hspi->Init.BaudRatePrescaler | hspi->Init.CRCCalculation | crc_length |
 801ea9a:	687b      	ldr	r3, [r7, #4]
 801ea9c:	69da      	ldr	r2, [r3, #28]
 801ea9e:	687b      	ldr	r3, [r7, #4]
 801eaa0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801eaa2:	431a      	orrs	r2, r3
 801eaa4:	68bb      	ldr	r3, [r7, #8]
 801eaa6:	431a      	orrs	r2, r3
 801eaa8:	687b      	ldr	r3, [r7, #4]
 801eaaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801eaac:	ea42 0103 	orr.w	r1, r2, r3
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	68da      	ldr	r2, [r3, #12]
 801eab4:	687b      	ldr	r3, [r7, #4]
 801eab6:	681b      	ldr	r3, [r3, #0]
 801eab8:	430a      	orrs	r2, r1
 801eaba:	609a      	str	r2, [r3, #8]
                                   hspi->Init.FifoThreshold     | hspi->Init.DataSize));

  /* SPIx CFG2 Configuration */
  WRITE_REG(hspi->Instance->CFG2, (hspi->Init.NSSPMode                | hspi->Init.TIMode    |
 801eabc:	687b      	ldr	r3, [r7, #4]
 801eabe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801eac0:	687b      	ldr	r3, [r7, #4]
 801eac2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801eac4:	431a      	orrs	r2, r3
 801eac6:	687b      	ldr	r3, [r7, #4]
 801eac8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eaca:	431a      	orrs	r2, r3
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	699b      	ldr	r3, [r3, #24]
 801ead0:	431a      	orrs	r2, r3
 801ead2:	687b      	ldr	r3, [r7, #4]
 801ead4:	691b      	ldr	r3, [r3, #16]
 801ead6:	431a      	orrs	r2, r3
 801ead8:	687b      	ldr	r3, [r7, #4]
 801eada:	695b      	ldr	r3, [r3, #20]
 801eadc:	431a      	orrs	r2, r3
 801eade:	687b      	ldr	r3, [r7, #4]
 801eae0:	6a1b      	ldr	r3, [r3, #32]
 801eae2:	431a      	orrs	r2, r3
 801eae4:	687b      	ldr	r3, [r7, #4]
 801eae6:	685b      	ldr	r3, [r3, #4]
 801eae8:	431a      	orrs	r2, r3
 801eaea:	687b      	ldr	r3, [r7, #4]
 801eaec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801eaee:	431a      	orrs	r2, r3
 801eaf0:	687b      	ldr	r3, [r7, #4]
 801eaf2:	689b      	ldr	r3, [r3, #8]
 801eaf4:	431a      	orrs	r2, r3
 801eaf6:	687b      	ldr	r3, [r7, #4]
 801eaf8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801eafa:	ea42 0103 	orr.w	r1, r2, r3
 801eafe:	687b      	ldr	r3, [r7, #4]
 801eb00:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 801eb02:	687b      	ldr	r3, [r7, #4]
 801eb04:	681b      	ldr	r3, [r3, #0]
 801eb06:	430a      	orrs	r2, r1
 801eb08:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* USE_SPI_CRC */

  /* Insure that Underrun configuration is managed only by Salve */
  if (hspi->Init.Mode == SPI_MODE_SLAVE)
 801eb0a:	687b      	ldr	r3, [r7, #4]
 801eb0c:	685b      	ldr	r3, [r3, #4]
 801eb0e:	2b00      	cmp	r3, #0
 801eb10:	d113      	bne.n	801eb3a <HAL_SPI_Init+0x1ee>
    /* Set Default Underrun configuration */
#if (USE_SPI_CRC != 0UL)
    if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_DISABLE)
#endif /* USE_SPI_CRC */
    {
      MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRDET, SPI_CFG1_UDRDET_0);
 801eb12:	687b      	ldr	r3, [r7, #4]
 801eb14:	681b      	ldr	r3, [r3, #0]
 801eb16:	689b      	ldr	r3, [r3, #8]
 801eb18:	f423 52c0 	bic.w	r2, r3, #6144	@ 0x1800
 801eb1c:	687b      	ldr	r3, [r7, #4]
 801eb1e:	681b      	ldr	r3, [r3, #0]
 801eb20:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801eb24:	609a      	str	r2, [r3, #8]
    }
    MODIFY_REG(hspi->Instance->CFG1, SPI_CFG1_UDRCFG, SPI_CFG1_UDRCFG_1);
 801eb26:	687b      	ldr	r3, [r7, #4]
 801eb28:	681b      	ldr	r3, [r3, #0]
 801eb2a:	689b      	ldr	r3, [r3, #8]
 801eb2c:	f423 62c0 	bic.w	r2, r3, #1536	@ 0x600
 801eb30:	687b      	ldr	r3, [r7, #4]
 801eb32:	681b      	ldr	r3, [r3, #0]
 801eb34:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 801eb38:	609a      	str	r2, [r3, #8]
  }

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 801eb3a:	687b      	ldr	r3, [r7, #4]
 801eb3c:	681b      	ldr	r3, [r3, #0]
 801eb3e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801eb40:	687b      	ldr	r3, [r7, #4]
 801eb42:	681b      	ldr	r3, [r3, #0]
 801eb44:	f022 0201 	bic.w	r2, r2, #1
 801eb48:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /* SPI_I2SCFGR_I2SMOD */

  /* Insure that AFCNTR is managed only by Master */
  if ((hspi->Init.Mode & SPI_MODE_MASTER) == SPI_MODE_MASTER)
 801eb4a:	687b      	ldr	r3, [r7, #4]
 801eb4c:	685b      	ldr	r3, [r3, #4]
 801eb4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801eb52:	2b00      	cmp	r3, #0
 801eb54:	d00a      	beq.n	801eb6c <HAL_SPI_Init+0x220>
  {
    /* Alternate function GPIOs control */
    MODIFY_REG(hspi->Instance->CFG2, SPI_CFG2_AFCNTR, (hspi->Init.MasterKeepIOState));
 801eb56:	687b      	ldr	r3, [r7, #4]
 801eb58:	681b      	ldr	r3, [r3, #0]
 801eb5a:	68db      	ldr	r3, [r3, #12]
 801eb5c:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801eb60:	687b      	ldr	r3, [r7, #4]
 801eb62:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801eb64:	687b      	ldr	r3, [r7, #4]
 801eb66:	681b      	ldr	r3, [r3, #0]
 801eb68:	430a      	orrs	r2, r1
 801eb6a:	60da      	str	r2, [r3, #12]
  }

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 801eb6c:	687b      	ldr	r3, [r7, #4]
 801eb6e:	2200      	movs	r2, #0
 801eb70:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  hspi->State     = HAL_SPI_STATE_READY;
 801eb74:	687b      	ldr	r3, [r7, #4]
 801eb76:	2201      	movs	r2, #1
 801eb78:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

  return HAL_OK;
 801eb7c:	2300      	movs	r3, #0
}
 801eb7e:	4618      	mov	r0, r3
 801eb80:	3710      	adds	r7, #16
 801eb82:	46bd      	mov	sp, r7
 801eb84:	bd80      	pop	{r7, pc}
 801eb86:	bf00      	nop
 801eb88:	40013000 	.word	0x40013000
 801eb8c:	40003800 	.word	0x40003800
 801eb90:	40003c00 	.word	0x40003c00

0801eb94 <HAL_SPI_IRQHandler>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 801eb94:	b580      	push	{r7, lr}
 801eb96:	b08a      	sub	sp, #40	@ 0x28
 801eb98:	af00      	add	r7, sp, #0
 801eb9a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->IER;
 801eb9c:	687b      	ldr	r3, [r7, #4]
 801eb9e:	681b      	ldr	r3, [r3, #0]
 801eba0:	691b      	ldr	r3, [r3, #16]
 801eba2:	623b      	str	r3, [r7, #32]
  uint32_t itflag   = hspi->Instance->SR;
 801eba4:	687b      	ldr	r3, [r7, #4]
 801eba6:	681b      	ldr	r3, [r3, #0]
 801eba8:	695b      	ldr	r3, [r3, #20]
 801ebaa:	61fb      	str	r3, [r7, #28]
  uint32_t trigger  = itsource & itflag;
 801ebac:	6a3a      	ldr	r2, [r7, #32]
 801ebae:	69fb      	ldr	r3, [r7, #28]
 801ebb0:	4013      	ands	r3, r2
 801ebb2:	61bb      	str	r3, [r7, #24]
  uint32_t cfg1     = hspi->Instance->CFG1;
 801ebb4:	687b      	ldr	r3, [r7, #4]
 801ebb6:	681b      	ldr	r3, [r3, #0]
 801ebb8:	689b      	ldr	r3, [r3, #8]
 801ebba:	617b      	str	r3, [r7, #20]
  uint32_t handled  = 0UL;
 801ebbc:	2300      	movs	r3, #0
 801ebbe:	627b      	str	r3, [r7, #36]	@ 0x24

  HAL_SPI_StateTypeDef State = hspi->State;
 801ebc0:	687b      	ldr	r3, [r7, #4]
 801ebc2:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801ebc6:	74fb      	strb	r3, [r7, #19]
#if defined (__GNUC__)
  __IO uint16_t *prxdr_16bits = (__IO uint16_t *)(&(hspi->Instance->RXDR));
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	681b      	ldr	r3, [r3, #0]
 801ebcc:	3330      	adds	r3, #48	@ 0x30
 801ebce:	60fb      	str	r3, [r7, #12]
#endif /* __GNUC__ */

  /* SPI in SUSPEND mode  ----------------------------------------------------*/
  if (HAL_IS_BIT_SET(itflag, SPI_FLAG_SUSP) && HAL_IS_BIT_SET(itsource, SPI_FLAG_EOT))
 801ebd0:	69fb      	ldr	r3, [r7, #28]
 801ebd2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801ebd6:	2b00      	cmp	r3, #0
 801ebd8:	d010      	beq.n	801ebfc <HAL_SPI_IRQHandler+0x68>
 801ebda:	6a3b      	ldr	r3, [r7, #32]
 801ebdc:	f003 0308 	and.w	r3, r3, #8
 801ebe0:	2b00      	cmp	r3, #0
 801ebe2:	d00b      	beq.n	801ebfc <HAL_SPI_IRQHandler+0x68>
  {
    /* Clear the Suspend flag */
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801ebe4:	687b      	ldr	r3, [r7, #4]
 801ebe6:	681b      	ldr	r3, [r3, #0]
 801ebe8:	699a      	ldr	r2, [r3, #24]
 801ebea:	687b      	ldr	r3, [r7, #4]
 801ebec:	681b      	ldr	r3, [r3, #0]
 801ebee:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801ebf2:	619a      	str	r2, [r3, #24]

    /* Suspend on going, Call the Suspend callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
    hspi->SuspendCallback(hspi);
#else
    HAL_SPI_SuspendCallback(hspi);
 801ebf4:	6878      	ldr	r0, [r7, #4]
 801ebf6:	f000 f9c3 	bl	801ef80 <HAL_SPI_SuspendCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    return;
 801ebfa:	e192      	b.n	801ef22 <HAL_SPI_IRQHandler+0x38e>
  }

  /* SPI in mode Transmitter and Receiver ------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801ebfc:	69bb      	ldr	r3, [r7, #24]
 801ebfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ec02:	2b00      	cmp	r3, #0
 801ec04:	d113      	bne.n	801ec2e <HAL_SPI_IRQHandler+0x9a>
 801ec06:	69bb      	ldr	r3, [r7, #24]
 801ec08:	f003 0320 	and.w	r3, r3, #32
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	d10e      	bne.n	801ec2e <HAL_SPI_IRQHandler+0x9a>
      HAL_IS_BIT_SET(trigger, SPI_FLAG_DXP))
 801ec10:	69bb      	ldr	r3, [r7, #24]
 801ec12:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && \
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	d009      	beq.n	801ec2e <HAL_SPI_IRQHandler+0x9a>
  {
    hspi->TxISR(hspi);
 801ec1a:	687b      	ldr	r3, [r7, #4]
 801ec1c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec1e:	6878      	ldr	r0, [r7, #4]
 801ec20:	4798      	blx	r3
    hspi->RxISR(hspi);
 801ec22:	687b      	ldr	r3, [r7, #4]
 801ec24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ec26:	6878      	ldr	r0, [r7, #4]
 801ec28:	4798      	blx	r3
    handled = 1UL;
 801ec2a:	2301      	movs	r3, #1
 801ec2c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Receiver ----------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801ec2e:	69bb      	ldr	r3, [r7, #24]
 801ec30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801ec34:	2b00      	cmp	r3, #0
 801ec36:	d10f      	bne.n	801ec58 <HAL_SPI_IRQHandler+0xc4>
 801ec38:	69bb      	ldr	r3, [r7, #24]
 801ec3a:	f003 0301 	and.w	r3, r3, #1
 801ec3e:	2b00      	cmp	r3, #0
 801ec40:	d00a      	beq.n	801ec58 <HAL_SPI_IRQHandler+0xc4>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801ec42:	69bb      	ldr	r3, [r7, #24]
 801ec44:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_OVR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_RXP) && \
 801ec48:	2b00      	cmp	r3, #0
 801ec4a:	d105      	bne.n	801ec58 <HAL_SPI_IRQHandler+0xc4>
  {
    hspi->RxISR(hspi);
 801ec4c:	687b      	ldr	r3, [r7, #4]
 801ec4e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ec50:	6878      	ldr	r0, [r7, #4]
 801ec52:	4798      	blx	r3
    handled = 1UL;
 801ec54:	2301      	movs	r3, #1
 801ec56:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801ec58:	69bb      	ldr	r3, [r7, #24]
 801ec5a:	f003 0320 	and.w	r3, r3, #32
 801ec5e:	2b00      	cmp	r3, #0
 801ec60:	d10f      	bne.n	801ec82 <HAL_SPI_IRQHandler+0xee>
 801ec62:	69bb      	ldr	r3, [r7, #24]
 801ec64:	f003 0302 	and.w	r3, r3, #2
 801ec68:	2b00      	cmp	r3, #0
 801ec6a:	d00a      	beq.n	801ec82 <HAL_SPI_IRQHandler+0xee>
      HAL_IS_BIT_CLR(trigger, SPI_FLAG_DXP))
 801ec6c:	69bb      	ldr	r3, [r7, #24]
 801ec6e:	f003 0304 	and.w	r3, r3, #4
  if (HAL_IS_BIT_CLR(trigger, SPI_FLAG_UDR) && HAL_IS_BIT_SET(trigger, SPI_FLAG_TXP) && \
 801ec72:	2b00      	cmp	r3, #0
 801ec74:	d105      	bne.n	801ec82 <HAL_SPI_IRQHandler+0xee>
  {
    hspi->TxISR(hspi);
 801ec76:	687b      	ldr	r3, [r7, #4]
 801ec78:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801ec7a:	6878      	ldr	r0, [r7, #4]
 801ec7c:	4798      	blx	r3
    handled = 1UL;
 801ec7e:	2301      	movs	r3, #1
 801ec80:	627b      	str	r3, [r7, #36]	@ 0x24
  {
    __HAL_SPI_CLEAR_TSERFFLAG(hspi);
  }
#endif /* USE_SPI_RELOAD_TRANSFER */

  if (handled != 0UL)
 801ec82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec84:	2b00      	cmp	r3, #0
 801ec86:	f040 8147 	bne.w	801ef18 <HAL_SPI_IRQHandler+0x384>
  {
    return;
  }

  /* SPI End Of Transfer: DMA or IT based transfer */
  if (HAL_IS_BIT_SET(trigger, SPI_FLAG_EOT))
 801ec8a:	69bb      	ldr	r3, [r7, #24]
 801ec8c:	f003 0308 	and.w	r3, r3, #8
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	f000 808b 	beq.w	801edac <HAL_SPI_IRQHandler+0x218>
  {
    /* Clear EOT/TXTF/SUSP flag */
    __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801ec96:	687b      	ldr	r3, [r7, #4]
 801ec98:	681b      	ldr	r3, [r3, #0]
 801ec9a:	699a      	ldr	r2, [r3, #24]
 801ec9c:	687b      	ldr	r3, [r7, #4]
 801ec9e:	681b      	ldr	r3, [r3, #0]
 801eca0:	f042 0208 	orr.w	r2, r2, #8
 801eca4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801eca6:	687b      	ldr	r3, [r7, #4]
 801eca8:	681b      	ldr	r3, [r3, #0]
 801ecaa:	699a      	ldr	r2, [r3, #24]
 801ecac:	687b      	ldr	r3, [r7, #4]
 801ecae:	681b      	ldr	r3, [r3, #0]
 801ecb0:	f042 0210 	orr.w	r2, r2, #16
 801ecb4:	619a      	str	r2, [r3, #24]
    __HAL_SPI_CLEAR_SUSPFLAG(hspi);
 801ecb6:	687b      	ldr	r3, [r7, #4]
 801ecb8:	681b      	ldr	r3, [r3, #0]
 801ecba:	699a      	ldr	r2, [r3, #24]
 801ecbc:	687b      	ldr	r3, [r7, #4]
 801ecbe:	681b      	ldr	r3, [r3, #0]
 801ecc0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 801ecc4:	619a      	str	r2, [r3, #24]

    /* Disable EOT interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_EOT);
 801ecc6:	687b      	ldr	r3, [r7, #4]
 801ecc8:	681b      	ldr	r3, [r3, #0]
 801ecca:	691a      	ldr	r2, [r3, #16]
 801eccc:	687b      	ldr	r3, [r7, #4]
 801ecce:	681b      	ldr	r3, [r3, #0]
 801ecd0:	f022 0208 	bic.w	r2, r2, #8
 801ecd4:	611a      	str	r2, [r3, #16]

    /* For the IT based receive extra polling maybe required for last packet */
    if (HAL_IS_BIT_CLR(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801ecd6:	687b      	ldr	r3, [r7, #4]
 801ecd8:	681b      	ldr	r3, [r3, #0]
 801ecda:	689b      	ldr	r3, [r3, #8]
 801ecdc:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801ece0:	2b00      	cmp	r3, #0
 801ece2:	d13d      	bne.n	801ed60 <HAL_SPI_IRQHandler+0x1cc>
    {
      /* Pooling remaining data */
      while (hspi->RxXferCount != 0UL)
 801ece4:	e036      	b.n	801ed54 <HAL_SPI_IRQHandler+0x1c0>
      {
        /* Receive data in 32 Bit mode */
        if (hspi->Init.DataSize > SPI_DATASIZE_16BIT)
 801ece6:	687b      	ldr	r3, [r7, #4]
 801ece8:	68db      	ldr	r3, [r3, #12]
 801ecea:	2b0f      	cmp	r3, #15
 801ecec:	d90b      	bls.n	801ed06 <HAL_SPI_IRQHandler+0x172>
        {
          *((uint32_t *)hspi->pRxBuffPtr) = *((__IO uint32_t *)&hspi->Instance->RXDR);
 801ecee:	687b      	ldr	r3, [r7, #4]
 801ecf0:	681a      	ldr	r2, [r3, #0]
 801ecf2:	687b      	ldr	r3, [r7, #4]
 801ecf4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ecf6:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 801ecf8:	601a      	str	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint32_t);
 801ecfa:	687b      	ldr	r3, [r7, #4]
 801ecfc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ecfe:	1d1a      	adds	r2, r3, #4
 801ed00:	687b      	ldr	r3, [r7, #4]
 801ed02:	665a      	str	r2, [r3, #100]	@ 0x64
 801ed04:	e01d      	b.n	801ed42 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 16 Bit mode */
        else if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 801ed06:	687b      	ldr	r3, [r7, #4]
 801ed08:	68db      	ldr	r3, [r3, #12]
 801ed0a:	2b07      	cmp	r3, #7
 801ed0c:	d90b      	bls.n	801ed26 <HAL_SPI_IRQHandler+0x192>
        {
#if defined (__GNUC__)
          *((uint16_t *)hspi->pRxBuffPtr) = *prxdr_16bits;
 801ed0e:	687b      	ldr	r3, [r7, #4]
 801ed10:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ed12:	68fa      	ldr	r2, [r7, #12]
 801ed14:	8812      	ldrh	r2, [r2, #0]
 801ed16:	b292      	uxth	r2, r2
 801ed18:	801a      	strh	r2, [r3, #0]
#else
          *((uint16_t *)hspi->pRxBuffPtr) = *((__IO uint16_t *)&hspi->Instance->RXDR);
#endif /* __GNUC__ */
          hspi->pRxBuffPtr += sizeof(uint16_t);
 801ed1a:	687b      	ldr	r3, [r7, #4]
 801ed1c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ed1e:	1c9a      	adds	r2, r3, #2
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	665a      	str	r2, [r3, #100]	@ 0x64
 801ed24:	e00d      	b.n	801ed42 <HAL_SPI_IRQHandler+0x1ae>
        }
        /* Receive data in 8 Bit mode */
        else
        {
          *((uint8_t *)hspi->pRxBuffPtr) = *((__IO uint8_t *)&hspi->Instance->RXDR);
 801ed26:	687b      	ldr	r3, [r7, #4]
 801ed28:	681b      	ldr	r3, [r3, #0]
 801ed2a:	f103 0230 	add.w	r2, r3, #48	@ 0x30
 801ed2e:	687b      	ldr	r3, [r7, #4]
 801ed30:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ed32:	7812      	ldrb	r2, [r2, #0]
 801ed34:	b2d2      	uxtb	r2, r2
 801ed36:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint8_t);
 801ed38:	687b      	ldr	r3, [r7, #4]
 801ed3a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ed3c:	1c5a      	adds	r2, r3, #1
 801ed3e:	687b      	ldr	r3, [r7, #4]
 801ed40:	665a      	str	r2, [r3, #100]	@ 0x64
        }

        hspi->RxXferCount--;
 801ed42:	687b      	ldr	r3, [r7, #4]
 801ed44:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801ed48:	b29b      	uxth	r3, r3
 801ed4a:	3b01      	subs	r3, #1
 801ed4c:	b29a      	uxth	r2, r3
 801ed4e:	687b      	ldr	r3, [r7, #4]
 801ed50:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
      while (hspi->RxXferCount != 0UL)
 801ed54:	687b      	ldr	r3, [r7, #4]
 801ed56:	f8b3 306a 	ldrh.w	r3, [r3, #106]	@ 0x6a
 801ed5a:	b29b      	uxth	r3, r3
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	d1c2      	bne.n	801ece6 <HAL_SPI_IRQHandler+0x152>
      }
    }

    /* Call SPI Standard close procedure */
    SPI_CloseTransfer(hspi);
 801ed60:	6878      	ldr	r0, [r7, #4]
 801ed62:	f000 f931 	bl	801efc8 <SPI_CloseTransfer>

    hspi->State = HAL_SPI_STATE_READY;
 801ed66:	687b      	ldr	r3, [r7, #4]
 801ed68:	2201      	movs	r2, #1
 801ed6a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ed6e:	687b      	ldr	r3, [r7, #4]
 801ed70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ed74:	2b00      	cmp	r3, #0
 801ed76:	d003      	beq.n	801ed80 <HAL_SPI_IRQHandler+0x1ec>
    {
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 801ed78:	6878      	ldr	r0, [r7, #4]
 801ed7a:	f000 f8f7 	bl	801ef6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 801ed7e:	e0d0      	b.n	801ef22 <HAL_SPI_IRQHandler+0x38e>
    {
      hspi->TxCpltCallback(hspi);
    }
#else
    /* Call appropriate user callback */
    if (State == HAL_SPI_STATE_BUSY_TX_RX)
 801ed80:	7cfb      	ldrb	r3, [r7, #19]
 801ed82:	2b05      	cmp	r3, #5
 801ed84:	d103      	bne.n	801ed8e <HAL_SPI_IRQHandler+0x1fa>
    {
      HAL_SPI_TxRxCpltCallback(hspi);
 801ed86:	6878      	ldr	r0, [r7, #4]
 801ed88:	f000 f8e6 	bl	801ef58 <HAL_SPI_TxRxCpltCallback>
    else
    {
      /* End of the appropriate call */
    }

    return;
 801ed8c:	e0c6      	b.n	801ef1c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_RX)
 801ed8e:	7cfb      	ldrb	r3, [r7, #19]
 801ed90:	2b04      	cmp	r3, #4
 801ed92:	d103      	bne.n	801ed9c <HAL_SPI_IRQHandler+0x208>
      HAL_SPI_RxCpltCallback(hspi);
 801ed94:	6878      	ldr	r0, [r7, #4]
 801ed96:	f000 f8d5 	bl	801ef44 <HAL_SPI_RxCpltCallback>
    return;
 801ed9a:	e0bf      	b.n	801ef1c <HAL_SPI_IRQHandler+0x388>
    else if (State == HAL_SPI_STATE_BUSY_TX)
 801ed9c:	7cfb      	ldrb	r3, [r7, #19]
 801ed9e:	2b03      	cmp	r3, #3
 801eda0:	f040 80bc 	bne.w	801ef1c <HAL_SPI_IRQHandler+0x388>
      HAL_SPI_TxCpltCallback(hspi);
 801eda4:	6878      	ldr	r0, [r7, #4]
 801eda6:	f000 f8c3 	bl	801ef30 <HAL_SPI_TxCpltCallback>
    return;
 801edaa:	e0b7      	b.n	801ef1c <HAL_SPI_IRQHandler+0x388>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if ((trigger & (SPI_FLAG_MODF | SPI_FLAG_OVR | SPI_FLAG_FRE | SPI_FLAG_UDR)) != 0UL)
 801edac:	69bb      	ldr	r3, [r7, #24]
 801edae:	f403 7358 	and.w	r3, r3, #864	@ 0x360
 801edb2:	2b00      	cmp	r3, #0
 801edb4:	f000 80b5 	beq.w	801ef22 <HAL_SPI_IRQHandler+0x38e>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if ((trigger & SPI_FLAG_OVR) != 0UL)
 801edb8:	69bb      	ldr	r3, [r7, #24]
 801edba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801edbe:	2b00      	cmp	r3, #0
 801edc0:	d00f      	beq.n	801ede2 <HAL_SPI_IRQHandler+0x24e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801edc2:	687b      	ldr	r3, [r7, #4]
 801edc4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801edc8:	f043 0204 	orr.w	r2, r3, #4
 801edcc:	687b      	ldr	r3, [r7, #4]
 801edce:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801edd2:	687b      	ldr	r3, [r7, #4]
 801edd4:	681b      	ldr	r3, [r3, #0]
 801edd6:	699a      	ldr	r2, [r3, #24]
 801edd8:	687b      	ldr	r3, [r7, #4]
 801edda:	681b      	ldr	r3, [r3, #0]
 801eddc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801ede0:	619a      	str	r2, [r3, #24]
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if ((trigger & SPI_FLAG_MODF) != 0UL)
 801ede2:	69bb      	ldr	r3, [r7, #24]
 801ede4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801ede8:	2b00      	cmp	r3, #0
 801edea:	d00f      	beq.n	801ee0c <HAL_SPI_IRQHandler+0x278>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801edec:	687b      	ldr	r3, [r7, #4]
 801edee:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801edf2:	f043 0201 	orr.w	r2, r3, #1
 801edf6:	687b      	ldr	r3, [r7, #4]
 801edf8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801edfc:	687b      	ldr	r3, [r7, #4]
 801edfe:	681b      	ldr	r3, [r3, #0]
 801ee00:	699a      	ldr	r2, [r3, #24]
 801ee02:	687b      	ldr	r3, [r7, #4]
 801ee04:	681b      	ldr	r3, [r3, #0]
 801ee06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801ee0a:	619a      	str	r2, [r3, #24]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_FRE) != 0UL)
 801ee0c:	69bb      	ldr	r3, [r7, #24]
 801ee0e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ee12:	2b00      	cmp	r3, #0
 801ee14:	d00f      	beq.n	801ee36 <HAL_SPI_IRQHandler+0x2a2>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801ee16:	687b      	ldr	r3, [r7, #4]
 801ee18:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ee1c:	f043 0208 	orr.w	r2, r3, #8
 801ee20:	687b      	ldr	r3, [r7, #4]
 801ee22:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 801ee26:	687b      	ldr	r3, [r7, #4]
 801ee28:	681b      	ldr	r3, [r3, #0]
 801ee2a:	699a      	ldr	r2, [r3, #24]
 801ee2c:	687b      	ldr	r3, [r7, #4]
 801ee2e:	681b      	ldr	r3, [r3, #0]
 801ee30:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801ee34:	619a      	str	r2, [r3, #24]
    }

    /* SPI Underrun error interrupt occurred ------------------------------------*/
    if ((trigger & SPI_FLAG_UDR) != 0UL)
 801ee36:	69bb      	ldr	r3, [r7, #24]
 801ee38:	f003 0320 	and.w	r3, r3, #32
 801ee3c:	2b00      	cmp	r3, #0
 801ee3e:	d00f      	beq.n	801ee60 <HAL_SPI_IRQHandler+0x2cc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801ee40:	687b      	ldr	r3, [r7, #4]
 801ee42:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ee46:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801ee4a:	687b      	ldr	r3, [r7, #4]
 801ee4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801ee50:	687b      	ldr	r3, [r7, #4]
 801ee52:	681b      	ldr	r3, [r3, #0]
 801ee54:	699a      	ldr	r2, [r3, #24]
 801ee56:	687b      	ldr	r3, [r7, #4]
 801ee58:	681b      	ldr	r3, [r3, #0]
 801ee5a:	f042 0220 	orr.w	r2, r2, #32
 801ee5e:	619a      	str	r2, [r3, #24]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801ee60:	687b      	ldr	r3, [r7, #4]
 801ee62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801ee66:	2b00      	cmp	r3, #0
 801ee68:	d05a      	beq.n	801ef20 <HAL_SPI_IRQHandler+0x38c>
    {
      /* Disable SPI peripheral */
      __HAL_SPI_DISABLE(hspi);
 801ee6a:	687b      	ldr	r3, [r7, #4]
 801ee6c:	681b      	ldr	r3, [r3, #0]
 801ee6e:	681a      	ldr	r2, [r3, #0]
 801ee70:	687b      	ldr	r3, [r7, #4]
 801ee72:	681b      	ldr	r3, [r3, #0]
 801ee74:	f022 0201 	bic.w	r2, r2, #1
 801ee78:	601a      	str	r2, [r3, #0]

      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_RXP | SPI_IT_TXP | SPI_IT_MODF |
 801ee7a:	687b      	ldr	r3, [r7, #4]
 801ee7c:	681b      	ldr	r3, [r3, #0]
 801ee7e:	6919      	ldr	r1, [r3, #16]
 801ee80:	687b      	ldr	r3, [r7, #4]
 801ee82:	681a      	ldr	r2, [r3, #0]
 801ee84:	4b28      	ldr	r3, [pc, #160]	@ (801ef28 <HAL_SPI_IRQHandler+0x394>)
 801ee86:	400b      	ands	r3, r1
 801ee88:	6113      	str	r3, [r2, #16]
                                  SPI_IT_OVR | SPI_IT_FRE | SPI_IT_UDR));

      /* Disable the SPI DMA requests if enabled */
      if (HAL_IS_BIT_SET(cfg1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN))
 801ee8a:	697b      	ldr	r3, [r7, #20]
 801ee8c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 801ee90:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 801ee94:	d138      	bne.n	801ef08 <HAL_SPI_IRQHandler+0x374>
      {
        /* Disable the SPI DMA requests */
        CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801ee96:	687b      	ldr	r3, [r7, #4]
 801ee98:	681b      	ldr	r3, [r3, #0]
 801ee9a:	689a      	ldr	r2, [r3, #8]
 801ee9c:	687b      	ldr	r3, [r7, #4]
 801ee9e:	681b      	ldr	r3, [r3, #0]
 801eea0:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801eea4:	609a      	str	r2, [r3, #8]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 801eea6:	687b      	ldr	r3, [r7, #4]
 801eea8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801eeaa:	2b00      	cmp	r3, #0
 801eeac:	d013      	beq.n	801eed6 <HAL_SPI_IRQHandler+0x342>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 801eeae:	687b      	ldr	r3, [r7, #4]
 801eeb0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801eeb2:	4a1e      	ldr	r2, [pc, #120]	@ (801ef2c <HAL_SPI_IRQHandler+0x398>)
 801eeb4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 801eeb6:	687b      	ldr	r3, [r7, #4]
 801eeb8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801eeba:	4618      	mov	r0, r3
 801eebc:	f7fb f850 	bl	8019f60 <HAL_DMA_Abort_IT>
 801eec0:	4603      	mov	r3, r0
 801eec2:	2b00      	cmp	r3, #0
 801eec4:	d007      	beq.n	801eed6 <HAL_SPI_IRQHandler+0x342>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801eec6:	687b      	ldr	r3, [r7, #4]
 801eec8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801eecc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801eed0:	687b      	ldr	r3, [r7, #4]
 801eed2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 801eed6:	687b      	ldr	r3, [r7, #4]
 801eed8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801eeda:	2b00      	cmp	r3, #0
 801eedc:	d020      	beq.n	801ef20 <HAL_SPI_IRQHandler+0x38c>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 801eede:	687b      	ldr	r3, [r7, #4]
 801eee0:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801eee2:	4a12      	ldr	r2, [pc, #72]	@ (801ef2c <HAL_SPI_IRQHandler+0x398>)
 801eee4:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 801eee6:	687b      	ldr	r3, [r7, #4]
 801eee8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801eeea:	4618      	mov	r0, r3
 801eeec:	f7fb f838 	bl	8019f60 <HAL_DMA_Abort_IT>
 801eef0:	4603      	mov	r3, r0
 801eef2:	2b00      	cmp	r3, #0
 801eef4:	d014      	beq.n	801ef20 <HAL_SPI_IRQHandler+0x38c>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 801eef6:	687b      	ldr	r3, [r7, #4]
 801eef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801eefc:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801ef00:	687b      	ldr	r3, [r7, #4]
 801ef02:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#else
        HAL_SPI_ErrorCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 801ef06:	e00b      	b.n	801ef20 <HAL_SPI_IRQHandler+0x38c>
        hspi->State = HAL_SPI_STATE_READY;
 801ef08:	687b      	ldr	r3, [r7, #4]
 801ef0a:	2201      	movs	r2, #1
 801ef0c:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        HAL_SPI_ErrorCallback(hspi);
 801ef10:	6878      	ldr	r0, [r7, #4]
 801ef12:	f000 f82b 	bl	801ef6c <HAL_SPI_ErrorCallback>
    return;
 801ef16:	e003      	b.n	801ef20 <HAL_SPI_IRQHandler+0x38c>
    return;
 801ef18:	bf00      	nop
 801ef1a:	e002      	b.n	801ef22 <HAL_SPI_IRQHandler+0x38e>
    return;
 801ef1c:	bf00      	nop
 801ef1e:	e000      	b.n	801ef22 <HAL_SPI_IRQHandler+0x38e>
    return;
 801ef20:	bf00      	nop
  }
}
 801ef22:	3728      	adds	r7, #40	@ 0x28
 801ef24:	46bd      	mov	sp, r7
 801ef26:	bd80      	pop	{r7, pc}
 801ef28:	fffffc94 	.word	0xfffffc94
 801ef2c:	0801ef95 	.word	0x0801ef95

0801ef30 <HAL_SPI_TxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801ef30:	b480      	push	{r7}
 801ef32:	b083      	sub	sp, #12
 801ef34:	af00      	add	r7, sp, #0
 801ef36:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 801ef38:	bf00      	nop
 801ef3a:	370c      	adds	r7, #12
 801ef3c:	46bd      	mov	sp, r7
 801ef3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef42:	4770      	bx	lr

0801ef44 <HAL_SPI_RxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801ef44:	b480      	push	{r7}
 801ef46:	b083      	sub	sp, #12
 801ef48:	af00      	add	r7, sp, #0
 801ef4a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxCpltCallback should be implemented in the user file
   */
}
 801ef4c:	bf00      	nop
 801ef4e:	370c      	adds	r7, #12
 801ef50:	46bd      	mov	sp, r7
 801ef52:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef56:	4770      	bx	lr

0801ef58 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801ef58:	b480      	push	{r7}
 801ef5a:	b083      	sub	sp, #12
 801ef5c:	af00      	add	r7, sp, #0
 801ef5e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 801ef60:	bf00      	nop
 801ef62:	370c      	adds	r7, #12
 801ef64:	46bd      	mov	sp, r7
 801ef66:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef6a:	4770      	bx	lr

0801ef6c <HAL_SPI_ErrorCallback>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801ef6c:	b480      	push	{r7}
 801ef6e:	b083      	sub	sp, #12
 801ef70:	af00      	add	r7, sp, #0
 801ef72:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 801ef74:	bf00      	nop
 801ef76:	370c      	adds	r7, #12
 801ef78:	46bd      	mov	sp, r7
 801ef7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef7e:	4770      	bx	lr

0801ef80 <HAL_SPI_SuspendCallback>:
  * @brief  SPI Suspend callback.
  * @param  hspi SPI handle.
  * @retval None
  */
__weak void HAL_SPI_SuspendCallback(SPI_HandleTypeDef *hspi) /* Derogation MISRAC2012-Rule-8.13 */
{
 801ef80:	b480      	push	{r7}
 801ef82:	b083      	sub	sp, #12
 801ef84:	af00      	add	r7, sp, #0
 801ef86:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_SuspendCallback can be implemented in the user file.
   */
}
 801ef88:	bf00      	nop
 801ef8a:	370c      	adds	r7, #12
 801ef8c:	46bd      	mov	sp, r7
 801ef8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ef92:	4770      	bx	lr

0801ef94 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801ef94:	b580      	push	{r7, lr}
 801ef96:	b084      	sub	sp, #16
 801ef98:	af00      	add	r7, sp, #0
 801ef9a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ef9c:	687b      	ldr	r3, [r7, #4]
 801ef9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801efa0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = (uint16_t) 0UL;
 801efa2:	68fb      	ldr	r3, [r7, #12]
 801efa4:	2200      	movs	r2, #0
 801efa6:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  hspi->TxXferCount = (uint16_t) 0UL;
 801efaa:	68fb      	ldr	r3, [r7, #12]
 801efac:	2200      	movs	r2, #0
 801efae:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62

  /* Restore hspi->State to Ready */
  hspi->State = HAL_SPI_STATE_READY;
 801efb2:	68fb      	ldr	r3, [r7, #12]
 801efb4:	2201      	movs	r2, #1
 801efb6:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81

#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1UL)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 801efba:	68f8      	ldr	r0, [r7, #12]
 801efbc:	f7ff ffd6 	bl	801ef6c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 801efc0:	bf00      	nop
 801efc2:	3710      	adds	r7, #16
 801efc4:	46bd      	mov	sp, r7
 801efc6:	bd80      	pop	{r7, pc}

0801efc8 <SPI_CloseTransfer>:
  *               the configuration information for SPI module.
  * @retval HAL_ERROR: if any error detected
  *         HAL_OK: if nothing detected
  */
static void SPI_CloseTransfer(SPI_HandleTypeDef *hspi)
{
 801efc8:	b480      	push	{r7}
 801efca:	b085      	sub	sp, #20
 801efcc:	af00      	add	r7, sp, #0
 801efce:	6078      	str	r0, [r7, #4]
  uint32_t itflag = hspi->Instance->SR;
 801efd0:	687b      	ldr	r3, [r7, #4]
 801efd2:	681b      	ldr	r3, [r3, #0]
 801efd4:	695b      	ldr	r3, [r3, #20]
 801efd6:	60fb      	str	r3, [r7, #12]

  __HAL_SPI_CLEAR_EOTFLAG(hspi);
 801efd8:	687b      	ldr	r3, [r7, #4]
 801efda:	681b      	ldr	r3, [r3, #0]
 801efdc:	699a      	ldr	r2, [r3, #24]
 801efde:	687b      	ldr	r3, [r7, #4]
 801efe0:	681b      	ldr	r3, [r3, #0]
 801efe2:	f042 0208 	orr.w	r2, r2, #8
 801efe6:	619a      	str	r2, [r3, #24]
  __HAL_SPI_CLEAR_TXTFFLAG(hspi);
 801efe8:	687b      	ldr	r3, [r7, #4]
 801efea:	681b      	ldr	r3, [r3, #0]
 801efec:	699a      	ldr	r2, [r3, #24]
 801efee:	687b      	ldr	r3, [r7, #4]
 801eff0:	681b      	ldr	r3, [r3, #0]
 801eff2:	f042 0210 	orr.w	r2, r2, #16
 801eff6:	619a      	str	r2, [r3, #24]

  /* Disable SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801eff8:	687b      	ldr	r3, [r7, #4]
 801effa:	681b      	ldr	r3, [r3, #0]
 801effc:	681a      	ldr	r2, [r3, #0]
 801effe:	687b      	ldr	r3, [r7, #4]
 801f000:	681b      	ldr	r3, [r3, #0]
 801f002:	f022 0201 	bic.w	r2, r2, #1
 801f006:	601a      	str	r2, [r3, #0]

  /* Disable ITs */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_EOT | SPI_IT_TXP | SPI_IT_RXP | SPI_IT_DXP | SPI_IT_UDR | SPI_IT_OVR | \
 801f008:	687b      	ldr	r3, [r7, #4]
 801f00a:	681b      	ldr	r3, [r3, #0]
 801f00c:	6919      	ldr	r1, [r3, #16]
 801f00e:	687b      	ldr	r3, [r7, #4]
 801f010:	681a      	ldr	r2, [r3, #0]
 801f012:	4b3c      	ldr	r3, [pc, #240]	@ (801f104 <SPI_CloseTransfer+0x13c>)
 801f014:	400b      	ands	r3, r1
 801f016:	6113      	str	r3, [r2, #16]
                              SPI_IT_FRE | SPI_IT_MODF));

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CFG1, SPI_CFG1_TXDMAEN | SPI_CFG1_RXDMAEN);
 801f018:	687b      	ldr	r3, [r7, #4]
 801f01a:	681b      	ldr	r3, [r3, #0]
 801f01c:	689a      	ldr	r2, [r3, #8]
 801f01e:	687b      	ldr	r3, [r7, #4]
 801f020:	681b      	ldr	r3, [r3, #0]
 801f022:	f422 4240 	bic.w	r2, r2, #49152	@ 0xc000
 801f026:	609a      	str	r2, [r3, #8]

  /* Report UnderRun error for non RX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 801f028:	687b      	ldr	r3, [r7, #4]
 801f02a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f02e:	b2db      	uxtb	r3, r3
 801f030:	2b04      	cmp	r3, #4
 801f032:	d014      	beq.n	801f05e <SPI_CloseTransfer+0x96>
  {
    if ((itflag & SPI_FLAG_UDR) != 0UL)
 801f034:	68fb      	ldr	r3, [r7, #12]
 801f036:	f003 0320 	and.w	r3, r3, #32
 801f03a:	2b00      	cmp	r3, #0
 801f03c:	d00f      	beq.n	801f05e <SPI_CloseTransfer+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_UDR);
 801f03e:	687b      	ldr	r3, [r7, #4]
 801f040:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f044:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801f048:	687b      	ldr	r3, [r7, #4]
 801f04a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_UDRFLAG(hspi);
 801f04e:	687b      	ldr	r3, [r7, #4]
 801f050:	681b      	ldr	r3, [r3, #0]
 801f052:	699a      	ldr	r2, [r3, #24]
 801f054:	687b      	ldr	r3, [r7, #4]
 801f056:	681b      	ldr	r3, [r3, #0]
 801f058:	f042 0220 	orr.w	r2, r2, #32
 801f05c:	619a      	str	r2, [r3, #24]
    }
  }

  /* Report OverRun error for non TX Only communication */
  if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 801f05e:	687b      	ldr	r3, [r7, #4]
 801f060:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801f064:	b2db      	uxtb	r3, r3
 801f066:	2b03      	cmp	r3, #3
 801f068:	d014      	beq.n	801f094 <SPI_CloseTransfer+0xcc>
  {
    if ((itflag & SPI_FLAG_OVR) != 0UL)
 801f06a:	68fb      	ldr	r3, [r7, #12]
 801f06c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801f070:	2b00      	cmp	r3, #0
 801f072:	d00f      	beq.n	801f094 <SPI_CloseTransfer+0xcc>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 801f074:	687b      	ldr	r3, [r7, #4]
 801f076:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f07a:	f043 0204 	orr.w	r2, r3, #4
 801f07e:	687b      	ldr	r3, [r7, #4]
 801f080:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 801f084:	687b      	ldr	r3, [r7, #4]
 801f086:	681b      	ldr	r3, [r3, #0]
 801f088:	699a      	ldr	r2, [r3, #24]
 801f08a:	687b      	ldr	r3, [r7, #4]
 801f08c:	681b      	ldr	r3, [r3, #0]
 801f08e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f092:	619a      	str	r2, [r3, #24]
    }
#endif /* USE_SPI_CRC */
  }

  /* SPI Mode Fault error interrupt occurred -------------------------------*/
  if ((itflag & SPI_FLAG_MODF) != 0UL)
 801f094:	68fb      	ldr	r3, [r7, #12]
 801f096:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 801f09a:	2b00      	cmp	r3, #0
 801f09c:	d00f      	beq.n	801f0be <SPI_CloseTransfer+0xf6>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 801f09e:	687b      	ldr	r3, [r7, #4]
 801f0a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f0a4:	f043 0201 	orr.w	r2, r3, #1
 801f0a8:	687b      	ldr	r3, [r7, #4]
 801f0aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_MODFFLAG(hspi);
 801f0ae:	687b      	ldr	r3, [r7, #4]
 801f0b0:	681b      	ldr	r3, [r3, #0]
 801f0b2:	699a      	ldr	r2, [r3, #24]
 801f0b4:	687b      	ldr	r3, [r7, #4]
 801f0b6:	681b      	ldr	r3, [r3, #0]
 801f0b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 801f0bc:	619a      	str	r2, [r3, #24]
  }

  /* SPI Frame error interrupt occurred ------------------------------------*/
  if ((itflag & SPI_FLAG_FRE) != 0UL)
 801f0be:	68fb      	ldr	r3, [r7, #12]
 801f0c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	d00f      	beq.n	801f0e8 <SPI_CloseTransfer+0x120>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 801f0c8:	687b      	ldr	r3, [r7, #4]
 801f0ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801f0ce:	f043 0208 	orr.w	r2, r3, #8
 801f0d2:	687b      	ldr	r3, [r7, #4]
 801f0d4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 801f0d8:	687b      	ldr	r3, [r7, #4]
 801f0da:	681b      	ldr	r3, [r3, #0]
 801f0dc:	699a      	ldr	r2, [r3, #24]
 801f0de:	687b      	ldr	r3, [r7, #4]
 801f0e0:	681b      	ldr	r3, [r3, #0]
 801f0e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 801f0e6:	619a      	str	r2, [r3, #24]
  }

  hspi->TxXferCount = (uint16_t)0UL;
 801f0e8:	687b      	ldr	r3, [r7, #4]
 801f0ea:	2200      	movs	r2, #0
 801f0ec:	f8a3 2062 	strh.w	r2, [r3, #98]	@ 0x62
  hspi->RxXferCount = (uint16_t)0UL;
 801f0f0:	687b      	ldr	r3, [r7, #4]
 801f0f2:	2200      	movs	r2, #0
 801f0f4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
}
 801f0f8:	bf00      	nop
 801f0fa:	3714      	adds	r7, #20
 801f0fc:	46bd      	mov	sp, r7
 801f0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f102:	4770      	bx	lr
 801f104:	fffffc90 	.word	0xfffffc90

0801f108 <SPI_GetPacketSize>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval Packet size occupied in the fifo
  */
static uint32_t SPI_GetPacketSize(const SPI_HandleTypeDef *hspi)
{
 801f108:	b480      	push	{r7}
 801f10a:	b085      	sub	sp, #20
 801f10c:	af00      	add	r7, sp, #0
 801f10e:	6078      	str	r0, [r7, #4]
  uint32_t fifo_threashold = (hspi->Init.FifoThreshold >> SPI_CFG1_FTHLV_Pos) + 1UL;
 801f110:	687b      	ldr	r3, [r7, #4]
 801f112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801f114:	095b      	lsrs	r3, r3, #5
 801f116:	3301      	adds	r3, #1
 801f118:	60fb      	str	r3, [r7, #12]
  uint32_t data_size       = (hspi->Init.DataSize      >> SPI_CFG1_DSIZE_Pos) + 1UL;
 801f11a:	687b      	ldr	r3, [r7, #4]
 801f11c:	68db      	ldr	r3, [r3, #12]
 801f11e:	3301      	adds	r3, #1
 801f120:	60bb      	str	r3, [r7, #8]

  /* Convert data size to Byte */
  data_size = (data_size + 7UL) / 8UL;
 801f122:	68bb      	ldr	r3, [r7, #8]
 801f124:	3307      	adds	r3, #7
 801f126:	08db      	lsrs	r3, r3, #3
 801f128:	60bb      	str	r3, [r7, #8]

  return data_size * fifo_threashold;
 801f12a:	68bb      	ldr	r3, [r7, #8]
 801f12c:	68fa      	ldr	r2, [r7, #12]
 801f12e:	fb02 f303 	mul.w	r3, r2, r3
}
 801f132:	4618      	mov	r0, r3
 801f134:	3714      	adds	r7, #20
 801f136:	46bd      	mov	sp, r7
 801f138:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f13c:	4770      	bx	lr

0801f13e <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801f13e:	b580      	push	{r7, lr}
 801f140:	b082      	sub	sp, #8
 801f142:	af00      	add	r7, sp, #0
 801f144:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801f146:	687b      	ldr	r3, [r7, #4]
 801f148:	2b00      	cmp	r3, #0
 801f14a:	d101      	bne.n	801f150 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801f14c:	2301      	movs	r3, #1
 801f14e:	e049      	b.n	801f1e4 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 801f150:	687b      	ldr	r3, [r7, #4]
 801f152:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f156:	b2db      	uxtb	r3, r3
 801f158:	2b00      	cmp	r3, #0
 801f15a:	d106      	bne.n	801f16a <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 801f15c:	687b      	ldr	r3, [r7, #4]
 801f15e:	2200      	movs	r2, #0
 801f160:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 801f164:	6878      	ldr	r0, [r7, #4]
 801f166:	f7e2 fe91 	bl	8001e8c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f16a:	687b      	ldr	r3, [r7, #4]
 801f16c:	2202      	movs	r2, #2
 801f16e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 801f172:	687b      	ldr	r3, [r7, #4]
 801f174:	681a      	ldr	r2, [r3, #0]
 801f176:	687b      	ldr	r3, [r7, #4]
 801f178:	3304      	adds	r3, #4
 801f17a:	4619      	mov	r1, r3
 801f17c:	4610      	mov	r0, r2
 801f17e:	f000 f9a5 	bl	801f4cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801f182:	687b      	ldr	r3, [r7, #4]
 801f184:	2201      	movs	r2, #1
 801f186:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f18a:	687b      	ldr	r3, [r7, #4]
 801f18c:	2201      	movs	r2, #1
 801f18e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 801f192:	687b      	ldr	r3, [r7, #4]
 801f194:	2201      	movs	r2, #1
 801f196:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801f19a:	687b      	ldr	r3, [r7, #4]
 801f19c:	2201      	movs	r2, #1
 801f19e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801f1a2:	687b      	ldr	r3, [r7, #4]
 801f1a4:	2201      	movs	r2, #1
 801f1a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801f1aa:	687b      	ldr	r3, [r7, #4]
 801f1ac:	2201      	movs	r2, #1
 801f1ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801f1b2:	687b      	ldr	r3, [r7, #4]
 801f1b4:	2201      	movs	r2, #1
 801f1b6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801f1ba:	687b      	ldr	r3, [r7, #4]
 801f1bc:	2201      	movs	r2, #1
 801f1be:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801f1c2:	687b      	ldr	r3, [r7, #4]
 801f1c4:	2201      	movs	r2, #1
 801f1c6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801f1ca:	687b      	ldr	r3, [r7, #4]
 801f1cc:	2201      	movs	r2, #1
 801f1ce:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801f1d2:	687b      	ldr	r3, [r7, #4]
 801f1d4:	2201      	movs	r2, #1
 801f1d6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801f1da:	687b      	ldr	r3, [r7, #4]
 801f1dc:	2201      	movs	r2, #1
 801f1de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801f1e2:	2300      	movs	r3, #0
}
 801f1e4:	4618      	mov	r0, r3
 801f1e6:	3708      	adds	r7, #8
 801f1e8:	46bd      	mov	sp, r7
 801f1ea:	bd80      	pop	{r7, pc}

0801f1ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801f1ec:	b480      	push	{r7}
 801f1ee:	b085      	sub	sp, #20
 801f1f0:	af00      	add	r7, sp, #0
 801f1f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801f1f4:	687b      	ldr	r3, [r7, #4]
 801f1f6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801f1fa:	b2db      	uxtb	r3, r3
 801f1fc:	2b01      	cmp	r3, #1
 801f1fe:	d001      	beq.n	801f204 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801f200:	2301      	movs	r3, #1
 801f202:	e054      	b.n	801f2ae <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f204:	687b      	ldr	r3, [r7, #4]
 801f206:	2202      	movs	r2, #2
 801f208:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801f20c:	687b      	ldr	r3, [r7, #4]
 801f20e:	681b      	ldr	r3, [r3, #0]
 801f210:	68da      	ldr	r2, [r3, #12]
 801f212:	687b      	ldr	r3, [r7, #4]
 801f214:	681b      	ldr	r3, [r3, #0]
 801f216:	f042 0201 	orr.w	r2, r2, #1
 801f21a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f21c:	687b      	ldr	r3, [r7, #4]
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	4a26      	ldr	r2, [pc, #152]	@ (801f2bc <HAL_TIM_Base_Start_IT+0xd0>)
 801f222:	4293      	cmp	r3, r2
 801f224:	d022      	beq.n	801f26c <HAL_TIM_Base_Start_IT+0x80>
 801f226:	687b      	ldr	r3, [r7, #4]
 801f228:	681b      	ldr	r3, [r3, #0]
 801f22a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f22e:	d01d      	beq.n	801f26c <HAL_TIM_Base_Start_IT+0x80>
 801f230:	687b      	ldr	r3, [r7, #4]
 801f232:	681b      	ldr	r3, [r3, #0]
 801f234:	4a22      	ldr	r2, [pc, #136]	@ (801f2c0 <HAL_TIM_Base_Start_IT+0xd4>)
 801f236:	4293      	cmp	r3, r2
 801f238:	d018      	beq.n	801f26c <HAL_TIM_Base_Start_IT+0x80>
 801f23a:	687b      	ldr	r3, [r7, #4]
 801f23c:	681b      	ldr	r3, [r3, #0]
 801f23e:	4a21      	ldr	r2, [pc, #132]	@ (801f2c4 <HAL_TIM_Base_Start_IT+0xd8>)
 801f240:	4293      	cmp	r3, r2
 801f242:	d013      	beq.n	801f26c <HAL_TIM_Base_Start_IT+0x80>
 801f244:	687b      	ldr	r3, [r7, #4]
 801f246:	681b      	ldr	r3, [r3, #0]
 801f248:	4a1f      	ldr	r2, [pc, #124]	@ (801f2c8 <HAL_TIM_Base_Start_IT+0xdc>)
 801f24a:	4293      	cmp	r3, r2
 801f24c:	d00e      	beq.n	801f26c <HAL_TIM_Base_Start_IT+0x80>
 801f24e:	687b      	ldr	r3, [r7, #4]
 801f250:	681b      	ldr	r3, [r3, #0]
 801f252:	4a1e      	ldr	r2, [pc, #120]	@ (801f2cc <HAL_TIM_Base_Start_IT+0xe0>)
 801f254:	4293      	cmp	r3, r2
 801f256:	d009      	beq.n	801f26c <HAL_TIM_Base_Start_IT+0x80>
 801f258:	687b      	ldr	r3, [r7, #4]
 801f25a:	681b      	ldr	r3, [r3, #0]
 801f25c:	4a1c      	ldr	r2, [pc, #112]	@ (801f2d0 <HAL_TIM_Base_Start_IT+0xe4>)
 801f25e:	4293      	cmp	r3, r2
 801f260:	d004      	beq.n	801f26c <HAL_TIM_Base_Start_IT+0x80>
 801f262:	687b      	ldr	r3, [r7, #4]
 801f264:	681b      	ldr	r3, [r3, #0]
 801f266:	4a1b      	ldr	r2, [pc, #108]	@ (801f2d4 <HAL_TIM_Base_Start_IT+0xe8>)
 801f268:	4293      	cmp	r3, r2
 801f26a:	d115      	bne.n	801f298 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801f26c:	687b      	ldr	r3, [r7, #4]
 801f26e:	681b      	ldr	r3, [r3, #0]
 801f270:	689a      	ldr	r2, [r3, #8]
 801f272:	4b19      	ldr	r3, [pc, #100]	@ (801f2d8 <HAL_TIM_Base_Start_IT+0xec>)
 801f274:	4013      	ands	r3, r2
 801f276:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f278:	68fb      	ldr	r3, [r7, #12]
 801f27a:	2b06      	cmp	r3, #6
 801f27c:	d015      	beq.n	801f2aa <HAL_TIM_Base_Start_IT+0xbe>
 801f27e:	68fb      	ldr	r3, [r7, #12]
 801f280:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801f284:	d011      	beq.n	801f2aa <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801f286:	687b      	ldr	r3, [r7, #4]
 801f288:	681b      	ldr	r3, [r3, #0]
 801f28a:	681a      	ldr	r2, [r3, #0]
 801f28c:	687b      	ldr	r3, [r7, #4]
 801f28e:	681b      	ldr	r3, [r3, #0]
 801f290:	f042 0201 	orr.w	r2, r2, #1
 801f294:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f296:	e008      	b.n	801f2aa <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801f298:	687b      	ldr	r3, [r7, #4]
 801f29a:	681b      	ldr	r3, [r3, #0]
 801f29c:	681a      	ldr	r2, [r3, #0]
 801f29e:	687b      	ldr	r3, [r7, #4]
 801f2a0:	681b      	ldr	r3, [r3, #0]
 801f2a2:	f042 0201 	orr.w	r2, r2, #1
 801f2a6:	601a      	str	r2, [r3, #0]
 801f2a8:	e000      	b.n	801f2ac <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801f2aa:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 801f2ac:	2300      	movs	r3, #0
}
 801f2ae:	4618      	mov	r0, r3
 801f2b0:	3714      	adds	r7, #20
 801f2b2:	46bd      	mov	sp, r7
 801f2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f2b8:	4770      	bx	lr
 801f2ba:	bf00      	nop
 801f2bc:	40010000 	.word	0x40010000
 801f2c0:	40000400 	.word	0x40000400
 801f2c4:	40000800 	.word	0x40000800
 801f2c8:	40000c00 	.word	0x40000c00
 801f2cc:	40010400 	.word	0x40010400
 801f2d0:	40001800 	.word	0x40001800
 801f2d4:	40014000 	.word	0x40014000
 801f2d8:	00010007 	.word	0x00010007

0801f2dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 801f2dc:	b580      	push	{r7, lr}
 801f2de:	b084      	sub	sp, #16
 801f2e0:	af00      	add	r7, sp, #0
 801f2e2:	6078      	str	r0, [r7, #4]
 801f2e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801f2e6:	2300      	movs	r3, #0
 801f2e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 801f2ea:	687b      	ldr	r3, [r7, #4]
 801f2ec:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801f2f0:	2b01      	cmp	r3, #1
 801f2f2:	d101      	bne.n	801f2f8 <HAL_TIM_ConfigClockSource+0x1c>
 801f2f4:	2302      	movs	r3, #2
 801f2f6:	e0dc      	b.n	801f4b2 <HAL_TIM_ConfigClockSource+0x1d6>
 801f2f8:	687b      	ldr	r3, [r7, #4]
 801f2fa:	2201      	movs	r2, #1
 801f2fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 801f300:	687b      	ldr	r3, [r7, #4]
 801f302:	2202      	movs	r2, #2
 801f304:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 801f308:	687b      	ldr	r3, [r7, #4]
 801f30a:	681b      	ldr	r3, [r3, #0]
 801f30c:	689b      	ldr	r3, [r3, #8]
 801f30e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 801f310:	68ba      	ldr	r2, [r7, #8]
 801f312:	4b6a      	ldr	r3, [pc, #424]	@ (801f4bc <HAL_TIM_ConfigClockSource+0x1e0>)
 801f314:	4013      	ands	r3, r2
 801f316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f318:	68bb      	ldr	r3, [r7, #8]
 801f31a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801f31e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 801f320:	687b      	ldr	r3, [r7, #4]
 801f322:	681b      	ldr	r3, [r3, #0]
 801f324:	68ba      	ldr	r2, [r7, #8]
 801f326:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 801f328:	683b      	ldr	r3, [r7, #0]
 801f32a:	681b      	ldr	r3, [r3, #0]
 801f32c:	4a64      	ldr	r2, [pc, #400]	@ (801f4c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 801f32e:	4293      	cmp	r3, r2
 801f330:	f000 80a9 	beq.w	801f486 <HAL_TIM_ConfigClockSource+0x1aa>
 801f334:	4a62      	ldr	r2, [pc, #392]	@ (801f4c0 <HAL_TIM_ConfigClockSource+0x1e4>)
 801f336:	4293      	cmp	r3, r2
 801f338:	f200 80ae 	bhi.w	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
 801f33c:	4a61      	ldr	r2, [pc, #388]	@ (801f4c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f33e:	4293      	cmp	r3, r2
 801f340:	f000 80a1 	beq.w	801f486 <HAL_TIM_ConfigClockSource+0x1aa>
 801f344:	4a5f      	ldr	r2, [pc, #380]	@ (801f4c4 <HAL_TIM_ConfigClockSource+0x1e8>)
 801f346:	4293      	cmp	r3, r2
 801f348:	f200 80a6 	bhi.w	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
 801f34c:	4a5e      	ldr	r2, [pc, #376]	@ (801f4c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 801f34e:	4293      	cmp	r3, r2
 801f350:	f000 8099 	beq.w	801f486 <HAL_TIM_ConfigClockSource+0x1aa>
 801f354:	4a5c      	ldr	r2, [pc, #368]	@ (801f4c8 <HAL_TIM_ConfigClockSource+0x1ec>)
 801f356:	4293      	cmp	r3, r2
 801f358:	f200 809e 	bhi.w	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
 801f35c:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801f360:	f000 8091 	beq.w	801f486 <HAL_TIM_ConfigClockSource+0x1aa>
 801f364:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 801f368:	f200 8096 	bhi.w	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
 801f36c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801f370:	f000 8089 	beq.w	801f486 <HAL_TIM_ConfigClockSource+0x1aa>
 801f374:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801f378:	f200 808e 	bhi.w	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
 801f37c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801f380:	d03e      	beq.n	801f400 <HAL_TIM_ConfigClockSource+0x124>
 801f382:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801f386:	f200 8087 	bhi.w	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
 801f38a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f38e:	f000 8086 	beq.w	801f49e <HAL_TIM_ConfigClockSource+0x1c2>
 801f392:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801f396:	d87f      	bhi.n	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
 801f398:	2b70      	cmp	r3, #112	@ 0x70
 801f39a:	d01a      	beq.n	801f3d2 <HAL_TIM_ConfigClockSource+0xf6>
 801f39c:	2b70      	cmp	r3, #112	@ 0x70
 801f39e:	d87b      	bhi.n	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
 801f3a0:	2b60      	cmp	r3, #96	@ 0x60
 801f3a2:	d050      	beq.n	801f446 <HAL_TIM_ConfigClockSource+0x16a>
 801f3a4:	2b60      	cmp	r3, #96	@ 0x60
 801f3a6:	d877      	bhi.n	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
 801f3a8:	2b50      	cmp	r3, #80	@ 0x50
 801f3aa:	d03c      	beq.n	801f426 <HAL_TIM_ConfigClockSource+0x14a>
 801f3ac:	2b50      	cmp	r3, #80	@ 0x50
 801f3ae:	d873      	bhi.n	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
 801f3b0:	2b40      	cmp	r3, #64	@ 0x40
 801f3b2:	d058      	beq.n	801f466 <HAL_TIM_ConfigClockSource+0x18a>
 801f3b4:	2b40      	cmp	r3, #64	@ 0x40
 801f3b6:	d86f      	bhi.n	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
 801f3b8:	2b30      	cmp	r3, #48	@ 0x30
 801f3ba:	d064      	beq.n	801f486 <HAL_TIM_ConfigClockSource+0x1aa>
 801f3bc:	2b30      	cmp	r3, #48	@ 0x30
 801f3be:	d86b      	bhi.n	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
 801f3c0:	2b20      	cmp	r3, #32
 801f3c2:	d060      	beq.n	801f486 <HAL_TIM_ConfigClockSource+0x1aa>
 801f3c4:	2b20      	cmp	r3, #32
 801f3c6:	d867      	bhi.n	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
 801f3c8:	2b00      	cmp	r3, #0
 801f3ca:	d05c      	beq.n	801f486 <HAL_TIM_ConfigClockSource+0x1aa>
 801f3cc:	2b10      	cmp	r3, #16
 801f3ce:	d05a      	beq.n	801f486 <HAL_TIM_ConfigClockSource+0x1aa>
 801f3d0:	e062      	b.n	801f498 <HAL_TIM_ConfigClockSource+0x1bc>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f3d2:	687b      	ldr	r3, [r7, #4]
 801f3d4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801f3d6:	683b      	ldr	r3, [r7, #0]
 801f3d8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801f3da:	683b      	ldr	r3, [r7, #0]
 801f3dc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801f3de:	683b      	ldr	r3, [r7, #0]
 801f3e0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801f3e2:	f000 f997 	bl	801f714 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 801f3e6:	687b      	ldr	r3, [r7, #4]
 801f3e8:	681b      	ldr	r3, [r3, #0]
 801f3ea:	689b      	ldr	r3, [r3, #8]
 801f3ec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 801f3ee:	68bb      	ldr	r3, [r7, #8]
 801f3f0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 801f3f4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 801f3f6:	687b      	ldr	r3, [r7, #4]
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	68ba      	ldr	r2, [r7, #8]
 801f3fc:	609a      	str	r2, [r3, #8]
      break;
 801f3fe:	e04f      	b.n	801f4a0 <HAL_TIM_ConfigClockSource+0x1c4>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801f400:	687b      	ldr	r3, [r7, #4]
 801f402:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 801f404:	683b      	ldr	r3, [r7, #0]
 801f406:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 801f408:	683b      	ldr	r3, [r7, #0]
 801f40a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 801f40c:	683b      	ldr	r3, [r7, #0]
 801f40e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 801f410:	f000 f980 	bl	801f714 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801f414:	687b      	ldr	r3, [r7, #4]
 801f416:	681b      	ldr	r3, [r3, #0]
 801f418:	689a      	ldr	r2, [r3, #8]
 801f41a:	687b      	ldr	r3, [r7, #4]
 801f41c:	681b      	ldr	r3, [r3, #0]
 801f41e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 801f422:	609a      	str	r2, [r3, #8]
      break;
 801f424:	e03c      	b.n	801f4a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f426:	687b      	ldr	r3, [r7, #4]
 801f428:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801f42a:	683b      	ldr	r3, [r7, #0]
 801f42c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801f42e:	683b      	ldr	r3, [r7, #0]
 801f430:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801f432:	461a      	mov	r2, r3
 801f434:	f000 f8f0 	bl	801f618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 801f438:	687b      	ldr	r3, [r7, #4]
 801f43a:	681b      	ldr	r3, [r3, #0]
 801f43c:	2150      	movs	r1, #80	@ 0x50
 801f43e:	4618      	mov	r0, r3
 801f440:	f000 f94a 	bl	801f6d8 <TIM_ITRx_SetConfig>
      break;
 801f444:	e02c      	b.n	801f4a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 801f446:	687b      	ldr	r3, [r7, #4]
 801f448:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801f44a:	683b      	ldr	r3, [r7, #0]
 801f44c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801f44e:	683b      	ldr	r3, [r7, #0]
 801f450:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 801f452:	461a      	mov	r2, r3
 801f454:	f000 f90f 	bl	801f676 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 801f458:	687b      	ldr	r3, [r7, #4]
 801f45a:	681b      	ldr	r3, [r3, #0]
 801f45c:	2160      	movs	r1, #96	@ 0x60
 801f45e:	4618      	mov	r0, r3
 801f460:	f000 f93a 	bl	801f6d8 <TIM_ITRx_SetConfig>
      break;
 801f464:	e01c      	b.n	801f4a0 <HAL_TIM_ConfigClockSource+0x1c4>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 801f466:	687b      	ldr	r3, [r7, #4]
 801f468:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 801f46a:	683b      	ldr	r3, [r7, #0]
 801f46c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 801f46e:	683b      	ldr	r3, [r7, #0]
 801f470:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 801f472:	461a      	mov	r2, r3
 801f474:	f000 f8d0 	bl	801f618 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 801f478:	687b      	ldr	r3, [r7, #4]
 801f47a:	681b      	ldr	r3, [r3, #0]
 801f47c:	2140      	movs	r1, #64	@ 0x40
 801f47e:	4618      	mov	r0, r3
 801f480:	f000 f92a 	bl	801f6d8 <TIM_ITRx_SetConfig>
      break;
 801f484:	e00c      	b.n	801f4a0 <HAL_TIM_ConfigClockSource+0x1c4>
    case TIM_CLOCKSOURCE_ITR8:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 801f486:	687b      	ldr	r3, [r7, #4]
 801f488:	681a      	ldr	r2, [r3, #0]
 801f48a:	683b      	ldr	r3, [r7, #0]
 801f48c:	681b      	ldr	r3, [r3, #0]
 801f48e:	4619      	mov	r1, r3
 801f490:	4610      	mov	r0, r2
 801f492:	f000 f921 	bl	801f6d8 <TIM_ITRx_SetConfig>
      break;
 801f496:	e003      	b.n	801f4a0 <HAL_TIM_ConfigClockSource+0x1c4>
    }

    default:
      status = HAL_ERROR;
 801f498:	2301      	movs	r3, #1
 801f49a:	73fb      	strb	r3, [r7, #15]
      break;
 801f49c:	e000      	b.n	801f4a0 <HAL_TIM_ConfigClockSource+0x1c4>
      break;
 801f49e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801f4a0:	687b      	ldr	r3, [r7, #4]
 801f4a2:	2201      	movs	r2, #1
 801f4a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801f4a8:	687b      	ldr	r3, [r7, #4]
 801f4aa:	2200      	movs	r2, #0
 801f4ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 801f4b0:	7bfb      	ldrb	r3, [r7, #15]
}
 801f4b2:	4618      	mov	r0, r3
 801f4b4:	3710      	adds	r7, #16
 801f4b6:	46bd      	mov	sp, r7
 801f4b8:	bd80      	pop	{r7, pc}
 801f4ba:	bf00      	nop
 801f4bc:	ffceff88 	.word	0xffceff88
 801f4c0:	00100040 	.word	0x00100040
 801f4c4:	00100030 	.word	0x00100030
 801f4c8:	00100020 	.word	0x00100020

0801f4cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 801f4cc:	b480      	push	{r7}
 801f4ce:	b085      	sub	sp, #20
 801f4d0:	af00      	add	r7, sp, #0
 801f4d2:	6078      	str	r0, [r7, #4]
 801f4d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801f4d6:	687b      	ldr	r3, [r7, #4]
 801f4d8:	681b      	ldr	r3, [r3, #0]
 801f4da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 801f4dc:	687b      	ldr	r3, [r7, #4]
 801f4de:	4a46      	ldr	r2, [pc, #280]	@ (801f5f8 <TIM_Base_SetConfig+0x12c>)
 801f4e0:	4293      	cmp	r3, r2
 801f4e2:	d013      	beq.n	801f50c <TIM_Base_SetConfig+0x40>
 801f4e4:	687b      	ldr	r3, [r7, #4]
 801f4e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f4ea:	d00f      	beq.n	801f50c <TIM_Base_SetConfig+0x40>
 801f4ec:	687b      	ldr	r3, [r7, #4]
 801f4ee:	4a43      	ldr	r2, [pc, #268]	@ (801f5fc <TIM_Base_SetConfig+0x130>)
 801f4f0:	4293      	cmp	r3, r2
 801f4f2:	d00b      	beq.n	801f50c <TIM_Base_SetConfig+0x40>
 801f4f4:	687b      	ldr	r3, [r7, #4]
 801f4f6:	4a42      	ldr	r2, [pc, #264]	@ (801f600 <TIM_Base_SetConfig+0x134>)
 801f4f8:	4293      	cmp	r3, r2
 801f4fa:	d007      	beq.n	801f50c <TIM_Base_SetConfig+0x40>
 801f4fc:	687b      	ldr	r3, [r7, #4]
 801f4fe:	4a41      	ldr	r2, [pc, #260]	@ (801f604 <TIM_Base_SetConfig+0x138>)
 801f500:	4293      	cmp	r3, r2
 801f502:	d003      	beq.n	801f50c <TIM_Base_SetConfig+0x40>
 801f504:	687b      	ldr	r3, [r7, #4]
 801f506:	4a40      	ldr	r2, [pc, #256]	@ (801f608 <TIM_Base_SetConfig+0x13c>)
 801f508:	4293      	cmp	r3, r2
 801f50a:	d108      	bne.n	801f51e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 801f50c:	68fb      	ldr	r3, [r7, #12]
 801f50e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f512:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 801f514:	683b      	ldr	r3, [r7, #0]
 801f516:	685b      	ldr	r3, [r3, #4]
 801f518:	68fa      	ldr	r2, [r7, #12]
 801f51a:	4313      	orrs	r3, r2
 801f51c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 801f51e:	687b      	ldr	r3, [r7, #4]
 801f520:	4a35      	ldr	r2, [pc, #212]	@ (801f5f8 <TIM_Base_SetConfig+0x12c>)
 801f522:	4293      	cmp	r3, r2
 801f524:	d01f      	beq.n	801f566 <TIM_Base_SetConfig+0x9a>
 801f526:	687b      	ldr	r3, [r7, #4]
 801f528:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f52c:	d01b      	beq.n	801f566 <TIM_Base_SetConfig+0x9a>
 801f52e:	687b      	ldr	r3, [r7, #4]
 801f530:	4a32      	ldr	r2, [pc, #200]	@ (801f5fc <TIM_Base_SetConfig+0x130>)
 801f532:	4293      	cmp	r3, r2
 801f534:	d017      	beq.n	801f566 <TIM_Base_SetConfig+0x9a>
 801f536:	687b      	ldr	r3, [r7, #4]
 801f538:	4a31      	ldr	r2, [pc, #196]	@ (801f600 <TIM_Base_SetConfig+0x134>)
 801f53a:	4293      	cmp	r3, r2
 801f53c:	d013      	beq.n	801f566 <TIM_Base_SetConfig+0x9a>
 801f53e:	687b      	ldr	r3, [r7, #4]
 801f540:	4a30      	ldr	r2, [pc, #192]	@ (801f604 <TIM_Base_SetConfig+0x138>)
 801f542:	4293      	cmp	r3, r2
 801f544:	d00f      	beq.n	801f566 <TIM_Base_SetConfig+0x9a>
 801f546:	687b      	ldr	r3, [r7, #4]
 801f548:	4a2f      	ldr	r2, [pc, #188]	@ (801f608 <TIM_Base_SetConfig+0x13c>)
 801f54a:	4293      	cmp	r3, r2
 801f54c:	d00b      	beq.n	801f566 <TIM_Base_SetConfig+0x9a>
 801f54e:	687b      	ldr	r3, [r7, #4]
 801f550:	4a2e      	ldr	r2, [pc, #184]	@ (801f60c <TIM_Base_SetConfig+0x140>)
 801f552:	4293      	cmp	r3, r2
 801f554:	d007      	beq.n	801f566 <TIM_Base_SetConfig+0x9a>
 801f556:	687b      	ldr	r3, [r7, #4]
 801f558:	4a2d      	ldr	r2, [pc, #180]	@ (801f610 <TIM_Base_SetConfig+0x144>)
 801f55a:	4293      	cmp	r3, r2
 801f55c:	d003      	beq.n	801f566 <TIM_Base_SetConfig+0x9a>
 801f55e:	687b      	ldr	r3, [r7, #4]
 801f560:	4a2c      	ldr	r2, [pc, #176]	@ (801f614 <TIM_Base_SetConfig+0x148>)
 801f562:	4293      	cmp	r3, r2
 801f564:	d108      	bne.n	801f578 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801f566:	68fb      	ldr	r3, [r7, #12]
 801f568:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801f56c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 801f56e:	683b      	ldr	r3, [r7, #0]
 801f570:	68db      	ldr	r3, [r3, #12]
 801f572:	68fa      	ldr	r2, [r7, #12]
 801f574:	4313      	orrs	r3, r2
 801f576:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801f578:	68fb      	ldr	r3, [r7, #12]
 801f57a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 801f57e:	683b      	ldr	r3, [r7, #0]
 801f580:	695b      	ldr	r3, [r3, #20]
 801f582:	4313      	orrs	r3, r2
 801f584:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801f586:	687b      	ldr	r3, [r7, #4]
 801f588:	68fa      	ldr	r2, [r7, #12]
 801f58a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801f58c:	683b      	ldr	r3, [r7, #0]
 801f58e:	689a      	ldr	r2, [r3, #8]
 801f590:	687b      	ldr	r3, [r7, #4]
 801f592:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 801f594:	683b      	ldr	r3, [r7, #0]
 801f596:	681a      	ldr	r2, [r3, #0]
 801f598:	687b      	ldr	r3, [r7, #4]
 801f59a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 801f59c:	687b      	ldr	r3, [r7, #4]
 801f59e:	4a16      	ldr	r2, [pc, #88]	@ (801f5f8 <TIM_Base_SetConfig+0x12c>)
 801f5a0:	4293      	cmp	r3, r2
 801f5a2:	d00f      	beq.n	801f5c4 <TIM_Base_SetConfig+0xf8>
 801f5a4:	687b      	ldr	r3, [r7, #4]
 801f5a6:	4a18      	ldr	r2, [pc, #96]	@ (801f608 <TIM_Base_SetConfig+0x13c>)
 801f5a8:	4293      	cmp	r3, r2
 801f5aa:	d00b      	beq.n	801f5c4 <TIM_Base_SetConfig+0xf8>
 801f5ac:	687b      	ldr	r3, [r7, #4]
 801f5ae:	4a17      	ldr	r2, [pc, #92]	@ (801f60c <TIM_Base_SetConfig+0x140>)
 801f5b0:	4293      	cmp	r3, r2
 801f5b2:	d007      	beq.n	801f5c4 <TIM_Base_SetConfig+0xf8>
 801f5b4:	687b      	ldr	r3, [r7, #4]
 801f5b6:	4a16      	ldr	r2, [pc, #88]	@ (801f610 <TIM_Base_SetConfig+0x144>)
 801f5b8:	4293      	cmp	r3, r2
 801f5ba:	d003      	beq.n	801f5c4 <TIM_Base_SetConfig+0xf8>
 801f5bc:	687b      	ldr	r3, [r7, #4]
 801f5be:	4a15      	ldr	r2, [pc, #84]	@ (801f614 <TIM_Base_SetConfig+0x148>)
 801f5c0:	4293      	cmp	r3, r2
 801f5c2:	d103      	bne.n	801f5cc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 801f5c4:	683b      	ldr	r3, [r7, #0]
 801f5c6:	691a      	ldr	r2, [r3, #16]
 801f5c8:	687b      	ldr	r3, [r7, #4]
 801f5ca:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801f5cc:	687b      	ldr	r3, [r7, #4]
 801f5ce:	2201      	movs	r2, #1
 801f5d0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 801f5d2:	687b      	ldr	r3, [r7, #4]
 801f5d4:	691b      	ldr	r3, [r3, #16]
 801f5d6:	f003 0301 	and.w	r3, r3, #1
 801f5da:	2b01      	cmp	r3, #1
 801f5dc:	d105      	bne.n	801f5ea <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 801f5de:	687b      	ldr	r3, [r7, #4]
 801f5e0:	691b      	ldr	r3, [r3, #16]
 801f5e2:	f023 0201 	bic.w	r2, r3, #1
 801f5e6:	687b      	ldr	r3, [r7, #4]
 801f5e8:	611a      	str	r2, [r3, #16]
  }
}
 801f5ea:	bf00      	nop
 801f5ec:	3714      	adds	r7, #20
 801f5ee:	46bd      	mov	sp, r7
 801f5f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f5f4:	4770      	bx	lr
 801f5f6:	bf00      	nop
 801f5f8:	40010000 	.word	0x40010000
 801f5fc:	40000400 	.word	0x40000400
 801f600:	40000800 	.word	0x40000800
 801f604:	40000c00 	.word	0x40000c00
 801f608:	40010400 	.word	0x40010400
 801f60c:	40014000 	.word	0x40014000
 801f610:	40014400 	.word	0x40014400
 801f614:	40014800 	.word	0x40014800

0801f618 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801f618:	b480      	push	{r7}
 801f61a:	b087      	sub	sp, #28
 801f61c:	af00      	add	r7, sp, #0
 801f61e:	60f8      	str	r0, [r7, #12]
 801f620:	60b9      	str	r1, [r7, #8]
 801f622:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 801f624:	68fb      	ldr	r3, [r7, #12]
 801f626:	6a1b      	ldr	r3, [r3, #32]
 801f628:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 801f62a:	68fb      	ldr	r3, [r7, #12]
 801f62c:	6a1b      	ldr	r3, [r3, #32]
 801f62e:	f023 0201 	bic.w	r2, r3, #1
 801f632:	68fb      	ldr	r3, [r7, #12]
 801f634:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801f636:	68fb      	ldr	r3, [r7, #12]
 801f638:	699b      	ldr	r3, [r3, #24]
 801f63a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801f63c:	693b      	ldr	r3, [r7, #16]
 801f63e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801f642:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 801f644:	687b      	ldr	r3, [r7, #4]
 801f646:	011b      	lsls	r3, r3, #4
 801f648:	693a      	ldr	r2, [r7, #16]
 801f64a:	4313      	orrs	r3, r2
 801f64c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801f64e:	697b      	ldr	r3, [r7, #20]
 801f650:	f023 030a 	bic.w	r3, r3, #10
 801f654:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 801f656:	697a      	ldr	r2, [r7, #20]
 801f658:	68bb      	ldr	r3, [r7, #8]
 801f65a:	4313      	orrs	r3, r2
 801f65c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801f65e:	68fb      	ldr	r3, [r7, #12]
 801f660:	693a      	ldr	r2, [r7, #16]
 801f662:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801f664:	68fb      	ldr	r3, [r7, #12]
 801f666:	697a      	ldr	r2, [r7, #20]
 801f668:	621a      	str	r2, [r3, #32]
}
 801f66a:	bf00      	nop
 801f66c:	371c      	adds	r7, #28
 801f66e:	46bd      	mov	sp, r7
 801f670:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f674:	4770      	bx	lr

0801f676 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 801f676:	b480      	push	{r7}
 801f678:	b087      	sub	sp, #28
 801f67a:	af00      	add	r7, sp, #0
 801f67c:	60f8      	str	r0, [r7, #12]
 801f67e:	60b9      	str	r1, [r7, #8]
 801f680:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 801f682:	68fb      	ldr	r3, [r7, #12]
 801f684:	6a1b      	ldr	r3, [r3, #32]
 801f686:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 801f688:	68fb      	ldr	r3, [r7, #12]
 801f68a:	6a1b      	ldr	r3, [r3, #32]
 801f68c:	f023 0210 	bic.w	r2, r3, #16
 801f690:	68fb      	ldr	r3, [r7, #12]
 801f692:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801f694:	68fb      	ldr	r3, [r7, #12]
 801f696:	699b      	ldr	r3, [r3, #24]
 801f698:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801f69a:	693b      	ldr	r3, [r7, #16]
 801f69c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 801f6a0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 801f6a2:	687b      	ldr	r3, [r7, #4]
 801f6a4:	031b      	lsls	r3, r3, #12
 801f6a6:	693a      	ldr	r2, [r7, #16]
 801f6a8:	4313      	orrs	r3, r2
 801f6aa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801f6ac:	697b      	ldr	r3, [r7, #20]
 801f6ae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 801f6b2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 801f6b4:	68bb      	ldr	r3, [r7, #8]
 801f6b6:	011b      	lsls	r3, r3, #4
 801f6b8:	697a      	ldr	r2, [r7, #20]
 801f6ba:	4313      	orrs	r3, r2
 801f6bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801f6be:	68fb      	ldr	r3, [r7, #12]
 801f6c0:	693a      	ldr	r2, [r7, #16]
 801f6c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 801f6c4:	68fb      	ldr	r3, [r7, #12]
 801f6c6:	697a      	ldr	r2, [r7, #20]
 801f6c8:	621a      	str	r2, [r3, #32]
}
 801f6ca:	bf00      	nop
 801f6cc:	371c      	adds	r7, #28
 801f6ce:	46bd      	mov	sp, r7
 801f6d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f6d4:	4770      	bx	lr
	...

0801f6d8 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 801f6d8:	b480      	push	{r7}
 801f6da:	b085      	sub	sp, #20
 801f6dc:	af00      	add	r7, sp, #0
 801f6de:	6078      	str	r0, [r7, #4]
 801f6e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 801f6e2:	687b      	ldr	r3, [r7, #4]
 801f6e4:	689b      	ldr	r3, [r3, #8]
 801f6e6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 801f6e8:	68fa      	ldr	r2, [r7, #12]
 801f6ea:	4b09      	ldr	r3, [pc, #36]	@ (801f710 <TIM_ITRx_SetConfig+0x38>)
 801f6ec:	4013      	ands	r3, r2
 801f6ee:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 801f6f0:	683a      	ldr	r2, [r7, #0]
 801f6f2:	68fb      	ldr	r3, [r7, #12]
 801f6f4:	4313      	orrs	r3, r2
 801f6f6:	f043 0307 	orr.w	r3, r3, #7
 801f6fa:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801f6fc:	687b      	ldr	r3, [r7, #4]
 801f6fe:	68fa      	ldr	r2, [r7, #12]
 801f700:	609a      	str	r2, [r3, #8]
}
 801f702:	bf00      	nop
 801f704:	3714      	adds	r7, #20
 801f706:	46bd      	mov	sp, r7
 801f708:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f70c:	4770      	bx	lr
 801f70e:	bf00      	nop
 801f710:	ffcfff8f 	.word	0xffcfff8f

0801f714 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 801f714:	b480      	push	{r7}
 801f716:	b087      	sub	sp, #28
 801f718:	af00      	add	r7, sp, #0
 801f71a:	60f8      	str	r0, [r7, #12]
 801f71c:	60b9      	str	r1, [r7, #8]
 801f71e:	607a      	str	r2, [r7, #4]
 801f720:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 801f722:	68fb      	ldr	r3, [r7, #12]
 801f724:	689b      	ldr	r3, [r3, #8]
 801f726:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 801f728:	697b      	ldr	r3, [r7, #20]
 801f72a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 801f72e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 801f730:	683b      	ldr	r3, [r7, #0]
 801f732:	021a      	lsls	r2, r3, #8
 801f734:	687b      	ldr	r3, [r7, #4]
 801f736:	431a      	orrs	r2, r3
 801f738:	68bb      	ldr	r3, [r7, #8]
 801f73a:	4313      	orrs	r3, r2
 801f73c:	697a      	ldr	r2, [r7, #20]
 801f73e:	4313      	orrs	r3, r2
 801f740:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801f742:	68fb      	ldr	r3, [r7, #12]
 801f744:	697a      	ldr	r2, [r7, #20]
 801f746:	609a      	str	r2, [r3, #8]
}
 801f748:	bf00      	nop
 801f74a:	371c      	adds	r7, #28
 801f74c:	46bd      	mov	sp, r7
 801f74e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f752:	4770      	bx	lr

0801f754 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801f754:	b480      	push	{r7}
 801f756:	b085      	sub	sp, #20
 801f758:	af00      	add	r7, sp, #0
 801f75a:	6078      	str	r0, [r7, #4]
 801f75c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 801f75e:	687b      	ldr	r3, [r7, #4]
 801f760:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 801f764:	2b01      	cmp	r3, #1
 801f766:	d101      	bne.n	801f76c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 801f768:	2302      	movs	r3, #2
 801f76a:	e06d      	b.n	801f848 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 801f76c:	687b      	ldr	r3, [r7, #4]
 801f76e:	2201      	movs	r2, #1
 801f770:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801f774:	687b      	ldr	r3, [r7, #4]
 801f776:	2202      	movs	r2, #2
 801f778:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 801f77c:	687b      	ldr	r3, [r7, #4]
 801f77e:	681b      	ldr	r3, [r3, #0]
 801f780:	685b      	ldr	r3, [r3, #4]
 801f782:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801f784:	687b      	ldr	r3, [r7, #4]
 801f786:	681b      	ldr	r3, [r3, #0]
 801f788:	689b      	ldr	r3, [r3, #8]
 801f78a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 801f78c:	687b      	ldr	r3, [r7, #4]
 801f78e:	681b      	ldr	r3, [r3, #0]
 801f790:	4a30      	ldr	r2, [pc, #192]	@ (801f854 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801f792:	4293      	cmp	r3, r2
 801f794:	d004      	beq.n	801f7a0 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 801f796:	687b      	ldr	r3, [r7, #4]
 801f798:	681b      	ldr	r3, [r3, #0]
 801f79a:	4a2f      	ldr	r2, [pc, #188]	@ (801f858 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f79c:	4293      	cmp	r3, r2
 801f79e:	d108      	bne.n	801f7b2 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 801f7a0:	68fb      	ldr	r3, [r7, #12]
 801f7a2:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 801f7a6:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 801f7a8:	683b      	ldr	r3, [r7, #0]
 801f7aa:	685b      	ldr	r3, [r3, #4]
 801f7ac:	68fa      	ldr	r2, [r7, #12]
 801f7ae:	4313      	orrs	r3, r2
 801f7b0:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 801f7b2:	68fb      	ldr	r3, [r7, #12]
 801f7b4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 801f7b8:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801f7ba:	683b      	ldr	r3, [r7, #0]
 801f7bc:	681b      	ldr	r3, [r3, #0]
 801f7be:	68fa      	ldr	r2, [r7, #12]
 801f7c0:	4313      	orrs	r3, r2
 801f7c2:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 801f7c4:	687b      	ldr	r3, [r7, #4]
 801f7c6:	681b      	ldr	r3, [r3, #0]
 801f7c8:	68fa      	ldr	r2, [r7, #12]
 801f7ca:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801f7cc:	687b      	ldr	r3, [r7, #4]
 801f7ce:	681b      	ldr	r3, [r3, #0]
 801f7d0:	4a20      	ldr	r2, [pc, #128]	@ (801f854 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 801f7d2:	4293      	cmp	r3, r2
 801f7d4:	d022      	beq.n	801f81c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f7d6:	687b      	ldr	r3, [r7, #4]
 801f7d8:	681b      	ldr	r3, [r3, #0]
 801f7da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801f7de:	d01d      	beq.n	801f81c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f7e0:	687b      	ldr	r3, [r7, #4]
 801f7e2:	681b      	ldr	r3, [r3, #0]
 801f7e4:	4a1d      	ldr	r2, [pc, #116]	@ (801f85c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 801f7e6:	4293      	cmp	r3, r2
 801f7e8:	d018      	beq.n	801f81c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f7ea:	687b      	ldr	r3, [r7, #4]
 801f7ec:	681b      	ldr	r3, [r3, #0]
 801f7ee:	4a1c      	ldr	r2, [pc, #112]	@ (801f860 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 801f7f0:	4293      	cmp	r3, r2
 801f7f2:	d013      	beq.n	801f81c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f7f4:	687b      	ldr	r3, [r7, #4]
 801f7f6:	681b      	ldr	r3, [r3, #0]
 801f7f8:	4a1a      	ldr	r2, [pc, #104]	@ (801f864 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 801f7fa:	4293      	cmp	r3, r2
 801f7fc:	d00e      	beq.n	801f81c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f7fe:	687b      	ldr	r3, [r7, #4]
 801f800:	681b      	ldr	r3, [r3, #0]
 801f802:	4a15      	ldr	r2, [pc, #84]	@ (801f858 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 801f804:	4293      	cmp	r3, r2
 801f806:	d009      	beq.n	801f81c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f808:	687b      	ldr	r3, [r7, #4]
 801f80a:	681b      	ldr	r3, [r3, #0]
 801f80c:	4a16      	ldr	r2, [pc, #88]	@ (801f868 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 801f80e:	4293      	cmp	r3, r2
 801f810:	d004      	beq.n	801f81c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 801f812:	687b      	ldr	r3, [r7, #4]
 801f814:	681b      	ldr	r3, [r3, #0]
 801f816:	4a15      	ldr	r2, [pc, #84]	@ (801f86c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 801f818:	4293      	cmp	r3, r2
 801f81a:	d10c      	bne.n	801f836 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 801f81c:	68bb      	ldr	r3, [r7, #8]
 801f81e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801f822:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 801f824:	683b      	ldr	r3, [r7, #0]
 801f826:	689b      	ldr	r3, [r3, #8]
 801f828:	68ba      	ldr	r2, [r7, #8]
 801f82a:	4313      	orrs	r3, r2
 801f82c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801f82e:	687b      	ldr	r3, [r7, #4]
 801f830:	681b      	ldr	r3, [r3, #0]
 801f832:	68ba      	ldr	r2, [r7, #8]
 801f834:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 801f836:	687b      	ldr	r3, [r7, #4]
 801f838:	2201      	movs	r2, #1
 801f83a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 801f83e:	687b      	ldr	r3, [r7, #4]
 801f840:	2200      	movs	r2, #0
 801f842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 801f846:	2300      	movs	r3, #0
}
 801f848:	4618      	mov	r0, r3
 801f84a:	3714      	adds	r7, #20
 801f84c:	46bd      	mov	sp, r7
 801f84e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801f852:	4770      	bx	lr
 801f854:	40010000 	.word	0x40010000
 801f858:	40010400 	.word	0x40010400
 801f85c:	40000400 	.word	0x40000400
 801f860:	40000800 	.word	0x40000800
 801f864:	40000c00 	.word	0x40000c00
 801f868:	40001800 	.word	0x40001800
 801f86c:	40014000 	.word	0x40014000

0801f870 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 801f870:	b580      	push	{r7, lr}
 801f872:	b082      	sub	sp, #8
 801f874:	af00      	add	r7, sp, #0
 801f876:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801f878:	687b      	ldr	r3, [r7, #4]
 801f87a:	2b00      	cmp	r3, #0
 801f87c:	d101      	bne.n	801f882 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 801f87e:	2301      	movs	r3, #1
 801f880:	e042      	b.n	801f908 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 801f882:	687b      	ldr	r3, [r7, #4]
 801f884:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801f888:	2b00      	cmp	r3, #0
 801f88a:	d106      	bne.n	801f89a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 801f88c:	687b      	ldr	r3, [r7, #4]
 801f88e:	2200      	movs	r2, #0
 801f890:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 801f894:	6878      	ldr	r0, [r7, #4]
 801f896:	f7e2 fbab 	bl	8001ff0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 801f89a:	687b      	ldr	r3, [r7, #4]
 801f89c:	2224      	movs	r2, #36	@ 0x24
 801f89e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 801f8a2:	687b      	ldr	r3, [r7, #4]
 801f8a4:	681b      	ldr	r3, [r3, #0]
 801f8a6:	681a      	ldr	r2, [r3, #0]
 801f8a8:	687b      	ldr	r3, [r7, #4]
 801f8aa:	681b      	ldr	r3, [r3, #0]
 801f8ac:	f022 0201 	bic.w	r2, r2, #1
 801f8b0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 801f8b2:	687b      	ldr	r3, [r7, #4]
 801f8b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f8b6:	2b00      	cmp	r3, #0
 801f8b8:	d002      	beq.n	801f8c0 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 801f8ba:	6878      	ldr	r0, [r7, #4]
 801f8bc:	f000 fd90 	bl	80203e0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 801f8c0:	6878      	ldr	r0, [r7, #4]
 801f8c2:	f000 f825 	bl	801f910 <UART_SetConfig>
 801f8c6:	4603      	mov	r3, r0
 801f8c8:	2b01      	cmp	r3, #1
 801f8ca:	d101      	bne.n	801f8d0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 801f8cc:	2301      	movs	r3, #1
 801f8ce:	e01b      	b.n	801f908 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 801f8d0:	687b      	ldr	r3, [r7, #4]
 801f8d2:	681b      	ldr	r3, [r3, #0]
 801f8d4:	685a      	ldr	r2, [r3, #4]
 801f8d6:	687b      	ldr	r3, [r7, #4]
 801f8d8:	681b      	ldr	r3, [r3, #0]
 801f8da:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 801f8de:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 801f8e0:	687b      	ldr	r3, [r7, #4]
 801f8e2:	681b      	ldr	r3, [r3, #0]
 801f8e4:	689a      	ldr	r2, [r3, #8]
 801f8e6:	687b      	ldr	r3, [r7, #4]
 801f8e8:	681b      	ldr	r3, [r3, #0]
 801f8ea:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 801f8ee:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 801f8f0:	687b      	ldr	r3, [r7, #4]
 801f8f2:	681b      	ldr	r3, [r3, #0]
 801f8f4:	681a      	ldr	r2, [r3, #0]
 801f8f6:	687b      	ldr	r3, [r7, #4]
 801f8f8:	681b      	ldr	r3, [r3, #0]
 801f8fa:	f042 0201 	orr.w	r2, r2, #1
 801f8fe:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 801f900:	6878      	ldr	r0, [r7, #4]
 801f902:	f000 fe0f 	bl	8020524 <UART_CheckIdleState>
 801f906:	4603      	mov	r3, r0
}
 801f908:	4618      	mov	r0, r3
 801f90a:	3708      	adds	r7, #8
 801f90c:	46bd      	mov	sp, r7
 801f90e:	bd80      	pop	{r7, pc}

0801f910 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 801f910:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801f914:	b092      	sub	sp, #72	@ 0x48
 801f916:	af00      	add	r7, sp, #0
 801f918:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801f91a:	2300      	movs	r3, #0
 801f91c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 801f920:	697b      	ldr	r3, [r7, #20]
 801f922:	689a      	ldr	r2, [r3, #8]
 801f924:	697b      	ldr	r3, [r7, #20]
 801f926:	691b      	ldr	r3, [r3, #16]
 801f928:	431a      	orrs	r2, r3
 801f92a:	697b      	ldr	r3, [r7, #20]
 801f92c:	695b      	ldr	r3, [r3, #20]
 801f92e:	431a      	orrs	r2, r3
 801f930:	697b      	ldr	r3, [r7, #20]
 801f932:	69db      	ldr	r3, [r3, #28]
 801f934:	4313      	orrs	r3, r2
 801f936:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801f938:	697b      	ldr	r3, [r7, #20]
 801f93a:	681b      	ldr	r3, [r3, #0]
 801f93c:	681a      	ldr	r2, [r3, #0]
 801f93e:	4bbe      	ldr	r3, [pc, #760]	@ (801fc38 <UART_SetConfig+0x328>)
 801f940:	4013      	ands	r3, r2
 801f942:	697a      	ldr	r2, [r7, #20]
 801f944:	6812      	ldr	r2, [r2, #0]
 801f946:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801f948:	430b      	orrs	r3, r1
 801f94a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 801f94c:	697b      	ldr	r3, [r7, #20]
 801f94e:	681b      	ldr	r3, [r3, #0]
 801f950:	685b      	ldr	r3, [r3, #4]
 801f952:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801f956:	697b      	ldr	r3, [r7, #20]
 801f958:	68da      	ldr	r2, [r3, #12]
 801f95a:	697b      	ldr	r3, [r7, #20]
 801f95c:	681b      	ldr	r3, [r3, #0]
 801f95e:	430a      	orrs	r2, r1
 801f960:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801f962:	697b      	ldr	r3, [r7, #20]
 801f964:	699b      	ldr	r3, [r3, #24]
 801f966:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801f968:	697b      	ldr	r3, [r7, #20]
 801f96a:	681b      	ldr	r3, [r3, #0]
 801f96c:	4ab3      	ldr	r2, [pc, #716]	@ (801fc3c <UART_SetConfig+0x32c>)
 801f96e:	4293      	cmp	r3, r2
 801f970:	d004      	beq.n	801f97c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801f972:	697b      	ldr	r3, [r7, #20]
 801f974:	6a1b      	ldr	r3, [r3, #32]
 801f976:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801f978:	4313      	orrs	r3, r2
 801f97a:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801f97c:	697b      	ldr	r3, [r7, #20]
 801f97e:	681b      	ldr	r3, [r3, #0]
 801f980:	689a      	ldr	r2, [r3, #8]
 801f982:	4baf      	ldr	r3, [pc, #700]	@ (801fc40 <UART_SetConfig+0x330>)
 801f984:	4013      	ands	r3, r2
 801f986:	697a      	ldr	r2, [r7, #20]
 801f988:	6812      	ldr	r2, [r2, #0]
 801f98a:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801f98c:	430b      	orrs	r3, r1
 801f98e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801f990:	697b      	ldr	r3, [r7, #20]
 801f992:	681b      	ldr	r3, [r3, #0]
 801f994:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f996:	f023 010f 	bic.w	r1, r3, #15
 801f99a:	697b      	ldr	r3, [r7, #20]
 801f99c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801f99e:	697b      	ldr	r3, [r7, #20]
 801f9a0:	681b      	ldr	r3, [r3, #0]
 801f9a2:	430a      	orrs	r2, r1
 801f9a4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801f9a6:	697b      	ldr	r3, [r7, #20]
 801f9a8:	681b      	ldr	r3, [r3, #0]
 801f9aa:	4aa6      	ldr	r2, [pc, #664]	@ (801fc44 <UART_SetConfig+0x334>)
 801f9ac:	4293      	cmp	r3, r2
 801f9ae:	d177      	bne.n	801faa0 <UART_SetConfig+0x190>
 801f9b0:	4ba5      	ldr	r3, [pc, #660]	@ (801fc48 <UART_SetConfig+0x338>)
 801f9b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801f9b4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801f9b8:	2b28      	cmp	r3, #40	@ 0x28
 801f9ba:	d86d      	bhi.n	801fa98 <UART_SetConfig+0x188>
 801f9bc:	a201      	add	r2, pc, #4	@ (adr r2, 801f9c4 <UART_SetConfig+0xb4>)
 801f9be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801f9c2:	bf00      	nop
 801f9c4:	0801fa69 	.word	0x0801fa69
 801f9c8:	0801fa99 	.word	0x0801fa99
 801f9cc:	0801fa99 	.word	0x0801fa99
 801f9d0:	0801fa99 	.word	0x0801fa99
 801f9d4:	0801fa99 	.word	0x0801fa99
 801f9d8:	0801fa99 	.word	0x0801fa99
 801f9dc:	0801fa99 	.word	0x0801fa99
 801f9e0:	0801fa99 	.word	0x0801fa99
 801f9e4:	0801fa71 	.word	0x0801fa71
 801f9e8:	0801fa99 	.word	0x0801fa99
 801f9ec:	0801fa99 	.word	0x0801fa99
 801f9f0:	0801fa99 	.word	0x0801fa99
 801f9f4:	0801fa99 	.word	0x0801fa99
 801f9f8:	0801fa99 	.word	0x0801fa99
 801f9fc:	0801fa99 	.word	0x0801fa99
 801fa00:	0801fa99 	.word	0x0801fa99
 801fa04:	0801fa79 	.word	0x0801fa79
 801fa08:	0801fa99 	.word	0x0801fa99
 801fa0c:	0801fa99 	.word	0x0801fa99
 801fa10:	0801fa99 	.word	0x0801fa99
 801fa14:	0801fa99 	.word	0x0801fa99
 801fa18:	0801fa99 	.word	0x0801fa99
 801fa1c:	0801fa99 	.word	0x0801fa99
 801fa20:	0801fa99 	.word	0x0801fa99
 801fa24:	0801fa81 	.word	0x0801fa81
 801fa28:	0801fa99 	.word	0x0801fa99
 801fa2c:	0801fa99 	.word	0x0801fa99
 801fa30:	0801fa99 	.word	0x0801fa99
 801fa34:	0801fa99 	.word	0x0801fa99
 801fa38:	0801fa99 	.word	0x0801fa99
 801fa3c:	0801fa99 	.word	0x0801fa99
 801fa40:	0801fa99 	.word	0x0801fa99
 801fa44:	0801fa89 	.word	0x0801fa89
 801fa48:	0801fa99 	.word	0x0801fa99
 801fa4c:	0801fa99 	.word	0x0801fa99
 801fa50:	0801fa99 	.word	0x0801fa99
 801fa54:	0801fa99 	.word	0x0801fa99
 801fa58:	0801fa99 	.word	0x0801fa99
 801fa5c:	0801fa99 	.word	0x0801fa99
 801fa60:	0801fa99 	.word	0x0801fa99
 801fa64:	0801fa91 	.word	0x0801fa91
 801fa68:	2301      	movs	r3, #1
 801fa6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fa6e:	e222      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fa70:	2304      	movs	r3, #4
 801fa72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fa76:	e21e      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fa78:	2308      	movs	r3, #8
 801fa7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fa7e:	e21a      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fa80:	2310      	movs	r3, #16
 801fa82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fa86:	e216      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fa88:	2320      	movs	r3, #32
 801fa8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fa8e:	e212      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fa90:	2340      	movs	r3, #64	@ 0x40
 801fa92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fa96:	e20e      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fa98:	2380      	movs	r3, #128	@ 0x80
 801fa9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fa9e:	e20a      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801faa0:	697b      	ldr	r3, [r7, #20]
 801faa2:	681b      	ldr	r3, [r3, #0]
 801faa4:	4a69      	ldr	r2, [pc, #420]	@ (801fc4c <UART_SetConfig+0x33c>)
 801faa6:	4293      	cmp	r3, r2
 801faa8:	d130      	bne.n	801fb0c <UART_SetConfig+0x1fc>
 801faaa:	4b67      	ldr	r3, [pc, #412]	@ (801fc48 <UART_SetConfig+0x338>)
 801faac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801faae:	f003 0307 	and.w	r3, r3, #7
 801fab2:	2b05      	cmp	r3, #5
 801fab4:	d826      	bhi.n	801fb04 <UART_SetConfig+0x1f4>
 801fab6:	a201      	add	r2, pc, #4	@ (adr r2, 801fabc <UART_SetConfig+0x1ac>)
 801fab8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fabc:	0801fad5 	.word	0x0801fad5
 801fac0:	0801fadd 	.word	0x0801fadd
 801fac4:	0801fae5 	.word	0x0801fae5
 801fac8:	0801faed 	.word	0x0801faed
 801facc:	0801faf5 	.word	0x0801faf5
 801fad0:	0801fafd 	.word	0x0801fafd
 801fad4:	2300      	movs	r3, #0
 801fad6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fada:	e1ec      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fadc:	2304      	movs	r3, #4
 801fade:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fae2:	e1e8      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fae4:	2308      	movs	r3, #8
 801fae6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801faea:	e1e4      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801faec:	2310      	movs	r3, #16
 801faee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801faf2:	e1e0      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801faf4:	2320      	movs	r3, #32
 801faf6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fafa:	e1dc      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fafc:	2340      	movs	r3, #64	@ 0x40
 801fafe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb02:	e1d8      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fb04:	2380      	movs	r3, #128	@ 0x80
 801fb06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb0a:	e1d4      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fb0c:	697b      	ldr	r3, [r7, #20]
 801fb0e:	681b      	ldr	r3, [r3, #0]
 801fb10:	4a4f      	ldr	r2, [pc, #316]	@ (801fc50 <UART_SetConfig+0x340>)
 801fb12:	4293      	cmp	r3, r2
 801fb14:	d130      	bne.n	801fb78 <UART_SetConfig+0x268>
 801fb16:	4b4c      	ldr	r3, [pc, #304]	@ (801fc48 <UART_SetConfig+0x338>)
 801fb18:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fb1a:	f003 0307 	and.w	r3, r3, #7
 801fb1e:	2b05      	cmp	r3, #5
 801fb20:	d826      	bhi.n	801fb70 <UART_SetConfig+0x260>
 801fb22:	a201      	add	r2, pc, #4	@ (adr r2, 801fb28 <UART_SetConfig+0x218>)
 801fb24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb28:	0801fb41 	.word	0x0801fb41
 801fb2c:	0801fb49 	.word	0x0801fb49
 801fb30:	0801fb51 	.word	0x0801fb51
 801fb34:	0801fb59 	.word	0x0801fb59
 801fb38:	0801fb61 	.word	0x0801fb61
 801fb3c:	0801fb69 	.word	0x0801fb69
 801fb40:	2300      	movs	r3, #0
 801fb42:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb46:	e1b6      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fb48:	2304      	movs	r3, #4
 801fb4a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb4e:	e1b2      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fb50:	2308      	movs	r3, #8
 801fb52:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb56:	e1ae      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fb58:	2310      	movs	r3, #16
 801fb5a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb5e:	e1aa      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fb60:	2320      	movs	r3, #32
 801fb62:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb66:	e1a6      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fb68:	2340      	movs	r3, #64	@ 0x40
 801fb6a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb6e:	e1a2      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fb70:	2380      	movs	r3, #128	@ 0x80
 801fb72:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fb76:	e19e      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fb78:	697b      	ldr	r3, [r7, #20]
 801fb7a:	681b      	ldr	r3, [r3, #0]
 801fb7c:	4a35      	ldr	r2, [pc, #212]	@ (801fc54 <UART_SetConfig+0x344>)
 801fb7e:	4293      	cmp	r3, r2
 801fb80:	d130      	bne.n	801fbe4 <UART_SetConfig+0x2d4>
 801fb82:	4b31      	ldr	r3, [pc, #196]	@ (801fc48 <UART_SetConfig+0x338>)
 801fb84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fb86:	f003 0307 	and.w	r3, r3, #7
 801fb8a:	2b05      	cmp	r3, #5
 801fb8c:	d826      	bhi.n	801fbdc <UART_SetConfig+0x2cc>
 801fb8e:	a201      	add	r2, pc, #4	@ (adr r2, 801fb94 <UART_SetConfig+0x284>)
 801fb90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fb94:	0801fbad 	.word	0x0801fbad
 801fb98:	0801fbb5 	.word	0x0801fbb5
 801fb9c:	0801fbbd 	.word	0x0801fbbd
 801fba0:	0801fbc5 	.word	0x0801fbc5
 801fba4:	0801fbcd 	.word	0x0801fbcd
 801fba8:	0801fbd5 	.word	0x0801fbd5
 801fbac:	2300      	movs	r3, #0
 801fbae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbb2:	e180      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fbb4:	2304      	movs	r3, #4
 801fbb6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbba:	e17c      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fbbc:	2308      	movs	r3, #8
 801fbbe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbc2:	e178      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fbc4:	2310      	movs	r3, #16
 801fbc6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbca:	e174      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fbcc:	2320      	movs	r3, #32
 801fbce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbd2:	e170      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fbd4:	2340      	movs	r3, #64	@ 0x40
 801fbd6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbda:	e16c      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fbdc:	2380      	movs	r3, #128	@ 0x80
 801fbde:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fbe2:	e168      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fbe4:	697b      	ldr	r3, [r7, #20]
 801fbe6:	681b      	ldr	r3, [r3, #0]
 801fbe8:	4a1b      	ldr	r2, [pc, #108]	@ (801fc58 <UART_SetConfig+0x348>)
 801fbea:	4293      	cmp	r3, r2
 801fbec:	d142      	bne.n	801fc74 <UART_SetConfig+0x364>
 801fbee:	4b16      	ldr	r3, [pc, #88]	@ (801fc48 <UART_SetConfig+0x338>)
 801fbf0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fbf2:	f003 0307 	and.w	r3, r3, #7
 801fbf6:	2b05      	cmp	r3, #5
 801fbf8:	d838      	bhi.n	801fc6c <UART_SetConfig+0x35c>
 801fbfa:	a201      	add	r2, pc, #4	@ (adr r2, 801fc00 <UART_SetConfig+0x2f0>)
 801fbfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fc00:	0801fc19 	.word	0x0801fc19
 801fc04:	0801fc21 	.word	0x0801fc21
 801fc08:	0801fc29 	.word	0x0801fc29
 801fc0c:	0801fc31 	.word	0x0801fc31
 801fc10:	0801fc5d 	.word	0x0801fc5d
 801fc14:	0801fc65 	.word	0x0801fc65
 801fc18:	2300      	movs	r3, #0
 801fc1a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc1e:	e14a      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fc20:	2304      	movs	r3, #4
 801fc22:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc26:	e146      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fc28:	2308      	movs	r3, #8
 801fc2a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc2e:	e142      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fc30:	2310      	movs	r3, #16
 801fc32:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc36:	e13e      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fc38:	cfff69f3 	.word	0xcfff69f3
 801fc3c:	58000c00 	.word	0x58000c00
 801fc40:	11fff4ff 	.word	0x11fff4ff
 801fc44:	40011000 	.word	0x40011000
 801fc48:	58024400 	.word	0x58024400
 801fc4c:	40004400 	.word	0x40004400
 801fc50:	40004800 	.word	0x40004800
 801fc54:	40004c00 	.word	0x40004c00
 801fc58:	40005000 	.word	0x40005000
 801fc5c:	2320      	movs	r3, #32
 801fc5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc62:	e128      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fc64:	2340      	movs	r3, #64	@ 0x40
 801fc66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc6a:	e124      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fc6c:	2380      	movs	r3, #128	@ 0x80
 801fc6e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fc72:	e120      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fc74:	697b      	ldr	r3, [r7, #20]
 801fc76:	681b      	ldr	r3, [r3, #0]
 801fc78:	4acb      	ldr	r2, [pc, #812]	@ (801ffa8 <UART_SetConfig+0x698>)
 801fc7a:	4293      	cmp	r3, r2
 801fc7c:	d176      	bne.n	801fd6c <UART_SetConfig+0x45c>
 801fc7e:	4bcb      	ldr	r3, [pc, #812]	@ (801ffac <UART_SetConfig+0x69c>)
 801fc80:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fc82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801fc86:	2b28      	cmp	r3, #40	@ 0x28
 801fc88:	d86c      	bhi.n	801fd64 <UART_SetConfig+0x454>
 801fc8a:	a201      	add	r2, pc, #4	@ (adr r2, 801fc90 <UART_SetConfig+0x380>)
 801fc8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fc90:	0801fd35 	.word	0x0801fd35
 801fc94:	0801fd65 	.word	0x0801fd65
 801fc98:	0801fd65 	.word	0x0801fd65
 801fc9c:	0801fd65 	.word	0x0801fd65
 801fca0:	0801fd65 	.word	0x0801fd65
 801fca4:	0801fd65 	.word	0x0801fd65
 801fca8:	0801fd65 	.word	0x0801fd65
 801fcac:	0801fd65 	.word	0x0801fd65
 801fcb0:	0801fd3d 	.word	0x0801fd3d
 801fcb4:	0801fd65 	.word	0x0801fd65
 801fcb8:	0801fd65 	.word	0x0801fd65
 801fcbc:	0801fd65 	.word	0x0801fd65
 801fcc0:	0801fd65 	.word	0x0801fd65
 801fcc4:	0801fd65 	.word	0x0801fd65
 801fcc8:	0801fd65 	.word	0x0801fd65
 801fccc:	0801fd65 	.word	0x0801fd65
 801fcd0:	0801fd45 	.word	0x0801fd45
 801fcd4:	0801fd65 	.word	0x0801fd65
 801fcd8:	0801fd65 	.word	0x0801fd65
 801fcdc:	0801fd65 	.word	0x0801fd65
 801fce0:	0801fd65 	.word	0x0801fd65
 801fce4:	0801fd65 	.word	0x0801fd65
 801fce8:	0801fd65 	.word	0x0801fd65
 801fcec:	0801fd65 	.word	0x0801fd65
 801fcf0:	0801fd4d 	.word	0x0801fd4d
 801fcf4:	0801fd65 	.word	0x0801fd65
 801fcf8:	0801fd65 	.word	0x0801fd65
 801fcfc:	0801fd65 	.word	0x0801fd65
 801fd00:	0801fd65 	.word	0x0801fd65
 801fd04:	0801fd65 	.word	0x0801fd65
 801fd08:	0801fd65 	.word	0x0801fd65
 801fd0c:	0801fd65 	.word	0x0801fd65
 801fd10:	0801fd55 	.word	0x0801fd55
 801fd14:	0801fd65 	.word	0x0801fd65
 801fd18:	0801fd65 	.word	0x0801fd65
 801fd1c:	0801fd65 	.word	0x0801fd65
 801fd20:	0801fd65 	.word	0x0801fd65
 801fd24:	0801fd65 	.word	0x0801fd65
 801fd28:	0801fd65 	.word	0x0801fd65
 801fd2c:	0801fd65 	.word	0x0801fd65
 801fd30:	0801fd5d 	.word	0x0801fd5d
 801fd34:	2301      	movs	r3, #1
 801fd36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd3a:	e0bc      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fd3c:	2304      	movs	r3, #4
 801fd3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd42:	e0b8      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fd44:	2308      	movs	r3, #8
 801fd46:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd4a:	e0b4      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fd4c:	2310      	movs	r3, #16
 801fd4e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd52:	e0b0      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fd54:	2320      	movs	r3, #32
 801fd56:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd5a:	e0ac      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fd5c:	2340      	movs	r3, #64	@ 0x40
 801fd5e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd62:	e0a8      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fd64:	2380      	movs	r3, #128	@ 0x80
 801fd66:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fd6a:	e0a4      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fd6c:	697b      	ldr	r3, [r7, #20]
 801fd6e:	681b      	ldr	r3, [r3, #0]
 801fd70:	4a8f      	ldr	r2, [pc, #572]	@ (801ffb0 <UART_SetConfig+0x6a0>)
 801fd72:	4293      	cmp	r3, r2
 801fd74:	d130      	bne.n	801fdd8 <UART_SetConfig+0x4c8>
 801fd76:	4b8d      	ldr	r3, [pc, #564]	@ (801ffac <UART_SetConfig+0x69c>)
 801fd78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fd7a:	f003 0307 	and.w	r3, r3, #7
 801fd7e:	2b05      	cmp	r3, #5
 801fd80:	d826      	bhi.n	801fdd0 <UART_SetConfig+0x4c0>
 801fd82:	a201      	add	r2, pc, #4	@ (adr r2, 801fd88 <UART_SetConfig+0x478>)
 801fd84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fd88:	0801fda1 	.word	0x0801fda1
 801fd8c:	0801fda9 	.word	0x0801fda9
 801fd90:	0801fdb1 	.word	0x0801fdb1
 801fd94:	0801fdb9 	.word	0x0801fdb9
 801fd98:	0801fdc1 	.word	0x0801fdc1
 801fd9c:	0801fdc9 	.word	0x0801fdc9
 801fda0:	2300      	movs	r3, #0
 801fda2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fda6:	e086      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fda8:	2304      	movs	r3, #4
 801fdaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdae:	e082      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fdb0:	2308      	movs	r3, #8
 801fdb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdb6:	e07e      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fdb8:	2310      	movs	r3, #16
 801fdba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdbe:	e07a      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fdc0:	2320      	movs	r3, #32
 801fdc2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdc6:	e076      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fdc8:	2340      	movs	r3, #64	@ 0x40
 801fdca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdce:	e072      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fdd0:	2380      	movs	r3, #128	@ 0x80
 801fdd2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fdd6:	e06e      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fdd8:	697b      	ldr	r3, [r7, #20]
 801fdda:	681b      	ldr	r3, [r3, #0]
 801fddc:	4a75      	ldr	r2, [pc, #468]	@ (801ffb4 <UART_SetConfig+0x6a4>)
 801fdde:	4293      	cmp	r3, r2
 801fde0:	d130      	bne.n	801fe44 <UART_SetConfig+0x534>
 801fde2:	4b72      	ldr	r3, [pc, #456]	@ (801ffac <UART_SetConfig+0x69c>)
 801fde4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801fde6:	f003 0307 	and.w	r3, r3, #7
 801fdea:	2b05      	cmp	r3, #5
 801fdec:	d826      	bhi.n	801fe3c <UART_SetConfig+0x52c>
 801fdee:	a201      	add	r2, pc, #4	@ (adr r2, 801fdf4 <UART_SetConfig+0x4e4>)
 801fdf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fdf4:	0801fe0d 	.word	0x0801fe0d
 801fdf8:	0801fe15 	.word	0x0801fe15
 801fdfc:	0801fe1d 	.word	0x0801fe1d
 801fe00:	0801fe25 	.word	0x0801fe25
 801fe04:	0801fe2d 	.word	0x0801fe2d
 801fe08:	0801fe35 	.word	0x0801fe35
 801fe0c:	2300      	movs	r3, #0
 801fe0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe12:	e050      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fe14:	2304      	movs	r3, #4
 801fe16:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe1a:	e04c      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fe1c:	2308      	movs	r3, #8
 801fe1e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe22:	e048      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fe24:	2310      	movs	r3, #16
 801fe26:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe2a:	e044      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fe2c:	2320      	movs	r3, #32
 801fe2e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe32:	e040      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fe34:	2340      	movs	r3, #64	@ 0x40
 801fe36:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe3a:	e03c      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fe3c:	2380      	movs	r3, #128	@ 0x80
 801fe3e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe42:	e038      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fe44:	697b      	ldr	r3, [r7, #20]
 801fe46:	681b      	ldr	r3, [r3, #0]
 801fe48:	4a5b      	ldr	r2, [pc, #364]	@ (801ffb8 <UART_SetConfig+0x6a8>)
 801fe4a:	4293      	cmp	r3, r2
 801fe4c:	d130      	bne.n	801feb0 <UART_SetConfig+0x5a0>
 801fe4e:	4b57      	ldr	r3, [pc, #348]	@ (801ffac <UART_SetConfig+0x69c>)
 801fe50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801fe52:	f003 0307 	and.w	r3, r3, #7
 801fe56:	2b05      	cmp	r3, #5
 801fe58:	d826      	bhi.n	801fea8 <UART_SetConfig+0x598>
 801fe5a:	a201      	add	r2, pc, #4	@ (adr r2, 801fe60 <UART_SetConfig+0x550>)
 801fe5c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fe60:	0801fe79 	.word	0x0801fe79
 801fe64:	0801fe81 	.word	0x0801fe81
 801fe68:	0801fe89 	.word	0x0801fe89
 801fe6c:	0801fe91 	.word	0x0801fe91
 801fe70:	0801fe99 	.word	0x0801fe99
 801fe74:	0801fea1 	.word	0x0801fea1
 801fe78:	2302      	movs	r3, #2
 801fe7a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe7e:	e01a      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fe80:	2304      	movs	r3, #4
 801fe82:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe86:	e016      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fe88:	2308      	movs	r3, #8
 801fe8a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe8e:	e012      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fe90:	2310      	movs	r3, #16
 801fe92:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe96:	e00e      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fe98:	2320      	movs	r3, #32
 801fe9a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fe9e:	e00a      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fea0:	2340      	movs	r3, #64	@ 0x40
 801fea2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801fea6:	e006      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801fea8:	2380      	movs	r3, #128	@ 0x80
 801feaa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801feae:	e002      	b.n	801feb6 <UART_SetConfig+0x5a6>
 801feb0:	2380      	movs	r3, #128	@ 0x80
 801feb2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801feb6:	697b      	ldr	r3, [r7, #20]
 801feb8:	681b      	ldr	r3, [r3, #0]
 801feba:	4a3f      	ldr	r2, [pc, #252]	@ (801ffb8 <UART_SetConfig+0x6a8>)
 801febc:	4293      	cmp	r3, r2
 801febe:	f040 80f8 	bne.w	80200b2 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801fec2:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 801fec6:	2b20      	cmp	r3, #32
 801fec8:	dc46      	bgt.n	801ff58 <UART_SetConfig+0x648>
 801feca:	2b02      	cmp	r3, #2
 801fecc:	f2c0 8082 	blt.w	801ffd4 <UART_SetConfig+0x6c4>
 801fed0:	3b02      	subs	r3, #2
 801fed2:	2b1e      	cmp	r3, #30
 801fed4:	d87e      	bhi.n	801ffd4 <UART_SetConfig+0x6c4>
 801fed6:	a201      	add	r2, pc, #4	@ (adr r2, 801fedc <UART_SetConfig+0x5cc>)
 801fed8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801fedc:	0801ff5f 	.word	0x0801ff5f
 801fee0:	0801ffd5 	.word	0x0801ffd5
 801fee4:	0801ff67 	.word	0x0801ff67
 801fee8:	0801ffd5 	.word	0x0801ffd5
 801feec:	0801ffd5 	.word	0x0801ffd5
 801fef0:	0801ffd5 	.word	0x0801ffd5
 801fef4:	0801ff77 	.word	0x0801ff77
 801fef8:	0801ffd5 	.word	0x0801ffd5
 801fefc:	0801ffd5 	.word	0x0801ffd5
 801ff00:	0801ffd5 	.word	0x0801ffd5
 801ff04:	0801ffd5 	.word	0x0801ffd5
 801ff08:	0801ffd5 	.word	0x0801ffd5
 801ff0c:	0801ffd5 	.word	0x0801ffd5
 801ff10:	0801ffd5 	.word	0x0801ffd5
 801ff14:	0801ff87 	.word	0x0801ff87
 801ff18:	0801ffd5 	.word	0x0801ffd5
 801ff1c:	0801ffd5 	.word	0x0801ffd5
 801ff20:	0801ffd5 	.word	0x0801ffd5
 801ff24:	0801ffd5 	.word	0x0801ffd5
 801ff28:	0801ffd5 	.word	0x0801ffd5
 801ff2c:	0801ffd5 	.word	0x0801ffd5
 801ff30:	0801ffd5 	.word	0x0801ffd5
 801ff34:	0801ffd5 	.word	0x0801ffd5
 801ff38:	0801ffd5 	.word	0x0801ffd5
 801ff3c:	0801ffd5 	.word	0x0801ffd5
 801ff40:	0801ffd5 	.word	0x0801ffd5
 801ff44:	0801ffd5 	.word	0x0801ffd5
 801ff48:	0801ffd5 	.word	0x0801ffd5
 801ff4c:	0801ffd5 	.word	0x0801ffd5
 801ff50:	0801ffd5 	.word	0x0801ffd5
 801ff54:	0801ffc7 	.word	0x0801ffc7
 801ff58:	2b40      	cmp	r3, #64	@ 0x40
 801ff5a:	d037      	beq.n	801ffcc <UART_SetConfig+0x6bc>
 801ff5c:	e03a      	b.n	801ffd4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 801ff5e:	f7fe f8d3 	bl	801e108 <HAL_RCCEx_GetD3PCLK1Freq>
 801ff62:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801ff64:	e03c      	b.n	801ffe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ff66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801ff6a:	4618      	mov	r0, r3
 801ff6c:	f7fe f8e2 	bl	801e134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 801ff70:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801ff72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ff74:	e034      	b.n	801ffe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801ff76:	f107 0318 	add.w	r3, r7, #24
 801ff7a:	4618      	mov	r0, r3
 801ff7c:	f7fe fa2e 	bl	801e3dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 801ff80:	69fb      	ldr	r3, [r7, #28]
 801ff82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ff84:	e02c      	b.n	801ffe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ff86:	4b09      	ldr	r3, [pc, #36]	@ (801ffac <UART_SetConfig+0x69c>)
 801ff88:	681b      	ldr	r3, [r3, #0]
 801ff8a:	f003 0320 	and.w	r3, r3, #32
 801ff8e:	2b00      	cmp	r3, #0
 801ff90:	d016      	beq.n	801ffc0 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801ff92:	4b06      	ldr	r3, [pc, #24]	@ (801ffac <UART_SetConfig+0x69c>)
 801ff94:	681b      	ldr	r3, [r3, #0]
 801ff96:	08db      	lsrs	r3, r3, #3
 801ff98:	f003 0303 	and.w	r3, r3, #3
 801ff9c:	4a07      	ldr	r2, [pc, #28]	@ (801ffbc <UART_SetConfig+0x6ac>)
 801ff9e:	fa22 f303 	lsr.w	r3, r2, r3
 801ffa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801ffa4:	e01c      	b.n	801ffe0 <UART_SetConfig+0x6d0>
 801ffa6:	bf00      	nop
 801ffa8:	40011400 	.word	0x40011400
 801ffac:	58024400 	.word	0x58024400
 801ffb0:	40007800 	.word	0x40007800
 801ffb4:	40007c00 	.word	0x40007c00
 801ffb8:	58000c00 	.word	0x58000c00
 801ffbc:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 801ffc0:	4b9d      	ldr	r3, [pc, #628]	@ (8020238 <UART_SetConfig+0x928>)
 801ffc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ffc4:	e00c      	b.n	801ffe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 801ffc6:	4b9d      	ldr	r3, [pc, #628]	@ (802023c <UART_SetConfig+0x92c>)
 801ffc8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ffca:	e009      	b.n	801ffe0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801ffcc:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801ffd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ffd2:	e005      	b.n	801ffe0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 801ffd4:	2300      	movs	r3, #0
 801ffd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 801ffd8:	2301      	movs	r3, #1
 801ffda:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801ffde:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 801ffe0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ffe2:	2b00      	cmp	r3, #0
 801ffe4:	f000 81de 	beq.w	80203a4 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 801ffe8:	697b      	ldr	r3, [r7, #20]
 801ffea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801ffec:	4a94      	ldr	r2, [pc, #592]	@ (8020240 <UART_SetConfig+0x930>)
 801ffee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 801fff2:	461a      	mov	r2, r3
 801fff4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801fff6:	fbb3 f3f2 	udiv	r3, r3, r2
 801fffa:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801fffc:	697b      	ldr	r3, [r7, #20]
 801fffe:	685a      	ldr	r2, [r3, #4]
 8020000:	4613      	mov	r3, r2
 8020002:	005b      	lsls	r3, r3, #1
 8020004:	4413      	add	r3, r2
 8020006:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020008:	429a      	cmp	r2, r3
 802000a:	d305      	bcc.n	8020018 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 802000c:	697b      	ldr	r3, [r7, #20]
 802000e:	685b      	ldr	r3, [r3, #4]
 8020010:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8020012:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8020014:	429a      	cmp	r2, r3
 8020016:	d903      	bls.n	8020020 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8020018:	2301      	movs	r3, #1
 802001a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 802001e:	e1c1      	b.n	80203a4 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020020:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020022:	2200      	movs	r2, #0
 8020024:	60bb      	str	r3, [r7, #8]
 8020026:	60fa      	str	r2, [r7, #12]
 8020028:	697b      	ldr	r3, [r7, #20]
 802002a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 802002c:	4a84      	ldr	r2, [pc, #528]	@ (8020240 <UART_SetConfig+0x930>)
 802002e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8020032:	b29b      	uxth	r3, r3
 8020034:	2200      	movs	r2, #0
 8020036:	603b      	str	r3, [r7, #0]
 8020038:	607a      	str	r2, [r7, #4]
 802003a:	e9d7 2300 	ldrd	r2, r3, [r7]
 802003e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8020042:	f7e0 f9b5 	bl	80003b0 <__aeabi_uldivmod>
 8020046:	4602      	mov	r2, r0
 8020048:	460b      	mov	r3, r1
 802004a:	4610      	mov	r0, r2
 802004c:	4619      	mov	r1, r3
 802004e:	f04f 0200 	mov.w	r2, #0
 8020052:	f04f 0300 	mov.w	r3, #0
 8020056:	020b      	lsls	r3, r1, #8
 8020058:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 802005c:	0202      	lsls	r2, r0, #8
 802005e:	6979      	ldr	r1, [r7, #20]
 8020060:	6849      	ldr	r1, [r1, #4]
 8020062:	0849      	lsrs	r1, r1, #1
 8020064:	2000      	movs	r0, #0
 8020066:	460c      	mov	r4, r1
 8020068:	4605      	mov	r5, r0
 802006a:	eb12 0804 	adds.w	r8, r2, r4
 802006e:	eb43 0905 	adc.w	r9, r3, r5
 8020072:	697b      	ldr	r3, [r7, #20]
 8020074:	685b      	ldr	r3, [r3, #4]
 8020076:	2200      	movs	r2, #0
 8020078:	469a      	mov	sl, r3
 802007a:	4693      	mov	fp, r2
 802007c:	4652      	mov	r2, sl
 802007e:	465b      	mov	r3, fp
 8020080:	4640      	mov	r0, r8
 8020082:	4649      	mov	r1, r9
 8020084:	f7e0 f994 	bl	80003b0 <__aeabi_uldivmod>
 8020088:	4602      	mov	r2, r0
 802008a:	460b      	mov	r3, r1
 802008c:	4613      	mov	r3, r2
 802008e:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8020090:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020092:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8020096:	d308      	bcc.n	80200aa <UART_SetConfig+0x79a>
 8020098:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802009a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 802009e:	d204      	bcs.n	80200aa <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 80200a0:	697b      	ldr	r3, [r7, #20]
 80200a2:	681b      	ldr	r3, [r3, #0]
 80200a4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80200a6:	60da      	str	r2, [r3, #12]
 80200a8:	e17c      	b.n	80203a4 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 80200aa:	2301      	movs	r3, #1
 80200ac:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80200b0:	e178      	b.n	80203a4 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80200b2:	697b      	ldr	r3, [r7, #20]
 80200b4:	69db      	ldr	r3, [r3, #28]
 80200b6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80200ba:	f040 80c5 	bne.w	8020248 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 80200be:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80200c2:	2b20      	cmp	r3, #32
 80200c4:	dc48      	bgt.n	8020158 <UART_SetConfig+0x848>
 80200c6:	2b00      	cmp	r3, #0
 80200c8:	db7b      	blt.n	80201c2 <UART_SetConfig+0x8b2>
 80200ca:	2b20      	cmp	r3, #32
 80200cc:	d879      	bhi.n	80201c2 <UART_SetConfig+0x8b2>
 80200ce:	a201      	add	r2, pc, #4	@ (adr r2, 80200d4 <UART_SetConfig+0x7c4>)
 80200d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80200d4:	0802015f 	.word	0x0802015f
 80200d8:	08020167 	.word	0x08020167
 80200dc:	080201c3 	.word	0x080201c3
 80200e0:	080201c3 	.word	0x080201c3
 80200e4:	0802016f 	.word	0x0802016f
 80200e8:	080201c3 	.word	0x080201c3
 80200ec:	080201c3 	.word	0x080201c3
 80200f0:	080201c3 	.word	0x080201c3
 80200f4:	0802017f 	.word	0x0802017f
 80200f8:	080201c3 	.word	0x080201c3
 80200fc:	080201c3 	.word	0x080201c3
 8020100:	080201c3 	.word	0x080201c3
 8020104:	080201c3 	.word	0x080201c3
 8020108:	080201c3 	.word	0x080201c3
 802010c:	080201c3 	.word	0x080201c3
 8020110:	080201c3 	.word	0x080201c3
 8020114:	0802018f 	.word	0x0802018f
 8020118:	080201c3 	.word	0x080201c3
 802011c:	080201c3 	.word	0x080201c3
 8020120:	080201c3 	.word	0x080201c3
 8020124:	080201c3 	.word	0x080201c3
 8020128:	080201c3 	.word	0x080201c3
 802012c:	080201c3 	.word	0x080201c3
 8020130:	080201c3 	.word	0x080201c3
 8020134:	080201c3 	.word	0x080201c3
 8020138:	080201c3 	.word	0x080201c3
 802013c:	080201c3 	.word	0x080201c3
 8020140:	080201c3 	.word	0x080201c3
 8020144:	080201c3 	.word	0x080201c3
 8020148:	080201c3 	.word	0x080201c3
 802014c:	080201c3 	.word	0x080201c3
 8020150:	080201c3 	.word	0x080201c3
 8020154:	080201b5 	.word	0x080201b5
 8020158:	2b40      	cmp	r3, #64	@ 0x40
 802015a:	d02e      	beq.n	80201ba <UART_SetConfig+0x8aa>
 802015c:	e031      	b.n	80201c2 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 802015e:	f7fc fd9d 	bl	801cc9c <HAL_RCC_GetPCLK1Freq>
 8020162:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8020164:	e033      	b.n	80201ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8020166:	f7fc fdaf 	bl	801ccc8 <HAL_RCC_GetPCLK2Freq>
 802016a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 802016c:	e02f      	b.n	80201ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 802016e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020172:	4618      	mov	r0, r3
 8020174:	f7fd ffde 	bl	801e134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802017a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802017c:	e027      	b.n	80201ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802017e:	f107 0318 	add.w	r3, r7, #24
 8020182:	4618      	mov	r0, r3
 8020184:	f7fe f92a 	bl	801e3dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020188:	69fb      	ldr	r3, [r7, #28]
 802018a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802018c:	e01f      	b.n	80201ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802018e:	4b2d      	ldr	r3, [pc, #180]	@ (8020244 <UART_SetConfig+0x934>)
 8020190:	681b      	ldr	r3, [r3, #0]
 8020192:	f003 0320 	and.w	r3, r3, #32
 8020196:	2b00      	cmp	r3, #0
 8020198:	d009      	beq.n	80201ae <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 802019a:	4b2a      	ldr	r3, [pc, #168]	@ (8020244 <UART_SetConfig+0x934>)
 802019c:	681b      	ldr	r3, [r3, #0]
 802019e:	08db      	lsrs	r3, r3, #3
 80201a0:	f003 0303 	and.w	r3, r3, #3
 80201a4:	4a24      	ldr	r2, [pc, #144]	@ (8020238 <UART_SetConfig+0x928>)
 80201a6:	fa22 f303 	lsr.w	r3, r2, r3
 80201aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80201ac:	e00f      	b.n	80201ce <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 80201ae:	4b22      	ldr	r3, [pc, #136]	@ (8020238 <UART_SetConfig+0x928>)
 80201b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80201b2:	e00c      	b.n	80201ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80201b4:	4b21      	ldr	r3, [pc, #132]	@ (802023c <UART_SetConfig+0x92c>)
 80201b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80201b8:	e009      	b.n	80201ce <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80201ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80201be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80201c0:	e005      	b.n	80201ce <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 80201c2:	2300      	movs	r3, #0
 80201c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80201c6:	2301      	movs	r3, #1
 80201c8:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80201cc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80201ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80201d0:	2b00      	cmp	r3, #0
 80201d2:	f000 80e7 	beq.w	80203a4 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80201d6:	697b      	ldr	r3, [r7, #20]
 80201d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80201da:	4a19      	ldr	r2, [pc, #100]	@ (8020240 <UART_SetConfig+0x930>)
 80201dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80201e0:	461a      	mov	r2, r3
 80201e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80201e4:	fbb3 f3f2 	udiv	r3, r3, r2
 80201e8:	005a      	lsls	r2, r3, #1
 80201ea:	697b      	ldr	r3, [r7, #20]
 80201ec:	685b      	ldr	r3, [r3, #4]
 80201ee:	085b      	lsrs	r3, r3, #1
 80201f0:	441a      	add	r2, r3
 80201f2:	697b      	ldr	r3, [r7, #20]
 80201f4:	685b      	ldr	r3, [r3, #4]
 80201f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80201fa:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80201fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80201fe:	2b0f      	cmp	r3, #15
 8020200:	d916      	bls.n	8020230 <UART_SetConfig+0x920>
 8020202:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020204:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020208:	d212      	bcs.n	8020230 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 802020a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802020c:	b29b      	uxth	r3, r3
 802020e:	f023 030f 	bic.w	r3, r3, #15
 8020212:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8020214:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020216:	085b      	lsrs	r3, r3, #1
 8020218:	b29b      	uxth	r3, r3
 802021a:	f003 0307 	and.w	r3, r3, #7
 802021e:	b29a      	uxth	r2, r3
 8020220:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8020222:	4313      	orrs	r3, r2
 8020224:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8020226:	697b      	ldr	r3, [r7, #20]
 8020228:	681b      	ldr	r3, [r3, #0]
 802022a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 802022c:	60da      	str	r2, [r3, #12]
 802022e:	e0b9      	b.n	80203a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8020230:	2301      	movs	r3, #1
 8020232:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8020236:	e0b5      	b.n	80203a4 <UART_SetConfig+0xa94>
 8020238:	03d09000 	.word	0x03d09000
 802023c:	003d0900 	.word	0x003d0900
 8020240:	08026414 	.word	0x08026414
 8020244:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8020248:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 802024c:	2b20      	cmp	r3, #32
 802024e:	dc49      	bgt.n	80202e4 <UART_SetConfig+0x9d4>
 8020250:	2b00      	cmp	r3, #0
 8020252:	db7c      	blt.n	802034e <UART_SetConfig+0xa3e>
 8020254:	2b20      	cmp	r3, #32
 8020256:	d87a      	bhi.n	802034e <UART_SetConfig+0xa3e>
 8020258:	a201      	add	r2, pc, #4	@ (adr r2, 8020260 <UART_SetConfig+0x950>)
 802025a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 802025e:	bf00      	nop
 8020260:	080202eb 	.word	0x080202eb
 8020264:	080202f3 	.word	0x080202f3
 8020268:	0802034f 	.word	0x0802034f
 802026c:	0802034f 	.word	0x0802034f
 8020270:	080202fb 	.word	0x080202fb
 8020274:	0802034f 	.word	0x0802034f
 8020278:	0802034f 	.word	0x0802034f
 802027c:	0802034f 	.word	0x0802034f
 8020280:	0802030b 	.word	0x0802030b
 8020284:	0802034f 	.word	0x0802034f
 8020288:	0802034f 	.word	0x0802034f
 802028c:	0802034f 	.word	0x0802034f
 8020290:	0802034f 	.word	0x0802034f
 8020294:	0802034f 	.word	0x0802034f
 8020298:	0802034f 	.word	0x0802034f
 802029c:	0802034f 	.word	0x0802034f
 80202a0:	0802031b 	.word	0x0802031b
 80202a4:	0802034f 	.word	0x0802034f
 80202a8:	0802034f 	.word	0x0802034f
 80202ac:	0802034f 	.word	0x0802034f
 80202b0:	0802034f 	.word	0x0802034f
 80202b4:	0802034f 	.word	0x0802034f
 80202b8:	0802034f 	.word	0x0802034f
 80202bc:	0802034f 	.word	0x0802034f
 80202c0:	0802034f 	.word	0x0802034f
 80202c4:	0802034f 	.word	0x0802034f
 80202c8:	0802034f 	.word	0x0802034f
 80202cc:	0802034f 	.word	0x0802034f
 80202d0:	0802034f 	.word	0x0802034f
 80202d4:	0802034f 	.word	0x0802034f
 80202d8:	0802034f 	.word	0x0802034f
 80202dc:	0802034f 	.word	0x0802034f
 80202e0:	08020341 	.word	0x08020341
 80202e4:	2b40      	cmp	r3, #64	@ 0x40
 80202e6:	d02e      	beq.n	8020346 <UART_SetConfig+0xa36>
 80202e8:	e031      	b.n	802034e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80202ea:	f7fc fcd7 	bl	801cc9c <HAL_RCC_GetPCLK1Freq>
 80202ee:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80202f0:	e033      	b.n	802035a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80202f2:	f7fc fce9 	bl	801ccc8 <HAL_RCC_GetPCLK2Freq>
 80202f6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80202f8:	e02f      	b.n	802035a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80202fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80202fe:	4618      	mov	r0, r3
 8020300:	f7fd ff18 	bl	801e134 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8020304:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020306:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020308:	e027      	b.n	802035a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 802030a:	f107 0318 	add.w	r3, r7, #24
 802030e:	4618      	mov	r0, r3
 8020310:	f7fe f864 	bl	801e3dc <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8020314:	69fb      	ldr	r3, [r7, #28]
 8020316:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020318:	e01f      	b.n	802035a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 802031a:	4b2d      	ldr	r3, [pc, #180]	@ (80203d0 <UART_SetConfig+0xac0>)
 802031c:	681b      	ldr	r3, [r3, #0]
 802031e:	f003 0320 	and.w	r3, r3, #32
 8020322:	2b00      	cmp	r3, #0
 8020324:	d009      	beq.n	802033a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8020326:	4b2a      	ldr	r3, [pc, #168]	@ (80203d0 <UART_SetConfig+0xac0>)
 8020328:	681b      	ldr	r3, [r3, #0]
 802032a:	08db      	lsrs	r3, r3, #3
 802032c:	f003 0303 	and.w	r3, r3, #3
 8020330:	4a28      	ldr	r2, [pc, #160]	@ (80203d4 <UART_SetConfig+0xac4>)
 8020332:	fa22 f303 	lsr.w	r3, r2, r3
 8020336:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8020338:	e00f      	b.n	802035a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 802033a:	4b26      	ldr	r3, [pc, #152]	@ (80203d4 <UART_SetConfig+0xac4>)
 802033c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802033e:	e00c      	b.n	802035a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8020340:	4b25      	ldr	r3, [pc, #148]	@ (80203d8 <UART_SetConfig+0xac8>)
 8020342:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8020344:	e009      	b.n	802035a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8020346:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802034a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 802034c:	e005      	b.n	802035a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 802034e:	2300      	movs	r3, #0
 8020350:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8020352:	2301      	movs	r3, #1
 8020354:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8020358:	bf00      	nop
    }

    if (pclk != 0U)
 802035a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802035c:	2b00      	cmp	r3, #0
 802035e:	d021      	beq.n	80203a4 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8020360:	697b      	ldr	r3, [r7, #20]
 8020362:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020364:	4a1d      	ldr	r2, [pc, #116]	@ (80203dc <UART_SetConfig+0xacc>)
 8020366:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 802036a:	461a      	mov	r2, r3
 802036c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802036e:	fbb3 f2f2 	udiv	r2, r3, r2
 8020372:	697b      	ldr	r3, [r7, #20]
 8020374:	685b      	ldr	r3, [r3, #4]
 8020376:	085b      	lsrs	r3, r3, #1
 8020378:	441a      	add	r2, r3
 802037a:	697b      	ldr	r3, [r7, #20]
 802037c:	685b      	ldr	r3, [r3, #4]
 802037e:	fbb2 f3f3 	udiv	r3, r2, r3
 8020382:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8020384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020386:	2b0f      	cmp	r3, #15
 8020388:	d909      	bls.n	802039e <UART_SetConfig+0xa8e>
 802038a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802038c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8020390:	d205      	bcs.n	802039e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8020392:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020394:	b29a      	uxth	r2, r3
 8020396:	697b      	ldr	r3, [r7, #20]
 8020398:	681b      	ldr	r3, [r3, #0]
 802039a:	60da      	str	r2, [r3, #12]
 802039c:	e002      	b.n	80203a4 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 802039e:	2301      	movs	r3, #1
 80203a0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80203a4:	697b      	ldr	r3, [r7, #20]
 80203a6:	2201      	movs	r2, #1
 80203a8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80203ac:	697b      	ldr	r3, [r7, #20]
 80203ae:	2201      	movs	r2, #1
 80203b0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80203b4:	697b      	ldr	r3, [r7, #20]
 80203b6:	2200      	movs	r2, #0
 80203b8:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80203ba:	697b      	ldr	r3, [r7, #20]
 80203bc:	2200      	movs	r2, #0
 80203be:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80203c0:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 80203c4:	4618      	mov	r0, r3
 80203c6:	3748      	adds	r7, #72	@ 0x48
 80203c8:	46bd      	mov	sp, r7
 80203ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80203ce:	bf00      	nop
 80203d0:	58024400 	.word	0x58024400
 80203d4:	03d09000 	.word	0x03d09000
 80203d8:	003d0900 	.word	0x003d0900
 80203dc:	08026414 	.word	0x08026414

080203e0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80203e0:	b480      	push	{r7}
 80203e2:	b083      	sub	sp, #12
 80203e4:	af00      	add	r7, sp, #0
 80203e6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80203e8:	687b      	ldr	r3, [r7, #4]
 80203ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80203ec:	f003 0308 	and.w	r3, r3, #8
 80203f0:	2b00      	cmp	r3, #0
 80203f2:	d00a      	beq.n	802040a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80203f4:	687b      	ldr	r3, [r7, #4]
 80203f6:	681b      	ldr	r3, [r3, #0]
 80203f8:	685b      	ldr	r3, [r3, #4]
 80203fa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80203fe:	687b      	ldr	r3, [r7, #4]
 8020400:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8020402:	687b      	ldr	r3, [r7, #4]
 8020404:	681b      	ldr	r3, [r3, #0]
 8020406:	430a      	orrs	r2, r1
 8020408:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 802040a:	687b      	ldr	r3, [r7, #4]
 802040c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802040e:	f003 0301 	and.w	r3, r3, #1
 8020412:	2b00      	cmp	r3, #0
 8020414:	d00a      	beq.n	802042c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8020416:	687b      	ldr	r3, [r7, #4]
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	685b      	ldr	r3, [r3, #4]
 802041c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8020420:	687b      	ldr	r3, [r7, #4]
 8020422:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8020424:	687b      	ldr	r3, [r7, #4]
 8020426:	681b      	ldr	r3, [r3, #0]
 8020428:	430a      	orrs	r2, r1
 802042a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 802042c:	687b      	ldr	r3, [r7, #4]
 802042e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020430:	f003 0302 	and.w	r3, r3, #2
 8020434:	2b00      	cmp	r3, #0
 8020436:	d00a      	beq.n	802044e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8020438:	687b      	ldr	r3, [r7, #4]
 802043a:	681b      	ldr	r3, [r3, #0]
 802043c:	685b      	ldr	r3, [r3, #4]
 802043e:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8020446:	687b      	ldr	r3, [r7, #4]
 8020448:	681b      	ldr	r3, [r3, #0]
 802044a:	430a      	orrs	r2, r1
 802044c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 802044e:	687b      	ldr	r3, [r7, #4]
 8020450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020452:	f003 0304 	and.w	r3, r3, #4
 8020456:	2b00      	cmp	r3, #0
 8020458:	d00a      	beq.n	8020470 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 802045a:	687b      	ldr	r3, [r7, #4]
 802045c:	681b      	ldr	r3, [r3, #0]
 802045e:	685b      	ldr	r3, [r3, #4]
 8020460:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8020464:	687b      	ldr	r3, [r7, #4]
 8020466:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020468:	687b      	ldr	r3, [r7, #4]
 802046a:	681b      	ldr	r3, [r3, #0]
 802046c:	430a      	orrs	r2, r1
 802046e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8020470:	687b      	ldr	r3, [r7, #4]
 8020472:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020474:	f003 0310 	and.w	r3, r3, #16
 8020478:	2b00      	cmp	r3, #0
 802047a:	d00a      	beq.n	8020492 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 802047c:	687b      	ldr	r3, [r7, #4]
 802047e:	681b      	ldr	r3, [r3, #0]
 8020480:	689b      	ldr	r3, [r3, #8]
 8020482:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8020486:	687b      	ldr	r3, [r7, #4]
 8020488:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 802048a:	687b      	ldr	r3, [r7, #4]
 802048c:	681b      	ldr	r3, [r3, #0]
 802048e:	430a      	orrs	r2, r1
 8020490:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8020492:	687b      	ldr	r3, [r7, #4]
 8020494:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020496:	f003 0320 	and.w	r3, r3, #32
 802049a:	2b00      	cmp	r3, #0
 802049c:	d00a      	beq.n	80204b4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 802049e:	687b      	ldr	r3, [r7, #4]
 80204a0:	681b      	ldr	r3, [r3, #0]
 80204a2:	689b      	ldr	r3, [r3, #8]
 80204a4:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80204a8:	687b      	ldr	r3, [r7, #4]
 80204aa:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80204ac:	687b      	ldr	r3, [r7, #4]
 80204ae:	681b      	ldr	r3, [r3, #0]
 80204b0:	430a      	orrs	r2, r1
 80204b2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80204b4:	687b      	ldr	r3, [r7, #4]
 80204b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80204b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80204bc:	2b00      	cmp	r3, #0
 80204be:	d01a      	beq.n	80204f6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80204c0:	687b      	ldr	r3, [r7, #4]
 80204c2:	681b      	ldr	r3, [r3, #0]
 80204c4:	685b      	ldr	r3, [r3, #4]
 80204c6:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80204ca:	687b      	ldr	r3, [r7, #4]
 80204cc:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80204ce:	687b      	ldr	r3, [r7, #4]
 80204d0:	681b      	ldr	r3, [r3, #0]
 80204d2:	430a      	orrs	r2, r1
 80204d4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80204d6:	687b      	ldr	r3, [r7, #4]
 80204d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80204da:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80204de:	d10a      	bne.n	80204f6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80204e0:	687b      	ldr	r3, [r7, #4]
 80204e2:	681b      	ldr	r3, [r3, #0]
 80204e4:	685b      	ldr	r3, [r3, #4]
 80204e6:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80204ea:	687b      	ldr	r3, [r7, #4]
 80204ec:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80204ee:	687b      	ldr	r3, [r7, #4]
 80204f0:	681b      	ldr	r3, [r3, #0]
 80204f2:	430a      	orrs	r2, r1
 80204f4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80204f6:	687b      	ldr	r3, [r7, #4]
 80204f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80204fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80204fe:	2b00      	cmp	r3, #0
 8020500:	d00a      	beq.n	8020518 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8020502:	687b      	ldr	r3, [r7, #4]
 8020504:	681b      	ldr	r3, [r3, #0]
 8020506:	685b      	ldr	r3, [r3, #4]
 8020508:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 802050c:	687b      	ldr	r3, [r7, #4]
 802050e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8020510:	687b      	ldr	r3, [r7, #4]
 8020512:	681b      	ldr	r3, [r3, #0]
 8020514:	430a      	orrs	r2, r1
 8020516:	605a      	str	r2, [r3, #4]
  }
}
 8020518:	bf00      	nop
 802051a:	370c      	adds	r7, #12
 802051c:	46bd      	mov	sp, r7
 802051e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020522:	4770      	bx	lr

08020524 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8020524:	b580      	push	{r7, lr}
 8020526:	b098      	sub	sp, #96	@ 0x60
 8020528:	af02      	add	r7, sp, #8
 802052a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 802052c:	687b      	ldr	r3, [r7, #4]
 802052e:	2200      	movs	r2, #0
 8020530:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8020534:	f7f8 ffe0 	bl	80194f8 <HAL_GetTick>
 8020538:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 802053a:	687b      	ldr	r3, [r7, #4]
 802053c:	681b      	ldr	r3, [r3, #0]
 802053e:	681b      	ldr	r3, [r3, #0]
 8020540:	f003 0308 	and.w	r3, r3, #8
 8020544:	2b08      	cmp	r3, #8
 8020546:	d12f      	bne.n	80205a8 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8020548:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 802054c:	9300      	str	r3, [sp, #0]
 802054e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020550:	2200      	movs	r2, #0
 8020552:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8020556:	6878      	ldr	r0, [r7, #4]
 8020558:	f000 f88e 	bl	8020678 <UART_WaitOnFlagUntilTimeout>
 802055c:	4603      	mov	r3, r0
 802055e:	2b00      	cmp	r3, #0
 8020560:	d022      	beq.n	80205a8 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8020562:	687b      	ldr	r3, [r7, #4]
 8020564:	681b      	ldr	r3, [r3, #0]
 8020566:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020568:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802056a:	e853 3f00 	ldrex	r3, [r3]
 802056e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8020570:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020572:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8020576:	653b      	str	r3, [r7, #80]	@ 0x50
 8020578:	687b      	ldr	r3, [r7, #4]
 802057a:	681b      	ldr	r3, [r3, #0]
 802057c:	461a      	mov	r2, r3
 802057e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020580:	647b      	str	r3, [r7, #68]	@ 0x44
 8020582:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020584:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8020586:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8020588:	e841 2300 	strex	r3, r2, [r1]
 802058c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 802058e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8020590:	2b00      	cmp	r3, #0
 8020592:	d1e6      	bne.n	8020562 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8020594:	687b      	ldr	r3, [r7, #4]
 8020596:	2220      	movs	r2, #32
 8020598:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 802059c:	687b      	ldr	r3, [r7, #4]
 802059e:	2200      	movs	r2, #0
 80205a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80205a4:	2303      	movs	r3, #3
 80205a6:	e063      	b.n	8020670 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80205a8:	687b      	ldr	r3, [r7, #4]
 80205aa:	681b      	ldr	r3, [r3, #0]
 80205ac:	681b      	ldr	r3, [r3, #0]
 80205ae:	f003 0304 	and.w	r3, r3, #4
 80205b2:	2b04      	cmp	r3, #4
 80205b4:	d149      	bne.n	802064a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80205b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80205ba:	9300      	str	r3, [sp, #0]
 80205bc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80205be:	2200      	movs	r2, #0
 80205c0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80205c4:	6878      	ldr	r0, [r7, #4]
 80205c6:	f000 f857 	bl	8020678 <UART_WaitOnFlagUntilTimeout>
 80205ca:	4603      	mov	r3, r0
 80205cc:	2b00      	cmp	r3, #0
 80205ce:	d03c      	beq.n	802064a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80205d0:	687b      	ldr	r3, [r7, #4]
 80205d2:	681b      	ldr	r3, [r3, #0]
 80205d4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80205d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80205d8:	e853 3f00 	ldrex	r3, [r3]
 80205dc:	623b      	str	r3, [r7, #32]
   return(result);
 80205de:	6a3b      	ldr	r3, [r7, #32]
 80205e0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80205e4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80205e6:	687b      	ldr	r3, [r7, #4]
 80205e8:	681b      	ldr	r3, [r3, #0]
 80205ea:	461a      	mov	r2, r3
 80205ec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80205ee:	633b      	str	r3, [r7, #48]	@ 0x30
 80205f0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80205f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80205f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80205f6:	e841 2300 	strex	r3, r2, [r1]
 80205fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80205fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80205fe:	2b00      	cmp	r3, #0
 8020600:	d1e6      	bne.n	80205d0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8020602:	687b      	ldr	r3, [r7, #4]
 8020604:	681b      	ldr	r3, [r3, #0]
 8020606:	3308      	adds	r3, #8
 8020608:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 802060a:	693b      	ldr	r3, [r7, #16]
 802060c:	e853 3f00 	ldrex	r3, [r3]
 8020610:	60fb      	str	r3, [r7, #12]
   return(result);
 8020612:	68fb      	ldr	r3, [r7, #12]
 8020614:	f023 0301 	bic.w	r3, r3, #1
 8020618:	64bb      	str	r3, [r7, #72]	@ 0x48
 802061a:	687b      	ldr	r3, [r7, #4]
 802061c:	681b      	ldr	r3, [r3, #0]
 802061e:	3308      	adds	r3, #8
 8020620:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020622:	61fa      	str	r2, [r7, #28]
 8020624:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8020626:	69b9      	ldr	r1, [r7, #24]
 8020628:	69fa      	ldr	r2, [r7, #28]
 802062a:	e841 2300 	strex	r3, r2, [r1]
 802062e:	617b      	str	r3, [r7, #20]
   return(result);
 8020630:	697b      	ldr	r3, [r7, #20]
 8020632:	2b00      	cmp	r3, #0
 8020634:	d1e5      	bne.n	8020602 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8020636:	687b      	ldr	r3, [r7, #4]
 8020638:	2220      	movs	r2, #32
 802063a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 802063e:	687b      	ldr	r3, [r7, #4]
 8020640:	2200      	movs	r2, #0
 8020642:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8020646:	2303      	movs	r3, #3
 8020648:	e012      	b.n	8020670 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 802064a:	687b      	ldr	r3, [r7, #4]
 802064c:	2220      	movs	r2, #32
 802064e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8020652:	687b      	ldr	r3, [r7, #4]
 8020654:	2220      	movs	r2, #32
 8020656:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 802065a:	687b      	ldr	r3, [r7, #4]
 802065c:	2200      	movs	r2, #0
 802065e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8020660:	687b      	ldr	r3, [r7, #4]
 8020662:	2200      	movs	r2, #0
 8020664:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8020666:	687b      	ldr	r3, [r7, #4]
 8020668:	2200      	movs	r2, #0
 802066a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 802066e:	2300      	movs	r3, #0
}
 8020670:	4618      	mov	r0, r3
 8020672:	3758      	adds	r7, #88	@ 0x58
 8020674:	46bd      	mov	sp, r7
 8020676:	bd80      	pop	{r7, pc}

08020678 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8020678:	b580      	push	{r7, lr}
 802067a:	b084      	sub	sp, #16
 802067c:	af00      	add	r7, sp, #0
 802067e:	60f8      	str	r0, [r7, #12]
 8020680:	60b9      	str	r1, [r7, #8]
 8020682:	603b      	str	r3, [r7, #0]
 8020684:	4613      	mov	r3, r2
 8020686:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8020688:	e04f      	b.n	802072a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 802068a:	69bb      	ldr	r3, [r7, #24]
 802068c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020690:	d04b      	beq.n	802072a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8020692:	f7f8 ff31 	bl	80194f8 <HAL_GetTick>
 8020696:	4602      	mov	r2, r0
 8020698:	683b      	ldr	r3, [r7, #0]
 802069a:	1ad3      	subs	r3, r2, r3
 802069c:	69ba      	ldr	r2, [r7, #24]
 802069e:	429a      	cmp	r2, r3
 80206a0:	d302      	bcc.n	80206a8 <UART_WaitOnFlagUntilTimeout+0x30>
 80206a2:	69bb      	ldr	r3, [r7, #24]
 80206a4:	2b00      	cmp	r3, #0
 80206a6:	d101      	bne.n	80206ac <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80206a8:	2303      	movs	r3, #3
 80206aa:	e04e      	b.n	802074a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80206ac:	68fb      	ldr	r3, [r7, #12]
 80206ae:	681b      	ldr	r3, [r3, #0]
 80206b0:	681b      	ldr	r3, [r3, #0]
 80206b2:	f003 0304 	and.w	r3, r3, #4
 80206b6:	2b00      	cmp	r3, #0
 80206b8:	d037      	beq.n	802072a <UART_WaitOnFlagUntilTimeout+0xb2>
 80206ba:	68bb      	ldr	r3, [r7, #8]
 80206bc:	2b80      	cmp	r3, #128	@ 0x80
 80206be:	d034      	beq.n	802072a <UART_WaitOnFlagUntilTimeout+0xb2>
 80206c0:	68bb      	ldr	r3, [r7, #8]
 80206c2:	2b40      	cmp	r3, #64	@ 0x40
 80206c4:	d031      	beq.n	802072a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80206c6:	68fb      	ldr	r3, [r7, #12]
 80206c8:	681b      	ldr	r3, [r3, #0]
 80206ca:	69db      	ldr	r3, [r3, #28]
 80206cc:	f003 0308 	and.w	r3, r3, #8
 80206d0:	2b08      	cmp	r3, #8
 80206d2:	d110      	bne.n	80206f6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80206d4:	68fb      	ldr	r3, [r7, #12]
 80206d6:	681b      	ldr	r3, [r3, #0]
 80206d8:	2208      	movs	r2, #8
 80206da:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80206dc:	68f8      	ldr	r0, [r7, #12]
 80206de:	f000 f839 	bl	8020754 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80206e2:	68fb      	ldr	r3, [r7, #12]
 80206e4:	2208      	movs	r2, #8
 80206e6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80206ea:	68fb      	ldr	r3, [r7, #12]
 80206ec:	2200      	movs	r2, #0
 80206ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80206f2:	2301      	movs	r3, #1
 80206f4:	e029      	b.n	802074a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80206f6:	68fb      	ldr	r3, [r7, #12]
 80206f8:	681b      	ldr	r3, [r3, #0]
 80206fa:	69db      	ldr	r3, [r3, #28]
 80206fc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8020700:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8020704:	d111      	bne.n	802072a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8020706:	68fb      	ldr	r3, [r7, #12]
 8020708:	681b      	ldr	r3, [r3, #0]
 802070a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 802070e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8020710:	68f8      	ldr	r0, [r7, #12]
 8020712:	f000 f81f 	bl	8020754 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8020716:	68fb      	ldr	r3, [r7, #12]
 8020718:	2220      	movs	r2, #32
 802071a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 802071e:	68fb      	ldr	r3, [r7, #12]
 8020720:	2200      	movs	r2, #0
 8020722:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8020726:	2303      	movs	r3, #3
 8020728:	e00f      	b.n	802074a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 802072a:	68fb      	ldr	r3, [r7, #12]
 802072c:	681b      	ldr	r3, [r3, #0]
 802072e:	69da      	ldr	r2, [r3, #28]
 8020730:	68bb      	ldr	r3, [r7, #8]
 8020732:	4013      	ands	r3, r2
 8020734:	68ba      	ldr	r2, [r7, #8]
 8020736:	429a      	cmp	r2, r3
 8020738:	bf0c      	ite	eq
 802073a:	2301      	moveq	r3, #1
 802073c:	2300      	movne	r3, #0
 802073e:	b2db      	uxtb	r3, r3
 8020740:	461a      	mov	r2, r3
 8020742:	79fb      	ldrb	r3, [r7, #7]
 8020744:	429a      	cmp	r2, r3
 8020746:	d0a0      	beq.n	802068a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8020748:	2300      	movs	r3, #0
}
 802074a:	4618      	mov	r0, r3
 802074c:	3710      	adds	r7, #16
 802074e:	46bd      	mov	sp, r7
 8020750:	bd80      	pop	{r7, pc}
	...

08020754 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8020754:	b480      	push	{r7}
 8020756:	b095      	sub	sp, #84	@ 0x54
 8020758:	af00      	add	r7, sp, #0
 802075a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 802075c:	687b      	ldr	r3, [r7, #4]
 802075e:	681b      	ldr	r3, [r3, #0]
 8020760:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020762:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020764:	e853 3f00 	ldrex	r3, [r3]
 8020768:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 802076a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 802076c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8020770:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	461a      	mov	r2, r3
 8020778:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 802077a:	643b      	str	r3, [r7, #64]	@ 0x40
 802077c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 802077e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8020780:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8020782:	e841 2300 	strex	r3, r2, [r1]
 8020786:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8020788:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802078a:	2b00      	cmp	r3, #0
 802078c:	d1e6      	bne.n	802075c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 802078e:	687b      	ldr	r3, [r7, #4]
 8020790:	681b      	ldr	r3, [r3, #0]
 8020792:	3308      	adds	r3, #8
 8020794:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8020796:	6a3b      	ldr	r3, [r7, #32]
 8020798:	e853 3f00 	ldrex	r3, [r3]
 802079c:	61fb      	str	r3, [r7, #28]
   return(result);
 802079e:	69fa      	ldr	r2, [r7, #28]
 80207a0:	4b1e      	ldr	r3, [pc, #120]	@ (802081c <UART_EndRxTransfer+0xc8>)
 80207a2:	4013      	ands	r3, r2
 80207a4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80207a6:	687b      	ldr	r3, [r7, #4]
 80207a8:	681b      	ldr	r3, [r3, #0]
 80207aa:	3308      	adds	r3, #8
 80207ac:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80207ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80207b0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80207b2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80207b4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80207b6:	e841 2300 	strex	r3, r2, [r1]
 80207ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80207bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80207be:	2b00      	cmp	r3, #0
 80207c0:	d1e5      	bne.n	802078e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80207c2:	687b      	ldr	r3, [r7, #4]
 80207c4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80207c6:	2b01      	cmp	r3, #1
 80207c8:	d118      	bne.n	80207fc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80207ca:	687b      	ldr	r3, [r7, #4]
 80207cc:	681b      	ldr	r3, [r3, #0]
 80207ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80207d0:	68fb      	ldr	r3, [r7, #12]
 80207d2:	e853 3f00 	ldrex	r3, [r3]
 80207d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80207d8:	68bb      	ldr	r3, [r7, #8]
 80207da:	f023 0310 	bic.w	r3, r3, #16
 80207de:	647b      	str	r3, [r7, #68]	@ 0x44
 80207e0:	687b      	ldr	r3, [r7, #4]
 80207e2:	681b      	ldr	r3, [r3, #0]
 80207e4:	461a      	mov	r2, r3
 80207e6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80207e8:	61bb      	str	r3, [r7, #24]
 80207ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80207ec:	6979      	ldr	r1, [r7, #20]
 80207ee:	69ba      	ldr	r2, [r7, #24]
 80207f0:	e841 2300 	strex	r3, r2, [r1]
 80207f4:	613b      	str	r3, [r7, #16]
   return(result);
 80207f6:	693b      	ldr	r3, [r7, #16]
 80207f8:	2b00      	cmp	r3, #0
 80207fa:	d1e6      	bne.n	80207ca <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80207fc:	687b      	ldr	r3, [r7, #4]
 80207fe:	2220      	movs	r2, #32
 8020800:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8020804:	687b      	ldr	r3, [r7, #4]
 8020806:	2200      	movs	r2, #0
 8020808:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 802080a:	687b      	ldr	r3, [r7, #4]
 802080c:	2200      	movs	r2, #0
 802080e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8020810:	bf00      	nop
 8020812:	3754      	adds	r7, #84	@ 0x54
 8020814:	46bd      	mov	sp, r7
 8020816:	f85d 7b04 	ldr.w	r7, [sp], #4
 802081a:	4770      	bx	lr
 802081c:	effffffe 	.word	0xeffffffe

08020820 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8020820:	b480      	push	{r7}
 8020822:	b085      	sub	sp, #20
 8020824:	af00      	add	r7, sp, #0
 8020826:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020828:	687b      	ldr	r3, [r7, #4]
 802082a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802082e:	2b01      	cmp	r3, #1
 8020830:	d101      	bne.n	8020836 <HAL_UARTEx_DisableFifoMode+0x16>
 8020832:	2302      	movs	r3, #2
 8020834:	e027      	b.n	8020886 <HAL_UARTEx_DisableFifoMode+0x66>
 8020836:	687b      	ldr	r3, [r7, #4]
 8020838:	2201      	movs	r2, #1
 802083a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802083e:	687b      	ldr	r3, [r7, #4]
 8020840:	2224      	movs	r2, #36	@ 0x24
 8020842:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020846:	687b      	ldr	r3, [r7, #4]
 8020848:	681b      	ldr	r3, [r3, #0]
 802084a:	681b      	ldr	r3, [r3, #0]
 802084c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802084e:	687b      	ldr	r3, [r7, #4]
 8020850:	681b      	ldr	r3, [r3, #0]
 8020852:	681a      	ldr	r2, [r3, #0]
 8020854:	687b      	ldr	r3, [r7, #4]
 8020856:	681b      	ldr	r3, [r3, #0]
 8020858:	f022 0201 	bic.w	r2, r2, #1
 802085c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 802085e:	68fb      	ldr	r3, [r7, #12]
 8020860:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8020864:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8020866:	687b      	ldr	r3, [r7, #4]
 8020868:	2200      	movs	r2, #0
 802086a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 802086c:	687b      	ldr	r3, [r7, #4]
 802086e:	681b      	ldr	r3, [r3, #0]
 8020870:	68fa      	ldr	r2, [r7, #12]
 8020872:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020874:	687b      	ldr	r3, [r7, #4]
 8020876:	2220      	movs	r2, #32
 8020878:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 802087c:	687b      	ldr	r3, [r7, #4]
 802087e:	2200      	movs	r2, #0
 8020880:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8020884:	2300      	movs	r3, #0
}
 8020886:	4618      	mov	r0, r3
 8020888:	3714      	adds	r7, #20
 802088a:	46bd      	mov	sp, r7
 802088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020890:	4770      	bx	lr

08020892 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8020892:	b580      	push	{r7, lr}
 8020894:	b084      	sub	sp, #16
 8020896:	af00      	add	r7, sp, #0
 8020898:	6078      	str	r0, [r7, #4]
 802089a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 802089c:	687b      	ldr	r3, [r7, #4]
 802089e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80208a2:	2b01      	cmp	r3, #1
 80208a4:	d101      	bne.n	80208aa <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80208a6:	2302      	movs	r3, #2
 80208a8:	e02d      	b.n	8020906 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80208aa:	687b      	ldr	r3, [r7, #4]
 80208ac:	2201      	movs	r2, #1
 80208ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80208b2:	687b      	ldr	r3, [r7, #4]
 80208b4:	2224      	movs	r2, #36	@ 0x24
 80208b6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80208ba:	687b      	ldr	r3, [r7, #4]
 80208bc:	681b      	ldr	r3, [r3, #0]
 80208be:	681b      	ldr	r3, [r3, #0]
 80208c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80208c2:	687b      	ldr	r3, [r7, #4]
 80208c4:	681b      	ldr	r3, [r3, #0]
 80208c6:	681a      	ldr	r2, [r3, #0]
 80208c8:	687b      	ldr	r3, [r7, #4]
 80208ca:	681b      	ldr	r3, [r3, #0]
 80208cc:	f022 0201 	bic.w	r2, r2, #1
 80208d0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80208d2:	687b      	ldr	r3, [r7, #4]
 80208d4:	681b      	ldr	r3, [r3, #0]
 80208d6:	689b      	ldr	r3, [r3, #8]
 80208d8:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80208dc:	687b      	ldr	r3, [r7, #4]
 80208de:	681b      	ldr	r3, [r3, #0]
 80208e0:	683a      	ldr	r2, [r7, #0]
 80208e2:	430a      	orrs	r2, r1
 80208e4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80208e6:	6878      	ldr	r0, [r7, #4]
 80208e8:	f000 f850 	bl	802098c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80208ec:	687b      	ldr	r3, [r7, #4]
 80208ee:	681b      	ldr	r3, [r3, #0]
 80208f0:	68fa      	ldr	r2, [r7, #12]
 80208f2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80208f4:	687b      	ldr	r3, [r7, #4]
 80208f6:	2220      	movs	r2, #32
 80208f8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80208fc:	687b      	ldr	r3, [r7, #4]
 80208fe:	2200      	movs	r2, #0
 8020900:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8020904:	2300      	movs	r3, #0
}
 8020906:	4618      	mov	r0, r3
 8020908:	3710      	adds	r7, #16
 802090a:	46bd      	mov	sp, r7
 802090c:	bd80      	pop	{r7, pc}

0802090e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 802090e:	b580      	push	{r7, lr}
 8020910:	b084      	sub	sp, #16
 8020912:	af00      	add	r7, sp, #0
 8020914:	6078      	str	r0, [r7, #4]
 8020916:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8020918:	687b      	ldr	r3, [r7, #4]
 802091a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 802091e:	2b01      	cmp	r3, #1
 8020920:	d101      	bne.n	8020926 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8020922:	2302      	movs	r3, #2
 8020924:	e02d      	b.n	8020982 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8020926:	687b      	ldr	r3, [r7, #4]
 8020928:	2201      	movs	r2, #1
 802092a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 802092e:	687b      	ldr	r3, [r7, #4]
 8020930:	2224      	movs	r2, #36	@ 0x24
 8020932:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8020936:	687b      	ldr	r3, [r7, #4]
 8020938:	681b      	ldr	r3, [r3, #0]
 802093a:	681b      	ldr	r3, [r3, #0]
 802093c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 802093e:	687b      	ldr	r3, [r7, #4]
 8020940:	681b      	ldr	r3, [r3, #0]
 8020942:	681a      	ldr	r2, [r3, #0]
 8020944:	687b      	ldr	r3, [r7, #4]
 8020946:	681b      	ldr	r3, [r3, #0]
 8020948:	f022 0201 	bic.w	r2, r2, #1
 802094c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 802094e:	687b      	ldr	r3, [r7, #4]
 8020950:	681b      	ldr	r3, [r3, #0]
 8020952:	689b      	ldr	r3, [r3, #8]
 8020954:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8020958:	687b      	ldr	r3, [r7, #4]
 802095a:	681b      	ldr	r3, [r3, #0]
 802095c:	683a      	ldr	r2, [r7, #0]
 802095e:	430a      	orrs	r2, r1
 8020960:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8020962:	6878      	ldr	r0, [r7, #4]
 8020964:	f000 f812 	bl	802098c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8020968:	687b      	ldr	r3, [r7, #4]
 802096a:	681b      	ldr	r3, [r3, #0]
 802096c:	68fa      	ldr	r2, [r7, #12]
 802096e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8020970:	687b      	ldr	r3, [r7, #4]
 8020972:	2220      	movs	r2, #32
 8020974:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8020978:	687b      	ldr	r3, [r7, #4]
 802097a:	2200      	movs	r2, #0
 802097c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8020980:	2300      	movs	r3, #0
}
 8020982:	4618      	mov	r0, r3
 8020984:	3710      	adds	r7, #16
 8020986:	46bd      	mov	sp, r7
 8020988:	bd80      	pop	{r7, pc}
	...

0802098c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 802098c:	b480      	push	{r7}
 802098e:	b085      	sub	sp, #20
 8020990:	af00      	add	r7, sp, #0
 8020992:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8020994:	687b      	ldr	r3, [r7, #4]
 8020996:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8020998:	2b00      	cmp	r3, #0
 802099a:	d108      	bne.n	80209ae <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 802099c:	687b      	ldr	r3, [r7, #4]
 802099e:	2201      	movs	r2, #1
 80209a0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80209a4:	687b      	ldr	r3, [r7, #4]
 80209a6:	2201      	movs	r2, #1
 80209a8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80209ac:	e031      	b.n	8020a12 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80209ae:	2310      	movs	r3, #16
 80209b0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80209b2:	2310      	movs	r3, #16
 80209b4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80209b6:	687b      	ldr	r3, [r7, #4]
 80209b8:	681b      	ldr	r3, [r3, #0]
 80209ba:	689b      	ldr	r3, [r3, #8]
 80209bc:	0e5b      	lsrs	r3, r3, #25
 80209be:	b2db      	uxtb	r3, r3
 80209c0:	f003 0307 	and.w	r3, r3, #7
 80209c4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80209c6:	687b      	ldr	r3, [r7, #4]
 80209c8:	681b      	ldr	r3, [r3, #0]
 80209ca:	689b      	ldr	r3, [r3, #8]
 80209cc:	0f5b      	lsrs	r3, r3, #29
 80209ce:	b2db      	uxtb	r3, r3
 80209d0:	f003 0307 	and.w	r3, r3, #7
 80209d4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80209d6:	7bbb      	ldrb	r3, [r7, #14]
 80209d8:	7b3a      	ldrb	r2, [r7, #12]
 80209da:	4911      	ldr	r1, [pc, #68]	@ (8020a20 <UARTEx_SetNbDataToProcess+0x94>)
 80209dc:	5c8a      	ldrb	r2, [r1, r2]
 80209de:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80209e2:	7b3a      	ldrb	r2, [r7, #12]
 80209e4:	490f      	ldr	r1, [pc, #60]	@ (8020a24 <UARTEx_SetNbDataToProcess+0x98>)
 80209e6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80209e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80209ec:	b29a      	uxth	r2, r3
 80209ee:	687b      	ldr	r3, [r7, #4]
 80209f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80209f4:	7bfb      	ldrb	r3, [r7, #15]
 80209f6:	7b7a      	ldrb	r2, [r7, #13]
 80209f8:	4909      	ldr	r1, [pc, #36]	@ (8020a20 <UARTEx_SetNbDataToProcess+0x94>)
 80209fa:	5c8a      	ldrb	r2, [r1, r2]
 80209fc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8020a00:	7b7a      	ldrb	r2, [r7, #13]
 8020a02:	4908      	ldr	r1, [pc, #32]	@ (8020a24 <UARTEx_SetNbDataToProcess+0x98>)
 8020a04:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8020a06:	fb93 f3f2 	sdiv	r3, r3, r2
 8020a0a:	b29a      	uxth	r2, r3
 8020a0c:	687b      	ldr	r3, [r7, #4]
 8020a0e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8020a12:	bf00      	nop
 8020a14:	3714      	adds	r7, #20
 8020a16:	46bd      	mov	sp, r7
 8020a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020a1c:	4770      	bx	lr
 8020a1e:	bf00      	nop
 8020a20:	0802642c 	.word	0x0802642c
 8020a24:	08026434 	.word	0x08026434

08020a28 <prvInitialiseLogging>:

extern NetworkInterface_t xInterfaces[ 1 ];
/*-----------------------------------------------------------*/

static BaseType_t prvInitialiseLogging( void )
{
 8020a28:	b580      	push	{r7, lr}
 8020a2a:	b082      	sub	sp, #8
 8020a2c:	af00      	add	r7, sp, #0
size_t xSize;
static BaseType_t xLoggingInitialised = pdFALSE;

	if( xLoggingInitialised == pdFALSE )
 8020a2e:	4b15      	ldr	r3, [pc, #84]	@ (8020a84 <prvInitialiseLogging+0x5c>)
 8020a30:	681b      	ldr	r3, [r3, #0]
 8020a32:	2b00      	cmp	r3, #0
 8020a34:	d120      	bne.n	8020a78 <prvInitialiseLogging+0x50>
	{
		/* Don't attempt to log unless the scheduler is running. */
		if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8020a36:	f7e3 fe2b 	bl	8004690 <xTaskGetSchedulerState>
 8020a3a:	4603      	mov	r3, r0
 8020a3c:	2b02      	cmp	r3, #2
 8020a3e:	d11b      	bne.n	8020a78 <prvInitialiseLogging+0x50>
		{
			/* Create a stream buffer large enough for the maximum number of
			bytes + 1. */ /*_RB_ Why is the size of pxStreamBuffer->ucArray
			subtracted here? */
			xSize = sizeof( StreamBuffer_t ) - sizeof( pxStreamBuffer->ucArray ) + logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8020a40:	f640 73b5 	movw	r3, #4021	@ 0xfb5
 8020a44:	607b      	str	r3, [r7, #4]
			pxStreamBuffer = pvPortMalloc( xSize );
 8020a46:	6878      	ldr	r0, [r7, #4]
 8020a48:	f7e4 ff84 	bl	8005954 <pvPortMalloc>
 8020a4c:	4603      	mov	r3, r0
 8020a4e:	4a0e      	ldr	r2, [pc, #56]	@ (8020a88 <prvInitialiseLogging+0x60>)
 8020a50:	6013      	str	r3, [r2, #0]

			if( pxStreamBuffer != NULL )
 8020a52:	4b0d      	ldr	r3, [pc, #52]	@ (8020a88 <prvInitialiseLogging+0x60>)
 8020a54:	681b      	ldr	r3, [r3, #0]
 8020a56:	2b00      	cmp	r3, #0
 8020a58:	d00e      	beq.n	8020a78 <prvInitialiseLogging+0x50>
			{
				memset( pxStreamBuffer, '\0', xSize );
 8020a5a:	4b0b      	ldr	r3, [pc, #44]	@ (8020a88 <prvInitialiseLogging+0x60>)
 8020a5c:	681b      	ldr	r3, [r3, #0]
 8020a5e:	687a      	ldr	r2, [r7, #4]
 8020a60:	2100      	movs	r1, #0
 8020a62:	4618      	mov	r0, r3
 8020a64:	f000 fc35 	bl	80212d2 <memset>
				pxStreamBuffer->LENGTH = logMESSAGE_BUFFER_SIZE_BYTES + 1;
 8020a68:	4b07      	ldr	r3, [pc, #28]	@ (8020a88 <prvInitialiseLogging+0x60>)
 8020a6a:	681b      	ldr	r3, [r3, #0]
 8020a6c:	f640 72a1 	movw	r2, #4001	@ 0xfa1
 8020a70:	611a      	str	r2, [r3, #16]

				xLoggingInitialised = pdTRUE;
 8020a72:	4b04      	ldr	r3, [pc, #16]	@ (8020a84 <prvInitialiseLogging+0x5c>)
 8020a74:	2201      	movs	r2, #1
 8020a76:	601a      	str	r2, [r3, #0]
			}
		}
	}

	return xLoggingInitialised;
 8020a78:	4b02      	ldr	r3, [pc, #8]	@ (8020a84 <prvInitialiseLogging+0x5c>)
 8020a7a:	681b      	ldr	r3, [r3, #0]
}
 8020a7c:	4618      	mov	r0, r3
 8020a7e:	3708      	adds	r7, #8
 8020a80:	46bd      	mov	sp, r7
 8020a82:	bd80      	pop	{r7, pc}
 8020a84:	20002364 	.word	0x20002364
 8020a88:	20002354 	.word	0x20002354

08020a8c <prvGetMessageFromStreamBuffer>:
/*-----------------------------------------------------------*/

static size_t prvGetMessageFromStreamBuffer( char* pcBuffer, size_t xBufferLength )
{
 8020a8c:	b580      	push	{r7, lr}
 8020a8e:	b086      	sub	sp, #24
 8020a90:	af02      	add	r7, sp, #8
 8020a92:	6078      	str	r0, [r7, #4]
 8020a94:	6039      	str	r1, [r7, #0]
size_t uxLength;
size_t xMessageLength = 0;
 8020a96:	2300      	movs	r3, #0
 8020a98:	60bb      	str	r3, [r7, #8]

	if( pxStreamBuffer != NULL )
 8020a9a:	4b24      	ldr	r3, [pc, #144]	@ (8020b2c <prvGetMessageFromStreamBuffer+0xa0>)
 8020a9c:	681b      	ldr	r3, [r3, #0]
 8020a9e:	2b00      	cmp	r3, #0
 8020aa0:	d03f      	beq.n	8020b22 <prvGetMessageFromStreamBuffer+0x96>
	{
		/* Is there data in the stream buffer? */
		uxLength = uxStreamBufferGetSize( pxStreamBuffer );
 8020aa2:	4b22      	ldr	r3, [pc, #136]	@ (8020b2c <prvGetMessageFromStreamBuffer+0xa0>)
 8020aa4:	681b      	ldr	r3, [r3, #0]
 8020aa6:	4618      	mov	r0, r3
 8020aa8:	f7ef fa65 	bl	800ff76 <uxStreamBufferGetSize>
 8020aac:	60f8      	str	r0, [r7, #12]
		if( uxLength > sizeof( size_t ) )
 8020aae:	68fb      	ldr	r3, [r7, #12]
 8020ab0:	2b04      	cmp	r3, #4
 8020ab2:	d936      	bls.n	8020b22 <prvGetMessageFromStreamBuffer+0x96>
		{
			/* Avoid concurrent access to the buffer. */
			vTaskSuspendAll();
 8020ab4:	f7e2 ffce 	bl	8003a54 <vTaskSuspendAll>
			{
				/* Every message is stored as a length followed by the string.
				Obtain the length of the data first. */
				uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) &xMessageLength, sizeof( xMessageLength ), pdFALSE );
 8020ab8:	4b1c      	ldr	r3, [pc, #112]	@ (8020b2c <prvGetMessageFromStreamBuffer+0xa0>)
 8020aba:	6818      	ldr	r0, [r3, #0]
 8020abc:	f107 0208 	add.w	r2, r7, #8
 8020ac0:	2300      	movs	r3, #0
 8020ac2:	9300      	str	r3, [sp, #0]
 8020ac4:	2304      	movs	r3, #4
 8020ac6:	2100      	movs	r1, #0
 8020ac8:	f7ef fb73 	bl	80101b2 <uxStreamBufferGet>

				if( xBufferLength < xMessageLength )
 8020acc:	68bb      	ldr	r3, [r7, #8]
 8020ace:	683a      	ldr	r2, [r7, #0]
 8020ad0:	429a      	cmp	r2, r3
 8020ad2:	d216      	bcs.n	8020b02 <prvGetMessageFromStreamBuffer+0x76>
				{
					/* The 'pcBuffer' provided by the caller is too small.  Load
					the message first into 'xLogEntry.message', and then copy
					as much as possible to 'pcBuffer'. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) xLogEntry.cMessage, xMessageLength, pdFALSE );
 8020ad4:	4b15      	ldr	r3, [pc, #84]	@ (8020b2c <prvGetMessageFromStreamBuffer+0xa0>)
 8020ad6:	6818      	ldr	r0, [r3, #0]
 8020ad8:	68bb      	ldr	r3, [r7, #8]
 8020ada:	2200      	movs	r2, #0
 8020adc:	9200      	str	r2, [sp, #0]
 8020ade:	4a14      	ldr	r2, [pc, #80]	@ (8020b30 <prvGetMessageFromStreamBuffer+0xa4>)
 8020ae0:	2100      	movs	r1, #0
 8020ae2:	f7ef fb66 	bl	80101b2 <uxStreamBufferGet>
					memcpy( pcBuffer, xLogEntry.cMessage, xBufferLength );
 8020ae6:	683a      	ldr	r2, [r7, #0]
 8020ae8:	4911      	ldr	r1, [pc, #68]	@ (8020b30 <prvGetMessageFromStreamBuffer+0xa4>)
 8020aea:	6878      	ldr	r0, [r7, #4]
 8020aec:	f000 fae4 	bl	80210b8 <memcpy>
					xMessageLength = xBufferLength;
 8020af0:	683b      	ldr	r3, [r7, #0]
 8020af2:	60bb      	str	r3, [r7, #8]

					/* Terminate the string at the very end of the buffer. */
					pcBuffer[ xBufferLength - 1 ] = 0x00;
 8020af4:	683b      	ldr	r3, [r7, #0]
 8020af6:	3b01      	subs	r3, #1
 8020af8:	687a      	ldr	r2, [r7, #4]
 8020afa:	4413      	add	r3, r2
 8020afc:	2200      	movs	r2, #0
 8020afe:	701a      	strb	r2, [r3, #0]
 8020b00:	e00d      	b.n	8020b1e <prvGetMessageFromStreamBuffer+0x92>
				}
				else
				{
					/* The 'pcBuffer' provided by the caller is big enough. */
					uxStreamBufferGet( pxStreamBuffer, 0, ( uint8_t * ) pcBuffer, xMessageLength, pdFALSE );
 8020b02:	4b0a      	ldr	r3, [pc, #40]	@ (8020b2c <prvGetMessageFromStreamBuffer+0xa0>)
 8020b04:	6818      	ldr	r0, [r3, #0]
 8020b06:	68bb      	ldr	r3, [r7, #8]
 8020b08:	2200      	movs	r2, #0
 8020b0a:	9200      	str	r2, [sp, #0]
 8020b0c:	687a      	ldr	r2, [r7, #4]
 8020b0e:	2100      	movs	r1, #0
 8020b10:	f7ef fb4f 	bl	80101b2 <uxStreamBufferGet>

					/* Terminate the string after the string's last character. */
					pcBuffer[ xMessageLength ] = 0x00;
 8020b14:	68bb      	ldr	r3, [r7, #8]
 8020b16:	687a      	ldr	r2, [r7, #4]
 8020b18:	4413      	add	r3, r2
 8020b1a:	2200      	movs	r2, #0
 8020b1c:	701a      	strb	r2, [r3, #0]
				}
			}
			xTaskResumeAll();
 8020b1e:	f7e2 ffa7 	bl	8003a70 <xTaskResumeAll>
		}
	}

	return xMessageLength;
 8020b22:	68bb      	ldr	r3, [r7, #8]
}
 8020b24:	4618      	mov	r0, r3
 8020b26:	3710      	adds	r7, #16
 8020b28:	46bd      	mov	sp, r7
 8020b2a:	bd80      	pop	{r7, pc}
 8020b2c:	20002354 	.word	0x20002354
 8020b30:	2000228c 	.word	0x2000228c

08020b34 <prvBufferFormattedString>:
/*-----------------------------------------------------------*/

static size_t prvBufferFormattedString( const char *pcFormatString, va_list xArgs )
{
 8020b34:	b580      	push	{r7, lr}
 8020b36:	b08e      	sub	sp, #56	@ 0x38
 8020b38:	af04      	add	r7, sp, #16
 8020b3a:	6078      	str	r0, [r7, #4]
 8020b3c:	6039      	str	r1, [r7, #0]
size_t xLength, xSpace;
uint64_t ullCurrentTime;
uint32_t ulSeconds, ulMilliSeconds, ulMicroSeconds;

	/* Sanity check. */
	configASSERT( pxStreamBuffer );
 8020b3e:	4b49      	ldr	r3, [pc, #292]	@ (8020c64 <prvBufferFormattedString+0x130>)
 8020b40:	681b      	ldr	r3, [r3, #0]
 8020b42:	2b00      	cmp	r3, #0
 8020b44:	d104      	bne.n	8020b50 <prvBufferFormattedString+0x1c>
 8020b46:	f44f 7199 	mov.w	r1, #306	@ 0x132
 8020b4a:	4847      	ldr	r0, [pc, #284]	@ (8020c68 <prvBufferFormattedString+0x134>)
 8020b4c:	f7e0 fc90 	bl	8001470 <vAssertCalled>

	vTaskSuspendAll();
 8020b50:	f7e2 ff80 	bl	8003a54 <vTaskSuspendAll>
	{
		ullCurrentTime = ullGetHighResolutionTime();
 8020b54:	f000 fa2a 	bl	8020fac <ullGetHighResolutionTime>
 8020b58:	e9c7 0108 	strd	r0, r1, [r7, #32]
		ulSeconds = ( uint32_t ) ( ullCurrentTime / 1000000ull );
 8020b5c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020b60:	4a42      	ldr	r2, [pc, #264]	@ (8020c6c <prvBufferFormattedString+0x138>)
 8020b62:	f04f 0300 	mov.w	r3, #0
 8020b66:	f7df fc23 	bl	80003b0 <__aeabi_uldivmod>
 8020b6a:	4602      	mov	r2, r0
 8020b6c:	460b      	mov	r3, r1
 8020b6e:	4613      	mov	r3, r2
 8020b70:	61fb      	str	r3, [r7, #28]
		ullCurrentTime = ullCurrentTime % 1000000ull;
 8020b72:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020b76:	4a3d      	ldr	r2, [pc, #244]	@ (8020c6c <prvBufferFormattedString+0x138>)
 8020b78:	f04f 0300 	mov.w	r3, #0
 8020b7c:	f7df fc18 	bl	80003b0 <__aeabi_uldivmod>
 8020b80:	e9c7 2308 	strd	r2, r3, [r7, #32]
		ulMilliSeconds = ( uint32_t ) ( ullCurrentTime / 1000ull );
 8020b84:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020b88:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8020b8c:	f04f 0300 	mov.w	r3, #0
 8020b90:	f7df fc0e 	bl	80003b0 <__aeabi_uldivmod>
 8020b94:	4602      	mov	r2, r0
 8020b96:	460b      	mov	r3, r1
 8020b98:	4613      	mov	r3, r2
 8020b9a:	61bb      	str	r3, [r7, #24]
		ulMicroSeconds = ( uint32_t ) ( ullCurrentTime % 1000ull );
 8020b9c:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8020ba0:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8020ba4:	f04f 0300 	mov.w	r3, #0
 8020ba8:	f7df fc02 	bl	80003b0 <__aeabi_uldivmod>
 8020bac:	4613      	mov	r3, r2
 8020bae:	617b      	str	r3, [r7, #20]

		xLength = ( size_t ) snprintf( xLogEntry.cMessage, sizeof( xLogEntry.cMessage ), "%4u.%03u.%03u [%-10s] ",
 8020bb0:	2000      	movs	r0, #0
 8020bb2:	f7e3 f871 	bl	8003c98 <pcTaskGetName>
 8020bb6:	4603      	mov	r3, r0
 8020bb8:	9302      	str	r3, [sp, #8]
 8020bba:	697b      	ldr	r3, [r7, #20]
 8020bbc:	9301      	str	r3, [sp, #4]
 8020bbe:	69bb      	ldr	r3, [r7, #24]
 8020bc0:	9300      	str	r3, [sp, #0]
 8020bc2:	69fb      	ldr	r3, [r7, #28]
 8020bc4:	4a2a      	ldr	r2, [pc, #168]	@ (8020c70 <prvBufferFormattedString+0x13c>)
 8020bc6:	21c8      	movs	r1, #200	@ 0xc8
 8020bc8:	482a      	ldr	r0, [pc, #168]	@ (8020c74 <prvBufferFormattedString+0x140>)
 8020bca:	f001 f885 	bl	8021cd8 <snprintf>
 8020bce:	4603      	mov	r3, r0
 8020bd0:	60fb      	str	r3, [r7, #12]
			( unsigned int ) ulSeconds, ( unsigned int ) ulMilliSeconds, ( unsigned int ) ulMicroSeconds, pcTaskGetTaskName( NULL ) );
		xLength += ( size_t ) vsnprintf( xLogEntry.cMessage + xLength, sizeof( xLogEntry.cMessage ) - xLength, pcFormatString, xArgs );
 8020bd2:	68fb      	ldr	r3, [r7, #12]
 8020bd4:	4a27      	ldr	r2, [pc, #156]	@ (8020c74 <prvBufferFormattedString+0x140>)
 8020bd6:	1898      	adds	r0, r3, r2
 8020bd8:	68fb      	ldr	r3, [r7, #12]
 8020bda:	f1c3 01c8 	rsb	r1, r3, #200	@ 0xc8
 8020bde:	683b      	ldr	r3, [r7, #0]
 8020be0:	687a      	ldr	r2, [r7, #4]
 8020be2:	f001 f85d 	bl	8021ca0 <vsnprintf>
 8020be6:	4603      	mov	r3, r0
 8020be8:	461a      	mov	r2, r3
 8020bea:	68fb      	ldr	r3, [r7, #12]
 8020bec:	4413      	add	r3, r2
 8020bee:	60fb      	str	r3, [r7, #12]

		xSpace = uxStreamBufferGetSpace( pxStreamBuffer );
 8020bf0:	4b1c      	ldr	r3, [pc, #112]	@ (8020c64 <prvBufferFormattedString+0x130>)
 8020bf2:	681b      	ldr	r3, [r3, #0]
 8020bf4:	4618      	mov	r0, r3
 8020bf6:	f7ef f99c 	bl	800ff32 <uxStreamBufferGetSpace>
 8020bfa:	6138      	str	r0, [r7, #16]

		if( xSpace > ( xLength + sizeof( BaseType_t ) ) )
 8020bfc:	68fb      	ldr	r3, [r7, #12]
 8020bfe:	3304      	adds	r3, #4
 8020c00:	693a      	ldr	r2, [r7, #16]
 8020c02:	429a      	cmp	r2, r3
 8020c04:	d90e      	bls.n	8020c24 <prvBufferFormattedString+0xf0>
		{
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) &xLength, sizeof( xLength ) );
 8020c06:	4b17      	ldr	r3, [pc, #92]	@ (8020c64 <prvBufferFormattedString+0x130>)
 8020c08:	6818      	ldr	r0, [r3, #0]
 8020c0a:	f107 020c 	add.w	r2, r7, #12
 8020c0e:	2304      	movs	r3, #4
 8020c10:	2100      	movs	r1, #0
 8020c12:	f7ef fa4e 	bl	80100b2 <uxStreamBufferAdd>
			uxStreamBufferAdd( pxStreamBuffer, 0, ( const uint8_t * ) ( xLogEntry.cMessage ), xLength );
 8020c16:	4b13      	ldr	r3, [pc, #76]	@ (8020c64 <prvBufferFormattedString+0x130>)
 8020c18:	6818      	ldr	r0, [r3, #0]
 8020c1a:	68fb      	ldr	r3, [r7, #12]
 8020c1c:	4a15      	ldr	r2, [pc, #84]	@ (8020c74 <prvBufferFormattedString+0x140>)
 8020c1e:	2100      	movs	r1, #0
 8020c20:	f7ef fa47 	bl	80100b2 <uxStreamBufferAdd>
		}
	}
	xTaskResumeAll();
 8020c24:	f7e2 ff24 	bl	8003a70 <xTaskResumeAll>

	if( xLoggingTask == NULL )
 8020c28:	4b13      	ldr	r3, [pc, #76]	@ (8020c78 <prvBufferFormattedString+0x144>)
 8020c2a:	681b      	ldr	r3, [r3, #0]
 8020c2c:	2b00      	cmp	r3, #0
 8020c2e:	d10a      	bne.n	8020c46 <prvBufferFormattedString+0x112>
	{
		/* The task isn't running yet, call the hook directly. */
		vUDPLoggingHook( xLogEntry.cMessage, xLength );
 8020c30:	68fb      	ldr	r3, [r7, #12]
 8020c32:	4619      	mov	r1, r3
 8020c34:	480f      	ldr	r0, [pc, #60]	@ (8020c74 <prvBufferFormattedString+0x140>)
 8020c36:	f000 f85b 	bl	8020cf0 <vUDPLoggingHook>
		uxSkipCount++;
 8020c3a:	4b10      	ldr	r3, [pc, #64]	@ (8020c7c <prvBufferFormattedString+0x148>)
 8020c3c:	681b      	ldr	r3, [r3, #0]
 8020c3e:	3301      	adds	r3, #1
 8020c40:	4a0e      	ldr	r2, [pc, #56]	@ (8020c7c <prvBufferFormattedString+0x148>)
 8020c42:	6013      	str	r3, [r2, #0]
 8020c44:	e008      	b.n	8020c58 <prvBufferFormattedString+0x124>
	}
	else
	{
		/* Unblock the logging task so it can output the message. */
		xTaskNotifyGive( xLoggingTask );
 8020c46:	4b0c      	ldr	r3, [pc, #48]	@ (8020c78 <prvBufferFormattedString+0x144>)
 8020c48:	6818      	ldr	r0, [r3, #0]
 8020c4a:	2300      	movs	r3, #0
 8020c4c:	9300      	str	r3, [sp, #0]
 8020c4e:	2302      	movs	r3, #2
 8020c50:	2200      	movs	r2, #0
 8020c52:	2100      	movs	r1, #0
 8020c54:	f7e4 f862 	bl	8004d1c <xTaskGenericNotify>
	}

	return xLength;
 8020c58:	68fb      	ldr	r3, [r7, #12]
}
 8020c5a:	4618      	mov	r0, r3
 8020c5c:	3728      	adds	r7, #40	@ 0x28
 8020c5e:	46bd      	mov	sp, r7
 8020c60:	bd80      	pop	{r7, pc}
 8020c62:	bf00      	nop
 8020c64:	20002354 	.word	0x20002354
 8020c68:	08026220 	.word	0x08026220
 8020c6c:	000f4240 	.word	0x000f4240
 8020c70:	08026248 	.word	0x08026248
 8020c74:	2000228c 	.word	0x2000228c
 8020c78:	20002358 	.word	0x20002358
 8020c7c:	2000235c 	.word	0x2000235c

08020c80 <lUDPLoggingPrintf>:
/*-----------------------------------------------------------*/

int lUDPLoggingPrintf( const char *pcFormatString, ... )
{
 8020c80:	b40f      	push	{r0, r1, r2, r3}
 8020c82:	b580      	push	{r7, lr}
 8020c84:	b082      	sub	sp, #8
 8020c86:	af00      	add	r7, sp, #0
size_t xLength;

	if( prvInitialiseLogging() != pdFALSE )
 8020c88:	f7ff fece 	bl	8020a28 <prvInitialiseLogging>
 8020c8c:	4603      	mov	r3, r0
 8020c8e:	2b00      	cmp	r3, #0
 8020c90:	d008      	beq.n	8020ca4 <lUDPLoggingPrintf+0x24>
	{
		va_list args;
		va_start (args, pcFormatString);
 8020c92:	f107 0314 	add.w	r3, r7, #20
 8020c96:	603b      	str	r3, [r7, #0]
		xLength = prvBufferFormattedString (pcFormatString, args);
 8020c98:	6839      	ldr	r1, [r7, #0]
 8020c9a:	6938      	ldr	r0, [r7, #16]
 8020c9c:	f7ff ff4a 	bl	8020b34 <prvBufferFormattedString>
 8020ca0:	6078      	str	r0, [r7, #4]
 8020ca2:	e001      	b.n	8020ca8 <lUDPLoggingPrintf+0x28>
		va_end (args);
	}
	else
	{
		xLength = 0;
 8020ca4:	2300      	movs	r3, #0
 8020ca6:	607b      	str	r3, [r7, #4]
	}

	return ( int ) xLength;
 8020ca8:	687b      	ldr	r3, [r7, #4]
}
 8020caa:	4618      	mov	r0, r3
 8020cac:	3708      	adds	r7, #8
 8020cae:	46bd      	mov	sp, r7
 8020cb0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8020cb4:	b004      	add	sp, #16
 8020cb6:	4770      	bx	lr

08020cb8 <vUDPLoggingTaskCreate>:
/*-----------------------------------------------------------*/

BaseType_t rc_create;

void vUDPLoggingTaskCreate( void )
{
 8020cb8:	b580      	push	{r7, lr}
 8020cba:	b082      	sub	sp, #8
 8020cbc:	af02      	add	r7, sp, #8
	/* Start a task which will send out the logging lines to a UDP address. */
	rc_create = xTaskCreate( prvLoggingTask, "LogTask", configUDP_LOGGING_TASK_STACK_SIZE, NULL, configUDP_LOGGING_TASK_PRIORITY, &xLoggingTask );
 8020cbe:	4b08      	ldr	r3, [pc, #32]	@ (8020ce0 <vUDPLoggingTaskCreate+0x28>)
 8020cc0:	9301      	str	r3, [sp, #4]
 8020cc2:	2302      	movs	r3, #2
 8020cc4:	9300      	str	r3, [sp, #0]
 8020cc6:	2300      	movs	r3, #0
 8020cc8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8020ccc:	4905      	ldr	r1, [pc, #20]	@ (8020ce4 <vUDPLoggingTaskCreate+0x2c>)
 8020cce:	4806      	ldr	r0, [pc, #24]	@ (8020ce8 <vUDPLoggingTaskCreate+0x30>)
 8020cd0:	f7e2 fcc8 	bl	8003664 <xTaskCreate>
 8020cd4:	4603      	mov	r3, r0
 8020cd6:	4a05      	ldr	r2, [pc, #20]	@ (8020cec <vUDPLoggingTaskCreate+0x34>)
 8020cd8:	6013      	str	r3, [r2, #0]
}
 8020cda:	bf00      	nop
 8020cdc:	46bd      	mov	sp, r7
 8020cde:	bd80      	pop	{r7, pc}
 8020ce0:	20002358 	.word	0x20002358
 8020ce4:	08026260 	.word	0x08026260
 8020ce8:	08020d09 	.word	0x08020d09
 8020cec:	20002360 	.word	0x20002360

08020cf0 <vUDPLoggingHook>:
	return xReturn;
}
/*-----------------------------------------------------------*/

void __attribute__((weak)) vUDPLoggingHook( const char *pcMessage, BaseType_t xLength )
{
 8020cf0:	b480      	push	{r7}
 8020cf2:	b083      	sub	sp, #12
 8020cf4:	af00      	add	r7, sp, #0
 8020cf6:	6078      	str	r0, [r7, #4]
 8020cf8:	6039      	str	r1, [r7, #0]
	( void ) pcMessage;
	( void ) xLength;
}
 8020cfa:	bf00      	nop
 8020cfc:	370c      	adds	r7, #12
 8020cfe:	46bd      	mov	sp, r7
 8020d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020d04:	4770      	bx	lr
	...

08020d08 <prvLoggingTask>:
#if( ipconfigOLD_MULTI != 0 )
	#define ENDPOINT_IS_IPv4( pxEndPoint )	( 1 )
#endif

static void prvLoggingTask( void *pvParameters )
{
 8020d08:	b580      	push	{r7, lr}
 8020d0a:	b098      	sub	sp, #96	@ 0x60
 8020d0c:	af02      	add	r7, sp, #8
 8020d0e:	6078      	str	r0, [r7, #4]
TickType_t xBlockingTime = pdMS_TO_TICKS( logUDP_LOGGING_BLOCK_TIME_MS );
 8020d10:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8020d14:	64bb      	str	r3, [r7, #72]	@ 0x48

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
		for( ;; )
		{
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8020d16:	2000      	movs	r0, #0
 8020d18:	f7eb fede 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 8020d1c:	6538      	str	r0, [r7, #80]	@ 0x50
 8020d1e:	e01c      	b.n	8020d5a <prvLoggingTask+0x52>
				pxEndPoint != NULL;
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
			{
				if( ( pxEndPoint->bits.bEndPointUp ) && ( ENDPOINT_IS_IPv4( pxEndPoint ) != pdFALSE) )
 8020d20:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020d22:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8020d26:	f003 0310 	and.w	r3, r3, #16
 8020d2a:	b2db      	uxtb	r3, r3
 8020d2c:	2b00      	cmp	r3, #0
 8020d2e:	d00f      	beq.n	8020d50 <prvLoggingTask+0x48>
 8020d30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020d32:	2b00      	cmp	r3, #0
 8020d34:	d009      	beq.n	8020d4a <prvLoggingTask+0x42>
 8020d36:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020d38:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8020d3c:	f003 0304 	and.w	r3, r3, #4
 8020d40:	b2db      	uxtb	r3, r3
 8020d42:	2b00      	cmp	r3, #0
 8020d44:	d101      	bne.n	8020d4a <prvLoggingTask+0x42>
 8020d46:	2301      	movs	r3, #1
 8020d48:	e000      	b.n	8020d4c <prvLoggingTask+0x44>
 8020d4a:	2300      	movs	r3, #0
 8020d4c:	2b00      	cmp	r3, #0
 8020d4e:	d108      	bne.n	8020d62 <prvLoggingTask+0x5a>
				pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint ) )
 8020d50:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8020d52:	2000      	movs	r0, #0
 8020d54:	f7eb fee2 	bl	800cb1c <FreeRTOS_NextEndPoint>
 8020d58:	6538      	str	r0, [r7, #80]	@ 0x50
				pxEndPoint != NULL;
 8020d5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020d5c:	2b00      	cmp	r3, #0
 8020d5e:	d1df      	bne.n	8020d20 <prvLoggingTask+0x18>
 8020d60:	e000      	b.n	8020d64 <prvLoggingTask+0x5c>
				{
					break;
 8020d62:	bf00      	nop
				}
			}
			if( pxEndPoint != pdFALSE )
 8020d64:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020d66:	2b00      	cmp	r3, #0
 8020d68:	d000      	beq.n	8020d6c <prvLoggingTask+0x64>
			{
				break;
 8020d6a:	e004      	b.n	8020d76 <prvLoggingTask+0x6e>
			}
			vTaskDelay( 1000 );
 8020d6c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8020d70:	f7e2 fdb8 	bl	80038e4 <vTaskDelay>
			for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8020d74:	e7cf      	b.n	8020d16 <prvLoggingTask+0xe>
	#endif	/* ( ipconfigMULTI_INTERFACE != 0 ) */

	/* Loop until a socket is created. */
	do
	{
		vTaskDelay( xBlockingTime );
 8020d76:	6cb8      	ldr	r0, [r7, #72]	@ 0x48
 8020d78:	f7e2 fdb4 	bl	80038e4 <vTaskDelay>
		xUDPLoggingSocket = FreeRTOS_socket( FREERTOS_AF_INET, FREERTOS_SOCK_DGRAM, FREERTOS_IPPROTO_UDP );
 8020d7c:	2211      	movs	r2, #17
 8020d7e:	2102      	movs	r1, #2
 8020d80:	2002      	movs	r0, #2
 8020d82:	f7ec fc25 	bl	800d5d0 <FreeRTOS_socket>
 8020d86:	4603      	mov	r3, r0
 8020d88:	4a4c      	ldr	r2, [pc, #304]	@ (8020ebc <prvLoggingTask+0x1b4>)
 8020d8a:	6013      	str	r3, [r2, #0]
	} while( xUDPLoggingSocket == FREERTOS_INVALID_SOCKET );
 8020d8c:	4b4b      	ldr	r3, [pc, #300]	@ (8020ebc <prvLoggingTask+0x1b4>)
 8020d8e:	681b      	ldr	r3, [r3, #0]
 8020d90:	f1b3 3fff 	cmp.w	r3, #4294967295
 8020d94:	d0ef      	beq.n	8020d76 <prvLoggingTask+0x6e>

	#if( ipconfigMULTI_INTERFACE != 0 )
	{
//		pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
		configASSERT( pxEndPoint != NULL );
 8020d96:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020d98:	2b00      	cmp	r3, #0
 8020d9a:	d104      	bne.n	8020da6 <prvLoggingTask+0x9e>
 8020d9c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8020da0:	4847      	ldr	r0, [pc, #284]	@ (8020ec0 <prvLoggingTask+0x1b8>)
 8020da2:	f7e0 fb65 	bl	8001470 <vAssertCalled>
		configASSERT( pxEndPoint->pxNetworkInterface != NULL );
 8020da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020da8:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8020dac:	2b00      	cmp	r3, #0
 8020dae:	d104      	bne.n	8020dba <prvLoggingTask+0xb2>
 8020db0:	f240 11df 	movw	r1, #479	@ 0x1df
 8020db4:	4842      	ldr	r0, [pc, #264]	@ (8020ec0 <prvLoggingTask+0x1b8>)
 8020db6:	f7e0 fb5b 	bl	8001470 <vAssertCalled>
		pxNetworkInterface = pxEndPoint->pxNetworkInterface;
 8020dba:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020dbc:	f8d3 3120 	ldr.w	r3, [r3, #288]	@ 0x120
 8020dc0:	647b      	str	r3, [r7, #68]	@ 0x44
		//xRemoteAddress.sin_addr = FREERTOS_INADDR_ANY;
	}
	#endif

	xLocalAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_LOCAL );
 8020dc2:	f246 2309 	movw	r3, #25097	@ 0x6209
 8020dc6:	857b      	strh	r3, [r7, #42]	@ 0x2a
	{
		xLocalAddress.sin_addr = pxEndPoint->ulIPAddress;
	}
	#else
	{
		xLocalAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress;
 8020dc8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8020dca:	681b      	ldr	r3, [r3, #0]
 8020dcc:	633b      	str	r3, [r7, #48]	@ 0x30
	#endif
#else
	xLocalAddress.sin_addr = FreeRTOS_GetIPAddress();
#endif

	FreeRTOS_bind( xUDPLoggingSocket, &xLocalAddress, sizeof( xLocalAddress ) );
 8020dce:	4b3b      	ldr	r3, [pc, #236]	@ (8020ebc <prvLoggingTask+0x1b4>)
 8020dd0:	681b      	ldr	r3, [r3, #0]
 8020dd2:	f107 0128 	add.w	r1, r7, #40	@ 0x28
 8020dd6:	2218      	movs	r2, #24
 8020dd8:	4618      	mov	r0, r3
 8020dda:	f7ec fde9 	bl	800d9b0 <FreeRTOS_bind>

	xSendTimeOut = xBlockingTime;
 8020dde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020de0:	627b      	str	r3, [r7, #36]	@ 0x24
	FreeRTOS_setsockopt( xUDPLoggingSocket, 0, FREERTOS_SO_SNDTIMEO, &xSendTimeOut, sizeof( xSendTimeOut ) );
 8020de2:	4b36      	ldr	r3, [pc, #216]	@ (8020ebc <prvLoggingTask+0x1b4>)
 8020de4:	6818      	ldr	r0, [r3, #0]
 8020de6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8020dea:	2204      	movs	r2, #4
 8020dec:	9200      	str	r2, [sp, #0]
 8020dee:	2201      	movs	r2, #1
 8020df0:	2100      	movs	r1, #0
 8020df2:	f7ed fba7 	bl	800e544 <FreeRTOS_setsockopt>

	for( ;; )
	{
		/* Wait for another message to be placed into the stream buffer. */
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8020df6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020df8:	2101      	movs	r1, #1
 8020dfa:	2000      	movs	r0, #0
 8020dfc:	f7e3 fe82 	bl	8004b04 <ulTaskGenericNotifyTake>

	#if( ipconfigMULTI_INTERFACE != 0 )
		if( pxNetworkInterface->pfGetPhyLinkStatus( pxNetworkInterface ) != pdFALSE )
 8020e00:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8020e02:	691b      	ldr	r3, [r3, #16]
 8020e04:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 8020e06:	4798      	blx	r3
 8020e08:	4603      	mov	r3, r0
 8020e0a:	2b00      	cmp	r3, #0
 8020e0c:	d0f3      	beq.n	8020df6 <prvLoggingTask+0xee>
	#else
		if( xSTM32H_GetPhyLinkStatus(&( xInterfaces[ 0 ] )) != pdFALSE )
	#endif
		{
			/* Check for messages in the buffer. */
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8020e0e:	2300      	movs	r3, #0
 8020e10:	657b      	str	r3, [r7, #84]	@ 0x54
 8020e12:	e04c      	b.n	8020eae <prvLoggingTask+0x1a6>
			{
				xCount = prvGetMessageFromStreamBuffer ( cLoggingLine, sizeof( cLoggingLine ) );
 8020e14:	21c8      	movs	r1, #200	@ 0xc8
 8020e16:	482b      	ldr	r0, [pc, #172]	@ (8020ec4 <prvLoggingTask+0x1bc>)
 8020e18:	f7ff fe38 	bl	8020a8c <prvGetMessageFromStreamBuffer>
 8020e1c:	6438      	str	r0, [r7, #64]	@ 0x40

				if( xCount <= 0 )
 8020e1e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020e20:	2b00      	cmp	r3, #0
 8020e22:	d048      	beq.n	8020eb6 <prvLoggingTask+0x1ae>
				#if( ipconfigMULTI_INTERFACE != 0 )
				{
				struct freertos_sockaddr xAddress;
				NetworkEndPoint_t *pxEndPoint;

					for( pxEndPoint = FreeRTOS_FirstEndPoint( NULL );
 8020e24:	2000      	movs	r0, #0
 8020e26:	f7eb fe57 	bl	800cad8 <FreeRTOS_FirstEndPoint>
 8020e2a:	64f8      	str	r0, [r7, #76]	@ 0x4c
 8020e2c:	e02a      	b.n	8020e84 <prvLoggingTask+0x17c>
						pxEndPoint != NULL;
						)
					{
						if( ENDPOINT_IS_IPv4( pxEndPoint ) )
 8020e2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020e30:	2b00      	cmp	r3, #0
 8020e32:	d022      	beq.n	8020e7a <prvLoggingTask+0x172>
 8020e34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020e36:	f893 30f0 	ldrb.w	r3, [r3, #240]	@ 0xf0
 8020e3a:	f003 0304 	and.w	r3, r3, #4
 8020e3e:	b2db      	uxtb	r3, r3
 8020e40:	2b00      	cmp	r3, #0
 8020e42:	d11a      	bne.n	8020e7a <prvLoggingTask+0x172>
						{
							xAddress.sin_len = sizeof( xAddress );		/* length of this structure. */
 8020e44:	2318      	movs	r3, #24
 8020e46:	733b      	strb	r3, [r7, #12]
							xAddress.sin_family = FREERTOS_AF_INET;
 8020e48:	2302      	movs	r3, #2
 8020e4a:	737b      	strb	r3, [r7, #13]
							{
								xAddress.sin_addr = pxEndPoint->ulIPAddress | ~( pxEndPoint->ulNetMask );
							}
							#else
							{
								xAddress.sin_addr = pxEndPoint->ipv4_settings.ulIPAddress | ~( pxEndPoint->ipv4_settings.ulNetMask );
 8020e4c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020e4e:	681a      	ldr	r2, [r3, #0]
 8020e50:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020e52:	685b      	ldr	r3, [r3, #4]
 8020e54:	43db      	mvns	r3, r3
 8020e56:	4313      	orrs	r3, r2
 8020e58:	617b      	str	r3, [r7, #20]
							}
							#endif
							xAddress.sin_port = FreeRTOS_htons( configUDP_LOGGING_PORT_REMOTE );
 8020e5a:	f246 3309 	movw	r3, #25353	@ 0x6309
 8020e5e:	81fb      	strh	r3, [r7, #14]
							//if( pxNextEndPoint == NULL )
							{
								FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xAddress, sizeof( xAddress ) );
 8020e60:	4b16      	ldr	r3, [pc, #88]	@ (8020ebc <prvLoggingTask+0x1b4>)
 8020e62:	6818      	ldr	r0, [r3, #0]
 8020e64:	2318      	movs	r3, #24
 8020e66:	9301      	str	r3, [sp, #4]
 8020e68:	f107 030c 	add.w	r3, r7, #12
 8020e6c:	9300      	str	r3, [sp, #0]
 8020e6e:	2300      	movs	r3, #0
 8020e70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8020e72:	4914      	ldr	r1, [pc, #80]	@ (8020ec4 <prvLoggingTask+0x1bc>)
 8020e74:	f7ec fd2c 	bl	800d8d0 <FreeRTOS_sendto>
							}
							break;
 8020e78:	e007      	b.n	8020e8a <prvLoggingTask+0x182>
						}
						pxEndPoint = FreeRTOS_NextEndPoint( NULL, pxEndPoint );
 8020e7a:	6cf9      	ldr	r1, [r7, #76]	@ 0x4c
 8020e7c:	2000      	movs	r0, #0
 8020e7e:	f7eb fe4d 	bl	800cb1c <FreeRTOS_NextEndPoint>
 8020e82:	64f8      	str	r0, [r7, #76]	@ 0x4c
						pxEndPoint != NULL;
 8020e84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8020e86:	2b00      	cmp	r3, #0
 8020e88:	d1d1      	bne.n	8020e2e <prvLoggingTask+0x126>
				{
//#warning Do not send logging as a test
					FreeRTOS_sendto( xUDPLoggingSocket, ( void * ) cLoggingLine, xCount, 0, &xRemoteAddress, sizeof( xRemoteAddress ) );
				}
				#endif
				if( uxSkipCount != ( size_t )0u )
 8020e8a:	4b0f      	ldr	r3, [pc, #60]	@ (8020ec8 <prvLoggingTask+0x1c0>)
 8020e8c:	681b      	ldr	r3, [r3, #0]
 8020e8e:	2b00      	cmp	r3, #0
 8020e90:	d005      	beq.n	8020e9e <prvLoggingTask+0x196>
				{
					uxSkipCount--;
 8020e92:	4b0d      	ldr	r3, [pc, #52]	@ (8020ec8 <prvLoggingTask+0x1c0>)
 8020e94:	681b      	ldr	r3, [r3, #0]
 8020e96:	3b01      	subs	r3, #1
 8020e98:	4a0b      	ldr	r2, [pc, #44]	@ (8020ec8 <prvLoggingTask+0x1c0>)
 8020e9a:	6013      	str	r3, [r2, #0]
 8020e9c:	e004      	b.n	8020ea8 <prvLoggingTask+0x1a0>
				}
				else
				{
					vUDPLoggingHook( cLoggingLine, xCount );
 8020e9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8020ea0:	4619      	mov	r1, r3
 8020ea2:	4808      	ldr	r0, [pc, #32]	@ (8020ec4 <prvLoggingTask+0x1bc>)
 8020ea4:	f7ff ff24 	bl	8020cf0 <vUDPLoggingHook>
			for( lLines = 0; lLines < configUDP_LOGGING_MAX_MESSAGES_IN_BUFFER; lLines++ )
 8020ea8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020eaa:	3301      	adds	r3, #1
 8020eac:	657b      	str	r3, [r7, #84]	@ 0x54
 8020eae:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8020eb0:	2b13      	cmp	r3, #19
 8020eb2:	ddaf      	ble.n	8020e14 <prvLoggingTask+0x10c>
 8020eb4:	e79f      	b.n	8020df6 <prvLoggingTask+0xee>
					break;
 8020eb6:	bf00      	nop
		ulTaskNotifyTake( pdTRUE, xBlockingTime );
 8020eb8:	e79d      	b.n	8020df6 <prvLoggingTask+0xee>
 8020eba:	bf00      	nop
 8020ebc:	20000028 	.word	0x20000028
 8020ec0:	08026220 	.word	0x08026220
 8020ec4:	20002368 	.word	0x20002368
 8020ec8:	2000235c 	.word	0x2000235c

08020ecc <TIM2_IRQHandler>:

static uint32_t ulInterruptCount = 0;

uint32_t ulTimer2Flags;
void TIM2_IRQHandler(void)
{
 8020ecc:	b480      	push	{r7}
 8020ece:	af00      	add	r7, sp, #0
	ulTimer2Flags = htim2.Instance->SR;
 8020ed0:	4b0c      	ldr	r3, [pc, #48]	@ (8020f04 <TIM2_IRQHandler+0x38>)
 8020ed2:	681b      	ldr	r3, [r3, #0]
 8020ed4:	691b      	ldr	r3, [r3, #16]
 8020ed6:	4a0c      	ldr	r2, [pc, #48]	@ (8020f08 <TIM2_IRQHandler+0x3c>)
 8020ed8:	6013      	str	r3, [r2, #0]
	if( ( ulTimer2Flags & TIM_FLAG_UPDATE ) != 0 )
 8020eda:	4b0b      	ldr	r3, [pc, #44]	@ (8020f08 <TIM2_IRQHandler+0x3c>)
 8020edc:	681b      	ldr	r3, [r3, #0]
 8020ede:	f003 0301 	and.w	r3, r3, #1
 8020ee2:	2b00      	cmp	r3, #0
 8020ee4:	d009      	beq.n	8020efa <TIM2_IRQHandler+0x2e>
	{
		__HAL_TIM_CLEAR_FLAG( &htim2, TIM_FLAG_UPDATE );
 8020ee6:	4b07      	ldr	r3, [pc, #28]	@ (8020f04 <TIM2_IRQHandler+0x38>)
 8020ee8:	681b      	ldr	r3, [r3, #0]
 8020eea:	f06f 0201 	mvn.w	r2, #1
 8020eee:	611a      	str	r2, [r3, #16]
		ulInterruptCount++;
 8020ef0:	4b06      	ldr	r3, [pc, #24]	@ (8020f0c <TIM2_IRQHandler+0x40>)
 8020ef2:	681b      	ldr	r3, [r3, #0]
 8020ef4:	3301      	adds	r3, #1
 8020ef6:	4a05      	ldr	r2, [pc, #20]	@ (8020f0c <TIM2_IRQHandler+0x40>)
 8020ef8:	6013      	str	r3, [r2, #0]
	}
}
 8020efa:	bf00      	nop
 8020efc:	46bd      	mov	sp, r7
 8020efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020f02:	4770      	bx	lr
 8020f04:	200003cc 	.word	0x200003cc
 8020f08:	20002434 	.word	0x20002434
 8020f0c:	20002430 	.word	0x20002430

08020f10 <vStartHighResolutionTimer>:


/* Timer2 initialization function */
void vStartHighResolutionTimer( void )
{
 8020f10:	b580      	push	{r7, lr}
 8020f12:	b082      	sub	sp, #8
 8020f14:	af00      	add	r7, sp, #0
	/* TIM2 clock enable */
	__HAL_RCC_TIM2_CLK_ENABLE();
 8020f16:	4b20      	ldr	r3, [pc, #128]	@ (8020f98 <vStartHighResolutionTimer+0x88>)
 8020f18:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8020f1c:	4a1e      	ldr	r2, [pc, #120]	@ (8020f98 <vStartHighResolutionTimer+0x88>)
 8020f1e:	f043 0301 	orr.w	r3, r3, #1
 8020f22:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8020f26:	4b1c      	ldr	r3, [pc, #112]	@ (8020f98 <vStartHighResolutionTimer+0x88>)
 8020f28:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8020f2c:	f003 0301 	and.w	r3, r3, #1
 8020f30:	607b      	str	r3, [r7, #4]
 8020f32:	687b      	ldr	r3, [r7, #4]

	htim2.Instance = TIM2;     /* Register base address             */
 8020f34:	4b19      	ldr	r3, [pc, #100]	@ (8020f9c <vStartHighResolutionTimer+0x8c>)
 8020f36:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8020f3a:	601a      	str	r2, [r3, #0]

	htim2.Init.Prescaler = ( ulPrescale - 1ul );			/* Specifies the prescaler value used to divide the TIM clock. */
 8020f3c:	23c8      	movs	r3, #200	@ 0xc8
 8020f3e:	3b01      	subs	r3, #1
 8020f40:	4a16      	ldr	r2, [pc, #88]	@ (8020f9c <vStartHighResolutionTimer+0x8c>)
 8020f42:	6053      	str	r3, [r2, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;			/* Specifies the counter mode. */
 8020f44:	4b15      	ldr	r3, [pc, #84]	@ (8020f9c <vStartHighResolutionTimer+0x8c>)
 8020f46:	2200      	movs	r2, #0
 8020f48:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = ( ulReloadCount - 1ul );			/* Specifies the period value to be loaded into the active. */
 8020f4a:	4b15      	ldr	r3, [pc, #84]	@ (8020fa0 <vStartHighResolutionTimer+0x90>)
 8020f4c:	3b01      	subs	r3, #1
 8020f4e:	4a13      	ldr	r2, [pc, #76]	@ (8020f9c <vStartHighResolutionTimer+0x8c>)
 8020f50:	60d3      	str	r3, [r2, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;	/* Specifies the clock division. */
 8020f52:	4b12      	ldr	r3, [pc, #72]	@ (8020f9c <vStartHighResolutionTimer+0x8c>)
 8020f54:	2200      	movs	r2, #0
 8020f56:	611a      	str	r2, [r3, #16]
	htim2.Init.RepetitionCounter = 0ul;					/* Specifies the repetition counter value. */
 8020f58:	4b10      	ldr	r3, [pc, #64]	@ (8020f9c <vStartHighResolutionTimer+0x8c>)
 8020f5a:	2200      	movs	r2, #0
 8020f5c:	615a      	str	r2, [r3, #20]
	htim2.Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8020f5e:	4b0f      	ldr	r3, [pc, #60]	@ (8020f9c <vStartHighResolutionTimer+0x8c>)
 8020f60:	2201      	movs	r2, #1
 8020f62:	771a      	strb	r2, [r3, #28]

	/* NVIC configuration for DMA transfer complete interrupt */
	HAL_NVIC_SetPriority( TIM2_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1, 0 );
 8020f64:	2200      	movs	r2, #0
 8020f66:	2105      	movs	r1, #5
 8020f68:	201c      	movs	r0, #28
 8020f6a:	f7f8 fbf0 	bl	801974e <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ( TIM2_IRQn );
 8020f6e:	201c      	movs	r0, #28
 8020f70:	f7f8 fc07 	bl	8019782 <HAL_NVIC_EnableIRQ>


	HAL_TIM_Base_Init( &htim2 );
 8020f74:	4809      	ldr	r0, [pc, #36]	@ (8020f9c <vStartHighResolutionTimer+0x8c>)
 8020f76:	f7fe f8e2 	bl	801f13e <HAL_TIM_Base_Init>
	HAL_TIM_Base_Start_IT( &htim2 );
 8020f7a:	4808      	ldr	r0, [pc, #32]	@ (8020f9c <vStartHighResolutionTimer+0x8c>)
 8020f7c:	f7fe f936 	bl	801f1ec <HAL_TIM_Base_Start_IT>
	ulTimer2Flags = htim2.Instance->SR;
 8020f80:	4b06      	ldr	r3, [pc, #24]	@ (8020f9c <vStartHighResolutionTimer+0x8c>)
 8020f82:	681b      	ldr	r3, [r3, #0]
 8020f84:	691b      	ldr	r3, [r3, #16]
 8020f86:	4a07      	ldr	r2, [pc, #28]	@ (8020fa4 <vStartHighResolutionTimer+0x94>)
 8020f88:	6013      	str	r3, [r2, #0]
	/* Ignore the initial interrupt which sets ulInterruptCount = 1.*/
	ulInterruptCount = 0ul;
 8020f8a:	4b07      	ldr	r3, [pc, #28]	@ (8020fa8 <vStartHighResolutionTimer+0x98>)
 8020f8c:	2200      	movs	r2, #0
 8020f8e:	601a      	str	r2, [r3, #0]
}
 8020f90:	bf00      	nop
 8020f92:	3708      	adds	r7, #8
 8020f94:	46bd      	mov	sp, r7
 8020f96:	bd80      	pop	{r7, pc}
 8020f98:	58024400 	.word	0x58024400
 8020f9c:	200003cc 	.word	0x200003cc
 8020fa0:	00989680 	.word	0x00989680
 8020fa4:	20002434 	.word	0x20002434
 8020fa8:	20002430 	.word	0x20002430

08020fac <ullGetHighResolutionTime>:

uint64_t ullGetHighResolutionTime()
{
 8020fac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8020fb0:	b08e      	sub	sp, #56	@ 0x38
 8020fb2:	af00      	add	r7, sp, #0
uint64_t ullReturn;
	if( htim2.Instance == NULL )
 8020fb4:	493d      	ldr	r1, [pc, #244]	@ (80210ac <ullGetHighResolutionTime+0x100>)
 8020fb6:	6809      	ldr	r1, [r1, #0]
 8020fb8:	2900      	cmp	r1, #0
 8020fba:	d132      	bne.n	8021022 <ullGetHighResolutionTime+0x76>
	{
		ullReturn = 1000ull * xTaskGetTickCount();
 8020fbc:	f7e2 fe5c 	bl	8003c78 <xTaskGetTickCount>
 8020fc0:	4603      	mov	r3, r0
 8020fc2:	2200      	movs	r2, #0
 8020fc4:	469a      	mov	sl, r3
 8020fc6:	4693      	mov	fp, r2
 8020fc8:	4652      	mov	r2, sl
 8020fca:	465b      	mov	r3, fp
 8020fcc:	f04f 0000 	mov.w	r0, #0
 8020fd0:	f04f 0100 	mov.w	r1, #0
 8020fd4:	0159      	lsls	r1, r3, #5
 8020fd6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8020fda:	0150      	lsls	r0, r2, #5
 8020fdc:	4602      	mov	r2, r0
 8020fde:	460b      	mov	r3, r1
 8020fe0:	ebb2 040a 	subs.w	r4, r2, sl
 8020fe4:	eb63 050b 	sbc.w	r5, r3, fp
 8020fe8:	f04f 0200 	mov.w	r2, #0
 8020fec:	f04f 0300 	mov.w	r3, #0
 8020ff0:	00ab      	lsls	r3, r5, #2
 8020ff2:	ea43 7394 	orr.w	r3, r3, r4, lsr #30
 8020ff6:	00a2      	lsls	r2, r4, #2
 8020ff8:	4614      	mov	r4, r2
 8020ffa:	461d      	mov	r5, r3
 8020ffc:	eb14 080a 	adds.w	r8, r4, sl
 8021000:	eb45 090b 	adc.w	r9, r5, fp
 8021004:	f04f 0200 	mov.w	r2, #0
 8021008:	f04f 0300 	mov.w	r3, #0
 802100c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8021010:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8021014:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8021018:	4690      	mov	r8, r2
 802101a:	4699      	mov	r9, r3
 802101c:	e9c7 890c 	strd	r8, r9, [r7, #48]	@ 0x30
 8021020:	e03c      	b.n	802109c <ullGetHighResolutionTime+0xf0>
	uint32_t ulCounts[2];
	uint32_t ulSlowCount;

		for( ;; )
		{
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8021022:	4922      	ldr	r1, [pc, #136]	@ (80210ac <ullGetHighResolutionTime+0x100>)
 8021024:	6809      	ldr	r1, [r1, #0]
 8021026:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8021028:	6279      	str	r1, [r7, #36]	@ 0x24
			ulSlowCount = ulInterruptCount;
 802102a:	4921      	ldr	r1, [pc, #132]	@ (80210b0 <ullGetHighResolutionTime+0x104>)
 802102c:	6809      	ldr	r1, [r1, #0]
 802102e:	62f9      	str	r1, [r7, #44]	@ 0x2c
			ulCounts[ 1 ] = htim2.Instance->CNT;
 8021030:	491e      	ldr	r1, [pc, #120]	@ (80210ac <ullGetHighResolutionTime+0x100>)
 8021032:	6809      	ldr	r1, [r1, #0]
 8021034:	6a49      	ldr	r1, [r1, #36]	@ 0x24
 8021036:	62b9      	str	r1, [r7, #40]	@ 0x28
			if( ulCounts[ 1 ] >= ulCounts[ 0 ] )
 8021038:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 802103a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 802103c:	4288      	cmp	r0, r1
 802103e:	d200      	bcs.n	8021042 <ullGetHighResolutionTime+0x96>
			ulCounts[ 0 ] = htim2.Instance->CNT;
 8021040:	e7ef      	b.n	8021022 <ullGetHighResolutionTime+0x76>
			{
				/* TIM2_IRQHandler() has not occurred in between. */
				break;
 8021042:	bf00      	nop
			}
		}
		ullReturn = ( uint64_t )ulSlowCount * ulReloadCount + ulCounts[ 1 ];
 8021044:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8021046:	2000      	movs	r0, #0
 8021048:	61b9      	str	r1, [r7, #24]
 802104a:	61f8      	str	r0, [r7, #28]
 802104c:	4819      	ldr	r0, [pc, #100]	@ (80210b4 <ullGetHighResolutionTime+0x108>)
 802104e:	2100      	movs	r1, #0
 8021050:	6138      	str	r0, [r7, #16]
 8021052:	6179      	str	r1, [r7, #20]
 8021054:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8021058:	4649      	mov	r1, r9
 802105a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 802105e:	4650      	mov	r0, sl
 8021060:	fb00 f001 	mul.w	r0, r0, r1
 8021064:	4659      	mov	r1, fp
 8021066:	4644      	mov	r4, r8
 8021068:	fb04 f101 	mul.w	r1, r4, r1
 802106c:	4401      	add	r1, r0
 802106e:	4640      	mov	r0, r8
 8021070:	4654      	mov	r4, sl
 8021072:	fba0 2304 	umull	r2, r3, r0, r4
 8021076:	4419      	add	r1, r3
 8021078:	460b      	mov	r3, r1
 802107a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 802107c:	2000      	movs	r0, #0
 802107e:	60b9      	str	r1, [r7, #8]
 8021080:	60f8      	str	r0, [r7, #12]
 8021082:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8021086:	4621      	mov	r1, r4
 8021088:	1851      	adds	r1, r2, r1
 802108a:	6039      	str	r1, [r7, #0]
 802108c:	4629      	mov	r1, r5
 802108e:	eb43 0101 	adc.w	r1, r3, r1
 8021092:	6079      	str	r1, [r7, #4]
 8021094:	e9d7 3400 	ldrd	r3, r4, [r7]
 8021098:	e9c7 340c 	strd	r3, r4, [r7, #48]	@ 0x30
	}

	return ullReturn;
 802109c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
}
 80210a0:	4610      	mov	r0, r2
 80210a2:	4619      	mov	r1, r3
 80210a4:	3738      	adds	r7, #56	@ 0x38
 80210a6:	46bd      	mov	sp, r7
 80210a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80210ac:	200003cc 	.word	0x200003cc
 80210b0:	20002430 	.word	0x20002430
 80210b4:	00989680 	.word	0x00989680

080210b8 <memcpy>:
	uint32_t uint32;
};

#if( SIMPLE_MEMCPY == 0 )
void *memcpy( void *pvDest, const void *pvSource, size_t ulBytes )
{
 80210b8:	b480      	push	{r7}
 80210ba:	b08d      	sub	sp, #52	@ 0x34
 80210bc:	af00      	add	r7, sp, #0
 80210be:	60f8      	str	r0, [r7, #12]
 80210c0:	60b9      	str	r1, [r7, #8]
 80210c2:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxSource;
union xPointer pxLastSource;
uint32_t ulAlignBits;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 80210c4:	68fb      	ldr	r3, [r7, #12]
 80210c6:	61bb      	str	r3, [r7, #24]
	pxSource.u8 = ( uint8_t * ) pvSource;
 80210c8:	68bb      	ldr	r3, [r7, #8]
 80210ca:	617b      	str	r3, [r7, #20]
	pxLastSource.u8 = pxSource.u8 + ulBytes;
 80210cc:	697a      	ldr	r2, [r7, #20]
 80210ce:	687b      	ldr	r3, [r7, #4]
 80210d0:	4413      	add	r3, r2
 80210d2:	613b      	str	r3, [r7, #16]

	ulAlignBits = ( pxDestination.uint32 & 0x03 ) ^ ( pxSource.uint32 & 0x03 );
 80210d4:	69ba      	ldr	r2, [r7, #24]
 80210d6:	697b      	ldr	r3, [r7, #20]
 80210d8:	4053      	eors	r3, r2
 80210da:	f003 0303 	and.w	r3, r3, #3
 80210de:	627b      	str	r3, [r7, #36]	@ 0x24

	if( ( ulAlignBits & 0x01 ) == 0 )
 80210e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80210e2:	f003 0301 	and.w	r3, r3, #1
 80210e6:	2b00      	cmp	r3, #0
 80210e8:	f040 80a1 	bne.w	802122e <memcpy+0x176>
	{
		if( ( ( pxSource.uint32 & 1 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 ) )
 80210ec:	697b      	ldr	r3, [r7, #20]
 80210ee:	f003 0301 	and.w	r3, r3, #1
 80210f2:	2b00      	cmp	r3, #0
 80210f4:	d00b      	beq.n	802110e <memcpy+0x56>
 80210f6:	697a      	ldr	r2, [r7, #20]
 80210f8:	693b      	ldr	r3, [r7, #16]
 80210fa:	429a      	cmp	r2, r3
 80210fc:	d207      	bcs.n	802110e <memcpy+0x56>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++) ;
 80210fe:	697a      	ldr	r2, [r7, #20]
 8021100:	1c53      	adds	r3, r2, #1
 8021102:	617b      	str	r3, [r7, #20]
 8021104:	69bb      	ldr	r3, [r7, #24]
 8021106:	1c59      	adds	r1, r3, #1
 8021108:	61b9      	str	r1, [r7, #24]
 802110a:	7812      	ldrb	r2, [r2, #0]
 802110c:	701a      	strb	r2, [r3, #0]
		}
		/* 16-bit aligned here */
		if( ( ulAlignBits & 0x02 ) != 0 )
 802110e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021110:	f003 0302 	and.w	r3, r3, #2
 8021114:	2b00      	cmp	r3, #0
 8021116:	d01f      	beq.n	8021158 <memcpy+0xa0>
		{
			uint32_t extra = pxLastSource.uint32 & 0x01ul;
 8021118:	693b      	ldr	r3, [r7, #16]
 802111a:	f003 0301 	and.w	r3, r3, #1
 802111e:	61fb      	str	r3, [r7, #28]

			pxLastSource.uint32 &= ~0x01ul;
 8021120:	693b      	ldr	r3, [r7, #16]
 8021122:	f023 0301 	bic.w	r3, r3, #1
 8021126:	613b      	str	r3, [r7, #16]

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8021128:	e00a      	b.n	8021140 <memcpy+0x88>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 802112a:	697a      	ldr	r2, [r7, #20]
 802112c:	1c93      	adds	r3, r2, #2
 802112e:	617b      	str	r3, [r7, #20]
 8021130:	69bb      	ldr	r3, [r7, #24]
 8021132:	1c99      	adds	r1, r3, #2
 8021134:	61b9      	str	r1, [r7, #24]
 8021136:	8812      	ldrh	r2, [r2, #0]
 8021138:	801a      	strh	r2, [r3, #0]
					ulBytes -= 2;
 802113a:	687b      	ldr	r3, [r7, #4]
 802113c:	3b02      	subs	r3, #2
 802113e:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u16 < pxLastSource.u16 ) && ( ulBytes != 0ul ) )
 8021140:	697a      	ldr	r2, [r7, #20]
 8021142:	693b      	ldr	r3, [r7, #16]
 8021144:	429a      	cmp	r2, r3
 8021146:	d202      	bcs.n	802114e <memcpy+0x96>
 8021148:	687b      	ldr	r3, [r7, #4]
 802114a:	2b00      	cmp	r3, #0
 802114c:	d1ed      	bne.n	802112a <memcpy+0x72>
				{
					*( pxDestination.u16++ ) = *( pxSource.u16++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 802114e:	693a      	ldr	r2, [r7, #16]
 8021150:	69fb      	ldr	r3, [r7, #28]
 8021152:	4313      	orrs	r3, r2
 8021154:	613b      	str	r3, [r7, #16]
 8021156:	e0ae      	b.n	80212b6 <memcpy+0x1fe>
		else
		{
			int iCount;
			uint32_t extra;

			if( ( ( pxSource.uint32 & 2 ) != 0 ) && ( pxSource.u8 < pxLastSource.u8 - 1 ) )
 8021158:	697b      	ldr	r3, [r7, #20]
 802115a:	f003 0302 	and.w	r3, r3, #2
 802115e:	2b00      	cmp	r3, #0
 8021160:	d00c      	beq.n	802117c <memcpy+0xc4>
 8021162:	697a      	ldr	r2, [r7, #20]
 8021164:	693b      	ldr	r3, [r7, #16]
 8021166:	3b01      	subs	r3, #1
 8021168:	429a      	cmp	r2, r3
 802116a:	d207      	bcs.n	802117c <memcpy+0xc4>
			{
				*( pxDestination.u16++ ) = *( pxSource.u16++) ;
 802116c:	697a      	ldr	r2, [r7, #20]
 802116e:	1c93      	adds	r3, r2, #2
 8021170:	617b      	str	r3, [r7, #20]
 8021172:	69bb      	ldr	r3, [r7, #24]
 8021174:	1c99      	adds	r1, r3, #2
 8021176:	61b9      	str	r1, [r7, #24]
 8021178:	8812      	ldrh	r2, [r2, #0]
 802117a:	801a      	strh	r2, [r3, #0]
			}
			// 32-bit aligned
			extra = pxLastSource.uint32 & 0x03ul;
 802117c:	693b      	ldr	r3, [r7, #16]
 802117e:	f003 0303 	and.w	r3, r3, #3
 8021182:	623b      	str	r3, [r7, #32]

			pxLastSource.uint32 &= ~0x03ul;
 8021184:	693b      	ldr	r3, [r7, #16]
 8021186:	f023 0303 	bic.w	r3, r3, #3
 802118a:	613b      	str	r3, [r7, #16]
			iCount = pxLastSource.u32 - pxSource.u32;
 802118c:	693a      	ldr	r2, [r7, #16]
 802118e:	697b      	ldr	r3, [r7, #20]
 8021190:	1ad3      	subs	r3, r2, r3
 8021192:	109b      	asrs	r3, r3, #2
 8021194:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 8021196:	e02f      	b.n	80211f8 <memcpy+0x140>
			{
				/* Copy 32 bytes */
				/* Normally it doesn't make sense to make this list much longer because
				the indexes will get too big, and therefore longer instructions are needed. */
				pxDestination.u32[ 0 ] = pxSource.u32[ 0 ];
 8021198:	697a      	ldr	r2, [r7, #20]
 802119a:	69bb      	ldr	r3, [r7, #24]
 802119c:	6812      	ldr	r2, [r2, #0]
 802119e:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 1 ] = pxSource.u32[ 1 ];
 80211a0:	697a      	ldr	r2, [r7, #20]
 80211a2:	69bb      	ldr	r3, [r7, #24]
 80211a4:	3304      	adds	r3, #4
 80211a6:	6852      	ldr	r2, [r2, #4]
 80211a8:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 2 ] = pxSource.u32[ 2 ];
 80211aa:	697a      	ldr	r2, [r7, #20]
 80211ac:	69bb      	ldr	r3, [r7, #24]
 80211ae:	3308      	adds	r3, #8
 80211b0:	6892      	ldr	r2, [r2, #8]
 80211b2:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 3 ] = pxSource.u32[ 3 ];
 80211b4:	697a      	ldr	r2, [r7, #20]
 80211b6:	69bb      	ldr	r3, [r7, #24]
 80211b8:	330c      	adds	r3, #12
 80211ba:	68d2      	ldr	r2, [r2, #12]
 80211bc:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 4 ] = pxSource.u32[ 4 ];
 80211be:	697a      	ldr	r2, [r7, #20]
 80211c0:	69bb      	ldr	r3, [r7, #24]
 80211c2:	3310      	adds	r3, #16
 80211c4:	6912      	ldr	r2, [r2, #16]
 80211c6:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 5 ] = pxSource.u32[ 5 ];
 80211c8:	697a      	ldr	r2, [r7, #20]
 80211ca:	69bb      	ldr	r3, [r7, #24]
 80211cc:	3314      	adds	r3, #20
 80211ce:	6952      	ldr	r2, [r2, #20]
 80211d0:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 6 ] = pxSource.u32[ 6 ];
 80211d2:	697a      	ldr	r2, [r7, #20]
 80211d4:	69bb      	ldr	r3, [r7, #24]
 80211d6:	3318      	adds	r3, #24
 80211d8:	6992      	ldr	r2, [r2, #24]
 80211da:	601a      	str	r2, [r3, #0]
				pxDestination.u32[ 7 ] = pxSource.u32[ 7 ];
 80211dc:	697a      	ldr	r2, [r7, #20]
 80211de:	69bb      	ldr	r3, [r7, #24]
 80211e0:	331c      	adds	r3, #28
 80211e2:	69d2      	ldr	r2, [r2, #28]
 80211e4:	601a      	str	r2, [r3, #0]
				pxDestination.u32 += 8;
 80211e6:	69bb      	ldr	r3, [r7, #24]
 80211e8:	3320      	adds	r3, #32
 80211ea:	61bb      	str	r3, [r7, #24]
				pxSource.u32 += 8;
 80211ec:	697b      	ldr	r3, [r7, #20]
 80211ee:	3320      	adds	r3, #32
 80211f0:	617b      	str	r3, [r7, #20]
				iCount -= 8;
 80211f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80211f4:	3b08      	subs	r3, #8
 80211f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
			while( iCount > 8 )
 80211f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80211fa:	2b08      	cmp	r3, #8
 80211fc:	dccc      	bgt.n	8021198 <memcpy+0xe0>
			}

			#if( MEMCPY_USES_LOOP_COUNTER != 0 )
			{
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 80211fe:	e00a      	b.n	8021216 <memcpy+0x15e>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
 8021200:	697a      	ldr	r2, [r7, #20]
 8021202:	1d13      	adds	r3, r2, #4
 8021204:	617b      	str	r3, [r7, #20]
 8021206:	69bb      	ldr	r3, [r7, #24]
 8021208:	1d19      	adds	r1, r3, #4
 802120a:	61b9      	str	r1, [r7, #24]
 802120c:	6812      	ldr	r2, [r2, #0]
 802120e:	601a      	str	r2, [r3, #0]
					ulBytes -= 4;
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	3b04      	subs	r3, #4
 8021214:	607b      	str	r3, [r7, #4]
				while( ( pxSource.u32 < pxLastSource.u32 ) && ( ulBytes != 0ul ) )
 8021216:	697a      	ldr	r2, [r7, #20]
 8021218:	693b      	ldr	r3, [r7, #16]
 802121a:	429a      	cmp	r2, r3
 802121c:	d202      	bcs.n	8021224 <memcpy+0x16c>
 802121e:	687b      	ldr	r3, [r7, #4]
 8021220:	2b00      	cmp	r3, #0
 8021222:	d1ed      	bne.n	8021200 <memcpy+0x148>
				{
					*( pxDestination.u32++ ) = *( pxSource.u32++) ;
				}
			}
			#endif
			pxLastSource.uint32 |= extra;
 8021224:	693a      	ldr	r2, [r7, #16]
 8021226:	6a3b      	ldr	r3, [r7, #32]
 8021228:	4313      	orrs	r3, r2
 802122a:	613b      	str	r3, [r7, #16]
 802122c:	e043      	b.n	80212b6 <memcpy+0x1fe>
	}
	else
	{
		/* This it the worst alignment, e.g. 0x80000 and 0xA0001,
		only 8-bits copying is possible. */
		int iCount = pxLastSource.u8 - pxSource.u8;
 802122e:	693a      	ldr	r2, [r7, #16]
 8021230:	697b      	ldr	r3, [r7, #20]
 8021232:	1ad3      	subs	r3, r2, r3
 8021234:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8021236:	e02f      	b.n	8021298 <memcpy+0x1e0>
		{
			/* Copy 8 bytes the hard way */
			pxDestination.u8[ 0 ] = pxSource.u8[ 0 ];
 8021238:	697a      	ldr	r2, [r7, #20]
 802123a:	69bb      	ldr	r3, [r7, #24]
 802123c:	7812      	ldrb	r2, [r2, #0]
 802123e:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 1 ] = pxSource.u8[ 1 ];
 8021240:	697a      	ldr	r2, [r7, #20]
 8021242:	69bb      	ldr	r3, [r7, #24]
 8021244:	3301      	adds	r3, #1
 8021246:	7852      	ldrb	r2, [r2, #1]
 8021248:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 2 ] = pxSource.u8[ 2 ];
 802124a:	697a      	ldr	r2, [r7, #20]
 802124c:	69bb      	ldr	r3, [r7, #24]
 802124e:	3302      	adds	r3, #2
 8021250:	7892      	ldrb	r2, [r2, #2]
 8021252:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 3 ] = pxSource.u8[ 3 ];
 8021254:	697a      	ldr	r2, [r7, #20]
 8021256:	69bb      	ldr	r3, [r7, #24]
 8021258:	3303      	adds	r3, #3
 802125a:	78d2      	ldrb	r2, [r2, #3]
 802125c:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 4 ] = pxSource.u8[ 4 ];
 802125e:	697a      	ldr	r2, [r7, #20]
 8021260:	69bb      	ldr	r3, [r7, #24]
 8021262:	3304      	adds	r3, #4
 8021264:	7912      	ldrb	r2, [r2, #4]
 8021266:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 5 ] = pxSource.u8[ 5 ];
 8021268:	697a      	ldr	r2, [r7, #20]
 802126a:	69bb      	ldr	r3, [r7, #24]
 802126c:	3305      	adds	r3, #5
 802126e:	7952      	ldrb	r2, [r2, #5]
 8021270:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 6 ] = pxSource.u8[ 6 ];
 8021272:	697a      	ldr	r2, [r7, #20]
 8021274:	69bb      	ldr	r3, [r7, #24]
 8021276:	3306      	adds	r3, #6
 8021278:	7992      	ldrb	r2, [r2, #6]
 802127a:	701a      	strb	r2, [r3, #0]
			pxDestination.u8[ 7 ] = pxSource.u8[ 7 ];
 802127c:	697a      	ldr	r2, [r7, #20]
 802127e:	69bb      	ldr	r3, [r7, #24]
 8021280:	3307      	adds	r3, #7
 8021282:	79d2      	ldrb	r2, [r2, #7]
 8021284:	701a      	strb	r2, [r3, #0]
			pxDestination.u8 += 8;
 8021286:	69bb      	ldr	r3, [r7, #24]
 8021288:	3308      	adds	r3, #8
 802128a:	61bb      	str	r3, [r7, #24]
			pxSource.u8 += 8;
 802128c:	697b      	ldr	r3, [r7, #20]
 802128e:	3308      	adds	r3, #8
 8021290:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 8021292:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8021294:	3b08      	subs	r3, #8
 8021296:	62bb      	str	r3, [r7, #40]	@ 0x28
		while( iCount > 8 )
 8021298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802129a:	2b08      	cmp	r3, #8
 802129c:	dccc      	bgt.n	8021238 <memcpy+0x180>
		}
	}
	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 802129e:	e00a      	b.n	80212b6 <memcpy+0x1fe>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
 80212a0:	697a      	ldr	r2, [r7, #20]
 80212a2:	1c53      	adds	r3, r2, #1
 80212a4:	617b      	str	r3, [r7, #20]
 80212a6:	69bb      	ldr	r3, [r7, #24]
 80212a8:	1c59      	adds	r1, r3, #1
 80212aa:	61b9      	str	r1, [r7, #24]
 80212ac:	7812      	ldrb	r2, [r2, #0]
 80212ae:	701a      	strb	r2, [r3, #0]
			ulBytes--;
 80212b0:	687b      	ldr	r3, [r7, #4]
 80212b2:	3b01      	subs	r3, #1
 80212b4:	607b      	str	r3, [r7, #4]
		while( ( pxSource.u8 < pxLastSource.u8 ) && ( ulBytes != 0ul ) )
 80212b6:	697a      	ldr	r2, [r7, #20]
 80212b8:	693b      	ldr	r3, [r7, #16]
 80212ba:	429a      	cmp	r2, r3
 80212bc:	d202      	bcs.n	80212c4 <memcpy+0x20c>
 80212be:	687b      	ldr	r3, [r7, #4]
 80212c0:	2b00      	cmp	r3, #0
 80212c2:	d1ed      	bne.n	80212a0 <memcpy+0x1e8>
		{
			*( pxDestination.u8++ ) = *( pxSource.u8++ );
		}
	}
	#endif
	return pvDest;
 80212c4:	68fb      	ldr	r3, [r7, #12]
}
 80212c6:	4618      	mov	r0, r3
 80212c8:	3734      	adds	r7, #52	@ 0x34
 80212ca:	46bd      	mov	sp, r7
 80212cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212d0:	4770      	bx	lr

080212d2 <memset>:
/*-----------------------------------------------------------*/


#if( SIMPLE_MEMSET == 0 )
void *memset(void *pvDest, int iValue, size_t ulBytes)
{
 80212d2:	b480      	push	{r7}
 80212d4:	b08b      	sub	sp, #44	@ 0x2c
 80212d6:	af00      	add	r7, sp, #0
 80212d8:	60f8      	str	r0, [r7, #12]
 80212da:	60b9      	str	r1, [r7, #8]
 80212dc:	607a      	str	r2, [r7, #4]
union xPointer pxDestination;
union xPointer pxLast;
uint32_t ulPattern;

	pxDestination.u8 = ( uint8_t * ) pvDest;
 80212de:	68fb      	ldr	r3, [r7, #12]
 80212e0:	617b      	str	r3, [r7, #20]
	pxLast.u8 = pxDestination.u8 + ulBytes;
 80212e2:	697a      	ldr	r2, [r7, #20]
 80212e4:	687b      	ldr	r3, [r7, #4]
 80212e6:	4413      	add	r3, r2
 80212e8:	613b      	str	r3, [r7, #16]

	if( ulBytes >= 8 )
 80212ea:	687b      	ldr	r3, [r7, #4]
 80212ec:	2b07      	cmp	r3, #7
 80212ee:	d97b      	bls.n	80213e8 <memset+0x116>
	{
	uint32_t ulAlignBits;
	uint32_t ulExtra;
	int iCount;

		ulPattern = iValue & 0xff;
 80212f0:	68bb      	ldr	r3, [r7, #8]
 80212f2:	b2db      	uxtb	r3, r3
 80212f4:	61fb      	str	r3, [r7, #28]
		ulPattern |= ( ulPattern << 8 ) | ( ulPattern << 16 ) | ( ulPattern << 24 );
 80212f6:	69fb      	ldr	r3, [r7, #28]
 80212f8:	021a      	lsls	r2, r3, #8
 80212fa:	69fb      	ldr	r3, [r7, #28]
 80212fc:	041b      	lsls	r3, r3, #16
 80212fe:	431a      	orrs	r2, r3
 8021300:	69fb      	ldr	r3, [r7, #28]
 8021302:	061b      	lsls	r3, r3, #24
 8021304:	4313      	orrs	r3, r2
 8021306:	69fa      	ldr	r2, [r7, #28]
 8021308:	4313      	orrs	r3, r2
 802130a:	61fb      	str	r3, [r7, #28]
		ulAlignBits = ( pxDestination.uint32 & 0x03 );
 802130c:	697b      	ldr	r3, [r7, #20]
 802130e:	f003 0303 	and.w	r3, r3, #3
 8021312:	627b      	str	r3, [r7, #36]	@ 0x24
		if( ulAlignBits != 0 )
 8021314:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021316:	2b00      	cmp	r3, #0
 8021318:	d010      	beq.n	802133c <memset+0x6a>
		{
			ulAlignBits = 4 - ulAlignBits;
 802131a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 802131c:	f1c3 0304 	rsb	r3, r3, #4
 8021320:	627b      	str	r3, [r7, #36]	@ 0x24
			while( ulAlignBits-- > 0 )
 8021322:	e006      	b.n	8021332 <memset+0x60>
			{
				pxDestination.u8[ 0 ] = ( uint8_t )iValue;
 8021324:	697b      	ldr	r3, [r7, #20]
 8021326:	68ba      	ldr	r2, [r7, #8]
 8021328:	b2d2      	uxtb	r2, r2
 802132a:	701a      	strb	r2, [r3, #0]
				pxDestination.u8++;
 802132c:	697b      	ldr	r3, [r7, #20]
 802132e:	3301      	adds	r3, #1
 8021330:	617b      	str	r3, [r7, #20]
			while( ulAlignBits-- > 0 )
 8021332:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8021334:	1e5a      	subs	r2, r3, #1
 8021336:	627a      	str	r2, [r7, #36]	@ 0x24
 8021338:	2b00      	cmp	r3, #0
 802133a:	d1f3      	bne.n	8021324 <memset+0x52>
			}
		}
		/* Strip-off the last 1 up-to 3 bytes because they can not be set in a 32-bit
		memory instruction. */
		ulExtra = pxLast.uint32 & 0x03ul;
 802133c:	693b      	ldr	r3, [r7, #16]
 802133e:	f003 0303 	and.w	r3, r3, #3
 8021342:	61bb      	str	r3, [r7, #24]

		pxLast.uint32 &= ~0x03ul;
 8021344:	693b      	ldr	r3, [r7, #16]
 8021346:	f023 0303 	bic.w	r3, r3, #3
 802134a:	613b      	str	r3, [r7, #16]
		iCount = ( int ) ( pxLast.u32 - pxDestination.u32 );
 802134c:	693a      	ldr	r2, [r7, #16]
 802134e:	697b      	ldr	r3, [r7, #20]
 8021350:	1ad3      	subs	r3, r2, r3
 8021352:	109b      	asrs	r3, r3, #2
 8021354:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 8021356:	e024      	b.n	80213a2 <memset+0xd0>
		{
			/* Set 8 * 4 bytes and save some increments */
			/* It won't make sense to make this list much longer than 8 assignments. */
			pxDestination.u32[ 0 ] = ulPattern;
 8021358:	697b      	ldr	r3, [r7, #20]
 802135a:	69fa      	ldr	r2, [r7, #28]
 802135c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 1 ] = ulPattern;
 802135e:	697b      	ldr	r3, [r7, #20]
 8021360:	3304      	adds	r3, #4
 8021362:	69fa      	ldr	r2, [r7, #28]
 8021364:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 2 ] = ulPattern;
 8021366:	697b      	ldr	r3, [r7, #20]
 8021368:	3308      	adds	r3, #8
 802136a:	69fa      	ldr	r2, [r7, #28]
 802136c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 3 ] = ulPattern;
 802136e:	697b      	ldr	r3, [r7, #20]
 8021370:	330c      	adds	r3, #12
 8021372:	69fa      	ldr	r2, [r7, #28]
 8021374:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 4 ] = ulPattern;
 8021376:	697b      	ldr	r3, [r7, #20]
 8021378:	3310      	adds	r3, #16
 802137a:	69fa      	ldr	r2, [r7, #28]
 802137c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 5 ] = ulPattern;
 802137e:	697b      	ldr	r3, [r7, #20]
 8021380:	3314      	adds	r3, #20
 8021382:	69fa      	ldr	r2, [r7, #28]
 8021384:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 6 ] = ulPattern;
 8021386:	697b      	ldr	r3, [r7, #20]
 8021388:	3318      	adds	r3, #24
 802138a:	69fa      	ldr	r2, [r7, #28]
 802138c:	601a      	str	r2, [r3, #0]
			pxDestination.u32[ 7 ] = ulPattern;
 802138e:	697b      	ldr	r3, [r7, #20]
 8021390:	331c      	adds	r3, #28
 8021392:	69fa      	ldr	r2, [r7, #28]
 8021394:	601a      	str	r2, [r3, #0]
			pxDestination.u32 += 8;
 8021396:	697b      	ldr	r3, [r7, #20]
 8021398:	3320      	adds	r3, #32
 802139a:	617b      	str	r3, [r7, #20]
			iCount -= 8;
 802139c:	6a3b      	ldr	r3, [r7, #32]
 802139e:	3b08      	subs	r3, #8
 80213a0:	623b      	str	r3, [r7, #32]
		while( iCount > 8 )
 80213a2:	6a3b      	ldr	r3, [r7, #32]
 80213a4:	2b08      	cmp	r3, #8
 80213a6:	dcd7      	bgt.n	8021358 <memset+0x86>
		}

		#if( MEMCPY_USES_LOOP_COUNTER != 0 )
		{
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 80213a8:	e008      	b.n	80213bc <memset+0xea>
			{
				pxDestination.u32[0] = ulPattern;
 80213aa:	697b      	ldr	r3, [r7, #20]
 80213ac:	69fa      	ldr	r2, [r7, #28]
 80213ae:	601a      	str	r2, [r3, #0]
				pxDestination.u32++;
 80213b0:	697b      	ldr	r3, [r7, #20]
 80213b2:	3304      	adds	r3, #4
 80213b4:	617b      	str	r3, [r7, #20]
				ulBytes += 4;
 80213b6:	687b      	ldr	r3, [r7, #4]
 80213b8:	3304      	adds	r3, #4
 80213ba:	607b      	str	r3, [r7, #4]
			while( ( pxDestination.u32 < pxLast.u32 ) && ( ulBytes != 0ul ) )
 80213bc:	697a      	ldr	r2, [r7, #20]
 80213be:	693b      	ldr	r3, [r7, #16]
 80213c0:	429a      	cmp	r2, r3
 80213c2:	d202      	bcs.n	80213ca <memset+0xf8>
 80213c4:	687b      	ldr	r3, [r7, #4]
 80213c6:	2b00      	cmp	r3, #0
 80213c8:	d1ef      	bne.n	80213aa <memset+0xd8>
				pxDestination.u32[0] = ulPattern;
				pxDestination.u32++;
			}
		}
		#endif
		pxLast.uint32 |= ulExtra;
 80213ca:	693a      	ldr	r2, [r7, #16]
 80213cc:	69bb      	ldr	r3, [r7, #24]
 80213ce:	4313      	orrs	r3, r2
 80213d0:	613b      	str	r3, [r7, #16]
	}

	#if( MEMCPY_USES_LOOP_COUNTER != 0 )
	{
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 80213d2:	e009      	b.n	80213e8 <memset+0x116>
		{
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
 80213d4:	697b      	ldr	r3, [r7, #20]
 80213d6:	68ba      	ldr	r2, [r7, #8]
 80213d8:	b2d2      	uxtb	r2, r2
 80213da:	701a      	strb	r2, [r3, #0]
			pxDestination.u8++;
 80213dc:	697b      	ldr	r3, [r7, #20]
 80213de:	3301      	adds	r3, #1
 80213e0:	617b      	str	r3, [r7, #20]
			ulBytes++;
 80213e2:	687b      	ldr	r3, [r7, #4]
 80213e4:	3301      	adds	r3, #1
 80213e6:	607b      	str	r3, [r7, #4]
		while( ( pxDestination.u8 < pxLast.u8 ) && ( ulBytes != 0ul ) )
 80213e8:	697a      	ldr	r2, [r7, #20]
 80213ea:	693b      	ldr	r3, [r7, #16]
 80213ec:	429a      	cmp	r2, r3
 80213ee:	d202      	bcs.n	80213f6 <memset+0x124>
 80213f0:	687b      	ldr	r3, [r7, #4]
 80213f2:	2b00      	cmp	r3, #0
 80213f4:	d1ee      	bne.n	80213d4 <memset+0x102>
			pxDestination.u8[ 0 ] = ( uint8_t ) iValue;
			pxDestination.u8++;
		}
	}
	#endif
	return pvDest;
 80213f6:	68fb      	ldr	r3, [r7, #12]
}
 80213f8:	4618      	mov	r0, r3
 80213fa:	372c      	adds	r7, #44	@ 0x2c
 80213fc:	46bd      	mov	sp, r7
 80213fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021402:	4770      	bx	lr

08021404 <xApplicationMemoryPermissions>:
extern void vOutputChar( const char cChar, const TickType_t xTicksToWait  );

#ifdef __GNUC__

__attribute__((weak)) BaseType_t xApplicationMemoryPermissions( uint32_t aAddress )
{
 8021404:	b480      	push	{r7}
 8021406:	b083      	sub	sp, #12
 8021408:	af00      	add	r7, sp, #0
 802140a:	6078      	str	r0, [r7, #4]
	( void ) aAddress;
	/* Return 1 for readable, 2 for writeable, 3 for both. */
	return 0x03;
 802140c:	2303      	movs	r3, #3
}
 802140e:	4618      	mov	r0, r3
 8021410:	370c      	adds	r7, #12
 8021412:	46bd      	mov	sp, r7
 8021414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021418:	4770      	bx	lr

0802141a <vOutputChar>:


__attribute__((weak)) void vOutputChar( const char cChar, const TickType_t xTicksToWait  )
{
 802141a:	b480      	push	{r7}
 802141c:	b083      	sub	sp, #12
 802141e:	af00      	add	r7, sp, #0
 8021420:	4603      	mov	r3, r0
 8021422:	6039      	str	r1, [r7, #0]
 8021424:	71fb      	strb	r3, [r7, #7]
	( void ) cChar;
	( void ) xTicksToWait;
	/* Do nothing. */
}
 8021426:	bf00      	nop
 8021428:	370c      	adds	r7, #12
 802142a:	46bd      	mov	sp, r7
 802142c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021430:	4770      	bx	lr

08021432 <strbuf_init>:
#else
	static const _U32 u32 = { 0, 1, 2, 3 };
#endif

static void strbuf_init( struct SStringBuf *apStr, char *apBuf, const char *apMaxStr )
{
 8021432:	b580      	push	{r7, lr}
 8021434:	b084      	sub	sp, #16
 8021436:	af00      	add	r7, sp, #0
 8021438:	60f8      	str	r0, [r7, #12]
 802143a:	60b9      	str	r1, [r7, #8]
 802143c:	607a      	str	r2, [r7, #4]
	apStr->str = apBuf;
 802143e:	68fb      	ldr	r3, [r7, #12]
 8021440:	68ba      	ldr	r2, [r7, #8]
 8021442:	601a      	str	r2, [r3, #0]
	apStr->orgStr = apBuf;
 8021444:	68fb      	ldr	r3, [r7, #12]
 8021446:	68ba      	ldr	r2, [r7, #8]
 8021448:	605a      	str	r2, [r3, #4]
	apStr->nulPos = apMaxStr-1;
 802144a:	687b      	ldr	r3, [r7, #4]
 802144c:	1e5a      	subs	r2, r3, #1
 802144e:	68fb      	ldr	r3, [r7, #12]
 8021450:	609a      	str	r2, [r3, #8]
	apStr->curLen = 0;
 8021452:	68fb      	ldr	r3, [r7, #12]
 8021454:	2200      	movs	r2, #0
 8021456:	60da      	str	r2, [r3, #12]

	memset( &apStr->flags, '\0', sizeof apStr->flags );
 8021458:	68fb      	ldr	r3, [r7, #12]
 802145a:	3310      	adds	r3, #16
 802145c:	2210      	movs	r2, #16
 802145e:	2100      	movs	r1, #0
 8021460:	4618      	mov	r0, r3
 8021462:	f7ff ff36 	bl	80212d2 <memset>
}
 8021466:	bf00      	nop
 8021468:	3710      	adds	r7, #16
 802146a:	46bd      	mov	sp, r7
 802146c:	bd80      	pop	{r7, pc}

0802146e <strbuf_printchar>:
/*-----------------------------------------------------------*/

static BaseType_t strbuf_printchar( struct SStringBuf *apStr, int c )
{
 802146e:	b580      	push	{r7, lr}
 8021470:	b082      	sub	sp, #8
 8021472:	af00      	add	r7, sp, #0
 8021474:	6078      	str	r0, [r7, #4]
 8021476:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 8021478:	687b      	ldr	r3, [r7, #4]
 802147a:	681b      	ldr	r3, [r3, #0]
 802147c:	2b00      	cmp	r3, #0
 802147e:	d10d      	bne.n	802149c <strbuf_printchar+0x2e>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 8021480:	683b      	ldr	r3, [r7, #0]
 8021482:	b2db      	uxtb	r3, r3
 8021484:	2214      	movs	r2, #20
 8021486:	4611      	mov	r1, r2
 8021488:	4618      	mov	r0, r3
 802148a:	f7ff ffc6 	bl	802141a <vOutputChar>
		apStr->curLen++;
 802148e:	687b      	ldr	r3, [r7, #4]
 8021490:	68db      	ldr	r3, [r3, #12]
 8021492:	1c5a      	adds	r2, r3, #1
 8021494:	687b      	ldr	r3, [r7, #4]
 8021496:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8021498:	2301      	movs	r3, #1
 802149a:	e022      	b.n	80214e2 <strbuf_printchar+0x74>
	}
	if( apStr->str < apStr->nulPos )
 802149c:	687b      	ldr	r3, [r7, #4]
 802149e:	681a      	ldr	r2, [r3, #0]
 80214a0:	687b      	ldr	r3, [r7, #4]
 80214a2:	689b      	ldr	r3, [r3, #8]
 80214a4:	429a      	cmp	r2, r3
 80214a6:	d20e      	bcs.n	80214c6 <strbuf_printchar+0x58>
	{
		*( apStr->str++ ) = c;
 80214a8:	687b      	ldr	r3, [r7, #4]
 80214aa:	681b      	ldr	r3, [r3, #0]
 80214ac:	1c59      	adds	r1, r3, #1
 80214ae:	687a      	ldr	r2, [r7, #4]
 80214b0:	6011      	str	r1, [r2, #0]
 80214b2:	683a      	ldr	r2, [r7, #0]
 80214b4:	b2d2      	uxtb	r2, r2
 80214b6:	701a      	strb	r2, [r3, #0]
		apStr->curLen++;
 80214b8:	687b      	ldr	r3, [r7, #4]
 80214ba:	68db      	ldr	r3, [r3, #12]
 80214bc:	1c5a      	adds	r2, r3, #1
 80214be:	687b      	ldr	r3, [r7, #4]
 80214c0:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 80214c2:	2301      	movs	r3, #1
 80214c4:	e00d      	b.n	80214e2 <strbuf_printchar+0x74>
	}
	if( apStr->str == apStr->nulPos )
 80214c6:	687b      	ldr	r3, [r7, #4]
 80214c8:	681a      	ldr	r2, [r3, #0]
 80214ca:	687b      	ldr	r3, [r7, #4]
 80214cc:	689b      	ldr	r3, [r3, #8]
 80214ce:	429a      	cmp	r2, r3
 80214d0:	d106      	bne.n	80214e0 <strbuf_printchar+0x72>
	{
		*( apStr->str++ ) = '\0';
 80214d2:	687b      	ldr	r3, [r7, #4]
 80214d4:	681b      	ldr	r3, [r3, #0]
 80214d6:	1c59      	adds	r1, r3, #1
 80214d8:	687a      	ldr	r2, [r7, #4]
 80214da:	6011      	str	r1, [r2, #0]
 80214dc:	2200      	movs	r2, #0
 80214de:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 80214e0:	2300      	movs	r3, #0
}
 80214e2:	4618      	mov	r0, r3
 80214e4:	3708      	adds	r7, #8
 80214e6:	46bd      	mov	sp, r7
 80214e8:	bd80      	pop	{r7, pc}

080214ea <strbuf_printchar_inline>:
/*-----------------------------------------------------------*/

static __inline BaseType_t strbuf_printchar_inline( struct SStringBuf *apStr, int c )
{
 80214ea:	b580      	push	{r7, lr}
 80214ec:	b082      	sub	sp, #8
 80214ee:	af00      	add	r7, sp, #0
 80214f0:	6078      	str	r0, [r7, #4]
 80214f2:	6039      	str	r1, [r7, #0]
	if( apStr->str == NULL )
 80214f4:	687b      	ldr	r3, [r7, #4]
 80214f6:	681b      	ldr	r3, [r3, #0]
 80214f8:	2b00      	cmp	r3, #0
 80214fa:	d112      	bne.n	8021522 <strbuf_printchar_inline+0x38>
	{
		vOutputChar( ( char ) c, xTicksToWait );
 80214fc:	683b      	ldr	r3, [r7, #0]
 80214fe:	b2db      	uxtb	r3, r3
 8021500:	2214      	movs	r2, #20
 8021502:	4611      	mov	r1, r2
 8021504:	4618      	mov	r0, r3
 8021506:	f7ff ff88 	bl	802141a <vOutputChar>
		if( c == 0 )
 802150a:	683b      	ldr	r3, [r7, #0]
 802150c:	2b00      	cmp	r3, #0
 802150e:	d101      	bne.n	8021514 <strbuf_printchar_inline+0x2a>
		{
			return pdFALSE;
 8021510:	2300      	movs	r3, #0
 8021512:	e02e      	b.n	8021572 <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8021514:	687b      	ldr	r3, [r7, #4]
 8021516:	68db      	ldr	r3, [r3, #12]
 8021518:	1c5a      	adds	r2, r3, #1
 802151a:	687b      	ldr	r3, [r7, #4]
 802151c:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 802151e:	2301      	movs	r3, #1
 8021520:	e027      	b.n	8021572 <strbuf_printchar_inline+0x88>
	}
	if( apStr->str < apStr->nulPos )
 8021522:	687b      	ldr	r3, [r7, #4]
 8021524:	681a      	ldr	r2, [r3, #0]
 8021526:	687b      	ldr	r3, [r7, #4]
 8021528:	689b      	ldr	r3, [r3, #8]
 802152a:	429a      	cmp	r2, r3
 802152c:	d213      	bcs.n	8021556 <strbuf_printchar_inline+0x6c>
	{
		*(apStr->str++) = c;
 802152e:	687b      	ldr	r3, [r7, #4]
 8021530:	681b      	ldr	r3, [r3, #0]
 8021532:	1c59      	adds	r1, r3, #1
 8021534:	687a      	ldr	r2, [r7, #4]
 8021536:	6011      	str	r1, [r2, #0]
 8021538:	683a      	ldr	r2, [r7, #0]
 802153a:	b2d2      	uxtb	r2, r2
 802153c:	701a      	strb	r2, [r3, #0]
		if( c == 0 )
 802153e:	683b      	ldr	r3, [r7, #0]
 8021540:	2b00      	cmp	r3, #0
 8021542:	d101      	bne.n	8021548 <strbuf_printchar_inline+0x5e>
		{
			return pdFALSE;
 8021544:	2300      	movs	r3, #0
 8021546:	e014      	b.n	8021572 <strbuf_printchar_inline+0x88>
		}
		apStr->curLen++;
 8021548:	687b      	ldr	r3, [r7, #4]
 802154a:	68db      	ldr	r3, [r3, #12]
 802154c:	1c5a      	adds	r2, r3, #1
 802154e:	687b      	ldr	r3, [r7, #4]
 8021550:	60da      	str	r2, [r3, #12]
		return pdTRUE;
 8021552:	2301      	movs	r3, #1
 8021554:	e00d      	b.n	8021572 <strbuf_printchar_inline+0x88>
	}
	if( apStr->str == apStr->nulPos )
 8021556:	687b      	ldr	r3, [r7, #4]
 8021558:	681a      	ldr	r2, [r3, #0]
 802155a:	687b      	ldr	r3, [r7, #4]
 802155c:	689b      	ldr	r3, [r3, #8]
 802155e:	429a      	cmp	r2, r3
 8021560:	d106      	bne.n	8021570 <strbuf_printchar_inline+0x86>
	{
		*( apStr->str++ ) = '\0';
 8021562:	687b      	ldr	r3, [r7, #4]
 8021564:	681b      	ldr	r3, [r3, #0]
 8021566:	1c59      	adds	r1, r3, #1
 8021568:	687a      	ldr	r2, [r7, #4]
 802156a:	6011      	str	r1, [r2, #0]
 802156c:	2200      	movs	r2, #0
 802156e:	701a      	strb	r2, [r3, #0]
	}
	return pdFALSE;
 8021570:	2300      	movs	r3, #0
}
 8021572:	4618      	mov	r0, r3
 8021574:	3708      	adds	r7, #8
 8021576:	46bd      	mov	sp, r7
 8021578:	bd80      	pop	{r7, pc}
	...

0802157c <prints>:
	return iResult;
}
/*-----------------------------------------------------------*/

static BaseType_t prints(struct SStringBuf *apBuf, const char *apString )
{
 802157c:	b5f0      	push	{r4, r5, r6, r7, lr}
 802157e:	b085      	sub	sp, #20
 8021580:	af00      	add	r7, sp, #0
 8021582:	6078      	str	r0, [r7, #4]
 8021584:	6039      	str	r1, [r7, #0]
	register int padchar = ' ';
 8021586:	2620      	movs	r6, #32
	int i,len;

	if( xApplicationMemoryPermissions( ( uint32_t )apString ) == 0 )
 8021588:	683b      	ldr	r3, [r7, #0]
 802158a:	4618      	mov	r0, r3
 802158c:	f7ff ff3a 	bl	8021404 <xApplicationMemoryPermissions>
 8021590:	4603      	mov	r3, r0
 8021592:	2b00      	cmp	r3, #0
 8021594:	d101      	bne.n	802159a <prints+0x1e>
	{
		/* The user has probably made a mistake with the parameter
		for '%s', the memory is not readbale. */
		apString = "INV_MEM";
 8021596:	4b4c      	ldr	r3, [pc, #304]	@ (80216c8 <prints+0x14c>)
 8021598:	603b      	str	r3, [r7, #0]
	}

	if( apBuf->flags.width > 0 )
 802159a:	687b      	ldr	r3, [r7, #4]
 802159c:	695b      	ldr	r3, [r3, #20]
 802159e:	2b00      	cmp	r3, #0
 80215a0:	dd1b      	ble.n	80215da <prints+0x5e>
	{
		register int count = 0;
 80215a2:	2400      	movs	r4, #0
		register const char *ptr;
		for( ptr = apString; *ptr; ++ptr )
 80215a4:	683d      	ldr	r5, [r7, #0]
 80215a6:	e001      	b.n	80215ac <prints+0x30>
		{
			++count;
 80215a8:	3401      	adds	r4, #1
		for( ptr = apString; *ptr; ++ptr )
 80215aa:	3501      	adds	r5, #1
 80215ac:	782b      	ldrb	r3, [r5, #0]
 80215ae:	2b00      	cmp	r3, #0
 80215b0:	d1fa      	bne.n	80215a8 <prints+0x2c>
		}

		if( count >= apBuf->flags.width )
 80215b2:	687b      	ldr	r3, [r7, #4]
 80215b4:	695b      	ldr	r3, [r3, #20]
 80215b6:	429c      	cmp	r4, r3
 80215b8:	db03      	blt.n	80215c2 <prints+0x46>
		{
			apBuf->flags.width = 0;
 80215ba:	687b      	ldr	r3, [r7, #4]
 80215bc:	2200      	movs	r2, #0
 80215be:	615a      	str	r2, [r3, #20]
 80215c0:	e004      	b.n	80215cc <prints+0x50>
		}
		else
		{
			apBuf->flags.width -= count;
 80215c2:	687b      	ldr	r3, [r7, #4]
 80215c4:	695b      	ldr	r3, [r3, #20]
 80215c6:	1b1a      	subs	r2, r3, r4
 80215c8:	687b      	ldr	r3, [r7, #4]
 80215ca:	615a      	str	r2, [r3, #20]
		}

		if( apBuf->flags.pad & PAD_ZERO )
 80215cc:	687b      	ldr	r3, [r7, #4]
 80215ce:	7f1b      	ldrb	r3, [r3, #28]
 80215d0:	f003 0302 	and.w	r3, r3, #2
 80215d4:	2b00      	cmp	r3, #0
 80215d6:	d000      	beq.n	80215da <prints+0x5e>
		{
			padchar = '0';
 80215d8:	2630      	movs	r6, #48	@ 0x30
		}
	}
	if( ( apBuf->flags.pad & PAD_RIGHT ) == 0 )
 80215da:	687b      	ldr	r3, [r7, #4]
 80215dc:	7f1b      	ldrb	r3, [r3, #28]
 80215de:	f003 0301 	and.w	r3, r3, #1
 80215e2:	2b00      	cmp	r3, #0
 80215e4:	d112      	bne.n	802160c <prints+0x90>
	{
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80215e6:	e00d      	b.n	8021604 <prints+0x88>
		{
			if( strbuf_printchar( apBuf, padchar ) == 0 )
 80215e8:	4631      	mov	r1, r6
 80215ea:	6878      	ldr	r0, [r7, #4]
 80215ec:	f7ff ff3f 	bl	802146e <strbuf_printchar>
 80215f0:	4603      	mov	r3, r0
 80215f2:	2b00      	cmp	r3, #0
 80215f4:	d101      	bne.n	80215fa <prints+0x7e>
			{
				return pdFALSE;
 80215f6:	2300      	movs	r3, #0
 80215f8:	e062      	b.n	80216c0 <prints+0x144>
		for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80215fa:	687b      	ldr	r3, [r7, #4]
 80215fc:	695b      	ldr	r3, [r3, #20]
 80215fe:	1e5a      	subs	r2, r3, #1
 8021600:	687b      	ldr	r3, [r7, #4]
 8021602:	615a      	str	r2, [r3, #20]
 8021604:	687b      	ldr	r3, [r7, #4]
 8021606:	695b      	ldr	r3, [r3, #20]
 8021608:	2b00      	cmp	r3, #0
 802160a:	dced      	bgt.n	80215e8 <prints+0x6c>
			}
		}
	}
	if( ( apBuf->flags.isNumber == pdTRUE ) && ( apBuf->flags.pad == pdTRUE ) )
 802160c:	687b      	ldr	r3, [r7, #4]
 802160e:	7f9b      	ldrb	r3, [r3, #30]
 8021610:	f003 0302 	and.w	r3, r3, #2
 8021614:	b2db      	uxtb	r3, r3
 8021616:	2b00      	cmp	r3, #0
 8021618:	d036      	beq.n	8021688 <prints+0x10c>
 802161a:	687b      	ldr	r3, [r7, #4]
 802161c:	7f1b      	ldrb	r3, [r3, #28]
 802161e:	2b01      	cmp	r3, #1
 8021620:	d132      	bne.n	8021688 <prints+0x10c>
		/* The string to print represents an integer number.
		 * In this case, printLimit is the min number of digits to print
		 * If the length of the number to print is less than the min nb of i
		 * digits to display, we add 0 before printing the number
		 */
		len = strlen( apString );
 8021622:	6838      	ldr	r0, [r7, #0]
 8021624:	f7de fe66 	bl	80002f4 <strlen>
 8021628:	4603      	mov	r3, r0
 802162a:	60bb      	str	r3, [r7, #8]

		if( len < apBuf->flags.printLimit )
 802162c:	687b      	ldr	r3, [r7, #4]
 802162e:	699b      	ldr	r3, [r3, #24]
 8021630:	68ba      	ldr	r2, [r7, #8]
 8021632:	429a      	cmp	r2, r3
 8021634:	da28      	bge.n	8021688 <prints+0x10c>
		{
			i = apBuf->flags.printLimit - len;
 8021636:	687b      	ldr	r3, [r7, #4]
 8021638:	699a      	ldr	r2, [r3, #24]
 802163a:	68bb      	ldr	r3, [r7, #8]
 802163c:	1ad3      	subs	r3, r2, r3
 802163e:	60fb      	str	r3, [r7, #12]
			for( ; i; i-- )
 8021640:	e00b      	b.n	802165a <prints+0xde>
			{
				if( strbuf_printchar( apBuf, '0' )  == 0 )
 8021642:	2130      	movs	r1, #48	@ 0x30
 8021644:	6878      	ldr	r0, [r7, #4]
 8021646:	f7ff ff12 	bl	802146e <strbuf_printchar>
 802164a:	4603      	mov	r3, r0
 802164c:	2b00      	cmp	r3, #0
 802164e:	d101      	bne.n	8021654 <prints+0xd8>
				{
					return pdFALSE;
 8021650:	2300      	movs	r3, #0
 8021652:	e035      	b.n	80216c0 <prints+0x144>
			for( ; i; i-- )
 8021654:	68fb      	ldr	r3, [r7, #12]
 8021656:	3b01      	subs	r3, #1
 8021658:	60fb      	str	r3, [r7, #12]
 802165a:	68fb      	ldr	r3, [r7, #12]
 802165c:	2b00      	cmp	r3, #0
 802165e:	d1f0      	bne.n	8021642 <prints+0xc6>
		}
	}
	/* The string to print is not the result of a number conversion to ascii.
	 * For a string, printLimit is the max number of characters to display
	 */
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8021660:	e012      	b.n	8021688 <prints+0x10c>
	{
		if( !strbuf_printchar( apBuf, *apString ) )
 8021662:	683b      	ldr	r3, [r7, #0]
 8021664:	781b      	ldrb	r3, [r3, #0]
 8021666:	4619      	mov	r1, r3
 8021668:	6878      	ldr	r0, [r7, #4]
 802166a:	f7ff ff00 	bl	802146e <strbuf_printchar>
 802166e:	4603      	mov	r3, r0
 8021670:	2b00      	cmp	r3, #0
 8021672:	d101      	bne.n	8021678 <prints+0xfc>
		{
			return pdFALSE;
 8021674:	2300      	movs	r3, #0
 8021676:	e023      	b.n	80216c0 <prints+0x144>
	for( ; apBuf->flags.printLimit && *apString ; ++apString, --apBuf->flags.printLimit )
 8021678:	683b      	ldr	r3, [r7, #0]
 802167a:	3301      	adds	r3, #1
 802167c:	603b      	str	r3, [r7, #0]
 802167e:	687b      	ldr	r3, [r7, #4]
 8021680:	699b      	ldr	r3, [r3, #24]
 8021682:	1e5a      	subs	r2, r3, #1
 8021684:	687b      	ldr	r3, [r7, #4]
 8021686:	619a      	str	r2, [r3, #24]
 8021688:	687b      	ldr	r3, [r7, #4]
 802168a:	699b      	ldr	r3, [r3, #24]
 802168c:	2b00      	cmp	r3, #0
 802168e:	d012      	beq.n	80216b6 <prints+0x13a>
 8021690:	683b      	ldr	r3, [r7, #0]
 8021692:	781b      	ldrb	r3, [r3, #0]
 8021694:	2b00      	cmp	r3, #0
 8021696:	d1e4      	bne.n	8021662 <prints+0xe6>
		}
	}

	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 8021698:	e00d      	b.n	80216b6 <prints+0x13a>
	{
		if( !strbuf_printchar( apBuf, padchar ) )
 802169a:	4631      	mov	r1, r6
 802169c:	6878      	ldr	r0, [r7, #4]
 802169e:	f7ff fee6 	bl	802146e <strbuf_printchar>
 80216a2:	4603      	mov	r3, r0
 80216a4:	2b00      	cmp	r3, #0
 80216a6:	d101      	bne.n	80216ac <prints+0x130>
		{
			return pdFALSE;
 80216a8:	2300      	movs	r3, #0
 80216aa:	e009      	b.n	80216c0 <prints+0x144>
	for( ; apBuf->flags.width > 0; --apBuf->flags.width )
 80216ac:	687b      	ldr	r3, [r7, #4]
 80216ae:	695b      	ldr	r3, [r3, #20]
 80216b0:	1e5a      	subs	r2, r3, #1
 80216b2:	687b      	ldr	r3, [r7, #4]
 80216b4:	615a      	str	r2, [r3, #20]
 80216b6:	687b      	ldr	r3, [r7, #4]
 80216b8:	695b      	ldr	r3, [r3, #20]
 80216ba:	2b00      	cmp	r3, #0
 80216bc:	dced      	bgt.n	802169a <prints+0x11e>
		}
	}

	return pdTRUE;
 80216be:	2301      	movs	r3, #1
}
 80216c0:	4618      	mov	r0, r3
 80216c2:	3714      	adds	r7, #20
 80216c4:	46bd      	mov	sp, r7
 80216c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80216c8:	08026268 	.word	0x08026268

080216cc <printi>:
}
#endif	/* SPRINTF_LONG_LONG */
/*-----------------------------------------------------------*/

static BaseType_t printi( struct SStringBuf *apBuf, int i )
{
 80216cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80216d0:	b087      	sub	sp, #28
 80216d2:	af00      	add	r7, sp, #0
 80216d4:	6078      	str	r0, [r7, #4]
 80216d6:	6039      	str	r1, [r7, #0]
	char print_buf[ PRINT_BUF_LEN ];
	register char *s;
	register int t, neg = 0;
 80216d8:	f04f 0900 	mov.w	r9, #0
	register unsigned int u = i;
 80216dc:	683d      	ldr	r5, [r7, #0]
	register unsigned base = apBuf->flags.base;
 80216de:	687b      	ldr	r3, [r7, #4]
 80216e0:	691b      	ldr	r3, [r3, #16]
 80216e2:	461e      	mov	r6, r3

	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 80216e4:	687a      	ldr	r2, [r7, #4]
 80216e6:	7f93      	ldrb	r3, [r2, #30]
 80216e8:	f043 0302 	orr.w	r3, r3, #2
 80216ec:	7793      	strb	r3, [r2, #30]

	if( i == 0 )
 80216ee:	683b      	ldr	r3, [r7, #0]
 80216f0:	2b00      	cmp	r3, #0
 80216f2:	d10b      	bne.n	802170c <printi+0x40>
	{
		print_buf[ 0 ] = '0';
 80216f4:	2330      	movs	r3, #48	@ 0x30
 80216f6:	733b      	strb	r3, [r7, #12]
		print_buf[ 1 ] = '\0';
 80216f8:	2300      	movs	r3, #0
 80216fa:	737b      	strb	r3, [r7, #13]
		return prints( apBuf, print_buf );
 80216fc:	f107 030c 	add.w	r3, r7, #12
 8021700:	4619      	mov	r1, r3
 8021702:	6878      	ldr	r0, [r7, #4]
 8021704:	f7ff ff3a 	bl	802157c <prints>
 8021708:	4603      	mov	r3, r0
 802170a:	e067      	b.n	80217dc <printi+0x110>
	}

	if( ( apBuf->flags.isSigned == pdTRUE ) && ( base == 10 ) && ( i < 0 ) )
 802170c:	687b      	ldr	r3, [r7, #4]
 802170e:	7f9b      	ldrb	r3, [r3, #30]
 8021710:	f003 0301 	and.w	r3, r3, #1
 8021714:	b2db      	uxtb	r3, r3
 8021716:	2b00      	cmp	r3, #0
 8021718:	d009      	beq.n	802172e <printi+0x62>
 802171a:	2e0a      	cmp	r6, #10
 802171c:	d107      	bne.n	802172e <printi+0x62>
 802171e:	683b      	ldr	r3, [r7, #0]
 8021720:	2b00      	cmp	r3, #0
 8021722:	da04      	bge.n	802172e <printi+0x62>
	{
		neg = 1;
 8021724:	f04f 0901 	mov.w	r9, #1
		u = -i;
 8021728:	683b      	ldr	r3, [r7, #0]
 802172a:	425b      	negs	r3, r3
 802172c:	461d      	mov	r5, r3
	}

	s = print_buf + sizeof print_buf - 1;
 802172e:	f107 040c 	add.w	r4, r7, #12
 8021732:	340b      	adds	r4, #11

	*s = '\0';
 8021734:	2300      	movs	r3, #0
 8021736:	7023      	strb	r3, [r4, #0]
	switch( base )
 8021738:	2e10      	cmp	r6, #16
 802173a:	d017      	beq.n	802176c <printi+0xa0>
 802173c:	2e10      	cmp	r6, #16
 802173e:	d829      	bhi.n	8021794 <printi+0xc8>
 8021740:	2e08      	cmp	r6, #8
 8021742:	d024      	beq.n	802178e <printi+0xc2>
 8021744:	2e0a      	cmp	r6, #10
 8021746:	d022      	beq.n	802178e <printi+0xc2>
 8021748:	e024      	b.n	8021794 <printi+0xc8>
	{
	case 16:
		while( u != 0 )
		{
			t = u & 0xF;
 802174a:	462b      	mov	r3, r5
 802174c:	f003 080f 	and.w	r8, r3, #15
			if( t >= 10 )
 8021750:	f1b8 0f09 	cmp.w	r8, #9
 8021754:	dd03      	ble.n	802175e <printi+0x92>
			{
				t += apBuf->flags.letBase - '0' - 10;
 8021756:	687b      	ldr	r3, [r7, #4]
 8021758:	7f5b      	ldrb	r3, [r3, #29]
 802175a:	3b3a      	subs	r3, #58	@ 0x3a
 802175c:	4498      	add	r8, r3
			}
			*( --s ) = t + '0';
 802175e:	fa5f f388 	uxtb.w	r3, r8
 8021762:	3c01      	subs	r4, #1
 8021764:	3330      	adds	r3, #48	@ 0x30
 8021766:	b2db      	uxtb	r3, r3
 8021768:	7023      	strb	r3, [r4, #0]
			u >>= 4;
 802176a:	092d      	lsrs	r5, r5, #4
		while( u != 0 )
 802176c:	2d00      	cmp	r5, #0
 802176e:	d1ec      	bne.n	802174a <printi+0x7e>
		}
		break;
 8021770:	e010      	b.n	8021794 <printi+0xc8>
	case 8:
	case 10:
		/* GCC compiles very efficient */
		while( u )
		{
			t = u % base;
 8021772:	fbb5 f3f6 	udiv	r3, r5, r6
 8021776:	fb06 f303 	mul.w	r3, r6, r3
 802177a:	1aeb      	subs	r3, r5, r3
 802177c:	4698      	mov	r8, r3
			*( --s ) = t + '0';
 802177e:	fa5f f388 	uxtb.w	r3, r8
 8021782:	3c01      	subs	r4, #1
 8021784:	3330      	adds	r3, #48	@ 0x30
 8021786:	b2db      	uxtb	r3, r3
 8021788:	7023      	strb	r3, [r4, #0]
			u /= base;
 802178a:	fbb5 f5f6 	udiv	r5, r5, r6
		while( u )
 802178e:	2d00      	cmp	r5, #0
 8021790:	d1ef      	bne.n	8021772 <printi+0xa6>
		}
		break;
 8021792:	bf00      	nop
		}
		break;
*/
	}

	if( neg != 0 )
 8021794:	f1b9 0f00 	cmp.w	r9, #0
 8021798:	d01b      	beq.n	80217d2 <printi+0x106>
	{
		if( apBuf->flags.width && (apBuf->flags.pad & PAD_ZERO ) )
 802179a:	687b      	ldr	r3, [r7, #4]
 802179c:	695b      	ldr	r3, [r3, #20]
 802179e:	2b00      	cmp	r3, #0
 80217a0:	d014      	beq.n	80217cc <printi+0x100>
 80217a2:	687b      	ldr	r3, [r7, #4]
 80217a4:	7f1b      	ldrb	r3, [r3, #28]
 80217a6:	f003 0302 	and.w	r3, r3, #2
 80217aa:	2b00      	cmp	r3, #0
 80217ac:	d00e      	beq.n	80217cc <printi+0x100>
		{
			if( strbuf_printchar( apBuf, '-' ) == 0 )
 80217ae:	212d      	movs	r1, #45	@ 0x2d
 80217b0:	6878      	ldr	r0, [r7, #4]
 80217b2:	f7ff fe5c 	bl	802146e <strbuf_printchar>
 80217b6:	4603      	mov	r3, r0
 80217b8:	2b00      	cmp	r3, #0
 80217ba:	d101      	bne.n	80217c0 <printi+0xf4>
			{
				return pdFALSE;
 80217bc:	2300      	movs	r3, #0
 80217be:	e00d      	b.n	80217dc <printi+0x110>
			}
			--apBuf->flags.width;
 80217c0:	687b      	ldr	r3, [r7, #4]
 80217c2:	695b      	ldr	r3, [r3, #20]
 80217c4:	1e5a      	subs	r2, r3, #1
 80217c6:	687b      	ldr	r3, [r7, #4]
 80217c8:	615a      	str	r2, [r3, #20]
 80217ca:	e002      	b.n	80217d2 <printi+0x106>
		}
		else
		{
			*( --s ) = '-';
 80217cc:	3c01      	subs	r4, #1
 80217ce:	232d      	movs	r3, #45	@ 0x2d
 80217d0:	7023      	strb	r3, [r4, #0]
		}
	}

	return prints( apBuf, s );
 80217d2:	4621      	mov	r1, r4
 80217d4:	6878      	ldr	r0, [r7, #4]
 80217d6:	f7ff fed1 	bl	802157c <prints>
 80217da:	4603      	mov	r3, r0
}
 80217dc:	4618      	mov	r0, r3
 80217de:	371c      	adds	r7, #28
 80217e0:	46bd      	mov	sp, r7
 80217e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080217e8 <printIp>:
/*-----------------------------------------------------------*/

static BaseType_t printIp(struct SStringBuf *apBuf, unsigned i )
{
 80217e8:	b590      	push	{r4, r7, lr}
 80217ea:	b089      	sub	sp, #36	@ 0x24
 80217ec:	af02      	add	r7, sp, #8
 80217ee:	6078      	str	r0, [r7, #4]
 80217f0:	6039      	str	r1, [r7, #0]
	char print_buf[16];

	sprintf( print_buf, "%u.%u.%u.%u",
 80217f2:	683b      	ldr	r3, [r7, #0]
 80217f4:	0e19      	lsrs	r1, r3, #24
		i >> 24,
		( i >> 16 ) & 0xff,
 80217f6:	683b      	ldr	r3, [r7, #0]
 80217f8:	0c1b      	lsrs	r3, r3, #16
	sprintf( print_buf, "%u.%u.%u.%u",
 80217fa:	b2dc      	uxtb	r4, r3
		( i >> 8 ) & 0xff,
 80217fc:	683b      	ldr	r3, [r7, #0]
 80217fe:	0a1b      	lsrs	r3, r3, #8
	sprintf( print_buf, "%u.%u.%u.%u",
 8021800:	b2db      	uxtb	r3, r3
 8021802:	683a      	ldr	r2, [r7, #0]
 8021804:	b2d2      	uxtb	r2, r2
 8021806:	f107 0008 	add.w	r0, r7, #8
 802180a:	9201      	str	r2, [sp, #4]
 802180c:	9300      	str	r3, [sp, #0]
 802180e:	4623      	mov	r3, r4
 8021810:	460a      	mov	r2, r1
 8021812:	4909      	ldr	r1, [pc, #36]	@ (8021838 <printIp+0x50>)
 8021814:	f000 fa81 	bl	8021d1a <sprintf>
		i & 0xff );
	apBuf->flags.isNumber = pdTRUE;	/* Parameter for prints */
 8021818:	687a      	ldr	r2, [r7, #4]
 802181a:	7f93      	ldrb	r3, [r2, #30]
 802181c:	f043 0302 	orr.w	r3, r3, #2
 8021820:	7793      	strb	r3, [r2, #30]
	prints( apBuf, print_buf );
 8021822:	f107 0308 	add.w	r3, r7, #8
 8021826:	4619      	mov	r1, r3
 8021828:	6878      	ldr	r0, [r7, #4]
 802182a:	f7ff fea7 	bl	802157c <prints>

	return pdTRUE;
 802182e:	2301      	movs	r3, #1
}
 8021830:	4618      	mov	r0, r3
 8021832:	371c      	adds	r7, #28
 8021834:	46bd      	mov	sp, r7
 8021836:	bd90      	pop	{r4, r7, pc}
 8021838:	08026270 	.word	0x08026270

0802183c <usNetToHost>:
/*-----------------------------------------------------------*/

static uint16_t usNetToHost( uint16_t usValue )
{
 802183c:	b480      	push	{r7}
 802183e:	b083      	sub	sp, #12
 8021840:	af00      	add	r7, sp, #0
 8021842:	4603      	mov	r3, r0
 8021844:	80fb      	strh	r3, [r7, #6]
	if( u32.ulWords[ 0 ] == 0x00010203 )
 8021846:	4a0b      	ldr	r2, [pc, #44]	@ (8021874 <usNetToHost+0x38>)
 8021848:	4b0b      	ldr	r3, [pc, #44]	@ (8021878 <usNetToHost+0x3c>)
 802184a:	429a      	cmp	r2, r3
 802184c:	d101      	bne.n	8021852 <usNetToHost+0x16>
	{
		return usValue;
 802184e:	88fb      	ldrh	r3, [r7, #6]
 8021850:	e009      	b.n	8021866 <usNetToHost+0x2a>
	}
	else
	{
		return ( usValue << 8 ) | ( usValue >> 8 );
 8021852:	88fb      	ldrh	r3, [r7, #6]
 8021854:	021b      	lsls	r3, r3, #8
 8021856:	b21a      	sxth	r2, r3
 8021858:	88fb      	ldrh	r3, [r7, #6]
 802185a:	0a1b      	lsrs	r3, r3, #8
 802185c:	b29b      	uxth	r3, r3
 802185e:	b21b      	sxth	r3, r3
 8021860:	4313      	orrs	r3, r2
 8021862:	b21b      	sxth	r3, r3
 8021864:	b29b      	uxth	r3, r3
	}
}
 8021866:	4618      	mov	r0, r3
 8021868:	370c      	adds	r7, #12
 802186a:	46bd      	mov	sp, r7
 802186c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021870:	4770      	bx	lr
 8021872:	bf00      	nop
 8021874:	03020100 	.word	0x03020100
 8021878:	00010203 	.word	0x00010203

0802187c <printIPv6>:

static BaseType_t printIPv6( struct SStringBuf *apBuf, uint16_t *pusAddress )
{
 802187c:	b580      	push	{r7, lr}
 802187e:	b088      	sub	sp, #32
 8021880:	af00      	add	r7, sp, #0
 8021882:	6078      	str	r0, [r7, #4]
 8021884:	6039      	str	r1, [r7, #0]
	int iIndex;
	int iZeroStart = -1;
 8021886:	f04f 33ff 	mov.w	r3, #4294967295
 802188a:	61bb      	str	r3, [r7, #24]
	int iZeroLength = 0;
 802188c:	2300      	movs	r3, #0
 802188e:	617b      	str	r3, [r7, #20]
	int iCurStart = 0;
 8021890:	2300      	movs	r3, #0
 8021892:	613b      	str	r3, [r7, #16]
	int iCurLength = 0;
 8021894:	2300      	movs	r3, #0
 8021896:	60fb      	str	r3, [r7, #12]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 8021898:	2300      	movs	r3, #0
 802189a:	61fb      	str	r3, [r7, #28]
 802189c:	e026      	b.n	80218ec <printIPv6+0x70>
	{
	uint16_t usValue = pusAddress[ iIndex ];
 802189e:	69fb      	ldr	r3, [r7, #28]
 80218a0:	005b      	lsls	r3, r3, #1
 80218a2:	683a      	ldr	r2, [r7, #0]
 80218a4:	4413      	add	r3, r2
 80218a6:	881b      	ldrh	r3, [r3, #0]
 80218a8:	817b      	strh	r3, [r7, #10]
		if( usValue == 0 )
 80218aa:	897b      	ldrh	r3, [r7, #10]
 80218ac:	2b00      	cmp	r3, #0
 80218ae:	d107      	bne.n	80218c0 <printIPv6+0x44>
		{
			if( iCurLength == 0 )
 80218b0:	68fb      	ldr	r3, [r7, #12]
 80218b2:	2b00      	cmp	r3, #0
 80218b4:	d101      	bne.n	80218ba <printIPv6+0x3e>
			{
				iCurStart = iIndex;
 80218b6:	69fb      	ldr	r3, [r7, #28]
 80218b8:	613b      	str	r3, [r7, #16]
			}
			iCurLength++;
 80218ba:	68fb      	ldr	r3, [r7, #12]
 80218bc:	3301      	adds	r3, #1
 80218be:	60fb      	str	r3, [r7, #12]
		}
		if( ( usValue != 0 ) || ( iIndex == 7 ) )
 80218c0:	897b      	ldrh	r3, [r7, #10]
 80218c2:	2b00      	cmp	r3, #0
 80218c4:	d102      	bne.n	80218cc <printIPv6+0x50>
 80218c6:	69fb      	ldr	r3, [r7, #28]
 80218c8:	2b07      	cmp	r3, #7
 80218ca:	d10c      	bne.n	80218e6 <printIPv6+0x6a>
		{
			if( ( iCurLength > 1 ) && ( iZeroLength < iCurLength ) )
 80218cc:	68fb      	ldr	r3, [r7, #12]
 80218ce:	2b01      	cmp	r3, #1
 80218d0:	dd07      	ble.n	80218e2 <printIPv6+0x66>
 80218d2:	697a      	ldr	r2, [r7, #20]
 80218d4:	68fb      	ldr	r3, [r7, #12]
 80218d6:	429a      	cmp	r2, r3
 80218d8:	da03      	bge.n	80218e2 <printIPv6+0x66>
			{
				iZeroLength = iCurLength;
 80218da:	68fb      	ldr	r3, [r7, #12]
 80218dc:	617b      	str	r3, [r7, #20]
				iZeroStart = iCurStart;
 80218de:	693b      	ldr	r3, [r7, #16]
 80218e0:	61bb      	str	r3, [r7, #24]
			}
			iCurLength = 0;
 80218e2:	2300      	movs	r3, #0
 80218e4:	60fb      	str	r3, [r7, #12]
	for( iIndex = 0; iIndex < 8; iIndex++ )
 80218e6:	69fb      	ldr	r3, [r7, #28]
 80218e8:	3301      	adds	r3, #1
 80218ea:	61fb      	str	r3, [r7, #28]
 80218ec:	69fb      	ldr	r3, [r7, #28]
 80218ee:	2b07      	cmp	r3, #7
 80218f0:	ddd5      	ble.n	802189e <printIPv6+0x22>
		}
	}

	apBuf->flags.base = 16;
 80218f2:	687b      	ldr	r3, [r7, #4]
 80218f4:	2210      	movs	r2, #16
 80218f6:	611a      	str	r2, [r3, #16]
	apBuf->flags.letBase = 'a'; /* use lower-case letters 'a' to 'f' */
 80218f8:	687b      	ldr	r3, [r7, #4]
 80218fa:	2261      	movs	r2, #97	@ 0x61
 80218fc:	775a      	strb	r2, [r3, #29]

	for( iIndex = 0; iIndex < 8; iIndex++ )
 80218fe:	2300      	movs	r3, #0
 8021900:	61fb      	str	r3, [r7, #28]
 8021902:	e02b      	b.n	802195c <printIPv6+0xe0>
	{
		if( iIndex == iZeroStart )
 8021904:	69fa      	ldr	r2, [r7, #28]
 8021906:	69bb      	ldr	r3, [r7, #24]
 8021908:	429a      	cmp	r2, r3
 802190a:	d110      	bne.n	802192e <printIPv6+0xb2>
		{
			iIndex += iZeroLength - 1;
 802190c:	697b      	ldr	r3, [r7, #20]
 802190e:	3b01      	subs	r3, #1
 8021910:	69fa      	ldr	r2, [r7, #28]
 8021912:	4413      	add	r3, r2
 8021914:	61fb      	str	r3, [r7, #28]
			strbuf_printchar( apBuf, ':' );
 8021916:	213a      	movs	r1, #58	@ 0x3a
 8021918:	6878      	ldr	r0, [r7, #4]
 802191a:	f7ff fda8 	bl	802146e <strbuf_printchar>
			if( iIndex == 7 )
 802191e:	69fb      	ldr	r3, [r7, #28]
 8021920:	2b07      	cmp	r3, #7
 8021922:	d118      	bne.n	8021956 <printIPv6+0xda>
			{
				strbuf_printchar( apBuf, ':' );
 8021924:	213a      	movs	r1, #58	@ 0x3a
 8021926:	6878      	ldr	r0, [r7, #4]
 8021928:	f7ff fda1 	bl	802146e <strbuf_printchar>
 802192c:	e013      	b.n	8021956 <printIPv6+0xda>
			}
		}
		else
		{
			if( iIndex > 0 )
 802192e:	69fb      	ldr	r3, [r7, #28]
 8021930:	2b00      	cmp	r3, #0
 8021932:	dd03      	ble.n	802193c <printIPv6+0xc0>
			{
				strbuf_printchar( apBuf, ':' );
 8021934:	213a      	movs	r1, #58	@ 0x3a
 8021936:	6878      	ldr	r0, [r7, #4]
 8021938:	f7ff fd99 	bl	802146e <strbuf_printchar>
			}
			printi( apBuf, ( int ) ( ( uint32_t ) usNetToHost( pusAddress[ iIndex ] ) ) );
 802193c:	69fb      	ldr	r3, [r7, #28]
 802193e:	005b      	lsls	r3, r3, #1
 8021940:	683a      	ldr	r2, [r7, #0]
 8021942:	4413      	add	r3, r2
 8021944:	881b      	ldrh	r3, [r3, #0]
 8021946:	4618      	mov	r0, r3
 8021948:	f7ff ff78 	bl	802183c <usNetToHost>
 802194c:	4603      	mov	r3, r0
 802194e:	4619      	mov	r1, r3
 8021950:	6878      	ldr	r0, [r7, #4]
 8021952:	f7ff febb 	bl	80216cc <printi>
	for( iIndex = 0; iIndex < 8; iIndex++ )
 8021956:	69fb      	ldr	r3, [r7, #28]
 8021958:	3301      	adds	r3, #1
 802195a:	61fb      	str	r3, [r7, #28]
 802195c:	69fb      	ldr	r3, [r7, #28]
 802195e:	2b07      	cmp	r3, #7
 8021960:	ddd0      	ble.n	8021904 <printIPv6+0x88>
		}
	}

	return pdTRUE;
 8021962:	2301      	movs	r3, #1
}
 8021964:	4618      	mov	r0, r3
 8021966:	3720      	adds	r7, #32
 8021968:	46bd      	mov	sp, r7
 802196a:	bd80      	pop	{r7, pc}

0802196c <tiny_print>:
/*-----------------------------------------------------------*/

static void tiny_print( struct SStringBuf *apBuf, const char *format, va_list args )
{
 802196c:	b590      	push	{r4, r7, lr}
 802196e:	b087      	sub	sp, #28
 8021970:	af00      	add	r7, sp, #0
 8021972:	60f8      	str	r0, [r7, #12]
 8021974:	60b9      	str	r1, [r7, #8]
 8021976:	607a      	str	r2, [r7, #4]
	char scr[2];

	for( ; ; )
	{
		int ch = *( format++ );
 8021978:	68bb      	ldr	r3, [r7, #8]
 802197a:	1c5a      	adds	r2, r3, #1
 802197c:	60ba      	str	r2, [r7, #8]
 802197e:	781b      	ldrb	r3, [r3, #0]
 8021980:	617b      	str	r3, [r7, #20]

		if( ch != '%' )
 8021982:	697b      	ldr	r3, [r7, #20]
 8021984:	2b25      	cmp	r3, #37	@ 0x25
 8021986:	d00f      	beq.n	80219a8 <tiny_print+0x3c>
		{
			do
			{
				/* Put the most like flow in a small loop */
				if( strbuf_printchar_inline( apBuf, ch ) == 0 )
 8021988:	6979      	ldr	r1, [r7, #20]
 802198a:	68f8      	ldr	r0, [r7, #12]
 802198c:	f7ff fdad 	bl	80214ea <strbuf_printchar_inline>
 8021990:	4603      	mov	r3, r0
 8021992:	2b00      	cmp	r3, #0
 8021994:	f000 817e 	beq.w	8021c94 <tiny_print+0x328>
				{
					return;
				}
				ch = *( format++ );
 8021998:	68bb      	ldr	r3, [r7, #8]
 802199a:	1c5a      	adds	r2, r3, #1
 802199c:	60ba      	str	r2, [r7, #8]
 802199e:	781b      	ldrb	r3, [r3, #0]
 80219a0:	617b      	str	r3, [r7, #20]
			} while( ch != '%' );
 80219a2:	697b      	ldr	r3, [r7, #20]
 80219a4:	2b25      	cmp	r3, #37	@ 0x25
 80219a6:	d1ef      	bne.n	8021988 <tiny_print+0x1c>
		}
		ch = *( format++ );
 80219a8:	68bb      	ldr	r3, [r7, #8]
 80219aa:	1c5a      	adds	r2, r3, #1
 80219ac:	60ba      	str	r2, [r7, #8]
 80219ae:	781b      	ldrb	r3, [r3, #0]
 80219b0:	617b      	str	r3, [r7, #20]
		/* Now ch has character after '%', format pointing to next */

		if( ch == '\0' )
 80219b2:	697b      	ldr	r3, [r7, #20]
 80219b4:	2b00      	cmp	r3, #0
 80219b6:	f000 8165 	beq.w	8021c84 <tiny_print+0x318>
		{
			break;
		}
		if( ch == '%' )
 80219ba:	697b      	ldr	r3, [r7, #20]
 80219bc:	2b25      	cmp	r3, #37	@ 0x25
 80219be:	d108      	bne.n	80219d2 <tiny_print+0x66>
		{
			if( strbuf_printchar( apBuf, ch ) == 0 )
 80219c0:	6979      	ldr	r1, [r7, #20]
 80219c2:	68f8      	ldr	r0, [r7, #12]
 80219c4:	f7ff fd53 	bl	802146e <strbuf_printchar>
 80219c8:	4603      	mov	r3, r0
 80219ca:	2b00      	cmp	r3, #0
 80219cc:	f040 814e 	bne.w	8021c6c <tiny_print+0x300>
			{
				return;
 80219d0:	e161      	b.n	8021c96 <tiny_print+0x32a>
			}
			continue;
		}
		memset( &apBuf->flags, '\0', sizeof apBuf->flags );
 80219d2:	68fb      	ldr	r3, [r7, #12]
 80219d4:	3310      	adds	r3, #16
 80219d6:	2210      	movs	r2, #16
 80219d8:	2100      	movs	r1, #0
 80219da:	4618      	mov	r0, r3
 80219dc:	f7ff fc79 	bl	80212d2 <memset>

		if( ch == '-' )
 80219e0:	697b      	ldr	r3, [r7, #20]
 80219e2:	2b2d      	cmp	r3, #45	@ 0x2d
 80219e4:	d114      	bne.n	8021a10 <tiny_print+0xa4>
		{
			ch = *( format++ );
 80219e6:	68bb      	ldr	r3, [r7, #8]
 80219e8:	1c5a      	adds	r2, r3, #1
 80219ea:	60ba      	str	r2, [r7, #8]
 80219ec:	781b      	ldrb	r3, [r3, #0]
 80219ee:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad = PAD_RIGHT;
 80219f0:	68fb      	ldr	r3, [r7, #12]
 80219f2:	2201      	movs	r2, #1
 80219f4:	771a      	strb	r2, [r3, #28]
		}
		while( ch == '0' )
 80219f6:	e00b      	b.n	8021a10 <tiny_print+0xa4>
		{
			ch = *( format++ );
 80219f8:	68bb      	ldr	r3, [r7, #8]
 80219fa:	1c5a      	adds	r2, r3, #1
 80219fc:	60ba      	str	r2, [r7, #8]
 80219fe:	781b      	ldrb	r3, [r3, #0]
 8021a00:	617b      	str	r3, [r7, #20]
			apBuf->flags.pad |= PAD_ZERO;
 8021a02:	68fb      	ldr	r3, [r7, #12]
 8021a04:	7f1b      	ldrb	r3, [r3, #28]
 8021a06:	f043 0302 	orr.w	r3, r3, #2
 8021a0a:	b2da      	uxtb	r2, r3
 8021a0c:	68fb      	ldr	r3, [r7, #12]
 8021a0e:	771a      	strb	r2, [r3, #28]
		while( ch == '0' )
 8021a10:	697b      	ldr	r3, [r7, #20]
 8021a12:	2b30      	cmp	r3, #48	@ 0x30
 8021a14:	d0f0      	beq.n	80219f8 <tiny_print+0x8c>
		}
		if( ch == '*' )
 8021a16:	697b      	ldr	r3, [r7, #20]
 8021a18:	2b2a      	cmp	r3, #42	@ 0x2a
 8021a1a:	d120      	bne.n	8021a5e <tiny_print+0xf2>
		{
			ch = *( format++ );
 8021a1c:	68bb      	ldr	r3, [r7, #8]
 8021a1e:	1c5a      	adds	r2, r3, #1
 8021a20:	60ba      	str	r2, [r7, #8]
 8021a22:	781b      	ldrb	r3, [r3, #0]
 8021a24:	617b      	str	r3, [r7, #20]
			apBuf->flags.width = va_arg( args, int );
 8021a26:	687b      	ldr	r3, [r7, #4]
 8021a28:	1d1a      	adds	r2, r3, #4
 8021a2a:	607a      	str	r2, [r7, #4]
 8021a2c:	681a      	ldr	r2, [r3, #0]
 8021a2e:	68fb      	ldr	r3, [r7, #12]
 8021a30:	615a      	str	r2, [r3, #20]
 8021a32:	e01a      	b.n	8021a6a <tiny_print+0xfe>
		}
		else
		{
			while( ch >= '0' && ch <= '9' )
			{
				apBuf->flags.width *= 10;
 8021a34:	68fb      	ldr	r3, [r7, #12]
 8021a36:	695a      	ldr	r2, [r3, #20]
 8021a38:	4613      	mov	r3, r2
 8021a3a:	009b      	lsls	r3, r3, #2
 8021a3c:	4413      	add	r3, r2
 8021a3e:	005b      	lsls	r3, r3, #1
 8021a40:	461a      	mov	r2, r3
 8021a42:	68fb      	ldr	r3, [r7, #12]
 8021a44:	615a      	str	r2, [r3, #20]
				apBuf->flags.width += ch - '0';
 8021a46:	68fb      	ldr	r3, [r7, #12]
 8021a48:	695a      	ldr	r2, [r3, #20]
 8021a4a:	697b      	ldr	r3, [r7, #20]
 8021a4c:	3b30      	subs	r3, #48	@ 0x30
 8021a4e:	441a      	add	r2, r3
 8021a50:	68fb      	ldr	r3, [r7, #12]
 8021a52:	615a      	str	r2, [r3, #20]
				ch = *( format++ );
 8021a54:	68bb      	ldr	r3, [r7, #8]
 8021a56:	1c5a      	adds	r2, r3, #1
 8021a58:	60ba      	str	r2, [r7, #8]
 8021a5a:	781b      	ldrb	r3, [r3, #0]
 8021a5c:	617b      	str	r3, [r7, #20]
			while( ch >= '0' && ch <= '9' )
 8021a5e:	697b      	ldr	r3, [r7, #20]
 8021a60:	2b2f      	cmp	r3, #47	@ 0x2f
 8021a62:	dd02      	ble.n	8021a6a <tiny_print+0xfe>
 8021a64:	697b      	ldr	r3, [r7, #20]
 8021a66:	2b39      	cmp	r3, #57	@ 0x39
 8021a68:	dde4      	ble.n	8021a34 <tiny_print+0xc8>
			}
		}
		if( ch == '.' )
 8021a6a:	697b      	ldr	r3, [r7, #20]
 8021a6c:	2b2e      	cmp	r3, #46	@ 0x2e
 8021a6e:	d12e      	bne.n	8021ace <tiny_print+0x162>
		{
			ch = *( format++ );
 8021a70:	68bb      	ldr	r3, [r7, #8]
 8021a72:	1c5a      	adds	r2, r3, #1
 8021a74:	60ba      	str	r2, [r7, #8]
 8021a76:	781b      	ldrb	r3, [r3, #0]
 8021a78:	617b      	str	r3, [r7, #20]
			if( ch == '*' )
 8021a7a:	697b      	ldr	r3, [r7, #20]
 8021a7c:	2b2a      	cmp	r3, #42	@ 0x2a
 8021a7e:	d120      	bne.n	8021ac2 <tiny_print+0x156>
			{
				apBuf->flags.printLimit = va_arg( args, int );
 8021a80:	687b      	ldr	r3, [r7, #4]
 8021a82:	1d1a      	adds	r2, r3, #4
 8021a84:	607a      	str	r2, [r7, #4]
 8021a86:	681a      	ldr	r2, [r3, #0]
 8021a88:	68fb      	ldr	r3, [r7, #12]
 8021a8a:	619a      	str	r2, [r3, #24]
				ch = *( format++ );
 8021a8c:	68bb      	ldr	r3, [r7, #8]
 8021a8e:	1c5a      	adds	r2, r3, #1
 8021a90:	60ba      	str	r2, [r7, #8]
 8021a92:	781b      	ldrb	r3, [r3, #0]
 8021a94:	617b      	str	r3, [r7, #20]
 8021a96:	e01a      	b.n	8021ace <tiny_print+0x162>
			}
			else
			{
				while( ch >= '0' && ch <= '9' )
				{
					apBuf->flags.printLimit *= 10;
 8021a98:	68fb      	ldr	r3, [r7, #12]
 8021a9a:	699a      	ldr	r2, [r3, #24]
 8021a9c:	4613      	mov	r3, r2
 8021a9e:	009b      	lsls	r3, r3, #2
 8021aa0:	4413      	add	r3, r2
 8021aa2:	005b      	lsls	r3, r3, #1
 8021aa4:	461a      	mov	r2, r3
 8021aa6:	68fb      	ldr	r3, [r7, #12]
 8021aa8:	619a      	str	r2, [r3, #24]
					apBuf->flags.printLimit += ch - '0';
 8021aaa:	68fb      	ldr	r3, [r7, #12]
 8021aac:	699a      	ldr	r2, [r3, #24]
 8021aae:	697b      	ldr	r3, [r7, #20]
 8021ab0:	3b30      	subs	r3, #48	@ 0x30
 8021ab2:	441a      	add	r2, r3
 8021ab4:	68fb      	ldr	r3, [r7, #12]
 8021ab6:	619a      	str	r2, [r3, #24]
					ch = *( format++ );
 8021ab8:	68bb      	ldr	r3, [r7, #8]
 8021aba:	1c5a      	adds	r2, r3, #1
 8021abc:	60ba      	str	r2, [r7, #8]
 8021abe:	781b      	ldrb	r3, [r3, #0]
 8021ac0:	617b      	str	r3, [r7, #20]
				while( ch >= '0' && ch <= '9' )
 8021ac2:	697b      	ldr	r3, [r7, #20]
 8021ac4:	2b2f      	cmp	r3, #47	@ 0x2f
 8021ac6:	dd02      	ble.n	8021ace <tiny_print+0x162>
 8021ac8:	697b      	ldr	r3, [r7, #20]
 8021aca:	2b39      	cmp	r3, #57	@ 0x39
 8021acc:	dde4      	ble.n	8021a98 <tiny_print+0x12c>
				}
			}
		}
		if( apBuf->flags.printLimit == 0 )
 8021ace:	68fb      	ldr	r3, [r7, #12]
 8021ad0:	699b      	ldr	r3, [r3, #24]
 8021ad2:	2b00      	cmp	r3, #0
 8021ad4:	d104      	bne.n	8021ae0 <tiny_print+0x174>
		{
			apBuf->flags.printLimit--;  /* -1: make it unlimited */
 8021ad6:	68fb      	ldr	r3, [r7, #12]
 8021ad8:	699b      	ldr	r3, [r3, #24]
 8021ada:	1e5a      	subs	r2, r3, #1
 8021adc:	68fb      	ldr	r3, [r7, #12]
 8021ade:	619a      	str	r2, [r3, #24]
		}
		if( ch == 'p' )
 8021ae0:	697b      	ldr	r3, [r7, #20]
 8021ae2:	2b70      	cmp	r3, #112	@ 0x70
 8021ae4:	d118      	bne.n	8021b18 <tiny_print+0x1ac>
		{
			if( format[0] == 'i' && format[1] == 'p' )
 8021ae6:	68bb      	ldr	r3, [r7, #8]
 8021ae8:	781b      	ldrb	r3, [r3, #0]
 8021aea:	2b69      	cmp	r3, #105	@ 0x69
 8021aec:	d114      	bne.n	8021b18 <tiny_print+0x1ac>
 8021aee:	68bb      	ldr	r3, [r7, #8]
 8021af0:	3301      	adds	r3, #1
 8021af2:	781b      	ldrb	r3, [r3, #0]
 8021af4:	2b70      	cmp	r3, #112	@ 0x70
 8021af6:	d10f      	bne.n	8021b18 <tiny_print+0x1ac>
			{
				format += 2;	/* eat the "pi" of "pip" */
 8021af8:	68bb      	ldr	r3, [r7, #8]
 8021afa:	3302      	adds	r3, #2
 8021afc:	60bb      	str	r3, [r7, #8]
				/* Print a IPv6 address */
				if( printIPv6( apBuf, va_arg( args, uint16_t* ) ) == 0 )
 8021afe:	687b      	ldr	r3, [r7, #4]
 8021b00:	1d1a      	adds	r2, r3, #4
 8021b02:	607a      	str	r2, [r7, #4]
 8021b04:	681b      	ldr	r3, [r3, #0]
 8021b06:	4619      	mov	r1, r3
 8021b08:	68f8      	ldr	r0, [r7, #12]
 8021b0a:	f7ff feb7 	bl	802187c <printIPv6>
 8021b0e:	4603      	mov	r3, r0
 8021b10:	2b00      	cmp	r3, #0
 8021b12:	f040 80ad 	bne.w	8021c70 <tiny_print+0x304>
				{
					break;
 8021b16:	e0b8      	b.n	8021c8a <tiny_print+0x31e>
				}
				continue;
			}
		}
		if( ch == 's' )
 8021b18:	697b      	ldr	r3, [r7, #20]
 8021b1a:	2b73      	cmp	r3, #115	@ 0x73
 8021b1c:	d112      	bne.n	8021b44 <tiny_print+0x1d8>
		{
			register char *s = ( char * )va_arg( args, int );
 8021b1e:	687b      	ldr	r3, [r7, #4]
 8021b20:	1d1a      	adds	r2, r3, #4
 8021b22:	607a      	str	r2, [r7, #4]
 8021b24:	681b      	ldr	r3, [r3, #0]
 8021b26:	461c      	mov	r4, r3
			if( prints( apBuf, s ? s : "(null)" ) == 0 )
 8021b28:	2c00      	cmp	r4, #0
 8021b2a:	d001      	beq.n	8021b30 <tiny_print+0x1c4>
 8021b2c:	4623      	mov	r3, r4
 8021b2e:	e000      	b.n	8021b32 <tiny_print+0x1c6>
 8021b30:	4b5a      	ldr	r3, [pc, #360]	@ (8021c9c <tiny_print+0x330>)
 8021b32:	4619      	mov	r1, r3
 8021b34:	68f8      	ldr	r0, [r7, #12]
 8021b36:	f7ff fd21 	bl	802157c <prints>
 8021b3a:	4603      	mov	r3, r0
 8021b3c:	2b00      	cmp	r3, #0
 8021b3e:	f040 8099 	bne.w	8021c74 <tiny_print+0x308>
			{
				break;
 8021b42:	e0a2      	b.n	8021c8a <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'c' )
 8021b44:	697b      	ldr	r3, [r7, #20]
 8021b46:	2b63      	cmp	r3, #99	@ 0x63
 8021b48:	d10f      	bne.n	8021b6a <tiny_print+0x1fe>
		{
			/* char are converted to int then pushed on the stack */
			scr[0] = ( char ) va_arg( args, int );
 8021b4a:	687b      	ldr	r3, [r7, #4]
 8021b4c:	1d1a      	adds	r2, r3, #4
 8021b4e:	607a      	str	r2, [r7, #4]
 8021b50:	681b      	ldr	r3, [r3, #0]
 8021b52:	b2db      	uxtb	r3, r3
 8021b54:	743b      	strb	r3, [r7, #16]

			if( strbuf_printchar( apBuf, scr[0] )  == 0 )
 8021b56:	7c3b      	ldrb	r3, [r7, #16]
 8021b58:	4619      	mov	r1, r3
 8021b5a:	68f8      	ldr	r0, [r7, #12]
 8021b5c:	f7ff fc87 	bl	802146e <strbuf_printchar>
 8021b60:	4603      	mov	r3, r0
 8021b62:	2b00      	cmp	r3, #0
 8021b64:	f040 8088 	bne.w	8021c78 <tiny_print+0x30c>
			{
				return;
 8021b68:	e095      	b.n	8021c96 <tiny_print+0x32a>
			}

			continue;
		}
		if( ch == 'l' )
 8021b6a:	697b      	ldr	r3, [r7, #20]
 8021b6c:	2b6c      	cmp	r3, #108	@ 0x6c
 8021b6e:	d109      	bne.n	8021b84 <tiny_print+0x218>
		{
			ch = *( format++ );
 8021b70:	68bb      	ldr	r3, [r7, #8]
 8021b72:	1c5a      	adds	r2, r3, #1
 8021b74:	60ba      	str	r2, [r7, #8]
 8021b76:	781b      	ldrb	r3, [r3, #0]
 8021b78:	617b      	str	r3, [r7, #20]
			apBuf->flags.long32 = 1;
 8021b7a:	68fa      	ldr	r2, [r7, #12]
 8021b7c:	7f93      	ldrb	r3, [r2, #30]
 8021b7e:	f043 0304 	orr.w	r3, r3, #4
 8021b82:	7793      	strb	r3, [r2, #30]
			/* Makes not difference as u32 == long */
		}
		if( ch == 'L' )
 8021b84:	697b      	ldr	r3, [r7, #20]
 8021b86:	2b4c      	cmp	r3, #76	@ 0x4c
 8021b88:	d109      	bne.n	8021b9e <tiny_print+0x232>
		{
			ch = *( format++ );
 8021b8a:	68bb      	ldr	r3, [r7, #8]
 8021b8c:	1c5a      	adds	r2, r3, #1
 8021b8e:	60ba      	str	r2, [r7, #8]
 8021b90:	781b      	ldrb	r3, [r3, #0]
 8021b92:	617b      	str	r3, [r7, #20]
			apBuf->flags.long64 = 1;
 8021b94:	68fa      	ldr	r2, [r7, #12]
 8021b96:	7f93      	ldrb	r3, [r2, #30]
 8021b98:	f043 0308 	orr.w	r3, r3, #8
 8021b9c:	7793      	strb	r3, [r2, #30]
			/* Does make a difference */
		}
		apBuf->flags.base = 10;
 8021b9e:	68fb      	ldr	r3, [r7, #12]
 8021ba0:	220a      	movs	r2, #10
 8021ba2:	611a      	str	r2, [r3, #16]
		apBuf->flags.letBase = 'a';
 8021ba4:	68fb      	ldr	r3, [r7, #12]
 8021ba6:	2261      	movs	r2, #97	@ 0x61
 8021ba8:	775a      	strb	r2, [r3, #29]

		if( ch == 'd' || ch == 'u' )
 8021baa:	697b      	ldr	r3, [r7, #20]
 8021bac:	2b64      	cmp	r3, #100	@ 0x64
 8021bae:	d002      	beq.n	8021bb6 <tiny_print+0x24a>
 8021bb0:	697b      	ldr	r3, [r7, #20]
 8021bb2:	2b75      	cmp	r3, #117	@ 0x75
 8021bb4:	d116      	bne.n	8021be4 <tiny_print+0x278>
		{
			apBuf->flags.isSigned = ( ch == 'd' );
 8021bb6:	697b      	ldr	r3, [r7, #20]
 8021bb8:	2b64      	cmp	r3, #100	@ 0x64
 8021bba:	bf0c      	ite	eq
 8021bbc:	2301      	moveq	r3, #1
 8021bbe:	2300      	movne	r3, #0
 8021bc0:	b2d9      	uxtb	r1, r3
 8021bc2:	68fa      	ldr	r2, [r7, #12]
 8021bc4:	7f93      	ldrb	r3, [r2, #30]
 8021bc6:	f361 0300 	bfi	r3, r1, #0, #1
 8021bca:	7793      	strb	r3, [r2, #30]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8021bcc:	687b      	ldr	r3, [r7, #4]
 8021bce:	1d1a      	adds	r2, r3, #4
 8021bd0:	607a      	str	r2, [r7, #4]
 8021bd2:	681b      	ldr	r3, [r3, #0]
 8021bd4:	4619      	mov	r1, r3
 8021bd6:	68f8      	ldr	r0, [r7, #12]
 8021bd8:	f7ff fd78 	bl	80216cc <printi>
 8021bdc:	4603      	mov	r3, r0
 8021bde:	2b00      	cmp	r3, #0
 8021be0:	d14c      	bne.n	8021c7c <tiny_print+0x310>
			{
				break;
 8021be2:	e052      	b.n	8021c8a <tiny_print+0x31e>
			}
			continue;
		}

		apBuf->flags.base = 16;		/* From here all hexadecimal */
 8021be4:	68fb      	ldr	r3, [r7, #12]
 8021be6:	2210      	movs	r2, #16
 8021be8:	611a      	str	r2, [r3, #16]

		if( ch == 'x' && format[0] == 'i' && format[1] == 'p' )
 8021bea:	697b      	ldr	r3, [r7, #20]
 8021bec:	2b78      	cmp	r3, #120	@ 0x78
 8021bee:	d117      	bne.n	8021c20 <tiny_print+0x2b4>
 8021bf0:	68bb      	ldr	r3, [r7, #8]
 8021bf2:	781b      	ldrb	r3, [r3, #0]
 8021bf4:	2b69      	cmp	r3, #105	@ 0x69
 8021bf6:	d113      	bne.n	8021c20 <tiny_print+0x2b4>
 8021bf8:	68bb      	ldr	r3, [r7, #8]
 8021bfa:	3301      	adds	r3, #1
 8021bfc:	781b      	ldrb	r3, [r3, #0]
 8021bfe:	2b70      	cmp	r3, #112	@ 0x70
 8021c00:	d10e      	bne.n	8021c20 <tiny_print+0x2b4>
		{
			format += 2;	/* eat the "xi" of "xip" */
 8021c02:	68bb      	ldr	r3, [r7, #8]
 8021c04:	3302      	adds	r3, #2
 8021c06:	60bb      	str	r3, [r7, #8]
			/* Will use base 10 again */
			if( printIp( apBuf, va_arg( args, int ) ) == 0 )
 8021c08:	687b      	ldr	r3, [r7, #4]
 8021c0a:	1d1a      	adds	r2, r3, #4
 8021c0c:	607a      	str	r2, [r7, #4]
 8021c0e:	681b      	ldr	r3, [r3, #0]
 8021c10:	4619      	mov	r1, r3
 8021c12:	68f8      	ldr	r0, [r7, #12]
 8021c14:	f7ff fde8 	bl	80217e8 <printIp>
 8021c18:	4603      	mov	r3, r0
 8021c1a:	2b00      	cmp	r3, #0
 8021c1c:	d130      	bne.n	8021c80 <tiny_print+0x314>
			{
				break;
 8021c1e:	e034      	b.n	8021c8a <tiny_print+0x31e>
			}
			continue;
		}
		if( ch == 'x' || ch == 'X' || ch == 'p' || ch == 'o' )
 8021c20:	697b      	ldr	r3, [r7, #20]
 8021c22:	2b78      	cmp	r3, #120	@ 0x78
 8021c24:	d009      	beq.n	8021c3a <tiny_print+0x2ce>
 8021c26:	697b      	ldr	r3, [r7, #20]
 8021c28:	2b58      	cmp	r3, #88	@ 0x58
 8021c2a:	d006      	beq.n	8021c3a <tiny_print+0x2ce>
 8021c2c:	697b      	ldr	r3, [r7, #20]
 8021c2e:	2b70      	cmp	r3, #112	@ 0x70
 8021c30:	d003      	beq.n	8021c3a <tiny_print+0x2ce>
 8021c32:	697b      	ldr	r3, [r7, #20]
 8021c34:	2b6f      	cmp	r3, #111	@ 0x6f
 8021c36:	f47f ae9f 	bne.w	8021978 <tiny_print+0xc>
		{
			if( ch == 'X' )
 8021c3a:	697b      	ldr	r3, [r7, #20]
 8021c3c:	2b58      	cmp	r3, #88	@ 0x58
 8021c3e:	d103      	bne.n	8021c48 <tiny_print+0x2dc>
			{
				apBuf->flags.letBase = 'A';
 8021c40:	68fb      	ldr	r3, [r7, #12]
 8021c42:	2241      	movs	r2, #65	@ 0x41
 8021c44:	775a      	strb	r2, [r3, #29]
 8021c46:	e005      	b.n	8021c54 <tiny_print+0x2e8>
			}
			else if( ch == 'o' )
 8021c48:	697b      	ldr	r3, [r7, #20]
 8021c4a:	2b6f      	cmp	r3, #111	@ 0x6f
 8021c4c:	d102      	bne.n	8021c54 <tiny_print+0x2e8>
			{
				apBuf->flags.base = 8;
 8021c4e:	68fb      	ldr	r3, [r7, #12]
 8021c50:	2208      	movs	r2, #8
 8021c52:	611a      	str	r2, [r3, #16]
				{
					break;
				}
			} else
#endif	/* SPRINTF_LONG_LONG */
			if( printi( apBuf, va_arg( args, int ) ) == 0 )
 8021c54:	687b      	ldr	r3, [r7, #4]
 8021c56:	1d1a      	adds	r2, r3, #4
 8021c58:	607a      	str	r2, [r7, #4]
 8021c5a:	681b      	ldr	r3, [r3, #0]
 8021c5c:	4619      	mov	r1, r3
 8021c5e:	68f8      	ldr	r0, [r7, #12]
 8021c60:	f7ff fd34 	bl	80216cc <printi>
 8021c64:	4603      	mov	r3, r0
 8021c66:	2b00      	cmp	r3, #0
 8021c68:	d00e      	beq.n	8021c88 <tiny_print+0x31c>
			{
				break;
			}
			continue;
 8021c6a:	e00a      	b.n	8021c82 <tiny_print+0x316>
			continue;
 8021c6c:	bf00      	nop
 8021c6e:	e683      	b.n	8021978 <tiny_print+0xc>
				continue;
 8021c70:	bf00      	nop
 8021c72:	e681      	b.n	8021978 <tiny_print+0xc>
			continue;
 8021c74:	bf00      	nop
 8021c76:	e67f      	b.n	8021978 <tiny_print+0xc>
			continue;
 8021c78:	bf00      	nop
 8021c7a:	e67d      	b.n	8021978 <tiny_print+0xc>
			continue;
 8021c7c:	bf00      	nop
 8021c7e:	e67b      	b.n	8021978 <tiny_print+0xc>
			continue;
 8021c80:	bf00      	nop
	{
 8021c82:	e679      	b.n	8021978 <tiny_print+0xc>
			break;
 8021c84:	bf00      	nop
 8021c86:	e000      	b.n	8021c8a <tiny_print+0x31e>
				break;
 8021c88:	bf00      	nop
		}
	}
	strbuf_printchar( apBuf, '\0' );
 8021c8a:	2100      	movs	r1, #0
 8021c8c:	68f8      	ldr	r0, [r7, #12]
 8021c8e:	f7ff fbee 	bl	802146e <strbuf_printchar>
 8021c92:	e000      	b.n	8021c96 <tiny_print+0x32a>
					return;
 8021c94:	bf00      	nop
}
 8021c96:	371c      	adds	r7, #28
 8021c98:	46bd      	mov	sp, r7
 8021c9a:	bd90      	pop	{r4, r7, pc}
 8021c9c:	0802627c 	.word	0x0802627c

08021ca0 <vsnprintf>:
	return strBuf.curLen;
}
/*-----------------------------------------------------------*/

int vsnprintf( char *apBuf, size_t aMaxLen, const char *apFmt, va_list args )
{
 8021ca0:	b580      	push	{r7, lr}
 8021ca2:	b08c      	sub	sp, #48	@ 0x30
 8021ca4:	af00      	add	r7, sp, #0
 8021ca6:	60f8      	str	r0, [r7, #12]
 8021ca8:	60b9      	str	r1, [r7, #8]
 8021caa:	607a      	str	r2, [r7, #4]
 8021cac:	603b      	str	r3, [r7, #0]
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8021cae:	68fa      	ldr	r2, [r7, #12]
 8021cb0:	68bb      	ldr	r3, [r7, #8]
 8021cb2:	441a      	add	r2, r3
 8021cb4:	f107 0310 	add.w	r3, r7, #16
 8021cb8:	68f9      	ldr	r1, [r7, #12]
 8021cba:	4618      	mov	r0, r3
 8021cbc:	f7ff fbb9 	bl	8021432 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8021cc0:	f107 0310 	add.w	r3, r7, #16
 8021cc4:	683a      	ldr	r2, [r7, #0]
 8021cc6:	6879      	ldr	r1, [r7, #4]
 8021cc8:	4618      	mov	r0, r3
 8021cca:	f7ff fe4f 	bl	802196c <tiny_print>

	return strBuf.curLen;
 8021cce:	69fb      	ldr	r3, [r7, #28]
}
 8021cd0:	4618      	mov	r0, r3
 8021cd2:	3730      	adds	r7, #48	@ 0x30
 8021cd4:	46bd      	mov	sp, r7
 8021cd6:	bd80      	pop	{r7, pc}

08021cd8 <snprintf>:
/*-----------------------------------------------------------*/

int snprintf( char *apBuf, size_t aMaxLen, const char *apFmt, ... )
{
 8021cd8:	b40c      	push	{r2, r3}
 8021cda:	b580      	push	{r7, lr}
 8021cdc:	b08c      	sub	sp, #48	@ 0x30
 8021cde:	af00      	add	r7, sp, #0
 8021ce0:	6078      	str	r0, [r7, #4]
 8021ce2:	6039      	str	r1, [r7, #0]
	va_list args;

	va_start( args,  apFmt );
 8021ce4:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8021ce8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char* )apBuf + aMaxLen );
 8021cea:	687a      	ldr	r2, [r7, #4]
 8021cec:	683b      	ldr	r3, [r7, #0]
 8021cee:	441a      	add	r2, r3
 8021cf0:	f107 030c 	add.w	r3, r7, #12
 8021cf4:	6879      	ldr	r1, [r7, #4]
 8021cf6:	4618      	mov	r0, r3
 8021cf8:	f7ff fb9b 	bl	8021432 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8021cfc:	f107 030c 	add.w	r3, r7, #12
 8021d00:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021d02:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8021d04:	4618      	mov	r0, r3
 8021d06:	f7ff fe31 	bl	802196c <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8021d0a:	69bb      	ldr	r3, [r7, #24]
}
 8021d0c:	4618      	mov	r0, r3
 8021d0e:	3730      	adds	r7, #48	@ 0x30
 8021d10:	46bd      	mov	sp, r7
 8021d12:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8021d16:	b002      	add	sp, #8
 8021d18:	4770      	bx	lr

08021d1a <sprintf>:
/*-----------------------------------------------------------*/

int sprintf( char *apBuf, const char *apFmt, ... )
{
 8021d1a:	b40e      	push	{r1, r2, r3}
 8021d1c:	b580      	push	{r7, lr}
 8021d1e:	b08d      	sub	sp, #52	@ 0x34
 8021d20:	af00      	add	r7, sp, #0
 8021d22:	6078      	str	r0, [r7, #4]
	va_list args;

	va_start( args,  apFmt );
 8021d24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8021d28:	62fb      	str	r3, [r7, #44]	@ 0x2c
	struct SStringBuf strBuf;
	strbuf_init( &strBuf, apBuf, ( const char * )apBuf + 1024 );
 8021d2a:	687b      	ldr	r3, [r7, #4]
 8021d2c:	f503 6280 	add.w	r2, r3, #1024	@ 0x400
 8021d30:	f107 030c 	add.w	r3, r7, #12
 8021d34:	6879      	ldr	r1, [r7, #4]
 8021d36:	4618      	mov	r0, r3
 8021d38:	f7ff fb7b 	bl	8021432 <strbuf_init>
	tiny_print( &strBuf, apFmt, args );
 8021d3c:	f107 030c 	add.w	r3, r7, #12
 8021d40:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8021d42:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8021d44:	4618      	mov	r0, r3
 8021d46:	f7ff fe11 	bl	802196c <tiny_print>
	va_end( args );

	return strBuf.curLen;
 8021d4a:	69bb      	ldr	r3, [r7, #24]
}
 8021d4c:	4618      	mov	r0, r3
 8021d4e:	3734      	adds	r7, #52	@ 0x34
 8021d50:	46bd      	mov	sp, r7
 8021d52:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8021d56:	b003      	add	sp, #12
 8021d58:	4770      	bx	lr
	...

08021d5c <rand>:
 8021d5c:	4b16      	ldr	r3, [pc, #88]	@ (8021db8 <rand+0x5c>)
 8021d5e:	b510      	push	{r4, lr}
 8021d60:	681c      	ldr	r4, [r3, #0]
 8021d62:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8021d64:	b9b3      	cbnz	r3, 8021d94 <rand+0x38>
 8021d66:	2018      	movs	r0, #24
 8021d68:	f000 fa70 	bl	802224c <malloc>
 8021d6c:	4602      	mov	r2, r0
 8021d6e:	6320      	str	r0, [r4, #48]	@ 0x30
 8021d70:	b920      	cbnz	r0, 8021d7c <rand+0x20>
 8021d72:	4b12      	ldr	r3, [pc, #72]	@ (8021dbc <rand+0x60>)
 8021d74:	4812      	ldr	r0, [pc, #72]	@ (8021dc0 <rand+0x64>)
 8021d76:	2152      	movs	r1, #82	@ 0x52
 8021d78:	f000 fa00 	bl	802217c <__assert_func>
 8021d7c:	4911      	ldr	r1, [pc, #68]	@ (8021dc4 <rand+0x68>)
 8021d7e:	4b12      	ldr	r3, [pc, #72]	@ (8021dc8 <rand+0x6c>)
 8021d80:	e9c0 1300 	strd	r1, r3, [r0]
 8021d84:	4b11      	ldr	r3, [pc, #68]	@ (8021dcc <rand+0x70>)
 8021d86:	6083      	str	r3, [r0, #8]
 8021d88:	230b      	movs	r3, #11
 8021d8a:	8183      	strh	r3, [r0, #12]
 8021d8c:	2100      	movs	r1, #0
 8021d8e:	2001      	movs	r0, #1
 8021d90:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8021d94:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021d96:	480e      	ldr	r0, [pc, #56]	@ (8021dd0 <rand+0x74>)
 8021d98:	690b      	ldr	r3, [r1, #16]
 8021d9a:	694c      	ldr	r4, [r1, #20]
 8021d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8021dd4 <rand+0x78>)
 8021d9e:	4358      	muls	r0, r3
 8021da0:	fb02 0004 	mla	r0, r2, r4, r0
 8021da4:	fba3 3202 	umull	r3, r2, r3, r2
 8021da8:	3301      	adds	r3, #1
 8021daa:	eb40 0002 	adc.w	r0, r0, r2
 8021dae:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8021db2:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 8021db6:	bd10      	pop	{r4, pc}
 8021db8:	20000038 	.word	0x20000038
 8021dbc:	0802643c 	.word	0x0802643c
 8021dc0:	08026453 	.word	0x08026453
 8021dc4:	abcd330e 	.word	0xabcd330e
 8021dc8:	e66d1234 	.word	0xe66d1234
 8021dcc:	0005deec 	.word	0x0005deec
 8021dd0:	5851f42d 	.word	0x5851f42d
 8021dd4:	4c957f2d 	.word	0x4c957f2d

08021dd8 <std>:
 8021dd8:	2300      	movs	r3, #0
 8021dda:	b510      	push	{r4, lr}
 8021ddc:	4604      	mov	r4, r0
 8021dde:	e9c0 3300 	strd	r3, r3, [r0]
 8021de2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021de6:	6083      	str	r3, [r0, #8]
 8021de8:	8181      	strh	r1, [r0, #12]
 8021dea:	6643      	str	r3, [r0, #100]	@ 0x64
 8021dec:	81c2      	strh	r2, [r0, #14]
 8021dee:	6183      	str	r3, [r0, #24]
 8021df0:	4619      	mov	r1, r3
 8021df2:	2208      	movs	r2, #8
 8021df4:	305c      	adds	r0, #92	@ 0x5c
 8021df6:	f7ff fa6c 	bl	80212d2 <memset>
 8021dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8021e30 <std+0x58>)
 8021dfc:	6263      	str	r3, [r4, #36]	@ 0x24
 8021dfe:	4b0d      	ldr	r3, [pc, #52]	@ (8021e34 <std+0x5c>)
 8021e00:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021e02:	4b0d      	ldr	r3, [pc, #52]	@ (8021e38 <std+0x60>)
 8021e04:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021e06:	4b0d      	ldr	r3, [pc, #52]	@ (8021e3c <std+0x64>)
 8021e08:	6323      	str	r3, [r4, #48]	@ 0x30
 8021e0a:	4b0d      	ldr	r3, [pc, #52]	@ (8021e40 <std+0x68>)
 8021e0c:	6224      	str	r4, [r4, #32]
 8021e0e:	429c      	cmp	r4, r3
 8021e10:	d006      	beq.n	8021e20 <std+0x48>
 8021e12:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021e16:	4294      	cmp	r4, r2
 8021e18:	d002      	beq.n	8021e20 <std+0x48>
 8021e1a:	33d0      	adds	r3, #208	@ 0xd0
 8021e1c:	429c      	cmp	r4, r3
 8021e1e:	d105      	bne.n	8021e2c <std+0x54>
 8021e20:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021e24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e28:	f000 b9a4 	b.w	8022174 <__retarget_lock_init_recursive>
 8021e2c:	bd10      	pop	{r4, pc}
 8021e2e:	bf00      	nop
 8021e30:	08021f5d 	.word	0x08021f5d
 8021e34:	08021f7f 	.word	0x08021f7f
 8021e38:	08021fb7 	.word	0x08021fb7
 8021e3c:	08021fdb 	.word	0x08021fdb
 8021e40:	20002438 	.word	0x20002438

08021e44 <stdio_exit_handler>:
 8021e44:	4a02      	ldr	r2, [pc, #8]	@ (8021e50 <stdio_exit_handler+0xc>)
 8021e46:	4903      	ldr	r1, [pc, #12]	@ (8021e54 <stdio_exit_handler+0x10>)
 8021e48:	4803      	ldr	r0, [pc, #12]	@ (8021e58 <stdio_exit_handler+0x14>)
 8021e4a:	f000 b869 	b.w	8021f20 <_fwalk_sglue>
 8021e4e:	bf00      	nop
 8021e50:	2000002c 	.word	0x2000002c
 8021e54:	080224c1 	.word	0x080224c1
 8021e58:	2000003c 	.word	0x2000003c

08021e5c <cleanup_stdio>:
 8021e5c:	6841      	ldr	r1, [r0, #4]
 8021e5e:	4b0c      	ldr	r3, [pc, #48]	@ (8021e90 <cleanup_stdio+0x34>)
 8021e60:	4299      	cmp	r1, r3
 8021e62:	b510      	push	{r4, lr}
 8021e64:	4604      	mov	r4, r0
 8021e66:	d001      	beq.n	8021e6c <cleanup_stdio+0x10>
 8021e68:	f000 fb2a 	bl	80224c0 <_fflush_r>
 8021e6c:	68a1      	ldr	r1, [r4, #8]
 8021e6e:	4b09      	ldr	r3, [pc, #36]	@ (8021e94 <cleanup_stdio+0x38>)
 8021e70:	4299      	cmp	r1, r3
 8021e72:	d002      	beq.n	8021e7a <cleanup_stdio+0x1e>
 8021e74:	4620      	mov	r0, r4
 8021e76:	f000 fb23 	bl	80224c0 <_fflush_r>
 8021e7a:	68e1      	ldr	r1, [r4, #12]
 8021e7c:	4b06      	ldr	r3, [pc, #24]	@ (8021e98 <cleanup_stdio+0x3c>)
 8021e7e:	4299      	cmp	r1, r3
 8021e80:	d004      	beq.n	8021e8c <cleanup_stdio+0x30>
 8021e82:	4620      	mov	r0, r4
 8021e84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021e88:	f000 bb1a 	b.w	80224c0 <_fflush_r>
 8021e8c:	bd10      	pop	{r4, pc}
 8021e8e:	bf00      	nop
 8021e90:	20002438 	.word	0x20002438
 8021e94:	200024a0 	.word	0x200024a0
 8021e98:	20002508 	.word	0x20002508

08021e9c <global_stdio_init.part.0>:
 8021e9c:	b510      	push	{r4, lr}
 8021e9e:	4b0b      	ldr	r3, [pc, #44]	@ (8021ecc <global_stdio_init.part.0+0x30>)
 8021ea0:	4c0b      	ldr	r4, [pc, #44]	@ (8021ed0 <global_stdio_init.part.0+0x34>)
 8021ea2:	4a0c      	ldr	r2, [pc, #48]	@ (8021ed4 <global_stdio_init.part.0+0x38>)
 8021ea4:	601a      	str	r2, [r3, #0]
 8021ea6:	4620      	mov	r0, r4
 8021ea8:	2200      	movs	r2, #0
 8021eaa:	2104      	movs	r1, #4
 8021eac:	f7ff ff94 	bl	8021dd8 <std>
 8021eb0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8021eb4:	2201      	movs	r2, #1
 8021eb6:	2109      	movs	r1, #9
 8021eb8:	f7ff ff8e 	bl	8021dd8 <std>
 8021ebc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8021ec0:	2202      	movs	r2, #2
 8021ec2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021ec6:	2112      	movs	r1, #18
 8021ec8:	f7ff bf86 	b.w	8021dd8 <std>
 8021ecc:	20002570 	.word	0x20002570
 8021ed0:	20002438 	.word	0x20002438
 8021ed4:	08021e45 	.word	0x08021e45

08021ed8 <__sfp_lock_acquire>:
 8021ed8:	4801      	ldr	r0, [pc, #4]	@ (8021ee0 <__sfp_lock_acquire+0x8>)
 8021eda:	f000 b94c 	b.w	8022176 <__retarget_lock_acquire_recursive>
 8021ede:	bf00      	nop
 8021ee0:	20002579 	.word	0x20002579

08021ee4 <__sfp_lock_release>:
 8021ee4:	4801      	ldr	r0, [pc, #4]	@ (8021eec <__sfp_lock_release+0x8>)
 8021ee6:	f000 b947 	b.w	8022178 <__retarget_lock_release_recursive>
 8021eea:	bf00      	nop
 8021eec:	20002579 	.word	0x20002579

08021ef0 <__sinit>:
 8021ef0:	b510      	push	{r4, lr}
 8021ef2:	4604      	mov	r4, r0
 8021ef4:	f7ff fff0 	bl	8021ed8 <__sfp_lock_acquire>
 8021ef8:	6a23      	ldr	r3, [r4, #32]
 8021efa:	b11b      	cbz	r3, 8021f04 <__sinit+0x14>
 8021efc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021f00:	f7ff bff0 	b.w	8021ee4 <__sfp_lock_release>
 8021f04:	4b04      	ldr	r3, [pc, #16]	@ (8021f18 <__sinit+0x28>)
 8021f06:	6223      	str	r3, [r4, #32]
 8021f08:	4b04      	ldr	r3, [pc, #16]	@ (8021f1c <__sinit+0x2c>)
 8021f0a:	681b      	ldr	r3, [r3, #0]
 8021f0c:	2b00      	cmp	r3, #0
 8021f0e:	d1f5      	bne.n	8021efc <__sinit+0xc>
 8021f10:	f7ff ffc4 	bl	8021e9c <global_stdio_init.part.0>
 8021f14:	e7f2      	b.n	8021efc <__sinit+0xc>
 8021f16:	bf00      	nop
 8021f18:	08021e5d 	.word	0x08021e5d
 8021f1c:	20002570 	.word	0x20002570

08021f20 <_fwalk_sglue>:
 8021f20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021f24:	4607      	mov	r7, r0
 8021f26:	4688      	mov	r8, r1
 8021f28:	4614      	mov	r4, r2
 8021f2a:	2600      	movs	r6, #0
 8021f2c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021f30:	f1b9 0901 	subs.w	r9, r9, #1
 8021f34:	d505      	bpl.n	8021f42 <_fwalk_sglue+0x22>
 8021f36:	6824      	ldr	r4, [r4, #0]
 8021f38:	2c00      	cmp	r4, #0
 8021f3a:	d1f7      	bne.n	8021f2c <_fwalk_sglue+0xc>
 8021f3c:	4630      	mov	r0, r6
 8021f3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021f42:	89ab      	ldrh	r3, [r5, #12]
 8021f44:	2b01      	cmp	r3, #1
 8021f46:	d907      	bls.n	8021f58 <_fwalk_sglue+0x38>
 8021f48:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021f4c:	3301      	adds	r3, #1
 8021f4e:	d003      	beq.n	8021f58 <_fwalk_sglue+0x38>
 8021f50:	4629      	mov	r1, r5
 8021f52:	4638      	mov	r0, r7
 8021f54:	47c0      	blx	r8
 8021f56:	4306      	orrs	r6, r0
 8021f58:	3568      	adds	r5, #104	@ 0x68
 8021f5a:	e7e9      	b.n	8021f30 <_fwalk_sglue+0x10>

08021f5c <__sread>:
 8021f5c:	b510      	push	{r4, lr}
 8021f5e:	460c      	mov	r4, r1
 8021f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f64:	f000 f8b8 	bl	80220d8 <_read_r>
 8021f68:	2800      	cmp	r0, #0
 8021f6a:	bfab      	itete	ge
 8021f6c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8021f6e:	89a3      	ldrhlt	r3, [r4, #12]
 8021f70:	181b      	addge	r3, r3, r0
 8021f72:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021f76:	bfac      	ite	ge
 8021f78:	6563      	strge	r3, [r4, #84]	@ 0x54
 8021f7a:	81a3      	strhlt	r3, [r4, #12]
 8021f7c:	bd10      	pop	{r4, pc}

08021f7e <__swrite>:
 8021f7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021f82:	461f      	mov	r7, r3
 8021f84:	898b      	ldrh	r3, [r1, #12]
 8021f86:	05db      	lsls	r3, r3, #23
 8021f88:	4605      	mov	r5, r0
 8021f8a:	460c      	mov	r4, r1
 8021f8c:	4616      	mov	r6, r2
 8021f8e:	d505      	bpl.n	8021f9c <__swrite+0x1e>
 8021f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021f94:	2302      	movs	r3, #2
 8021f96:	2200      	movs	r2, #0
 8021f98:	f000 f88c 	bl	80220b4 <_lseek_r>
 8021f9c:	89a3      	ldrh	r3, [r4, #12]
 8021f9e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021fa2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021fa6:	81a3      	strh	r3, [r4, #12]
 8021fa8:	4632      	mov	r2, r6
 8021faa:	463b      	mov	r3, r7
 8021fac:	4628      	mov	r0, r5
 8021fae:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021fb2:	f000 b8a3 	b.w	80220fc <_write_r>

08021fb6 <__sseek>:
 8021fb6:	b510      	push	{r4, lr}
 8021fb8:	460c      	mov	r4, r1
 8021fba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021fbe:	f000 f879 	bl	80220b4 <_lseek_r>
 8021fc2:	1c43      	adds	r3, r0, #1
 8021fc4:	89a3      	ldrh	r3, [r4, #12]
 8021fc6:	bf15      	itete	ne
 8021fc8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8021fca:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8021fce:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8021fd2:	81a3      	strheq	r3, [r4, #12]
 8021fd4:	bf18      	it	ne
 8021fd6:	81a3      	strhne	r3, [r4, #12]
 8021fd8:	bd10      	pop	{r4, pc}

08021fda <__sclose>:
 8021fda:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021fde:	f000 b859 	b.w	8022094 <_close_r>

08021fe2 <memcmp>:
 8021fe2:	b510      	push	{r4, lr}
 8021fe4:	3901      	subs	r1, #1
 8021fe6:	4402      	add	r2, r0
 8021fe8:	4290      	cmp	r0, r2
 8021fea:	d101      	bne.n	8021ff0 <memcmp+0xe>
 8021fec:	2000      	movs	r0, #0
 8021fee:	e005      	b.n	8021ffc <memcmp+0x1a>
 8021ff0:	7803      	ldrb	r3, [r0, #0]
 8021ff2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8021ff6:	42a3      	cmp	r3, r4
 8021ff8:	d001      	beq.n	8021ffe <memcmp+0x1c>
 8021ffa:	1b18      	subs	r0, r3, r4
 8021ffc:	bd10      	pop	{r4, pc}
 8021ffe:	3001      	adds	r0, #1
 8022000:	e7f2      	b.n	8021fe8 <memcmp+0x6>

08022002 <memmove>:
 8022002:	4288      	cmp	r0, r1
 8022004:	b510      	push	{r4, lr}
 8022006:	eb01 0402 	add.w	r4, r1, r2
 802200a:	d902      	bls.n	8022012 <memmove+0x10>
 802200c:	4284      	cmp	r4, r0
 802200e:	4623      	mov	r3, r4
 8022010:	d807      	bhi.n	8022022 <memmove+0x20>
 8022012:	1e43      	subs	r3, r0, #1
 8022014:	42a1      	cmp	r1, r4
 8022016:	d008      	beq.n	802202a <memmove+0x28>
 8022018:	f811 2b01 	ldrb.w	r2, [r1], #1
 802201c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8022020:	e7f8      	b.n	8022014 <memmove+0x12>
 8022022:	4402      	add	r2, r0
 8022024:	4601      	mov	r1, r0
 8022026:	428a      	cmp	r2, r1
 8022028:	d100      	bne.n	802202c <memmove+0x2a>
 802202a:	bd10      	pop	{r4, pc}
 802202c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8022030:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8022034:	e7f7      	b.n	8022026 <memmove+0x24>
	...

08022038 <strcasecmp>:
 8022038:	b530      	push	{r4, r5, lr}
 802203a:	4d0b      	ldr	r5, [pc, #44]	@ (8022068 <strcasecmp+0x30>)
 802203c:	4604      	mov	r4, r0
 802203e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8022042:	5cea      	ldrb	r2, [r5, r3]
 8022044:	f002 0203 	and.w	r2, r2, #3
 8022048:	2a01      	cmp	r2, #1
 802204a:	f811 2b01 	ldrb.w	r2, [r1], #1
 802204e:	5ca8      	ldrb	r0, [r5, r2]
 8022050:	f000 0003 	and.w	r0, r0, #3
 8022054:	bf08      	it	eq
 8022056:	3320      	addeq	r3, #32
 8022058:	2801      	cmp	r0, #1
 802205a:	bf08      	it	eq
 802205c:	3220      	addeq	r2, #32
 802205e:	1a98      	subs	r0, r3, r2
 8022060:	d101      	bne.n	8022066 <strcasecmp+0x2e>
 8022062:	2a00      	cmp	r2, #0
 8022064:	d1eb      	bne.n	802203e <strcasecmp+0x6>
 8022066:	bd30      	pop	{r4, r5, pc}
 8022068:	080264e8 	.word	0x080264e8

0802206c <strncpy>:
 802206c:	b510      	push	{r4, lr}
 802206e:	3901      	subs	r1, #1
 8022070:	4603      	mov	r3, r0
 8022072:	b132      	cbz	r2, 8022082 <strncpy+0x16>
 8022074:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8022078:	f803 4b01 	strb.w	r4, [r3], #1
 802207c:	3a01      	subs	r2, #1
 802207e:	2c00      	cmp	r4, #0
 8022080:	d1f7      	bne.n	8022072 <strncpy+0x6>
 8022082:	441a      	add	r2, r3
 8022084:	2100      	movs	r1, #0
 8022086:	4293      	cmp	r3, r2
 8022088:	d100      	bne.n	802208c <strncpy+0x20>
 802208a:	bd10      	pop	{r4, pc}
 802208c:	f803 1b01 	strb.w	r1, [r3], #1
 8022090:	e7f9      	b.n	8022086 <strncpy+0x1a>
	...

08022094 <_close_r>:
 8022094:	b538      	push	{r3, r4, r5, lr}
 8022096:	4d06      	ldr	r5, [pc, #24]	@ (80220b0 <_close_r+0x1c>)
 8022098:	2300      	movs	r3, #0
 802209a:	4604      	mov	r4, r0
 802209c:	4608      	mov	r0, r1
 802209e:	602b      	str	r3, [r5, #0]
 80220a0:	f7e0 f904 	bl	80022ac <_close>
 80220a4:	1c43      	adds	r3, r0, #1
 80220a6:	d102      	bne.n	80220ae <_close_r+0x1a>
 80220a8:	682b      	ldr	r3, [r5, #0]
 80220aa:	b103      	cbz	r3, 80220ae <_close_r+0x1a>
 80220ac:	6023      	str	r3, [r4, #0]
 80220ae:	bd38      	pop	{r3, r4, r5, pc}
 80220b0:	20002574 	.word	0x20002574

080220b4 <_lseek_r>:
 80220b4:	b538      	push	{r3, r4, r5, lr}
 80220b6:	4d07      	ldr	r5, [pc, #28]	@ (80220d4 <_lseek_r+0x20>)
 80220b8:	4604      	mov	r4, r0
 80220ba:	4608      	mov	r0, r1
 80220bc:	4611      	mov	r1, r2
 80220be:	2200      	movs	r2, #0
 80220c0:	602a      	str	r2, [r5, #0]
 80220c2:	461a      	mov	r2, r3
 80220c4:	f7e0 f919 	bl	80022fa <_lseek>
 80220c8:	1c43      	adds	r3, r0, #1
 80220ca:	d102      	bne.n	80220d2 <_lseek_r+0x1e>
 80220cc:	682b      	ldr	r3, [r5, #0]
 80220ce:	b103      	cbz	r3, 80220d2 <_lseek_r+0x1e>
 80220d0:	6023      	str	r3, [r4, #0]
 80220d2:	bd38      	pop	{r3, r4, r5, pc}
 80220d4:	20002574 	.word	0x20002574

080220d8 <_read_r>:
 80220d8:	b538      	push	{r3, r4, r5, lr}
 80220da:	4d07      	ldr	r5, [pc, #28]	@ (80220f8 <_read_r+0x20>)
 80220dc:	4604      	mov	r4, r0
 80220de:	4608      	mov	r0, r1
 80220e0:	4611      	mov	r1, r2
 80220e2:	2200      	movs	r2, #0
 80220e4:	602a      	str	r2, [r5, #0]
 80220e6:	461a      	mov	r2, r3
 80220e8:	f7e0 f8a7 	bl	800223a <_read>
 80220ec:	1c43      	adds	r3, r0, #1
 80220ee:	d102      	bne.n	80220f6 <_read_r+0x1e>
 80220f0:	682b      	ldr	r3, [r5, #0]
 80220f2:	b103      	cbz	r3, 80220f6 <_read_r+0x1e>
 80220f4:	6023      	str	r3, [r4, #0]
 80220f6:	bd38      	pop	{r3, r4, r5, pc}
 80220f8:	20002574 	.word	0x20002574

080220fc <_write_r>:
 80220fc:	b538      	push	{r3, r4, r5, lr}
 80220fe:	4d07      	ldr	r5, [pc, #28]	@ (802211c <_write_r+0x20>)
 8022100:	4604      	mov	r4, r0
 8022102:	4608      	mov	r0, r1
 8022104:	4611      	mov	r1, r2
 8022106:	2200      	movs	r2, #0
 8022108:	602a      	str	r2, [r5, #0]
 802210a:	461a      	mov	r2, r3
 802210c:	f7e0 f8b2 	bl	8002274 <_write>
 8022110:	1c43      	adds	r3, r0, #1
 8022112:	d102      	bne.n	802211a <_write_r+0x1e>
 8022114:	682b      	ldr	r3, [r5, #0]
 8022116:	b103      	cbz	r3, 802211a <_write_r+0x1e>
 8022118:	6023      	str	r3, [r4, #0]
 802211a:	bd38      	pop	{r3, r4, r5, pc}
 802211c:	20002574 	.word	0x20002574

08022120 <__errno>:
 8022120:	4b01      	ldr	r3, [pc, #4]	@ (8022128 <__errno+0x8>)
 8022122:	6818      	ldr	r0, [r3, #0]
 8022124:	4770      	bx	lr
 8022126:	bf00      	nop
 8022128:	20000038 	.word	0x20000038

0802212c <__libc_init_array>:
 802212c:	b570      	push	{r4, r5, r6, lr}
 802212e:	4d0d      	ldr	r5, [pc, #52]	@ (8022164 <__libc_init_array+0x38>)
 8022130:	4c0d      	ldr	r4, [pc, #52]	@ (8022168 <__libc_init_array+0x3c>)
 8022132:	1b64      	subs	r4, r4, r5
 8022134:	10a4      	asrs	r4, r4, #2
 8022136:	2600      	movs	r6, #0
 8022138:	42a6      	cmp	r6, r4
 802213a:	d109      	bne.n	8022150 <__libc_init_array+0x24>
 802213c:	4d0b      	ldr	r5, [pc, #44]	@ (802216c <__libc_init_array+0x40>)
 802213e:	4c0c      	ldr	r4, [pc, #48]	@ (8022170 <__libc_init_array+0x44>)
 8022140:	f000 fe3a 	bl	8022db8 <_init>
 8022144:	1b64      	subs	r4, r4, r5
 8022146:	10a4      	asrs	r4, r4, #2
 8022148:	2600      	movs	r6, #0
 802214a:	42a6      	cmp	r6, r4
 802214c:	d105      	bne.n	802215a <__libc_init_array+0x2e>
 802214e:	bd70      	pop	{r4, r5, r6, pc}
 8022150:	f855 3b04 	ldr.w	r3, [r5], #4
 8022154:	4798      	blx	r3
 8022156:	3601      	adds	r6, #1
 8022158:	e7ee      	b.n	8022138 <__libc_init_array+0xc>
 802215a:	f855 3b04 	ldr.w	r3, [r5], #4
 802215e:	4798      	blx	r3
 8022160:	3601      	adds	r6, #1
 8022162:	e7f2      	b.n	802214a <__libc_init_array+0x1e>
 8022164:	08026624 	.word	0x08026624
 8022168:	08026624 	.word	0x08026624
 802216c:	08026624 	.word	0x08026624
 8022170:	08026628 	.word	0x08026628

08022174 <__retarget_lock_init_recursive>:
 8022174:	4770      	bx	lr

08022176 <__retarget_lock_acquire_recursive>:
 8022176:	4770      	bx	lr

08022178 <__retarget_lock_release_recursive>:
 8022178:	4770      	bx	lr
	...

0802217c <__assert_func>:
 802217c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802217e:	4614      	mov	r4, r2
 8022180:	461a      	mov	r2, r3
 8022182:	4b09      	ldr	r3, [pc, #36]	@ (80221a8 <__assert_func+0x2c>)
 8022184:	681b      	ldr	r3, [r3, #0]
 8022186:	4605      	mov	r5, r0
 8022188:	68d8      	ldr	r0, [r3, #12]
 802218a:	b954      	cbnz	r4, 80221a2 <__assert_func+0x26>
 802218c:	4b07      	ldr	r3, [pc, #28]	@ (80221ac <__assert_func+0x30>)
 802218e:	461c      	mov	r4, r3
 8022190:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8022194:	9100      	str	r1, [sp, #0]
 8022196:	462b      	mov	r3, r5
 8022198:	4905      	ldr	r1, [pc, #20]	@ (80221b0 <__assert_func+0x34>)
 802219a:	f000 f9b9 	bl	8022510 <fiprintf>
 802219e:	f000 f9d9 	bl	8022554 <abort>
 80221a2:	4b04      	ldr	r3, [pc, #16]	@ (80221b4 <__assert_func+0x38>)
 80221a4:	e7f4      	b.n	8022190 <__assert_func+0x14>
 80221a6:	bf00      	nop
 80221a8:	20000038 	.word	0x20000038
 80221ac:	080264e6 	.word	0x080264e6
 80221b0:	080264b8 	.word	0x080264b8
 80221b4:	080264ab 	.word	0x080264ab

080221b8 <_free_r>:
 80221b8:	b538      	push	{r3, r4, r5, lr}
 80221ba:	4605      	mov	r5, r0
 80221bc:	2900      	cmp	r1, #0
 80221be:	d041      	beq.n	8022244 <_free_r+0x8c>
 80221c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80221c4:	1f0c      	subs	r4, r1, #4
 80221c6:	2b00      	cmp	r3, #0
 80221c8:	bfb8      	it	lt
 80221ca:	18e4      	addlt	r4, r4, r3
 80221cc:	f000 f8e8 	bl	80223a0 <__malloc_lock>
 80221d0:	4a1d      	ldr	r2, [pc, #116]	@ (8022248 <_free_r+0x90>)
 80221d2:	6813      	ldr	r3, [r2, #0]
 80221d4:	b933      	cbnz	r3, 80221e4 <_free_r+0x2c>
 80221d6:	6063      	str	r3, [r4, #4]
 80221d8:	6014      	str	r4, [r2, #0]
 80221da:	4628      	mov	r0, r5
 80221dc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80221e0:	f000 b8e4 	b.w	80223ac <__malloc_unlock>
 80221e4:	42a3      	cmp	r3, r4
 80221e6:	d908      	bls.n	80221fa <_free_r+0x42>
 80221e8:	6820      	ldr	r0, [r4, #0]
 80221ea:	1821      	adds	r1, r4, r0
 80221ec:	428b      	cmp	r3, r1
 80221ee:	bf01      	itttt	eq
 80221f0:	6819      	ldreq	r1, [r3, #0]
 80221f2:	685b      	ldreq	r3, [r3, #4]
 80221f4:	1809      	addeq	r1, r1, r0
 80221f6:	6021      	streq	r1, [r4, #0]
 80221f8:	e7ed      	b.n	80221d6 <_free_r+0x1e>
 80221fa:	461a      	mov	r2, r3
 80221fc:	685b      	ldr	r3, [r3, #4]
 80221fe:	b10b      	cbz	r3, 8022204 <_free_r+0x4c>
 8022200:	42a3      	cmp	r3, r4
 8022202:	d9fa      	bls.n	80221fa <_free_r+0x42>
 8022204:	6811      	ldr	r1, [r2, #0]
 8022206:	1850      	adds	r0, r2, r1
 8022208:	42a0      	cmp	r0, r4
 802220a:	d10b      	bne.n	8022224 <_free_r+0x6c>
 802220c:	6820      	ldr	r0, [r4, #0]
 802220e:	4401      	add	r1, r0
 8022210:	1850      	adds	r0, r2, r1
 8022212:	4283      	cmp	r3, r0
 8022214:	6011      	str	r1, [r2, #0]
 8022216:	d1e0      	bne.n	80221da <_free_r+0x22>
 8022218:	6818      	ldr	r0, [r3, #0]
 802221a:	685b      	ldr	r3, [r3, #4]
 802221c:	6053      	str	r3, [r2, #4]
 802221e:	4408      	add	r0, r1
 8022220:	6010      	str	r0, [r2, #0]
 8022222:	e7da      	b.n	80221da <_free_r+0x22>
 8022224:	d902      	bls.n	802222c <_free_r+0x74>
 8022226:	230c      	movs	r3, #12
 8022228:	602b      	str	r3, [r5, #0]
 802222a:	e7d6      	b.n	80221da <_free_r+0x22>
 802222c:	6820      	ldr	r0, [r4, #0]
 802222e:	1821      	adds	r1, r4, r0
 8022230:	428b      	cmp	r3, r1
 8022232:	bf04      	itt	eq
 8022234:	6819      	ldreq	r1, [r3, #0]
 8022236:	685b      	ldreq	r3, [r3, #4]
 8022238:	6063      	str	r3, [r4, #4]
 802223a:	bf04      	itt	eq
 802223c:	1809      	addeq	r1, r1, r0
 802223e:	6021      	streq	r1, [r4, #0]
 8022240:	6054      	str	r4, [r2, #4]
 8022242:	e7ca      	b.n	80221da <_free_r+0x22>
 8022244:	bd38      	pop	{r3, r4, r5, pc}
 8022246:	bf00      	nop
 8022248:	20002580 	.word	0x20002580

0802224c <malloc>:
 802224c:	4b02      	ldr	r3, [pc, #8]	@ (8022258 <malloc+0xc>)
 802224e:	4601      	mov	r1, r0
 8022250:	6818      	ldr	r0, [r3, #0]
 8022252:	f000 b825 	b.w	80222a0 <_malloc_r>
 8022256:	bf00      	nop
 8022258:	20000038 	.word	0x20000038

0802225c <sbrk_aligned>:
 802225c:	b570      	push	{r4, r5, r6, lr}
 802225e:	4e0f      	ldr	r6, [pc, #60]	@ (802229c <sbrk_aligned+0x40>)
 8022260:	460c      	mov	r4, r1
 8022262:	6831      	ldr	r1, [r6, #0]
 8022264:	4605      	mov	r5, r0
 8022266:	b911      	cbnz	r1, 802226e <sbrk_aligned+0x12>
 8022268:	f000 f964 	bl	8022534 <_sbrk_r>
 802226c:	6030      	str	r0, [r6, #0]
 802226e:	4621      	mov	r1, r4
 8022270:	4628      	mov	r0, r5
 8022272:	f000 f95f 	bl	8022534 <_sbrk_r>
 8022276:	1c43      	adds	r3, r0, #1
 8022278:	d103      	bne.n	8022282 <sbrk_aligned+0x26>
 802227a:	f04f 34ff 	mov.w	r4, #4294967295
 802227e:	4620      	mov	r0, r4
 8022280:	bd70      	pop	{r4, r5, r6, pc}
 8022282:	1cc4      	adds	r4, r0, #3
 8022284:	f024 0403 	bic.w	r4, r4, #3
 8022288:	42a0      	cmp	r0, r4
 802228a:	d0f8      	beq.n	802227e <sbrk_aligned+0x22>
 802228c:	1a21      	subs	r1, r4, r0
 802228e:	4628      	mov	r0, r5
 8022290:	f000 f950 	bl	8022534 <_sbrk_r>
 8022294:	3001      	adds	r0, #1
 8022296:	d1f2      	bne.n	802227e <sbrk_aligned+0x22>
 8022298:	e7ef      	b.n	802227a <sbrk_aligned+0x1e>
 802229a:	bf00      	nop
 802229c:	2000257c 	.word	0x2000257c

080222a0 <_malloc_r>:
 80222a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80222a4:	1ccd      	adds	r5, r1, #3
 80222a6:	f025 0503 	bic.w	r5, r5, #3
 80222aa:	3508      	adds	r5, #8
 80222ac:	2d0c      	cmp	r5, #12
 80222ae:	bf38      	it	cc
 80222b0:	250c      	movcc	r5, #12
 80222b2:	2d00      	cmp	r5, #0
 80222b4:	4606      	mov	r6, r0
 80222b6:	db01      	blt.n	80222bc <_malloc_r+0x1c>
 80222b8:	42a9      	cmp	r1, r5
 80222ba:	d904      	bls.n	80222c6 <_malloc_r+0x26>
 80222bc:	230c      	movs	r3, #12
 80222be:	6033      	str	r3, [r6, #0]
 80222c0:	2000      	movs	r0, #0
 80222c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80222c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 802239c <_malloc_r+0xfc>
 80222ca:	f000 f869 	bl	80223a0 <__malloc_lock>
 80222ce:	f8d8 3000 	ldr.w	r3, [r8]
 80222d2:	461c      	mov	r4, r3
 80222d4:	bb44      	cbnz	r4, 8022328 <_malloc_r+0x88>
 80222d6:	4629      	mov	r1, r5
 80222d8:	4630      	mov	r0, r6
 80222da:	f7ff ffbf 	bl	802225c <sbrk_aligned>
 80222de:	1c43      	adds	r3, r0, #1
 80222e0:	4604      	mov	r4, r0
 80222e2:	d158      	bne.n	8022396 <_malloc_r+0xf6>
 80222e4:	f8d8 4000 	ldr.w	r4, [r8]
 80222e8:	4627      	mov	r7, r4
 80222ea:	2f00      	cmp	r7, #0
 80222ec:	d143      	bne.n	8022376 <_malloc_r+0xd6>
 80222ee:	2c00      	cmp	r4, #0
 80222f0:	d04b      	beq.n	802238a <_malloc_r+0xea>
 80222f2:	6823      	ldr	r3, [r4, #0]
 80222f4:	4639      	mov	r1, r7
 80222f6:	4630      	mov	r0, r6
 80222f8:	eb04 0903 	add.w	r9, r4, r3
 80222fc:	f000 f91a 	bl	8022534 <_sbrk_r>
 8022300:	4581      	cmp	r9, r0
 8022302:	d142      	bne.n	802238a <_malloc_r+0xea>
 8022304:	6821      	ldr	r1, [r4, #0]
 8022306:	1a6d      	subs	r5, r5, r1
 8022308:	4629      	mov	r1, r5
 802230a:	4630      	mov	r0, r6
 802230c:	f7ff ffa6 	bl	802225c <sbrk_aligned>
 8022310:	3001      	adds	r0, #1
 8022312:	d03a      	beq.n	802238a <_malloc_r+0xea>
 8022314:	6823      	ldr	r3, [r4, #0]
 8022316:	442b      	add	r3, r5
 8022318:	6023      	str	r3, [r4, #0]
 802231a:	f8d8 3000 	ldr.w	r3, [r8]
 802231e:	685a      	ldr	r2, [r3, #4]
 8022320:	bb62      	cbnz	r2, 802237c <_malloc_r+0xdc>
 8022322:	f8c8 7000 	str.w	r7, [r8]
 8022326:	e00f      	b.n	8022348 <_malloc_r+0xa8>
 8022328:	6822      	ldr	r2, [r4, #0]
 802232a:	1b52      	subs	r2, r2, r5
 802232c:	d420      	bmi.n	8022370 <_malloc_r+0xd0>
 802232e:	2a0b      	cmp	r2, #11
 8022330:	d917      	bls.n	8022362 <_malloc_r+0xc2>
 8022332:	1961      	adds	r1, r4, r5
 8022334:	42a3      	cmp	r3, r4
 8022336:	6025      	str	r5, [r4, #0]
 8022338:	bf18      	it	ne
 802233a:	6059      	strne	r1, [r3, #4]
 802233c:	6863      	ldr	r3, [r4, #4]
 802233e:	bf08      	it	eq
 8022340:	f8c8 1000 	streq.w	r1, [r8]
 8022344:	5162      	str	r2, [r4, r5]
 8022346:	604b      	str	r3, [r1, #4]
 8022348:	4630      	mov	r0, r6
 802234a:	f000 f82f 	bl	80223ac <__malloc_unlock>
 802234e:	f104 000b 	add.w	r0, r4, #11
 8022352:	1d23      	adds	r3, r4, #4
 8022354:	f020 0007 	bic.w	r0, r0, #7
 8022358:	1ac2      	subs	r2, r0, r3
 802235a:	bf1c      	itt	ne
 802235c:	1a1b      	subne	r3, r3, r0
 802235e:	50a3      	strne	r3, [r4, r2]
 8022360:	e7af      	b.n	80222c2 <_malloc_r+0x22>
 8022362:	6862      	ldr	r2, [r4, #4]
 8022364:	42a3      	cmp	r3, r4
 8022366:	bf0c      	ite	eq
 8022368:	f8c8 2000 	streq.w	r2, [r8]
 802236c:	605a      	strne	r2, [r3, #4]
 802236e:	e7eb      	b.n	8022348 <_malloc_r+0xa8>
 8022370:	4623      	mov	r3, r4
 8022372:	6864      	ldr	r4, [r4, #4]
 8022374:	e7ae      	b.n	80222d4 <_malloc_r+0x34>
 8022376:	463c      	mov	r4, r7
 8022378:	687f      	ldr	r7, [r7, #4]
 802237a:	e7b6      	b.n	80222ea <_malloc_r+0x4a>
 802237c:	461a      	mov	r2, r3
 802237e:	685b      	ldr	r3, [r3, #4]
 8022380:	42a3      	cmp	r3, r4
 8022382:	d1fb      	bne.n	802237c <_malloc_r+0xdc>
 8022384:	2300      	movs	r3, #0
 8022386:	6053      	str	r3, [r2, #4]
 8022388:	e7de      	b.n	8022348 <_malloc_r+0xa8>
 802238a:	230c      	movs	r3, #12
 802238c:	6033      	str	r3, [r6, #0]
 802238e:	4630      	mov	r0, r6
 8022390:	f000 f80c 	bl	80223ac <__malloc_unlock>
 8022394:	e794      	b.n	80222c0 <_malloc_r+0x20>
 8022396:	6005      	str	r5, [r0, #0]
 8022398:	e7d6      	b.n	8022348 <_malloc_r+0xa8>
 802239a:	bf00      	nop
 802239c:	20002580 	.word	0x20002580

080223a0 <__malloc_lock>:
 80223a0:	4801      	ldr	r0, [pc, #4]	@ (80223a8 <__malloc_lock+0x8>)
 80223a2:	f7ff bee8 	b.w	8022176 <__retarget_lock_acquire_recursive>
 80223a6:	bf00      	nop
 80223a8:	20002578 	.word	0x20002578

080223ac <__malloc_unlock>:
 80223ac:	4801      	ldr	r0, [pc, #4]	@ (80223b4 <__malloc_unlock+0x8>)
 80223ae:	f7ff bee3 	b.w	8022178 <__retarget_lock_release_recursive>
 80223b2:	bf00      	nop
 80223b4:	20002578 	.word	0x20002578

080223b8 <__sflush_r>:
 80223b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80223bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80223c0:	0716      	lsls	r6, r2, #28
 80223c2:	4605      	mov	r5, r0
 80223c4:	460c      	mov	r4, r1
 80223c6:	d454      	bmi.n	8022472 <__sflush_r+0xba>
 80223c8:	684b      	ldr	r3, [r1, #4]
 80223ca:	2b00      	cmp	r3, #0
 80223cc:	dc02      	bgt.n	80223d4 <__sflush_r+0x1c>
 80223ce:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80223d0:	2b00      	cmp	r3, #0
 80223d2:	dd48      	ble.n	8022466 <__sflush_r+0xae>
 80223d4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80223d6:	2e00      	cmp	r6, #0
 80223d8:	d045      	beq.n	8022466 <__sflush_r+0xae>
 80223da:	2300      	movs	r3, #0
 80223dc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80223e0:	682f      	ldr	r7, [r5, #0]
 80223e2:	6a21      	ldr	r1, [r4, #32]
 80223e4:	602b      	str	r3, [r5, #0]
 80223e6:	d030      	beq.n	802244a <__sflush_r+0x92>
 80223e8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80223ea:	89a3      	ldrh	r3, [r4, #12]
 80223ec:	0759      	lsls	r1, r3, #29
 80223ee:	d505      	bpl.n	80223fc <__sflush_r+0x44>
 80223f0:	6863      	ldr	r3, [r4, #4]
 80223f2:	1ad2      	subs	r2, r2, r3
 80223f4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80223f6:	b10b      	cbz	r3, 80223fc <__sflush_r+0x44>
 80223f8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80223fa:	1ad2      	subs	r2, r2, r3
 80223fc:	2300      	movs	r3, #0
 80223fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022400:	6a21      	ldr	r1, [r4, #32]
 8022402:	4628      	mov	r0, r5
 8022404:	47b0      	blx	r6
 8022406:	1c43      	adds	r3, r0, #1
 8022408:	89a3      	ldrh	r3, [r4, #12]
 802240a:	d106      	bne.n	802241a <__sflush_r+0x62>
 802240c:	6829      	ldr	r1, [r5, #0]
 802240e:	291d      	cmp	r1, #29
 8022410:	d82b      	bhi.n	802246a <__sflush_r+0xb2>
 8022412:	4a2a      	ldr	r2, [pc, #168]	@ (80224bc <__sflush_r+0x104>)
 8022414:	410a      	asrs	r2, r1
 8022416:	07d6      	lsls	r6, r2, #31
 8022418:	d427      	bmi.n	802246a <__sflush_r+0xb2>
 802241a:	2200      	movs	r2, #0
 802241c:	6062      	str	r2, [r4, #4]
 802241e:	04d9      	lsls	r1, r3, #19
 8022420:	6922      	ldr	r2, [r4, #16]
 8022422:	6022      	str	r2, [r4, #0]
 8022424:	d504      	bpl.n	8022430 <__sflush_r+0x78>
 8022426:	1c42      	adds	r2, r0, #1
 8022428:	d101      	bne.n	802242e <__sflush_r+0x76>
 802242a:	682b      	ldr	r3, [r5, #0]
 802242c:	b903      	cbnz	r3, 8022430 <__sflush_r+0x78>
 802242e:	6560      	str	r0, [r4, #84]	@ 0x54
 8022430:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022432:	602f      	str	r7, [r5, #0]
 8022434:	b1b9      	cbz	r1, 8022466 <__sflush_r+0xae>
 8022436:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802243a:	4299      	cmp	r1, r3
 802243c:	d002      	beq.n	8022444 <__sflush_r+0x8c>
 802243e:	4628      	mov	r0, r5
 8022440:	f7ff feba 	bl	80221b8 <_free_r>
 8022444:	2300      	movs	r3, #0
 8022446:	6363      	str	r3, [r4, #52]	@ 0x34
 8022448:	e00d      	b.n	8022466 <__sflush_r+0xae>
 802244a:	2301      	movs	r3, #1
 802244c:	4628      	mov	r0, r5
 802244e:	47b0      	blx	r6
 8022450:	4602      	mov	r2, r0
 8022452:	1c50      	adds	r0, r2, #1
 8022454:	d1c9      	bne.n	80223ea <__sflush_r+0x32>
 8022456:	682b      	ldr	r3, [r5, #0]
 8022458:	2b00      	cmp	r3, #0
 802245a:	d0c6      	beq.n	80223ea <__sflush_r+0x32>
 802245c:	2b1d      	cmp	r3, #29
 802245e:	d001      	beq.n	8022464 <__sflush_r+0xac>
 8022460:	2b16      	cmp	r3, #22
 8022462:	d11e      	bne.n	80224a2 <__sflush_r+0xea>
 8022464:	602f      	str	r7, [r5, #0]
 8022466:	2000      	movs	r0, #0
 8022468:	e022      	b.n	80224b0 <__sflush_r+0xf8>
 802246a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802246e:	b21b      	sxth	r3, r3
 8022470:	e01b      	b.n	80224aa <__sflush_r+0xf2>
 8022472:	690f      	ldr	r7, [r1, #16]
 8022474:	2f00      	cmp	r7, #0
 8022476:	d0f6      	beq.n	8022466 <__sflush_r+0xae>
 8022478:	0793      	lsls	r3, r2, #30
 802247a:	680e      	ldr	r6, [r1, #0]
 802247c:	bf08      	it	eq
 802247e:	694b      	ldreq	r3, [r1, #20]
 8022480:	600f      	str	r7, [r1, #0]
 8022482:	bf18      	it	ne
 8022484:	2300      	movne	r3, #0
 8022486:	eba6 0807 	sub.w	r8, r6, r7
 802248a:	608b      	str	r3, [r1, #8]
 802248c:	f1b8 0f00 	cmp.w	r8, #0
 8022490:	dde9      	ble.n	8022466 <__sflush_r+0xae>
 8022492:	6a21      	ldr	r1, [r4, #32]
 8022494:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8022496:	4643      	mov	r3, r8
 8022498:	463a      	mov	r2, r7
 802249a:	4628      	mov	r0, r5
 802249c:	47b0      	blx	r6
 802249e:	2800      	cmp	r0, #0
 80224a0:	dc08      	bgt.n	80224b4 <__sflush_r+0xfc>
 80224a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80224a6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80224aa:	81a3      	strh	r3, [r4, #12]
 80224ac:	f04f 30ff 	mov.w	r0, #4294967295
 80224b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80224b4:	4407      	add	r7, r0
 80224b6:	eba8 0800 	sub.w	r8, r8, r0
 80224ba:	e7e7      	b.n	802248c <__sflush_r+0xd4>
 80224bc:	dfbffffe 	.word	0xdfbffffe

080224c0 <_fflush_r>:
 80224c0:	b538      	push	{r3, r4, r5, lr}
 80224c2:	690b      	ldr	r3, [r1, #16]
 80224c4:	4605      	mov	r5, r0
 80224c6:	460c      	mov	r4, r1
 80224c8:	b913      	cbnz	r3, 80224d0 <_fflush_r+0x10>
 80224ca:	2500      	movs	r5, #0
 80224cc:	4628      	mov	r0, r5
 80224ce:	bd38      	pop	{r3, r4, r5, pc}
 80224d0:	b118      	cbz	r0, 80224da <_fflush_r+0x1a>
 80224d2:	6a03      	ldr	r3, [r0, #32]
 80224d4:	b90b      	cbnz	r3, 80224da <_fflush_r+0x1a>
 80224d6:	f7ff fd0b 	bl	8021ef0 <__sinit>
 80224da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80224de:	2b00      	cmp	r3, #0
 80224e0:	d0f3      	beq.n	80224ca <_fflush_r+0xa>
 80224e2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80224e4:	07d0      	lsls	r0, r2, #31
 80224e6:	d404      	bmi.n	80224f2 <_fflush_r+0x32>
 80224e8:	0599      	lsls	r1, r3, #22
 80224ea:	d402      	bmi.n	80224f2 <_fflush_r+0x32>
 80224ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80224ee:	f7ff fe42 	bl	8022176 <__retarget_lock_acquire_recursive>
 80224f2:	4628      	mov	r0, r5
 80224f4:	4621      	mov	r1, r4
 80224f6:	f7ff ff5f 	bl	80223b8 <__sflush_r>
 80224fa:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80224fc:	07da      	lsls	r2, r3, #31
 80224fe:	4605      	mov	r5, r0
 8022500:	d4e4      	bmi.n	80224cc <_fflush_r+0xc>
 8022502:	89a3      	ldrh	r3, [r4, #12]
 8022504:	059b      	lsls	r3, r3, #22
 8022506:	d4e1      	bmi.n	80224cc <_fflush_r+0xc>
 8022508:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802250a:	f7ff fe35 	bl	8022178 <__retarget_lock_release_recursive>
 802250e:	e7dd      	b.n	80224cc <_fflush_r+0xc>

08022510 <fiprintf>:
 8022510:	b40e      	push	{r1, r2, r3}
 8022512:	b503      	push	{r0, r1, lr}
 8022514:	4601      	mov	r1, r0
 8022516:	ab03      	add	r3, sp, #12
 8022518:	4805      	ldr	r0, [pc, #20]	@ (8022530 <fiprintf+0x20>)
 802251a:	f853 2b04 	ldr.w	r2, [r3], #4
 802251e:	6800      	ldr	r0, [r0, #0]
 8022520:	9301      	str	r3, [sp, #4]
 8022522:	f000 f847 	bl	80225b4 <_vfiprintf_r>
 8022526:	b002      	add	sp, #8
 8022528:	f85d eb04 	ldr.w	lr, [sp], #4
 802252c:	b003      	add	sp, #12
 802252e:	4770      	bx	lr
 8022530:	20000038 	.word	0x20000038

08022534 <_sbrk_r>:
 8022534:	b538      	push	{r3, r4, r5, lr}
 8022536:	4d06      	ldr	r5, [pc, #24]	@ (8022550 <_sbrk_r+0x1c>)
 8022538:	2300      	movs	r3, #0
 802253a:	4604      	mov	r4, r0
 802253c:	4608      	mov	r0, r1
 802253e:	602b      	str	r3, [r5, #0]
 8022540:	f7df fee8 	bl	8002314 <_sbrk>
 8022544:	1c43      	adds	r3, r0, #1
 8022546:	d102      	bne.n	802254e <_sbrk_r+0x1a>
 8022548:	682b      	ldr	r3, [r5, #0]
 802254a:	b103      	cbz	r3, 802254e <_sbrk_r+0x1a>
 802254c:	6023      	str	r3, [r4, #0]
 802254e:	bd38      	pop	{r3, r4, r5, pc}
 8022550:	20002574 	.word	0x20002574

08022554 <abort>:
 8022554:	b508      	push	{r3, lr}
 8022556:	2006      	movs	r0, #6
 8022558:	f000 fb8e 	bl	8022c78 <raise>
 802255c:	2001      	movs	r0, #1
 802255e:	f7df fe61 	bl	8002224 <_exit>

08022562 <__sfputc_r>:
 8022562:	6893      	ldr	r3, [r2, #8]
 8022564:	3b01      	subs	r3, #1
 8022566:	2b00      	cmp	r3, #0
 8022568:	b410      	push	{r4}
 802256a:	6093      	str	r3, [r2, #8]
 802256c:	da08      	bge.n	8022580 <__sfputc_r+0x1e>
 802256e:	6994      	ldr	r4, [r2, #24]
 8022570:	42a3      	cmp	r3, r4
 8022572:	db01      	blt.n	8022578 <__sfputc_r+0x16>
 8022574:	290a      	cmp	r1, #10
 8022576:	d103      	bne.n	8022580 <__sfputc_r+0x1e>
 8022578:	f85d 4b04 	ldr.w	r4, [sp], #4
 802257c:	f000 bac0 	b.w	8022b00 <__swbuf_r>
 8022580:	6813      	ldr	r3, [r2, #0]
 8022582:	1c58      	adds	r0, r3, #1
 8022584:	6010      	str	r0, [r2, #0]
 8022586:	7019      	strb	r1, [r3, #0]
 8022588:	4608      	mov	r0, r1
 802258a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802258e:	4770      	bx	lr

08022590 <__sfputs_r>:
 8022590:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022592:	4606      	mov	r6, r0
 8022594:	460f      	mov	r7, r1
 8022596:	4614      	mov	r4, r2
 8022598:	18d5      	adds	r5, r2, r3
 802259a:	42ac      	cmp	r4, r5
 802259c:	d101      	bne.n	80225a2 <__sfputs_r+0x12>
 802259e:	2000      	movs	r0, #0
 80225a0:	e007      	b.n	80225b2 <__sfputs_r+0x22>
 80225a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80225a6:	463a      	mov	r2, r7
 80225a8:	4630      	mov	r0, r6
 80225aa:	f7ff ffda 	bl	8022562 <__sfputc_r>
 80225ae:	1c43      	adds	r3, r0, #1
 80225b0:	d1f3      	bne.n	802259a <__sfputs_r+0xa>
 80225b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080225b4 <_vfiprintf_r>:
 80225b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80225b8:	460d      	mov	r5, r1
 80225ba:	b09d      	sub	sp, #116	@ 0x74
 80225bc:	4614      	mov	r4, r2
 80225be:	4698      	mov	r8, r3
 80225c0:	4606      	mov	r6, r0
 80225c2:	b118      	cbz	r0, 80225cc <_vfiprintf_r+0x18>
 80225c4:	6a03      	ldr	r3, [r0, #32]
 80225c6:	b90b      	cbnz	r3, 80225cc <_vfiprintf_r+0x18>
 80225c8:	f7ff fc92 	bl	8021ef0 <__sinit>
 80225cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80225ce:	07d9      	lsls	r1, r3, #31
 80225d0:	d405      	bmi.n	80225de <_vfiprintf_r+0x2a>
 80225d2:	89ab      	ldrh	r3, [r5, #12]
 80225d4:	059a      	lsls	r2, r3, #22
 80225d6:	d402      	bmi.n	80225de <_vfiprintf_r+0x2a>
 80225d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80225da:	f7ff fdcc 	bl	8022176 <__retarget_lock_acquire_recursive>
 80225de:	89ab      	ldrh	r3, [r5, #12]
 80225e0:	071b      	lsls	r3, r3, #28
 80225e2:	d501      	bpl.n	80225e8 <_vfiprintf_r+0x34>
 80225e4:	692b      	ldr	r3, [r5, #16]
 80225e6:	b99b      	cbnz	r3, 8022610 <_vfiprintf_r+0x5c>
 80225e8:	4629      	mov	r1, r5
 80225ea:	4630      	mov	r0, r6
 80225ec:	f000 fac6 	bl	8022b7c <__swsetup_r>
 80225f0:	b170      	cbz	r0, 8022610 <_vfiprintf_r+0x5c>
 80225f2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80225f4:	07dc      	lsls	r4, r3, #31
 80225f6:	d504      	bpl.n	8022602 <_vfiprintf_r+0x4e>
 80225f8:	f04f 30ff 	mov.w	r0, #4294967295
 80225fc:	b01d      	add	sp, #116	@ 0x74
 80225fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022602:	89ab      	ldrh	r3, [r5, #12]
 8022604:	0598      	lsls	r0, r3, #22
 8022606:	d4f7      	bmi.n	80225f8 <_vfiprintf_r+0x44>
 8022608:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802260a:	f7ff fdb5 	bl	8022178 <__retarget_lock_release_recursive>
 802260e:	e7f3      	b.n	80225f8 <_vfiprintf_r+0x44>
 8022610:	2300      	movs	r3, #0
 8022612:	9309      	str	r3, [sp, #36]	@ 0x24
 8022614:	2320      	movs	r3, #32
 8022616:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802261a:	f8cd 800c 	str.w	r8, [sp, #12]
 802261e:	2330      	movs	r3, #48	@ 0x30
 8022620:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80227d0 <_vfiprintf_r+0x21c>
 8022624:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8022628:	f04f 0901 	mov.w	r9, #1
 802262c:	4623      	mov	r3, r4
 802262e:	469a      	mov	sl, r3
 8022630:	f813 2b01 	ldrb.w	r2, [r3], #1
 8022634:	b10a      	cbz	r2, 802263a <_vfiprintf_r+0x86>
 8022636:	2a25      	cmp	r2, #37	@ 0x25
 8022638:	d1f9      	bne.n	802262e <_vfiprintf_r+0x7a>
 802263a:	ebba 0b04 	subs.w	fp, sl, r4
 802263e:	d00b      	beq.n	8022658 <_vfiprintf_r+0xa4>
 8022640:	465b      	mov	r3, fp
 8022642:	4622      	mov	r2, r4
 8022644:	4629      	mov	r1, r5
 8022646:	4630      	mov	r0, r6
 8022648:	f7ff ffa2 	bl	8022590 <__sfputs_r>
 802264c:	3001      	adds	r0, #1
 802264e:	f000 80a7 	beq.w	80227a0 <_vfiprintf_r+0x1ec>
 8022652:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8022654:	445a      	add	r2, fp
 8022656:	9209      	str	r2, [sp, #36]	@ 0x24
 8022658:	f89a 3000 	ldrb.w	r3, [sl]
 802265c:	2b00      	cmp	r3, #0
 802265e:	f000 809f 	beq.w	80227a0 <_vfiprintf_r+0x1ec>
 8022662:	2300      	movs	r3, #0
 8022664:	f04f 32ff 	mov.w	r2, #4294967295
 8022668:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802266c:	f10a 0a01 	add.w	sl, sl, #1
 8022670:	9304      	str	r3, [sp, #16]
 8022672:	9307      	str	r3, [sp, #28]
 8022674:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022678:	931a      	str	r3, [sp, #104]	@ 0x68
 802267a:	4654      	mov	r4, sl
 802267c:	2205      	movs	r2, #5
 802267e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8022682:	4853      	ldr	r0, [pc, #332]	@ (80227d0 <_vfiprintf_r+0x21c>)
 8022684:	f7dd fe44 	bl	8000310 <memchr>
 8022688:	9a04      	ldr	r2, [sp, #16]
 802268a:	b9d8      	cbnz	r0, 80226c4 <_vfiprintf_r+0x110>
 802268c:	06d1      	lsls	r1, r2, #27
 802268e:	bf44      	itt	mi
 8022690:	2320      	movmi	r3, #32
 8022692:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022696:	0713      	lsls	r3, r2, #28
 8022698:	bf44      	itt	mi
 802269a:	232b      	movmi	r3, #43	@ 0x2b
 802269c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80226a0:	f89a 3000 	ldrb.w	r3, [sl]
 80226a4:	2b2a      	cmp	r3, #42	@ 0x2a
 80226a6:	d015      	beq.n	80226d4 <_vfiprintf_r+0x120>
 80226a8:	9a07      	ldr	r2, [sp, #28]
 80226aa:	4654      	mov	r4, sl
 80226ac:	2000      	movs	r0, #0
 80226ae:	f04f 0c0a 	mov.w	ip, #10
 80226b2:	4621      	mov	r1, r4
 80226b4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80226b8:	3b30      	subs	r3, #48	@ 0x30
 80226ba:	2b09      	cmp	r3, #9
 80226bc:	d94b      	bls.n	8022756 <_vfiprintf_r+0x1a2>
 80226be:	b1b0      	cbz	r0, 80226ee <_vfiprintf_r+0x13a>
 80226c0:	9207      	str	r2, [sp, #28]
 80226c2:	e014      	b.n	80226ee <_vfiprintf_r+0x13a>
 80226c4:	eba0 0308 	sub.w	r3, r0, r8
 80226c8:	fa09 f303 	lsl.w	r3, r9, r3
 80226cc:	4313      	orrs	r3, r2
 80226ce:	9304      	str	r3, [sp, #16]
 80226d0:	46a2      	mov	sl, r4
 80226d2:	e7d2      	b.n	802267a <_vfiprintf_r+0xc6>
 80226d4:	9b03      	ldr	r3, [sp, #12]
 80226d6:	1d19      	adds	r1, r3, #4
 80226d8:	681b      	ldr	r3, [r3, #0]
 80226da:	9103      	str	r1, [sp, #12]
 80226dc:	2b00      	cmp	r3, #0
 80226de:	bfbb      	ittet	lt
 80226e0:	425b      	neglt	r3, r3
 80226e2:	f042 0202 	orrlt.w	r2, r2, #2
 80226e6:	9307      	strge	r3, [sp, #28]
 80226e8:	9307      	strlt	r3, [sp, #28]
 80226ea:	bfb8      	it	lt
 80226ec:	9204      	strlt	r2, [sp, #16]
 80226ee:	7823      	ldrb	r3, [r4, #0]
 80226f0:	2b2e      	cmp	r3, #46	@ 0x2e
 80226f2:	d10a      	bne.n	802270a <_vfiprintf_r+0x156>
 80226f4:	7863      	ldrb	r3, [r4, #1]
 80226f6:	2b2a      	cmp	r3, #42	@ 0x2a
 80226f8:	d132      	bne.n	8022760 <_vfiprintf_r+0x1ac>
 80226fa:	9b03      	ldr	r3, [sp, #12]
 80226fc:	1d1a      	adds	r2, r3, #4
 80226fe:	681b      	ldr	r3, [r3, #0]
 8022700:	9203      	str	r2, [sp, #12]
 8022702:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8022706:	3402      	adds	r4, #2
 8022708:	9305      	str	r3, [sp, #20]
 802270a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80227e0 <_vfiprintf_r+0x22c>
 802270e:	7821      	ldrb	r1, [r4, #0]
 8022710:	2203      	movs	r2, #3
 8022712:	4650      	mov	r0, sl
 8022714:	f7dd fdfc 	bl	8000310 <memchr>
 8022718:	b138      	cbz	r0, 802272a <_vfiprintf_r+0x176>
 802271a:	9b04      	ldr	r3, [sp, #16]
 802271c:	eba0 000a 	sub.w	r0, r0, sl
 8022720:	2240      	movs	r2, #64	@ 0x40
 8022722:	4082      	lsls	r2, r0
 8022724:	4313      	orrs	r3, r2
 8022726:	3401      	adds	r4, #1
 8022728:	9304      	str	r3, [sp, #16]
 802272a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802272e:	4829      	ldr	r0, [pc, #164]	@ (80227d4 <_vfiprintf_r+0x220>)
 8022730:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8022734:	2206      	movs	r2, #6
 8022736:	f7dd fdeb 	bl	8000310 <memchr>
 802273a:	2800      	cmp	r0, #0
 802273c:	d03f      	beq.n	80227be <_vfiprintf_r+0x20a>
 802273e:	4b26      	ldr	r3, [pc, #152]	@ (80227d8 <_vfiprintf_r+0x224>)
 8022740:	bb1b      	cbnz	r3, 802278a <_vfiprintf_r+0x1d6>
 8022742:	9b03      	ldr	r3, [sp, #12]
 8022744:	3307      	adds	r3, #7
 8022746:	f023 0307 	bic.w	r3, r3, #7
 802274a:	3308      	adds	r3, #8
 802274c:	9303      	str	r3, [sp, #12]
 802274e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022750:	443b      	add	r3, r7
 8022752:	9309      	str	r3, [sp, #36]	@ 0x24
 8022754:	e76a      	b.n	802262c <_vfiprintf_r+0x78>
 8022756:	fb0c 3202 	mla	r2, ip, r2, r3
 802275a:	460c      	mov	r4, r1
 802275c:	2001      	movs	r0, #1
 802275e:	e7a8      	b.n	80226b2 <_vfiprintf_r+0xfe>
 8022760:	2300      	movs	r3, #0
 8022762:	3401      	adds	r4, #1
 8022764:	9305      	str	r3, [sp, #20]
 8022766:	4619      	mov	r1, r3
 8022768:	f04f 0c0a 	mov.w	ip, #10
 802276c:	4620      	mov	r0, r4
 802276e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8022772:	3a30      	subs	r2, #48	@ 0x30
 8022774:	2a09      	cmp	r2, #9
 8022776:	d903      	bls.n	8022780 <_vfiprintf_r+0x1cc>
 8022778:	2b00      	cmp	r3, #0
 802277a:	d0c6      	beq.n	802270a <_vfiprintf_r+0x156>
 802277c:	9105      	str	r1, [sp, #20]
 802277e:	e7c4      	b.n	802270a <_vfiprintf_r+0x156>
 8022780:	fb0c 2101 	mla	r1, ip, r1, r2
 8022784:	4604      	mov	r4, r0
 8022786:	2301      	movs	r3, #1
 8022788:	e7f0      	b.n	802276c <_vfiprintf_r+0x1b8>
 802278a:	ab03      	add	r3, sp, #12
 802278c:	9300      	str	r3, [sp, #0]
 802278e:	462a      	mov	r2, r5
 8022790:	4b12      	ldr	r3, [pc, #72]	@ (80227dc <_vfiprintf_r+0x228>)
 8022792:	a904      	add	r1, sp, #16
 8022794:	4630      	mov	r0, r6
 8022796:	f3af 8000 	nop.w
 802279a:	4607      	mov	r7, r0
 802279c:	1c78      	adds	r0, r7, #1
 802279e:	d1d6      	bne.n	802274e <_vfiprintf_r+0x19a>
 80227a0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80227a2:	07d9      	lsls	r1, r3, #31
 80227a4:	d405      	bmi.n	80227b2 <_vfiprintf_r+0x1fe>
 80227a6:	89ab      	ldrh	r3, [r5, #12]
 80227a8:	059a      	lsls	r2, r3, #22
 80227aa:	d402      	bmi.n	80227b2 <_vfiprintf_r+0x1fe>
 80227ac:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80227ae:	f7ff fce3 	bl	8022178 <__retarget_lock_release_recursive>
 80227b2:	89ab      	ldrh	r3, [r5, #12]
 80227b4:	065b      	lsls	r3, r3, #25
 80227b6:	f53f af1f 	bmi.w	80225f8 <_vfiprintf_r+0x44>
 80227ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80227bc:	e71e      	b.n	80225fc <_vfiprintf_r+0x48>
 80227be:	ab03      	add	r3, sp, #12
 80227c0:	9300      	str	r3, [sp, #0]
 80227c2:	462a      	mov	r2, r5
 80227c4:	4b05      	ldr	r3, [pc, #20]	@ (80227dc <_vfiprintf_r+0x228>)
 80227c6:	a904      	add	r1, sp, #16
 80227c8:	4630      	mov	r0, r6
 80227ca:	f000 f879 	bl	80228c0 <_printf_i>
 80227ce:	e7e4      	b.n	802279a <_vfiprintf_r+0x1e6>
 80227d0:	080265e8 	.word	0x080265e8
 80227d4:	080265f2 	.word	0x080265f2
 80227d8:	00000000 	.word	0x00000000
 80227dc:	08022591 	.word	0x08022591
 80227e0:	080265ee 	.word	0x080265ee

080227e4 <_printf_common>:
 80227e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80227e8:	4616      	mov	r6, r2
 80227ea:	4698      	mov	r8, r3
 80227ec:	688a      	ldr	r2, [r1, #8]
 80227ee:	690b      	ldr	r3, [r1, #16]
 80227f0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80227f4:	4293      	cmp	r3, r2
 80227f6:	bfb8      	it	lt
 80227f8:	4613      	movlt	r3, r2
 80227fa:	6033      	str	r3, [r6, #0]
 80227fc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8022800:	4607      	mov	r7, r0
 8022802:	460c      	mov	r4, r1
 8022804:	b10a      	cbz	r2, 802280a <_printf_common+0x26>
 8022806:	3301      	adds	r3, #1
 8022808:	6033      	str	r3, [r6, #0]
 802280a:	6823      	ldr	r3, [r4, #0]
 802280c:	0699      	lsls	r1, r3, #26
 802280e:	bf42      	ittt	mi
 8022810:	6833      	ldrmi	r3, [r6, #0]
 8022812:	3302      	addmi	r3, #2
 8022814:	6033      	strmi	r3, [r6, #0]
 8022816:	6825      	ldr	r5, [r4, #0]
 8022818:	f015 0506 	ands.w	r5, r5, #6
 802281c:	d106      	bne.n	802282c <_printf_common+0x48>
 802281e:	f104 0a19 	add.w	sl, r4, #25
 8022822:	68e3      	ldr	r3, [r4, #12]
 8022824:	6832      	ldr	r2, [r6, #0]
 8022826:	1a9b      	subs	r3, r3, r2
 8022828:	42ab      	cmp	r3, r5
 802282a:	dc26      	bgt.n	802287a <_printf_common+0x96>
 802282c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8022830:	6822      	ldr	r2, [r4, #0]
 8022832:	3b00      	subs	r3, #0
 8022834:	bf18      	it	ne
 8022836:	2301      	movne	r3, #1
 8022838:	0692      	lsls	r2, r2, #26
 802283a:	d42b      	bmi.n	8022894 <_printf_common+0xb0>
 802283c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022840:	4641      	mov	r1, r8
 8022842:	4638      	mov	r0, r7
 8022844:	47c8      	blx	r9
 8022846:	3001      	adds	r0, #1
 8022848:	d01e      	beq.n	8022888 <_printf_common+0xa4>
 802284a:	6823      	ldr	r3, [r4, #0]
 802284c:	6922      	ldr	r2, [r4, #16]
 802284e:	f003 0306 	and.w	r3, r3, #6
 8022852:	2b04      	cmp	r3, #4
 8022854:	bf02      	ittt	eq
 8022856:	68e5      	ldreq	r5, [r4, #12]
 8022858:	6833      	ldreq	r3, [r6, #0]
 802285a:	1aed      	subeq	r5, r5, r3
 802285c:	68a3      	ldr	r3, [r4, #8]
 802285e:	bf0c      	ite	eq
 8022860:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8022864:	2500      	movne	r5, #0
 8022866:	4293      	cmp	r3, r2
 8022868:	bfc4      	itt	gt
 802286a:	1a9b      	subgt	r3, r3, r2
 802286c:	18ed      	addgt	r5, r5, r3
 802286e:	2600      	movs	r6, #0
 8022870:	341a      	adds	r4, #26
 8022872:	42b5      	cmp	r5, r6
 8022874:	d11a      	bne.n	80228ac <_printf_common+0xc8>
 8022876:	2000      	movs	r0, #0
 8022878:	e008      	b.n	802288c <_printf_common+0xa8>
 802287a:	2301      	movs	r3, #1
 802287c:	4652      	mov	r2, sl
 802287e:	4641      	mov	r1, r8
 8022880:	4638      	mov	r0, r7
 8022882:	47c8      	blx	r9
 8022884:	3001      	adds	r0, #1
 8022886:	d103      	bne.n	8022890 <_printf_common+0xac>
 8022888:	f04f 30ff 	mov.w	r0, #4294967295
 802288c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022890:	3501      	adds	r5, #1
 8022892:	e7c6      	b.n	8022822 <_printf_common+0x3e>
 8022894:	18e1      	adds	r1, r4, r3
 8022896:	1c5a      	adds	r2, r3, #1
 8022898:	2030      	movs	r0, #48	@ 0x30
 802289a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802289e:	4422      	add	r2, r4
 80228a0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80228a4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80228a8:	3302      	adds	r3, #2
 80228aa:	e7c7      	b.n	802283c <_printf_common+0x58>
 80228ac:	2301      	movs	r3, #1
 80228ae:	4622      	mov	r2, r4
 80228b0:	4641      	mov	r1, r8
 80228b2:	4638      	mov	r0, r7
 80228b4:	47c8      	blx	r9
 80228b6:	3001      	adds	r0, #1
 80228b8:	d0e6      	beq.n	8022888 <_printf_common+0xa4>
 80228ba:	3601      	adds	r6, #1
 80228bc:	e7d9      	b.n	8022872 <_printf_common+0x8e>
	...

080228c0 <_printf_i>:
 80228c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80228c4:	7e0f      	ldrb	r7, [r1, #24]
 80228c6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80228c8:	2f78      	cmp	r7, #120	@ 0x78
 80228ca:	4691      	mov	r9, r2
 80228cc:	4680      	mov	r8, r0
 80228ce:	460c      	mov	r4, r1
 80228d0:	469a      	mov	sl, r3
 80228d2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80228d6:	d807      	bhi.n	80228e8 <_printf_i+0x28>
 80228d8:	2f62      	cmp	r7, #98	@ 0x62
 80228da:	d80a      	bhi.n	80228f2 <_printf_i+0x32>
 80228dc:	2f00      	cmp	r7, #0
 80228de:	f000 80d2 	beq.w	8022a86 <_printf_i+0x1c6>
 80228e2:	2f58      	cmp	r7, #88	@ 0x58
 80228e4:	f000 80b9 	beq.w	8022a5a <_printf_i+0x19a>
 80228e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80228ec:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80228f0:	e03a      	b.n	8022968 <_printf_i+0xa8>
 80228f2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80228f6:	2b15      	cmp	r3, #21
 80228f8:	d8f6      	bhi.n	80228e8 <_printf_i+0x28>
 80228fa:	a101      	add	r1, pc, #4	@ (adr r1, 8022900 <_printf_i+0x40>)
 80228fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8022900:	08022959 	.word	0x08022959
 8022904:	0802296d 	.word	0x0802296d
 8022908:	080228e9 	.word	0x080228e9
 802290c:	080228e9 	.word	0x080228e9
 8022910:	080228e9 	.word	0x080228e9
 8022914:	080228e9 	.word	0x080228e9
 8022918:	0802296d 	.word	0x0802296d
 802291c:	080228e9 	.word	0x080228e9
 8022920:	080228e9 	.word	0x080228e9
 8022924:	080228e9 	.word	0x080228e9
 8022928:	080228e9 	.word	0x080228e9
 802292c:	08022a6d 	.word	0x08022a6d
 8022930:	08022997 	.word	0x08022997
 8022934:	08022a27 	.word	0x08022a27
 8022938:	080228e9 	.word	0x080228e9
 802293c:	080228e9 	.word	0x080228e9
 8022940:	08022a8f 	.word	0x08022a8f
 8022944:	080228e9 	.word	0x080228e9
 8022948:	08022997 	.word	0x08022997
 802294c:	080228e9 	.word	0x080228e9
 8022950:	080228e9 	.word	0x080228e9
 8022954:	08022a2f 	.word	0x08022a2f
 8022958:	6833      	ldr	r3, [r6, #0]
 802295a:	1d1a      	adds	r2, r3, #4
 802295c:	681b      	ldr	r3, [r3, #0]
 802295e:	6032      	str	r2, [r6, #0]
 8022960:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8022964:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022968:	2301      	movs	r3, #1
 802296a:	e09d      	b.n	8022aa8 <_printf_i+0x1e8>
 802296c:	6833      	ldr	r3, [r6, #0]
 802296e:	6820      	ldr	r0, [r4, #0]
 8022970:	1d19      	adds	r1, r3, #4
 8022972:	6031      	str	r1, [r6, #0]
 8022974:	0606      	lsls	r6, r0, #24
 8022976:	d501      	bpl.n	802297c <_printf_i+0xbc>
 8022978:	681d      	ldr	r5, [r3, #0]
 802297a:	e003      	b.n	8022984 <_printf_i+0xc4>
 802297c:	0645      	lsls	r5, r0, #25
 802297e:	d5fb      	bpl.n	8022978 <_printf_i+0xb8>
 8022980:	f9b3 5000 	ldrsh.w	r5, [r3]
 8022984:	2d00      	cmp	r5, #0
 8022986:	da03      	bge.n	8022990 <_printf_i+0xd0>
 8022988:	232d      	movs	r3, #45	@ 0x2d
 802298a:	426d      	negs	r5, r5
 802298c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022990:	4859      	ldr	r0, [pc, #356]	@ (8022af8 <_printf_i+0x238>)
 8022992:	230a      	movs	r3, #10
 8022994:	e011      	b.n	80229ba <_printf_i+0xfa>
 8022996:	6821      	ldr	r1, [r4, #0]
 8022998:	6833      	ldr	r3, [r6, #0]
 802299a:	0608      	lsls	r0, r1, #24
 802299c:	f853 5b04 	ldr.w	r5, [r3], #4
 80229a0:	d402      	bmi.n	80229a8 <_printf_i+0xe8>
 80229a2:	0649      	lsls	r1, r1, #25
 80229a4:	bf48      	it	mi
 80229a6:	b2ad      	uxthmi	r5, r5
 80229a8:	2f6f      	cmp	r7, #111	@ 0x6f
 80229aa:	4853      	ldr	r0, [pc, #332]	@ (8022af8 <_printf_i+0x238>)
 80229ac:	6033      	str	r3, [r6, #0]
 80229ae:	bf14      	ite	ne
 80229b0:	230a      	movne	r3, #10
 80229b2:	2308      	moveq	r3, #8
 80229b4:	2100      	movs	r1, #0
 80229b6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80229ba:	6866      	ldr	r6, [r4, #4]
 80229bc:	60a6      	str	r6, [r4, #8]
 80229be:	2e00      	cmp	r6, #0
 80229c0:	bfa2      	ittt	ge
 80229c2:	6821      	ldrge	r1, [r4, #0]
 80229c4:	f021 0104 	bicge.w	r1, r1, #4
 80229c8:	6021      	strge	r1, [r4, #0]
 80229ca:	b90d      	cbnz	r5, 80229d0 <_printf_i+0x110>
 80229cc:	2e00      	cmp	r6, #0
 80229ce:	d04b      	beq.n	8022a68 <_printf_i+0x1a8>
 80229d0:	4616      	mov	r6, r2
 80229d2:	fbb5 f1f3 	udiv	r1, r5, r3
 80229d6:	fb03 5711 	mls	r7, r3, r1, r5
 80229da:	5dc7      	ldrb	r7, [r0, r7]
 80229dc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80229e0:	462f      	mov	r7, r5
 80229e2:	42bb      	cmp	r3, r7
 80229e4:	460d      	mov	r5, r1
 80229e6:	d9f4      	bls.n	80229d2 <_printf_i+0x112>
 80229e8:	2b08      	cmp	r3, #8
 80229ea:	d10b      	bne.n	8022a04 <_printf_i+0x144>
 80229ec:	6823      	ldr	r3, [r4, #0]
 80229ee:	07df      	lsls	r7, r3, #31
 80229f0:	d508      	bpl.n	8022a04 <_printf_i+0x144>
 80229f2:	6923      	ldr	r3, [r4, #16]
 80229f4:	6861      	ldr	r1, [r4, #4]
 80229f6:	4299      	cmp	r1, r3
 80229f8:	bfde      	ittt	le
 80229fa:	2330      	movle	r3, #48	@ 0x30
 80229fc:	f806 3c01 	strble.w	r3, [r6, #-1]
 8022a00:	f106 36ff 	addle.w	r6, r6, #4294967295
 8022a04:	1b92      	subs	r2, r2, r6
 8022a06:	6122      	str	r2, [r4, #16]
 8022a08:	f8cd a000 	str.w	sl, [sp]
 8022a0c:	464b      	mov	r3, r9
 8022a0e:	aa03      	add	r2, sp, #12
 8022a10:	4621      	mov	r1, r4
 8022a12:	4640      	mov	r0, r8
 8022a14:	f7ff fee6 	bl	80227e4 <_printf_common>
 8022a18:	3001      	adds	r0, #1
 8022a1a:	d14a      	bne.n	8022ab2 <_printf_i+0x1f2>
 8022a1c:	f04f 30ff 	mov.w	r0, #4294967295
 8022a20:	b004      	add	sp, #16
 8022a22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022a26:	6823      	ldr	r3, [r4, #0]
 8022a28:	f043 0320 	orr.w	r3, r3, #32
 8022a2c:	6023      	str	r3, [r4, #0]
 8022a2e:	4833      	ldr	r0, [pc, #204]	@ (8022afc <_printf_i+0x23c>)
 8022a30:	2778      	movs	r7, #120	@ 0x78
 8022a32:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8022a36:	6823      	ldr	r3, [r4, #0]
 8022a38:	6831      	ldr	r1, [r6, #0]
 8022a3a:	061f      	lsls	r7, r3, #24
 8022a3c:	f851 5b04 	ldr.w	r5, [r1], #4
 8022a40:	d402      	bmi.n	8022a48 <_printf_i+0x188>
 8022a42:	065f      	lsls	r7, r3, #25
 8022a44:	bf48      	it	mi
 8022a46:	b2ad      	uxthmi	r5, r5
 8022a48:	6031      	str	r1, [r6, #0]
 8022a4a:	07d9      	lsls	r1, r3, #31
 8022a4c:	bf44      	itt	mi
 8022a4e:	f043 0320 	orrmi.w	r3, r3, #32
 8022a52:	6023      	strmi	r3, [r4, #0]
 8022a54:	b11d      	cbz	r5, 8022a5e <_printf_i+0x19e>
 8022a56:	2310      	movs	r3, #16
 8022a58:	e7ac      	b.n	80229b4 <_printf_i+0xf4>
 8022a5a:	4827      	ldr	r0, [pc, #156]	@ (8022af8 <_printf_i+0x238>)
 8022a5c:	e7e9      	b.n	8022a32 <_printf_i+0x172>
 8022a5e:	6823      	ldr	r3, [r4, #0]
 8022a60:	f023 0320 	bic.w	r3, r3, #32
 8022a64:	6023      	str	r3, [r4, #0]
 8022a66:	e7f6      	b.n	8022a56 <_printf_i+0x196>
 8022a68:	4616      	mov	r6, r2
 8022a6a:	e7bd      	b.n	80229e8 <_printf_i+0x128>
 8022a6c:	6833      	ldr	r3, [r6, #0]
 8022a6e:	6825      	ldr	r5, [r4, #0]
 8022a70:	6961      	ldr	r1, [r4, #20]
 8022a72:	1d18      	adds	r0, r3, #4
 8022a74:	6030      	str	r0, [r6, #0]
 8022a76:	062e      	lsls	r6, r5, #24
 8022a78:	681b      	ldr	r3, [r3, #0]
 8022a7a:	d501      	bpl.n	8022a80 <_printf_i+0x1c0>
 8022a7c:	6019      	str	r1, [r3, #0]
 8022a7e:	e002      	b.n	8022a86 <_printf_i+0x1c6>
 8022a80:	0668      	lsls	r0, r5, #25
 8022a82:	d5fb      	bpl.n	8022a7c <_printf_i+0x1bc>
 8022a84:	8019      	strh	r1, [r3, #0]
 8022a86:	2300      	movs	r3, #0
 8022a88:	6123      	str	r3, [r4, #16]
 8022a8a:	4616      	mov	r6, r2
 8022a8c:	e7bc      	b.n	8022a08 <_printf_i+0x148>
 8022a8e:	6833      	ldr	r3, [r6, #0]
 8022a90:	1d1a      	adds	r2, r3, #4
 8022a92:	6032      	str	r2, [r6, #0]
 8022a94:	681e      	ldr	r6, [r3, #0]
 8022a96:	6862      	ldr	r2, [r4, #4]
 8022a98:	2100      	movs	r1, #0
 8022a9a:	4630      	mov	r0, r6
 8022a9c:	f7dd fc38 	bl	8000310 <memchr>
 8022aa0:	b108      	cbz	r0, 8022aa6 <_printf_i+0x1e6>
 8022aa2:	1b80      	subs	r0, r0, r6
 8022aa4:	6060      	str	r0, [r4, #4]
 8022aa6:	6863      	ldr	r3, [r4, #4]
 8022aa8:	6123      	str	r3, [r4, #16]
 8022aaa:	2300      	movs	r3, #0
 8022aac:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022ab0:	e7aa      	b.n	8022a08 <_printf_i+0x148>
 8022ab2:	6923      	ldr	r3, [r4, #16]
 8022ab4:	4632      	mov	r2, r6
 8022ab6:	4649      	mov	r1, r9
 8022ab8:	4640      	mov	r0, r8
 8022aba:	47d0      	blx	sl
 8022abc:	3001      	adds	r0, #1
 8022abe:	d0ad      	beq.n	8022a1c <_printf_i+0x15c>
 8022ac0:	6823      	ldr	r3, [r4, #0]
 8022ac2:	079b      	lsls	r3, r3, #30
 8022ac4:	d413      	bmi.n	8022aee <_printf_i+0x22e>
 8022ac6:	68e0      	ldr	r0, [r4, #12]
 8022ac8:	9b03      	ldr	r3, [sp, #12]
 8022aca:	4298      	cmp	r0, r3
 8022acc:	bfb8      	it	lt
 8022ace:	4618      	movlt	r0, r3
 8022ad0:	e7a6      	b.n	8022a20 <_printf_i+0x160>
 8022ad2:	2301      	movs	r3, #1
 8022ad4:	4632      	mov	r2, r6
 8022ad6:	4649      	mov	r1, r9
 8022ad8:	4640      	mov	r0, r8
 8022ada:	47d0      	blx	sl
 8022adc:	3001      	adds	r0, #1
 8022ade:	d09d      	beq.n	8022a1c <_printf_i+0x15c>
 8022ae0:	3501      	adds	r5, #1
 8022ae2:	68e3      	ldr	r3, [r4, #12]
 8022ae4:	9903      	ldr	r1, [sp, #12]
 8022ae6:	1a5b      	subs	r3, r3, r1
 8022ae8:	42ab      	cmp	r3, r5
 8022aea:	dcf2      	bgt.n	8022ad2 <_printf_i+0x212>
 8022aec:	e7eb      	b.n	8022ac6 <_printf_i+0x206>
 8022aee:	2500      	movs	r5, #0
 8022af0:	f104 0619 	add.w	r6, r4, #25
 8022af4:	e7f5      	b.n	8022ae2 <_printf_i+0x222>
 8022af6:	bf00      	nop
 8022af8:	080265f9 	.word	0x080265f9
 8022afc:	0802660a 	.word	0x0802660a

08022b00 <__swbuf_r>:
 8022b00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022b02:	460e      	mov	r6, r1
 8022b04:	4614      	mov	r4, r2
 8022b06:	4605      	mov	r5, r0
 8022b08:	b118      	cbz	r0, 8022b12 <__swbuf_r+0x12>
 8022b0a:	6a03      	ldr	r3, [r0, #32]
 8022b0c:	b90b      	cbnz	r3, 8022b12 <__swbuf_r+0x12>
 8022b0e:	f7ff f9ef 	bl	8021ef0 <__sinit>
 8022b12:	69a3      	ldr	r3, [r4, #24]
 8022b14:	60a3      	str	r3, [r4, #8]
 8022b16:	89a3      	ldrh	r3, [r4, #12]
 8022b18:	071a      	lsls	r2, r3, #28
 8022b1a:	d501      	bpl.n	8022b20 <__swbuf_r+0x20>
 8022b1c:	6923      	ldr	r3, [r4, #16]
 8022b1e:	b943      	cbnz	r3, 8022b32 <__swbuf_r+0x32>
 8022b20:	4621      	mov	r1, r4
 8022b22:	4628      	mov	r0, r5
 8022b24:	f000 f82a 	bl	8022b7c <__swsetup_r>
 8022b28:	b118      	cbz	r0, 8022b32 <__swbuf_r+0x32>
 8022b2a:	f04f 37ff 	mov.w	r7, #4294967295
 8022b2e:	4638      	mov	r0, r7
 8022b30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8022b32:	6823      	ldr	r3, [r4, #0]
 8022b34:	6922      	ldr	r2, [r4, #16]
 8022b36:	1a98      	subs	r0, r3, r2
 8022b38:	6963      	ldr	r3, [r4, #20]
 8022b3a:	b2f6      	uxtb	r6, r6
 8022b3c:	4283      	cmp	r3, r0
 8022b3e:	4637      	mov	r7, r6
 8022b40:	dc05      	bgt.n	8022b4e <__swbuf_r+0x4e>
 8022b42:	4621      	mov	r1, r4
 8022b44:	4628      	mov	r0, r5
 8022b46:	f7ff fcbb 	bl	80224c0 <_fflush_r>
 8022b4a:	2800      	cmp	r0, #0
 8022b4c:	d1ed      	bne.n	8022b2a <__swbuf_r+0x2a>
 8022b4e:	68a3      	ldr	r3, [r4, #8]
 8022b50:	3b01      	subs	r3, #1
 8022b52:	60a3      	str	r3, [r4, #8]
 8022b54:	6823      	ldr	r3, [r4, #0]
 8022b56:	1c5a      	adds	r2, r3, #1
 8022b58:	6022      	str	r2, [r4, #0]
 8022b5a:	701e      	strb	r6, [r3, #0]
 8022b5c:	6962      	ldr	r2, [r4, #20]
 8022b5e:	1c43      	adds	r3, r0, #1
 8022b60:	429a      	cmp	r2, r3
 8022b62:	d004      	beq.n	8022b6e <__swbuf_r+0x6e>
 8022b64:	89a3      	ldrh	r3, [r4, #12]
 8022b66:	07db      	lsls	r3, r3, #31
 8022b68:	d5e1      	bpl.n	8022b2e <__swbuf_r+0x2e>
 8022b6a:	2e0a      	cmp	r6, #10
 8022b6c:	d1df      	bne.n	8022b2e <__swbuf_r+0x2e>
 8022b6e:	4621      	mov	r1, r4
 8022b70:	4628      	mov	r0, r5
 8022b72:	f7ff fca5 	bl	80224c0 <_fflush_r>
 8022b76:	2800      	cmp	r0, #0
 8022b78:	d0d9      	beq.n	8022b2e <__swbuf_r+0x2e>
 8022b7a:	e7d6      	b.n	8022b2a <__swbuf_r+0x2a>

08022b7c <__swsetup_r>:
 8022b7c:	b538      	push	{r3, r4, r5, lr}
 8022b7e:	4b29      	ldr	r3, [pc, #164]	@ (8022c24 <__swsetup_r+0xa8>)
 8022b80:	4605      	mov	r5, r0
 8022b82:	6818      	ldr	r0, [r3, #0]
 8022b84:	460c      	mov	r4, r1
 8022b86:	b118      	cbz	r0, 8022b90 <__swsetup_r+0x14>
 8022b88:	6a03      	ldr	r3, [r0, #32]
 8022b8a:	b90b      	cbnz	r3, 8022b90 <__swsetup_r+0x14>
 8022b8c:	f7ff f9b0 	bl	8021ef0 <__sinit>
 8022b90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022b94:	0719      	lsls	r1, r3, #28
 8022b96:	d422      	bmi.n	8022bde <__swsetup_r+0x62>
 8022b98:	06da      	lsls	r2, r3, #27
 8022b9a:	d407      	bmi.n	8022bac <__swsetup_r+0x30>
 8022b9c:	2209      	movs	r2, #9
 8022b9e:	602a      	str	r2, [r5, #0]
 8022ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8022ba4:	81a3      	strh	r3, [r4, #12]
 8022ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8022baa:	e033      	b.n	8022c14 <__swsetup_r+0x98>
 8022bac:	0758      	lsls	r0, r3, #29
 8022bae:	d512      	bpl.n	8022bd6 <__swsetup_r+0x5a>
 8022bb0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022bb2:	b141      	cbz	r1, 8022bc6 <__swsetup_r+0x4a>
 8022bb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8022bb8:	4299      	cmp	r1, r3
 8022bba:	d002      	beq.n	8022bc2 <__swsetup_r+0x46>
 8022bbc:	4628      	mov	r0, r5
 8022bbe:	f7ff fafb 	bl	80221b8 <_free_r>
 8022bc2:	2300      	movs	r3, #0
 8022bc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8022bc6:	89a3      	ldrh	r3, [r4, #12]
 8022bc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8022bcc:	81a3      	strh	r3, [r4, #12]
 8022bce:	2300      	movs	r3, #0
 8022bd0:	6063      	str	r3, [r4, #4]
 8022bd2:	6923      	ldr	r3, [r4, #16]
 8022bd4:	6023      	str	r3, [r4, #0]
 8022bd6:	89a3      	ldrh	r3, [r4, #12]
 8022bd8:	f043 0308 	orr.w	r3, r3, #8
 8022bdc:	81a3      	strh	r3, [r4, #12]
 8022bde:	6923      	ldr	r3, [r4, #16]
 8022be0:	b94b      	cbnz	r3, 8022bf6 <__swsetup_r+0x7a>
 8022be2:	89a3      	ldrh	r3, [r4, #12]
 8022be4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8022be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8022bec:	d003      	beq.n	8022bf6 <__swsetup_r+0x7a>
 8022bee:	4621      	mov	r1, r4
 8022bf0:	4628      	mov	r0, r5
 8022bf2:	f000 f883 	bl	8022cfc <__smakebuf_r>
 8022bf6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022bfa:	f013 0201 	ands.w	r2, r3, #1
 8022bfe:	d00a      	beq.n	8022c16 <__swsetup_r+0x9a>
 8022c00:	2200      	movs	r2, #0
 8022c02:	60a2      	str	r2, [r4, #8]
 8022c04:	6962      	ldr	r2, [r4, #20]
 8022c06:	4252      	negs	r2, r2
 8022c08:	61a2      	str	r2, [r4, #24]
 8022c0a:	6922      	ldr	r2, [r4, #16]
 8022c0c:	b942      	cbnz	r2, 8022c20 <__swsetup_r+0xa4>
 8022c0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8022c12:	d1c5      	bne.n	8022ba0 <__swsetup_r+0x24>
 8022c14:	bd38      	pop	{r3, r4, r5, pc}
 8022c16:	0799      	lsls	r1, r3, #30
 8022c18:	bf58      	it	pl
 8022c1a:	6962      	ldrpl	r2, [r4, #20]
 8022c1c:	60a2      	str	r2, [r4, #8]
 8022c1e:	e7f4      	b.n	8022c0a <__swsetup_r+0x8e>
 8022c20:	2000      	movs	r0, #0
 8022c22:	e7f7      	b.n	8022c14 <__swsetup_r+0x98>
 8022c24:	20000038 	.word	0x20000038

08022c28 <_raise_r>:
 8022c28:	291f      	cmp	r1, #31
 8022c2a:	b538      	push	{r3, r4, r5, lr}
 8022c2c:	4605      	mov	r5, r0
 8022c2e:	460c      	mov	r4, r1
 8022c30:	d904      	bls.n	8022c3c <_raise_r+0x14>
 8022c32:	2316      	movs	r3, #22
 8022c34:	6003      	str	r3, [r0, #0]
 8022c36:	f04f 30ff 	mov.w	r0, #4294967295
 8022c3a:	bd38      	pop	{r3, r4, r5, pc}
 8022c3c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8022c3e:	b112      	cbz	r2, 8022c46 <_raise_r+0x1e>
 8022c40:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8022c44:	b94b      	cbnz	r3, 8022c5a <_raise_r+0x32>
 8022c46:	4628      	mov	r0, r5
 8022c48:	f000 f830 	bl	8022cac <_getpid_r>
 8022c4c:	4622      	mov	r2, r4
 8022c4e:	4601      	mov	r1, r0
 8022c50:	4628      	mov	r0, r5
 8022c52:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8022c56:	f000 b817 	b.w	8022c88 <_kill_r>
 8022c5a:	2b01      	cmp	r3, #1
 8022c5c:	d00a      	beq.n	8022c74 <_raise_r+0x4c>
 8022c5e:	1c59      	adds	r1, r3, #1
 8022c60:	d103      	bne.n	8022c6a <_raise_r+0x42>
 8022c62:	2316      	movs	r3, #22
 8022c64:	6003      	str	r3, [r0, #0]
 8022c66:	2001      	movs	r0, #1
 8022c68:	e7e7      	b.n	8022c3a <_raise_r+0x12>
 8022c6a:	2100      	movs	r1, #0
 8022c6c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8022c70:	4620      	mov	r0, r4
 8022c72:	4798      	blx	r3
 8022c74:	2000      	movs	r0, #0
 8022c76:	e7e0      	b.n	8022c3a <_raise_r+0x12>

08022c78 <raise>:
 8022c78:	4b02      	ldr	r3, [pc, #8]	@ (8022c84 <raise+0xc>)
 8022c7a:	4601      	mov	r1, r0
 8022c7c:	6818      	ldr	r0, [r3, #0]
 8022c7e:	f7ff bfd3 	b.w	8022c28 <_raise_r>
 8022c82:	bf00      	nop
 8022c84:	20000038 	.word	0x20000038

08022c88 <_kill_r>:
 8022c88:	b538      	push	{r3, r4, r5, lr}
 8022c8a:	4d07      	ldr	r5, [pc, #28]	@ (8022ca8 <_kill_r+0x20>)
 8022c8c:	2300      	movs	r3, #0
 8022c8e:	4604      	mov	r4, r0
 8022c90:	4608      	mov	r0, r1
 8022c92:	4611      	mov	r1, r2
 8022c94:	602b      	str	r3, [r5, #0]
 8022c96:	f7df fab5 	bl	8002204 <_kill>
 8022c9a:	1c43      	adds	r3, r0, #1
 8022c9c:	d102      	bne.n	8022ca4 <_kill_r+0x1c>
 8022c9e:	682b      	ldr	r3, [r5, #0]
 8022ca0:	b103      	cbz	r3, 8022ca4 <_kill_r+0x1c>
 8022ca2:	6023      	str	r3, [r4, #0]
 8022ca4:	bd38      	pop	{r3, r4, r5, pc}
 8022ca6:	bf00      	nop
 8022ca8:	20002574 	.word	0x20002574

08022cac <_getpid_r>:
 8022cac:	f7df baa2 	b.w	80021f4 <_getpid>

08022cb0 <__swhatbuf_r>:
 8022cb0:	b570      	push	{r4, r5, r6, lr}
 8022cb2:	460c      	mov	r4, r1
 8022cb4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022cb8:	2900      	cmp	r1, #0
 8022cba:	b096      	sub	sp, #88	@ 0x58
 8022cbc:	4615      	mov	r5, r2
 8022cbe:	461e      	mov	r6, r3
 8022cc0:	da0d      	bge.n	8022cde <__swhatbuf_r+0x2e>
 8022cc2:	89a3      	ldrh	r3, [r4, #12]
 8022cc4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022cc8:	f04f 0100 	mov.w	r1, #0
 8022ccc:	bf14      	ite	ne
 8022cce:	2340      	movne	r3, #64	@ 0x40
 8022cd0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022cd4:	2000      	movs	r0, #0
 8022cd6:	6031      	str	r1, [r6, #0]
 8022cd8:	602b      	str	r3, [r5, #0]
 8022cda:	b016      	add	sp, #88	@ 0x58
 8022cdc:	bd70      	pop	{r4, r5, r6, pc}
 8022cde:	466a      	mov	r2, sp
 8022ce0:	f000 f848 	bl	8022d74 <_fstat_r>
 8022ce4:	2800      	cmp	r0, #0
 8022ce6:	dbec      	blt.n	8022cc2 <__swhatbuf_r+0x12>
 8022ce8:	9901      	ldr	r1, [sp, #4]
 8022cea:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8022cee:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022cf2:	4259      	negs	r1, r3
 8022cf4:	4159      	adcs	r1, r3
 8022cf6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8022cfa:	e7eb      	b.n	8022cd4 <__swhatbuf_r+0x24>

08022cfc <__smakebuf_r>:
 8022cfc:	898b      	ldrh	r3, [r1, #12]
 8022cfe:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022d00:	079d      	lsls	r5, r3, #30
 8022d02:	4606      	mov	r6, r0
 8022d04:	460c      	mov	r4, r1
 8022d06:	d507      	bpl.n	8022d18 <__smakebuf_r+0x1c>
 8022d08:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8022d0c:	6023      	str	r3, [r4, #0]
 8022d0e:	6123      	str	r3, [r4, #16]
 8022d10:	2301      	movs	r3, #1
 8022d12:	6163      	str	r3, [r4, #20]
 8022d14:	b003      	add	sp, #12
 8022d16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022d18:	ab01      	add	r3, sp, #4
 8022d1a:	466a      	mov	r2, sp
 8022d1c:	f7ff ffc8 	bl	8022cb0 <__swhatbuf_r>
 8022d20:	9f00      	ldr	r7, [sp, #0]
 8022d22:	4605      	mov	r5, r0
 8022d24:	4639      	mov	r1, r7
 8022d26:	4630      	mov	r0, r6
 8022d28:	f7ff faba 	bl	80222a0 <_malloc_r>
 8022d2c:	b948      	cbnz	r0, 8022d42 <__smakebuf_r+0x46>
 8022d2e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8022d32:	059a      	lsls	r2, r3, #22
 8022d34:	d4ee      	bmi.n	8022d14 <__smakebuf_r+0x18>
 8022d36:	f023 0303 	bic.w	r3, r3, #3
 8022d3a:	f043 0302 	orr.w	r3, r3, #2
 8022d3e:	81a3      	strh	r3, [r4, #12]
 8022d40:	e7e2      	b.n	8022d08 <__smakebuf_r+0xc>
 8022d42:	89a3      	ldrh	r3, [r4, #12]
 8022d44:	6020      	str	r0, [r4, #0]
 8022d46:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8022d4a:	81a3      	strh	r3, [r4, #12]
 8022d4c:	9b01      	ldr	r3, [sp, #4]
 8022d4e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8022d52:	b15b      	cbz	r3, 8022d6c <__smakebuf_r+0x70>
 8022d54:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8022d58:	4630      	mov	r0, r6
 8022d5a:	f000 f81d 	bl	8022d98 <_isatty_r>
 8022d5e:	b128      	cbz	r0, 8022d6c <__smakebuf_r+0x70>
 8022d60:	89a3      	ldrh	r3, [r4, #12]
 8022d62:	f023 0303 	bic.w	r3, r3, #3
 8022d66:	f043 0301 	orr.w	r3, r3, #1
 8022d6a:	81a3      	strh	r3, [r4, #12]
 8022d6c:	89a3      	ldrh	r3, [r4, #12]
 8022d6e:	431d      	orrs	r5, r3
 8022d70:	81a5      	strh	r5, [r4, #12]
 8022d72:	e7cf      	b.n	8022d14 <__smakebuf_r+0x18>

08022d74 <_fstat_r>:
 8022d74:	b538      	push	{r3, r4, r5, lr}
 8022d76:	4d07      	ldr	r5, [pc, #28]	@ (8022d94 <_fstat_r+0x20>)
 8022d78:	2300      	movs	r3, #0
 8022d7a:	4604      	mov	r4, r0
 8022d7c:	4608      	mov	r0, r1
 8022d7e:	4611      	mov	r1, r2
 8022d80:	602b      	str	r3, [r5, #0]
 8022d82:	f7df fa9f 	bl	80022c4 <_fstat>
 8022d86:	1c43      	adds	r3, r0, #1
 8022d88:	d102      	bne.n	8022d90 <_fstat_r+0x1c>
 8022d8a:	682b      	ldr	r3, [r5, #0]
 8022d8c:	b103      	cbz	r3, 8022d90 <_fstat_r+0x1c>
 8022d8e:	6023      	str	r3, [r4, #0]
 8022d90:	bd38      	pop	{r3, r4, r5, pc}
 8022d92:	bf00      	nop
 8022d94:	20002574 	.word	0x20002574

08022d98 <_isatty_r>:
 8022d98:	b538      	push	{r3, r4, r5, lr}
 8022d9a:	4d06      	ldr	r5, [pc, #24]	@ (8022db4 <_isatty_r+0x1c>)
 8022d9c:	2300      	movs	r3, #0
 8022d9e:	4604      	mov	r4, r0
 8022da0:	4608      	mov	r0, r1
 8022da2:	602b      	str	r3, [r5, #0]
 8022da4:	f7df fa9e 	bl	80022e4 <_isatty>
 8022da8:	1c43      	adds	r3, r0, #1
 8022daa:	d102      	bne.n	8022db2 <_isatty_r+0x1a>
 8022dac:	682b      	ldr	r3, [r5, #0]
 8022dae:	b103      	cbz	r3, 8022db2 <_isatty_r+0x1a>
 8022db0:	6023      	str	r3, [r4, #0]
 8022db2:	bd38      	pop	{r3, r4, r5, pc}
 8022db4:	20002574 	.word	0x20002574

08022db8 <_init>:
 8022db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022dba:	bf00      	nop
 8022dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022dbe:	bc08      	pop	{r3}
 8022dc0:	469e      	mov	lr, r3
 8022dc2:	4770      	bx	lr

08022dc4 <_fini>:
 8022dc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022dc6:	bf00      	nop
 8022dc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8022dca:	bc08      	pop	{r3}
 8022dcc:	469e      	mov	lr, r3
 8022dce:	4770      	bx	lr
